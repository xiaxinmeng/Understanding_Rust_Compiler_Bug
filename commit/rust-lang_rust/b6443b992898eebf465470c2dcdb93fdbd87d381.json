{"sha": "b6443b992898eebf465470c2dcdb93fdbd87d381", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NDQzYjk5Mjg5OGVlYmY0NjU0NzBjMmRjZGI5M2ZkYmQ4N2QzODE=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-20T20:03:45Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-20T20:03:45Z"}, "message": "Replace all `format!(\"{}\", foo)` calls", "tree": {"sha": "33daa76643b7613e3d069577903a4fbfdccac472", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33daa76643b7613e3d069577903a4fbfdccac472"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6443b992898eebf465470c2dcdb93fdbd87d381", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6443b992898eebf465470c2dcdb93fdbd87d381", "html_url": "https://github.com/rust-lang/rust/commit/b6443b992898eebf465470c2dcdb93fdbd87d381", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6443b992898eebf465470c2dcdb93fdbd87d381/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef4401d4acf2eb1e125b9dd01d1baef195e2f53b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef4401d4acf2eb1e125b9dd01d1baef195e2f53b", "html_url": "https://github.com/rust-lang/rust/commit/ef4401d4acf2eb1e125b9dd01d1baef195e2f53b"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "663d39cdbb2ff5ca9d4b611590e8df71de6cf30e", "filename": "src/collapsible_if.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b6443b992898eebf465470c2dcdb93fdbd87d381/src%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6443b992898eebf465470c2dcdb93fdbd87d381/src%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcollapsible_if.rs?ref=b6443b992898eebf465470c2dcdb93fdbd87d381", "patch": "@@ -14,6 +14,7 @@\n \n use rustc::lint::*;\n use rustc_front::hir::*;\n+use std::borrow::Cow;\n use syntax::codemap::Spanned;\n \n use utils::{in_macro, snippet, snippet_block, span_lint_and_then};\n@@ -95,11 +96,11 @@ fn requires_brackets(e: &Expr) -> bool {\n     }\n }\n \n-fn check_to_string(cx: &LateContext, e: &Expr) -> String {\n+fn check_to_string(cx: &LateContext, e: &Expr) -> Cow<'static, str> {\n     if requires_brackets(e) {\n-        format!(\"({})\", snippet(cx, e.span, \"..\"))\n+        format!(\"({})\", snippet(cx, e.span, \"..\")).into()\n     } else {\n-        format!(\"{}\", snippet(cx, e.span, \"..\"))\n+        snippet(cx, e.span, \"..\")\n     }\n }\n "}, {"sha": "fff73f907f07ed924e2675b90cc68b1a8df3ee43", "filename": "src/loops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6443b992898eebf465470c2dcdb93fdbd87d381/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6443b992898eebf465470c2dcdb93fdbd87d381/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=b6443b992898eebf465470c2dcdb93fdbd87d381", "patch": "@@ -245,13 +245,13 @@ impl LateLintPass for LoopsPass {\n                     let mut other_stuff = block.stmts\n                                                .iter()\n                                                .skip(1)\n-                                               .map(|stmt| format!(\"{}\", snippet(cx, stmt.span, \"..\")))\n-                                               .collect::<Vec<String>>();\n+                                               .map(|stmt| snippet(cx, stmt.span, \"..\"))\n+                                               .collect::<Vec<Cow<_>>>();\n                     if inner_stmt_expr.is_some() {\n                         // if we have a statement which has a match,\n                         if let Some(ref expr) = block.expr {\n                             // then collect the expression (without semicolon) below it\n-                            other_stuff.push(format!(\"{}\", snippet(cx, expr.span, \"..\")));\n+                            other_stuff.push(snippet(cx, expr.span, \"..\"));\n                         }\n                     }\n "}, {"sha": "1d529e175db54780286baae56b42f8c6930125dd", "filename": "src/methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b6443b992898eebf465470c2dcdb93fdbd87d381/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6443b992898eebf465470c2dcdb93fdbd87d381/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=b6443b992898eebf465470c2dcdb93fdbd87d381", "patch": "@@ -530,10 +530,10 @@ fn lint_or_fun_call(cx: &LateContext, expr: &Expr, name: &str, args: &[P<Expr>])\n             return;\n         }\n \n-        let sugg = match (fn_has_arguments, !or_has_args) {\n-            (true, _) => format!(\"|_| {}\", snippet(cx, arg.span, \"..\")),\n-            (false, false) => format!(\"|| {}\", snippet(cx, arg.span, \"..\")),\n-            (false, true) => format!(\"{}\", snippet(cx, fun.span, \"..\")),\n+        let sugg: Cow<_> = match (fn_has_arguments, !or_has_args) {\n+            (true, _) => format!(\"|_| {}\", snippet(cx, arg.span, \"..\")).into(),\n+            (false, false) => format!(\"|| {}\", snippet(cx, arg.span, \"..\")).into(),\n+            (false, true) => snippet(cx, fun.span, \"..\"),\n         };\n \n         span_lint(cx, OR_FUN_CALL, span, &format!(\"use of `{}` followed by a function call\", name))"}, {"sha": "bbed9ad4996bc1b19f2127565bcc70fea0740b00", "filename": "src/misc_early.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b6443b992898eebf465470c2dcdb93fdbd87d381/src%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6443b992898eebf465470c2dcdb93fdbd87d381/src%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc_early.rs?ref=b6443b992898eebf465470c2dcdb93fdbd87d381", "patch": "@@ -45,10 +45,7 @@ impl EarlyLintPass for MiscEarly {\n     fn check_pat(&mut self, cx: &EarlyContext, pat: &Pat) {\n         if let PatKind::Struct(ref npat, ref pfields, _) = pat.node {\n             let mut wilds = 0;\n-            let type_name = match npat.segments.last() {\n-                Some(elem) => format!(\"{}\", elem.identifier.name),\n-                None => String::new(),\n-            };\n+            let type_name = npat.segments.last().expect(\"A path must have at least one segment\").identifier.name;\n \n             for field in pfields {\n                 if field.node.pat.node == PatKind::Wild {"}, {"sha": "ea2c00bab94e7b2e86af2dcd438ea2d0f7febd4f", "filename": "src/mut_reference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6443b992898eebf465470c2dcdb93fdbd87d381/src%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6443b992898eebf465470c2dcdb93fdbd87d381/src%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_reference.rs?ref=b6443b992898eebf465470c2dcdb93fdbd87d381", "patch": "@@ -39,13 +39,13 @@ impl LateLintPass for UnnecessaryMutPassed {\n                                                            If this happened, the compiler would have \\\n                                                            aborted the compilation long ago\");\n                 if let ExprPath(_, ref path) = fn_expr.node {\n-                    check_arguments(cx, &arguments, function_type, &format!(\"{}\", path));\n+                    check_arguments(cx, &arguments, function_type, &path.to_string());\n                 }\n             }\n             ExprMethodCall(ref name, _, ref arguments) => {\n                 let method_call = MethodCall::expr(e.id);\n                 let method_type = borrowed_table.method_map.get(&method_call).expect(\"This should never happen.\");\n-                check_arguments(cx, &arguments, method_type.ty, &format!(\"{}\", name.node.as_str()))\n+                check_arguments(cx, &arguments, method_type.ty, &name.node.as_str())\n             }\n             _ => {}\n         }"}]}