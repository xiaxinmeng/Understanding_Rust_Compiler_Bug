{"sha": "db169e53e5c88484718c1be2be6dcb7dab4a278f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMTY5ZTUzZTVjODg0ODQ3MThjMWJlMmJlNmRjYjdkYWI0YTI3OGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-27T19:10:05Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-07T21:08:21Z"}, "message": "move `annotate` onto a method of `UniversalRegions`\n\nThis allows it to print out the \"late-bound regions\" from the closure\ncontext more easily. Besides, all the state that is being printed it\nis private to the `UniversalRegions`.", "tree": {"sha": "c80f7ac56ec2960d7e1830619d2aedad3823c0d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c80f7ac56ec2960d7e1830619d2aedad3823c0d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db169e53e5c88484718c1be2be6dcb7dab4a278f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db169e53e5c88484718c1be2be6dcb7dab4a278f", "html_url": "https://github.com/rust-lang/rust/commit/db169e53e5c88484718c1be2be6dcb7dab4a278f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db169e53e5c88484718c1be2be6dcb7dab4a278f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7f871363be760f72f5e52152071b8f6124feac8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f871363be760f72f5e52152071b8f6124feac8", "html_url": "https://github.com/rust-lang/rust/commit/b7f871363be760f72f5e52152071b8f6124feac8"}], "stats": {"total": 150, "additions": 89, "deletions": 61}, "files": [{"sha": "7cab0acb4326a6068b87d27cc3f8dff4560a432a", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=db169e53e5c88484718c1be2be6dcb7dab4a278f", "patch": "@@ -276,7 +276,7 @@ fn dump_annotation<'a, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n     mir: &Mir<'tcx>,\n     mir_def_id: DefId,\n-    regioncx: &RegionInferenceContext,\n+    regioncx: &RegionInferenceContext<'tcx>,\n     closure_region_requirements: &Option<ClosureRegionRequirements>,\n     errors_buffer: &mut Vec<Diagnostic>,\n ) {\n@@ -299,7 +299,7 @@ fn dump_annotation<'a, 'gcx, 'tcx>(\n             .diagnostic()\n             .span_note_diag(mir.span, \"External requirements\");\n \n-        regioncx.annotate(&mut err);\n+        regioncx.annotate(tcx, &mut err);\n \n         err.note(&format!(\n             \"number of external vids: {}\",\n@@ -319,7 +319,7 @@ fn dump_annotation<'a, 'gcx, 'tcx>(\n             .sess\n             .diagnostic()\n             .span_note_diag(mir.span, \"No external requirements\");\n-        regioncx.annotate(&mut err);\n+        regioncx.annotate(tcx, &mut err);\n \n         err.buffer(errors_buffer);\n     }"}, {"sha": "7cde06be0c23b416ac40d5994249de23d253d986", "filename": "src/librustc_mir/borrow_check/nll/region_infer/annotation.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b7f871363be760f72f5e52152071b8f6124feac8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fannotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f871363be760f72f5e52152071b8f6124feac8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fannotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fannotation.rs?ref=b7f871363be760f72f5e52152071b8f6124feac8", "patch": "@@ -1,56 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! As part of the NLL unit tests, you can annotate a function with\n-//! `#[rustc_regions]`, and we will emit information about the region\n-//! inference context and -- in particular -- the external constraints\n-//! that this region imposes on others. The methods in this file\n-//! handle the part about dumping the inference context internal\n-//! state.\n-\n-use borrow_check::nll::region_infer::RegionInferenceContext;\n-use borrow_check::nll::universal_regions::DefiningTy;\n-use rustc_errors::DiagnosticBuilder;\n-\n-impl<'tcx> RegionInferenceContext<'tcx> {\n-    /// Write out our state into the `.mir` files.\n-    pub(crate) fn annotate(&self, err: &mut DiagnosticBuilder<'_>) {\n-        match self.universal_regions.defining_ty {\n-            DefiningTy::Closure(def_id, substs) => {\n-                err.note(&format!(\n-                    \"defining type: {:?} with closure substs {:#?}\",\n-                    def_id,\n-                    &substs.substs[..]\n-                ));\n-            }\n-            DefiningTy::Generator(def_id, substs, _) => {\n-                err.note(&format!(\n-                    \"defining type: {:?} with generator substs {:#?}\",\n-                    def_id,\n-                    &substs.substs[..]\n-                ));\n-            }\n-            DefiningTy::FnDef(def_id, substs) => {\n-                err.note(&format!(\n-                    \"defining type: {:?} with substs {:#?}\",\n-                    def_id,\n-                    &substs[..]\n-                ));\n-            }\n-            DefiningTy::Const(def_id, substs) => {\n-                err.note(&format!(\n-                    \"defining constant type: {:?} with substs {:#?}\",\n-                    def_id,\n-                    &substs[..]\n-                ));\n-            }\n-        }\n-    }\n-}"}, {"sha": "46b3c708695285779b9c2739f463d5842e8cb1d7", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=db169e53e5c88484718c1be2be6dcb7dab4a278f", "patch": "@@ -29,11 +29,10 @@ use rustc::util::common;\n use rustc_data_structures::graph::scc::Sccs;\n use rustc_data_structures::indexed_set::IdxSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc_errors::Diagnostic;\n+use rustc_errors::{DiagnosticBuilder, Diagnostic};\n \n use std::rc::Rc;\n \n-mod annotation;\n mod dump_mir;\n mod error_reporting;\n mod graphviz;\n@@ -359,6 +358,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         self.universal_regions.to_region_vid(r)\n     }\n \n+    /// Add annotations for `#[rustc_regions]`; see `UniversalRegions::annotate`.\n+    crate fn annotate(&self, tcx: TyCtxt<'_, '_, 'tcx>, err: &mut DiagnosticBuilder<'_>) {\n+        self.universal_regions.annotate(tcx, err)\n+    }\n+\n     /// Returns true if the region `r` contains the point `p`.\n     ///\n     /// Panics if called before `solve()` executes,"}, {"sha": "19ffd971fcbf91b31ae1fcd4fff241e4dad6244a", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=db169e53e5c88484718c1be2be6dcb7dab4a278f", "patch": "@@ -31,6 +31,7 @@ use rustc::ty::subst::Substs;\n use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, RegionVid, Ty, TyCtxt};\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n+use rustc_errors::DiagnosticBuilder;\n use std::iter;\n use syntax::ast;\n \n@@ -310,6 +311,63 @@ impl<'tcx> UniversalRegions<'tcx> {\n     pub fn to_region_vid(&self, r: ty::Region<'tcx>) -> RegionVid {\n         self.indices.to_region_vid(r)\n     }\n+\n+    /// As part of the NLL unit tests, you can annotate a function with\n+    /// `#[rustc_regions]`, and we will emit information about the region\n+    /// inference context and -- in particular -- the external constraints\n+    /// that this region imposes on others. The methods in this file\n+    /// handle the part about dumping the inference context internal\n+    /// state.\n+    crate fn annotate(&self, tcx: TyCtxt<'_, '_, 'tcx>, err: &mut DiagnosticBuilder<'_>) {\n+        match self.defining_ty {\n+            DefiningTy::Closure(def_id, substs) => {\n+                err.note(&format!(\n+                    \"defining type: {:?} with closure substs {:#?}\",\n+                    def_id,\n+                    &substs.substs[..]\n+                ));\n+\n+                let closure_base_def_id = tcx.closure_base_def_id(def_id);\n+                for_each_late_bound_region_defined_on(tcx, closure_base_def_id, |r| {\n+                    err.note(&format!(\n+                        \"late-bound region {:?} is {:?}\",\n+                        r,\n+                        self.to_region_vid(r),\n+                    ));\n+                });\n+            }\n+            DefiningTy::Generator(def_id, substs, _) => {\n+                err.note(&format!(\n+                    \"defining type: {:?} with generator substs {:#?}\",\n+                    def_id,\n+                    &substs.substs[..]\n+                ));\n+\n+                let closure_base_def_id = tcx.closure_base_def_id(def_id);\n+                for_each_late_bound_region_defined_on(tcx, closure_base_def_id, |r| {\n+                    err.note(&format!(\n+                        \"late-bound region {:?} is {:?}\",\n+                        r,\n+                        self.to_region_vid(r),\n+                    ));\n+                });\n+            }\n+            DefiningTy::FnDef(def_id, substs) => {\n+                err.note(&format!(\n+                    \"defining type: {:?} with substs {:#?}\",\n+                    def_id,\n+                    &substs[..]\n+                ));\n+            }\n+            DefiningTy::Const(def_id, substs) => {\n+                err.note(&format!(\n+                    \"defining constant type: {:?} with substs {:#?}\",\n+                    def_id,\n+                    &substs[..]\n+                ));\n+            }\n+        }\n+    }\n }\n \n struct UniversalRegionsBuilder<'cx, 'gcx: 'tcx, 'tcx: 'cx> {"}, {"sha": "6f1712c03b6127fbdd5c54d8a4bba66f50753469", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=db169e53e5c88484718c1be2be6dcb7dab4a278f", "patch": "@@ -12,6 +12,9 @@ LL | |         },\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n+   = note: late-bound region ReFree(DefId(0/0:6 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]), BrNamed(crate0:DefIndex(1:17), 'a)) is '_#4r\n+   = note: late-bound region ReFree(DefId(0/0:6 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]), BrNamed(crate0:DefIndex(1:19), 'c)) is '_#5r\n+   = note: late-bound region ReFree(DefId(0/0:6 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]), BrNamed(crate0:DefIndex(1:18), 'b)) is '_#6r\n \n error: unsatisfied lifetime constraints\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:56:13"}, {"sha": "6bf6832229fec073ea8dbfeeb49e8d27214bee3a", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=db169e53e5c88484718c1be2be6dcb7dab4a278f", "patch": "@@ -14,6 +14,8 @@ LL | |     });\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n            ]\n+   = note: late-bound region ReFree(DefId(0/0:6 ~ propagate_approximated_ref[317d]::supply[0]), BrNamed(crate0:DefIndex(1:17), 'b)) is '_#3r\n+   = note: late-bound region ReFree(DefId(0/0:6 ~ propagate_approximated_ref[317d]::supply[0]), BrNamed(crate0:DefIndex(1:16), 'a)) is '_#4r\n    = note: number of external vids: 5\n    = note: where '_#1r: '_#2r\n "}, {"sha": "c0555cf1b3f4e26772b7d02894fca6492807733d", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=db169e53e5c88484718c1be2be6dcb7dab4a278f", "patch": "@@ -15,6 +15,8 @@ LL | |     });\n                i16,\n                for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) u32>))\n            ]\n+   = note: late-bound region ReFree(DefId(0/0:6 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]), BrNamed(crate0:DefIndex(1:16), 'a)) is '_#2r\n+   = note: late-bound region ReFree(DefId(0/0:6 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]), BrNamed(crate0:DefIndex(1:17), 'b)) is '_#3r\n    = note: number of external vids: 4\n    = note: where '_#1r: '_#0r\n "}, {"sha": "49f3f2ba1cc051aa54dc063b0606aaffea79a74c", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=db169e53e5c88484718c1be2be6dcb7dab4a278f", "patch": "@@ -14,6 +14,8 @@ LL | |     });\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n            ]\n+   = note: late-bound region ReFree(DefId(0/0:6 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]), BrNamed(crate0:DefIndex(1:17), 'b)) is '_#3r\n+   = note: late-bound region ReFree(DefId(0/0:6 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]), BrNamed(crate0:DefIndex(1:16), 'a)) is '_#4r\n    = note: number of external vids: 5\n    = note: where '_#1r: '_#0r\n "}, {"sha": "95d196bdda6cc500d8b05c7f557492d4b9ab5ac2", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=db169e53e5c88484718c1be2be6dcb7dab4a278f", "patch": "@@ -14,6 +14,8 @@ LL | |     });\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n+   = note: late-bound region ReFree(DefId(0/0:6 ~ propagate_approximated_val[317d]::test[0]), BrNamed(crate0:DefIndex(1:17), 'b)) is '_#3r\n+   = note: late-bound region ReFree(DefId(0/0:6 ~ propagate_approximated_val[317d]::test[0]), BrNamed(crate0:DefIndex(1:16), 'a)) is '_#4r\n    = note: number of external vids: 5\n    = note: where '_#1r: '_#2r\n "}, {"sha": "25529634453dab73faa167e86314c1cc56b3f809", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=db169e53e5c88484718c1be2be6dcb7dab4a278f", "patch": "@@ -12,6 +12,7 @@ LL | |         },\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n+   = note: late-bound region ReFree(DefId(0/0:6 ~ propagate_despite_same_free_region[317d]::supply[0]), BrNamed(crate0:DefIndex(1:15), 'a)) is '_#3r\n    = note: number of external vids: 4\n    = note: where '_#1r: '_#2r\n "}, {"sha": "0154eefc134e5e8b6e0be9a2f2f02333e17a3cff", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=db169e53e5c88484718c1be2be6dcb7dab4a278f", "patch": "@@ -13,6 +13,8 @@ LL | |     });\n                i16,\n                for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n+   = note: late-bound region ReFree(DefId(0/0:6 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]), BrNamed(crate0:DefIndex(1:16), 'a)) is '_#2r\n+   = note: late-bound region ReFree(DefId(0/0:6 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]), BrNamed(crate0:DefIndex(1:17), 'b)) is '_#3r\n \n error: unsatisfied lifetime constraints\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:47:9"}, {"sha": "269c826f578648ad357d64f62fa4ea69c2cd64cd", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=db169e53e5c88484718c1be2be6dcb7dab4a278f", "patch": "@@ -13,6 +13,8 @@ LL | |     });\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n            ]\n+   = note: late-bound region ReFree(DefId(0/0:6 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]), BrNamed(crate0:DefIndex(1:17), 'b)) is '_#3r\n+   = note: late-bound region ReFree(DefId(0/0:6 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]), BrNamed(crate0:DefIndex(1:16), 'a)) is '_#4r\n \n error: unsatisfied lifetime constraints\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:51:9"}, {"sha": "9605677740f31d695c02b953625f7fb20c21ce5d", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db169e53e5c88484718c1be2be6dcb7dab4a278f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr?ref=db169e53e5c88484718c1be2be6dcb7dab4a278f", "patch": "@@ -10,6 +10,8 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n+   = note: late-bound region ReFree(DefId(0/0:8 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:16), 'a)) is '_#3r\n+   = note: late-bound region ReFree(DefId(0/0:8 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:18), T)) is '_#4r\n \n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:42:1\n@@ -40,6 +42,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n+   = note: late-bound region ReFree(DefId(0/0:9 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_early[0]), BrNamed(crate0:DefIndex(1:22), T)) is '_#4r\n \n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:50:1\n@@ -72,6 +75,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n+   = note: late-bound region ReFree(DefId(0/0:10 ~ projection_one_region_trait_bound_static_closure[317d]::projection_outlives[0]), BrNamed(crate0:DefIndex(1:26), T)) is '_#4r\n \n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:59:1\n@@ -104,6 +108,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n+   = note: late-bound region ReFree(DefId(0/0:11 ~ projection_one_region_trait_bound_static_closure[317d]::elements_outlive[0]), BrNamed(crate0:DefIndex(1:30), T)) is '_#4r\n \n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:78:1\n@@ -135,6 +140,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n+   = note: late-bound region ReFree(DefId(0/0:12 ~ projection_one_region_trait_bound_static_closure[317d]::one_region[0]), BrNamed(crate0:DefIndex(1:33), T)) is '_#3r\n \n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:87:1"}]}