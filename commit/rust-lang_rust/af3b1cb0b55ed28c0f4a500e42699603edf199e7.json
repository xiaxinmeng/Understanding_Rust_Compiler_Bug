{"sha": "af3b1cb0b55ed28c0f4a500e42699603edf199e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmM2IxY2IwYjU1ZWQyOGMwZjRhNTAwZTQyNjk5NjAzZWRmMTk5ZTc=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-12-17T02:13:29Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-12-18T20:57:12Z"}, "message": "Change potentially_qualified to be defined on Binder<PredicateAtom>", "tree": {"sha": "1f71235b85d26b1dc1f115c0f6bbbf4bfbd6802f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f71235b85d26b1dc1f115c0f6bbbf4bfbd6802f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af3b1cb0b55ed28c0f4a500e42699603edf199e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af3b1cb0b55ed28c0f4a500e42699603edf199e7", "html_url": "https://github.com/rust-lang/rust/commit/af3b1cb0b55ed28c0f4a500e42699603edf199e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af3b1cb0b55ed28c0f4a500e42699603edf199e7/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4297ba39ce07a0b0000841b50154ea53783a024", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4297ba39ce07a0b0000841b50154ea53783a024", "html_url": "https://github.com/rust-lang/rust/commit/e4297ba39ce07a0b0000841b50154ea53783a024"}], "stats": {"total": 68, "additions": 41, "deletions": 27}, "files": [{"sha": "71ce50f7453725be234897a53cd5daa4a2a9b100", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/af3b1cb0b55ed28c0f4a500e42699603edf199e7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3b1cb0b55ed28c0f4a500e42699603edf199e7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=af3b1cb0b55ed28c0f4a500e42699603edf199e7", "patch": "@@ -525,10 +525,10 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         result_subst: &'a CanonicalVarValues<'tcx>,\n     ) -> impl Iterator<Item = PredicateObligation<'tcx>> + 'a + Captures<'tcx> {\n         unsubstituted_region_constraints.iter().map(move |&constraint| {\n-            let ty::OutlivesPredicate(k1, r2) =\n-                substitute_value(self.tcx, result_subst, constraint).skip_binder();\n+            let predicate = substitute_value(self.tcx, result_subst, constraint);\n+            let ty::OutlivesPredicate(k1, r2) = predicate.skip_binder();\n \n-            let predicate = match k1.unpack() {\n+            let atom = match k1.unpack() {\n                 GenericArgKind::Lifetime(r1) => {\n                     ty::PredicateAtom::RegionOutlives(ty::OutlivesPredicate(r1, r2))\n                 }\n@@ -540,8 +540,9 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                     // encounter this branch.\n                     span_bug!(cause.span, \"unexpected const outlives {:?}\", constraint);\n                 }\n-            }\n-            .potentially_quantified(self.tcx, ty::PredicateKind::ForAll);\n+            };\n+            let predicate =\n+                predicate.rebind(atom).potentially_quantified(self.tcx, ty::PredicateKind::ForAll);\n \n             Obligation::new(cause.clone(), param_env, predicate)\n         })"}, {"sha": "b0f02dee59b2976c422a1e723f658fb3263f42d0", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/af3b1cb0b55ed28c0f4a500e42699603edf199e7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3b1cb0b55ed28c0f4a500e42699603edf199e7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=af3b1cb0b55ed28c0f4a500e42699603edf199e7", "patch": "@@ -1149,17 +1149,16 @@ pub enum PredicateAtom<'tcx> {\n     TypeWellFormedFromEnv(Ty<'tcx>),\n }\n \n-impl<'tcx> PredicateAtom<'tcx> {\n+impl<'tcx> Binder<PredicateAtom<'tcx>> {\n     /// Wraps `self` with the given qualifier if this predicate has any unbound variables.\n     pub fn potentially_quantified(\n         self,\n         tcx: TyCtxt<'tcx>,\n         qualifier: impl FnOnce(Binder<PredicateAtom<'tcx>>) -> PredicateKind<'tcx>,\n     ) -> Predicate<'tcx> {\n-        if self.has_escaping_bound_vars() {\n-            qualifier(Binder::bind(self))\n-        } else {\n-            PredicateKind::Atom(self)\n+        match self.no_bound_vars() {\n+            Some(atom) => PredicateKind::Atom(atom),\n+            None => qualifier(self),\n         }\n         .to_predicate(tcx)\n     }\n@@ -1252,7 +1251,11 @@ impl<'tcx> Predicate<'tcx> {\n         let substs = trait_ref.skip_binder().substs;\n         let pred = self.skip_binders();\n         let new = pred.subst(tcx, substs);\n-        if new != pred { new.potentially_quantified(tcx, PredicateKind::ForAll) } else { self }\n+        if new != pred {\n+            trait_ref.rebind(new).potentially_quantified(tcx, PredicateKind::ForAll)\n+        } else {\n+            self\n+        }\n     }\n }\n \n@@ -1403,28 +1406,29 @@ impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<PolyTraitRef<'tcx>> {\n \n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<PolyTraitPredicate<'tcx>> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        PredicateAtom::Trait(self.value.skip_binder(), self.constness)\n+        self.value\n+            .map_bound(|value| PredicateAtom::Trait(value, self.constness))\n             .potentially_quantified(tcx, PredicateKind::ForAll)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        PredicateAtom::RegionOutlives(self.skip_binder())\n+        self.map_bound(|value| PredicateAtom::RegionOutlives(value))\n             .potentially_quantified(tcx, PredicateKind::ForAll)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        PredicateAtom::TypeOutlives(self.skip_binder())\n+        self.map_bound(|value| PredicateAtom::TypeOutlives(value))\n             .potentially_quantified(tcx, PredicateKind::ForAll)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        PredicateAtom::Projection(self.skip_binder())\n+        self.map_bound(|value| PredicateAtom::Projection(value))\n             .potentially_quantified(tcx, PredicateKind::ForAll)\n     }\n }"}, {"sha": "3b49c73c7f20f219b90beab6ebcdd1c6b3091ba7", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/af3b1cb0b55ed28c0f4a500e42699603edf199e7/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3b1cb0b55ed28c0f4a500e42699603edf199e7/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=af3b1cb0b55ed28c0f4a500e42699603edf199e7", "patch": "@@ -1919,10 +1919,11 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                     } else {\n                         let span = bound_pred.bounded_ty.span;\n                         let re_root_empty = tcx.lifetimes.re_root_empty;\n-                        let predicate = ty::OutlivesPredicate(ty, re_root_empty);\n+                        let predicate = ty::Binder::bind(ty::PredicateAtom::TypeOutlives(\n+                            ty::OutlivesPredicate(ty, re_root_empty),\n+                        ));\n                         predicates.insert((\n-                            ty::PredicateAtom::TypeOutlives(predicate)\n-                                .potentially_quantified(tcx, ty::PredicateKind::ForAll),\n+                            predicate.potentially_quantified(tcx, ty::PredicateKind::ForAll),\n                             span,\n                         ));\n                     }\n@@ -1965,8 +1966,10 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                         &hir::GenericBound::Outlives(ref lifetime) => {\n                             let region = AstConv::ast_region_to_region(&icx, lifetime, None);\n                             predicates.insert((\n-                                ty::PredicateAtom::TypeOutlives(ty::OutlivesPredicate(ty, region))\n-                                    .potentially_quantified(tcx, ty::PredicateKind::ForAll),\n+                                ty::Binder::bind(ty::PredicateAtom::TypeOutlives(\n+                                    ty::OutlivesPredicate(ty, region),\n+                                ))\n+                                .potentially_quantified(tcx, ty::PredicateKind::ForAll),\n                                 lifetime.span,\n                             ));\n                         }\n@@ -1983,7 +1986,9 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                         }\n                         _ => bug!(),\n                     };\n-                    let pred = ty::PredicateAtom::RegionOutlives(ty::OutlivesPredicate(r1, r2));\n+                    let pred = ty::Binder::dummy(ty::PredicateAtom::RegionOutlives(\n+                        ty::OutlivesPredicate(r1, r2),\n+                    ));\n \n                     (pred.potentially_quantified(icx.tcx, ty::PredicateKind::ForAll), span)\n                 }))\n@@ -2233,8 +2238,10 @@ fn predicates_from_bound<'tcx>(\n         }\n         hir::GenericBound::Outlives(ref lifetime) => {\n             let region = astconv.ast_region_to_region(lifetime, None);\n-            let pred = ty::PredicateAtom::TypeOutlives(ty::OutlivesPredicate(param_ty, region))\n-                .potentially_quantified(astconv.tcx(), ty::PredicateKind::ForAll);\n+            let pred = ty::Binder::dummy(ty::PredicateAtom::TypeOutlives(ty::OutlivesPredicate(\n+                param_ty, region,\n+            )))\n+            .potentially_quantified(astconv.tcx(), ty::PredicateKind::ForAll);\n             vec![(pred, lifetime.span)]\n         }\n     }"}, {"sha": "d7c084acf50f9cec75b982319dc70d8c36e41910", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af3b1cb0b55ed28c0f4a500e42699603edf199e7/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3b1cb0b55ed28c0f4a500e42699603edf199e7/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=af3b1cb0b55ed28c0f4a500e42699603edf199e7", "patch": "@@ -89,13 +89,15 @@ fn inferred_outlives_crate(tcx: TyCtxt<'_>, crate_num: CrateNum) -> CratePredica\n                 |(ty::OutlivesPredicate(kind1, region2), &span)| {\n                     match kind1.unpack() {\n                         GenericArgKind::Type(ty1) => Some((\n-                            ty::PredicateAtom::TypeOutlives(ty::OutlivesPredicate(ty1, region2))\n-                                .potentially_quantified(tcx, ty::PredicateKind::ForAll),\n+                            ty::Binder::dummy(ty::PredicateAtom::TypeOutlives(\n+                                ty::OutlivesPredicate(ty1, region2),\n+                            ))\n+                            .potentially_quantified(tcx, ty::PredicateKind::ForAll),\n                             span,\n                         )),\n                         GenericArgKind::Lifetime(region1) => Some((\n-                            ty::PredicateAtom::RegionOutlives(ty::OutlivesPredicate(\n-                                region1, region2,\n+                            ty::Binder::dummy(ty::PredicateAtom::RegionOutlives(\n+                                ty::OutlivesPredicate(region1, region2),\n                             ))\n                             .potentially_quantified(tcx, ty::PredicateKind::ForAll),\n                             span,"}]}