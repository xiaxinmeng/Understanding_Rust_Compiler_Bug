{"sha": "139479e8a376aecff35db2055b9ebd2311935f98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzOTQ3OWU4YTM3NmFlY2ZmMzVkYjIwNTViOWViZDIzMTE5MzVmOTg=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-09T23:57:43Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-09T23:57:43Z"}, "message": "move  to to_usize()", "tree": {"sha": "1b3f1e21b0fd2f920940d22c7c8076fcf855cedc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b3f1e21b0fd2f920940d22c7c8076fcf855cedc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/139479e8a376aecff35db2055b9ebd2311935f98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/139479e8a376aecff35db2055b9ebd2311935f98", "html_url": "https://github.com/rust-lang/rust/commit/139479e8a376aecff35db2055b9ebd2311935f98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/139479e8a376aecff35db2055b9ebd2311935f98/comments", "author": null, "committer": null, "parents": [{"sha": "c48c0f370a6d02c7065864c8eb761cf9e4ba2363", "url": "https://api.github.com/repos/rust-lang/rust/commits/c48c0f370a6d02c7065864c8eb761cf9e4ba2363", "html_url": "https://github.com/rust-lang/rust/commit/c48c0f370a6d02c7065864c8eb761cf9e4ba2363"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "5d0279945084afa13189b3957dcea455af4a154a", "filename": "crates/ra_hir_def/src/body/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/139479e8a376aecff35db2055b9ebd2311935f98/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/139479e8a376aecff35db2055b9ebd2311935f98/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs?ref=139479e8a376aecff35db2055b9ebd2311935f98", "patch": "@@ -194,7 +194,7 @@ mod tests {\n         let (off, code) = extract_offset(code);\n         let code = {\n             let mut buf = String::new();\n-            let off = u32::from(off) as usize;\n+            let off = off.to_usize();\n             buf.push_str(&code[..off]);\n             buf.push_str(\"marker\");\n             buf.push_str(&code[off..]);"}, {"sha": "37f23d04384c5c540efda988bdc88eca32054356", "filename": "crates/ra_text_edit/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/139479e8a376aecff35db2055b9ebd2311935f98/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/139479e8a376aecff35db2055b9ebd2311935f98/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Flib.rs?ref=139479e8a376aecff35db2055b9ebd2311935f98", "patch": "@@ -29,8 +29,8 @@ impl AtomTextEdit {\n     }\n \n     pub fn apply(&self, mut text: String) -> String {\n-        let start = u32::from(self.delete.start()) as usize;\n-        let end = u32::from(self.delete.end()) as usize;\n+        let start = self.delete.start().to_usize();\n+        let end = self.delete.end().to_usize();\n         text.replace_range(start..end, &self.insert);\n         text\n     }"}, {"sha": "3291ada4201d13fbd2ec0602818648b133801e6e", "filename": "crates/ra_text_edit/src/text_edit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/139479e8a376aecff35db2055b9ebd2311935f98/crates%2Fra_text_edit%2Fsrc%2Ftext_edit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/139479e8a376aecff35db2055b9ebd2311935f98/crates%2Fra_text_edit%2Fsrc%2Ftext_edit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Ftext_edit.rs?ref=139479e8a376aecff35db2055b9ebd2311935f98", "patch": "@@ -66,13 +66,13 @@ impl TextEdit {\n         let mut total_len = text.len();\n         for atom in self.atoms.iter() {\n             total_len += atom.insert.len();\n-            total_len -= u32::from(atom.delete.end() - atom.delete.start()) as usize;\n+            total_len -= (atom.delete.end() - atom.delete.start()).to_usize();\n         }\n         let mut buf = String::with_capacity(total_len);\n         let mut prev = 0;\n         for atom in self.atoms.iter() {\n-            let start = u32::from(atom.delete.start()) as usize;\n-            let end = u32::from(atom.delete.end()) as usize;\n+            let start = atom.delete.start().to_usize();\n+            let end = atom.delete.end().to_usize();\n             if start > prev {\n                 buf.push_str(&text[prev..start]);\n             }"}]}