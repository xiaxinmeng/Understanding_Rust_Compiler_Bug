{"sha": "ddcbba036aee08f0709f98a92a342a278eae5c05", "node_id": "C_kwDOAAsO6NoAKGRkY2JiYTAzNmFlZTA4ZjA3MDlmOThhOTJhMzQyYTI3OGVhZTVjMDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-29T18:42:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-29T18:42:19Z"}, "message": "Auto merge of #98680 - matthiaskrgr:rollup-1bkrrn9, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #98434 (Ensure that `static_crt` is set in the bootstrapper whenever using `cc-rs` to get a compiler command line.)\n - #98636 (Triagebot: Fix mentions word wrapping.)\n - #98642 (Fix #98260)\n - #98643 (Improve pretty printing of valtrees for references)\n - #98646 (rustdoc: fix bugs in main.js popover help and settings)\n - #98647 (Update cargo)\n - #98652 (`alloc`: clean and ensure `no_global_oom_handling`  builds are warning-free)\n - #98660 (Unbreak stage1 tests via ignore-stage1 in `proc-macro/invalid-punct-ident-1.rs`.)\n - #98665 (Use verbose help for deprecation suggestion)\n - #98668 (Avoid some `&str` to `String` conversions with `MultiSpan::push_span_label`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "746cce42c59c782314757a884b2630e8e9d1c1c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/746cce42c59c782314757a884b2630e8e9d1c1c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddcbba036aee08f0709f98a92a342a278eae5c05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddcbba036aee08f0709f98a92a342a278eae5c05", "html_url": "https://github.com/rust-lang/rust/commit/ddcbba036aee08f0709f98a92a342a278eae5c05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddcbba036aee08f0709f98a92a342a278eae5c05/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fcf43bb0f3e86c16a88f239da18a1729a94d244", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fcf43bb0f3e86c16a88f239da18a1729a94d244", "html_url": "https://github.com/rust-lang/rust/commit/3fcf43bb0f3e86c16a88f239da18a1729a94d244"}, {"sha": "d34c4ca9be41d14d8eb460f23abb353ce3be8ae7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d34c4ca9be41d14d8eb460f23abb353ce3be8ae7", "html_url": "https://github.com/rust-lang/rust/commit/d34c4ca9be41d14d8eb460f23abb353ce3be8ae7"}], "stats": {"total": 549, "additions": 311, "deletions": 238}, "files": [{"sha": "bf65fdc54ca48a6ca15525213e2091ec06326ca7", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -5,7 +5,6 @@ use rustc_middle::mir;\n use rustc_middle::mir::interpret::{EvalToValTreeResult, GlobalId};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::{source_map::DUMMY_SP, symbol::Symbol};\n-use rustc_target::abi::VariantIdx;\n \n use crate::interpret::{\n     intern_const_alloc_recursive, ConstValue, InternKind, InterpCx, InterpResult, MemPlaceMeta,\n@@ -91,83 +90,6 @@ pub(crate) fn eval_to_valtree<'tcx>(\n     }\n }\n \n-/// Tries to destructure constants of type Array or Adt into the constants\n-/// of its fields.\n-pub(crate) fn try_destructure_const<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    const_: ty::Const<'tcx>,\n-) -> Option<ty::DestructuredConst<'tcx>> {\n-    if let ty::ConstKind::Value(valtree) = const_.kind() {\n-        let branches = match valtree {\n-            ty::ValTree::Branch(b) => b,\n-            _ => return None,\n-        };\n-\n-        let (fields, variant) = match const_.ty().kind() {\n-            ty::Array(inner_ty, _) | ty::Slice(inner_ty) => {\n-                // construct the consts for the elements of the array/slice\n-                let field_consts = branches\n-                    .iter()\n-                    .map(|b| {\n-                        tcx.mk_const(ty::ConstS { kind: ty::ConstKind::Value(*b), ty: *inner_ty })\n-                    })\n-                    .collect::<Vec<_>>();\n-                debug!(?field_consts);\n-\n-                (field_consts, None)\n-            }\n-            ty::Adt(def, _) if def.variants().is_empty() => bug!(\"unreachable\"),\n-            ty::Adt(def, substs) => {\n-                let variant_idx = if def.is_enum() {\n-                    VariantIdx::from_u32(branches[0].unwrap_leaf().try_to_u32().ok()?)\n-                } else {\n-                    VariantIdx::from_u32(0)\n-                };\n-                let fields = &def.variant(variant_idx).fields;\n-                let mut field_consts = Vec::with_capacity(fields.len());\n-\n-                // Note: First element inValTree corresponds to variant of enum\n-                let mut valtree_idx = if def.is_enum() { 1 } else { 0 };\n-                for field in fields {\n-                    let field_ty = field.ty(tcx, substs);\n-                    let field_valtree = branches[valtree_idx]; // first element of branches is variant\n-                    let field_const = tcx.mk_const(ty::ConstS {\n-                        kind: ty::ConstKind::Value(field_valtree),\n-                        ty: field_ty,\n-                    });\n-                    field_consts.push(field_const);\n-                    valtree_idx += 1;\n-                }\n-                debug!(?field_consts);\n-\n-                (field_consts, Some(variant_idx))\n-            }\n-            ty::Tuple(elem_tys) => {\n-                let fields = elem_tys\n-                    .iter()\n-                    .enumerate()\n-                    .map(|(i, elem_ty)| {\n-                        let elem_valtree = branches[i];\n-                        tcx.mk_const(ty::ConstS {\n-                            kind: ty::ConstKind::Value(elem_valtree),\n-                            ty: elem_ty,\n-                        })\n-                    })\n-                    .collect::<Vec<_>>();\n-\n-                (fields, None)\n-            }\n-            _ => bug!(\"cannot destructure constant {:?}\", const_),\n-        };\n-\n-        let fields = tcx.arena.alloc_from_iter(fields.into_iter());\n-\n-        Some(ty::DestructuredConst { variant, fields })\n-    } else {\n-        None\n-    }\n-}\n-\n #[instrument(skip(tcx), level = \"debug\")]\n pub(crate) fn try_destructure_mir_constant<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "5bf91879066f483008426082dd542e3796a7eeee", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -42,7 +42,6 @@ pub fn provide(providers: &mut Providers) {\n     providers.eval_to_const_value_raw = const_eval::eval_to_const_value_raw_provider;\n     providers.eval_to_allocation_raw = const_eval::eval_to_allocation_raw_provider;\n     providers.const_caller_location = const_eval::const_caller_location;\n-    providers.try_destructure_const = |tcx, val| const_eval::try_destructure_const(tcx, val);\n     providers.eval_to_valtree = |tcx, param_env_and_value| {\n         let (param_env, raw) = param_env_and_value.into_parts();\n         const_eval::eval_to_valtree(tcx, param_env, raw)"}, {"sha": "e44f060819633dbfe1f27333f962fec276d6a8b8", "filename": "compiler/rustc_expand/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ftests.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -136,7 +136,7 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n         let mut msp = MultiSpan::from_span(primary_span);\n         for span_label in span_labels {\n             let span = make_span(&file_text, &span_label.start, &span_label.end);\n-            msp.push_span_label(span, span_label.label.to_string());\n+            msp.push_span_label(span, span_label.label);\n             println!(\"span: {:?} label: {:?}\", span, span_label.label);\n             println!(\"text: {:?}\", source_map.span_to_snippet(span));\n         }"}, {"sha": "09430a135a3376016a24eb678989e0189ea61b9d", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -194,24 +194,18 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                         if !v.0.is_empty() {\n                             span = v.0.clone().into();\n                             for sp in v.0 {\n-                                span.push_span_label(\n-                                    sp,\n-                                    \"`'static` requirement introduced here\".to_string(),\n-                                );\n+                                span.push_span_label(sp, \"`'static` requirement introduced here\");\n                             }\n                             add_label = false;\n                         }\n                     }\n                     if add_label {\n                         span.push_span_label(\n                             fn_decl.output.span(),\n-                            \"requirement introduced by this return type\".to_string(),\n+                            \"requirement introduced by this return type\",\n                         );\n                     }\n-                    span.push_span_label(\n-                        cause.span,\n-                        \"because of this returned expression\".to_string(),\n-                    );\n+                    span.push_span_label(cause.span, \"because of this returned expression\");\n                     err.span_note(\n                         span,\n                         \"`'static` lifetime requirement introduced by the return type\",\n@@ -523,13 +517,11 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             hir_v.visit_ty(&self_ty);\n             for span in &traits {\n                 let mut multi_span: MultiSpan = vec![*span].into();\n-                multi_span.push_span_label(\n-                    *span,\n-                    \"this has an implicit `'static` lifetime requirement\".to_string(),\n-                );\n+                multi_span\n+                    .push_span_label(*span, \"this has an implicit `'static` lifetime requirement\");\n                 multi_span.push_span_label(\n                     ident.span,\n-                    \"calling this method introduces the `impl`'s 'static` requirement\".to_string(),\n+                    \"calling this method introduces the `impl`'s 'static` requirement\",\n                 );\n                 err.span_note(multi_span, \"the used `impl` has a `'static` requirement\");\n                 err.span_suggestion_verbose("}, {"sha": "f6b49e41d4c47048c0ceb4cffc980df14ca65101", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -128,10 +128,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         }\n         let mut type_param_span: MultiSpan = visitor.types.to_vec().into();\n         for &span in &visitor.types {\n-            type_param_span.push_span_label(\n-                span,\n-                \"consider borrowing this type parameter in the trait\".to_string(),\n-            );\n+            type_param_span\n+                .push_span_label(span, \"consider borrowing this type parameter in the trait\");\n         }\n \n         err.note(&format!(\"expected `{}`\\n   found `{}`\", expected, found));"}, {"sha": "4eafa3329c36ad3d4aa440385e8e5e135d4c93ff", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -85,8 +85,7 @@ pub fn report_object_safety_error<'tcx>(\n     let has_multi_span = !multi_span.is_empty();\n     let mut note_span = MultiSpan::from_spans(multi_span.clone());\n     if let (Some(trait_span), true) = (trait_span, has_multi_span) {\n-        note_span\n-            .push_span_label(trait_span, \"this trait cannot be made into an object...\".to_string());\n+        note_span.push_span_label(trait_span, \"this trait cannot be made into an object...\");\n     }\n     for (span, msg) in iter::zip(multi_span, messages) {\n         note_span.push_span_label(span, msg);"}, {"sha": "802b7852bace1b332b064f6d641b4a6f8f3b4f35", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -150,7 +150,7 @@ pub fn deprecation_suggestion(\n     span: Span,\n ) {\n     if let Some(suggestion) = suggestion {\n-        diag.span_suggestion(\n+        diag.span_suggestion_verbose(\n             span,\n             &format!(\"replace the use of the deprecated {}\", kind),\n             suggestion,"}, {"sha": "575147feebc94f051bb3109d42fc16114a1cf358", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -205,14 +205,8 @@ impl<'tcx> TyCtxtEnsure<'tcx> {\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n-    /// Destructure a type-level constant ADT or array into its variant index and its field values.\n-    /// Panics if the destructuring fails, use `try_destructure_const` for fallible version.\n-    pub fn destructure_const(self, const_: ty::Const<'tcx>) -> ty::DestructuredConst<'tcx> {\n-        self.try_destructure_const(const_).unwrap()\n-    }\n-\n     /// Destructure a mir constant ADT or array into its variant index and its field values.\n-    /// Panics if the destructuring fails, use `try_destructure_const` for fallible version.\n+    /// Panics if the destructuring fails, use `try_destructure_mir_constant` for fallible version.\n     pub fn destructure_mir_constant(\n         self,\n         param_env: ty::ParamEnv<'tcx>,"}, {"sha": "a1065eef8509dcce3020626974a751df9622f9e8", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -978,11 +978,9 @@ rustc_queries! {\n         desc { \"converting type-level constant value to mir constant value\"}\n     }\n \n-    /// Destructure a constant ADT or array into its variant index and its\n-    /// field values or return `None` if constant is invalid.\n-    ///\n-    /// Use infallible `TyCtxt::destructure_const` when you know that constant is valid.\n-    query try_destructure_const(key: ty::Const<'tcx>) -> Option<ty::DestructuredConst<'tcx>> {\n+    /// Destructures array, ADT or tuple constants into the constants\n+    /// of their fields.\n+    query destructure_const(key: ty::Const<'tcx>) -> ty::DestructuredConst<'tcx> {\n         desc { \"destructuring type level constant\"}\n     }\n "}, {"sha": "7f3b0fdccc6f11ffc9a05bef5a95a634a7102d6b", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -1447,7 +1447,11 @@ pub trait PrettyPrinter<'tcx>:\n                     p!(write(\"{:?}\", String::from_utf8_lossy(bytes)));\n                     return Ok(self);\n                 }\n-                _ => {}\n+                _ => {\n+                    p!(\"&\");\n+                    p!(pretty_print_const_valtree(valtree, *inner_ty, print_ty));\n+                    return Ok(self);\n+                }\n             },\n             (ty::ValTree::Branch(_), ty::Array(t, _)) if *t == u8_type => {\n                 let bytes = valtree.try_to_raw_bytes(self.tcx(), *t).unwrap_or_else(|| {\n@@ -1459,16 +1463,8 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             // Aggregates, printed as array/tuple/struct/variant construction syntax.\n             (ty::ValTree::Branch(_), ty::Array(..) | ty::Tuple(..) | ty::Adt(..)) => {\n-                let Some(contents) = self.tcx().try_destructure_const(\n-                    ty::Const::from_value(self.tcx(), valtree, ty)\n-                ) else {\n-                    // Fall back to debug pretty printing for invalid constants.\n-                    p!(write(\"{:?}\", valtree));\n-                    if print_ty {\n-                        p!(\": \", print(ty));\n-                    }\n-                    return Ok(self);\n-                };\n+                let contents =\n+                    self.tcx().destructure_const(ty::Const::from_value(self.tcx(), valtree, ty));\n                 let fields = contents.fields.iter().copied();\n                 match *ty.kind() {\n                     ty::Array(..) => {"}, {"sha": "61ac3d14e50e29baee0b81e621d71a3b1e12a107", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -947,7 +947,7 @@ fn adt_defined_here<'p, 'tcx>(\n \n         span.push_span_label(def_span, String::new());\n         for pat in spans {\n-            span.push_span_label(pat, \"not covered\".to_string());\n+            span.push_span_label(pat, \"not covered\");\n         }\n         err.span_note(span, &format!(\"`{}` defined here\", ty));\n     }"}, {"sha": "00002f6f59bc1705065f541c4cb2efb39cf0637a", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -891,22 +891,19 @@ impl<'a> Parser<'a> {\n         let mut first_note = MultiSpan::from(vec![initial_semicolon]);\n         first_note.push_span_label(\n             initial_semicolon,\n-            \"this `;` turns the preceding closure into a statement\".to_string(),\n+            \"this `;` turns the preceding closure into a statement\",\n         );\n         first_note.push_span_label(\n             closure_spans.body,\n-            \"this expression is a statement because of the trailing semicolon\".to_string(),\n+            \"this expression is a statement because of the trailing semicolon\",\n         );\n         expect_err.span_note(first_note, \"statement found outside of a block\");\n \n         let mut second_note = MultiSpan::from(vec![closure_spans.whole_closure]);\n-        second_note.push_span_label(\n-            closure_spans.whole_closure,\n-            \"this is the parsed closure...\".to_string(),\n-        );\n+        second_note.push_span_label(closure_spans.whole_closure, \"this is the parsed closure...\");\n         second_note.push_span_label(\n             following_token_span,\n-            \"...but likely you meant the closure to end here\".to_string(),\n+            \"...but likely you meant the closure to end here\",\n         );\n         expect_err.span_note(second_note, \"the closure body may be incorrectly delimited\");\n "}, {"sha": "40545b19b24dc1364f55ec0301ea9ffe0efc9a18", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -857,11 +857,8 @@ impl CheckAttrVisitor<'_> {\n             if let Some((prev_inline, prev_span)) = *specified_inline {\n                 if do_inline != prev_inline {\n                     let mut spans = MultiSpan::from_spans(vec![prev_span, meta.span()]);\n-                    spans.push_span_label(prev_span, String::from(\"this attribute...\"));\n-                    spans.push_span_label(\n-                        meta.span(),\n-                        String::from(\"...conflicts with this attribute\"),\n-                    );\n+                    spans.push_span_label(prev_span, \"this attribute...\");\n+                    spans.push_span_label(meta.span(), \"...conflicts with this attribute\");\n                     self.tcx\n                         .sess\n                         .struct_span_err(spans, \"conflicting doc inlining attributes\")"}, {"sha": "e8b7cee5734909d83acd130ece3e82531a6001cd", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -2561,7 +2561,7 @@ fn show_candidates(\n                 let span = source_span[local_def_id];\n                 let span = session.source_map().guess_head_span(span);\n                 let mut multi_span = MultiSpan::from_span(span);\n-                multi_span.push_span_label(span, \"not accessible\".to_string());\n+                multi_span.push_span_label(span, \"not accessible\");\n                 err.span_note(multi_span, &msg);\n             } else {\n                 err.note(&msg);"}, {"sha": "2b4e64bddc24bd3fb722fd5a6a5ed4124014c6aa", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -601,10 +601,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         };\n                         multi_span.push_span_label(sp, msg);\n                     }\n-                    multi_span.push_span_label(\n-                        base_error.span,\n-                        \"expected this type to be a trait...\".to_string(),\n-                    );\n+                    multi_span\n+                        .push_span_label(base_error.span, \"expected this type to be a trait...\");\n                     err.span_help(\n                         multi_span,\n                         \"`+` is used to constrain a \\\"trait object\\\" type with lifetimes or \\\n@@ -1227,17 +1225,14 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         let mut m: MultiSpan = non_visible_spans.clone().into();\n                         non_visible_spans\n                             .into_iter()\n-                            .for_each(|s| m.push_span_label(s, \"private field\".to_string()));\n+                            .for_each(|s| m.push_span_label(s, \"private field\"));\n                         err.span_note(m, \"constructor is not visible here due to private fields\");\n                     }\n \n                     return true;\n                 }\n \n-                err.span_label(\n-                    span,\n-                    \"constructor is not visible here due to private fields\".to_string(),\n-                );\n+                err.span_label(span, \"constructor is not visible here due to private fields\");\n             }\n             (\n                 Res::Def("}, {"sha": "a8be6f74c99a0345bc336b966fc4acc7f4deb0a7", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -2204,8 +2204,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             _ => true,\n                         };\n                     if !ident.span.overlaps(span) && !same_line {\n-                        multispan\n-                            .push_span_label(ident.span, \"required by a bound in this\".to_string());\n+                        multispan.push_span_label(ident.span, \"required by a bound in this\");\n                     }\n                 }\n                 let descr = format!(\"required by a bound in `{}`\", item_name);"}, {"sha": "0b83cdb78dce769835558cac7481eea655b83fdf", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -0,0 +1,77 @@\n+use rustc_middle::ty::{self, TyCtxt};\n+use rustc_target::abi::VariantIdx;\n+\n+use std::iter;\n+\n+/// Destructures array, ADT or tuple constants into the constants\n+/// of their fields.\n+pub(crate) fn destructure_const<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    const_: ty::Const<'tcx>,\n+) -> ty::DestructuredConst<'tcx> {\n+    let ty::ConstKind::Value(valtree) = const_.kind() else {\n+        bug!(\"cannot destructure constant {:?}\", const_)\n+    };\n+\n+    let branches = match valtree {\n+        ty::ValTree::Branch(b) => b,\n+        _ => bug!(\"cannot destructure constant {:?}\", const_),\n+    };\n+\n+    let (fields, variant) = match const_.ty().kind() {\n+        ty::Array(inner_ty, _) | ty::Slice(inner_ty) => {\n+            // construct the consts for the elements of the array/slice\n+            let field_consts = branches\n+                .iter()\n+                .map(|b| tcx.mk_const(ty::ConstS { kind: ty::ConstKind::Value(*b), ty: *inner_ty }))\n+                .collect::<Vec<_>>();\n+            debug!(?field_consts);\n+\n+            (field_consts, None)\n+        }\n+        ty::Adt(def, _) if def.variants().is_empty() => bug!(\"unreachable\"),\n+        ty::Adt(def, substs) => {\n+            let (variant_idx, branches) = if def.is_enum() {\n+                let (head, rest) = branches.split_first().unwrap();\n+                (VariantIdx::from_u32(head.unwrap_leaf().try_to_u32().unwrap()), rest)\n+            } else {\n+                (VariantIdx::from_u32(0), branches)\n+            };\n+            let fields = &def.variant(variant_idx).fields;\n+            let mut field_consts = Vec::with_capacity(fields.len());\n+\n+            for (field, field_valtree) in iter::zip(fields, branches) {\n+                let field_ty = field.ty(tcx, substs);\n+                let field_const = tcx.mk_const(ty::ConstS {\n+                    kind: ty::ConstKind::Value(*field_valtree),\n+                    ty: field_ty,\n+                });\n+                field_consts.push(field_const);\n+            }\n+            debug!(?field_consts);\n+\n+            (field_consts, Some(variant_idx))\n+        }\n+        ty::Tuple(elem_tys) => {\n+            let fields = iter::zip(*elem_tys, branches)\n+                .map(|(elem_ty, elem_valtree)| {\n+                    tcx.mk_const(ty::ConstS {\n+                        kind: ty::ConstKind::Value(*elem_valtree),\n+                        ty: elem_ty,\n+                    })\n+                })\n+                .collect::<Vec<_>>();\n+\n+            (fields, None)\n+        }\n+        _ => bug!(\"cannot destructure constant {:?}\", const_),\n+    };\n+\n+    let fields = tcx.arena.alloc_from_iter(fields.into_iter());\n+\n+    ty::DestructuredConst { variant, fields }\n+}\n+\n+pub fn provide(providers: &mut ty::query::Providers) {\n+    *providers = ty::query::Providers { destructure_const, ..*providers };\n+}"}, {"sha": "7624d31b40bc7d851df965b3c06476b9c89a9153", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -18,6 +18,7 @@ use rustc_middle::ty::query::Providers;\n \n mod assoc;\n mod common_traits;\n+mod consts;\n pub mod instance;\n mod needs_drop;\n pub mod representability;\n@@ -26,6 +27,7 @@ mod ty;\n pub fn provide(providers: &mut Providers) {\n     assoc::provide(providers);\n     common_traits::provide(providers);\n+    consts::provide(providers);\n     needs_drop::provide(providers);\n     ty::provide(providers);\n     instance::provide(providers);"}, {"sha": "612dc384521886407bbb682917bc37be02885c68", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -645,7 +645,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 err.emit();\n             } else {\n                 let mut multispan = MultiSpan::from_span(span);\n-                multispan.push_span_label(span_late, note.to_string());\n+                multispan.push_span_label(span_late, note);\n                 tcx.struct_span_lint_hir(\n                     LATE_BOUND_LIFETIME_ARGUMENTS,\n                     args.args[0].id(),"}, {"sha": "035571c881c5646f7c52e4ba0798262685e1bdc4", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -154,18 +154,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ret_span.push_span_label(\n                         expr.span,\n                         \"this could be implicitly returned but it is a statement, not a \\\n-                            tail expression\"\n-                            .to_owned(),\n-                    );\n-                    ret_span.push_span_label(\n-                        ret,\n-                        \"the `match` arms can conform to this return type\".to_owned(),\n+                            tail expression\",\n                     );\n+                    ret_span\n+                        .push_span_label(ret, \"the `match` arms can conform to this return type\");\n                     ret_span.push_span_label(\n                         semi_span,\n                         \"the `match` is a statement because of this semicolon, consider \\\n-                            removing it\"\n-                            .to_owned(),\n+                            removing it\",\n                     );\n                     err.span_note(\n                         ret_span,"}, {"sha": "6430f2f9a240d4ac8a47cfa4a52849f3dcf9cdc6", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -1580,8 +1580,7 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) -> E\n             } else {\n                 let mut multispan: MultiSpan = spans.clone().into();\n                 for span in spans {\n-                    multispan\n-                        .push_span_label(span, \"this returned value is of `!` type\".to_string());\n+                    multispan.push_span_label(span, \"this returned value is of `!` type\");\n                 }\n                 err.span_note(multispan, \"these returned values have a concrete \\\"never\\\" type\");\n             }"}, {"sha": "d5075537ceddaa66706c5588a694dcb1cc6792e8", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -1034,7 +1034,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             );\n             sp.push_span_label(\n                 rcvr.span,\n-                \"you probably want to use this value after calling the method...\".to_string(),\n+                \"you probably want to use this value after calling the method...\",\n             );\n             err.span_note(\n                 sp,"}, {"sha": "d2e16021827a2fca63df0b36b20c00b9d222add4", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -1813,7 +1813,7 @@ fn label_fn_like<'tcx>(\n             .flat_map(|id| tcx.hir().body(id).params);\n \n         for param in params {\n-            spans.push_span_label(param.span, String::new());\n+            spans.push_span_label(param.span, \"\");\n         }\n \n         let def_kind = tcx.def_kind(def_id);"}, {"sha": "fa5f0eff22329f2275454b3adc435775b383398f", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -638,7 +638,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let parent_trait_ref = data.parent_trait_pred;\n                         let path = parent_trait_ref.print_modifiers_and_trait_path();\n                         let tr_self_ty = parent_trait_ref.skip_binder().self_ty();\n-                        let unsatisfied_msg = \"unsatisfied trait bound introduced here\".to_string();\n+                        let unsatisfied_msg = \"unsatisfied trait bound introduced here\";\n                         let derive_msg =\n                             \"unsatisfied trait bound introduced in this `derive` macro\";\n                         match self.tcx.hir().get_if_local(impl_def_id) {\n@@ -655,7 +655,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             {\n                                 let span = ident.span.ctxt().outer_expn_data().call_site;\n                                 let mut spans: MultiSpan = span.into();\n-                                spans.push_span_label(span, derive_msg.to_string());\n+                                spans.push_span_label(span, derive_msg);\n                                 let entry = spanned_predicates.entry(spans);\n                                 entry.or_insert_with(|| (path, tr_self_ty, Vec::new())).2.push(p);\n                             }\n@@ -678,7 +678,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             {\n                                 let span = self_ty.span.ctxt().outer_expn_data().call_site;\n                                 let mut spans: MultiSpan = span.into();\n-                                spans.push_span_label(span, derive_msg.to_string());\n+                                spans.push_span_label(span, derive_msg);\n                                 let entry = spanned_predicates.entry(spans);\n                                 entry.or_insert_with(|| (path, tr_self_ty, Vec::new())).2.push(p);\n                             }\n@@ -706,7 +706,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 } else {\n                                     ident.span.into()\n                                 };\n-                                spans.push_span_label(ident.span, \"in this trait\".to_string());\n+                                spans.push_span_label(ident.span, \"in this trait\");\n                                 let entry = spanned_predicates.entry(spans);\n                                 entry.or_insert_with(|| (path, tr_self_ty, Vec::new())).2.push(p);\n                             }\n@@ -747,9 +747,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     spans.into()\n                                 };\n                                 if let Some(trait_ref) = of_trait {\n-                                    spans.push_span_label(trait_ref.path.span, String::new());\n+                                    spans.push_span_label(trait_ref.path.span, \"\");\n                                 }\n-                                spans.push_span_label(self_ty.span, String::new());\n+                                spans.push_span_label(self_ty.span, \"\");\n \n                                 let entry = spanned_predicates.entry(spans);\n                                 entry.or_insert_with(|| (path, tr_self_ty, Vec::new())).2.push(p);"}, {"sha": "72a32dade4eeffe26438d2d93db1e73642a16066", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -836,7 +836,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n                     .take(bound)\n                     .map(|param| {\n                         let span = self.tcx.def_span(param.def_id);\n-                        spans.push_span_label(span, String::new());\n+                        spans.push_span_label(span, \"\");\n                         param\n                     })\n                     .map(|param| format!(\"`{}`\", param.name))"}, {"sha": "82103c5a03b6e04fe52fcf2ba3ba2af3ed57b1f5", "filename": "compiler/rustc_typeck/src/variance/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fmod.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -37,6 +37,11 @@ fn crate_variances(tcx: TyCtxt<'_>, (): ()) -> CrateVariancesMap<'_> {\n }\n \n fn variances_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[ty::Variance] {\n+    // Skip items with no generics - there's nothing to infer in them.\n+    if tcx.generics_of(item_def_id).count() == 0 {\n+        return &[];\n+    }\n+\n     match tcx.def_kind(item_def_id) {\n         DefKind::Fn\n         | DefKind::AssocFn"}, {"sha": "09308d4d0906d3e1abcd7d5403e728477f52906f", "filename": "library/alloc/src/boxed/thin.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -3,7 +3,9 @@\n // by matthieu-m\n use crate::alloc::{self, Layout, LayoutError};\n use core::fmt::{self, Debug, Display, Formatter};\n-use core::marker::{PhantomData, Unsize};\n+use core::marker::PhantomData;\n+#[cfg(not(no_global_oom_handling))]\n+use core::marker::Unsize;\n use core::mem;\n use core::ops::{Deref, DerefMut};\n use core::ptr::Pointee;"}, {"sha": "b0f4529abdfa5eb0f48727edb02952895c91d9b2", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -421,6 +421,7 @@ impl<T, A: Allocator> RawVec<T, A> {\n         Ok(())\n     }\n \n+    #[cfg(not(no_global_oom_handling))]\n     fn shrink(&mut self, cap: usize) -> Result<(), TryReserveError> {\n         assert!(cap <= self.capacity(), \"Tried to shrink to a larger capacity\");\n "}, {"sha": "b1513e5e0f31c50db71835ad98ebc723e571a961", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -46,9 +46,9 @@\n use core::char::{decode_utf16, REPLACEMENT_CHARACTER};\n use core::fmt;\n use core::hash;\n+use core::iter::FusedIterator;\n #[cfg(not(no_global_oom_handling))]\n-use core::iter::FromIterator;\n-use core::iter::{from_fn, FusedIterator};\n+use core::iter::{from_fn, FromIterator};\n #[cfg(not(no_global_oom_handling))]\n use core::ops::Add;\n #[cfg(not(no_global_oom_handling))]"}, {"sha": "28979457b7fd389049ee21ef83308be1264949c5", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -9,6 +9,7 @@ use core::iter::{\n };\n use core::marker::PhantomData;\n use core::mem::{self, ManuallyDrop};\n+#[cfg(not(no_global_oom_handling))]\n use core::ops::Deref;\n use core::ptr::{self, NonNull};\n use core::slice::{self};\n@@ -123,6 +124,7 @@ impl<T, A: Allocator> IntoIter<T, A> {\n     }\n \n     /// Forgets to Drop the remaining elements while still allowing the backing allocation to be freed.\n+    #[cfg(not(no_global_oom_handling))]\n     pub(crate) fn forget_remaining_elements(&mut self) {\n         self.ptr = self.end;\n     }"}, {"sha": "759a99c330c279d1aec9714b7eaae757908a315b", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -61,6 +61,30 @@ fn cc2ar(cc: &Path, target: TargetSelection) -> Option<PathBuf> {\n     }\n }\n \n+fn new_cc_build(build: &Build, target: TargetSelection) -> cc::Build {\n+    let mut cfg = cc::Build::new();\n+    cfg.cargo_metadata(false)\n+        .opt_level(2)\n+        .warnings(false)\n+        .debug(false)\n+        .target(&target.triple)\n+        .host(&build.build.triple);\n+    match build.crt_static(target) {\n+        Some(a) => {\n+            cfg.static_crt(a);\n+        }\n+        None => {\n+            if target.contains(\"msvc\") {\n+                cfg.static_crt(true);\n+            }\n+            if target.contains(\"musl\") {\n+                cfg.static_flag(true);\n+            }\n+        }\n+    }\n+    cfg\n+}\n+\n pub fn find(build: &mut Build) {\n     // For all targets we're going to need a C compiler for building some shims\n     // and such as well as for being a linker for Rust code.\n@@ -72,27 +96,7 @@ pub fn find(build: &mut Build) {\n         .chain(iter::once(build.build))\n         .collect::<HashSet<_>>();\n     for target in targets.into_iter() {\n-        let mut cfg = cc::Build::new();\n-        cfg.cargo_metadata(false)\n-            .opt_level(2)\n-            .warnings(false)\n-            .debug(false)\n-            .target(&target.triple)\n-            .host(&build.build.triple);\n-        match build.crt_static(target) {\n-            Some(a) => {\n-                cfg.static_crt(a);\n-            }\n-            None => {\n-                if target.contains(\"msvc\") {\n-                    cfg.static_crt(true);\n-                }\n-                if target.contains(\"musl\") {\n-                    cfg.static_flag(true);\n-                }\n-            }\n-        }\n-\n+        let mut cfg = new_cc_build(build, target);\n         let config = build.config.target_config.get(&target);\n         if let Some(cc) = config.and_then(|c| c.cc.as_ref()) {\n             cfg.compiler(cc);\n@@ -112,15 +116,8 @@ pub fn find(build: &mut Build) {\n \n         // If we use llvm-libunwind, we will need a C++ compiler as well for all targets\n         // We'll need one anyways if the target triple is also a host triple\n-        let mut cfg = cc::Build::new();\n-        cfg.cargo_metadata(false)\n-            .opt_level(2)\n-            .warnings(false)\n-            .debug(false)\n-            .cpp(true)\n-            .target(&target.triple)\n-            .host(&build.build.triple);\n-\n+        let mut cfg = new_cc_build(build, target);\n+        cfg.cpp(true);\n         let cxx_configured = if let Some(cxx) = config.and_then(|c| c.cxx.as_ref()) {\n             cfg.compiler(cxx);\n             true"}, {"sha": "c33e2727744384c7defdde3679032d739525c0e1", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -412,14 +412,15 @@ function loadCss(cssFileName) {\n         window.hidePopoverMenus();\n     }\n \n-    const disableShortcuts = getSettingValue(\"disable-shortcuts\") === \"true\";\n     function handleShortcut(ev) {\n         // Don't interfere with browser shortcuts\n+        const disableShortcuts = getSettingValue(\"disable-shortcuts\") === \"true\";\n         if (ev.ctrlKey || ev.altKey || ev.metaKey || disableShortcuts) {\n             return;\n         }\n \n-        if (document.activeElement.tagName === \"INPUT\") {\n+        if (document.activeElement.tagName === \"INPUT\" &&\n+            document.activeElement.type !== \"checkbox\") {\n             switch (getVirtualKey(ev)) {\n             case \"Escape\":\n                 handleEscape(ev);\n@@ -926,6 +927,7 @@ function loadCss(cssFileName) {\n     function showHelp() {\n         const menu = getHelpMenu(true);\n         if (menu.style.display === \"none\") {\n+            window.hidePopoverMenus();\n             menu.style.display = \"\";\n         }\n     }\n@@ -939,6 +941,8 @@ function loadCss(cssFileName) {\n         const shouldShowHelp = menu.style.display === \"none\";\n         if (shouldShowHelp) {\n             showHelp();\n+        } else {\n+            window.hidePopoverMenus();\n         }\n     });\n "}, {"sha": "eb6ad9bd1a7dab999a56517be4dccf1e6763bea7", "filename": "src/test/run-make-fulldeps/alloc-no-oom-handling/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Frun-make-fulldeps%2Falloc-no-oom-handling%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Frun-make-fulldeps%2Falloc-no-oom-handling%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Falloc-no-oom-handling%2FMakefile?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -1,4 +1,4 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) --edition=2021 --crate-type=rlib ../../../../library/alloc/src/lib.rs --cfg no_global_oom_handling\n+\t$(RUSTC) --edition=2021 -Dwarnings --crate-type=rlib ../../../../library/alloc/src/lib.rs --cfg no_global_oom_handling"}, {"sha": "54f3790a7652198942d963d2bc8778c7a1db89d4", "filename": "src/test/rustdoc-gui/pocket-menu.goml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Frustdoc-gui%2Fpocket-menu.goml", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Frustdoc-gui%2Fpocket-menu.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fpocket-menu.goml?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -24,6 +24,11 @@ click: \"#help-button\"\n assert-css: (\"#help-button .popover\", {\"display\": \"block\"})\n assert-css: (\"#settings-menu .popover\", {\"display\": \"none\"})\n \n+// Now verify that clicking the help menu again closes it.\n+click: \"#help-button\"\n+assert-css: (\"#help-button .popover\", {\"display\": \"none\"})\n+assert-css: (\"#settings-menu .popover\", {\"display\": \"none\"})\n+\n // We check the borders color now:\n \n // Ayu theme"}, {"sha": "c402c7991c8bbe6f1bb39d564ea2d05ec1a9588e", "filename": "src/test/rustdoc-gui/settings.goml", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Frustdoc-gui%2Fsettings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsettings.goml?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -121,6 +121,20 @@ local-storage: {\"rustdoc-disable-shortcuts\": \"false\"}\n click: \".setting-line:last-child .toggle .label\"\n assert-local-storage: {\"rustdoc-disable-shortcuts\": \"true\"}\n \n+// Make sure that \"Disable keyboard shortcuts\" actually took effect.\n+press-key: \"Escape\"\n+press-key: \"?\"\n+assert-false: \"#help-button .popover\"\n+wait-for-css: (\"#settings-menu .popover\", {\"display\": \"block\"})\n+\n+// Now turn keyboard shortcuts back on, and see if they work.\n+click: \".setting-line:last-child .toggle .label\"\n+assert-local-storage: {\"rustdoc-disable-shortcuts\": \"false\"}\n+press-key: \"Escape\"\n+press-key: \"?\"\n+wait-for-css: (\"#help-button .popover\", {\"display\": \"block\"})\n+assert-css: (\"#settings-menu .popover\", {\"display\": \"none\"})\n+\n // Now we go to the settings page to check that the CSS is loaded as expected.\n goto: file://|DOC_PATH|/settings.html\n wait-for: \"#settings\""}, {"sha": "3335f7d598480c1d916fd4df3110dbcd8d78b31e", "filename": "src/test/ui/const-generics/issue-66451.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66451.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -0,0 +1,28 @@\n+#![feature(adt_const_params)]\n+#![allow(incomplete_features)]\n+\n+#[derive(Debug, PartialEq, Eq)]\n+struct Foo {\n+    value: i32,\n+    nested: &'static Bar<i32>,\n+}\n+\n+#[derive(Debug, PartialEq, Eq)]\n+struct Bar<T>(T);\n+\n+struct Test<const F: Foo>;\n+\n+fn main() {\n+    let x: Test<{\n+        Foo {\n+            value: 3,\n+            nested: &Bar(4),\n+        }\n+    }> = Test;\n+    let y: Test<{\n+        Foo {\n+            value: 3,\n+            nested: &Bar(5),\n+        }\n+    }> = x; //~ ERROR mismatched types\n+}"}, {"sha": "b691eac4f2d0e16d6e28bc81d9329246ac0af8c6", "filename": "src/test/ui/const-generics/issue-66451.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66451.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66451.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66451.stderr?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -0,0 +1,20 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-66451.rs:27:10\n+   |\n+LL |       let y: Test<{\n+   |  ____________-\n+LL | |         Foo {\n+LL | |             value: 3,\n+LL | |             nested: &Bar(5),\n+LL | |         }\n+LL | |     }> = x;\n+   | |      -   ^ expected `Foo { value: 3_i32, nested: &Bar::<i32>(5_i32) }`, found `Foo { value: 3_i32, nested: &Bar::<i32>(4_i32) }`\n+   | |______|\n+   |        expected due to this\n+   |\n+   = note: expected struct `Test<Foo { value: 3_i32, nested: &Bar::<i32>(5_i32) }>`\n+              found struct `Test<Foo { value: 3_i32, nested: &Bar::<i32>(4_i32) }>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "30fcc9de6181eb72625f5035732c4c8920386013", "filename": "src/test/ui/deprecation/atomic_initializers.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Fui%2Fdeprecation%2Fatomic_initializers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Fui%2Fdeprecation%2Fatomic_initializers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fatomic_initializers.stderr?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -2,9 +2,13 @@ warning: use of deprecated constant `std::sync::atomic::ATOMIC_ISIZE_INIT`: the\n   --> $DIR/atomic_initializers.rs:8:27\n    |\n LL | static FOO: AtomicIsize = ATOMIC_ISIZE_INIT;\n-   |                           ^^^^^^^^^^^^^^^^^ help: replace the use of the deprecated constant: `AtomicIsize::new(0)`\n+   |                           ^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(deprecated)]` on by default\n+help: replace the use of the deprecated constant\n+   |\n+LL | static FOO: AtomicIsize = AtomicIsize::new(0);\n+   |                           ~~~~~~~~~~~~~~~~~~~\n \n warning: 1 warning emitted\n "}, {"sha": "8d4529526e37049d9c1286610aaf9a7d5ca13119", "filename": "src/test/ui/deprecation/issue-84637-deprecated-associated-function.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Fui%2Fdeprecation%2Fissue-84637-deprecated-associated-function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Fui%2Fdeprecation%2Fissue-84637-deprecated-associated-function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fissue-84637-deprecated-associated-function.stderr?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -2,19 +2,28 @@ error: use of deprecated associated function `core::str::<impl str>::trim_left`:\n   --> $DIR/issue-84637-deprecated-associated-function.rs:6:21\n    |\n LL |     let _foo = str::trim_left(\"   aoeu\");\n-   |                     ^^^^^^^^^ help: replace the use of the deprecated associated function: `trim_start`\n+   |                     ^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/issue-84637-deprecated-associated-function.rs:3:9\n    |\n LL | #![deny(deprecated)]\n    |         ^^^^^^^^^^\n+help: replace the use of the deprecated associated function\n+   |\n+LL |     let _foo = str::trim_start(\"   aoeu\");\n+   |                     ~~~~~~~~~~\n \n error: use of deprecated associated function `core::str::<impl str>::trim_left`: superseded by `trim_start`\n   --> $DIR/issue-84637-deprecated-associated-function.rs:8:26\n    |\n LL |     let _bar = \"   aoeu\".trim_left();\n-   |                          ^^^^^^^^^ help: replace the use of the deprecated associated function: `trim_start`\n+   |                          ^^^^^^^^^\n+   |\n+help: replace the use of the deprecated associated function\n+   |\n+LL |     let _bar = \"   aoeu\".trim_start();\n+   |                          ~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c5f2fc09125140551b85f12f4ae21e9c766d734f", "filename": "src/test/ui/deprecation/suggestion.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Fui%2Fdeprecation%2Fsuggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Fui%2Fdeprecation%2Fsuggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fsuggestion.stderr?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -2,19 +2,28 @@ error: use of deprecated function `bar::deprecated`: replaced by `replacement`\n   --> $DIR/suggestion.rs:42:10\n    |\n LL |     bar::deprecated();\n-   |          ^^^^^^^^^^ help: replace the use of the deprecated function: `replacement`\n+   |          ^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/suggestion.rs:8:9\n    |\n LL | #![deny(deprecated)]\n    |         ^^^^^^^^^^\n+help: replace the use of the deprecated function\n+   |\n+LL |     bar::replacement();\n+   |          ~~~~~~~~~~~\n \n error: use of deprecated associated function `Foo::deprecated`: replaced by `replacement`\n   --> $DIR/suggestion.rs:40:9\n    |\n LL |     foo.deprecated();\n-   |         ^^^^^^^^^^ help: replace the use of the deprecated associated function: `replacement`\n+   |         ^^^^^^^^^^\n+   |\n+help: replace the use of the deprecated associated function\n+   |\n+LL |     foo.replacement();\n+   |         ~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fdf3ca2e261b61f1fa123c5e5cac14ced80788bf", "filename": "src/test/ui/proc-macro/invalid-punct-ident-1.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -1,17 +1,9 @@\n // aux-build:invalid-punct-ident.rs\n-// rustc-env:RUST_BACKTRACE=0\n-\n-// FIXME https://github.com/rust-lang/rust/issues/59998\n-// normalize-stderr-test \"thread.*panicked.*proc_macro.*lib.rs.*\\n\" -> \"\"\n-// normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n-// normalize-stderr-test \"\\nerror: internal compiler error.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"note: rustc.*running on.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"query stack during panic:\\n\" -> \"\"\n-// normalize-stderr-test \"we're just showing a limited slice of the query stack\\n\" -> \"\"\n-// normalize-stderr-test \"end of query stack\\n\" -> \"\"\n+// ignore-stage1\n+// only-linux\n+//\n+// FIXME: This should be a normal (stage1, all platforms) test in\n+// src/test/ui/proc-macro once issue #59998 is fixed.\n \n #[macro_use]\n extern crate invalid_punct_ident;"}, {"sha": "bb0a48cb16b8dc5629fb5e8faa491b559f7945eb", "filename": "src/test/ui/proc-macro/invalid-punct-ident-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.stderr?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -1,5 +1,5 @@\n error: proc macro panicked\n-  --> $DIR/invalid-punct-ident-1.rs:19:1\n+  --> $DIR/invalid-punct-ident-1.rs:11:1\n    |\n LL | invalid_punct!();\n    | ^^^^^^^^^^^^^^^^"}, {"sha": "cf48294e1997ff921adb7a6f221683c240e2c327", "filename": "src/test/ui/typeck/issue-98260.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Fui%2Ftypeck%2Fissue-98260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Fui%2Ftypeck%2Fissue-98260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-98260.rs?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -0,0 +1,9 @@\n+fn main() {}\n+trait A {\n+    fn a(aa: B) -> Result<_, B> {\n+    //~^ ERROR: the placeholder `_` is not allowed within types on item signatures for return types [E0121]\n+        Ok(())\n+    }\n+}\n+\n+enum B {}"}, {"sha": "08a1d17e244a8d945c4c80aadf5cf9282e1864a2", "filename": "src/test/ui/typeck/issue-98260.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Fui%2Ftypeck%2Fissue-98260.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/src%2Ftest%2Fui%2Ftypeck%2Fissue-98260.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-98260.stderr?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -0,0 +1,12 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/issue-98260.rs:3:27\n+   |\n+LL |     fn a(aa: B) -> Result<_, B> {\n+   |                    -------^----\n+   |                    |      |\n+   |                    |      not allowed in type signatures\n+   |                    help: replace with the correct return type: `Result<(), B>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "dbff32b27893b899ae2397f3d56d1be111041d56", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -1 +1 @@\n-Subproject commit a5e08c4703f202e30cdaf80ca3e7c00baa59c496\n+Subproject commit dbff32b27893b899ae2397f3d56d1be111041d56"}, {"sha": "bebb583e100a4c44772e5223adfc960a2fd1cce4", "filename": "triagebot.toml", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbba036aee08f0709f98a92a342a278eae5c05/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbba036aee08f0709f98a92a342a278eae5c05/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=ddcbba036aee08f0709f98a92a342a278eae5c05", "patch": "@@ -219,7 +219,7 @@ changelog-branch = \"master\"\n \n [mentions.\"compiler/rustc_apfloat\"]\n message = \"\"\"\n-Changes rustc_apfloat. rustc_apfloat is currently in limbo and you almost\n+Changes rustc_apfloat. rustc_apfloat is currently in limbo and you almost \\\n certainly don't want to change it (see #55993).\n \"\"\"\n cc = [\"@eddyb\"]\n@@ -258,22 +258,22 @@ cc = [\"@GuillaumeGomez\"]\n message = \"\"\"\n Hey! It looks like you've submitted a new PR for the library teams!\n \n-If this PR contains changes to any `rust-lang/rust` public library APIs then\n-please comment with `@rustbot label +T-libs-api -T-libs` to tag it\n-appropriately. If this PR contains changes to any unstable APIs please edit\n-the PR description to add a link to the relevant [API Change\n-Proposal](https://std-dev-guide.rust-lang.org/feature-lifecycle/api-change-proposals.html)\n-or [create one](https://github.com/rust-lang/libs-team/issues/new?assignees=&labels=api-change-proposal%2C+T-libs-api&template=api-change-proposal.md&title=%28My+API+Change+Proposal%29)\n-if you haven't already. If you're unsure where your change falls no worries,\n-just leave it as is and the reviewer will take a look and make a decision to\n+If this PR contains changes to any `rust-lang/rust` public library APIs then \\\n+please comment with `@rustbot label +T-libs-api -T-libs` to tag it \\\n+appropriately. If this PR contains changes to any unstable APIs please edit \\\n+the PR description to add a link to the relevant [API Change \\\n+Proposal](https://std-dev-guide.rust-lang.org/feature-lifecycle/api-change-proposals.html) \\\n+or [create one](https://github.com/rust-lang/libs-team/issues/new?assignees=&labels=api-change-proposal%2C+T-libs-api&template=api-change-proposal.md&title=%28My+API+Change+Proposal%29) \\\n+if you haven't already. If you're unsure where your change falls no worries, \\\n+just leave it as is and the reviewer will take a look and make a decision to \\\n forward on if necessary.\n \n Examples of `T-libs-api` changes:\n \n * Stabilizing library features\n-* Introducing insta-stable changes such as new implementations of existing\n+* Introducing insta-stable changes such as new implementations of existing \\\n   stable traits on existing stable types\n-* Introducing new or changing existing unstable library APIs (excluding\n+* Introducing new or changing existing unstable library APIs (excluding \\\n   permanently unstable features / features without a tracking issue)\n * Changing public documentation in ways that create new stability guarantees\n * Changing observable runtime behavior of library APIs\n@@ -300,8 +300,8 @@ cc = [\"@Cldfire\"]\n \n [mentions.\"src/rustdoc-json-types\"]\n message = \"\"\"\n-rustdoc-json-types is a **public** (although nightly-only) API.\n-If possible, consider changing `src/librustdoc/json/conversions.rs`;\n+rustdoc-json-types is a **public** (although nightly-only) API. \\\n+If possible, consider changing `src/librustdoc/json/conversions.rs`; \\\n otherwise, make sure you bump the `FORMAT_VERSION` constant.\n \"\"\"\n cc = ["}]}