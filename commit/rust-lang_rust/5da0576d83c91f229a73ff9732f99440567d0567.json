{"sha": "5da0576d83c91f229a73ff9732f99440567d0567", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYTA1NzZkODNjOTFmMjI5YTczZmY5NzMyZjk5NDQwNTY3ZDA1Njc=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-06-21T00:59:04Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-07-01T16:42:30Z"}, "message": "Insert NoDelim groups around nonterminals when lowering macro_rules", "tree": {"sha": "39d1d5b85335c4cc9787ee6378b38dd5cd645366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39d1d5b85335c4cc9787ee6378b38dd5cd645366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5da0576d83c91f229a73ff9732f99440567d0567", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl78vPYACgkQtAh+UQ6Y\nsWQo1hAAiVBE/6SjCatQgxHRHMyerWp6hrl9Q4Sl7l7NTOnvIXc3yJwAmSIksIMc\nOR4pugf9NWtrRFIcyUpWQlV+nwqD3sRSfCIiS6mx2nOcKwl7S0fsqXg2GvDCxJaF\nfzcTLCejDQ6mYxM7L61dLqM5gxUwM9sKfbkDHE38Snx0TF22uvNrnE2Bn5zkhPgz\nZhAeV5v1G+KWotOGIfsQ33SkNzyAj4IdSPPrwLoAKd4ZeTwQhdoIc4gvWVkKk6t5\nfYJm3MEA9UoXOPBBhnuJ8FUzQoiAEC9iU1mpSYMO17uLLMuT0LQPrp4MHdNNwc9s\nJzTUlvqsF5DpnQtV4fND2Qtlu2Z3liJAHluITEO8rQHhWtJvI4CdMXb556AxeJEo\nbCVWHqk9oRwpTyaxhyZ24dV0+Rl68ioMg93WBprplmvtT53WwJTlphIobFokicpX\nPmbSBZKEpumXTeubcqv9CJl7g6dDaS0CfQoAxrOSkHG18RA2uTgFomMGItg09hHS\nVbrFCvh0MGdwuVcpcdUlYRj/KyLVafLXUGh9M+ATmeRy/mMzIH9HW8/HU8gM7rYe\nowrVcCqtHlrLAhAQ+ft+92mbHhUOmgfU8RNuX7GcpJceuKI9Vjh9fDIi39R8j/CC\nZwvvv+lRNdT/uTZ1JMKzTZuqPIq+LqsJ1/D6zweItJ3Y7D+yavw=\n=aLfk\n-----END PGP SIGNATURE-----", "payload": "tree 39d1d5b85335c4cc9787ee6378b38dd5cd645366\nparent 0ca7f74dbd23a3e8ec491cd3438f490a3ac22741\nauthor Aaron Hill <aa1ronham@gmail.com> 1592701144 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1593621750 -0400\n\nInsert NoDelim groups around nonterminals when lowering macro_rules\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5da0576d83c91f229a73ff9732f99440567d0567", "html_url": "https://github.com/rust-lang/rust/commit/5da0576d83c91f229a73ff9732f99440567d0567", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5da0576d83c91f229a73ff9732f99440567d0567/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ca7f74dbd23a3e8ec491cd3438f490a3ac22741", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ca7f74dbd23a3e8ec491cd3438f490a3ac22741", "html_url": "https://github.com/rust-lang/rust/commit/0ca7f74dbd23a3e8ec491cd3438f490a3ac22741"}], "stats": {"total": 315, "additions": 308, "deletions": 7}, "files": [{"sha": "2dbfe90318edebde390f252171ef9bc01f286721", "filename": "src/librustc_ast/attr/mod.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5da0576d83c91f229a73ff9732f99440567d0567/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da0576d83c91f229a73ff9732f99440567d0567/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fattr%2Fmod.rs?ref=5da0576d83c91f229a73ff9732f99440567d0567", "patch": "@@ -560,6 +560,9 @@ impl MetaItemKind {\n         tokens: &mut impl Iterator<Item = TokenTree>,\n     ) -> Option<MetaItemKind> {\n         match tokens.next() {\n+            Some(TokenTree::Delimited(_, token::NoDelim, inner_tokens)) => {\n+                MetaItemKind::name_value_from_tokens(&mut inner_tokens.trees())\n+            }\n             Some(TokenTree::Token(token)) => {\n                 Lit::from_token(&token).ok().map(MetaItemKind::NameValue)\n             }\n@@ -619,13 +622,20 @@ impl NestedMetaItem {\n     where\n         I: Iterator<Item = TokenTree>,\n     {\n-        if let Some(TokenTree::Token(token)) = tokens.peek() {\n-            if let Ok(lit) = Lit::from_token(token) {\n+        match tokens.peek() {\n+            Some(TokenTree::Token(token)) => {\n+                if let Ok(lit) = Lit::from_token(token) {\n+                    tokens.next();\n+                    return Some(NestedMetaItem::Literal(lit));\n+                }\n+            }\n+            Some(TokenTree::Delimited(_, token::NoDelim, inner_tokens)) => {\n+                let inner_tokens = inner_tokens.clone();\n                 tokens.next();\n-                return Some(NestedMetaItem::Literal(lit));\n+                return NestedMetaItem::from_tokens(&mut inner_tokens.into_trees().peekable());\n             }\n+            _ => {}\n         }\n-\n         MetaItem::from_tokens(tokens).map(NestedMetaItem::MetaItem)\n     }\n }"}, {"sha": "433dcea9b6ccd8584cc01fe5c1795812560fb79e", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5da0576d83c91f229a73ff9732f99440567d0567/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da0576d83c91f229a73ff9732f99440567d0567/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=5da0576d83c91f229a73ff9732f99440567d0567", "patch": "@@ -39,8 +39,8 @@ use rustc_ast::ast;\n use rustc_ast::ast::*;\n use rustc_ast::attr;\n use rustc_ast::node_id::NodeMap;\n-use rustc_ast::token::{self, Nonterminal, Token};\n-use rustc_ast::tokenstream::{TokenStream, TokenTree};\n+use rustc_ast::token::{self, DelimToken, Nonterminal, Token};\n+use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree};\n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n use rustc_ast::walk_list;\n use rustc_ast_pretty::pprust;\n@@ -1029,7 +1029,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         match token.kind {\n             token::Interpolated(nt, _) => {\n                 let tts = (self.nt_to_tokenstream)(&nt, &self.sess.parse_sess, token.span);\n-                self.lower_token_stream(tts)\n+                TokenTree::Delimited(\n+                    DelimSpan::from_single(token.span),\n+                    DelimToken::NoDelim,\n+                    self.lower_token_stream(tts),\n+                )\n+                .into()\n             }\n             _ => TokenTree::Token(token).into(),\n         }"}, {"sha": "7101525b3097721272e0de0cb09a09c871c3a511", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5da0576d83c91f229a73ff9732f99440567d0567/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da0576d83c91f229a73ff9732f99440567d0567/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=5da0576d83c91f229a73ff9732f99440567d0567", "patch": "@@ -387,6 +387,7 @@ pub fn compile_declarative_macro(\n     def: &ast::Item,\n     edition: Edition,\n ) -> SyntaxExtension {\n+    debug!(\"compile_declarative_macro: {:?}\", def);\n     let mk_syn_ext = |expander| {\n         SyntaxExtension::new(\n             sess,"}, {"sha": "d29f7380d9ee77d90699fbca240dd7d0b2fbc501", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5da0576d83c91f229a73ff9732f99440567d0567/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da0576d83c91f229a73ff9732f99440567d0567/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=5da0576d83c91f229a73ff9732f99440567d0567", "patch": "@@ -1049,6 +1049,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 Some(attr) => attr,\n                 None => return Bound::Unbounded,\n             };\n+            debug!(\"layout_scalar_valid_range: attr={:?}\", attr);\n             for meta in attr.meta_item_list().expect(\"rustc_layout_scalar_valid_range takes args\") {\n                 match meta.literal().expect(\"attribute takes lit\").kind {\n                     ast::LitKind::Int(a, _) => return Bound::Included(a),"}, {"sha": "9de39e9b56c986da89bc8365f0ffa788bc68588e", "filename": "src/test/ui/macros/doc-comment.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5da0576d83c91f229a73ff9732f99440567d0567/src%2Ftest%2Fui%2Fmacros%2Fdoc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da0576d83c91f229a73ff9732f99440567d0567/src%2Ftest%2Fui%2Fmacros%2Fdoc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fdoc-comment.rs?ref=5da0576d83c91f229a73ff9732f99440567d0567", "patch": "@@ -0,0 +1,25 @@\n+// check-pass\n+// Tests that we properly handle a nested macro expansion\n+// involving a `#[doc]` attribute\n+#![deny(missing_docs)]\n+//! Crate docs\n+\n+macro_rules! doc_comment {\n+    ($x:expr, $($tt:tt)*) => {\n+        #[doc = $x]\n+        $($tt)*\n+    }\n+}\n+\n+macro_rules! make_comment {\n+    () => {\n+        doc_comment!(\"Function docs\",\n+            pub fn bar() {}\n+        );\n+    }\n+}\n+\n+\n+make_comment!();\n+\n+fn main() {}"}, {"sha": "52ebe8e7fb2ef1d8906f00d0c2389853cd8f53ed", "filename": "src/test/ui/proc-macro/auxiliary/nested-macro-rules.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5da0576d83c91f229a73ff9732f99440567d0567/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fnested-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da0576d83c91f229a73ff9732f99440567d0567/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fnested-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fnested-macro-rules.rs?ref=5da0576d83c91f229a73ff9732f99440567d0567", "patch": "@@ -0,0 +1,15 @@\n+pub struct FirstStruct;\n+\n+#[macro_export]\n+macro_rules! outer_macro {\n+    ($name:ident) => {\n+        #[macro_export]\n+        macro_rules! inner_macro {\n+            ($wrapper:ident) => {\n+                $wrapper!($name)\n+            }\n+        }\n+    }\n+}\n+\n+outer_macro!(FirstStruct);"}, {"sha": "8682ebdd109f02f8d7c2b405abcb7a258225d320", "filename": "src/test/ui/proc-macro/auxiliary/test-macros.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5da0576d83c91f229a73ff9732f99440567d0567/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da0576d83c91f229a73ff9732f99440567d0567/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs?ref=5da0576d83c91f229a73ff9732f99440567d0567", "patch": "@@ -101,6 +101,12 @@ pub fn print_bang(input: TokenStream) -> TokenStream {\n     print_helper(input, \"BANG\")\n }\n \n+#[proc_macro]\n+pub fn print_bang_consume(input: TokenStream) -> TokenStream {\n+    print_helper(input, \"BANG\");\n+    TokenStream::new()\n+}\n+\n #[proc_macro_attribute]\n pub fn print_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n     print_helper(input, \"ATTR\")"}, {"sha": "2f8ef20232782d663d91dc669e93d0e13580855e", "filename": "src/test/ui/proc-macro/nested-macro-rules.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5da0576d83c91f229a73ff9732f99440567d0567/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da0576d83c91f229a73ff9732f99440567d0567/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.rs?ref=5da0576d83c91f229a73ff9732f99440567d0567", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+// aux-build:nested-macro-rules.rs\n+// aux-build:test-macros.rs\n+// compile-flags: -Z span-debug\n+// edition:2018\n+\n+extern crate nested_macro_rules;\n+extern crate test_macros;\n+\n+use test_macros::print_bang;\n+\n+use nested_macro_rules::FirstStruct;\n+struct SecondStruct;\n+\n+fn main() {\n+    nested_macro_rules::inner_macro!(print_bang);\n+\n+    nested_macro_rules::outer_macro!(SecondStruct);\n+    inner_macro!(print_bang);\n+}"}, {"sha": "429c1f927fc47b405f43a71a335411e11dd533d3", "filename": "src/test/ui/proc-macro/nested-macro-rules.stdout", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5da0576d83c91f229a73ff9732f99440567d0567/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5da0576d83c91f229a73ff9732f99440567d0567/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.stdout?ref=5da0576d83c91f229a73ff9732f99440567d0567", "patch": "@@ -0,0 +1,27 @@\n+PRINT-BANG INPUT (DISPLAY):  FirstStruct \n+PRINT-BANG INPUT (DEBUG): TokenStream [\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"FirstStruct\",\n+                span: $DIR/auxiliary/nested-macro-rules.rs:15:14: 15:25 (#3),\n+            },\n+        ],\n+        span: $DIR/auxiliary/nested-macro-rules.rs:9:27: 9:32 (#3),\n+    },\n+]\n+PRINT-BANG INPUT (DISPLAY): SecondStruct\n+PRINT-BANG RE-COLLECTED (DISPLAY):  SecondStruct \n+PRINT-BANG INPUT (DEBUG): TokenStream [\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"SecondStruct\",\n+                span: $DIR/nested-macro-rules.rs:18:38: 18:50 (#9),\n+            },\n+        ],\n+        span: $DIR/auxiliary/nested-macro-rules.rs:9:27: 9:32 (#8),\n+    },\n+]"}, {"sha": "cfcd4c0d2a658071b66780086b6a00c50a449d98", "filename": "src/test/ui/proc-macro/nodelim-groups.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5da0576d83c91f229a73ff9732f99440567d0567/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da0576d83c91f229a73ff9732f99440567d0567/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.rs?ref=5da0576d83c91f229a73ff9732f99440567d0567", "patch": "@@ -0,0 +1,19 @@\n+// run-pass\n+// aux-build:test-macros.rs\n+// compile-flags: -Z span-debug\n+// edition:2018\n+//\n+// Tests the pretty-printing behavior of inserting `NoDelim` groups\n+\n+extern crate test_macros;\n+use test_macros::print_bang_consume;\n+\n+macro_rules! expand_it {\n+    (($val1:expr) ($val2:expr)) => { expand_it!($val1 + $val2) };\n+    ($val:expr) => { print_bang_consume!(\"hi\" $val (1 + 1)) };\n+}\n+\n+fn main() {\n+    expand_it!(1 + (25) + 1);\n+    expand_it!((\"hello\".len()) (\"world\".len()));\n+}"}, {"sha": "75a189a9fcdeab28073086e5282a7de052ef1cae", "filename": "src/test/ui/proc-macro/nodelim-groups.stdout", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/5da0576d83c91f229a73ff9732f99440567d0567/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5da0576d83c91f229a73ff9732f99440567d0567/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout?ref=5da0576d83c91f229a73ff9732f99440567d0567", "patch": "@@ -0,0 +1,156 @@\n+PRINT-BANG INPUT (DISPLAY): \"hi\" 1 + (25) + 1 (1 + 1)\n+PRINT-BANG INPUT (DEBUG): TokenStream [\n+    Literal {\n+        kind: Str,\n+        symbol: \"hi\",\n+        suffix: None,\n+        span: $DIR/nodelim-groups.rs:13:42: 13:46 (#3),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/nodelim-groups.rs:17:16: 17:17 (#0),\n+            },\n+            Punct {\n+                ch: '+',\n+                spacing: Alone,\n+                span: $DIR/nodelim-groups.rs:17:18: 17:19 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Literal {\n+                        kind: Integer,\n+                        symbol: \"25\",\n+                        suffix: None,\n+                        span: $DIR/nodelim-groups.rs:17:21: 17:23 (#0),\n+                    },\n+                ],\n+                span: $DIR/nodelim-groups.rs:17:20: 17:24 (#0),\n+            },\n+            Punct {\n+                ch: '+',\n+                spacing: Alone,\n+                span: $DIR/nodelim-groups.rs:17:25: 17:26 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/nodelim-groups.rs:17:27: 17:28 (#0),\n+            },\n+        ],\n+        span: $DIR/nodelim-groups.rs:13:47: 13:51 (#3),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/nodelim-groups.rs:13:53: 13:54 (#3),\n+            },\n+            Punct {\n+                ch: '+',\n+                spacing: Alone,\n+                span: $DIR/nodelim-groups.rs:13:55: 13:56 (#3),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/nodelim-groups.rs:13:57: 13:58 (#3),\n+            },\n+        ],\n+        span: $DIR/nodelim-groups.rs:13:52: 13:59 (#3),\n+    },\n+]\n+PRINT-BANG INPUT (DISPLAY): \"hi\" \"hello\".len() + \"world\".len() (1 + 1)\n+PRINT-BANG RE-COLLECTED (DISPLAY): \"hi\" \"hello\" . len() + \"world\" . len() (1 + 1)\n+PRINT-BANG INPUT (DEBUG): TokenStream [\n+    Literal {\n+        kind: Str,\n+        symbol: \"hi\",\n+        suffix: None,\n+        span: $DIR/nodelim-groups.rs:13:42: 13:46 (#8),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Str,\n+                symbol: \"hello\",\n+                suffix: None,\n+                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#8),\n+            },\n+            Punct {\n+                ch: '.',\n+                spacing: Alone,\n+                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#8),\n+            },\n+            Ident {\n+                ident: \"len\",\n+                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#8),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [],\n+                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#8),\n+            },\n+            Punct {\n+                ch: '+',\n+                spacing: Alone,\n+                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#8),\n+            },\n+            Literal {\n+                kind: Str,\n+                symbol: \"world\",\n+                suffix: None,\n+                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#8),\n+            },\n+            Punct {\n+                ch: '.',\n+                spacing: Alone,\n+                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#8),\n+            },\n+            Ident {\n+                ident: \"len\",\n+                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#8),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [],\n+                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#8),\n+            },\n+        ],\n+        span: $DIR/nodelim-groups.rs:13:47: 13:51 (#8),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/nodelim-groups.rs:13:53: 13:54 (#8),\n+            },\n+            Punct {\n+                ch: '+',\n+                spacing: Alone,\n+                span: $DIR/nodelim-groups.rs:13:55: 13:56 (#8),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/nodelim-groups.rs:13:57: 13:58 (#8),\n+            },\n+        ],\n+        span: $DIR/nodelim-groups.rs:13:52: 13:59 (#8),\n+    },\n+]"}, {"sha": "9192ecfe196cb9d3f2b09eb2e87bd0889c337e7c", "filename": "src/test/ui/unsafe/ranged_ints_macro.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5da0576d83c91f229a73ff9732f99440567d0567/src%2Ftest%2Fui%2Funsafe%2Franged_ints_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da0576d83c91f229a73ff9732f99440567d0567/src%2Ftest%2Fui%2Funsafe%2Franged_ints_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints_macro.rs?ref=5da0576d83c91f229a73ff9732f99440567d0567", "patch": "@@ -0,0 +1,16 @@\n+// build-pass\n+#![feature(rustc_attrs)]\n+\n+macro_rules! apply {\n+    ($val:expr) => {\n+        #[rustc_layout_scalar_valid_range_start($val)]\n+        #[repr(transparent)]\n+        pub(crate) struct NonZero<T>(pub(crate) T);\n+    }\n+}\n+\n+apply!(1);\n+\n+fn main() {\n+    let _x = unsafe { NonZero(1) };\n+}"}]}