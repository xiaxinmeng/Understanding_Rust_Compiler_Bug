{"sha": "4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMzRiZmQwMGE1N2Y4YThiZGI2MGVjM2Y5MDhjNWQ0MjU2ZjhhOWE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-04-12T09:50:53Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-04-12T10:12:42Z"}, "message": "Change the hashcounts in raw `Lit` variants from usize to u16.\n\nThis reduces the size of `Token` from 32 bytes to 24 bytes on 64-bit\nplatforms.", "tree": {"sha": "d4699fcf5af416a32e953be9b85124bb9aab7c9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4699fcf5af416a32e953be9b85124bb9aab7c9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a", "html_url": "https://github.com/rust-lang/rust/commit/4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d26f9e42df76603fd21b0fe5dd1e8001caf9bf81", "url": "https://api.github.com/repos/rust-lang/rust/commits/d26f9e42df76603fd21b0fe5dd1e8001caf9bf81", "html_url": "https://github.com/rust-lang/rust/commit/d26f9e42df76603fd21b0fe5dd1e8001caf9bf81"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "d1f8e75192ae178adc7d5c16b6a2898d5a1b4376", "filename": "src/libproc_macro/quote.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a/src%2Flibproc_macro%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a/src%2Flibproc_macro%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fquote.rs?ref=4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a", "patch": "@@ -163,9 +163,9 @@ impl<'a> Quote for &'a str {\n     }\n }\n \n-impl Quote for usize {\n+impl Quote for u16 {\n     fn quote(self) -> TokenStream {\n-        TokenTree::from(Literal::usize_unsuffixed(self)).into()\n+        TokenTree::from(Literal::u16_unsuffixed(self)).into()\n     }\n }\n \n@@ -197,7 +197,7 @@ macro_rules! literals {\n     ($($i:ident),*; $($raw:ident),*) => {\n         pub enum LiteralKind {\n             $($i,)*\n-            $($raw(usize),)*\n+            $($raw(u16),)*\n         }\n \n         impl LiteralKind {"}, {"sha": "a5aa4ee1cf85b822019a492829fcecb10197b11a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a", "patch": "@@ -1260,8 +1260,8 @@ pub enum StrStyle {\n     Cooked,\n     /// A raw string, like `r##\"foo\"##`\n     ///\n-    /// The uint is the number of `#` symbols used\n-    Raw(usize)\n+    /// The value is the number of `#` symbols used.\n+    Raw(u16)\n }\n \n /// A literal"}, {"sha": "084b5c3bb5542276ecab29074c46ad9113904e6d", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a", "patch": "@@ -139,6 +139,7 @@ pub trait AstBuilder {\n     fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr>;\n     fn expr_isize(&self, sp: Span, i: isize) -> P<ast::Expr>;\n     fn expr_u8(&self, sp: Span, u: u8) -> P<ast::Expr>;\n+    fn expr_u16(&self, sp: Span, u: u16) -> P<ast::Expr>;\n     fn expr_u32(&self, sp: Span, u: u32) -> P<ast::Expr>;\n     fn expr_bool(&self, sp: Span, value: bool) -> P<ast::Expr>;\n \n@@ -708,6 +709,10 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr_lit(sp, ast::LitKind::Int(u as u128,\n                                             ast::LitIntType::Unsigned(ast::UintTy::U32)))\n     }\n+    fn expr_u16(&self, sp: Span, u: u16) -> P<ast::Expr> {\n+        self.expr_lit(sp, ast::LitKind::Int(u as u128,\n+                                            ast::LitIntType::Unsigned(ast::UintTy::U16)))\n+    }\n     fn expr_u8(&self, sp: Span, u: u8) -> P<ast::Expr> {\n         self.expr_lit(sp, ast::LitKind::Int(u as u128, ast::LitIntType::Unsigned(ast::UintTy::U8)))\n     }"}, {"sha": "eeed291c0caaf0d3404d27595668bc9caf733930", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a", "patch": "@@ -623,7 +623,7 @@ fn expr_mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> P<ast::Expr> {\n         ($name: expr, $suffix: expr, $content: expr $(, $count: expr)*) => {{\n             let name = mk_name(cx, sp, ast::Ident::with_empty_ctxt($content));\n             let inner = cx.expr_call(sp, mk_token_path(cx, sp, $name), vec![\n-                name $(, cx.expr_usize(sp, $count))*\n+                name $(, cx.expr_u16(sp, $count))*\n             ]);\n             let suffix = match $suffix {\n                 Some(name) => cx.expr_some(sp, mk_name(cx, sp, ast::Ident::with_empty_ctxt(name))),"}, {"sha": "22a0261d8c6b15fe9c05b4ce9e2634aa6f69d9b4", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a", "patch": "@@ -133,12 +133,12 @@ impl<'a> StringReader<'a> {\n         Ok(ret_val)\n     }\n \n-    fn fail_unterminated_raw_string(&self, pos: BytePos, hash_count: usize) {\n+    fn fail_unterminated_raw_string(&self, pos: BytePos, hash_count: u16) {\n         let mut err = self.struct_span_fatal(pos, pos, \"unterminated raw string\");\n         err.span_label(self.mk_sp(pos, pos), \"unterminated raw string\");\n         if hash_count > 0 {\n             err.note(&format!(\"this raw string should be terminated with `\\\"{}`\",\n-                              \"#\".repeat(hash_count)));\n+                              \"#\".repeat(hash_count as usize)));\n         }\n         err.emit();\n         FatalError.raise();\n@@ -1439,7 +1439,7 @@ impl<'a> StringReader<'a> {\n             'r' => {\n                 let start_bpos = self.pos;\n                 self.bump();\n-                let mut hash_count = 0;\n+                let mut hash_count: u16 = 0;\n                 while self.ch_is('#') {\n                     self.bump();\n                     hash_count += 1;"}, {"sha": "8c76fe30ea4ae5825b116eb0c904c4b21ed6c259", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a", "patch": "@@ -72,9 +72,9 @@ pub enum Lit {\n     Integer(ast::Name),\n     Float(ast::Name),\n     Str_(ast::Name),\n-    StrRaw(ast::Name, usize), /* raw str delimited by n hash symbols */\n+    StrRaw(ast::Name, u16), /* raw str delimited by n hash symbols */\n     ByteStr(ast::Name),\n-    ByteStrRaw(ast::Name, usize), /* raw byte str delimited by n hash symbols */\n+    ByteStrRaw(ast::Name, u16), /* raw byte str delimited by n hash symbols */\n }\n \n impl Lit {"}, {"sha": "747aad816cfb94392d224ff553b2cfa923ac9f87", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=4d34bfd00a57f8a8bdb60ec3f908c5d4256f8a9a", "patch": "@@ -234,11 +234,11 @@ pub fn token_to_string(tok: &Token) -> String {\n                 token::Integer(c)        => c.to_string(),\n                 token::Str_(s)           => format!(\"\\\"{}\\\"\", s),\n                 token::StrRaw(s, n)      => format!(\"r{delim}\\\"{string}\\\"{delim}\",\n-                                                    delim=repeat(\"#\", n),\n+                                                    delim=repeat(\"#\", n as usize),\n                                                     string=s),\n                 token::ByteStr(v)         => format!(\"b\\\"{}\\\"\", v),\n                 token::ByteStrRaw(s, n)   => format!(\"br{delim}\\\"{string}\\\"{delim}\",\n-                                                    delim=repeat(\"#\", n),\n+                                                    delim=repeat(\"#\", n as usize),\n                                                     string=s),\n             };\n \n@@ -660,7 +660,7 @@ pub trait PrintState<'a> {\n             }\n             ast::StrStyle::Raw(n) => {\n                 (format!(\"r{delim}\\\"{string}\\\"{delim}\",\n-                         delim=repeat(\"#\", n),\n+                         delim=repeat(\"#\", n as usize),\n                          string=st))\n             }\n         };"}]}