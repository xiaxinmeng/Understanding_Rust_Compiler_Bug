{"sha": "941154721ef294149710597409a38294db2a6e07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MTE1NDcyMWVmMjk0MTQ5NzEwNTk3NDA5YTM4Mjk0ZGIyYTZlMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-01T23:51:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-01T23:51:45Z"}, "message": "auto merge of #6161 : graydon/rust/glob-retry, r=graydon\n\nThis is a retry of pull #5832", "tree": {"sha": "7c02e5577563b392d8916d7c1124453e6b47c75a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c02e5577563b392d8916d7c1124453e6b47c75a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/941154721ef294149710597409a38294db2a6e07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/941154721ef294149710597409a38294db2a6e07", "html_url": "https://github.com/rust-lang/rust/commit/941154721ef294149710597409a38294db2a6e07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/941154721ef294149710597409a38294db2a6e07/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08dd625d455548c7a5795db930ebfc5e3b1eb9c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/08dd625d455548c7a5795db930ebfc5e3b1eb9c4", "html_url": "https://github.com/rust-lang/rust/commit/08dd625d455548c7a5795db930ebfc5e3b1eb9c4"}, {"sha": "ed81e3353ea8d92b61669dc8d8692d5e9b01a8f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed81e3353ea8d92b61669dc8d8692d5e9b01a8f4", "html_url": "https://github.com/rust-lang/rust/commit/ed81e3353ea8d92b61669dc8d8692d5e9b01a8f4"}], "stats": {"total": 191, "additions": 189, "deletions": 2}, "files": [{"sha": "999a5d9b350e4a03d1b9507badd26a0d8e28bb58", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 106, "deletions": 2, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/941154721ef294149710597409a38294db2a6e07/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/941154721ef294149710597409a38294db2a6e07/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=941154721ef294149710597409a38294db2a6e07", "patch": "@@ -104,6 +104,7 @@ pub use libc::funcs::posix88::unistd::*;\n \n pub use libc::funcs::posix01::stat_::*;\n pub use libc::funcs::posix01::unistd::*;\n+pub use libc::funcs::posix01::glob::*;\n pub use libc::funcs::posix08::unistd::*;\n \n pub use libc::funcs::bsd44::*;\n@@ -210,7 +211,21 @@ pub mod types {\n     #[cfg(target_os = \"android\")]\n     pub mod os {\n         pub mod common {\n-            pub mod posix01 {}\n+            pub mod posix01 {\n+                use libc::types::common::c95::{c_void};\n+                use libc::types::os::arch::c95::{c_char, size_t};\n+                pub struct glob_t {\n+                    gl_pathc: size_t,\n+                    gl_pathv: **c_char,\n+                    gl_offs:  size_t,\n+\n+                    __unused1: *c_void,\n+                    __unused2: *c_void,\n+                    __unused3: *c_void,\n+                    __unused4: *c_void,\n+                    __unused5: *c_void,\n+                }\n+            }\n         }\n \n         #[cfg(target_arch = \"x86\")]\n@@ -369,7 +384,25 @@ pub mod types {\n     #[cfg(target_os = \"freebsd\")]\n     pub mod os {\n         pub mod common {\n-            pub mod posix01 {}\n+            pub mod posix01 {\n+                use libc::types::common::c95::{c_void};\n+                use libc::types::os::arch::c95::{c_char, c_int, size_t};\n+                pub struct glob_t {\n+                    gl_pathc:  size_t,\n+                    __unused1: size_t,\n+                    gl_offs:   size_t,\n+                    __unused2: c_int,\n+                    gl_pathv:  **c_char,\n+\n+                    __unused3: *c_void,\n+\n+                    __unused4: *c_void,\n+                    __unused5: *c_void,\n+                    __unused6: *c_void,\n+                    __unused7: *c_void,\n+                    __unused8: *c_void,\n+                }\n+            }\n         }\n \n         #[cfg(target_arch = \"x86_64\")]\n@@ -571,6 +604,23 @@ pub mod types {\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n+                use libc::types::common::c95::{c_void};\n+                use libc::types::os::arch::c95::{c_char, c_int, size_t};\n+                pub struct glob_t {\n+                    gl_pathc:  size_t,\n+                    __unused1: c_int,\n+                    gl_offs:   size_t,\n+                    __unused2: c_int,\n+                    gl_pathv:  **c_char,\n+\n+                    __unused3: *c_void,\n+\n+                    __unused4: *c_void,\n+                    __unused5: *c_void,\n+                    __unused6: *c_void,\n+                    __unused7: *c_void,\n+                    __unused8: *c_void,\n+                }\n             }\n         }\n \n@@ -877,6 +927,18 @@ pub mod consts {\n         }\n         pub mod posix01 {\n             pub static SIGTRAP : int = 5;\n+\n+            pub static GLOB_ERR      : int = 1 << 0;\n+            pub static GLOB_MARK     : int = 1 << 1;\n+            pub static GLOB_NOSORT   : int = 1 << 2;\n+            pub static GLOB_DOOFFS   : int = 1 << 3;\n+            pub static GLOB_NOCHECK  : int = 1 << 4;\n+            pub static GLOB_APPEND   : int = 1 << 5;\n+            pub static GLOB_NOESCAPE : int = 1 << 6;\n+\n+            pub static GLOB_NOSPACE  : int = 1;\n+            pub static GLOB_ABORTED  : int = 2;\n+            pub static GLOB_NOMATCH  : int = 3;\n         }\n         pub mod posix08 {\n         }\n@@ -956,6 +1018,18 @@ pub mod consts {\n         }\n         pub mod posix01 {\n             pub static SIGTRAP : int = 5;\n+\n+            pub static GLOB_APPEND   : int = 0x0001;\n+            pub static GLOB_DOOFFS   : int = 0x0002;\n+            pub static GLOB_ERR      : int = 0x0004;\n+            pub static GLOB_MARK     : int = 0x0008;\n+            pub static GLOB_NOCHECK  : int = 0x0010;\n+            pub static GLOB_NOSORT   : int = 0x0020;\n+            pub static GLOB_NOESCAPE : int = 0x2000;\n+\n+            pub static GLOB_NOSPACE  : int = -1;\n+            pub static GLOB_ABORTED  : int = -2;\n+            pub static GLOB_NOMATCH  : int = -3;\n         }\n         pub mod posix08 {\n         }\n@@ -1036,6 +1110,18 @@ pub mod consts {\n         }\n         pub mod posix01 {\n             pub static SIGTRAP : int = 5;\n+\n+            pub static GLOB_APPEND   : int = 0x0001;\n+            pub static GLOB_DOOFFS   : int = 0x0002;\n+            pub static GLOB_ERR      : int = 0x0004;\n+            pub static GLOB_MARK     : int = 0x0008;\n+            pub static GLOB_NOCHECK  : int = 0x0010;\n+            pub static GLOB_NOSORT   : int = 0x0020;\n+            pub static GLOB_NOESCAPE : int = 0x2000;\n+\n+            pub static GLOB_NOSPACE  : int = -1;\n+            pub static GLOB_ABORTED  : int = -2;\n+            pub static GLOB_NOMATCH  : int = -3;\n         }\n         pub mod posix08 {\n         }\n@@ -1606,6 +1692,21 @@ pub mod funcs {\n                                -> pid_t;\n             }\n         }\n+\n+        #[nolink]\n+        #[abi = \"cdecl\"]\n+        pub mod glob {\n+            use libc::types::common::c95::{c_void};\n+            use libc::types::os::arch::c95::{c_char, c_int};\n+            use libc::types::os::common::posix01::{glob_t};\n+\n+            pub extern {\n+                unsafe fn glob(pattern: *c_char, flags: c_int,\n+                               errfunc: *c_void, // XXX callback\n+                               pglob: *mut glob_t);\n+                unsafe fn globfree(pglob: *mut glob_t);\n+            }\n+        }\n     }\n \n     #[cfg(target_os = \"win32\")]\n@@ -1615,6 +1716,9 @@ pub mod funcs {\n \n         pub mod unistd {\n         }\n+\n+        pub mod glob {\n+        }\n     }\n \n "}, {"sha": "8efae3e0e6890caad1725693c9ba4e31fc11d307", "filename": "src/libcore/os.rs", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/941154721ef294149710597409a38294db2a6e07/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/941154721ef294149710597409a38294db2a6e07/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=941154721ef294149710597409a38294db2a6e07", "patch": "@@ -38,6 +38,7 @@ use ptr;\n use str;\n use task;\n use uint;\n+use unstable::finally::Finally;\n use vec;\n \n pub use libc::fclose;\n@@ -1183,6 +1184,88 @@ pub fn set_args(new_args: ~[~str]) {\n     }\n }\n \n+// FIXME #6100 we should really use an internal implementation of this - using\n+// the POSIX glob functions isn't portable to windows, probably has slight\n+// inconsistencies even where it is implemented, and makes extending\n+// functionality a lot more difficult\n+// FIXME #6101 also provide a non-allocating version - each_glob or so?\n+/// Returns a vector of Path objects that match the given glob pattern\n+#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"android\")]\n+#[cfg(target_os = \"freebsd\")]\n+#[cfg(target_os = \"macos\")]\n+pub fn glob(pattern: &str) -> ~[Path] {\n+    #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"android\")]\n+    fn default_glob_t () -> libc::glob_t {\n+        libc::glob_t {\n+            gl_pathc: 0,\n+            gl_pathv: ptr::null(),\n+            gl_offs: 0,\n+            __unused1: ptr::null(),\n+            __unused2: ptr::null(),\n+            __unused3: ptr::null(),\n+            __unused4: ptr::null(),\n+            __unused5: ptr::null(),\n+        }\n+    }\n+\n+    #[cfg(target_os = \"freebsd\")]\n+    fn default_glob_t () -> libc::glob_t {\n+        libc::glob_t {\n+            gl_pathc: 0,\n+            __unused1: 0,\n+            gl_offs: 0,\n+            __unused2: 0,\n+            gl_pathv: ptr::null(),\n+            __unused3: ptr::null(),\n+            __unused4: ptr::null(),\n+            __unused5: ptr::null(),\n+            __unused6: ptr::null(),\n+            __unused7: ptr::null(),\n+            __unused8: ptr::null(),\n+        }\n+    }\n+\n+    #[cfg(target_os = \"macos\")]\n+    fn default_glob_t () -> libc::glob_t {\n+        libc::glob_t {\n+            gl_pathc: 0,\n+            __unused1: 0,\n+            gl_offs: 0,\n+            __unused2: 0,\n+            gl_pathv: ptr::null(),\n+            __unused3: ptr::null(),\n+            __unused4: ptr::null(),\n+            __unused5: ptr::null(),\n+            __unused6: ptr::null(),\n+            __unused7: ptr::null(),\n+            __unused8: ptr::null(),\n+        }\n+    }\n+\n+    let mut g = default_glob_t();\n+    do str::as_c_str(pattern) |c_pattern| {\n+        unsafe { libc::glob(c_pattern, 0, ptr::null(), &mut g) }\n+    };\n+    do(|| {\n+        let paths = unsafe {\n+            vec::raw::from_buf_raw(g.gl_pathv, g.gl_pathc as uint)\n+        };\n+        do paths.map |&c_str| {\n+            Path(unsafe { str::raw::from_c_str(c_str) })\n+        }\n+    }).finally {\n+        unsafe { libc::globfree(&mut g) };\n+    }\n+}\n+\n+/// Returns a vector of Path objects that match the given glob pattern\n+#[cfg(target_os = \"win32\")]\n+pub fn glob(pattern: &str) -> ~[Path] {\n+    fail!(~\"glob() is unimplemented on Windows\")\n+}\n+\n #[cfg(target_os = \"macos\")]\n extern {\n     // These functions are in crt_externs.h."}]}