{"sha": "f78776e9d8b2ed7028612f782b7e571f3d2e7330", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ODc3NmU5ZDhiMmVkNzAyODYxMmY3ODJiN2U1NzFmM2QyZTczMzA=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-07-30T21:51:21Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-07-31T00:26:14Z"}, "message": "rustc: \"iface\" -> \"trait\" in comments, error messages, and identifiers.\n\n(Also \"interface\" -> \"trait\" in error messages.)", "tree": {"sha": "543c9f2eea4f1859f48e01baaa0af4238c2116f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/543c9f2eea4f1859f48e01baaa0af4238c2116f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f78776e9d8b2ed7028612f782b7e571f3d2e7330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f78776e9d8b2ed7028612f782b7e571f3d2e7330", "html_url": "https://github.com/rust-lang/rust/commit/f78776e9d8b2ed7028612f782b7e571f3d2e7330", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f78776e9d8b2ed7028612f782b7e571f3d2e7330/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbd39f868bad019ea36fc4d7557015f94d255f06", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbd39f868bad019ea36fc4d7557015f94d255f06", "html_url": "https://github.com/rust-lang/rust/commit/dbd39f868bad019ea36fc4d7557015f94d255f06"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "6f4716208a20ebd8795bf327ad0e524a2af7061c", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=f78776e9d8b2ed7028612f782b7e571f3d2e7330", "patch": "@@ -421,7 +421,7 @@ fn encode_info_for_mod(ecx: @encode_ctxt, ebml_w: ebml::writer, md: _mod,\n           }\n           _ {\n             // Must be a re-export, then!\n-            // ...or an iface ref\n+            // ...or a trait ref\n             ebml_w.wr_str(def_to_str(did));\n           }\n         };"}, {"sha": "34529710825c20bbd8f3f19ac34185e61795583b", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=f78776e9d8b2ed7028612f782b7e571f3d2e7330", "patch": "@@ -466,7 +466,7 @@ fn check_owned(tcx: ty::ctxt, ty: ty::t, sp: span) -> bool {\n }\n \n /// This is rather subtle.  When we are casting a value to a\n-/// instantiated iface like `a as iface/&r`, regionck already ensures\n+/// instantiated trait like `a as trait/&r`, regionck already ensures\n /// that any borrowed pointers that appear in the type of `a` are\n /// bounded by `&r`.  However, it is possible that there are *type\n /// parameters* in the type of `a`, and those *type parameters* may\n@@ -475,14 +475,14 @@ fn check_owned(tcx: ty::ctxt, ty: ty::t, sp: span) -> bool {\n ///\n /// Therefore, we ensure that one of three conditions holds:\n ///\n-/// (1) The iface instance cannot escape the current fn.  This is\n+/// (1) The trait instance cannot escape the current fn.  This is\n /// guaranteed if the region bound `&r` is some scope within the fn\n /// itself.  This case is safe because whatever borrowed pointers are\n /// found within the type parameter, they must enclose the fn body\n /// itself.\n ///\n-/// (2) The type parameter appears in the type of the iface.  For\n-/// example, if the type parameter is `T` and the iface type is\n+/// (2) The type parameter appears in the type of the trait.  For\n+/// example, if the type parameter is `T` and the trait type is\n /// `deque<T>`, then whatever borrowed ptrs may appear in `T` also\n /// appear in `deque<T>`.\n ///\n@@ -493,15 +493,15 @@ fn check_cast_for_escaping_regions(\n     source: @expr,\n     target: @expr) {\n \n-    // Determine what type we are casting to; if it is not an iface, then no\n+    // Determine what type we are casting to; if it is not an trait, then no\n     // worries.\n     let target_ty = ty::expr_ty(cx.tcx, target);\n     let target_substs = alt ty::get(target_ty).struct {\n       ty::ty_trait(_, substs) => {substs}\n       _ => { ret; /* not a cast to a trait */ }\n     };\n \n-    // Check, based on the region associated with the iface, whether it can\n+    // Check, based on the region associated with the trait, whether it can\n     // possibly escape the enclosing fn item (note that all type parameters\n     // must have been declared on the enclosing fn item):\n     alt target_substs.self_r {\n@@ -514,8 +514,8 @@ fn check_cast_for_escaping_regions(\n       }\n     }\n \n-    // Assuming the iface instance can escape, then ensure that each parameter\n-    // either appears in the iface type or is owned:\n+    // Assuming the trait instance can escape, then ensure that each parameter\n+    // either appears in the trait type or is owned:\n     let target_params = ty::param_tys_in_type(target_ty);\n     let source_ty = ty::expr_ty(cx.tcx, source);\n     do ty::walk_ty(source_ty) |ty| {"}, {"sha": "c49a6889f055570b9694c00066d784fbe6151e34", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=f78776e9d8b2ed7028612f782b7e571f3d2e7330", "patch": "@@ -3365,7 +3365,7 @@ class Resolver {\n                     none {\n                         self.session.span_err(interface.path.span,\n                                               ~\"attempt to implement a \\\n-                                               nonexistent interface\");\n+                                               nonexistent trait\");\n                     }\n                     some(def) {\n                         // Write a mapping from the interface ID to the"}, {"sha": "a2ba9277fd0e20547c2952b5a2639f03197c1af7", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=f78776e9d8b2ed7028612f782b7e571f3d2e7330", "patch": "@@ -1611,7 +1611,7 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n         remove_send(mutable_type_kind(cx, tm) | kind_safe_for_default_mode())\n       }\n \n-      // Iface instances are (for now) like shared boxes, basically\n+      // Trait instances are (for now) like shared boxes, basically\n       ty_trait(_, _) { kind_safe_for_default_mode() | kind_owned() }\n \n       // Region pointers are copyable but NOT owned nor sendable\n@@ -1711,7 +1711,7 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n         param_bounds_to_kind(cx.ty_param_bounds.get(p.def_id.node))\n       }\n \n-      // self is a special type parameter that can only appear in ifaces; it\n+      // self is a special type parameter that can only appear in traits; it\n       // is never bounded in any way, hence it has the bottom kind.\n       ty_self { kind_noncopyable() }\n "}, {"sha": "585d0ccf5cf4e60184cb61399527011be978a693", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=f78776e9d8b2ed7028612f782b7e571f3d2e7330", "patch": "@@ -258,7 +258,7 @@ class lookup {\n                 self.tcx().sess.span_err(\n                     self.expr.span,\n                     ~\"can not call a method that contains a \\\n-                     self type through a boxed iface\");\n+                     self type through a boxed trait\");\n             }\n \n             if (*m.tps).len() > 0u {"}, {"sha": "850181576ab44b4e258cdd4b6ed8704e33687e33", "filename": "src/rustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=f78776e9d8b2ed7028612f782b7e571f3d2e7330", "patch": "@@ -137,9 +137,9 @@ fn visit_expr(e: @ast::expr, &&rcx: @rcx, v: rvt) {\n       }\n \n       ast::expr_cast(source, _) {\n-        // Determine if we are casting `source` to an iface instance.\n+        // Determine if we are casting `source` to an trait instance.\n         // If so, we have to be sure that the type of the source obeys\n-        // the iface's region bound.\n+        // the trait's region bound.\n         //\n         // Note: there is a subtle point here concerning type\n         // parameters.  It is possible that the type of `source`\n@@ -155,12 +155,12 @@ fn visit_expr(e: @ast::expr, &&rcx: @rcx, v: rvt) {\n           result::ok(target_ty) => {\n             alt ty::get(target_ty).struct {\n               ty::ty_trait(_, substs) {\n-                let iface_region = alt substs.self_r {\n+                let trait_region = alt substs.self_r {\n                   some(r) => {r}\n                   none => {ty::re_static}\n                 };\n                 let source_ty = rcx.fcx.expr_ty(source);\n-                constrain_regions_in_type(rcx, iface_region,\n+                constrain_regions_in_type(rcx, trait_region,\n                                           e.span, source_ty);\n               }\n               _ { }"}, {"sha": "f023f3aeae76ff1e1f3640687e102c6cfbff0a83", "filename": "src/rustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=f78776e9d8b2ed7028612f782b7e571f3d2e7330", "patch": "@@ -100,11 +100,11 @@ fn lookup_vtable(fcx: @fn_ctxt, sp: span, ty: ty::t, trait_ty: ty::t,\n             for vec::each(*ty::trait_methods(tcx, did)) |m| {\n                 if ty::type_has_self(ty::mk_fn(tcx, m.fty)) {\n                     tcx.sess.span_err(\n-                        sp, ~\"a boxed iface with self types may not be \\\n+                        sp, ~\"a boxed trait with self types may not be \\\n                              passed as a bounded type\");\n                 } else if (*m.tps).len() > 0u {\n                     tcx.sess.span_err(\n-                        sp, ~\"a boxed iface with generic methods may not \\\n+                        sp, ~\"a boxed trait with generic methods may not \\\n                              be passed as a bounded type\");\n \n                 }"}, {"sha": "d695101f87753ae5578858381863324e141339ba", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=f78776e9d8b2ed7028612f782b7e571f3d2e7330", "patch": "@@ -195,7 +195,7 @@ fn compare_impl_method(tcx: ty::ctxt, sp: span,\n \n     if vec::len(impl_m.fty.inputs) != vec::len(if_m.fty.inputs) {\n         tcx.sess.span_err(sp,#fmt[\"method `%s` has %u parameters \\\n-                                   but the iface has %u\",\n+                                   but the trait has %u\",\n                                   *if_m.ident,\n                                   vec::len(impl_m.fty.inputs),\n                                   vec::len(if_m.fty.inputs)]);\n@@ -398,7 +398,7 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n         let cms = convert_methods(ccx, methods, rp, bounds, selfty);\n         for traits.each |trt| {\n             check_methods_against_trait(ccx, tps, rp, selfty, trt, cms);\n-            // trt.impl_id represents (class, iface) pair\n+            // trt.impl_id represents (class, trait) pair\n             write_ty_to_tcx(tcx, trt.impl_id, tpt.ty);\n             tcx.tcache.insert(local_def(trt.impl_id), tpt);\n         }\n@@ -455,7 +455,7 @@ fn ty_of_ty_method(self: @crate_ctxt,\n fn instantiate_trait_ref(ccx: @crate_ctxt, t: @ast::trait_ref, rp: bool)\n     -> (ast::def_id, ty_param_substs_and_ty) {\n \n-    let sp = t.path.span, err = ~\"can only implement interface types\",\n+    let sp = t.path.span, err = ~\"can only implement trait types\",\n         sess = ccx.tcx.sess;\n \n     let rscope = type_rscope(rp);"}, {"sha": "ccc821ce78a2e497a0360cb8921d9e61f1e124d2", "filename": "src/test/compile-fail/class-implements-int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Ftest%2Fcompile-fail%2Fclass-implements-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Ftest%2Fcompile-fail%2Fclass-implements-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-implements-int.rs?ref=f78776e9d8b2ed7028612f782b7e571f3d2e7330", "patch": "@@ -1,4 +1,4 @@\n-class cat : int { //~ ERROR interface\n+class cat : int { //~ ERROR trait\n   let meows: uint;\n   new(in_x : uint) { self.meows = in_x; }\n }"}, {"sha": "9c51f56e54cb03adaaeb5e42af70e0bd0f30eac0", "filename": "src/test/compile-fail/iface-impl-different-num-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Ftest%2Fcompile-fail%2Fiface-impl-different-num-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Ftest%2Fcompile-fail%2Fiface-impl-different-num-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fiface-impl-different-num-params.rs?ref=f78776e9d8b2ed7028612f782b7e571f3d2e7330", "patch": "@@ -3,7 +3,7 @@ iface foo {\n }\n impl of foo for int {\n     fn bar() -> int {\n-        //~^ ERROR method `bar` has 0 parameters but the iface has 1\n+        //~^ ERROR method `bar` has 0 parameters but the trait has 1\n         self\n     }\n }"}, {"sha": "9bbba8f5caff11f2b08275481c482e659e0fe881", "filename": "src/test/compile-fail/issue-2330.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs?ref=f78776e9d8b2ed7028612f782b7e571f3d2e7330", "patch": "@@ -4,8 +4,8 @@ iface channel<T> {\n     fn send(v: T);\n }\n \n-// `chan` is not an iface, it's an enum\n-impl of chan for int { //~ ERROR can only implement interface types\n+// `chan` is not a trait, it's an enum\n+impl of chan for int { //~ ERROR can only implement trait types\n     fn send(v: int) { fail }\n }\n "}, {"sha": "64699267c4dc08667bb0116449413009b6ab542a", "filename": "src/test/compile-fail/selftype-astparam.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Ftest%2Fcompile-fail%2Fselftype-astparam.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Ftest%2Fcompile-fail%2Fselftype-astparam.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fselftype-astparam.rs?ref=f78776e9d8b2ed7028612f782b7e571f3d2e7330", "patch": "@@ -11,5 +11,5 @@ fn do_add<A:add>(x: A, y: A) -> A { x.plus(y) }\n fn main() {\n     let x = 3 as add;\n     let y = 4 as add;\n-    do_add(x, y); //~ ERROR a boxed iface with self types may not be passed as a bounded type\n+    do_add(x, y); //~ ERROR a boxed trait with self types may not be passed as a bounded type\n }"}, {"sha": "c4ba8093886ef0077f285ba716ff8e4de257057e", "filename": "src/test/compile-fail/selftype-ifacetype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Ftest%2Fcompile-fail%2Fselftype-ifacetype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78776e9d8b2ed7028612f782b7e571f3d2e7330/src%2Ftest%2Fcompile-fail%2Fselftype-ifacetype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fselftype-ifacetype.rs?ref=f78776e9d8b2ed7028612f782b7e571f3d2e7330", "patch": "@@ -3,7 +3,7 @@ iface add {\n }\n \n fn do_add(x: add, y: add) -> add {\n-    x.plus(y) //~ ERROR can not call a method that contains a self type through a boxed iface\n+    x.plus(y) //~ ERROR can not call a method that contains a self type through a boxed trait\n }\n \n fn main() {}"}]}