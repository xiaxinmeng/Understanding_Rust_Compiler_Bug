{"sha": "77b7df33077aedfe8df903f95165872243f4acd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3YjdkZjMzMDc3YWVkZmU4ZGY5MDNmOTUxNjU4NzIyNDNmNGFjZDQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-05-11T13:47:15Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-05-15T13:27:49Z"}, "message": "Fix instability in GlobalMetadata::Impls ICH.", "tree": {"sha": "30a746bbd922f9a361a73f085d0cd5d91a4ea5bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30a746bbd922f9a361a73f085d0cd5d91a4ea5bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77b7df33077aedfe8df903f95165872243f4acd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77b7df33077aedfe8df903f95165872243f4acd4", "html_url": "https://github.com/rust-lang/rust/commit/77b7df33077aedfe8df903f95165872243f4acd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77b7df33077aedfe8df903f95165872243f4acd4/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "513cc6d538885959f504b2fba4f613d2b9690a4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/513cc6d538885959f504b2fba4f613d2b9690a4c", "html_url": "https://github.com/rust-lang/rust/commit/513cc6d538885959f504b2fba4f613d2b9690a4c"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "93fcdc455e5dd3762dc7dfe7d6f78e13c4e66ea0", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/77b7df33077aedfe8df903f95165872243f4acd4/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b7df33077aedfe8df903f95165872243f4acd4/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=77b7df33077aedfe8df903f95165872243f4acd4", "patch": "@@ -943,7 +943,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 let trait_ref = tcx.impl_trait_ref(def_id);\n                 let parent = if let Some(trait_ref) = trait_ref {\n                     let trait_def = tcx.trait_def(trait_ref.def_id);\n-                    trait_def.ancestors(def_id).skip(1).next().and_then(|node| {\n+                    trait_def.ancestors(tcx, def_id).skip(1).next().and_then(|node| {\n                         match node {\n                             specialization_graph::Node::Impl(parent) => Some(parent),\n                             _ => None,\n@@ -1295,23 +1295,37 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n \n     /// Encodes an index, mapping each trait to its (local) implementations.\n     fn encode_impls(&mut self, _: ()) -> LazySeq<TraitImpls> {\n+        debug!(\"IsolatedEncoder::encode_impls()\");\n+        let tcx = self.tcx;\n         let mut visitor = ImplVisitor {\n-            tcx: self.tcx,\n+            tcx: tcx,\n             impls: FxHashMap(),\n         };\n-        self.tcx.hir.krate().visit_all_item_likes(&mut visitor);\n+        tcx.hir.krate().visit_all_item_likes(&mut visitor);\n+\n+        let mut all_impls: Vec<_> = visitor.impls.into_iter().collect();\n \n-        let all_impls: Vec<_> = visitor.impls\n+        // Bring everything into deterministic order for hashing\n+        all_impls.sort_unstable_by_key(|&(trait_def_id, _)| {\n+            tcx.def_path_hash(trait_def_id)\n+        });\n+\n+        let all_impls: Vec<_> = all_impls\n             .into_iter()\n-            .map(|(trait_def_id, impls)| {\n+            .map(|(trait_def_id, mut impls)| {\n+                // Bring everything into deterministic order for hashing\n+                impls.sort_unstable_by_key(|&def_index| {\n+                    tcx.hir.definitions().def_path_hash(def_index)\n+                });\n+\n                 TraitImpls {\n                     trait_id: (trait_def_id.krate.as_u32(), trait_def_id.index),\n-                    impls: self.lazy_seq(impls),\n+                    impls: self.lazy_seq_from_slice(&impls[..]),\n                 }\n             })\n             .collect();\n \n-        self.lazy_seq(all_impls)\n+        self.lazy_seq_from_slice(&all_impls[..])\n     }\n \n     // Encodes all symbols exported from this crate into the metadata."}]}