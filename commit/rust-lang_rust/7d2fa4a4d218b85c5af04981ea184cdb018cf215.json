{"sha": "7d2fa4a4d218b85c5af04981ea184cdb018cf215", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMmZhNGE0ZDIxOGI4NWM1YWYwNDk4MWVhMTg0Y2RiMDE4Y2YyMTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-26T03:49:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-26T03:49:37Z"}, "message": "Auto merge of #50630 - sharkdp:fix-50619, r=sfackler\n\nFix possibly endless loop in ReadDir iterator\n\nCertain directories in `/proc` can cause the `ReadDir` iterator to loop indefinitely. We get an error code (22) when calling libc's `readdir_r` on these directories, but `entry_ptr` is `NULL` at the same time, signalling the end of the directory stream.\n\nThis change introduces an internal state to the iterator such that the `Some(Err(..))` value will only be returned once when calling `next`. Subsequent calls will return `None`.\n\nfixes #50619", "tree": {"sha": "f4098a7b553c0258356adf518eb6f19b1ec02529", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4098a7b553c0258356adf518eb6f19b1ec02529"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d2fa4a4d218b85c5af04981ea184cdb018cf215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d2fa4a4d218b85c5af04981ea184cdb018cf215", "html_url": "https://github.com/rust-lang/rust/commit/7d2fa4a4d218b85c5af04981ea184cdb018cf215", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d2fa4a4d218b85c5af04981ea184cdb018cf215/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335", "html_url": "https://github.com/rust-lang/rust/commit/fdd9cdc8792d8fa4a64956c7d3263fa5ce18e335"}, {"sha": "af75314ecdbc5564f300467e732fdb5c923a873a", "url": "https://api.github.com/repos/rust-lang/rust/commits/af75314ecdbc5564f300467e732fdb5c923a873a", "html_url": "https://github.com/rust-lang/rust/commit/af75314ecdbc5564f300467e732fdb5c923a873a"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "e186b115821649d37155da058a835f2bff6425b0", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7d2fa4a4d218b85c5af04981ea184cdb018cf215/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d2fa4a4d218b85c5af04981ea184cdb018cf215/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=7d2fa4a4d218b85c5af04981ea184cdb018cf215", "patch": "@@ -59,7 +59,10 @@ struct InnerReadDir {\n }\n \n #[derive(Clone)]\n-pub struct ReadDir(Arc<InnerReadDir>);\n+pub struct ReadDir {\n+    inner: Arc<InnerReadDir>,\n+    end_of_stream: bool,\n+}\n \n struct Dir(*mut libc::DIR);\n \n@@ -215,7 +218,7 @@ impl fmt::Debug for ReadDir {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         // This will only be called from std::fs::ReadDir, which will add a \"ReadDir()\" frame.\n         // Thus the result will be e g 'ReadDir(\"/home\")'\n-        fmt::Debug::fmt(&*self.0.root, f)\n+        fmt::Debug::fmt(&*self.inner.root, f)\n     }\n }\n \n@@ -231,7 +234,7 @@ impl Iterator for ReadDir {\n                 // is safe to use in threaded applications and it is generally preferred\n                 // over the readdir_r(3C) function.\n                 super::os::set_errno(0);\n-                let entry_ptr = libc::readdir(self.0.dirp.0);\n+                let entry_ptr = libc::readdir(self.inner.dirp.0);\n                 if entry_ptr.is_null() {\n                     // NULL can mean either the end is reached or an error occurred.\n                     // So we had to clear errno beforehand to check for an error now.\n@@ -259,14 +262,25 @@ impl Iterator for ReadDir {\n \n     #[cfg(not(any(target_os = \"solaris\", target_os = \"fuchsia\")))]\n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n+        if self.end_of_stream {\n+            return None;\n+        }\n+\n         unsafe {\n             let mut ret = DirEntry {\n                 entry: mem::zeroed(),\n                 dir: self.clone(),\n             };\n             let mut entry_ptr = ptr::null_mut();\n             loop {\n-                if readdir64_r(self.0.dirp.0, &mut ret.entry, &mut entry_ptr) != 0 {\n+                if readdir64_r(self.inner.dirp.0, &mut ret.entry, &mut entry_ptr) != 0 {\n+                    if entry_ptr.is_null() {\n+                        // We encountered an error (which will be returned in this iteration), but\n+                        // we also reached the end of the directory stream. The `end_of_stream`\n+                        // flag is enabled to make sure that we return `None` in the next iteration\n+                        // (instead of looping forever)\n+                        self.end_of_stream = true;\n+                    }\n                     return Some(Err(Error::last_os_error()))\n                 }\n                 if entry_ptr.is_null() {\n@@ -289,7 +303,7 @@ impl Drop for Dir {\n \n impl DirEntry {\n     pub fn path(&self) -> PathBuf {\n-        self.dir.0.root.join(OsStr::from_bytes(self.name_bytes()))\n+        self.dir.inner.root.join(OsStr::from_bytes(self.name_bytes()))\n     }\n \n     pub fn file_name(&self) -> OsString {\n@@ -298,7 +312,7 @@ impl DirEntry {\n \n     #[cfg(any(target_os = \"linux\", target_os = \"emscripten\", target_os = \"android\"))]\n     pub fn metadata(&self) -> io::Result<FileAttr> {\n-        let fd = cvt(unsafe {dirfd(self.dir.0.dirp.0)})?;\n+        let fd = cvt(unsafe {dirfd(self.dir.inner.dirp.0)})?;\n         let mut stat: stat64 = unsafe { mem::zeroed() };\n         cvt(unsafe {\n             fstatat64(fd, self.entry.d_name.as_ptr(), &mut stat, libc::AT_SYMLINK_NOFOLLOW)\n@@ -691,7 +705,10 @@ pub fn readdir(p: &Path) -> io::Result<ReadDir> {\n             Err(Error::last_os_error())\n         } else {\n             let inner = InnerReadDir { dirp: Dir(ptr), root };\n-            Ok(ReadDir(Arc::new(inner)))\n+            Ok(ReadDir{\n+                inner: Arc::new(inner),\n+                end_of_stream: false,\n+            })\n         }\n     }\n }"}]}