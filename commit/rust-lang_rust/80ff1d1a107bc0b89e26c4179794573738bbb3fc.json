{"sha": "80ff1d1a107bc0b89e26c4179794573738bbb3fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZmYxZDFhMTA3YmMwYjg5ZTI2YzQxNzk3OTQ1NzM3MzhiYmIzZmM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-08T23:11:37Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-23T01:28:52Z"}, "message": "Error if we should be able to Valgrind but can't", "tree": {"sha": "0f3be7de1c99478d6f532dd9e40c32303562ef0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f3be7de1c99478d6f532dd9e40c32303562ef0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80ff1d1a107bc0b89e26c4179794573738bbb3fc", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80ff1d1a107bc0b89e26c4179794573738bbb3fc", "html_url": "https://github.com/rust-lang/rust/commit/80ff1d1a107bc0b89e26c4179794573738bbb3fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80ff1d1a107bc0b89e26c4179794573738bbb3fc/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1285d4f4678e4e2082c8ebe5655ed6df157a4872", "url": "https://api.github.com/repos/rust-lang/rust/commits/1285d4f4678e4e2082c8ebe5655ed6df157a4872", "html_url": "https://github.com/rust-lang/rust/commit/1285d4f4678e4e2082c8ebe5655ed6df157a4872"}], "stats": {"total": 72, "additions": 50, "deletions": 22}, "files": [{"sha": "05bfdb3e9fd8a528efc4ab7a019003d0279e5fe4", "filename": "configure", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/80ff1d1a107bc0b89e26c4179794573738bbb3fc/configure", "raw_url": "https://github.com/rust-lang/rust/raw/80ff1d1a107bc0b89e26c4179794573738bbb3fc/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=80ff1d1a107bc0b89e26c4179794573738bbb3fc", "patch": "@@ -411,6 +411,7 @@ VAL_OPTIONS=\"\"\n \n opt valgrind 0 \"run tests with valgrind (memcheck by default)\"\n opt helgrind 0 \"run tests with helgrind instead of memcheck\"\n+opt valgrind-rpass 1 \"run rpass-valgrind tests with valgrind\"\n opt docs     1 \"build documentation\"\n opt optimize 1 \"build optimized rust code\"\n opt optimize-cxx 1 \"build optimized C++ code\"\n@@ -1236,15 +1237,6 @@ then\n     putvar CFG_PANDOC\n fi\n \n-# Valgrind is only reliable on Linux. On Windows it doesn't work at all, and\n-# on the Mac the dynamic linker causes Valgrind to emit a huge stream of\n-# errors.\n-if [ $CFG_OSTYPE != unknown-linux-gnu ] && [ $CFG_OSTYPE != apple-darwin ]\n-then\n-    CFG_BAD_VALGRIND=1\n-    putvar CFG_BAD_VALGRIND\n-fi\n-\n putvar CFG_LLVM_ROOT\n putvar CFG_LLVM_SRC_DIR\n "}, {"sha": "e927f6ad468fa0cc8e3f9f31ad57071d59cab72d", "filename": "mk/main.mk", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/80ff1d1a107bc0b89e26c4179794573738bbb3fc/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/80ff1d1a107bc0b89e26c4179794573738bbb3fc/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=80ff1d1a107bc0b89e26c4179794573738bbb3fc", "patch": "@@ -174,19 +174,20 @@ else\n   CFG_VALGRIND_COMPILE :=\n endif\n \n-VALGRIND_PATH :=$(CFG_VALGRIND)\n+\n+ifndef CFG_DISABLE_VALGRIND_RPASS\n+  $(info cfg: enabling valgrind run-pass tests (CFG_ENABLE_VALGRIND_RPASS))\n+  CFG_VALGRIND_RPASS :=$(CFG_VALGRIND)\n+else\n+  CFG_VALGRIND_RPASS :=\n+endif\n+\n \n ifdef CFG_ENABLE_VALGRIND\n   $(info cfg: enabling valgrind (CFG_ENABLE_VALGRIND))\n else\n   CFG_VALGRIND :=\n endif\n-ifdef CFG_BAD_VALGRIND\n-  $(info cfg: disabling valgrind due to its unreliability on this platform)\n-  CFG_VALGRIND :=\n-  VALGRIND_PATH :=\n-endif\n-\n \n ######################################################################\n # Target-and-rule \"utility variables\""}, {"sha": "9db9138d5e9efebde691820fd644f88d91144b16", "filename": "mk/platform.mk", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/80ff1d1a107bc0b89e26c4179794573738bbb3fc/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/80ff1d1a107bc0b89e26c4179794573738bbb3fc/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=80ff1d1a107bc0b89e26c4179794573738bbb3fc", "patch": "@@ -58,6 +58,20 @@ ifdef CFG_VALGRIND\n   endif\n endif\n \n+# If we actually want to run Valgrind on a given platform, set this variable\n+define DEF_GOOD_VALGRIND\n+  ifeq ($(OSTYPE_$(1)),unknown-linux-gnu)\n+    GOOD_VALGRIND_$(1) = 1\n+  endif\n+  ifneq (,$(filter $(OSTYPE_$(1)),darwin freebsd))\n+    ifeq (HOST_$(1),x86_64)\n+      GOOD_VALGRIND_$(1) = 1\n+    endif\n+  endif\n+endef\n+$(foreach t,$(CFG_TARGET),$(eval $(call DEF_GOOD_VALGRIND,$(t))))\n+$(foreach t,$(CFG_TARGET),$(info cfg: good valgrind for $(t) is $(GOOD_VALGRIND_$(t))))\n+\n ifneq ($(findstring linux,$(CFG_OSTYPE)),)\n   ifdef CFG_PERF\n     ifneq ($(CFG_PERF_WITH_LOGFD),)"}, {"sha": "3bbd871e5be77a1757a250b1ff8b10c121a805bc", "filename": "mk/tests.mk", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/80ff1d1a107bc0b89e26c4179794573738bbb3fc/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/80ff1d1a107bc0b89e26c4179794573738bbb3fc/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=80ff1d1a107bc0b89e26c4179794573738bbb3fc", "patch": "@@ -530,9 +530,6 @@ CTEST_SRC_BASE_rpass-valgrind = run-pass-valgrind\n CTEST_BUILD_BASE_rpass-valgrind = run-pass-valgrind\n CTEST_MODE_rpass-valgrind = run-pass-valgrind\n CTEST_RUNTOOL_rpass-valgrind = $(CTEST_RUNTOOL)\n-ifdef VALGRIND_PATH\n-CTEST_TESTARGS += --valgrind-path \"$(VALGRIND_PATH)\"\n-endif\n \n CTEST_SRC_BASE_rpass-full = run-pass-fulldeps\n CTEST_BUILD_BASE_rpass-full = run-pass-fulldeps\n@@ -662,6 +659,19 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) := \\\n         --target-rustcflags \"$(RUSTC_FLAGS_$(2)) $$(CTEST_RUSTC_FLAGS) -L $$(RT_OUTPUT_DIR_$(2))\" \\\n         $$(CTEST_TESTARGS)\n \n+ifdef CFG_VALGRIND_RPASS\n+ifdef GOOD_VALGRIND_$(2)\n+$(info cfg: valgrind-path set to $(CFG_VALGRIND_RPASS))\n+CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) += --valgrind-path \"$(CFG_VALGRIND_RPASS)\"\n+endif\n+endif\n+\n+ifndef CFG_DISABLE_VALGRIND_RPASS\n+ifdef GOOD_VALGRIND_$(2)\n+CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) += --force-valgrind\n+endif\n+endif\n+\n CTEST_DEPS_rpass_$(1)-T-$(2)-H-$(3) = $$(RPASS_TESTS)\n CTEST_DEPS_rpass-valgrind_$(1)-T-$(2)-H-$(3) = $$(RPASS_VALGRIND_TESTS)\n CTEST_DEPS_rpass-full_$(1)-T-$(2)-H-$(3) = $$(RPASS_FULL_TESTS) $$(CSREQ$(1)_T_$(3)_H_$(3)) $$(SREQ$(1)_T_$(2)_H_$(3))"}, {"sha": "2c917f7aefeb91a1940077bc7d44ef023b61831c", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80ff1d1a107bc0b89e26c4179794573738bbb3fc/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ff1d1a107bc0b89e26c4179794573738bbb3fc/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=80ff1d1a107bc0b89e26c4179794573738bbb3fc", "patch": "@@ -76,6 +76,10 @@ pub struct Config {\n     // The valgrind path\n     pub valgrind_path: Option<String>,\n \n+    // Whether to fail if we can't run run-pass-valgrind tests under valgrind\n+    // (or, alternatively, to silently run them like regular run-pass tests).\n+    pub force_valgrind: bool,\n+\n     // The directory containing the tests to run\n     pub src_base: Path,\n "}, {"sha": "7af25de1f6f97cd36bf429d72f6538d01be8189c", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/80ff1d1a107bc0b89e26c4179794573738bbb3fc/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ff1d1a107bc0b89e26c4179794573738bbb3fc/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=80ff1d1a107bc0b89e26c4179794573738bbb3fc", "patch": "@@ -39,6 +39,11 @@ pub mod errors;\n pub fn main() {\n     let args = os::args();\n     let config = parse_config(args);\n+\n+    if config.valgrind_path.is_none() && config.force_valgrind {\n+        fail!(\"Can't find Valgrind to run Valgrind tests\");\n+    }\n+\n     log_config(&config);\n     run_tests(&config);\n }\n@@ -50,7 +55,8 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n           reqopt(\"\", \"run-lib-path\", \"path to target shared libraries\", \"PATH\"),\n           reqopt(\"\", \"rustc-path\", \"path to rustc to use for compiling\", \"PATH\"),\n           optopt(\"\", \"clang-path\", \"path to  executable for codegen tests\", \"PATH\"),\n-          optopt(\"\", \"valgrind-path\", \"path to valgrind executable for valgrind tests\", \"PROGRAM\"),\n+          optopt(\"\", \"valgrind-path\", \"path to Valgrind executable for Valgrind tests\", \"PROGRAM\"),\n+          optflag(\"\", \"force-valgrind\", \"fail if Valgrind tests cannot be run under Valgrind\"),\n           optopt(\"\", \"llvm-bin-path\", \"path to directory holding llvm binaries\", \"DIR\"),\n           reqopt(\"\", \"src-base\", \"directory to scan for test files\", \"PATH\"),\n           reqopt(\"\", \"build-base\", \"directory to deposit test outputs\", \"PATH\"),\n@@ -127,6 +133,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         rustc_path: opt_path(matches, \"rustc-path\"),\n         clang_path: matches.opt_str(\"clang-path\").map(|s| Path::new(s)),\n         valgrind_path: matches.opt_str(\"valgrind-path\"),\n+        force_valgrind: matches.opt_present(\"force-valgrind\"),\n         llvm_bin_path: matches.opt_str(\"llvm-bin-path\").map(|s| Path::new(s)),\n         src_base: opt_path(matches, \"src-base\"),\n         build_base: opt_path(matches, \"build-base\"),\n@@ -164,7 +171,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n             !opt_str2(matches.opt_str(\"adb-test-dir\")).is_empty(),\n         lldb_python_dir: matches.opt_str(\"lldb-python-dir\"),\n         test_shard: test::opt_shard(matches.opt_str(\"test-shard\")),\n-        verbose: matches.opt_present(\"verbose\")\n+        verbose: matches.opt_present(\"verbose\"),\n     }\n }\n "}, {"sha": "34129dedbd8271c3a1c6d13294ef2bcd00f4dfe1", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80ff1d1a107bc0b89e26c4179794573738bbb3fc/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ff1d1a107bc0b89e26c4179794573738bbb3fc/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=80ff1d1a107bc0b89e26c4179794573738bbb3fc", "patch": "@@ -166,6 +166,7 @@ fn run_rpass_test(config: &Config, props: &TestProps, testfile: &Path) {\n \n fn run_valgrind_test(config: &Config, props: &TestProps, testfile: &Path) {\n     if config.valgrind_path.is_none() {\n+        assert!(!config.force_valgrind);\n         return run_rpass_test(config, props, testfile);\n     }\n \n@@ -175,7 +176,6 @@ fn run_valgrind_test(config: &Config, props: &TestProps, testfile: &Path) {\n         fatal_proc_rec(\"compilation failed!\", &proc_res);\n     }\n \n-    println!(\"running valgrind\");\n     let mut new_config = config.clone();\n     new_config.runtool = new_config.valgrind_path.clone();\n     proc_res = exec_compiled_test(&new_config, props, testfile);"}]}