{"sha": "c78180c318156d02e0b9454da67438ee96ad476d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ODE4MGMzMTgxNTZkMDJlMGI5NDU0ZGE2NzQzOGVlOTZhZDQ3NmQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-30T20:15:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-30T20:15:37Z"}, "message": "Merge #5152\n\n5152: Don't crash on empty out_dirs with older cargos r=matklad a=matklad\n\ncloses #5125\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "5b84228ac444c9ef918ca21ff0ab5e01f9f77028", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b84228ac444c9ef918ca21ff0ab5e01f9f77028"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c78180c318156d02e0b9454da67438ee96ad476d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe+51pCRBK7hj4Ov3rIwAAdHIIAH8OG5TvwfsRo+Sscf6xdJes\nmdljaNqfq/RAkGCmGiQO3fK+e0F7zyt0KU+T/GNRappGuDMQd32XfdpWgmAoZRX6\n7xlBFJg1M4nCQMcfF9lFJ5/2S86m64tZpedrOxHD+pwf61Ftkd3OI26KQZkvFz/V\njZ0s4nIYVB4ipJEEnPE7/BGN2J6sQKJsuTcQ59QSQnZyMsuAnzO3mB7qJI7HWDwD\n7IqjFavczbdBZO17H9IV7etQm5asgLjZc+FiyaNvdNcLyV78U+ilBc2qAOq9ABcv\ncu48j2mSnQBj/PwYhBGoA8PHOTOwb1l3kPhN1m5xJPw1onDYgdBH237+Lmm0/PM=\n=F8eL\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b84228ac444c9ef918ca21ff0ab5e01f9f77028\nparent bad0b9aa23d2e72366922ec00d50043db0bae338\nparent cec92407f412b3c8e01d17eab84101a2b858e59e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593548137 +0000\ncommitter GitHub <noreply@github.com> 1593548137 +0000\n\nMerge #5152\n\n5152: Don't crash on empty out_dirs with older cargos r=matklad a=matklad\n\ncloses #5125\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c78180c318156d02e0b9454da67438ee96ad476d", "html_url": "https://github.com/rust-lang/rust/commit/c78180c318156d02e0b9454da67438ee96ad476d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c78180c318156d02e0b9454da67438ee96ad476d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bad0b9aa23d2e72366922ec00d50043db0bae338", "url": "https://api.github.com/repos/rust-lang/rust/commits/bad0b9aa23d2e72366922ec00d50043db0bae338", "html_url": "https://github.com/rust-lang/rust/commit/bad0b9aa23d2e72366922ec00d50043db0bae338"}, {"sha": "cec92407f412b3c8e01d17eab84101a2b858e59e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cec92407f412b3c8e01d17eab84101a2b858e59e", "html_url": "https://github.com/rust-lang/rust/commit/cec92407f412b3c8e01d17eab84101a2b858e59e"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "47a1d393dbf47576616dad953ec83dfeca4c011d", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c78180c318156d02e0b9454da67438ee96ad476d/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c78180c318156d02e0b9454da67438ee96ad476d/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=c78180c318156d02e0b9454da67438ee96ad476d", "patch": "@@ -1,6 +1,11 @@\n //! FIXME: write short doc here\n \n-use std::{ffi::OsStr, ops, path::Path, process::Command};\n+use std::{\n+    ffi::OsStr,\n+    ops,\n+    path::{Path, PathBuf},\n+    process::Command,\n+};\n \n use anyhow::{Context, Result};\n use cargo_metadata::{BuildScript, CargoOpt, Message, MetadataCommand, PackageId};\n@@ -308,9 +313,13 @@ pub fn load_extern_resources(\n         if let Ok(message) = message {\n             match message {\n                 Message::BuildScriptExecuted(BuildScript { package_id, out_dir, cfgs, .. }) => {\n-                    let out_dir = AbsPathBuf::assert(out_dir);\n-                    res.out_dirs.insert(package_id.clone(), out_dir);\n-                    res.cfgs.insert(package_id, cfgs);\n+                    // cargo_metadata crate returns default (empty) path for\n+                    // older cargos, which is not absolute, so work around that.\n+                    if out_dir != PathBuf::default() {\n+                        let out_dir = AbsPathBuf::assert(out_dir);\n+                        res.out_dirs.insert(package_id.clone(), out_dir);\n+                        res.cfgs.insert(package_id, cfgs);\n+                    }\n                 }\n                 Message::CompilerArtifact(message) => {\n                     if message.target.kind.contains(&\"proc-macro\".to_string()) {"}]}