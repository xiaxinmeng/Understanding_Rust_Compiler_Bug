{"sha": "e0e39caf842579230bc73d2d32c1e293ca55efcb", "node_id": "C_kwDOAAsO6NoAKGUwZTM5Y2FmODQyNTc5MjMwYmM3M2QyZDMyYzFlMjkzY2E1NWVmY2I", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-06T17:33:55Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-06T17:33:55Z"}, "message": "Add basic tests for `OwnedSlice`", "tree": {"sha": "f13609596777fe0a193426659eb1f26fa2f08145", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f13609596777fe0a193426659eb1f26fa2f08145"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0e39caf842579230bc73d2d32c1e293ca55efcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e39caf842579230bc73d2d32c1e293ca55efcb", "html_url": "https://github.com/rust-lang/rust/commit/e0e39caf842579230bc73d2d32c1e293ca55efcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0e39caf842579230bc73d2d32c1e293ca55efcb/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6970d0e260aa33bb1e22ae7df739470ecad19e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6970d0e260aa33bb1e22ae7df739470ecad19e0", "html_url": "https://github.com/rust-lang/rust/commit/b6970d0e260aa33bb1e22ae7df739470ecad19e0"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "c0a3cb0719436514f263f8b01d706c11da14333e", "filename": "compiler/rustc_data_structures/src/owned_slice.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0e39caf842579230bc73d2d32c1e293ca55efcb/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e39caf842579230bc73d2d32c1e293ca55efcb/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice.rs?ref=e0e39caf842579230bc73d2d32c1e293ca55efcb", "patch": "@@ -111,3 +111,6 @@ unsafe impl Send for OwnedSlice {}\n \n // Safety: `OwnedSlice` is conceptually `(&'self.1 [u8], Box<dyn Send + Sync>)`, which is `Sync`\n unsafe impl Sync for OwnedSlice {}\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "fe4173f422ad9b00a6d1be7306251929fcea5363", "filename": "compiler/rustc_data_structures/src/owned_slice/tests.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e0e39caf842579230bc73d2d32c1e293ca55efcb/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e39caf842579230bc73d2d32c1e293ca55efcb/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice%2Ftests.rs?ref=e0e39caf842579230bc73d2d32c1e293ca55efcb", "patch": "@@ -0,0 +1,68 @@\n+use std::{cell::Cell, ops::Deref, rc::Rc};\n+\n+use crate::{\n+    owned_slice::{slice_owned, try_slice_owned, OwnedSlice},\n+    OnDrop,\n+};\n+\n+#[test]\n+fn smoke() {\n+    let slice = slice_owned(vec![1, 2, 3, 4, 5, 6], Vec::as_slice);\n+\n+    assert_eq!(&*slice, [1, 2, 3, 4, 5, 6]);\n+}\n+\n+#[test]\n+fn static_storage() {\n+    let slice = slice_owned(Box::new(String::from(\"what\")), |_| b\"bytes boo\");\n+\n+    assert_eq!(&*slice, b\"bytes boo\");\n+}\n+\n+#[test]\n+fn slice_the_slice() {\n+    let slice = slice_owned(vec![1, 2, 3, 4, 5, 6], Vec::as_slice);\n+    let slice = slice_owned(slice, |s| &s[1..][..4]);\n+    let slice = slice_owned(slice, |s| s);\n+    let slice = slice_owned(slice, |s| &s[1..]);\n+\n+    assert_eq!(&*slice, &[1, 2, 3, 4, 5, 6][1..][..4][1..]);\n+}\n+\n+#[test]\n+fn try_and_fail() {\n+    let res = try_slice_owned(vec![0], |v| v.get(12..).ok_or(()));\n+\n+    assert!(res.is_err());\n+}\n+\n+#[test]\n+fn boxed() {\n+    // It's important that we don't cause UB because of `Box`'es uniqueness\n+\n+    let boxed: Box<[u8]> = vec![1, 1, 2, 3, 5, 8, 13, 21].into_boxed_slice();\n+    let slice = slice_owned(boxed, Deref::deref);\n+\n+    assert_eq!(&*slice, [1, 1, 2, 3, 5, 8, 13, 21]);\n+}\n+\n+#[test]\n+fn drop() {\n+    let flag = Rc::new(Cell::new(false));\n+    let flag_prime = Rc::clone(&flag);\n+    let d = OnDrop(move || flag_prime.set(true));\n+\n+    let slice = slice_owned(d, |_| &[]);\n+\n+    assert_eq!(flag.get(), false);\n+\n+    std::mem::drop(slice);\n+\n+    assert_eq!(flag.get(), true);\n+}\n+\n+#[test]\n+fn send_sync() {\n+    crate::sync::assert_send::<OwnedSlice>();\n+    crate::sync::assert_sync::<OwnedSlice>();\n+}"}]}