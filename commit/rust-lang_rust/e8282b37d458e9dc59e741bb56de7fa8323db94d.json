{"sha": "e8282b37d458e9dc59e741bb56de7fa8323db94d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MjgyYjM3ZDQ1OGU5ZGM1OWU3NDFiYjU2ZGU3ZmE4MzIzZGI5NGQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-17T21:34:15Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-17T21:34:15Z"}, "message": "Don't call a closure function in infer_function_return_type label", "tree": {"sha": "f972996e941a15f4a2c2c3bcc3edc09a908ee96a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f972996e941a15f4a2c2c3bcc3edc09a908ee96a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8282b37d458e9dc59e741bb56de7fa8323db94d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8282b37d458e9dc59e741bb56de7fa8323db94d", "html_url": "https://github.com/rust-lang/rust/commit/e8282b37d458e9dc59e741bb56de7fa8323db94d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8282b37d458e9dc59e741bb56de7fa8323db94d/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "789d9ca1d32afd55c7cb8d0db45652048abd7341", "url": "https://api.github.com/repos/rust-lang/rust/commits/789d9ca1d32afd55c7cb8d0db45652048abd7341", "html_url": "https://github.com/rust-lang/rust/commit/789d9ca1d32afd55c7cb8d0db45652048abd7341"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "aa584eb034830a72be8b1d6401066f18080e958b", "filename": "crates/assists/src/handlers/infer_function_return_type.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e8282b37d458e9dc59e741bb56de7fa8323db94d/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8282b37d458e9dc59e741bb56de7fa8323db94d/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finfer_function_return_type.rs?ref=e8282b37d458e9dc59e741bb56de7fa8323db94d", "patch": "@@ -17,7 +17,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // fn foo() -> i32 { 42i32 }\n // ```\n pub(crate) fn infer_function_return_type(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let (tail_expr, builder_edit_pos, wrap_expr) = extract_tail(ctx)?;\n+    let (fn_type, tail_expr, builder_edit_pos) = extract_tail(ctx)?;\n     let module = ctx.sema.scope(tail_expr.syntax()).module()?;\n     let ty = ctx.sema.type_of_expr(&tail_expr)?;\n     if ty.is_unit() {\n@@ -27,7 +27,10 @@ pub(crate) fn infer_function_return_type(acc: &mut Assists, ctx: &AssistContext)\n \n     acc.add(\n         AssistId(\"infer_function_return_type\", AssistKind::RefactorRewrite),\n-        \"Add this function's return type\",\n+        match fn_type {\n+            FnType::Function => \"Add this function's return type\",\n+            FnType::Closure { .. } => \"Add this closure's return type\",\n+        },\n         tail_expr.syntax().text_range(),\n         |builder| {\n             match builder_edit_pos {\n@@ -38,7 +41,7 @@ pub(crate) fn infer_function_return_type(acc: &mut Assists, ctx: &AssistContext)\n                     builder.replace(text_range, &format!(\"-> {}\", ty))\n                 }\n             }\n-            if wrap_expr {\n+            if let FnType::Closure { wrap_expr: true } = fn_type {\n                 mark::hit!(wrap_closure_non_block_expr);\n                 // `|x| x` becomes `|x| -> T x` which is invalid, so wrap it in a block\n                 builder.replace(tail_expr.syntax().text_range(), &format!(\"{{{}}}\", tail_expr));\n@@ -72,8 +75,13 @@ fn ret_ty_to_action(ret_ty: Option<ast::RetType>, insert_pos: TextSize) -> Optio\n     }\n }\n \n-fn extract_tail(ctx: &AssistContext) -> Option<(ast::Expr, InsertOrReplace, bool)> {\n-    let (tail_expr, return_type_range, action, wrap_expr) =\n+enum FnType {\n+    Function,\n+    Closure { wrap_expr: bool },\n+}\n+\n+fn extract_tail(ctx: &AssistContext) -> Option<(FnType, ast::Expr, InsertOrReplace)> {\n+    let (fn_type, tail_expr, return_type_range, action) =\n         if let Some(closure) = ctx.find_node_at_offset::<ast::ClosureExpr>() {\n             let rpipe_pos = closure.param_list()?.syntax().last_token()?.text_range().end();\n             let action = ret_ty_to_action(closure.ret_type(), rpipe_pos)?;\n@@ -86,7 +94,7 @@ fn extract_tail(ctx: &AssistContext) -> Option<(ast::Expr, InsertOrReplace, bool\n             };\n \n             let ret_range = TextRange::new(rpipe_pos, body_start);\n-            (tail_expr, ret_range, action, wrap_expr)\n+            (FnType::Closure { wrap_expr }, tail_expr, ret_range, action)\n         } else {\n             let func = ctx.find_node_at_offset::<ast::Fn>()?;\n             let rparen_pos = func.param_list()?.r_paren_token()?.text_range().end();\n@@ -97,7 +105,7 @@ fn extract_tail(ctx: &AssistContext) -> Option<(ast::Expr, InsertOrReplace, bool\n \n             let ret_range_end = body.l_curly_token()?.text_range().start();\n             let ret_range = TextRange::new(rparen_pos, ret_range_end);\n-            (tail_expr, ret_range, action, false)\n+            (FnType::Function, tail_expr, ret_range, action)\n         };\n     let frange = ctx.frange.range;\n     if return_type_range.contains_range(frange) {\n@@ -109,7 +117,7 @@ fn extract_tail(ctx: &AssistContext) -> Option<(ast::Expr, InsertOrReplace, bool\n     } else {\n         return None;\n     }\n-    Some((tail_expr, action, wrap_expr))\n+    Some((fn_type, tail_expr, action))\n }\n \n #[cfg(test)]"}]}