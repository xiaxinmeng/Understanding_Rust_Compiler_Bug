{"sha": "457741d6d2eb6c869fb95ba76dae55daa44b5a3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1Nzc0MWQ2ZDJlYjZjODY5ZmI5NWJhNzZkYWU1NWRhYTQ0YjVhM2Y=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-08T13:01:40Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-15T08:35:55Z"}, "message": "update for new bin_op APIs", "tree": {"sha": "39fe5be6412bc4f2ae66b8bca10082c0ca02aea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39fe5be6412bc4f2ae66b8bca10082c0ca02aea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/457741d6d2eb6c869fb95ba76dae55daa44b5a3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/457741d6d2eb6c869fb95ba76dae55daa44b5a3f", "html_url": "https://github.com/rust-lang/rust/commit/457741d6d2eb6c869fb95ba76dae55daa44b5a3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/457741d6d2eb6c869fb95ba76dae55daa44b5a3f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b468789f9b44000b898715409c484bf71a139ba4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b468789f9b44000b898715409c484bf71a139ba4", "html_url": "https://github.com/rust-lang/rust/commit/b468789f9b44000b898715409c484bf71a139ba4"}], "stats": {"total": 45, "additions": 22, "deletions": 23}, "files": [{"sha": "5a9939db2e7da6b3651e6d33e5d4e7f190a1477e", "filename": "src/intrinsic.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/457741d6d2eb6c869fb95ba76dae55daa44b5a3f/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457741d6d2eb6c869fb95ba76dae55daa44b5a3f/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=457741d6d2eb6c869fb95ba76dae55daa44b5a3f", "patch": "@@ -5,7 +5,7 @@ use rustc::ty;\n use rustc::mir::interpret::{EvalResult, PointerArithmetic};\n \n use crate::{\n-    PlaceTy, OpTy, Immediate, Scalar, ScalarMaybeUndef, Borrow,\n+    PlaceTy, OpTy, ImmTy, Immediate, Scalar, ScalarMaybeUndef, Borrow,\n     OperatorEvalContextExt\n };\n \n@@ -80,11 +80,11 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n \n             _ if intrinsic_name.starts_with(\"atomic_cxchg\") => {\n                 let ptr = this.deref_operand(args[0])?;\n-                let expect_old = this.read_immediate(args[1])?; // read as immediate for the sake of `binary_op_imm()`\n+                let expect_old = this.read_immediate(args[1])?; // read as immediate for the sake of `binary_op()`\n                 let new = this.read_scalar(args[2])?;\n-                let old = this.read_immediate(ptr.into())?; // read as immediate for the sake of `binary_op_imm()`\n-                // binary_op_imm will bail if either of them is not a scalar\n-                let (eq, _) = this.binary_op_imm(mir::BinOp::Eq, old, expect_old)?;\n+                let old = this.read_immediate(ptr.into())?; // read as immediate for the sake of `binary_op()`\n+                // binary_op will bail if either of them is not a scalar\n+                let (eq, _) = this.binary_op(mir::BinOp::Eq, old, expect_old)?;\n                 let res = Immediate::ScalarPair(old.to_scalar_or_undef(), eq.into());\n                 this.write_immediate(res, dest)?; // old value is returned\n                 // update ptr depending on comparison\n@@ -140,9 +140,9 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                     _ => bug!(),\n                 };\n                 // Atomics wrap around on overflow.\n-                let (val, _overflowed) = this.binary_op_imm(op, old, rhs)?;\n+                let (val, _overflowed) = this.binary_op(op, old, rhs)?;\n                 let val = if neg {\n-                    this.unary_op(mir::UnOp::Not, val, old.layout)?\n+                    this.unary_op(mir::UnOp::Not, ImmTy::from_scalar(val, old.layout))?\n                 } else {\n                     val\n                 };\n@@ -239,7 +239,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 let a = this.read_immediate(args[0])?;\n                 let b = this.read_immediate(args[1])?;\n                 // check x % y != 0\n-                if this.binary_op_imm(mir::BinOp::Rem, a, b)?.0.to_bits(dest.layout.size)? != 0 {\n+                if this.binary_op(mir::BinOp::Rem, a, b)?.0.to_bits(dest.layout.size)? != 0 {\n                     return err!(ValidationFailure(format!(\"exact_div: {:?} cannot be divided by {:?}\", a, b)));\n                 }\n                 this.binop_ignore_overflow(mir::BinOp::Div, a, b, dest)?;"}, {"sha": "67bd54872f82aaa7d9371117d239726d224666e1", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/457741d6d2eb6c869fb95ba76dae55daa44b5a3f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457741d6d2eb6c869fb95ba76dae55daa44b5a3f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=457741d6d2eb6c869fb95ba76dae55daa44b5a3f", "patch": "@@ -406,12 +406,10 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     fn ptr_op(\n         ecx: &rustc_mir::interpret::EvalContext<'a, 'mir, 'tcx, Self>,\n         bin_op: mir::BinOp,\n-        left: Scalar<Borrow>,\n-        left_layout: TyLayout<'tcx>,\n-        right: Scalar<Borrow>,\n-        right_layout: TyLayout<'tcx>,\n+        left: ImmTy<'tcx, Borrow>,\n+        right: ImmTy<'tcx, Borrow>,\n     ) -> EvalResult<'tcx, (Scalar<Borrow>, bool)> {\n-        ecx.ptr_op(bin_op, left, left_layout, right, right_layout)\n+        ecx.ptr_op(bin_op, left, right)\n     }\n \n     fn box_alloc("}, {"sha": "0bdec0349778d926d6ba9a7f3d0e8616185396f5", "filename": "src/operator.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/457741d6d2eb6c869fb95ba76dae55daa44b5a3f/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457741d6d2eb6c869fb95ba76dae55daa44b5a3f/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=457741d6d2eb6c869fb95ba76dae55daa44b5a3f", "patch": "@@ -7,10 +7,8 @@ pub trait EvalContextExt<'tcx> {\n     fn ptr_op(\n         &self,\n         bin_op: mir::BinOp,\n-        left: Scalar<Borrow>,\n-        left_layout: TyLayout<'tcx>,\n-        right: Scalar<Borrow>,\n-        right_layout: TyLayout<'tcx>,\n+        left: ImmTy<'tcx, Borrow>,\n+        right: ImmTy<'tcx, Borrow>,\n     ) -> EvalResult<'tcx, (Scalar<Borrow>, bool)>;\n \n     fn ptr_int_arithmetic(\n@@ -40,13 +38,16 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n     fn ptr_op(\n         &self,\n         bin_op: mir::BinOp,\n-        left: Scalar<Borrow>,\n-        left_layout: TyLayout<'tcx>,\n-        right: Scalar<Borrow>,\n-        right_layout: TyLayout<'tcx>,\n+        left: ImmTy<'tcx, Borrow>,\n+        right: ImmTy<'tcx, Borrow>,\n     ) -> EvalResult<'tcx, (Scalar<Borrow>, bool)> {\n         use rustc::mir::BinOp::*;\n \n+        let left_layout = left.layout;\n+        let left = left.to_scalar()?;\n+        let right_layout = right.layout;\n+        let right = right.to_scalar()?;\n+\n         trace!(\"ptr_op: {:?} {:?} {:?}\", left, bin_op, right);\n         debug_assert!(left.is_ptr() || right.is_ptr() || bin_op == Offset);\n \n@@ -85,8 +86,8 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                             let layout = self.layout_of(self.tcx.types.usize)?;\n                             return self.binary_op(\n                                 Sub,\n-                                left_offset, layout,\n-                                right_offset, layout,\n+                                ImmTy::from_scalar(left_offset, layout),\n+                                ImmTy::from_scalar(right_offset, layout),\n                             )\n                         }\n                         _ => bug!(\"We already established it has to be one of these operators.\"),"}]}