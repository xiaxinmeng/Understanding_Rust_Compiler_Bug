{"sha": "a12107afaaa634cd7352d3828caef89a975299bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMjEwN2FmYWFhNjM0Y2Q3MzUyZDM4MjhjYWVmODlhOTc1Mjk5YmI=", "commit": {"author": {"name": "Aris Merchant", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2021-06-24T23:04:24Z"}, "committer": {"name": "Aris Merchant", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2021-07-06T05:19:23Z"}, "message": "Make `getenv` return an Option instead of a Result", "tree": {"sha": "0a36d26e1d64f16ceab64e9a926bdc22d371c619", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a36d26e1d64f16ceab64e9a926bdc22d371c619"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a12107afaaa634cd7352d3828caef89a975299bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a12107afaaa634cd7352d3828caef89a975299bb", "html_url": "https://github.com/rust-lang/rust/commit/a12107afaaa634cd7352d3828caef89a975299bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a12107afaaa634cd7352d3828caef89a975299bb/comments", "author": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d26e01e9df416304f7d0cc425bd0290560e12fae", "url": "https://api.github.com/repos/rust-lang/rust/commits/d26e01e9df416304f7d0cc425bd0290560e12fae", "html_url": "https://github.com/rust-lang/rust/commit/d26e01e9df416304f7d0cc425bd0290560e12fae"}], "stats": {"total": 56, "additions": 20, "deletions": 36}, "files": [{"sha": "a7b27486811149098f4d6c4c8f0da9500cd5f6b1", "filename": "library/std/src/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a12107afaaa634cd7352d3828caef89a975299bb/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12107afaaa634cd7352d3828caef89a975299bb/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=a12107afaaa634cd7352d3828caef89a975299bb", "patch": "@@ -244,7 +244,7 @@ pub fn var_os<K: AsRef<OsStr>>(key: K) -> Option<OsString> {\n }\n \n fn _var_os(key: &OsStr) -> Option<OsString> {\n-    os_imp::getenv(key).ok()?\n+    os_imp::getenv(key)\n }\n \n /// The error type for operations interacting with environment variables."}, {"sha": "8f927df85be5df754cfc041cdb693d5d7cd5b966", "filename": "library/std/src/sys/hermit/os.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a12107afaaa634cd7352d3828caef89a975299bb/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12107afaaa634cd7352d3828caef89a975299bb/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs?ref=a12107afaaa634cd7352d3828caef89a975299bb", "patch": "@@ -140,13 +140,8 @@ pub fn env() -> Env {\n     }\n }\n \n-pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n-    unsafe {\n-        match ENV.as_ref().unwrap().lock().unwrap().get_mut(k) {\n-            Some(value) => Ok(Some(value.clone())),\n-            None => Ok(None),\n-        }\n-    }\n+pub fn getenv(k: &OsStr) -> Option<OsString> {\n+    unsafe { ENV.as_ref().unwrap().lock().unwrap().get_mut(k).cloned() }\n }\n \n pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {"}, {"sha": "5f8b8def7c6709522f54bbc7b6b03f9c2bd33e38", "filename": "library/std/src/sys/sgx/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a12107afaaa634cd7352d3828caef89a975299bb/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12107afaaa634cd7352d3828caef89a975299bb/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs?ref=a12107afaaa634cd7352d3828caef89a975299bb", "patch": "@@ -106,8 +106,8 @@ pub fn env() -> Env {\n     get_env_store().map(|env| clone_to_vec(&env.lock().unwrap())).unwrap_or_default().into_iter()\n }\n \n-pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n-    Ok(get_env_store().and_then(|s| s.lock().unwrap().get(k).cloned()))\n+pub fn getenv(k: &OsStr) -> Option<OsString> {\n+    get_env_store().and_then(|s| s.lock().unwrap().get(k).cloned())\n }\n \n pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {"}, {"sha": "1694656114a10c9afb85e8db07ce84af19450e9c", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a12107afaaa634cd7352d3828caef89a975299bb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12107afaaa634cd7352d3828caef89a975299bb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=a12107afaaa634cd7352d3828caef89a975299bb", "patch": "@@ -532,19 +532,18 @@ pub fn env() -> Env {\n     }\n }\n \n-pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n+pub fn getenv(k: &OsStr) -> Option<OsString> {\n     // environment variables with a nul byte can't be set, so their value is\n     // always None as well\n-    let k = CString::new(k.as_bytes())?;\n+    let k = CString::new(k.as_bytes()).ok()?;\n     unsafe {\n         let _guard = env_read_lock();\n         let s = libc::getenv(k.as_ptr()) as *const libc::c_char;\n-        let ret = if s.is_null() {\n+        if s.is_null() {\n             None\n         } else {\n             Some(OsStringExt::from_vec(CStr::from_ptr(s).to_bytes().to_vec()))\n-        };\n-        Ok(ret)\n+        }\n     }\n }\n "}, {"sha": "2886ec1180e54fab37ec126c6e0da7e0ac096092", "filename": "library/std/src/sys/unsupported/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a12107afaaa634cd7352d3828caef89a975299bb/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12107afaaa634cd7352d3828caef89a975299bb/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs?ref=a12107afaaa634cd7352d3828caef89a975299bb", "patch": "@@ -76,8 +76,8 @@ pub fn env() -> Env {\n     panic!(\"not supported on this platform\")\n }\n \n-pub fn getenv(_: &OsStr) -> io::Result<Option<OsString>> {\n-    Ok(None)\n+pub fn getenv(_: &OsStr) -> Option<OsString> {\n+    None\n }\n \n pub fn setenv(_: &OsStr, _: &OsStr) -> io::Result<()> {"}, {"sha": "c5229a188342a3cb7811060c2998fdce238705f6", "filename": "library/std/src/sys/wasi/os.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a12107afaaa634cd7352d3828caef89a975299bb/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12107afaaa634cd7352d3828caef89a975299bb/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs?ref=a12107afaaa634cd7352d3828caef89a975299bb", "patch": "@@ -175,17 +175,16 @@ pub fn env() -> Env {\n     }\n }\n \n-pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n-    let k = CString::new(k.as_bytes())?;\n+pub fn getenv(k: &OsStr) -> Option<OsString> {\n+    let k = CString::new(k.as_bytes()).ok()?;\n     unsafe {\n         let _guard = env_lock();\n         let s = libc::getenv(k.as_ptr()) as *const libc::c_char;\n-        let ret = if s.is_null() {\n+        if s.is_null() {\n             None\n         } else {\n             Some(OsStringExt::from_vec(CStr::from_ptr(s).to_bytes().to_vec()))\n-        };\n-        Ok(ret)\n+        }\n     }\n }\n "}, {"sha": "8db97ba50a81fa75a143e3d0ddbc12dd914aaa91", "filename": "library/std/src/sys/windows/os.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a12107afaaa634cd7352d3828caef89a975299bb/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12107afaaa634cd7352d3828caef89a975299bb/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos.rs?ref=a12107afaaa634cd7352d3828caef89a975299bb", "patch": "@@ -253,22 +253,13 @@ pub fn chdir(p: &path::Path) -> io::Result<()> {\n     cvt(unsafe { c::SetCurrentDirectoryW(p.as_ptr()) }).map(drop)\n }\n \n-pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n-    let k = to_u16s(k)?;\n-    let res = super::fill_utf16_buf(\n+pub fn getenv(k: &OsStr) -> Option<OsString> {\n+    let k = to_u16s(k).ok()?;\n+    super::fill_utf16_buf(\n         |buf, sz| unsafe { c::GetEnvironmentVariableW(k.as_ptr(), buf, sz) },\n         |buf| OsStringExt::from_wide(buf),\n-    );\n-    match res {\n-        Ok(value) => Ok(Some(value)),\n-        Err(e) => {\n-            if e.raw_os_error() == Some(c::ERROR_ENVVAR_NOT_FOUND as i32) {\n-                Ok(None)\n-            } else {\n-                Err(e)\n-            }\n-        }\n-    }\n+    )\n+    .ok()\n }\n \n pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {"}]}