{"sha": "00c4f06292d707b18990a326c51d90b8273ef20a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYzRmMDYyOTJkNzA3YjE4OTkwYTMyNmM1MWQ5MGI4MjczZWYyMGE=", "commit": {"author": {"name": "Jose Narvaez", "email": "jnarvaez@zendesk.com", "date": "2015-10-14T17:43:36Z"}, "committer": {"name": "Jose Narvaez", "email": "jnarvaez@zendesk.com", "date": "2015-10-14T17:43:36Z"}, "message": "Manual fixups.", "tree": {"sha": "44b106901a7da20eeca5b206aece92d9b7c508e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44b106901a7da20eeca5b206aece92d9b7c508e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00c4f06292d707b18990a326c51d90b8273ef20a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00c4f06292d707b18990a326c51d90b8273ef20a", "html_url": "https://github.com/rust-lang/rust/commit/00c4f06292d707b18990a326c51d90b8273ef20a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00c4f06292d707b18990a326c51d90b8273ef20a/comments", "author": null, "committer": null, "parents": [{"sha": "82ec34332f0ac7d03819c2fc25481d9f27a950fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/82ec34332f0ac7d03819c2fc25481d9f27a950fe", "html_url": "https://github.com/rust-lang/rust/commit/82ec34332f0ac7d03819c2fc25481d9f27a950fe"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "0d599f736e622d05919aa99d6b031a75eaf90f3a", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/00c4f06292d707b18990a326c51d90b8273ef20a/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c4f06292d707b18990a326c51d90b8273ef20a/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=00c4f06292d707b18990a326c51d90b8273ef20a", "patch": "@@ -200,8 +200,7 @@ struct TyDesc {\n     align: usize,\n }\n \n-trait AllTypes {    fn dummy(&self) {\n-    } }\n+trait AllTypes { fn dummy(&self) { } }\n impl<T:?Sized> AllTypes for T { }\n \n unsafe fn get_tydesc<T>() -> *const TyDesc {\n@@ -293,8 +292,7 @@ impl<'longer_than_self> Arena<'longer_than_self> {\n \n         unsafe {\n             let buf = head.as_ptr();\n-            (buf.offset(tydesc_start as isize),\n-             buf.offset(start as isize))\n+            (buf.offset(tydesc_start as isize), buf.offset(start as isize))\n         }\n     }\n \n@@ -392,7 +390,8 @@ struct TypedArenaChunk<T> {\n     next: *mut TypedArenaChunk<T>,\n \n     /// The number of elements that this chunk can hold.\n-    capacity: usize, // Objects follow here, suitably aligned.\n+    // Objects follow here, suitably aligned.\n+    capacity: usize,\n }\n \n fn calculate_size<T>(capacity: usize) -> usize {"}]}