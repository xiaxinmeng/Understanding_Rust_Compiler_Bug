{"sha": "299a452a75883b64ea15fc7e7f0d139cab3d750f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5OWE0NTJhNzU4ODNiNjRlYTE1ZmM3ZTdmMGQxMzljYWIzZDc1MGY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-11-07T12:40:55Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-11-07T15:10:40Z"}, "message": "Ignore never-initialized locals for `unused_mut`.\n\nThis commit filters out locals that have never been initialized for\nconsideration in the `unused_mut` lint.\n\nThis is intended to detect when the statement that would have\ninitialized the local was removed as unreachable code. In these cases,\nwe would not want to lint. This is the same behaviour as the AST borrow\nchecker.\n\nThis is achieved by taking advantage of an existing pass over the MIR\nfor the `unused_mut` lint and creating a set of those locals that were\nnever initialized.", "tree": {"sha": "c428444594c122498472376bdf4a93a8150a3756", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c428444594c122498472376bdf4a93a8150a3756"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/299a452a75883b64ea15fc7e7f0d139cab3d750f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlvjAHAACgkQAXYLT59T\n8VTxMBAAuZ9vyINRfHv4MsA2HGhgR+zWQZI/QHQC/EkPGFAojisSQjcg/HZ28jPo\na+QT189dRf4W62ACGtAUOm+hnlgG7A/SrpCe4HsgoRpWK3mnjWtrfqpJcVhYhHGW\nik9hs2VkvnQ0lYirt9U1URui+tfDlOU9cUQVwgVInInk6m0Edtp72uNp3Vg+9mFd\nj+Bt6MIvOGR1xoCYolsA03niCMPlVGMRYrO4XOw0E5TJirl0dDta3gEhNqjbltJr\np29T9E0Lt45RzbspzrwBIbkgP0NOY9ZdtJJLDgkHjFgsFssZr7ZynG47ZJmVhJB9\nhbvYTjziDMhNpW0em0gOKfgWNdHYqViUiXBN9zscbhAhFOdPuYdSfAwrdhedBfs0\n1aLiCYWzHbuCb3IwmQ1EhhQ9P9fyO7XZ366gV5+U+CF1GBsM2ZE1tVbyPuJaIeKW\n4CnWoGaEr/zJUUprwfYXhpLYase4hwliSOV/Kqw6vAq/5OKNP/jEWczdugCYedPP\n+8iaDOjT+alMDUIVdV/9vzm+sOO6zSP5ANM8FX/uFGG5yf4l2RKZAmPfTpo/0ht2\nH7My8dWiffTXKX1+BTHwwiR1eEqBcyOLl+UiqT5wjcnsl4awu5IPLNAYn9gjX+yo\nFuvqCIKb1DYJTFzHPaHtkqQfPaEt0or3nFeiBG67b275taR0Lfg=\n=VAGM\n-----END PGP SIGNATURE-----", "payload": "tree c428444594c122498472376bdf4a93a8150a3756\nparent 24e66c28980442a48d9458f1a4f9b76cc722dc8a\nauthor David Wood <david@davidtw.co> 1541594455 +0100\ncommitter David Wood <david@davidtw.co> 1541603440 +0100\n\nIgnore never-initialized locals for `unused_mut`.\n\nThis commit filters out locals that have never been initialized for\nconsideration in the `unused_mut` lint.\n\nThis is intended to detect when the statement that would have\ninitialized the local was removed as unreachable code. In these cases,\nwe would not want to lint. This is the same behaviour as the AST borrow\nchecker.\n\nThis is achieved by taking advantage of an existing pass over the MIR\nfor the `unused_mut` lint and creating a set of those locals that were\nnever initialized.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/299a452a75883b64ea15fc7e7f0d139cab3d750f", "html_url": "https://github.com/rust-lang/rust/commit/299a452a75883b64ea15fc7e7f0d139cab3d750f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/299a452a75883b64ea15fc7e7f0d139cab3d750f/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24e66c28980442a48d9458f1a4f9b76cc722dc8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/24e66c28980442a48d9458f1a4f9b76cc722dc8a", "html_url": "https://github.com/rust-lang/rust/commit/24e66c28980442a48d9458f1a4f9b76cc722dc8a"}], "stats": {"total": 164, "additions": 136, "deletions": 28}, "files": [{"sha": "722bb64a7469dd85e23eaac532436894eecaab04", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/299a452a75883b64ea15fc7e7f0d139cab3d750f/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299a452a75883b64ea15fc7e7f0d139cab3d750f/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=299a452a75883b64ea15fc7e7f0d139cab3d750f", "patch": "@@ -304,6 +304,20 @@ impl<'tcx> Mir<'tcx> {\n         })\n     }\n \n+    /// Returns an iterator over all user-declared mutable locals.\n+    #[inline]\n+    pub fn mut_vars_iter<'a>(&'a self) -> impl Iterator<Item = Local> + 'a {\n+        (self.arg_count + 1..self.local_decls.len()).filter_map(move |index| {\n+            let local = Local::new(index);\n+            let decl = &self.local_decls[local];\n+            if decl.is_user_variable.is_some() && decl.mutability == Mutability::Mut {\n+                Some(local)\n+            } else {\n+                None\n+            }\n+        })\n+    }\n+\n     /// Returns an iterator over all user-declared mutable arguments and locals.\n     #[inline]\n     pub fn mut_vars_and_args_iter<'a>(&'a self) -> impl Iterator<Item = Local> + 'a {"}, {"sha": "4e03f6f7f5e7a3e48e41f499f1af8c35672ac615", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/299a452a75883b64ea15fc7e7f0d139cab3d750f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299a452a75883b64ea15fc7e7f0d139cab3d750f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=299a452a75883b64ea15fc7e7f0d139cab3d750f", "patch": "@@ -281,23 +281,21 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     // Note that this set is expected to be small - only upvars from closures\n     // would have a chance of erroneously adding non-user-defined mutable vars\n     // to the set.\n-    let temporary_used_locals: FxHashSet<Local> = mbcx\n-        .used_mut\n-        .iter()\n+    let temporary_used_locals: FxHashSet<Local> = mbcx.used_mut.iter()\n         .filter(|&local| mbcx.mir.local_decls[*local].is_user_variable.is_none())\n         .cloned()\n         .collect();\n-    mbcx.gather_used_muts(temporary_used_locals);\n+    // For the remaining unused locals that are marked as mutable, we avoid linting any that\n+    // were never initialized. These locals may have been removed as unreachable code; or will be\n+    // linted as unused variables.\n+    let unused_mut_locals = mbcx.mir.mut_vars_iter()\n+        .filter(|local| !mbcx.used_mut.contains(local))\n+        .collect();\n+    mbcx.gather_used_muts(temporary_used_locals, unused_mut_locals);\n \n     debug!(\"mbcx.used_mut: {:?}\", mbcx.used_mut);\n-\n     let used_mut = mbcx.used_mut;\n-\n-    for local in mbcx\n-        .mir\n-        .mut_vars_and_args_iter()\n-        .filter(|local| !used_mut.contains(local))\n-    {\n+    for local in mbcx.mir.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {\n         if let ClearCrossCrate::Set(ref vsi) = mbcx.mir.source_scope_local_data {\n             let local_decl = &mbcx.mir.local_decls[local];\n "}, {"sha": "7c75fb59917c00e5b73e8eb5dff46c2a15d9c75f", "filename": "src/librustc_mir/borrow_check/used_muts.rs", "status": "modified", "additions": 87, "deletions": 17, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/299a452a75883b64ea15fc7e7f0d139cab3d750f/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299a452a75883b64ea15fc7e7f0d139cab3d750f/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs?ref=299a452a75883b64ea15fc7e7f0d139cab3d750f", "patch": "@@ -9,43 +9,113 @@\n // except according to those terms.\n \n use rustc::mir::visit::{PlaceContext, Visitor};\n-use rustc::mir::{Local, Location, Place};\n+use rustc::mir::{BasicBlock, Local, Location, Place, Statement, StatementKind, TerminatorKind};\n \n use rustc_data_structures::fx::FxHashSet;\n \n use borrow_check::MirBorrowckCtxt;\n \n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n-    /// Walks the MIR looking for assignments to a set of locals, as part of the unused mutable\n-    /// local variables lint, to update the context's `used_mut` in a single walk.\n-    crate fn gather_used_muts(&mut self, locals: FxHashSet<Local>) {\n-        let mut visitor = GatherUsedMutsVisitor {\n-            needles: locals,\n-            mbcx: self,\n-        };\n-        visitor.visit_mir(visitor.mbcx.mir);\n+    /// Walks the MIR adding to the set of `used_mut` locals that will be ignored for the purposes\n+    /// of the `unused_mut` lint.\n+    ///\n+    /// `temporary_used_locals` should contain locals that were found to be temporary, mutable and\n+    ///  used from borrow checking. This function looks for assignments into these locals from\n+    ///  user-declared locals and adds those user-defined locals to the `used_mut` set. This can\n+    ///  occur due to a rare case involving upvars in closures.\n+    ///\n+    /// `never_initialized_mut_locals` should contain the set of user-declared mutable locals\n+    ///  (not arguments) that have not already been marked as being used.\n+    ///  This function then looks for assignments from statements or the terminator into the locals\n+    ///  from this set and removes them from the set. This leaves only those locals that have not\n+    ///  been assigned to - this set is used as a proxy for locals that were not initialized due to\n+    ///  unreachable code. These locals are then considered \"used\" to silence the lint for them.\n+    ///  See #55344 for context.\n+    crate fn gather_used_muts(\n+        &mut self,\n+        temporary_used_locals: FxHashSet<Local>,\n+        mut never_initialized_mut_locals: FxHashSet<Local>,\n+    ) {\n+        {\n+            let mut visitor = GatherUsedMutsVisitor {\n+                temporary_used_locals,\n+                never_initialized_mut_locals: &mut never_initialized_mut_locals,\n+                mbcx: self,\n+            };\n+            visitor.visit_mir(visitor.mbcx.mir);\n+        }\n+\n+        // Take the union of the existed `used_mut` set with those variables we've found were\n+        // never initialized.\n+        debug!(\"gather_used_muts: never_initialized_mut_locals={:?}\", never_initialized_mut_locals);\n+        self.used_mut = self.used_mut.union(&never_initialized_mut_locals).cloned().collect();\n     }\n }\n \n-/// MIR visitor gathering the assignments to a set of locals, in a single walk.\n-/// 'visit = the duration of the MIR walk\n+/// MIR visitor for collecting used mutable variables.\n+/// The 'visit lifetime represents the duration of the MIR walk.\n struct GatherUsedMutsVisitor<'visit, 'cx: 'visit, 'gcx: 'tcx, 'tcx: 'cx> {\n-    needles: FxHashSet<Local>,\n+    temporary_used_locals: FxHashSet<Local>,\n+    never_initialized_mut_locals: &'visit mut FxHashSet<Local>,\n     mbcx: &'visit mut MirBorrowckCtxt<'cx, 'gcx, 'tcx>,\n }\n \n impl<'visit, 'cx, 'gcx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'cx, 'gcx, 'tcx> {\n+    fn visit_terminator_kind(\n+        &mut self,\n+        _block: BasicBlock,\n+        kind: &TerminatorKind<'tcx>,\n+        _location: Location,\n+    ) {\n+        debug!(\"visit_terminator_kind: kind={:?}\", kind);\n+        match &kind {\n+            TerminatorKind::Call { destination: Some((into, _)), .. } => {\n+                if let Some(local) = into.base_local() {\n+                    debug!(\n+                        \"visit_terminator_kind: kind={:?} local={:?} \\\n+                         never_initialized_mut_locals={:?}\",\n+                        kind, local, self.never_initialized_mut_locals\n+                    );\n+                    let _ = self.never_initialized_mut_locals.remove(&local);\n+                }\n+            },\n+            _ => {},\n+        }\n+    }\n+\n+    fn visit_statement(\n+        &mut self,\n+        _block: BasicBlock,\n+        statement: &Statement<'tcx>,\n+        _location: Location,\n+    ) {\n+        match &statement.kind {\n+            StatementKind::Assign(into, _) => {\n+                // Remove any locals that we found were initialized from the\n+                // `never_initialized_mut_locals` set. At the end, the only remaining locals will\n+                // be those that were never initialized - we will consider those as being used as\n+                // they will either have been removed by unreachable code optimizations; or linted\n+                // as unused variables.\n+                if let Some(local) = into.base_local() {\n+                    debug!(\n+                        \"visit_statement: statement={:?} local={:?} \\\n+                         never_initialized_mut_locals={:?}\",\n+                        statement, local, self.never_initialized_mut_locals\n+                    );\n+                    let _ = self.never_initialized_mut_locals.remove(&local);\n+                }\n+            },\n+            _ => {},\n+        }\n+    }\n+\n     fn visit_local(\n         &mut self,\n         local: &Local,\n         place_context: PlaceContext<'tcx>,\n         location: Location,\n     ) {\n-        if !self.needles.contains(local) {\n-            return;\n-        }\n-\n-        if place_context.is_place_assignment() {\n+        if place_context.is_place_assignment() && self.temporary_used_locals.contains(local) {\n             // Propagate the Local assigned at this Location as a used mutable local variable\n             for moi in &self.mbcx.move_data.loc_map[location] {\n                 let mpi = &self.mbcx.move_data.moves[*moi].path;"}, {"sha": "131c979a24b7d414a0939a6d90013146c98863e8", "filename": "src/test/ui/nll/issue-55344.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/299a452a75883b64ea15fc7e7f0d139cab3d750f/src%2Ftest%2Fui%2Fnll%2Fissue-55344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299a452a75883b64ea15fc7e7f0d139cab3d750f/src%2Ftest%2Fui%2Fnll%2Fissue-55344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55344.rs?ref=299a452a75883b64ea15fc7e7f0d139cab3d750f", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#![feature(nll)]\n+#![allow(unreachable_code)]\n+#![deny(unused_mut)]\n+\n+pub fn foo() {\n+    return;\n+\n+    let mut v = 0;\n+    assert_eq!(v, 0);\n+    v = 1;\n+    assert_eq!(v, 1);\n+}\n+\n+fn main() {}"}]}