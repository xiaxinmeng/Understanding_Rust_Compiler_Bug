{"sha": "8f9844dd5ccbb8185498601542512d96f1cc3f08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmOTg0NGRkNWNjYmI4MTg1NDk4NjAxNTQyNTEyZDk2ZjFjYzNmMDg=", "commit": {"author": {"name": "Scott A Carr", "email": "s.carr1024@gmail.com", "date": "2016-07-07T23:40:01Z"}, "committer": {"name": "Scott A Carr", "email": "s.carr1024@gmail.com", "date": "2016-07-21T02:41:39Z"}, "message": "add mir optimization tests, dump-mir-dir option", "tree": {"sha": "2f46428d9f087e5e6e9dcca4a18602e4f5efd5b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f46428d9f087e5e6e9dcca4a18602e4f5efd5b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f9844dd5ccbb8185498601542512d96f1cc3f08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f9844dd5ccbb8185498601542512d96f1cc3f08", "html_url": "https://github.com/rust-lang/rust/commit/8f9844dd5ccbb8185498601542512d96f1cc3f08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f9844dd5ccbb8185498601542512d96f1cc3f08/comments", "author": {"login": "scottcarr", "id": 472477, "node_id": "MDQ6VXNlcjQ3MjQ3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/472477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottcarr", "html_url": "https://github.com/scottcarr", "followers_url": "https://api.github.com/users/scottcarr/followers", "following_url": "https://api.github.com/users/scottcarr/following{/other_user}", "gists_url": "https://api.github.com/users/scottcarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottcarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottcarr/subscriptions", "organizations_url": "https://api.github.com/users/scottcarr/orgs", "repos_url": "https://api.github.com/users/scottcarr/repos", "events_url": "https://api.github.com/users/scottcarr/events{/privacy}", "received_events_url": "https://api.github.com/users/scottcarr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottcarr", "id": 472477, "node_id": "MDQ6VXNlcjQ3MjQ3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/472477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottcarr", "html_url": "https://github.com/scottcarr", "followers_url": "https://api.github.com/users/scottcarr/followers", "following_url": "https://api.github.com/users/scottcarr/following{/other_user}", "gists_url": "https://api.github.com/users/scottcarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottcarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottcarr/subscriptions", "organizations_url": "https://api.github.com/users/scottcarr/orgs", "repos_url": "https://api.github.com/users/scottcarr/repos", "events_url": "https://api.github.com/users/scottcarr/events{/privacy}", "received_events_url": "https://api.github.com/users/scottcarr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d11936251a93d7395169dfab9088c4dde0cca180", "url": "https://api.github.com/repos/rust-lang/rust/commits/d11936251a93d7395169dfab9088c4dde0cca180", "html_url": "https://github.com/rust-lang/rust/commit/d11936251a93d7395169dfab9088c4dde0cca180"}], "stats": {"total": 247, "additions": 242, "deletions": 5}, "files": [{"sha": "201e4cae51d6d9a4e293d2eedfa276f477991cd3", "filename": "mk/tests.mk", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8f9844dd5ccbb8185498601542512d96f1cc3f08/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8f9844dd5ccbb8185498601542512d96f1cc3f08/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=8f9844dd5ccbb8185498601542512d96f1cc3f08", "patch": "@@ -277,7 +277,8 @@ check-stage$(1)-T-$(2)-H-$(3)-exec: \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-ui-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-doc-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-doc-error-index-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-exec\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-exec \\\n+\tcheck-stage$(1)-T-$(2)-H-$(3)-mir-opt-exec\n \n ifndef CFG_DISABLE_CODEGEN_TESTS\n check-stage$(1)-T-$(2)-H-$(3)-exec: \\\n@@ -458,6 +459,7 @@ UI_RS := $(call rwildcard,$(S)src/test/ui/,*.rs) \\\n          $(call rwildcard,$(S)src/test/ui/,*.stdout) \\\n          $(call rwildcard,$(S)src/test/ui/,*.stderr)\n RUSTDOCCK_RS := $(call rwildcard,$(S)src/test/rustdoc/,*.rs)\n+MIR_OPT_RS := $(call rwildcard,$(S)src/test/mir-opt/,*.rs)\n \n RPASS_TESTS := $(RPASS_RS)\n RPASS_VALGRIND_TESTS := $(RPASS_VALGRIND_RS)\n@@ -475,6 +477,7 @@ CODEGEN_UNITS_TESTS := $(CODEGEN_UNITS_RS)\n INCREMENTAL_TESTS := $(INCREMENTAL_RS)\n RMAKE_TESTS := $(RMAKE_RS)\n UI_TESTS := $(UI_RS)\n+MIR_OPT_TESTS := $(MIR_OPT_RS)\n RUSTDOCCK_TESTS := $(RUSTDOCCK_RS)\n \n CTEST_SRC_BASE_rpass = run-pass\n@@ -552,6 +555,11 @@ CTEST_BUILD_BASE_ui = ui\n CTEST_MODE_ui = ui\n CTEST_RUNTOOL_ui = $(CTEST_RUNTOOL)\n \n+CTEST_SRC_BASE_mir-opt = mir-opt\n+CTEST_BUILD_BASE_mir-opt = mir-opt\n+CTEST_MODE_mir-opt = mir-opt\n+CTEST_RUNTOOL_mir-opt = $(CTEST_RUNTOOL)\n+\n CTEST_SRC_BASE_rustdocck = rustdoc\n CTEST_BUILD_BASE_rustdocck = rustdoc\n CTEST_MODE_rustdocck = rustdoc\n@@ -684,6 +692,7 @@ CTEST_DEPS_incremental_$(1)-T-$(2)-H-$(3) = $$(INCREMENTAL_TESTS)\n CTEST_DEPS_rmake_$(1)-T-$(2)-H-$(3) = $$(RMAKE_TESTS) \\\n \t$$(CSREQ$(1)_T_$(3)_H_$(3)) $$(SREQ$(1)_T_$(2)_H_$(3))\n CTEST_DEPS_ui_$(1)-T-$(2)-H-$(3) = $$(UI_TESTS)\n+CTEST_DEPS_mir-opt_$(1)-T-$(2)-H-$(3) = $$(MIR_OPT_TESTS)\n CTEST_DEPS_rustdocck_$(1)-T-$(2)-H-$(3) = $$(RUSTDOCCK_TESTS) \\\n \t\t$$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n \t\t$(S)src/etc/htmldocck.py\n@@ -755,7 +764,7 @@ endef\n \n CTEST_NAMES = rpass rpass-valgrind rpass-full rfail-full cfail-full rfail cfail pfail \\\n \tdebuginfo-gdb debuginfo-lldb codegen codegen-units rustdocck incremental \\\n-\trmake ui\n+\trmake ui mir-opt\n \n $(foreach host,$(CFG_HOST), \\\n  $(eval $(foreach target,$(CFG_TARGET), \\\n@@ -964,6 +973,7 @@ TEST_GROUPS = \\\n \tpretty-rfail-full \\\n \tpretty-rfail \\\n \tpretty-pretty \\\n+\tmir-opt \\\n \t$(NULL)\n \n define DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST"}, {"sha": "53a0625744650e97a700c8f68fe719160e1f25bb", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f9844dd5ccbb8185498601542512d96f1cc3f08/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9844dd5ccbb8185498601542512d96f1cc3f08/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=8f9844dd5ccbb8185498601542512d96f1cc3f08", "patch": "@@ -375,6 +375,10 @@ impl Build {\n                     check::compiletest(self, &compiler, target.target,\n                                        \"pretty\", \"run-pass-valgrind\");\n                 }\n+                CheckMirOpt { compiler } => {\n+                    check::compiletest(self, &compiler, target.target,\n+                                       \"mir-opt\", \"mir-opt\");\n+                }\n                 CheckCodegen { compiler } => {\n                     check::compiletest(self, &compiler, target.target,\n                                        \"codegen\", \"codegen\");"}, {"sha": "bd262cc7721eb037e01bcc021e86d793550e71a6", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f9844dd5ccbb8185498601542512d96f1cc3f08/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9844dd5ccbb8185498601542512d96f1cc3f08/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=8f9844dd5ccbb8185498601542512d96f1cc3f08", "patch": "@@ -124,6 +124,7 @@ macro_rules! targets {\n             (check_codegen_units, CheckCodegenUnits { compiler: Compiler<'a> }),\n             (check_incremental, CheckIncremental { compiler: Compiler<'a> }),\n             (check_ui, CheckUi { compiler: Compiler<'a> }),\n+            (check_mir_opt, CheckMirOpt { compiler: Compiler<'a> }),\n             (check_debuginfo, CheckDebuginfo { compiler: Compiler<'a> }),\n             (check_rustdoc, CheckRustdoc { compiler: Compiler<'a> }),\n             (check_docs, CheckDocs { compiler: Compiler<'a> }),\n@@ -444,6 +445,7 @@ impl<'a> Step<'a> {\n                         self.check_pretty_rfail_full(compiler),\n                         self.check_rpass_valgrind(compiler),\n                         self.check_rmake(compiler),\n+                        self.check_mir_opt(compiler),\n \n                         // crates\n                         self.check_crate_rustc(compiler),\n@@ -471,6 +473,7 @@ impl<'a> Step<'a> {\n             Source::CheckTidy { stage } => {\n                 vec![self.tool_tidy(stage)]\n             }\n+            Source::CheckMirOpt { compiler} |\n             Source::CheckPrettyRPass { compiler } |\n             Source::CheckPrettyRFail { compiler } |\n             Source::CheckRFail { compiler } |"}, {"sha": "2d0b243558ffd8e84fae4218baa0c7974d90c253", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f9844dd5ccbb8185498601542512d96f1cc3f08/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9844dd5ccbb8185498601542512d96f1cc3f08/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=8f9844dd5ccbb8185498601542512d96f1cc3f08", "patch": "@@ -749,6 +749,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"set the MIR optimization level (0-3)\"),\n     dump_mir: Option<String> = (None, parse_opt_string,\n           \"dump MIR state at various points in translation\"),\n+    dump_mir_dir: Option<String> = (None, parse_opt_string,\n+          \"the directory the MIR is dumped into\"),\n     orbit: bool = (false, parse_bool,\n           \"get MIR where it belongs - everywhere; most importantly, in orbit\"),\n }"}, {"sha": "577e0fd086015772bd9a1ab14db009899b4548fa", "filename": "src/librustc_mir/pretty.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8f9844dd5ccbb8185498601542512d96f1cc3f08/src%2Flibrustc_mir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9844dd5ccbb8185498601542512d96f1cc3f08/src%2Flibrustc_mir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fpretty.rs?ref=8f9844dd5ccbb8185498601542512d96f1cc3f08", "patch": "@@ -19,6 +19,7 @@ use std::fmt::Display;\n use std::fs;\n use std::io::{self, Write};\n use syntax::ast::NodeId;\n+use std::path::{PathBuf, Path};\n \n const INDENT: &'static str = \"    \";\n /// Alignment for lining up comments following MIR statements\n@@ -66,9 +67,15 @@ pub fn dump_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         _ => String::new()\n     };\n \n+    let mut file_path = PathBuf::new();\n+    if let Some(ref file_dir) = tcx.sess.opts.debugging_opts.dump_mir_dir {\n+        let p = Path::new(file_dir);\n+        file_path.push(p);\n+    };\n     let file_name = format!(\"rustc.node{}{}.{}.{}.mir\",\n                             node_id, promotion_id, pass_name, disambiguator);\n-    let _ = fs::File::create(&file_name).and_then(|mut file| {\n+    file_path.push(&file_name);\n+    let _ = fs::File::create(&file_path).and_then(|mut file| {\n         try!(writeln!(file, \"// MIR for `{}`\", node_path));\n         try!(writeln!(file, \"// node_id = {}\", node_id));\n         try!(writeln!(file, \"// pass_name = {}\", pass_name));"}, {"sha": "9144e9757f6a7bef6dc2b2c5beb2c9bb4c6faf40", "filename": "src/test/mir-opt/README.md", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8f9844dd5ccbb8185498601542512d96f1cc3f08/src%2Ftest%2Fmir-opt%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/8f9844dd5ccbb8185498601542512d96f1cc3f08/src%2Ftest%2Fmir-opt%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2FREADME.md?ref=8f9844dd5ccbb8185498601542512d96f1cc3f08", "patch": "@@ -0,0 +1,44 @@\n+This folder contains tests for MIR optimizations.\n+\n+The test format is:\n+\n+```\n+(arbitrary rust code)\n+// END RUST SOURCE\n+// START $file_name_of_some_mir_dump_0\n+//  $expected_line_0\n+// ...\n+// $expected_line_N\n+// END $file_name_of_some_mir_dump_0\n+// ...\n+// START $file_name_of_some_mir_dump_N\n+//  $expected_line_0\n+// ...\n+// $expected_line_N\n+// END $file_name_of_some_mir_dump_N\n+```\n+\n+All the test information is in comments so the test is runnable.\n+\n+For each $file_name, compiletest expects [$expected_line_0, ...,\n+$expected_line_N] to appear in the dumped MIR in order.  Currently it allows\n+other non-matched lines before, after and in-between.  \n+\n+Lines match ignoring whitespace, and the prefix \"//\" is removed.\n+\n+It also currently strips trailing comments -- partly because the full file path\n+in \"scope comments\" is unpredictable and partly because tidy complains about\n+the lines being too long.\n+\n+compiletest handles dumping the MIR before and after every pass for you.  The\n+test writer only has to specify the file names of the dumped files (not the\n+full path to the file) and what lines to expect.  I added an option to rustc\n+that tells it to dump the mir into some directly (rather then always dumping to\n+the current directory).  \n+\n+Lines match ignoring whitespace, and the prefix \"//\" is removed of course.\n+\n+It also currently strips trailing comments -- partly because the full file path\n+in \"scope comments\" is unpredictable and partly because tidy complains about\n+the lines being too long.\n+"}, {"sha": "4409f16b3f5ff8f91413d585f8db404e84e72a16", "filename": "src/test/mir-opt/return_an_array.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8f9844dd5ccbb8185498601542512d96f1cc3f08/src%2Ftest%2Fmir-opt%2Freturn_an_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9844dd5ccbb8185498601542512d96f1cc3f08/src%2Ftest%2Fmir-opt%2Freturn_an_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Freturn_an_array.rs?ref=8f9844dd5ccbb8185498601542512d96f1cc3f08", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// this tests move up progration, which is not yet implemented\n+\n+fn foo() -> [u8; 1024] {\n+        let x = [0; 1024];\n+        return x;\n+}\n+\n+fn main() { }\n\\ No newline at end of file"}, {"sha": "dd6a857960432141e5a58f258b742bebb81a9aac", "filename": "src/test/mir-opt/simplify_if.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8f9844dd5ccbb8185498601542512d96f1cc3f08/src%2Ftest%2Fmir-opt%2Fsimplify_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9844dd5ccbb8185498601542512d96f1cc3f08/src%2Ftest%2Fmir-opt%2Fsimplify_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_if.rs?ref=8f9844dd5ccbb8185498601542512d96f1cc3f08", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    if false {\n+        println!(\"hello world!\");\n+    }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node4.SimplifyBranches.initial-before.mir\n+// bb0: {\n+//     if(const false) -> [true: bb1, false: bb2]; // scope 0 at simplify_if.rs:12:5: 14:6\n+// }\n+// END rustc.node4.SimplifyBranches.initial-before.mir\n+// START rustc.node4.SimplifyBranches.initial-after.mir\n+// bb0: {\n+//     goto -> bb2;                     // scope 0 at simplify_if.rs:12:5: 14:6\n+// }\n+// END rustc.node4.SimplifyBranches.initial-after.mir\n\\ No newline at end of file"}, {"sha": "2a35fab9676a71b9f45bea98a44a6409553df18a", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f9844dd5ccbb8185498601542512d96f1cc3f08/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9844dd5ccbb8185498601542512d96f1cc3f08/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=8f9844dd5ccbb8185498601542512d96f1cc3f08", "patch": "@@ -29,6 +29,7 @@ pub enum Mode {\n     Incremental,\n     RunMake,\n     Ui,\n+    MirOpt,\n }\n \n impl FromStr for Mode {\n@@ -49,6 +50,7 @@ impl FromStr for Mode {\n           \"incremental\" => Ok(Incremental),\n           \"run-make\" => Ok(RunMake),\n           \"ui\" => Ok(Ui),\n+          \"mir-opt\" => Ok(MirOpt),\n           _ => Err(()),\n         }\n     }\n@@ -71,6 +73,7 @@ impl fmt::Display for Mode {\n             Incremental => \"incremental\",\n             RunMake => \"run-make\",\n             Ui => \"ui\",\n+            MirOpt => \"mir-opt\",\n         }, f)\n     }\n }"}, {"sha": "cefcc11486fe230c8659e989e3575d0233e7c47c", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f9844dd5ccbb8185498601542512d96f1cc3f08/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9844dd5ccbb8185498601542512d96f1cc3f08/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=8f9844dd5ccbb8185498601542512d96f1cc3f08", "patch": "@@ -86,7 +86,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n           reqopt(\"\", \"stage-id\", \"the target-stage identifier\", \"stageN-TARGET\"),\n           reqopt(\"\", \"mode\", \"which sort of compile tests to run\",\n                  \"(compile-fail|parse-fail|run-fail|run-pass|\\\n-                  run-pass-valgrind|pretty|debug-info|incremental)\"),\n+                  run-pass-valgrind|pretty|debug-info|incremental|mir-opt)\"),\n           optflag(\"\", \"ignored\", \"run tests marked as ignored\"),\n           optopt(\"\", \"runtool\", \"supervisor program to run tests under \\\n                                  (eg. emulator, valgrind)\", \"PROGRAM\"),"}, {"sha": "f2acfa517ced5b3e36aa75afa5537ac5cfbcbf1f", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 120, "deletions": 1, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/8f9844dd5ccbb8185498601542512d96f1cc3f08/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9844dd5ccbb8185498601542512d96f1cc3f08/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=8f9844dd5ccbb8185498601542512d96f1cc3f08", "patch": "@@ -11,7 +11,7 @@\n use common::Config;\n use common::{CompileFail, ParseFail, Pretty, RunFail, RunPass, RunPassValgrind};\n use common::{Codegen, DebugInfoLldb, DebugInfoGdb, Rustdoc, CodegenUnits};\n-use common::{Incremental, RunMake, Ui};\n+use common::{Incremental, RunMake, Ui, MirOpt};\n use errors::{self, ErrorKind, Error};\n use json;\n use header::TestProps;\n@@ -117,6 +117,7 @@ impl<'test> TestCx<'test> {\n             Incremental => self.run_incremental_test(),\n             RunMake => self.run_rmake_test(),\n             Ui => self.run_ui_test(),\n+            MirOpt => self.run_mir_opt_test(),\n         }\n     }\n \n@@ -1336,7 +1337,22 @@ actual:\\n\\\n                                 .map(|s| s.to_string()));\n                 }\n             }\n+            MirOpt => {\n+                args.extend([\"-Z\",\n+                             \"dump-mir=all\",\n+                             \"-Z\"]\n+                            .iter()\n+                            .map(|s| s.to_string()));\n \n+\n+                let mir_dump_dir = self.get_mir_dump_dir();\n+                self.create_dir_racy(mir_dump_dir.as_path());\n+                let mut dir_opt = \"dump-mir-dir=\".to_string();\n+                dir_opt.push_str(mir_dump_dir.to_str().unwrap());\n+                debug!(\"dir_opt: {:?}\", dir_opt);\n+\n+                args.push(dir_opt);\n+            }\n             RunFail |\n             RunPass |\n             RunPassValgrind |\n@@ -2145,6 +2161,100 @@ actual:\\n\\\n         }\n     }\n \n+    fn run_mir_opt_test(&self) {\n+        let proc_res = self.compile_test();\n+\n+        if !proc_res.status.success() {\n+            self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n+        }\n+\n+        let proc_res = self.exec_compiled_test();\n+\n+        if !proc_res.status.success() {\n+            self.fatal_proc_rec(\"test run failed!\", &proc_res);\n+        }\n+        self.check_mir_dump();\n+    }\n+\n+    fn check_mir_dump(&self) {\n+        let mut test_file_contents = String::new();\n+        fs::File::open(self.testpaths.file.clone()).unwrap()\n+                                                   .read_to_string(&mut test_file_contents)\n+                                                   .unwrap();\n+        if let Some(idx) =  test_file_contents.find(\"// END RUST SOURCE\") {\n+            let (_, tests_text) = test_file_contents.split_at(idx + \"// END_RUST SOURCE\".len());\n+            let tests_text_str = String::from(tests_text);\n+            let mut curr_test : Option<&str> = None;\n+            let mut curr_test_contents = Vec::new();\n+            for l in tests_text_str.lines() {\n+                debug!(\"line: {:?}\", l);\n+                if l.starts_with(\"// START \") {\n+                    let (_, t) = l.split_at(\"// START \".len());\n+                    curr_test = Some(t);\n+                } else if l.starts_with(\"// END\") {\n+                    let (_, t) = l.split_at(\"// END \".len());\n+                    if Some(t) != curr_test {\n+                        panic!(\"mismatched START END test name\");\n+                    }\n+                    self.compare_mir_test_output(curr_test.unwrap(), &curr_test_contents);\n+                    curr_test = None;\n+                    curr_test_contents.clear();\n+                } else if l.is_empty() {\n+                    // ignore\n+                } else if l.starts_with(\"// \") {\n+                    let (_, test_content) = l.split_at(\"// \".len());\n+                    curr_test_contents.push(test_content);\n+                }\n+            }\n+        }\n+    }\n+\n+    fn compare_mir_test_output(&self, test_name: &str, expected_content: &Vec<&str>) {\n+        let mut output_file = PathBuf::new();\n+        output_file.push(self.get_mir_dump_dir());\n+        output_file.push(test_name);\n+        debug!(\"comparing the contests of: {:?}\", output_file);\n+        debug!(\"with: {:?}\", expected_content);\n+\n+        let mut dumped_file = fs::File::open(output_file.clone()).unwrap();\n+        let mut dumped_string = String::new();\n+        dumped_file.read_to_string(&mut dumped_string).unwrap();\n+        let mut dumped_lines = dumped_string.lines().filter(|l| !l.is_empty());\n+        let mut expected_lines = expected_content.iter().filter(|l| !l.is_empty());\n+\n+        // We expect each non-empty line from expected_content to appear\n+        // in the dump in order, but there may be extra lines interleaved\n+        while let Some(expected_line) = expected_lines.next() {\n+            let e_norm = normalize_mir_line(expected_line);\n+            if e_norm.is_empty() {\n+                continue;\n+            };\n+            let mut found = false;\n+            while let Some(dumped_line) = dumped_lines.next() {\n+                let d_norm = normalize_mir_line(dumped_line);\n+                debug!(\"found: {:?}\", d_norm);\n+                debug!(\"expected: {:?}\", e_norm);\n+                if e_norm == d_norm {\n+                    found = true;\n+                    break;\n+                };\n+            }\n+            if !found {\n+                panic!(\"ran out of mir dump output to match against\");\n+            }\n+        }\n+    }\n+\n+    fn get_mir_dump_dir(&self) -> PathBuf {\n+        let mut mir_dump_dir = PathBuf::from(self.config.build_base\n+                                                    .as_path()\n+                                                    .to_str()\n+                                                    .unwrap());\n+        debug!(\"input_file: {:?}\", self.testpaths.file);\n+        mir_dump_dir.push(self.testpaths.file.file_stem().unwrap().to_str().unwrap());\n+        mir_dump_dir\n+    }\n+\n     fn normalize_output(&self, output: &str) -> String {\n         let parent_dir = self.testpaths.file.parent().unwrap();\n         let parent_dir_str = parent_dir.display().to_string();\n@@ -2274,3 +2384,12 @@ enum TargetLocation {\n     ThisDirectory(PathBuf),\n }\n \n+fn normalize_mir_line(line: &str) -> String {\n+    let no_comments = if let Some(idx) = line.find(\"//\") {\n+        let (l, _) = line.split_at(idx);\n+        l\n+    } else {\n+        line\n+    };\n+    no_comments.replace(char::is_whitespace, \"\")\n+}"}]}