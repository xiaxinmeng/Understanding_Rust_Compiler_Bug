{"sha": "f3ff02bdd85255ad75bae40aad53e520e37a8e4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZmYwMmJkZDg1MjU1YWQ3NWJhZTQwYWFkNTNlNTIwZTM3YThlNGE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-09T15:51:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-13T09:56:38Z"}, "message": "remove PanicInfo::Panic variant that MIR does not use or need", "tree": {"sha": "fb244e42a7fcbf5ee2644cd0c9d24d008c6e36ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb244e42a7fcbf5ee2644cd0c9d24d008c6e36ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3ff02bdd85255ad75bae40aad53e520e37a8e4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ff02bdd85255ad75bae40aad53e520e37a8e4a", "html_url": "https://github.com/rust-lang/rust/commit/f3ff02bdd85255ad75bae40aad53e520e37a8e4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3ff02bdd85255ad75bae40aad53e520e37a8e4a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5709ff6b779d88c0d432f6ed8731fde6e55c090", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5709ff6b779d88c0d432f6ed8731fde6e55c090", "html_url": "https://github.com/rust-lang/rust/commit/c5709ff6b779d88c0d432f6ed8731fde6e55c090"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "da8c0bf266f49df4773e08cf4ad020a975374614", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f3ff02bdd85255ad75bae40aad53e520e37a8e4a/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ff02bdd85255ad75bae40aad53e520e37a8e4a/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=f3ff02bdd85255ad75bae40aad53e520e37a8e4a", "patch": "@@ -11,7 +11,6 @@ use hir::GeneratorKind;\n use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_macros::HashStable;\n-use rustc_span::symbol::Symbol;\n use rustc_span::{Pos, Span};\n use rustc_target::spec::abi::Abi;\n use std::{any::Any, env, fmt};\n@@ -272,7 +271,6 @@ impl<'tcx> From<InterpError<'tcx>> for InterpErrorInfo<'tcx> {\n /// FIXME: this is not actually an InterpError, and should probably be moved to another module.\n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable, PartialEq)]\n pub enum PanicInfo<O> {\n-    Panic { msg: Symbol, line: u32, col: u32, file: Symbol },\n     BoundsCheck { len: O, index: O },\n     Overflow(mir::BinOp),\n     OverflowNeg,\n@@ -288,7 +286,7 @@ pub type AssertMessage<'tcx> = PanicInfo<mir::Operand<'tcx>>;\n impl<O> PanicInfo<O> {\n     /// Getting a description does not require `O` to be printable, and does not\n     /// require allocation.\n-    /// The caller is expected to handle `Panic` and `BoundsCheck` separately.\n+    /// The caller is expected to handle `BoundsCheck` separately.\n     pub fn description(&self) -> &'static str {\n         use PanicInfo::*;\n         match self {\n@@ -307,7 +305,7 @@ impl<O> PanicInfo<O> {\n             ResumedAfterReturn(GeneratorKind::Async(_)) => \"`async fn` resumed after completion\",\n             ResumedAfterPanic(GeneratorKind::Gen) => \"generator resumed after panicking\",\n             ResumedAfterPanic(GeneratorKind::Async(_)) => \"`async fn` resumed after panicking\",\n-            Panic { .. } | BoundsCheck { .. } => bug!(\"Unexpected PanicInfo\"),\n+            BoundsCheck { .. } => bug!(\"Unexpected PanicInfo\"),\n         }\n     }\n }\n@@ -316,9 +314,6 @@ impl<O: fmt::Debug> fmt::Debug for PanicInfo<O> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use PanicInfo::*;\n         match self {\n-            Panic { ref msg, line, col, ref file } => {\n-                write!(f, \"the evaluated program panicked at '{}', {}:{}:{}\", msg, file, line, col)\n-            }\n             BoundsCheck { ref len, ref index } => {\n                 write!(f, \"index out of bounds: the len is {:?} but the index is {:?}\", len, index)\n             }"}, {"sha": "05011241557250331be184644d6467211b4cfd2d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3ff02bdd85255ad75bae40aad53e520e37a8e4a/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ff02bdd85255ad75bae40aad53e520e37a8e4a/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=f3ff02bdd85255ad75bae40aad53e520e37a8e4a", "patch": "@@ -2671,8 +2671,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                     BoundsCheck { ref len, ref index } => {\n                         BoundsCheck { len: len.fold_with(folder), index: index.fold_with(folder) }\n                     }\n-                    Panic { .. }\n-                    | Overflow(_)\n+                    Overflow(_)\n                     | OverflowNeg\n                     | DivisionByZero\n                     | RemainderByZero\n@@ -2721,8 +2720,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                         BoundsCheck { ref len, ref index } => {\n                             len.visit_with(visitor) || index.visit_with(visitor)\n                         }\n-                        Panic { .. }\n-                        | Overflow(_)\n+                        Overflow(_)\n                         | OverflowNeg\n                         | DivisionByZero\n                         | RemainderByZero"}, {"sha": "555beaa8ca7988ee91a4ab5b1c17ba688269ca46", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ff02bdd85255ad75bae40aad53e520e37a8e4a/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ff02bdd85255ad75bae40aad53e520e37a8e4a/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=f3ff02bdd85255ad75bae40aad53e520e37a8e4a", "patch": "@@ -539,7 +539,7 @@ macro_rules! make_mir_visitor {\n                         self.visit_operand(len, location);\n                         self.visit_operand(index, location);\n                     }\n-                    Panic { .. } | Overflow(_) | OverflowNeg | DivisionByZero | RemainderByZero |\n+                    Overflow(_) | OverflowNeg | DivisionByZero | RemainderByZero |\n                     ResumedAfterReturn(_) | ResumedAfterPanic(_) => {\n                         // Nothing to visit\n                     }"}, {"sha": "edf0f0a7dbe7c873846921460ae0dd9886dc857e", "filename": "src/librustc_mir/const_eval/error.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f3ff02bdd85255ad75bae40aad53e520e37a8e4a/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ff02bdd85255ad75bae40aad53e520e37a8e4a/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs?ref=f3ff02bdd85255ad75bae40aad53e520e37a8e4a", "patch": "@@ -1,6 +1,8 @@\n use std::error::Error;\n use std::fmt;\n \n+use rustc_span::Symbol;\n+\n use super::InterpCx;\n use crate::interpret::{ConstEvalErr, InterpError, InterpErrorInfo, Machine, PanicInfo};\n \n@@ -9,7 +11,8 @@ use crate::interpret::{ConstEvalErr, InterpError, InterpErrorInfo, Machine, Pani\n pub enum ConstEvalErrKind {\n     NeedsRfc(String),\n     ConstAccessesStatic,\n-    Panic(PanicInfo<u64>),\n+    AssertFailure(PanicInfo<u64>),\n+    Panic { msg: Symbol, line: u32, col: u32, file: Symbol },\n }\n \n // The errors become `MachineStop` with plain strings when being raised.\n@@ -29,7 +32,10 @@ impl fmt::Display for ConstEvalErrKind {\n                 write!(f, \"\\\"{}\\\" needs an rfc before being allowed inside constants\", msg)\n             }\n             ConstAccessesStatic => write!(f, \"constant accesses static\"),\n-            Panic(ref msg) => write!(f, \"{:?}\", msg),\n+            AssertFailure(ref msg) => write!(f, \"{:?}\", msg),\n+            Panic { msg, line, col, file } => {\n+                write!(f, \"the evaluated program panicked at '{}', {}:{}:{}\", msg, file, line, col)\n+            }\n         }\n     }\n }"}, {"sha": "e0f146c6dc0a572f1a6abdc38d9c563ef4b664b0", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f3ff02bdd85255ad75bae40aad53e520e37a8e4a/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ff02bdd85255ad75bae40aad53e520e37a8e4a/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=f3ff02bdd85255ad75bae40aad53e520e37a8e4a", "patch": "@@ -13,7 +13,7 @@ use rustc_span::symbol::Symbol;\n \n use crate::interpret::{\n     self, snapshot, AllocId, Allocation, AssertMessage, GlobalId, ImmTy, InterpCx, InterpResult,\n-    Memory, MemoryKind, OpTy, PanicInfo, PlaceTy, Pointer, Scalar,\n+    Memory, MemoryKind, OpTy, PlaceTy, Pointer, Scalar,\n };\n \n use super::error::*;\n@@ -78,7 +78,7 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n             let msg = Symbol::intern(self.read_str(msg_place)?);\n             let span = self.find_closest_untracked_caller_location().unwrap_or(span);\n             let (file, line, col) = self.location_triple_for_span(span);\n-            Err(ConstEvalErrKind::Panic(PanicInfo::Panic { msg, file, line, col }).into())\n+            Err(ConstEvalErrKind::Panic { msg, file, line, col }.into())\n         } else {\n             Ok(false)\n         }\n@@ -304,9 +304,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n             RemainderByZero => RemainderByZero,\n             ResumedAfterReturn(generator_kind) => ResumedAfterReturn(*generator_kind),\n             ResumedAfterPanic(generator_kind) => ResumedAfterPanic(*generator_kind),\n-            Panic { .. } => bug!(\"`Panic` variant cannot occur in MIR\"),\n         };\n-        Err(ConstEvalErrKind::Panic(err).into())\n+        Err(ConstEvalErrKind::AssertFailure(err).into())\n     }\n \n     fn ptr_to_int(_mem: &Memory<'mir, 'tcx, Self>, _ptr: Pointer) -> InterpResult<'tcx, u64> {"}]}