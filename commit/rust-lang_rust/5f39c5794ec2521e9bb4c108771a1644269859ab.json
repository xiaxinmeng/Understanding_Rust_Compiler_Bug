{"sha": "5f39c5794ec2521e9bb4c108771a1644269859ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMzljNTc5NGVjMjUyMWU5YmI0YzEwODc3MWExNjQ0MjY5ODU5YWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-25T12:41:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-25T12:54:03Z"}, "message": "Use GenericDefIdMore", "tree": {"sha": "6dd5653f77a3eabb015c5a9172e32e83eb0e6039", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dd5653f77a3eabb015c5a9172e32e83eb0e6039"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f39c5794ec2521e9bb4c108771a1644269859ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f39c5794ec2521e9bb4c108771a1644269859ab", "html_url": "https://github.com/rust-lang/rust/commit/5f39c5794ec2521e9bb4c108771a1644269859ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f39c5794ec2521e9bb4c108771a1644269859ab/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2a16632d0773dec707acb215297ef55b5c880fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2a16632d0773dec707acb215297ef55b5c880fe", "html_url": "https://github.com/rust-lang/rust/commit/c2a16632d0773dec707acb215297ef55b5c880fe"}], "stats": {"total": 100, "additions": 44, "deletions": 56}, "files": [{"sha": "534f1f8e982f31713c42d289043d39c10ce7ac0b", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5f39c5794ec2521e9bb4c108771a1644269859ab/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f39c5794ec2521e9bb4c108771a1644269859ab/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=5f39c5794ec2521e9bb4c108771a1644269859ab", "patch": "@@ -11,9 +11,9 @@ use hir_def::{\n     per_ns::PerNs,\n     resolver::{HasResolver, TypeNs},\n     type_ref::TypeRef,\n-    AstItemDef, ConstId, ContainerId, EnumId, FunctionId, HasModule, ImplId, LocalEnumVariantId,\n-    LocalImportId, LocalModuleId, LocalStructFieldId, Lookup, ModuleId, StaticId, StructId,\n-    TraitId, TypeAliasId, UnionId,\n+    AstItemDef, ConstId, ContainerId, EnumId, FunctionId, GenericDefId, HasModule, ImplId,\n+    LocalEnumVariantId, LocalImportId, LocalModuleId, LocalStructFieldId, Lookup, ModuleId,\n+    StaticId, StructId, TraitId, TypeAliasId, UnionId,\n };\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n@@ -897,16 +897,6 @@ impl_froms!(\n     Const\n );\n \n-impl From<AssocItem> for GenericDef {\n-    fn from(item: AssocItem) -> Self {\n-        match item {\n-            AssocItem::Function(f) => f.into(),\n-            AssocItem::Const(c) => c.into(),\n-            AssocItem::TypeAlias(t) => t.into(),\n-        }\n-    }\n-}\n-\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct Local {\n     pub(crate) parent: DefWithBody,\n@@ -960,7 +950,7 @@ impl Local {\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct GenericParam {\n-    pub(crate) parent: GenericDef,\n+    pub(crate) parent: GenericDefId,\n     pub(crate) idx: u32,\n }\n "}, {"sha": "b034d4e448dcf8bdfa617e29bc56c4448eb256c8", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f39c5794ec2521e9bb4c108771a1644269859ab/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f39c5794ec2521e9bb4c108771a1644269859ab/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=5f39c5794ec2521e9bb4c108771a1644269859ab", "patch": "@@ -12,7 +12,7 @@ use crate::{\n         CallableDef, FnSig, GenericPredicate, InferenceResult, Namespace, Substs, Ty, TypableDef,\n         TypeCtor,\n     },\n-    Crate, DefWithBody, GenericDef, ImplBlock, Trait,\n+    Crate, DefWithBody, ImplBlock, Trait,\n };\n \n pub use hir_def::{\n@@ -49,15 +49,15 @@ pub trait HirDatabase: DefDatabase {\n     #[salsa::invoke(crate::ty::generic_predicates_for_param_query)]\n     fn generic_predicates_for_param(\n         &self,\n-        def: GenericDef,\n+        def: GenericDefId,\n         param_idx: u32,\n     ) -> Arc<[GenericPredicate]>;\n \n     #[salsa::invoke(crate::ty::generic_predicates_query)]\n     fn generic_predicates(&self, def: GenericDefId) -> Arc<[GenericPredicate]>;\n \n     #[salsa::invoke(crate::ty::generic_defaults_query)]\n-    fn generic_defaults(&self, def: GenericDef) -> Substs;\n+    fn generic_defaults(&self, def: GenericDefId) -> Substs;\n \n     #[salsa::invoke(crate::ty::method_resolution::CrateImplBlocks::impls_in_crate_query)]\n     fn impls_in_crate(&self, krate: Crate) -> Arc<CrateImplBlocks>;"}, {"sha": "619f6055e1afc12412c44d200c259fb36dc1f7c8", "filename": "crates/ra_hir/src/from_id.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5f39c5794ec2521e9bb4c108771a1644269859ab/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f39c5794ec2521e9bb4c108771a1644269859ab/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs?ref=5f39c5794ec2521e9bb4c108771a1644269859ab", "patch": "@@ -137,20 +137,6 @@ impl From<GenericDef> for GenericDefId {\n     }\n }\n \n-impl From<GenericDefId> for GenericDef {\n-    fn from(def: GenericDefId) -> Self {\n-        match def {\n-            GenericDefId::FunctionId(it) => GenericDef::Function(it.into()),\n-            GenericDefId::AdtId(it) => GenericDef::Adt(it.into()),\n-            GenericDefId::TraitId(it) => GenericDef::Trait(it.into()),\n-            GenericDefId::TypeAliasId(it) => GenericDef::TypeAlias(it.into()),\n-            GenericDefId::ImplId(it) => GenericDef::ImplBlock(it.into()),\n-            GenericDefId::EnumVariantId(it) => GenericDef::EnumVariant(it.into()),\n-            GenericDefId::ConstId(it) => GenericDef::Const(it.into()),\n-        }\n-    }\n-}\n-\n impl From<AdtId> for TypableDef {\n     fn from(id: AdtId) -> Self {\n         Adt::from(id).into()\n@@ -244,3 +230,13 @@ impl From<AttrDef> for AttrDefId {\n         }\n     }\n }\n+\n+impl From<AssocItem> for GenericDefId {\n+    fn from(item: AssocItem) -> Self {\n+        match item {\n+            AssocItem::Function(f) => f.id.into(),\n+            AssocItem::Const(c) => c.id.into(),\n+            AssocItem::TypeAlias(t) => t.id.into(),\n+        }\n+    }\n+}"}, {"sha": "cbfeca3abb73c3a25982b405f512f04009a3a07d", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f39c5794ec2521e9bb4c108771a1644269859ab/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f39c5794ec2521e9bb4c108771a1644269859ab/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=5f39c5794ec2521e9bb4c108771a1644269859ab", "patch": "@@ -251,7 +251,7 @@ impl SourceAnalyzer {\n         let types = self.resolver.resolve_path_in_type_ns_fully(db, &path).map(|ty| match ty {\n             TypeNs::SelfType(it) => PathResolution::SelfType(it.into()),\n             TypeNs::GenericParam(idx) => PathResolution::GenericParam(GenericParam {\n-                parent: self.resolver.generic_def().unwrap().into(),\n+                parent: self.resolver.generic_def().unwrap(),\n                 idx,\n             }),\n             TypeNs::AdtSelfType(it) | TypeNs::AdtId(it) => {\n@@ -326,7 +326,7 @@ impl SourceAnalyzer {\n                 resolver::ScopeDef::ImplSelfType(it) => ScopeDef::ImplSelfType(it.into()),\n                 resolver::ScopeDef::AdtSelfType(it) => ScopeDef::AdtSelfType(it.into()),\n                 resolver::ScopeDef::GenericParam(idx) => {\n-                    let parent = self.resolver.generic_def().unwrap().into();\n+                    let parent = self.resolver.generic_def().unwrap();\n                     ScopeDef::GenericParam(GenericParam { parent, idx })\n                 }\n                 resolver::ScopeDef::Local(pat_id) => {"}, {"sha": "1e05ac3f2326646ac0dbf689d3417bf11d786d74", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f39c5794ec2521e9bb4c108771a1644269859ab/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f39c5794ec2521e9bb4c108771a1644269859ab/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=5f39c5794ec2521e9bb4c108771a1644269859ab", "patch": "@@ -21,8 +21,8 @@ use hir_def::{generics::GenericParams, AdtId, GenericDefId};\n use ra_db::{impl_intern_key, salsa};\n \n use crate::{\n-    db::HirDatabase, expr::ExprId, util::make_mut_slice, Adt, Crate, DefWithBody, FloatTy,\n-    GenericDef, IntTy, Mutability, Name, Trait, TypeAlias, Uncertain,\n+    db::HirDatabase, expr::ExprId, util::make_mut_slice, Adt, Crate, DefWithBody, FloatTy, IntTy,\n+    Mutability, Name, Trait, TypeAlias, Uncertain,\n };\n use display::{HirDisplay, HirFormatter};\n \n@@ -356,9 +356,9 @@ impl Substs {\n         )\n     }\n \n-    pub fn build_for_def(db: &impl HirDatabase, def: impl Into<GenericDef>) -> SubstsBuilder {\n+    pub fn build_for_def(db: &impl HirDatabase, def: impl Into<GenericDefId>) -> SubstsBuilder {\n         let def = def.into();\n-        let params = db.generic_params(def.into());\n+        let params = db.generic_params(def);\n         let param_count = params.count_params_including_parent();\n         Substs::builder(param_count)\n     }"}, {"sha": "6165eba4fc2fe81d91f95db8995fd69079a52cbe", "filename": "crates/ra_hir/src/ty/infer/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f39c5794ec2521e9bb4c108771a1644269859ab/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f39c5794ec2521e9bb4c108771a1644269859ab/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs?ref=5f39c5794ec2521e9bb4c108771a1644269859ab", "patch": "@@ -203,7 +203,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     Container::ImplBlock(_) => self.find_self_types(&def, ty.clone()),\n                     Container::Trait(t) => {\n                         // we're picking this method\n-                        let trait_substs = Substs::build_for_def(self.db, t)\n+                        let trait_substs = Substs::build_for_def(self.db, t.id)\n                             .push(ty.clone())\n                             .fill(std::iter::repeat_with(|| self.new_type_var()))\n                             .build();"}, {"sha": "1ceafd9b157a60ccbc62c8a5b5bdd3cf0c59df5b", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5f39c5794ec2521e9bb4c108771a1644269859ab/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f39c5794ec2521e9bb4c108771a1644269859ab/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=5f39c5794ec2521e9bb4c108771a1644269859ab", "patch": "@@ -29,8 +29,8 @@ use crate::{\n         Adt,\n     },\n     util::make_mut_slice,\n-    Const, Enum, EnumVariant, Function, GenericDef, ImplBlock, ModuleDef, Path, Static, Struct,\n-    Trait, TypeAlias, Union,\n+    Const, Enum, EnumVariant, Function, ImplBlock, ModuleDef, Path, Static, Struct, Trait,\n+    TypeAlias, Union,\n };\n \n // FIXME: this is only really used in `type_for_def`, which contains a bunch of\n@@ -261,8 +261,10 @@ impl Ty {\n         let traits = traits_from_env.flat_map(|t| t.all_super_traits(db));\n         for t in traits {\n             if let Some(associated_ty) = t.associated_type_by_name(db, &segment.name) {\n-                let substs =\n-                    Substs::build_for_def(db, t).push(self_ty.clone()).fill_with_unknown().build();\n+                let substs = Substs::build_for_def(db, t.id)\n+                    .push(self_ty.clone())\n+                    .fill_with_unknown()\n+                    .build();\n                 // FIXME handle type parameters on the segment\n                 return Ty::Projection(ProjectionTy { associated_ty, parameters: substs });\n             }\n@@ -287,11 +289,11 @@ impl Ty {\n         segment: &PathSegment,\n         resolved: TypableDef,\n     ) -> Substs {\n-        let def_generic: Option<GenericDef> = match resolved {\n-            TypableDef::Function(func) => Some(func.into()),\n+        let def_generic: Option<GenericDefId> = match resolved {\n+            TypableDef::Function(func) => Some(func.id.into()),\n             TypableDef::Adt(adt) => Some(adt.into()),\n-            TypableDef::EnumVariant(var) => Some(var.parent_enum(db).into()),\n-            TypableDef::TypeAlias(t) => Some(t.into()),\n+            TypableDef::EnumVariant(var) => Some(var.parent_enum(db).id.into()),\n+            TypableDef::TypeAlias(t) => Some(t.id.into()),\n             TypableDef::Const(_) | TypableDef::Static(_) | TypableDef::BuiltinType(_) => None,\n         };\n         substs_from_path_segment(db, resolver, segment, def_generic, false)\n@@ -338,7 +340,7 @@ pub(super) fn substs_from_path_segment(\n     db: &impl HirDatabase,\n     resolver: &Resolver,\n     segment: &PathSegment,\n-    def_generic: Option<GenericDef>,\n+    def_generic: Option<GenericDefId>,\n     add_self_param: bool,\n ) -> Substs {\n     let mut substs = Vec::new();\n@@ -376,7 +378,7 @@ pub(super) fn substs_from_path_segment(\n \n     // handle defaults\n     if let Some(def_generic) = def_generic {\n-        let default_substs = db.generic_defaults(def_generic);\n+        let default_substs = db.generic_defaults(def_generic.into());\n         assert_eq!(substs.len(), default_substs.len());\n \n         for (i, default_ty) in default_substs.iter().enumerate() {\n@@ -439,7 +441,7 @@ impl TraitRef {\n     ) -> Substs {\n         let has_self_param =\n             segment.args_and_bindings.as_ref().map(|a| a.has_self_type).unwrap_or(false);\n-        substs_from_path_segment(db, resolver, segment, Some(resolved.into()), !has_self_param)\n+        substs_from_path_segment(db, resolver, segment, Some(resolved.id.into()), !has_self_param)\n     }\n \n     pub(crate) fn for_trait(db: &impl HirDatabase, trait_: Trait) -> TraitRef {\n@@ -579,10 +581,10 @@ pub(crate) fn field_types_query(\n /// these are fine: `T: Foo<U::Item>, U: Foo<()>`.\n pub(crate) fn generic_predicates_for_param_query(\n     db: &impl HirDatabase,\n-    def: GenericDef,\n+    def: GenericDefId,\n     param_idx: u32,\n ) -> Arc<[GenericPredicate]> {\n-    let resolver = GenericDefId::from(def).resolver(db);\n+    let resolver = def.resolver(db);\n     resolver\n         .where_predicates_in_scope()\n         // we have to filter out all other predicates *first*, before attempting to lower them\n@@ -615,8 +617,8 @@ pub(crate) fn generic_predicates_query(\n }\n \n /// Resolve the default type params from generics\n-pub(crate) fn generic_defaults_query(db: &impl HirDatabase, def: GenericDef) -> Substs {\n-    let resolver = GenericDefId::from(def).resolver(db);\n+pub(crate) fn generic_defaults_query(db: &impl HirDatabase, def: GenericDefId) -> Substs {\n+    let resolver = def.resolver(db);\n     let generic_params = db.generic_params(def.into());\n \n     let defaults = generic_params"}, {"sha": "c5ab690eb9ecfa568825b60c68052a83f51a40a3", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f39c5794ec2521e9bb4c108771a1644269859ab/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f39c5794ec2521e9bb4c108771a1644269859ab/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=5f39c5794ec2521e9bb4c108771a1644269859ab", "patch": "@@ -365,7 +365,7 @@ fn generic_implements_goal(\n     self_ty: Canonical<Ty>,\n ) -> Canonical<InEnvironment<super::Obligation>> {\n     let num_vars = self_ty.num_vars;\n-    let substs = super::Substs::build_for_def(db, trait_)\n+    let substs = super::Substs::build_for_def(db, trait_.id)\n         .push(self_ty.value)\n         .fill_with_bound_vars(num_vars as u32)\n         .build();"}, {"sha": "0272dd9aeff5a18bef1f66d2f5a92e0203209f30", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f39c5794ec2521e9bb4c108771a1644269859ab/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f39c5794ec2521e9bb4c108771a1644269859ab/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=5f39c5794ec2521e9bb4c108771a1644269859ab", "patch": "@@ -736,7 +736,7 @@ fn closure_fn_trait_impl_datum(\n \n     let trait_ref = TraitRef {\n         trait_,\n-        substs: Substs::build_for_def(db, trait_).push(self_ty).push(arg_ty).build(),\n+        substs: Substs::build_for_def(db, trait_.id).push(self_ty).push(arg_ty).build(),\n     };\n \n     let output_ty_id = AssocTyValue::ClosureFnTraitImplOutput(data.clone()).to_chalk(db);"}, {"sha": "85b053a6ee3a3b66f0e797e3f800c1e4fc3482dd", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f39c5794ec2521e9bb4c108771a1644269859ab/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f39c5794ec2521e9bb4c108771a1644269859ab/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=5f39c5794ec2521e9bb4c108771a1644269859ab", "patch": "@@ -292,7 +292,7 @@ fn is_deprecated(node: impl HasAttrs, db: &impl HirDatabase) -> bool {\n }\n \n fn has_non_default_type_params(def: hir::GenericDef, db: &db::RootDatabase) -> bool {\n-    let subst = db.generic_defaults(def);\n+    let subst = db.generic_defaults(def.into());\n     subst.iter().any(|ty| ty == &Ty::Unknown)\n }\n "}]}