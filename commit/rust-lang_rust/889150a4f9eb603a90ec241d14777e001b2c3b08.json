{"sha": "889150a4f9eb603a90ec241d14777e001b2c3b08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4OTE1MGE0ZjllYjYwM2E5MGVjMjQxZDE0Nzc3ZTAwMWIyYzNiMDg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-25T16:35:05Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-25T16:35:13Z"}, "message": "Implement binop eq and ne for fat ptr's", "tree": {"sha": "1384fd8c67f623ef14902510b9b161c5bdca3b4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1384fd8c67f623ef14902510b9b161c5bdca3b4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/889150a4f9eb603a90ec241d14777e001b2c3b08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/889150a4f9eb603a90ec241d14777e001b2c3b08", "html_url": "https://github.com/rust-lang/rust/commit/889150a4f9eb603a90ec241d14777e001b2c3b08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/889150a4f9eb603a90ec241d14777e001b2c3b08/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b11cb572dcf2a2868e977e1b2521df7cf5edbe5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b11cb572dcf2a2868e977e1b2521df7cf5edbe5e", "html_url": "https://github.com/rust-lang/rust/commit/b11cb572dcf2a2868e977e1b2521df7cf5edbe5e"}], "stats": {"total": 129, "additions": 36, "deletions": 93}, "files": [{"sha": "9b272a8f34b61265fbc4363c8cb710e28d1adf46", "filename": "0004-Disable-future-and-task-modules-because-they-contain.patch", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b11cb572dcf2a2868e977e1b2521df7cf5edbe5e/0004-Disable-future-and-task-modules-because-they-contain.patch", "raw_url": "https://github.com/rust-lang/rust/raw/b11cb572dcf2a2868e977e1b2521df7cf5edbe5e/0004-Disable-future-and-task-modules-because-they-contain.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0004-Disable-future-and-task-modules-because-they-contain.patch?ref=b11cb572dcf2a2868e977e1b2521df7cf5edbe5e", "patch": "@@ -1,68 +0,0 @@\n-From 8838226899913c8636fa00f4dfbc7497c685abc5 Mon Sep 17 00:00:00 2001\n-From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Thu, 20 Sep 2018 18:16:25 +0200\n-Subject: [PATCH] Disable future and task modules, because they contain unsized\n- types\n-\n----\n- src/libcore/lib.rs    | 4 +++-\n- src/libcore/option.rs | 4 +++-\n- 2 files changed, 6 insertions(+), 2 deletions(-)\n-\n-diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n-index 09f5035..f129254 100644\n---- a/src/libcore/lib.rs\n-+++ b/src/libcore/lib.rs\n-@@ -194,7 +194,7 @@ pub mod cell;\n- pub mod char;\n- pub mod panic;\n- pub mod panicking;\n--pub mod pin;\n-+//pub mod pin;\n- pub mod iter;\n- pub mod option;\n- pub mod raw;\n-@@ -209,9 +209,11 @@ pub mod time;\n- \n- pub mod unicode;\n- \n-+/*\n- /* Async */\n- pub mod future;\n- pub mod task;\n-+*/\n- \n- /* Heap memory allocator trait */\n- #[allow(missing_docs)]\n-diff --git a/src/libcore/option.rs b/src/libcore/option.rs\n-index 58bf6be..902d38f 100644\n---- a/src/libcore/option.rs\n-+++ b/src/libcore/option.rs\n-@@ -147,7 +147,7 @@\n- \n- use iter::{FromIterator, FusedIterator, TrustedLen};\n- use {hint, mem, ops::{self, Deref}};\n--use pin::Pin;\n-+//use pin::Pin;\n- \n- // Note that this is not a lang item per se, but it has a hidden dependency on\n- // `Iterator`, which is one. The compiler assumes that the `next` method of\n-@@ -271,6 +271,7 @@ impl<T> Option<T> {\n-     }\n- \n- \n-+    /*\n-     /// Converts from `Pin<&Option<T>>` to `Option<Pin<&T>>`\n-     #[inline]\n-     #[unstable(feature = \"pin\", issue = \"49150\")]\n-@@ -288,6 +289,7 @@ impl<T> Option<T> {\n-             Pin::get_mut_unchecked(self).as_mut().map(|x| Pin::new_unchecked(x))\n-         }\n-     }\n-+    */\n- \n-     /////////////////////////////////////////////////////////////////////////\n-     // Getting to contained values\n--- \n-2.11.0\n-"}, {"sha": "25bae13ff30b37f505d6872dc2a034c75362ac95", "filename": "0004-Disable-some-more-unsupported-stuff-in-libcore.patch", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/889150a4f9eb603a90ec241d14777e001b2c3b08/0004-Disable-some-more-unsupported-stuff-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/889150a4f9eb603a90ec241d14777e001b2c3b08/0004-Disable-some-more-unsupported-stuff-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0004-Disable-some-more-unsupported-stuff-in-libcore.patch?ref=889150a4f9eb603a90ec241d14777e001b2c3b08", "previous_filename": "0005-Disable-some-more-unsupported-stuff-in-libcore.patch"}, {"sha": "590f6d6326476437771b70e775e5ab0cf88e39cd", "filename": "src/base.rs", "status": "modified", "additions": 36, "deletions": 25, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/889150a4f9eb603a90ec241d14777e001b2c3b08/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889150a4f9eb603a90ec241d14777e001b2c3b08/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=889150a4f9eb603a90ec241d14777e001b2c3b08", "patch": "@@ -968,38 +968,49 @@ fn trans_ptr_binop<'a, 'tcx: 'a>(\n     bin_op: BinOp,\n     lhs: CValue<'tcx>,\n     rhs: CValue<'tcx>,\n-    ty: Ty<'tcx>,\n+    ret_ty: Ty<'tcx>,\n ) -> CValue<'tcx> {\n     match lhs.layout().ty.sty {\n         ty::RawPtr(TypeAndMut { ty, mutbl: _ }) => {\n-            if !ty.is_sized(fx.tcx.at(DUMMY_SP), ParamEnv::reveal_all()) {\n-                unimpl!(\"Unsized values are not yet implemented\");\n+            if ty.is_sized(fx.tcx.at(DUMMY_SP), ParamEnv::reveal_all()) {\n+                binop_match! {\n+                    fx, bin_op, false, lhs, rhs, ret_ty, \"ptr\";\n+                    Add (_) bug;\n+                    Sub (_) bug;\n+                    Mul (_) bug;\n+                    Div (_) bug;\n+                    Rem (_) bug;\n+                    BitXor (_) bug;\n+                    BitAnd (_) bug;\n+                    BitOr (_) bug;\n+                    Shl (_) bug;\n+                    Shr (_) bug;\n+\n+                    Eq (_) icmp(Equal);\n+                    Lt (_) icmp(UnsignedLessThan);\n+                    Le (_) icmp(UnsignedLessThanOrEqual);\n+                    Ne (_) icmp(NotEqual);\n+                    Ge (_) icmp(UnsignedGreaterThanOrEqual);\n+                    Gt (_) icmp(UnsignedGreaterThan);\n+\n+                    Offset (_) iadd;\n+                }\n+            } else {\n+                let lhs = lhs.load_value_pair(fx).0;\n+                let rhs = rhs.load_value_pair(fx).0;\n+                let res = match bin_op {\n+                    BinOp::Eq => fx.bcx.ins().icmp(IntCC::Equal, lhs, rhs),\n+                    BinOp::Ne => fx.bcx.ins().icmp(IntCC::NotEqual, lhs, rhs),\n+                    _ => unimplemented!(\"trans_ptr_binop({:?}, <fat ptr>, <fat ptr>) not implemented\", bin_op),\n+                };\n+\n+                assert_eq!(fx.tcx.types.bool, ret_ty);\n+                let ret_layout = fx.layout_of(ret_ty);\n+                CValue::ByVal(fx.bcx.ins().bint(types::I8, res), ret_layout)\n             }\n         }\n         _ => bug!(\"trans_ptr_binop on non ptr\"),\n     }\n-    binop_match! {\n-        fx, bin_op, false, lhs, rhs, ty, \"ptr\";\n-        Add (_) bug;\n-        Sub (_) bug;\n-        Mul (_) bug;\n-        Div (_) bug;\n-        Rem (_) bug;\n-        BitXor (_) bug;\n-        BitAnd (_) bug;\n-        BitOr (_) bug;\n-        Shl (_) bug;\n-        Shr (_) bug;\n-\n-        Eq (_) icmp(Equal);\n-        Lt (_) icmp(UnsignedLessThan);\n-        Le (_) icmp(UnsignedLessThanOrEqual);\n-        Ne (_) icmp(NotEqual);\n-        Ge (_) icmp(UnsignedGreaterThanOrEqual);\n-        Gt (_) icmp(UnsignedGreaterThan);\n-\n-        Offset (_) iadd;\n-    }\n }\n \n pub fn trans_place<'a, 'tcx: 'a>("}]}