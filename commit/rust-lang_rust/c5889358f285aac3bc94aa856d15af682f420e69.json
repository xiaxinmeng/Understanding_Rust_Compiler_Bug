{"sha": "c5889358f285aac3bc94aa856d15af682f420e69", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ODg5MzU4ZjI4NWFhYzNiYzk0YWE4NTZkMTVhZjY4MmY0MjBlNjk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-23T06:41:04Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-24T18:34:11Z"}, "message": "Address comments", "tree": {"sha": "9141207835c83f98e2cc87774709dd9a7a9e25cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9141207835c83f98e2cc87774709dd9a7a9e25cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5889358f285aac3bc94aa856d15af682f420e69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5889358f285aac3bc94aa856d15af682f420e69", "html_url": "https://github.com/rust-lang/rust/commit/c5889358f285aac3bc94aa856d15af682f420e69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5889358f285aac3bc94aa856d15af682f420e69/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "522a9785e4866d7f6872f7d6c262ddcfc425a1f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/522a9785e4866d7f6872f7d6c262ddcfc425a1f3", "html_url": "https://github.com/rust-lang/rust/commit/522a9785e4866d7f6872f7d6c262ddcfc425a1f3"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "879a2d740cb0b2b5a928095c664531646a30d62b", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c5889358f285aac3bc94aa856d15af682f420e69/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5889358f285aac3bc94aa856d15af682f420e69/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=c5889358f285aac3bc94aa856d15af682f420e69", "patch": "@@ -37,7 +37,7 @@ match foo {\n a wildcard arm above a more specific arm will make the latter arm irrelevant.\n \n Ensure the ordering of the match arm is correct and remove any superfluous\n-checks.\n+arms.\n \"##,\n \n E0002: r##\"\n@@ -81,8 +81,8 @@ match number {\n }\n ```\n \n-To match against NaN values, you should\n-instead use the `is_nan()` method in a guard, like so:\n+To match against NaN values, you should instead use the `is_nan()` method in a\n+guard, like so:\n \n ```\n match number {\n@@ -333,8 +333,8 @@ Statics are shared everywhere, and if they refer to mutable data one might\n violate memory safety since holding multiple mutable references to shared data\n is not allowed.\n \n-If you really want global mutable state, try using a global `UnsafeCell` or\n-`static mut`.\n+If you really want global mutable state, try using `static mut` or a global\n+`UnsafeCell`.\n \n \"##,\n \n@@ -416,7 +416,7 @@ is bad because the function body may not mutate `x`.\n \n Remove any mutable bindings from the argument list to fix this error. In case\n you need to mutate the argument, try lazily initializing a global variable\n-instead of using a const fn, or refactoring the code to a functional style to\n+instead of using a `const fn`, or refactoring the code to a functional style to\n avoid mutation if possible.\n \"##,\n \n@@ -444,11 +444,11 @@ requirements are satisfied by the trait in question.\n \n Trait objects are a form of dynamic dispatch and use a dynamically sized type\n for the inner type. So, for a given trait `Trait`, when `Trait` is treated as a\n-type, as in `Box<Trait>`, the inner type is \"unsized\". In such cases the boxed\n-pointer is a \"fat pointer\" that contains an extra pointer to a table of methods\n+type, as in `Box<Trait>`, the inner type is 'unsized'. In such cases the boxed\n+pointer is a 'fat pointer' that contains an extra pointer to a table of methods\n (among other things) for dynamic dispatch. This design mandates some\n restrictions on the types of traits that are allowed to be used in trait\n-objects, which are collectively termed as \"object safety\" rules.\n+objects, which are collectively termed as 'object safety' rules.\n \n Attempting to create a trait object for a non object-safe trait will trigger\n this error.\n@@ -513,7 +513,7 @@ fn call_foo(x: Box<Trait>) {\n If only some methods aren't object-safe, you can add a `where Self: Sized` bound\n on them to mark them as explicitly unavailable to trait objects. The\n functionality will still be available to all other implementers, including\n-`Box<Trait>` which is itself sized (assuming you `impl Trait for Box<Trait>`)\n+`Box<Trait>` which is itself sized (assuming you `impl Trait for Box<Trait>`).\n \n ```\n trait Trait {\n@@ -530,7 +530,7 @@ that trait that aren't behind trait objects.\n ### Method has generic type parameters\n \n As mentioned before, trait objects contain pointers to method tables. So, if we\n-have\n+have:\n \n ```\n trait Trait {\n@@ -549,7 +549,7 @@ impl Trait for u8 {\n // ...\n ```\n \n-at compile time each implementation of `Trait` will produce a table containing\n+At compile time each implementation of `Trait` will produce a table containing\n the various methods (and other items) related to the implementation.\n \n This works fine, but when the method gains generic parameters, we can have a\n@@ -578,7 +578,7 @@ that implements the trait. Now, if it has type parameters, we need to add\n implementations for every type that implements the trait, and there could\n theoretically be an infinite number of types.\n \n-For example, with\n+For example, with:\n \n ```\n trait Trait {\n@@ -598,7 +598,7 @@ impl Trait for u8 {\n // 8 more implementations\n ```\n \n-Now, if I have the following code:\n+Now, if we have the following code:\n \n ```\n fn call_foo(thing: Box<Trait>) {\n@@ -647,7 +647,6 @@ an implementation.\n \n Adding a `Self: Sized` bound to these methods will generally make this compile.\n \n-\n ```\n trait Foo {\n     fn foo() -> u8 where Self: Sized;\n@@ -752,7 +751,8 @@ https://doc.rust-lang.org/reference.html#ffi-attributes\n \"##,\n \n E0109: r##\"\n-You tried to give a type parameter to a type which doesn't need it; for example:\n+You tried to give a type parameter to a type which doesn't need it. Erroneous\n+code example:\n \n ```\n type X = u32<i32>; // error: type parameters are not allowed on this type\n@@ -769,8 +769,8 @@ type X = u32; // this compiles\n \"##,\n \n E0110: r##\"\n-You tried to give a lifetime parameter to a type which doesn't need it; for\n-example:\n+You tried to give a lifetime parameter to a type which doesn't need it.\n+Erroneous code example:\n \n ```\n type X = u32<'static>; // error: lifetime parameters are not allowed on\n@@ -882,6 +882,14 @@ fn foo<T: MyTransmutableType>(x: Vec<T>) {\n Each impl will be checked for a size match in the transmute as usual, and since\n there are no unbound type parameters involved, this should compile unless there\n is a size mismatch in one of the impls.\n+\n+It is also possible to manually transmute:\n+\n+```\n+let result: SomeType = mem::uninitialized();\n+unsafe { copy_nonoverlapping(&v, &result) };\n+result // `v` transmuted to type `SomeType`\n+```\n \"##,\n \n E0152: r##\"\n@@ -1157,7 +1165,7 @@ returning an appropriate value or panicking if necessary.\n \n E0270: r##\"\n Rust lets you define functions which are known to never return, i.e. are\n-\"diverging\", by marking its return type as `!`.\n+'diverging', by marking its return type as `!`.\n \n For example, the following functions never return:\n \n@@ -1416,7 +1424,7 @@ add one of the same name as a type parameter. If you intended to use literal\n braces, use `{{` and `}}` to escape them.\n \"##,\n \n-E0273: r##\"\n+E0274: r##\"\n The `#[rustc_on_unimplemented]` attribute lets you specify a custom error\n message for when a particular trait isn't implemented on a type placed in a\n position that needs that trait. For example, when the following code is"}]}