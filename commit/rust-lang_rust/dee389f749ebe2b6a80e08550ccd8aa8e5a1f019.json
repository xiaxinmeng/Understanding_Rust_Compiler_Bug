{"sha": "dee389f749ebe2b6a80e08550ccd8aa8e5a1f019", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZTM4OWY3NDllYmUyYjZhODBlMDg1NTBjY2Q4YWE4ZTVhMWYwMTk=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-01-31T03:36:37Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-28T15:29:09Z"}, "message": "Run module lint passes in parallel", "tree": {"sha": "9213e23a7bb77fb25d045ce0f4d761deed02f668", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9213e23a7bb77fb25d045ce0f4d761deed02f668"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dee389f749ebe2b6a80e08550ccd8aa8e5a1f019", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dee389f749ebe2b6a80e08550ccd8aa8e5a1f019", "html_url": "https://github.com/rust-lang/rust/commit/dee389f749ebe2b6a80e08550ccd8aa8e5a1f019", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dee389f749ebe2b6a80e08550ccd8aa8e5a1f019/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd32f9bccaaf021a3327fc28df3401dc32a644e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd32f9bccaaf021a3327fc28df3401dc32a644e1", "html_url": "https://github.com/rust-lang/rust/commit/cd32f9bccaaf021a3327fc28df3401dc32a644e1"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "e5eafd768bb0b5d5abdffa7a11512eaa3a0e70a6", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dee389f749ebe2b6a80e08550ccd8aa8e5a1f019/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee389f749ebe2b6a80e08550ccd8aa8e5a1f019/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=dee389f749ebe2b6a80e08550ccd8aa8e5a1f019", "patch": "@@ -17,7 +17,7 @@\n use self::TargetLint::*;\n \n use std::slice;\n-use rustc_data_structures::sync::{ReadGuard, Lock, join};\n+use rustc_data_structures::sync::{ReadGuard, Lock, ParallelIterator, join, par_iter};\n use crate::lint::{EarlyLintPass, LateLintPass, EarlyLintPassObject, LateLintPassObject};\n use crate::lint::{LintArray, Level, Lint, LintId, LintPass, LintBuffer};\n use crate::lint::builtin::BuiltinLintDiagnostics;\n@@ -56,7 +56,7 @@ pub struct LintStore {\n     pre_expansion_passes: Option<Vec<EarlyLintPassObject>>,\n     early_passes: Option<Vec<EarlyLintPassObject>>,\n     late_passes: Lock<Option<Vec<LateLintPassObject>>>,\n-    late_module_passes: Lock<Option<Vec<LateLintPassObject>>>,\n+    late_module_passes: Vec<LateLintPassObject>,\n \n     /// Lints indexed by name.\n     by_name: FxHashMap<String, TargetLint>,\n@@ -144,7 +144,7 @@ impl LintStore {\n             pre_expansion_passes: Some(vec![]),\n             early_passes: Some(vec![]),\n             late_passes: Lock::new(Some(vec![])),\n-            late_module_passes: Lock::new(Some(vec![])),\n+            late_module_passes: vec![],\n             by_name: Default::default(),\n             future_incompatible: Default::default(),\n             lint_groups: Default::default(),\n@@ -200,7 +200,7 @@ impl LintStore {\n         self.push_pass(sess, from_plugin, &pass);\n         if !register_only {\n             if per_module {\n-                self.late_module_passes.lock().as_mut().unwrap().push(pass);\n+                self.late_module_passes.push(pass);\n             } else {\n                 self.late_passes.lock().as_mut().unwrap().push(pass);\n             }\n@@ -1277,14 +1277,12 @@ pub fn late_lint_mod<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n \n     late_lint_mod_pass(tcx, module_def_id, builtin_lints);\n \n-    let mut passes = tcx.sess.lint_store.borrow().late_module_passes.lock().take().unwrap();\n+    let mut passes: Vec<_> = tcx.sess.lint_store.borrow().late_module_passes\n+                                .iter().map(|pass| pass.fresh_late_pass()).collect();\n \n     if !passes.is_empty() {\n         late_lint_mod_pass(tcx, module_def_id, LateLintPassObjects { lints: &mut passes[..] });\n     }\n-\n-    // Put the passes back in the session.\n-    *tcx.sess.lint_store.borrow().late_module_passes.lock() = Some(passes);\n }\n \n fn late_lint_pass_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n@@ -1342,16 +1340,14 @@ fn late_lint_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n             });\n         }\n \n-        let mut passes = tcx.sess.lint_store.borrow().late_module_passes.lock().take().unwrap();\n+        let mut passes: Vec<_> = tcx.sess.lint_store.borrow().late_module_passes\n+                                    .iter().map(|pass| pass.fresh_late_pass()).collect();\n \n         for pass in &mut passes {\n             time(tcx.sess, &format!(\"running late module lint: {}\", pass.name()), || {\n                 late_lint_pass_crate(tcx, LateLintPassObjects { lints: slice::from_mut(pass) });\n             });\n         }\n-\n-        // Put the passes back in the session.\n-        *tcx.sess.lint_store.borrow().late_module_passes.lock() = Some(passes);\n     }\n \n     // Put the passes back in the session.\n@@ -1371,9 +1367,9 @@ pub fn check_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n     }, || {\n         time(tcx.sess, \"module lints\", || {\n             // Run per-module lints\n-            for &module in tcx.hir().krate().modules.keys() {\n+            par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {\n                 tcx.ensure().lint_mod(tcx.hir().local_def_id(module));\n-            }\n+            });\n         });\n     });\n }"}, {"sha": "a5506bb8f59f4b442e479a3dc85856e5f39a3a28", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dee389f749ebe2b6a80e08550ccd8aa8e5a1f019/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee389f749ebe2b6a80e08550ccd8aa8e5a1f019/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=dee389f749ebe2b6a80e08550ccd8aa8e5a1f019", "patch": "@@ -273,6 +273,9 @@ macro_rules! expand_lint_pass_methods {\n macro_rules! declare_late_lint_pass {\n     ([], [$hir:tt], [$($methods:tt)*]) => (\n         pub trait LateLintPass<'a, $hir>: LintPass {\n+            fn fresh_late_pass(&self) -> LateLintPassObject {\n+                panic!()\n+            }\n             expand_lint_pass_methods!(&LateContext<'a, $hir>, [$($methods)*]);\n         }\n     )"}]}