{"sha": "627bc60702395b0527c4c89888ad2eabfa3e3fd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyN2JjNjA3MDIzOTViMDUyN2M0Yzg5ODg4YWQyZWFiZmEzZTNmZDQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-08-18T17:54:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-18T17:54:56Z"}, "message": "Rollup merge of #88012 - sunfishcode:sunfishcode/wasi-raw-fd-c-int, r=alexcrichton\n\nChange WASI's `RawFd` from `u32` to `c_int` (`i32`).\n\nWASI previously used `u32` as its `RawFd` type, since its \"file descriptors\"\nare unsigned table indices, and there's no fundamental reason why WASI can't\nhave more than 2^31 handles.\n\nHowever, this creates myriad little incompability problems with code\nthat also supports Unix platforms, where `RawFd` is `c_int`. While WASI\nisn't a Unix, it often shares code with Unix, and this difference made\nsuch shared code inconvenient. #87329 is the most recent example of such\ncode.\n\nSo, switch WASI to use `c_int`, which is `i32`. This will mean that code\nintending to support WASI should ideally avoid assuming that negative file\ndescriptors are invalid, even though POSIX itself says that file descriptors\nare never negative.\n\nThis is a breaking change, but `RawFd` is considerd an experimental\nfeature in [the documentation].\n\n[the documentation]: https://doc.rust-lang.org/stable/std/os/wasi/io/type.RawFd.html\n\nr? `@alexcrichton`", "tree": {"sha": "f1a4d6d0180d59f4d8376059f8e8a4c47bbbe39c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1a4d6d0180d59f4d8376059f8e8a4c47bbbe39c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/627bc60702395b0527c4c89888ad2eabfa3e3fd4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhHUlwCRBK7hj4Ov3rIwAAj08IADvf+wiWzUwfyHaxHc6XvRRT\niUTkRyeItSApti+9i5PhtAKriQ7x+5HGah/UTIai0SyKIJmhs8RIP6fTD7SyJbs1\nezsqbb03b5PQg8SYwwok2Jg8IkFSOV6tb08B7W3EsiROQHDLaYp/ysQ4WWBylS5m\na5gyQHFPqN8j3l0gPOT5Jjprh90B2H02V9XI4js3CBtnCh0zsv6uRaVmT/7aS/CP\nUwJy0n5Abehez4U2h/h8S30qXo/7tfoobP1FUZbqUz8XakzWDUXRHvSPn0Bq41FH\n2oae6qWQGj9nb69h4WoM2C8KHdSJGEHxH2qiSpbdZaEyUZTs/vhKysGyXBIsw58=\n=fTlc\n-----END PGP SIGNATURE-----\n", "payload": "tree f1a4d6d0180d59f4d8376059f8e8a4c47bbbe39c\nparent 7449c6edf93d8d68cdaf48252e219c015e42c97e\nparent 35de5c9b35be9feef992c3d03ed95a7176a15726\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1629309296 +0200\ncommitter GitHub <noreply@github.com> 1629309296 +0200\n\nRollup merge of #88012 - sunfishcode:sunfishcode/wasi-raw-fd-c-int, r=alexcrichton\n\nChange WASI's `RawFd` from `u32` to `c_int` (`i32`).\n\nWASI previously used `u32` as its `RawFd` type, since its \"file descriptors\"\nare unsigned table indices, and there's no fundamental reason why WASI can't\nhave more than 2^31 handles.\n\nHowever, this creates myriad little incompability problems with code\nthat also supports Unix platforms, where `RawFd` is `c_int`. While WASI\nisn't a Unix, it often shares code with Unix, and this difference made\nsuch shared code inconvenient. #87329 is the most recent example of such\ncode.\n\nSo, switch WASI to use `c_int`, which is `i32`. This will mean that code\nintending to support WASI should ideally avoid assuming that negative file\ndescriptors are invalid, even though POSIX itself says that file descriptors\nare never negative.\n\nThis is a breaking change, but `RawFd` is considerd an experimental\nfeature in [the documentation].\n\n[the documentation]: https://doc.rust-lang.org/stable/std/os/wasi/io/type.RawFd.html\n\nr? `@alexcrichton`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/627bc60702395b0527c4c89888ad2eabfa3e3fd4", "html_url": "https://github.com/rust-lang/rust/commit/627bc60702395b0527c4c89888ad2eabfa3e3fd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/627bc60702395b0527c4c89888ad2eabfa3e3fd4/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7449c6edf93d8d68cdaf48252e219c015e42c97e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7449c6edf93d8d68cdaf48252e219c015e42c97e", "html_url": "https://github.com/rust-lang/rust/commit/7449c6edf93d8d68cdaf48252e219c015e42c97e"}, {"sha": "35de5c9b35be9feef992c3d03ed95a7176a15726", "url": "https://api.github.com/repos/rust-lang/rust/commits/35de5c9b35be9feef992c3d03ed95a7176a15726", "html_url": "https://github.com/rust-lang/rust/commit/35de5c9b35be9feef992c3d03ed95a7176a15726"}], "stats": {"total": 137, "additions": 83, "deletions": 54}, "files": [{"sha": "b6bc74da8e7b5b5dc0f525747df6676eb41badb8", "filename": "library/std/src/os/wasi/io.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/627bc60702395b0527c4c89888ad2eabfa3e3fd4/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/627bc60702395b0527c4c89888ad2eabfa3e3fd4/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio.rs?ref=627bc60702395b0527c4c89888ad2eabfa3e3fd4", "patch": "@@ -6,11 +6,18 @@\n use crate::fs;\n use crate::io;\n use crate::net;\n+use crate::os::raw;\n use crate::sys;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n \n /// Raw file descriptors.\n-pub type RawFd = u32;\n+///\n+/// This has type `c_int` to ease compatibility with code that also compiles on\n+/// Unix configurations, however unlike Unix and POSIX, in WASI negative file\n+/// descriptors are valid. Only `-1` is reserved for indicating errors. Code\n+/// intending to be portable across Unix platforms and WASI should avoid\n+/// assuming that negative file descriptors are invalid.\n+pub type RawFd = raw::c_int;\n \n /// A trait to extract the raw WASI file descriptor from an underlying\n /// object.\n@@ -161,41 +168,41 @@ impl IntoRawFd for fs::File {\n impl AsRawFd for io::Stdin {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n-        libc::STDIN_FILENO as RawFd\n+        libc::STDIN_FILENO\n     }\n }\n \n impl AsRawFd for io::Stdout {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n-        libc::STDOUT_FILENO as RawFd\n+        libc::STDOUT_FILENO\n     }\n }\n \n impl AsRawFd for io::Stderr {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n-        libc::STDERR_FILENO as RawFd\n+        libc::STDERR_FILENO\n     }\n }\n \n impl<'a> AsRawFd for io::StdinLock<'a> {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n-        libc::STDIN_FILENO as RawFd\n+        libc::STDIN_FILENO\n     }\n }\n \n impl<'a> AsRawFd for io::StdoutLock<'a> {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n-        libc::STDOUT_FILENO as RawFd\n+        libc::STDOUT_FILENO\n     }\n }\n \n impl<'a> AsRawFd for io::StderrLock<'a> {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n-        libc::STDERR_FILENO as RawFd\n+        libc::STDERR_FILENO\n     }\n }"}, {"sha": "1f6ea8d6e8df3d9ad2ed1c53cba034fd63ff25f6", "filename": "library/std/src/sys/wasi/fd.rs", "status": "modified", "additions": 54, "deletions": 35, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/627bc60702395b0527c4c89888ad2eabfa3e3fd4/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/627bc60702395b0527c4c89888ad2eabfa3e3fd4/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs?ref=627bc60702395b0527c4c89888ad2eabfa3e3fd4", "patch": "@@ -5,10 +5,11 @@ use super::err2io;\n use crate::io::{self, IoSlice, IoSliceMut, SeekFrom};\n use crate::mem;\n use crate::net::Shutdown;\n+use crate::os::raw::c_int;\n \n #[derive(Debug)]\n pub struct WasiFd {\n-    fd: wasi::Fd,\n+    fd: c_int,\n }\n \n fn iovec<'a>(a: &'a mut [IoSliceMut<'_>]) -> &'a [wasi::Iovec] {\n@@ -26,38 +27,38 @@ fn ciovec<'a>(a: &'a [IoSlice<'_>]) -> &'a [wasi::Ciovec] {\n }\n \n impl WasiFd {\n-    pub unsafe fn from_raw(fd: wasi::Fd) -> WasiFd {\n+    pub unsafe fn from_raw(fd: c_int) -> WasiFd {\n         WasiFd { fd }\n     }\n \n-    pub fn into_raw(self) -> wasi::Fd {\n+    pub fn into_raw(self) -> c_int {\n         let ret = self.fd;\n         mem::forget(self);\n         ret\n     }\n \n-    pub fn as_raw(&self) -> wasi::Fd {\n+    pub fn as_raw(&self) -> c_int {\n         self.fd\n     }\n \n     pub fn datasync(&self) -> io::Result<()> {\n-        unsafe { wasi::fd_datasync(self.fd).map_err(err2io) }\n+        unsafe { wasi::fd_datasync(self.fd as wasi::Fd).map_err(err2io) }\n     }\n \n     pub fn pread(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize> {\n-        unsafe { wasi::fd_pread(self.fd, iovec(bufs), offset).map_err(err2io) }\n+        unsafe { wasi::fd_pread(self.fd as wasi::Fd, iovec(bufs), offset).map_err(err2io) }\n     }\n \n     pub fn pwrite(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize> {\n-        unsafe { wasi::fd_pwrite(self.fd, ciovec(bufs), offset).map_err(err2io) }\n+        unsafe { wasi::fd_pwrite(self.fd as wasi::Fd, ciovec(bufs), offset).map_err(err2io) }\n     }\n \n     pub fn read(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        unsafe { wasi::fd_read(self.fd, iovec(bufs)).map_err(err2io) }\n+        unsafe { wasi::fd_read(self.fd as wasi::Fd, iovec(bufs)).map_err(err2io) }\n     }\n \n     pub fn write(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n-        unsafe { wasi::fd_write(self.fd, ciovec(bufs)).map_err(err2io) }\n+        unsafe { wasi::fd_write(self.fd as wasi::Fd, ciovec(bufs)).map_err(err2io) }\n     }\n \n     pub fn seek(&self, pos: SeekFrom) -> io::Result<u64> {\n@@ -66,37 +67,37 @@ impl WasiFd {\n             SeekFrom::End(pos) => (wasi::WHENCE_END, pos),\n             SeekFrom::Current(pos) => (wasi::WHENCE_CUR, pos),\n         };\n-        unsafe { wasi::fd_seek(self.fd, offset, whence).map_err(err2io) }\n+        unsafe { wasi::fd_seek(self.fd as wasi::Fd, offset, whence).map_err(err2io) }\n     }\n \n     pub fn tell(&self) -> io::Result<u64> {\n-        unsafe { wasi::fd_tell(self.fd).map_err(err2io) }\n+        unsafe { wasi::fd_tell(self.fd as wasi::Fd).map_err(err2io) }\n     }\n \n     // FIXME: __wasi_fd_fdstat_get\n \n     pub fn set_flags(&self, flags: wasi::Fdflags) -> io::Result<()> {\n-        unsafe { wasi::fd_fdstat_set_flags(self.fd, flags).map_err(err2io) }\n+        unsafe { wasi::fd_fdstat_set_flags(self.fd as wasi::Fd, flags).map_err(err2io) }\n     }\n \n     pub fn set_rights(&self, base: wasi::Rights, inheriting: wasi::Rights) -> io::Result<()> {\n-        unsafe { wasi::fd_fdstat_set_rights(self.fd, base, inheriting).map_err(err2io) }\n+        unsafe { wasi::fd_fdstat_set_rights(self.fd as wasi::Fd, base, inheriting).map_err(err2io) }\n     }\n \n     pub fn sync(&self) -> io::Result<()> {\n-        unsafe { wasi::fd_sync(self.fd).map_err(err2io) }\n+        unsafe { wasi::fd_sync(self.fd as wasi::Fd).map_err(err2io) }\n     }\n \n     pub fn advise(&self, offset: u64, len: u64, advice: wasi::Advice) -> io::Result<()> {\n-        unsafe { wasi::fd_advise(self.fd, offset, len, advice).map_err(err2io) }\n+        unsafe { wasi::fd_advise(self.fd as wasi::Fd, offset, len, advice).map_err(err2io) }\n     }\n \n     pub fn allocate(&self, offset: u64, len: u64) -> io::Result<()> {\n-        unsafe { wasi::fd_allocate(self.fd, offset, len).map_err(err2io) }\n+        unsafe { wasi::fd_allocate(self.fd as wasi::Fd, offset, len).map_err(err2io) }\n     }\n \n     pub fn create_directory(&self, path: &str) -> io::Result<()> {\n-        unsafe { wasi::path_create_directory(self.fd, path).map_err(err2io) }\n+        unsafe { wasi::path_create_directory(self.fd as wasi::Fd, path).map_err(err2io) }\n     }\n \n     pub fn link(\n@@ -107,7 +108,14 @@ impl WasiFd {\n         new_path: &str,\n     ) -> io::Result<()> {\n         unsafe {\n-            wasi::path_link(self.fd, old_flags, old_path, new_fd.fd, new_path).map_err(err2io)\n+            wasi::path_link(\n+                self.fd as wasi::Fd,\n+                old_flags,\n+                old_path,\n+                new_fd.fd as wasi::Fd,\n+                new_path,\n+            )\n+            .map_err(err2io)\n         }\n     }\n \n@@ -122,33 +130,42 @@ impl WasiFd {\n     ) -> io::Result<WasiFd> {\n         unsafe {\n             wasi::path_open(\n-                self.fd,\n+                self.fd as wasi::Fd,\n                 dirflags,\n                 path,\n                 oflags,\n                 fs_rights_base,\n                 fs_rights_inheriting,\n                 fs_flags,\n             )\n-            .map(|fd| WasiFd::from_raw(fd))\n+            .map(|fd| WasiFd::from_raw(fd as c_int))\n             .map_err(err2io)\n         }\n     }\n \n     pub fn readdir(&self, buf: &mut [u8], cookie: wasi::Dircookie) -> io::Result<usize> {\n-        unsafe { wasi::fd_readdir(self.fd, buf.as_mut_ptr(), buf.len(), cookie).map_err(err2io) }\n+        unsafe {\n+            wasi::fd_readdir(self.fd as wasi::Fd, buf.as_mut_ptr(), buf.len(), cookie)\n+                .map_err(err2io)\n+        }\n     }\n \n     pub fn readlink(&self, path: &str, buf: &mut [u8]) -> io::Result<usize> {\n-        unsafe { wasi::path_readlink(self.fd, path, buf.as_mut_ptr(), buf.len()).map_err(err2io) }\n+        unsafe {\n+            wasi::path_readlink(self.fd as wasi::Fd, path, buf.as_mut_ptr(), buf.len())\n+                .map_err(err2io)\n+        }\n     }\n \n     pub fn rename(&self, old_path: &str, new_fd: &WasiFd, new_path: &str) -> io::Result<()> {\n-        unsafe { wasi::path_rename(self.fd, old_path, new_fd.fd, new_path).map_err(err2io) }\n+        unsafe {\n+            wasi::path_rename(self.fd as wasi::Fd, old_path, new_fd.fd as wasi::Fd, new_path)\n+                .map_err(err2io)\n+        }\n     }\n \n     pub fn filestat_get(&self) -> io::Result<wasi::Filestat> {\n-        unsafe { wasi::fd_filestat_get(self.fd).map_err(err2io) }\n+        unsafe { wasi::fd_filestat_get(self.fd as wasi::Fd).map_err(err2io) }\n     }\n \n     pub fn filestat_set_times(\n@@ -157,19 +174,21 @@ impl WasiFd {\n         mtim: wasi::Timestamp,\n         fstflags: wasi::Fstflags,\n     ) -> io::Result<()> {\n-        unsafe { wasi::fd_filestat_set_times(self.fd, atim, mtim, fstflags).map_err(err2io) }\n+        unsafe {\n+            wasi::fd_filestat_set_times(self.fd as wasi::Fd, atim, mtim, fstflags).map_err(err2io)\n+        }\n     }\n \n     pub fn filestat_set_size(&self, size: u64) -> io::Result<()> {\n-        unsafe { wasi::fd_filestat_set_size(self.fd, size).map_err(err2io) }\n+        unsafe { wasi::fd_filestat_set_size(self.fd as wasi::Fd, size).map_err(err2io) }\n     }\n \n     pub fn path_filestat_get(\n         &self,\n         flags: wasi::Lookupflags,\n         path: &str,\n     ) -> io::Result<wasi::Filestat> {\n-        unsafe { wasi::path_filestat_get(self.fd, flags, path).map_err(err2io) }\n+        unsafe { wasi::path_filestat_get(self.fd as wasi::Fd, flags, path).map_err(err2io) }\n     }\n \n     pub fn path_filestat_set_times(\n@@ -181,33 +200,33 @@ impl WasiFd {\n         fstflags: wasi::Fstflags,\n     ) -> io::Result<()> {\n         unsafe {\n-            wasi::path_filestat_set_times(self.fd, flags, path, atim, mtim, fstflags)\n+            wasi::path_filestat_set_times(self.fd as wasi::Fd, flags, path, atim, mtim, fstflags)\n                 .map_err(err2io)\n         }\n     }\n \n     pub fn symlink(&self, old_path: &str, new_path: &str) -> io::Result<()> {\n-        unsafe { wasi::path_symlink(old_path, self.fd, new_path).map_err(err2io) }\n+        unsafe { wasi::path_symlink(old_path, self.fd as wasi::Fd, new_path).map_err(err2io) }\n     }\n \n     pub fn unlink_file(&self, path: &str) -> io::Result<()> {\n-        unsafe { wasi::path_unlink_file(self.fd, path).map_err(err2io) }\n+        unsafe { wasi::path_unlink_file(self.fd as wasi::Fd, path).map_err(err2io) }\n     }\n \n     pub fn remove_directory(&self, path: &str) -> io::Result<()> {\n-        unsafe { wasi::path_remove_directory(self.fd, path).map_err(err2io) }\n+        unsafe { wasi::path_remove_directory(self.fd as wasi::Fd, path).map_err(err2io) }\n     }\n \n     pub fn sock_recv(\n         &self,\n         ri_data: &mut [IoSliceMut<'_>],\n         ri_flags: wasi::Riflags,\n     ) -> io::Result<(usize, wasi::Roflags)> {\n-        unsafe { wasi::sock_recv(self.fd, iovec(ri_data), ri_flags).map_err(err2io) }\n+        unsafe { wasi::sock_recv(self.fd as wasi::Fd, iovec(ri_data), ri_flags).map_err(err2io) }\n     }\n \n     pub fn sock_send(&self, si_data: &[IoSlice<'_>], si_flags: wasi::Siflags) -> io::Result<usize> {\n-        unsafe { wasi::sock_send(self.fd, ciovec(si_data), si_flags).map_err(err2io) }\n+        unsafe { wasi::sock_send(self.fd as wasi::Fd, ciovec(si_data), si_flags).map_err(err2io) }\n     }\n \n     pub fn sock_shutdown(&self, how: Shutdown) -> io::Result<()> {\n@@ -216,14 +235,14 @@ impl WasiFd {\n             Shutdown::Write => wasi::SDFLAGS_WR,\n             Shutdown::Both => wasi::SDFLAGS_WR | wasi::SDFLAGS_RD,\n         };\n-        unsafe { wasi::sock_shutdown(self.fd, how).map_err(err2io) }\n+        unsafe { wasi::sock_shutdown(self.fd as wasi::Fd, how).map_err(err2io) }\n     }\n }\n \n impl Drop for WasiFd {\n     fn drop(&mut self) {\n         // FIXME: can we handle the return code here even though we can't on\n         // unix?\n-        let _ = unsafe { wasi::fd_close(self.fd) };\n+        let _ = unsafe { wasi::fd_close(self.fd as wasi::Fd) };\n     }\n }"}, {"sha": "55c9c652a8bbb7cf62652ddc82915338298c34af", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/627bc60702395b0527c4c89888ad2eabfa3e3fd4/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/627bc60702395b0527c4c89888ad2eabfa3e3fd4/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=627bc60702395b0527c4c89888ad2eabfa3e3fd4", "patch": "@@ -6,6 +6,7 @@ use crate::fmt;\n use crate::io::{self, IoSlice, IoSliceMut, SeekFrom};\n use crate::iter;\n use crate::mem::{self, ManuallyDrop};\n+use crate::os::raw::c_int;\n use crate::os::wasi::ffi::{OsStrExt, OsStringExt};\n use crate::path::{Path, PathBuf};\n use crate::ptr;\n@@ -454,8 +455,8 @@ impl File {\n     }\n }\n \n-impl FromInner<u32> for File {\n-    fn from_inner(fd: u32) -> File {\n+impl FromInner<c_int> for File {\n+    fn from_inner(fd: c_int) -> File {\n         unsafe { File { fd: WasiFd::from_raw(fd) } }\n     }\n }\n@@ -653,7 +654,7 @@ fn open_parent(p: &Path) -> io::Result<(ManuallyDrop<WasiFd>, PathBuf)> {\n             let relative = CStr::from_ptr(relative_path).to_bytes().to_vec();\n \n             return Ok((\n-                ManuallyDrop::new(WasiFd::from_raw(fd as u32)),\n+                ManuallyDrop::new(WasiFd::from_raw(fd as c_int)),\n                 PathBuf::from(OsString::from_vec(relative)),\n             ));\n         }"}, {"sha": "50b7352933e57744d83fc04062895742fb9272f2", "filename": "library/std/src/sys/wasi/net.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/627bc60702395b0527c4c89888ad2eabfa3e3fd4/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/627bc60702395b0527c4c89888ad2eabfa3e3fd4/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs?ref=627bc60702395b0527c4c89888ad2eabfa3e3fd4", "patch": "@@ -5,6 +5,7 @@ use crate::convert::TryFrom;\n use crate::fmt;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n+use crate::os::raw::c_int;\n use crate::sys::unsupported;\n use crate::sys_common::FromInner;\n use crate::time::Duration;\n@@ -115,8 +116,8 @@ impl TcpStream {\n     }\n }\n \n-impl FromInner<u32> for TcpStream {\n-    fn from_inner(fd: u32) -> TcpStream {\n+impl FromInner<c_int> for TcpStream {\n+    fn from_inner(fd: c_int) -> TcpStream {\n         unsafe { TcpStream { fd: WasiFd::from_raw(fd) } }\n     }\n }\n@@ -181,8 +182,8 @@ impl TcpListener {\n     }\n }\n \n-impl FromInner<u32> for TcpListener {\n-    fn from_inner(fd: u32) -> TcpListener {\n+impl FromInner<c_int> for TcpListener {\n+    fn from_inner(fd: c_int) -> TcpListener {\n         unsafe { TcpListener { fd: WasiFd::from_raw(fd) } }\n     }\n }\n@@ -331,8 +332,8 @@ impl UdpSocket {\n     }\n }\n \n-impl FromInner<u32> for UdpSocket {\n-    fn from_inner(fd: u32) -> UdpSocket {\n+impl FromInner<c_int> for UdpSocket {\n+    fn from_inner(fd: c_int) -> UdpSocket {\n         unsafe { UdpSocket { fd: WasiFd::from_raw(fd) } }\n     }\n }"}, {"sha": "8782f333a1fa4597da17399f921d52fb1dd6925e", "filename": "library/std/src/sys/wasi/stdio.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/627bc60702395b0527c4c89888ad2eabfa3e3fd4/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/627bc60702395b0527c4c89888ad2eabfa3e3fd4/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs?ref=627bc60702395b0527c4c89888ad2eabfa3e3fd4", "patch": "@@ -3,6 +3,7 @@\n use super::fd::WasiFd;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::mem::ManuallyDrop;\n+use crate::os::raw;\n \n pub struct Stdin;\n pub struct Stdout;\n@@ -14,7 +15,7 @@ impl Stdin {\n     }\n \n     #[inline]\n-    pub fn as_raw_fd(&self) -> u32 {\n+    pub fn as_raw_fd(&self) -> raw::c_int {\n         0\n     }\n }\n@@ -40,7 +41,7 @@ impl Stdout {\n     }\n \n     #[inline]\n-    pub fn as_raw_fd(&self) -> u32 {\n+    pub fn as_raw_fd(&self) -> raw::c_int {\n         1\n     }\n }\n@@ -69,7 +70,7 @@ impl Stderr {\n     }\n \n     #[inline]\n-    pub fn as_raw_fd(&self) -> u32 {\n+    pub fn as_raw_fd(&self) -> raw::c_int {\n         2\n     }\n }"}]}