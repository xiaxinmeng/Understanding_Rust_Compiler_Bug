{"sha": "2acdc877006d7812dc32d1a08d560b7c8edfc34c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhY2RjODc3MDA2ZDc4MTJkYzMyZDFhMDhkNTYwYjdjOGVkZmMzNGM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-28T17:00:49Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-02T16:00:20Z"}, "message": "Inline process_rlink into try_process_rlink", "tree": {"sha": "dc0e0c63068ffc39fdbe91f0e1f57e3134c936d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc0e0c63068ffc39fdbe91f0e1f57e3134c936d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2acdc877006d7812dc32d1a08d560b7c8edfc34c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2acdc877006d7812dc32d1a08d560b7c8edfc34c", "html_url": "https://github.com/rust-lang/rust/commit/2acdc877006d7812dc32d1a08d560b7c8edfc34c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2acdc877006d7812dc32d1a08d560b7c8edfc34c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fa71752935c3f43be549e58d5ac91309932385f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa71752935c3f43be549e58d5ac91309932385f", "html_url": "https://github.com/rust-lang/rust/commit/2fa71752935c3f43be549e58d5ac91309932385f"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "2ca0e73c74d9938557270667db9b182230c74eec", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2acdc877006d7812dc32d1a08d560b7c8edfc34c/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2acdc877006d7812dc32d1a08d560b7c8edfc34c/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=2acdc877006d7812dc32d1a08d560b7c8edfc34c", "patch": "@@ -599,28 +599,25 @@ fn show_content_with_pager(content: &str) {\n }\n \n impl RustcDefaultCalls {\n-    fn process_rlink(sess: &Session, compiler: &interface::Compiler) -> Result<(), ErrorReported> {\n-        if let Input::File(file) = compiler.input() {\n-            // FIXME: #![crate_type] and #![crate_name] support not implemented yet\n-            let attrs = vec![];\n-            sess.init_crate_types(collect_crate_types(sess, &attrs));\n-            let outputs = compiler.build_output_filenames(&sess, &attrs);\n-            let rlink_data = fs::read_to_string(file).unwrap_or_else(|err| {\n-                sess.fatal(&format!(\"failed to read rlink file: {}\", err));\n-            });\n-            let codegen_results: CodegenResults = json::decode(&rlink_data).unwrap_or_else(|err| {\n-                sess.fatal(&format!(\"failed to decode rlink: {}\", err));\n-            });\n-            compiler.codegen_backend().link(&sess, codegen_results, &outputs)\n-        } else {\n-            sess.fatal(\"rlink must be a file\")\n-        }\n-    }\n-\n     pub fn try_process_rlink(sess: &Session, compiler: &interface::Compiler) -> Compilation {\n         if sess.opts.debugging_opts.link_only {\n-            let result = RustcDefaultCalls::process_rlink(sess, compiler);\n-            abort_on_err(result, sess);\n+            if let Input::File(file) = compiler.input() {\n+                // FIXME: #![crate_type] and #![crate_name] support not implemented yet\n+                let attrs = vec![];\n+                sess.init_crate_types(collect_crate_types(sess, &attrs));\n+                let outputs = compiler.build_output_filenames(&sess, &attrs);\n+                let rlink_data = fs::read_to_string(file).unwrap_or_else(|err| {\n+                    sess.fatal(&format!(\"failed to read rlink file: {}\", err));\n+                });\n+                let codegen_results: CodegenResults =\n+                    json::decode(&rlink_data).unwrap_or_else(|err| {\n+                        sess.fatal(&format!(\"failed to decode rlink: {}\", err));\n+                    });\n+                let result = compiler.codegen_backend().link(&sess, codegen_results, &outputs);\n+                abort_on_err(result, sess);\n+            } else {\n+                sess.fatal(\"rlink must be a file\")\n+            }\n             Compilation::Stop\n         } else {\n             Compilation::Continue"}]}