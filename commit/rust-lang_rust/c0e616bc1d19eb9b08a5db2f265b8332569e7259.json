{"sha": "c0e616bc1d19eb9b08a5db2f265b8332569e7259", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZTYxNmJjMWQxOWViOWIwOGE1ZGIyZjI2NWI4MzMyNTY5ZTcyNTk=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-07-17T14:07:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-17T14:07:12Z"}, "message": "Implement closing-block procedure without relying on missed_span module (#3691)", "tree": {"sha": "0650781823cbb61f4b91f069addba0ea801e12de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0650781823cbb61f4b91f069addba0ea801e12de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0e616bc1d19eb9b08a5db2f265b8332569e7259", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdLyuQCRBK7hj4Ov3rIwAAdHIIACCwfGKYFy4AGFu6ln9I/U2r\nh+/z88Gb9oy2C0W4eN03Gd2SRHAuQlgUxuOVFzUHU7Y9nmXCyzKUVRWKXgppBwvS\nDKAKZaKxER3JtvHG569eK+9+o1iQoM+6MxSAvLBkQUAHhsyptD3ADsrZXIGe6xIP\nYT8lZQ/SuQ1lZ/iY2AVC/TuHMq4+vYUTiRGMMjkqAacOkM6g9Et/IP+nZXrp1p8A\nfYWgvTDZHUTHlmYYPC+l9dcSkLPPDGjlvHj+8UXwt2uuBH3oxdZFeAg+bvHe5XxZ\nmK13Y/LVzZ1dQhmKNeJxduaN8+uWo8O0IEuQOPqwKRIG8bYQdNrjhp+K0dMh/5M=\n=WrIi\n-----END PGP SIGNATURE-----\n", "payload": "tree 0650781823cbb61f4b91f069addba0ea801e12de\nparent 76e2ba25bd419beedbbc15aec6b4c6aef4deffaf\nauthor Seiichi Uchida <seuchida@gmail.com> 1563372432 +0900\ncommitter GitHub <noreply@github.com> 1563372432 +0900\n\nImplement closing-block procedure without relying on missed_span module (#3691)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e616bc1d19eb9b08a5db2f265b8332569e7259", "html_url": "https://github.com/rust-lang/rust/commit/c0e616bc1d19eb9b08a5db2f265b8332569e7259", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0e616bc1d19eb9b08a5db2f265b8332569e7259/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "html_url": "https://github.com/rust-lang/rust/commit/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf"}], "stats": {"total": 250, "additions": 115, "deletions": 135}, "files": [{"sha": "f0dc6c66597033b7a0a6fb8b03729668beee9e5f", "filename": "src/config/file_lines.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c0e616bc1d19eb9b08a5db2f265b8332569e7259/src%2Fconfig%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e616bc1d19eb9b08a5db2f265b8332569e7259/src%2Fconfig%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Ffile_lines.rs?ref=c0e616bc1d19eb9b08a5db2f265b8332569e7259", "patch": "@@ -9,7 +9,7 @@ use std::{cmp, fmt, iter, str};\n use serde::{ser, Deserialize, Deserializer, Serialize, Serializer};\n use serde_json as json;\n \n-use syntax::source_map::{self, SourceFile, SourceMap, Span};\n+use syntax::source_map::{self, SourceFile};\n \n /// A range of lines in a file, inclusive of both ends.\n pub struct LineRange {\n@@ -78,17 +78,6 @@ impl LineRange {\n     pub fn file_name(&self) -> FileName {\n         self.file.name.clone().into()\n     }\n-\n-    pub(crate) fn from_span(source_map: &SourceMap, span: Span) -> LineRange {\n-        let lo_char_pos = source_map.lookup_char_pos(span.lo());\n-        let hi_char_pos = source_map.lookup_char_pos(span.hi());\n-        debug_assert!(lo_char_pos.file.name == hi_char_pos.file.name);\n-        LineRange {\n-            file: lo_char_pos.file.clone(),\n-            lo: lo_char_pos.line,\n-            hi: hi_char_pos.line,\n-        }\n-    }\n }\n \n /// A range that is inclusive of both ends."}, {"sha": "f5a0497425145ff6d413e6a19ec2759400e3e340", "filename": "src/coverage.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c0e616bc1d19eb9b08a5db2f265b8332569e7259/src%2Fcoverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e616bc1d19eb9b08a5db2f265b8332569e7259/src%2Fcoverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcoverage.rs?ref=c0e616bc1d19eb9b08a5db2f265b8332569e7259", "patch": "@@ -0,0 +1,15 @@\n+use crate::{Config, EmitMode};\n+use std::borrow::Cow;\n+\n+pub(crate) fn transform_missing_snippet<'a>(config: &Config, string: &'a str) -> Cow<'a, str> {\n+    match config.emit_mode() {\n+        EmitMode::Coverage => Cow::from(replace_chars(string)),\n+        _ => Cow::from(string),\n+    }\n+}\n+\n+fn replace_chars(s: &str) -> String {\n+    s.chars()\n+        .map(|ch| if ch.is_whitespace() { ch } else { 'X' })\n+        .collect()\n+}"}, {"sha": "5bfdcbd042049e307416d04d84434200c70793a0", "filename": "src/format-diff/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c0e616bc1d19eb9b08a5db2f265b8332569e7259/src%2Fformat-diff%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e616bc1d19eb9b08a5db2f265b8332569e7259/src%2Fformat-diff%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformat-diff%2Fmain.rs?ref=c0e616bc1d19eb9b08a5db2f265b8332569e7259", "patch": "@@ -292,5 +292,4 @@ mod cmd_line_tests {\n                 .is_err()\n         );\n     }\n-\n }"}, {"sha": "e3e7f7f924402b4001753905a4ec71b30845e30c", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c0e616bc1d19eb9b08a5db2f265b8332569e7259/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e616bc1d19eb9b08a5db2f265b8332569e7259/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c0e616bc1d19eb9b08a5db2f265b8332569e7259", "patch": "@@ -49,6 +49,7 @@ mod chains;\n mod closures;\n mod comment;\n pub(crate) mod config;\n+mod coverage;\n mod emitter;\n mod expr;\n mod format_report_formatter;"}, {"sha": "7bc81fdc844ad6a6f7e9fafb0dff68753a32cab2", "filename": "src/missed_spans.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c0e616bc1d19eb9b08a5db2f265b8332569e7259/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e616bc1d19eb9b08a5db2f265b8332569e7259/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=c0e616bc1d19eb9b08a5db2f265b8332569e7259", "patch": "@@ -1,10 +1,9 @@\n-use std::borrow::Cow;\n-\n use syntax::source_map::{BytePos, Pos, Span};\n \n use crate::comment::{is_last_comment_block, rewrite_comment, CodeCharKind, CommentCodeSlices};\n use crate::config::file_lines::FileLines;\n-use crate::config::{EmitMode, FileName};\n+use crate::config::FileName;\n+use crate::coverage::transform_missing_snippet;\n use crate::shape::{Indent, Shape};\n use crate::source_map::LineRangeUtils;\n use crate::utils::{count_lf_crlf, count_newlines, last_line_width, mk_sp};\n@@ -171,10 +170,7 @@ impl<'a> FmtVisitor<'a> {\n         let file_name = &char_pos.file.name.clone().into();\n         let mut status = SnippetStatus::new(char_pos.line);\n \n-        let snippet = &*match self.config.emit_mode() {\n-            EmitMode::Coverage => Cow::from(replace_chars(old_snippet)),\n-            _ => Cow::from(old_snippet),\n-        };\n+        let snippet = &*transform_missing_snippet(self.config, old_snippet);\n \n         let slice_within_file_lines_range =\n             |file_lines: FileLines, cur_line, s| -> (usize, usize, bool) {\n@@ -333,10 +329,3 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n }\n-\n-fn replace_chars(string: &str) -> String {\n-    string\n-        .chars()\n-        .map(|ch| if ch.is_whitespace() { ch } else { 'X' })\n-        .collect()\n-}"}, {"sha": "5526ed9e44d6c36258f527a4e7394a1c530aaff9", "filename": "src/visitor.rs", "status": "modified", "additions": 89, "deletions": 89, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/c0e616bc1d19eb9b08a5db2f265b8332569e7259/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e616bc1d19eb9b08a5db2f265b8332569e7259/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=c0e616bc1d19eb9b08a5db2f265b8332569e7259", "patch": "@@ -5,9 +5,9 @@ use syntax::source_map::{self, BytePos, Pos, SourceMap, Span};\n use syntax::{ast, visit};\n \n use crate::attr::*;\n-use crate::comment::{CodeCharKind, CommentCodeSlices};\n-use crate::config::file_lines::LineRange;\n+use crate::comment::{rewrite_comment, CodeCharKind, CommentCodeSlices};\n use crate::config::{BraceStyle, Config};\n+use crate::coverage::transform_missing_snippet;\n use crate::items::{\n     format_impl, format_trait, format_trait_alias, is_mod_decl, is_use_item,\n     rewrite_associated_impl_type, rewrite_associated_type, rewrite_existential_impl_type,\n@@ -22,8 +22,8 @@ use crate::source_map::{LineRangeUtils, SpanUtils};\n use crate::spanned::Spanned;\n use crate::stmt::Stmt;\n use crate::utils::{\n-    self, contains_skip, count_newlines, depr_skip_annotation, inner_attributes, mk_sp,\n-    ptr_vec_to_ref_vec, rewrite_ident, stmt_expr,\n+    self, contains_skip, count_newlines, depr_skip_annotation, inner_attributes, last_line_width,\n+    mk_sp, ptr_vec_to_ref_vec, rewrite_ident, stmt_expr,\n };\n use crate::{ErrorKind, FormatReport, FormattingError};\n \n@@ -165,32 +165,6 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         }\n     }\n \n-    /// Returns the total length of the spaces which should be trimmed between the last statement\n-    /// and the closing brace of the block.\n-    fn trimmed_spaces_width_before_closing_brace(\n-        &mut self,\n-        b: &ast::Block,\n-        brace_compensation: BytePos,\n-    ) -> usize {\n-        match b.stmts.last() {\n-            None => 0,\n-            Some(..) => {\n-                let span_after_last_stmt = self.next_span(b.span.hi() - brace_compensation);\n-                let missing_snippet = self.snippet(span_after_last_stmt);\n-                CommentCodeSlices::new(missing_snippet)\n-                    .last()\n-                    .and_then(|(kind, _, s)| {\n-                        if kind == CodeCharKind::Normal && s.trim().is_empty() {\n-                            Some(s.len())\n-                        } else {\n-                            None\n-                        }\n-                    })\n-                    .unwrap_or(0)\n-            }\n-        }\n-    }\n-\n     pub(crate) fn visit_block(\n         &mut self,\n         b: &ast::Block,\n@@ -226,72 +200,99 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             }\n         }\n \n-        let missing_span = self.next_span(b.span.hi());\n-        if out_of_file_lines_range!(self, missing_span) {\n-            self.push_str(self.snippet(missing_span));\n-            self.block_indent = self.block_indent.block_unindent(self.config);\n-            self.last_pos = source!(self, b.span).hi();\n-            return;\n-        }\n-\n-        let remove_len = BytePos::from_usize(\n-            self.trimmed_spaces_width_before_closing_brace(b, brace_compensation),\n-        );\n-        let unindent_comment = self.is_if_else_block && !b.stmts.is_empty() && {\n-            let end_pos = source!(self, b.span).hi() - brace_compensation - remove_len;\n-            let snippet = self.snippet(mk_sp(self.last_pos, end_pos));\n-            snippet.contains(\"//\") || snippet.contains(\"/*\")\n-        };\n-        if unindent_comment {\n+        let rest_span = self.next_span(b.span.hi());\n+        if out_of_file_lines_range!(self, rest_span) {\n+            self.push_str(self.snippet(rest_span));\n             self.block_indent = self.block_indent.block_unindent(self.config);\n+        } else {\n+            // Ignore the closing brace.\n+            let missing_span = self.next_span(b.span.hi() - brace_compensation);\n+            self.close_block(missing_span, self.unindent_comment_on_closing_brace(b));\n         }\n-        self.format_missing_with_indent(\n-            source!(self, b.span).hi() - brace_compensation - remove_len,\n-        );\n-        if unindent_comment {\n-            self.block_indent = self.block_indent.block_indent(self.config);\n-        }\n-        self.close_block(unindent_comment, self.next_span(b.span.hi()));\n         self.last_pos = source!(self, b.span).hi();\n     }\n \n-    // FIXME: this is a terrible hack to indent the comments between the last\n-    // item in the block and the closing brace to the block's level.\n-    // The closing brace itself, however, should be indented at a shallower\n-    // level.\n-    fn close_block(&mut self, unindent_comment: bool, span: Span) {\n-        let skip_this_line = !self\n-            .config\n-            .file_lines()\n-            .contains(&LineRange::from_span(self.source_map, span));\n-        if skip_this_line {\n-            self.push_str(self.snippet(span));\n-        } else {\n-            let total_len = self.buffer.len();\n-            let chars_too_many = if unindent_comment {\n-                0\n-            } else if self.config.hard_tabs() {\n-                1\n-            } else {\n-                self.config.tab_spaces()\n-            };\n+    fn close_block(&mut self, span: Span, unindent_comment: bool) {\n+        let config = self.config;\n \n-            // FIXME this is a temporaly fix\n-            // should be remove truncate logic in close_block\n-            // avoid not to truncate necessary chars\n-            let truncate_start = total_len - chars_too_many;\n-            let target_str = &self.buffer[truncate_start..total_len];\n-            let truncate_length = target_str.len() - target_str.trim().len();\n-\n-            if let Some(last_char) = target_str.chars().last() {\n-                self.buffer.truncate(total_len - truncate_length);\n-                if last_char == '\\n' {\n-                    self.buffer.push_str(\"\\n\");\n+        let mut last_hi = span.lo();\n+        let mut unindented = false;\n+        let mut prev_ends_with_newline = false;\n+        let mut extra_newline = false;\n+\n+        let skip_normal = |s: &str| {\n+            let trimmed = s.trim();\n+            trimmed.is_empty() || trimmed.chars().all(|c| c == ';')\n+        };\n+\n+        for (kind, offset, sub_slice) in CommentCodeSlices::new(self.snippet(span)) {\n+            let sub_slice = transform_missing_snippet(config, sub_slice);\n+\n+            debug!(\"close_block: {:?} {:?} {:?}\", kind, offset, sub_slice);\n+\n+            match kind {\n+                CodeCharKind::Comment => {\n+                    if !unindented && unindent_comment {\n+                        unindented = true;\n+                        self.block_indent = self.block_indent.block_unindent(config);\n+                    }\n+                    let span_in_between = mk_sp(last_hi, span.lo() + BytePos::from_usize(offset));\n+                    let snippet_in_between = self.snippet(span_in_between);\n+                    let mut comment_on_same_line = !snippet_in_between.contains(\"\\n\");\n+\n+                    let mut comment_shape =\n+                        Shape::indented(self.block_indent, config).comment(config);\n+                    if comment_on_same_line {\n+                        // 1 = a space before `//`\n+                        let offset_len = 1 + last_line_width(&self.buffer)\n+                            .saturating_sub(self.block_indent.width());\n+                        match comment_shape\n+                            .visual_indent(offset_len)\n+                            .sub_width(offset_len)\n+                        {\n+                            Some(shp) => comment_shape = shp,\n+                            None => comment_on_same_line = false,\n+                        }\n+                    };\n+\n+                    if comment_on_same_line {\n+                        self.push_str(\" \");\n+                    } else {\n+                        if count_newlines(snippet_in_between) >= 2 || extra_newline {\n+                            self.push_str(\"\\n\");\n+                        }\n+                        self.push_str(&self.block_indent.to_string_with_newline(config));\n+                    }\n+\n+                    let comment_str = rewrite_comment(&sub_slice, false, comment_shape, config);\n+                    match comment_str {\n+                        Some(ref s) => self.push_str(s),\n+                        None => self.push_str(&sub_slice),\n+                    }\n+                }\n+                CodeCharKind::Normal if skip_normal(&sub_slice) => {\n+                    extra_newline = prev_ends_with_newline && sub_slice.contains('\\n');\n+                    continue;\n+                }\n+                CodeCharKind::Normal => {\n+                    self.push_str(&self.block_indent.to_string_with_newline(config));\n+                    self.push_str(sub_slice.trim());\n                 }\n             }\n-            self.push_str(\"}\");\n+            prev_ends_with_newline = sub_slice.ends_with('\\n');\n+            extra_newline = false;\n+            last_hi = span.lo() + BytePos::from_usize(offset + sub_slice.len());\n+        }\n+        if unindented {\n+            self.block_indent = self.block_indent.block_indent(self.config);\n         }\n         self.block_indent = self.block_indent.block_unindent(self.config);\n+        self.push_str(&self.block_indent.to_string_with_newline(config));\n+        self.push_str(\"}\");\n+    }\n+\n+    fn unindent_comment_on_closing_brace(&self, b: &ast::Block) -> bool {\n+        self.is_if_else_block && !b.stmts.is_empty()\n     }\n \n     // Note that this only gets called for function definitions. Required methods\n@@ -806,9 +807,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 self.block_indent = self.block_indent.block_indent(self.config);\n                 self.visit_attrs(attrs, ast::AttrStyle::Inner);\n                 self.walk_mod_items(m);\n-                let missing_span = mk_sp(source!(self, m.inner).hi() - BytePos(1), m.inner.hi());\n-                self.format_missing_with_indent(missing_span.lo());\n-                self.close_block(false, missing_span);\n+                let missing_span = self.next_span(m.inner.hi() - BytePos(1));\n+                self.close_block(missing_span, false);\n             }\n             self.last_pos = source!(self, m.inner).hi();\n         } else {"}, {"sha": "9bfb2b964eaa32a26b8341ce609d558154eaf078", "filename": "tests/source/configs/empty_item_single_line/false.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Fsource%2Fconfigs%2Fempty_item_single_line%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Fsource%2Fconfigs%2Fempty_item_single_line%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fempty_item_single_line%2Ffalse.rs?ref=c0e616bc1d19eb9b08a5db2f265b8332569e7259", "patch": "@@ -13,5 +13,4 @@ fn lorem() {\n }\n \n fn lorem() {\n-\n }"}, {"sha": "8af8b88ffff83f8bc8a58c5a6dc144798eff3283", "filename": "tests/source/configs/empty_item_single_line/true.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Fsource%2Fconfigs%2Fempty_item_single_line%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Fsource%2Fconfigs%2Fempty_item_single_line%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fempty_item_single_line%2Ftrue.rs?ref=c0e616bc1d19eb9b08a5db2f265b8332569e7259", "patch": "@@ -13,5 +13,4 @@ fn lorem() {\n }\n \n fn lorem() {\n-\n }"}, {"sha": "fe16387b7b234e9a1d45827557aee62c143e78c6", "filename": "tests/source/issue-977.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Fsource%2Fissue-977.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Fsource%2Fissue-977.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-977.rs?ref=c0e616bc1d19eb9b08a5db2f265b8332569e7259", "patch": "@@ -1,5 +1,4 @@\n // rustfmt-normalize_comments: true\n-// FIXME(#919)\n \n trait NameC { /* comment */ }\n struct FooC { /* comment */ }"}, {"sha": "1a70d84813d0118593c7ef088b1675eb88ea1655", "filename": "tests/target/assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Ftarget%2Fassignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Ftarget%2Fassignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fassignment.rs?ref=c0e616bc1d19eb9b08a5db2f265b8332569e7259", "patch": "@@ -17,7 +17,7 @@ fn main() {\n     single_lit_fit >>= 10;\n \n     // #2791\n-    let x = 2;;;;\n+    let x = 2;\n }\n \n fn break_meee() {"}, {"sha": "b987c8a44f3d4df81b47f324a12525fb6e74a34a", "filename": "tests/target/comment.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Ftarget%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Ftarget%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomment.rs?ref=c0e616bc1d19eb9b08a5db2f265b8332569e7259", "patch": "@@ -59,8 +59,7 @@ fn issue_1086() {\n \n // random comment\n \n-fn main() {\n-    // Test\n+fn main() { // Test\n }\n \n // #1643"}, {"sha": "1f43bd93bb0cb6558fa84ec2968760c8f42bec8a", "filename": "tests/target/comments-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Ftarget%2Fcomments-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Ftarget%2Fcomments-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomments-fn.rs?ref=c0e616bc1d19eb9b08a5db2f265b8332569e7259", "patch": "@@ -15,7 +15,6 @@ where\n     F: Foo, // COmment after where-clause\n     G: Goo, // final comment\n {\n-\n }\n \n fn bar<F /* comment on F */, G /* comment on G */>() {}"}, {"sha": "174fe330a8da59c86a3dc2402c047ffee797a157", "filename": "tests/target/configs/empty_item_single_line/false.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Ftarget%2Fconfigs%2Fempty_item_single_line%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Ftarget%2Fconfigs%2Fempty_item_single_line%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fempty_item_single_line%2Ffalse.rs?ref=c0e616bc1d19eb9b08a5db2f265b8332569e7259", "patch": "@@ -11,5 +11,4 @@ fn lorem() {\n }\n \n fn lorem() {\n-\n }"}, {"sha": "0ad775ee1ddf781028b5914dd9bdc91c5f994443", "filename": "tests/target/fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Ftarget%2Ffn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Ftarget%2Ffn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn.rs?ref=c0e616bc1d19eb9b08a5db2f265b8332569e7259", "patch": "@@ -21,7 +21,6 @@ fn foo(\n where\n     T: Blah,\n {\n-\n }\n \n fn foo<U, T>(\n@@ -32,7 +31,6 @@ where\n     T: Blah,\n     U: dsfasdfasdfasd,\n {\n-\n }\n \n fn foo<U: Fn(A) -> B /* paren inside generics */>() {}"}, {"sha": "3784a3874503bb50aa6c714b7705802c6e4bf585", "filename": "tests/target/issue-977.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Ftarget%2Fissue-977.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Ftarget%2Fissue-977.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-977.rs?ref=c0e616bc1d19eb9b08a5db2f265b8332569e7259", "patch": "@@ -1,5 +1,4 @@\n // rustfmt-normalize_comments: true\n-// FIXME(#919)\n \n trait NameC {\n     // comment\n@@ -10,8 +9,7 @@ struct FooC {\n enum MooC {\n     // comment\n }\n-mod BarC {\n-    // comment\n+mod BarC { // comment\n }\n extern \"C\" {\n     // comment"}, {"sha": "78bcd2aa053629233ad77e3ac8a3f99a8b8538ae", "filename": "tests/target/match.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=c0e616bc1d19eb9b08a5db2f265b8332569e7259", "patch": "@@ -126,8 +126,7 @@ fn issue339() {\n         // collapsing here exceeds line length\n         ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffg => {\n         }\n-        h => {\n-            // comment above block\n+        h => { // comment above block\n         }\n         i => {} // comment below block\n         j => {\n@@ -148,8 +147,7 @@ fn issue339() {\n         m => {}\n         n => {}\n         o => {}\n-        p => {\n-            // Don't collapse me\n+        p => { // Don't collapse me\n         }\n         q => {}\n         r => {}"}, {"sha": "4118d123dd06f293ae7e7b068bf1bf6383ed448b", "filename": "tests/target/mod-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Ftarget%2Fmod-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e616bc1d19eb9b08a5db2f265b8332569e7259/tests%2Ftarget%2Fmod-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmod-1.rs?ref=c0e616bc1d19eb9b08a5db2f265b8332569e7259", "patch": "@@ -33,6 +33,5 @@ pub mod x {\n     }\n }\n \n-mod y {\n-    // sup boooooiiii\n+mod y { // sup boooooiiii\n }"}]}