{"sha": "3b015622be1245d00e2663ba3da38a00ceb583fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMDE1NjIyYmUxMjQ1ZDAwZTI2NjNiYTNkYTM4YTAwY2ViNTgzZmI=", "commit": {"author": {"name": "Lukas Lueg", "email": "lukas.lueg@gmail.com", "date": "2020-11-23T22:52:19Z"}, "committer": {"name": "Lukas Lueg", "email": "lukas.lueg@gmail.com", "date": "2020-11-23T22:52:19Z"}, "message": "Add Peekable::peek_mut", "tree": {"sha": "0e38546476318861fad413637de3bcf83ad24569", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e38546476318861fad413637de3bcf83ad24569"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b015622be1245d00e2663ba3da38a00ceb583fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b015622be1245d00e2663ba3da38a00ceb583fb", "html_url": "https://github.com/rust-lang/rust/commit/3b015622be1245d00e2663ba3da38a00ceb583fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b015622be1245d00e2663ba3da38a00ceb583fb/comments", "author": {"login": "lukaslueg", "id": 3148704, "node_id": "MDQ6VXNlcjMxNDg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3148704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaslueg", "html_url": "https://github.com/lukaslueg", "followers_url": "https://api.github.com/users/lukaslueg/followers", "following_url": "https://api.github.com/users/lukaslueg/following{/other_user}", "gists_url": "https://api.github.com/users/lukaslueg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaslueg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaslueg/subscriptions", "organizations_url": "https://api.github.com/users/lukaslueg/orgs", "repos_url": "https://api.github.com/users/lukaslueg/repos", "events_url": "https://api.github.com/users/lukaslueg/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaslueg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lukaslueg", "id": 3148704, "node_id": "MDQ6VXNlcjMxNDg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3148704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaslueg", "html_url": "https://github.com/lukaslueg", "followers_url": "https://api.github.com/users/lukaslueg/followers", "following_url": "https://api.github.com/users/lukaslueg/following{/other_user}", "gists_url": "https://api.github.com/users/lukaslueg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaslueg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaslueg/subscriptions", "organizations_url": "https://api.github.com/users/lukaslueg/orgs", "repos_url": "https://api.github.com/users/lukaslueg/repos", "events_url": "https://api.github.com/users/lukaslueg/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaslueg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9a105fdd46c926ae606777a46dd90e5b838f92f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a105fdd46c926ae606777a46dd90e5b838f92f", "html_url": "https://github.com/rust-lang/rust/commit/d9a105fdd46c926ae606777a46dd90e5b838f92f"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "ebdc2555db27a3f4e9c344f30dd15369b2097ddc", "filename": "library/core/src/iter/adapters/peekable.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3b015622be1245d00e2663ba3da38a00ceb583fb/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b015622be1245d00e2663ba3da38a00ceb583fb/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs?ref=3b015622be1245d00e2663ba3da38a00ceb583fb", "patch": "@@ -216,6 +216,43 @@ impl<I: Iterator> Peekable<I> {\n         self.peeked.get_or_insert_with(|| iter.next()).as_ref()\n     }\n \n+    /// Returns a mutable reference to the next() value without advancing the iterator.\n+    ///\n+    /// Like [`next`], if there is a value, it is wrapped in a `Some(T)`.\n+    /// But if the iteration is over, `None` is returned.\n+    ///\n+    /// Because `peek_mut()` returns a reference, and many iterators iterate over\n+    /// references, there can be a possibly confusing situation where the\n+    /// return value is a double reference. You can see this effect in the examples\n+    /// below.\n+    ///\n+    /// [`next`]: Iterator::next\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(peekable_peek_mut)]\n+    /// let mut iter = [1, 2, 3].iter().peekable();\n+    ///\n+    /// assert_eq!(iter.peek_mut(), Some(&mut &1));\n+    /// assert_eq!(iter.next(), Some(&1));\n+    ///\n+    /// // Peek into the iterator and modify the value which will be returned next\n+    /// if let Some(mut p) = iter.peek_mut() {\n+    ///     if *p == &2 {\n+    ///         *p = &5;\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(iter.collect::<Vec<_>>(), vec![&5, &3]);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"peekable_peek_mut\", issue = \"78302\")]\n+    pub fn peek_mut(&mut self) -> Option<&mut I::Item> {\n+        let iter = &mut self.iter;\n+        self.peeked.get_or_insert_with(|| iter.next()).as_mut()\n+    }\n+\n     /// Consume and return the next value of this iterator if a condition is true.\n     ///\n     /// If `func` returns `true` for the next value of this iterator, consume and return it."}, {"sha": "6b8a989fa426ffe7f77c7815b7aa7a7732c1809c", "filename": "library/core/tests/iter.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b015622be1245d00e2663ba3da38a00ceb583fb/library%2Fcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b015622be1245d00e2663ba3da38a00ceb583fb/library%2Fcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter.rs?ref=3b015622be1245d00e2663ba3da38a00ceb583fb", "patch": "@@ -1134,6 +1134,17 @@ fn test_iterator_peekable_next_if_eq() {\n     assert_eq!(it.next_if_eq(\"\"), None);\n }\n \n+#[test]\n+fn test_iterator_peekable_mut() {\n+    let mut it = vec![1, 2, 3].into_iter().peekable();\n+    if let Some(p) = it.peek_mut() {\n+        if *p == 1 {\n+            *p = 5;\n+        }\n+    }\n+    assert_eq!(it.collect::<Vec<_>>(), vec![5, 2, 3]);\n+}\n+\n /// This is an iterator that follows the Iterator contract,\n /// but it is not fused. After having returned None once, it will start\n /// producing elements if .next() is called again."}, {"sha": "1efb3b7411898c2200038b85e5a9b0a967e27018", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b015622be1245d00e2663ba3da38a00ceb583fb/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b015622be1245d00e2663ba3da38a00ceb583fb/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=3b015622be1245d00e2663ba3da38a00ceb583fb", "patch": "@@ -56,6 +56,7 @@\n #![feature(unwrap_infallible)]\n #![feature(option_unwrap_none)]\n #![feature(peekable_next_if)]\n+#![feature(peekable_peek_mut)]\n #![feature(partition_point)]\n #![feature(once_cell)]\n #![feature(unsafe_block_in_unsafe_fn)]"}]}