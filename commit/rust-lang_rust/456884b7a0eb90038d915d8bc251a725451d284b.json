{"sha": "456884b7a0eb90038d915d8bc251a725451d284b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1Njg4NGI3YTBlYjkwMDM4ZDkxNWQ4YmMyNTFhNzI1NDUxZDI4NGI=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-07-21T01:05:59Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-21T16:54:55Z"}, "message": "Remove useless RefCells", "tree": {"sha": "0def46805e370e795c7a0acdfec8eb337af67ed7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0def46805e370e795c7a0acdfec8eb337af67ed7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/456884b7a0eb90038d915d8bc251a725451d284b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/456884b7a0eb90038d915d8bc251a725451d284b", "html_url": "https://github.com/rust-lang/rust/commit/456884b7a0eb90038d915d8bc251a725451d284b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/456884b7a0eb90038d915d8bc251a725451d284b/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e24ef377e32ee2fe253046fdc073840279e4b95", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e24ef377e32ee2fe253046fdc073840279e4b95", "html_url": "https://github.com/rust-lang/rust/commit/2e24ef377e32ee2fe253046fdc073840279e4b95"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "889af7a8846663ed29ff27040f8697f041781a86", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/456884b7a0eb90038d915d8bc251a725451d284b/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456884b7a0eb90038d915d8bc251a725451d284b/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=456884b7a0eb90038d915d8bc251a725451d284b", "patch": "@@ -16,7 +16,6 @@\n use driver::session::Session;\n use front::config;\n \n-use std::cell::RefCell;\n use std::gc::{Gc, GC};\n use std::slice;\n use std::vec;\n@@ -46,9 +45,9 @@ struct Test {\n \n struct TestCtxt<'a> {\n     sess: &'a Session,\n-    path: RefCell<Vec<ast::Ident>>,\n+    path: Vec<ast::Ident>,\n     ext_cx: ExtCtxt<'a>,\n-    testfns: RefCell<Vec<Test> >,\n+    testfns: Vec<Test>,\n     is_test_crate: bool,\n     config: ast::CrateConfig,\n }\n@@ -86,9 +85,9 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n     }\n \n     fn fold_item(&mut self, i: Gc<ast::Item>) -> SmallVector<Gc<ast::Item>> {\n-        self.cx.path.borrow_mut().push(i.ident);\n+        self.cx.path.push(i.ident);\n         debug!(\"current path: {}\",\n-               ast_util::path_name_i(self.cx.path.borrow().as_slice()));\n+               ast_util::path_name_i(self.cx.path.as_slice()));\n \n         if is_test_fn(&self.cx, i) || is_bench_fn(&self.cx, i) {\n             match i.node {\n@@ -102,20 +101,20 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n                     debug!(\"this is a test function\");\n                     let test = Test {\n                         span: i.span,\n-                        path: self.cx.path.borrow().clone(),\n+                        path: self.cx.path.clone(),\n                         bench: is_bench_fn(&self.cx, i),\n                         ignore: is_ignored(&self.cx, i),\n                         should_fail: should_fail(i)\n                     };\n-                    self.cx.testfns.borrow_mut().push(test);\n+                    self.cx.testfns.push(test);\n                     // debug!(\"have {} test/bench functions\",\n                     //        cx.testfns.len());\n                 }\n             }\n         }\n \n         let res = fold::noop_fold_item(&*i, self);\n-        self.cx.path.borrow_mut().pop();\n+        self.cx.path.pop();\n         res\n     }\n \n@@ -155,8 +154,8 @@ fn generate_test_harness(sess: &Session, krate: ast::Crate)\n                                  deriving_hash_type_parameter: false,\n                                  crate_name: \"test\".to_string(),\n                              }),\n-        path: RefCell::new(Vec::new()),\n-        testfns: RefCell::new(Vec::new()),\n+        path: Vec::new(),\n+        testfns: Vec::new(),\n         is_test_crate: is_test_crate(&krate),\n         config: krate.config.clone(),\n     };\n@@ -399,13 +398,13 @@ fn is_test_crate(krate: &ast::Crate) -> bool {\n }\n \n fn mk_test_descs(cx: &TestCtxt) -> Gc<ast::Expr> {\n-    debug!(\"building test vector from {} tests\", cx.testfns.borrow().len());\n+    debug!(\"building test vector from {} tests\", cx.testfns.len());\n \n     box(GC) ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n         node: ast::ExprVstore(box(GC) ast::Expr {\n             id: ast::DUMMY_NODE_ID,\n-            node: ast::ExprVec(cx.testfns.borrow().iter().map(|test| {\n+            node: ast::ExprVec(cx.testfns.iter().map(|test| {\n                 mk_test_desc_and_fn_rec(cx, test)\n             }).collect()),\n             span: DUMMY_SP,"}]}