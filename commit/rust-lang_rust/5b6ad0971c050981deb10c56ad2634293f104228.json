{"sha": "5b6ad0971c050981deb10c56ad2634293f104228", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNmFkMDk3MWMwNTA5ODFkZWIxMGM1NmFkMjYzNDI5M2YxMDQyMjg=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-19T10:36:17Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-19T10:36:17Z"}, "message": "Merge #996\n\n996: Allow attributes on top level expressions r=matklad a=pcpthm\n\nThis PR modifies parser to allow outer attributes on top level expression. Here, top level expression means either\r\n- Expression statement e.g. `foo();`\r\n- Last expression in a block without semicolon `bar()` in `{ foo(); bar() }`.\r\n\r\nExcept for binary operation expressions and `if` expressions, which are errors (feature gated) in rustc.\r\nAttributes on inner expressions like `foo(#[a] 1)` are not implemented.\r\n\r\nI first tried to implement this by passing `Maker` to expression parsers. However, this implementation couldn't parse `#[attr] foo()` correctly as `CallExpr(Attr(..), PathExpr(..), ArgList(..))` and instead parsed incorrectly as `CallExpr(PathExpr(Attr(..), ..), ArgList(..))` due to the way left recursion is handled.\r\nIn the end, I introduce `undo_completion` method. Which is not the suggested approach, but it seems not very bad.\r\n\r\nFix #759.\r\n\n\nCo-authored-by: pcpthm <pcpthm@gmail.com>", "tree": {"sha": "7f76ce1da6ed9e245f5b4ef14257418c66f59577", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f76ce1da6ed9e245f5b4ef14257418c66f59577"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b6ad0971c050981deb10c56ad2634293f104228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b6ad0971c050981deb10c56ad2634293f104228", "html_url": "https://github.com/rust-lang/rust/commit/5b6ad0971c050981deb10c56ad2634293f104228", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b6ad0971c050981deb10c56ad2634293f104228/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "91576afc7e64f11dde2bed14b578e4914d253a6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/91576afc7e64f11dde2bed14b578e4914d253a6a", "html_url": "https://github.com/rust-lang/rust/commit/91576afc7e64f11dde2bed14b578e4914d253a6a"}, {"sha": "4cf179c089aeed381cd67bcd265e76a27f11facd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf179c089aeed381cd67bcd265e76a27f11facd", "html_url": "https://github.com/rust-lang/rust/commit/4cf179c089aeed381cd67bcd265e76a27f11facd"}], "stats": {"total": 347, "additions": 305, "deletions": 42}, "files": [{"sha": "c1773e8e0ebf5c52c4de6c15602bf22df96f2733", "filename": "crates/ra_parser/src/event.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ad0971c050981deb10c56ad2634293f104228/crates%2Fra_parser%2Fsrc%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ad0971c050981deb10c56ad2634293f104228/crates%2Fra_parser%2Fsrc%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fevent.rs?ref=5b6ad0971c050981deb10c56ad2634293f104228", "patch": "@@ -105,7 +105,9 @@ pub(super) fn process(sink: &mut dyn TreeSink, mut events: Vec<Event>) {\n                     // append `A`'s forward_parent `B`\n                     fp = match mem::replace(&mut events[idx], Event::tombstone()) {\n                         Event::Start { kind, forward_parent } => {\n-                            forward_parents.push(kind);\n+                            if kind != TOMBSTONE {\n+                                forward_parents.push(kind);\n+                            }\n                             forward_parent\n                         }\n                         _ => unreachable!(),"}, {"sha": "73e1acd5a2193a7fe1749c635d0831f739c57421", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 62, "deletions": 32, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ad0971c050981deb10c56ad2634293f104228/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ad0971c050981deb10c56ad2634293f104228/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=5b6ad0971c050981deb10c56ad2634293f104228", "patch": "@@ -8,10 +8,10 @@ const EXPR_FIRST: TokenSet = LHS_FIRST;\n \n pub(super) fn expr(p: &mut Parser) -> BlockLike {\n     let r = Restrictions { forbid_structs: false, prefer_stmt: false };\n-    expr_bp(p, r, 1)\n+    expr_bp(p, r, 1).1\n }\n \n-pub(super) fn expr_stmt(p: &mut Parser) -> BlockLike {\n+pub(super) fn expr_stmt(p: &mut Parser) -> (Option<CompletedMarker>, BlockLike) {\n     let r = Restrictions { forbid_structs: false, prefer_stmt: true };\n     expr_bp(p, r, 1)\n }\n@@ -38,6 +38,13 @@ pub(crate) fn block(p: &mut Parser) {\n     m.complete(p, BLOCK);\n }\n \n+fn is_expr_stmt_attr_allowed(kind: SyntaxKind) -> bool {\n+    match kind {\n+        BIN_EXPR | RANGE_EXPR | IF_EXPR => false,\n+        _ => true,\n+    }\n+}\n+\n pub(crate) fn expr_block_contents(p: &mut Parser) {\n     // This is checked by a validator\n     attributes::inner_attributes(p);\n@@ -55,6 +62,13 @@ pub(crate) fn expr_block_contents(p: &mut Parser) {\n         // test block_items\n         // fn a() { fn b() {} }\n         let m = p.start();\n+        // test attr_on_expr_stmt\n+        // fn foo() {\n+        //     #[A] foo();\n+        //     #[B] bar!{}\n+        //     #[C] #[D] {}\n+        //     #[D] return ();\n+        // }\n         let has_attrs = p.at(POUND);\n         attributes::outer_attributes(p);\n         if p.at(LET_KW) {\n@@ -67,35 +81,51 @@ pub(crate) fn expr_block_contents(p: &mut Parser) {\n             Err(m) => m,\n         };\n \n-        if has_attrs {\n-            m.abandon(p);\n-            p.error(\"expected a let statement or an item after attributes in block\");\n-        } else {\n-            let is_blocklike = expressions::expr_stmt(p) == BlockLike::Block;\n-            if p.at(R_CURLY) {\n+        let (cm, blocklike) = expr_stmt(p);\n+        let kind = cm.as_ref().map(|cm| cm.kind()).unwrap_or(ERROR);\n+\n+        if has_attrs && !is_expr_stmt_attr_allowed(kind) {\n+            // test_err attr_on_expr_not_allowed\n+            // fn foo() {\n+            //    #[A] 1 + 2;\n+            //    #[B] if true {};\n+            // }\n+            p.error(format!(\"attributes are not allowed on {:?}\", kind));\n+        }\n+\n+        if p.at(R_CURLY) {\n+            // test attr_on_last_expr_in_block\n+            // fn foo() {\n+            //     { #[A] bar!()? }\n+            //     #[B] &()\n+            // }\n+            if let Some(cm) = cm {\n+                cm.undo_completion(p).abandon(p);\n+                m.complete(p, kind);\n+            } else {\n                 m.abandon(p);\n+            }\n+        } else {\n+            // test no_semi_after_block\n+            // fn foo() {\n+            //     if true {}\n+            //     loop {}\n+            //     match () {}\n+            //     while true {}\n+            //     for _ in () {}\n+            //     {}\n+            //     {}\n+            //     macro_rules! test {\n+            //          () => {}\n+            //     }\n+            //     test!{}\n+            // }\n+            if blocklike.is_block() {\n+                p.eat(SEMI);\n             } else {\n-                // test no_semi_after_block\n-                // fn foo() {\n-                //     if true {}\n-                //     loop {}\n-                //     match () {}\n-                //     while true {}\n-                //     for _ in () {}\n-                //     {}\n-                //     {}\n-                //     macro_rules! test {\n-                //          () => {}\n-                //     }\n-                //     test!{}\n-                // }\n-                if is_blocklike {\n-                    p.eat(SEMI);\n-                } else {\n-                    p.expect(SEMI);\n-                }\n-                m.complete(p, EXPR_STMT);\n+                p.expect(SEMI);\n             }\n+            m.complete(p, EXPR_STMT);\n         }\n     }\n \n@@ -176,7 +206,7 @@ fn current_op(p: &Parser) -> (u8, Op) {\n }\n \n // Parses expression with binding power of at least bp.\n-fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) -> BlockLike {\n+fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) -> (Option<CompletedMarker>, BlockLike) {\n     let mut lhs = match lhs(p, r) {\n         Some((lhs, blocklike)) => {\n             // test stmt_bin_expr_ambiguity\n@@ -185,11 +215,11 @@ fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) -> BlockLike {\n             //     {1} &2;\n             // }\n             if r.prefer_stmt && blocklike.is_block() {\n-                return BlockLike::Block;\n+                return (Some(lhs), BlockLike::Block);\n             }\n             lhs\n         }\n-        None => return BlockLike::NotBlock,\n+        None => return (None, BlockLike::NotBlock),\n     };\n \n     loop {\n@@ -208,7 +238,7 @@ fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) -> BlockLike {\n         expr_bp(p, r, op_bp + 1);\n         lhs = m.complete(p, if is_range { RANGE_EXPR } else { BIN_EXPR });\n     }\n-    BlockLike::NotBlock\n+    (Some(lhs), BlockLike::NotBlock)\n }\n \n const LHS_FIRST: TokenSet ="}, {"sha": "a23977bfbe6943c23505aaa0fd313ebb907279c9", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ad0971c050981deb10c56ad2634293f104228/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ad0971c050981deb10c56ad2634293f104228/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=5b6ad0971c050981deb10c56ad2634293f104228", "patch": "@@ -392,9 +392,9 @@ fn match_arm(p: &mut Parser) -> BlockLike {\n         match_guard(p);\n     }\n     p.expect(FAT_ARROW);\n-    let ret = expr_stmt(p);\n+    let blocklike = expr_stmt(p).1;\n     m.complete(p, MATCH_ARM);\n-    ret\n+    blocklike\n }\n \n // test match_guard"}, {"sha": "3c326452b37398772dafc6cd39d85e50b6362ef7", "filename": "crates/ra_parser/src/parser.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ad0971c050981deb10c56ad2634293f104228/crates%2Fra_parser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ad0971c050981deb10c56ad2634293f104228/crates%2Fra_parser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fparser.rs?ref=5b6ad0971c050981deb10c56ad2634293f104228", "patch": "@@ -212,8 +212,9 @@ impl Marker {\n             }\n             _ => unreachable!(),\n         }\n+        let finish_pos = p.events.len() as u32;\n         p.push_event(Event::Finish);\n-        CompletedMarker::new(self.pos, kind)\n+        CompletedMarker::new(self.pos, finish_pos, kind)\n     }\n \n     /// Abandons the syntax tree node. All its children\n@@ -230,11 +231,15 @@ impl Marker {\n     }\n }\n \n-pub(crate) struct CompletedMarker(u32, SyntaxKind);\n+pub(crate) struct CompletedMarker {\n+    start_pos: u32,\n+    finish_pos: u32,\n+    kind: SyntaxKind,\n+}\n \n impl CompletedMarker {\n-    fn new(pos: u32, kind: SyntaxKind) -> Self {\n-        CompletedMarker(pos, kind)\n+    fn new(start_pos: u32, finish_pos: u32, kind: SyntaxKind) -> Self {\n+        CompletedMarker { start_pos, finish_pos, kind }\n     }\n \n     /// This method allows to create a new node which starts\n@@ -251,17 +256,32 @@ impl CompletedMarker {\n     /// distance to `NEWSTART` into forward_parent(=2 in this case);\n     pub(crate) fn precede(self, p: &mut Parser) -> Marker {\n         let new_pos = p.start();\n-        let idx = self.0 as usize;\n+        let idx = self.start_pos as usize;\n         match p.events[idx] {\n             Event::Start { ref mut forward_parent, .. } => {\n-                *forward_parent = Some(new_pos.pos - self.0);\n+                *forward_parent = Some(new_pos.pos - self.start_pos);\n             }\n             _ => unreachable!(),\n         }\n         new_pos\n     }\n \n+    /// Undo this completion and turns into a `Marker`\n+    pub(crate) fn undo_completion(self, p: &mut Parser) -> Marker {\n+        let start_idx = self.start_pos as usize;\n+        let finish_idx = self.finish_pos as usize;\n+        match p.events[start_idx] {\n+            Event::Start { ref mut kind, forward_parent: None } => *kind = TOMBSTONE,\n+            _ => unreachable!(),\n+        }\n+        match p.events[finish_idx] {\n+            ref mut slot @ Event::Finish => *slot = Event::tombstone(),\n+            _ => unreachable!(),\n+        }\n+        Marker::new(self.start_pos)\n+    }\n+\n     pub(crate) fn kind(&self) -> SyntaxKind {\n-        self.1\n+        self.kind\n     }\n }"}, {"sha": "d725a07ce962edf364629f258ae9da5472c1e874", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0009_attr_on_expr_not_allowed.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ad0971c050981deb10c56ad2634293f104228/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ad0971c050981deb10c56ad2634293f104228/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rs?ref=5b6ad0971c050981deb10c56ad2634293f104228", "patch": "@@ -0,0 +1,4 @@\n+fn foo() {\n+   #[A] 1 + 2;\n+   #[B] if true {};\n+}"}, {"sha": "fdea1ec1efc40e730720b66724d58d9bf50de484", "filename": "crates/ra_syntax/tests/data/parser/inline/err/0009_attr_on_expr_not_allowed.txt", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ad0971c050981deb10c56ad2634293f104228/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ad0971c050981deb10c56ad2634293f104228/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.txt?ref=5b6ad0971c050981deb10c56ad2634293f104228", "patch": "@@ -0,0 +1,55 @@\n+SOURCE_FILE@[0; 48)\n+  FN_DEF@[0; 47)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK@[9; 47)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 14)\n+      EXPR_STMT@[14; 25)\n+        ATTR@[14; 18)\n+          POUND@[14; 15)\n+          TOKEN_TREE@[15; 18)\n+            L_BRACK@[15; 16)\n+            IDENT@[16; 17) \"A\"\n+            R_BRACK@[17; 18)\n+        WHITESPACE@[18; 19)\n+        BIN_EXPR@[19; 24)\n+          LITERAL@[19; 20)\n+            INT_NUMBER@[19; 20) \"1\"\n+          WHITESPACE@[20; 21)\n+          PLUS@[21; 22)\n+          WHITESPACE@[22; 23)\n+          LITERAL@[23; 24)\n+            INT_NUMBER@[23; 24) \"2\"\n+            err: `attributes are not allowed on BIN_EXPR`\n+        SEMI@[24; 25)\n+      WHITESPACE@[25; 29)\n+      EXPR_STMT@[29; 45)\n+        ATTR@[29; 33)\n+          POUND@[29; 30)\n+          TOKEN_TREE@[30; 33)\n+            L_BRACK@[30; 31)\n+            IDENT@[31; 32) \"B\"\n+            R_BRACK@[32; 33)\n+        WHITESPACE@[33; 34)\n+        IF_EXPR@[34; 44)\n+          IF_KW@[34; 36)\n+          WHITESPACE@[36; 37)\n+          CONDITION@[37; 41)\n+            LITERAL@[37; 41)\n+              TRUE_KW@[37; 41)\n+          WHITESPACE@[41; 42)\n+          BLOCK@[42; 44)\n+            L_CURLY@[42; 43)\n+            R_CURLY@[43; 44)\n+            err: `attributes are not allowed on IF_EXPR`\n+        SEMI@[44; 45)\n+      WHITESPACE@[45; 46)\n+      R_CURLY@[46; 47)\n+  WHITESPACE@[47; 48)"}, {"sha": "b28c078f9359bb70f2323c17b03add626241d830", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0126_attr_on_expr_stmt.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ad0971c050981deb10c56ad2634293f104228/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ad0971c050981deb10c56ad2634293f104228/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.rs?ref=5b6ad0971c050981deb10c56ad2634293f104228", "patch": "@@ -0,0 +1,6 @@\n+fn foo() {\n+    #[A] foo();\n+    #[B] bar!{}\n+    #[C] #[D] {}\n+    #[D] return ();\n+}"}, {"sha": "7cd525cc77ba85096d790eb0563df452052c2b81", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0126_attr_on_expr_stmt.txt", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ad0971c050981deb10c56ad2634293f104228/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ad0971c050981deb10c56ad2634293f104228/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.txt?ref=5b6ad0971c050981deb10c56ad2634293f104228", "patch": "@@ -0,0 +1,88 @@\n+SOURCE_FILE@[0; 82)\n+  FN_DEF@[0; 81)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK@[9; 81)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 15)\n+      EXPR_STMT@[15; 26)\n+        ATTR@[15; 19)\n+          POUND@[15; 16)\n+          TOKEN_TREE@[16; 19)\n+            L_BRACK@[16; 17)\n+            IDENT@[17; 18) \"A\"\n+            R_BRACK@[18; 19)\n+        WHITESPACE@[19; 20)\n+        CALL_EXPR@[20; 25)\n+          PATH_EXPR@[20; 23)\n+            PATH@[20; 23)\n+              PATH_SEGMENT@[20; 23)\n+                NAME_REF@[20; 23)\n+                  IDENT@[20; 23) \"foo\"\n+          ARG_LIST@[23; 25)\n+            L_PAREN@[23; 24)\n+            R_PAREN@[24; 25)\n+        SEMI@[25; 26)\n+      WHITESPACE@[26; 31)\n+      EXPR_STMT@[31; 42)\n+        ATTR@[31; 35)\n+          POUND@[31; 32)\n+          TOKEN_TREE@[32; 35)\n+            L_BRACK@[32; 33)\n+            IDENT@[33; 34) \"B\"\n+            R_BRACK@[34; 35)\n+        WHITESPACE@[35; 36)\n+        MACRO_CALL@[36; 42)\n+          PATH@[36; 39)\n+            PATH_SEGMENT@[36; 39)\n+              NAME_REF@[36; 39)\n+                IDENT@[36; 39) \"bar\"\n+          EXCL@[39; 40)\n+          TOKEN_TREE@[40; 42)\n+            L_CURLY@[40; 41)\n+            R_CURLY@[41; 42)\n+      WHITESPACE@[42; 47)\n+      EXPR_STMT@[47; 59)\n+        ATTR@[47; 51)\n+          POUND@[47; 48)\n+          TOKEN_TREE@[48; 51)\n+            L_BRACK@[48; 49)\n+            IDENT@[49; 50) \"C\"\n+            R_BRACK@[50; 51)\n+        WHITESPACE@[51; 52)\n+        ATTR@[52; 56)\n+          POUND@[52; 53)\n+          TOKEN_TREE@[53; 56)\n+            L_BRACK@[53; 54)\n+            IDENT@[54; 55) \"D\"\n+            R_BRACK@[55; 56)\n+        WHITESPACE@[56; 57)\n+        BLOCK_EXPR@[57; 59)\n+          BLOCK@[57; 59)\n+            L_CURLY@[57; 58)\n+            R_CURLY@[58; 59)\n+      WHITESPACE@[59; 64)\n+      EXPR_STMT@[64; 79)\n+        ATTR@[64; 68)\n+          POUND@[64; 65)\n+          TOKEN_TREE@[65; 68)\n+            L_BRACK@[65; 66)\n+            IDENT@[66; 67) \"D\"\n+            R_BRACK@[67; 68)\n+        WHITESPACE@[68; 69)\n+        RETURN_EXPR@[69; 78)\n+          RETURN_KW@[69; 75)\n+          WHITESPACE@[75; 76)\n+          TUPLE_EXPR@[76; 78)\n+            L_PAREN@[76; 77)\n+            R_PAREN@[77; 78)\n+        SEMI@[78; 79)\n+      WHITESPACE@[79; 80)\n+      R_CURLY@[80; 81)\n+  WHITESPACE@[81; 82)"}, {"sha": "9c5c8eb3615db5d65bd3fa414ccbfdb071b5f430", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0127_attr_on_last_expr_in_block.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ad0971c050981deb10c56ad2634293f104228/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ad0971c050981deb10c56ad2634293f104228/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.rs?ref=5b6ad0971c050981deb10c56ad2634293f104228", "patch": "@@ -0,0 +1,4 @@\n+fn foo() {\n+    { #[A] bar!()? }\n+    #[B] &()\n+}"}, {"sha": "4af64559c141a0c60ecc2437ee10d86b2bfd1822", "filename": "crates/ra_syntax/tests/data/parser/inline/ok/0127_attr_on_last_expr_in_block.txt", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5b6ad0971c050981deb10c56ad2634293f104228/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b6ad0971c050981deb10c56ad2634293f104228/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Fdata%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.txt?ref=5b6ad0971c050981deb10c56ad2634293f104228", "patch": "@@ -0,0 +1,54 @@\n+SOURCE_FILE@[0; 47)\n+  FN_DEF@[0; 46)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK@[9; 46)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 15)\n+      EXPR_STMT@[15; 31)\n+        BLOCK_EXPR@[15; 31)\n+          BLOCK@[15; 31)\n+            L_CURLY@[15; 16)\n+            WHITESPACE@[16; 17)\n+            TRY_EXPR@[17; 29)\n+              ATTR@[17; 21)\n+                POUND@[17; 18)\n+                TOKEN_TREE@[18; 21)\n+                  L_BRACK@[18; 19)\n+                  IDENT@[19; 20) \"A\"\n+                  R_BRACK@[20; 21)\n+              WHITESPACE@[21; 22)\n+              MACRO_CALL@[22; 28)\n+                PATH@[22; 25)\n+                  PATH_SEGMENT@[22; 25)\n+                    NAME_REF@[22; 25)\n+                      IDENT@[22; 25) \"bar\"\n+                EXCL@[25; 26)\n+                TOKEN_TREE@[26; 28)\n+                  L_PAREN@[26; 27)\n+                  R_PAREN@[27; 28)\n+              QUESTION@[28; 29)\n+            WHITESPACE@[29; 30)\n+            R_CURLY@[30; 31)\n+      WHITESPACE@[31; 36)\n+      REF_EXPR@[36; 44)\n+        ATTR@[36; 40)\n+          POUND@[36; 37)\n+          TOKEN_TREE@[37; 40)\n+            L_BRACK@[37; 38)\n+            IDENT@[38; 39) \"B\"\n+            R_BRACK@[39; 40)\n+        WHITESPACE@[40; 41)\n+        AMP@[41; 42)\n+        TUPLE_EXPR@[42; 44)\n+          L_PAREN@[42; 43)\n+          R_PAREN@[43; 44)\n+      WHITESPACE@[44; 45)\n+      R_CURLY@[45; 46)\n+  WHITESPACE@[46; 47)"}]}