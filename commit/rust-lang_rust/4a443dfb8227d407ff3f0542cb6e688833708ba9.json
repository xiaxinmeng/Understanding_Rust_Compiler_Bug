{"sha": "4a443dfb8227d407ff3f0542cb6e688833708ba9", "node_id": "C_kwDOAAsO6NoAKDRhNDQzZGZiODIyN2Q0MDdmZjNmMDU0MmNiNmU2ODg4MzM3MDhiYTk", "commit": {"author": {"name": "Matthew Kelly", "email": "matthew.kelly2@gmail.com", "date": "2022-08-29T10:05:01Z"}, "committer": {"name": "Matthew Kelly", "email": "matthew.kelly2@gmail.com", "date": "2022-08-29T10:05:01Z"}, "message": "review updates to E0311 description", "tree": {"sha": "44d1f82db29ad4016b8a02bad8c6c808165f8310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44d1f82db29ad4016b8a02bad8c6c808165f8310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a443dfb8227d407ff3f0542cb6e688833708ba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a443dfb8227d407ff3f0542cb6e688833708ba9", "html_url": "https://github.com/rust-lang/rust/commit/4a443dfb8227d407ff3f0542cb6e688833708ba9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a443dfb8227d407ff3f0542cb6e688833708ba9/comments", "author": {"login": "MatthewPeterKelly", "id": 8137529, "node_id": "MDQ6VXNlcjgxMzc1Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/8137529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MatthewPeterKelly", "html_url": "https://github.com/MatthewPeterKelly", "followers_url": "https://api.github.com/users/MatthewPeterKelly/followers", "following_url": "https://api.github.com/users/MatthewPeterKelly/following{/other_user}", "gists_url": "https://api.github.com/users/MatthewPeterKelly/gists{/gist_id}", "starred_url": "https://api.github.com/users/MatthewPeterKelly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MatthewPeterKelly/subscriptions", "organizations_url": "https://api.github.com/users/MatthewPeterKelly/orgs", "repos_url": "https://api.github.com/users/MatthewPeterKelly/repos", "events_url": "https://api.github.com/users/MatthewPeterKelly/events{/privacy}", "received_events_url": "https://api.github.com/users/MatthewPeterKelly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MatthewPeterKelly", "id": 8137529, "node_id": "MDQ6VXNlcjgxMzc1Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/8137529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MatthewPeterKelly", "html_url": "https://github.com/MatthewPeterKelly", "followers_url": "https://api.github.com/users/MatthewPeterKelly/followers", "following_url": "https://api.github.com/users/MatthewPeterKelly/following{/other_user}", "gists_url": "https://api.github.com/users/MatthewPeterKelly/gists{/gist_id}", "starred_url": "https://api.github.com/users/MatthewPeterKelly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MatthewPeterKelly/subscriptions", "organizations_url": "https://api.github.com/users/MatthewPeterKelly/orgs", "repos_url": "https://api.github.com/users/MatthewPeterKelly/repos", "events_url": "https://api.github.com/users/MatthewPeterKelly/events{/privacy}", "received_events_url": "https://api.github.com/users/MatthewPeterKelly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "deadf071edf4b397523739e41b6006ee278d5341", "url": "https://api.github.com/repos/rust-lang/rust/commits/deadf071edf4b397523739e41b6006ee278d5341", "html_url": "https://github.com/rust-lang/rust/commit/deadf071edf4b397523739e41b6006ee278d5341"}], "stats": {"total": 38, "additions": 15, "deletions": 23}, "files": [{"sha": "638c3e0a4373f62c778d18a218bfb7dd336b05da", "filename": "compiler/rustc_error_codes/src/error_codes/E0311.md", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4a443dfb8227d407ff3f0542cb6e688833708ba9/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0311.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a443dfb8227d407ff3f0542cb6e688833708ba9/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0311.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0311.md?ref=4a443dfb8227d407ff3f0542cb6e688833708ba9", "patch": "@@ -14,33 +14,25 @@ fn with_restriction<'a, T: 'a>(x: &'a ()) -> &'a () {\n ```\n \n Why doesn't this code compile? It helps to look at the lifetime bounds that are\n-automatically adding by the compiler. For more details see the Rust\n-Documentation for Lifetime Elision:\n-https://doc.rust-lang.org/reference/lifetime-elision.html.\n+automatically added by the compiler. For more details see the documentation for\n+[lifetime elision]( https://doc.rust-lang.org/reference/lifetime-elision.html).\n \n-There are two lifetimes being passed into the `no_restriction()` function: one\n-associated with the generic type `T` parameter and the other with the input\n-argument `x`. The compiler does not know which of these lifetimes can be\n-assigned to the output reference, so we get an error.\n+The compiler elides the lifetime of `x` and the return type to some arbitrary\n+lifetime `'anon` in `no_restriction()`. The only information available to the\n+compiler is that `'anon` is valid for the duration of the function. When\n+calling `with_restriction()`, the compiler requires the completely unrelated\n+type parameter `T` to outlive `'anon` because of the `T: 'a bound` in\n+`with_restriction()`. This causes an error because `T` is not required to\n+outlive `'anon` in `no_restriction()`.\n \n-One way to \"fix\" this code would be to remove the generic type argument `T`.\n-In this case, the lifetime elision works because there is a single input\n-lifetime, which is associated with `x`.\n+If `no_restriction()` were to use `&T` instead of `&()` as an argument, the\n+compiler would have added an implied bound [implied\n+bound](https://rust-lang.github.io/rfcs/2089-implied-bounds.html), causing this\n+to compile.\n \n-```\n-fn no_restriction(x: &()) -> &() {\n-    with_restriction(x)\n-}\n-\n-fn with_restriction<'a>(x: &'a ()) -> &'a () {\n-    x\n-}\n-```\n+This error can be resolved by explicitly naming the elided lifetime for `x` and\n+then explicily requiring that the generic parameter `T` outlives that lifetime:\n \n-The \"correct\" way to resolve this error is to explicitly tell the compiler\n-which input lifetime should be assigned to the output. In this case we give\n-both the generic type `T` parameter and the argument `x` the same lifetime\n-requirement as the output reference, producing a working version of the code:\n ```\n fn no_restriction<'a, T: 'a>(x: &'a ()) -> &'a () {\n     with_restriction::<T>(x)"}]}