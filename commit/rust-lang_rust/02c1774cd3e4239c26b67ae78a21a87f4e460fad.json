{"sha": "02c1774cd3e4239c26b67ae78a21a87f4e460fad", "node_id": "C_kwDOAAsO6NoAKDAyYzE3NzRjZDNlNDIzOWMyNmI2N2FlNzhhMjFhODdmNGU0NjBmYWQ", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-10-02T11:59:26Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-07T03:59:06Z"}, "message": "Give inline const separate DefKind", "tree": {"sha": "7deb64813c4b5b61f7f3d0672789f865a2e6707a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7deb64813c4b5b61f7f3d0672789f865a2e6707a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02c1774cd3e4239c26b67ae78a21a87f4e460fad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02c1774cd3e4239c26b67ae78a21a87f4e460fad", "html_url": "https://github.com/rust-lang/rust/commit/02c1774cd3e4239c26b67ae78a21a87f4e460fad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02c1774cd3e4239c26b67ae78a21a87f4e460fad/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "089a016919b0a9daaed9f676804102d6ba3f8f9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/089a016919b0a9daaed9f676804102d6ba3f8f9d", "html_url": "https://github.com/rust-lang/rust/commit/089a016919b0a9daaed9f676804102d6ba3f8f9d"}], "stats": {"total": 61, "additions": 46, "deletions": 15}, "files": [{"sha": "6d3a89c0a8a5ba3927510556463c1b55d4397baa", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=02c1774cd3e4239c26b67ae78a21a87f4e460fad", "patch": "@@ -42,6 +42,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n                     | DefKind::Static\n                     | DefKind::ConstParam\n                     | DefKind::AnonConst\n+                    | DefKind::InlineConst\n                     | DefKind::AssocConst\n             ),\n         \"Unexpected DefKind: {:?}\","}, {"sha": "60761a05de8270180810ca2d6995fab17eb59dac", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=02c1774cd3e4239c26b67ae78a21a87f4e460fad", "patch": "@@ -104,8 +104,10 @@ pub enum DefKind {\n     Use,\n     /// An `extern` block.\n     ForeignMod,\n-    /// Anonymous constant, e.g. the `1 + 2` in `[u8; 1 + 2]`, or `const { 1 + 2}`\n+    /// Anonymous constant, e.g. the `1 + 2` in `[u8; 1 + 2]`\n     AnonConst,\n+    /// An inline constant, e.g. `const { 1 + 2 }`\n+    InlineConst,\n     /// Opaque type, aka `impl Trait`.\n     OpaqueTy,\n     Field,\n@@ -155,6 +157,7 @@ impl DefKind {\n             DefKind::Use => \"import\",\n             DefKind::ForeignMod => \"foreign module\",\n             DefKind::AnonConst => \"constant expression\",\n+            DefKind::InlineConst => \"inline constant\",\n             DefKind::Field => \"field\",\n             DefKind::Impl => \"implementation\",\n             DefKind::Closure => \"closure\",\n@@ -174,6 +177,7 @@ impl DefKind {\n             | DefKind::OpaqueTy\n             | DefKind::Impl\n             | DefKind::Use\n+            | DefKind::InlineConst\n             | DefKind::ExternCrate => \"an\",\n             DefKind::Macro(macro_kind) => macro_kind.article(),\n             _ => \"a\",\n@@ -207,6 +211,7 @@ impl DefKind {\n \n             // Not namespaced.\n             DefKind::AnonConst\n+            | DefKind::InlineConst\n             | DefKind::Field\n             | DefKind::LifetimeParam\n             | DefKind::ExternCrate"}, {"sha": "aff5e02d0c655dc5b27909eba4a84b26d7759a51", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=02c1774cd3e4239c26b67ae78a21a87f4e460fad", "patch": "@@ -797,6 +797,7 @@ fn should_encode_visibility(def_kind: DefKind) -> bool {\n         | DefKind::ConstParam\n         | DefKind::LifetimeParam\n         | DefKind::AnonConst\n+        | DefKind::InlineConst\n         | DefKind::GlobalAsm\n         | DefKind::Closure\n         | DefKind::Generator\n@@ -832,6 +833,7 @@ fn should_encode_stability(def_kind: DefKind) -> bool {\n         DefKind::Use\n         | DefKind::LifetimeParam\n         | DefKind::AnonConst\n+        | DefKind::InlineConst\n         | DefKind::GlobalAsm\n         | DefKind::Closure\n         | DefKind::Generator\n@@ -856,9 +858,11 @@ fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {\n             (true, mir_opt_base)\n         }\n         // Constants\n-        DefKind::AnonConst | DefKind::AssocConst | DefKind::Static | DefKind::Const => {\n-            (true, false)\n-        }\n+        DefKind::AnonConst\n+        | DefKind::InlineConst\n+        | DefKind::AssocConst\n+        | DefKind::Static\n+        | DefKind::Const => (true, false),\n         // Full-fledged functions\n         DefKind::AssocFn | DefKind::Fn => {\n             let generics = tcx.generics_of(def_id);\n@@ -914,6 +918,7 @@ fn should_encode_variances(def_kind: DefKind) -> bool {\n         | DefKind::Use\n         | DefKind::LifetimeParam\n         | DefKind::AnonConst\n+        | DefKind::InlineConst\n         | DefKind::GlobalAsm\n         | DefKind::Closure\n         | DefKind::Generator\n@@ -939,6 +944,7 @@ fn should_encode_generics(def_kind: DefKind) -> bool {\n         | DefKind::AssocFn\n         | DefKind::AssocConst\n         | DefKind::AnonConst\n+        | DefKind::InlineConst\n         | DefKind::OpaqueTy\n         | DefKind::Impl\n         | DefKind::Field"}, {"sha": "d9d0781b37aacefe4afab97366de2b6448907d6e", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=02c1774cd3e4239c26b67ae78a21a87f4e460fad", "patch": "@@ -266,7 +266,15 @@ impl<'hir> Map<'hir> {\n                 };\n                 DefKind::Ctor(ctor_of, def::CtorKind::from_hir(variant_data))\n             }\n-            Node::AnonConst(_) => DefKind::AnonConst,\n+            Node::AnonConst(_) => {\n+                let inline = match self.find(self.get_parent_node(hir_id)) {\n+                    Some(Node::Expr(&Expr {\n+                        kind: ExprKind::ConstBlock(ref anon_const), ..\n+                    })) if anon_const.hir_id == hir_id => true,\n+                    _ => false,\n+                };\n+                if inline { DefKind::InlineConst } else { DefKind::AnonConst }\n+            }\n             Node::Field(_) => DefKind::Field,\n             Node::Expr(expr) => match expr.kind {\n                 ExprKind::Closure(.., None) => DefKind::Closure,"}, {"sha": "8e1b887f87da75695eb5c41a6156250db02171e8", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=02c1774cd3e4239c26b67ae78a21a87f4e460fad", "patch": "@@ -958,7 +958,7 @@ fn write_mir_sig(tcx: TyCtxt<'_>, body: &Body<'_>, w: &mut dyn Write) -> io::Res\n             write!(w, \"static {}\", if tcx.is_mutable_static(def_id) { \"mut \" } else { \"\" })?\n         }\n         (_, _) if is_function => write!(w, \"fn \")?,\n-        (DefKind::AnonConst, _) => {} // things like anon const, not an item\n+        (DefKind::AnonConst | DefKind::InlineConst, _) => {} // things like anon const, not an item\n         _ => bug!(\"Unexpected def kind {:?}\", kind),\n     }\n "}, {"sha": "26bae1e15a372569922d5e46fe3ff1b8395b997b", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=02c1774cd3e4239c26b67ae78a21a87f4e460fad", "patch": "@@ -1927,7 +1927,8 @@ impl<'tcx> TyCtxt<'tcx> {\n                 | DefKind::Static\n                 | DefKind::AssocConst\n                 | DefKind::Ctor(..)\n-                | DefKind::AnonConst => self.mir_for_ctfe_opt_const_arg(def),\n+                | DefKind::AnonConst\n+                | DefKind::InlineConst => self.mir_for_ctfe_opt_const_arg(def),\n                 // If the caller wants `mir_for_ctfe` of a function they should not be using\n                 // `instance_mir`, so we'll assume const fn also wants the optimized version.\n                 _ => {"}, {"sha": "ba62a6eea10ea6f2d97e3fc5e5761996a75cb7e5", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=02c1774cd3e4239c26b67ae78a21a87f4e460fad", "patch": "@@ -167,6 +167,7 @@ fn mark_used_by_default_parameters<'tcx>(\n         | DefKind::Use\n         | DefKind::ForeignMod\n         | DefKind::AnonConst\n+        | DefKind::InlineConst\n         | DefKind::OpaqueTy\n         | DefKind::Field\n         | DefKind::LifetimeParam\n@@ -303,7 +304,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n                 ControlFlow::CONTINUE\n             }\n             ty::ConstKind::Unevaluated(uv)\n-                if self.tcx.def_kind(uv.def.did) == DefKind::AnonConst =>\n+                if matches!(self.tcx.def_kind(uv.def.did), DefKind::AnonConst | DefKind::InlineConst) =>\n             {\n                 self.visit_child_body(uv.def.did, uv.substs(self.tcx));\n                 ControlFlow::CONTINUE"}, {"sha": "a01efc5d85c6e765bd263855f0575656d1daf247", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=02c1774cd3e4239c26b67ae78a21a87f4e460fad", "patch": "@@ -618,6 +618,7 @@ impl EmbargoVisitor<'tcx> {\n             | DefKind::Use\n             | DefKind::ForeignMod\n             | DefKind::AnonConst\n+            | DefKind::InlineConst\n             | DefKind::Field\n             | DefKind::GlobalAsm\n             | DefKind::Impl"}, {"sha": "44268877cb0a58af2e1675c5ba8d3b69265fe1cb", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=02c1774cd3e4239c26b67ae78a21a87f4e460fad", "patch": "@@ -967,6 +967,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 | DefKind::Use\n                 | DefKind::ForeignMod\n                 | DefKind::AnonConst\n+                | DefKind::InlineConst\n                 | DefKind::Field\n                 | DefKind::LifetimeParam\n                 | DefKind::GlobalAsm"}, {"sha": "ed9100024def8a454f7de7216ecf3f276a384d76", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=02c1774cd3e4239c26b67ae78a21a87f4e460fad", "patch": "@@ -540,7 +540,7 @@ fn is_late_bound_map<'tcx>(\n     def_id: LocalDefId,\n ) -> Option<(LocalDefId, &'tcx FxHashSet<ItemLocalId>)> {\n     match tcx.def_kind(def_id) {\n-        DefKind::AnonConst => {\n+        DefKind::AnonConst | DefKind::InlineConst => {\n             let mut def_id = tcx\n                 .parent(def_id.to_def_id())\n                 .unwrap_or_else(|| bug!(\"anon const or closure without a parent\"));"}, {"sha": "c7f8fe3a88a64b1dc4ea99a8456f852f54083995", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=02c1774cd3e4239c26b67ae78a21a87f4e460fad", "patch": "@@ -739,6 +739,7 @@ impl<'tcx> SaveContext<'tcx> {\n                 | HirDefKind::ForeignMod\n                 | HirDefKind::LifetimeParam\n                 | HirDefKind::AnonConst\n+                | HirDefKind::InlineConst\n                 | HirDefKind::Use\n                 | HirDefKind::Field\n                 | HirDefKind::GlobalAsm"}, {"sha": "6b5d37c0f43086516d57425d66807dd3b6ca72b7", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c1774cd3e4239c26b67ae78a21a87f4e460fad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=02c1774cd3e4239c26b67ae78a21a87f4e460fad", "patch": "@@ -151,7 +151,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n \n     if concrete.is_ok() && uv.substs(infcx.tcx).definitely_has_param_types_or_consts(infcx.tcx) {\n         match infcx.tcx.def_kind(uv.def.did) {\n-            DefKind::AnonConst => {\n+            DefKind::AnonConst | DefKind::InlineConst => {\n                 let mir_body = infcx.tcx.mir_for_ctfe_opt_const_arg(uv.def);\n \n                 if mir_body.is_polymorphic {\n@@ -495,7 +495,7 @@ pub(super) fn thir_abstract_const<'tcx>(\n             // we want to look into them or treat them as opaque projections.\n             //\n             // Right now we do neither of that and simply always fail to unify them.\n-            DefKind::AnonConst => (),\n+            DefKind::AnonConst | DefKind::InlineConst => (),\n             _ => return Ok(None),\n         }\n "}, {"sha": "2fa7efcc6509b143e69b5192d06cf4bf8d507669", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02c1774cd3e4239c26b67ae78a21a87f4e460fad/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c1774cd3e4239c26b67ae78a21a87f4e460fad/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=02c1774cd3e4239c26b67ae78a21a87f4e460fad", "patch": "@@ -430,8 +430,9 @@ crate fn register_res(cx: &mut DocContext<'_>, res: Res) -> DefId {\n         | Res::NonMacroAttr(_)\n         | Res::Err => return res.def_id(),\n         Res::Def(\n-            TyParam | ConstParam | Ctor(..) | ExternCrate | Use | ForeignMod | AnonConst | OpaqueTy\n-            | Field | LifetimeParam | GlobalAsm | Impl | Closure | Generator,\n+            TyParam | ConstParam | Ctor(..) | ExternCrate | Use | ForeignMod | AnonConst\n+            | InlineConst | OpaqueTy | Field | LifetimeParam | GlobalAsm | Impl | Closure\n+            | Generator,\n             id,\n         ) => return id,\n     };"}, {"sha": "3979d29b673fd3bd37a8fc6865b6b0ee3e46bcb0", "filename": "src/librustdoc/formats/item_type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02c1774cd3e4239c26b67ae78a21a87f4e460fad/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c1774cd3e4239c26b67ae78a21a87f4e460fad/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fitem_type.rs?ref=02c1774cd3e4239c26b67ae78a21a87f4e460fad", "patch": "@@ -134,6 +134,7 @@ impl From<DefKind> for ItemType {\n             | DefKind::Use\n             | DefKind::ForeignMod\n             | DefKind::AnonConst\n+            | DefKind::InlineConst\n             | DefKind::OpaqueTy\n             | DefKind::Field\n             | DefKind::LifetimeParam"}, {"sha": "4e5812d7f8429e38a5a5f11042f5912b0a5ee0a4", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02c1774cd3e4239c26b67ae78a21a87f4e460fad/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c1774cd3e4239c26b67ae78a21a87f4e460fad/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=02c1774cd3e4239c26b67ae78a21a87f4e460fad", "patch": "@@ -1937,7 +1937,8 @@ fn resolution_failure(\n                             | Use\n                             | LifetimeParam\n                             | Ctor(_, _)\n-                            | AnonConst => {\n+                            | AnonConst\n+                            | InlineConst => {\n                                 let note = assoc_item_not_allowed(res);\n                                 if let Some(span) = sp {\n                                     diag.span_label(span, &note);"}, {"sha": "7142df98c3f10fde54afa98e822067dd468532f2", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02c1774cd3e4239c26b67ae78a21a87f4e460fad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c1774cd3e4239c26b67ae78a21a87f4e460fad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=02c1774cd3e4239c26b67ae78a21a87f4e460fad", "patch": "@@ -1065,7 +1065,10 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n                 PatKind::Path(path) => {\n                     #[allow(clippy::match_same_arms)]\n                     let id = match cx.qpath_res(path, pat.hir_id) {\n-                        Res::Def(DefKind::Const | DefKind::ConstParam | DefKind::AnonConst, _) => return,\n+                        Res::Def(\n+                            DefKind::Const | DefKind::ConstParam | DefKind::AnonConst | DefKind::InlineConst,\n+                            _,\n+                        ) => return,\n                         Res::Def(_, id) => id,\n                         _ => return,\n                     };"}]}