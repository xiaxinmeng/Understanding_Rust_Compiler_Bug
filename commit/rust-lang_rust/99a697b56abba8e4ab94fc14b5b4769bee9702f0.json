{"sha": "99a697b56abba8e4ab94fc14b5b4769bee9702f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YTY5N2I1NmFiYmE4ZTRhYjk0ZmMxNGI1YjQ3NjliZWU5NzAyZjA=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-14T01:36:32Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-14T02:14:54Z"}, "message": "Add support for upper-case hex and binary output to #fmt.\n\nOnly works for uints at present. Necessitated the addition of _str.to_upper.", "tree": {"sha": "ae9b3e81e9fbfe294974a0034a35b57b96babf27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae9b3e81e9fbfe294974a0034a35b57b96babf27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99a697b56abba8e4ab94fc14b5b4769bee9702f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99a697b56abba8e4ab94fc14b5b4769bee9702f0", "html_url": "https://github.com/rust-lang/rust/commit/99a697b56abba8e4ab94fc14b5b4769bee9702f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99a697b56abba8e4ab94fc14b5b4769bee9702f0/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c0f4c1939b392e0bd0bcbce86fa83eb7a421992", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c0f4c1939b392e0bd0bcbce86fa83eb7a421992", "html_url": "https://github.com/rust-lang/rust/commit/5c0f4c1939b392e0bd0bcbce86fa83eb7a421992"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "bd5fc433d8bf4a1f8ee466d2f651d681bc9119aa", "filename": "src/comp/front/extfmt.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99a697b56abba8e4ab94fc14b5b4769bee9702f0/src%2Fcomp%2Ffront%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a697b56abba8e4ab94fc14b5b4769bee9702f0/src%2Fcomp%2Ffront%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fextfmt.rs?ref=99a697b56abba8e4ab94fc14b5b4769bee9702f0", "patch": "@@ -246,6 +246,9 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n             case (ty_hex(_)) {\n                 ret make_conv_call(arg.span, \"uint\", cnv, arg);\n             }\n+            case (ty_bits) {\n+                ret make_conv_call(arg.span, \"uint\", cnv, arg);\n+            }\n             case (_) {\n                 log unsupported;\n                 fail;"}, {"sha": "e15fa462684f2c49e3d725f0feb83342149d51ab", "filename": "src/lib/ExtFmt.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99a697b56abba8e4ab94fc14b5b4769bee9702f0/src%2Flib%2FExtFmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a697b56abba8e4ab94fc14b5b4769bee9702f0/src%2Flib%2FExtFmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2FExtFmt.rs?ref=99a697b56abba8e4ab94fc14b5b4769bee9702f0", "patch": "@@ -315,6 +315,12 @@ mod RT {\n             case (ty_hex_lower) {\n                 ret _uint.to_str(u, 16u);\n             }\n+            case (ty_hex_upper) {\n+                ret _str.to_upper(_uint.to_str(u, 16u));\n+            }\n+            case (ty_bits) {\n+                ret _uint.to_str(u, 2u);\n+            }\n         }\n     }\n "}, {"sha": "7690fe44a500da2f8eb6e35c0cbd58b0340bd6da", "filename": "src/lib/_str.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/99a697b56abba8e4ab94fc14b5b4769bee9702f0/src%2Flib%2F_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a697b56abba8e4ab94fc14b5b4769bee9702f0/src%2Flib%2F_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_str.rs?ref=99a697b56abba8e4ab94fc14b5b4769bee9702f0", "patch": "@@ -470,6 +470,24 @@ fn connect(vec[str] v, str sep) -> str {\n     ret s;\n }\n \n+// FIXME: This only handles ASCII\n+fn to_upper(str s) -> str {\n+    auto outstr = \"\";\n+    auto ascii_a = 'a' as u8;\n+    auto ascii_z = 'z' as u8;\n+    auto diff = 32u8;\n+    for (u8 byte in s) {\n+        auto next;\n+        if (ascii_a <= byte && byte <= ascii_z) {\n+            next = byte - diff;\n+        } else {\n+            next = byte;\n+        }\n+        push_byte(outstr, next);\n+    }\n+    ret outstr;\n+}\n+\n \n // Local Variables:\n // mode: rust;"}, {"sha": "e1e4abb1638faf65013c121b96a0c4526e3d9513", "filename": "src/test/run-pass/lib-str.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/99a697b56abba8e4ab94fc14b5b4769bee9702f0/src%2Ftest%2Frun-pass%2Flib-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a697b56abba8e4ab94fc14b5b4769bee9702f0/src%2Ftest%2Frun-pass%2Flib-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-str.rs?ref=99a697b56abba8e4ab94fc14b5b4769bee9702f0", "patch": "@@ -89,6 +89,16 @@ fn test_connect() {\n   t(vec(\"hi\"), \" \", \"hi\");\n }\n \n+fn test_to_upper() {\n+  // to_upper doesn't understand unicode yet,\n+  // but we need to at least preserve it\n+  auto unicode = \"\\u65e5\\u672c\";\n+  auto input = \"abcDEF\" + unicode + \"xyz:.;\";\n+  auto expected = \"ABCDEF\" + unicode + \"XYZ:.;\";\n+  auto actual = _str.to_upper(input);\n+  check (_str.eq(expected, actual));\n+}\n+\n \n fn main() {\n   test_bytes_len();\n@@ -98,4 +108,5 @@ fn main() {\n   test_substr();\n   test_concat();\n   test_connect();\n+  test_to_upper();\n }"}, {"sha": "fcb0df183a507c8c4be11e264afe4a15a18f2255", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99a697b56abba8e4ab94fc14b5b4769bee9702f0/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a697b56abba8e4ab94fc14b5b4769bee9702f0/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=99a697b56abba8e4ab94fc14b5b4769bee9702f0", "patch": "@@ -23,4 +23,6 @@ fn main() {\n   test(#fmt(\"%b\", false), \"false\");\n   test(#fmt(\"%c\", 'A'), \"A\");\n   test(#fmt(\"%x\", 0xff_u), \"ff\");\n+  test(#fmt(\"%X\", 0x12ab_u), \"12AB\");\n+  test(#fmt(\"%t\", 0b11010101_u), \"11010101\");\n }"}]}