{"sha": "608403227075586dfe676916bdce6796eef3d9bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwODQwMzIyNzA3NTU4NmRmZTY3NjkxNmJkY2U2Nzk2ZWVmM2Q5YmI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-06T00:51:32Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-06T00:51:32Z"}, "message": "test: More run-pass test fixes", "tree": {"sha": "d983a40fbd48318d97c2d88e381e920bcb85f663", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d983a40fbd48318d97c2d88e381e920bcb85f663"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/608403227075586dfe676916bdce6796eef3d9bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/608403227075586dfe676916bdce6796eef3d9bb", "html_url": "https://github.com/rust-lang/rust/commit/608403227075586dfe676916bdce6796eef3d9bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/608403227075586dfe676916bdce6796eef3d9bb/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a065f243473ea4ea8dc4653bca33f04a1381122", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a065f243473ea4ea8dc4653bca33f04a1381122", "html_url": "https://github.com/rust-lang/rust/commit/7a065f243473ea4ea8dc4653bca33f04a1381122"}], "stats": {"total": 92, "additions": 47, "deletions": 45}, "files": [{"sha": "32e0d87e85019016da52b0fcee4e898799b843f3", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -13,7 +13,7 @@ struct cat {\n }\n \n     impl cat : ToStr {\n-       pure fn to_str() -> ~str { self.name }\n+       pure fn to_str() -> ~str { copy self.name }\n     }\n \n     priv impl cat {"}, {"sha": "ad49866c005d85bcc4e894958a97157cc4b5f5e9", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -12,5 +12,5 @@ type header_map = HashMap<~str, @DVec<@~str>>;\n \n // the unused ty param is necessary so this gets monomorphized\n fn request<T: Copy>(req: header_map) {\n-  let _x = *(*req.get(~\"METHOD\"))[0u];\n+  let _x = *(copy *req.get(~\"METHOD\"))[0u];\n }"}, {"sha": "a03deaadf5749d082ae8ecbe9e81abe31b5cc7b6", "filename": "src/test/auxiliary/issue_2242_a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Fauxiliary%2Fissue_2242_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Fauxiliary%2Fissue_2242_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2242_a.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -6,5 +6,5 @@ trait to_strz {\n }\n \n impl ~str: to_strz {\n-    fn to_strz() -> ~str { self }\n+    fn to_strz() -> ~str { copy self }\n }"}, {"sha": "2c8cc190dbcc10be8dec5f3ad9265aec3796f206", "filename": "src/test/auxiliary/trait_inheritance_overloading_xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -8,7 +8,7 @@ pub struct MyInt {\n }\n \n pub impl MyInt : Add<MyInt, MyInt> {\n-    pure fn add(other: &MyInt) -> MyInt { mi(self.val + other.val) }\n+    pure fn add(&self, other: &MyInt) -> MyInt { mi(self.val + other.val) }\n }\n \n pub impl MyInt : Sub<MyInt, MyInt> {"}, {"sha": "a2fb1678aa5ad2b657c72a92bae400e82a033752", "filename": "src/test/run-pass/alt-implicit-copy-unique.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Falt-implicit-copy-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Falt-implicit-copy-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-implicit-copy-unique.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -1,6 +1,8 @@\n fn main() {\n     let x = ~{mut a: ~10, b: ~20};\n     match x {\n-      ~{ref a, ref b} => { assert **a == 10; (*x).a = ~30; assert **a == 30; }\n+      ~{a: ref a, b: ref b} => {\n+        assert **a == 10; (*x).a = ~30; assert **a == 30;\n+      }\n     }\n }"}, {"sha": "8ec7e06bd3e7a945ea4f2ba67f64577ccd5c1421", "filename": "src/test/run-pass/getopts_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -9,7 +9,7 @@ fn main() {\n     match getopts(args, opts) {\n         result::Ok(ref m)  =>\n             assert !opt_present(m, \"b\"),\n-        result::Err(f) => fail fail_str(f)\n+        result::Err(ref f) => fail fail_str(*f)\n     };\n \n-}\n\\ No newline at end of file\n+}"}, {"sha": "b6adfd1602f0849d8f263a2f7a8089fc24a3b53f", "filename": "src/test/run-pass/issue-2633-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -4,5 +4,5 @@ fn a_val(&&x: ~int, +y: ~int) -> int {\n \n fn main() {\n     let z = ~22;\n-    a_val(z, z);\n+    a_val(copy z, copy z);\n }"}, {"sha": "a829676675db91974defb9e9f07651dd1f773244", "filename": "src/test/run-pass/issue-2633.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -17,5 +17,5 @@ fn nyan(kitty: cat, _kitty_info: kitty_info) {\n \n fn main() {\n     let mut kitty = cat();\n-    nyan(kitty, {kitty: kitty});\n+    nyan(copy kitty, {kitty: copy kitty});\n }"}, {"sha": "d4d5e6d9d7282761edbf97157f30833dce1ca756", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -13,9 +13,9 @@ fn lookup(table: ~json::Object, key: ~str, default: ~str) -> ~str\n {\n     match table.find(&key)\n     {\n-        option::Some(std::json::String(s)) =>\n+        option::Some(std::json::String(copy s)) =>\n         {\n-            s\n+            copy s\n         }\n         option::Some(value) =>\n         {\n@@ -33,9 +33,9 @@ fn add_interface(store: int, managed_ip: ~str, data: std::json::Json) -> (~str,\n {\n     match &data\n     {\n-        &std::json::Object(interface) =>\n+        &std::json::Object(copy interface) =>\n         {\n-            let name = lookup(interface, ~\"ifDescr\", ~\"\");\n+            let name = lookup(copy interface, ~\"ifDescr\", ~\"\");\n             let label = fmt!(\"%s-%s\", managed_ip, name);\n \n             (label, bool_value(false))"}, {"sha": "e48a08cdf36092372b72b6ead98c98b6e6dce699", "filename": "src/test/run-pass/istr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fistr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fistr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fistr.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -1,6 +1,6 @@\n fn test_stack_assign() {\n     let s: ~str = ~\"a\";\n-    log(debug, s);\n+    log(debug, copy s);\n     let t: ~str = ~\"a\";\n     assert (s == t);\n     let u: ~str = ~\"b\";\n@@ -39,7 +39,7 @@ fn test_append() {\n \n     let mut s = ~\"a\";\n     s += ~\"b\";\n-    log(debug, s);\n+    log(debug, copy s);\n     assert (s == ~\"ab\");\n \n     let mut s = ~\"c\";"}, {"sha": "c420ffac684b9d5682e212a1ad4250c4aaf51ac8", "filename": "src/test/run-pass/last-use-corner-cases.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -21,7 +21,7 @@ fn main() {\n     // Check that no false positives are found in loops.\n     let mut q = ~40, p = 10;\n     loop {\n-        let i = q;\n+        let i = copy q;\n         p += *i;\n         if p > 100 { break; }\n     }"}, {"sha": "9fa814dd5cbddaffbf9668973618f15992a532e9", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -2,7 +2,7 @@\n \n fn foo() -> fn@() -> int {\n     let k = ~22;\n-    let _u = {a: k};\n+    let _u = {a: copy k};\n     return fn@(move k) -> int { 22 };\n }\n "}, {"sha": "ba49a5fd578e1f4c89c1cbdfe4ba6852bc87277b", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -3,6 +3,6 @@\n fn main() {\n     fn invoke(f: fn@()) { f(); }\n     let k = ~22;\n-    let _u = {a: k};\n+    let _u = {a: copy k};\n     invoke(|| log(error, k) )\n }"}, {"sha": "14acb23b89267e5e6a5b22a8cc51e5dadc2b63f5", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -30,7 +30,7 @@ fn runtest2(f: fn~(), frame_backoff: u32, last_stk: *u8) -> u32 {\n         // We switched stacks, go back and try to hit the dynamic linker\n         frame_backoff\n     } else {\n-        let frame_backoff = runtest2(f, frame_backoff, curr_stk);\n+        let frame_backoff = runtest2(copy f, frame_backoff, curr_stk);\n         if frame_backoff > 1u32 {\n             frame_backoff - 1u32\n         } else if frame_backoff == 1u32 {"}, {"sha": "4590542e3e86219b1e546143f46e21ae3a8c9eaa", "filename": "src/test/run-pass/newtype-polymorphic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -1,6 +1,6 @@\n enum myvec<X> = ~[X];\n \n-fn myvec_deref<X: Copy>(mv: myvec<X>) -> ~[X] { return *mv; }\n+fn myvec_deref<X: Copy>(mv: myvec<X>) -> ~[X] { return copy *mv; }\n \n fn myvec_elt<X: Copy>(mv: myvec<X>) -> X { return mv[0]; }\n "}, {"sha": "9bdc137b29170037288520e16e3ee19a702ad8ff", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -7,7 +7,7 @@ struct Point {\n }\n \n impl Point : ops::Add<Point,Point> {\n-    pure fn add(other: &Point) -> Point {\n+    pure fn add(&self, other: &Point) -> Point {\n         Point {x: self.x + (*other).x, y: self.y + (*other).y}\n     }\n }"}, {"sha": "8b409e244f096f03d2be594c27a3a6b680f24b25", "filename": "src/test/run-pass/rec-auto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Frec-auto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Frec-auto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-auto.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -6,6 +6,6 @@\n // Issue #50.\n fn main() {\n     let x = {foo: ~\"hello\", bar: ~\"world\"};\n-    log(debug, x.foo);\n-    log(debug, x.bar);\n+    log(debug, copy x.foo);\n+    log(debug, copy x.bar);\n }"}, {"sha": "126792847550b1d031c6e6b2f58cd9424d44d72a", "filename": "src/test/run-pass/ret-break-cont-in-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -22,8 +22,8 @@ fn find_pos<T:Eq>(n: T, h: ~[T]) -> Option<uint> {\n \n fn bail_deep(x: ~[~[bool]]) {\n     let mut seen = false;\n-    for iter(x) |x| {\n-        for iter(x) |x| {\n+    for iter(copy x) |x| {\n+        for iter(copy x) |x| {\n             assert !seen;\n             if x { seen = true; return; }\n         }"}, {"sha": "e9b6f2bca4c222cb960a43974278c48dba6d96b5", "filename": "src/test/run-pass/sendfn-generic-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -16,12 +16,12 @@ fn make_generic_record<A: Copy, B: Copy>(a: A, b: B) -> pair<A,B> {\n \n fn test05_start(&&f: fn~(&&v: float, &&v: ~str) -> pair<float, ~str>) {\n     let p = f(22.22f, ~\"Hi\");\n-    log(debug, p);\n+    log(debug, copy p);\n     assert p.a == 22.22f;\n     assert p.b == ~\"Hi\";\n \n     let q = f(44.44f, ~\"Ho\");\n-    log(debug, q);\n+    log(debug, copy q);\n     assert q.a == 44.44f;\n     assert q.b == ~\"Ho\";\n }"}, {"sha": "8fcc4e8aeaf65363c3d6a7945c91c9e7f28a66b6", "filename": "src/test/run-pass/shape_intrinsic_tag_then_rec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -25,6 +25,6 @@ fn main() {\n     let p_: path_ = { global: true, idents: ~[~\"hi\"], types: ~[t] };\n     let p: path = { data: p_, span: sp };\n     let x = { sp: sp, path: p };\n-    log(error, x.path);\n-    log(error, x);\n+    log(error, copy x.path);\n+    log(error, copy x);\n }"}, {"sha": "9767370fe7f8257f24843c2e39415ce5a414ea8d", "filename": "src/test/run-pass/stat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fstat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fstat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstat.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -8,7 +8,7 @@ fn main() {\n \n     {\n         match io::file_writer(&path, [io::Create, io::Truncate]) {\n-            Err(e) => fail e,\n+            Err(copy e) => fail e,\n             Ok(f) => {\n                 for uint::range(0, 1000) |_i| {\n                     f.write_u8(0);"}, {"sha": "496fb8dcb3f8ad732edd83bc80158446dca5974b", "filename": "src/test/run-pass/str-append.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fstr-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fstr-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-append.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -6,7 +6,7 @@ extern mod std;\n fn test1() {\n     let mut s: ~str = ~\"hello\";\n     s += ~\"world\";\n-    log(debug, s);\n+    log(debug, copy s);\n     assert (s[9] == 'd' as u8);\n }\n \n@@ -16,8 +16,8 @@ fn test2() {\n     let ff: ~str = ~\"abc\";\n     let a: ~str = ff + ~\"ABC\" + ff;\n     let b: ~str = ~\"ABC\" + ff + ~\"ABC\";\n-    log(debug, a);\n-    log(debug, b);\n+    log(debug, copy a);\n+    log(debug, copy b);\n     assert (a == ~\"abcABCabc\");\n     assert (b == ~\"ABCabcABC\");\n }"}, {"sha": "a493a1f1a5662e626d8d47b7278d5f616de91b44", "filename": "src/test/run-pass/str-concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fstr-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fstr-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-concat.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -6,6 +6,6 @@ fn main() {\n     let a: ~str = ~\"hello\";\n     let b: ~str = ~\"world\";\n     let s: ~str = a + b;\n-    log(debug, s);\n+    log(debug, copy s);\n     assert (s[9] == 'd' as u8);\n }"}, {"sha": "34656859cf9a90ce2b7eb6344346436e37a486c2", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -1,8 +1,8 @@\n extern mod std;\n \n fn test(actual: ~str, expected: ~str) {\n-    log(debug, actual);\n-    log(debug, expected);\n+    log(debug, copy actual);\n+    log(debug, copy expected);\n     assert (actual == expected);\n }\n \n@@ -249,4 +249,4 @@ fn more_floats() {\n     assert ~\"99\"          == fmt!(\"%.0f\", 98.5);\n     assert ~\"7.0000\"      == fmt!(\"%.4f\", 6.999999999);\n     assert ~\"3.141590000\" == fmt!(\"%.9f\", 3.14159);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "5f5ca11ffb8c656169b70f9123e73b9535cea9a9", "filename": "src/test/run-pass/trait-inheritance-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -5,7 +5,7 @@ trait MyNum : Add<self,self>, Sub<self,self>, Mul<self,self>, Eq { }\n struct MyInt { val: int }\n \n impl MyInt : Add<MyInt, MyInt> {\n-    pure fn add(other: &MyInt) -> MyInt { mi(self.val + other.val) }\n+    pure fn add(&self, other: &MyInt) -> MyInt { mi(self.val + other.val) }\n }\n \n impl MyInt : Sub<MyInt, MyInt> {"}, {"sha": "0707b7a5a38c697af657b30ac9a4d876e7786fe7", "filename": "src/test/run-pass/unique-assign-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -2,9 +2,9 @@ fn main() {\n     let i = ~mut 1;\n     // Should be a copy\n     let mut j;\n-    j = i;\n+    j = copy i;\n     *i = 2;\n     *j = 3;\n     assert *i == 2;\n     assert *j == 3;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "caf420bdefecaeb267e52fa533f8aa624a4c8052", "filename": "src/test/run-pass/unique-copy-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Funique-copy-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Funique-copy-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-copy-box.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -5,8 +5,8 @@ fn main() unsafe {\n     let i = ~@1;\n     let j = ~@2;\n     let rc1 = refcount(*i);\n-    let j = i;\n+    let j = copy i;\n     let rc2 = refcount(*i);\n     error!(\"rc1: %u rc2: %u\", rc1, rc2);\n     assert rc1 + 1u == rc2;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "017d5ddc666095fa4ccf8b4ce859baf8140d1a2d", "filename": "src/test/run-pass/unique-in-vec-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let a = ~[~mut 10];\n-    let b = a;\n+    let b = copy a;\n \n     assert *a[0] == 10;\n     assert *b[0] == 10;\n@@ -10,4 +10,4 @@ fn main() {\n \n     assert *a[0] == 20;\n     assert *b[0] == 10;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "b07481f20e9d780b677138e9d51f1c3d04c2cbd1", "filename": "src/test/run-pass/vec-ivec-deadlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fvec-ivec-deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608403227075586dfe676916bdce6796eef3d9bb/src%2Ftest%2Frun-pass%2Fvec-ivec-deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-ivec-deadlock.rs?ref=608403227075586dfe676916bdce6796eef3d9bb", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let a = ~[1, 2, 3, 4, 5];\n-    let mut b = ~[a, a];\n+    let mut b = ~[copy a, copy a];\n     b = b + b; // FIXME(#3387)---can't write b += b\n }"}]}