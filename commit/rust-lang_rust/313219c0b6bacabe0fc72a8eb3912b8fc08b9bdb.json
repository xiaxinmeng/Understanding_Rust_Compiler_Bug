{"sha": "313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb", "node_id": "C_kwDOAAsO6NoAKDMxMzIxOWMwYjZiYWNhYmUwZmM3MmE4ZWIzOTEyYjhmYzA4YjliZGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-25T06:14:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-25T06:14:35Z"}, "message": "Auto merge of #106430 - tmiasko:rm-dead-unwinds, r=cjgillot\n\nRemove dead unwinds before drop elaboration\n\nAs a part of drop elaboration, we identify dead unwinds, i.e., unwind\nedges on a drop terminators which are known to be unreachable, because\nthere is no need to drop anything.\n\nPreviously, the data flow framework was informed about the dead unwinds,\nand it assumed those edges are absent from MIR. Unfortunately, the data\nflow framework wasn't consistent in maintaining this assumption.\n\nIn particular, if a block was reachable only through a dead unwind edge,\nits state was propagated to other blocks still. This became an issue in\nthe context of change removes DropAndReplace terminator, since it\nintroduces initialization into cleanup blocks.\n\nTo avoid this issue, remove unreachable unwind edges before the drop\nelaboration, and elaborate only blocks that remain reachable.\n\ncc `@Zeegomo`", "tree": {"sha": "e70382a7e97ea8af4644d043ed705067115390a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e70382a7e97ea8af4644d043ed705067115390a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb", "html_url": "https://github.com/rust-lang/rust/commit/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ffabf3c8f2ed81d0248c54365445f28bd9507e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ffabf3c8f2ed81d0248c54365445f28bd9507e5", "html_url": "https://github.com/rust-lang/rust/commit/6ffabf3c8f2ed81d0248c54365445f28bd9507e5"}, {"sha": "2a70524397728e4d13e494667fc4865af42c879b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a70524397728e4d13e494667fc4865af42c879b", "html_url": "https://github.com/rust-lang/rust/commit/2a70524397728e4d13e494667fc4865af42c879b"}], "stats": {"total": 791, "additions": 389, "deletions": 402}, "files": [{"sha": "2ae3ae02fcc4e24634114a410ad80e7aa8bf8bc4", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "modified", "additions": 3, "deletions": 28, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb", "patch": "@@ -1,4 +1,3 @@\n-use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::{self, BasicBlock, Location, SwitchTargets};\n use rustc_middle::ty::TyCtxt;\n use std::ops::RangeInclusive;\n@@ -54,7 +53,6 @@ pub trait Direction {\n         analysis: &A,\n         tcx: TyCtxt<'tcx>,\n         body: &mir::Body<'tcx>,\n-        dead_unwinds: Option<&BitSet<BasicBlock>>,\n         exit_state: &mut A::Domain,\n         block: (BasicBlock, &'_ mir::BasicBlockData<'tcx>),\n         propagate: impl FnMut(BasicBlock, &A::Domain),\n@@ -221,7 +219,6 @@ impl Direction for Backward {\n         analysis: &A,\n         _tcx: TyCtxt<'tcx>,\n         body: &mir::Body<'tcx>,\n-        dead_unwinds: Option<&BitSet<BasicBlock>>,\n         exit_state: &mut A::Domain,\n         (bb, _bb_data): (BasicBlock, &'_ mir::BasicBlockData<'tcx>),\n         mut propagate: impl FnMut(BasicBlock, &A::Domain),\n@@ -278,20 +275,6 @@ impl Direction for Backward {\n                     }\n                 }\n \n-                // Ignore dead unwinds.\n-                mir::TerminatorKind::Call { cleanup: Some(unwind), .. }\n-                | mir::TerminatorKind::Assert { cleanup: Some(unwind), .. }\n-                | mir::TerminatorKind::Drop { unwind: Some(unwind), .. }\n-                | mir::TerminatorKind::DropAndReplace { unwind: Some(unwind), .. }\n-                | mir::TerminatorKind::FalseUnwind { unwind: Some(unwind), .. }\n-                | mir::TerminatorKind::InlineAsm { cleanup: Some(unwind), .. }\n-                    if unwind == bb =>\n-                {\n-                    if dead_unwinds.map_or(true, |dead| !dead.contains(pred)) {\n-                        propagate(pred, exit_state);\n-                    }\n-                }\n-\n                 _ => propagate(pred, exit_state),\n             }\n         }\n@@ -304,7 +287,6 @@ struct BackwardSwitchIntEdgeEffectsApplier<'a, 'tcx, D, F> {\n     exit_state: &'a mut D,\n     bb: BasicBlock,\n     propagate: &'a mut F,\n-\n     effects_applied: bool,\n }\n \n@@ -484,7 +466,6 @@ impl Direction for Forward {\n         analysis: &A,\n         _tcx: TyCtxt<'tcx>,\n         _body: &mir::Body<'tcx>,\n-        dead_unwinds: Option<&BitSet<BasicBlock>>,\n         exit_state: &mut A::Domain,\n         (bb, bb_data): (BasicBlock, &'_ mir::BasicBlockData<'tcx>),\n         mut propagate: impl FnMut(BasicBlock, &A::Domain),\n@@ -502,9 +483,7 @@ impl Direction for Forward {\n             | DropAndReplace { target, unwind, value: _, place: _ }\n             | FalseUnwind { real_target: target, unwind } => {\n                 if let Some(unwind) = unwind {\n-                    if dead_unwinds.map_or(true, |dead| !dead.contains(bb)) {\n-                        propagate(unwind, exit_state);\n-                    }\n+                    propagate(unwind, exit_state);\n                 }\n \n                 propagate(target, exit_state);\n@@ -534,9 +513,7 @@ impl Direction for Forward {\n                 fn_span: _,\n             } => {\n                 if let Some(unwind) = cleanup {\n-                    if dead_unwinds.map_or(true, |dead| !dead.contains(bb)) {\n-                        propagate(unwind, exit_state);\n-                    }\n+                    propagate(unwind, exit_state);\n                 }\n \n                 if let Some(target) = target {\n@@ -560,9 +537,7 @@ impl Direction for Forward {\n                 cleanup,\n             } => {\n                 if let Some(unwind) = cleanup {\n-                    if dead_unwinds.map_or(true, |dead| !dead.contains(bb)) {\n-                        propagate(unwind, exit_state);\n-                    }\n+                    propagate(unwind, exit_state);\n                 }\n \n                 if let Some(target) = destination {"}, {"sha": "91c3bf0ad21f1f7f2da213cc025c1c9115af1170", "filename": "compiler/rustc_mir_dataflow/src/framework/engine.rs", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs?ref=313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb", "patch": "@@ -12,7 +12,6 @@ use rustc_ast as ast;\n use rustc_data_structures::work_queue::WorkQueue;\n use rustc_graphviz as dot;\n use rustc_hir::def_id::DefId;\n-use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::{self, traversal, BasicBlock};\n use rustc_middle::mir::{create_dump_file, dump_enabled};\n@@ -78,7 +77,6 @@ where\n {\n     tcx: TyCtxt<'tcx>,\n     body: &'a mir::Body<'tcx>,\n-    dead_unwinds: Option<&'a BitSet<BasicBlock>>,\n     entry_sets: IndexVec<BasicBlock, A::Domain>,\n     pass_name: Option<&'static str>,\n     analysis: A,\n@@ -154,25 +152,7 @@ where\n             bug!(\"`initialize_start_block` is not yet supported for backward dataflow analyses\");\n         }\n \n-        Engine {\n-            analysis,\n-            tcx,\n-            body,\n-            dead_unwinds: None,\n-            pass_name: None,\n-            entry_sets,\n-            apply_trans_for_block,\n-        }\n-    }\n-\n-    /// Signals that we do not want dataflow state to propagate across unwind edges for these\n-    /// `BasicBlock`s.\n-    ///\n-    /// You must take care that `dead_unwinds` does not contain a `BasicBlock` that *can* actually\n-    /// unwind during execution. Otherwise, your dataflow results will not be correct.\n-    pub fn dead_unwinds(mut self, dead_unwinds: &'a BitSet<BasicBlock>) -> Self {\n-        self.dead_unwinds = Some(dead_unwinds);\n-        self\n+        Engine { analysis, tcx, body, pass_name: None, entry_sets, apply_trans_for_block }\n     }\n \n     /// Adds an identifier to the graphviz output for this particular run of a dataflow analysis.\n@@ -190,14 +170,7 @@ where\n         A::Domain: DebugWithContext<A>,\n     {\n         let Engine {\n-            analysis,\n-            body,\n-            dead_unwinds,\n-            mut entry_sets,\n-            tcx,\n-            apply_trans_for_block,\n-            pass_name,\n-            ..\n+            analysis, body, mut entry_sets, tcx, apply_trans_for_block, pass_name, ..\n         } = self;\n \n         let mut dirty_queue: WorkQueue<BasicBlock> = WorkQueue::with_none(body.basic_blocks.len());\n@@ -236,7 +209,6 @@ where\n                 &analysis,\n                 tcx,\n                 body,\n-                dead_unwinds,\n                 &mut state,\n                 (bb, bb_data),\n                 |target: BasicBlock, state: &A::Domain| {"}, {"sha": "bdfd8dc6e99b56c02dfccd5c8dc1d6219c9806d8", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 39, "deletions": 18, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb", "patch": "@@ -67,25 +67,24 @@ impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n         };\n         let un_derefer = UnDerefer { tcx: tcx, derefer_sidetable: side_table };\n         let elaborate_patch = {\n-            let body = &*body;\n             let env = MoveDataParamEnv { move_data, param_env };\n-            let dead_unwinds = find_dead_unwinds(tcx, body, &env, &un_derefer);\n+            remove_dead_unwinds(tcx, body, &env, &un_derefer);\n \n             let inits = MaybeInitializedPlaces::new(tcx, body, &env)\n                 .into_engine(tcx, body)\n-                .dead_unwinds(&dead_unwinds)\n                 .pass_name(\"elaborate_drops\")\n                 .iterate_to_fixpoint()\n                 .into_results_cursor(body);\n \n             let uninits = MaybeUninitializedPlaces::new(tcx, body, &env)\n                 .mark_inactive_variants_as_uninit()\n                 .into_engine(tcx, body)\n-                .dead_unwinds(&dead_unwinds)\n                 .pass_name(\"elaborate_drops\")\n                 .iterate_to_fixpoint()\n                 .into_results_cursor(body);\n \n+            let reachable = traversal::reachable_as_bitset(body);\n+\n             ElaborateDropsCtxt {\n                 tcx,\n                 body,\n@@ -94,6 +93,7 @@ impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n                 drop_flags: Default::default(),\n                 patch: MirPatch::new(body),\n                 un_derefer: un_derefer,\n+                reachable,\n             }\n             .elaborate()\n         };\n@@ -102,22 +102,21 @@ impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n     }\n }\n \n-/// Returns the set of basic blocks whose unwind edges are known\n-/// to not be reachable, because they are `drop` terminators\n+/// Removes unwind edges which are known to be unreachable, because they are in `drop` terminators\n /// that can't drop anything.\n-fn find_dead_unwinds<'tcx>(\n+fn remove_dead_unwinds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    body: &Body<'tcx>,\n+    body: &mut Body<'tcx>,\n     env: &MoveDataParamEnv<'tcx>,\n     und: &UnDerefer<'tcx>,\n-) -> BitSet<BasicBlock> {\n-    debug!(\"find_dead_unwinds({:?})\", body.span);\n+) {\n+    debug!(\"remove_dead_unwinds({:?})\", body.span);\n     // We only need to do this pass once, because unwind edges can only\n     // reach cleanup blocks, which can't have unwind edges themselves.\n-    let mut dead_unwinds = BitSet::new_empty(body.basic_blocks.len());\n+    let mut dead_unwinds = Vec::new();\n     let mut flow_inits = MaybeInitializedPlaces::new(tcx, body, &env)\n         .into_engine(tcx, body)\n-        .pass_name(\"find_dead_unwinds\")\n+        .pass_name(\"remove_dead_unwinds\")\n         .iterate_to_fixpoint()\n         .into_results_cursor(body);\n     for (bb, bb_data) in body.basic_blocks.iter_enumerated() {\n@@ -129,16 +128,16 @@ fn find_dead_unwinds<'tcx>(\n             _ => continue,\n         };\n \n-        debug!(\"find_dead_unwinds @ {:?}: {:?}\", bb, bb_data);\n+        debug!(\"remove_dead_unwinds @ {:?}: {:?}\", bb, bb_data);\n \n         let LookupResult::Exact(path) = env.move_data.rev_lookup.find(place.as_ref()) else {\n-            debug!(\"find_dead_unwinds: has parent; skipping\");\n+            debug!(\"remove_dead_unwinds: has parent; skipping\");\n             continue;\n         };\n \n         flow_inits.seek_before_primary_effect(body.terminator_loc(bb));\n         debug!(\n-            \"find_dead_unwinds @ {:?}: path({:?})={:?}; init_data={:?}\",\n+            \"remove_dead_unwinds @ {:?}: path({:?})={:?}; init_data={:?}\",\n             bb,\n             place,\n             path,\n@@ -150,13 +149,22 @@ fn find_dead_unwinds<'tcx>(\n             maybe_live |= flow_inits.contains(child);\n         });\n \n-        debug!(\"find_dead_unwinds @ {:?}: maybe_live={}\", bb, maybe_live);\n+        debug!(\"remove_dead_unwinds @ {:?}: maybe_live={}\", bb, maybe_live);\n         if !maybe_live {\n-            dead_unwinds.insert(bb);\n+            dead_unwinds.push(bb);\n         }\n     }\n \n-    dead_unwinds\n+    if dead_unwinds.is_empty() {\n+        return;\n+    }\n+\n+    let basic_blocks = body.basic_blocks.as_mut();\n+    for &bb in dead_unwinds.iter() {\n+        if let Some(unwind) = basic_blocks[bb].terminator_mut().unwind_mut() {\n+            *unwind = None;\n+        }\n+    }\n }\n \n struct InitializationData<'mir, 'tcx> {\n@@ -290,6 +298,7 @@ struct ElaborateDropsCtxt<'a, 'tcx> {\n     drop_flags: FxHashMap<MovePathIndex, Local>,\n     patch: MirPatch<'tcx>,\n     un_derefer: UnDerefer<'tcx>,\n+    reachable: BitSet<BasicBlock>,\n }\n \n impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n@@ -329,6 +338,9 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n \n     fn collect_drop_flags(&mut self) {\n         for (bb, data) in self.body.basic_blocks.iter_enumerated() {\n+            if !self.reachable.contains(bb) {\n+                continue;\n+            }\n             let terminator = data.terminator();\n             let place = match terminator.kind {\n                 TerminatorKind::Drop { ref place, .. }\n@@ -384,6 +396,9 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n \n     fn elaborate_drops(&mut self) {\n         for (bb, data) in self.body.basic_blocks.iter_enumerated() {\n+            if !self.reachable.contains(bb) {\n+                continue;\n+            }\n             let loc = Location { block: bb, statement_index: data.statements.len() };\n             let terminator = data.terminator();\n \n@@ -541,6 +556,9 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n \n     fn drop_flags_for_fn_rets(&mut self) {\n         for (bb, data) in self.body.basic_blocks.iter_enumerated() {\n+            if !self.reachable.contains(bb) {\n+                continue;\n+            }\n             if let TerminatorKind::Call {\n                 destination, target: Some(tgt), cleanup: Some(_), ..\n             } = data.terminator().kind\n@@ -576,6 +594,9 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         // clobbered before they are read.\n \n         for (bb, data) in self.body.basic_blocks.iter_enumerated() {\n+            if !self.reachable.contains(bb) {\n+                continue;\n+            }\n             debug!(\"drop_flags_for_locs({:?})\", data);\n             for i in 0..(data.statements.len() + 1) {\n                 debug!(\"drop_flag_for_locs: stmt {}\", i);"}, {"sha": "c2ea3ac502f89dc3f89446f4700bea44444d19a4", "filename": "tests/mir-opt/issue_41110.main.ElaborateDrops.after.mir", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/6ffabf3c8f2ed81d0248c54365445f28bd9507e5/tests%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6ffabf3c8f2ed81d0248c54365445f28bd9507e5/tests%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir?ref=6ffabf3c8f2ed81d0248c54365445f28bd9507e5", "patch": "@@ -1,70 +0,0 @@\n-// MIR for `main` after ElaborateDrops\n-\n-fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/issue_41110.rs:+0:11: +0:11\n-    let _1: ();                          // in scope 0 at $DIR/issue_41110.rs:+1:9: +1:10\n-    let mut _2: S;                       // in scope 0 at $DIR/issue_41110.rs:+1:13: +1:14\n-    let mut _3: S;                       // in scope 0 at $DIR/issue_41110.rs:+1:21: +1:27\n-    let mut _4: S;                       // in scope 0 at $DIR/issue_41110.rs:+1:21: +1:22\n-    let mut _5: bool;                    // in scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n-    scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/issue_41110.rs:+1:9: +1:10\n-    }\n-\n-    bb0: {\n-        _5 = const false;                // scope 0 at $DIR/issue_41110.rs:+1:9: +1:10\n-        StorageLive(_1);                 // scope 0 at $DIR/issue_41110.rs:+1:9: +1:10\n-        StorageLive(_2);                 // scope 0 at $DIR/issue_41110.rs:+1:13: +1:14\n-        _5 = const true;                 // scope 0 at $DIR/issue_41110.rs:+1:13: +1:14\n-        _2 = S;                          // scope 0 at $DIR/issue_41110.rs:+1:13: +1:14\n-        StorageLive(_3);                 // scope 0 at $DIR/issue_41110.rs:+1:21: +1:27\n-        StorageLive(_4);                 // scope 0 at $DIR/issue_41110.rs:+1:21: +1:22\n-        _4 = S;                          // scope 0 at $DIR/issue_41110.rs:+1:21: +1:22\n-        _3 = S::id(move _4) -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/issue_41110.rs:+1:21: +1:27\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue_41110.rs:8:23: 8:25\n-                                         // + literal: Const { ty: fn(S) -> S {S::id}, val: Value(<ZST>) }\n-    }\n-\n-    bb1: {\n-        StorageDead(_4);                 // scope 0 at $DIR/issue_41110.rs:+1:26: +1:27\n-        _5 = const false;                // scope 0 at $DIR/issue_41110.rs:+1:13: +1:28\n-        _1 = S::other(move _2, move _3) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/issue_41110.rs:+1:13: +1:28\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue_41110.rs:8:15: 8:20\n-                                         // + literal: Const { ty: fn(S, S) {S::other}, val: Value(<ZST>) }\n-    }\n-\n-    bb2: {\n-        StorageDead(_3);                 // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n-        _5 = const false;                // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n-        StorageDead(_2);                 // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n-        _0 = const ();                   // scope 0 at $DIR/issue_41110.rs:+0:11: +2:2\n-        StorageDead(_1);                 // scope 0 at $DIR/issue_41110.rs:+2:1: +2:2\n-        return;                          // scope 0 at $DIR/issue_41110.rs:+2:2: +2:2\n-    }\n-\n-    bb3 (cleanup): {\n-        goto -> bb5;                     // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n-    }\n-\n-    bb4 (cleanup): {\n-        goto -> bb5;                     // scope 0 at $DIR/issue_41110.rs:+1:26: +1:27\n-    }\n-\n-    bb5 (cleanup): {\n-        goto -> bb8;                     // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n-    }\n-\n-    bb6 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue_41110.rs:+0:1: +2:2\n-    }\n-\n-    bb7 (cleanup): {\n-        drop(_2) -> bb6;                 // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n-    }\n-\n-    bb8 (cleanup): {\n-        switchInt(_5) -> [0: bb6, otherwise: bb7]; // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n-    }\n-}"}, {"sha": "7ac75b51a370f67929c23de185cd4181f81955d6", "filename": "tests/mir-opt/issue_41110.main.ElaborateDrops.diff", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb/tests%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb/tests%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.diff?ref=313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb", "patch": "@@ -0,0 +1,75 @@\n+- // MIR for `main` before ElaborateDrops\n++ // MIR for `main` after ElaborateDrops\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue_41110.rs:+0:11: +0:11\n+      let _1: ();                          // in scope 0 at $DIR/issue_41110.rs:+1:9: +1:10\n+      let mut _2: S;                       // in scope 0 at $DIR/issue_41110.rs:+1:13: +1:14\n+      let mut _3: S;                       // in scope 0 at $DIR/issue_41110.rs:+1:21: +1:27\n+      let mut _4: S;                       // in scope 0 at $DIR/issue_41110.rs:+1:21: +1:22\n++     let mut _5: bool;                    // in scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/issue_41110.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n++         _5 = const false;                // scope 0 at $DIR/issue_41110.rs:+1:9: +1:10\n+          StorageLive(_1);                 // scope 0 at $DIR/issue_41110.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/issue_41110.rs:+1:13: +1:14\n++         _5 = const true;                 // scope 0 at $DIR/issue_41110.rs:+1:13: +1:14\n+          _2 = S;                          // scope 0 at $DIR/issue_41110.rs:+1:13: +1:14\n+          StorageLive(_3);                 // scope 0 at $DIR/issue_41110.rs:+1:21: +1:27\n+          StorageLive(_4);                 // scope 0 at $DIR/issue_41110.rs:+1:21: +1:22\n+          _4 = S;                          // scope 0 at $DIR/issue_41110.rs:+1:21: +1:22\n+          _3 = S::id(move _4) -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/issue_41110.rs:+1:21: +1:27\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue_41110.rs:8:23: 8:25\n+                                           // + literal: Const { ty: fn(S) -> S {S::id}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_4);                 // scope 0 at $DIR/issue_41110.rs:+1:26: +1:27\n++         _5 = const false;                // scope 0 at $DIR/issue_41110.rs:+1:13: +1:28\n+          _1 = S::other(move _2, move _3) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/issue_41110.rs:+1:13: +1:28\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue_41110.rs:8:15: 8:20\n+                                           // + literal: Const { ty: fn(S, S) {S::other}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_3);                 // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n++         _5 = const false;                // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n+          StorageDead(_2);                 // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n+          _0 = const ();                   // scope 0 at $DIR/issue_41110.rs:+0:11: +2:2\n+          StorageDead(_1);                 // scope 0 at $DIR/issue_41110.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/issue_41110.rs:+2:2: +2:2\n+      }\n+  \n+      bb3 (cleanup): {\n+-         drop(_3) -> bb5;                 // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n++         goto -> bb5;                     // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n+      }\n+  \n+      bb4 (cleanup): {\n+-         drop(_4) -> bb5;                 // scope 0 at $DIR/issue_41110.rs:+1:26: +1:27\n++         goto -> bb5;                     // scope 0 at $DIR/issue_41110.rs:+1:26: +1:27\n+      }\n+  \n+      bb5 (cleanup): {\n+-         drop(_2) -> bb6;                 // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n++         goto -> bb8;                     // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n+      }\n+  \n+      bb6 (cleanup): {\n+          resume;                          // scope 0 at $DIR/issue_41110.rs:+0:1: +2:2\n++     }\n++ \n++     bb7 (cleanup): {\n++         drop(_2) -> bb6;                 // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n++     }\n++ \n++     bb8 (cleanup): {\n++         switchInt(_5) -> [0: bb6, otherwise: bb7]; // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n+      }\n+  }\n+  "}, {"sha": "e1067ce53e41dd03f33a081c698f6177b58e78e7", "filename": "tests/mir-opt/issue_41110.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb/tests%2Fmir-opt%2Fissue_41110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb/tests%2Fmir-opt%2Fissue_41110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_41110.rs?ref=313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb", "patch": "@@ -3,14 +3,14 @@\n // check that we don't emit multiple drop flags when they are not needed.\n \n \n-// EMIT_MIR issue_41110.main.ElaborateDrops.after.mir\n+// EMIT_MIR issue_41110.main.ElaborateDrops.diff\n fn main() {\n     let x = S.other(S.id());\n }\n \n // no_mangle to make sure this gets instantiated even in an executable.\n #[no_mangle]\n-// EMIT_MIR issue_41110.test.ElaborateDrops.after.mir\n+// EMIT_MIR issue_41110.test.ElaborateDrops.diff\n pub fn test() {\n     let u = S;\n     let mut v = S;"}, {"sha": "82989c3f071b43d39f022ca6dadc2e802aa7404e", "filename": "tests/mir-opt/issue_41110.test.ElaborateDrops.after.mir", "status": "removed", "additions": 0, "deletions": 101, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/6ffabf3c8f2ed81d0248c54365445f28bd9507e5/tests%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6ffabf3c8f2ed81d0248c54365445f28bd9507e5/tests%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir?ref=6ffabf3c8f2ed81d0248c54365445f28bd9507e5", "patch": "@@ -1,101 +0,0 @@\n-// MIR for `test` after ElaborateDrops\n-\n-fn test() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/issue_41110.rs:+0:15: +0:15\n-    let _1: S;                           // in scope 0 at $DIR/issue_41110.rs:+1:9: +1:10\n-    let _3: ();                          // in scope 0 at $DIR/issue_41110.rs:+3:5: +3:12\n-    let mut _4: S;                       // in scope 0 at $DIR/issue_41110.rs:+3:10: +3:11\n-    let mut _5: S;                       // in scope 0 at $DIR/issue_41110.rs:+4:9: +4:10\n-    let mut _6: bool;                    // in scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n-    scope 1 {\n-        debug u => _1;                   // in scope 1 at $DIR/issue_41110.rs:+1:9: +1:10\n-        let mut _2: S;                   // in scope 1 at $DIR/issue_41110.rs:+2:9: +2:14\n-        scope 2 {\n-            debug v => _2;               // in scope 2 at $DIR/issue_41110.rs:+2:9: +2:14\n-        }\n-    }\n-\n-    bb0: {\n-        _6 = const false;                // scope 0 at $DIR/issue_41110.rs:+1:9: +1:10\n-        StorageLive(_1);                 // scope 0 at $DIR/issue_41110.rs:+1:9: +1:10\n-        _6 = const true;                 // scope 0 at $DIR/issue_41110.rs:+1:13: +1:14\n-        _1 = S;                          // scope 0 at $DIR/issue_41110.rs:+1:13: +1:14\n-        StorageLive(_2);                 // scope 1 at $DIR/issue_41110.rs:+2:9: +2:14\n-        _2 = S;                          // scope 1 at $DIR/issue_41110.rs:+2:17: +2:18\n-        StorageLive(_3);                 // scope 2 at $DIR/issue_41110.rs:+3:5: +3:12\n-        StorageLive(_4);                 // scope 2 at $DIR/issue_41110.rs:+3:10: +3:11\n-        _4 = move _2;                    // scope 2 at $DIR/issue_41110.rs:+3:10: +3:11\n-        _3 = std::mem::drop::<S>(move _4) -> [return: bb1, unwind: bb7]; // scope 2 at $DIR/issue_41110.rs:+3:5: +3:12\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue_41110.rs:17:5: 17:9\n-                                         // + literal: Const { ty: fn(S) {std::mem::drop::<S>}, val: Value(<ZST>) }\n-    }\n-\n-    bb1: {\n-        StorageDead(_4);                 // scope 2 at $DIR/issue_41110.rs:+3:11: +3:12\n-        StorageDead(_3);                 // scope 2 at $DIR/issue_41110.rs:+3:12: +3:13\n-        StorageLive(_5);                 // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n-        _6 = const false;                // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n-        _5 = move _1;                    // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n-        goto -> bb12;                    // scope 2 at $DIR/issue_41110.rs:+4:5: +4:6\n-    }\n-\n-    bb2: {\n-        goto -> bb3;                     // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n-    }\n-\n-    bb3: {\n-        StorageDead(_5);                 // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n-        _0 = const ();                   // scope 0 at $DIR/issue_41110.rs:+0:15: +5:2\n-        drop(_2) -> [return: bb4, unwind: bb9]; // scope 1 at $DIR/issue_41110.rs:+5:1: +5:2\n-    }\n-\n-    bb4: {\n-        StorageDead(_2);                 // scope 1 at $DIR/issue_41110.rs:+5:1: +5:2\n-        goto -> bb5;                     // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n-    }\n-\n-    bb5: {\n-        _6 = const false;                // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n-        StorageDead(_1);                 // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n-        return;                          // scope 0 at $DIR/issue_41110.rs:+5:2: +5:2\n-    }\n-\n-    bb6 (cleanup): {\n-        goto -> bb8;                     // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n-    }\n-\n-    bb7 (cleanup): {\n-        goto -> bb8;                     // scope 2 at $DIR/issue_41110.rs:+3:11: +3:12\n-    }\n-\n-    bb8 (cleanup): {\n-        goto -> bb9;                     // scope 1 at $DIR/issue_41110.rs:+5:1: +5:2\n-    }\n-\n-    bb9 (cleanup): {\n-        goto -> bb14;                    // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n-    }\n-\n-    bb10 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue_41110.rs:+0:1: +5:2\n-    }\n-\n-    bb11 (cleanup): {\n-        _2 = move _5;                    // scope 2 at $DIR/issue_41110.rs:+4:5: +4:6\n-        goto -> bb6;                     // scope 2 at $DIR/issue_41110.rs:+4:5: +4:6\n-    }\n-\n-    bb12: {\n-        _2 = move _5;                    // scope 2 at $DIR/issue_41110.rs:+4:5: +4:6\n-        goto -> bb2;                     // scope 2 at $DIR/issue_41110.rs:+4:5: +4:6\n-    }\n-\n-    bb13 (cleanup): {\n-        drop(_1) -> bb10;                // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n-    }\n-\n-    bb14 (cleanup): {\n-        switchInt(_6) -> [0: bb10, otherwise: bb13]; // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n-    }\n-}"}, {"sha": "79e3d073be5d70ee85af71458ce46a8dfc80d7fd", "filename": "tests/mir-opt/issue_41110.test.ElaborateDrops.diff", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb/tests%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb/tests%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.diff?ref=313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb", "patch": "@@ -0,0 +1,109 @@\n+- // MIR for `test` before ElaborateDrops\n++ // MIR for `test` after ElaborateDrops\n+  \n+  fn test() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue_41110.rs:+0:15: +0:15\n+      let _1: S;                           // in scope 0 at $DIR/issue_41110.rs:+1:9: +1:10\n+      let _3: ();                          // in scope 0 at $DIR/issue_41110.rs:+3:5: +3:12\n+      let mut _4: S;                       // in scope 0 at $DIR/issue_41110.rs:+3:10: +3:11\n+      let mut _5: S;                       // in scope 0 at $DIR/issue_41110.rs:+4:9: +4:10\n++     let mut _6: bool;                    // in scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n+      scope 1 {\n+          debug u => _1;                   // in scope 1 at $DIR/issue_41110.rs:+1:9: +1:10\n+          let mut _2: S;                   // in scope 1 at $DIR/issue_41110.rs:+2:9: +2:14\n+          scope 2 {\n+              debug v => _2;               // in scope 2 at $DIR/issue_41110.rs:+2:9: +2:14\n+          }\n+      }\n+  \n+      bb0: {\n++         _6 = const false;                // scope 0 at $DIR/issue_41110.rs:+1:9: +1:10\n+          StorageLive(_1);                 // scope 0 at $DIR/issue_41110.rs:+1:9: +1:10\n++         _6 = const true;                 // scope 0 at $DIR/issue_41110.rs:+1:13: +1:14\n+          _1 = S;                          // scope 0 at $DIR/issue_41110.rs:+1:13: +1:14\n+          StorageLive(_2);                 // scope 1 at $DIR/issue_41110.rs:+2:9: +2:14\n+          _2 = S;                          // scope 1 at $DIR/issue_41110.rs:+2:17: +2:18\n+          StorageLive(_3);                 // scope 2 at $DIR/issue_41110.rs:+3:5: +3:12\n+          StorageLive(_4);                 // scope 2 at $DIR/issue_41110.rs:+3:10: +3:11\n+          _4 = move _2;                    // scope 2 at $DIR/issue_41110.rs:+3:10: +3:11\n+          _3 = std::mem::drop::<S>(move _4) -> [return: bb1, unwind: bb7]; // scope 2 at $DIR/issue_41110.rs:+3:5: +3:12\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue_41110.rs:17:5: 17:9\n+                                           // + literal: Const { ty: fn(S) {std::mem::drop::<S>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_4);                 // scope 2 at $DIR/issue_41110.rs:+3:11: +3:12\n+          StorageDead(_3);                 // scope 2 at $DIR/issue_41110.rs:+3:12: +3:13\n+          StorageLive(_5);                 // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n++         _6 = const false;                // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n+          _5 = move _1;                    // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n+-         replace(_2 <- move _5) -> [return: bb2, unwind: bb6]; // scope 2 at $DIR/issue_41110.rs:+4:5: +4:6\n++         goto -> bb12;                    // scope 2 at $DIR/issue_41110.rs:+4:5: +4:6\n+      }\n+  \n+      bb2: {\n+-         drop(_5) -> [return: bb3, unwind: bb8]; // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n++         goto -> bb3;                     // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n+      }\n+  \n+      bb3: {\n+          StorageDead(_5);                 // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n+          _0 = const ();                   // scope 0 at $DIR/issue_41110.rs:+0:15: +5:2\n+          drop(_2) -> [return: bb4, unwind: bb9]; // scope 1 at $DIR/issue_41110.rs:+5:1: +5:2\n+      }\n+  \n+      bb4: {\n+          StorageDead(_2);                 // scope 1 at $DIR/issue_41110.rs:+5:1: +5:2\n+-         drop(_1) -> bb5;                 // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n++         goto -> bb5;                     // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n+      }\n+  \n+      bb5: {\n++         _6 = const false;                // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n+          StorageDead(_1);                 // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/issue_41110.rs:+5:2: +5:2\n+      }\n+  \n+      bb6 (cleanup): {\n+          drop(_5) -> bb8;                 // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n+      }\n+  \n+      bb7 (cleanup): {\n+-         drop(_4) -> bb8;                 // scope 2 at $DIR/issue_41110.rs:+3:11: +3:12\n++         goto -> bb8;                     // scope 2 at $DIR/issue_41110.rs:+3:11: +3:12\n+      }\n+  \n+      bb8 (cleanup): {\n+-         drop(_2) -> bb9;                 // scope 1 at $DIR/issue_41110.rs:+5:1: +5:2\n++         goto -> bb9;                     // scope 1 at $DIR/issue_41110.rs:+5:1: +5:2\n+      }\n+  \n+      bb9 (cleanup): {\n+-         drop(_1) -> bb10;                // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n++         goto -> bb14;                    // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n+      }\n+  \n+      bb10 (cleanup): {\n+          resume;                          // scope 0 at $DIR/issue_41110.rs:+0:1: +5:2\n++     }\n++ \n++     bb11 (cleanup): {\n++         _2 = move _5;                    // scope 2 at $DIR/issue_41110.rs:+4:5: +4:6\n++         goto -> bb10;                    // scope 2 at $DIR/issue_41110.rs:+4:5: +4:6\n++     }\n++ \n++     bb12: {\n++         _2 = move _5;                    // scope 2 at $DIR/issue_41110.rs:+4:5: +4:6\n++         goto -> bb2;                     // scope 2 at $DIR/issue_41110.rs:+4:5: +4:6\n++     }\n++ \n++     bb13 (cleanup): {\n++         drop(_1) -> bb10;                // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n++     }\n++ \n++     bb14 (cleanup): {\n++         switchInt(_6) -> [0: bb10, otherwise: bb13]; // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n+      }\n+  }\n+  "}, {"sha": "00504273245b1d2a9acb320e5a5929061fb6a401", "filename": "tests/mir-opt/issue_41888.main.ElaborateDrops.after.mir", "status": "removed", "additions": 0, "deletions": 152, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/6ffabf3c8f2ed81d0248c54365445f28bd9507e5/tests%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6ffabf3c8f2ed81d0248c54365445f28bd9507e5/tests%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir?ref=6ffabf3c8f2ed81d0248c54365445f28bd9507e5", "patch": "@@ -1,152 +0,0 @@\n-// MIR for `main` after ElaborateDrops\n-\n-fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/issue_41888.rs:+0:11: +0:11\n-    let _1: E;                           // in scope 0 at $DIR/issue_41888.rs:+1:9: +1:10\n-    let mut _2: bool;                    // in scope 0 at $DIR/issue_41888.rs:+2:8: +2:14\n-    let mut _3: E;                       // in scope 0 at $DIR/issue_41888.rs:+3:13: +3:20\n-    let mut _4: K;                       // in scope 0 at $DIR/issue_41888.rs:+3:18: +3:19\n-    let mut _5: isize;                   // in scope 0 at $DIR/issue_41888.rs:+4:16: +4:24\n-    let mut _7: bool;                    // in scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-    let mut _8: bool;                    // in scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-    let mut _9: bool;                    // in scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-    let mut _10: isize;                  // in scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-    let mut _11: isize;                  // in scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-    scope 1 {\n-        debug e => _1;                   // in scope 1 at $DIR/issue_41888.rs:+1:9: +1:10\n-        scope 2 {\n-            debug _k => _6;              // in scope 2 at $DIR/issue_41888.rs:+4:21: +4:23\n-            let _6: K;                   // in scope 2 at $DIR/issue_41888.rs:+4:21: +4:23\n-        }\n-    }\n-\n-    bb0: {\n-        _9 = const false;                // scope 0 at $DIR/issue_41888.rs:+1:9: +1:10\n-        _7 = const false;                // scope 0 at $DIR/issue_41888.rs:+1:9: +1:10\n-        _8 = const false;                // scope 0 at $DIR/issue_41888.rs:+1:9: +1:10\n-        StorageLive(_1);                 // scope 0 at $DIR/issue_41888.rs:+1:9: +1:10\n-        StorageLive(_2);                 // scope 1 at $DIR/issue_41888.rs:+2:8: +2:14\n-        _2 = cond() -> [return: bb1, unwind: bb11]; // scope 1 at $DIR/issue_41888.rs:+2:8: +2:14\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue_41888.rs:8:8: 8:12\n-                                         // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n-    }\n-\n-    bb1: {\n-        switchInt(move _2) -> [0: bb7, otherwise: bb2]; // scope 1 at $DIR/issue_41888.rs:+2:8: +2:14\n-    }\n-\n-    bb2: {\n-        StorageLive(_3);                 // scope 1 at $DIR/issue_41888.rs:+3:13: +3:20\n-        StorageLive(_4);                 // scope 1 at $DIR/issue_41888.rs:+3:18: +3:19\n-        _4 = K;                          // scope 1 at $DIR/issue_41888.rs:+3:18: +3:19\n-        _3 = E::F(move _4);              // scope 1 at $DIR/issue_41888.rs:+3:13: +3:20\n-        StorageDead(_4);                 // scope 1 at $DIR/issue_41888.rs:+3:19: +3:20\n-        goto -> bb14;                    // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n-    }\n-\n-    bb3: {\n-        goto -> bb4;                     // scope 1 at $DIR/issue_41888.rs:+3:19: +3:20\n-    }\n-\n-    bb4: {\n-        StorageDead(_3);                 // scope 1 at $DIR/issue_41888.rs:+3:19: +3:20\n-        _5 = discriminant(_1);           // scope 2 at $DIR/issue_41888.rs:+4:16: +4:24\n-        switchInt(move _5) -> [0: bb5, otherwise: bb6]; // scope 2 at $DIR/issue_41888.rs:+4:16: +4:24\n-    }\n-\n-    bb5: {\n-        StorageLive(_6);                 // scope 2 at $DIR/issue_41888.rs:+4:21: +4:23\n-        _9 = const false;                // scope 2 at $DIR/issue_41888.rs:+4:21: +4:23\n-        _6 = move ((_1 as F).0: K);      // scope 2 at $DIR/issue_41888.rs:+4:21: +4:23\n-        _0 = const ();                   // scope 2 at $DIR/issue_41888.rs:+4:29: +7:10\n-        StorageDead(_6);                 // scope 1 at $DIR/issue_41888.rs:+7:9: +7:10\n-        goto -> bb8;                     // scope 1 at $DIR/issue_41888.rs:+4:9: +7:10\n-    }\n-\n-    bb6: {\n-        _0 = const ();                   // scope 1 at $DIR/issue_41888.rs:+7:10: +7:10\n-        goto -> bb8;                     // scope 1 at $DIR/issue_41888.rs:+4:9: +7:10\n-    }\n-\n-    bb7: {\n-        _0 = const ();                   // scope 1 at $DIR/issue_41888.rs:+8:6: +8:6\n-        goto -> bb8;                     // scope 1 at $DIR/issue_41888.rs:+2:5: +8:6\n-    }\n-\n-    bb8: {\n-        StorageDead(_2);                 // scope 1 at $DIR/issue_41888.rs:+8:5: +8:6\n-        goto -> bb20;                    // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-    }\n-\n-    bb9: {\n-        _7 = const false;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-        _8 = const false;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-        _9 = const false;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-        StorageDead(_1);                 // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-        return;                          // scope 0 at $DIR/issue_41888.rs:+9:2: +9:2\n-    }\n-\n-    bb10 (cleanup): {\n-        goto -> bb11;                    // scope 1 at $DIR/issue_41888.rs:+3:19: +3:20\n-    }\n-\n-    bb11 (cleanup): {\n-        goto -> bb12;                    // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-    }\n-\n-    bb12 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue_41888.rs:+0:1: +9:2\n-    }\n-\n-    bb13 (cleanup): {\n-        _7 = const true;                 // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n-        _8 = const true;                 // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n-        _9 = const true;                 // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n-        _1 = move _3;                    // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n-        goto -> bb10;                    // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n-    }\n-\n-    bb14: {\n-        _7 = const true;                 // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n-        _8 = const true;                 // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n-        _9 = const true;                 // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n-        _1 = move _3;                    // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n-        goto -> bb3;                     // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n-    }\n-\n-    bb15: {\n-        _7 = const false;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-        goto -> bb9;                     // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-    }\n-\n-    bb16 (cleanup): {\n-        goto -> bb12;                    // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-    }\n-\n-    bb17: {\n-        drop(_1) -> [return: bb15, unwind: bb12]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-    }\n-\n-    bb18 (cleanup): {\n-        drop(_1) -> bb12;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-    }\n-\n-    bb19: {\n-        _10 = discriminant(_1);          // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-        switchInt(move _10) -> [0: bb15, otherwise: bb17]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-    }\n-\n-    bb20: {\n-        switchInt(_7) -> [0: bb15, otherwise: bb19]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-    }\n-\n-    bb21 (cleanup): {\n-        _11 = discriminant(_1);          // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-        switchInt(move _11) -> [0: bb16, otherwise: bb18]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-    }\n-\n-    bb22 (cleanup): {\n-        switchInt(_7) -> [0: bb12, otherwise: bb21]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-    }\n-}"}, {"sha": "257f0b1e6e8f7c1cc3d65ff58fd818aaaca0c9b1", "filename": "tests/mir-opt/issue_41888.main.ElaborateDrops.diff", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb/tests%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb/tests%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.diff?ref=313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb", "patch": "@@ -0,0 +1,158 @@\n+- // MIR for `main` before ElaborateDrops\n++ // MIR for `main` after ElaborateDrops\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue_41888.rs:+0:11: +0:11\n+      let _1: E;                           // in scope 0 at $DIR/issue_41888.rs:+1:9: +1:10\n+      let mut _2: bool;                    // in scope 0 at $DIR/issue_41888.rs:+2:8: +2:14\n+      let mut _3: E;                       // in scope 0 at $DIR/issue_41888.rs:+3:13: +3:20\n+      let mut _4: K;                       // in scope 0 at $DIR/issue_41888.rs:+3:18: +3:19\n+      let mut _5: isize;                   // in scope 0 at $DIR/issue_41888.rs:+4:16: +4:24\n++     let mut _7: bool;                    // in scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++     let mut _8: bool;                    // in scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++     let mut _9: bool;                    // in scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++     let mut _10: isize;                  // in scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++     let mut _11: isize;                  // in scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+      scope 1 {\n+          debug e => _1;                   // in scope 1 at $DIR/issue_41888.rs:+1:9: +1:10\n+          scope 2 {\n+              debug _k => _6;              // in scope 2 at $DIR/issue_41888.rs:+4:21: +4:23\n+              let _6: K;                   // in scope 2 at $DIR/issue_41888.rs:+4:21: +4:23\n+          }\n+      }\n+  \n+      bb0: {\n++         _9 = const false;                // scope 0 at $DIR/issue_41888.rs:+1:9: +1:10\n++         _7 = const false;                // scope 0 at $DIR/issue_41888.rs:+1:9: +1:10\n++         _8 = const false;                // scope 0 at $DIR/issue_41888.rs:+1:9: +1:10\n+          StorageLive(_1);                 // scope 0 at $DIR/issue_41888.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 1 at $DIR/issue_41888.rs:+2:8: +2:14\n+          _2 = cond() -> [return: bb1, unwind: bb11]; // scope 1 at $DIR/issue_41888.rs:+2:8: +2:14\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue_41888.rs:8:8: 8:12\n+                                           // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          switchInt(move _2) -> [0: bb7, otherwise: bb2]; // scope 1 at $DIR/issue_41888.rs:+2:8: +2:14\n+      }\n+  \n+      bb2: {\n+          StorageLive(_3);                 // scope 1 at $DIR/issue_41888.rs:+3:13: +3:20\n+          StorageLive(_4);                 // scope 1 at $DIR/issue_41888.rs:+3:18: +3:19\n+          _4 = K;                          // scope 1 at $DIR/issue_41888.rs:+3:18: +3:19\n+          _3 = E::F(move _4);              // scope 1 at $DIR/issue_41888.rs:+3:13: +3:20\n+          StorageDead(_4);                 // scope 1 at $DIR/issue_41888.rs:+3:19: +3:20\n+-         replace(_1 <- move _3) -> [return: bb3, unwind: bb10]; // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n++         goto -> bb14;                    // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n+      }\n+  \n+      bb3: {\n+-         drop(_3) -> [return: bb4, unwind: bb11]; // scope 1 at $DIR/issue_41888.rs:+3:19: +3:20\n++         goto -> bb4;                     // scope 1 at $DIR/issue_41888.rs:+3:19: +3:20\n+      }\n+  \n+      bb4: {\n+          StorageDead(_3);                 // scope 1 at $DIR/issue_41888.rs:+3:19: +3:20\n+          _5 = discriminant(_1);           // scope 2 at $DIR/issue_41888.rs:+4:16: +4:24\n+          switchInt(move _5) -> [0: bb5, otherwise: bb6]; // scope 2 at $DIR/issue_41888.rs:+4:16: +4:24\n+      }\n+  \n+      bb5: {\n+          StorageLive(_6);                 // scope 2 at $DIR/issue_41888.rs:+4:21: +4:23\n++         _9 = const false;                // scope 2 at $DIR/issue_41888.rs:+4:21: +4:23\n+          _6 = move ((_1 as F).0: K);      // scope 2 at $DIR/issue_41888.rs:+4:21: +4:23\n+          _0 = const ();                   // scope 2 at $DIR/issue_41888.rs:+4:29: +7:10\n+          StorageDead(_6);                 // scope 1 at $DIR/issue_41888.rs:+7:9: +7:10\n+          goto -> bb8;                     // scope 1 at $DIR/issue_41888.rs:+4:9: +7:10\n+      }\n+  \n+      bb6: {\n+          _0 = const ();                   // scope 1 at $DIR/issue_41888.rs:+7:10: +7:10\n+          goto -> bb8;                     // scope 1 at $DIR/issue_41888.rs:+4:9: +7:10\n+      }\n+  \n+      bb7: {\n+          _0 = const ();                   // scope 1 at $DIR/issue_41888.rs:+8:6: +8:6\n+          goto -> bb8;                     // scope 1 at $DIR/issue_41888.rs:+2:5: +8:6\n+      }\n+  \n+      bb8: {\n+          StorageDead(_2);                 // scope 1 at $DIR/issue_41888.rs:+8:5: +8:6\n+-         drop(_1) -> bb9;                 // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++         goto -> bb20;                    // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+      }\n+  \n+      bb9: {\n++         _7 = const false;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++         _8 = const false;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++         _9 = const false;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+          return;                          // scope 0 at $DIR/issue_41888.rs:+9:2: +9:2\n+      }\n+  \n+      bb10 (cleanup): {\n+          drop(_3) -> bb11;                // scope 1 at $DIR/issue_41888.rs:+3:19: +3:20\n+      }\n+  \n+      bb11 (cleanup): {\n+-         drop(_1) -> bb12;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++         goto -> bb12;                    // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+      }\n+  \n+      bb12 (cleanup): {\n+          resume;                          // scope 0 at $DIR/issue_41888.rs:+0:1: +9:2\n++     }\n++ \n++     bb13 (cleanup): {\n++         _7 = const true;                 // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n++         _8 = const true;                 // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n++         _9 = const true;                 // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n++         _1 = move _3;                    // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n++         goto -> bb12;                    // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n++     }\n++ \n++     bb14: {\n++         _7 = const true;                 // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n++         _8 = const true;                 // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n++         _9 = const true;                 // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n++         _1 = move _3;                    // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n++         goto -> bb3;                     // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n++     }\n++ \n++     bb15: {\n++         _7 = const false;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++         goto -> bb9;                     // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++     }\n++ \n++     bb16 (cleanup): {\n++         goto -> bb12;                    // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++     }\n++ \n++     bb17: {\n++         drop(_1) -> [return: bb15, unwind: bb12]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++     }\n++ \n++     bb18 (cleanup): {\n++         drop(_1) -> bb12;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++     }\n++ \n++     bb19: {\n++         _10 = discriminant(_1);          // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++         switchInt(move _10) -> [0: bb15, otherwise: bb17]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++     }\n++ \n++     bb20: {\n++         switchInt(_7) -> [0: bb15, otherwise: bb19]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++     }\n++ \n++     bb21 (cleanup): {\n++         _11 = discriminant(_1);          // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++         switchInt(move _11) -> [0: bb16, otherwise: bb18]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++     }\n++ \n++     bb22 (cleanup): {\n++         switchInt(_7) -> [0: bb12, otherwise: bb21]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+      }\n+  }\n+  "}, {"sha": "0f10c0a1d09f1824c34a740f7d0b3ef070398de4", "filename": "tests/mir-opt/issue_41888.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb/tests%2Fmir-opt%2Fissue_41888.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb/tests%2Fmir-opt%2Fissue_41888.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_41888.rs?ref=313219c0b6bacabe0fc72a8eb3912b8fc08b9bdb", "patch": "@@ -2,7 +2,7 @@\n // check that we clear the \"ADT master drop flag\" even when there are\n // no fields to be dropped.\n \n-// EMIT_MIR issue_41888.main.ElaborateDrops.after.mir\n+// EMIT_MIR issue_41888.main.ElaborateDrops.diff\n fn main() {\n     let e;\n     if cond() {"}]}