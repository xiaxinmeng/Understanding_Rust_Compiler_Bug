{"sha": "e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YjE1MGVkYWZjMGU3MmNkN2Y1ZjNmNjdhNGU4YjQxN2Q1MTViMDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-01T23:31:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-01T23:31:51Z"}, "message": "Auto merge of #68752 - JohnTitor:rollup-zz3u4xl, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #68460 (Use BufWriter for emitting MIR)\n - #68681 (Suggest path separator for single-colon typos)\n - #68688 ([docs] remind bug reporters to update nightly)\n - #68704 (Ignore `build` dir formatting)\n - #68727 (Remove a comment about pretty printer in formatting tests)\n - #68736 (Remove `Alloc` in favor of `AllocRef`)\n - #68740 (Do not suggest things named underscore)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "f29b6c6172ad7b834afac0155d93036c028cfc63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f29b6c6172ad7b834afac0155d93036c028cfc63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "html_url": "https://github.com/rust-lang/rust/commit/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13db6501c7273cd1997ce20e15106f362e5613c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/13db6501c7273cd1997ce20e15106f362e5613c4", "html_url": "https://github.com/rust-lang/rust/commit/13db6501c7273cd1997ce20e15106f362e5613c4"}, {"sha": "87bb0c4389b09bfa86780eb014a4a2de95a3840b", "url": "https://api.github.com/repos/rust-lang/rust/commits/87bb0c4389b09bfa86780eb014a4a2de95a3840b", "html_url": "https://github.com/rust-lang/rust/commit/87bb0c4389b09bfa86780eb014a4a2de95a3840b"}], "stats": {"total": 188, "additions": 159, "deletions": 29}, "files": [{"sha": "d6840b20c89ac013d612c527d15fdca7552c825c", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "patch": "@@ -50,6 +50,9 @@ is a bug or not, feel free to file a bug anyway.\n **If you believe reporting your bug publicly represents a security risk to Rust users,\n please follow our [instructions for reporting security vulnerabilities](https://www.rust-lang.org/policies/security)**.\n \n+If you're using the nightly channel, please check if the bug exists in the\n+latest toolchain before filing your bug. It might be fixed already.\n+\n If you have the chance, before reporting a bug, please [search existing\n issues](https://github.com/rust-lang/rust/search?q=&type=Issues&utf8=%E2%9C%93),\n as it's possible that someone else has already reported your error. This doesn't"}, {"sha": "2a034845c6e0b5df42b0ef7757ed84aebd60fa9d", "filename": "rustfmt.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "patch": "@@ -6,6 +6,8 @@ merge_derives = false\n # by default we ignore everything in the repository\n # tidy only checks files which are not ignored, each entry follows gitignore style\n ignore = [\n+    \"build\",\n+\n     # tests for now are not formatted, as they are sometimes pretty-printing constrained\n     # (and generally rustfmt can move around comments in UI-testing incompatible ways)\n     \"src/test\","}, {"sha": "38df843d258d38b7acae7754c718e086bb132b05", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "patch": "@@ -1227,10 +1227,3 @@ pub unsafe trait AllocRef {\n         }\n     }\n }\n-\n-// In order to rename `Alloc` to `AllocRef`, some submoduleshas to be updated as well. The CI fails\n-// if either of the submodules fails to compile. The submodules have their own CI depending on a\n-// specific Rust version, which don't have `AllocRef` yet. This alias is used to make the submodules\n-// compile and pass the CI.\n-#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-pub use self::AllocRef as Alloc;"}, {"sha": "0fd83dad56b1af78c5975cb59535ab9fb054f2c9", "filename": "src/librustc_data_structures/obligation_forest/graphviz.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Flibrustc_data_structures%2Fobligation_forest%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Flibrustc_data_structures%2Fobligation_forest%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fgraphviz.rs?ref=e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "patch": "@@ -2,6 +2,7 @@ use crate::obligation_forest::{ForestObligation, ObligationForest};\n use graphviz as dot;\n use std::env::var_os;\n use std::fs::File;\n+use std::io::BufWriter;\n use std::path::Path;\n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering;\n@@ -31,7 +32,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n         let file_path = dir.as_ref().join(format!(\"{:010}_{}.gv\", counter, description));\n \n-        let mut gv_file = File::create(file_path).unwrap();\n+        let mut gv_file = BufWriter::new(File::create(file_path).unwrap());\n \n         dot::render(&self, &mut gv_file).unwrap();\n     }"}, {"sha": "51cc091b6c0af24285afe2452559b9aa3127c4fd", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "patch": "@@ -49,7 +49,7 @@ use syntax::ast;\n \n use std::env;\n use std::fs::{self, File};\n-use std::io::Write;\n+use std::io::{BufWriter, Write};\n \n pub fn assert_dep_graph(tcx: TyCtxt<'_>) {\n     tcx.dep_graph.with_ignore(|| {\n@@ -235,7 +235,7 @@ fn dump_graph(tcx: TyCtxt<'_>) {\n     {\n         // dump a .txt file with just the edges:\n         let txt_path = format!(\"{}.txt\", path);\n-        let mut file = File::create(&txt_path).unwrap();\n+        let mut file = BufWriter::new(File::create(&txt_path).unwrap());\n         for &(ref source, ref target) in &edges {\n             write!(file, \"{:?} -> {:?}\\n\", source, target).unwrap();\n         }"}, {"sha": "0be73e55e9c1da37f61635da436a7cffc89fa771", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "patch": "@@ -48,7 +48,7 @@ use tempfile::Builder as TempFileBuilder;\n use std::any::Any;\n use std::cell::RefCell;\n use std::ffi::OsString;\n-use std::io::{self, Write};\n+use std::io::{self, BufWriter, Write};\n use std::path::PathBuf;\n use std::rc::Rc;\n use std::{env, fs, iter, mem};\n@@ -574,7 +574,7 @@ fn write_out_deps(\n             });\n         }\n \n-        let mut file = fs::File::create(&deps_filename)?;\n+        let mut file = BufWriter::new(fs::File::create(&deps_filename)?);\n         for path in out_filenames {\n             writeln!(file, \"{}: {}\\n\", path.display(), files.join(\" \"))?;\n         }"}, {"sha": "827ccb1c85733badb2a585cdb9dc897f18820d33", "filename": "src/librustc_mir/borrow_check/facts.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Flibrustc_mir%2Fborrow_check%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Flibrustc_mir%2Fborrow_check%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ffacts.rs?ref=e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "patch": "@@ -8,7 +8,7 @@ use rustc_index::vec::Idx;\n use std::error::Error;\n use std::fmt::Debug;\n use std::fs::{self, File};\n-use std::io::Write;\n+use std::io::{BufWriter, Write};\n use std::path::Path;\n \n #[derive(Copy, Clone, Debug)]\n@@ -117,7 +117,7 @@ impl<'w> FactWriter<'w> {\n         T: FactRow,\n     {\n         let file = &self.dir.join(file_name);\n-        let mut file = File::create(file)?;\n+        let mut file = BufWriter::new(File::create(file)?);\n         for row in rows {\n             row.write(&mut file, self.location_table)?;\n         }\n@@ -126,11 +126,19 @@ impl<'w> FactWriter<'w> {\n }\n \n trait FactRow {\n-    fn write(&self, out: &mut File, location_table: &LocationTable) -> Result<(), Box<dyn Error>>;\n+    fn write(\n+        &self,\n+        out: &mut dyn Write,\n+        location_table: &LocationTable,\n+    ) -> Result<(), Box<dyn Error>>;\n }\n \n impl FactRow for RegionVid {\n-    fn write(&self, out: &mut File, location_table: &LocationTable) -> Result<(), Box<dyn Error>> {\n+    fn write(\n+        &self,\n+        out: &mut dyn Write,\n+        location_table: &LocationTable,\n+    ) -> Result<(), Box<dyn Error>> {\n         write_row(out, location_table, &[self])\n     }\n }\n@@ -140,7 +148,11 @@ where\n     A: FactCell,\n     B: FactCell,\n {\n-    fn write(&self, out: &mut File, location_table: &LocationTable) -> Result<(), Box<dyn Error>> {\n+    fn write(\n+        &self,\n+        out: &mut dyn Write,\n+        location_table: &LocationTable,\n+    ) -> Result<(), Box<dyn Error>> {\n         write_row(out, location_table, &[&self.0, &self.1])\n     }\n }\n@@ -151,7 +163,11 @@ where\n     B: FactCell,\n     C: FactCell,\n {\n-    fn write(&self, out: &mut File, location_table: &LocationTable) -> Result<(), Box<dyn Error>> {\n+    fn write(\n+        &self,\n+        out: &mut dyn Write,\n+        location_table: &LocationTable,\n+    ) -> Result<(), Box<dyn Error>> {\n         write_row(out, location_table, &[&self.0, &self.1, &self.2])\n     }\n }\n@@ -163,7 +179,11 @@ where\n     C: FactCell,\n     D: FactCell,\n {\n-    fn write(&self, out: &mut File, location_table: &LocationTable) -> Result<(), Box<dyn Error>> {\n+    fn write(\n+        &self,\n+        out: &mut dyn Write,\n+        location_table: &LocationTable,\n+    ) -> Result<(), Box<dyn Error>> {\n         write_row(out, location_table, &[&self.0, &self.1, &self.2, &self.3])\n     }\n }"}, {"sha": "5dec2c6df99dcf6991488c8eb4435f533cdbab26", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "patch": "@@ -61,7 +61,7 @@ pub fn on_mir_pass<'tcx>(\n \n pub fn emit_mir(tcx: TyCtxt<'_>, outputs: &OutputFilenames) -> io::Result<()> {\n     let path = outputs.path(OutputType::Mir);\n-    let mut f = File::create(&path)?;\n+    let mut f = io::BufWriter::new(File::create(&path)?);\n     mir_util::write_mir_pretty(tcx, None, &mut f)?;\n     Ok(())\n }"}, {"sha": "b12ad1e4c15cca55f8bee1d39e1690a8de49ebc9", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "patch": "@@ -36,7 +36,7 @@ use rustc_data_structures::work_queue::WorkQueue;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use std::fs;\n-use std::io::{self, Write};\n+use std::io::{self, BufWriter, Write};\n use std::path::{Path, PathBuf};\n \n pub type LiveVarSet = BitSet<Local>;\n@@ -288,7 +288,8 @@ fn dump_matched_mir_node<'tcx>(\n     let item_id = tcx.hir().as_local_hir_id(source.def_id()).unwrap();\n     let file_name = format!(\"rustc.node{}{}-liveness.mir\", item_id, pass_name);\n     file_path.push(&file_name);\n-    let _ = fs::File::create(&file_path).and_then(|mut file| {\n+    let _ = fs::File::create(&file_path).and_then(|file| {\n+        let mut file = BufWriter::new(file);\n         writeln!(file, \"// MIR local liveness analysis for `{}`\", node_path)?;\n         writeln!(file, \"// source = {:?}\", source)?;\n         writeln!(file, \"// pass_name = {}\", pass_name)?;"}, {"sha": "a09eb42dcfe6ae5b6153c5da1bcdc3725d2b6098", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "patch": "@@ -71,14 +71,49 @@ impl<'a> Parser<'a> {\n             debug!(\"parse_qpath: (decrement) count={:?}\", self.unmatched_angle_bracket_count);\n         }\n \n-        self.expect(&token::ModSep)?;\n+        if !self.recover_colon_before_qpath_proj() {\n+            self.expect(&token::ModSep)?;\n+        }\n \n         let qself = QSelf { ty, path_span, position: path.segments.len() };\n         self.parse_path_segments(&mut path.segments, style)?;\n \n         Ok((qself, Path { segments: path.segments, span: lo.to(self.prev_span) }))\n     }\n \n+    /// Recover from an invalid single colon, when the user likely meant a qualified path.\n+    /// We avoid emitting this if not followed by an identifier, as our assumption that the user\n+    /// intended this to be a qualified path may not be correct.\n+    ///\n+    /// ```ignore (diagnostics)\n+    /// <Bar as Baz<T>>:Qux\n+    ///                ^ help: use double colon\n+    /// ```\n+    fn recover_colon_before_qpath_proj(&mut self) -> bool {\n+        if self.token.kind != token::Colon\n+            || self.look_ahead(1, |t| !t.is_ident() || t.is_reserved_ident())\n+        {\n+            return false;\n+        }\n+\n+        self.bump(); // colon\n+\n+        self.diagnostic()\n+            .struct_span_err(\n+                self.prev_span,\n+                \"found single colon before projection in qualified path\",\n+            )\n+            .span_suggestion(\n+                self.prev_span,\n+                \"use double colon\",\n+                \"::\".to_string(),\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n+\n+        true\n+    }\n+\n     /// Parses simple paths.\n     ///\n     /// `path = [::] segment+`"}, {"sha": "a612ad9e783f4b15ea98b2103e520f267d5a1b38", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "patch": "@@ -769,6 +769,11 @@ impl<'a> Resolver<'a> {\n         span: Span,\n     ) -> bool {\n         if let Some(suggestion) = suggestion {\n+            // We shouldn't suggest underscore.\n+            if suggestion.candidate == kw::Underscore {\n+                return false;\n+            }\n+\n             let msg = format!(\n                 \"{} {} with a similar name exists\",\n                 suggestion.res.article(),"}, {"sha": "27ab3d6b7abffe921e2a30ad1fc9b74987341b41", "filename": "src/test/ui/ifmt.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Ftest%2Fui%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Ftest%2Fui%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fifmt.rs?ref=e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "patch": "@@ -99,7 +99,6 @@ pub fn main() {\n     let a: &dyn fmt::Debug = &1;\n     t!(format!(\"{:?}\", a), \"1\");\n \n-\n     // Formatting strings and their arguments\n     t!(format!(\"{}\", \"a\"), \"a\");\n     t!(format!(\"{:4}\", \"a\"), \"a   \");\n@@ -187,10 +186,6 @@ pub fn main() {\n     // Ergonomic format_args!\n     t!(format!(\"{0:x} {0:X}\", 15), \"f F\");\n     t!(format!(\"{0:x} {0:X} {}\", 15), \"f F 15\");\n-    // NOTE: For now the longer test cases must not be followed immediately by\n-    // >1 empty lines, or the pretty printer will break. Since no one wants to\n-    // touch the current pretty printer (#751), we have no choice but to work\n-    // around it. Some of the following test cases are also affected.\n     t!(format!(\"{:x}{0:X}{a:x}{:X}{1:x}{a:X}\", 13, 14, a=15), \"dDfEeF\");\n     t!(format!(\"{a:x} {a:X}\", a=15), \"f F\");\n \n@@ -201,7 +196,6 @@ pub fn main() {\n     t!(format!(\"{a:.*} {0} {:.*}\", 4, 3, \"efgh\", a=\"abcdef\"), \"abcd 4 efg\");\n     t!(format!(\"{:.a$} {a} {a:#x}\", \"aaaaaa\", a=2), \"aa 2 0x2\");\n \n-\n     // Test that pointers don't get truncated.\n     {\n         let val = usize::MAX;"}, {"sha": "404d2f7762df445ff2e967b950d037d660b46ccf", "filename": "src/test/ui/parser/qualified-path-in-turbofish.fixed", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.fixed?ref=e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+trait T {\n+    type Ty;\n+}\n+\n+struct Impl;\n+\n+impl T for Impl {\n+    type Ty = u32;\n+}\n+\n+fn template<T>() -> i64 {\n+    3\n+}\n+\n+fn main() {\n+    template::<<Impl as T>::Ty>();\n+    //~^ ERROR found single colon before projection in qualified path\n+}"}, {"sha": "2f4b2ed348b9c9944875ce6ca7796672badd2af0", "filename": "src/test/ui/parser/qualified-path-in-turbofish.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.rs?ref=e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+trait T {\n+    type Ty;\n+}\n+\n+struct Impl;\n+\n+impl T for Impl {\n+    type Ty = u32;\n+}\n+\n+fn template<T>() -> i64 {\n+    3\n+}\n+\n+fn main() {\n+    template::<<Impl as T>:Ty>();\n+    //~^ ERROR found single colon before projection in qualified path\n+}"}, {"sha": "8857d2ef30cfcdef5896608d5cca327f4c5d96e4", "filename": "src/test/ui/parser/qualified-path-in-turbofish.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.stderr?ref=e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "patch": "@@ -0,0 +1,8 @@\n+error: found single colon before projection in qualified path\n+  --> $DIR/qualified-path-in-turbofish.rs:17:27\n+   |\n+LL |     template::<<Impl as T>:Ty>();\n+   |                           ^ help: use double colon: `::`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a2b05db03515024d80efbc3c3e9b085185e06e16", "filename": "src/test/ui/resolve/typo-suggestion-named-underscore.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-named-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-named-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-named-underscore.rs?ref=e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "patch": "@@ -0,0 +1,14 @@\n+const _: () = ();\n+\n+fn main() {\n+    a // Shouldn't suggest underscore\n+    //~^ ERROR: cannot find value `a` in this scope\n+}\n+\n+trait Unknown {}\n+\n+#[allow(unused_imports)]\n+use Unknown as _;\n+\n+fn foo<T: A>(x: T) {} // Shouldn't suggest underscore\n+//~^ ERROR: cannot find trait `A` in this scope"}, {"sha": "65d1b084a3a7b89bcf8bb51f4e0d902fcbf5f37f", "filename": "src/test/ui/resolve/typo-suggestion-named-underscore.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-named-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-named-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-named-underscore.stderr?ref=e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "patch": "@@ -0,0 +1,16 @@\n+error[E0425]: cannot find value `a` in this scope\n+  --> $DIR/typo-suggestion-named-underscore.rs:4:5\n+   |\n+LL |     a // Shouldn't suggest underscore\n+   |     ^ not found in this scope\n+\n+error[E0405]: cannot find trait `A` in this scope\n+  --> $DIR/typo-suggestion-named-underscore.rs:13:11\n+   |\n+LL | fn foo<T: A>(x: T) {} // Shouldn't suggest underscore\n+   |           ^ not found in this scope\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0405, E0425.\n+For more information about an error, try `rustc --explain E0405`."}]}