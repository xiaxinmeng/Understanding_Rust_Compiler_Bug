{"sha": "12375304524ffe732752f5a29551c2caf0b14b4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMzc1MzA0NTI0ZmZlNzMyNzUyZjVhMjk1NTFjMmNhZjBiMTRiNGY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-11T00:39:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-14T00:24:08Z"}, "message": "Touch up and rebase previous commits\n\n* Added `// no-pretty-expanded` to pretty-print a test, but not run it through\n  the `expanded` variant.\n* Removed #[deriving] and other expanded attributes after they are expanded\n* Removed hacks around &str and &&str and friends (from both the parser and the\n  pretty printer).\n* Un-ignored a bunch of tests", "tree": {"sha": "6beaf94e318a5586ad1c3d8429f37eb80bbbadcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6beaf94e318a5586ad1c3d8429f37eb80bbbadcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12375304524ffe732752f5a29551c2caf0b14b4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12375304524ffe732752f5a29551c2caf0b14b4f", "html_url": "https://github.com/rust-lang/rust/commit/12375304524ffe732752f5a29551c2caf0b14b4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12375304524ffe732752f5a29551c2caf0b14b4f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce8c467bd2062edc1410f54c8efafbc5ae245358", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce8c467bd2062edc1410f54c8efafbc5ae245358", "html_url": "https://github.com/rust-lang/rust/commit/ce8c467bd2062edc1410f54c8efafbc5ae245358"}], "stats": {"total": 180, "additions": 85, "deletions": 95}, "files": [{"sha": "ee0fe2065303b852d0b014522c70c82cfa0b9f0a", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -29,7 +29,7 @@ use std::io::fs;\n use std::from_str::FromStr;\n use getopts::{optopt, optflag, reqopt};\n use common::Config;\n-use common::{Pretty, DebugInfo, Codegen};\n+use common::{Pretty, DebugInfoGdb, Codegen};\n use util::logv;\n \n pub mod procsrv;\n@@ -199,7 +199,7 @@ pub fn opt_str2(maybestr: Option<~str>) -> ~str {\n }\n \n pub fn run_tests(config: &Config) {\n-    if config.target == ~\"arm-linux-androideabi\" {\n+    if config.target == \"arm-linux-androideabi\".to_owned() {\n         match config.mode {\n             DebugInfoGdb => {\n                 println!(\"arm-linux-androideabi debug-info \\"}, {"sha": "047be9554774632734624f18a845ef6fb8573879", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -34,6 +34,8 @@ pub struct TestProps {\n     pub check_stdout: bool,\n     // Don't force a --crate-type=dylib flag on the command line\n     pub no_prefer_dynamic: bool,\n+    // Don't run --pretty expanded when running pretty printing tests\n+    pub no_pretty_expanded: bool,\n }\n \n // Load any test directives embedded in the file\n@@ -48,6 +50,7 @@ pub fn load_props(testfile: &Path) -> TestProps {\n     let mut force_host = false;\n     let mut check_stdout = false;\n     let mut no_prefer_dynamic = false;\n+    let mut no_pretty_expanded = false;\n     iter_header(testfile, |ln| {\n         match parse_error_pattern(ln) {\n           Some(ep) => error_patterns.push(ep),\n@@ -78,6 +81,10 @@ pub fn load_props(testfile: &Path) -> TestProps {\n             no_prefer_dynamic = parse_no_prefer_dynamic(ln);\n         }\n \n+        if !no_pretty_expanded {\n+            no_pretty_expanded = parse_no_pretty_expanded(ln);\n+        }\n+\n         match parse_aux_build(ln) {\n             Some(ab) => { aux_builds.push(ab); }\n             None => {}\n@@ -107,6 +114,7 @@ pub fn load_props(testfile: &Path) -> TestProps {\n         force_host: force_host,\n         check_stdout: check_stdout,\n         no_prefer_dynamic: no_prefer_dynamic,\n+        no_pretty_expanded: no_pretty_expanded,\n     }\n }\n \n@@ -180,6 +188,10 @@ fn parse_no_prefer_dynamic(line: &str) -> bool {\n     parse_name_directive(line, \"no-prefer-dynamic\")\n }\n \n+fn parse_no_pretty_expanded(line: &str) -> bool {\n+    parse_name_directive(line, \"no-pretty-expanded\")\n+}\n+\n fn parse_exec_env(line: &str) -> Option<(~str, ~str)> {\n     parse_name_value_directive(line, \"exec-env\".to_owned()).map(|nv| {\n         // nv is either FOO or FOO=BAR"}, {"sha": "d7fa4f209d4da686f357c9fe3c9a2c56648487e7", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use common::Config;\n-use common::{CompileFail, Pretty, RunFail, RunPass};\n+use common::{CompileFail, Pretty, RunFail, RunPass, DebugInfoGdb, DebugInfoLldb};\n use errors;\n use header::TestProps;\n use header;\n@@ -64,7 +64,7 @@ pub fn run_metrics(config: Config, testfile: ~str, mm: &mut MetricMap) {\n       Pretty => run_pretty_test(&config, &props, &testfile),\n       DebugInfoGdb => run_debuginfo_gdb_test(&config, &props, &testfile),\n       DebugInfoLldb => run_debuginfo_lldb_test(&config, &props, &testfile),\n-      Codegen => run_codegen_test(&config, &props, &testfile, mm)\n+      Codegen => run_codegen_test(&config, &props, &testfile, mm),\n     }\n }\n \n@@ -194,6 +194,7 @@ fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n     if !proc_res.status.success() {\n         fatal_ProcRes(\"pretty-printed source does not typecheck\".to_owned(), &proc_res);\n     }\n+    if props.no_pretty_expanded { return }\n \n     // additionally, run `--pretty expanded` and try to build it.\n     let proc_res = print_source(config, props, testfile, (*srcs.get(round)).clone(), \"expanded\");\n@@ -219,10 +220,17 @@ fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n                         Vec::new(), config.compile_lib_path, Some(src))\n     }\n \n-    fn make_pp_args(config: &Config, _testfile: &Path) -> ProcArgs {\n-        let args = vec!(\"-\".to_owned(), \"--pretty\".to_owned(), \"normal\".to_owned(),\n-                     \"--target=\".to_owned() + config.target);\n+    fn make_pp_args(config: &Config,\n+                    props: &TestProps,\n+                    testfile: &Path,\n+                    pretty_type: ~str) -> ProcArgs {\n+        let aux_dir = aux_output_dir_name(config, testfile);\n         // FIXME (#9639): This needs to handle non-utf8 paths\n+        let mut args = vec!(\"-\".to_owned(), \"--pretty\".to_owned(), pretty_type,\n+                            \"--target=\".to_owned() + config.target,\n+                            \"-L\".to_owned(), aux_dir.as_str().unwrap().to_owned());\n+        args.push_all_move(split_maybe_args(&config.target_rustcflags));\n+        args.push_all_move(split_maybe_args(&props.compile_flags));\n         return ProcArgs {prog: config.rustc_path.as_str().unwrap().to_owned(), args: args};\n     }\n \n@@ -419,14 +427,14 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n     check_debugger_output(&debugger_run_result, check_lines.as_slice());\n }\n \n-fn run_debuginfo_lldb_test(config: &config, props: &TestProps, testfile: &Path) {\n+fn run_debuginfo_lldb_test(config: &Config, props: &TestProps, testfile: &Path) {\n     use std::io::process::{Process, ProcessConfig, ProcessOutput};\n \n     if config.lldb_python_dir.is_none() {\n         fatal(\"Can't run LLDB test because LLDB's python path is not set.\".to_owned());\n     }\n \n-    let mut config = config {\n+    let mut config = Config {\n         target_rustcflags: cleanup_debug_info_options(&config.target_rustcflags),\n         host_rustcflags: cleanup_debug_info_options(&config.host_rustcflags),\n         .. config.clone()\n@@ -481,7 +489,7 @@ fn run_debuginfo_lldb_test(config: &config, props: &TestProps, testfile: &Path)\n \n     check_debugger_output(&debugger_run_result, check_lines.as_slice());\n \n-    fn run_lldb(config: &config, test_executable: &Path, debugger_script: &Path) -> ProcRes {\n+    fn run_lldb(config: &Config, test_executable: &Path, debugger_script: &Path) -> ProcRes {\n         // Prepare the lldb_batchmode which executes the debugger script\n         let lldb_batchmode_script = \"./src/etc/lldb_batchmode.py\".to_owned();\n         let test_executable_str = test_executable.as_str().unwrap().to_owned();"}, {"sha": "1bf4d0a02faf099b642250e456d4a289244237b4", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -46,6 +46,7 @@ use middle::typeck::astconv::{ast_ty_to_ty, AstConv};\n use middle::typeck::infer;\n use middle::typeck;\n use util::ppaux::{ty_to_str};\n+use util::nodemap::NodeSet;\n \n use std::cmp;\n use collections::HashMap;\n@@ -453,10 +454,13 @@ struct Context<'a> {\n     // When recursing into an attributed node of the ast which modifies lint\n     // levels, this stack keeps track of the previous lint levels of whatever\n     // was modified.\n-    lint_stack: Vec<(Lint, level, LintSource)> ,\n+    lint_stack: Vec<(Lint, level, LintSource)>,\n \n     // id of the last visited negated expression\n-    negated_expr_id: ast::NodeId\n+    negated_expr_id: ast::NodeId,\n+\n+    // ids of structs/enums which have been checked for raw_pointer_deriving\n+    checked_raw_pointers: NodeSet,\n }\n \n impl<'a> Context<'a> {\n@@ -1014,10 +1018,26 @@ impl<'a> Visitor<()> for RawPtrDerivingVisitor<'a> {\n     fn visit_block(&mut self, _: &ast::Block, _: ()) {}\n }\n \n-fn check_raw_ptr_deriving(cx: &Context, item: &ast::Item) {\n-    if !attr::contains_name(item.attrs.as_slice(), \"deriving\") {\n+fn check_raw_ptr_deriving(cx: &mut Context, item: &ast::Item) {\n+    if !attr::contains_name(item.attrs.as_slice(), \"automatically_derived\") {\n         return\n     }\n+    let did = match item.node {\n+        ast::ItemImpl(..) => {\n+            match ty::get(ty::node_id_to_type(cx.tcx, item.id)).sty {\n+                ty::ty_enum(did, _) => did,\n+                ty::ty_struct(did, _) => did,\n+                _ => return,\n+            }\n+        }\n+        _ => return,\n+    };\n+    if !ast_util::is_local(did) { return }\n+    let item = match cx.tcx.map.find(did.node) {\n+        Some(ast_map::NodeItem(item)) => item,\n+        _ => return,\n+    };\n+    if !cx.checked_raw_pointers.insert(item.id) { return }\n     match item.node {\n         ast::ItemStruct(..) | ast::ItemEnum(..) => {\n             let mut visitor = RawPtrDerivingVisitor { cx: cx };\n@@ -1848,7 +1868,8 @@ pub fn check_crate(tcx: &ty::ctxt,\n         cur_struct_def_id: -1,\n         is_doc_hidden: false,\n         lint_stack: Vec::new(),\n-        negated_expr_id: -1\n+        negated_expr_id: -1,\n+        checked_raw_pointers: NodeSet::new(),\n     };\n \n     // Install default lint levels, followed by the command line levels, and"}, {"sha": "5d4350f8fb5cd9479191c631f85c2d79e0a1e652", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -26,6 +26,7 @@ use t = syntax::parse::token;\n \n /// Highlights some source code, returning the HTML output.\n pub fn highlight(src: &str, class: Option<&str>) -> StrBuf {\n+    debug!(\"highlighting: ================\\n{}\\n==============\", src);\n     let sess = parse::new_parse_sess();\n     let fm = parse::string_to_filemap(&sess,\n                                       src.to_strbuf(),"}, {"sha": "d6831e225bc2931384cf9a663a44170146e9386b", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -149,6 +149,7 @@ pub fn render(w: &mut io::Writer, s: &str, print_toc: bool) -> fmt::Result {\n             let my_opaque: &MyOpaque = &*((*opaque).opaque as *MyOpaque);\n             slice::raw::buf_as_slice((*text).data, (*text).size as uint, |text| {\n                 let text = str::from_utf8(text).unwrap();\n+                debug!(\"docblock: ==============\\n{}\\n=======\", text);\n                 let mut lines = text.lines().filter(|l| {\n                     stripped_filtered_line(*l).is_none()\n                 });"}, {"sha": "1898e8bf000a8c581e047f3408c69df4c98f3af5", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -262,7 +262,8 @@ pub fn expand_item(it: @ast::Item, fld: &mut MacroExpander)\n     let it = expand_item_modifiers(it, fld);\n \n     let mut decorator_items = SmallVector::zero();\n-    for attr in it.attrs.iter().rev() {\n+    let mut new_attrs = Vec::new();\n+    for attr in it.attrs.iter() {\n         let mname = attr.name();\n \n         match fld.extsbox.find(&intern(mname.get())) {\n@@ -286,22 +287,29 @@ pub fn expand_item(it: @ast::Item, fld: &mut MacroExpander)\n \n                 fld.cx.bt_pop();\n             }\n-            _ => {}\n+            _ => new_attrs.push((*attr).clone()),\n         }\n     }\n \n     let mut new_items = match it.node {\n         ast::ItemMac(..) => expand_item_mac(it, fld),\n         ast::ItemMod(_) | ast::ItemForeignMod(_) => {\n             fld.cx.mod_push(it.ident);\n-            let macro_escape = contains_macro_escape(it.attrs.as_slice());\n+            let macro_escape = contains_macro_escape(new_attrs.as_slice());\n             let result = with_exts_frame!(fld.extsbox,\n                                           macro_escape,\n                                           noop_fold_item(it, fld));\n             fld.cx.mod_pop();\n             result\n         },\n-        _ => noop_fold_item(it, fld)\n+        _ => {\n+            let it = @ast::Item {\n+                attrs: new_attrs,\n+                ..(*it).clone()\n+\n+            };\n+            noop_fold_item(it, fld)\n+        }\n     };\n \n     new_items.push_all(decorator_items);"}, {"sha": "a83bb7d1bf5751bc1bdff1636a22583378d90a04", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -2241,9 +2241,6 @@ impl<'a> Parser<'a> {\n               ExprVec(..) if m == MutImmutable => {\n                 ExprVstore(e, ExprVstoreSlice)\n               }\n-              ExprLit(lit) if lit_is_str(lit) && m == MutImmutable => {\n-                ExprVstore(e, ExprVstoreSlice)\n-              }\n               ExprVec(..) if m == MutMutable => {\n                 ExprVstore(e, ExprVstoreMutSlice)\n               }"}, {"sha": "326f31d11e958e050442e4ba2863b8b703cd67db", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -168,7 +168,7 @@ pub fn tt_to_str(tt: &ast::TokenTree) -> StrBuf {\n }\n \n pub fn tts_to_str(tts: &[ast::TokenTree]) -> StrBuf {\n-    to_str(|s| s.print_tts(&tts))\n+    to_str(|s| s.print_tts(tts))\n }\n \n pub fn stmt_to_str(stmt: &ast::Stmt) -> StrBuf {\n@@ -1258,28 +1258,7 @@ impl<'a> State<'a> {\n             }\n             ast::ExprAddrOf(m, expr) => {\n                 try!(word(&mut self.s, \"&\"));\n-\n-                // `ExprAddrOf(ExprLit(\"str\"))` should be `&&\"str\"` instead of `&\"str\"`\n-                // since `&\"str\"` is `ExprVstore(ExprLit(\"str\"))` which has same meaning to\n-                // `\"str\"`.\n-                // In many cases adding parentheses (`&(\"str\")`) would help, but it become invalid\n-                // if expr is in `PatLit()`.\n-                let needs_extra_amp = match expr.node {\n-                    ast::ExprLit(lit) => {\n-                        match lit.node {\n-                            ast::LitStr(..) => true,\n-                            _ => false,\n-                        }\n-                    }\n-                    ast::ExprVec(..) => true,\n-                    _ => false,\n-                };\n-                if needs_extra_amp {\n-                    try!(word(&mut self.s, \"&\"));\n-                }\n-\n                 try!(self.print_mutability(m));\n-\n                 try!(self.print_expr_maybe_paren(expr));\n             }\n             ast::ExprLit(lit) => try!(self.print_literal(lit)),"}, {"sha": "53b371e06cbe0d14f02dcebce2f1cceafff67ef0", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -1,5 +1,3 @@\n-// ignore-pretty\n-\n // Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -10,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty very bad with line comments\n+\n extern crate collections;\n extern crate rand;\n extern crate time;"}, {"sha": "04032c4aa3903661c0ea30b1639672d67038e34b", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // ignore-android: FIXME(#10393)\n+// ignore-pretty very bad with line comments\n \n-// ignore-pretty the `let to_child` line gets an extra newline\n // multi tasking k-nucleotide\n \n extern crate collections;"}, {"sha": "1434838e59bce81008381670be25f4a830cc4a95", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // ignore-android see #10393 #13206\n-// ignore-pretty\n \n extern crate sync;\n "}, {"sha": "e17324ee596491dfb58a87439bd880ce37e70060", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty very bad with line comments\n+\n extern crate sync;\n \n use std::io;"}, {"sha": "fdd711d22c760f93e9eb79f1ffb679f0746f0fba", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty very bad with line comments\n // ignore-android doesn't terminate?\n-// ignore-pretty\n \n use std::iter::range_step;\n use std::io::{stdin, stdout, File};"}, {"sha": "58568282e1584ab1c71d89254c1e55233f6577c6", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -1,5 +1,3 @@\n-// ignore-pretty\n-\n // Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -10,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-pretty very bad with line comments\n+\n #![feature(managed_boxes)]\n \n use std::io;"}, {"sha": "442386e30586eb631cff7f9a4dc925f150fd137c", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -1,5 +1,3 @@\n-// ignore-pretty\n-\n // Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -17,6 +15,8 @@\n //\n // The filename is a song reference; google it in quotes.\n \n+// ignore-pretty very bad with line comments\n+\n use std::comm;\n use std::os;\n use std::task;"}, {"sha": "6b875ff268dd8dd3926423204b3e7f5378b6a24b", "filename": "src/test/compile-fail/borrowck-lend-flow-match.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-pretty -- comments are unfaithfully preserved\n-\n #![allow(unused_variable)]\n #![allow(dead_assignment)]\n "}, {"sha": "f33e5e9b02d59d46826147fffc2762980697089b", "filename": "src/test/compile-fail/borrowck-pat-reassign-binding.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-binding.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-pretty -- comments are unfaithfully preserved\n-\n fn main() {\n     let mut x: Option<int> = None;\n     match x {"}, {"sha": "68410ae4fe1965c0ccb3b8b6d44ba6fa1366c493", "filename": "src/test/compile-fail/borrowck-preserve-box-in-field.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-field.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -1,5 +1,3 @@\n-// ignore-pretty\n-\n // Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "0db097ec003c20665f41a24e4cd24e90769d44c7", "filename": "src/test/compile-fail/borrowck-preserve-box-in-uniq.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-uniq.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -1,5 +1,3 @@\n-// ignore-pretty\n-\n // Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "cd36d930604621f662f4a073aaee0e87843dc8d1", "filename": "src/test/compile-fail/borrowck-preserve-box.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -1,5 +1,3 @@\n-// ignore-pretty\n-\n // Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "ca24192e797e23d205a88a5dc0c1ac00e3cec7e0", "filename": "src/test/compile-fail/borrowck-preserve-expl-deref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-expl-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-expl-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-expl-deref.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -1,5 +1,3 @@\n-// ignore-pretty\n-\n // Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "0ef666031114eacaae619625919022eb65fdaf95", "filename": "src/test/run-pass/anon-extern-mod-cross-crate-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-pretty\n // aux-build:anon-extern-mod-cross-crate-1.rs\n extern crate anonexternmod;\n "}, {"sha": "f8eaa99b5f0bc655d85c4c1afd478c713b6d282a", "filename": "src/test/run-pass/big-literals.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbig-literals.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -1,5 +1,3 @@\n-// ignore-pretty\n-\n // Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "7b6680294999f7c7ca0748a4bbc71373891cdfca", "filename": "src/test/run-pass/borrowck-pat-enum.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Fborrowck-pat-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Fborrowck-pat-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-pat-enum.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -1,5 +1,3 @@\n-// ignore-pretty\n-\n // Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "30c01ba9d51510c80bb8ebd48bc53ae232afe445", "filename": "src/test/run-pass/closure-syntax.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Fclosure-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Fclosure-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-syntax.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-pretty #13324\n-\n #![allow(dead_code)]\n \n fn foo<T>() {}"}, {"sha": "3cd50bfff32552a639b47d4d61f6da50e4af2882", "filename": "src/test/run-pass/deriving-global.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-global.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -8,18 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-pretty - does not converge\n-\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n extern crate serialize; // {En,De}codable\n extern crate rand; // Rand\n "}, {"sha": "b5245275617228cde6a0070c32ed9d787b364a60", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-pretty: `--pretty expand` creates unnecessary `unsafe` block\n-\n #![feature(macro_rules, managed_boxes)]\n #![deny(warnings)]\n #![allow(unused_must_use)]\n@@ -77,6 +75,7 @@ pub fn main() {\n     t!(format!(\"{foo} {1} {bar} {0}\", 0, 1, foo=2, bar=3), \"2 1 3 0\");\n     t!(format!(\"{} {0}\", \"a\"), \"a a\");\n     t!(format!(\"{foo_bar}\", foo_bar=1), \"1\");\n+    t!(format!(\"{:d}\", 5 + 5), \"10\");\n \n     // Methods should probably work\n     t!(format!(\"{0, plural, =1{a#} =2{b#} zero{c#} other{d#}}\", 0u), \"c0\");"}, {"sha": "ef5ef2f215cc25fdcab8966cc3ff9d75cee4f0cb", "filename": "src/test/run-pass/invoke-external-foreign.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Finvoke-external-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Finvoke-external-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finvoke-external-foreign.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-pretty\n // aux-build:foreign_lib.rs\n \n // The purpose of this test is to check that we can"}, {"sha": "585ade71fc6037278aef2a9d93733a5b2ec38a0b", "filename": "src/test/run-pass/numeric-method-autoexport.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -1,5 +1,3 @@\n-// ignore-pretty\n-\n // Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -10,10 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// no-pretty-expanded\n+\n // This file is intended to test only that methods are automatically\n // reachable for each numeric type, for each exported impl, with no imports\n // necessary. Testing the methods of the impls is done within the source\n // file for each numeric type.\n+\n pub fn main() {\n // ints\n     // num"}, {"sha": "7752aed7236a687616f2e1e04a1e9c7d7e40847b", "filename": "src/test/run-pass/objects-owned-object-borrowed-method-header.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -1,5 +1,3 @@\n-// ignore-pretty\n-\n // Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "759b066c8dbf5d257fb7056bf2abb6e36116a6f5", "filename": "src/test/run-pass/super-fast-paren-parsing.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Fsuper-fast-paren-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Fsuper-fast-paren-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsuper-fast-paren-parsing.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-pretty\n-\n static a: int =\n (((((((((((((((((((((((((((((((((((((((((((((((((((\n ((((((((((((((((((((((((((((((((((((((((((((((((((("}, {"sha": "98dd3772a4f9276be8cb9aa836ee6aff114c6120", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12375304524ffe732752f5a29551c2caf0b14b4f/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=12375304524ffe732752f5a29551c2caf0b14b4f", "patch": "@@ -1,5 +1,3 @@\n-// ignore-pretty\n-\n // Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}]}