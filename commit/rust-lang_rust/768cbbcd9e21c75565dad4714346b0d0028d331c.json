{"sha": "768cbbcd9e21c75565dad4714346b0d0028d331c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2OGNiYmNkOWUyMWM3NTU2NWRhZDQ3MTQzNDZiMGQwMDI4ZDMzMWM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-01-19T19:58:46Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-01-19T19:58:46Z"}, "message": "Fix type inhabitedness check for arrays\n\nArrays of uninhabited types were considered to also be uninhabited if\ntheir length had not been evaluated, causing unsoundness.", "tree": {"sha": "204d0a40a21849404cb3964c504b3302ad1e00dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/204d0a40a21849404cb3964c504b3302ad1e00dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/768cbbcd9e21c75565dad4714346b0d0028d331c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/768cbbcd9e21c75565dad4714346b0d0028d331c", "html_url": "https://github.com/rust-lang/rust/commit/768cbbcd9e21c75565dad4714346b0d0028d331c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/768cbbcd9e21c75565dad4714346b0d0028d331c/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "html_url": "https://github.com/rust-lang/rust/commit/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "8cf5b431cf12d1c2131fba6fdd0cd0feb014521e", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/768cbbcd9e21c75565dad4714346b0d0028d331c/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768cbbcd9e21c75565dad4714346b0d0028d331c/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=768cbbcd9e21c75565dad4714346b0d0028d331c", "patch": "@@ -262,10 +262,11 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n                 }))\n             },\n             TyArray(ty, len) => {\n-                if len.val.to_const_int().and_then(|i| i.to_u64()) == Some(0) {\n-                    DefIdForest::empty()\n-                } else {\n-                    ty.uninhabited_from(visited, tcx)\n+                match len.val.to_const_int().and_then(|i| i.to_u64()) {\n+                    Some(n) if n != 0 => ty.uninhabited_from(visited, tcx),\n+                    // If the array is definitely non-empty, it's uninhabited if\n+                    // the type of its elements is uninhabited.\n+                    _ => DefIdForest::empty()\n                 }\n             }\n             TyRef(_, ref tm) => {"}, {"sha": "1dc45a1a88458efac3af7306eec55ea184cb8b5e", "filename": "src/test/compile-fail/empty-never-array.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/768cbbcd9e21c75565dad4714346b0d0028d331c/src%2Ftest%2Fcompile-fail%2Fempty-never-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768cbbcd9e21c75565dad4714346b0d0028d331c/src%2Ftest%2Fcompile-fail%2Fempty-never-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-never-array.rs?ref=768cbbcd9e21c75565dad4714346b0d0028d331c", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(never_type)]\n+\n+enum Helper<T, U> {\n+    T(T, [!; 0]),\n+    #[allow(dead_code)]\n+    U(U),\n+}\n+\n+fn transmute<T, U>(t: T) -> U {\n+    let Helper::U(u) = Helper::T(t, []); //~ ERROR refutable pattern in local binding: `T(_, _)` not covered\n+    u\n+}\n+\n+fn main() {\n+    println!(\"{:?}\", transmute::<&str, (*const u8, u64)>(\"type safety\"));\n+}"}]}