{"sha": "90340b71ad0b640c344a0c6ef6d7da8a6673d762", "node_id": "C_kwDOAAsO6NoAKDkwMzQwYjcxYWQwYjY0MGMzNDRhMGM2ZWY2ZDdkYThhNjY3M2Q3NjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-25T17:22:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-25T17:22:45Z"}, "message": "Auto merge of #14405 - Veykril:proc-macro-loading, r=Veykril\n\nfeat: Load proc-macros asynchronously\n\nCloses https://github.com/rust-lang/rust-analyzer/issues/8646", "tree": {"sha": "e59745012662a9121d025e49b7c6b6a7dd4b8468", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e59745012662a9121d025e49b7c6b6a7dd4b8468"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90340b71ad0b640c344a0c6ef6d7da8a6673d762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90340b71ad0b640c344a0c6ef6d7da8a6673d762", "html_url": "https://github.com/rust-lang/rust/commit/90340b71ad0b640c344a0c6ef6d7da8a6673d762", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90340b71ad0b640c344a0c6ef6d7da8a6673d762/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71b23360e781a00e51ed702a96e181261e92c6c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/71b23360e781a00e51ed702a96e181261e92c6c5", "html_url": "https://github.com/rust-lang/rust/commit/71b23360e781a00e51ed702a96e181261e92c6c5"}, {"sha": "e5f24a6d7c6e91e590e72b9ffd107a398c2bdebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f24a6d7c6e91e590e72b9ffd107a398c2bdebd", "html_url": "https://github.com/rust-lang/rust/commit/e5f24a6d7c6e91e590e72b9ffd107a398c2bdebd"}], "stats": {"total": 515, "additions": 288, "deletions": 227}, "files": [{"sha": "b906511dbcfe253e191bfef7d45b0abd808892aa", "filename": "crates/base-db/src/change.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fbase-db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fbase-db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Fchange.rs?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -6,14 +6,15 @@ use std::{fmt, sync::Arc};\n use salsa::Durability;\n use vfs::FileId;\n \n-use crate::{CrateGraph, SourceDatabaseExt, SourceRoot, SourceRootId};\n+use crate::{CrateGraph, ProcMacros, SourceDatabaseExt, SourceRoot, SourceRootId};\n \n /// Encapsulate a bunch of raw `.set` calls on the database.\n #[derive(Default)]\n pub struct Change {\n     pub roots: Option<Vec<SourceRoot>>,\n     pub files_changed: Vec<(FileId, Option<Arc<String>>)>,\n     pub crate_graph: Option<CrateGraph>,\n+    pub proc_macros: Option<ProcMacros>,\n }\n \n impl fmt::Debug for Change {\n@@ -49,6 +50,10 @@ impl Change {\n         self.crate_graph = Some(graph);\n     }\n \n+    pub fn set_proc_macros(&mut self, proc_macros: ProcMacros) {\n+        self.proc_macros = Some(proc_macros);\n+    }\n+\n     pub fn apply(self, db: &mut dyn SourceDatabaseExt) {\n         let _p = profile::span(\"RootDatabase::apply_change\");\n         if let Some(roots) = self.roots {\n@@ -73,6 +78,9 @@ impl Change {\n         if let Some(crate_graph) = self.crate_graph {\n             db.set_crate_graph_with_durability(Arc::new(crate_graph), Durability::HIGH)\n         }\n+        if let Some(proc_macros) = self.proc_macros {\n+            db.set_proc_macros_with_durability(Arc::new(proc_macros), Durability::HIGH)\n+        }\n     }\n }\n "}, {"sha": "7269180a5d61145bbdb44debd370ff6079a61ae2", "filename": "crates/base-db/src/fixture.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Ffixture.rs?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -12,8 +12,8 @@ use vfs::{file_set::FileSet, VfsPath};\n use crate::{\n     input::{CrateName, CrateOrigin, LangCrateOrigin},\n     Change, CrateDisplayName, CrateGraph, CrateId, Dependency, Edition, Env, FileId, FilePosition,\n-    FileRange, ProcMacro, ProcMacroExpander, ProcMacroExpansionError, SourceDatabaseExt,\n-    SourceRoot, SourceRootId,\n+    FileRange, ProcMacro, ProcMacroExpander, ProcMacroExpansionError, ProcMacros,\n+    SourceDatabaseExt, SourceRoot, SourceRootId,\n };\n \n pub const WORKSPACE: SourceRootId = SourceRootId(0);\n@@ -100,7 +100,7 @@ impl ChangeFixture {\n \n     pub fn parse_with_proc_macros(\n         ra_fixture: &str,\n-        mut proc_macros: Vec<(String, ProcMacro)>,\n+        mut proc_macro_defs: Vec<(String, ProcMacro)>,\n     ) -> ChangeFixture {\n         let (mini_core, proc_macro_names, fixture) = Fixture::parse(ra_fixture);\n         let mut change = Change::new();\n@@ -160,7 +160,6 @@ impl ChangeFixture {\n                     meta.cfg.clone(),\n                     meta.cfg,\n                     meta.env,\n-                    Ok(Vec::new()),\n                     false,\n                     origin,\n                     meta.target_data_layout\n@@ -200,7 +199,6 @@ impl ChangeFixture {\n                 default_cfg.clone(),\n                 default_cfg,\n                 Env::default(),\n-                Ok(Vec::new()),\n                 false,\n                 CrateOrigin::CratesIo { repo: None, name: None },\n                 default_target_data_layout\n@@ -244,7 +242,6 @@ impl ChangeFixture {\n                 CfgOptions::default(),\n                 CfgOptions::default(),\n                 Env::default(),\n-                Ok(Vec::new()),\n                 false,\n                 CrateOrigin::Lang(LangCrateOrigin::Core),\n                 target_layout.clone(),\n@@ -257,12 +254,13 @@ impl ChangeFixture {\n             }\n         }\n \n+        let mut proc_macros = ProcMacros::default();\n         if !proc_macro_names.is_empty() {\n             let proc_lib_file = file_id;\n             file_id.0 += 1;\n \n-            proc_macros.extend(default_test_proc_macros());\n-            let (proc_macro, source) = filter_test_proc_macros(&proc_macro_names, proc_macros);\n+            proc_macro_defs.extend(default_test_proc_macros());\n+            let (proc_macro, source) = filter_test_proc_macros(&proc_macro_names, proc_macro_defs);\n             let mut fs = FileSet::default();\n             fs.insert(\n                 proc_lib_file,\n@@ -282,11 +280,11 @@ impl ChangeFixture {\n                 CfgOptions::default(),\n                 CfgOptions::default(),\n                 Env::default(),\n-                Ok(proc_macro),\n                 true,\n                 CrateOrigin::CratesIo { repo: None, name: None },\n                 target_layout,\n             );\n+            proc_macros.insert(proc_macros_crate, Ok(proc_macro));\n \n             for krate in all_crates {\n                 crate_graph\n@@ -305,6 +303,7 @@ impl ChangeFixture {\n         roots.push(root);\n         change.set_roots(roots);\n         change.set_crate_graph(crate_graph);\n+        change.set_proc_macros(proc_macros);\n \n         ChangeFixture { file_position, files, change }\n     }"}, {"sha": "9580b76faa2214d51b761fba8fb086105197129a", "filename": "crates/base-db/src/input.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fbase-db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fbase-db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Finput.rs?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -6,14 +6,17 @@\n //! actual IO. See `vfs` and `project_model` in the `rust-analyzer` crate for how\n //! actual IO is done and lowered to input.\n \n-use std::{fmt, ops, panic::RefUnwindSafe, str::FromStr, sync::Arc};\n+use std::{fmt, mem, ops, panic::RefUnwindSafe, str::FromStr, sync::Arc};\n \n use cfg::CfgOptions;\n use rustc_hash::FxHashMap;\n use stdx::hash::{NoHashHashMap, NoHashHashSet};\n use syntax::SmolStr;\n use tt::token_id::Subtree;\n-use vfs::{file_set::FileSet, AnchoredPath, FileId, VfsPath};\n+use vfs::{file_set::FileSet, AbsPathBuf, AnchoredPath, FileId, VfsPath};\n+\n+pub type ProcMacroPaths = FxHashMap<CrateId, Result<(Option<String>, AbsPathBuf), String>>;\n+pub type ProcMacros = FxHashMap<CrateId, ProcMacroLoadResult>;\n \n /// Files are grouped into source roots. A source root is a directory on the\n /// file systems which is watched for changes. Typically it corresponds to a\n@@ -269,7 +272,6 @@ pub struct CrateData {\n     pub target_layout: TargetLayoutLoadResult,\n     pub env: Env,\n     pub dependencies: Vec<Dependency>,\n-    pub proc_macro: ProcMacroLoadResult,\n     pub origin: CrateOrigin,\n     pub is_proc_macro: bool,\n }\n@@ -322,7 +324,6 @@ impl CrateGraph {\n         cfg_options: CfgOptions,\n         potential_cfg_options: CfgOptions,\n         env: Env,\n-        proc_macro: ProcMacroLoadResult,\n         is_proc_macro: bool,\n         origin: CrateOrigin,\n         target_layout: Result<Arc<str>, Arc<str>>,\n@@ -335,7 +336,6 @@ impl CrateGraph {\n             cfg_options,\n             potential_cfg_options,\n             env,\n-            proc_macro,\n             dependencies: Vec::new(),\n             origin,\n             target_layout,\n@@ -456,11 +456,11 @@ impl CrateGraph {\n     }\n \n     /// Extends this crate graph by adding a complete disjoint second crate\n-    /// graph.\n+    /// graph and adjust the ids in the [`ProcMacroPaths`] accordingly.\n     ///\n     /// The ids of the crates in the `other` graph are shifted by the return\n     /// amount.\n-    pub fn extend(&mut self, other: CrateGraph) -> u32 {\n+    pub fn extend(&mut self, other: CrateGraph, proc_macros: &mut ProcMacroPaths) -> u32 {\n         let start = self.arena.len() as u32;\n         self.arena.extend(other.arena.into_iter().map(|(id, mut data)| {\n             let new_id = id.shift(start);\n@@ -469,6 +469,11 @@ impl CrateGraph {\n             }\n             (new_id, data)\n         }));\n+\n+        *proc_macros = mem::take(proc_macros)\n+            .into_iter()\n+            .map(|(id, macros)| (id.shift(start), macros))\n+            .collect();\n         start\n     }\n \n@@ -645,7 +650,6 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"\".into()),\n@@ -658,7 +662,6 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"\".into()),\n@@ -671,7 +674,6 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"\".into()),\n@@ -698,7 +700,6 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"\".into()),\n@@ -711,7 +712,6 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"\".into()),\n@@ -735,7 +735,6 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"\".into()),\n@@ -748,7 +747,6 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"\".into()),\n@@ -761,7 +759,6 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"\".into()),\n@@ -785,7 +782,6 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"\".into()),\n@@ -798,7 +794,6 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"\".into()),"}, {"sha": "f6975f2fbd75a47ee09d4f1a1a05061e3bcaff15", "filename": "crates/base-db/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fbase-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fbase-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Flib.rs?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -16,8 +16,8 @@ pub use crate::{\n     input::{\n         CrateData, CrateDisplayName, CrateGraph, CrateId, CrateName, CrateOrigin, Dependency,\n         Edition, Env, LangCrateOrigin, ProcMacro, ProcMacroExpander, ProcMacroExpansionError,\n-        ProcMacroId, ProcMacroKind, ProcMacroLoadResult, SourceRoot, SourceRootId,\n-        TargetLayoutLoadResult,\n+        ProcMacroId, ProcMacroKind, ProcMacroLoadResult, ProcMacroPaths, ProcMacros, SourceRoot,\n+        SourceRootId, TargetLayoutLoadResult,\n     },\n };\n pub use salsa::{self, Cancelled};\n@@ -73,6 +73,10 @@ pub trait SourceDatabase: FileLoader + std::fmt::Debug {\n     /// The crate graph.\n     #[salsa::input]\n     fn crate_graph(&self) -> Arc<CrateGraph>;\n+\n+    /// The crate graph.\n+    #[salsa::input]\n+    fn proc_macros(&self) -> Arc<ProcMacros>;\n }\n \n fn parse_query(db: &dyn SourceDatabase, file_id: FileId) -> Parse<ast::SourceFile> {"}, {"sha": "b3ce913d9ab572342e6769b9d5b3df384414ed84", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -78,25 +78,35 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: DefMap, tree_id: T\n     }\n \n     let cfg_options = &krate.cfg_options;\n-    let proc_macros = match &krate.proc_macro {\n-        Ok(proc_macros) => {\n-            proc_macros\n-                .iter()\n-                .enumerate()\n-                .map(|(idx, it)| {\n-                    // FIXME: a hacky way to create a Name from string.\n-                    let name =\n-                        tt::Ident { text: it.name.clone(), span: tt::TokenId::unspecified() };\n-                    (name.as_name(), ProcMacroExpander::new(base_db::ProcMacroId(idx as u32)))\n-                })\n-                .collect()\n-        }\n-        Err(e) => {\n-            def_map.proc_macro_loading_error = Some(e.clone().into_boxed_str());\n-            Vec::new()\n+\n+    let is_proc_macro = krate.is_proc_macro;\n+    let proc_macros = if is_proc_macro {\n+        match db.proc_macros().get(&def_map.krate) {\n+            Some(Ok(proc_macros)) => {\n+                proc_macros\n+                    .iter()\n+                    .enumerate()\n+                    .map(|(idx, it)| {\n+                        // FIXME: a hacky way to create a Name from string.\n+                        let name =\n+                            tt::Ident { text: it.name.clone(), span: tt::TokenId::unspecified() };\n+                        (name.as_name(), ProcMacroExpander::new(base_db::ProcMacroId(idx as u32)))\n+                    })\n+                    .collect()\n+            }\n+            Some(Err(e)) => {\n+                def_map.proc_macro_loading_error = Some(e.clone().into_boxed_str());\n+                Vec::new()\n+            }\n+            None => {\n+                def_map.proc_macro_loading_error =\n+                    Some(\"No proc-macros present for crate\".to_owned().into_boxed_str());\n+                Vec::new()\n+            }\n         }\n+    } else {\n+        vec![]\n     };\n-    let is_proc_macro = krate.is_proc_macro;\n \n     let mut collector = DefCollector {\n         db,"}, {"sha": "ad9893587406a0f487df814f8c85b1670dffdfc9", "filename": "crates/hir-expand/src/proc_macro.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -33,10 +33,10 @@ impl ProcMacroExpander {\n     ) -> ExpandResult<tt::Subtree> {\n         match self.proc_macro_id {\n             Some(id) => {\n-                let krate_graph = db.crate_graph();\n-                let proc_macros = match &krate_graph[def_crate].proc_macro {\n-                    Ok(proc_macros) => proc_macros,\n-                    Err(_) => {\n+                let proc_macros = db.proc_macros();\n+                let proc_macros = match proc_macros.get(&def_crate) {\n+                    Some(Ok(proc_macros)) => proc_macros,\n+                    Some(Err(_)) | None => {\n                         never!(\"Non-dummy expander even though there are no proc macros\");\n                         return ExpandResult::with_err(\n                             tt::Subtree::empty(),\n@@ -59,6 +59,7 @@ impl ProcMacroExpander {\n                     }\n                 };\n \n+                let krate_graph = db.crate_graph();\n                 // Proc macros have access to the environment variables of the invoking crate.\n                 let env = &krate_graph[calling_crate].env;\n                 match proc_macro.expander.expand(tt, attr_arg, env) {"}, {"sha": "3b8458980c6ddaedaeae5657f6e64116c9c04fda", "filename": "crates/ide-db/src/apply_change.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fide-db%2Fsrc%2Fapply_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fide-db%2Fsrc%2Fapply_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fapply_change.rs?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -64,6 +64,7 @@ impl RootDatabase {\n             // SourceDatabase\n             base_db::ParseQuery\n             base_db::CrateGraphQuery\n+            base_db::ProcMacrosQuery\n \n             // SourceDatabaseExt\n             base_db::FileTextQuery"}, {"sha": "f9b8a502d990cff2bd030d6874ba147104422366", "filename": "crates/ide-db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fide-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fide-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Flib.rs?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -137,6 +137,7 @@ impl RootDatabase {\n     pub fn new(lru_capacity: Option<usize>) -> RootDatabase {\n         let mut db = RootDatabase { storage: ManuallyDrop::new(salsa::Storage::default()) };\n         db.set_crate_graph_with_durability(Default::default(), Durability::HIGH);\n+        db.set_proc_macros_with_durability(Default::default(), Durability::HIGH);\n         db.set_local_roots_with_durability(Default::default(), Durability::HIGH);\n         db.set_library_roots_with_durability(Default::default(), Durability::HIGH);\n         db.set_enable_proc_attr_macros(false);"}, {"sha": "8477a8e6228d53c13750123c43ebe1b8f7471a90", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -235,7 +235,6 @@ impl Analysis {\n             cfg_options.clone(),\n             cfg_options,\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"Analysis::from_single_file has no target layout\".into()),"}, {"sha": "471c36dfecf5777524358a28327706cd84171094", "filename": "crates/ide/src/shuffle_crate_graph.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -1,7 +1,7 @@\n use std::sync::Arc;\n \n use ide_db::{\n-    base_db::{salsa::Durability, CrateGraph, SourceDatabase},\n+    base_db::{salsa::Durability, CrateGraph, ProcMacros, SourceDatabase},\n     FxHashMap, RootDatabase,\n };\n \n@@ -16,13 +16,15 @@ use ide_db::{\n // |===\n pub(crate) fn shuffle_crate_graph(db: &mut RootDatabase) {\n     let crate_graph = db.crate_graph();\n+    let proc_macros = db.proc_macros();\n \n     let mut shuffled_ids = crate_graph.iter().collect::<Vec<_>>();\n \n     let mut rng = oorandom::Rand32::new(stdx::rand::seed());\n     stdx::rand::shuffle(&mut shuffled_ids, |i| rng.rand_range(0..i as u32) as usize);\n \n     let mut new_graph = CrateGraph::default();\n+    let mut new_proc_macros = ProcMacros::default();\n \n     let mut map = FxHashMap::default();\n     for old_id in shuffled_ids.iter().copied() {\n@@ -35,11 +37,11 @@ pub(crate) fn shuffle_crate_graph(db: &mut RootDatabase) {\n             data.cfg_options.clone(),\n             data.potential_cfg_options.clone(),\n             data.env.clone(),\n-            data.proc_macro.clone(),\n             data.is_proc_macro,\n             data.origin.clone(),\n             data.target_layout.clone(),\n         );\n+        new_proc_macros.insert(new_id, proc_macros[&old_id].clone());\n         map.insert(old_id, new_id);\n     }\n \n@@ -53,4 +55,5 @@ pub(crate) fn shuffle_crate_graph(db: &mut RootDatabase) {\n     }\n \n     db.set_crate_graph_with_durability(Arc::new(new_graph), Durability::HIGH);\n+    db.set_proc_macros_with_durability(Arc::new(new_proc_macros), Durability::HIGH);\n }"}, {"sha": "26c4c89f7646ca3e6132cb800bef1e3298133946", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 15, "deletions": 89, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -3,7 +3,7 @@ use std::{\n     path::{Path, PathBuf},\n };\n \n-use base_db::{CrateGraph, FileId};\n+use base_db::{CrateGraph, FileId, ProcMacroPaths};\n use cfg::{CfgAtom, CfgDiff};\n use expect_test::{expect, Expect};\n use paths::{AbsPath, AbsPathBuf};\n@@ -14,11 +14,14 @@ use crate::{\n     WorkspaceBuildScripts,\n };\n \n-fn load_cargo(file: &str) -> CrateGraph {\n+fn load_cargo(file: &str) -> (CrateGraph, ProcMacroPaths) {\n     load_cargo_with_overrides(file, CfgOverrides::default())\n }\n \n-fn load_cargo_with_overrides(file: &str, cfg_overrides: CfgOverrides) -> CrateGraph {\n+fn load_cargo_with_overrides(\n+    file: &str,\n+    cfg_overrides: CfgOverrides,\n+) -> (CrateGraph, ProcMacroPaths) {\n     let meta = get_test_json_file(file);\n     let cargo_workspace = CargoWorkspace::new(meta);\n     let project_workspace = ProjectWorkspace::Cargo {\n@@ -34,7 +37,7 @@ fn load_cargo_with_overrides(file: &str, cfg_overrides: CfgOverrides) -> CrateGr\n     to_crate_graph(project_workspace)\n }\n \n-fn load_rust_project(file: &str) -> CrateGraph {\n+fn load_rust_project(file: &str) -> (CrateGraph, ProcMacroPaths) {\n     let data = get_test_json_file(file);\n     let project = rooted_project_json(data);\n     let sysroot = Ok(get_fake_sysroot());\n@@ -92,9 +95,8 @@ fn rooted_project_json(data: ProjectJsonData) -> ProjectJson {\n     ProjectJson::new(base, data)\n }\n \n-fn to_crate_graph(project_workspace: ProjectWorkspace) -> CrateGraph {\n+fn to_crate_graph(project_workspace: ProjectWorkspace) -> (CrateGraph, ProcMacroPaths) {\n     project_workspace.to_crate_graph(\n-        &mut |_, _| Ok(Vec::new()),\n         &mut {\n             let mut counter = 0;\n             move |_path| {\n@@ -117,7 +119,8 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n     let cfg_overrides = CfgOverrides::Wildcard(\n         CfgDiff::new(Vec::new(), vec![CfgAtom::Flag(\"test\".into())]).unwrap(),\n     );\n-    let crate_graph = load_cargo_with_overrides(\"hello-world-metadata.json\", cfg_overrides);\n+    let (crate_graph, _proc_macros) =\n+        load_cargo_with_overrides(\"hello-world-metadata.json\", cfg_overrides);\n     check_crate_graph(\n         crate_graph,\n         expect![[r#\"\n@@ -184,9 +187,6 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -265,9 +265,6 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -346,9 +343,6 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -427,9 +421,6 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -498,9 +489,6 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                             },\n                         },\n                         dependencies: [],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: Some(\n                                 \"https://github.com/rust-lang/libc\",\n@@ -527,7 +515,8 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n             .collect(),\n         )\n     };\n-    let crate_graph = load_cargo_with_overrides(\"hello-world-metadata.json\", cfg_overrides);\n+    let (crate_graph, _proc_macros) =\n+        load_cargo_with_overrides(\"hello-world-metadata.json\", cfg_overrides);\n     check_crate_graph(\n         crate_graph,\n         expect![[r#\"\n@@ -596,9 +585,6 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -679,9 +665,6 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -762,9 +745,6 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -845,9 +825,6 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -916,9 +893,6 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                             },\n                         },\n                         dependencies: [],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: Some(\n                                 \"https://github.com/rust-lang/libc\",\n@@ -936,7 +910,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n \n #[test]\n fn cargo_hello_world_project_model() {\n-    let crate_graph = load_cargo(\"hello-world-metadata.json\");\n+    let (crate_graph, _proc_macros) = load_cargo(\"hello-world-metadata.json\");\n     check_crate_graph(\n         crate_graph,\n         expect![[r#\"\n@@ -1005,9 +979,6 @@ fn cargo_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -1088,9 +1059,6 @@ fn cargo_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -1171,9 +1139,6 @@ fn cargo_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -1254,9 +1219,6 @@ fn cargo_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -1325,9 +1287,6 @@ fn cargo_hello_world_project_model() {\n                             },\n                         },\n                         dependencies: [],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: Some(\n                                 \"https://github.com/rust-lang/libc\",\n@@ -1345,7 +1304,7 @@ fn cargo_hello_world_project_model() {\n \n #[test]\n fn rust_project_hello_world_project_model() {\n-    let crate_graph = load_rust_project(\"hello-world-project.json\");\n+    let (crate_graph, _proc_macros) = load_rust_project(\"hello-world-project.json\");\n     check_crate_graph(\n         crate_graph,\n         expect![[r#\"\n@@ -1390,9 +1349,6 @@ fn rust_project_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n                         origin: Lang(\n                             Alloc,\n                         ),\n@@ -1427,9 +1383,6 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n                         origin: Lang(\n                             Core,\n                         ),\n@@ -1464,9 +1417,6 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n                         origin: Lang(\n                             Other,\n                         ),\n@@ -1501,9 +1451,6 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n                         origin: Lang(\n                             Other,\n                         ),\n@@ -1557,9 +1504,6 @@ fn rust_project_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n                         origin: Lang(\n                             Other,\n                         ),\n@@ -1594,9 +1538,6 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n                         origin: Lang(\n                             Other,\n                         ),\n@@ -1704,9 +1645,6 @@ fn rust_project_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n                         origin: Lang(\n                             Std,\n                         ),\n@@ -1741,9 +1679,6 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n                         origin: Lang(\n                             Other,\n                         ),\n@@ -1778,9 +1713,6 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n                         origin: Lang(\n                             Test,\n                         ),\n@@ -1815,9 +1747,6 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n                         origin: Lang(\n                             Other,\n                         ),\n@@ -1889,9 +1818,6 @@ fn rust_project_hello_world_project_model() {\n                                 prelude: false,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"no proc macro dylib present\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -1907,7 +1833,7 @@ fn rust_project_hello_world_project_model() {\n \n #[test]\n fn rust_project_is_proc_macro_has_proc_macro_dep() {\n-    let crate_graph = load_rust_project(\"is-proc-macro-project.json\");\n+    let (crate_graph, _proc_macros) = load_rust_project(\"is-proc-macro-project.json\");\n     // Since the project only defines one crate (outside the sysroot crates),\n     // it should be the one with the biggest Id.\n     let crate_id = crate_graph.iter().max().unwrap();"}, {"sha": "1fd7c681938e6aca8dd5d33434a13214513ca1fd", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 37, "deletions": 40, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -7,7 +7,7 @@ use std::{collections::VecDeque, fmt, fs, process::Command, sync::Arc};\n use anyhow::{bail, format_err, Context, Result};\n use base_db::{\n     CrateDisplayName, CrateGraph, CrateId, CrateName, CrateOrigin, Dependency, Edition, Env,\n-    FileId, LangCrateOrigin, ProcMacroLoadResult, TargetLayoutLoadResult,\n+    FileId, LangCrateOrigin, ProcMacroPaths, TargetLayoutLoadResult,\n };\n use cfg::{CfgDiff, CfgOptions};\n use paths::{AbsPath, AbsPathBuf};\n@@ -576,16 +576,14 @@ impl ProjectWorkspace {\n \n     pub fn to_crate_graph(\n         &self,\n-        load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> ProcMacroLoadResult,\n         load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n         extra_env: &FxHashMap<String, String>,\n-    ) -> CrateGraph {\n+    ) -> (CrateGraph, ProcMacroPaths) {\n         let _p = profile::span(\"ProjectWorkspace::to_crate_graph\");\n \n-        let mut crate_graph = match self {\n+        let (mut crate_graph, proc_macros) = match self {\n             ProjectWorkspace::Json { project, sysroot, rustc_cfg } => project_json_to_crate_graph(\n                 rustc_cfg.clone(),\n-                load_proc_macro,\n                 load,\n                 project,\n                 sysroot.as_ref().ok(),\n@@ -602,7 +600,6 @@ impl ProjectWorkspace {\n                 toolchain: _,\n                 target_layout,\n             } => cargo_to_crate_graph(\n-                load_proc_macro,\n                 load,\n                 rustc.as_ref().ok(),\n                 cargo,\n@@ -630,7 +627,7 @@ impl ProjectWorkspace {\n         } else {\n             tracing::debug!(\"Did not patch std to depend on cfg-if\")\n         }\n-        crate_graph\n+        (crate_graph, proc_macros)\n     }\n \n     pub fn eq_ignore_build_data(&self, other: &Self) -> bool {\n@@ -679,14 +676,14 @@ impl ProjectWorkspace {\n \n fn project_json_to_crate_graph(\n     rustc_cfg: Vec<CfgFlag>,\n-    load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> ProcMacroLoadResult,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     project: &ProjectJson,\n     sysroot: Option<&Sysroot>,\n     extra_env: &FxHashMap<String, String>,\n     target_layout: TargetLayoutLoadResult,\n-) -> CrateGraph {\n+) -> (CrateGraph, ProcMacroPaths) {\n     let mut crate_graph = CrateGraph::default();\n+    let mut proc_macros = FxHashMap::default();\n     let sysroot_deps = sysroot.as_ref().map(|sysroot| {\n         sysroot_to_crate_graph(\n             &mut crate_graph,\n@@ -707,14 +704,15 @@ fn project_json_to_crate_graph(\n         })\n         .map(|(crate_id, krate, file_id)| {\n             let env = krate.env.clone().into_iter().collect();\n-            let proc_macro = match krate.proc_macro_dylib_path.clone() {\n-                Some(it) => load_proc_macro(\n-                    krate.display_name.as_ref().map(|it| it.canonical_name()).unwrap_or(\"\"),\n-                    &it,\n-                ),\n-                None => Err(\"no proc macro dylib present\".into()),\n-            };\n-\n+            if let Some(path) = krate.proc_macro_dylib_path.clone() {\n+                proc_macros.insert(\n+                    crate_id,\n+                    Ok((\n+                        krate.display_name.as_ref().map(|it| it.canonical_name().to_owned()),\n+                        path,\n+                    )),\n+                );\n+            }\n             let target_cfgs = match krate.target.as_deref() {\n                 Some(target) => cfg_cache\n                     .entry(target)\n@@ -734,7 +732,6 @@ fn project_json_to_crate_graph(\n                     cfg_options.clone(),\n                     cfg_options,\n                     env,\n-                    proc_macro,\n                     krate.is_proc_macro,\n                     if krate.display_name.is_some() {\n                         CrateOrigin::CratesIo {\n@@ -776,11 +773,10 @@ fn project_json_to_crate_graph(\n             }\n         }\n     }\n-    crate_graph\n+    (crate_graph, proc_macros)\n }\n \n fn cargo_to_crate_graph(\n-    load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> ProcMacroLoadResult,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     rustc: Option<&(CargoWorkspace, WorkspaceBuildScripts)>,\n     cargo: &CargoWorkspace,\n@@ -789,9 +785,10 @@ fn cargo_to_crate_graph(\n     override_cfg: &CfgOverrides,\n     build_scripts: &WorkspaceBuildScripts,\n     target_layout: TargetLayoutLoadResult,\n-) -> CrateGraph {\n+) -> (CrateGraph, ProcMacroPaths) {\n     let _p = profile::span(\"cargo_to_crate_graph\");\n     let mut crate_graph = CrateGraph::default();\n+    let mut proc_macros = FxHashMap::default();\n     let (public_deps, libproc_macro) = match sysroot {\n         Some(sysroot) => sysroot_to_crate_graph(\n             &mut crate_graph,\n@@ -855,10 +852,10 @@ fn cargo_to_crate_graph(\n             if let Some(file_id) = load(&cargo[tgt].root) {\n                 let crate_id = add_target_crate_root(\n                     &mut crate_graph,\n+                    &mut proc_macros,\n                     &cargo[pkg],\n                     build_scripts.get_output(pkg),\n                     cfg_options.clone(),\n-                    &mut |path| load_proc_macro(&cargo[tgt].name, path),\n                     file_id,\n                     &cargo[tgt].name,\n                     cargo[tgt].is_proc_macro,\n@@ -931,9 +928,9 @@ fn cargo_to_crate_graph(\n         if let Some((rustc_workspace, rustc_build_scripts)) = rustc {\n             handle_rustc_crates(\n                 &mut crate_graph,\n+                &mut proc_macros,\n                 &mut pkg_to_lib_crate,\n                 load,\n-                load_proc_macro,\n                 rustc_workspace,\n                 cargo,\n                 &public_deps,\n@@ -952,7 +949,7 @@ fn cargo_to_crate_graph(\n             );\n         }\n     }\n-    crate_graph\n+    (crate_graph, proc_macros)\n }\n \n fn detached_files_to_crate_graph(\n@@ -961,7 +958,7 @@ fn detached_files_to_crate_graph(\n     detached_files: &[AbsPathBuf],\n     sysroot: Option<&Sysroot>,\n     target_layout: TargetLayoutLoadResult,\n-) -> CrateGraph {\n+) -> (CrateGraph, ProcMacroPaths) {\n     let _p = profile::span(\"detached_files_to_crate_graph\");\n     let mut crate_graph = CrateGraph::default();\n     let (public_deps, _libproc_macro) = match sysroot {\n@@ -998,7 +995,6 @@ fn detached_files_to_crate_graph(\n             cfg_options.clone(),\n             cfg_options.clone(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo {\n                 repo: None,\n@@ -1009,14 +1005,14 @@ fn detached_files_to_crate_graph(\n \n         public_deps.add_to_crate_graph(&mut crate_graph, detached_file_crate);\n     }\n-    crate_graph\n+    (crate_graph, FxHashMap::default())\n }\n \n fn handle_rustc_crates(\n     crate_graph: &mut CrateGraph,\n+    proc_macros: &mut ProcMacroPaths,\n     pkg_to_lib_crate: &mut FxHashMap<Package, CrateId>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n-    load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> ProcMacroLoadResult,\n     rustc_workspace: &CargoWorkspace,\n     cargo: &CargoWorkspace,\n     public_deps: &SysrootPublicDeps,\n@@ -1075,10 +1071,10 @@ fn handle_rustc_crates(\n                 if let Some(file_id) = load(&rustc_workspace[tgt].root) {\n                     let crate_id = add_target_crate_root(\n                         crate_graph,\n+                        proc_macros,\n                         &rustc_workspace[pkg],\n                         build_scripts.get_output(pkg),\n                         cfg_options.clone(),\n-                        &mut |path| load_proc_macro(&rustc_workspace[tgt].name, path),\n                         file_id,\n                         &rustc_workspace[tgt].name,\n                         rustc_workspace[tgt].is_proc_macro,\n@@ -1140,10 +1136,10 @@ fn handle_rustc_crates(\n \n fn add_target_crate_root(\n     crate_graph: &mut CrateGraph,\n+    proc_macros: &mut ProcMacroPaths,\n     pkg: &PackageData,\n     build_data: Option<&BuildScriptOutput>,\n     cfg_options: CfgOptions,\n-    load_proc_macro: &mut dyn FnMut(&AbsPath) -> ProcMacroLoadResult,\n     file_id: FileId,\n     cargo_name: &str,\n     is_proc_macro: bool,\n@@ -1176,26 +1172,28 @@ fn add_target_crate_root(\n         }\n     }\n \n-    let proc_macro = match build_data.as_ref().map(|it| it.proc_macro_dylib_path.as_ref()) {\n-        Some(Some(it)) => load_proc_macro(it),\n-        Some(None) => Err(\"no proc macro dylib present\".into()),\n-        None => Err(\"crate has not (yet) been built\".into()),\n-    };\n-\n     let display_name = CrateDisplayName::from_canonical_name(cargo_name.to_string());\n-    crate_graph.add_crate_root(\n+    let crate_id = crate_graph.add_crate_root(\n         file_id,\n         edition,\n         Some(display_name),\n         Some(pkg.version.to_string()),\n         cfg_options,\n         potential_cfg_options,\n         env,\n-        proc_macro,\n         is_proc_macro,\n         CrateOrigin::CratesIo { repo: pkg.repository.clone(), name: Some(pkg.name.clone()) },\n         target_layout,\n-    )\n+    );\n+    let proc_macro = match build_data.as_ref().map(|it| &it.proc_macro_dylib_path) {\n+        Some(it) => it.clone().map(Ok),\n+        None => Some(Err(\"crate has not (yet) been built\".into())),\n+    };\n+    if let Some(proc_macro) = proc_macro {\n+        proc_macros.insert(crate_id, proc_macro.map(|path| (Some(cargo_name.to_owned()), path)));\n+    }\n+\n+    crate_id\n }\n \n #[derive(Default)]\n@@ -1237,7 +1235,6 @@ fn sysroot_to_crate_graph(\n                 cfg_options.clone(),\n                 cfg_options.clone(),\n                 env,\n-                Err(\"no proc macro loaded for sysroot crate\".into()),\n                 false,\n                 CrateOrigin::Lang(LangCrateOrigin::from(&*sysroot[krate].name)),\n                 target_layout.clone(),"}, {"sha": "f5bc3c12c1491c10547ceb43b62fd255ec7e3113", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -6,7 +6,10 @@ use anyhow::Result;\n use crossbeam_channel::{unbounded, Receiver};\n use hir::db::DefDatabase;\n use ide::{AnalysisHost, Change};\n-use ide_db::{base_db::CrateGraph, FxHashMap};\n+use ide_db::{\n+    base_db::{CrateGraph, ProcMacros},\n+    FxHashMap,\n+};\n use proc_macro_api::ProcMacroServer;\n use project_model::{CargoConfig, ProjectManifest, ProjectWorkspace};\n use vfs::{loader::Handle, AbsPath, AbsPathBuf};\n@@ -66,7 +69,7 @@ pub fn load_workspace(\n         Box::new(loader)\n     };\n \n-    let proc_macro_client = match &load_config.with_proc_macro_server {\n+    let proc_macro_server = match &load_config.with_proc_macro_server {\n         ProcMacroServerChoice::Sysroot => ws\n             .find_sysroot_proc_macro_srv()\n             .ok_or_else(|| \"failed to find sysroot proc-macro server\".to_owned())\n@@ -79,10 +82,7 @@ pub fn load_workspace(\n         ProcMacroServerChoice::None => Err(\"proc macro server disabled\".to_owned()),\n     };\n \n-    let crate_graph = ws.to_crate_graph(\n-        &mut |_, path: &AbsPath| {\n-            load_proc_macro(proc_macro_client.as_ref().map_err(|e| &**e), path, &[])\n-        },\n+    let (crate_graph, proc_macros) = ws.to_crate_graph(\n         &mut |path: &AbsPath| {\n             let contents = loader.load_sync(path);\n             let path = vfs::VfsPath::from(path.to_path_buf());\n@@ -91,6 +91,21 @@ pub fn load_workspace(\n         },\n         extra_env,\n     );\n+    let proc_macros = {\n+        let proc_macro_server = match &proc_macro_server {\n+            Ok(it) => Ok(it),\n+            Err(e) => Err(e.as_str()),\n+        };\n+        proc_macros\n+            .into_iter()\n+            .map(|(crate_id, path)| {\n+                (\n+                    crate_id,\n+                    path.and_then(|(_, path)| load_proc_macro(proc_macro_server, &path, &[])),\n+                )\n+            })\n+            .collect()\n+    };\n \n     let project_folders = ProjectFolders::new(&[ws], &[]);\n     loader.set_config(vfs::loader::Config {\n@@ -100,17 +115,23 @@ pub fn load_workspace(\n     });\n \n     tracing::debug!(\"crate graph: {:?}\", crate_graph);\n-    let host =\n-        load_crate_graph(crate_graph, project_folders.source_root_config, &mut vfs, &receiver);\n+    let host = load_crate_graph(\n+        crate_graph,\n+        proc_macros,\n+        project_folders.source_root_config,\n+        &mut vfs,\n+        &receiver,\n+    );\n \n     if load_config.prefill_caches {\n         host.analysis().parallel_prime_caches(1, |_| {})?;\n     }\n-    Ok((host, vfs, proc_macro_client.ok()))\n+    Ok((host, vfs, proc_macro_server.ok()))\n }\n \n fn load_crate_graph(\n     crate_graph: CrateGraph,\n+    proc_macros: ProcMacros,\n     source_root_config: SourceRootConfig,\n     vfs: &mut vfs::Vfs,\n     receiver: &Receiver<vfs::loader::Message>,\n@@ -149,6 +170,7 @@ fn load_crate_graph(\n     analysis_change.set_roots(source_roots);\n \n     analysis_change.set_crate_graph(crate_graph);\n+    analysis_change.set_proc_macros(proc_macros);\n \n     host.apply_change(analysis_change);\n     host"}, {"sha": "d02714ad1ead093beb6f343d5be09cbcc29e0608", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -59,10 +59,11 @@ pub(crate) struct GlobalState {\n     pub(crate) mem_docs: MemDocs,\n     pub(crate) semantic_tokens_cache: Arc<Mutex<FxHashMap<Url, SemanticTokens>>>,\n     pub(crate) shutdown_requested: bool,\n-    pub(crate) proc_macro_changed: bool,\n     pub(crate) last_reported_status: Option<lsp_ext::ServerStatusParams>,\n     pub(crate) source_root_config: SourceRootConfig,\n-    pub(crate) proc_macro_clients: Vec<Result<ProcMacroServer, String>>,\n+\n+    pub(crate) proc_macro_changed: bool,\n+    pub(crate) proc_macro_clients: Arc<[Result<ProcMacroServer, String>]>,\n \n     pub(crate) flycheck: Arc<[FlycheckHandle]>,\n     pub(crate) flycheck_sender: Sender<flycheck::Message>,\n@@ -151,10 +152,11 @@ impl GlobalState {\n             mem_docs: MemDocs::default(),\n             semantic_tokens_cache: Arc::new(Default::default()),\n             shutdown_requested: false,\n-            proc_macro_changed: false,\n             last_reported_status: None,\n             source_root_config: SourceRootConfig::default(),\n-            proc_macro_clients: vec![],\n+\n+            proc_macro_changed: false,\n+            proc_macro_clients: Arc::new([]),\n \n             flycheck: Arc::new([]),\n             flycheck_sender,"}, {"sha": "8866515bb94dd375c8459ad8adb28944e86f3f34", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -5,6 +5,7 @@\n use std::{\n     io::Write as _,\n     process::{self, Stdio},\n+    sync::Arc,\n };\n \n use anyhow::Context;\n@@ -44,14 +45,22 @@ use crate::{\n };\n \n pub(crate) fn handle_workspace_reload(state: &mut GlobalState, _: ()) -> Result<()> {\n-    state.proc_macro_clients.clear();\n+    state.proc_macro_clients = Arc::new([]);\n     state.proc_macro_changed = false;\n \n     state.fetch_workspaces_queue.request_op(\"reload workspace request\".to_string());\n     state.fetch_build_data_queue.request_op(\"reload workspace request\".to_string());\n     Ok(())\n }\n \n+pub(crate) fn handle_proc_macros_reload(state: &mut GlobalState, _: ()) -> Result<()> {\n+    state.proc_macro_clients = Arc::new([]);\n+    state.proc_macro_changed = false;\n+\n+    state.fetch_build_data_queue.request_op(\"reload proc macros request\".to_string());\n+    Ok(())\n+}\n+\n pub(crate) fn handle_cancel_flycheck(state: &mut GlobalState, _: ()) -> Result<()> {\n     let _p = profile::span(\"handle_stop_flycheck\");\n     state.flycheck.iter().for_each(|flycheck| flycheck.cancel());"}, {"sha": "2f8829ec7386f3414f30b4aad61cc65d5c193df3", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -51,6 +51,14 @@ impl Request for ReloadWorkspace {\n     const METHOD: &'static str = \"rust-analyzer/reloadWorkspace\";\n }\n \n+pub enum ReloadProcMacros {}\n+\n+impl Request for ReloadProcMacros {\n+    type Params = ();\n+    type Result = ();\n+    const METHOD: &'static str = \"rust-analyzer/reloadProcMacros\";\n+}\n+\n pub enum SyntaxTree {}\n \n impl Request for SyntaxTree {"}, {"sha": "8db526e0b76dfe005e4cac0e51f194baa0fe855e", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -24,7 +24,7 @@ use crate::{\n     handlers, lsp_ext,\n     lsp_utils::{apply_document_changes, notification_is, Progress},\n     mem_docs::DocumentData,\n-    reload::{self, BuildDataProgress, ProjectWorkspaceProgress},\n+    reload::{self, BuildDataProgress, ProcMacroProgress, ProjectWorkspaceProgress},\n     Result,\n };\n \n@@ -68,6 +68,7 @@ pub(crate) enum Task {\n     PrimeCaches(PrimeCachesProgress),\n     FetchWorkspace(ProjectWorkspaceProgress),\n     FetchBuildData(BuildDataProgress),\n+    LoadProcMacros(ProcMacroProgress),\n }\n \n #[derive(Debug)]\n@@ -487,6 +488,21 @@ impl GlobalState {\n                     }\n                 };\n \n+                if let Some(state) = state {\n+                    self.report_progress(\"Building\", state, msg, None, None);\n+                }\n+            }\n+            Task::LoadProcMacros(progress) => {\n+                let (state, msg) = match progress {\n+                    ProcMacroProgress::Begin => (Some(Progress::Begin), None),\n+                    ProcMacroProgress::Report(msg) => (Some(Progress::Report), Some(msg)),\n+                    ProcMacroProgress::End(proc_macro_load_result) => {\n+                        self.set_proc_macros(proc_macro_load_result);\n+\n+                        (Some(Progress::End), None)\n+                    }\n+                };\n+\n                 if let Some(state) = state {\n                     self.report_progress(\"Loading\", state, msg, None, None);\n                 }\n@@ -633,6 +649,7 @@ impl GlobalState {\n \n         dispatcher\n             .on_sync_mut::<lsp_ext::ReloadWorkspace>(handlers::handle_workspace_reload)\n+            .on_sync_mut::<lsp_ext::ReloadProcMacros>(handlers::handle_proc_macros_reload)\n             .on_sync_mut::<lsp_ext::MemoryUsage>(handlers::handle_memory_usage)\n             .on_sync_mut::<lsp_ext::ShuffleCrateGraph>(handlers::handle_shuffle_crate_graph)\n             .on_sync::<lsp_ext::JoinLines>(handlers::handle_join_lines)"}, {"sha": "9c6edb46f41ca4509978d5c12d396db1ad54f79c", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 78, "deletions": 28, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -12,15 +12,15 @@\n //! correct. Instead, we try to provide a best-effort service. Even if the\n //! project is currently loading and we don't have a full project model, we\n //! still want to respond to various  requests.\n-use std::{collections::hash_map::Entry, mem, sync::Arc};\n+use std::{collections::hash_map::Entry, iter, mem, sync::Arc};\n \n use flycheck::{FlycheckConfig, FlycheckHandle};\n use hir::db::DefDatabase;\n use ide::Change;\n use ide_db::{\n     base_db::{\n         CrateGraph, Env, ProcMacro, ProcMacroExpander, ProcMacroExpansionError, ProcMacroKind,\n-        ProcMacroLoadResult, SourceRoot, VfsPath,\n+        ProcMacroLoadResult, ProcMacroPaths, ProcMacros, SourceRoot, VfsPath,\n     },\n     FxHashMap,\n };\n@@ -54,6 +54,13 @@ pub(crate) enum BuildDataProgress {\n     End((Arc<Vec<ProjectWorkspace>>, Vec<anyhow::Result<WorkspaceBuildScripts>>)),\n }\n \n+#[derive(Debug)]\n+pub(crate) enum ProcMacroProgress {\n+    Begin,\n+    Report(String),\n+    End(ProcMacros),\n+}\n+\n impl GlobalState {\n     pub(crate) fn is_quiescent(&self) -> bool {\n         !(self.last_reported_status.is_none()\n@@ -216,6 +223,59 @@ impl GlobalState {\n         });\n     }\n \n+    pub(crate) fn load_proc_macros(&mut self, paths: Vec<ProcMacroPaths>) {\n+        tracing::info!(\"will load proc macros\");\n+        let dummy_replacements = self.config.dummy_replacements().clone();\n+        let proc_macro_clients = self.proc_macro_clients.clone();\n+\n+        self.task_pool.handle.spawn_with_sender(move |sender| {\n+            sender.send(Task::LoadProcMacros(ProcMacroProgress::Begin)).unwrap();\n+\n+            let dummy_replacements = &dummy_replacements;\n+            let progress = {\n+                let sender = sender.clone();\n+                &move |msg| {\n+                    sender.send(Task::LoadProcMacros(ProcMacroProgress::Report(msg))).unwrap()\n+                }\n+            };\n+\n+            let mut res = FxHashMap::default();\n+            for (client, paths) in proc_macro_clients\n+                .iter()\n+                .map(|res| res.as_ref().map_err(|e| &**e))\n+                .chain(iter::repeat_with(|| Err(\"Proc macros are disabled\")))\n+                .zip(paths)\n+            {\n+                res.extend(paths.into_iter().map(move |(crate_id, res)| {\n+                    (\n+                        crate_id,\n+                        res.and_then(|(crate_name, path)| {\n+                            progress(path.display().to_string());\n+                            load_proc_macro(\n+                                client,\n+                                &path,\n+                                crate_name\n+                                    .as_deref()\n+                                    .and_then(|crate_name| {\n+                                        dummy_replacements.get(crate_name).map(|v| &**v)\n+                                    })\n+                                    .unwrap_or_default(),\n+                            )\n+                        }),\n+                    )\n+                }));\n+            }\n+\n+            sender.send(Task::LoadProcMacros(ProcMacroProgress::End(res))).unwrap();\n+        });\n+    }\n+\n+    pub(crate) fn set_proc_macros(&mut self, proc_macros: ProcMacros) {\n+        let mut change = Change::new();\n+        change.set_proc_macros(proc_macros);\n+        self.analysis_host.apply_change(change);\n+    }\n+\n     pub(crate) fn switch_workspaces(&mut self, cause: Cause) {\n         let _p = profile::span(\"GlobalState::switch_workspaces\");\n         tracing::info!(%cause, \"will switch workspaces\");\n@@ -303,8 +363,6 @@ impl GlobalState {\n             );\n         }\n \n-        let mut change = Change::new();\n-\n         let files_config = self.config.files();\n         let project_folders = ProjectFolders::new(&self.workspaces, &files_config.exclude);\n \n@@ -353,11 +411,10 @@ impl GlobalState {\n             watch,\n             version: self.vfs_config_version,\n         });\n+        self.source_root_config = project_folders.source_root_config;\n \n         // Create crate graph from all the workspaces\n-        let crate_graph = {\n-            let dummy_replacements = self.config.dummy_replacements();\n-\n+        let (crate_graph, proc_macro_paths) = {\n             let vfs = &mut self.vfs.write().0;\n             let loader = &mut self.loader;\n             let mem_docs = &self.mem_docs;\n@@ -376,33 +433,26 @@ impl GlobalState {\n             };\n \n             let mut crate_graph = CrateGraph::default();\n-            for (idx, ws) in self.workspaces.iter().enumerate() {\n-                let proc_macro_client = match self.proc_macro_clients.get(idx) {\n-                    Some(res) => res.as_ref().map_err(|e| &**e),\n-                    None => Err(\"Proc macros are disabled\"),\n-                };\n-                let mut load_proc_macro = move |crate_name: &str, path: &AbsPath| {\n-                    load_proc_macro(\n-                        proc_macro_client,\n-                        path,\n-                        dummy_replacements.get(crate_name).map(|v| &**v).unwrap_or_default(),\n-                    )\n-                };\n-                crate_graph.extend(ws.to_crate_graph(\n-                    &mut load_proc_macro,\n-                    &mut load,\n-                    &self.config.cargo().extra_env,\n-                ));\n+            let mut proc_macros = Vec::default();\n+            for ws in &**self.workspaces {\n+                let (other, mut crate_proc_macros) =\n+                    ws.to_crate_graph(&mut load, &self.config.cargo().extra_env);\n+                crate_graph.extend(other, &mut crate_proc_macros);\n+                proc_macros.push(crate_proc_macros);\n             }\n-            crate_graph\n+            (crate_graph, proc_macros)\n         };\n+        let mut change = Change::new();\n         change.set_crate_graph(crate_graph);\n-\n-        self.source_root_config = project_folders.source_root_config;\n-\n         self.analysis_host.apply_change(change);\n         self.process_changes();\n+\n+        if same_workspaces && !self.fetch_workspaces_queue.op_requested() {\n+            self.load_proc_macros(proc_macro_paths);\n+        }\n+\n         self.reload_flycheck();\n+\n         tracing::info!(\"did switch workspaces\");\n     }\n "}, {"sha": "11eda94f5bb644707dc8ef96d6a9e1a17379345d", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 37f31ae648632897\n+lsp_ext.rs hash: 92fe1037312754df\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:"}, {"sha": "8ce3466ed4400ada0386fb5c09b67f623af739f1", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -749,6 +749,10 @@ export function reloadWorkspace(ctx: CtxInit): Cmd {\n     return async () => ctx.client.sendRequest(ra.reloadWorkspace);\n }\n \n+export function reloadProcMacros(ctx: CtxInit): Cmd {\n+    return async () => ctx.client.sendRequest(ra.reloadProcMacros);\n+}\n+\n export function addProject(ctx: CtxInit): Cmd {\n     return async () => {\n         const discoverProjectCommand = ctx.config.discoverProjectCommand;"}, {"sha": "8da8b0d63a151419882984cb8bf6d89257d26e71", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -378,10 +378,13 @@ export class Ctx {\n         if (statusBar.tooltip.value) {\n             statusBar.tooltip.appendText(\"\\n\\n\");\n         }\n+        statusBar.tooltip.appendMarkdown(\"\\n\\n[Open logs](command:rust-analyzer.openLogs)\");\n         statusBar.tooltip.appendMarkdown(\n             \"\\n\\n[Reload Workspace](command:rust-analyzer.reloadWorkspace)\"\n         );\n-        statusBar.tooltip.appendMarkdown(\"\\n\\n[Open logs](command:rust-analyzer.openLogs)\");\n+        statusBar.tooltip.appendMarkdown(\n+            \"\\n\\n[Rebuild Proc Macros](command:rust-analyzer.reloadProcMacros)\"\n+        );\n         statusBar.tooltip.appendMarkdown(\"\\n\\n[Restart server](command:rust-analyzer.startServer)\");\n         statusBar.tooltip.appendMarkdown(\"\\n\\n[Stop server](command:rust-analyzer.stopServer)\");\n         if (!status.quiescent) icon = \"$(sync~spin) \";"}, {"sha": "a03777d1c0af43d1117c7cd1d4ca2a6bf15aa52f", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -43,6 +43,7 @@ export const relatedTests = new lc.RequestType<lc.TextDocumentPositionParams, Te\n     \"rust-analyzer/relatedTests\"\n );\n export const reloadWorkspace = new lc.RequestType0<null, void>(\"rust-analyzer/reloadWorkspace\");\n+export const reloadProcMacros = new lc.RequestType0<null, void>(\"rust-analyzer/reloadProcMacros\");\n \n export const runFlycheck = new lc.NotificationType<{\n     textDocument: lc.TextDocumentIdentifier | null;"}, {"sha": "7079f235cab1c34bac4957ed91649d70ee9cb659", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90340b71ad0b640c344a0c6ef6d7da8a6673d762/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/90340b71ad0b640c344a0c6ef6d7da8a6673d762/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=90340b71ad0b640c344a0c6ef6d7da8a6673d762", "patch": "@@ -153,6 +153,7 @@ function createCommands(): Record<string, CommandFactory> {\n         memoryUsage: { enabled: commands.memoryUsage },\n         shuffleCrateGraph: { enabled: commands.shuffleCrateGraph },\n         reloadWorkspace: { enabled: commands.reloadWorkspace },\n+        reloadProcMacros: { enabled: commands.reloadProcMacros },\n         addProject: { enabled: commands.addProject },\n         matchingBrace: { enabled: commands.matchingBrace },\n         joinLines: { enabled: commands.joinLines },"}]}