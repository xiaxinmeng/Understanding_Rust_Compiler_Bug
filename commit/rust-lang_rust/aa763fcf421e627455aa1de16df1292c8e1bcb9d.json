{"sha": "aa763fcf421e627455aa1de16df1292c8e1bcb9d", "node_id": "C_kwDOAAsO6NoAKGFhNzYzZmNmNDIxZTYyNzQ1NWFhMWRlMTZkZjEyOTJjOGUxYmNiOWQ", "commit": {"author": {"name": "Martin Nordholts", "email": "enselic@gmail.com", "date": "2022-02-19T08:50:35Z"}, "committer": {"name": "Martin Nordholts", "email": "enselic@gmail.com", "date": "2022-03-04T04:54:12Z"}, "message": "rustdoc-json: Include GenericParamDefKind::Type::synthetic in JSON\n\nThe rustdoc JSON for\n\n```\npub fn f(_: impl Clone) {}\n```\n\nwill effectively be\n\n```\npub fn f<impl Clone: Clone>(_: impl Clone)\n```\n\nwhere a synthetic generic parameter called `impl Clone` with generic\ntrait bound `Clone` is added to the function declaration.\n\nThe generated HTML filters out these generic parameters by doing\n`self.params.iter().filter(|p| !p.is_synthetic_type_param())`, because\nthe synthetic generic parameter is not of interest to regular users.\n\nFor the same reason, we should expose whether or not a generic parameter\nis synthetic or not also in the rustdoc JSON, so that rustdoc JSON\nclients can also have the option to hide synthetic generic parameters.", "tree": {"sha": "f0380c618dcca64aa91da9bc712991d4406132bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0380c618dcca64aa91da9bc712991d4406132bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa763fcf421e627455aa1de16df1292c8e1bcb9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa763fcf421e627455aa1de16df1292c8e1bcb9d", "html_url": "https://github.com/rust-lang/rust/commit/aa763fcf421e627455aa1de16df1292c8e1bcb9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa763fcf421e627455aa1de16df1292c8e1bcb9d/comments", "author": {"login": "Enselic", "id": 115040, "node_id": "MDQ6VXNlcjExNTA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/115040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enselic", "html_url": "https://github.com/Enselic", "followers_url": "https://api.github.com/users/Enselic/followers", "following_url": "https://api.github.com/users/Enselic/following{/other_user}", "gists_url": "https://api.github.com/users/Enselic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enselic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enselic/subscriptions", "organizations_url": "https://api.github.com/users/Enselic/orgs", "repos_url": "https://api.github.com/users/Enselic/repos", "events_url": "https://api.github.com/users/Enselic/events{/privacy}", "received_events_url": "https://api.github.com/users/Enselic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Enselic", "id": 115040, "node_id": "MDQ6VXNlcjExNTA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/115040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enselic", "html_url": "https://github.com/Enselic", "followers_url": "https://api.github.com/users/Enselic/followers", "following_url": "https://api.github.com/users/Enselic/following{/other_user}", "gists_url": "https://api.github.com/users/Enselic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enselic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enselic/subscriptions", "organizations_url": "https://api.github.com/users/Enselic/orgs", "repos_url": "https://api.github.com/users/Enselic/repos", "events_url": "https://api.github.com/users/Enselic/events{/privacy}", "received_events_url": "https://api.github.com/users/Enselic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d7684101a51f1c375ec84aef5d2fbdeb214bbc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d7684101a51f1c375ec84aef5d2fbdeb214bbc2", "html_url": "https://github.com/rust-lang/rust/commit/6d7684101a51f1c375ec84aef5d2fbdeb214bbc2"}], "stats": {"total": 48, "additions": 43, "deletions": 5}, "files": [{"sha": "7ffcfada5c07987b620ee32c27cbf4a3dc7db255", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa763fcf421e627455aa1de16df1292c8e1bcb9d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa763fcf421e627455aa1de16df1292c8e1bcb9d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=aa763fcf421e627455aa1de16df1292c8e1bcb9d", "patch": "@@ -340,9 +340,10 @@ impl FromWithTcx<clean::GenericParamDefKind> for GenericParamDefKind {\n             Lifetime { outlives } => GenericParamDefKind::Lifetime {\n                 outlives: outlives.into_iter().map(|lt| lt.0.to_string()).collect(),\n             },\n-            Type { did: _, bounds, default, synthetic: _ } => GenericParamDefKind::Type {\n+            Type { did: _, bounds, default, synthetic } => GenericParamDefKind::Type {\n                 bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n                 default: default.map(|x| (*x).into_tcx(tcx)),\n+                synthetic,\n             },\n             Const { did: _, ty, default } => {\n                 GenericParamDefKind::Const { ty: (*ty).into_tcx(tcx), default: default.map(|x| *x) }"}, {"sha": "7df880a4ed80731e3e0c2d7b671a6d4a7abc7b13", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/aa763fcf421e627455aa1de16df1292c8e1bcb9d/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa763fcf421e627455aa1de16df1292c8e1bcb9d/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=aa763fcf421e627455aa1de16df1292c8e1bcb9d", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 12;\n+pub const FORMAT_VERSION: u32 = 13;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -346,9 +346,41 @@ pub struct GenericParamDef {\n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n #[serde(rename_all = \"snake_case\")]\n pub enum GenericParamDefKind {\n-    Lifetime { outlives: Vec<String> },\n-    Type { bounds: Vec<GenericBound>, default: Option<Type> },\n-    Const { ty: Type, default: Option<String> },\n+    Lifetime {\n+        outlives: Vec<String>,\n+    },\n+    Type {\n+        bounds: Vec<GenericBound>,\n+        default: Option<Type>,\n+        /// This is normally `false`, which means that this generic parameter is\n+        /// declared in the Rust source text.\n+        ///\n+        /// If it is `true`, this generic parameter has been introduced by the\n+        /// compiler behind the scenes.\n+        ///\n+        /// # Example\n+        ///\n+        /// Consider\n+        ///\n+        /// ```ignore (pseudo-rust)\n+        /// pub fn f(_: impl Trait) {}\n+        /// ```\n+        ///\n+        /// The compiler will transform this behind the scenes to\n+        ///\n+        /// ```ignore (pseudo-rust)\n+        /// pub fn f<impl Trait: Trait>(_: impl Trait) {}\n+        /// ```\n+        ///\n+        /// In this example, the generic parameter named `impl Trait` (and which\n+        /// is bound by `Trait`) is synthetic, because it was not originally in\n+        /// the Rust source text.\n+        synthetic: bool,\n+    },\n+    Const {\n+        ty: Type,\n+        default: Option<String>,\n+    },\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]"}, {"sha": "f80c380337bfe8d3abab32e857dcf7cfffd0fa6a", "filename": "src/test/rustdoc-json/fns/generics.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa763fcf421e627455aa1de16df1292c8e1bcb9d/src%2Ftest%2Frustdoc-json%2Ffns%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa763fcf421e627455aa1de16df1292c8e1bcb9d/src%2Ftest%2Frustdoc-json%2Ffns%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fgenerics.rs?ref=aa763fcf421e627455aa1de16df1292c8e1bcb9d", "patch": "@@ -0,0 +1,5 @@\n+// @has generics.json \"$.index[*][?(@.name=='one_generic_param_fn')].inner.generics.params[0].kind.type.synthetic\" false\n+pub fn one_generic_param_fn<T>(_: T) {}\n+\n+// @has - \"$.index[*][?(@.name=='one_synthetic_generic_param_fn')].inner.generics.params[0].kind.type.synthetic\" true\n+pub fn one_synthetic_generic_param_fn(_: impl Clone) {}"}]}