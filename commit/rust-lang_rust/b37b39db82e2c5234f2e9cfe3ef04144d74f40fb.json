{"sha": "b37b39db82e2c5234f2e9cfe3ef04144d74f40fb", "node_id": "C_kwDOAAsO6NoAKGIzN2IzOWRiODJlMmM1MjM0ZjJlOWNmZTNlZjA0MTQ0ZDc0ZjQwZmI", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-07-25T22:14:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-25T22:14:51Z"}, "message": "Rollup merge of #99709 - lcnr:rm-MaybeTypeckResults, r=compiler-errors\n\n`Inherited` always has `TypeckResults` available", "tree": {"sha": "6b909ec0923a4e9b7942d162cf26e70335dbb84b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b909ec0923a4e9b7942d162cf26e70335dbb84b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b37b39db82e2c5234f2e9cfe3ef04144d74f40fb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi3xXbCRBK7hj4Ov3rIwAApJoIAHhzWTM+L2ADP6wnQcq+ahzL\nA9jIAEWcnH81zTYU1AXtrL5Ofryy6KaOliCX63+Yuk7k/m3888S/OY7u8HKnbsvS\n/1/czya4Jo9gINJkxvYreXPjFc3QKv/+2SIH1Vmj0iZ5PdylfnDYhE87X2+/y5Sx\n5pqmrUIXV4UjxR5nhx/0wXAyuzJ6ZFiBIycfBb7T3zy4HtXj0A89FwmL3inji/3j\n5p4D0VlcNHen02n40vcNGmedK26Jg4kf8Q2sRXmsc845otAe+OWT40gMy2130Q8D\ndd2jHNJPkgt1FgfoZlHO6NMditIsHeaKFaVC84dhqlLPX9LhtdPPTa/rWSKkjSY=\n=T+P0\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b909ec0923a4e9b7942d162cf26e70335dbb84b\nparent 5bbdf659965abf2bcc16b4d0f9e487ee570ba999\nparent 0c6c69f2e2106c7717275260e5bfc4712c640cc3\nauthor Yuki Okushi <jtitor@2k36.org> 1658787291 +0900\ncommitter GitHub <noreply@github.com> 1658787291 +0900\n\nRollup merge of #99709 - lcnr:rm-MaybeTypeckResults, r=compiler-errors\n\n`Inherited` always has `TypeckResults` available\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b37b39db82e2c5234f2e9cfe3ef04144d74f40fb", "html_url": "https://github.com/rust-lang/rust/commit/b37b39db82e2c5234f2e9cfe3ef04144d74f40fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b37b39db82e2c5234f2e9cfe3ef04144d74f40fb/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bbdf659965abf2bcc16b4d0f9e487ee570ba999", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bbdf659965abf2bcc16b4d0f9e487ee570ba999", "html_url": "https://github.com/rust-lang/rust/commit/5bbdf659965abf2bcc16b4d0f9e487ee570ba999"}, {"sha": "0c6c69f2e2106c7717275260e5bfc4712c640cc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6c69f2e2106c7717275260e5bfc4712c640cc3", "html_url": "https://github.com/rust-lang/rust/commit/0c6c69f2e2106c7717275260e5bfc4712c640cc3"}], "stats": {"total": 38, "additions": 5, "deletions": 33}, "files": [{"sha": "a499179b95f107c70be5c30e40743ee5fcb2fa29", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b37b39db82e2c5234f2e9cfe3ef04144d74f40fb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b37b39db82e2c5234f2e9cfe3ef04144d74f40fb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=b37b39db82e2c5234f2e9cfe3ef04144d74f40fb", "patch": "@@ -1,5 +1,4 @@\n use super::callee::DeferredCallResolution;\n-use super::MaybeInProgressTables;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n@@ -29,7 +28,7 @@ use std::ops::Deref;\n pub struct Inherited<'a, 'tcx> {\n     pub(super) infcx: InferCtxt<'a, 'tcx>,\n \n-    pub(super) typeck_results: super::MaybeInProgressTables<'a, 'tcx>,\n+    pub(super) typeck_results: &'a RefCell<ty::TypeckResults<'tcx>>,\n \n     pub(super) locals: RefCell<HirIdMap<super::LocalTy<'tcx>>>,\n \n@@ -110,11 +109,11 @@ impl<'a, 'tcx> Inherited<'a, 'tcx> {\n         let tcx = infcx.tcx;\n         let item_id = tcx.hir().local_def_id_to_hir_id(def_id);\n         let body_id = tcx.hir().maybe_body_owned_by(item_id);\n+        let typeck_results =\n+            infcx.in_progress_typeck_results.expect(\"building `FnCtxt` without typeck results\");\n \n         Inherited {\n-            typeck_results: MaybeInProgressTables {\n-                maybe_typeck_results: infcx.in_progress_typeck_results,\n-            },\n+            typeck_results,\n             infcx,\n             fulfillment_cx: RefCell::new(<dyn TraitEngine<'_>>::new(tcx)),\n             locals: RefCell::new(Default::default()),"}, {"sha": "17c2e4868aac70e3e03eacd37fae0dc9d74b5a2d", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b37b39db82e2c5234f2e9cfe3ef04144d74f40fb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b37b39db82e2c5234f2e9cfe3ef04144d74f40fb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=b37b39db82e2c5234f2e9cfe3ef04144d74f40fb", "patch": "@@ -128,8 +128,7 @@ use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::error_reporting::recursive_type_with_infinite_size_error;\n use rustc_trait_selection::traits::error_reporting::suggestions::ReturnsVisitor;\n-\n-use std::cell::{Ref, RefCell, RefMut};\n+use std::cell::RefCell;\n \n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::indenter;\n@@ -900,32 +899,6 @@ enum TupleArgumentsFlag {\n     TupleArguments,\n }\n \n-/// A wrapper for `InferCtxt`'s `in_progress_typeck_results` field.\n-#[derive(Copy, Clone)]\n-struct MaybeInProgressTables<'a, 'tcx> {\n-    maybe_typeck_results: Option<&'a RefCell<ty::TypeckResults<'tcx>>>,\n-}\n-\n-impl<'a, 'tcx> MaybeInProgressTables<'a, 'tcx> {\n-    fn borrow(self) -> Ref<'a, ty::TypeckResults<'tcx>> {\n-        match self.maybe_typeck_results {\n-            Some(typeck_results) => typeck_results.borrow(),\n-            None => bug!(\n-                \"MaybeInProgressTables: inh/fcx.typeck_results.borrow() with no typeck results\"\n-            ),\n-        }\n-    }\n-\n-    fn borrow_mut(self) -> RefMut<'a, ty::TypeckResults<'tcx>> {\n-        match self.maybe_typeck_results {\n-            Some(typeck_results) => typeck_results.borrow_mut(),\n-            None => bug!(\n-                \"MaybeInProgressTables: inh/fcx.typeck_results.borrow_mut() with no typeck results\"\n-            ),\n-        }\n-    }\n-}\n-\n fn typeck_item_bodies(tcx: TyCtxt<'_>, (): ()) {\n     tcx.hir().par_body_owners(|body_owner_def_id| tcx.ensure().typeck(body_owner_def_id));\n }"}]}