{"sha": "323781cdf700172a9b8fedf0614a995d4a4d81c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMzc4MWNkZjcwMDE3MmE5YjhmZWRmMDYxNGE5OTVkNGE0ZDgxYzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-29T06:00:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-29T06:00:05Z"}, "message": "Auto merge of #30075 - kyeah:mac-span, r=sanxiyn\n\nFixes #28424 (item macros), #30067 (impl item macros), and pattern macros.", "tree": {"sha": "7ac9496b19f298ed4807f1ab04600650035e5957", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ac9496b19f298ed4807f1ab04600650035e5957"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/323781cdf700172a9b8fedf0614a995d4a4d81c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/323781cdf700172a9b8fedf0614a995d4a4d81c0", "html_url": "https://github.com/rust-lang/rust/commit/323781cdf700172a9b8fedf0614a995d4a4d81c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/323781cdf700172a9b8fedf0614a995d4a4d81c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7499558dd0a64b3485f2d1b3c7df05616893673d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7499558dd0a64b3485f2d1b3c7df05616893673d", "html_url": "https://github.com/rust-lang/rust/commit/7499558dd0a64b3485f2d1b3c7df05616893673d"}, {"sha": "920120ed4ce2389b0db5cdabb3eb60535da5836d", "url": "https://api.github.com/repos/rust-lang/rust/commits/920120ed4ce2389b0db5cdabb3eb60535da5836d", "html_url": "https://github.com/rust-lang/rust/commit/920120ed4ce2389b0db5cdabb3eb60535da5836d"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "ce65f99e2f0c989122b9db55145dda6183be3481", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/323781cdf700172a9b8fedf0614a995d4a4d81c0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/323781cdf700172a9b8fedf0614a995d4a4d81c0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=323781cdf700172a9b8fedf0614a995d4a4d81c0", "patch": "@@ -3253,7 +3253,8 @@ impl<'a> Parser<'a> {\n                         let tts = try!(self.parse_seq_to_end(&token::CloseDelim(delim),\n                                 seq_sep_none(), |p| p.parse_token_tree()));\n                         let mac = Mac_ { path: path, tts: tts, ctxt: EMPTY_CTXT };\n-                        pat = PatMac(codemap::Spanned {node: mac, span: self.span});\n+                        pat = PatMac(codemap::Spanned {node: mac,\n+                                                       span: mk_sp(lo, self.last_span.hi)});\n                     } else {\n                         // Parse ident @ pat\n                         // This can give false positives and parse nullary enums,\n@@ -4475,6 +4476,7 @@ impl<'a> Parser<'a> {\n             let last_span = self.last_span;\n             self.complain_if_pub_macro(vis, last_span);\n \n+            let lo = self.span.lo;\n             let pth = try!(self.parse_path(NoTypesAllowed));\n             try!(self.expect(&token::Not));\n \n@@ -4485,8 +4487,8 @@ impl<'a> Parser<'a> {\n                                             |p| p.parse_token_tree()));\n             let m_ = Mac_ { path: pth, tts: tts, ctxt: EMPTY_CTXT };\n             let m: ast::Mac = codemap::Spanned { node: m_,\n-                                                span: mk_sp(self.span.lo,\n-                                                            self.span.hi) };\n+                                                span: mk_sp(lo,\n+                                                            self.last_span.hi) };\n             if delim != token::Brace {\n                 try!(self.expect(&token::Semi))\n             }\n@@ -5513,6 +5515,8 @@ impl<'a> Parser<'a> {\n             let last_span = self.last_span;\n             self.complain_if_pub_macro(visibility, last_span);\n \n+            let mac_lo = self.span.lo;\n+\n             // item macro.\n             let pth = try!(self.parse_path(NoTypesAllowed));\n             try!(self.expect(&token::Not));\n@@ -5533,8 +5537,8 @@ impl<'a> Parser<'a> {\n             // single-variant-enum... :\n             let m = Mac_ { path: pth, tts: tts, ctxt: EMPTY_CTXT };\n             let m: ast::Mac = codemap::Spanned { node: m,\n-                                             span: mk_sp(self.span.lo,\n-                                                         self.span.hi) };\n+                                             span: mk_sp(mac_lo,\n+                                                         self.last_span.hi) };\n \n             if delim != token::Brace {\n                 if !try!(self.eat(&token::Semi) ){"}]}