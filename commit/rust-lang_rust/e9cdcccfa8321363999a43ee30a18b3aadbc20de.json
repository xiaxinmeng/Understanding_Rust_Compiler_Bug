{"sha": "e9cdcccfa8321363999a43ee30a18b3aadbc20de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5Y2RjY2NmYTgzMjEzNjM5OTlhNDNlZTMwYTE4YjNhYWRiYzIwZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-07T15:33:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-07T15:33:46Z"}, "message": "Auto merge of #83964 - Dylan-DPC:rollup-9kinaiv, r=Dylan-DPC\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #83476 (Add strong_count mutation methods to Rc)\n - #83634 (Do not emit the advanced diagnostics on macros)\n - #83816 (Trigger `unused_doc_comments` on macros at once)\n - #83916 (Use AnonConst for asm! constants)\n - #83935 (forbid `impl Trait` in generic param defaults)\n - #83936 (Disable using non-ascii identifiers in extern blocks.)\n - #83945 (Add suggestion to reborrow mutable references when they're moved in a for loop)\n - #83954 (Do not ICE when closure is involved in Trait Alias Impl Trait)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b9649646765b2d3c8d0a6d6595fdd5efa1cc9b03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9649646765b2d3c8d0a6d6595fdd5efa1cc9b03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9cdcccfa8321363999a43ee30a18b3aadbc20de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9cdcccfa8321363999a43ee30a18b3aadbc20de", "html_url": "https://github.com/rust-lang/rust/commit/e9cdcccfa8321363999a43ee30a18b3aadbc20de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9cdcccfa8321363999a43ee30a18b3aadbc20de/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b01026de465d5a5ef51e32c1012c43927d2a111c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b01026de465d5a5ef51e32c1012c43927d2a111c", "html_url": "https://github.com/rust-lang/rust/commit/b01026de465d5a5ef51e32c1012c43927d2a111c"}, {"sha": "d82419b4062d69a197d543a17367f254d1b4fcff", "url": "https://api.github.com/repos/rust-lang/rust/commits/d82419b4062d69a197d543a17367f254d1b4fcff", "html_url": "https://github.com/rust-lang/rust/commit/d82419b4062d69a197d543a17367f254d1b4fcff"}], "stats": {"total": 1302, "additions": 902, "deletions": 400}, "files": [{"sha": "da9accd18391afe0b8a042a763394be164b40a73", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1998,7 +1998,7 @@ pub enum InlineAsmOperand {\n         out_expr: Option<P<Expr>>,\n     },\n     Const {\n-        expr: P<Expr>,\n+        anon_const: AnonConst,\n     },\n     Sym {\n         expr: P<Expr>,"}, {"sha": "b1840f475aa07353cb5f26c57a2b504d3e9ccdcb", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1252,7 +1252,6 @@ pub fn noop_visit_expr<T: MutVisitor>(\n                 match op {\n                     InlineAsmOperand::In { expr, .. }\n                     | InlineAsmOperand::InOut { expr, .. }\n-                    | InlineAsmOperand::Const { expr, .. }\n                     | InlineAsmOperand::Sym { expr, .. } => vis.visit_expr(expr),\n                     InlineAsmOperand::Out { expr, .. } => {\n                         if let Some(expr) = expr {\n@@ -1265,6 +1264,7 @@ pub fn noop_visit_expr<T: MutVisitor>(\n                             vis.visit_expr(out_expr);\n                         }\n                     }\n+                    InlineAsmOperand::Const { anon_const, .. } => vis.visit_anon_const(anon_const),\n                 }\n             }\n         }"}, {"sha": "3f35919ae6a2aa7fbcd0266aeedf7936b356282b", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -835,7 +835,6 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n                 match op {\n                     InlineAsmOperand::In { expr, .. }\n                     | InlineAsmOperand::InOut { expr, .. }\n-                    | InlineAsmOperand::Const { expr, .. }\n                     | InlineAsmOperand::Sym { expr, .. } => visitor.visit_expr(expr),\n                     InlineAsmOperand::Out { expr, .. } => {\n                         if let Some(expr) = expr {\n@@ -848,6 +847,9 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n                             visitor.visit_expr(out_expr);\n                         }\n                     }\n+                    InlineAsmOperand::Const { anon_const, .. } => {\n+                        visitor.visit_anon_const(anon_const)\n+                    }\n                 }\n             }\n         }"}, {"sha": "75dfe951c94807135e17c2cd55992780adc2ee00", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1411,9 +1411,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             out_expr: out_expr.as_ref().map(|expr| self.lower_expr_mut(expr)),\n                         }\n                     }\n-                    InlineAsmOperand::Const { ref expr } => {\n-                        hir::InlineAsmOperand::Const { expr: self.lower_expr_mut(expr) }\n-                    }\n+                    InlineAsmOperand::Const { ref anon_const } => hir::InlineAsmOperand::Const {\n+                        anon_const: self.lower_anon_const(anon_const),\n+                    },\n                     InlineAsmOperand::Sym { ref expr } => {\n                         hir::InlineAsmOperand::Sym { expr: self.lower_expr_mut(expr) }\n                     }"}, {"sha": "be56f97af8a3d18d4307da8150ec3c56608197fb", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -2259,13 +2259,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                 let kind = hir::GenericParamKind::Type {\n                     default: default.as_ref().map(|x| {\n-                        self.lower_ty(\n-                            x,\n-                            ImplTraitContext::OtherOpaqueTy {\n-                                capturable_lifetimes: &mut FxHashSet::default(),\n-                                origin: hir::OpaqueTyOrigin::Misc,\n-                            },\n-                        )\n+                        self.lower_ty(x, ImplTraitContext::Disallowed(ImplTraitPosition::Other))\n                     }),\n                     synthetic: param\n                         .attrs"}, {"sha": "bb09f701531cf196ce6305986d5cdf22ecff2df8", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -532,6 +532,25 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n+    /// An item in `extern { ... }` cannot use non-ascii identifier.\n+    fn check_foreign_item_ascii_only(&self, ident: Ident) {\n+        let symbol_str = ident.as_str();\n+        if !symbol_str.is_ascii() {\n+            let n = 83942;\n+            self.err_handler()\n+                .struct_span_err(\n+                    ident.span,\n+                    \"items in `extern` blocks cannot use non-ascii identifiers\",\n+                )\n+                .span_label(self.current_extern_span(), \"in this `extern` block\")\n+                .note(&format!(\n+                    \"This limitation may be lifted in the future; see issue #{} <https://github.com/rust-lang/rust/issues/{}> for more information\",\n+                    n, n,\n+                ))\n+                .emit();\n+        }\n+    }\n+\n     /// Reject C-varadic type unless the function is foreign,\n     /// or free and `unsafe extern \"C\"` semantically.\n     fn check_c_varadic_type(&self, fk: FnKind<'a>) {\n@@ -592,7 +611,7 @@ impl<'a> AstValidator<'a> {\n             self.session,\n             ident.span,\n             E0754,\n-            \"trying to load file for module `{}` with non ascii identifer name\",\n+            \"trying to load file for module `{}` with non-ascii identifier name\",\n             ident.name\n         )\n         .help(\"consider using `#[path]` attribute to specify filesystem path\")\n@@ -1103,15 +1122,18 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 self.check_defaultness(fi.span, *def);\n                 self.check_foreign_fn_bodyless(fi.ident, body.as_deref());\n                 self.check_foreign_fn_headerless(fi.ident, fi.span, sig.header);\n+                self.check_foreign_item_ascii_only(fi.ident);\n             }\n             ForeignItemKind::TyAlias(box TyAliasKind(def, generics, bounds, body)) => {\n                 self.check_defaultness(fi.span, *def);\n                 self.check_foreign_kind_bodyless(fi.ident, \"type\", body.as_ref().map(|b| b.span));\n                 self.check_type_no_bounds(bounds, \"`extern` blocks\");\n                 self.check_foreign_ty_genericless(generics);\n+                self.check_foreign_item_ascii_only(fi.ident);\n             }\n             ForeignItemKind::Static(_, _, body) => {\n                 self.check_foreign_kind_bodyless(fi.ident, \"static\", body.as_ref().map(|b| b.span));\n+                self.check_foreign_item_ascii_only(fi.ident);\n             }\n             ForeignItemKind::MacCall(..) => {}\n         }"}, {"sha": "789d2c296e291c3d905ce9ed3bf9bd5fa1d60caf", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -2149,10 +2149,10 @@ impl<'a> State<'a> {\n                                     None => s.word(\"_\"),\n                                 }\n                             }\n-                            InlineAsmOperand::Const { expr } => {\n+                            InlineAsmOperand::Const { anon_const } => {\n                                 s.word(\"const\");\n                                 s.space();\n-                                s.print_expr(expr);\n+                                s.print_expr(&anon_const.value);\n                             }\n                             InlineAsmOperand::Sym { expr } => {\n                                 s.word(\"sym\");"}, {"sha": "fd976b119b748bcf8a9a8dd30d814d4e6ea4c654", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -136,8 +136,8 @@ fn parse_args<'a>(\n                 ast::InlineAsmOperand::InOut { reg, expr, late: true }\n             }\n         } else if p.eat_keyword(kw::Const) {\n-            let expr = p.parse_expr()?;\n-            ast::InlineAsmOperand::Const { expr }\n+            let anon_const = p.parse_anon_const_expr()?;\n+            ast::InlineAsmOperand::Const { anon_const }\n         } else if p.eat_keyword(sym::sym) {\n             let expr = p.parse_expr()?;\n             match expr.kind {"}, {"sha": "fd3f89a2aee965e551be4c11286f9c894ea3d40b", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 30, "deletions": 34, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -822,41 +822,37 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     InlineAsmOperandRef::InOut { reg, late, in_value, out_place }\n                 }\n                 mir::InlineAsmOperand::Const { ref value } => {\n-                    if let mir::Operand::Constant(constant) = value {\n-                        let const_value = self\n-                            .eval_mir_constant(constant)\n-                            .unwrap_or_else(|_| span_bug!(span, \"asm const cannot be resolved\"));\n-                        let ty = constant.ty();\n-                        let size = bx.layout_of(ty).size;\n-                        let scalar = match const_value {\n-                            ConstValue::Scalar(s) => s,\n-                            _ => span_bug!(\n-                                span,\n-                                \"expected Scalar for promoted asm const, but got {:#?}\",\n-                                const_value\n-                            ),\n-                        };\n-                        let value = scalar.assert_bits(size);\n-                        let string = match ty.kind() {\n-                            ty::Uint(_) => value.to_string(),\n-                            ty::Int(int_ty) => {\n-                                match int_ty.normalize(bx.tcx().sess.target.pointer_width) {\n-                                    ty::IntTy::I8 => (value as i8).to_string(),\n-                                    ty::IntTy::I16 => (value as i16).to_string(),\n-                                    ty::IntTy::I32 => (value as i32).to_string(),\n-                                    ty::IntTy::I64 => (value as i64).to_string(),\n-                                    ty::IntTy::I128 => (value as i128).to_string(),\n-                                    ty::IntTy::Isize => unreachable!(),\n-                                }\n+                    let const_value = self\n+                        .eval_mir_constant(value)\n+                        .unwrap_or_else(|_| span_bug!(span, \"asm const cannot be resolved\"));\n+                    let ty = value.ty();\n+                    let size = bx.layout_of(ty).size;\n+                    let scalar = match const_value {\n+                        ConstValue::Scalar(s) => s,\n+                        _ => span_bug!(\n+                            span,\n+                            \"expected Scalar for promoted asm const, but got {:#?}\",\n+                            const_value\n+                        ),\n+                    };\n+                    let value = scalar.assert_bits(size);\n+                    let string = match ty.kind() {\n+                        ty::Uint(_) => value.to_string(),\n+                        ty::Int(int_ty) => {\n+                            match int_ty.normalize(bx.tcx().sess.target.pointer_width) {\n+                                ty::IntTy::I8 => (value as i8).to_string(),\n+                                ty::IntTy::I16 => (value as i16).to_string(),\n+                                ty::IntTy::I32 => (value as i32).to_string(),\n+                                ty::IntTy::I64 => (value as i64).to_string(),\n+                                ty::IntTy::I128 => (value as i128).to_string(),\n+                                ty::IntTy::Isize => unreachable!(),\n                             }\n-                            ty::Float(ty::FloatTy::F32) => f32::from_bits(value as u32).to_string(),\n-                            ty::Float(ty::FloatTy::F64) => f64::from_bits(value as u64).to_string(),\n-                            _ => span_bug!(span, \"asm const has bad type {}\", ty),\n-                        };\n-                        InlineAsmOperandRef::Const { string }\n-                    } else {\n-                        span_bug!(span, \"asm const is not a constant\");\n-                    }\n+                        }\n+                        ty::Float(ty::FloatTy::F32) => f32::from_bits(value as u32).to_string(),\n+                        ty::Float(ty::FloatTy::F64) => f64::from_bits(value as u64).to_string(),\n+                        _ => span_bug!(span, \"asm const has bad type {}\", ty),\n+                    };\n+                    InlineAsmOperandRef::Const { string }\n                 }\n                 mir::InlineAsmOperand::SymFn { ref value } => {\n                     let literal = self.monomorphize(value.literal);"}, {"sha": "0f4441d020be301bddee63a06e1644a48780f2e5", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1067,13 +1067,23 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n     // since they will not be detected after macro expansion.\n     fn check_attributes(&mut self, attrs: &[ast::Attribute]) {\n         let features = self.cx.ecfg.features.unwrap();\n-        for attr in attrs.iter() {\n+        let mut attrs = attrs.iter().peekable();\n+        let mut span: Option<Span> = None;\n+        while let Some(attr) = attrs.next() {\n             rustc_ast_passes::feature_gate::check_attribute(attr, self.cx.sess, features);\n             validate_attr::check_meta(&self.cx.sess.parse_sess, attr);\n+\n+            let current_span = if let Some(sp) = span { sp.to(attr.span) } else { attr.span };\n+            span = Some(current_span);\n+\n+            if attrs.peek().map_or(false, |next_attr| next_attr.doc_str().is_some()) {\n+                continue;\n+            }\n+\n             if attr.doc_str().is_some() {\n                 self.cx.sess.parse_sess.buffer_lint_with_diagnostic(\n                     &UNUSED_DOC_COMMENTS,\n-                    attr.span,\n+                    current_span,\n                     ast::CRATE_NODE_ID,\n                     \"unused doc comment\",\n                     BuiltinLintDiagnostics::UnusedDocComment(attr.span),"}, {"sha": "1051fb8cea27940fedba9dc77fc21b881adda0d8", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -2347,7 +2347,7 @@ pub enum InlineAsmOperand<'hir> {\n         out_expr: Option<Expr<'hir>>,\n     },\n     Const {\n-        expr: Expr<'hir>,\n+        anon_const: AnonConst,\n     },\n     Sym {\n         expr: Expr<'hir>,"}, {"sha": "43b67f95510117f428c376a8b694a9938e19d0b8", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1189,7 +1189,6 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n                 match op {\n                     InlineAsmOperand::In { expr, .. }\n                     | InlineAsmOperand::InOut { expr, .. }\n-                    | InlineAsmOperand::Const { expr, .. }\n                     | InlineAsmOperand::Sym { expr, .. } => visitor.visit_expr(expr),\n                     InlineAsmOperand::Out { expr, .. } => {\n                         if let Some(expr) = expr {\n@@ -1202,6 +1201,9 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n                             visitor.visit_expr(out_expr);\n                         }\n                     }\n+                    InlineAsmOperand::Const { anon_const, .. } => {\n+                        visitor.visit_anon_const(anon_const)\n+                    }\n                 }\n             }\n         }"}, {"sha": "5820e7a261230832f99b64b247e5a157d76fdcef", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1570,10 +1570,10 @@ impl<'a> State<'a> {\n                                 None => s.word(\"_\"),\n                             }\n                         }\n-                        hir::InlineAsmOperand::Const { expr } => {\n+                        hir::InlineAsmOperand::Const { anon_const } => {\n                             s.word(\"const\");\n                             s.space();\n-                            s.print_expr(expr);\n+                            s.print_anon_const(anon_const);\n                         }\n                         hir::InlineAsmOperand::Sym { expr } => {\n                             s.word(\"sym\");"}, {"sha": "b9de144b0eb390ac5b6267c1c87b0849bfc5915f", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -989,7 +989,7 @@ fn warn_if_doc(cx: &EarlyContext<'_>, node_span: Span, node_kind: &str, attrs: &\n                 Some(sugared_span.map_or(attr.span, |span| span.with_hi(attr.span.hi())));\n         }\n \n-        if attrs.peek().map(|next_attr| next_attr.is_doc_comment()).unwrap_or_default() {\n+        if attrs.peek().map_or(false, |next_attr| next_attr.is_doc_comment()) {\n             continue;\n         }\n "}, {"sha": "89f456400940e12c9e5e11601d310dec31cd097b", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1213,7 +1213,7 @@ pub enum InlineAsmOperand<'tcx> {\n         out_place: Option<Place<'tcx>>,\n     },\n     Const {\n-        value: Operand<'tcx>,\n+        value: Box<Constant<'tcx>>,\n     },\n     SymFn {\n         value: Box<Constant<'tcx>>,"}, {"sha": "5516a045c1db0e761429a878832168957ec3ff8e", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -584,8 +584,7 @@ macro_rules! make_mir_visitor {\n                     } => {\n                         for op in operands {\n                             match op {\n-                                InlineAsmOperand::In { value, .. }\n-                                | InlineAsmOperand::Const { value } => {\n+                                InlineAsmOperand::In { value, .. } => {\n                                     self.visit_operand(value, location);\n                                 }\n                                 InlineAsmOperand::Out { place, .. } => {\n@@ -607,7 +606,8 @@ macro_rules! make_mir_visitor {\n                                         );\n                                     }\n                                 }\n-                                InlineAsmOperand::SymFn { value } => {\n+                                InlineAsmOperand::Const { value }\n+                                | InlineAsmOperand::SymFn { value } => {\n                                     self.visit_constant(value, location);\n                                 }\n                                 InlineAsmOperand::SymStatic { def_id: _ } => {}"}, {"sha": "5fdf8a8d1ee195d322f79af77cb250f5b6888707", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -264,7 +264,24 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n                 if let Some(DesugaringKind::ForLoop(_)) = move_span.desugaring_kind() {\n                     let sess = self.infcx.tcx.sess;\n-                    if let Ok(snippet) = sess.source_map().span_to_snippet(move_span) {\n+                    let ty = used_place.ty(self.body, self.infcx.tcx).ty;\n+                    // If we have a `&mut` ref, we need to reborrow.\n+                    if let ty::Ref(_, _, hir::Mutability::Mut) = ty.kind() {\n+                        // If we are in a loop this will be suggested later.\n+                        if !is_loop_move {\n+                            err.span_suggestion_verbose(\n+                                move_span.shrink_to_lo(),\n+                                &format!(\n+                                    \"consider creating a fresh reborrow of {} here\",\n+                                    self.describe_place(moved_place.as_ref())\n+                                        .map(|n| format!(\"`{}`\", n))\n+                                        .unwrap_or_else(|| \"the mutable reference\".to_string()),\n+                                ),\n+                                format!(\"&mut *\"),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n+                    } else if let Ok(snippet) = sess.source_map().span_to_snippet(move_span) {\n                         err.span_suggestion(\n                             move_span,\n                             \"consider borrowing to avoid moving into the for loop\","}, {"sha": "e621bafb671bb7a3f4cb213797d769d43552dba2", "filename": "compiler/rustc_mir/src/borrow_check/invalidation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -204,8 +204,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             } => {\n                 for op in operands {\n                     match *op {\n-                        InlineAsmOperand::In { reg: _, ref value }\n-                        | InlineAsmOperand::Const { ref value } => {\n+                        InlineAsmOperand::In { reg: _, ref value } => {\n                             self.consume_operand(location, value);\n                         }\n                         InlineAsmOperand::Out { reg: _, late: _, place, .. } => {\n@@ -219,7 +218,8 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                                 self.mutate_place(location, out_place, Shallow(None), JustWrite);\n                             }\n                         }\n-                        InlineAsmOperand::SymFn { value: _ }\n+                        InlineAsmOperand::Const { value: _ }\n+                        | InlineAsmOperand::SymFn { value: _ }\n                         | InlineAsmOperand::SymStatic { def_id: _ } => {}\n                     }\n                 }"}, {"sha": "2d1d83b1655aa7b0bf3f2106bcb9c644871ae201", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -734,8 +734,7 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n             } => {\n                 for op in operands {\n                     match *op {\n-                        InlineAsmOperand::In { reg: _, ref value }\n-                        | InlineAsmOperand::Const { ref value } => {\n+                        InlineAsmOperand::In { reg: _, ref value } => {\n                             self.consume_operand(loc, (value, span), flow_state);\n                         }\n                         InlineAsmOperand::Out { reg: _, late: _, place, .. } => {\n@@ -761,7 +760,8 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n                                 );\n                             }\n                         }\n-                        InlineAsmOperand::SymFn { value: _ }\n+                        InlineAsmOperand::Const { value: _ }\n+                        | InlineAsmOperand::SymFn { value: _ }\n                         | InlineAsmOperand::SymStatic { def_id: _ } => {}\n                     }\n                 }"}, {"sha": "994b403abf3bca3240b55d624c9c25fd3fa43f8c", "filename": "compiler/rustc_mir/src/dataflow/move_paths/builder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -425,7 +425,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 for op in operands {\n                     match *op {\n                         InlineAsmOperand::In { reg: _, ref value }\n-                        | InlineAsmOperand::Const { ref value } => {\n+                         => {\n                             self.gather_operand(value);\n                         }\n                         InlineAsmOperand::Out { reg: _, late: _, place, .. } => {\n@@ -441,7 +441,8 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                                 self.gather_init(out_place.as_ref(), InitKind::Deep);\n                             }\n                         }\n-                        InlineAsmOperand::SymFn { value: _ }\n+                        InlineAsmOperand::Const { value: _ }\n+                        | InlineAsmOperand::SymFn { value: _ }\n                         | InlineAsmOperand::SymStatic { def_id: _ } => {}\n                     }\n                 }"}, {"sha": "29df86ca6cdb753304a4f356898219bdcdd88b43", "filename": "compiler/rustc_mir/src/transform/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -720,9 +720,6 @@ impl Conflicts<'a> {\n                                 }\n                             }\n                         }\n-                        InlineAsmOperand::Const { value } => {\n-                            assert!(value.place().is_none());\n-                        }\n                         InlineAsmOperand::InOut {\n                             reg: _,\n                             late: _,\n@@ -731,6 +728,7 @@ impl Conflicts<'a> {\n                         }\n                         | InlineAsmOperand::In { reg: _, value: _ }\n                         | InlineAsmOperand::Out { reg: _, late: _, place: None }\n+                        | InlineAsmOperand::Const { value: _ }\n                         | InlineAsmOperand::SymFn { value: _ }\n                         | InlineAsmOperand::SymStatic { def_id: _ } => {}\n                     }"}, {"sha": "1bbaf833c4fd91710bb8f5c94b1960f31dd7d2f0", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 17, "deletions": 65, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -108,26 +108,21 @@ pub enum Candidate {\n     /// the attribute currently provides the semantic requirement that arguments\n     /// must be constant.\n     Argument { bb: BasicBlock, index: usize },\n-\n-    /// `const` operand in asm!.\n-    InlineAsm { bb: BasicBlock, index: usize },\n }\n \n impl Candidate {\n     /// Returns `true` if we should use the \"explicit\" rules for promotability for this `Candidate`.\n     fn forces_explicit_promotion(&self) -> bool {\n         match self {\n             Candidate::Ref(_) => false,\n-            Candidate::Argument { .. } | Candidate::InlineAsm { .. } => true,\n+            Candidate::Argument { .. } => true,\n         }\n     }\n \n     fn source_info(&self, body: &Body<'_>) -> SourceInfo {\n         match self {\n             Candidate::Ref(location) => *body.source_info(*location),\n-            Candidate::Argument { bb, .. } | Candidate::InlineAsm { bb, .. } => {\n-                *body.source_info(body.terminator_loc(*bb))\n-            }\n+            Candidate::Argument { bb, .. } => *body.source_info(body.terminator_loc(*bb)),\n         }\n     }\n }\n@@ -217,36 +212,25 @@ impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         self.super_terminator(terminator, location);\n \n-        match terminator.kind {\n-            TerminatorKind::Call { ref func, .. } => {\n-                if let ty::FnDef(def_id, _) = *func.ty(self.ccx.body, self.ccx.tcx).kind() {\n-                    let fn_sig = self.ccx.tcx.fn_sig(def_id);\n-                    if let Abi::RustIntrinsic | Abi::PlatformIntrinsic = fn_sig.abi() {\n-                        let name = self.ccx.tcx.item_name(def_id);\n-                        // FIXME(eddyb) use `#[rustc_args_required_const(2)]` for shuffles.\n-                        if name.as_str().starts_with(\"simd_shuffle\") {\n-                            self.candidates\n-                                .push(Candidate::Argument { bb: location.block, index: 2 });\n-\n-                            return; // Don't double count `simd_shuffle` candidates\n-                        }\n-                    }\n+        if let TerminatorKind::Call { ref func, .. } = terminator.kind {\n+            if let ty::FnDef(def_id, _) = *func.ty(self.ccx.body, self.ccx.tcx).kind() {\n+                let fn_sig = self.ccx.tcx.fn_sig(def_id);\n+                if let Abi::RustIntrinsic | Abi::PlatformIntrinsic = fn_sig.abi() {\n+                    let name = self.ccx.tcx.item_name(def_id);\n+                    // FIXME(eddyb) use `#[rustc_args_required_const(2)]` for shuffles.\n+                    if name.as_str().starts_with(\"simd_shuffle\") {\n+                        self.candidates.push(Candidate::Argument { bb: location.block, index: 2 });\n \n-                    if let Some(constant_args) = args_required_const(self.ccx.tcx, def_id) {\n-                        for index in constant_args {\n-                            self.candidates.push(Candidate::Argument { bb: location.block, index });\n-                        }\n+                        return; // Don't double count `simd_shuffle` candidates\n                     }\n                 }\n-            }\n-            TerminatorKind::InlineAsm { ref operands, .. } => {\n-                for (index, op) in operands.iter().enumerate() {\n-                    if let InlineAsmOperand::Const { .. } = op {\n-                        self.candidates.push(Candidate::InlineAsm { bb: location.block, index })\n+\n+                if let Some(constant_args) = args_required_const(self.ccx.tcx, def_id) {\n+                    for index in constant_args {\n+                        self.candidates.push(Candidate::Argument { bb: location.block, index });\n                     }\n                 }\n             }\n-            _ => {}\n         }\n     }\n }\n@@ -335,18 +319,6 @@ impl<'tcx> Validator<'_, 'tcx> {\n                     _ => bug!(),\n                 }\n             }\n-            Candidate::InlineAsm { bb, index } => {\n-                assert!(self.explicit);\n-\n-                let terminator = self.body[bb].terminator();\n-                match &terminator.kind {\n-                    TerminatorKind::InlineAsm { operands, .. } => match &operands[index] {\n-                        InlineAsmOperand::Const { value } => self.validate_operand(value),\n-                        _ => bug!(),\n-                    },\n-                    _ => bug!(),\n-                }\n-            }\n         }\n     }\n \n@@ -818,9 +790,7 @@ pub fn validate_candidates(\n             }\n \n             match candidate {\n-                Candidate::Argument { bb, index } | Candidate::InlineAsm { bb, index }\n-                    if !is_promotable =>\n-                {\n+                Candidate::Argument { bb, index } if !is_promotable => {\n                     let span = ccx.body[bb].terminator().source_info.span;\n                     let msg = format!(\"argument {} is required to be a constant\", index + 1);\n                     ccx.tcx.sess.span_err(span, &msg);\n@@ -1089,24 +1059,6 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                         _ => bug!(),\n                     }\n                 }\n-                Candidate::InlineAsm { bb, index } => {\n-                    let terminator = blocks[bb].terminator_mut();\n-                    match terminator.kind {\n-                        TerminatorKind::InlineAsm { ref mut operands, .. } => {\n-                            match &mut operands[index] {\n-                                InlineAsmOperand::Const { ref mut value } => {\n-                                    let ty = value.ty(local_decls, self.tcx);\n-                                    let span = terminator.source_info.span;\n-\n-                                    Rvalue::Use(mem::replace(value, promoted_operand(ty, span)))\n-                                }\n-                                _ => bug!(),\n-                            }\n-                        }\n-\n-                        _ => bug!(),\n-                    }\n-                }\n             }\n         };\n \n@@ -1161,7 +1113,7 @@ pub fn promote_candidates<'tcx>(\n                     }\n                 }\n             }\n-            Candidate::Argument { .. } | Candidate::InlineAsm { .. } => {}\n+            Candidate::Argument { .. } => {}\n         }\n \n         // Declare return place local so that `mir::Body::new` doesn't complain."}, {"sha": "1e7ed3d95d236ffd27b0d49f39e450e31b9f0f44", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -355,9 +355,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                 }),\n                             }\n                         }\n-                        thir::InlineAsmOperand::Const { expr } => mir::InlineAsmOperand::Const {\n-                            value: unpack!(block = this.as_local_operand(block, expr)),\n-                        },\n+                        thir::InlineAsmOperand::Const { value, span } => {\n+                            mir::InlineAsmOperand::Const {\n+                                value: box Constant { span, user_ty: None, literal: value.into() },\n+                            }\n+                        }\n                         thir::InlineAsmOperand::SymFn { expr } => {\n                             mir::InlineAsmOperand::SymFn { value: box this.as_constant(expr) }\n                         }"}, {"sha": "924278e1a7fb36201000ae517979c31b26d2776e", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -503,8 +503,12 @@ impl<'thir, 'tcx> Cx<'thir, 'tcx> {\n                             in_expr: self.mirror_expr(in_expr),\n                             out_expr: out_expr.as_ref().map(|expr| self.mirror_expr(expr)),\n                         },\n-                        hir::InlineAsmOperand::Const { ref expr } => {\n-                            InlineAsmOperand::Const { expr: self.mirror_expr(expr) }\n+                        hir::InlineAsmOperand::Const { ref anon_const } => {\n+                            let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n+                            let value = ty::Const::from_anon_const(self.tcx, anon_const_def_id);\n+                            let span = self.tcx.hir().span(anon_const.hir_id);\n+\n+                            InlineAsmOperand::Const { value, span }\n                         }\n                         hir::InlineAsmOperand::Sym { ref expr } => {\n                             let qpath = match expr.kind {"}, {"sha": "f4596d523d07a711b3363acbdc4509e84b965a46", "filename": "compiler/rustc_mir_build/src/thir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -374,7 +374,8 @@ pub enum InlineAsmOperand<'thir, 'tcx> {\n         out_expr: Option<&'thir Expr<'thir, 'tcx>>,\n     },\n     Const {\n-        expr: &'thir Expr<'thir, 'tcx>,\n+        value: &'tcx Const<'tcx>,\n+        span: Span,\n     },\n     SymFn {\n         expr: &'thir Expr<'thir, 'tcx>,"}, {"sha": "02ee268b88c29cc24a0b3a25bd6e6752bb46189d", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -107,7 +107,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub(super) fn parse_anon_const_expr(&mut self) -> PResult<'a, AnonConst> {\n+    pub fn parse_anon_const_expr(&mut self) -> PResult<'a, AnonConst> {\n         self.parse_expr().map(|value| AnonConst { id: DUMMY_NODE_ID, value })\n     }\n "}, {"sha": "3f095d0e82427a4a1fc216ce6a814c48d231e02a", "filename": "compiler/rustc_passes/src/intrinsicck.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -347,7 +347,7 @@ impl ExprVisitor<'tcx> {\n     }\n \n     fn check_asm(&self, asm: &hir::InlineAsm<'tcx>) {\n-        for (idx, (op, _op_sp)) in asm.operands.iter().enumerate() {\n+        for (idx, (op, op_sp)) in asm.operands.iter().enumerate() {\n             match *op {\n                 hir::InlineAsmOperand::In { reg, ref expr } => {\n                     self.check_asm_operand_type(idx, reg, expr, asm.template, None);\n@@ -372,14 +372,15 @@ impl ExprVisitor<'tcx> {\n                         );\n                     }\n                 }\n-                hir::InlineAsmOperand::Const { ref expr } => {\n-                    let ty = self.typeck_results.expr_ty_adjusted(expr);\n-                    match ty.kind() {\n+                hir::InlineAsmOperand::Const { ref anon_const } => {\n+                    let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n+                    let value = ty::Const::from_anon_const(self.tcx, anon_const_def_id);\n+                    match value.ty.kind() {\n                         ty::Int(_) | ty::Uint(_) | ty::Float(_) => {}\n                         _ => {\n                             let msg =\n                                 \"asm `const` arguments must be integer or floating-point values\";\n-                            self.tcx.sess.span_err(expr.span, msg);\n+                            self.tcx.sess.span_err(*op_sp, msg);\n                         }\n                     }\n                 }"}, {"sha": "e22a108aaf07e47ae191aa568982f90079b117e9", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1067,7 +1067,6 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 for (op, _op_sp) in asm.operands.iter().rev() {\n                     match op {\n                         hir::InlineAsmOperand::In { expr, .. }\n-                        | hir::InlineAsmOperand::Const { expr, .. }\n                         | hir::InlineAsmOperand::Sym { expr, .. } => {\n                             succ = self.propagate_through_expr(expr, succ)\n                         }\n@@ -1085,6 +1084,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                             }\n                             succ = self.propagate_through_expr(in_expr, succ);\n                         }\n+                        hir::InlineAsmOperand::Const { .. } => {}\n                     }\n                 }\n                 succ"}, {"sha": "6fae6921fc9b2342a2e19ed3bbc38c539992b18f", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -456,12 +456,14 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             }\n         }\n \n+        let is_macro = base_span.from_expansion() && base_span.desugaring_kind().is_none();\n         if !self.type_ascription_suggestion(&mut err, base_span) {\n             let mut fallback = false;\n             if let (\n                 PathSource::Trait(AliasPossibility::Maybe),\n                 Some(Res::Def(DefKind::Struct | DefKind::Enum | DefKind::Union, _)),\n-            ) = (source, res)\n+                false,\n+            ) = (source, res, is_macro)\n             {\n                 if let Some(bounds @ [_, .., _]) = self.diagnostic_metadata.current_trait_object {\n                     fallback = true;"}, {"sha": "9bb4af16a8f53fac2637f0b5b531cacd554a0c01", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -586,6 +586,11 @@ fn ty_is_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> bool {\n             false\n         }\n \n+        ty::Closure(..) => {\n+            // Similar to the `Opaque` case (#83613).\n+            false\n+        }\n+\n         ty::Dynamic(ref tt, ..) => {\n             if let Some(principal) = tt.principal() {\n                 def_id_is_local(principal.def_id(), in_crate)\n@@ -596,7 +601,7 @@ fn ty_is_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> bool {\n \n         ty::Error(_) => true,\n \n-        ty::Closure(..) | ty::Generator(..) | ty::GeneratorWitness(..) => {\n+        ty::Generator(..) | ty::GeneratorWitness(..) => {\n             bug!(\"ty_is_local invoked on unexpected type: {:?}\", ty)\n         }\n     }"}, {"sha": "4b563a87a158536c378891bd0710ed344061af3f", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -395,14 +395,14 @@ fn report_conflicting_impls(\n     // that's passed in.\n     let decorate = |err: LintDiagnosticBuilder<'_>| {\n         let msg = format!(\n-            \"conflicting implementations of trait `{}`{}:{}\",\n+            \"conflicting implementations of trait `{}`{}{}\",\n             overlap.trait_desc,\n             overlap\n                 .self_desc\n                 .clone()\n                 .map_or_else(String::new, |ty| { format!(\" for type `{}`\", ty) }),\n             match used_to_be_allowed {\n-                Some(FutureCompatOverlapErrorKind::Issue33140) => \" (E0119)\",\n+                Some(FutureCompatOverlapErrorKind::Issue33140) => \": (E0119)\",\n                 _ => \"\",\n             }\n         );"}, {"sha": "60c40da8f31966180314099934742c57551b9b11", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -2087,7 +2087,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn check_expr_asm(&self, asm: &'tcx hir::InlineAsm<'tcx>) -> Ty<'tcx> {\n         for (op, _op_sp) in asm.operands {\n             match op {\n-                hir::InlineAsmOperand::In { expr, .. } | hir::InlineAsmOperand::Const { expr } => {\n+                hir::InlineAsmOperand::In { expr, .. } => {\n                     self.check_expr_asm_operand(expr, true);\n                 }\n                 hir::InlineAsmOperand::Out { expr, .. } => {\n@@ -2104,6 +2104,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         self.check_expr_asm_operand(out_expr, false);\n                     }\n                 }\n+                hir::InlineAsmOperand::Const { anon_const } => {\n+                    self.to_const(anon_const);\n+                }\n                 hir::InlineAsmOperand::Sym { expr } => {\n                     self.check_expr(expr);\n                 }"}, {"sha": "80e173de6b6e565c354a843299158c1a4e66592c", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -540,6 +540,19 @@ fn typeck_with_fallback<'tcx>(\n                             kind: TypeVariableOriginKind::TypeInference,\n                             span,\n                         }),\n+                        Node::Expr(&hir::Expr { kind: hir::ExprKind::InlineAsm(ia), .. })\n+                            if ia.operands.iter().any(|(op, _op_sp)| match op {\n+                                hir::InlineAsmOperand::Const { anon_const } => {\n+                                    anon_const.hir_id == id\n+                                }\n+                                _ => false,\n+                            }) =>\n+                        {\n+                            fcx.next_ty_var(TypeVariableOrigin {\n+                                kind: TypeVariableOriginKind::MiscVariable,\n+                                span,\n+                            })\n+                        }\n                         _ => fallback(),\n                     },\n                     _ => fallback(),"}, {"sha": "d8eea1ad80b0bcc78a0621de3481c4c091ffaf81", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -430,6 +430,15 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     tcx.typeck(def_id).node_type(anon_const.hir_id)\n                 }\n \n+                Node::Expr(&Expr { kind: ExprKind::InlineAsm(ia), .. })\n+                    if ia.operands.iter().any(|(op, _op_sp)| match op {\n+                        hir::InlineAsmOperand::Const { anon_const } => anon_const.hir_id == hir_id,\n+                        _ => false,\n+                    }) =>\n+                {\n+                    tcx.typeck(def_id).node_type(hir_id)\n+                }\n+\n                 Node::Variant(Variant { disr_expr: Some(ref e), .. }) if e.hir_id == hir_id => tcx\n                     .adt_def(tcx.hir().get_parent_did(hir_id).to_def_id())\n                     .repr"}, {"sha": "837fd3447ea062e2ac84ad485e78d2afc440fd73", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -318,7 +318,6 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 for (op, _op_sp) in asm.operands {\n                     match op {\n                         hir::InlineAsmOperand::In { expr, .. }\n-                        | hir::InlineAsmOperand::Const { expr, .. }\n                         | hir::InlineAsmOperand::Sym { expr, .. } => self.consume_expr(expr),\n                         hir::InlineAsmOperand::Out { expr, .. } => {\n                             if let Some(expr) = expr {\n@@ -334,6 +333,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                                 self.mutate_expr(out_expr);\n                             }\n                         }\n+                        hir::InlineAsmOperand::Const { .. } => {}\n                     }\n                 }\n             }"}, {"sha": "c81ababf1519d290a2512a881df3d91c31595e53", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -910,6 +910,73 @@ impl<T: ?Sized> Rc<T> {\n         this.inner().strong()\n     }\n \n+    /// Increments the strong reference count on the `Rc<T>` associated with the\n+    /// provided pointer by one.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The pointer must have been obtained through `Rc::into_raw`, and the\n+    /// associated `Rc` instance must be valid (i.e. the strong count must be at\n+    /// least 1) for the duration of this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::rc::Rc;\n+    ///\n+    /// let five = Rc::new(5);\n+    ///\n+    /// unsafe {\n+    ///     let ptr = Rc::into_raw(five);\n+    ///     Rc::increment_strong_count(ptr);\n+    ///\n+    ///     let five = Rc::from_raw(ptr);\n+    ///     assert_eq!(2, Rc::strong_count(&five));\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"rc_mutate_strong_count\", since = \"1.53.0\")]\n+    pub unsafe fn increment_strong_count(ptr: *const T) {\n+        // Retain Rc, but don't touch refcount by wrapping in ManuallyDrop\n+        let rc = unsafe { mem::ManuallyDrop::new(Rc::<T>::from_raw(ptr)) };\n+        // Now increase refcount, but don't drop new refcount either\n+        let _rc_clone: mem::ManuallyDrop<_> = rc.clone();\n+    }\n+\n+    /// Decrements the strong reference count on the `Rc<T>` associated with the\n+    /// provided pointer by one.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The pointer must have been obtained through `Rc::into_raw`, and the\n+    /// associated `Rc` instance must be valid (i.e. the strong count must be at\n+    /// least 1) when invoking this method. This method can be used to release\n+    /// the final `Rc` and backing storage, but **should not** be called after\n+    /// the final `Rc` has been released.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::rc::Rc;\n+    ///\n+    /// let five = Rc::new(5);\n+    ///\n+    /// unsafe {\n+    ///     let ptr = Rc::into_raw(five);\n+    ///     Rc::increment_strong_count(ptr);\n+    ///\n+    ///     let five = Rc::from_raw(ptr);\n+    ///     assert_eq!(2, Rc::strong_count(&five));\n+    ///     Rc::decrement_strong_count(ptr);\n+    ///     assert_eq!(1, Rc::strong_count(&five));\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"rc_mutate_strong_count\", since = \"1.53.0\")]\n+    pub unsafe fn decrement_strong_count(ptr: *const T) {\n+        unsafe { mem::drop(Rc::from_raw(ptr)) };\n+    }\n+\n     /// Returns `true` if there are no other `Rc` or [`Weak`] pointers to\n     /// this allocation.\n     #[inline]"}, {"sha": "0f6a7cd44749e033e90c0804facc1ec2884b7b68", "filename": "src/test/ui/asm/const.rs", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fasm%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fasm%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fconst.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -4,38 +4,18 @@\n \n #![feature(asm)]\n \n-use std::mem::size_of;\n-\n-trait Proj {\n-    const C: usize;\n-}\n-impl Proj for i8 {\n-    const C: usize = 8;\n-}\n-impl Proj for i16 {\n-    const C: usize = 16;\n+fn const_generic<const X: usize>() -> usize {\n+    unsafe {\n+        let a: usize;\n+        asm!(\"mov {}, {}\", out(reg) a, const X);\n+        a\n+    }\n }\n \n const fn constfn(x: usize) -> usize {\n     x\n }\n \n-fn generic<T: Proj>() {\n-    unsafe {\n-        let a: usize;\n-        asm!(\"mov {}, {}\", out(reg) a, const size_of::<T>());\n-        assert_eq!(a, size_of::<T>());\n-\n-        let b: usize;\n-        asm!(\"mov {}, {}\", out(reg) b, const size_of::<T>() + constfn(5));\n-        assert_eq!(b, size_of::<T>() + 5);\n-\n-        let c: usize;\n-        asm!(\"mov {}, {}\", out(reg) c, const T::C);\n-        assert_eq!(c, T::C);\n-    }\n-}\n-\n fn main() {\n     unsafe {\n         let a: usize;\n@@ -51,6 +31,6 @@ fn main() {\n         assert_eq!(c, 10);\n     }\n \n-    generic::<i8>();\n-    generic::<i16>();\n+    let d = const_generic::<5>();\n+    assert_eq!(d, 5);\n }"}, {"sha": "f2e9d9ca08b2469d646ef6ffa6a39eb0ebd53298", "filename": "src/test/ui/asm/parse-error.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -36,17 +36,23 @@ fn main() {\n         //~^ ERROR expected one of\n         asm!(\"{}\", options(), const foo);\n         //~^ ERROR arguments are not allowed after options\n+        //~^^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"{a}\", a = const foo, a = const bar);\n         //~^ ERROR duplicate argument named `a`\n         //~^^ ERROR argument never used\n+        //~^^^ ERROR attempt to use a non-constant value in a constant\n+        //~^^^^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"\", a = in(\"eax\") foo);\n         //~^ ERROR explicit register arguments cannot have names\n         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n         //~^ ERROR named arguments cannot follow explicit register arguments\n+        //~^^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n         //~^ ERROR named arguments cannot follow explicit register arguments\n+        //~^^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"{1}\", in(\"eax\") foo, const bar);\n         //~^ ERROR positional arguments cannot follow named arguments or explicit register arguments\n+        //~^^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"\", options(), \"\");\n         //~^ ERROR expected one of\n         asm!(\"{}\", in(reg) foo, \"{}\", out(reg) foo);"}, {"sha": "4ab9d86948de951ffed1e284e9103e515012626b", "filename": "src/test/ui/asm/parse-error.stderr", "status": "modified", "additions": 66, "deletions": 11, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -91,78 +91,133 @@ LL |         asm!(\"{}\", options(), const foo);\n    |                    previous options\n \n error: duplicate argument named `a`\n-  --> $DIR/parse-error.rs:39:36\n+  --> $DIR/parse-error.rs:40:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                     -------------  ^^^^^^^^^^^^^ duplicate argument\n    |                     |\n    |                     previously here\n \n error: argument never used\n-  --> $DIR/parse-error.rs:39:36\n+  --> $DIR/parse-error.rs:40:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                    ^^^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n error: explicit register arguments cannot have names\n-  --> $DIR/parse-error.rs:42:18\n+  --> $DIR/parse-error.rs:45:18\n    |\n LL |         asm!(\"\", a = in(\"eax\") foo);\n    |                  ^^^^^^^^^^^^^^^^^\n \n error: named arguments cannot follow explicit register arguments\n-  --> $DIR/parse-error.rs:44:36\n+  --> $DIR/parse-error.rs:47:36\n    |\n LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n    |                     -------------  ^^^^^^^^^^^^^ named argument\n    |                     |\n    |                     explicit register argument\n \n error: named arguments cannot follow explicit register arguments\n-  --> $DIR/parse-error.rs:46:36\n+  --> $DIR/parse-error.rs:50:36\n    |\n LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n    |                     -------------  ^^^^^^^^^^^^^ named argument\n    |                     |\n    |                     explicit register argument\n \n error: positional arguments cannot follow named arguments or explicit register arguments\n-  --> $DIR/parse-error.rs:48:36\n+  --> $DIR/parse-error.rs:53:36\n    |\n LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n    |                     -------------  ^^^^^^^^^ positional argument\n    |                     |\n    |                     explicit register argument\n \n error: expected one of `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"\"`\n-  --> $DIR/parse-error.rs:50:29\n+  --> $DIR/parse-error.rs:56:29\n    |\n LL |         asm!(\"\", options(), \"\");\n    |                             ^^ expected one of 8 possible tokens\n \n error: expected one of `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"{}\"`\n-  --> $DIR/parse-error.rs:52:33\n+  --> $DIR/parse-error.rs:58:33\n    |\n LL |         asm!(\"{}\", in(reg) foo, \"{}\", out(reg) foo);\n    |                                 ^^^^ expected one of 8 possible tokens\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:54:14\n+  --> $DIR/parse-error.rs:60:14\n    |\n LL |         asm!(format!(\"{{{}}}\", 0), in(reg) foo);\n    |              ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:56:21\n+  --> $DIR/parse-error.rs:62:21\n    |\n LL |         asm!(\"{1}\", format!(\"{{{}}}\", 0), in(reg) foo, out(reg) bar);\n    |                     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 25 previous errors\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/parse-error.rs:37:37\n+   |\n+LL |     let mut foo = 0;\n+   |      ---------- help: consider using `const` instead of `let`: `const foo`\n+...\n+LL |         asm!(\"{}\", options(), const foo);\n+   |                                     ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/parse-error.rs:40:31\n+   |\n+LL |     let mut foo = 0;\n+   |      ---------- help: consider using `const` instead of `let`: `const foo`\n+...\n+LL |         asm!(\"{a}\", a = const foo, a = const bar);\n+   |                               ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/parse-error.rs:40:46\n+   |\n+LL |     let mut bar = 0;\n+   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+...\n+LL |         asm!(\"{a}\", a = const foo, a = const bar);\n+   |                                              ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/parse-error.rs:47:46\n+   |\n+LL |     let mut bar = 0;\n+   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+...\n+LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n+   |                                              ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/parse-error.rs:50:46\n+   |\n+LL |     let mut bar = 0;\n+   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+...\n+LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n+   |                                              ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/parse-error.rs:53:42\n+   |\n+LL |     let mut bar = 0;\n+   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+...\n+LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n+   |                                          ^^^ non-constant value\n+\n+error: aborting due to 31 previous errors\n \n+For more information about this error, try `rustc --explain E0435`."}, {"sha": "57a91aaa934e93cc2ef4ffc5286285ca934f8059", "filename": "src/test/ui/asm/type-check-1.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -21,5 +21,23 @@ fn main() {\n         //~^ ERROR the size for values of type `[u64]` cannot be known at compilation time\n         asm!(\"{}\", inout(reg) v[..]);\n         //~^ ERROR the size for values of type `[u64]` cannot be known at compilation time\n+\n+        // Constants must be... constant\n+\n+        let x = 0;\n+        const fn const_foo(x: i32) -> i32 {\n+            x\n+        }\n+        const fn const_bar<T>(x: T) -> T {\n+            x\n+        }\n+        asm!(\"{}\", const x);\n+        //~^ ERROR attempt to use a non-constant value in a constant\n+        asm!(\"{}\", const const_foo(0));\n+        asm!(\"{}\", const const_foo(x));\n+        //~^ ERROR attempt to use a non-constant value in a constant\n+        asm!(\"{}\", const const_bar(0));\n+        asm!(\"{}\", const const_bar(x));\n+        //~^ ERROR attempt to use a non-constant value in a constant\n     }\n }"}, {"sha": "eefab6d397788ec45e760eb3bf01327a9cc58f3c", "filename": "src/test/ui/asm/type-check-1.stderr", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,3 +1,30 @@\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/type-check-1.rs:34:26\n+   |\n+LL |         let x = 0;\n+   |         ----- help: consider using `const` instead of `let`: `const x`\n+...\n+LL |         asm!(\"{}\", const x);\n+   |                          ^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/type-check-1.rs:37:36\n+   |\n+LL |         let x = 0;\n+   |         ----- help: consider using `const` instead of `let`: `const x`\n+...\n+LL |         asm!(\"{}\", const const_foo(x));\n+   |                                    ^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/type-check-1.rs:40:36\n+   |\n+LL |         let x = 0;\n+   |         ----- help: consider using `const` instead of `let`: `const x`\n+...\n+LL |         asm!(\"{}\", const const_bar(x));\n+   |                                    ^ non-constant value\n+\n error: invalid asm output\n   --> $DIR/type-check-1.rs:10:29\n    |\n@@ -37,6 +64,7 @@ LL |         asm!(\"{}\", inout(reg) v[..]);\n    = help: the trait `Sized` is not implemented for `[u64]`\n    = note: all inline asm arguments must have a statically known size\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0277, E0435.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "0677167ccfe7356310cd760bcf85988b53d4198e", "filename": "src/test/ui/asm/type-check-2.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -28,31 +28,19 @@ fn main() {\n \n         // Const operands must be integer or floats, and must be constants.\n \n-        let x = 0;\n-        const C: i32 = 0;\n-        const fn const_foo(x: i32) -> i32 {\n-            x\n-        }\n-        const fn const_bar<T>(x: T) -> T {\n-            x\n-        }\n+        asm!(\"{}\", const 0);\n         asm!(\"{}\", const 0i32);\n         asm!(\"{}\", const 0f32);\n         asm!(\"{}\", const 0 as *mut u8);\n         //~^ ERROR asm `const` arguments must be integer or floating-point values\n-        asm!(\"{}\", const &0);\n-        //~^ ERROR asm `const` arguments must be integer or floating-point values\n-        asm!(\"{}\", const x);\n-        //~^ ERROR argument 1 is required to be a constant\n-        asm!(\"{}\", const const_foo(0));\n-        asm!(\"{}\", const const_foo(x));\n-        //~^ ERROR argument 1 is required to be a constant\n-        asm!(\"{}\", const const_bar(0));\n-        asm!(\"{}\", const const_bar(x));\n-        //~^ ERROR argument 1 is required to be a constant\n+\n+        // This currently causes an ICE: https://github.com/rust-lang/rust/issues/81857\n+        // asm!(\"{}\", const &0);\n+        // ERROR asm `const` arguments must be integer or floating-point values\n \n         // Sym operands must point to a function or static\n \n+        const C: i32 = 0;\n         static S: i32 = 0;\n         asm!(\"{}\", sym S);\n         asm!(\"{}\", sym main);"}, {"sha": "830ca7b55509dd1caa2203e1ba57b58f96350f5e", "filename": "src/test/ui/asm/type-check-2.stderr", "status": "modified", "additions": 13, "deletions": 37, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,33 +1,27 @@\n error: asm `const` arguments must be integer or floating-point values\n-  --> $DIR/type-check-2.rs:41:26\n+  --> $DIR/type-check-2.rs:34:20\n    |\n LL |         asm!(\"{}\", const 0 as *mut u8);\n-   |                          ^^^^^^^^^^^^\n-\n-error: asm `const` arguments must be integer or floating-point values\n-  --> $DIR/type-check-2.rs:43:26\n-   |\n-LL |         asm!(\"{}\", const &0);\n-   |                          ^^\n+   |                    ^^^^^^^^^^^^^^^^^^\n \n error: arguments for inline assembly must be copyable\n-  --> $DIR/type-check-2.rs:66:32\n+  --> $DIR/type-check-2.rs:54:32\n    |\n LL |         asm!(\"{}\", in(xmm_reg) SimdNonCopy(0.0, 0.0, 0.0, 0.0));\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `SimdNonCopy` does not implement the Copy trait\n \n-error: cannot use value of type `[closure@$DIR/type-check-2.rs:78:28: 78:38]` for inline assembly\n-  --> $DIR/type-check-2.rs:78:28\n+error: cannot use value of type `[closure@$DIR/type-check-2.rs:66:28: 66:38]` for inline assembly\n+  --> $DIR/type-check-2.rs:66:28\n    |\n LL |         asm!(\"{}\", in(reg) |x: i32| x);\n    |                            ^^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `Vec<i32>` for inline assembly\n-  --> $DIR/type-check-2.rs:80:28\n+  --> $DIR/type-check-2.rs:68:28\n    |\n LL |         asm!(\"{}\", in(reg) vec![0]);\n    |                            ^^^^^^^\n@@ -36,67 +30,49 @@ LL |         asm!(\"{}\", in(reg) vec![0]);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot use value of type `(i32, i32, i32)` for inline assembly\n-  --> $DIR/type-check-2.rs:82:28\n+  --> $DIR/type-check-2.rs:70:28\n    |\n LL |         asm!(\"{}\", in(reg) (1, 2, 3));\n    |                            ^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `[i32; 3]` for inline assembly\n-  --> $DIR/type-check-2.rs:84:28\n+  --> $DIR/type-check-2.rs:72:28\n    |\n LL |         asm!(\"{}\", in(reg) [1, 2, 3]);\n    |                            ^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `fn() {main}` for inline assembly\n-  --> $DIR/type-check-2.rs:92:31\n+  --> $DIR/type-check-2.rs:80:31\n    |\n LL |         asm!(\"{}\", inout(reg) f);\n    |                               ^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `&mut i32` for inline assembly\n-  --> $DIR/type-check-2.rs:95:31\n+  --> $DIR/type-check-2.rs:83:31\n    |\n LL |         asm!(\"{}\", inout(reg) r);\n    |                               ^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: asm `sym` operand must point to a fn or static\n-  --> $DIR/type-check-2.rs:59:24\n+  --> $DIR/type-check-2.rs:47:24\n    |\n LL |         asm!(\"{}\", sym C);\n    |                        ^\n \n error: asm `sym` operand must point to a fn or static\n-  --> $DIR/type-check-2.rs:61:24\n+  --> $DIR/type-check-2.rs:49:24\n    |\n LL |         asm!(\"{}\", sym x);\n    |                        ^\n \n-error: argument 1 is required to be a constant\n-  --> $DIR/type-check-2.rs:45:9\n-   |\n-LL |         asm!(\"{}\", const x);\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-error: argument 1 is required to be a constant\n-  --> $DIR/type-check-2.rs:48:9\n-   |\n-LL |         asm!(\"{}\", const const_foo(x));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: argument 1 is required to be a constant\n-  --> $DIR/type-check-2.rs:51:9\n-   |\n-LL |         asm!(\"{}\", const const_bar(x));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/type-check-2.rs:13:28\n    |\n@@ -127,7 +103,7 @@ LL |         let v: Vec<u64> = vec![0, 1, 2];\n LL |         asm!(\"{}\", inout(reg) v[0]);\n    |                               ^ cannot borrow as mutable\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 14 previous errors\n \n Some errors have detailed explanations: E0381, E0596.\n For more information about an error, try `rustc --explain E0381`."}, {"sha": "211613b3714920a9a7989a56cc58abe6215d04ff", "filename": "src/test/ui/associated-types/associated-types-coherence-failure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-coherence-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-coherence-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-coherence-failure.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `IntoCow<'_, _>` for type `Cow<'_, _>`:\n+error[E0119]: conflicting implementations of trait `IntoCow<'_, _>` for type `Cow<'_, _>`\n   --> $DIR/associated-types-coherence-failure.rs:21:1\n    |\n LL | impl<'a, B: ?Sized> IntoCow<'a, B> for <B as ToOwned>::Owned where B: ToOwned {\n@@ -7,7 +7,7 @@ LL | impl<'a, B: ?Sized> IntoCow<'a, B> for <B as ToOwned>::Owned where B: ToOwn\n LL | impl<'a, B: ?Sized> IntoCow<'a, B> for Cow<'a, B> where B: ToOwned {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Cow<'_, _>`\n \n-error[E0119]: conflicting implementations of trait `IntoCow<'_, _>` for type `&_`:\n+error[E0119]: conflicting implementations of trait `IntoCow<'_, _>` for type `&_`\n   --> $DIR/associated-types-coherence-failure.rs:28:1\n    |\n LL | impl<'a, B: ?Sized> IntoCow<'a, B> for <B as ToOwned>::Owned where B: ToOwned {"}, {"sha": "89017f6cc3ec66f3d000d62254a2a864a9bbc1d0", "filename": "src/test/ui/async-await/issue-67651.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fasync-await%2Fissue-67651.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fasync-await%2Fissue-67651.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67651.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `From` for type `()`:\n+error[E0119]: conflicting implementations of trait `From` for type `()`\n   --> $DIR/issue-67651.rs:11:1\n    |\n LL | impl From for () {"}, {"sha": "9156972a1df99935fae01da938e22355a8dd9d04", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-implemented.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-implemented.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `MyTrait`:\n+error[E0119]: conflicting implementations of trait `MyTrait`\n   --> $DIR/coherence-blanket-conflicts-with-blanket-implemented.rs:24:1\n    |\n LL | impl<T:Even> MyTrait for T {"}, {"sha": "8400968e1227d2afce3c7518256af65e6c1ba7a9", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-blanket-unimplemented.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `MyTrait`:\n+error[E0119]: conflicting implementations of trait `MyTrait`\n   --> $DIR/coherence-blanket-conflicts-with-blanket-unimplemented.rs:20:1\n    |\n LL | impl<T:Even> MyTrait for T {"}, {"sha": "c25c43692928af13c3f75aa79dcc01e2563877cb", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-cross-crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-cross-crate.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `go_trait::GoMut` for type `MyThingy`:\n+error[E0119]: conflicting implementations of trait `go_trait::GoMut` for type `MyThingy`\n   --> $DIR/coherence-blanket-conflicts-with-specific-cross-crate.rs:15:1\n    |\n LL | impl GoMut for MyThingy {"}, {"sha": "c2a925213da2dd478e8797fccaeed73c8d42903f", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-multidispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-multidispatch.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `MyTrait<MyType>` for type `MyType`:\n+error[E0119]: conflicting implementations of trait `MyTrait<MyType>` for type `MyType`\n   --> $DIR/coherence-blanket-conflicts-with-specific-multidispatch.rs:22:1\n    |\n LL | impl<T> MyTrait<T> for T {"}, {"sha": "e1a5dffebdaad5fd1813386af56929fe96201c0f", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific-trait.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `MyType`:\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `MyType`\n   --> $DIR/coherence-blanket-conflicts-with-specific-trait.rs:20:1\n    |\n LL | impl<T:OtherTrait> MyTrait for T {"}, {"sha": "ba60a2ea92947eb4576bf0910d456d5f1b2cd86c", "filename": "src/test/ui/coherence/coherence-blanket-conflicts-with-specific.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-blanket-conflicts-with-specific.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `MyType`:\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `MyType`\n   --> $DIR/coherence-blanket-conflicts-with-specific.rs:19:1\n    |\n LL | impl<T> MyTrait for T {"}, {"sha": "5295170cd8bf37539be877c8719c78869f46c871", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -7,7 +7,7 @@ LL |\n LL | impl<T: MyTrait> !Send for TestType<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n \n-error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<_>`:\n+error[E0119]: conflicting implementations of trait `std::marker::Send` for type `TestType<_>`\n   --> $DIR/coherence-conflicting-negative-trait-impl.rs:13:1\n    |\n LL | unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}"}, {"sha": "d0d86c72ffc68ebe5d11ba76a26e43933cfa83d4", "filename": "src/test/ui/coherence/coherence-cross-crate-conflict.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-cross-crate-conflict.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `trait_impl_conflict::Foo` for type `isize`:\n+error[E0119]: conflicting implementations of trait `trait_impl_conflict::Foo` for type `isize`\n   --> $DIR/coherence-cross-crate-conflict.rs:9:1\n    |\n LL | impl<A> Foo for A {"}, {"sha": "7dabd97b94e823d93462b0cc5c8b61ff4789cddf", "filename": "src/test/ui/coherence/coherence-fn-covariant-bound-vs-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-covariant-bound-vs-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-covariant-bound-vs-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-covariant-bound-vs-static.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `Trait` for type `for<'r> fn(fn(&'r ()))`:\n+error[E0119]: conflicting implementations of trait `Trait` for type `for<'r> fn(fn(&'r ()))`\n   --> $DIR/coherence-fn-covariant-bound-vs-static.rs:17:1\n    |\n LL | impl Trait for for<'r> fn(fn(&'r ())) {}"}, {"sha": "c8accc9974791c6dfc32d31bfd4bd35a8a9f390e", "filename": "src/test/ui/coherence/coherence-fn-implied-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error: conflicting implementations of trait `Trait` for type `for<'a, 'b> fn(&'a &'b u32, &'b &'a u32) -> &'b u32`:\n+error: conflicting implementations of trait `Trait` for type `for<'a, 'b> fn(&'a &'b u32, &'b &'a u32) -> &'b u32`\n   --> $DIR/coherence-fn-implied-bounds.rs:21:1\n    |\n LL | impl Trait for for<'a, 'b> fn(&'a &'b u32, &'b &'a u32) -> &'b u32 {}"}, {"sha": "82bd8a35f45757cfbacf6d69b8c2454de1d580fa", "filename": "src/test/ui/coherence/coherence-fn-inputs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-inputs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-inputs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-inputs.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `Trait` for type `for<'a, 'b> fn(&'a u32, &'b u32)`:\n+error[E0119]: conflicting implementations of trait `Trait` for type `for<'a, 'b> fn(&'a u32, &'b u32)`\n   --> $DIR/coherence-fn-inputs.rs:15:1\n    |\n LL | impl Trait for for<'a, 'b> fn(&'a u32, &'b u32) {}"}, {"sha": "c249fa43c3b6058c2d2a91f0c37916a2bd4ce6df", "filename": "src/test/ui/coherence/coherence-free-vs-bound-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-free-vs-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-free-vs-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-free-vs-bound-region.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error: conflicting implementations of trait `TheTrait` for type `fn(&u8)`:\n+error: conflicting implementations of trait `TheTrait` for type `fn(&u8)`\n   --> $DIR/coherence-free-vs-bound-region.rs:16:1\n    |\n LL | impl<'a> TheTrait for fn(&'a u8) {}"}, {"sha": "2ac0706d72e57cf24e1207e190dbb0cf10fdce61", "filename": "src/test/ui/coherence/coherence-impls-copy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `i32`:\n+error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `i32`\n   --> $DIR/coherence-impls-copy.rs:5:1\n    |\n LL | impl Copy for i32 {}\n@@ -7,7 +7,7 @@ LL | impl Copy for i32 {}\n    = note: conflicting implementation in crate `core`:\n            - impl Copy for i32;\n \n-error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&NotSync`:\n+error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&NotSync`\n   --> $DIR/coherence-impls-copy.rs:29:1\n    |\n LL | impl Copy for &'static NotSync {}\n@@ -17,7 +17,7 @@ LL | impl Copy for &'static NotSync {}\n            - impl<T> Copy for &T\n              where T: ?Sized;\n \n-error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&[NotSync]`:\n+error[E0119]: conflicting implementations of trait `std::marker::Copy` for type `&[NotSync]`\n   --> $DIR/coherence-impls-copy.rs:34:1\n    |\n LL | impl Copy for &'static [NotSync] {}"}, {"sha": "46e9e7e986c3432da3abb4afd27bc40adf157c76", "filename": "src/test/ui/coherence/coherence-impls-send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::marker::Send` for type `&[NotSync]`:\n+error[E0119]: conflicting implementations of trait `std::marker::Send` for type `&[NotSync]`\n   --> $DIR/coherence-impls-send.rs:25:1\n    |\n LL | unsafe impl Send for &'static [NotSync] {}"}, {"sha": "8a43ad7b7f0e806c3508e32b3f09a2211c460857", "filename": "src/test/ui/coherence/coherence-no-direct-lifetime-dispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-no-direct-lifetime-dispatch.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `MyTrait`:\n+error[E0119]: conflicting implementations of trait `MyTrait`\n   --> $DIR/coherence-no-direct-lifetime-dispatch.rs:6:1\n    |\n LL | impl<T> MyTrait for T {}"}, {"sha": "6a0880334b6e058f2a29767f1c7bc47d04dc9c24", "filename": "src/test/ui/coherence/coherence-overlap-all-t-and-tuple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-all-t-and-tuple.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `From<(_,)>` for type `(_,)`:\n+error[E0119]: conflicting implementations of trait `From<(_,)>` for type `(_,)`\n   --> $DIR/coherence-overlap-all-t-and-tuple.rs:16:1\n    |\n LL | impl <T> From<T> for T {"}, {"sha": "9ab099489d9e582af5e92e2f7d2f914b713642e0", "filename": "src/test/ui/coherence/coherence-overlap-downstream.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-downstream.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,12 +1,12 @@\n-error[E0119]: conflicting implementations of trait `Sweet`:\n+error[E0119]: conflicting implementations of trait `Sweet`\n   --> $DIR/coherence-overlap-downstream.rs:8:1\n    |\n LL | impl<T:Sugar> Sweet for T { }\n    | ------------------------- first implementation here\n LL | impl<T:Fruit> Sweet for T { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n-error[E0119]: conflicting implementations of trait `Foo<_>` for type `i32`:\n+error[E0119]: conflicting implementations of trait `Foo<_>` for type `i32`\n   --> $DIR/coherence-overlap-downstream.rs:14:1\n    |\n LL | impl<X, T> Foo<X> for T where T: Bar<X> {}"}, {"sha": "85eb189e10eeee540fd9b50b1e1b851ec129ddb2", "filename": "src/test/ui/coherence/coherence-overlap-issue-23516.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-issue-23516.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `Sweet` for type `std::boxed::Box<_>`:\n+error[E0119]: conflicting implementations of trait `Sweet` for type `std::boxed::Box<_>`\n   --> $DIR/coherence-overlap-issue-23516.rs:8:1\n    |\n LL | impl<T:Sugar> Sweet for T { }"}, {"sha": "5a97296eebd9b777e607ead9ba49d763ff397b81", "filename": "src/test/ui/coherence/coherence-overlap-messages.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-messages.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,36 +1,36 @@\n-error[E0119]: conflicting implementations of trait `Foo`:\n+error[E0119]: conflicting implementations of trait `Foo`\n   --> $DIR/coherence-overlap-messages.rs:4:1\n    |\n LL | impl<T> Foo for T {}\n    | ----------------- first implementation here\n LL | impl<U> Foo for U {}\n    | ^^^^^^^^^^^^^^^^^ conflicting implementation\n \n-error[E0119]: conflicting implementations of trait `Bar` for type `(u8, u8)`:\n+error[E0119]: conflicting implementations of trait `Bar` for type `(u8, u8)`\n   --> $DIR/coherence-overlap-messages.rs:11:1\n    |\n LL | impl<T> Bar for (T, u8) {}\n    | ----------------------- first implementation here\n LL | impl<T> Bar for (u8, T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(u8, u8)`\n \n-error[E0119]: conflicting implementations of trait `Baz<u8>` for type `u8`:\n+error[E0119]: conflicting implementations of trait `Baz<u8>` for type `u8`\n   --> $DIR/coherence-overlap-messages.rs:17:1\n    |\n LL | impl<T> Baz<u8> for T {}\n    | --------------------- first implementation here\n LL | impl<T> Baz<T> for u8 {}\n    | ^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `u8`\n \n-error[E0119]: conflicting implementations of trait `Quux<_, _>`:\n+error[E0119]: conflicting implementations of trait `Quux<_, _>`\n   --> $DIR/coherence-overlap-messages.rs:23:1\n    |\n LL | impl<T, U, V> Quux<U, V> for T {}\n    | ------------------------------ first implementation here\n LL | impl<T, U> Quux<U, U> for T {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n-error[E0119]: conflicting implementations of trait `Quux<_, _>`:\n+error[E0119]: conflicting implementations of trait `Quux<_, _>`\n   --> $DIR/coherence-overlap-messages.rs:25:1\n    |\n LL | impl<T, U, V> Quux<U, V> for T {}"}, {"sha": "8272c8875860792ffb6ca196935c6684a586eaa3", "filename": "src/test/ui/coherence/coherence-overlap-upstream.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `Foo` for type `i16`:\n+error[E0119]: conflicting implementations of trait `Foo` for type `i16`\n   --> $DIR/coherence-overlap-upstream.rs:13:1\n    |\n LL | impl<T> Foo for T where T: Remote {}"}, {"sha": "51f6faab3c7e48bde89e253cb8a580fee7f0dfa0", "filename": "src/test/ui/coherence/coherence-projection-conflict-orphan.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`:\n+error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`\n   --> $DIR/coherence-projection-conflict-orphan.rs:16:1\n    |\n LL | impl Foo<i32> for i32 { }"}, {"sha": "85d3d358f83cf8ea5aba1e7db543e4b4d48ccd31", "filename": "src/test/ui/coherence/coherence-projection-conflict-ty-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `Foo<_>` for type `std::option::Option<_>`:\n+error[E0119]: conflicting implementations of trait `Foo<_>` for type `std::option::Option<_>`\n   --> $DIR/coherence-projection-conflict-ty-param.rs:10:1\n    |\n LL | impl <P, T: Foo<P>> Foo<P> for Option<T> {}"}, {"sha": "e7d1fb293466197249a9a3a3831eac7518cc5a51", "filename": "src/test/ui/coherence/coherence-projection-conflict.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`:\n+error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`\n   --> $DIR/coherence-projection-conflict.rs:11:1\n    |\n LL | impl Foo<i32> for i32 { }"}, {"sha": "6f95f0a06b5fa1beb93988bb669407e57c79ce11", "filename": "src/test/ui/coherence/coherence-subtyping.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-warning: conflicting implementations of trait `TheTrait` for type `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`:\n+warning: conflicting implementations of trait `TheTrait` for type `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n   --> $DIR/coherence-subtyping.rs:15:1\n    |\n LL | impl TheTrait for for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8 {}"}, {"sha": "09ad5e5b22435e4099704695ec34ac4b3bb0f74d", "filename": "src/test/ui/coherence/coherence-tuple-conflict.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-tuple-conflict.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `(_, _)`:\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `(_, _)`\n   --> $DIR/coherence-tuple-conflict.rs:15:1\n    |\n LL | impl<T> MyTrait for (T,T) {"}, {"sha": "432646e5321eb86eb20f72013252e66f8e5cda37", "filename": "src/test/ui/coherence/coherence-wasm-bindgen.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-wasm-bindgen.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error: conflicting implementations of trait `IntoWasmAbi` for type `&dyn std::ops::Fn(&_) -> _`:\n+error: conflicting implementations of trait `IntoWasmAbi` for type `&dyn std::ops::Fn(&_) -> _`\n   --> $DIR/coherence-wasm-bindgen.rs:28:1\n    |\n LL | / impl<'a, 'b, A, R> IntoWasmAbi for &'a (dyn Fn(A) -> R + 'b)"}, {"sha": "db730650185e306e8e2832a6c0833f7ee2be4cbc", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_tuple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyFundamentalStruct<(MyType,)>`:\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyFundamentalStruct<(MyType,)>`\n   --> $DIR/coherence_copy_like_err_fundamental_struct_tuple.rs:16:1\n    |\n LL | impl<T: lib::MyCopy> MyTrait for T { }"}, {"sha": "3bc3dffda5d1bbbf95dc29ef8c23aceba0d511eb", "filename": "src/test/ui/coherence/coherence_copy_like_err_struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyStruct<MyType>`:\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `lib::MyStruct<MyType>`\n   --> $DIR/coherence_copy_like_err_struct.rs:19:1\n    |\n LL | impl<T: lib::MyCopy> MyTrait for T { }"}, {"sha": "090497ec18977a6027e00f4b01514b987c131ecd", "filename": "src/test/ui/coherence/coherence_copy_like_err_tuple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `(MyType,)`:\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `(MyType,)`\n   --> $DIR/coherence_copy_like_err_tuple.rs:18:1\n    |\n LL | impl<T: lib::MyCopy> MyTrait for T { }"}, {"sha": "846db0c91b6e758948e9337e922ceb0ba8bf33fe", "filename": "src/test/ui/const-generics/issues/issue-64494.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -16,7 +16,7 @@ LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n    = note: type parameters may not be used in const expressions\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n-error[E0119]: conflicting implementations of trait `MyTrait`:\n+error[E0119]: conflicting implementations of trait `MyTrait`\n   --> $DIR/issue-64494.rs:18:1\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}"}, {"sha": "e08a2c7fcbbd0ff0992e2995ee3bc351f9d51f1b", "filename": "src/test/ui/error-codes/E0119.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ferror-codes%2FE0119.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ferror-codes%2FE0119.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0119.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `Foo`:\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `Foo`\n   --> $DIR/E0119.rs:13:1\n    |\n LL | impl<T> MyTrait for T {"}, {"sha": "04babb0644718fa37121e1c1e00876d6d0d923a5", "filename": "src/test/ui/error-codes/e0119/complex-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fcomplex-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fcomplex-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fcomplex-impl.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `complex_impl_support::External` for type `(Q, complex_impl_support::M<'_, '_, '_, std::boxed::Box<_>, _, _>)`:\n+error[E0119]: conflicting implementations of trait `complex_impl_support::External` for type `(Q, complex_impl_support::M<'_, '_, '_, std::boxed::Box<_>, _, _>)`\n   --> $DIR/complex-impl.rs:9:1\n    |\n LL | impl<R> External for (Q, R) {}"}, {"sha": "3ff96a6a4d65dfc5599b2ec30e9a7a1abe3ede55", "filename": "src/test/ui/error-codes/e0119/conflict-with-std.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fconflict-with-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fconflict-with-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fconflict-with-std.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::convert::AsRef<Q>` for type `std::boxed::Box<Q>`:\n+error[E0119]: conflicting implementations of trait `std::convert::AsRef<Q>` for type `std::boxed::Box<Q>`\n   --> $DIR/conflict-with-std.rs:5:1\n    |\n LL | impl AsRef<Q> for Box<Q> {\n@@ -8,7 +8,7 @@ LL | impl AsRef<Q> for Box<Q> {\n            - impl<T, A> AsRef<T> for Box<T, A>\n              where A: Allocator, T: ?Sized;\n \n-error[E0119]: conflicting implementations of trait `std::convert::From<S>` for type `S`:\n+error[E0119]: conflicting implementations of trait `std::convert::From<S>` for type `S`\n   --> $DIR/conflict-with-std.rs:12:1\n    |\n LL | impl From<S> for S {\n@@ -17,7 +17,7 @@ LL | impl From<S> for S {\n    = note: conflicting implementation in crate `core`:\n            - impl<T> From<T> for T;\n \n-error[E0119]: conflicting implementations of trait `std::convert::TryFrom<X>` for type `X`:\n+error[E0119]: conflicting implementations of trait `std::convert::TryFrom<X>` for type `X`\n   --> $DIR/conflict-with-std.rs:19:1\n    |\n LL | impl TryFrom<X> for X {"}, {"sha": "f149cef587f2550219afb4d79506154629310d9d", "filename": "src/test/ui/error-codes/e0119/issue-23563.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-23563.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-23563.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-23563.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `a::LolFrom<&[_]>` for type `LocalType<_>`:\n+error[E0119]: conflicting implementations of trait `a::LolFrom<&[_]>` for type `LocalType<_>`\n   --> $DIR/issue-23563.rs:13:1\n    |\n LL | impl<'a, T> LolFrom<&'a [T]> for LocalType<T> {"}, {"sha": "c11a50487479e6cc4c415f19d3f09f352affb9f7", "filename": "src/test/ui/error-codes/e0119/issue-27403.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-27403.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-27403.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-27403.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::convert::Into<_>` for type `GenX<_>`:\n+error[E0119]: conflicting implementations of trait `std::convert::Into<_>` for type `GenX<_>`\n   --> $DIR/issue-27403.rs:5:1\n    |\n LL | impl<S> Into<S> for GenX<S> {"}, {"sha": "56e8e1eb5400242783f4c3d2fb35438adedbf48b", "filename": "src/test/ui/error-codes/e0119/issue-28981.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-28981.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-28981.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-28981.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::ops::Deref` for type `&_`:\n+error[E0119]: conflicting implementations of trait `std::ops::Deref` for type `&_`\n   --> $DIR/issue-28981.rs:5:1\n    |\n LL | impl<Foo> Deref for Foo { }"}, {"sha": "f1c2b0d29742e30ddf60d1953e24e2552f618cf5", "filename": "src/test/ui/error-codes/e0119/so-37347311.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fso-37347311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fso-37347311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fso-37347311.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::convert::From<MyError<_>>` for type `MyError<_>`:\n+error[E0119]: conflicting implementations of trait `std::convert::From<MyError<_>>` for type `MyError<_>`\n   --> $DIR/so-37347311.rs:11:1\n    |\n LL | impl<S: Storage> From<S::Error> for MyError<S> {"}, {"sha": "524ad3c83fcbc8dff8b7845671096b4d4bd9dd06", "filename": "src/test/ui/feature-gates/feature-gate-non_ascii_idents.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -28,6 +28,7 @@ enum B\u00e4r { //~ ERROR non-ascii idents\n \n extern \"C\" {\n     fn q\u00fcx();  //~ ERROR non-ascii idents\n+    //~^ ERROR items in `extern` blocks\n }\n \n fn main() {}"}, {"sha": "c712acee37f9453cec580a07d4a0fb4237a5b791", "filename": "src/test/ui/feature-gates/feature-gate-non_ascii_idents.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,3 +1,13 @@\n+error: items in `extern` blocks cannot use non-ascii identifiers\n+  --> $DIR/feature-gate-non_ascii_idents.rs:30:8\n+   |\n+LL | extern \"C\" {\n+   | ---------- in this `extern` block\n+LL |     fn q\u00fcx();\n+   |        ^^^\n+   |\n+   = note: This limitation may be lifted in the future; see issue #83942 <https://github.com/rust-lang/rust/issues/83942> for more information\n+\n error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/feature-gate-non_ascii_idents.rs:1:22\n    |\n@@ -115,6 +125,6 @@ LL |     fn q\u00fcx();\n    = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 14 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "0526c6dc8398043d8561e9337040d608065d21ca", "filename": "src/test/ui/feature-gates/feature-gate-overlapping_marker_traits.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-overlapping_marker_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-overlapping_marker_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-overlapping_marker_traits.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `MyMarker`:\n+error[E0119]: conflicting implementations of trait `MyMarker`\n   --> $DIR/feature-gate-overlapping_marker_traits.rs:6:1\n    |\n LL | impl<T: Display> MyMarker for T {}"}, {"sha": "314617748b0ba25427a38e0d35bde7b5b1fa0299", "filename": "src/test/ui/impl-trait/auto-trait.full_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.full_tait.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -7,7 +7,7 @@ LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`:\n+error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n   --> $DIR/auto-trait.rs:24:1\n    |\n LL | impl<T: Send> AnotherTrait for T {}"}, {"sha": "75a5b0cb87db139a9f491e54937d36a66c891542", "filename": "src/test/ui/impl-trait/auto-trait.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.min_tait.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`:\n+error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n   --> $DIR/auto-trait.rs:24:1\n    |\n LL | impl<T: Send> AnotherTrait for T {}"}, {"sha": "d9d2e3929b10c2cd3778b12f1527a6dbe814e09e", "filename": "src/test/ui/impl-trait/issues/issue-83929-impl-trait-in-generic-default.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -0,0 +1,12 @@\n+struct Foo<T = impl Copy>(T);\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+type Result<T, E = impl std::error::Error> = std::result::Result<T, E>;\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// should not cause ICE\n+fn x() -> Foo {\n+    Foo(0)\n+}\n+\n+fn main() -> Result<()> {}"}, {"sha": "eef6844adfccba365e4fb96ac8444d4819174068", "filename": "src/test/ui/impl-trait/issues/issue-83929-impl-trait-in-generic-default.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -0,0 +1,15 @@\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/issue-83929-impl-trait-in-generic-default.rs:1:16\n+   |\n+LL | struct Foo<T = impl Copy>(T);\n+   |                ^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/issue-83929-impl-trait-in-generic-default.rs:4:20\n+   |\n+LL | type Result<T, E = impl std::error::Error> = std::result::Result<T, E>;\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0562`."}, {"sha": "bccbc8cb36b157d0a21334550978c0903f16682c", "filename": "src/test/ui/impl-trait/negative-reasoning.full_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.full_tait.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -7,7 +7,7 @@ LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`:\n+error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n   --> $DIR/negative-reasoning.rs:22:1\n    |\n LL | impl<T: std::fmt::Debug> AnotherTrait for T {}"}, {"sha": "5727a372ddbe838b4bffbb36d8d7514bdbd48d83", "filename": "src/test/ui/impl-trait/negative-reasoning.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.min_tait.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`:\n+error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n   --> $DIR/negative-reasoning.rs:22:1\n    |\n LL | impl<T: std::fmt::Debug> AnotherTrait for T {}"}, {"sha": "c3e21c81f03bea8a33e7253a6ac8252a42b156d7", "filename": "src/test/ui/impl-trait/where-allowed.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -56,12 +56,10 @@ fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n //~| ERROR nested `impl Trait` is not allowed\n-//~| ERROR cannot resolve opaque type\n \n // Disallowed\n fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n-//~| ERROR cannot resolve opaque type\n \n // Disallowed\n fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n@@ -120,7 +118,6 @@ trait DummyTrait {\n impl DummyTrait for () {\n     type Out = impl Debug;\n     //~^ ERROR `impl Trait` in type aliases is unstable\n-    //~^^ ERROR could not find defining uses\n \n     fn in_trait_impl_parameter(_: impl Debug) { }\n     // Allowed\n@@ -156,7 +153,6 @@ extern \"C\" fn in_extern_fn_return() -> impl Debug {\n \n type InTypeAlias<R> = impl Debug;\n //~^ ERROR `impl Trait` in type aliases is unstable\n-//~^^ ERROR could not find defining uses\n \n type InReturnInTypeAlias<R> = fn() -> impl Debug;\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n@@ -218,6 +214,34 @@ fn in_Fn_return_in_fn_where_clause<T>()\n {\n }\n \n+// Disallowed\n+struct InStructGenericParamDefault<T = impl Debug>(T);\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Disallowed\n+enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Disallowed\n+trait InTraitGenericParamDefault<T = impl Debug> {}\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Disallowed\n+type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Disallowed\n+impl <T = impl Debug> T {}\n+//~^ ERROR defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+//~| WARNING this was previously accepted by the compiler but is being phased out\n+//~| ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Disallowed\n+fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n+//~^ ERROR defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+//~| WARNING this was previously accepted by the compiler but is being phased out\n+//~| ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n fn main() {\n     let _in_local_variable: impl Fn() = || {};\n     //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types"}, {"sha": "09ec4d5b202c36a498414a771deb3cbc15455e54", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 78, "deletions": 55, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -17,7 +17,7 @@ LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic\n    |                                                 outer `impl Trait`\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:121:16\n+  --> $DIR/where-allowed.rs:119:16\n    |\n LL |     type Out = impl Debug;\n    |                ^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     type Out = impl Debug;\n    = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:157:23\n+  --> $DIR/where-allowed.rs:154:23\n    |\n LL | type InTypeAlias<R> = impl Debug;\n    |                       ^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL | type InTypeAlias<R> = impl Debug;\n    = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:161:39\n+  --> $DIR/where-allowed.rs:157:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n@@ -110,184 +110,207 @@ LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic\n    |                                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:62:59\n+  --> $DIR/where-allowed.rs:61:59\n    |\n LL | fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n    |                                                           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:67:38\n+  --> $DIR/where-allowed.rs:65:38\n    |\n LL | fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:71:40\n+  --> $DIR/where-allowed.rs:69:40\n    |\n LL | fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:84:32\n+  --> $DIR/where-allowed.rs:82:32\n    |\n LL | struct InBraceStructField { x: impl Debug }\n    |                                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:88:41\n+  --> $DIR/where-allowed.rs:86:41\n    |\n LL | struct InAdtInBraceStructField { x: Vec<impl Debug> }\n    |                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:92:27\n+  --> $DIR/where-allowed.rs:90:27\n    |\n LL | struct InTupleStructField(impl Debug);\n    |                           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:97:25\n+  --> $DIR/where-allowed.rs:95:25\n    |\n LL |     InBraceVariant { x: impl Debug },\n    |                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:99:20\n+  --> $DIR/where-allowed.rs:97:20\n    |\n LL |     InTupleVariant(impl Debug),\n    |                    ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:110:23\n+  --> $DIR/where-allowed.rs:108:23\n    |\n LL |     fn in_return() -> impl Debug;\n    |                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:128:34\n+  --> $DIR/where-allowed.rs:125:34\n    |\n LL |     fn in_trait_impl_return() -> impl Debug { () }\n    |                                  ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:141:33\n+  --> $DIR/where-allowed.rs:138:33\n    |\n LL |     fn in_foreign_parameters(_: impl Debug);\n    |                                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:144:31\n+  --> $DIR/where-allowed.rs:141:31\n    |\n LL |     fn in_foreign_return() -> impl Debug;\n    |                               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:161:39\n+  --> $DIR/where-allowed.rs:157:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:166:16\n+  --> $DIR/where-allowed.rs:162:16\n    |\n LL | impl PartialEq<impl Debug> for () {\n    |                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:171:24\n+  --> $DIR/where-allowed.rs:167:24\n    |\n LL | impl PartialEq<()> for impl Debug {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:176:6\n+  --> $DIR/where-allowed.rs:172:6\n    |\n LL | impl impl Debug {\n    |      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:182:24\n+  --> $DIR/where-allowed.rs:178:24\n    |\n LL | impl InInherentImplAdt<impl Debug> {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:188:11\n+  --> $DIR/where-allowed.rs:184:11\n    |\n LL |     where impl Debug: Debug\n    |           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:195:15\n+  --> $DIR/where-allowed.rs:191:15\n    |\n LL |     where Vec<impl Debug>: Debug\n    |               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:202:24\n+  --> $DIR/where-allowed.rs:198:24\n    |\n LL |     where T: PartialEq<impl Debug>\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:209:17\n+  --> $DIR/where-allowed.rs:205:17\n    |\n LL |     where T: Fn(impl Debug)\n    |                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:216:22\n+  --> $DIR/where-allowed.rs:212:22\n    |\n LL |     where T: Fn() -> impl Debug\n    |                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:222:29\n+  --> $DIR/where-allowed.rs:218:40\n+   |\n+LL | struct InStructGenericParamDefault<T = impl Debug>(T);\n+   |                                        ^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/where-allowed.rs:222:36\n+   |\n+LL | enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n+   |                                    ^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/where-allowed.rs:226:38\n+   |\n+LL | trait InTraitGenericParamDefault<T = impl Debug> {}\n+   |                                      ^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/where-allowed.rs:230:41\n+   |\n+LL | type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n+   |                                         ^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/where-allowed.rs:234:11\n+   |\n+LL | impl <T = impl Debug> T {}\n+   |           ^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/where-allowed.rs:240:40\n+   |\n+LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n+   |                                        ^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/where-allowed.rs:246:29\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:224:46\n+  --> $DIR/where-allowed.rs:248:46\n    |\n LL |     let _in_return_in_local_variable = || -> impl Fn() { || {} };\n    |                                              ^^^^^^^^^\n \n-error[E0720]: cannot resolve opaque type\n-  --> $DIR/where-allowed.rs:56:49\n-   |\n-LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n-   |                                                 ^^^^^^^^^^^^^^^^^^^   -------- this returned value is of `!` type\n-   |                                                 |\n-   |                                                 cannot resolve opaque type\n-   |\n-   = help: this error will resolve once the item's body returns a concrete type\n-\n-error[E0720]: cannot resolve opaque type\n-  --> $DIR/where-allowed.rs:62:46\n+error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+  --> $DIR/where-allowed.rs:234:7\n    |\n-LL | fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^^   -------- this returned value is of `!` type\n-   |                                              |\n-   |                                              cannot resolve opaque type\n+LL | impl <T = impl Debug> T {}\n+   |       ^\n    |\n-   = help: this error will resolve once the item's body returns a concrete type\n+   = note: `#[deny(invalid_type_param_default)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n \n-error: could not find defining uses\n-  --> $DIR/where-allowed.rs:121:16\n+error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+  --> $DIR/where-allowed.rs:240:36\n    |\n-LL |     type Out = impl Debug;\n-   |                ^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/where-allowed.rs:157:23\n+LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n+   |                                    ^\n    |\n-LL | type InTypeAlias<R> = impl Debug;\n-   |                       ^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n \n-error: aborting due to 44 previous errors\n+error: aborting due to 48 previous errors\n \n-Some errors have detailed explanations: E0562, E0658, E0666, E0720.\n+Some errors have detailed explanations: E0562, E0658, E0666.\n For more information about an error, try `rustc --explain E0562`."}, {"sha": "be3f7c627800dc135f5a5fc3330dc2072da94197", "filename": "src/test/ui/issues/issue-28568.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fissues%2Fissue-28568.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fissues%2Fissue-28568.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28568.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::ops::Drop` for type `MyStruct`:\n+error[E0119]: conflicting implementations of trait `std::ops::Drop` for type `MyStruct`\n   --> $DIR/issue-28568.rs:7:1\n    |\n LL | impl Drop for MyStruct {"}, {"sha": "11d77857d60cc96eb941ead57238bb92ece47586", "filename": "src/test/ui/issues/issue-41974.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fissues%2Fissue-41974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fissues%2Fissue-41974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41974.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::ops::Drop` for type `std::boxed::Box<_, _>`:\n+error[E0119]: conflicting implementations of trait `std::ops::Drop` for type `std::boxed::Box<_, _>`\n   --> $DIR/issue-41974.rs:7:1\n    |\n LL | impl<T> Drop for T where T: A {"}, {"sha": "23d8ed1848f59202335f8d51c914f2357c47e719", "filename": "src/test/ui/issues/issue-43355.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fissues%2Fissue-43355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fissues%2Fissue-43355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43355.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `Trait1<std::boxed::Box<_>>` for type `A`:\n+error[E0119]: conflicting implementations of trait `Trait1<std::boxed::Box<_>>` for type `A`\n   --> $DIR/issue-43355.rs:13:1\n    |\n LL | impl<X, T> Trait1<X> for T where T: Trait2<X> {"}, {"sha": "ca2e234cee668d1623bf0800deb391609a66d787", "filename": "src/test/ui/issues/issue-48728.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::clone::Clone` for type `Node<[_]>`:\n+error[E0119]: conflicting implementations of trait `std::clone::Clone` for type `Node<[_]>`\n   --> $DIR/issue-48728.rs:4:10\n    |\n LL | #[derive(Clone)]"}, {"sha": "aa40da12b875da8ddaa5d03b1f573099309d01cb", "filename": "src/test/ui/issues/issue-83924.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fissues%2Fissue-83924.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fissues%2Fissue-83924.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-83924.fixed?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+\n+fn main() {\n+    let mut values = vec![10, 11, 12];\n+    let v = &mut values;\n+\n+    let mut max = 0;\n+\n+    for n in &mut *v {\n+        max = std::cmp::max(max, *n);\n+    }\n+\n+    println!(\"max is {}\", max);\n+    println!(\"Converting to percentages of maximum value...\");\n+    for n in v {\n+        //~^ ERROR: use of moved value: `v` [E0382]\n+        *n = 100 * (*n) / max;\n+    }\n+    println!(\"values: {:#?}\", values);\n+}"}, {"sha": "22b80fe2f383f932380ac9f8338ddeee1be6dd4a", "filename": "src/test/ui/issues/issue-83924.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fissues%2Fissue-83924.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fissues%2Fissue-83924.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-83924.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+\n+fn main() {\n+    let mut values = vec![10, 11, 12];\n+    let v = &mut values;\n+\n+    let mut max = 0;\n+\n+    for n in v {\n+        max = std::cmp::max(max, *n);\n+    }\n+\n+    println!(\"max is {}\", max);\n+    println!(\"Converting to percentages of maximum value...\");\n+    for n in v {\n+        //~^ ERROR: use of moved value: `v` [E0382]\n+        *n = 100 * (*n) / max;\n+    }\n+    println!(\"values: {:#?}\", values);\n+}"}, {"sha": "682bc323cb051224aa6775714f4549f3156b04e9", "filename": "src/test/ui/issues/issue-83924.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fissues%2Fissue-83924.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fissues%2Fissue-83924.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-83924.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -0,0 +1,25 @@\n+error[E0382]: use of moved value: `v`\n+  --> $DIR/issue-83924.rs:15:14\n+   |\n+LL |     let v = &mut values;\n+   |         - move occurs because `v` has type `&mut Vec<i32>`, which does not implement the `Copy` trait\n+...\n+LL |     for n in v {\n+   |              - `v` moved due to this implicit call to `.into_iter()`\n+...\n+LL |     for n in v {\n+   |              ^ value used here after move\n+   |\n+note: this function takes ownership of the receiver `self`, which moves `v`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |                  ^^^^\n+help: consider creating a fresh reborrow of `v` here\n+   |\n+LL |     for n in &mut *v {\n+   |              ^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "871c512052821eae062ebdc38e666d299c6badf8", "filename": "src/test/ui/never_type/never-from-impl-is-reserved.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-from-impl-is-reserved.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `MyTrait` for type `MyFoo`:\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `MyFoo`\n   --> $DIR/never-from-impl-is-reserved.rs:10:1\n    |\n LL | impl MyTrait for MyFoo {}"}, {"sha": "1d6ef3914a91b0bee564d5dd8cd4158892711667", "filename": "src/test/ui/proc-macro/auxiliary/issue-83510.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-83510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-83510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-83510.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -0,0 +1,19 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro]\n+pub fn dance_like_you_want_to_ice(_: TokenStream) -> TokenStream {\n+    r#\"\n+    impl Foo {\n+        type Bar = Box<()> + Baz;\n+    }\n+    \"#\n+    .parse()\n+    .unwrap()\n+}"}, {"sha": "2b1aec4df0be3eb734af6133d468dd846b1548af", "filename": "src/test/ui/proc-macro/issue-83510.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fproc-macro%2Fissue-83510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fproc-macro%2Fissue-83510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-83510.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -0,0 +1,11 @@\n+// aux-build: issue-83510.rs\n+\n+extern crate issue_83510;\n+\n+issue_83510::dance_like_you_want_to_ice!();\n+//~^ ERROR: cannot find type `Foo` in this scope\n+//~| ERROR: expected trait, found struct `Box`\n+//~| ERROR: cannot find trait `Baz` in this scope\n+//~| ERROR: inherent associated types are unstable\n+\n+fn main() {}"}, {"sha": "e0803550906db248c463ebe0f7405211297f3f0d", "filename": "src/test/ui/proc-macro/issue-83510.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fproc-macro%2Fissue-83510.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fproc-macro%2Fissue-83510.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-83510.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -0,0 +1,38 @@\n+error[E0412]: cannot find type `Foo` in this scope\n+  --> $DIR/issue-83510.rs:5:1\n+   |\n+LL | issue_83510::dance_like_you_want_to_ice!();\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0404]: expected trait, found struct `Box`\n+  --> $DIR/issue-83510.rs:5:1\n+   |\n+LL | issue_83510::dance_like_you_want_to_ice!();\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a trait\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0405]: cannot find trait `Baz` in this scope\n+  --> $DIR/issue-83510.rs:5:1\n+   |\n+LL | issue_83510::dance_like_you_want_to_ice!();\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0658]: inherent associated types are unstable\n+  --> $DIR/issue-83510.rs:5:1\n+   |\n+LL | issue_83510::dance_like_you_want_to_ice!();\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information\n+   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0404, E0405, E0412, E0658.\n+For more information about an error, try `rustc --explain E0404`."}, {"sha": "c70ced731d54ddcf4fe42fe03ed286d01e00629a", "filename": "src/test/ui/rfc-2457/extern_block_nonascii_forbidden.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Frfc-2457%2Fextern_block_nonascii_forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Frfc-2457%2Fextern_block_nonascii_forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fextern_block_nonascii_forbidden.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -0,0 +1,10 @@\n+#![feature(extern_types)]\n+#![feature(non_ascii_idents)]\n+\n+extern \"C\" {\n+    type \u4e00; //~ items in `extern` blocks cannot use non-ascii identifiers\n+    fn \u4e8c(); //~ items in `extern` blocks cannot use non-ascii identifiers\n+    static \u4e09: usize; //~ items in `extern` blocks cannot use non-ascii identifiers\n+}\n+\n+fn main() {}"}, {"sha": "3b18c06ec5c4c371041e40fb041633d56115bd25", "filename": "src/test/ui/rfc-2457/extern_block_nonascii_forbidden.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Frfc-2457%2Fextern_block_nonascii_forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Frfc-2457%2Fextern_block_nonascii_forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fextern_block_nonascii_forbidden.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -0,0 +1,34 @@\n+error: items in `extern` blocks cannot use non-ascii identifiers\n+  --> $DIR/extern_block_nonascii_forbidden.rs:5:10\n+   |\n+LL | extern \"C\" {\n+   | ---------- in this `extern` block\n+LL |     type \u4e00;\n+   |          ^^\n+   |\n+   = note: This limitation may be lifted in the future; see issue #83942 <https://github.com/rust-lang/rust/issues/83942> for more information\n+\n+error: items in `extern` blocks cannot use non-ascii identifiers\n+  --> $DIR/extern_block_nonascii_forbidden.rs:6:8\n+   |\n+LL | extern \"C\" {\n+   | ---------- in this `extern` block\n+LL |     type \u4e00;\n+LL |     fn \u4e8c();\n+   |        ^^\n+   |\n+   = note: This limitation may be lifted in the future; see issue #83942 <https://github.com/rust-lang/rust/issues/83942> for more information\n+\n+error: items in `extern` blocks cannot use non-ascii identifiers\n+  --> $DIR/extern_block_nonascii_forbidden.rs:7:12\n+   |\n+LL | extern \"C\" {\n+   | ---------- in this `extern` block\n+...\n+LL |     static \u4e09: usize;\n+   |            ^^\n+   |\n+   = note: This limitation may be lifted in the future; see issue #83942 <https://github.com/rust-lang/rust/issues/83942> for more information\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "6e06ab737c2150d7b05daadb66adb6cce8560a92", "filename": "src/test/ui/rfc-2457/mod_file_nonascii_forbidden.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_forbidden.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -6,7 +6,7 @@ LL | mod \u0159\u0173\u015b\u0165;\n    |\n    = help: to create the module `\u0159\u0173\u015b\u0165`, create file \"$DIR/\u0159\u0173\u015b\u0165.rs\"\n \n-error[E0754]: trying to load file for module `\u0159\u0173\u015b\u0165` with non ascii identifer name\n+error[E0754]: trying to load file for module `\u0159\u0173\u015b\u0165` with non-ascii identifier name\n   --> $DIR/mod_file_nonascii_forbidden.rs:3:5\n    |\n LL | mod \u0159\u0173\u015b\u0165;"}, {"sha": "99560ed06888aeab78a1e16d1f2c0a2b3e950597", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-and-non-const-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::ops::Add` for type `i32`:\n+error[E0119]: conflicting implementations of trait `std::ops::Add` for type `i32`\n   --> $DIR/const-and-non-const-impl.rs:6:1\n    |\n LL | impl const std::ops::Add for i32 {\n@@ -7,7 +7,7 @@ LL | impl const std::ops::Add for i32 {\n    = note: conflicting implementation in crate `core`:\n            - impl Add for i32;\n \n-error[E0119]: conflicting implementations of trait `std::ops::Add` for type `Int`:\n+error[E0119]: conflicting implementations of trait `std::ops::Add` for type `Int`\n   --> $DIR/const-and-non-const-impl.rs:24:1\n    |\n LL | impl std::ops::Add for Int {"}, {"sha": "ab3cf27d0d05922c7e37667b02ed06edb3c72459", "filename": "src/test/ui/specialization/issue-52050.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -8,7 +8,7 @@ LL | #![feature(specialization)]\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: consider using `min_specialization` instead, which is more stable and complete\n \n-error[E0119]: conflicting implementations of trait `IntoPyDictPointer` for type `()`:\n+error[E0119]: conflicting implementations of trait `IntoPyDictPointer` for type `()`\n   --> $DIR/issue-52050.rs:28:1\n    |\n LL | / impl<I> IntoPyDictPointer for I"}, {"sha": "9157ad0d46a1a57de04c3eeb422567eb347ea589", "filename": "src/test/ui/specialization/specialization-feature-gate-overlap.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-feature-gate-overlap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-feature-gate-overlap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-feature-gate-overlap.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `Foo` for type `u8`:\n+error[E0119]: conflicting implementations of trait `Foo` for type `u8`\n   --> $DIR/specialization-feature-gate-overlap.rs:13:1\n    |\n LL | impl<T> Foo for T {"}, {"sha": "3ccbe1616e803c60d4842d92cf124dba0bed43a5", "filename": "src/test/ui/specialization/specialization-overlap.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -8,31 +8,31 @@ LL | #![feature(specialization)]\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: consider using `min_specialization` instead, which is more stable and complete\n \n-error[E0119]: conflicting implementations of trait `Foo` for type `std::vec::Vec<_>`:\n+error[E0119]: conflicting implementations of trait `Foo` for type `std::vec::Vec<_>`\n   --> $DIR/specialization-overlap.rs:5:1\n    |\n LL | impl<T: Clone> Foo for T {}\n    | ------------------------ first implementation here\n LL | impl<T> Foo for Vec<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::vec::Vec<_>`\n \n-error[E0119]: conflicting implementations of trait `Bar` for type `(u8, u8)`:\n+error[E0119]: conflicting implementations of trait `Bar` for type `(u8, u8)`\n   --> $DIR/specialization-overlap.rs:9:1\n    |\n LL | impl<T> Bar for (T, u8) {}\n    | ----------------------- first implementation here\n LL | impl<T> Bar for (u8, T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(u8, u8)`\n \n-error[E0119]: conflicting implementations of trait `Baz<u8>` for type `u8`:\n+error[E0119]: conflicting implementations of trait `Baz<u8>` for type `u8`\n   --> $DIR/specialization-overlap.rs:13:1\n    |\n LL | impl<T> Baz<T> for u8 {}\n    | --------------------- first implementation here\n LL | impl<T> Baz<u8> for T {}\n    | ^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `u8`\n \n-error[E0119]: conflicting implementations of trait `Qux`:\n+error[E0119]: conflicting implementations of trait `Qux`\n   --> $DIR/specialization-overlap.rs:17:1\n    |\n LL | impl<T: Clone> Qux for T {}"}, {"sha": "146920ac685bb1af95edeeaef6d1ae0b46fac4c5", "filename": "src/test/ui/traits/alias/issue-83613.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -0,0 +1,13 @@\n+#![feature(min_type_alias_impl_trait)]\n+trait OpaqueTrait {}\n+impl<T> OpaqueTrait for T {}\n+type OpaqueType = impl OpaqueTrait;\n+fn mk_opaque() -> OpaqueType {\n+    || 0\n+}\n+trait AnotherTrait {}\n+impl<T: Send> AnotherTrait for T {}\n+impl AnotherTrait for OpaqueType {}\n+//~^ ERROR conflicting implementations of trait `AnotherTrait` for type `impl OpaqueTrait`\n+//~| ERROR cannot implement trait on type alias impl trait\n+fn main() {}"}, {"sha": "0ab39ae66728817fe79532d06078e3c82ecaed18", "filename": "src/test/ui/traits/alias/issue-83613.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -0,0 +1,23 @@\n+error[E0119]: conflicting implementations of trait `AnotherTrait` for type `impl OpaqueTrait`\n+  --> $DIR/issue-83613.rs:10:1\n+   |\n+LL | impl<T: Send> AnotherTrait for T {}\n+   | -------------------------------- first implementation here\n+LL | impl AnotherTrait for OpaqueType {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `impl OpaqueTrait`\n+\n+error: cannot implement trait on type alias impl trait\n+  --> $DIR/issue-83613.rs:10:1\n+   |\n+LL | impl AnotherTrait for OpaqueType {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: type alias impl trait defined here\n+  --> $DIR/issue-83613.rs:4:19\n+   |\n+LL | type OpaqueType = impl OpaqueTrait;\n+   |                   ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "c87f1ff1f3f15130121b99318ccbc293ba8f03f4", "filename": "src/test/ui/traits/issue-33140-hack-boundaries.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ftraits%2Fissue-33140-hack-boundaries.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ftraits%2Fissue-33140-hack-boundaries.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-33140-hack-boundaries.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `Trait1` for type `(dyn std::marker::Send + 'static)`:\n+error[E0119]: conflicting implementations of trait `Trait1` for type `(dyn std::marker::Send + 'static)`\n   --> $DIR/issue-33140-hack-boundaries.rs:18:1\n    |\n LL | impl Trait1 for dyn Send {}\n@@ -14,47 +14,47 @@ LL | impl Trait2 for dyn Send {}\n LL | impl !Trait2 for dyn Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n \n-error[E0119]: conflicting implementations of trait `Trait3<(dyn std::marker::Sync + 'static)>` for type `(dyn std::marker::Send + 'static)`:\n+error[E0119]: conflicting implementations of trait `Trait3<(dyn std::marker::Sync + 'static)>` for type `(dyn std::marker::Send + 'static)`\n   --> $DIR/issue-33140-hack-boundaries.rs:32:1\n    |\n LL | impl Trait3<dyn Sync> for dyn Send {}\n    | ---------------------------------- first implementation here\n LL | impl Trait3<dyn Sync> for dyn Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n \n-error[E0119]: conflicting implementations of trait `Trait4a` for type `(dyn std::marker::Send + 'static)`:\n+error[E0119]: conflicting implementations of trait `Trait4a` for type `(dyn std::marker::Send + 'static)`\n   --> $DIR/issue-33140-hack-boundaries.rs:39:1\n    |\n LL | impl<T: ?Sized> Trait4a for T {}\n    | ----------------------------- first implementation here\n LL | impl Trait4a for dyn Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n \n-error[E0119]: conflicting implementations of trait `Trait4b` for type `()`:\n+error[E0119]: conflicting implementations of trait `Trait4b` for type `()`\n   --> $DIR/issue-33140-hack-boundaries.rs:46:1\n    |\n LL | impl Trait4b for () {}\n    | ------------------- first implementation here\n LL | impl Trait4b for () {}\n    | ^^^^^^^^^^^^^^^^^^^ conflicting implementation for `()`\n \n-error[E0119]: conflicting implementations of trait `Trait4c` for type `(dyn Trait1 + std::marker::Send + 'static)`:\n+error[E0119]: conflicting implementations of trait `Trait4c` for type `(dyn Trait1 + std::marker::Send + 'static)`\n   --> $DIR/issue-33140-hack-boundaries.rs:53:1\n    |\n LL | impl Trait4c for dyn Trait1 + Send {}\n    | ---------------------------------- first implementation here\n LL | impl Trait4c for dyn Trait1 + Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn Trait1 + std::marker::Send + 'static)`\n \n-error[E0119]: conflicting implementations of trait `Trait4d` for type `dyn std::marker::Send`:\n+error[E0119]: conflicting implementations of trait `Trait4d` for type `dyn std::marker::Send`\n   --> $DIR/issue-33140-hack-boundaries.rs:60:1\n    |\n LL | impl<'a> Trait4d for dyn Send + 'a {}\n    | ---------------------------------- first implementation here\n LL | impl<'a> Trait4d for dyn Send + 'a {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `dyn std::marker::Send`\n \n-error[E0119]: conflicting implementations of trait `Trait5` for type `(dyn std::marker::Send + 'static)`:\n+error[E0119]: conflicting implementations of trait `Trait5` for type `(dyn std::marker::Send + 'static)`\n   --> $DIR/issue-33140-hack-boundaries.rs:67:1\n    |\n LL | impl Trait5 for dyn Send {}"}, {"sha": "392c56a282d7e5eb86c21789ecf74d999dd1db44", "filename": "src/test/ui/traits/issue-33140.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ftraits%2Fissue-33140.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ftraits%2Fissue-33140.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-33140.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`:\n+error[E0119]: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`\n   --> $DIR/issue-33140.rs:9:1\n    |\n LL | impl Trait for dyn Send + Sync {\n@@ -7,7 +7,7 @@ LL | impl Trait for dyn Send + Sync {\n LL | impl Trait for dyn Sync + Send {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n \n-error[E0119]: conflicting implementations of trait `Trait2` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`:\n+error[E0119]: conflicting implementations of trait `Trait2` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`\n   --> $DIR/issue-33140.rs:22:1\n    |\n LL | impl Trait2 for dyn Send + Sync {"}, {"sha": "b970ad762088d9880641bbab7c58a2115465633a", "filename": "src/test/ui/traits/negative-impls/rely-on-negative-impl-in-coherence.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `LocalTrait` for type `std::string::String`:\n+error[E0119]: conflicting implementations of trait `LocalTrait` for type `std::string::String`\n   --> $DIR/rely-on-negative-impl-in-coherence.rs:19:1\n    |\n LL | impl<T: ForeignTrait> LocalTrait for T { }"}, {"sha": "910c5e29dac0ea7fdefd12c57a7fd7533a368180", "filename": "src/test/ui/traits/overlap-not-permitted-for-builtin-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ftraits%2Foverlap-not-permitted-for-builtin-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ftraits%2Foverlap-not-permitted-for-builtin-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Foverlap-not-permitted-for-builtin-trait.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::marker::Send` for type `MyStruct`:\n+error[E0119]: conflicting implementations of trait `std::marker::Send` for type `MyStruct`\n   --> $DIR/overlap-not-permitted-for-builtin-trait.rs:7:1\n    |\n LL | impl !Send for MyStruct {}"}, {"sha": "a811d7e32016b1a950508ad96ab97ddaa3dcca14", "filename": "src/test/ui/traits/reservation-impl/coherence-conflict.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fcoherence-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fcoherence-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fcoherence-conflict.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `OtherTrait` for type `()`:\n+error[E0119]: conflicting implementations of trait `OtherTrait` for type `()`\n   --> $DIR/coherence-conflict.rs:11:1\n    |\n LL | impl OtherTrait for () {}"}, {"sha": "6d1a59aafeda4080070d28558ab4495223513b92", "filename": "src/test/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.full_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.full_tait.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -7,7 +7,7 @@ LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-error[E0119]: conflicting implementations of trait `std::ops::FnOnce<()>` for type `&_`:\n+error[E0119]: conflicting implementations of trait `std::ops::FnOnce<()>` for type `&_`\n   --> $DIR/incoherent-assoc-imp-trait.rs:13:1\n    |\n LL | impl<F> FnOnce<()> for &F {"}, {"sha": "5c02b602d528bc52f54f1d18cbfe21ce1452f549", "filename": "src/test/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.min_tait.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,4 +1,4 @@\n-error[E0119]: conflicting implementations of trait `std::ops::FnOnce<()>` for type `&_`:\n+error[E0119]: conflicting implementations of trait `std::ops::FnOnce<()>` for type `&_`\n   --> $DIR/incoherent-assoc-imp-trait.rs:13:1\n    |\n LL | impl<F> FnOnce<()> for &F {"}, {"sha": "05828ebb2c3538b71dbe2f7ea8a0ed2766e633ae", "filename": "src/test/ui/unused/unused-doc-comments-for-macros.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Funused%2Funused-doc-comments-for-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Funused%2Funused-doc-comments-for-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-doc-comments-for-macros.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -0,0 +1,17 @@\n+#![deny(unused_doc_comments)]\n+#![feature(rustc_attrs)]\n+\n+macro_rules! foo { () => {}; }\n+\n+fn main() {\n+    /// line1 //~ ERROR: unused doc comment\n+    /// line2\n+    /// line3\n+    foo!();\n+\n+    // Ensure we still detect another doc-comment block.\n+    /// line1 //~ ERROR: unused doc comment\n+    /// line2\n+    /// line3\n+    foo!();\n+}"}, {"sha": "f4f5bb71e551ea380af9f96481daf5547d896fe1", "filename": "src/test/ui/unused/unused-doc-comments-for-macros.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Funused%2Funused-doc-comments-for-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Funused%2Funused-doc-comments-for-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-doc-comments-for-macros.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -0,0 +1,31 @@\n+error: unused doc comment\n+  --> $DIR/unused-doc-comments-for-macros.rs:7:5\n+   |\n+LL | /     /// line1\n+LL | |     /// line2\n+LL | |     /// line3\n+   | |_____--------^\n+   |       |\n+   |       rustdoc does not generate documentation for macro invocations\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unused-doc-comments-for-macros.rs:1:9\n+   |\n+LL | #![deny(unused_doc_comments)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+   = help: to document an item produced by a macro, the macro must produce the documentation as part of its expansion\n+\n+error: unused doc comment\n+  --> $DIR/unused-doc-comments-for-macros.rs:13:5\n+   |\n+LL | /     /// line1\n+LL | |     /// line2\n+LL | |     /// line3\n+   | |_____--------^\n+   |       |\n+   |       rustdoc does not generate documentation for macro invocations\n+   |\n+   = help: to document an item produced by a macro, the macro must produce the documentation as part of its expansion\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7d2e5ab6f2b7f673a0fde4a2ae765c3c7066a433", "filename": "src/test/ui/unused/useless-comment.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Funused%2Fuseless-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Funused%2Fuseless-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Fuseless-comment.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "previous_filename": "src/test/ui/useless-comment.rs"}, {"sha": "5a0af8db7c504dfa78b3342375dbf1fb9a9a26e2", "filename": "src/test/ui/unused/useless-comment.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Funused%2Fuseless-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Funused%2Fuseless-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Fuseless-comment.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "previous_filename": "src/test/ui/useless-comment.stderr"}, {"sha": "01a7627fc7f34d12dc8f687401ac63f5c07fc664", "filename": "src/tools/clippy/clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -142,12 +142,12 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n             .map(|(o, _)| match o {\n                 InlineAsmOperand::In { expr, .. }\n                 | InlineAsmOperand::InOut { expr, .. }\n-                | InlineAsmOperand::Const { expr }\n                 | InlineAsmOperand::Sym { expr } => never_loop_expr(expr, main_loop_id),\n                 InlineAsmOperand::Out { expr, .. } => never_loop_expr_all(&mut expr.iter(), main_loop_id),\n                 InlineAsmOperand::SplitInOut { in_expr, out_expr, .. } => {\n                     never_loop_expr_all(&mut once(in_expr).chain(out_expr.iter()), main_loop_id)\n                 },\n+                InlineAsmOperand::Const { .. } => NeverLoopResult::Otherwise,\n             })\n             .fold(NeverLoopResult::Otherwise, combine_both),\n         ExprKind::Struct(_, _, None)"}, {"sha": "b3fe66ed4285eff8ba0a54f4e48275c70e0ee1ca", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -306,7 +306,6 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n                 match op {\n                     hir::InlineAsmOperand::In { expr, .. }\n                     | hir::InlineAsmOperand::InOut { expr, .. }\n-                    | hir::InlineAsmOperand::Const { expr }\n                     | hir::InlineAsmOperand::Sym { expr } => print_expr(cx, expr, indent + 1),\n                     hir::InlineAsmOperand::Out { expr, .. } => {\n                         if let Some(expr) = expr {\n@@ -319,6 +318,10 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n                             print_expr(cx, out_expr, indent + 1);\n                         }\n                     },\n+                    hir::InlineAsmOperand::Const { anon_const } => {\n+                        println!(\"{}anon_const:\", ind);\n+                        print_expr(cx, &cx.tcx.hir().body(anon_const.body).value, indent + 1);\n+                    }\n                 }\n             }\n         },"}, {"sha": "b30c0b7988194d20bc6835cc06c70325043d953f", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -663,7 +663,8 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                                 self.hash_expr(out_expr);\n                             }\n                         },\n-                        InlineAsmOperand::Const { expr } | InlineAsmOperand::Sym { expr } => self.hash_expr(expr),\n+                        InlineAsmOperand::Const { anon_const } => self.hash_body(anon_const.body),\n+                        InlineAsmOperand::Sym { expr } => self.hash_expr(expr),\n                     }\n                 }\n             },"}]}