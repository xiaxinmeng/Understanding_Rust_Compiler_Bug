{"sha": "a4541b02a33e7c4fdcc8f50459bad6ab99463919", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NTQxYjAyYTMzZTdjNGZkY2M4ZjUwNDU5YmFkNmFiOTk0NjM5MTk=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-04-16T03:56:16Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-04-21T17:07:48Z"}, "message": "syntax: remove #![feature(box_syntax, box_patterns)]", "tree": {"sha": "1fefb4ce12dfdc0b4d7f7db4a0b08483d45ecffc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fefb4ce12dfdc0b4d7f7db4a0b08483d45ecffc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4541b02a33e7c4fdcc8f50459bad6ab99463919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4541b02a33e7c4fdcc8f50459bad6ab99463919", "html_url": "https://github.com/rust-lang/rust/commit/a4541b02a33e7c4fdcc8f50459bad6ab99463919", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4541b02a33e7c4fdcc8f50459bad6ab99463919/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7397bdc9c516f3f714ad4974ecdd27f567d03d05", "url": "https://api.github.com/repos/rust-lang/rust/commits/7397bdc9c516f3f714ad4974ecdd27f567d03d05", "html_url": "https://github.com/rust-lang/rust/commit/7397bdc9c516f3f714ad4974ecdd27f567d03d05"}], "stats": {"total": 90, "additions": 44, "deletions": 46}, "files": [{"sha": "50ab430f148ca7ece5e5f4468913e78b6ab95586", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=a4541b02a33e7c4fdcc8f50459bad6ab99463919", "patch": "@@ -262,10 +262,10 @@ macro_rules! make_MacEager {\n         impl MacEager {\n             $(\n                 pub fn $fld(v: $t) -> Box<MacResult> {\n-                    box MacEager {\n+                    Box::new(MacEager {\n                         $fld: Some(v),\n                         ..Default::default()\n-                    }\n+                    })\n                 }\n             )*\n         }\n@@ -331,7 +331,7 @@ impl DummyResult {\n     /// Use this as a return value after hitting any errors and\n     /// calling `span_err`.\n     pub fn any(sp: Span) -> Box<MacResult+'static> {\n-        box DummyResult { expr_only: false, span: sp }\n+        Box::new(DummyResult { expr_only: false, span: sp })\n     }\n \n     /// Create a default MacResult that can only be an expression.\n@@ -340,7 +340,7 @@ impl DummyResult {\n     /// if an error is encountered internally, the user will receive\n     /// an error that they also used it in the wrong place.\n     pub fn expr(sp: Span) -> Box<MacResult+'static> {\n-        box DummyResult { expr_only: true, span: sp }\n+        Box::new(DummyResult { expr_only: true, span: sp })\n     }\n \n     /// A plain dummy expression."}, {"sha": "fe6a8fea78c702d26de96b08ec2ac30bb3ab0305", "filename": "src/libsyntax/ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=a4541b02a33e7c4fdcc8f50459bad6ab99463919", "patch": "@@ -47,7 +47,7 @@ pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt,\n     let ordering_ty = Literal(path_std!(cx, core::cmp::Ordering));\n     let ret_ty = Literal(Path::new_(pathvec_std!(cx, core::option::Option),\n                                     None,\n-                                    vec![box ordering_ty],\n+                                    vec![Box::new(ordering_ty)],\n                                     true));\n \n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));"}, {"sha": "0b31f06f87d0676c19615d079c461f87ef4fe30f", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=a4541b02a33e7c4fdcc8f50459bad6ab99463919", "patch": "@@ -68,14 +68,14 @@ fn expand_deriving_decodable_imp(cx: &mut ExtCtxt,\n                                     vec!(), true))))\n                 },\n                 explicit_self: None,\n-                args: vec!(Ptr(box Literal(Path::new_local(\"__D\")),\n+                args: vec!(Ptr(Box::new(Literal(Path::new_local(\"__D\"))),\n                             Borrowed(None, MutMutable))),\n                 ret_ty: Literal(Path::new_(\n                     pathvec_std!(cx, core::result::Result),\n                     None,\n-                    vec!(box Self_, box Literal(Path::new_(\n+                    vec!(Box::new(Self_), Box::new(Literal(Path::new_(\n                         vec![\"__D\", \"Error\"], None, vec![], false\n-                    ))),\n+                    )))),\n                     true\n                 )),\n                 attributes: Vec::new(),"}, {"sha": "92944d649332f04617e1dea75f8cd75d10687090", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=a4541b02a33e7c4fdcc8f50459bad6ab99463919", "patch": "@@ -144,14 +144,14 @@ fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n                                     vec!(), true))))\n                 },\n                 explicit_self: borrowed_explicit_self(),\n-                args: vec!(Ptr(box Literal(Path::new_local(\"__S\")),\n+                args: vec!(Ptr(Box::new(Literal(Path::new_local(\"__S\"))),\n                             Borrowed(None, MutMutable))),\n                 ret_ty: Literal(Path::new_(\n                     pathvec_std!(cx, core::result::Result),\n                     None,\n-                    vec!(box Tuple(Vec::new()), box Literal(Path::new_(\n+                    vec!(Box::new(Tuple(Vec::new())), Box::new(Literal(Path::new_(\n                         vec![\"__S\", \"Error\"], None, vec![], false\n-                    ))),\n+                    )))),\n                     true\n                 )),\n                 attributes: Vec::new(),"}, {"sha": "f73a3969bed82daae37794dc20ed8b56c5430ec5", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=a4541b02a33e7c4fdcc8f50459bad6ab99463919", "patch": "@@ -807,7 +807,7 @@ impl<'a> MethodDef<'a> {\n                 Self_ if nonstatic  => {\n                     self_args.push(arg_expr);\n                 }\n-                Ptr(box Self_, _) if nonstatic => {\n+                Ptr(ref ty, _) if **ty == Self_ && nonstatic => {\n                     self_args.push(cx.expr_deref(trait_.span, arg_expr))\n                 }\n                 _ => {"}, {"sha": "9e8e68c0b8cce1e49c80434939b7bc42dba67984", "filename": "src/libsyntax/ext/deriving/generic/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs?ref=a4541b02a33e7c4fdcc8f50459bad6ab99463919", "patch": "@@ -24,7 +24,7 @@ use parse::token::special_idents;\n use ptr::P;\n \n /// The types of pointers\n-#[derive(Clone)]\n+#[derive(Clone, Eq, PartialEq)]\n pub enum PtrTy<'a> {\n     /// &'lifetime mut\n     Borrowed(Option<&'a str>, ast::Mutability),\n@@ -34,7 +34,7 @@ pub enum PtrTy<'a> {\n \n /// A path, e.g. `::std::option::Option::<i32>` (global). Has support\n /// for type parameters and a lifetime.\n-#[derive(Clone)]\n+#[derive(Clone, Eq, PartialEq)]\n pub struct Path<'a> {\n     pub path: Vec<&'a str> ,\n     pub lifetime: Option<&'a str>,\n@@ -85,7 +85,7 @@ impl<'a> Path<'a> {\n }\n \n /// A type. Supports pointers, Self, and literals\n-#[derive(Clone)]\n+#[derive(Clone, Eq, PartialEq)]\n pub enum Ty<'a> {\n     Self_,\n     /// &/Box/ Ty\n@@ -109,7 +109,7 @@ pub fn borrowed_explicit_self<'r>() -> Option<Option<PtrTy<'r>>> {\n }\n \n pub fn borrowed_self<'r>() -> Ty<'r> {\n-    borrowed(box Self_)\n+    borrowed(Box::new(Self_))\n }\n \n pub fn nil_ty<'r>() -> Ty<'r> {"}, {"sha": "915d99796152d8091db2b7269673462f9f2071d0", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=a4541b02a33e7c4fdcc8f50459bad6ab99463919", "patch": "@@ -41,7 +41,7 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n                                   vec![path_std!(cx, core::hash::Hasher)])],\n                 },\n                 explicit_self: borrowed_explicit_self(),\n-                args: vec!(Ptr(box Literal(arg), Borrowed(None, MutMutable))),\n+                args: vec!(Ptr(Box::new(Literal(arg)), Borrowed(None, MutMutable))),\n                 ret_ty: nil_ty(),\n                 attributes: vec![],\n                 combine_substructure: combine_substructure(Box::new(|a, b, c| {"}, {"sha": "3d0645fd6e3cffd64ba4737af5d48939ce0164d8", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=a4541b02a33e7c4fdcc8f50459bad6ab99463919", "patch": "@@ -40,7 +40,7 @@ pub fn expand_deriving_from_primitive(cx: &mut ExtCtxt,\n                 args: vec!(Literal(path_local!(i64))),\n                 ret_ty: Literal(Path::new_(pathvec_std!(cx, core::option::Option),\n                                            None,\n-                                           vec!(box Self_),\n+                                           vec!(Box::new(Self_)),\n                                            true)),\n                 // #[inline] liable to cause code-bloat\n                 attributes: attrs.clone(),\n@@ -55,7 +55,7 @@ pub fn expand_deriving_from_primitive(cx: &mut ExtCtxt,\n                 args: vec!(Literal(path_local!(u64))),\n                 ret_ty: Literal(Path::new_(pathvec_std!(cx, core::option::Option),\n                                            None,\n-                                           vec!(box Self_),\n+                                           vec!(Box::new(Self_)),\n                                            true)),\n                 // #[inline] liable to cause code-bloat\n                 attributes: attrs,"}, {"sha": "3ce1f6f12ceab58ac7cbf5a01cc3d4bd2a3764ef", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=a4541b02a33e7c4fdcc8f50459bad6ab99463919", "patch": "@@ -25,7 +25,7 @@ pub fn expand_deriving_show(cx: &mut ExtCtxt,\n                             push: &mut FnMut(P<Item>))\n {\n     // &mut ::std::fmt::Formatter\n-    let fmtr = Ptr(box Literal(path_std!(cx, core::fmt::Formatter)),\n+    let fmtr = Ptr(Box::new(Literal(path_std!(cx, core::fmt::Formatter))),\n                    Borrowed(None, ast::MutMutable));\n \n     let trait_def = TraitDef {"}, {"sha": "08bb4ca106486207cc377ed8c57175b1832b5101", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=a4541b02a33e7c4fdcc8f50459bad6ab99463919", "patch": "@@ -128,7 +128,7 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree\n         }\n     }\n \n-    box ExpandResult { p: p }\n+    Box::new(ExpandResult { p: p })\n }\n \n // include_str! : read the given file, insert it as a literal string expr"}, {"sha": "5521c68e75c6950f513c3519411d009983f1f490", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=a4541b02a33e7c4fdcc8f50459bad6ab99463919", "patch": "@@ -165,7 +165,7 @@ pub fn initial_matcher_pos(ms: Rc<Vec<TokenTree>>, sep: Option<Token>, lo: ByteP\n                            -> Box<MatcherPos> {\n     let match_idx_hi = count_names(&ms[..]);\n     let matches: Vec<_> = (0..match_idx_hi).map(|_| Vec::new()).collect();\n-    box MatcherPos {\n+    Box::new(MatcherPos {\n         stack: vec![],\n         top_elts: TtSeq(ms),\n         sep: sep,\n@@ -176,7 +176,7 @@ pub fn initial_matcher_pos(ms: Rc<Vec<TokenTree>>, sep: Option<Token>, lo: ByteP\n         match_cur: 0,\n         match_hi: match_idx_hi,\n         sp_lo: lo\n-    }\n+    })\n }\n \n /// NamedMatch is a pattern-match result for a single token::MATCH_NONTERMINAL:\n@@ -396,7 +396,7 @@ pub fn parse(sess: &ParseSess,\n                         let matches: Vec<_> = (0..ei.matches.len())\n                             .map(|_| Vec::new()).collect();\n                         let ei_t = ei;\n-                        cur_eis.push(box MatcherPos {\n+                        cur_eis.push(Box::new(MatcherPos {\n                             stack: vec![],\n                             sep: seq.separator.clone(),\n                             idx: 0,\n@@ -407,7 +407,7 @@ pub fn parse(sess: &ParseSess,\n                             up: Some(ei_t),\n                             sp_lo: sp.lo,\n                             top_elts: Tt(TtSequence(sp, seq)),\n-                        });\n+                        }));\n                     }\n                     TtToken(_, MatchNt(..)) => {\n                         // Built-in nonterminals never start with these tokens,\n@@ -533,15 +533,15 @@ pub fn parse_nt(p: &mut Parser, sp: Span, name: &str) -> Nonterminal {\n       \"ty\" => token::NtTy(p.parse_ty()),\n       // this could be handled like a token, since it is one\n       \"ident\" => match p.token {\n-        token::Ident(sn,b) => { panictry!(p.bump()); token::NtIdent(box sn,b) }\n+        token::Ident(sn,b) => { panictry!(p.bump()); token::NtIdent(Box::new(sn),b) }\n         _ => {\n             let token_str = pprust::token_to_string(&p.token);\n             panic!(p.fatal(&format!(\"expected ident, found {}\",\n                              &token_str[..])))\n         }\n       },\n       \"path\" => {\n-        token::NtPath(box panictry!(p.parse_path(LifetimeAndTypesWithoutColons)))\n+        token::NtPath(Box::new(panictry!(p.parse_path(LifetimeAndTypesWithoutColons))))\n       }\n       \"meta\" => token::NtMeta(p.parse_meta_item()),\n       _ => {"}, {"sha": "27a00290ee01ea81e8502b256102eca808ec7f17", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=a4541b02a33e7c4fdcc8f50459bad6ab99463919", "patch": "@@ -192,15 +192,15 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                 panictry!(p.check_unknown_macro_variable());\n                 // Let the context choose how to interpret the result.\n                 // Weird, but useful for X-macros.\n-                return box ParserAnyMacro {\n+                return Box::new(ParserAnyMacro {\n                     parser: RefCell::new(p),\n \n                     // Pass along the original expansion site and the name of the macro\n                     // so we can print a useful error message if the parse of the expanded\n                     // macro leaves unparsed tokens.\n                     site_span: sp,\n                     macro_ident: name\n-                }\n+                })\n               }\n               Failure(sp, ref msg) => if sp.lo >= best_fail_spot.lo {\n                 best_fail_spot = sp;\n@@ -281,12 +281,12 @@ pub fn compile<'cx>(cx: &'cx mut ExtCtxt,\n         _ => cx.span_bug(def.span, \"wrong-structured rhs\")\n     };\n \n-    let exp: Box<_> = box MacroRulesMacroExpander {\n+    let exp: Box<_> = Box::new(MacroRulesMacroExpander {\n         name: def.ident,\n         imported_from: def.imported_from,\n         lhses: lhses,\n         rhses: rhses,\n-    };\n+    });\n \n     NormalTT(exp, Some(def.span), def.allow_internal_unstable)\n }"}, {"sha": "368a9f0c27e56fd3e721693bd308702c82d5c75f", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=a4541b02a33e7c4fdcc8f50459bad6ab99463919", "patch": "@@ -294,9 +294,9 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n                             // sidestep the interpolation tricks for ident because\n                             // (a) idents can be in lots of places, so it'd be a pain\n                             // (b) we actually can, since it's a token.\n-                            MatchedNonterminal(NtIdent(box sn, b)) => {\n+                            MatchedNonterminal(NtIdent(ref sn, b)) => {\n                                 r.cur_span = sp;\n-                                r.cur_tok = token::Ident(sn, b);\n+                                r.cur_tok = token::Ident(**sn, b);\n                                 return ret_val;\n                             }\n                             MatchedNonterminal(ref other_whole_nt) => {"}, {"sha": "8ba36cefc65dd49bf80d897d6d8d0ae1399dadc6", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=a4541b02a33e7c4fdcc8f50459bad6ab99463919", "patch": "@@ -677,10 +677,10 @@ pub fn noop_fold_interpolated<T: Folder>(nt: token::Nonterminal, fld: &mut T)\n         token::NtPat(pat) => token::NtPat(fld.fold_pat(pat)),\n         token::NtExpr(expr) => token::NtExpr(fld.fold_expr(expr)),\n         token::NtTy(ty) => token::NtTy(fld.fold_ty(ty)),\n-        token::NtIdent(box id, is_mod_name) =>\n-            token::NtIdent(box fld.fold_ident(id), is_mod_name),\n+        token::NtIdent(id, is_mod_name) =>\n+            token::NtIdent(Box::new(fld.fold_ident(*id)), is_mod_name),\n         token::NtMeta(meta_item) => token::NtMeta(fld.fold_meta_item(meta_item)),\n-        token::NtPath(box path) => token::NtPath(box fld.fold_path(path)),\n+        token::NtPath(path) => token::NtPath(Box::new(fld.fold_path(*path))),\n         token::NtTT(tt) => token::NtTT(P(fld.fold_tt(&*tt))),\n     }\n }"}, {"sha": "99fb2798e7a3a77757ff0a5ce287697bac004298", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=a4541b02a33e7c4fdcc8f50459bad6ab99463919", "patch": "@@ -25,8 +25,6 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![feature(collections)]\n #![feature(core)]\n #![feature(libc)]"}, {"sha": "c078787120f9e433b78cbccee3d97f222f8eaaba", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=a4541b02a33e7c4fdcc8f50459bad6ab99463919", "patch": "@@ -288,7 +288,7 @@ pub fn filemap_to_tts(sess: &ParseSess, filemap: Rc<FileMap>)\n     // parsing tt's probably shouldn't require a parser at all.\n     let cfg = Vec::new();\n     let srdr = lexer::StringReader::new(&sess.span_diagnostic, filemap);\n-    let mut p1 = Parser::new(sess, cfg, box srdr);\n+    let mut p1 = Parser::new(sess, cfg, Box::new(srdr));\n     panictry!(p1.parse_all_token_trees())\n }\n \n@@ -297,7 +297,7 @@ pub fn tts_to_parser<'a>(sess: &'a ParseSess,\n                          tts: Vec<ast::TokenTree>,\n                          cfg: ast::CrateConfig) -> Parser<'a> {\n     let trdr = lexer::new_tt_reader(&sess.span_diagnostic, None, None, tts);\n-    let mut p = Parser::new(sess, cfg, box trdr);\n+    let mut p = Parser::new(sess, cfg, Box::new(trdr));\n     panictry!(p.check_unknown_macro_variable());\n     p\n }\n@@ -360,7 +360,7 @@ pub mod with_hygiene {\n         use super::lexer::make_reader_with_embedded_idents as make_reader;\n         let cfg = Vec::new();\n         let srdr = make_reader(&sess.span_diagnostic, filemap);\n-        let mut p1 = Parser::new(sess, cfg, box srdr);\n+        let mut p1 = Parser::new(sess, cfg, Box::new(srdr));\n         panictry!(p1.parse_all_token_trees())\n     }\n }"}, {"sha": "dd00ad313215d582598ca68c35e82c4d6b7b244e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a4541b02a33e7c4fdcc8f50459bad6ab99463919", "patch": "@@ -897,7 +897,7 @@ impl<'a> Parser<'a> {\n         self.last_span = self.span;\n         // Stash token for error recovery (sometimes; clone is not necessarily cheap).\n         self.last_token = if self.token.is_ident() || self.token.is_path() {\n-            Some(box self.token.clone())\n+            Some(Box::new(self.token.clone()))\n         } else {\n             None\n         };\n@@ -1578,8 +1578,8 @@ impl<'a> Parser<'a> {\n             token::Interpolated(token::NtPath(_)) => Some(try!(self.bump_and_get())),\n             _ => None,\n         };\n-        if let Some(token::Interpolated(token::NtPath(box path))) = found {\n-            return Ok(path);\n+        if let Some(token::Interpolated(token::NtPath(path))) = found {\n+            return Ok(*path);\n         }\n \n         let lo = self.span.lo;"}, {"sha": "1a5c295cdd6dbcceee618e81b2d3355ad534efc9", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a4541b02a33e7c4fdcc8f50459bad6ab99463919", "patch": "@@ -188,7 +188,7 @@ pub fn to_string<F>(f: F) -> String where\n     F: FnOnce(&mut State) -> io::Result<()>,\n {\n     use std::raw::TraitObject;\n-    let mut s = rust_printer(box Vec::new());\n+    let mut s = rust_printer(Box::new(Vec::new()));\n     f(&mut s).unwrap();\n     eof(&mut s.s).unwrap();\n     let wr = unsafe {"}, {"sha": "83e321f110c5875dfb39694307fbde3afd1f94f1", "filename": "src/libsyntax/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4541b02a33e7c4fdcc8f50459bad6ab99463919/src%2Flibsyntax%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fptr.rs?ref=a4541b02a33e7c4fdcc8f50459bad6ab99463919", "patch": "@@ -52,7 +52,7 @@ pub struct P<T> {\n /// Construct a `P<T>` from a `T` value.\n pub fn P<T: 'static>(value: T) -> P<T> {\n     P {\n-        ptr: box value\n+        ptr: Box::new(value)\n     }\n }\n "}]}