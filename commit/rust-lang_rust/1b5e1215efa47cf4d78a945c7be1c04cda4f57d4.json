{"sha": "1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "node_id": "C_kwDOAAsO6NoAKDFiNWUxMjE1ZWZhNDdjZjRkNzhhOTQ1YzdiZTFjMDRjZGE0ZjU3ZDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-25T16:39:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-25T16:39:37Z"}, "message": "Auto merge of #97401 - Dylan-DPC:rollup-fh9e61o, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #97302 (Do writeback of Closure params before visiting the parent expression)\n - #97328 (rustc: Fix ICE in native library error reporting)\n - #97351 (Output correct type responsible for structural match violation)\n - #97398 (Add regression test for #82830)\n - #97400 (Fix a typo on Struct `Substructure`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "87518ad71883196180f52cf48f026c88edec7bb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87518ad71883196180f52cf48f026c88edec7bb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "html_url": "https://github.com/rust-lang/rust/commit/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fed13030c2a2ebd79bfb1fd8be4f768cbe8c9d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fed13030c2a2ebd79bfb1fd8be4f768cbe8c9d9", "html_url": "https://github.com/rust-lang/rust/commit/9fed13030c2a2ebd79bfb1fd8be4f768cbe8c9d9"}, {"sha": "e98f8f8feffbb325e181020681599ee1ffa19ec4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e98f8f8feffbb325e181020681599ee1ffa19ec4", "html_url": "https://github.com/rust-lang/rust/commit/e98f8f8feffbb325e181020681599ee1ffa19ec4"}], "stats": {"total": 206, "additions": 164, "deletions": 42}, "files": [{"sha": "0832fdad8b87170ba643ce382511cfefee29d2a6", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "patch": "@@ -257,7 +257,7 @@ pub struct Substructure<'a> {\n     pub type_ident: Ident,\n     /// ident of the method\n     pub method_ident: Ident,\n-    /// dereferenced access to any [`Self_`] or [`Ptr(Self_, _)][ptr]` arguments\n+    /// dereferenced access to any [`Self_`] or [`Ptr(Self_, _)`][ptr] arguments\n     ///\n     /// [`Self_`]: ty::Ty::Self_\n     /// [ptr]: ty::Ty::Ptr"}, {"sha": "95892d8341479e64d6ca7cc84ae2fe9ad75599c2", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "patch": "@@ -418,10 +418,11 @@ impl<'tcx> Collector<'tcx> {\n                             // involved or not, library reordering and kind overriding without\n                             // explicit `:rename` in particular.\n                             if lib.has_modifiers() || passed_lib.has_modifiers() {\n-                                self.tcx.sess.span_err(\n-                                    self.tcx.def_span(lib.foreign_module.unwrap()),\n-                                    \"overriding linking modifiers from command line is not supported\"\n-                                );\n+                                let msg = \"overriding linking modifiers from command line is not supported\";\n+                                match lib.foreign_module {\n+                                    Some(def_id) => self.tcx.sess.span_err(self.tcx.def_span(def_id), msg),\n+                                    None => self.tcx.sess.err(msg),\n+                                };\n                             }\n                             if passed_lib.kind != NativeLibKind::Unspecified {\n                                 lib.kind = passed_lib.kind;"}, {"sha": "f694e009ab957c1ad8730734835d87891b9e07e6", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "patch": "@@ -121,27 +121,27 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n \n     fn search_for_structural_match_violation(&self, ty: Ty<'tcx>) -> Option<String> {\n         traits::search_for_structural_match_violation(self.span, self.tcx(), ty).map(|non_sm_ty| {\n-            with_no_trimmed_paths!(match non_sm_ty {\n-                traits::NonStructuralMatchTy::Adt(adt) => self.adt_derive_msg(adt),\n-                traits::NonStructuralMatchTy::Dynamic => {\n+            with_no_trimmed_paths!(match non_sm_ty.kind {\n+                traits::NonStructuralMatchTyKind::Adt(adt) => self.adt_derive_msg(adt),\n+                traits::NonStructuralMatchTyKind::Dynamic => {\n                     \"trait objects cannot be used in patterns\".to_string()\n                 }\n-                traits::NonStructuralMatchTy::Opaque => {\n+                traits::NonStructuralMatchTyKind::Opaque => {\n                     \"opaque types cannot be used in patterns\".to_string()\n                 }\n-                traits::NonStructuralMatchTy::Closure => {\n+                traits::NonStructuralMatchTyKind::Closure => {\n                     \"closures cannot be used in patterns\".to_string()\n                 }\n-                traits::NonStructuralMatchTy::Generator => {\n+                traits::NonStructuralMatchTyKind::Generator => {\n                     \"generators cannot be used in patterns\".to_string()\n                 }\n-                traits::NonStructuralMatchTy::Param => {\n+                traits::NonStructuralMatchTyKind::Param => {\n                     bug!(\"use of a constant whose type is a parameter inside a pattern\")\n                 }\n-                traits::NonStructuralMatchTy::Projection => {\n+                traits::NonStructuralMatchTyKind::Projection => {\n                     bug!(\"use of a constant whose type is a projection inside a pattern\")\n                 }\n-                traits::NonStructuralMatchTy::Foreign => {\n+                traits::NonStructuralMatchTyKind::Foreign => {\n                     bug!(\"use of a value of a foreign type inside a pattern\")\n                 }\n             })"}, {"sha": "dcfdff68640dd08d5f69b14b23c3929bdeaa6a02", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "patch": "@@ -62,7 +62,7 @@ pub use self::specialize::specialization_graph::FutureCompatOverlapError;\n pub use self::specialize::specialization_graph::FutureCompatOverlapErrorKind;\n pub use self::specialize::{specialization_graph, translate_substs, OverlapError};\n pub use self::structural_match::search_for_structural_match_violation;\n-pub use self::structural_match::NonStructuralMatchTy;\n+pub use self::structural_match::{NonStructuralMatchTy, NonStructuralMatchTyKind};\n pub use self::util::{\n     elaborate_obligations, elaborate_predicates, elaborate_predicates_with_span,\n     elaborate_trait_ref, elaborate_trait_refs,"}, {"sha": "5465395768c6bad831576e9d2d8a3562a185df6a", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "patch": "@@ -11,7 +11,13 @@ use rustc_span::Span;\n use std::ops::ControlFlow;\n \n #[derive(Debug)]\n-pub enum NonStructuralMatchTy<'tcx> {\n+pub struct NonStructuralMatchTy<'tcx> {\n+    pub ty: Ty<'tcx>,\n+    pub kind: NonStructuralMatchTyKind<'tcx>,\n+}\n+\n+#[derive(Debug)]\n+pub enum NonStructuralMatchTyKind<'tcx> {\n     Adt(AdtDef<'tcx>),\n     Param,\n     Dynamic,\n@@ -137,25 +143,32 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n         let (adt_def, substs) = match *ty.kind() {\n             ty::Adt(adt_def, substs) => (adt_def, substs),\n             ty::Param(_) => {\n-                return ControlFlow::Break(NonStructuralMatchTy::Param);\n+                let kind = NonStructuralMatchTyKind::Param;\n+                return ControlFlow::Break(NonStructuralMatchTy { ty, kind });\n             }\n             ty::Dynamic(..) => {\n-                return ControlFlow::Break(NonStructuralMatchTy::Dynamic);\n+                let kind = NonStructuralMatchTyKind::Dynamic;\n+                return ControlFlow::Break(NonStructuralMatchTy { ty, kind });\n             }\n             ty::Foreign(_) => {\n-                return ControlFlow::Break(NonStructuralMatchTy::Foreign);\n+                let kind = NonStructuralMatchTyKind::Foreign;\n+                return ControlFlow::Break(NonStructuralMatchTy { ty, kind });\n             }\n             ty::Opaque(..) => {\n-                return ControlFlow::Break(NonStructuralMatchTy::Opaque);\n+                let kind = NonStructuralMatchTyKind::Opaque;\n+                return ControlFlow::Break(NonStructuralMatchTy { ty, kind });\n             }\n             ty::Projection(..) => {\n-                return ControlFlow::Break(NonStructuralMatchTy::Projection);\n+                let kind = NonStructuralMatchTyKind::Projection;\n+                return ControlFlow::Break(NonStructuralMatchTy { ty, kind });\n             }\n             ty::Closure(..) => {\n-                return ControlFlow::Break(NonStructuralMatchTy::Closure);\n+                let kind = NonStructuralMatchTyKind::Closure;\n+                return ControlFlow::Break(NonStructuralMatchTy { ty, kind });\n             }\n             ty::Generator(..) | ty::GeneratorWitness(..) => {\n-                return ControlFlow::Break(NonStructuralMatchTy::Generator);\n+                let kind = NonStructuralMatchTyKind::Generator;\n+                return ControlFlow::Break(NonStructuralMatchTy { ty, kind });\n             }\n             ty::RawPtr(..) => {\n                 // structural-match ignores substructure of\n@@ -215,7 +228,8 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n \n         if !self.type_marked_structural(ty) {\n             debug!(\"Search found ty: {:?}\", ty);\n-            return ControlFlow::Break(NonStructuralMatchTy::Adt(adt_def));\n+            let kind = NonStructuralMatchTyKind::Adt(adt_def);\n+            return ControlFlow::Break(NonStructuralMatchTy { ty, kind });\n         }\n \n         // structural-match does not care about the"}, {"sha": "5c0c5b24ecd996398a548da82d7e9fd3b2d7cdbf", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "patch": "@@ -827,7 +827,9 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n                     );\n                 }\n \n-                if traits::search_for_structural_match_violation(param.span, tcx, ty).is_some() {\n+                if let Some(non_structural_match_ty) =\n+                    traits::search_for_structural_match_violation(param.span, tcx, ty)\n+                {\n                     // We use the same error code in both branches, because this is really the same\n                     // issue: we just special-case the message for type parameters to make it\n                     // clearer.\n@@ -853,19 +855,23 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n                         )\n                         .emit();\n                     } else {\n-                        struct_span_err!(\n+                        let mut diag = struct_span_err!(\n                             tcx.sess,\n                             hir_ty.span,\n                             E0741,\n                             \"`{}` must be annotated with `#[derive(PartialEq, Eq)]` to be used as \\\n                             the type of a const parameter\",\n-                            ty,\n-                        )\n-                        .span_label(\n-                            hir_ty.span,\n-                            format!(\"`{ty}` doesn't derive both `PartialEq` and `Eq`\"),\n-                        )\n-                        .emit();\n+                            non_structural_match_ty.ty,\n+                        );\n+\n+                        if ty == non_structural_match_ty.ty {\n+                            diag.span_label(\n+                                hir_ty.span,\n+                                format!(\"`{ty}` doesn't derive both `PartialEq` and `Eq`\"),\n+                            );\n+                        }\n+\n+                        diag.emit();\n                     }\n                 }\n             } else {"}, {"sha": "4fe5b26dc05a56d816c3216f3d913e780c1e1819", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "patch": "@@ -263,8 +263,6 @@ impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n         self.fix_scalar_builtin_expr(e);\n         self.fix_index_builtin_expr(e);\n \n-        self.visit_node_id(e.span, e.hir_id);\n-\n         match e.kind {\n             hir::ExprKind::Closure(_, _, body, _, _) => {\n                 let body = self.fcx.tcx.hir().body(body);\n@@ -291,6 +289,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n             _ => {}\n         }\n \n+        self.visit_node_id(e.span, e.hir_id);\n         intravisit::walk_expr(self, e);\n     }\n "}, {"sha": "16fabd1e88fd0848a5c744c1b22ab390d691b69c", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.full.stderr?ref=1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "patch": "@@ -1,8 +1,8 @@\n-error[E0741]: `&'static (dyn A + 'static)` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n+error[E0741]: `(dyn A + 'static)` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n   --> $DIR/issue-63322-forbid-dyn.rs:9:18\n    |\n LL | fn test<const T: &'static dyn A>() {\n-   |                  ^^^^^^^^^^^^^^ `&'static (dyn A + 'static)` doesn't derive both `PartialEq` and `Eq`\n+   |                  ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "da0a9776fd40f976c87a823519a619a363a7aa4a", "filename": "src/test/ui/const-generics/issues/issue-97278.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-97278.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-97278.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-97278.rs?ref=1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "patch": "@@ -0,0 +1,14 @@\n+#![feature(adt_const_params)]\n+#![allow(incomplete_features)]\n+\n+use std::sync::Arc;\n+\n+#[derive(PartialEq, Eq)]\n+enum Bar {\n+    Bar(Arc<i32>)\n+}\n+\n+fn test<const BAR: Bar>() {}\n+//~^ ERROR `Arc<i32>` must be annotated with `#[derive(PartialEq, Eq)]`\n+\n+fn main() {}"}, {"sha": "ff13cb505ab9b302892096d5d5e27b20a5d1d105", "filename": "src/test/ui/const-generics/issues/issue-97278.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-97278.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-97278.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-97278.stderr?ref=1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "patch": "@@ -0,0 +1,9 @@\n+error[E0741]: `Arc<i32>` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n+  --> $DIR/issue-97278.rs:11:20\n+   |\n+LL | fn test<const BAR: Bar>() {}\n+   |                    ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0741`."}, {"sha": "b28c53c6b0a5011d0cb6e692133dafdf241f6f14", "filename": "src/test/ui/native-library-link-flags/modifiers-override-3.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override-3.rs?ref=1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "patch": "@@ -0,0 +1,7 @@\n+// Regression test for issue #97299, one command line library with modifiers\n+// overrides another command line library with modifiers.\n+\n+// compile-flags:-lstatic:+whole-archive=foo -lstatic:+whole-archive=foo\n+// error-pattern: overriding linking modifiers from command line is not supported\n+\n+fn main() {}"}, {"sha": "365e561810017548e2a5afe823957b2b94f595e8", "filename": "src/test/ui/native-library-link-flags/modifiers-override-3.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override-3.stderr?ref=1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "patch": "@@ -0,0 +1,4 @@\n+error: overriding linking modifiers from command line is not supported\n+\n+error: aborting due to previous error\n+"}, {"sha": "c8289b2e30b4d41e1c35eeb2ea43a55b3ec34b99", "filename": "src/test/ui/traits/issue-82830.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/src%2Ftest%2Fui%2Ftraits%2Fissue-82830.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/src%2Ftest%2Fui%2Ftraits%2Fissue-82830.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-82830.rs?ref=1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "patch": "@@ -0,0 +1,16 @@\n+trait A<Y, N> {\n+    type B;\n+}\n+\n+type MaybeBox<T> = <T as A<T, Box<T>>>::B;\n+struct P {\n+    t: MaybeBox<P>, //~ ERROR: overflow evaluating the requirement `P: Sized`\n+}\n+\n+impl<Y, N> A<Y, N> for P {\n+    type B = N;\n+}\n+\n+fn main() {\n+    let t: MaybeBox<P>;\n+}"}, {"sha": "f863143c738879f8cf9a7c2858cffe2077a21717", "filename": "src/test/ui/traits/issue-82830.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/src%2Ftest%2Fui%2Ftraits%2Fissue-82830.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/src%2Ftest%2Fui%2Ftraits%2Fissue-82830.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-82830.stderr?ref=1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "patch": "@@ -0,0 +1,15 @@\n+error[E0275]: overflow evaluating the requirement `P: Sized`\n+  --> $DIR/issue-82830.rs:7:8\n+   |\n+LL |     t: MaybeBox<P>,\n+   |        ^^^^^^^^^^^\n+   |\n+note: required because of the requirements on the impl of `A<P, Box<P>>` for `P`\n+  --> $DIR/issue-82830.rs:10:12\n+   |\n+LL | impl<Y, N> A<Y, N> for P {\n+   |            ^^^^^^^     ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "0089d86e340f141d055b977655452c0706f6f59b", "filename": "src/test/ui/type/type-check/unknown_type_for_closure.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.rs?ref=1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "patch": "@@ -1,3 +1,17 @@\n-fn main() {\n-    let x = |_| {    }; //~ ERROR type annotations needed\n+fn infer_in_arg() {\n+    let x = |b: Vec<_>| {}; //~ ERROR E0282\n }\n+\n+fn empty_pattern() {\n+    let x = |_| {}; //~ ERROR type annotations needed\n+}\n+\n+fn infer_ty() {\n+    let x = |k: _| {}; //~ ERROR type annotations needed\n+}\n+\n+fn ambig_return() {\n+    let x = || -> Vec<_> { Vec::new() }; //~ ERROR type annotations needed for the closure `fn() -> Vec<_>`\n+}\n+\n+fn main() {}"}, {"sha": "c3accad5f25d9273de7bb8230a39bff568a8d619", "filename": "src/test/ui/type/type-check/unknown_type_for_closure.stderr", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b5e1215efa47cf4d78a945c7be1c04cda4f57d4/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.stderr?ref=1b5e1215efa47cf4d78a945c7be1c04cda4f57d4", "patch": "@@ -1,9 +1,32 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `Vec<_>`\n   --> $DIR/unknown_type_for_closure.rs:2:14\n    |\n-LL |     let x = |_| {    };\n+LL |     let x = |b: Vec<_>| {};\n    |              ^ consider giving this closure parameter a type\n \n-error: aborting due to previous error\n+error[E0282]: type annotations needed\n+  --> $DIR/unknown_type_for_closure.rs:6:14\n+   |\n+LL |     let x = |_| {};\n+   |              ^ consider giving this closure parameter a type\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/unknown_type_for_closure.rs:10:14\n+   |\n+LL |     let x = |k: _| {};\n+   |              ^ consider giving this closure parameter a type\n+\n+error[E0282]: type annotations needed for the closure `fn() -> Vec<_>`\n+  --> $DIR/unknown_type_for_closure.rs:14:28\n+   |\n+LL |     let x = || -> Vec<_> { Vec::new() };\n+   |                            ^^^^^^^^ cannot infer type for type parameter `T`\n+   |\n+help: give this closure an explicit return type without `_` placeholders\n+   |\n+LL |     let x = || -> Vec<_> { Vec::new() };\n+   |                   ~~~~~~\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0282`."}]}