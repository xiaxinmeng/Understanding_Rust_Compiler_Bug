{"sha": "c45871ba02430c3af6453d5636f8ad0afb7eb35f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NTg3MWJhMDI0MzBjM2FmNjQ1M2Q1NjM2ZjhhZDBhZmI3ZWIzNWY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-11-06T00:27:28Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-11-23T23:37:31Z"}, "message": "Keep label on moved spans and point at macro invocation on parse error", "tree": {"sha": "49b8c1951ef8b2bd5207fe9385d7792299a4a7dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49b8c1951ef8b2bd5207fe9385d7792299a4a7dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c45871ba02430c3af6453d5636f8ad0afb7eb35f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c45871ba02430c3af6453d5636f8ad0afb7eb35f", "html_url": "https://github.com/rust-lang/rust/commit/c45871ba02430c3af6453d5636f8ad0afb7eb35f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c45871ba02430c3af6453d5636f8ad0afb7eb35f/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76449d86c0c0b85ff93912a450012f2ece16c3d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/76449d86c0c0b85ff93912a450012f2ece16c3d4", "html_url": "https://github.com/rust-lang/rust/commit/76449d86c0c0b85ff93912a450012f2ece16c3d4"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "ea425ad4c47a2ebea226537431beccb681f18adc", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c45871ba02430c3af6453d5636f8ad0afb7eb35f/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45871ba02430c3af6453d5636f8ad0afb7eb35f/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=c45871ba02430c3af6453d5636f8ad0afb7eb35f", "patch": "@@ -139,6 +139,17 @@ impl Diagnostic {\n         self\n     }\n \n+    pub fn replace_span_with(&mut self, after: Span) -> &mut Self {\n+        let before = self.span.clone();\n+        self.set_span(after);\n+        for span_label in before.span_labels() {\n+            if let Some(label) = span_label.label {\n+                self.span_label(after, label);\n+            }\n+        }\n+        self\n+    }\n+\n     pub fn note_expected_found(&mut self,\n                                label: &dyn fmt::Display,\n                                expected: DiagnosticStyledString,"}, {"sha": "9f3a80b115161cd13b54b5da672e4381d1fa7679", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c45871ba02430c3af6453d5636f8ad0afb7eb35f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45871ba02430c3af6453d5636f8ad0afb7eb35f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=c45871ba02430c3af6453d5636f8ad0afb7eb35f", "patch": "@@ -53,20 +53,24 @@ impl<'a> ParserAnyMacro<'a> {\n     pub fn make(mut self: Box<ParserAnyMacro<'a>>, kind: AstFragmentKind) -> AstFragment {\n         let ParserAnyMacro { site_span, macro_ident, ref mut parser, arm_span } = *self;\n         let fragment = panictry!(parser.parse_ast_fragment(kind, true).map_err(|mut e| {\n-            if e.span.is_dummy() {  // Get around lack of span in error (#30128)\n-                e.set_span(site_span);\n-                e.span_label(site_span, \"in this macro expansion\");\n-                e.span_label(arm_span, \"in this macro arm\");\n-            } else if parser.token == token::Eof {  // (#52866)\n-                e.set_span(parser.sess.source_map().next_point(parser.span));\n-            }\n-            if parser.token == token::Eof {\n+            if parser.token == token::Eof && e.message().ends_with(\", found `<eof>`\") {\n+                if !e.span.is_dummy() {  // early end of macro arm (#52866)\n+                    e.replace_span_with(parser.sess.source_map().next_point(parser.span));\n+                }\n                 let msg = &e.message[0];\n                 e.message[0] = (\n                     msg.0.replace(\", found `<eof>`\", \", found the end of the macro arm\"),\n                     msg.1,\n                 );\n             }\n+            if e.span.is_dummy() {  // Get around lack of span in error (#30128)\n+                e.replace_span_with(site_span);\n+                if parser.sess.source_map().span_to_filename(arm_span).is_real() {\n+                    e.span_label(arm_span, \"in this macro arm\");\n+                }\n+            } else if !parser.sess.source_map().span_to_filename(parser.span).is_real() {\n+                e.span_label(site_span, \"in this macro invocation\");\n+            }\n             e\n         }));\n "}, {"sha": "59ebc94f6decec7bffe00059e08644df377acc72", "filename": "src/test/ui/directory_ownership/macro-expanded-mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c45871ba02430c3af6453d5636f8ad0afb7eb35f/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45871ba02430c3af6453d5636f8ad0afb7eb35f/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.rs?ref=c45871ba02430c3af6453d5636f8ad0afb7eb35f", "patch": "@@ -12,7 +12,6 @@\n \n macro_rules! mod_decl {\n     ($i:ident) => { mod $i; }\n-    //~^ ERROR Cannot declare a non-inline module inside a block\n }\n \n mod macro_expanded_mod_helper {\n@@ -21,4 +20,5 @@ mod macro_expanded_mod_helper {\n \n fn main() {\n     mod_decl!(foo);\n+    //~^ ERROR Cannot declare a non-inline module inside a block\n }"}, {"sha": "43bf720083d84f25eddbcfaf72f44bf7e5a93af0", "filename": "src/test/ui/directory_ownership/macro-expanded-mod.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c45871ba02430c3af6453d5636f8ad0afb7eb35f/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c45871ba02430c3af6453d5636f8ad0afb7eb35f/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.stderr?ref=c45871ba02430c3af6453d5636f8ad0afb7eb35f", "patch": "@@ -1,8 +1,8 @@\n error: Cannot declare a non-inline module inside a block unless it has a path attribute\n-  --> $DIR/macro-expanded-mod.rs:14:28\n+  --> $DIR/macro-expanded-mod.rs:22:15\n    |\n-LL |     ($i:ident) => { mod $i; }\n-   |                            ^\n+LL |     mod_decl!(foo);\n+   |               ^^^\n \n error: aborting due to previous error\n "}, {"sha": "943183814f73ffbe4f74aeba586fa77e8e565d72", "filename": "src/test/ui/editions/edition-keywords-2018-2015-parsing.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c45871ba02430c3af6453d5636f8ad0afb7eb35f/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c45871ba02430c3af6453d5636f8ad0afb7eb35f/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr?ref=c45871ba02430c3af6453d5636f8ad0afb7eb35f", "patch": "@@ -26,7 +26,12 @@ error: expected one of `move`, `|`, or `||`, found the end of the macro arm\n   --> <::edition_kw_macro_2015::passes_ident macros>:1:25\n    |\n LL | ( $ i : ident ) => ( $ i )\n-   |                         ^\n+   |                         ^ expected one of `move`, `|`, or `||` here\n+   | \n+  ::: $DIR/edition-keywords-2018-2015-parsing.rs:26:8\n+   |\n+LL |     if passes_ident!(async) == 1 {}\n+   |        -------------------- in this macro invocation\n \n error: aborting due to 5 previous errors\n "}, {"sha": "e7379988892b687a3cee5339fe0453e8d2ddc634", "filename": "src/test/ui/editions/edition-keywords-2018-2018-parsing.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c45871ba02430c3af6453d5636f8ad0afb7eb35f/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c45871ba02430c3af6453d5636f8ad0afb7eb35f/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr?ref=c45871ba02430c3af6453d5636f8ad0afb7eb35f", "patch": "@@ -26,7 +26,12 @@ error: expected one of `move`, `|`, or `||`, found the end of the macro arm\n   --> <::edition_kw_macro_2018::passes_ident macros>:1:25\n    |\n LL | ( $ i : ident ) => ( $ i )\n-   |                         ^\n+   |                         ^ expected one of `move`, `|`, or `||` here\n+   | \n+  ::: $DIR/edition-keywords-2018-2018-parsing.rs:26:8\n+   |\n+LL |     if passes_ident!(async) == 1 {}\n+   |        -------------------- in this macro invocation\n \n error: aborting due to 5 previous errors\n "}, {"sha": "f6e6ecf112a3bbdabe5b216441228b77d3073f9c", "filename": "src/test/ui/macros/macro-in-expression-context-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c45871ba02430c3af6453d5636f8ad0afb7eb35f/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c45871ba02430c3af6453d5636f8ad0afb7eb35f/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.stderr?ref=c45871ba02430c3af6453d5636f8ad0afb7eb35f", "patch": "@@ -5,7 +5,7 @@ LL | macro_rules! empty { () => () }\n    |                            -- in this macro arm\n ...\n LL |         _ => { empty!() }\n-   |                ^^^^^^^^ in this macro expansion\n+   |                ^^^^^^^^ expected expression\n \n error: aborting due to previous error\n "}]}