{"sha": "f44b7aa81eca5916a165f571b4621a9ec1dd22fb", "node_id": "C_kwDOAAsO6NoAKGY0NGI3YWE4MWVjYTU5MTZhMTY1ZjU3MWI0NjIxYTllYzFkZDIyZmI", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-11-29T04:30:56Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-11-29T04:58:02Z"}, "message": "Don't lint `unnecessary_cast` in mixed macro context", "tree": {"sha": "af3f7f1f6f8a2cb15639875156829191bf2ca517", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af3f7f1f6f8a2cb15639875156829191bf2ca517"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f44b7aa81eca5916a165f571b4621a9ec1dd22fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f44b7aa81eca5916a165f571b4621a9ec1dd22fb", "html_url": "https://github.com/rust-lang/rust/commit/f44b7aa81eca5916a165f571b4621a9ec1dd22fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f44b7aa81eca5916a165f571b4621a9ec1dd22fb/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12074808c7a5a2fd9005ed228d9347e9e57f72dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/12074808c7a5a2fd9005ed228d9347e9e57f72dd", "html_url": "https://github.com/rust-lang/rust/commit/12074808c7a5a2fd9005ed228d9347e9e57f72dd"}], "stats": {"total": 77, "additions": 54, "deletions": 23}, "files": [{"sha": "ecc8a8de97b930cd25c365c2dbddc20e8b8d82c3", "filename": "clippy_lints/src/casts/unnecessary_cast.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f44b7aa81eca5916a165f571b4621a9ec1dd22fb/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f44b7aa81eca5916a165f571b4621a9ec1dd22fb/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs?ref=f44b7aa81eca5916a165f571b4621a9ec1dd22fb", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::get_parent_expr;\n use clippy_utils::numeric_literal::NumericLiteral;\n use clippy_utils::source::snippet_opt;\n+use clippy_utils::{get_parent_expr, path_to_local};\n use if_chain::if_chain;\n use rustc_ast::{LitFloatType, LitIntType, LitKind};\n use rustc_errors::Applicability;\n@@ -75,6 +75,15 @@ pub(super) fn check<'tcx>(\n     }\n \n     if cast_from.kind() == cast_to.kind() && !in_external_macro(cx.sess(), expr.span) {\n+        if let Some(id) = path_to_local(cast_expr)\n+            && let Some(span) = cx.tcx.hir().opt_span(id)\n+            && span.ctxt() != cast_expr.span.ctxt()\n+        {\n+            // Binding context is different than the identifiers context.\n+            // Weird macro wizardry could be involved here.\n+            return false;\n+        }\n+\n         span_lint_and_sugg(\n             cx,\n             UNNECESSARY_CAST,"}, {"sha": "f234d4473c3e9b12bdd9239dea28ede9ef6acd17", "filename": "tests/ui/unnecessary_cast.fixed", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f44b7aa81eca5916a165f571b4621a9ec1dd22fb/tests%2Fui%2Funnecessary_cast.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f44b7aa81eca5916a165f571b4621a9ec1dd22fb/tests%2Fui%2Funnecessary_cast.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast.fixed?ref=f44b7aa81eca5916a165f571b4621a9ec1dd22fb", "patch": "@@ -41,6 +41,17 @@ fn main() {\n     // do not lint cast to alias type\n     1 as I32Alias;\n     &1 as &I32Alias;\n+\n+    // issue #9960\n+    macro_rules! bind_var {\n+        ($id:ident, $e:expr) => {{\n+            let $id = 0usize;\n+            let _ = $e != 0usize;\n+            let $id = 0isize;\n+            let _ = $e != 0usize;\n+        }}\n+    }\n+    bind_var!(x, (x as usize) + 1);\n }\n \n type I32Alias = i32;"}, {"sha": "855a4efa03411e033bb972e2e2ddba2ae126483c", "filename": "tests/ui/unnecessary_cast.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f44b7aa81eca5916a165f571b4621a9ec1dd22fb/tests%2Fui%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f44b7aa81eca5916a165f571b4621a9ec1dd22fb/tests%2Fui%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast.rs?ref=f44b7aa81eca5916a165f571b4621a9ec1dd22fb", "patch": "@@ -41,6 +41,17 @@ fn main() {\n     // do not lint cast to alias type\n     1 as I32Alias;\n     &1 as &I32Alias;\n+\n+    // issue #9960\n+    macro_rules! bind_var {\n+        ($id:ident, $e:expr) => {{\n+            let $id = 0usize;\n+            let _ = $e != 0usize;\n+            let $id = 0isize;\n+            let _ = $e != 0usize;\n+        }}\n+    }\n+    bind_var!(x, (x as usize) + 1);\n }\n \n type I32Alias = i32;"}, {"sha": "934db0e86e662539b4e158c55d61696ae8ba4935", "filename": "tests/ui/unnecessary_cast.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f44b7aa81eca5916a165f571b4621a9ec1dd22fb/tests%2Fui%2Funnecessary_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44b7aa81eca5916a165f571b4621a9ec1dd22fb/tests%2Fui%2Funnecessary_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast.stderr?ref=f44b7aa81eca5916a165f571b4621a9ec1dd22fb", "patch": "@@ -49,133 +49,133 @@ LL |     1_f32 as f32;\n    |     ^^^^^^^^^^^^ help: try: `1_f32`\n \n error: casting integer literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:53:9\n+  --> $DIR/unnecessary_cast.rs:64:9\n    |\n LL |         100 as f32;\n    |         ^^^^^^^^^^ help: try: `100_f32`\n \n error: casting integer literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:54:9\n+  --> $DIR/unnecessary_cast.rs:65:9\n    |\n LL |         100 as f64;\n    |         ^^^^^^^^^^ help: try: `100_f64`\n \n error: casting integer literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:55:9\n+  --> $DIR/unnecessary_cast.rs:66:9\n    |\n LL |         100_i32 as f64;\n    |         ^^^^^^^^^^^^^^ help: try: `100_f64`\n \n error: casting integer literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:56:17\n+  --> $DIR/unnecessary_cast.rs:67:17\n    |\n LL |         let _ = -100 as f32;\n    |                 ^^^^^^^^^^^ help: try: `-100_f32`\n \n error: casting integer literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:57:17\n+  --> $DIR/unnecessary_cast.rs:68:17\n    |\n LL |         let _ = -100 as f64;\n    |                 ^^^^^^^^^^^ help: try: `-100_f64`\n \n error: casting integer literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:58:17\n+  --> $DIR/unnecessary_cast.rs:69:17\n    |\n LL |         let _ = -100_i32 as f64;\n    |                 ^^^^^^^^^^^^^^^ help: try: `-100_f64`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:59:9\n+  --> $DIR/unnecessary_cast.rs:70:9\n    |\n LL |         100. as f32;\n    |         ^^^^^^^^^^^ help: try: `100_f32`\n \n error: casting float literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:60:9\n+  --> $DIR/unnecessary_cast.rs:71:9\n    |\n LL |         100. as f64;\n    |         ^^^^^^^^^^^ help: try: `100_f64`\n \n error: casting integer literal to `u32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:72:9\n+  --> $DIR/unnecessary_cast.rs:83:9\n    |\n LL |         1 as u32;\n    |         ^^^^^^^^ help: try: `1_u32`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:73:9\n+  --> $DIR/unnecessary_cast.rs:84:9\n    |\n LL |         0x10 as i32;\n    |         ^^^^^^^^^^^ help: try: `0x10_i32`\n \n error: casting integer literal to `usize` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:74:9\n+  --> $DIR/unnecessary_cast.rs:85:9\n    |\n LL |         0b10 as usize;\n    |         ^^^^^^^^^^^^^ help: try: `0b10_usize`\n \n error: casting integer literal to `u16` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:75:9\n+  --> $DIR/unnecessary_cast.rs:86:9\n    |\n LL |         0o73 as u16;\n    |         ^^^^^^^^^^^ help: try: `0o73_u16`\n \n error: casting integer literal to `u32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:76:9\n+  --> $DIR/unnecessary_cast.rs:87:9\n    |\n LL |         1_000_000_000 as u32;\n    |         ^^^^^^^^^^^^^^^^^^^^ help: try: `1_000_000_000_u32`\n \n error: casting float literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:78:9\n+  --> $DIR/unnecessary_cast.rs:89:9\n    |\n LL |         1.0 as f64;\n    |         ^^^^^^^^^^ help: try: `1.0_f64`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:79:9\n+  --> $DIR/unnecessary_cast.rs:90:9\n    |\n LL |         0.5 as f32;\n    |         ^^^^^^^^^^ help: try: `0.5_f32`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:83:17\n+  --> $DIR/unnecessary_cast.rs:94:17\n    |\n LL |         let _ = -1 as i32;\n    |                 ^^^^^^^^^ help: try: `-1_i32`\n \n error: casting float literal to `f32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:84:17\n+  --> $DIR/unnecessary_cast.rs:95:17\n    |\n LL |         let _ = -1.0 as f32;\n    |                 ^^^^^^^^^^^ help: try: `-1.0_f32`\n \n error: casting integer literal to `i32` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:93:22\n+  --> $DIR/unnecessary_cast.rs:104:22\n    |\n LL |         let _: i32 = -(1) as i32;\n    |                      ^^^^^^^^^^^ help: try: `-1_i32`\n \n error: casting integer literal to `i64` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:95:22\n+  --> $DIR/unnecessary_cast.rs:106:22\n    |\n LL |         let _: i64 = -(1) as i64;\n    |                      ^^^^^^^^^^^ help: try: `-1_i64`\n \n error: casting float literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:102:22\n+  --> $DIR/unnecessary_cast.rs:113:22\n    |\n LL |         let _: f64 = (-8.0 as f64).exp();\n    |                      ^^^^^^^^^^^^^ help: try: `(-8.0_f64)`\n \n error: casting float literal to `f64` is unnecessary\n-  --> $DIR/unnecessary_cast.rs:104:23\n+  --> $DIR/unnecessary_cast.rs:115:23\n    |\n LL |         let _: f64 = -(8.0 as f64).exp(); // should suggest `-8.0_f64.exp()` here not to change code behavior\n    |                       ^^^^^^^^^^^^ help: try: `8.0_f64`\n \n error: casting to the same type is unnecessary (`f32` -> `f32`)\n-  --> $DIR/unnecessary_cast.rs:112:20\n+  --> $DIR/unnecessary_cast.rs:123:20\n    |\n LL |         let _num = foo() as f32;\n    |                    ^^^^^^^^^^^^ help: try: `foo()`"}]}