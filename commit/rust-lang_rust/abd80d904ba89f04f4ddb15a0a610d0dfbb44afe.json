{"sha": "abd80d904ba89f04f4ddb15a0a610d0dfbb44afe", "node_id": "C_kwDOAAsO6NoAKGFiZDgwZDkwNGJhODlmMDRmNGRkYjE1YTBhNjEwZDBkZmJiNDRhZmU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-31T01:39:15Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-31T12:23:27Z"}, "message": "reorder fields in Laout debug output", "tree": {"sha": "edf03ae81c7a6cb3438c3774778b8460c24af09d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edf03ae81c7a6cb3438c3774778b8460c24af09d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abd80d904ba89f04f4ddb15a0a610d0dfbb44afe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abd80d904ba89f04f4ddb15a0a610d0dfbb44afe", "html_url": "https://github.com/rust-lang/rust/commit/abd80d904ba89f04f4ddb15a0a610d0dfbb44afe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abd80d904ba89f04f4ddb15a0a610d0dfbb44afe/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98e52c2a273c923a4e43eeee6a0c3d1a6d91dbce", "url": "https://api.github.com/repos/rust-lang/rust/commits/98e52c2a273c923a4e43eeee6a0c3d1a6d91dbce", "html_url": "https://github.com/rust-lang/rust/commit/98e52c2a273c923a4e43eeee6a0c3d1a6d91dbce"}], "stats": {"total": 1853, "additions": 927, "deletions": 926}, "files": [{"sha": "d4d5674e246d86f0a5e68bfa71e552d1c069d1ad", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/abd80d904ba89f04f4ddb15a0a610d0dfbb44afe/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd80d904ba89f04f4ddb15a0a610d0dfbb44afe/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=abd80d904ba89f04f4ddb15a0a610d0dfbb44afe", "patch": "@@ -1279,13 +1279,14 @@ impl<'a> fmt::Debug for LayoutS<'a> {\n         // This is how `Layout` used to print before it become\n         // `Interned<LayoutS>`. We print it like this to avoid having to update\n         // expected output in a lot of tests.\n+        let LayoutS { size, align, abi, fields, largest_niche, variants } = self;\n         f.debug_struct(\"Layout\")\n-            .field(\"fields\", &self.fields)\n-            .field(\"variants\", &self.variants)\n-            .field(\"abi\", &self.abi)\n-            .field(\"largest_niche\", &self.largest_niche)\n-            .field(\"align\", &self.align)\n-            .field(\"size\", &self.size)\n+            .field(\"size\", size)\n+            .field(\"align\", align)\n+            .field(\"abi\", abi)\n+            .field(\"fields\", fields)\n+            .field(\"largest_niche\", largest_niche)\n+            .field(\"variants\", variants)\n             .finish()\n     }\n }"}, {"sha": "c5e1c41d1304c0515dd3ad359e8963754a4fefbe", "filename": "src/test/ui/layout/debug.stderr", "status": "modified", "additions": 121, "deletions": 121, "changes": 242, "blob_url": "https://github.com/rust-lang/rust/blob/abd80d904ba89f04f4ddb15a0a610d0dfbb44afe/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd80d904ba89f04f4ddb15a0a610d0dfbb44afe/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr?ref=abd80d904ba89f04f4ddb15a0a610d0dfbb44afe", "patch": "@@ -1,4 +1,12 @@\n error: layout_of(E) = Layout {\n+           size: Size(12 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(4 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n+           abi: Aggregate {\n+               sized: true,\n+           },\n            fields: Arbitrary {\n                offsets: [\n                    Size(0 bytes),\n@@ -7,6 +15,16 @@ error: layout_of(E) = Layout {\n                    0,\n                ],\n            },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 0..=0,\n+               },\n+           ),\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -19,24 +37,30 @@ error: layout_of(E) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n+                       size: Size(4 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(1 bytes),\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [],\n                            memory_index: [],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 0,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n+                   },\n+                   Layout {\n+                       size: Size(12 bytes),\n                        align: AbiAndPrefAlign {\n-                           abi: Align(1 bytes),\n+                           abi: Align(4 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size(4 bytes),\n-                   },\n-                   Layout {\n+                       abi: Uninhabited,\n                        fields: Arbitrary {\n                            offsets: [\n                                Size(4 bytes),\n@@ -49,58 +73,24 @@ error: layout_of(E) = Layout {\n                                2,\n                            ],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 1,\n                        },\n-                       abi: Uninhabited,\n-                       largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(4 bytes),\n-                           pref: $PREF_ALIGN,\n-                       },\n-                       size: Size(12 bytes),\n                    },\n                ],\n            },\n-           abi: Aggregate {\n-               sized: true,\n-           },\n-           largest_niche: Some(\n-               Niche {\n-                   offset: Size(0 bytes),\n-                   value: Int(\n-                       I32,\n-                       false,\n-                   ),\n-                   valid_range: 0..=0,\n-               },\n-           ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(4 bytes),\n-               pref: $PREF_ALIGN,\n-           },\n-           size: Size(12 bytes),\n        }\n   --> $DIR/debug.rs:6:1\n    |\n LL | enum E { Foo, Bar(!, i32, i32) }\n    | ^^^^^^\n \n error: layout_of(S) = Layout {\n-           fields: Arbitrary {\n-               offsets: [\n-                   Size(0 bytes),\n-                   Size(0 bytes),\n-                   Size(4 bytes),\n-               ],\n-               memory_index: [\n-                   1,\n-                   0,\n-                   2,\n-               ],\n-           },\n-           variants: Single {\n-               index: 0,\n+           size: Size(8 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(4 bytes),\n+               pref: $PREF_ALIGN,\n            },\n            abi: ScalarPair(\n                Initialized {\n@@ -118,41 +108,72 @@ error: layout_of(S) = Layout {\n                    valid_range: 0..=4294967295,\n                },\n            ),\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size(0 bytes),\n+                   Size(0 bytes),\n+                   Size(4 bytes),\n+               ],\n+               memory_index: [\n+                   1,\n+                   0,\n+                   2,\n+               ],\n+           },\n            largest_niche: None,\n-           align: AbiAndPrefAlign {\n-               abi: Align(4 bytes),\n-               pref: $PREF_ALIGN,\n+           variants: Single {\n+               index: 0,\n            },\n-           size: Size(8 bytes),\n        }\n   --> $DIR/debug.rs:9:1\n    |\n LL | struct S { f1: i32, f2: (), f3: i32 }\n    | ^^^^^^^^\n \n error: layout_of(U) = Layout {\n-           fields: Union(\n-               2,\n-           ),\n-           variants: Single {\n-               index: 0,\n+           size: Size(8 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(4 bytes),\n+               pref: $PREF_ALIGN,\n            },\n            abi: Aggregate {\n                sized: true,\n            },\n+           fields: Union(\n+               2,\n+           ),\n            largest_niche: None,\n-           align: AbiAndPrefAlign {\n-               abi: Align(4 bytes),\n-               pref: $PREF_ALIGN,\n+           variants: Single {\n+               index: 0,\n            },\n-           size: Size(8 bytes),\n        }\n   --> $DIR/debug.rs:12:1\n    |\n LL | union U { f1: (i32, i32), f3: i32 }\n    | ^^^^^^^\n \n error: layout_of(std::result::Result<i32, i32>) = Layout {\n+           size: Size(8 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(4 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n+           abi: ScalarPair(\n+               Initialized {\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+               Initialized {\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 0..=4294967295,\n+               },\n+           ),\n            fields: Arbitrary {\n                offsets: [\n                    Size(0 bytes),\n@@ -161,6 +182,16 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                    0,\n                ],\n            },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+           ),\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -173,16 +204,10 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n-                       fields: Arbitrary {\n-                           offsets: [\n-                               Size(4 bytes),\n-                           ],\n-                           memory_index: [\n-                               0,\n-                           ],\n-                       },\n-                       variants: Single {\n-                           index: 0,\n+                       size: Size(8 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(4 bytes),\n+                           pref: $PREF_ALIGN,\n                        },\n                        abi: ScalarPair(\n                            Initialized {\n@@ -200,14 +225,6 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                                valid_range: 0..=4294967295,\n                            },\n                        ),\n-                       largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(4 bytes),\n-                           pref: $PREF_ALIGN,\n-                       },\n-                       size: Size(8 bytes),\n-                   },\n-                   Layout {\n                        fields: Arbitrary {\n                            offsets: [\n                                Size(4 bytes),\n@@ -216,8 +233,16 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                                0,\n                            ],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n-                           index: 1,\n+                           index: 0,\n+                       },\n+                   },\n+                   Layout {\n+                       size: Size(8 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(4 bytes),\n+                           pref: $PREF_ALIGN,\n                        },\n                        abi: ScalarPair(\n                            Initialized {\n@@ -235,56 +260,32 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                                valid_range: 0..=4294967295,\n                            },\n                        ),\n+                       fields: Arbitrary {\n+                           offsets: [\n+                               Size(4 bytes),\n+                           ],\n+                           memory_index: [\n+                               0,\n+                           ],\n+                       },\n                        largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(4 bytes),\n-                           pref: $PREF_ALIGN,\n+                       variants: Single {\n+                           index: 1,\n                        },\n-                       size: Size(8 bytes),\n                    },\n                ],\n            },\n-           abi: ScalarPair(\n-               Initialized {\n-                   value: Int(\n-                       I32,\n-                       false,\n-                   ),\n-                   valid_range: 0..=1,\n-               },\n-               Initialized {\n-                   value: Int(\n-                       I32,\n-                       true,\n-                   ),\n-                   valid_range: 0..=4294967295,\n-               },\n-           ),\n-           largest_niche: Some(\n-               Niche {\n-                   offset: Size(0 bytes),\n-                   value: Int(\n-                       I32,\n-                       false,\n-                   ),\n-                   valid_range: 0..=1,\n-               },\n-           ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(4 bytes),\n-               pref: $PREF_ALIGN,\n-           },\n-           size: Size(8 bytes),\n        }\n   --> $DIR/debug.rs:15:1\n    |\n LL | type Test = Result<i32, i32>;\n    | ^^^^^^^^^\n \n error: layout_of(i32) = Layout {\n-           fields: Primitive,\n-           variants: Single {\n-               index: 0,\n+           size: Size(4 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(4 bytes),\n+               pref: $PREF_ALIGN,\n            },\n            abi: Scalar(\n                Initialized {\n@@ -295,12 +296,11 @@ error: layout_of(i32) = Layout {\n                    valid_range: 0..=4294967295,\n                },\n            ),\n+           fields: Primitive,\n            largest_niche: None,\n-           align: AbiAndPrefAlign {\n-               abi: Align(4 bytes),\n-               pref: $PREF_ALIGN,\n+           variants: Single {\n+               index: 0,\n            },\n-           size: Size(4 bytes),\n        }\n   --> $DIR/debug.rs:18:1\n    |"}, {"sha": "d850dd69c96e3a6f7b8413fd19a38a561a90d832", "filename": "src/test/ui/layout/hexagon-enum.stderr", "status": "modified", "additions": 163, "deletions": 163, "changes": 326, "blob_url": "https://github.com/rust-lang/rust/blob/abd80d904ba89f04f4ddb15a0a610d0dfbb44afe/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd80d904ba89f04f4ddb15a0a610d0dfbb44afe/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr?ref=abd80d904ba89f04f4ddb15a0a610d0dfbb44afe", "patch": "@@ -1,4 +1,18 @@\n error: layout_of(A) = Layout {\n+           size: Size(1 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(1 bytes),\n+               pref: Align(1 bytes),\n+           },\n+           abi: Scalar(\n+               Initialized {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=0,\n+               },\n+           ),\n            fields: Arbitrary {\n                offsets: [\n                    Size(0 bytes),\n@@ -7,6 +21,16 @@ error: layout_of(A) = Layout {\n                    0,\n                ],\n            },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=0,\n+               },\n+           ),\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -19,64 +43,64 @@ error: layout_of(A) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n+                       size: Size(1 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(1 bytes),\n+                           pref: Align(1 bytes),\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [],\n                            memory_index: [],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 0,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(1 bytes),\n-                           pref: Align(1 bytes),\n-                       },\n-                       size: Size(1 bytes),\n                    },\n                ],\n            },\n+       }\n+  --> $DIR/hexagon-enum.rs:16:1\n+   |\n+LL | enum A { Apple }\n+   | ^^^^^^\n+\n+error: layout_of(B) = Layout {\n+           size: Size(1 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(1 bytes),\n+               pref: Align(1 bytes),\n+           },\n            abi: Scalar(\n                Initialized {\n                    value: Int(\n                        I8,\n                        false,\n                    ),\n-                   valid_range: 0..=0,\n+                   valid_range: 255..=255,\n                },\n            ),\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size(0 bytes),\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n            largest_niche: Some(\n                Niche {\n                    offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n                    ),\n-                   valid_range: 0..=0,\n+                   valid_range: 255..=255,\n                },\n            ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(1 bytes),\n-               pref: Align(1 bytes),\n-           },\n-           size: Size(1 bytes),\n-       }\n-  --> $DIR/hexagon-enum.rs:16:1\n-   |\n-LL | enum A { Apple }\n-   | ^^^^^^\n-\n-error: layout_of(B) = Layout {\n-           fields: Arbitrary {\n-               offsets: [\n-                   Size(0 bytes),\n-               ],\n-               memory_index: [\n-                   0,\n-               ],\n-           },\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -89,56 +113,46 @@ error: layout_of(B) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n+                       size: Size(1 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(1 bytes),\n+                           pref: Align(1 bytes),\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [],\n                            memory_index: [],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 0,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(1 bytes),\n-                           pref: Align(1 bytes),\n-                       },\n-                       size: Size(1 bytes),\n                    },\n                ],\n            },\n-           abi: Scalar(\n-               Initialized {\n-                   value: Int(\n-                       I8,\n-                       false,\n-                   ),\n-                   valid_range: 255..=255,\n-               },\n-           ),\n-           largest_niche: Some(\n-               Niche {\n-                   offset: Size(0 bytes),\n-                   value: Int(\n-                       I8,\n-                       false,\n-                   ),\n-                   valid_range: 255..=255,\n-               },\n-           ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(1 bytes),\n-               pref: Align(1 bytes),\n-           },\n-           size: Size(1 bytes),\n        }\n   --> $DIR/hexagon-enum.rs:20:1\n    |\n LL | enum B { Banana = 255, }\n    | ^^^^^^\n \n error: layout_of(C) = Layout {\n+           size: Size(2 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(2 bytes),\n+               pref: Align(2 bytes),\n+           },\n+           abi: Scalar(\n+               Initialized {\n+                   value: Int(\n+                       I16,\n+                       false,\n+                   ),\n+                   valid_range: 256..=256,\n+               },\n+           ),\n            fields: Arbitrary {\n                offsets: [\n                    Size(0 bytes),\n@@ -147,6 +161,16 @@ error: layout_of(C) = Layout {\n                    0,\n                ],\n            },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I16,\n+                       false,\n+                   ),\n+                   valid_range: 256..=256,\n+               },\n+           ),\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -159,56 +183,46 @@ error: layout_of(C) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n+                       size: Size(2 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(2 bytes),\n+                           pref: Align(2 bytes),\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [],\n                            memory_index: [],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 0,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(2 bytes),\n-                           pref: Align(2 bytes),\n-                       },\n-                       size: Size(2 bytes),\n                    },\n                ],\n            },\n-           abi: Scalar(\n-               Initialized {\n-                   value: Int(\n-                       I16,\n-                       false,\n-                   ),\n-                   valid_range: 256..=256,\n-               },\n-           ),\n-           largest_niche: Some(\n-               Niche {\n-                   offset: Size(0 bytes),\n-                   value: Int(\n-                       I16,\n-                       false,\n-                   ),\n-                   valid_range: 256..=256,\n-               },\n-           ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(2 bytes),\n-               pref: Align(2 bytes),\n-           },\n-           size: Size(2 bytes),\n        }\n   --> $DIR/hexagon-enum.rs:24:1\n    |\n LL | enum C { Chaenomeles = 256, }\n    | ^^^^^^\n \n error: layout_of(P) = Layout {\n+           size: Size(4 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(4 bytes),\n+               pref: Align(4 bytes),\n+           },\n+           abi: Scalar(\n+               Initialized {\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 268435456..=268435456,\n+               },\n+           ),\n            fields: Arbitrary {\n                offsets: [\n                    Size(0 bytes),\n@@ -217,6 +231,16 @@ error: layout_of(P) = Layout {\n                    0,\n                ],\n            },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 268435456..=268435456,\n+               },\n+           ),\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -229,56 +253,46 @@ error: layout_of(P) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n+                       size: Size(4 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(4 bytes),\n+                           pref: Align(4 bytes),\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [],\n                            memory_index: [],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 0,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(4 bytes),\n-                           pref: Align(4 bytes),\n-                       },\n-                       size: Size(4 bytes),\n                    },\n                ],\n            },\n-           abi: Scalar(\n-               Initialized {\n-                   value: Int(\n-                       I32,\n-                       false,\n-                   ),\n-                   valid_range: 268435456..=268435456,\n-               },\n-           ),\n-           largest_niche: Some(\n-               Niche {\n-                   offset: Size(0 bytes),\n-                   value: Int(\n-                       I32,\n-                       false,\n-                   ),\n-                   valid_range: 268435456..=268435456,\n-               },\n-           ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(4 bytes),\n-               pref: Align(4 bytes),\n-           },\n-           size: Size(4 bytes),\n        }\n   --> $DIR/hexagon-enum.rs:28:1\n    |\n LL | enum P { Peach = 0x1000_0000isize, }\n    | ^^^^^^\n \n error: layout_of(T) = Layout {\n+           size: Size(4 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(4 bytes),\n+               pref: Align(4 bytes),\n+           },\n+           abi: Scalar(\n+               Initialized {\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 2164260864..=2164260864,\n+               },\n+           ),\n            fields: Arbitrary {\n                offsets: [\n                    Size(0 bytes),\n@@ -287,6 +301,16 @@ error: layout_of(T) = Layout {\n                    0,\n                ],\n            },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 2164260864..=2164260864,\n+               },\n+           ),\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -299,49 +323,25 @@ error: layout_of(T) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n+                       size: Size(4 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(4 bytes),\n+                           pref: Align(4 bytes),\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [],\n                            memory_index: [],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 0,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(4 bytes),\n-                           pref: Align(4 bytes),\n-                       },\n-                       size: Size(4 bytes),\n                    },\n                ],\n            },\n-           abi: Scalar(\n-               Initialized {\n-                   value: Int(\n-                       I32,\n-                       true,\n-                   ),\n-                   valid_range: 2164260864..=2164260864,\n-               },\n-           ),\n-           largest_niche: Some(\n-               Niche {\n-                   offset: Size(0 bytes),\n-                   value: Int(\n-                       I32,\n-                       true,\n-                   ),\n-                   valid_range: 2164260864..=2164260864,\n-               },\n-           ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(4 bytes),\n-               pref: Align(4 bytes),\n-           },\n-           size: Size(4 bytes),\n        }\n   --> $DIR/hexagon-enum.rs:34:1\n    |"}, {"sha": "6deb1f271a72870f21157ff37e12dafa1d9615e7", "filename": "src/test/ui/layout/issue-96158-scalarpair-payload-might-be-uninit.stderr", "status": "modified", "additions": 248, "deletions": 248, "changes": 496, "blob_url": "https://github.com/rust-lang/rust/blob/abd80d904ba89f04f4ddb15a0a610d0dfbb44afe/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd80d904ba89f04f4ddb15a0a610d0dfbb44afe/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr?ref=abd80d904ba89f04f4ddb15a0a610d0dfbb44afe", "patch": "@@ -1,4 +1,24 @@\n error: layout_of(MissingPayloadField) = Layout {\n+           size: Size(2 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(1 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n+           abi: ScalarPair(\n+               Initialized {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+               Union {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+               },\n+           ),\n            fields: Arbitrary {\n                offsets: [\n                    Size(0 bytes),\n@@ -7,6 +27,16 @@ error: layout_of(MissingPayloadField) = Layout {\n                    0,\n                ],\n            },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+           ),\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -19,16 +49,10 @@ error: layout_of(MissingPayloadField) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n-                       fields: Arbitrary {\n-                           offsets: [\n-                               Size(1 bytes),\n-                           ],\n-                           memory_index: [\n-                               0,\n-                           ],\n-                       },\n-                       variants: Single {\n-                           index: 0,\n+                       size: Size(2 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(1 bytes),\n+                           pref: $PREF_ALIGN,\n                        },\n                        abi: ScalarPair(\n                            Initialized {\n@@ -45,33 +69,51 @@ error: layout_of(MissingPayloadField) = Layout {\n                                ),\n                            },\n                        ),\n+                       fields: Arbitrary {\n+                           offsets: [\n+                               Size(1 bytes),\n+                           ],\n+                           memory_index: [\n+                               0,\n+                           ],\n+                       },\n                        largest_niche: None,\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                   },\n+                   Layout {\n+                       size: Size(1 bytes),\n                        align: AbiAndPrefAlign {\n                            abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size(2 bytes),\n-                   },\n-                   Layout {\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [],\n                            memory_index: [],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 1,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(1 bytes),\n-                           pref: $PREF_ALIGN,\n-                       },\n-                       size: Size(1 bytes),\n                    },\n                ],\n            },\n+       }\n+  --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:16:1\n+   |\n+LL | pub enum MissingPayloadField {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: layout_of(CommonPayloadField) = Layout {\n+           size: Size(2 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(1 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n            abi: ScalarPair(\n                Initialized {\n                    value: Int(\n@@ -80,13 +122,22 @@ error: layout_of(MissingPayloadField) = Layout {\n                    ),\n                    valid_range: 0..=1,\n                },\n-               Union {\n+               Initialized {\n                    value: Int(\n                        I8,\n                        false,\n                    ),\n+                   valid_range: 0..=255,\n                },\n            ),\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size(0 bytes),\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n            largest_niche: Some(\n                Niche {\n                    offset: Size(0 bytes),\n@@ -97,26 +148,6 @@ error: layout_of(MissingPayloadField) = Layout {\n                    valid_range: 0..=1,\n                },\n            ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(1 bytes),\n-               pref: $PREF_ALIGN,\n-           },\n-           size: Size(2 bytes),\n-       }\n-  --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:16:1\n-   |\n-LL | pub enum MissingPayloadField {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: layout_of(CommonPayloadField) = Layout {\n-           fields: Arbitrary {\n-               offsets: [\n-                   Size(0 bytes),\n-               ],\n-               memory_index: [\n-                   0,\n-               ],\n-           },\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -129,16 +160,10 @@ error: layout_of(CommonPayloadField) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n-                       fields: Arbitrary {\n-                           offsets: [\n-                               Size(1 bytes),\n-                           ],\n-                           memory_index: [\n-                               0,\n-                           ],\n-                       },\n-                       variants: Single {\n-                           index: 0,\n+                       size: Size(2 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(1 bytes),\n+                           pref: $PREF_ALIGN,\n                        },\n                        abi: ScalarPair(\n                            Initialized {\n@@ -156,14 +181,6 @@ error: layout_of(CommonPayloadField) = Layout {\n                                valid_range: 0..=255,\n                            },\n                        ),\n-                       largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(1 bytes),\n-                           pref: $PREF_ALIGN,\n-                       },\n-                       size: Size(2 bytes),\n-                   },\n-                   Layout {\n                        fields: Arbitrary {\n                            offsets: [\n                                Size(1 bytes),\n@@ -172,8 +189,16 @@ error: layout_of(CommonPayloadField) = Layout {\n                                0,\n                            ],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n-                           index: 1,\n+                           index: 0,\n+                       },\n+                   },\n+                   Layout {\n+                       size: Size(2 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(1 bytes),\n+                           pref: $PREF_ALIGN,\n                        },\n                        abi: ScalarPair(\n                            Initialized {\n@@ -191,15 +216,33 @@ error: layout_of(CommonPayloadField) = Layout {\n                                valid_range: 0..=255,\n                            },\n                        ),\n+                       fields: Arbitrary {\n+                           offsets: [\n+                               Size(1 bytes),\n+                           ],\n+                           memory_index: [\n+                               0,\n+                           ],\n+                       },\n                        largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(1 bytes),\n-                           pref: $PREF_ALIGN,\n+                       variants: Single {\n+                           index: 1,\n                        },\n-                       size: Size(2 bytes),\n                    },\n                ],\n            },\n+       }\n+  --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:25:1\n+   |\n+LL | pub enum CommonPayloadField {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n+           size: Size(2 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(1 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n            abi: ScalarPair(\n                Initialized {\n                    value: Int(\n@@ -208,14 +251,21 @@ error: layout_of(CommonPayloadField) = Layout {\n                    ),\n                    valid_range: 0..=1,\n                },\n-               Initialized {\n+               Union {\n                    value: Int(\n                        I8,\n                        false,\n                    ),\n-                   valid_range: 0..=255,\n                },\n            ),\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size(0 bytes),\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n            largest_niche: Some(\n                Niche {\n                    offset: Size(0 bytes),\n@@ -226,26 +276,6 @@ error: layout_of(CommonPayloadField) = Layout {\n                    valid_range: 0..=1,\n                },\n            ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(1 bytes),\n-               pref: $PREF_ALIGN,\n-           },\n-           size: Size(2 bytes),\n-       }\n-  --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:25:1\n-   |\n-LL | pub enum CommonPayloadField {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n-           fields: Arbitrary {\n-               offsets: [\n-                   Size(0 bytes),\n-               ],\n-               memory_index: [\n-                   0,\n-               ],\n-           },\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -258,16 +288,10 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n-                       fields: Arbitrary {\n-                           offsets: [\n-                               Size(1 bytes),\n-                           ],\n-                           memory_index: [\n-                               0,\n-                           ],\n-                       },\n-                       variants: Single {\n-                           index: 0,\n+                       size: Size(2 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(1 bytes),\n+                           pref: $PREF_ALIGN,\n                        },\n                        abi: ScalarPair(\n                            Initialized {\n@@ -284,14 +308,6 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n                                ),\n                            },\n                        ),\n-                       largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(1 bytes),\n-                           pref: $PREF_ALIGN,\n-                       },\n-                       size: Size(2 bytes),\n-                   },\n-                   Layout {\n                        fields: Arbitrary {\n                            offsets: [\n                                Size(1 bytes),\n@@ -300,8 +316,16 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n                                0,\n                            ],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n-                           index: 1,\n+                           index: 0,\n+                       },\n+                   },\n+                   Layout {\n+                       size: Size(2 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(1 bytes),\n+                           pref: $PREF_ALIGN,\n                        },\n                        abi: ScalarPair(\n                            Initialized {\n@@ -318,22 +342,40 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n                                ),\n                            },\n                        ),\n+                       fields: Arbitrary {\n+                           offsets: [\n+                               Size(1 bytes),\n+                           ],\n+                           memory_index: [\n+                               0,\n+                           ],\n+                       },\n                        largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(1 bytes),\n-                           pref: $PREF_ALIGN,\n+                       variants: Single {\n+                           index: 1,\n                        },\n-                       size: Size(2 bytes),\n                    },\n                ],\n            },\n+       }\n+  --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:33:1\n+   |\n+LL | pub enum CommonPayloadFieldIsMaybeUninit {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: layout_of(NicheFirst) = Layout {\n+           size: Size(2 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(1 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n            abi: ScalarPair(\n                Initialized {\n                    value: Int(\n                        I8,\n                        false,\n                    ),\n-                   valid_range: 0..=1,\n+                   valid_range: 0..=4,\n                },\n                Union {\n                    value: Int(\n@@ -342,36 +384,24 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n                    ),\n                },\n            ),\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size(0 bytes),\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n            largest_niche: Some(\n                Niche {\n                    offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n                    ),\n-                   valid_range: 0..=1,\n+                   valid_range: 0..=4,\n                },\n            ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(1 bytes),\n-               pref: $PREF_ALIGN,\n-           },\n-           size: Size(2 bytes),\n-       }\n-  --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:33:1\n-   |\n-LL | pub enum CommonPayloadFieldIsMaybeUninit {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: layout_of(NicheFirst) = Layout {\n-           fields: Arbitrary {\n-               offsets: [\n-                   Size(0 bytes),\n-               ],\n-               memory_index: [\n-                   0,\n-               ],\n-           },\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -388,18 +418,10 @@ error: layout_of(NicheFirst) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n-                       fields: Arbitrary {\n-                           offsets: [\n-                               Size(0 bytes),\n-                               Size(1 bytes),\n-                           ],\n-                           memory_index: [\n-                               0,\n-                               1,\n-                           ],\n-                       },\n-                       variants: Single {\n-                           index: 0,\n+                       size: Size(2 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(1 bytes),\n+                           pref: $PREF_ALIGN,\n                        },\n                        abi: ScalarPair(\n                            Initialized {\n@@ -417,6 +439,16 @@ error: layout_of(NicheFirst) = Layout {\n                                valid_range: 0..=255,\n                            },\n                        ),\n+                       fields: Arbitrary {\n+                           offsets: [\n+                               Size(0 bytes),\n+                               Size(1 bytes),\n+                           ],\n+                           memory_index: [\n+                               0,\n+                               1,\n+                           ],\n+                       },\n                        largest_niche: Some(\n                            Niche {\n                                offset: Size(0 bytes),\n@@ -427,87 +459,75 @@ error: layout_of(NicheFirst) = Layout {\n                                valid_range: 0..=2,\n                            },\n                        ),\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                   },\n+                   Layout {\n+                       size: Size(0 bytes),\n                        align: AbiAndPrefAlign {\n                            abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size(2 bytes),\n-                   },\n-                   Layout {\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [],\n                            memory_index: [],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 1,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n+                   },\n+                   Layout {\n+                       size: Size(0 bytes),\n                        align: AbiAndPrefAlign {\n                            abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size(0 bytes),\n-                   },\n-                   Layout {\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [],\n                            memory_index: [],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 2,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(1 bytes),\n-                           pref: $PREF_ALIGN,\n-                       },\n-                       size: Size(0 bytes),\n                    },\n                ],\n            },\n+       }\n+  --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:41:1\n+   |\n+LL | pub enum NicheFirst {\n+   | ^^^^^^^^^^^^^^^^^^^\n+\n+error: layout_of(NicheSecond) = Layout {\n+           size: Size(2 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(1 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n            abi: ScalarPair(\n-               Initialized {\n-                   value: Int(\n-                       I8,\n-                       false,\n-                   ),\n-                   valid_range: 0..=4,\n-               },\n                Union {\n                    value: Int(\n                        I8,\n                        false,\n                    ),\n                },\n-           ),\n-           largest_niche: Some(\n-               Niche {\n-                   offset: Size(0 bytes),\n+               Initialized {\n                    value: Int(\n                        I8,\n                        false,\n                    ),\n                    valid_range: 0..=4,\n                },\n            ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(1 bytes),\n-               pref: $PREF_ALIGN,\n-           },\n-           size: Size(2 bytes),\n-       }\n-  --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:41:1\n-   |\n-LL | pub enum NicheFirst {\n-   | ^^^^^^^^^^^^^^^^^^^\n-\n-error: layout_of(NicheSecond) = Layout {\n            fields: Arbitrary {\n                offsets: [\n                    Size(1 bytes),\n@@ -516,6 +536,16 @@ error: layout_of(NicheSecond) = Layout {\n                    0,\n                ],\n            },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(1 bytes),\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=4,\n+               },\n+           ),\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -532,18 +562,10 @@ error: layout_of(NicheSecond) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n-                       fields: Arbitrary {\n-                           offsets: [\n-                               Size(0 bytes),\n-                               Size(1 bytes),\n-                           ],\n-                           memory_index: [\n-                               0,\n-                               1,\n-                           ],\n-                       },\n-                       variants: Single {\n-                           index: 0,\n+                       size: Size(2 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(1 bytes),\n+                           pref: $PREF_ALIGN,\n                        },\n                        abi: ScalarPair(\n                            Initialized {\n@@ -561,6 +583,16 @@ error: layout_of(NicheSecond) = Layout {\n                                valid_range: 0..=2,\n                            },\n                        ),\n+                       fields: Arbitrary {\n+                           offsets: [\n+                               Size(0 bytes),\n+                               Size(1 bytes),\n+                           ],\n+                           memory_index: [\n+                               0,\n+                               1,\n+                           ],\n+                       },\n                        largest_niche: Some(\n                            Niche {\n                                offset: Size(1 bytes),\n@@ -571,80 +603,48 @@ error: layout_of(NicheSecond) = Layout {\n                                valid_range: 0..=2,\n                            },\n                        ),\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                   },\n+                   Layout {\n+                       size: Size(0 bytes),\n                        align: AbiAndPrefAlign {\n                            abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size(2 bytes),\n-                   },\n-                   Layout {\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [],\n                            memory_index: [],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 1,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n+                   },\n+                   Layout {\n+                       size: Size(0 bytes),\n                        align: AbiAndPrefAlign {\n                            abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size(0 bytes),\n-                   },\n-                   Layout {\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [],\n                            memory_index: [],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 2,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(1 bytes),\n-                           pref: $PREF_ALIGN,\n-                       },\n-                       size: Size(0 bytes),\n                    },\n                ],\n            },\n-           abi: ScalarPair(\n-               Union {\n-                   value: Int(\n-                       I8,\n-                       false,\n-                   ),\n-               },\n-               Initialized {\n-                   value: Int(\n-                       I8,\n-                       false,\n-                   ),\n-                   valid_range: 0..=4,\n-               },\n-           ),\n-           largest_niche: Some(\n-               Niche {\n-                   offset: Size(1 bytes),\n-                   value: Int(\n-                       I8,\n-                       false,\n-                   ),\n-                   valid_range: 0..=4,\n-               },\n-           ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(1 bytes),\n-               pref: $PREF_ALIGN,\n-           },\n-           size: Size(2 bytes),\n        }\n   --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:50:1\n    |"}, {"sha": "de6177c8dfc4d24aba0b98ace81c35546e1cb8bd", "filename": "src/test/ui/layout/issue-96185-overaligned-enum.stderr", "status": "modified", "additions": 73, "deletions": 73, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/abd80d904ba89f04f4ddb15a0a610d0dfbb44afe/src%2Ftest%2Fui%2Flayout%2Fissue-96185-overaligned-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd80d904ba89f04f4ddb15a0a610d0dfbb44afe/src%2Ftest%2Fui%2Flayout%2Fissue-96185-overaligned-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fissue-96185-overaligned-enum.stderr?ref=abd80d904ba89f04f4ddb15a0a610d0dfbb44afe", "patch": "@@ -1,4 +1,12 @@\n error: layout_of(Aligned1) = Layout {\n+           size: Size(8 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(8 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n+           abi: Aggregate {\n+               sized: true,\n+           },\n            fields: Arbitrary {\n                offsets: [\n                    Size(0 bytes),\n@@ -7,6 +15,16 @@ error: layout_of(Aligned1) = Layout {\n                    0,\n                ],\n            },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+           ),\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -19,68 +37,64 @@ error: layout_of(Aligned1) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n+                       size: Size(8 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(8 bytes),\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [],\n                            memory_index: [],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 0,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n+                   },\n+                   Layout {\n+                       size: Size(8 bytes),\n                        align: AbiAndPrefAlign {\n                            abi: Align(8 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size(8 bytes),\n-                   },\n-                   Layout {\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [],\n                            memory_index: [],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 1,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(8 bytes),\n-                           pref: $PREF_ALIGN,\n-                       },\n-                       size: Size(8 bytes),\n                    },\n                ],\n            },\n-           abi: Aggregate {\n-               sized: true,\n+       }\n+  --> $DIR/issue-96185-overaligned-enum.rs:8:1\n+   |\n+LL | pub enum Aligned1 {\n+   | ^^^^^^^^^^^^^^^^^\n+\n+error: layout_of(Aligned2) = Layout {\n+           size: Size(1 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(1 bytes),\n+               pref: $PREF_ALIGN,\n            },\n-           largest_niche: Some(\n-               Niche {\n-                   offset: Size(0 bytes),\n+           abi: Scalar(\n+               Initialized {\n                    value: Int(\n                        I8,\n                        false,\n                    ),\n                    valid_range: 0..=1,\n                },\n            ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(8 bytes),\n-               pref: $PREF_ALIGN,\n-           },\n-           size: Size(8 bytes),\n-       }\n-  --> $DIR/issue-96185-overaligned-enum.rs:8:1\n-   |\n-LL | pub enum Aligned1 {\n-   | ^^^^^^^^^^^^^^^^^\n-\n-error: layout_of(Aligned2) = Layout {\n            fields: Arbitrary {\n                offsets: [\n                    Size(0 bytes),\n@@ -89,6 +103,16 @@ error: layout_of(Aligned2) = Layout {\n                    0,\n                ],\n            },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+           ),\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -101,67 +125,43 @@ error: layout_of(Aligned2) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n+                       size: Size(1 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(1 bytes),\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [],\n                            memory_index: [],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 0,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n+                   },\n+                   Layout {\n+                       size: Size(1 bytes),\n                        align: AbiAndPrefAlign {\n                            abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size(1 bytes),\n-                   },\n-                   Layout {\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [],\n                            memory_index: [],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 1,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(1 bytes),\n-                           pref: $PREF_ALIGN,\n-                       },\n-                       size: Size(1 bytes),\n                    },\n                ],\n            },\n-           abi: Scalar(\n-               Initialized {\n-                   value: Int(\n-                       I8,\n-                       false,\n-                   ),\n-                   valid_range: 0..=1,\n-               },\n-           ),\n-           largest_niche: Some(\n-               Niche {\n-                   offset: Size(0 bytes),\n-                   value: Int(\n-                       I8,\n-                       false,\n-                   ),\n-                   valid_range: 0..=1,\n-               },\n-           ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(1 bytes),\n-               pref: $PREF_ALIGN,\n-           },\n-           size: Size(1 bytes),\n        }\n   --> $DIR/issue-96185-overaligned-enum.rs:16:1\n    |"}, {"sha": "227bd950b66663d0e2a64fbdaea9a001c01b74ee", "filename": "src/test/ui/layout/thumb-enum.stderr", "status": "modified", "additions": 163, "deletions": 163, "changes": 326, "blob_url": "https://github.com/rust-lang/rust/blob/abd80d904ba89f04f4ddb15a0a610d0dfbb44afe/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd80d904ba89f04f4ddb15a0a610d0dfbb44afe/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr?ref=abd80d904ba89f04f4ddb15a0a610d0dfbb44afe", "patch": "@@ -1,4 +1,18 @@\n error: layout_of(A) = Layout {\n+           size: Size(1 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(1 bytes),\n+               pref: Align(4 bytes),\n+           },\n+           abi: Scalar(\n+               Initialized {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=0,\n+               },\n+           ),\n            fields: Arbitrary {\n                offsets: [\n                    Size(0 bytes),\n@@ -7,6 +21,16 @@ error: layout_of(A) = Layout {\n                    0,\n                ],\n            },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=0,\n+               },\n+           ),\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -19,64 +43,64 @@ error: layout_of(A) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n+                       size: Size(1 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(1 bytes),\n+                           pref: Align(4 bytes),\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [],\n                            memory_index: [],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 0,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(1 bytes),\n-                           pref: Align(4 bytes),\n-                       },\n-                       size: Size(1 bytes),\n                    },\n                ],\n            },\n+       }\n+  --> $DIR/thumb-enum.rs:16:1\n+   |\n+LL | enum A { Apple }\n+   | ^^^^^^\n+\n+error: layout_of(B) = Layout {\n+           size: Size(1 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(1 bytes),\n+               pref: Align(4 bytes),\n+           },\n            abi: Scalar(\n                Initialized {\n                    value: Int(\n                        I8,\n                        false,\n                    ),\n-                   valid_range: 0..=0,\n+                   valid_range: 255..=255,\n                },\n            ),\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size(0 bytes),\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n            largest_niche: Some(\n                Niche {\n                    offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n                    ),\n-                   valid_range: 0..=0,\n+                   valid_range: 255..=255,\n                },\n            ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(1 bytes),\n-               pref: Align(4 bytes),\n-           },\n-           size: Size(1 bytes),\n-       }\n-  --> $DIR/thumb-enum.rs:16:1\n-   |\n-LL | enum A { Apple }\n-   | ^^^^^^\n-\n-error: layout_of(B) = Layout {\n-           fields: Arbitrary {\n-               offsets: [\n-                   Size(0 bytes),\n-               ],\n-               memory_index: [\n-                   0,\n-               ],\n-           },\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -89,56 +113,46 @@ error: layout_of(B) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n+                       size: Size(1 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(1 bytes),\n+                           pref: Align(4 bytes),\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [],\n                            memory_index: [],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 0,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(1 bytes),\n-                           pref: Align(4 bytes),\n-                       },\n-                       size: Size(1 bytes),\n                    },\n                ],\n            },\n-           abi: Scalar(\n-               Initialized {\n-                   value: Int(\n-                       I8,\n-                       false,\n-                   ),\n-                   valid_range: 255..=255,\n-               },\n-           ),\n-           largest_niche: Some(\n-               Niche {\n-                   offset: Size(0 bytes),\n-                   value: Int(\n-                       I8,\n-                       false,\n-                   ),\n-                   valid_range: 255..=255,\n-               },\n-           ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(1 bytes),\n-               pref: Align(4 bytes),\n-           },\n-           size: Size(1 bytes),\n        }\n   --> $DIR/thumb-enum.rs:20:1\n    |\n LL | enum B { Banana = 255, }\n    | ^^^^^^\n \n error: layout_of(C) = Layout {\n+           size: Size(2 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(2 bytes),\n+               pref: Align(4 bytes),\n+           },\n+           abi: Scalar(\n+               Initialized {\n+                   value: Int(\n+                       I16,\n+                       false,\n+                   ),\n+                   valid_range: 256..=256,\n+               },\n+           ),\n            fields: Arbitrary {\n                offsets: [\n                    Size(0 bytes),\n@@ -147,6 +161,16 @@ error: layout_of(C) = Layout {\n                    0,\n                ],\n            },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I16,\n+                       false,\n+                   ),\n+                   valid_range: 256..=256,\n+               },\n+           ),\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -159,56 +183,46 @@ error: layout_of(C) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n+                       size: Size(2 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(2 bytes),\n+                           pref: Align(4 bytes),\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [],\n                            memory_index: [],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 0,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(2 bytes),\n-                           pref: Align(4 bytes),\n-                       },\n-                       size: Size(2 bytes),\n                    },\n                ],\n            },\n-           abi: Scalar(\n-               Initialized {\n-                   value: Int(\n-                       I16,\n-                       false,\n-                   ),\n-                   valid_range: 256..=256,\n-               },\n-           ),\n-           largest_niche: Some(\n-               Niche {\n-                   offset: Size(0 bytes),\n-                   value: Int(\n-                       I16,\n-                       false,\n-                   ),\n-                   valid_range: 256..=256,\n-               },\n-           ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(2 bytes),\n-               pref: Align(4 bytes),\n-           },\n-           size: Size(2 bytes),\n        }\n   --> $DIR/thumb-enum.rs:24:1\n    |\n LL | enum C { Chaenomeles = 256, }\n    | ^^^^^^\n \n error: layout_of(P) = Layout {\n+           size: Size(4 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(4 bytes),\n+               pref: Align(4 bytes),\n+           },\n+           abi: Scalar(\n+               Initialized {\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 268435456..=268435456,\n+               },\n+           ),\n            fields: Arbitrary {\n                offsets: [\n                    Size(0 bytes),\n@@ -217,6 +231,16 @@ error: layout_of(P) = Layout {\n                    0,\n                ],\n            },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I32,\n+                       false,\n+                   ),\n+                   valid_range: 268435456..=268435456,\n+               },\n+           ),\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -229,56 +253,46 @@ error: layout_of(P) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n+                       size: Size(4 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(4 bytes),\n+                           pref: Align(4 bytes),\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [],\n                            memory_index: [],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 0,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(4 bytes),\n-                           pref: Align(4 bytes),\n-                       },\n-                       size: Size(4 bytes),\n                    },\n                ],\n            },\n-           abi: Scalar(\n-               Initialized {\n-                   value: Int(\n-                       I32,\n-                       false,\n-                   ),\n-                   valid_range: 268435456..=268435456,\n-               },\n-           ),\n-           largest_niche: Some(\n-               Niche {\n-                   offset: Size(0 bytes),\n-                   value: Int(\n-                       I32,\n-                       false,\n-                   ),\n-                   valid_range: 268435456..=268435456,\n-               },\n-           ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(4 bytes),\n-               pref: Align(4 bytes),\n-           },\n-           size: Size(4 bytes),\n        }\n   --> $DIR/thumb-enum.rs:28:1\n    |\n LL | enum P { Peach = 0x1000_0000isize, }\n    | ^^^^^^\n \n error: layout_of(T) = Layout {\n+           size: Size(4 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(4 bytes),\n+               pref: Align(4 bytes),\n+           },\n+           abi: Scalar(\n+               Initialized {\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 2164260864..=2164260864,\n+               },\n+           ),\n            fields: Arbitrary {\n                offsets: [\n                    Size(0 bytes),\n@@ -287,6 +301,16 @@ error: layout_of(T) = Layout {\n                    0,\n                ],\n            },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I32,\n+                       true,\n+                   ),\n+                   valid_range: 2164260864..=2164260864,\n+               },\n+           ),\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -299,49 +323,25 @@ error: layout_of(T) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n+                       size: Size(4 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(4 bytes),\n+                           pref: Align(4 bytes),\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [],\n                            memory_index: [],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 0,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(4 bytes),\n-                           pref: Align(4 bytes),\n-                       },\n-                       size: Size(4 bytes),\n                    },\n                ],\n            },\n-           abi: Scalar(\n-               Initialized {\n-                   value: Int(\n-                       I32,\n-                       true,\n-                   ),\n-                   valid_range: 2164260864..=2164260864,\n-               },\n-           ),\n-           largest_niche: Some(\n-               Niche {\n-                   offset: Size(0 bytes),\n-                   value: Int(\n-                       I32,\n-                       true,\n-                   ),\n-                   valid_range: 2164260864..=2164260864,\n-               },\n-           ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(4 bytes),\n-               pref: Align(4 bytes),\n-           },\n-           size: Size(4 bytes),\n        }\n   --> $DIR/thumb-enum.rs:34:1\n    |"}, {"sha": "56d3a52bb7ff9133a2f0fcdcf0ea3f95572d30b2", "filename": "src/test/ui/layout/zero-sized-array-enum-niche.stderr", "status": "modified", "additions": 152, "deletions": 152, "changes": 304, "blob_url": "https://github.com/rust-lang/rust/blob/abd80d904ba89f04f4ddb15a0a610d0dfbb44afe/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-enum-niche.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd80d904ba89f04f4ddb15a0a610d0dfbb44afe/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-enum-niche.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-enum-niche.stderr?ref=abd80d904ba89f04f4ddb15a0a610d0dfbb44afe", "patch": "@@ -1,4 +1,12 @@\n error: layout_of(std::result::Result<[u32; 0], bool>) = Layout {\n+           size: Size(4 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(4 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n+           abi: Aggregate {\n+               sized: true,\n+           },\n            fields: Arbitrary {\n                offsets: [\n                    Size(0 bytes),\n@@ -7,6 +15,16 @@ error: layout_of(std::result::Result<[u32; 0], bool>) = Layout {\n                    0,\n                ],\n            },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+           ),\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -19,6 +37,14 @@ error: layout_of(std::result::Result<[u32; 0], bool>) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n+                       size: Size(4 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(4 bytes),\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [\n                                Size(4 bytes),\n@@ -27,20 +53,20 @@ error: layout_of(std::result::Result<[u32; 0], bool>) = Layout {\n                                0,\n                            ],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 0,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n+                   },\n+                   Layout {\n+                       size: Size(2 bytes),\n                        align: AbiAndPrefAlign {\n-                           abi: Align(4 bytes),\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size(4 bytes),\n-                   },\n-                   Layout {\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [\n                                Size(1 bytes),\n@@ -49,12 +75,6 @@ error: layout_of(std::result::Result<[u32; 0], bool>) = Layout {\n                                0,\n                            ],\n                        },\n-                       variants: Single {\n-                           index: 1,\n-                       },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n                        largest_niche: Some(\n                            Niche {\n                                offset: Size(1 bytes),\n@@ -65,39 +85,27 @@ error: layout_of(std::result::Result<[u32; 0], bool>) = Layout {\n                                valid_range: 0..=1,\n                            },\n                        ),\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(1 bytes),\n-                           pref: $PREF_ALIGN,\n+                       variants: Single {\n+                           index: 1,\n                        },\n-                       size: Size(2 bytes),\n                    },\n                ],\n            },\n-           abi: Aggregate {\n-               sized: true,\n-           },\n-           largest_niche: Some(\n-               Niche {\n-                   offset: Size(0 bytes),\n-                   value: Int(\n-                       I8,\n-                       false,\n-                   ),\n-                   valid_range: 0..=1,\n-               },\n-           ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(4 bytes),\n-               pref: $PREF_ALIGN,\n-           },\n-           size: Size(4 bytes),\n        }\n   --> $DIR/zero-sized-array-enum-niche.rs:13:1\n    |\n LL | type AlignedResult = Result<[u32; 0], bool>;\n    | ^^^^^^^^^^^^^^^^^^\n \n error: layout_of(MultipleAlignments) = Layout {\n+           size: Size(4 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(4 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n+           abi: Aggregate {\n+               sized: true,\n+           },\n            fields: Arbitrary {\n                offsets: [\n                    Size(0 bytes),\n@@ -106,6 +114,16 @@ error: layout_of(MultipleAlignments) = Layout {\n                    0,\n                ],\n            },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=2,\n+               },\n+           ),\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -118,6 +136,14 @@ error: layout_of(MultipleAlignments) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n+                       size: Size(2 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(2 bytes),\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [\n                                Size(2 bytes),\n@@ -126,20 +152,20 @@ error: layout_of(MultipleAlignments) = Layout {\n                                0,\n                            ],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 0,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n+                   },\n+                   Layout {\n+                       size: Size(4 bytes),\n                        align: AbiAndPrefAlign {\n-                           abi: Align(2 bytes),\n+                           abi: Align(4 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size(2 bytes),\n-                   },\n-                   Layout {\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [\n                                Size(4 bytes),\n@@ -148,20 +174,20 @@ error: layout_of(MultipleAlignments) = Layout {\n                                0,\n                            ],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 1,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n+                   },\n+                   Layout {\n+                       size: Size(2 bytes),\n                        align: AbiAndPrefAlign {\n-                           abi: Align(4 bytes),\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size(4 bytes),\n-                   },\n-                   Layout {\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [\n                                Size(1 bytes),\n@@ -170,12 +196,6 @@ error: layout_of(MultipleAlignments) = Layout {\n                                0,\n                            ],\n                        },\n-                       variants: Single {\n-                           index: 2,\n-                       },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n                        largest_niche: Some(\n                            Niche {\n                                offset: Size(1 bytes),\n@@ -186,39 +206,27 @@ error: layout_of(MultipleAlignments) = Layout {\n                                valid_range: 0..=1,\n                            },\n                        ),\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(1 bytes),\n-                           pref: $PREF_ALIGN,\n+                       variants: Single {\n+                           index: 2,\n                        },\n-                       size: Size(2 bytes),\n                    },\n                ],\n            },\n-           abi: Aggregate {\n-               sized: true,\n-           },\n-           largest_niche: Some(\n-               Niche {\n-                   offset: Size(0 bytes),\n-                   value: Int(\n-                       I8,\n-                       false,\n-                   ),\n-                   valid_range: 0..=2,\n-               },\n-           ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(4 bytes),\n-               pref: $PREF_ALIGN,\n-           },\n-           size: Size(4 bytes),\n        }\n   --> $DIR/zero-sized-array-enum-niche.rs:21:1\n    |\n LL | enum MultipleAlignments {\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(std::result::Result<[u32; 0], Packed<std::num::NonZeroU16>>) = Layout {\n+           size: Size(4 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(4 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n+           abi: Aggregate {\n+               sized: true,\n+           },\n            fields: Arbitrary {\n                offsets: [\n                    Size(0 bytes),\n@@ -227,6 +235,16 @@ error: layout_of(std::result::Result<[u32; 0], Packed<std::num::NonZeroU16>>) =\n                    0,\n                ],\n            },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+           ),\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -239,6 +257,14 @@ error: layout_of(std::result::Result<[u32; 0], Packed<std::num::NonZeroU16>>) =\n                tag_field: 0,\n                variants: [\n                    Layout {\n+                       size: Size(4 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(4 bytes),\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [\n                                Size(4 bytes),\n@@ -247,20 +273,20 @@ error: layout_of(std::result::Result<[u32; 0], Packed<std::num::NonZeroU16>>) =\n                                0,\n                            ],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 0,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n+                   },\n+                   Layout {\n+                       size: Size(3 bytes),\n                        align: AbiAndPrefAlign {\n-                           abi: Align(4 bytes),\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size(4 bytes),\n-                   },\n-                   Layout {\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [\n                                Size(1 bytes),\n@@ -269,12 +295,6 @@ error: layout_of(std::result::Result<[u32; 0], Packed<std::num::NonZeroU16>>) =\n                                0,\n                            ],\n                        },\n-                       variants: Single {\n-                           index: 1,\n-                       },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n                        largest_niche: Some(\n                            Niche {\n                                offset: Size(1 bytes),\n@@ -285,39 +305,27 @@ error: layout_of(std::result::Result<[u32; 0], Packed<std::num::NonZeroU16>>) =\n                                valid_range: 1..=65535,\n                            },\n                        ),\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(1 bytes),\n-                           pref: $PREF_ALIGN,\n+                       variants: Single {\n+                           index: 1,\n                        },\n-                       size: Size(3 bytes),\n                    },\n                ],\n            },\n-           abi: Aggregate {\n-               sized: true,\n-           },\n-           largest_niche: Some(\n-               Niche {\n-                   offset: Size(0 bytes),\n-                   value: Int(\n-                       I8,\n-                       false,\n-                   ),\n-                   valid_range: 0..=1,\n-               },\n-           ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(4 bytes),\n-               pref: $PREF_ALIGN,\n-           },\n-           size: Size(4 bytes),\n        }\n   --> $DIR/zero-sized-array-enum-niche.rs:37:1\n    |\n LL | type NicheLosesToTagged = Result<[u32; 0], Packed<std::num::NonZeroU16>>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(std::result::Result<[u32; 0], Packed<U16IsZero>>) = Layout {\n+           size: Size(4 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(4 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n+           abi: Aggregate {\n+               sized: true,\n+           },\n            fields: Arbitrary {\n                offsets: [\n                    Size(0 bytes),\n@@ -326,6 +334,16 @@ error: layout_of(std::result::Result<[u32; 0], Packed<U16IsZero>>) = Layout {\n                    0,\n                ],\n            },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I16,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+           ),\n            variants: Multiple {\n                tag: Initialized {\n                    value: Int(\n@@ -342,6 +360,14 @@ error: layout_of(std::result::Result<[u32; 0], Packed<U16IsZero>>) = Layout {\n                tag_field: 0,\n                variants: [\n                    Layout {\n+                       size: Size(0 bytes),\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(4 bytes),\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [\n                                Size(0 bytes),\n@@ -350,20 +376,20 @@ error: layout_of(std::result::Result<[u32; 0], Packed<U16IsZero>>) = Layout {\n                                0,\n                            ],\n                        },\n+                       largest_niche: None,\n                        variants: Single {\n                            index: 0,\n                        },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n-                       largest_niche: None,\n+                   },\n+                   Layout {\n+                       size: Size(2 bytes),\n                        align: AbiAndPrefAlign {\n-                           abi: Align(4 bytes),\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size(0 bytes),\n-                   },\n-                   Layout {\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n                        fields: Arbitrary {\n                            offsets: [\n                                Size(0 bytes),\n@@ -372,12 +398,6 @@ error: layout_of(std::result::Result<[u32; 0], Packed<U16IsZero>>) = Layout {\n                                0,\n                            ],\n                        },\n-                       variants: Single {\n-                           index: 1,\n-                       },\n-                       abi: Aggregate {\n-                           sized: true,\n-                       },\n                        largest_niche: Some(\n                            Niche {\n                                offset: Size(0 bytes),\n@@ -388,32 +408,12 @@ error: layout_of(std::result::Result<[u32; 0], Packed<U16IsZero>>) = Layout {\n                                valid_range: 0..=0,\n                            },\n                        ),\n-                       align: AbiAndPrefAlign {\n-                           abi: Align(1 bytes),\n-                           pref: $PREF_ALIGN,\n+                       variants: Single {\n+                           index: 1,\n                        },\n-                       size: Size(2 bytes),\n                    },\n                ],\n            },\n-           abi: Aggregate {\n-               sized: true,\n-           },\n-           largest_niche: Some(\n-               Niche {\n-                   offset: Size(0 bytes),\n-                   value: Int(\n-                       I16,\n-                       false,\n-                   ),\n-                   valid_range: 0..=1,\n-               },\n-           ),\n-           align: AbiAndPrefAlign {\n-               abi: Align(4 bytes),\n-               pref: $PREF_ALIGN,\n-           },\n-           size: Size(4 bytes),\n        }\n   --> $DIR/zero-sized-array-enum-niche.rs:44:1\n    |"}]}