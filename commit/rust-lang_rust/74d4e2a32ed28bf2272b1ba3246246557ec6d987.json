{"sha": "74d4e2a32ed28bf2272b1ba3246246557ec6d987", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZDRlMmEzMmVkMjhiZjIyNzJiMWJhMzI0NjI0NjU1N2VjNmQ5ODc=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-10T12:31:33Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-10T12:31:33Z"}, "message": "Add compile-fail tests for interfaces/impls\n\nCloses #1475", "tree": {"sha": "5461052fa17fdca5746f85365c94bac31e67f67f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5461052fa17fdca5746f85365c94bac31e67f67f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74d4e2a32ed28bf2272b1ba3246246557ec6d987", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74d4e2a32ed28bf2272b1ba3246246557ec6d987", "html_url": "https://github.com/rust-lang/rust/commit/74d4e2a32ed28bf2272b1ba3246246557ec6d987", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74d4e2a32ed28bf2272b1ba3246246557ec6d987/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d01e7cd3406e612f363f95d44291839fc53640d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d01e7cd3406e612f363f95d44291839fc53640d1", "html_url": "https://github.com/rust-lang/rust/commit/d01e7cd3406e612f363f95d44291839fc53640d1"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "59f65bb04084b288a0bd4715c1f624bc9935d590", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/74d4e2a32ed28bf2272b1ba3246246557ec6d987/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d4e2a32ed28bf2272b1ba3246246557ec6d987/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=74d4e2a32ed28bf2272b1ba3246246557ec6d987", "patch": "@@ -1589,25 +1589,25 @@ fn lookup_method(fcx: @fn_ctxt, expr: @ast::expr, node_id: ast::node_id,\n         let substs = substs, n_tps = vec::len(substs), n_tys = vec::len(tps);\n         let has_self = ty::type_has_params(fty);\n         if method_n_tps + n_tps > 0u {\n-            if n_tys > 0u {\n+            if n_tys == 0u || n_tys != method_n_tps {\n                 if n_tys != method_n_tps {\n-                    tcx.sess.span_fatal\n+                    tcx.sess.span_err\n                         (expr.span, \"incorrect number of type \\\n                                      parameters given for this method\");\n \n                 }\n-                substs += tps;\n-            } else {\n                 substs += vec::init_fn(method_n_tps, {|_i|\n                     ty::mk_var(tcx, next_ty_var_id(fcx))\n                 });\n-            };\n+            } else {\n+                substs += tps;\n+            }\n             write_ty_substs(tcx, node_id, fty, substs);\n-        } else if n_tys > 0u {\n-            tcx.sess.span_fatal(expr.span,\n-                                \"this method does not take type \\\n-                                 parameters\");\n         } else {\n+            if n_tys > 0u {\n+                tcx.sess.span_err(expr.span, \"this method does not take type \\\n+                                              parameters\");\n+            }\n             write_ty(tcx, node_id, fty);\n         }\n         if has_self && !option::is_none(self_sub) {"}, {"sha": "96e5979084e7a10c19f1b283a480e8bcc782ea83", "filename": "src/test/compile-fail/iface-test-2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/74d4e2a32ed28bf2272b1ba3246246557ec6d987/src%2Ftest%2Fcompile-fail%2Fiface-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d4e2a32ed28bf2272b1ba3246246557ec6d987/src%2Ftest%2Fcompile-fail%2Fiface-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fiface-test-2.rs?ref=74d4e2a32ed28bf2272b1ba3246246557ec6d987", "patch": "@@ -0,0 +1,11 @@\n+iface bar { fn dup() -> self; fn blah<X>(); }\n+impl of bar for int { fn dup() -> int { self } fn blah<X>() {} }\n+impl of bar for uint { fn dup() -> uint { self } fn blah<X>() {} }\n+impl of bar for uint { fn dup() -> uint { self } fn blah<X>() {} }\n+\n+fn main() {\n+    10.dup::<int>(); //! ERROR does not take type parameters\n+    10.blah::<int, int>(); //! ERROR incorrect number of type parameters\n+    10u.dup(); //! ERROR multiple applicable methods\n+    (10 as bar).dup(); //! ERROR contains a self type\n+}"}, {"sha": "86c5a478d81e5c2155ef655845ea836980d9dbd8", "filename": "src/test/compile-fail/iface-test.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74d4e2a32ed28bf2272b1ba3246246557ec6d987/src%2Ftest%2Fcompile-fail%2Fiface-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d4e2a32ed28bf2272b1ba3246246557ec6d987/src%2Ftest%2Fcompile-fail%2Fiface-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fiface-test.rs?ref=74d4e2a32ed28bf2272b1ba3246246557ec6d987", "patch": "@@ -0,0 +1,9 @@\n+iface foo { fn foo(); }\n+\n+impl of foo for uint {} //! ERROR missing method `foo`\n+\n+impl of foo for uint { fn foo() -> int {} } //! ERROR incompatible type\n+\n+impl of int for uint { fn foo() {} } //! ERROR can only implement interface\n+\n+fn main() {}"}]}