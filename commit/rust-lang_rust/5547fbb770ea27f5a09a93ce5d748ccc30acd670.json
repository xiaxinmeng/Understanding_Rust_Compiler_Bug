{"sha": "5547fbb770ea27f5a09a93ce5d748ccc30acd670", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NDdmYmI3NzBlYTI3ZjVhMDlhOTNjZTVkNzQ4Y2NjMzBhY2Q2NzA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-24T09:21:12Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-24T09:21:12Z"}, "message": "Fix accidental newline in diagnostic and missing entries in lint_array!", "tree": {"sha": "8ce8ea8deced782035c80f9367ac7968f1ba226c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ce8ea8deced782035c80f9367ac7968f1ba226c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5547fbb770ea27f5a09a93ce5d748ccc30acd670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5547fbb770ea27f5a09a93ce5d748ccc30acd670", "html_url": "https://github.com/rust-lang/rust/commit/5547fbb770ea27f5a09a93ce5d748ccc30acd670", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5547fbb770ea27f5a09a93ce5d748ccc30acd670/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ae82eb4ab8845e3c247c62d27549f16ecef5360", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae82eb4ab8845e3c247c62d27549f16ecef5360", "html_url": "https://github.com/rust-lang/rust/commit/8ae82eb4ab8845e3c247c62d27549f16ecef5360"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "688f1cc9eb069c8e32529b679cd87ca5c68151cf", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5547fbb770ea27f5a09a93ce5d748ccc30acd670/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5547fbb770ea27f5a09a93ce5d748ccc30acd670/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=5547fbb770ea27f5a09a93ce5d748ccc30acd670", "patch": "@@ -89,21 +89,21 @@ declare_lint! {\n     \"calls to `std::mem::forget` with a value that implements Copy\"\n }\n \n-const DROP_REF_SUMMARY: &str = \"calls to `std::mem::drop` with a reference instead of an owned value.\n+const DROP_REF_SUMMARY: &str = \"calls to `std::mem::drop` with a reference instead of an owned value. \\\n                                Dropping a reference does nothing.\";\n-const FORGET_REF_SUMMARY: &str = \"calls to `std::mem::forget` with a reference instead of an owned value.\n+const FORGET_REF_SUMMARY: &str = \"calls to `std::mem::forget` with a reference instead of an owned value. \\\n                                  Forgetting a reference does nothing.\";\n-const DROP_COPY_SUMMARY: &str = \"calls to `std::mem::drop` with a value that implements Copy.\n+const DROP_COPY_SUMMARY: &str = \"calls to `std::mem::drop` with a value that implements Copy. \\\n                                 Dropping a copy leaves the original intact.\";\n-const FORGET_COPY_SUMMARY: &str = \"calls to `std::mem::forget` with a value that implements Copy.\n+const FORGET_COPY_SUMMARY: &str = \"calls to `std::mem::forget` with a value that implements Copy. \\\n                                   Forgetting a copy leaves the original intact.\";\n \n #[allow(missing_copy_implementations)]\n pub struct Pass;\n \n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(DROP_REF, FORGET_REF)\n+        lint_array!(DROP_REF, FORGET_REF, DROP_COPY, FORGET_COPY)\n     }\n }\n "}, {"sha": "b1d674604118925a482e5e0e5c774b25276dc6e5", "filename": "tests/ui/drop_forget_ref.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5547fbb770ea27f5a09a93ce5d748ccc30acd670/tests%2Fui%2Fdrop_forget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5547fbb770ea27f5a09a93ce5d748ccc30acd670/tests%2Fui%2Fdrop_forget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.stderr?ref=5547fbb770ea27f5a09a93ce5d748ccc30acd670", "patch": "@@ -1,4 +1,4 @@\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:12:5\n    |\n 12 |     drop(&SomeStruct);\n@@ -15,7 +15,7 @@ note: argument has type &SomeStruct\n 12 |     drop(&SomeStruct);\n    |          ^^^^^^^^^^^\n \n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:13:5\n    |\n 13 |     forget(&SomeStruct);\n@@ -32,7 +32,7 @@ note: argument has type &SomeStruct\n 13 |     forget(&SomeStruct);\n    |            ^^^^^^^^^^^\n \n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:16:5\n    |\n 16 |     drop(&owned1);\n@@ -44,7 +44,7 @@ note: argument has type &SomeStruct\n 16 |     drop(&owned1);\n    |          ^^^^^^^\n \n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:17:5\n    |\n 17 |     drop(&&owned1);\n@@ -56,7 +56,7 @@ note: argument has type &&SomeStruct\n 17 |     drop(&&owned1);\n    |          ^^^^^^^^\n \n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:18:5\n    |\n 18 |     drop(&mut owned1);\n@@ -68,7 +68,7 @@ note: argument has type &mut SomeStruct\n 18 |     drop(&mut owned1);\n    |          ^^^^^^^^^^^\n \n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:21:5\n    |\n 21 |     forget(&owned2);\n@@ -80,7 +80,7 @@ note: argument has type &SomeStruct\n 21 |     forget(&owned2);\n    |            ^^^^^^^\n \n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:22:5\n    |\n 22 |     forget(&&owned2);\n@@ -92,7 +92,7 @@ note: argument has type &&SomeStruct\n 22 |     forget(&&owned2);\n    |            ^^^^^^^^\n \n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:23:5\n    |\n 23 |     forget(&mut owned2);\n@@ -104,7 +104,7 @@ note: argument has type &mut SomeStruct\n 23 |     forget(&mut owned2);\n    |            ^^^^^^^^^^^\n \n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:27:5\n    |\n 27 |     drop(reference1);\n@@ -116,7 +116,7 @@ note: argument has type &SomeStruct\n 27 |     drop(reference1);\n    |          ^^^^^^^^^^\n \n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:28:5\n    |\n 28 |     forget(&*reference1);\n@@ -128,7 +128,7 @@ note: argument has type &SomeStruct\n 28 |     forget(&*reference1);\n    |            ^^^^^^^^^^^^\n \n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:31:5\n    |\n 31 |     drop(reference2);\n@@ -140,7 +140,7 @@ note: argument has type &mut SomeStruct\n 31 |     drop(reference2);\n    |          ^^^^^^^^^^\n \n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:33:5\n    |\n 33 |     forget(reference3);\n@@ -152,7 +152,7 @@ note: argument has type &mut SomeStruct\n 33 |     forget(reference3);\n    |            ^^^^^^^^^^\n \n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:36:5\n    |\n 36 |     drop(reference4);\n@@ -164,7 +164,7 @@ note: argument has type &SomeStruct\n 36 |     drop(reference4);\n    |          ^^^^^^^^^^\n \n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:37:5\n    |\n 37 |     forget(reference4);\n@@ -176,7 +176,7 @@ note: argument has type &SomeStruct\n 37 |     forget(reference4);\n    |            ^^^^^^^^^^\n \n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:42:5\n    |\n 42 |     drop(&val);\n@@ -188,7 +188,7 @@ note: argument has type &T\n 42 |     drop(&val);\n    |          ^^^^\n \n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:48:5\n    |\n 48 |     forget(&val);\n@@ -200,7 +200,7 @@ note: argument has type &T\n 48 |     forget(&val);\n    |            ^^^^\n \n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:56:5\n    |\n 56 |     std::mem::drop(&SomeStruct);\n@@ -212,7 +212,7 @@ note: argument has type &SomeStruct\n 56 |     std::mem::drop(&SomeStruct);\n    |                    ^^^^^^^^^^^\n \n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n   --> $DIR/drop_forget_ref.rs:59:5\n    |\n 59 |     std::mem::forget(&SomeStruct);"}]}