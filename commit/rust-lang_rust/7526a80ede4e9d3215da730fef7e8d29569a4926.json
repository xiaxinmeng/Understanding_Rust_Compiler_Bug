{"sha": "7526a80ede4e9d3215da730fef7e8d29569a4926", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MjZhODBlZGU0ZTlkMzIxNWRhNzMwZmVmN2U4ZDI5NTY5YTQ5MjY=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-06-02T22:22:17Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-06-02T22:22:17Z"}, "message": "Document failure cases for `char_at` and friends.", "tree": {"sha": "f11611815d276000db964f1755b7d341e3016f6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f11611815d276000db964f1755b7d341e3016f6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7526a80ede4e9d3215da730fef7e8d29569a4926", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7526a80ede4e9d3215da730fef7e8d29569a4926", "html_url": "https://github.com/rust-lang/rust/commit/7526a80ede4e9d3215da730fef7e8d29569a4926", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7526a80ede4e9d3215da730fef7e8d29569a4926/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46dad765f047ae5cd49a4b6e509ab726c48838c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/46dad765f047ae5cd49a4b6e509ab726c48838c8", "html_url": "https://github.com/rust-lang/rust/commit/46dad765f047ae5cd49a4b6e509ab726c48838c8"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "c08f30152d5928ed1609325d276e72d307bba90e", "filename": "src/libcore/str.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7526a80ede4e9d3215da730fef7e8d29569a4926/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7526a80ede4e9d3215da730fef7e8d29569a4926/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=7526a80ede4e9d3215da730fef7e8d29569a4926", "patch": "@@ -1475,12 +1475,27 @@ pub trait StrSlice<'a> {\n     /// This function can be used to iterate over a unicode string in reverse.\n     ///\n     /// Returns 0 for next index if called on start index 0.\n+    ///\n+    /// # Failure\n+    ///\n+    /// If `i` is greater than the length of the string.\n+    /// If `i` is not an index following a valid UTF-8 character.\n     fn char_range_at_reverse(&self, start: uint) -> CharRange;\n \n-    /// Plucks the character starting at the `i`th byte of a string\n+    /// Plucks the character starting at the `i`th byte of a string.\n+    ///\n+    /// # Failure\n+    ///\n+    /// If `i` is greater than or equal to the length of the string.\n+    /// If `i` is not the index of the beginning of a valid UTF-8 character.\n     fn char_at(&self, i: uint) -> char;\n \n-    /// Plucks the character ending at the `i`th byte of a string\n+    /// Plucks the character ending at the `i`th byte of a string.\n+    ///\n+    /// # Failure\n+    ///\n+    /// If `i` is greater than the length of the string.\n+    /// If `i` is not an index following a valid UTF-8 character.\n     fn char_at_reverse(&self, i: uint) -> char;\n \n     /// Work with the byte buffer of a string as a byte slice."}]}