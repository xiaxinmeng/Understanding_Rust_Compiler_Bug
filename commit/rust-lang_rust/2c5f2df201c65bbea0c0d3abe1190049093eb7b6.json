{"sha": "2c5f2df201c65bbea0c0d3abe1190049093eb7b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNWYyZGYyMDFjNjViYmVhMGMwZDNhYmUxMTkwMDQ5MDkzZWI3YjY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-03T23:54:33Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-15T15:04:38Z"}, "message": "Generalize cases where specific move error ocurrs\n\nTrigger new diagnostic in `compile-fail/regions-escape-bound-fn.rs`\ntest, and not only in `compile-fail/regions-escape-bound-fn-2.rs`.", "tree": {"sha": "3c72d9217b50009437c01b0a014b51103fcd7b82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c72d9217b50009437c01b0a014b51103fcd7b82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c5f2df201c65bbea0c0d3abe1190049093eb7b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c5f2df201c65bbea0c0d3abe1190049093eb7b6", "html_url": "https://github.com/rust-lang/rust/commit/2c5f2df201c65bbea0c0d3abe1190049093eb7b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c5f2df201c65bbea0c0d3abe1190049093eb7b6/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c31c60cbb9ceb75402240bfe1adc9c2b48a29aa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c31c60cbb9ceb75402240bfe1adc9c2b48a29aa0", "html_url": "https://github.com/rust-lang/rust/commit/c31c60cbb9ceb75402240bfe1adc9c2b48a29aa0"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "645c8403b8e446d14d0441c184c62eb573cff991", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c5f2df201c65bbea0c0d3abe1190049093eb7b6/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c5f2df201c65bbea0c0d3abe1190049093eb7b6/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=2c5f2df201c65bbea0c0d3abe1190049093eb7b6", "patch": "@@ -1071,8 +1071,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         // #45983: when trying to assign the contents of an argument to a binding outside of a\n         // closure, provide a specific message pointing this out.\n         if let (&SubregionOrigin::BindingTypeIsNotValidAtDecl(ref external_span),\n-                &SubregionOrigin::Subtype(_),\n-                &RegionKind::ReFree(ref free_region)) = (&sub_origin, &sup_origin, sup_region) {\n+                &RegionKind::ReFree(ref free_region)) = (&sub_origin, sup_region) {\n             let hir = &self.tcx.hir;\n             if let Some(node_id) = hir.as_local_node_id(free_region.scope) {\n                 match hir.get(node_id) {"}, {"sha": "678647ff28da5d31e8105ec0682d4ba6320403d1", "filename": "src/test/compile-fail/closure-expected-type/expect-region-supply-region.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c5f2df201c65bbea0c0d3abe1190049093eb7b6/src%2Ftest%2Fcompile-fail%2Fclosure-expected-type%2Fexpect-region-supply-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c5f2df201c65bbea0c0d3abe1190049093eb7b6/src%2Ftest%2Fcompile-fail%2Fclosure-expected-type%2Fexpect-region-supply-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-expected-type%2Fexpect-region-supply-region.rs?ref=2c5f2df201c65bbea0c0d3abe1190049093eb7b6", "patch": "@@ -25,7 +25,7 @@ fn expect_bound_supply_nothing() {\n     // it to escape into `f`:\n     let mut f: Option<&u32> = None;\n     closure_expecting_bound(|x| {\n-        f = Some(x); //~ ERROR E0495\n+        f = Some(x); //~ ERROR borrowed data cannot be moved outside of its closure\n     });\n }\n \n@@ -35,7 +35,7 @@ fn expect_bound_supply_bound() {\n     // closure:\n     let mut f: Option<&u32> = None;\n     closure_expecting_bound(|x: &u32| {\n-        f = Some(x); //~ ERROR E0495\n+        f = Some(x); //~ ERROR borrowed data cannot be moved outside of its closure\n     });\n }\n \n@@ -50,7 +50,7 @@ fn expect_bound_supply_named<'x>() {\n \n         // And we still cannot let `x` escape into `f`.\n         f = Some(x);\n-        //~^ ERROR cannot infer\n+        //~^ ERROR borrowed data cannot be moved outside of its closure\n     });\n }\n "}, {"sha": "7445501c4ebe6c4d165e473a24f786ee4f29a061", "filename": "src/test/compile-fail/issue-7573.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c5f2df201c65bbea0c0d3abe1190049093eb7b6/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c5f2df201c65bbea0c0d3abe1190049093eb7b6/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs?ref=2c5f2df201c65bbea0c0d3abe1190049093eb7b6", "patch": "@@ -24,7 +24,8 @@ impl CrateId {\n }\n \n pub fn remove_package_from_database() {\n-    let mut lines_to_use: Vec<&CrateId> = Vec::new(); //~ ERROR E0495\n+    let mut lines_to_use: Vec<&CrateId> = Vec::new();\n+    //~^ ERROR borrowed data cannot be moved outside of its closure\n     let push_id = |installed_id: &CrateId| {\n         lines_to_use.push(installed_id);\n     };"}, {"sha": "df07aec998a3bf51e5b54dbba0d6381fa39c99d8", "filename": "src/test/compile-fail/regions-escape-bound-fn-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c5f2df201c65bbea0c0d3abe1190049093eb7b6/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c5f2df201c65bbea0c0d3abe1190049093eb7b6/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn-2.rs?ref=2c5f2df201c65bbea0c0d3abe1190049093eb7b6", "patch": "@@ -16,5 +16,5 @@ fn with_int<F>(f: F) where F: FnOnce(&isize) {\n fn main() {\n     let mut x = None;\n     with_int(|y| x = Some(y));\n-         //~^ ERROR borrowed data cannot be moved outside of its closure\n+    //~^ ERROR borrowed data cannot be moved outside of its closure\n }"}, {"sha": "86d91f530627b0b1e29ad03455de4cc6c2547303", "filename": "src/test/compile-fail/regions-escape-bound-fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c5f2df201c65bbea0c0d3abe1190049093eb7b6/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c5f2df201c65bbea0c0d3abe1190049093eb7b6/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn.rs?ref=2c5f2df201c65bbea0c0d3abe1190049093eb7b6", "patch": "@@ -15,5 +15,6 @@ fn with_int<F>(f: F) where F: FnOnce(&isize) {\n \n fn main() {\n     let mut x: Option<&isize> = None;\n-    with_int(|y| x = Some(y));   //~ ERROR cannot infer\n+    with_int(|y| x = Some(y));\n+    //~^ ERROR borrowed data cannot be moved outside of its closure\n }"}, {"sha": "e422dd02f06fa1847ccad33df8057e4715f3ccfa", "filename": "src/test/compile-fail/regions-escape-unboxed-closure.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c5f2df201c65bbea0c0d3abe1190049093eb7b6/src%2Ftest%2Fcompile-fail%2Fregions-escape-unboxed-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c5f2df201c65bbea0c0d3abe1190049093eb7b6/src%2Ftest%2Fcompile-fail%2Fregions-escape-unboxed-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-unboxed-closure.rs?ref=2c5f2df201c65bbea0c0d3abe1190049093eb7b6", "patch": "@@ -13,5 +13,6 @@ fn with_int(f: &mut FnMut(&isize)) {\n \n fn main() {\n     let mut x: Option<&isize> = None;\n-    with_int(&mut |y| x = Some(y));   //~ ERROR cannot infer\n+    with_int(&mut |y| x = Some(y));\n+    //~^ ERROR borrowed data cannot be moved outside of its closure\n }"}]}