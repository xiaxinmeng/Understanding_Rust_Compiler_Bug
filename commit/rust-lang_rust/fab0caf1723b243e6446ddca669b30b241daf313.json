{"sha": "fab0caf1723b243e6446ddca669b30b241daf313", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYjBjYWYxNzIzYjI0M2U2NDQ2ZGRjYTY2OWIzMGIyNDFkYWYzMTM=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-10-23T16:46:52Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-03T20:24:34Z"}, "message": "Mark entire local as promoted even if only part is used", "tree": {"sha": "39d6b2124e3f498e7030bbad8ab89d6cf4852097", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39d6b2124e3f498e7030bbad8ab89d6cf4852097"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fab0caf1723b243e6446ddca669b30b241daf313", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fab0caf1723b243e6446ddca669b30b241daf313", "html_url": "https://github.com/rust-lang/rust/commit/fab0caf1723b243e6446ddca669b30b241daf313", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fab0caf1723b243e6446ddca669b30b241daf313/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f39205b5d9825fcf35989b5a04d115d411175d18", "url": "https://api.github.com/repos/rust-lang/rust/commits/f39205b5d9825fcf35989b5a04d115d411175d18", "html_url": "https://github.com/rust-lang/rust/commit/f39205b5d9825fcf35989b5a04d115d411175d18"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "5dbb4d8d73e3edd360127359a5db6a691120d44b", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fab0caf1723b243e6446ddca669b30b241daf313/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab0caf1723b243e6446ddca669b30b241daf313/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=fab0caf1723b243e6446ddca669b30b241daf313", "patch": "@@ -1067,30 +1067,28 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n         };\n         debug!(\"qualify_const: promotion_candidates={:?}\", promotion_candidates);\n         for candidate in promotion_candidates {\n-            match candidate {\n+            let promoted_place = match candidate {\n                 Candidate::Repeat(Location { block: bb, statement_index: stmt_idx }) => {\n-                    if let StatementKind::Assign(box(_, Rvalue::Repeat(\n-                        Operand::Move(place),\n-                        _\n-                    ))) = &self.body[bb].statements[stmt_idx].kind {\n-                        if let Some(index) = place.as_local() {\n-                            promoted_temps.insert(index);\n-                        }\n+                    match &self.body[bb].statements[stmt_idx].kind {\n+                        StatementKind::Assign(box(_, Rvalue::Repeat(Operand::Move(place), _)))\n+                            => place,\n+                        _ => continue,\n                     }\n                 }\n                 Candidate::Ref(Location { block: bb, statement_index: stmt_idx }) => {\n-                    if let StatementKind::Assign(\n-                        box(\n-                            _,\n-                            Rvalue::Ref(_, _, place)\n-                        )\n-                    ) = &self.body[bb].statements[stmt_idx].kind {\n-                        if let Some(index) = place.as_local() {\n-                            promoted_temps.insert(index);\n-                        }\n+                    match &self.body[bb].statements[stmt_idx].kind {\n+                        StatementKind::Assign(box( _, Rvalue::Ref(_, _, place))) => place,\n+                        _ => continue,\n                     }\n                 }\n-                Candidate::Argument { .. } => {}\n+                Candidate::Argument { .. } => continue,\n+            };\n+\n+            match promoted_place.base {\n+                PlaceBase::Local(local) if !promoted_place.is_indirect() => {\n+                    promoted_temps.insert(local);\n+                }\n+                _ => {}\n             }\n         }\n "}]}