{"sha": "22f43e2d2b2cdd5e6e6d771a01542a0e5afc6441", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZjQzZTJkMmIyY2RkNWU2ZTZkNzcxYTAxNTQyYTBlNWFmYzY0NDE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-20T06:27:25Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-25T08:20:45Z"}, "message": "implement checking for ADTs", "tree": {"sha": "2010ceb63906d12c1f8f69bd26fca53dcbf1d74b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2010ceb63906d12c1f8f69bd26fca53dcbf1d74b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22f43e2d2b2cdd5e6e6d771a01542a0e5afc6441", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAll2/10ACgkQpp+NIls6\n19lwWQ//cPP6JBOtozZXKk97qx6M3VvdaKYG3gPxgc9L5viK4E4dXx2rV8EE7iBa\nX2jNpHXo6lgSvnot5YGsYNwL7o6psaUtA+2DVYfbBSF6nGhS309Y57rTgDzZwMWx\nJGOzIjGDIUHxW0Kqg+4XCwGZaykVQPiCKHWb+bEIgxT2WE6EJrSFxQvt0N0bQRp2\nnerxlfF4864MFSazxpxkRhViGAhwqoWFYd6IUJsDW1qhEemFnYD3nfMIOoHhUR0e\neYWZTbaJA5cPKIFFeHOMHR6fnAAe3yFFkHD3vhOHY13H6aRZZZ4J6OBV1xfELDZW\nIBO9MMaQNVCDouBHo40yCCG9tL6L70dAFZKeuMGUuO6+vMYHQ0hwWa5r3qyCLiov\nmJ2X7iWTHQ0yEIH7gxgslAc11mcgSwN47e88WdX+Zqc186ylJ9a4Y0clhQYa2vLP\n3b82VPmGwm3JPg+NEDTitkCxUM28aPHP9C+vtg9vkfLOu4VF7axAUDUpxFudsjwP\nOqmg6zyoVJg7pKjzxGcEXj9MJu2BQVgRy78N7mBwFELjJPdVO1XSmUTu96S0fit4\nvDtiHAUnPB39HFj9LpQUNIZhZNR0OA/zieIefQLIPkQEd+/SDS9drUMxcZ10eJlY\nxfEA3f0Yja+5FvXRepoz0esRKR7Dnp5wfVtiTAwDw+llvD0YD2o=\n=8YU7\n-----END PGP SIGNATURE-----", "payload": "tree 2010ceb63906d12c1f8f69bd26fca53dcbf1d74b\nparent 02e802811bd121759efc5516762898d1de3f2209\nauthor Ralf Jung <post@ralfj.de> 1497940045 -0700\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1500970845 +0200\n\nimplement checking for ADTs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22f43e2d2b2cdd5e6e6d771a01542a0e5afc6441", "html_url": "https://github.com/rust-lang/rust/commit/22f43e2d2b2cdd5e6e6d771a01542a0e5afc6441", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22f43e2d2b2cdd5e6e6d771a01542a0e5afc6441/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02e802811bd121759efc5516762898d1de3f2209", "url": "https://api.github.com/repos/rust-lang/rust/commits/02e802811bd121759efc5516762898d1de3f2209", "html_url": "https://github.com/rust-lang/rust/commit/02e802811bd121759efc5516762898d1de3f2209"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "78e09e3621dfad3ba1a1a9ae058dc3d1e1915d6f", "filename": "src/librustc_mir/interpret/lvalue.rs", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/22f43e2d2b2cdd5e6e6d771a01542a0e5afc6441/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f43e2d2b2cdd5e6e6d771a01542a0e5afc6441/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs?ref=22f43e2d2b2cdd5e6e6d771a01542a0e5afc6441", "patch": "@@ -1,7 +1,7 @@\n use rustc::hir::Mutability as TyMutability;\n use rustc::mir;\n use rustc::ty::layout::{Size, Align};\n-use rustc::ty::{self, Ty, TypeAndMut};\n+use rustc::ty::{self, Ty};\n use rustc_data_structures::indexed_vec::Idx;\n use syntax::ast::Mutability;\n \n@@ -469,9 +469,27 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n // Validity checks\n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n+    fn variant_check_valid(\n+        &mut self,\n+        lvalue: Lvalue<'tcx>,\n+        ty: Ty<'tcx>,\n+        variant: &ty::VariantDef,\n+        subst: &ty::subst::Substs<'tcx>,\n+        outer_mutbl: TyMutability\n+    ) -> EvalResult<'tcx> {\n+        // TODO: Take visibility/privacy into account.\n+        for (idx, field) in variant.fields.iter().enumerate() {\n+            let field_ty = field.ty(self.tcx, subst);\n+            let field_lvalue = self.lvalue_field(lvalue, idx, ty, field_ty)?;\n+            self.acquire_valid(field_lvalue, field_ty, outer_mutbl)?;\n+        }\n+        Ok(())\n+    }\n+\n     pub(super) fn acquire_valid(&mut self, lvalue: Lvalue<'tcx>, ty: Ty<'tcx>, outer_mutbl: TyMutability) -> EvalResult<'tcx> {\n         use rustc::ty::TypeVariants::*;\n         use rustc::ty::RegionKind::*;\n+        use rustc::ty::AdtKind;\n         use self::TyMutability::*;\n \n         trace!(\"Validating {:?} at type {}, outer mutability {:?}\", lvalue, ty, outer_mutbl);\n@@ -485,7 +503,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 // TODO: Check if these are valid bool/float/UTF-8, respectively (and in particular, not undef).\n                 Ok(())\n             }\n-            TyRef(region, TypeAndMut { ty: pointee_ty, mutbl }) => {\n+            TyRef(region, ty::TypeAndMut { ty: pointee_ty, mutbl }) => {\n                 // Acquire lock\n                 let val = self.read_lvalue(lvalue)?;\n                 let (len, _) = self.size_and_align_of_dst(pointee_ty, val)?;\n@@ -520,6 +538,35 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 // TODO: Check if the signature matches (should be the same check as what terminator/mod.rs already does on call?).\n                 Ok(())\n             }\n+            TyAdt(adt, subst) => {\n+                match adt.adt_kind() {\n+                    AdtKind::Enum => {\n+                        // TODO: Can we get the discriminant without forcing an allocation?\n+                        let ptr = self.force_allocation(lvalue)?.to_ptr()?;\n+                        let discr = self.read_discriminant_value(ptr, ty)?;\n+\n+                        // Get variant index for discriminant\n+                        let variant_idx = adt.discriminants(self.tcx)\n+                            .position(|variant_discr| variant_discr.to_u128_unchecked() == discr)\n+                            .ok_or(EvalError::InvalidDiscriminant)?;\n+\n+                        // Downcast to this variant\n+                        let lvalue = self.eval_lvalue_projection(lvalue, ty, &mir::ProjectionElem::Downcast(adt, variant_idx))?;\n+\n+                        // Recursively validate the fields\n+                        let variant = &adt.variants[variant_idx];\n+                        self.variant_check_valid(lvalue, ty, variant, subst, outer_mutbl)\n+                    }\n+                    AdtKind::Struct => {\n+                        self.variant_check_valid(lvalue, ty, adt.struct_variant(), subst, outer_mutbl)\n+                    }\n+                    AdtKind::Union => {\n+                        // No guarantees are provided for union types.\n+                        // TODO: Make sure that all access to union fields is unsafe; otherwise, we may have some checking to do (but what exactly?)\n+                        Ok(())\n+                    }\n+                }\n+            }\n             _ => unimplemented!(\"Unimplemented type encountered when checking validity.\")\n         }\n     }"}]}