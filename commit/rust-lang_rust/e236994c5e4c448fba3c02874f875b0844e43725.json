{"sha": "e236994c5e4c448fba3c02874f875b0844e43725", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMzY5OTRjNWU0YzQ0OGZiYTNjMDI4NzRmODc1YjA4NDRlNDM3MjU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-01-31T15:08:14Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-02-10T02:38:07Z"}, "message": "Add a `fatal_cycle` attribute for queries which indicates that they will cause a fatal error on query cycles", "tree": {"sha": "ca8b3c38e30d8174c6ee16db7490a1b25688404f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca8b3c38e30d8174c6ee16db7490a1b25688404f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e236994c5e4c448fba3c02874f875b0844e43725", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e236994c5e4c448fba3c02874f875b0844e43725", "html_url": "https://github.com/rust-lang/rust/commit/e236994c5e4c448fba3c02874f875b0844e43725", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e236994c5e4c448fba3c02874f875b0844e43725/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bcda48a30b21e46b81a7989deb30a3ba85fb918", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bcda48a30b21e46b81a7989deb30a3ba85fb918", "html_url": "https://github.com/rust-lang/rust/commit/3bcda48a30b21e46b81a7989deb30a3ba85fb918"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "21ffe6b895e72cca62aefae16ae84a78a278fab1", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e236994c5e4c448fba3c02874f875b0844e43725/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e236994c5e4c448fba3c02874f875b0844e43725/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=e236994c5e4c448fba3c02874f875b0844e43725", "patch": "@@ -78,6 +78,11 @@ pub use self::on_disk_cache::OnDiskCache;\n // a way that memoizes and does dep-graph tracking,\n // wrapping around the actual chain of providers that\n // the driver creates (using several `rustc_*` crates).\n+//\n+// The result of query must implement Clone. They must also implement ty::maps::values::Value\n+// which produces an appropiate error value if the query resulted in a query cycle.\n+// Queries marked with `fatal_cycle` do not need that implementation\n+// as they will raise an fatal error on query cycles instead.\n define_maps! { <'tcx>\n     /// Records the type of every item.\n     [] fn type_of: TypeOfItem(DefId) -> Ty<'tcx>,\n@@ -267,13 +272,13 @@ define_maps! { <'tcx>\n     [] fn dylib_dependency_formats: DylibDepFormats(CrateNum)\n                                     -> Rc<Vec<(CrateNum, LinkagePreference)>>,\n \n-    [] fn is_panic_runtime: IsPanicRuntime(CrateNum) -> bool,\n-    [] fn is_compiler_builtins: IsCompilerBuiltins(CrateNum) -> bool,\n-    [] fn has_global_allocator: HasGlobalAllocator(CrateNum) -> bool,\n-    [] fn is_sanitizer_runtime: IsSanitizerRuntime(CrateNum) -> bool,\n-    [] fn is_profiler_runtime: IsProfilerRuntime(CrateNum) -> bool,\n-    [] fn panic_strategy: GetPanicStrategy(CrateNum) -> PanicStrategy,\n-    [] fn is_no_builtins: IsNoBuiltins(CrateNum) -> bool,\n+    [fatal_cycle] fn is_panic_runtime: IsPanicRuntime(CrateNum) -> bool,\n+    [fatal_cycle] fn is_compiler_builtins: IsCompilerBuiltins(CrateNum) -> bool,\n+    [fatal_cycle] fn has_global_allocator: HasGlobalAllocator(CrateNum) -> bool,\n+    [fatal_cycle] fn is_sanitizer_runtime: IsSanitizerRuntime(CrateNum) -> bool,\n+    [fatal_cycle] fn is_profiler_runtime: IsProfilerRuntime(CrateNum) -> bool,\n+    [fatal_cycle] fn panic_strategy: GetPanicStrategy(CrateNum) -> PanicStrategy,\n+    [fatal_cycle] fn is_no_builtins: IsNoBuiltins(CrateNum) -> bool,\n \n     [] fn extern_crate: ExternCrate(DefId) -> Rc<Option<ExternCrate>>,\n "}, {"sha": "f02c7cbd0ea3e8dcf6d36bbd9201cd97e541a44c", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e236994c5e4c448fba3c02874f875b0844e43725/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e236994c5e4c448fba3c02874f875b0844e43725/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=e236994c5e4c448fba3c02874f875b0844e43725", "patch": "@@ -183,6 +183,19 @@ macro_rules! profq_key {\n     }\n }\n \n+macro_rules! handle_cycle_error {\n+    ([][$this: expr]) => {{\n+        Value::from_cycle_error($this.global_tcx())\n+    }};\n+    ([fatal_cycle$(, $modifiers:ident)*][$this:expr]) => {{\n+        $this.tcx.sess.abort_if_errors();\n+        unreachable!();\n+    }};\n+    ([$other:ident$(, $modifiers:ident)*][$($args:tt)*]) => {\n+        handle_cycle_error!([$($modifiers),*][$($args)*])\n+    };\n+}\n+\n macro_rules! define_maps {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n@@ -564,7 +577,7 @@ macro_rules! define_maps {\n             pub fn $name(self, key: $K) -> $V {\n                 queries::$name::try_get(self.tcx, self.span, key).unwrap_or_else(|mut e| {\n                     e.emit();\n-                    Value::from_cycle_error(self.global_tcx())\n+                    handle_cycle_error!([$($modifiers)*][self])\n                 })\n             })*\n         }\n@@ -583,7 +596,7 @@ macro_rules! define_maps {\n \n macro_rules! define_map_struct {\n     (tcx: $tcx:tt,\n-     input: ($(([$(modifiers:tt)*] [$($attr:tt)*] [$name:ident]))*)) => {\n+     input: ($(([$($modifiers:tt)*] [$($attr:tt)*] [$name:ident]))*)) => {\n         pub struct Maps<$tcx> {\n             providers: IndexVec<CrateNum, Providers<$tcx>>,\n             query_stack: RefCell<Vec<(Span, Query<$tcx>)>>,"}]}