{"sha": "4156bc44176d93296a0f1834690dd9792390cec6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNTZiYzQ0MTc2ZDkzMjk2YTBmMTgzNDY5MGRkOTc5MjM5MGNlYzY=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-21T02:26:47Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-21T18:17:13Z"}, "message": "sys: reveal std::io representation to sys module\n\nThis commit adds a `AsInner` trait to `sys_common` and provides\nimplementations on many `std::io` types. This is a building block for\nexposing platform-specific APIs that hook into `std::io` types.", "tree": {"sha": "e0ed8ebfe17df893157b8d529dbdb22c57aee598", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0ed8ebfe17df893157b8d529dbdb22c57aee598"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4156bc44176d93296a0f1834690dd9792390cec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4156bc44176d93296a0f1834690dd9792390cec6", "html_url": "https://github.com/rust-lang/rust/commit/4156bc44176d93296a0f1834690dd9792390cec6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4156bc44176d93296a0f1834690dd9792390cec6/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9f6d696420107f82304b992cf623b806995fe18", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9f6d696420107f82304b992cf623b806995fe18", "html_url": "https://github.com/rust-lang/rust/commit/c9f6d696420107f82304b992cf623b806995fe18"}], "stats": {"total": 92, "additions": 73, "deletions": 19}, "files": [{"sha": "6d29f3d25382c9f4602ce693ade253c1e4afc57d", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4156bc44176d93296a0f1834690dd9792390cec6/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4156bc44176d93296a0f1834690dd9792390cec6/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=4156bc44176d93296a0f1834690dd9792390cec6", "patch": "@@ -88,8 +88,8 @@ pub struct File {\n     last_nread: int,\n }\n \n-impl sys_common::AsFileDesc for File {\n-    fn as_fd(&self) -> &fs_imp::FileDesc {\n+impl sys_common::AsInner<fs_imp::FileDesc> for File {\n+    fn as_inner(&self) -> &fs_imp::FileDesc {\n         &self.fd\n     }\n }"}, {"sha": "2984fa5963147c8b865ddf83dfbd4c19bf89d1ac", "filename": "src/libstd/io/net/pipe.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4156bc44176d93296a0f1834690dd9792390cec6/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4156bc44176d93296a0f1834690dd9792390cec6/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs?ref=4156bc44176d93296a0f1834690dd9792390cec6", "patch": "@@ -33,6 +33,8 @@ use sys::pipe::UnixStream as UnixStreamImp;\n use sys::pipe::UnixListener as UnixListenerImp;\n use sys::pipe::UnixAcceptor as UnixAcceptorImp;\n \n+use sys_common;\n+\n /// A stream which communicates over a named pipe.\n pub struct UnixStream {\n     inner: UnixStreamImp,\n@@ -145,6 +147,12 @@ impl Writer for UnixStream {\n     }\n }\n \n+impl sys_common::AsInner<UnixStreamImp> for UnixStream {\n+    fn as_inner(&self) -> &UnixStreamImp {\n+        &self.inner\n+    }\n+}\n+\n /// A value that can listen for incoming named pipe connection requests.\n pub struct UnixListener {\n     /// The internal, opaque runtime Unix listener.\n@@ -186,6 +194,12 @@ impl Listener<UnixStream, UnixAcceptor> for UnixListener {\n     }\n }\n \n+impl sys_common::AsInner<UnixListenerImp> for UnixListener {\n+    fn as_inner(&self) -> &UnixListenerImp {\n+        &self.inner\n+    }\n+}\n+\n /// A value that can accept named pipe connections, returned from `listen()`.\n pub struct UnixAcceptor {\n     /// The internal, opaque runtime Unix acceptor.\n@@ -247,6 +261,12 @@ impl Clone for UnixAcceptor {\n     }\n }\n \n+impl sys_common::AsInner<UnixAcceptorImp> for UnixAcceptor {\n+    fn as_inner(&self) -> &UnixAcceptorImp {\n+        &self.inner\n+    }\n+}\n+\n #[cfg(test)]\n #[allow(experimental)]\n mod tests {"}, {"sha": "dc7970be8f54d64142efe8e64be98f40ac22550c", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4156bc44176d93296a0f1834690dd9792390cec6/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4156bc44176d93296a0f1834690dd9792390cec6/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=4156bc44176d93296a0f1834690dd9792390cec6", "patch": "@@ -31,6 +31,8 @@ use sys::tcp::TcpStream as TcpStreamImp;\n use sys::tcp::TcpListener as TcpListenerImp;\n use sys::tcp::TcpAcceptor as TcpAcceptorImp;\n \n+use sys_common;\n+\n /// A structure which represents a TCP stream between a local socket and a\n /// remote socket.\n ///\n@@ -256,6 +258,12 @@ impl Writer for TcpStream {\n     }\n }\n \n+impl sys_common::AsInner<TcpStreamImp> for TcpStream {\n+    fn as_inner(&self) -> &TcpStreamImp {\n+        &self.inner\n+    }\n+}\n+\n /// A structure representing a socket server. This listener is used to create a\n /// `TcpAcceptor` which can be used to accept sockets on a local port.\n ///\n@@ -325,6 +333,12 @@ impl Listener<TcpStream, TcpAcceptor> for TcpListener {\n     }\n }\n \n+impl sys_common::AsInner<TcpListenerImp> for TcpListener {\n+    fn as_inner(&self) -> &TcpListenerImp {\n+        &self.inner\n+    }\n+}\n+\n /// The accepting half of a TCP socket server. This structure is created through\n /// a `TcpListener`'s `listen` method, and this object can be used to accept new\n /// `TcpStream` instances.\n@@ -452,6 +466,12 @@ impl Clone for TcpAcceptor {\n     }\n }\n \n+impl sys_common::AsInner<TcpAcceptorImp> for TcpAcceptor {\n+    fn as_inner(&self) -> &TcpAcceptorImp {\n+        &self.inner\n+    }\n+}\n+\n #[cfg(test)]\n #[allow(experimental)]\n mod test {"}, {"sha": "a7239ca0f2f984b7d607cc9f0884954bb196b913", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4156bc44176d93296a0f1834690dd9792390cec6/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4156bc44176d93296a0f1834690dd9792390cec6/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=4156bc44176d93296a0f1834690dd9792390cec6", "patch": "@@ -21,6 +21,7 @@ use io::{Reader, Writer, IoResult};\n use option::Option;\n use result::{Ok, Err};\n use sys::udp::UdpSocket as UdpSocketImp;\n+use sys_common;\n \n /// A User Datagram Protocol socket.\n ///\n@@ -184,6 +185,12 @@ impl Clone for UdpSocket {\n     }\n }\n \n+impl sys_common::AsInner<UdpSocketImp> for UdpSocket {\n+    fn as_inner(&self) -> &UdpSocketImp {\n+        &self.inner\n+    }\n+}\n+\n /// A type that allows convenient usage of a UDP stream connected to one\n /// address via the `Reader` and `Writer` traits.\n ///"}, {"sha": "41676cdf6e9cc704e8fc3d1d6014dfd05e51c328", "filename": "src/libstd/io/pipe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4156bc44176d93296a0f1834690dd9792390cec6/src%2Flibstd%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4156bc44176d93296a0f1834690dd9792390cec6/src%2Flibstd%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fpipe.rs?ref=4156bc44176d93296a0f1834690dd9792390cec6", "patch": "@@ -86,8 +86,8 @@ impl PipeStream {\n     }\n }\n \n-impl sys_common::AsFileDesc for PipeStream {\n-    fn as_fd(&self) -> &sys::fs::FileDesc {\n+impl sys_common::AsInner<sys::fs::FileDesc> for PipeStream {\n+    fn as_inner(&self) -> &sys::fs::FileDesc {\n         &*self.inner\n     }\n }"}, {"sha": "769278eda9c169fc88fab581de0ebc17d2725d6a", "filename": "src/libstd/sys/common/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4156bc44176d93296a0f1834690dd9792390cec6/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4156bc44176d93296a0f1834690dd9792390cec6/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs?ref=4156bc44176d93296a0f1834690dd9792390cec6", "patch": "@@ -13,7 +13,7 @@\n \n use io::{mod, IoError, IoResult};\n use prelude::*;\n-use sys::{last_error, retry, fs};\n+use sys::{last_error, retry};\n use c_str::CString;\n use num::Int;\n use path::BytesContainer;\n@@ -83,10 +83,9 @@ pub fn keep_going(data: &[u8], f: |*const u8, uint| -> i64) -> i64 {\n     return (origamt - amt) as i64;\n }\n \n-// traits for extracting representations from\n-\n-pub trait AsFileDesc {\n-    fn as_fd(&self) -> &fs::FileDesc;\n+// A trait for extracting representations from std::io types\n+pub trait AsInner<Inner> {\n+    fn as_inner(&self) -> &Inner;\n }\n \n pub trait ProcessConfig<K: BytesContainer, V: BytesContainer> {"}, {"sha": "3f70fb5c1a56cf996b66de3ea386f7b35a59e154", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4156bc44176d93296a0f1834690dd9792390cec6/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4156bc44176d93296a0f1834690dd9792390cec6/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=4156bc44176d93296a0f1834690dd9792390cec6", "patch": "@@ -133,7 +133,7 @@ impl UnixStream {\n         }\n     }\n \n-    fn fd(&self) -> fd_t { self.inner.fd }\n+    pub fn fd(&self) -> fd_t { self.inner.fd }\n \n     #[cfg(target_os = \"linux\")]\n     fn lock_nonblocking(&self) {}\n@@ -222,7 +222,7 @@ impl UnixListener {\n         })\n     }\n \n-    fn fd(&self) -> fd_t { self.inner.fd }\n+    pub fn fd(&self) -> fd_t { self.inner.fd }\n \n     pub fn listen(self) -> IoResult<UnixAcceptor> {\n         match unsafe { libc::listen(self.fd(), 128) } {\n@@ -260,7 +260,7 @@ struct AcceptorInner {\n }\n \n impl UnixAcceptor {\n-    fn fd(&self) -> fd_t { self.inner.listener.fd() }\n+    pub fn fd(&self) -> fd_t { self.inner.listener.fd() }\n \n     pub fn accept(&mut self) -> IoResult<UnixStream> {\n         let deadline = if self.deadline == 0 {None} else {Some(self.deadline)};"}, {"sha": "76c316076f93e9a5af84548a48074f73c4f4096a", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4156bc44176d93296a0f1834690dd9792390cec6/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4156bc44176d93296a0f1834690dd9792390cec6/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=4156bc44176d93296a0f1834690dd9792390cec6", "patch": "@@ -24,7 +24,7 @@ use hash::Hash;\n use sys::{mod, retry, c, wouldblock, set_nonblocking, ms_to_timeval};\n use sys::fs::FileDesc;\n use sys_common::helper_thread::Helper;\n-use sys_common::{AsFileDesc, mkerr_libc, timeout};\n+use sys_common::{AsInner, mkerr_libc, timeout};\n \n pub use sys_common::ProcessConfig;\n \n@@ -56,7 +56,7 @@ impl Process {\n     pub fn spawn<K, V, C, P>(cfg: &C, in_fd: Option<P>,\n                               out_fd: Option<P>, err_fd: Option<P>)\n                               -> IoResult<Process>\n-        where C: ProcessConfig<K, V>, P: AsFileDesc,\n+        where C: ProcessConfig<K, V>, P: AsInner<FileDesc>,\n               K: BytesContainer + Eq + Hash, V: BytesContainer\n     {\n         use libc::funcs::posix88::unistd::{fork, dup2, close, chdir, execvp};\n@@ -183,7 +183,7 @@ impl Process {\n                             libc::open(devnull.as_ptr(), flags, 0)\n                         }\n                         Some(obj) => {\n-                            let fd = obj.as_fd().fd();\n+                            let fd = obj.as_inner().fd();\n                             // Leak the memory and the file descriptor. We're in the\n                             // child now an all our resources are going to be\n                             // cleaned up very soon"}, {"sha": "60bd2b1370f55d95422e17739ea43969374b0aa3", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4156bc44176d93296a0f1834690dd9792390cec6/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4156bc44176d93296a0f1834690dd9792390cec6/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=4156bc44176d93296a0f1834690dd9792390cec6", "patch": "@@ -329,7 +329,7 @@ impl UnixStream {\n         }\n     }\n \n-    fn handle(&self) -> libc::HANDLE { self.inner.handle }\n+    pub fn handle(&self) -> libc::HANDLE { self.inner.handle }\n \n     fn read_closed(&self) -> bool {\n         self.inner.read_closed.load(atomic::SeqCst)\n@@ -585,6 +585,10 @@ impl UnixListener {\n             }),\n         })\n     }\n+\n+    pub fn handle(&self) -> libc::HANDLE {\n+        self.handle\n+    }\n }\n \n impl Drop for UnixListener {\n@@ -729,6 +733,10 @@ impl UnixAcceptor {\n             Ok(())\n         }\n     }\n+\n+    pub fn handle(&self) -> libc::HANDLE {\n+        self.event.ref0\n+    }\n }\n \n impl Clone for UnixAcceptor {"}, {"sha": "eddb89c673d3e96998e28531506fb23b3b64a4e9", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4156bc44176d93296a0f1834690dd9792390cec6/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4156bc44176d93296a0f1834690dd9792390cec6/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=4156bc44176d93296a0f1834690dd9792390cec6", "patch": "@@ -26,7 +26,7 @@ use sys::fs;\n use sys::{mod, retry, c, wouldblock, set_nonblocking, ms_to_timeval, timer};\n use sys::fs::FileDesc;\n use sys_common::helper_thread::Helper;\n-use sys_common::{AsFileDesc, mkerr_libc, timeout};\n+use sys_common::{AsInner, mkerr_libc, timeout};\n \n use io::fs::PathExtensions;\n use string::String;\n@@ -105,7 +105,7 @@ impl Process {\n     pub fn spawn<K, V, C, P>(cfg: &C, in_fd: Option<P>,\n                               out_fd: Option<P>, err_fd: Option<P>)\n                               -> IoResult<Process>\n-        where C: ProcessConfig<K, V>, P: AsFileDesc,\n+        where C: ProcessConfig<K, V>, P: AsInner<FileDesc>,\n               K: BytesContainer + Eq + Hash, V: BytesContainer\n     {\n         use libc::types::os::arch::extra::{DWORD, HANDLE, STARTUPINFO};\n@@ -195,7 +195,7 @@ impl Process {\n                         }\n                     }\n                     Some(ref fd) => {\n-                        let orig = get_osfhandle(fd.as_fd().fd()) as HANDLE;\n+                        let orig = get_osfhandle(fd.as_inner().fd()) as HANDLE;\n                         if orig == INVALID_HANDLE_VALUE {\n                             return Err(super::last_error())\n                         }"}]}