{"sha": "7edc16c7be4dab322305487d31e18c2b79ed26c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZGMxNmM3YmU0ZGFiMzIyMzA1NDg3ZDMxZTE4YzJiNzllZDI2YzU=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2016-04-08T05:49:48Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2016-04-08T05:49:48Z"}, "message": "Do not rely on file extensions after path canonicalization.", "tree": {"sha": "2e6c9cd24bac30ec0cb4a6d38f63f575b89bbf29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e6c9cd24bac30ec0cb4a6d38f63f575b89bbf29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7edc16c7be4dab322305487d31e18c2b79ed26c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7edc16c7be4dab322305487d31e18c2b79ed26c5", "html_url": "https://github.com/rust-lang/rust/commit/7edc16c7be4dab322305487d31e18c2b79ed26c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7edc16c7be4dab322305487d31e18c2b79ed26c5/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7979dd6089ee5cba39cfbe6e880a3edeb7fff788", "url": "https://api.github.com/repos/rust-lang/rust/commits/7979dd6089ee5cba39cfbe6e880a3edeb7fff788", "html_url": "https://github.com/rust-lang/rust/commit/7979dd6089ee5cba39cfbe6e880a3edeb7fff788"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "be1e194efc33e49fa16a259f2a85951c105fa1e1", "filename": "src/librustc_metadata/loader.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7edc16c7be4dab322305487d31e18c2b79ed26c5/src%2Flibrustc_metadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7edc16c7be4dab322305487d31e18c2b79ed26c5/src%2Flibrustc_metadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Floader.rs?ref=7edc16c7be4dab322305487d31e18c2b79ed26c5", "patch": "@@ -231,6 +231,7 @@ use rustc_back::target::Target;\n \n use std::cmp;\n use std::collections::HashMap;\n+use std::fmt;\n use std::fs;\n use std::io::prelude::*;\n use std::io;\n@@ -283,6 +284,21 @@ pub struct CratePaths {\n \n pub const METADATA_FILENAME: &'static str = \"rust.metadata.bin\";\n \n+#[derive(Copy, Clone, PartialEq)]\n+enum CrateFlavor {\n+    Rlib,\n+    Dylib\n+}\n+\n+impl fmt::Display for CrateFlavor {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.write_str(match *self {\n+            CrateFlavor::Rlib => \"rlib\",\n+            CrateFlavor::Dylib => \"dylib\"\n+        })\n+    }\n+}\n+\n impl CratePaths {\n     fn paths(&self) -> Vec<PathBuf> {\n         match (&self.dylib, &self.rlib) {\n@@ -457,8 +473,8 @@ impl<'a> Context<'a> {\n         let mut libraries = Vec::new();\n         for (_hash, (rlibs, dylibs)) in candidates {\n             let mut metadata = None;\n-            let rlib = self.extract_one(rlibs, \"rlib\", &mut metadata);\n-            let dylib = self.extract_one(dylibs, \"dylib\", &mut metadata);\n+            let rlib = self.extract_one(rlibs, CrateFlavor::Rlib, &mut metadata);\n+            let dylib = self.extract_one(dylibs, CrateFlavor::Dylib, &mut metadata);\n             match metadata {\n                 Some(metadata) => {\n                     libraries.push(Library {\n@@ -515,7 +531,7 @@ impl<'a> Context<'a> {\n     // read the metadata from it if `*slot` is `None`. If the metadata couldn't\n     // be read, it is assumed that the file isn't a valid rust library (no\n     // errors are emitted).\n-    fn extract_one(&mut self, m: HashMap<PathBuf, PathKind>, flavor: &str,\n+    fn extract_one(&mut self, m: HashMap<PathBuf, PathKind>, flavor: CrateFlavor,\n                    slot: &mut Option<MetadataBlob>) -> Option<(PathBuf, PathKind)> {\n         let mut ret = None::<(PathBuf, PathKind)>;\n         let mut error = 0;\n@@ -535,7 +551,7 @@ impl<'a> Context<'a> {\n         let mut err: Option<DiagnosticBuilder> = None;\n         for (lib, kind) in m {\n             info!(\"{} reading metadata from: {}\", flavor, lib.display());\n-            let metadata = match get_metadata_section(self.target, &lib) {\n+            let metadata = match get_metadata_section(self.target, flavor, &lib) {\n                 Ok(blob) => {\n                     if self.crate_matches(blob.as_slice(), &lib) {\n                         blob\n@@ -702,8 +718,8 @@ impl<'a> Context<'a> {\n \n         // Extract the rlib/dylib pair.\n         let mut metadata = None;\n-        let rlib = self.extract_one(rlibs, \"rlib\", &mut metadata);\n-        let dylib = self.extract_one(dylibs, \"dylib\", &mut metadata);\n+        let rlib = self.extract_one(rlibs, CrateFlavor::Rlib, &mut metadata);\n+        let dylib = self.extract_one(dylibs, CrateFlavor::Dylib, &mut metadata);\n \n         if rlib.is_none() && dylib.is_none() { return None }\n         match metadata {\n@@ -746,21 +762,21 @@ impl ArchiveMetadata {\n }\n \n // Just a small wrapper to time how long reading metadata takes.\n-fn get_metadata_section(target: &Target, filename: &Path)\n+fn get_metadata_section(target: &Target, flavor: CrateFlavor, filename: &Path)\n                         -> Result<MetadataBlob, String> {\n     let start = Instant::now();\n-    let ret = get_metadata_section_imp(target, filename);\n+    let ret = get_metadata_section_imp(target, flavor, filename);\n     info!(\"reading {:?} => {:?}\", filename.file_name().unwrap(),\n           start.elapsed());\n     return ret\n }\n \n-fn get_metadata_section_imp(target: &Target, filename: &Path)\n+fn get_metadata_section_imp(target: &Target, flavor: CrateFlavor, filename: &Path)\n                             -> Result<MetadataBlob, String> {\n     if !filename.exists() {\n         return Err(format!(\"no such file: '{}'\", filename.display()));\n     }\n-    if filename.file_name().unwrap().to_str().unwrap().ends_with(\".rlib\") {\n+    if flavor == CrateFlavor::Rlib {\n         // Use ArchiveRO for speed here, it's backed by LLVM and uses mmap\n         // internally to read the file. We also avoid even using a memcpy by\n         // just keeping the archive along while the metadata is in use.\n@@ -864,7 +880,9 @@ pub fn read_meta_section_name(target: &Target) -> &'static str {\n // A diagnostic function for dumping crate metadata to an output stream\n pub fn list_file_metadata(target: &Target, path: &Path,\n                           out: &mut io::Write) -> io::Result<()> {\n-    match get_metadata_section(target, path) {\n+    let filename = path.file_name().unwrap().to_str().unwrap();\n+    let flavor = if filename.ends_with(\".rlib\") { CrateFlavor::Rlib } else { CrateFlavor::Dylib };\n+    match get_metadata_section(target, flavor, path) {\n         Ok(bytes) => decoder::list_crate_metadata(bytes.as_slice(), out),\n         Err(msg) => {\n             write!(out, \"{}\\n\", msg)"}]}