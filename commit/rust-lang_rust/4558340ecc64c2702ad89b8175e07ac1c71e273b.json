{"sha": "4558340ecc64c2702ad89b8175e07ac1c71e273b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NTgzNDBlY2M2NGMyNzAyYWQ4OWI4MTc1ZTA3YWMxYzcxZTI3M2I=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-08T22:38:12Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-09T16:44:52Z"}, "message": "avoid as_leaf_mut asserting exclusive access", "tree": {"sha": "6f7895fcf9df2620ec57a00d88a11a5562f60375", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f7895fcf9df2620ec57a00d88a11a5562f60375"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4558340ecc64c2702ad89b8175e07ac1c71e273b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4558340ecc64c2702ad89b8175e07ac1c71e273b", "html_url": "https://github.com/rust-lang/rust/commit/4558340ecc64c2702ad89b8175e07ac1c71e273b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4558340ecc64c2702ad89b8175e07ac1c71e273b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e70c269feece979427bcc8795afc43efc1e47c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e70c269feece979427bcc8795afc43efc1e47c1", "html_url": "https://github.com/rust-lang/rust/commit/0e70c269feece979427bcc8795afc43efc1e47c1"}], "stats": {"total": 63, "additions": 33, "deletions": 30}, "files": [{"sha": "a9f6cdbb51ff1e6bc94676617b627e8f9da41099", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/4558340ecc64c2702ad89b8175e07ac1c71e273b/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4558340ecc64c2702ad89b8175e07ac1c71e273b/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=4558340ecc64c2702ad89b8175e07ac1c71e273b", "patch": "@@ -307,7 +307,7 @@ impl<K, V> Root<K, V> {\n                                     .node)\n         };\n         self.height -= 1;\n-        self.as_mut().as_leaf_mut().parent = ptr::null();\n+        unsafe { (*self.as_mut().as_leaf_mut()).parent = ptr::null(); }\n \n         unsafe {\n             Global.dealloc(NonNull::from(top).cast(), Layout::new::<InternalNode<K, V>>());\n@@ -570,9 +570,10 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         }\n     }\n \n-    fn as_leaf_mut(&mut self) -> &mut LeafNode<K, V> {\n-        // We are mutable, so we cannot be the root, so this is okay.\n-        unsafe { self.node.as_mut() }\n+    /// Returns a raw ptr to avoid asserting exclusive access to the entire node.\n+    fn as_leaf_mut(&mut self) -> *mut LeafNode<K, V> {\n+        // We are mutable, so we cannot be the root, so accessing this as a leaf is okay.\n+        self.node.as_ptr()\n     }\n \n     fn keys_mut(&mut self) -> &mut [K] {\n@@ -659,7 +660,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         } else {\n             unsafe {\n                 slice::from_raw_parts_mut(\n-                    self.as_leaf_mut().keys.as_mut_ptr() as *mut K,\n+                    (*self.as_leaf_mut()).keys.as_mut_ptr() as *mut K,\n                     self.len()\n                 )\n             }\n@@ -670,7 +671,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         debug_assert!(!self.is_shared_root());\n         unsafe {\n             slice::from_raw_parts_mut(\n-                self.as_leaf_mut().vals.as_mut_ptr() as *mut V,\n+                (*self.as_leaf_mut()).vals.as_mut_ptr() as *mut V,\n                 self.len()\n             )\n         }\n@@ -694,9 +695,9 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {\n         unsafe {\n             ptr::write(self.keys_mut().get_unchecked_mut(idx), key);\n             ptr::write(self.vals_mut().get_unchecked_mut(idx), val);\n-        }\n \n-        self.as_leaf_mut().len += 1;\n+            (*self.as_leaf_mut()).len += 1;\n+        }\n     }\n \n     /// Adds a key/value pair to the beginning of the node.\n@@ -708,9 +709,9 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {\n         unsafe {\n             slice_insert(self.keys_mut(), 0, key);\n             slice_insert(self.vals_mut(), 0, val);\n-        }\n \n-        self.as_leaf_mut().len += 1;\n+            (*self.as_leaf_mut()).len += 1;\n+        }\n     }\n }\n \n@@ -729,7 +730,7 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n             ptr::write(self.vals_mut().get_unchecked_mut(idx), val);\n             ptr::write(self.as_internal_mut().edges.get_unchecked_mut(idx + 1), edge.node);\n \n-            self.as_leaf_mut().len += 1;\n+            (*self.as_leaf_mut()).len += 1;\n \n             Handle::new_edge(self.reborrow_mut(), idx + 1).correct_parent_link();\n         }\n@@ -765,7 +766,7 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n                 edge.node\n             );\n \n-            self.as_leaf_mut().len += 1;\n+            (*self.as_leaf_mut()).len += 1;\n \n             self.correct_all_childrens_parent_links();\n         }\n@@ -789,12 +790,12 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n                 ForceResult::Internal(internal) => {\n                     let edge = ptr::read(internal.as_internal().edges.get_unchecked(idx + 1));\n                     let mut new_root = Root { node: edge, height: internal.height - 1 };\n-                    new_root.as_mut().as_leaf_mut().parent = ptr::null();\n+                    (*new_root.as_mut().as_leaf_mut()).parent = ptr::null();\n                     Some(new_root)\n                 }\n             };\n \n-            self.as_leaf_mut().len -= 1;\n+            (*self.as_leaf_mut()).len -= 1;\n             (key, val, edge)\n         }\n     }\n@@ -822,7 +823,7 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n                     );\n \n                     let mut new_root = Root { node: edge, height: internal.height - 1 };\n-                    new_root.as_mut().as_leaf_mut().parent = ptr::null();\n+                    (*new_root.as_mut().as_leaf_mut()).parent = ptr::null();\n \n                     for i in 0..old_len {\n                         Handle::new_edge(internal.reborrow_mut(), i).correct_parent_link();\n@@ -832,7 +833,7 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n                 }\n             };\n \n-            self.as_leaf_mut().len -= 1;\n+            (*self.as_leaf_mut()).len -= 1;\n \n             (key, val, edge)\n         }\n@@ -1023,7 +1024,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge\n             slice_insert(self.node.keys_mut(), self.idx, key);\n             slice_insert(self.node.vals_mut(), self.idx, val);\n \n-            self.node.as_leaf_mut().len += 1;\n+            (*self.node.as_leaf_mut()).len += 1;\n \n             self.node.vals_mut().get_unchecked_mut(self.idx)\n         }\n@@ -1066,8 +1067,10 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n         let idx = self.idx as u16;\n         let ptr = self.node.as_internal_mut() as *mut _;\n         let mut child = self.descend();\n-        child.as_leaf_mut().parent = ptr;\n-        child.as_leaf_mut().parent_idx.set(idx);\n+        unsafe {\n+            (*child.as_leaf_mut()).parent = ptr;\n+            (*child.as_leaf_mut()).parent_idx.set(idx);\n+        }\n     }\n \n     /// Unsafely asserts to the compiler some static information about whether the underlying\n@@ -1215,7 +1218,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::KV>\n                 new_len\n             );\n \n-            self.node.as_leaf_mut().len = self.idx as u16;\n+            (*self.node.as_leaf_mut()).len = self.idx as u16;\n             new_node.len = new_len as u16;\n \n             (\n@@ -1237,7 +1240,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::KV>\n         unsafe {\n             let k = slice_remove(self.node.keys_mut(), self.idx);\n             let v = slice_remove(self.node.vals_mut(), self.idx);\n-            self.node.as_leaf_mut().len -= 1;\n+            (*self.node.as_leaf_mut()).len -= 1;\n             (self.left_edge(), k, v)\n         }\n     }\n@@ -1278,7 +1281,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n                 new_len + 1\n             );\n \n-            self.node.as_leaf_mut().len = self.idx as u16;\n+            (*self.node.as_leaf_mut()).len = self.idx as u16;\n             new_node.data.len = new_len as u16;\n \n             let mut new_root = Root {\n@@ -1352,9 +1355,9 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n             for i in self.idx+1..self.node.len() {\n                 Handle::new_edge(self.node.reborrow_mut(), i).correct_parent_link();\n             }\n-            self.node.as_leaf_mut().len -= 1;\n+            (*self.node.as_leaf_mut()).len -= 1;\n \n-            left_node.as_leaf_mut().len += right_len as u16 + 1;\n+            (*left_node.as_leaf_mut()).len += right_len as u16 + 1;\n \n             if self.node.height > 1 {\n                 ptr::copy_nonoverlapping(\n@@ -1464,8 +1467,8 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n                 move_kv(left_kv, new_left_len, parent_kv, 0, 1);\n             }\n \n-            left_node.reborrow_mut().as_leaf_mut().len -= count as u16;\n-            right_node.reborrow_mut().as_leaf_mut().len += count as u16;\n+            (*left_node.reborrow_mut().as_leaf_mut()).len -= count as u16;\n+            (*right_node.reborrow_mut().as_leaf_mut()).len += count as u16;\n \n             match (left_node.force(), right_node.force()) {\n                 (ForceResult::Internal(left), ForceResult::Internal(mut right)) => {\n@@ -1525,8 +1528,8 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n                           new_right_len);\n             }\n \n-            left_node.reborrow_mut().as_leaf_mut().len += count as u16;\n-            right_node.reborrow_mut().as_leaf_mut().len -= count as u16;\n+            (*left_node.reborrow_mut().as_leaf_mut()).len += count as u16;\n+            (*right_node.reborrow_mut().as_leaf_mut()).len -= count as u16;\n \n             match (left_node.force(), right_node.force()) {\n                 (ForceResult::Internal(left), ForceResult::Internal(mut right)) => {\n@@ -1617,8 +1620,8 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, ma\n \n             move_kv(left_kv, left_new_len, right_kv, 0, right_new_len);\n \n-            left_node.reborrow_mut().as_leaf_mut().len = left_new_len as u16;\n-            right_node.reborrow_mut().as_leaf_mut().len = right_new_len as u16;\n+            (*left_node.reborrow_mut().as_leaf_mut()).len = left_new_len as u16;\n+            (*right_node.reborrow_mut().as_leaf_mut()).len = right_new_len as u16;\n \n             match (left_node.force(), right_node.force()) {\n                 (ForceResult::Internal(left), ForceResult::Internal(right)) => {"}]}