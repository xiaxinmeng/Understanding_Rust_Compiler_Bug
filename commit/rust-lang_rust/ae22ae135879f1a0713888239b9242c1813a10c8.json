{"sha": "ae22ae135879f1a0713888239b9242c1813a10c8", "node_id": "C_kwDOAAsO6NoAKGFlMjJhZTEzNTg3OWYxYTA3MTM4ODgyMzliOTI0MmMxODEzYTEwYzg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-22T11:49:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-22T12:33:35Z"}, "message": "miri: make --stage 0 testing work", "tree": {"sha": "17c525e08b1d247f179320655fdb62f6280ec683", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17c525e08b1d247f179320655fdb62f6280ec683"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae22ae135879f1a0713888239b9242c1813a10c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae22ae135879f1a0713888239b9242c1813a10c8", "html_url": "https://github.com/rust-lang/rust/commit/ae22ae135879f1a0713888239b9242c1813a10c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae22ae135879f1a0713888239b9242c1813a10c8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7a9c1141698bc4557b9da3d3fce2bf75339427f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7a9c1141698bc4557b9da3d3fce2bf75339427f", "html_url": "https://github.com/rust-lang/rust/commit/e7a9c1141698bc4557b9da3d3fce2bf75339427f"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "078207d85fe46c062a36bde9b6e47ae8c4a9fe16", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae22ae135879f1a0713888239b9242c1813a10c8/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae22ae135879f1a0713888239b9242c1813a10c8/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=ae22ae135879f1a0713888239b9242c1813a10c8", "patch": "@@ -475,6 +475,9 @@ impl Step for Miri {\n         let stage = self.stage;\n         let host = self.host;\n         let compiler = builder.compiler(stage, host);\n+        // We need the stdlib for the *next* stage, as it was built with this compiler that also built Miri.\n+        // Except if we are at stage 2, the bootstrap loop is complete and we can stick with our current stage.\n+        let compiler_std = builder.compiler(if stage < 2 { stage + 1 } else { stage }, host);\n \n         let miri =\n             builder.ensure(tool::Miri { compiler, target: self.host, extra_features: Vec::new() });\n@@ -483,6 +486,10 @@ impl Step for Miri {\n             target: self.host,\n             extra_features: Vec::new(),\n         });\n+        // The stdlib we need might be at a different stage. And just asking for the\n+        // sysroot does not seem to populate it, so we do that first.\n+        builder.ensure(compile::Std::new(compiler_std, host));\n+        let sysroot = builder.sysroot(compiler_std);\n         if let (Some(miri), Some(_cargo_miri)) = (miri, cargo_miri) {\n             let mut cargo =\n                 builder.cargo(compiler, Mode::ToolRustc, SourceType::Submodule, host, \"install\");\n@@ -562,6 +569,7 @@ impl Step for Miri {\n \n             // miri tests need to know about the stage sysroot\n             cargo.env(\"MIRI_SYSROOT\", miri_sysroot);\n+            cargo.env(\"MIRI_HOST_SYSROOT\", sysroot);\n             cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n             cargo.env(\"MIRI\", miri);\n "}]}