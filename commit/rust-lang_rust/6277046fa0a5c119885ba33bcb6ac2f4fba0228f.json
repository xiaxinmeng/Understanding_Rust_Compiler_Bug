{"sha": "6277046fa0a5c119885ba33bcb6ac2f4fba0228f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNzcwNDZmYTBhNWMxMTk4ODViYTMzYmNiNmFjMmY0ZmJhMDIyOGY=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-25T01:08:02Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-25T07:07:30Z"}, "message": "Add either::unwrap_{left,right}", "tree": {"sha": "3416085ad10a93fa8e1ef6749c1cc31e7212f560", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3416085ad10a93fa8e1ef6749c1cc31e7212f560"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6277046fa0a5c119885ba33bcb6ac2f4fba0228f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6277046fa0a5c119885ba33bcb6ac2f4fba0228f", "html_url": "https://github.com/rust-lang/rust/commit/6277046fa0a5c119885ba33bcb6ac2f4fba0228f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6277046fa0a5c119885ba33bcb6ac2f4fba0228f/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cfb92f4598a6571523bce8b72188df559e2a2b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cfb92f4598a6571523bce8b72188df559e2a2b3", "html_url": "https://github.com/rust-lang/rust/commit/4cfb92f4598a6571523bce8b72188df559e2a2b3"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "cd863c168f6e969a75d3ecf654412851d7d6cf6c", "filename": "src/libcore/either.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6277046fa0a5c119885ba33bcb6ac2f4fba0228f/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6277046fa0a5c119885ba33bcb6ac2f4fba0228f/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=6277046fa0a5c119885ba33bcb6ac2f4fba0228f", "patch": "@@ -109,6 +109,22 @@ pure fn is_right<T, U>(eith: &Either<T, U>) -> bool {\n     match *eith { Right(_) => true, _ => false }\n }\n \n+pure fn unwrap_left<T,U>(+eith: Either<T,U>) -> T {\n+    //! Retrieves the value in the left branch. Fails if the either is Right.\n+\n+    match move eith {\n+        Left(move x) => x, Right(_) => fail ~\"either::unwrap_left Right\"\n+    }\n+}\n+\n+pure fn unwrap_right<T,U>(+eith: Either<T,U>) -> U {\n+    //! Retrieves the value in the right branch. Fails if the either is Left.\n+\n+    match move eith {\n+        Right(move x) => x, Left(_) => fail ~\"either::unwrap_right Left\"\n+    }\n+}\n+\n #[test]\n fn test_either_left() {\n     let val = Left(10);"}]}