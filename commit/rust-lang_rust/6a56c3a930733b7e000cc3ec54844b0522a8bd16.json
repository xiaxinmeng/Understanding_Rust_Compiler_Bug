{"sha": "6a56c3a930733b7e000cc3ec54844b0522a8bd16", "node_id": "C_kwDOAAsO6NoAKDZhNTZjM2E5MzA3MzNiN2UwMDBjYzNlYzU0ODQ0YjA1MjJhOGJkMTY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-22T05:32:08Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-21T00:51:55Z"}, "message": "Use `ThinVec` in `ast::Impl` and related types.", "tree": {"sha": "304d1074fee6eed86861f93b7e1e56d76dbadd4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/304d1074fee6eed86861f93b7e1e56d76dbadd4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a56c3a930733b7e000cc3ec54844b0522a8bd16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a56c3a930733b7e000cc3ec54844b0522a8bd16", "html_url": "https://github.com/rust-lang/rust/commit/6a56c3a930733b7e000cc3ec54844b0522a8bd16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a56c3a930733b7e000cc3ec54844b0522a8bd16/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "068db466e889d73c65007dc04a05a760e3d9f766", "url": "https://api.github.com/repos/rust-lang/rust/commits/068db466e889d73c65007dc04a05a760e3d9f766", "html_url": "https://github.com/rust-lang/rust/commit/068db466e889d73c65007dc04a05a760e3d9f766"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "42105b67e946e872a8c6eba7e264a7452b0d90e8", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a56c3a930733b7e000cc3ec54844b0522a8bd16/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a56c3a930733b7e000cc3ec54844b0522a8bd16/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=6a56c3a930733b7e000cc3ec54844b0522a8bd16", "patch": "@@ -2497,7 +2497,7 @@ pub struct ForeignMod {\n     /// semantically by Rust.\n     pub unsafety: Unsafe,\n     pub abi: Option<StrLit>,\n-    pub items: Vec<P<ForeignItem>>,\n+    pub items: ThinVec<P<ForeignItem>>,\n }\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n@@ -2826,7 +2826,7 @@ pub struct Trait {\n     pub is_auto: IsAuto,\n     pub generics: Generics,\n     pub bounds: GenericBounds,\n-    pub items: Vec<P<AssocItem>>,\n+    pub items: ThinVec<P<AssocItem>>,\n }\n \n /// The location of a where clause on a `TyAlias` (`Span`) and whether there was\n@@ -2874,7 +2874,7 @@ pub struct Impl {\n     /// The trait being implemented, if any.\n     pub of_trait: Option<TraitRef>,\n     pub self_ty: P<Ty>,\n-    pub items: Vec<P<AssocItem>>,\n+    pub items: ThinVec<P<AssocItem>>,\n }\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n@@ -3121,7 +3121,7 @@ mod size_asserts {\n     static_assert_size!(GenericArg, 24);\n     static_assert_size!(GenericBound, 56);\n     static_assert_size!(Generics, 40);\n-    static_assert_size!(Impl, 152);\n+    static_assert_size!(Impl, 136);\n     static_assert_size!(Item, 152);\n     static_assert_size!(ItemKind, 80);\n     static_assert_size!(LitKind, 24);"}, {"sha": "1ecaca370dbd2ac5a8cb406e02d0b77e99a0ef93", "filename": "compiler/rustc_builtin_macros/src/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a56c3a930733b7e000cc3ec54844b0522a8bd16/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a56c3a930733b7e000cc3ec54844b0522a8bd16/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs?ref=6a56c3a930733b7e000cc3ec54844b0522a8bd16", "patch": "@@ -6,6 +6,7 @@ use rustc_ast::{GenericArg, Impl, ItemKind, MetaItem};\n use rustc_expand::base::{Annotatable, ExpandResult, ExtCtxt, MultiItemModifier};\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::Span;\n+use thin_vec::ThinVec;\n \n macro path_local($x:ident) {\n     generic::ty::Path::new_local(sym::$x)\n@@ -202,7 +203,7 @@ fn inject_impl_of_structural_trait(\n             generics,\n             of_trait: Some(trait_ref),\n             self_ty: self_type,\n-            items: Vec::new(),\n+            items: ThinVec::new(),\n         })),\n     );\n "}, {"sha": "43e449a258f597311f50398626649f614ece2beb", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a56c3a930733b7e000cc3ec54844b0522a8bd16/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a56c3a930733b7e000cc3ec54844b0522a8bd16/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=6a56c3a930733b7e000cc3ec54844b0522a8bd16", "patch": "@@ -646,20 +646,20 @@ impl<'a> Parser<'a> {\n         &mut self,\n         attrs: &mut AttrVec,\n         mut parse_item: impl FnMut(&mut Parser<'a>) -> PResult<'a, Option<Option<T>>>,\n-    ) -> PResult<'a, Vec<T>> {\n+    ) -> PResult<'a, ThinVec<T>> {\n         let open_brace_span = self.token.span;\n \n         // Recover `impl Ty;` instead of `impl Ty {}`\n         if self.token == TokenKind::Semi {\n             self.sess.emit_err(errors::UseEmptyBlockNotSemi { span: self.token.span });\n             self.bump();\n-            return Ok(vec![]);\n+            return Ok(ThinVec::new());\n         }\n \n         self.expect(&token::OpenDelim(Delimiter::Brace))?;\n         attrs.extend(self.parse_inner_attributes()?);\n \n-        let mut items = Vec::new();\n+        let mut items = ThinVec::new();\n         while !self.eat(&token::CloseDelim(Delimiter::Brace)) {\n             if self.recover_doc_comment_before_brace() {\n                 continue;"}]}