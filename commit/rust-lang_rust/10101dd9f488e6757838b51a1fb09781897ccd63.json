{"sha": "10101dd9f488e6757838b51a1fb09781897ccd63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMTAxZGQ5ZjQ4OGU2NzU3ODM4YjUxYTFmYjA5NzgxODk3Y2NkNjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-09-04T10:13:05Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-09-04T10:13:05Z"}, "message": "rename variables to match new type name", "tree": {"sha": "0c8e163fe343b2b834073c6136dfcc3880d49dd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c8e163fe343b2b834073c6136dfcc3880d49dd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10101dd9f488e6757838b51a1fb09781897ccd63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10101dd9f488e6757838b51a1fb09781897ccd63", "html_url": "https://github.com/rust-lang/rust/commit/10101dd9f488e6757838b51a1fb09781897ccd63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10101dd9f488e6757838b51a1fb09781897ccd63/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea911ca8a7e68191d6f81ccd88d1987530ba3fed", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea911ca8a7e68191d6f81ccd88d1987530ba3fed", "html_url": "https://github.com/rust-lang/rust/commit/ea911ca8a7e68191d6f81ccd88d1987530ba3fed"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "7dfc781520cde0e8ce782a349f5b3ce65e2ca58f", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/10101dd9f488e6757838b51a1fb09781897ccd63/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10101dd9f488e6757838b51a1fb09781897ccd63/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=10101dd9f488e6757838b51a1fb09781897ccd63", "patch": "@@ -89,34 +89,34 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         let mode = match op {\n             ValidationOp::Acquire => ValidationMode::Acquire,\n             ValidationOp::Release => ValidationMode::ReleaseUntil(None),\n-            ValidationOp::Suspend(ce) => {\n+            ValidationOp::Suspend(scope) => {\n                 if query.mutbl == MutMutable {\n                     let lft = DynamicLifetime {\n                         frame: self.cur_frame(),\n-                        region: Some(ce),\n+                        region: Some(scope),\n                     };\n-                    trace!(\"Suspending {:?} until {:?}\", query, ce);\n+                    trace!(\"Suspending {:?} until {:?}\", query, scope);\n                     self.suspended.entry(lft).or_insert_with(Vec::new).push(\n                         query.clone(),\n                     );\n                 }\n-                ValidationMode::ReleaseUntil(Some(ce))\n+                ValidationMode::ReleaseUntil(Some(scope))\n             }\n         };\n         self.validate(query, mode)\n     }\n \n-    pub(crate) fn end_region(&mut self, ce: region::Scope) -> EvalResult<'tcx> {\n-        self.memory.locks_lifetime_ended(Some(ce));\n+    pub(crate) fn end_region(&mut self, scope: region::Scope) -> EvalResult<'tcx> {\n+        self.memory.locks_lifetime_ended(Some(scope));\n         // Recover suspended lvals\n         let lft = DynamicLifetime {\n             frame: self.cur_frame(),\n-            region: Some(ce),\n+            region: Some(scope),\n         };\n         if let Some(queries) = self.suspended.remove(&lft) {\n             for query in queries {\n                 trace!(\"Recovering {:?} from suspension\", query);\n-                self.validate(query, ValidationMode::Recover(ce))?;\n+                self.validate(query, ValidationMode::Recover(scope))?;\n             }\n         }\n         Ok(())\n@@ -459,7 +459,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 // we record the region of this borrow to the context.\n                 if query.re == None {\n                     match *region {\n-                        ReScope(ce) => query.re = Some(ce),\n+                        ReScope(scope) => query.re = Some(scope),\n                         // It is possible for us to encounter erased lifetimes here because the lifetimes in\n                         // this functions' Subst will be erased.\n                         _ => {}"}]}