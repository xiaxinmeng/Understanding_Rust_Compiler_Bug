{"sha": "98058468815a62be36875ed0e990bbcbcd4a42b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MDU4NDY4ODE1YTYyYmUzNjg3NWVkMGU5OTBiYmNiY2Q0YTQyYjQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-13T22:30:06Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-13T22:30:06Z"}, "message": "typeck: extract maybe_suggest_array_indexing", "tree": {"sha": "723a235d6d9f01e94156eb10d0dfb6d1b13eafa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/723a235d6d9f01e94156eb10d0dfb6d1b13eafa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98058468815a62be36875ed0e990bbcbcd4a42b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98058468815a62be36875ed0e990bbcbcd4a42b4", "html_url": "https://github.com/rust-lang/rust/commit/98058468815a62be36875ed0e990bbcbcd4a42b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98058468815a62be36875ed0e990bbcbcd4a42b4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e019def0d8c277ef7b82d9348350ed1fc8747db", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e019def0d8c277ef7b82d9348350ed1fc8747db", "html_url": "https://github.com/rust-lang/rust/commit/5e019def0d8c277ef7b82d9348350ed1fc8747db"}], "stats": {"total": 50, "additions": 29, "deletions": 21}, "files": [{"sha": "20a47441375ba2ad36cd24d4a21c8e6bbfdb159a", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/98058468815a62be36875ed0e990bbcbcd4a42b4/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98058468815a62be36875ed0e990bbcbcd4a42b4/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=98058468815a62be36875ed0e990bbcbcd4a42b4", "patch": "@@ -1370,25 +1370,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             };\n                     }\n                     ty::Array(_, len) => {\n-                        if let (Some(len), Ok(user_index)) = (\n-                            len.try_eval_usize(self.tcx, self.param_env),\n-                            field.as_str().parse::<u64>()\n-                        ) {\n-                            let base = self.tcx.sess.source_map()\n-                                .span_to_snippet(base.span)\n-                                .unwrap_or_else(|_|\n-                                    self.tcx.hir().hir_to_pretty_string(base.hir_id));\n-                            let help = \"instead of using tuple indexing, use array indexing\";\n-                            let suggestion = format!(\"{}[{}]\", base, field);\n-                            let applicability = if len < user_index {\n-                                Applicability::MachineApplicable\n-                            } else {\n-                                Applicability::MaybeIncorrect\n-                            };\n-                            err.span_suggestion(\n-                                expr.span, help, suggestion, applicability\n-                            );\n-                        }\n+                        self.maybe_suggest_array_indexing(&mut err, expr, base, field, len);\n                     }\n                     ty::RawPtr(..) => {\n                         let base = self.tcx.sess.source_map()\n@@ -1417,7 +1399,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn ban_private_field_access(\n         &self,\n-        expr: &'tcx hir::Expr,\n+        expr: &hir::Expr,\n         expr_t: Ty<'tcx>,\n         field: ast::Ident,\n         base_did: DefId,\n@@ -1446,7 +1428,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n-    fn ban_take_value_of_method(&self, expr: &'tcx hir::Expr, expr_t: Ty<'tcx>, field: ast::Ident) {\n+    fn ban_take_value_of_method(&self, expr: &hir::Expr, expr_t: Ty<'tcx>, field: ast::Ident) {\n         let mut err = type_error_struct!(\n             self.tcx().sess,\n             field.span,\n@@ -1472,6 +1454,32 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n+    fn maybe_suggest_array_indexing(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        expr: &hir::Expr,\n+        base: &hir::Expr,\n+        field: ast::Ident,\n+        len: &ty::Const<'tcx>,\n+    ) {\n+        if let (Some(len), Ok(user_index)) = (\n+            len.try_eval_usize(self.tcx, self.param_env),\n+            field.as_str().parse::<u64>()\n+        ) {\n+            let base = self.tcx.sess.source_map()\n+                .span_to_snippet(base.span)\n+                .unwrap_or_else(|_| self.tcx.hir().hir_to_pretty_string(base.hir_id));\n+            let help = \"instead of using tuple indexing, use array indexing\";\n+            let suggestion = format!(\"{}[{}]\", base, field);\n+            let applicability = if len < user_index {\n+                Applicability::MachineApplicable\n+            } else {\n+                Applicability::MaybeIncorrect\n+            };\n+            err.span_suggestion(expr.span, help, suggestion, applicability);\n+        }\n+    }\n+\n     fn no_such_field_err<T: Display>(&self, span: Span, field: T, expr_t: &ty::TyS<'_>)\n         -> DiagnosticBuilder<'_> {\n         type_error_struct!(self.tcx().sess, span, expr_t, E0609,"}]}