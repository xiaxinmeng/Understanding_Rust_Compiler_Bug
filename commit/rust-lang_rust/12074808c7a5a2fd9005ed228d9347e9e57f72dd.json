{"sha": "12074808c7a5a2fd9005ed228d9347e9e57f72dd", "node_id": "C_kwDOAAsO6NoAKDEyMDc0ODA4YzdhNWEyZmQ5MDA1ZWQyMjhkOTM0N2U5ZTU3ZjcyZGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-28T17:22:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-28T17:22:36Z"}, "message": "Auto merge of #9865 - nyurik:allow-mixed, r=xFrednet\n\nAdd allow-mixed-uninlined-format-args config\n\nImplement `allow-mixed-uninlined-format-args` config param to change the behavior of the `uninlined_format_args` lint. Now it is a part of `style` per [Zulip chat](https://rust-lang.zulipchat.com/#narrow/stream/257328-clippy/topic/.60uninlined_format_args.60.20category), and won't propose inlining in case of a mixed usage, e.g. `print!(\"{} {}\", var, 1+2)`. If the user sets `allow-mixed-uninlined-format-args` config param to `false`, the lint would behave like it did before -- proposing to inline args even in the mixed case.\n\n---\n\nchangelog: [`uninlined_format_args`]: Added a new config `allow-mixed-uninlined-format-args` to allow the lint, if only some arguments can be inlined\n[#9865](https://github.com/rust-lang/rust-clippy/pull/9865)\nchangelog: Moved [`uninlined_format_args`] to `style` (Now warn-by-default)\n[#9865](https://github.com/rust-lang/rust-clippy/pull/9865)", "tree": {"sha": "ee5a2d3fc59321ec70b8824dd5331b6927b1e04f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee5a2d3fc59321ec70b8824dd5331b6927b1e04f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12074808c7a5a2fd9005ed228d9347e9e57f72dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12074808c7a5a2fd9005ed228d9347e9e57f72dd", "html_url": "https://github.com/rust-lang/rust/commit/12074808c7a5a2fd9005ed228d9347e9e57f72dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12074808c7a5a2fd9005ed228d9347e9e57f72dd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8eba8e4a1f8432135e017fe0ac03320d5166432", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8eba8e4a1f8432135e017fe0ac03320d5166432", "html_url": "https://github.com/rust-lang/rust/commit/c8eba8e4a1f8432135e017fe0ac03320d5166432"}, {"sha": "ab576afc18e0b15167388c1a294587962a94d264", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab576afc18e0b15167388c1a294587962a94d264", "html_url": "https://github.com/rust-lang/rust/commit/ab576afc18e0b15167388c1a294587962a94d264"}], "stats": {"total": 226, "additions": 156, "deletions": 70}, "files": [{"sha": "f0995a81329d93f30db25ccdf800ae8467c1c787", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 39, "deletions": 16, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/12074808c7a5a2fd9005ed228d9347e9e57f72dd/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12074808c7a5a2fd9005ed228d9347e9e57f72dd/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=12074808c7a5a2fd9005ed228d9347e9e57f72dd", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::is_diag_trait_item;\n-use clippy_utils::macros::FormatParamKind::{Implicit, Named, Numbered, Starred};\n+use clippy_utils::macros::FormatParamKind::{Implicit, Named, NamedInline, Numbered, Starred};\n use clippy_utils::macros::{\n     is_format_macro, is_panic, root_macro_call, Count, FormatArg, FormatArgsExpn, FormatParam, FormatParamUsage,\n };\n@@ -106,19 +106,25 @@ declare_clippy_lint! {\n     /// format!(\"{var:.prec$}\");\n     /// ```\n     ///\n-    /// ### Known Problems\n-    ///\n-    /// There may be a false positive if the format string is expanded from certain proc macros:\n-    ///\n-    /// ```ignore\n-    /// println!(indoc!(\"{}\"), var);\n+    /// If allow-mixed-uninlined-format-args is set to false in clippy.toml,\n+    /// the following code will also trigger the lint:\n+    /// ```rust\n+    /// # let var = 42;\n+    /// format!(\"{} {}\", var, 1+2);\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # let var = 42;\n+    /// format!(\"{var} {}\", 1+2);\n     /// ```\n     ///\n+    /// ### Known Problems\n+    ///\n     /// If a format string contains a numbered argument that cannot be inlined\n     /// nothing will be suggested, e.g. `println!(\"{0}={1}\", var, 1+2)`.\n     #[clippy::version = \"1.65.0\"]\n     pub UNINLINED_FORMAT_ARGS,\n-    pedantic,\n+    style,\n     \"using non-inlined variables in `format!` calls\"\n }\n \n@@ -162,12 +168,16 @@ impl_lint_pass!(FormatArgs => [\n \n pub struct FormatArgs {\n     msrv: Msrv,\n+    ignore_mixed: bool,\n }\n \n impl FormatArgs {\n     #[must_use]\n-    pub fn new(msrv: Msrv) -> Self {\n-        Self { msrv }\n+    pub fn new(msrv: Msrv, allow_mixed_uninlined_format_args: bool) -> Self {\n+        Self {\n+            msrv,\n+            ignore_mixed: allow_mixed_uninlined_format_args,\n+        }\n     }\n }\n \n@@ -192,7 +202,7 @@ impl<'tcx> LateLintPass<'tcx> for FormatArgs {\n                 check_to_string_in_format_args(cx, name, arg.param.value);\n             }\n             if self.msrv.meets(msrvs::FORMAT_ARGS_CAPTURE) {\n-                check_uninlined_args(cx, &format_args, outermost_expn_data.call_site, macro_def_id);\n+                check_uninlined_args(cx, &format_args, outermost_expn_data.call_site, macro_def_id, self.ignore_mixed);\n             }\n         }\n     }\n@@ -270,7 +280,13 @@ fn check_unused_format_specifier(cx: &LateContext<'_>, arg: &FormatArg<'_>) {\n     }\n }\n \n-fn check_uninlined_args(cx: &LateContext<'_>, args: &FormatArgsExpn<'_>, call_site: Span, def_id: DefId) {\n+fn check_uninlined_args(\n+    cx: &LateContext<'_>,\n+    args: &FormatArgsExpn<'_>,\n+    call_site: Span,\n+    def_id: DefId,\n+    ignore_mixed: bool,\n+) {\n     if args.format_string.span.from_expansion() {\n         return;\n     }\n@@ -285,7 +301,7 @@ fn check_uninlined_args(cx: &LateContext<'_>, args: &FormatArgsExpn<'_>, call_si\n     // we cannot remove any other arguments in the format string,\n     // because the index numbers might be wrong after inlining.\n     // Example of an un-inlinable format:  print!(\"{}{1}\", foo, 2)\n-    if !args.params().all(|p| check_one_arg(args, &p, &mut fixes)) || fixes.is_empty() {\n+    if !args.params().all(|p| check_one_arg(args, &p, &mut fixes, ignore_mixed)) || fixes.is_empty() {\n         return;\n     }\n \n@@ -309,7 +325,12 @@ fn check_uninlined_args(cx: &LateContext<'_>, args: &FormatArgsExpn<'_>, call_si\n     );\n }\n \n-fn check_one_arg(args: &FormatArgsExpn<'_>, param: &FormatParam<'_>, fixes: &mut Vec<(Span, String)>) -> bool {\n+fn check_one_arg(\n+    args: &FormatArgsExpn<'_>,\n+    param: &FormatParam<'_>,\n+    fixes: &mut Vec<(Span, String)>,\n+    ignore_mixed: bool,\n+) -> bool {\n     if matches!(param.kind, Implicit | Starred | Named(_) | Numbered)\n         && let ExprKind::Path(QPath::Resolved(None, path)) = param.value.kind\n         && let [segment] = path.segments\n@@ -324,8 +345,10 @@ fn check_one_arg(args: &FormatArgsExpn<'_>, param: &FormatParam<'_>, fixes: &mut\n         fixes.push((arg_span, String::new()));\n         true  // successful inlining, continue checking\n     } else {\n-        // if we can't inline a numbered argument, we can't continue\n-        param.kind != Numbered\n+        // Do not continue inlining (return false) in case\n+        // * if we can't inline a numbered argument, e.g. `print!(\"{0} ...\", foo.bar, ...)`\n+        // * if allow_mixed_uninlined_format_args is false and this arg hasn't been inlined already\n+        param.kind != Numbered && (!ignore_mixed || matches!(param.kind, NamedInline(_)))\n     }\n }\n "}, {"sha": "3fe39488ab82c480de3ef7bfe280ca92d66ff156", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12074808c7a5a2fd9005ed228d9347e9e57f72dd/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12074808c7a5a2fd9005ed228d9347e9e57f72dd/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=12074808c7a5a2fd9005ed228d9347e9e57f72dd", "patch": "@@ -828,7 +828,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         ))\n     });\n     store.register_late_pass(move |_| Box::new(undocumented_unsafe_blocks::UndocumentedUnsafeBlocks));\n-    store.register_late_pass(move |_| Box::new(format_args::FormatArgs::new(msrv())));\n+    let allow_mixed_uninlined = conf.allow_mixed_uninlined_format_args;\n+    store.register_late_pass(move |_| Box::new(format_args::FormatArgs::new(msrv(), allow_mixed_uninlined)));\n     store.register_late_pass(|_| Box::new(trailing_empty_array::TrailingEmptyArray));\n     store.register_early_pass(|| Box::new(octal_escapes::OctalEscapes));\n     store.register_late_pass(|_| Box::new(needless_late_init::NeedlessLateInit));"}, {"sha": "b6dc8cd7ab1197e338e653a2fa3e1d5f20442877", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12074808c7a5a2fd9005ed228d9347e9e57f72dd/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12074808c7a5a2fd9005ed228d9347e9e57f72dd/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=12074808c7a5a2fd9005ed228d9347e9e57f72dd", "patch": "@@ -402,6 +402,10 @@ define_Conf! {\n     /// A list of paths to types that should be treated like `Arc`, i.e. ignored but\n     /// for the generic parameters for determining interior mutability\n     (ignore_interior_mutability: Vec<String> = Vec::from([\"bytes::Bytes\".into()])),\n+    /// Lint: UNINLINED_FORMAT_ARGS.\n+    ///\n+    /// Whether to allow mixed uninlined format args, e.g. `format!(\"{} {}\", a, foo.bar)`\n+    (allow_mixed_uninlined_format_args: bool = true),\n }\n \n /// Search for the configuration file."}, {"sha": "b95e806aae24fa347a6d5e9c63b96e6c4c87d6da", "filename": "tests/ui-toml/allow_mixed_uninlined_format_args/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12074808c7a5a2fd9005ed228d9347e9e57f72dd/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/12074808c7a5a2fd9005ed228d9347e9e57f72dd/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Fclippy.toml?ref=12074808c7a5a2fd9005ed228d9347e9e57f72dd", "patch": "@@ -0,0 +1 @@\n+allow-mixed-uninlined-format-args = false"}, {"sha": "aa8b45b5fe7d428bbabd2af16bf8e104aa34b385", "filename": "tests/ui-toml/allow_mixed_uninlined_format_args/uninlined_format_args.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/12074808c7a5a2fd9005ed228d9347e9e57f72dd/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/12074808c7a5a2fd9005ed228d9347e9e57f72dd/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.fixed?ref=12074808c7a5a2fd9005ed228d9347e9e57f72dd", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+#![warn(clippy::uninlined_format_args)]\n+\n+fn main() {\n+    let local_i32 = 1;\n+    let local_f64 = 2.0;\n+    let local_opt: Option<i32> = Some(3);\n+\n+    println!(\"val='{local_i32}'\");\n+    println!(\"Hello x is {local_f64:.local_i32$}\");\n+    println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n+    println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n+    println!(\"{local_i32}, {}\", local_opt.unwrap());\n+}"}, {"sha": "ad2e4863ee8ed3ee5dfa4e05e10889e80ace2a42", "filename": "tests/ui-toml/allow_mixed_uninlined_format_args/uninlined_format_args.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/12074808c7a5a2fd9005ed228d9347e9e57f72dd/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12074808c7a5a2fd9005ed228d9347e9e57f72dd/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.rs?ref=12074808c7a5a2fd9005ed228d9347e9e57f72dd", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+#![warn(clippy::uninlined_format_args)]\n+\n+fn main() {\n+    let local_i32 = 1;\n+    let local_f64 = 2.0;\n+    let local_opt: Option<i32> = Some(3);\n+\n+    println!(\"val='{}'\", local_i32);\n+    println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n+    println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n+    println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n+    println!(\"{}, {}\", local_i32, local_opt.unwrap());\n+}"}, {"sha": "ee941762196151209d43f978516dc2024801d0ed", "filename": "tests/ui-toml/allow_mixed_uninlined_format_args/uninlined_format_args.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/12074808c7a5a2fd9005ed228d9347e9e57f72dd/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12074808c7a5a2fd9005ed228d9347e9e57f72dd/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.stderr?ref=12074808c7a5a2fd9005ed228d9347e9e57f72dd", "patch": "@@ -0,0 +1,76 @@\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:9:5\n+   |\n+LL |     println!(\"val='{}'\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::uninlined-format-args` implied by `-D warnings`\n+help: change this to\n+   |\n+LL -     println!(\"val='{}'\", local_i32);\n+LL +     println!(\"val='{local_i32}'\");\n+   |\n+\n+error: literal with an empty format string\n+  --> $DIR/uninlined_format_args.rs:10:35\n+   |\n+LL |     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n+   |                                   ^^^\n+   |\n+   = note: `-D clippy::print-literal` implied by `-D warnings`\n+help: try this\n+   |\n+LL -     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n+LL +     println!(\"Hello x is {:.*}\", local_i32, local_f64);\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:10:5\n+   |\n+LL |     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n+LL +     println!(\"Hello {} is {local_f64:.local_i32$}\", \"x\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:11:5\n+   |\n+LL |     println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n+LL +     println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:12:5\n+   |\n+LL |     println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n+LL +     println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:13:5\n+   |\n+LL |     println!(\"{}, {}\", local_i32, local_opt.unwrap());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{}, {}\", local_i32, local_opt.unwrap());\n+LL +     println!(\"{local_i32}, {}\", local_opt.unwrap());\n+   |\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "01a5e962c9491ea0d52cd89707f4c1d3c3ec4e74", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12074808c7a5a2fd9005ed228d9347e9e57f72dd/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12074808c7a5a2fd9005ed228d9347e9e57f72dd/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=12074808c7a5a2fd9005ed228d9347e9e57f72dd", "patch": "@@ -1,6 +1,7 @@\n error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of\n            allow-dbg-in-tests\n            allow-expect-in-tests\n+           allow-mixed-uninlined-format-args\n            allow-print-in-tests\n            allow-unwrap-in-tests\n            allowed-scripts"}, {"sha": "9d08e80cf9a55717b7ccb7b3fd137d4a3b9b5178", "filename": "tests/ui/uninlined_format_args.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12074808c7a5a2fd9005ed228d9347e9e57f72dd/tests%2Fui%2Funinlined_format_args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/12074808c7a5a2fd9005ed228d9347e9e57f72dd/tests%2Fui%2Funinlined_format_args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.fixed?ref=12074808c7a5a2fd9005ed228d9347e9e57f72dd", "patch": "@@ -54,11 +54,11 @@ fn tester(fn_arg: i32) {\n     println!(\"{local_i32:<3}\");\n     println!(\"{local_i32:#010x}\");\n     println!(\"{local_f64:.1}\");\n-    println!(\"Hello {} is {local_f64:.local_i32$}\", \"x\");\n-    println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n-    println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n+    println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n+    println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n+    println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n     println!(\"{local_i32} {local_f64}\");\n-    println!(\"{local_i32}, {}\", local_opt.unwrap());\n+    println!(\"{}, {}\", local_i32, local_opt.unwrap());\n     println!(\"{val}\");\n     println!(\"{val}\");\n     println!(\"{} {1}\", local_i32, 42);"}, {"sha": "a12abf8bef8af07bb4d53ab4f8227b26e6fd9a80", "filename": "tests/ui/uninlined_format_args.stderr", "status": "modified", "additions": 1, "deletions": 49, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/12074808c7a5a2fd9005ed228d9347e9e57f72dd/tests%2Fui%2Funinlined_format_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12074808c7a5a2fd9005ed228d9347e9e57f72dd/tests%2Fui%2Funinlined_format_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.stderr?ref=12074808c7a5a2fd9005ed228d9347e9e57f72dd", "patch": "@@ -177,42 +177,6 @@ LL -     println!(\"{:.1}\", local_f64);\n LL +     println!(\"{local_f64:.1}\");\n    |\n \n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:59:5\n-   |\n-LL |     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n-LL +     println!(\"Hello {} is {local_f64:.local_i32$}\", \"x\");\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:60:5\n-   |\n-LL |     println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n-LL +     println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n-   |\n-\n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:61:5\n-   |\n-LL |     println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n-LL +     println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n-   |\n-\n error: variables can be used directly in the `format!` string\n   --> $DIR/uninlined_format_args.rs:62:5\n    |\n@@ -225,18 +189,6 @@ LL -     println!(\"{} {}\", local_i32, local_f64);\n LL +     println!(\"{local_i32} {local_f64}\");\n    |\n \n-error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:63:5\n-   |\n-LL |     println!(\"{}, {}\", local_i32, local_opt.unwrap());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: change this to\n-   |\n-LL -     println!(\"{}, {}\", local_i32, local_opt.unwrap());\n-LL +     println!(\"{local_i32}, {}\", local_opt.unwrap());\n-   |\n-\n error: variables can be used directly in the `format!` string\n   --> $DIR/uninlined_format_args.rs:64:5\n    |\n@@ -904,5 +856,5 @@ LL -     println!(\"expand='{}'\", local_i32);\n LL +     println!(\"expand='{local_i32}'\");\n    |\n \n-error: aborting due to 76 previous errors\n+error: aborting due to 72 previous errors\n "}]}