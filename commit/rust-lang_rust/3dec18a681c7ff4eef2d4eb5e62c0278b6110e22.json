{"sha": "3dec18a681c7ff4eef2d4eb5e62c0278b6110e22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZWMxOGE2ODFjN2ZmNGVlZjJkNGViNWU2MmMwMjc4YjYxMTBlMjI=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2019-03-31T10:13:15Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2019-04-27T09:56:04Z"}, "message": "Add doc comment", "tree": {"sha": "9d0814c5c91af919a064f68b89b616f6337c3531", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d0814c5c91af919a064f68b89b616f6337c3531"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dec18a681c7ff4eef2d4eb5e62c0278b6110e22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dec18a681c7ff4eef2d4eb5e62c0278b6110e22", "html_url": "https://github.com/rust-lang/rust/commit/3dec18a681c7ff4eef2d4eb5e62c0278b6110e22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dec18a681c7ff4eef2d4eb5e62c0278b6110e22/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20bdb2fb9dd11f1313edfbe0a0c94904beaca19f", "url": "https://api.github.com/repos/rust-lang/rust/commits/20bdb2fb9dd11f1313edfbe0a0c94904beaca19f", "html_url": "https://github.com/rust-lang/rust/commit/20bdb2fb9dd11f1313edfbe0a0c94904beaca19f"}], "stats": {"total": 126, "additions": 81, "deletions": 45}, "files": [{"sha": "0df68772ae633921443912ac92551e4593bd4dd5", "filename": "config_proc_macro/src/attrs.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3dec18a681c7ff4eef2d4eb5e62c0278b6110e22/config_proc_macro%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dec18a681c7ff4eef2d4eb5e62c0278b6110e22/config_proc_macro%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2Fsrc%2Fattrs.rs?ref=3dec18a681c7ff4eef2d4eb5e62c0278b6110e22", "patch": "@@ -1,23 +1,39 @@\n+//! This module provides utilities for handling attributes on variants\n+//! of `config_type` enum. Currently there are two types of attributes\n+//! that could appear on the variants of `config_type` enum: `doc_hint`\n+//! and `value`. Both comes in the form of name-value pair whose value\n+//! is string literal.\n+\n+/// Returns the value of the first `doc_hint` attribute in the given slice or\n+/// `None` if `doc_hint` attribute is not available.\n pub fn find_doc_hint(attrs: &[syn::Attribute]) -> Option<String> {\n     attrs.iter().filter_map(doc_hint).next()\n }\n \n+/// Returns `true` if the given attribute is a `doc_hint` attribute.\n pub fn is_doc_hint(attr: &syn::Attribute) -> bool {\n     is_attr_name_value(attr, \"doc_hint\")\n }\n \n+/// Returns a string literal value if the given attribute is `doc_hint`\n+/// attribute or `None` otherwise.\n pub fn doc_hint(attr: &syn::Attribute) -> Option<String> {\n     get_name_value_str_lit(attr, \"doc_hint\")\n }\n \n+/// Returns the value of the first `value` attribute in the given slice or\n+/// `None` if `value` attribute is not available.\n pub fn find_config_value(attrs: &[syn::Attribute]) -> Option<String> {\n     attrs.iter().filter_map(config_value).next()\n }\n \n+/// Returns a string literal value if the given attribute is `value`\n+/// attribute or `None` otherwise.\n pub fn config_value(attr: &syn::Attribute) -> Option<String> {\n     get_name_value_str_lit(attr, \"value\")\n }\n \n+/// Returns `true` if the given attribute is a `value` attribute.\n pub fn is_config_value(attr: &syn::Attribute) -> bool {\n     is_attr_name_value(attr, \"value\")\n }"}, {"sha": "93a78b8463ec58d9f098f5d77105ae8683c3dc9f", "filename": "config_proc_macro/src/config_type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dec18a681c7ff4eef2d4eb5e62c0278b6110e22/config_proc_macro%2Fsrc%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dec18a681c7ff4eef2d4eb5e62c0278b6110e22/config_proc_macro%2Fsrc%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2Fsrc%2Fconfig_type.rs?ref=3dec18a681c7ff4eef2d4eb5e62c0278b6110e22", "patch": "@@ -3,6 +3,8 @@ use proc_macro2::TokenStream;\n use crate::item_enum::define_config_type_on_enum;\n use crate::item_struct::define_config_type_on_struct;\n \n+/// Defines `config_type` on enum or struct.\n+// FIXME: Implement this on struct.\n pub fn define_config_type(input: &syn::Item) -> TokenStream {\n     match input {\n         syn::Item::Struct(st) => define_config_type_on_struct(st),"}, {"sha": "eb7254ada7a851f86e995e1d0a7581dd43c0e24f", "filename": "config_proc_macro/src/item_enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3dec18a681c7ff4eef2d4eb5e62c0278b6110e22/config_proc_macro%2Fsrc%2Fitem_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dec18a681c7ff4eef2d4eb5e62c0278b6110e22/config_proc_macro%2Fsrc%2Fitem_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config_proc_macro%2Fsrc%2Fitem_enum.rs?ref=3dec18a681c7ff4eef2d4eb5e62c0278b6110e22", "patch": "@@ -6,6 +6,7 @@ use crate::utils::*;\n \n type Variants = syn::punctuated::Punctuated<syn::Variant, syn::Token![,]>;\n \n+/// Defines and implements `config_type` enum.\n pub fn define_config_type_on_enum(em: &syn::ItemEnum) -> syn::Result<TokenStream> {\n     let syn::ItemEnum {\n         vis,"}, {"sha": "0270bd0eb0b31092a8f7f4e2c44f7987a5583942", "filename": "src/config/lists.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3dec18a681c7ff4eef2d4eb5e62c0278b6110e22/src%2Fconfig%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dec18a681c7ff4eef2d4eb5e62c0278b6110e22/src%2Fconfig%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Flists.rs?ref=3dec18a681c7ff4eef2d4eb5e62c0278b6110e22", "patch": "@@ -28,15 +28,15 @@ impl DefinitiveListTactic {\n /// their comments.\n #[config_type]\n pub enum ListTactic {\n-    // One item per row.\n+    /// One item per row.\n     Vertical,\n-    // All items on one row.\n+    /// All items on one row.\n     Horizontal,\n-    // Try Horizontal layout, if that fails then vertical.\n+    /// Try Horizontal layout, if that fails then vertical.\n     HorizontalVertical,\n-    // HorizontalVertical with a soft limit of n characters.\n+    /// HorizontalVertical with a soft limit of n characters.\n     LimitedHorizontalVertical(usize),\n-    // Pack as many items as possible per row over (possibly) many rows.\n+    /// Pack as many items as possible per row over (possibly) many rows.\n     Mixed,\n }\n "}, {"sha": "9b0060bfdb6baf25b3c7265bb3be3f260a76dddb", "filename": "src/config/options.rs", "status": "modified", "additions": 57, "deletions": 40, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/3dec18a681c7ff4eef2d4eb5e62c0278b6110e22/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dec18a681c7ff4eef2d4eb5e62c0278b6110e22/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=3dec18a681c7ff4eef2d4eb5e62c0278b6110e22", "patch": "@@ -11,10 +11,14 @@ use crate::config::Config;\n \n #[config_type]\n pub enum NewlineStyle {\n-    Auto,    // Auto-detect based on the raw source input\n-    Windows, // \\r\\n\n-    Unix,    // \\n\n-    Native,  // \\r\\n in Windows, \\n on other platforms\n+    /// Auto-detect based on the raw source input.\n+    Auto,\n+    /// Force CRLF (`\\r\\n`).\n+    Windows,\n+    /// Force CR (`\\n).\n+    Unix,\n+    /// `\\r\\n` in Windows, `\\n`` on other platforms.\n+    Native,\n }\n \n impl NewlineStyle {\n@@ -74,58 +78,66 @@ impl NewlineStyle {\n }\n \n #[config_type]\n+/// Where to put the opening brace of items (`fn`, `impl`, etc.).\n pub enum BraceStyle {\n+    /// Put the opening brace on the next line.\n     AlwaysNextLine,\n+    /// Put the opening brace on the same line, if possible.\n     PreferSameLine,\n-    // Prefer same line except where there is a where-clause, in which case force\n-    // the brace to the next line.\n+    /// Prefer the same line except where there is a where-clause, in which\n+    /// case force the brace to be put on the next line.\n     SameLineWhere,\n }\n \n #[config_type]\n+/// Where to put the opening brace of conditional expressions (`if`, `match`, etc.).\n pub enum ControlBraceStyle {\n-    // K&R style, Rust community default\n+    /// K&R style, Rust community default\n     AlwaysSameLine,\n-    // Stroustrup style\n+    /// Stroustrup style\n     ClosingNextLine,\n-    // Allman style\n+    /// Allman style\n     AlwaysNextLine,\n }\n \n #[config_type]\n+/// How to indent.\n pub enum IndentStyle {\n-    // First line on the same line as the opening brace, all lines aligned with\n-    // the first line.\n+    /// First line on the same line as the opening brace, all lines aligned with\n+    /// the first line.\n     Visual,\n-    // First line is on a new line and all lines align with block indent.\n+    /// First line is on a new line and all lines align with **block** indent.\n     Block,\n }\n \n #[config_type]\n+/// How to place a list-like items.\n pub enum Density {\n-    // Fit as much on one line as possible.\n+    /// Fit as much on one line as possible.\n     Compressed,\n-    // Use more lines.\n+    /// Use more lines.\n     Tall,\n-    // Place every item on a separate line.\n+    /// Place every item on a separate line.\n     Vertical,\n }\n \n #[config_type]\n+/// Spacing around type combinators.\n pub enum TypeDensity {\n-    // No spaces around \"=\" and \"+\"\n+    /// No spaces around \"=\" and \"+\"\n     Compressed,\n-    // Spaces around \" = \" and \" + \"\n+    /// Spaces around \" = \" and \" + \"\n     Wide,\n }\n \n #[config_type]\n+/// To what extent does rustfmt pursue its heuristics?\n pub enum Heuristics {\n-    // Turn off any heuristics\n+    /// Turn off any heuristics\n     Off,\n-    // Turn on max heuristics\n+    /// Turn on max heuristics\n     Max,\n-    // Use Rustfmt's defaults\n+    /// Use Rustfmt's defaults\n     Default,\n }\n \n@@ -147,42 +159,44 @@ pub enum ReportTactic {\n     Never,\n }\n \n-// What Rustfmt should emit. Mostly corresponds to the `--emit` command line\n-// option.\n+/// What Rustfmt should emit. Mostly corresponds to the `--emit` command line\n+/// option.\n #[config_type]\n pub enum EmitMode {\n-    // Emits to files.\n+    /// Emits to files.\n     Files,\n-    // Writes the output to stdout.\n+    /// Writes the output to stdout.\n     Stdout,\n-    // Displays how much of the input file was processed\n+    /// Displays how much of the input file was processed\n     Coverage,\n-    // Unfancy stdout\n+    /// Unfancy stdout\n     Checkstyle,\n-    // Output the changed lines (for internal value only)\n+    /// Output the changed lines (for internal value only)\n     ModifiedLines,\n-    // Checks if a diff can be generated. If so, rustfmt outputs a diff and quits with exit code 1.\n-    // This option is designed to be run in CI where a non-zero exit signifies non-standard code\n-    // formatting. Used for `--check`.\n+    /// Checks if a diff can be generated. If so, rustfmt outputs a diff and\n+    /// quits with exit code 1.\n+    /// This option is designed to be run in CI where a non-zero exit signifies\n+    /// non-standard code formatting. Used for `--check`.\n     Diff,\n }\n \n-// Client-preference for coloured output.\n+/// Client-preference for coloured output.\n #[config_type]\n pub enum Color {\n-    // Always use color, whether it is a piped or terminal output\n+    /// Always use color, whether it is a piped or terminal output\n     Always,\n-    // Never use color\n+    /// Never use color\n     Never,\n-    // Automatically use color, if supported by terminal\n+    /// Automatically use color, if supported by terminal\n     Auto,\n }\n \n #[config_type]\n+/// rustfmt format style version.\n pub enum Version {\n-    // 1.x.y\n+    /// 1.x.y. When specified, rustfmt will format in the same style as 1.0.0.\n     One,\n-    // 2.x.y\n+    /// 2.x.y. When specified, rustfmt will formatin the the latest style.\n     Two,\n }\n \n@@ -197,13 +211,14 @@ impl Color {\n     }\n }\n \n-// How chatty should Rustfmt be?\n+/// How chatty should Rustfmt be?\n #[config_type]\n pub enum Verbosity {\n-    // Emit more.\n+    /// Emit more.\n     Verbose,\n+    /// Default.\n     Normal,\n-    // Emit as little as possible.\n+    /// Emit as little as possible.\n     Quiet,\n }\n \n@@ -369,14 +384,16 @@ pub trait CliOptions {\n     fn config_path(&self) -> Option<&Path>;\n }\n \n-// The edition of the compiler (RFC 2052)\n+/// The edition of the syntax and semntics of code (RFC 2052).\n #[config_type]\n pub enum Edition {\n     #[value = \"2015\"]\n     #[doc_hint = \"2015\"]\n+    /// Edition 2015.\n     Edition2015,\n     #[value = \"2018\"]\n     #[doc_hint = \"2018\"]\n+    /// Edition 2018.\n     Edition2018,\n }\n "}]}