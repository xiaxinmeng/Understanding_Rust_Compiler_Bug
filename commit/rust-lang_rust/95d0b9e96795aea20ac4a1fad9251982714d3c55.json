{"sha": "95d0b9e96795aea20ac4a1fad9251982714d3c55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZDBiOWU5Njc5NWFlYTIwYWM0YTFmYWQ5MjUxOTgyNzE0ZDNjNTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-10T02:15:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-10T02:15:40Z"}, "message": "Auto merge of #49729 - collin5:b48483, r=Mark-Simulacrum\n\n./x.py test should be able to run individual tests\n\nAllows user to be able to run individual tests by specifying filename i.e `./x.py test src/test/run-pass/foo.rs`\n\nFixes #48483", "tree": {"sha": "212e4f66f4f723457f192259da05ecdf8a935097", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/212e4f66f4f723457f192259da05ecdf8a935097"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95d0b9e96795aea20ac4a1fad9251982714d3c55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95d0b9e96795aea20ac4a1fad9251982714d3c55", "html_url": "https://github.com/rust-lang/rust/commit/95d0b9e96795aea20ac4a1fad9251982714d3c55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95d0b9e96795aea20ac4a1fad9251982714d3c55/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5f80f2a4f016bf724a1cfb580619d71c8fd39ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f80f2a4f016bf724a1cfb580619d71c8fd39ec", "html_url": "https://github.com/rust-lang/rust/commit/e5f80f2a4f016bf724a1cfb580619d71c8fd39ec"}, {"sha": "2f8c2a93bf5277774d93f690d1b03fe3e1a7b43f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f8c2a93bf5277774d93f690d1b03fe3e1a7b43f", "html_url": "https://github.com/rust-lang/rust/commit/2f8c2a93bf5277774d93f690d1b03fe3e1a7b43f"}], "stats": {"total": 74, "additions": 59, "deletions": 15}, "files": [{"sha": "701313d80827a7a22a7851e1d33cfd3aee215d68", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/95d0b9e96795aea20ac4a1fad9251982714d3c55/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d0b9e96795aea20ac4a1fad9251982714d3c55/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=95d0b9e96795aea20ac4a1fad9251982714d3c55", "patch": "@@ -111,27 +111,34 @@ struct StepDescription {\n }\n \n #[derive(Debug, Clone, PartialOrd, Ord, PartialEq, Eq)]\n-struct PathSet {\n-    set: BTreeSet<PathBuf>,\n+pub enum PathSet {\n+    Set (BTreeSet<PathBuf>),\n+    Suite (PathBuf)\n }\n \n impl PathSet {\n     fn empty() -> PathSet {\n-        PathSet { set: BTreeSet::new() }\n+        PathSet::Set(BTreeSet::new())\n     }\n \n     fn one<P: Into<PathBuf>>(path: P) -> PathSet {\n         let mut set = BTreeSet::new();\n         set.insert(path.into());\n-        PathSet { set }\n+        PathSet::Set(set)\n     }\n \n     fn has(&self, needle: &Path) -> bool {\n-        self.set.iter().any(|p| p.ends_with(needle))\n+        match self {\n+            PathSet::Set(set) => set.iter().any(|p| p.ends_with(needle)),\n+            PathSet::Suite(_) => false\n+        }\n     }\n \n     fn path(&self, builder: &Builder) -> PathBuf {\n-        self.set.iter().next().unwrap_or(&builder.build.src).to_path_buf()\n+        match self {\n+            PathSet::Set(set) => set.iter().next().unwrap_or(&builder.build.src).to_path_buf(),\n+            PathSet::Suite(path) => PathBuf::from(path)\n+        }\n     }\n }\n \n@@ -203,7 +210,10 @@ impl StepDescription {\n             for path in paths {\n                 let mut attempted_run = false;\n                 for (desc, should_run) in v.iter().zip(&should_runs) {\n-                    if let Some(pathset) = should_run.pathset_for_path(path) {\n+                    if let Some(suite) = should_run.is_suite_path(path) {\n+                        attempted_run = true;\n+                        desc.maybe_run(builder, suite);\n+                    } else if let Some(pathset) = should_run.pathset_for_path(path) {\n                         attempted_run = true;\n                         desc.maybe_run(builder, pathset);\n                     }\n@@ -250,7 +260,7 @@ impl<'a> ShouldRun<'a> {\n         for krate in self.builder.in_tree_crates(name) {\n             set.insert(PathBuf::from(&krate.path));\n         }\n-        self.paths.insert(PathSet { set });\n+        self.paths.insert(PathSet::Set(set));\n         self\n     }\n \n@@ -268,9 +278,21 @@ impl<'a> ShouldRun<'a> {\n \n     // multiple aliases for the same job\n     pub fn paths(mut self, paths: &[&str]) -> Self {\n-        self.paths.insert(PathSet {\n-            set: paths.iter().map(PathBuf::from).collect(),\n-        });\n+        self.paths.insert(PathSet::Set(paths.iter().map(PathBuf::from).collect()));\n+        self\n+    }\n+\n+    pub fn is_suite_path(&self, path: &Path) -> Option<&PathSet> {\n+        self.paths.iter().find(|pathset| {\n+            match pathset {\n+                PathSet::Suite(p) => path.starts_with(p),\n+                PathSet::Set(_) => false\n+            }\n+        })\n+    }\n+\n+    pub fn suite_path(mut self, suite: &str) -> Self {\n+        self.paths.insert(PathSet::Suite(PathBuf::from(suite)));\n         self\n     }\n \n@@ -372,8 +394,10 @@ impl<'a> Builder<'a> {\n         }\n         let mut help = String::from(\"Available paths:\\n\");\n         for pathset in should_run.paths {\n-            for path in pathset.set {\n-                help.push_str(format!(\"    ./x.py {} {}\\n\", subcommand, path.display()).as_str());\n+            if let PathSet::Set(set) = pathset{\n+                set.iter().for_each(|path| help.push_str(\n+                    format!(\"    ./x.py {} {}\\n\", subcommand, path.display()).as_str()\n+                    ))\n             }\n         }\n         Some(help)\n@@ -404,6 +428,7 @@ impl<'a> Builder<'a> {\n             parent: Cell::new(None),\n         };\n \n+\n         if kind == Kind::Dist {\n             assert!(!builder.config.test_miri, \"Do not distribute with miri enabled.\\n\\\n                 The distributed libraries would include all MIR (increasing binary size)."}, {"sha": "fb8ea5fb341326c14917e2331cdff22bf24a9525", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/95d0b9e96795aea20ac4a1fad9251982714d3c55/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d0b9e96795aea20ac4a1fad9251982714d3c55/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=95d0b9e96795aea20ac4a1fad9251982714d3c55", "patch": "@@ -34,6 +34,7 @@ use tool::{self, Tool};\n use util::{self, dylib_path, dylib_path_var};\n use {Mode, DocTests};\n use toolstate::ToolState;\n+use flags::Subcommand;\n \n const ADB_TEST_DIR: &str = \"/data/tmp/work\";\n \n@@ -559,6 +560,7 @@ impl Step for RustdocUi {\n             target: self.target,\n             mode: \"ui\",\n             suite: \"rustdoc-ui\",\n+            path: None,\n             compare_mode: None,\n         })\n     }\n@@ -663,7 +665,7 @@ macro_rules! test_definitions {\n             const ONLY_HOSTS: bool = $host;\n \n             fn should_run(run: ShouldRun) -> ShouldRun {\n-                run.path($path)\n+                run.suite_path($path)\n             }\n \n             fn make_run(run: RunConfig) {\n@@ -681,6 +683,7 @@ macro_rules! test_definitions {\n                     target: self.target,\n                     mode: $mode,\n                     suite: $suite,\n+                    path: Some($path),\n                     compare_mode: $compare_mode,\n                 })\n             }\n@@ -853,6 +856,7 @@ struct Compiletest {\n     target: Interned<String>,\n     mode: &'static str,\n     suite: &'static str,\n+    path: Option<&'static str>,\n     compare_mode: Option<&'static str>,\n }\n \n@@ -875,6 +879,9 @@ impl Step for Compiletest {\n         let suite = self.suite;\n         let compare_mode = self.compare_mode;\n \n+        // Path for test suite\n+        let suite_path = self.path.unwrap_or(\"\");\n+\n         // Skip codegen tests if they aren't enabled in configuration.\n         if !builder.config.codegen_tests && suite == \"codegen\" {\n             return;\n@@ -997,7 +1004,19 @@ impl Step for Compiletest {\n             cmd.arg(\"--lldb-python-dir\").arg(dir);\n         }\n \n-        cmd.args(&builder.config.cmd.test_args());\n+        // Get paths from cmd args\n+        let paths = match &builder.config.cmd {\n+            Subcommand::Test { ref paths, ..} => &paths[..],\n+            _ => &[]\n+        };\n+\n+        // Get test-args by striping suite path\n+        let mut test_args: Vec<&str> = paths.iter().filter(|p| p.starts_with(suite_path) &&\n+           p.is_file()).map(|p| p.strip_prefix(suite_path).unwrap().to_str().unwrap()).collect();\n+\n+        test_args.append(&mut builder.config.cmd.test_args());\n+\n+        cmd.args(&test_args);\n \n         if builder.is_verbose() {\n             cmd.arg(\"--verbose\");"}]}