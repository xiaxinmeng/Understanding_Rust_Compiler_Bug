{"sha": "3bf064beaa5d5e02b645f3130375e1340cfca4ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZjA2NGJlYWE1ZDVlMDJiNjQ1ZjMxMzAzNzVlMTM0MGNmY2E0YWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-18T21:24:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-18T21:24:12Z"}, "message": "Auto merge of #56462 - Zoxc:query-macro, r=oli-obk\n\nDefine queries using a proc macro\n\ncc @rust-lang/compiler", "tree": {"sha": "ab94a21c4ccb0f9d52a6e95259c1811edf7bc169", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab94a21c4ccb0f9d52a6e95259c1811edf7bc169"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bf064beaa5d5e02b645f3130375e1340cfca4ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf064beaa5d5e02b645f3130375e1340cfca4ac", "html_url": "https://github.com/rust-lang/rust/commit/3bf064beaa5d5e02b645f3130375e1340cfca4ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bf064beaa5d5e02b645f3130375e1340cfca4ac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f88167f89fffe321590c5148f21b7d51d44388d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f88167f89fffe321590c5148f21b7d51d44388d", "html_url": "https://github.com/rust-lang/rust/commit/0f88167f89fffe321590c5148f21b7d51d44388d"}, {"sha": "198dfceb80e62dfe62f5f3fdbedcd9ffbe25c93b", "url": "https://api.github.com/repos/rust-lang/rust/commits/198dfceb80e62dfe62f5f3fdbedcd9ffbe25c93b", "html_url": "https://github.com/rust-lang/rust/commit/198dfceb80e62dfe62f5f3fdbedcd9ffbe25c93b"}], "stats": {"total": 1080, "additions": 760, "deletions": 320}, "files": [{"sha": "43e865ad08941c6e877e8c99c7760603ba8a6ce6", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=3bf064beaa5d5e02b645f3130375e1340cfca4ac", "patch": "@@ -423,7 +423,7 @@ impl DefId {\n     }\n }\n \n-define_dep_nodes!( <'tcx>\n+rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     // We use this for most things when incr. comp. is turned off.\n     [] Null,\n \n@@ -492,9 +492,6 @@ define_dep_nodes!( <'tcx>\n     // table in the tcx (or elsewhere) maps to one of these\n     // nodes.\n     [] AssociatedItems(DefId),\n-    [] TypeOfItem(DefId),\n-    [] GenericsOfItem(DefId),\n-    [] PredicatesOfItem(DefId),\n     [] ExplicitPredicatesOfItem(DefId),\n     [] PredicatesDefinedOnItem(DefId),\n     [] InferredOutlivesOf(DefId),\n@@ -570,7 +567,6 @@ define_dep_nodes!( <'tcx>\n     [] FnArgNames(DefId),\n     [] RenderedConst(DefId),\n     [] DylibDepFormats(CrateNum),\n-    [] IsPanicRuntime(CrateNum),\n     [] IsCompilerBuiltins(CrateNum),\n     [] HasGlobalAllocator(CrateNum),\n     [] HasPanicHandler(CrateNum),\n@@ -588,7 +584,6 @@ define_dep_nodes!( <'tcx>\n     [] CheckTraitItemWellFormed(DefId),\n     [] CheckImplItemWellFormed(DefId),\n     [] ReachableNonGenerics(CrateNum),\n-    [] NativeLibraries(CrateNum),\n     [] EntryFn(CrateNum),\n     [] PluginRegistrarFn(CrateNum),\n     [] ProcMacroDeclsStatic(CrateNum),\n@@ -679,7 +674,23 @@ define_dep_nodes!( <'tcx>\n \n     [] UpstreamMonomorphizations(CrateNum),\n     [] UpstreamMonomorphizationsFor(DefId),\n-);\n+]);\n+\n+pub trait RecoverKey<'tcx>: Sized {\n+    fn recover(tcx: TyCtxt<'_, 'tcx, 'tcx>, dep_node: &DepNode) -> Option<Self>;\n+}\n+\n+impl RecoverKey<'tcx> for CrateNum {\n+    fn recover(tcx: TyCtxt<'_, 'tcx, 'tcx>, dep_node: &DepNode) -> Option<Self> {\n+        dep_node.extract_def_id(tcx).map(|id| id.krate)\n+    }\n+}\n+\n+impl RecoverKey<'tcx> for DefId {\n+    fn recover(tcx: TyCtxt<'_, 'tcx, 'tcx>, dep_node: &DepNode) -> Option<Self> {\n+        dep_node.extract_def_id(tcx)\n+    }\n+}\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {\n     const CAN_RECONSTRUCT_QUERY_KEY: bool;"}, {"sha": "1535e6d349cf128f173e50e9239cfaa9599bb045", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=3bf064beaa5d5e02b645f3130375e1340cfca4ac", "patch": "@@ -9,7 +9,7 @@ mod serialized;\n pub mod cgu_reuse_tracker;\n \n pub use self::dep_tracking_map::{DepTrackingMap, DepTrackingMapConfig};\n-pub use self::dep_node::{DepNode, DepKind, DepConstructor, WorkProductId, label_strs};\n+pub use self::dep_node::{DepNode, DepKind, DepConstructor, WorkProductId, RecoverKey, label_strs};\n pub use self::graph::{DepGraph, WorkProduct, DepNodeIndex, DepNodeColor, TaskDeps, hash_result};\n pub use self::graph::WorkProductFileKind;\n pub use self::prev::PreviousDepGraph;"}, {"sha": "4b2fda3b02f9d140db5ffef84d2935c2cf8fae35", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=3bf064beaa5d5e02b645f3130375e1340cfca4ac", "patch": "@@ -60,6 +60,8 @@\n #![feature(test)]\n #![feature(in_band_lifetimes)]\n #![feature(crate_visibility_modifier)]\n+#![feature(proc_macro_hygiene)]\n+#![feature(log_syntax)]\n \n #![recursion_limit=\"512\"]\n \n@@ -69,6 +71,7 @@ extern crate getopts;\n #[macro_use] extern crate scoped_tls;\n #[cfg(windows)]\n extern crate libc;\n+#[macro_use] extern crate rustc_macros;\n #[macro_use] extern crate rustc_data_structures;\n \n #[macro_use] extern crate log;\n@@ -96,6 +99,9 @@ mod macros;\n // registered before they are used.\n pub mod diagnostics;\n \n+#[macro_use]\n+pub mod query;\n+\n pub mod cfg;\n pub mod dep_graph;\n pub mod hir;"}, {"sha": "ecc00898600020b3a2fcab807b6c865bea7cd231", "filename": "src/librustc/query/mod.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=3bf064beaa5d5e02b645f3130375e1340cfca4ac", "patch": "@@ -0,0 +1,66 @@\n+use crate::ty::query::QueryDescription;\n+use crate::ty::query::queries;\n+use crate::ty::TyCtxt;\n+use crate::ty;\n+use crate::hir::def_id::CrateNum;\n+use crate::dep_graph::SerializedDepNodeIndex;\n+use std::borrow::Cow;\n+\n+// Each of these queries corresponds to a function pointer field in the\n+// `Providers` struct for requesting a value of that type, and a method\n+// on `tcx: TyCtxt` (and `tcx.at(span)`) for doing that request in a way\n+// which memoizes and does dep-graph tracking, wrapping around the actual\n+// `Providers` that the driver creates (using several `rustc_*` crates).\n+//\n+// The result type of each query must implement `Clone`, and additionally\n+// `ty::query::values::Value`, which produces an appropriate placeholder\n+// (error) value if the query resulted in a query cycle.\n+// Queries marked with `fatal_cycle` do not need the latter implementation,\n+// as they will raise an fatal error on query cycles instead.\n+rustc_queries! {\n+    Other {\n+        /// Records the type of every item.\n+        query type_of(key: DefId) -> Ty<'tcx> {\n+            cache { key.is_local() }\n+        }\n+\n+        /// Maps from the `DefId` of an item (trait/struct/enum/fn) to its\n+        /// associated generics.\n+        query generics_of(key: DefId) -> &'tcx ty::Generics {\n+            cache { key.is_local() }\n+            load_cached(tcx, id) {\n+                let generics: Option<ty::Generics> = tcx.queries.on_disk_cache\n+                                                        .try_load_query_result(tcx, id);\n+                generics.map(|x| tcx.alloc_generics(x))\n+            }\n+        }\n+\n+        /// Maps from the `DefId` of an item (trait/struct/enum/fn) to the\n+        /// predicates (where-clauses) that must be proven true in order\n+        /// to reference it. This is almost always the \"predicates query\"\n+        /// that you want.\n+        ///\n+        /// `predicates_of` builds on `predicates_defined_on` -- in fact,\n+        /// it is almost always the same as that query, except for the\n+        /// case of traits. For traits, `predicates_of` contains\n+        /// an additional `Self: Trait<...>` predicate that users don't\n+        /// actually write. This reflects the fact that to invoke the\n+        /// trait (e.g., via `Default::default`) you must supply types\n+        /// that actually implement the trait. (However, this extra\n+        /// predicate gets in the way of some checks, which are intended\n+        /// to operate over only the actual where-clauses written by the\n+        /// user.)\n+        query predicates_of(_: DefId) -> Lrc<ty::GenericPredicates<'tcx>> {}\n+\n+        query native_libraries(_: CrateNum) -> Lrc<Vec<NativeLibrary>> {\n+            desc { \"looking up the native libraries of a linked crate\" }\n+        }\n+    }\n+\n+    Codegen {\n+        query is_panic_runtime(_: CrateNum) -> bool {\n+            fatal_cycle\n+            desc { \"checking if the crate is_panic_runtime\" }\n+        }\n+    }\n+}"}, {"sha": "d8159f11acec0e84969e91dd9b2850df5df155bb", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=3bf064beaa5d5e02b645f3130375e1340cfca4ac", "patch": "@@ -34,7 +34,7 @@ pub trait QueryConfig<'tcx> {\n     type Value: Clone;\n }\n \n-pub(super) trait QueryAccessors<'tcx>: QueryConfig<'tcx> {\n+pub(crate) trait QueryAccessors<'tcx>: QueryConfig<'tcx> {\n     fn query(key: Self::Key) -> Query<'tcx>;\n \n     // Don't use this method to access query results, instead use the methods on TyCtxt\n@@ -53,7 +53,7 @@ pub(super) trait QueryAccessors<'tcx>: QueryConfig<'tcx> {\n     fn handle_cycle_error(tcx: TyCtxt<'_, 'tcx, '_>, error: CycleError<'tcx>) -> Self::Value;\n }\n \n-pub(super) trait QueryDescription<'tcx>: QueryAccessors<'tcx> {\n+pub(crate) trait QueryDescription<'tcx>: QueryAccessors<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>, key: Self::Key) -> Cow<'static, str>;\n \n     #[inline]\n@@ -587,12 +587,6 @@ impl<'tcx> QueryDescription<'tcx> for queries::dylib_dependency_formats<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::is_panic_runtime<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n-        \"checking if the crate is_panic_runtime\".into()\n-    }\n-}\n-\n impl<'tcx> QueryDescription<'tcx> for queries::is_compiler_builtins<'tcx> {\n     fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n         \"checking if the crate is_compiler_builtins\".into()\n@@ -671,12 +665,6 @@ impl<'tcx> QueryDescription<'tcx> for queries::reachable_non_generics<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::native_libraries<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n-        \"looking up the native libraries of a linked crate\".into()\n-    }\n-}\n-\n impl<'tcx> QueryDescription<'tcx> for queries::foreign_modules<'tcx> {\n     fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n         \"looking up the foreign modules of a linked crate\".into()\n@@ -949,21 +937,6 @@ impl<'tcx> QueryDescription<'tcx> for queries::instance_def_size_estimate<'tcx>\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::generics_of<'tcx> {\n-    #[inline]\n-    fn cache_on_disk(_: TyCtxt<'_, 'tcx, 'tcx>, def_id: Self::Key) -> bool {\n-        def_id.is_local()\n-    }\n-\n-    fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                              id: SerializedDepNodeIndex)\n-                              -> Option<Self::Value> {\n-        let generics: Option<ty::Generics> = tcx.queries.on_disk_cache\n-                                                .try_load_query_result(tcx, id);\n-        generics.map(|x| tcx.alloc_generics(x))\n-    }\n-}\n-\n impl<'tcx> QueryDescription<'tcx> for queries::program_clauses_for<'tcx> {\n     fn describe(_tcx: TyCtxt<'_, '_, '_>, _: DefId) -> Cow<'static, str> {\n         \"generating chalk-style clauses\".into()\n@@ -1027,7 +1000,6 @@ impl_disk_cacheable_query!(borrowck, |_, def_id| def_id.is_local());\n impl_disk_cacheable_query!(mir_const_qualif, |_, def_id| def_id.is_local());\n impl_disk_cacheable_query!(check_match, |_, def_id| def_id.is_local());\n impl_disk_cacheable_query!(def_symbol_name, |_, _| true);\n-impl_disk_cacheable_query!(type_of, |_, def_id| def_id.is_local());\n impl_disk_cacheable_query!(predicates_of, |_, def_id| def_id.is_local());\n impl_disk_cacheable_query!(used_trait_imports, |_, def_id| def_id.is_local());\n impl_disk_cacheable_query!(codegen_fn_attrs, |_, _| true);"}, {"sha": "2f085a973d202aca119d91e6657f47dcebc087bd", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=3bf064beaa5d5e02b645f3130375e1340cfca4ac", "patch": "@@ -80,13 +80,14 @@ mod values;\n use self::values::Value;\n \n mod config;\n+pub(crate) use self::config::QueryDescription;\n pub use self::config::QueryConfig;\n-use self::config::{QueryAccessors, QueryDescription};\n+use self::config::QueryAccessors;\n \n mod on_disk_cache;\n pub use self::on_disk_cache::OnDiskCache;\n \n-// Each of these quries corresponds to a function pointer field in the\n+// Each of these queries corresponds to a function pointer field in the\n // `Providers` struct for requesting a value of that type, and a method\n // on `tcx: TyCtxt` (and `tcx.at(span)`) for doing that request in a way\n // which memoizes and does dep-graph tracking, wrapping around the actual\n@@ -97,35 +98,12 @@ pub use self::on_disk_cache::OnDiskCache;\n // (error) value if the query resulted in a query cycle.\n // Queries marked with `fatal_cycle` do not need the latter implementation,\n // as they will raise an fatal error on query cycles instead.\n-define_queries! { <'tcx>\n+\n+rustc_query_append! { [define_queries!][ <'tcx>\n     Other {\n         /// Run analysis passes on the crate\n         [] fn analysis: Analysis(CrateNum) -> Result<(), ErrorReported>,\n \n-        /// Records the type of every item.\n-        [] fn type_of: TypeOfItem(DefId) -> Ty<'tcx>,\n-\n-        /// Maps from the `DefId` of an item (trait/struct/enum/fn) to its\n-        /// associated generics.\n-        [] fn generics_of: GenericsOfItem(DefId) -> &'tcx ty::Generics,\n-\n-        /// Maps from the `DefId` of an item (trait/struct/enum/fn) to the\n-        /// predicates (where-clauses) that must be proven true in order\n-        /// to reference it. This is almost always the \"predicates query\"\n-        /// that you want.\n-        ///\n-        /// `predicates_of` builds on `predicates_defined_on` -- in fact,\n-        /// it is almost always the same as that query, except for the\n-        /// case of traits. For traits, `predicates_of` contains\n-        /// an additional `Self: Trait<...>` predicate that users don't\n-        /// actually write. This reflects the fact that to invoke the\n-        /// trait (e.g., via `Default::default`) you must supply types\n-        /// that actually implement the trait. (However, this extra\n-        /// predicate gets in the way of some checks, which are intended\n-        /// to operate over only the actual where-clauses written by the\n-        /// user.)\n-        [] fn predicates_of: PredicatesOfItem(DefId) -> Lrc<ty::GenericPredicates<'tcx>>,\n-\n         /// Maps from the `DefId` of an item (trait/struct/enum/fn) to the\n         /// predicates (where-clauses) directly defined on it. This is\n         /// equal to the `explicit_predicates_of` predicates plus the\n@@ -446,7 +424,6 @@ define_queries! { <'tcx>\n     },\n \n     Codegen {\n-        [fatal_cycle] fn is_panic_runtime: IsPanicRuntime(CrateNum) -> bool,\n         [fatal_cycle] fn is_compiler_builtins: IsCompilerBuiltins(CrateNum) -> bool,\n         [fatal_cycle] fn has_global_allocator: HasGlobalAllocator(CrateNum) -> bool,\n         [fatal_cycle] fn has_panic_handler: HasPanicHandler(CrateNum) -> bool,\n@@ -504,8 +481,6 @@ define_queries! { <'tcx>\n     },\n \n     Other {\n-        [] fn native_libraries: NativeLibraries(CrateNum) -> Lrc<Vec<NativeLibrary>>,\n-\n         [] fn foreign_modules: ForeignModules(CrateNum) -> Lrc<Vec<ForeignModule>>,\n \n         /// Identifies the entry-point (e.g., the `main` function) for a given\n@@ -752,7 +727,7 @@ define_queries! { <'tcx>\n         [] fn wasm_import_module_map: WasmImportModuleMap(CrateNum)\n             -> Lrc<FxHashMap<DefId, String>>,\n     },\n-}\n+]}\n \n //////////////////////////////////////////////////////////////////////\n // These functions are little shims used to find the dep-node for a"}, {"sha": "e82e09c29976564d9ff17e35f1d31d6738275cac", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=3bf064beaa5d5e02b645f3130375e1340cfca4ac", "patch": "@@ -1131,10 +1131,12 @@ macro_rules! define_provider_struct {\n /// then `force_from_dep_node()` should not fail for it. Otherwise, you can just\n /// add it to the \"We don't have enough information to reconstruct...\" group in\n /// the match below.\n-pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n-                                           dep_node: &DepNode)\n-                                           -> bool {\n+pub fn force_from_dep_node<'tcx>(\n+    tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+    dep_node: &DepNode\n+) -> bool {\n     use crate::hir::def_id::LOCAL_CRATE;\n+    use crate::dep_graph::RecoverKey;\n \n     // We must avoid ever having to call force_from_dep_node() for a\n     // DepNode::CodegenUnit:\n@@ -1171,17 +1173,26 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         () => { (def_id!()).krate }\n     };\n \n-    macro_rules! force {\n-        ($query:ident, $key:expr) => {\n+    macro_rules! force_ex {\n+        ($tcx:expr, $query:ident, $key:expr) => {\n             {\n-                tcx.force_query::<crate::ty::query::queries::$query<'_>>($key, DUMMY_SP, *dep_node);\n+                $tcx.force_query::<crate::ty::query::queries::$query<'_>>(\n+                    $key,\n+                    DUMMY_SP,\n+                    *dep_node\n+                );\n             }\n         }\n     };\n \n+    macro_rules! force {\n+        ($query:ident, $key:expr) => { force_ex!(tcx, $query, $key) }\n+    };\n+\n     // FIXME(#45015): We should try move this boilerplate code into a macro\n     //                somehow.\n-    match dep_node.kind {\n+\n+    rustc_dep_node_force!([dep_node, tcx]\n         // These are inputs that are expected to be pre-allocated and that\n         // should therefore always be red or green already\n         DepKind::AllLocalTraitImpls |\n@@ -1274,9 +1285,6 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::MirKeys => { force!(mir_keys, LOCAL_CRATE); }\n         DepKind::CrateVariances => { force!(crate_variances, LOCAL_CRATE); }\n         DepKind::AssociatedItems => { force!(associated_item, def_id!()); }\n-        DepKind::TypeOfItem => { force!(type_of, def_id!()); }\n-        DepKind::GenericsOfItem => { force!(generics_of, def_id!()); }\n-        DepKind::PredicatesOfItem => { force!(predicates_of, def_id!()); }\n         DepKind::PredicatesDefinedOnItem => { force!(predicates_defined_on, def_id!()); }\n         DepKind::ExplicitPredicatesOfItem => { force!(explicit_predicates_of, def_id!()); }\n         DepKind::InferredOutlivesOf => { force!(inferred_outlives_of, def_id!()); }\n@@ -1332,7 +1340,6 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::FnArgNames => { force!(fn_arg_names, def_id!()); }\n         DepKind::RenderedConst => { force!(rendered_const, def_id!()); }\n         DepKind::DylibDepFormats => { force!(dylib_dependency_formats, krate!()); }\n-        DepKind::IsPanicRuntime => { force!(is_panic_runtime, krate!()); }\n         DepKind::IsCompilerBuiltins => { force!(is_compiler_builtins, krate!()); }\n         DepKind::HasGlobalAllocator => { force!(has_global_allocator, krate!()); }\n         DepKind::HasPanicHandler => { force!(has_panic_handler, krate!()); }\n@@ -1349,7 +1356,6 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::CheckTraitItemWellFormed => { force!(check_trait_item_well_formed, def_id!()); }\n         DepKind::CheckImplItemWellFormed => { force!(check_impl_item_well_formed, def_id!()); }\n         DepKind::ReachableNonGenerics => { force!(reachable_non_generics, krate!()); }\n-        DepKind::NativeLibraries => { force!(native_libraries, krate!()); }\n         DepKind::EntryFn => { force!(entry_fn, krate!()); }\n         DepKind::PluginRegistrarFn => { force!(plugin_registrar_fn, krate!()); }\n         DepKind::ProcMacroDeclsStatic => { force!(proc_macro_decls_static, krate!()); }\n@@ -1432,7 +1438,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::BackendOptimizationLevel => {\n             force!(backend_optimization_level, krate!());\n         }\n-    }\n+    );\n \n     true\n }\n@@ -1493,9 +1499,9 @@ impl_load_from_cache!(\n     SymbolName => def_symbol_name,\n     ConstIsRvaluePromotableToStatic => const_is_rvalue_promotable_to_static,\n     CheckMatch => check_match,\n-    TypeOfItem => type_of,\n-    GenericsOfItem => generics_of,\n-    PredicatesOfItem => predicates_of,\n+    type_of => type_of,\n+    generics_of => generics_of,\n+    predicates_of => predicates_of,\n     UsedTraitImports => used_trait_imports,\n     CodegenFnAttrs => codegen_fn_attrs,\n     SpecializationGraph => specialization_graph_of,"}, {"sha": "6b5e19ca49b76eccb1facbec1ec124eaf42ea69f", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=3bf064beaa5d5e02b645f3130375e1340cfca4ac", "patch": "@@ -36,16 +36,16 @@ const CFG: &str = \"cfg\";\n \n /// For typedef, constants, and statics\n const BASE_CONST: &[&str] = &[\n-    label_strs::TypeOfItem,\n+    label_strs::type_of,\n ];\n \n /// DepNodes for functions + methods\n const BASE_FN: &[&str] = &[\n     // Callers will depend on the signature of these items, so we better test\n     label_strs::FnSignature,\n-    label_strs::GenericsOfItem,\n-    label_strs::PredicatesOfItem,\n-    label_strs::TypeOfItem,\n+    label_strs::generics_of,\n+    label_strs::predicates_of,\n+    label_strs::type_of,\n \n     // And a big part of compilation (that we eventually want to cache) is type inference\n     // information:\n@@ -62,7 +62,7 @@ const BASE_HIR: &[&str] = &[\n /// `impl` implementation of struct/trait\n const BASE_IMPL: &[&str] = &[\n     label_strs::AssociatedItemDefIds,\n-    label_strs::GenericsOfItem,\n+    label_strs::generics_of,\n     label_strs::ImplTraitRef,\n ];\n \n@@ -78,17 +78,17 @@ const BASE_MIR: &[&str] = &[\n /// Note that changing the type of a field does not change the type of the struct or enum, but\n /// adding/removing fields or changing a fields name or visibility does.\n const BASE_STRUCT: &[&str] = &[\n-    label_strs::GenericsOfItem,\n-    label_strs::PredicatesOfItem,\n-    label_strs::TypeOfItem,\n+    label_strs::generics_of,\n+    label_strs::predicates_of,\n+    label_strs::type_of,\n ];\n \n /// Trait definition `DepNode`s.\n const BASE_TRAIT_DEF: &[&str] = &[\n     label_strs::AssociatedItemDefIds,\n-    label_strs::GenericsOfItem,\n+    label_strs::generics_of,\n     label_strs::ObjectSafety,\n-    label_strs::PredicatesOfItem,\n+    label_strs::predicates_of,\n     label_strs::SpecializationGraph,\n     label_strs::TraitDefOfItem,\n     label_strs::TraitImpls,\n@@ -179,7 +179,7 @@ const LABELS_TRAIT: &[&[&str]] = &[\n // Fields are kind of separate from their containers, as they can change independently from\n // them. We should at least check\n //\n-//     TypeOfItem for these.\n+//     type_of for these.\n \n type Labels = FxHashSet<String>;\n "}, {"sha": "e99ceb1b0c79bd0aad583abda9afe3190742ad24", "filename": "src/librustc_macros/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Flibrustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Flibrustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Flib.rs?ref=3bf064beaa5d5e02b645f3130375e1340cfca4ac", "patch": "@@ -1,8 +1,18 @@\n #![feature(proc_macro_hygiene)]\n #![deny(rust_2018_idioms)]\n \n+extern crate proc_macro;\n+\n use synstructure::decl_derive;\n \n+use proc_macro::TokenStream;\n+\n mod hash_stable;\n+mod query;\n+\n+#[proc_macro]\n+pub fn rustc_queries(input: TokenStream) -> TokenStream {\n+    query::rustc_queries(input)\n+}\n \n decl_derive!([HashStable, attributes(stable_hasher)] => hash_stable::hash_stable_derive);"}, {"sha": "3849e47d40365befd090493944a98d328cc2f899", "filename": "src/librustc_macros/src/query.rs", "status": "added", "additions": 394, "deletions": 0, "changes": 394, "blob_url": "https://github.com/rust-lang/rust/blob/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=3bf064beaa5d5e02b645f3130375e1340cfca4ac", "patch": "@@ -0,0 +1,394 @@\n+use proc_macro::TokenStream;\n+use syn::{\n+    Token, Ident, Type, Attribute, ReturnType, Expr, Block, Error,\n+    braced, parenthesized, parse_macro_input,\n+};\n+use syn::spanned::Spanned;\n+use syn::parse::{Result, Parse, ParseStream};\n+use syn::punctuated::Punctuated;\n+use syn;\n+use quote::quote;\n+\n+#[allow(non_camel_case_types)]\n+mod kw {\n+    syn::custom_keyword!(query);\n+}\n+\n+/// Ident or a wildcard `_`.\n+struct IdentOrWild(Ident);\n+\n+impl Parse for IdentOrWild {\n+    fn parse(input: ParseStream<'_>) -> Result<Self> {\n+        Ok(if input.peek(Token![_]) {\n+            let underscore = input.parse::<Token![_]>()?;\n+            IdentOrWild(Ident::new(\"_\", underscore.span()))\n+        } else {\n+            IdentOrWild(input.parse()?)\n+        })\n+    }\n+}\n+\n+/// A modifier for a query\n+enum QueryModifier {\n+    /// The description of the query.\n+    Desc(Option<Ident>, Punctuated<Expr, Token![,]>),\n+\n+    /// Cache the query to disk if the `Expr` returns true.\n+    Cache(Option<Ident>, Expr),\n+\n+    /// Custom code to load the query from disk.\n+    LoadCached(Ident, Ident, Block),\n+\n+    /// A cycle error for this query aborting the compilation with a fatal error.\n+    FatalCycle,\n+}\n+\n+impl Parse for QueryModifier {\n+    fn parse(input: ParseStream<'_>) -> Result<Self> {\n+        let modifier: Ident = input.parse()?;\n+        if modifier == \"desc\" {\n+            // Parse a description modifier like:\n+            // `desc { |tcx| \"foo {}\", tcx.item_path(key) }`\n+            let attr_content;\n+            braced!(attr_content in input);\n+            let tcx = if attr_content.peek(Token![|]) {\n+                attr_content.parse::<Token![|]>()?;\n+                let tcx = attr_content.parse()?;\n+                attr_content.parse::<Token![|]>()?;\n+                Some(tcx)\n+            } else {\n+                None\n+            };\n+            let desc = attr_content.parse_terminated(Expr::parse)?;\n+            Ok(QueryModifier::Desc(tcx, desc))\n+        } else if modifier == \"cache\" {\n+            // Parse a cache modifier like:\n+            // `cache { |tcx| key.is_local() }`\n+            let attr_content;\n+            braced!(attr_content in input);\n+            let tcx = if attr_content.peek(Token![|]) {\n+                attr_content.parse::<Token![|]>()?;\n+                let tcx = attr_content.parse()?;\n+                attr_content.parse::<Token![|]>()?;\n+                Some(tcx)\n+            } else {\n+                None\n+            };\n+            let expr = attr_content.parse()?;\n+            Ok(QueryModifier::Cache(tcx, expr))\n+        } else if modifier == \"load_cached\" {\n+            // Parse a load_cached modifier like:\n+            // `load_cached(tcx, id) { tcx.queries.on_disk_cache.try_load_query_result(tcx, id) }`\n+            let args;\n+            parenthesized!(args in input);\n+            let tcx = args.parse()?;\n+            args.parse::<Token![,]>()?;\n+            let id = args.parse()?;\n+            let block = input.parse()?;\n+            Ok(QueryModifier::LoadCached(tcx, id, block))\n+        } else if modifier == \"fatal_cycle\" {\n+            Ok(QueryModifier::FatalCycle)\n+        } else {\n+            Err(Error::new(modifier.span(), \"unknown query modifier\"))\n+        }\n+    }\n+}\n+\n+/// Ensures only doc comment attributes are used\n+fn check_attributes(attrs: Vec<Attribute>) -> Result<()> {\n+    for attr in attrs {\n+        if !attr.path.is_ident(\"doc\") {\n+            return Err(Error::new(attr.span(), \"attributes not supported on queries\"));\n+        }\n+    }\n+    Ok(())\n+}\n+\n+/// A compiler query. `query ... { ... }`\n+struct Query {\n+    modifiers: List<QueryModifier>,\n+    name: Ident,\n+    key: IdentOrWild,\n+    arg: Type,\n+    result: ReturnType,\n+}\n+\n+impl Parse for Query {\n+    fn parse(input: ParseStream<'_>) -> Result<Self> {\n+        check_attributes(input.call(Attribute::parse_outer)?)?;\n+\n+        // Parse the query declaration. Like `query type_of(key: DefId) -> Ty<'tcx>`\n+        input.parse::<kw::query>()?;\n+        let name: Ident = input.parse()?;\n+        let arg_content;\n+        parenthesized!(arg_content in input);\n+        let key = arg_content.parse()?;\n+        arg_content.parse::<Token![:]>()?;\n+        let arg = arg_content.parse()?;\n+        let result = input.parse()?;\n+\n+        // Parse the query modifiers\n+        let content;\n+        braced!(content in input);\n+        let modifiers = content.parse()?;\n+\n+        Ok(Query {\n+            modifiers,\n+            name,\n+            key,\n+            arg,\n+            result,\n+        })\n+    }\n+}\n+\n+/// A type used to greedily parse another type until the input is empty.\n+struct List<T>(Vec<T>);\n+\n+impl<T: Parse> Parse for List<T> {\n+    fn parse(input: ParseStream<'_>) -> Result<Self> {\n+        let mut list = Vec::new();\n+        while !input.is_empty() {\n+            list.push(input.parse()?);\n+        }\n+        Ok(List(list))\n+    }\n+}\n+\n+/// A named group containing queries.\n+struct Group {\n+    name: Ident,\n+    queries: List<Query>,\n+}\n+\n+impl Parse for Group {\n+    fn parse(input: ParseStream<'_>) -> Result<Self> {\n+        let name: Ident = input.parse()?;\n+        let content;\n+        braced!(content in input);\n+        Ok(Group {\n+            name,\n+            queries: content.parse()?,\n+        })\n+    }\n+}\n+\n+struct QueryModifiers {\n+    /// The description of the query.\n+    desc: Option<(Option<Ident>, Punctuated<Expr, Token![,]>)>,\n+\n+    /// Cache the query to disk if the `Expr` returns true.\n+    cache: Option<(Option<Ident>, Expr)>,\n+\n+    /// Custom code to load the query from disk.\n+    load_cached: Option<(Ident, Ident, Block)>,\n+\n+    /// A cycle error for this query aborting the compilation with a fatal error.\n+    fatal_cycle: bool,\n+}\n+\n+/// Process query modifiers into a struct, erroring on duplicates\n+fn process_modifiers(query: &mut Query) -> QueryModifiers {\n+    let mut load_cached = None;\n+    let mut cache = None;\n+    let mut desc = None;\n+    let mut fatal_cycle = false;\n+    for modifier in query.modifiers.0.drain(..) {\n+        match modifier {\n+            QueryModifier::LoadCached(tcx, id, block) => {\n+                if load_cached.is_some() {\n+                    panic!(\"duplicate modifier `load_cached` for query `{}`\", query.name);\n+                }\n+                load_cached = Some((tcx, id, block));\n+            }\n+            QueryModifier::Cache(tcx, expr) => {\n+                if cache.is_some() {\n+                    panic!(\"duplicate modifier `cache` for query `{}`\", query.name);\n+                }\n+                cache = Some((tcx, expr));\n+            }\n+            QueryModifier::Desc(tcx, list) => {\n+                if desc.is_some() {\n+                    panic!(\"duplicate modifier `desc` for query `{}`\", query.name);\n+                }\n+                desc = Some((tcx, list));\n+            }\n+            QueryModifier::FatalCycle => {\n+                if fatal_cycle {\n+                    panic!(\"duplicate modifier `fatal_cycle` for query `{}`\", query.name);\n+                }\n+                fatal_cycle = true;\n+            }\n+        }\n+    }\n+    QueryModifiers {\n+        load_cached,\n+        cache,\n+        desc,\n+        fatal_cycle,\n+    }\n+}\n+\n+/// Add the impl of QueryDescription for the query to `impls` if one is requested\n+fn add_query_description_impl(\n+    query: &Query,\n+    modifiers: QueryModifiers,\n+    impls: &mut proc_macro2::TokenStream\n+) {\n+    let name = &query.name;\n+    let arg = &query.arg;\n+    let key = &query.key.0;\n+\n+    // Find out if we should cache the query on disk\n+    let cache = modifiers.cache.as_ref().map(|(tcx, expr)| {\n+        let try_load_from_disk = if let Some((tcx, id, block)) = modifiers.load_cached.as_ref() {\n+            // Use custom code to load the query from disk\n+            quote! {\n+                #[inline]\n+                fn try_load_from_disk(\n+                    #tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+                    #id: SerializedDepNodeIndex\n+                ) -> Option<Self::Value> {\n+                    #block\n+                }\n+            }\n+        } else {\n+            // Use the default code to load the query from disk\n+            quote! {\n+                #[inline]\n+                fn try_load_from_disk(\n+                    tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+                    id: SerializedDepNodeIndex\n+                ) -> Option<Self::Value> {\n+                    tcx.queries.on_disk_cache.try_load_query_result(tcx, id)\n+                }\n+            }\n+        };\n+\n+        let tcx = tcx.as_ref().map(|t| quote! { #t }).unwrap_or(quote! { _ });\n+        quote! {\n+            #[inline]\n+            fn cache_on_disk(#tcx: TyCtxt<'_, 'tcx, 'tcx>, #key: Self::Key) -> bool {\n+                #expr\n+            }\n+\n+            #try_load_from_disk\n+        }\n+    });\n+\n+    if cache.is_none() && modifiers.load_cached.is_some() {\n+        panic!(\"load_cached modifier on query `{}` without a cache modifier\", name);\n+    }\n+\n+    let desc = modifiers.desc.as_ref().map(|(tcx, desc)| {\n+        let tcx = tcx.as_ref().map(|t| quote! { #t }).unwrap_or(quote! { _ });\n+        quote! {\n+            fn describe(\n+                #tcx: TyCtxt<'_, '_, '_>,\n+                #key: #arg,\n+            ) -> Cow<'static, str> {\n+                format!(#desc).into()\n+            }\n+        }\n+    });\n+\n+    if desc.is_some() || cache.is_some() {\n+        let cache = cache.unwrap_or(quote! {});\n+        let desc = desc.unwrap_or(quote! {});\n+\n+        impls.extend(quote! {\n+            impl<'tcx> QueryDescription<'tcx> for queries::#name<'tcx> {\n+                #desc\n+                #cache\n+            }\n+        });\n+    }\n+}\n+\n+pub fn rustc_queries(input: TokenStream) -> TokenStream {\n+    let groups = parse_macro_input!(input as List<Group>);\n+\n+    let mut query_stream = quote! {};\n+    let mut query_description_stream = quote! {};\n+    let mut dep_node_def_stream = quote! {};\n+    let mut dep_node_force_stream = quote! {};\n+\n+    for group in groups.0 {\n+        let mut group_stream = quote! {};\n+        for mut query in group.queries.0 {\n+            let modifiers = process_modifiers(&mut query);\n+            let name = &query.name;\n+            let arg = &query.arg;\n+            let result_full = &query.result;\n+            let result = match query.result {\n+                ReturnType::Default => quote! { -> () },\n+                _ => quote! { #result_full },\n+            };\n+\n+            // Pass on the fatal_cycle modifier\n+            let fatal_cycle = if modifiers.fatal_cycle {\n+                quote! { fatal_cycle }\n+            } else {\n+                quote! {}\n+            };\n+\n+            // Add the query to the group\n+            group_stream.extend(quote! {\n+                [#fatal_cycle] fn #name: #name(#arg) #result,\n+            });\n+\n+            add_query_description_impl(&query, modifiers, &mut query_description_stream);\n+\n+            // Create a dep node for the query\n+            dep_node_def_stream.extend(quote! {\n+                [] #name(#arg),\n+            });\n+\n+            // Add a match arm to force the query given the dep node\n+            dep_node_force_stream.extend(quote! {\n+                DepKind::#name => {\n+                    if let Some(key) = RecoverKey::recover($tcx, $dep_node) {\n+                        force_ex!($tcx, #name, key);\n+                    } else {\n+                        return false;\n+                    }\n+                }\n+            });\n+        }\n+        let name = &group.name;\n+        query_stream.extend(quote! {\n+            #name { #group_stream },\n+        });\n+    }\n+    TokenStream::from(quote! {\n+        macro_rules! rustc_query_append {\n+            ([$($macro:tt)*][$($other:tt)*]) => {\n+                $($macro)* {\n+                    $($other)*\n+\n+                    #query_stream\n+\n+                }\n+            }\n+        }\n+        macro_rules! rustc_dep_node_append {\n+            ([$($macro:tt)*][$($other:tt)*]) => {\n+                $($macro)*(\n+                    $($other)*\n+\n+                    #dep_node_def_stream\n+                );\n+            }\n+        }\n+        macro_rules! rustc_dep_node_force {\n+            ([$dep_node:expr, $tcx:expr] $($other:tt)*) => {\n+                match $dep_node.kind {\n+                    $($other)*\n+\n+                    #dep_node_force_stream\n+                }\n+            }\n+        }\n+        #query_description_stream\n+    })\n+}"}, {"sha": "516276a49ea8f3f9ae606d709e5cac0690aef0cd", "filename": "src/test/incremental/hashes/consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs?ref=3bf064beaa5d5e02b645f3130375e1340cfca4ac", "patch": "@@ -29,7 +29,7 @@ pub const CONST_VISIBILITY: u8 = 0;\n const CONST_CHANGE_TYPE_1: i32 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_TYPE_1: u32 = 0;\n \n@@ -39,7 +39,7 @@ const CONST_CHANGE_TYPE_1: u32 = 0;\n const CONST_CHANGE_TYPE_2: Option<u32> = None;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_TYPE_2: Option<u64> = None;\n \n@@ -99,11 +99,11 @@ mod const_change_type_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as Type;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     const CONST_CHANGE_TYPE_INDIRECTLY_1: Type = Type;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     const CONST_CHANGE_TYPE_INDIRECTLY_2: Option<Type> = None;\n }"}, {"sha": "aa2dc798b81c8f34427a881b73797d7f0871e326", "filename": "src/test/incremental/hashes/enum_defs.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs?ref=3bf064beaa5d5e02b645f3130375e1340cfca4ac", "patch": "@@ -42,7 +42,7 @@ enum EnumChangeNameCStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeNameCStyleVariant {\n     Variant1,\n@@ -59,7 +59,7 @@ enum EnumChangeNameTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeNameTupleStyleVariant {\n     Variant1,\n@@ -76,7 +76,7 @@ enum EnumChangeNameStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeNameStructStyleVariant {\n     Variant1,\n@@ -109,7 +109,7 @@ enum EnumChangeValueCStyleVariant1 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeValueCStyleVariant1 {\n     Variant1,\n@@ -125,7 +125,7 @@ enum EnumAddCStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddCStyleVariant {\n     Variant1,\n@@ -142,7 +142,7 @@ enum EnumRemoveCStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumRemoveCStyleVariant {\n     Variant1,\n@@ -157,7 +157,7 @@ enum EnumAddTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddTupleStyleVariant {\n     Variant1,\n@@ -174,7 +174,7 @@ enum EnumRemoveTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumRemoveTupleStyleVariant {\n     Variant1,\n@@ -189,7 +189,7 @@ enum EnumAddStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddStructStyleVariant {\n     Variant1,\n@@ -206,7 +206,7 @@ enum EnumRemoveStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumRemoveStructStyleVariant {\n     Variant1,\n@@ -257,7 +257,7 @@ enum EnumChangeFieldNameStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldNameStructStyleVariant {\n     Variant1 { a: u32, c: u32 },\n@@ -289,7 +289,7 @@ enum EnumChangeFieldOrderStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldOrderStructStyleVariant {\n     Variant1 { b: f32, a: u32 },\n@@ -304,7 +304,7 @@ enum EnumAddFieldTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddFieldTupleStyleVariant {\n     Variant1(u32, u32, u32),\n@@ -319,7 +319,7 @@ enum EnumAddFieldStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddFieldStructStyleVariant {\n     Variant1 { a: u32, b: u32, c: u32 },\n@@ -353,7 +353,7 @@ enum EnumAddReprC {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[repr(C)]\n enum EnumAddReprC {\n@@ -402,7 +402,7 @@ enum EnumChangeNameOfLifetimeParameter<'a> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"PredicatesOfItem\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"predicates_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeNameOfLifetimeParameter<'b> {\n     Variant1(&'b u32),\n@@ -418,7 +418,7 @@ enum EnumAddLifetimeParameter<'a> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"PredicatesOfItem\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"predicates_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeParameter<'a, 'b> {\n     Variant1(&'a u32),\n@@ -435,7 +435,7 @@ enum EnumAddLifetimeParameterBound<'a, 'b> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"GenericsOfItem,TypeOfItem\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"generics_of,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeParameterBound<'a, 'b: 'a> {\n     Variant1(&'a u32),\n@@ -450,7 +450,7 @@ enum EnumAddLifetimeBoundToParameter<'a, T> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"TypeOfItem\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeBoundToParameter<'a, T: 'a> {\n     Variant1(T),\n@@ -482,7 +482,7 @@ enum EnumAddLifetimeParameterBoundWhere<'a, 'b> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"GenericsOfItem,TypeOfItem\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"generics_of,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeParameterBoundWhere<'a, 'b> where 'b: 'a {\n     Variant1(&'a u32),\n@@ -499,7 +499,7 @@ enum EnumAddLifetimeBoundToParameterWhere<'a, T> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"TypeOfItem\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeBoundToParameterWhere<'a, T> where T: 'a {\n     Variant1(T),\n@@ -618,7 +618,7 @@ mod change_trait_bound_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,PredicatesOfItem\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,predicates_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     enum Enum<T: Trait> {\n         Variant1(T)\n@@ -634,7 +634,7 @@ mod change_trait_bound_indirectly_where {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,PredicatesOfItem\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,predicates_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     enum Enum<T> where T: Trait {\n         Variant1(T)"}, {"sha": "fccec704d6356caf4ea08e28a61ce261a1cf908c", "filename": "src/test/incremental/hashes/function_interfaces.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs?ref=3bf064beaa5d5e02b645f3130375e1340cfca4ac", "patch": "@@ -117,7 +117,7 @@ pub fn type_parameter() {}\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, GenericsOfItem, TypeOfItem, PredicatesOfItem\")]\n+              except = \"Hir, HirBody, generics_of, type_of, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn type_parameter<T>() {}\n \n@@ -128,7 +128,7 @@ pub fn type_parameter<T>() {}\n pub fn lifetime_parameter() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, GenericsOfItem\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, generics_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn lifetime_parameter<'a>() {}\n \n@@ -139,7 +139,7 @@ pub fn lifetime_parameter<'a>() {}\n pub fn trait_bound<T>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, PredicatesOfItem\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn trait_bound<T: Eq>() {}\n \n@@ -150,7 +150,7 @@ pub fn trait_bound<T: Eq>() {}\n pub fn builtin_bound<T>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, PredicatesOfItem\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn builtin_bound<T: Send>() {}\n \n@@ -162,7 +162,7 @@ pub fn lifetime_bound<'a, T>() {}\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, GenericsOfItem, TypeOfItem, PredicatesOfItem\")]\n+              except = \"Hir, HirBody, generics_of, type_of, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn lifetime_bound<'a, T: 'a>() {}\n \n@@ -173,7 +173,7 @@ pub fn lifetime_bound<'a, T: 'a>() {}\n pub fn second_trait_bound<T: Eq>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, PredicatesOfItem\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn second_trait_bound<T: Eq + Clone>() {}\n \n@@ -184,7 +184,7 @@ pub fn second_trait_bound<T: Eq + Clone>() {}\n pub fn second_builtin_bound<T: Send>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, PredicatesOfItem\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn second_builtin_bound<T: Send + Sized>() {}\n \n@@ -196,7 +196,7 @@ pub fn second_lifetime_bound<'a, 'b, T: 'a>() {}\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, GenericsOfItem, TypeOfItem, PredicatesOfItem\")]\n+              except = \"Hir, HirBody, generics_of, type_of, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn second_lifetime_bound<'a, 'b, T: 'a + 'b>() {}\n \n@@ -326,7 +326,7 @@ pub mod change_trait_bound_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, PredicatesOfItem\")]\n+    #[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, predicates_of\")]\n     #[rustc_clean(cfg = \"cfail3\")]\n     pub fn indirect_trait_bound<T: Trait>(p: T) {}\n }\n@@ -340,7 +340,7 @@ pub mod change_trait_bound_indirectly_in_where_clause {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, PredicatesOfItem\")]\n+    #[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, predicates_of\")]\n     #[rustc_clean(cfg = \"cfail3\")]\n     pub fn indirect_trait_bound_where<T>(p: T)\n     where"}, {"sha": "ebafd07dbef573bd4517005b724f85c8dcdf479f", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=3bf064beaa5d5e02b645f3130375e1340cfca4ac", "patch": "@@ -97,7 +97,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_dirty(cfg=\"cfail2\", except=\"TypeOfItem,PredicatesOfItem\")]\n+    #[rustc_dirty(cfg=\"cfail2\", except=\"type_of,predicates_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn method_selfness(&self) { }\n }\n@@ -334,7 +334,7 @@ impl Foo {\n     // appear dirty, that might be the cause. -nmatsakis\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"Hir,HirBody,GenericsOfItem,PredicatesOfItem,TypeOfItem\",\n+        except=\"Hir,HirBody,generics_of,predicates_of,type_of\",\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_type_parameter_to_method<T>(&self) { }\n@@ -354,7 +354,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"Hir,HirBody,GenericsOfItem,PredicatesOfItem,TypeOfItem,TypeckTables\"\n+        except=\"Hir,HirBody,generics_of,predicates_of,type_of,TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_bound_to_lifetime_param_of_method<'a, 'b: 'a>(&self) { }\n@@ -381,8 +381,8 @@ impl Foo {\n     // generics before the body, then the `HirId` for things in the\n     // body will be affected. So if you start to see `TypeckTables`\n     // appear dirty, that might be the cause. -nmatsakis\n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,GenericsOfItem,PredicatesOfItem,\\\n-                                        TypeOfItem\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,generics_of,predicates_of,\\\n+                                        type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_bound_to_type_param_of_method<'a, T: 'a>(&self) { }\n }\n@@ -408,7 +408,7 @@ impl Foo {\n     // generics before the body, then the `HirId` for things in the\n     // body will be affected. So if you start to see `TypeckTables`\n     // appear dirty, that might be the cause. -nmatsakis\n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,PredicatesOfItem\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,predicates_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_trait_bound_to_type_param_of_method<T: Clone>(&self) { }\n }\n@@ -442,12 +442,12 @@ impl Bar<u32> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,GenericsOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,generics_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl<T> Bar<T> {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"GenericsOfItem,FnSignature,TypeckTables,TypeOfItem,MirOptimized,MirBuilt\"\n+        except=\"generics_of,FnSignature,TypeckTables,type_of,MirOptimized,MirBuilt\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_type_parameter_to_impl(&self) { }"}, {"sha": "3bee2aca5b6c2f1c11d8c3f83b69cfceba0a29a6", "filename": "src/test/incremental/hashes/statics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs?ref=3bf064beaa5d5e02b645f3130375e1340cfca4ac", "patch": "@@ -74,7 +74,7 @@ static STATIC_THREAD_LOCAL: u8 = 0;\n static STATIC_CHANGE_TYPE_1: i16 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_TYPE_1: u64 = 0;\n \n@@ -84,7 +84,7 @@ static STATIC_CHANGE_TYPE_1: u64 = 0;\n static STATIC_CHANGE_TYPE_2: Option<i8> = None;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_TYPE_2: Option<u16> = None;\n \n@@ -144,11 +144,11 @@ mod static_change_type_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as Type;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     static STATIC_CHANGE_TYPE_INDIRECTLY_1: Type = Type;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     static STATIC_CHANGE_TYPE_INDIRECTLY_2: Option<Type> = None;\n }"}, {"sha": "8d32e33054ccc15d3831bbed8df9bb577f7127b0", "filename": "src/test/incremental/hashes/struct_defs.rs", "status": "modified", "additions": 126, "deletions": 126, "changes": 252, "blob_url": "https://github.com/rust-lang/rust/blob/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs?ref=3bf064beaa5d5e02b645f3130375e1340cfca4ac", "patch": "@@ -26,14 +26,14 @@ pub struct LayoutPacked;\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n #[repr(packed)]\n pub struct LayoutPacked;\n \n@@ -43,14 +43,14 @@ struct LayoutC;\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n #[repr(C)]\n struct LayoutC;\n \n@@ -63,14 +63,14 @@ struct TupleStructFieldType(i32);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n // Note that changing the type of a field does not change the type of the struct or enum, but\n // adding/removing fields or changing a fields name or visibility does.\n struct TupleStructFieldType(\n@@ -86,14 +86,14 @@ struct TupleStructAddField(i32);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct TupleStructAddField(\n     i32,\n     u32\n@@ -108,14 +108,14 @@ struct TupleStructFieldVisibility(char);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct TupleStructFieldVisibility(pub char);\n \n \n@@ -127,14 +127,14 @@ struct RecordStructFieldType { x: f32 }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n // Note that changing the type of a field does not change the type of the struct or enum, but\n // adding/removing fields or changing a fields name or visibility does.\n struct RecordStructFieldType {\n@@ -150,14 +150,14 @@ struct RecordStructFieldName { x: f32 }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct RecordStructFieldName { y: f32 }\n \n \n@@ -169,14 +169,14 @@ struct RecordStructAddField { x: f32 }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct RecordStructAddField {\n     x: f32,\n     y: () }\n@@ -190,14 +190,14 @@ struct RecordStructFieldVisibility { x: f32 }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct RecordStructFieldVisibility {\n     pub x: f32\n }\n@@ -211,14 +211,14 @@ struct AddLifetimeParameter<'a>(&'a f32, &'a f64);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct AddLifetimeParameter<'a, 'b>(&'a f32, &'b f64);\n \n \n@@ -230,14 +230,14 @@ struct AddLifetimeParameterBound<'a, 'b>(&'a f32, &'b f64);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct AddLifetimeParameterBound<'a, 'b: 'a>(\n     &'a f32,\n     &'b f64\n@@ -249,14 +249,14 @@ struct AddLifetimeParameterBoundWhereClause<'a, 'b>(&'a f32, &'b f64);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct AddLifetimeParameterBoundWhereClause<'a, 'b>(\n     &'a f32,\n     &'b f64)\n@@ -271,14 +271,14 @@ struct AddTypeParameter<T1>(T1, T1);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct AddTypeParameter<T1, T2>(\n      // The field contains the parent's Generics, so it's dirty even though its\n      // type hasn't changed.\n@@ -295,14 +295,14 @@ struct AddTypeParameterBound<T>(T);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct AddTypeParameterBound<T: Send>(\n     T\n );\n@@ -314,14 +314,14 @@ struct AddTypeParameterBoundWhereClause<T>(T);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n struct AddTypeParameterBoundWhereClause<T>(\n     T\n ) where T: Sync;\n@@ -334,14 +334,14 @@ struct AddTypeParameterBoundWhereClause<T>(\n // Note: there is no #[cfg(...)], so this is ALWAYS compiled\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n pub struct EmptyStruct;\n \n \n@@ -353,14 +353,14 @@ struct Visibility;\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n pub struct Visibility;\n \n struct ReferencedType1;\n@@ -375,14 +375,14 @@ mod tuple_struct_change_field_type_indirectly {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n     struct TupleStruct(\n         FieldType\n     );\n@@ -398,14 +398,14 @@ mod record_struct_change_field_type_indirectly {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n     struct RecordStruct {\n         _x: FieldType\n     }\n@@ -426,14 +426,14 @@ mod change_trait_bound_indirectly {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-    #[rustc_dirty(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n     struct Struct<T: Trait>(T);\n }\n \n@@ -446,13 +446,13 @@ mod change_trait_bound_indirectly_in_where_clause {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n-    #[rustc_dirty(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n     struct Struct<T>(T) where T : Trait;\n }"}, {"sha": "bd6d3a7e56fc38a280e84da4b2688c6e0bd2e6a2", "filename": "src/test/ui/dep-graph/dep-graph-struct-signature.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.rs?ref=3bf064beaa5d5e02b645f3130375e1340cfca4ac", "patch": "@@ -24,7 +24,7 @@ struct WontChange {\n mod signatures {\n     use WillChange;\n \n-    #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR no path\n+    #[rustc_then_this_would_need(type_of)] //~ ERROR no path\n     #[rustc_then_this_would_need(AssociatedItems)] //~ ERROR no path\n     #[rustc_then_this_would_need(TraitDefOfItem)] //~ ERROR no path\n     trait Bar {\n@@ -42,36 +42,36 @@ mod signatures {\n         WillChange { x: x, y: y }\n     }\n \n-    #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR OK\n+    #[rustc_then_this_would_need(type_of)] //~ ERROR OK\n     impl WillChange {\n         #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK\n         #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n         fn new(x: u32, y: u32) -> WillChange { loop { } }\n     }\n \n-    #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR OK\n+    #[rustc_then_this_would_need(type_of)] //~ ERROR OK\n     impl WillChange {\n         #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK\n         #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n         fn method(&self, x: u32) { }\n     }\n \n     struct WillChanges {\n-        #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR OK\n+        #[rustc_then_this_would_need(type_of)] //~ ERROR OK\n         x: WillChange,\n-        #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR OK\n+        #[rustc_then_this_would_need(type_of)] //~ ERROR OK\n         y: WillChange\n     }\n \n     // The fields change, not the type itself.\n-    #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR no path\n+    #[rustc_then_this_would_need(type_of)] //~ ERROR no path\n     fn indirect(x: WillChanges) { }\n }\n \n mod invalid_signatures {\n     use WontChange;\n \n-    #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR no path\n+    #[rustc_then_this_would_need(type_of)] //~ ERROR no path\n     trait A {\n         #[rustc_then_this_would_need(FnSignature)] //~ ERROR no path\n         fn do_something_else_twice(x: WontChange);"}, {"sha": "7aa4251752e5ca46075e4dbe426368bbdf386b69", "filename": "src/test/ui/dep-graph/dep-graph-struct-signature.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.stderr?ref=3bf064beaa5d5e02b645f3130375e1340cfca4ac", "patch": "@@ -1,8 +1,8 @@\n-error: no path from `WillChange` to `TypeOfItem`\n+error: no path from `WillChange` to `type_of`\n   --> $DIR/dep-graph-struct-signature.rs:27:5\n    |\n-LL |     #[rustc_then_this_would_need(TypeOfItem)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[rustc_then_this_would_need(type_of)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: no path from `WillChange` to `AssociatedItems`\n   --> $DIR/dep-graph-struct-signature.rs:28:5\n@@ -43,38 +43,38 @@ LL |     #[rustc_then_this_would_need(TypeckTables)]\n error: OK\n   --> $DIR/dep-graph-struct-signature.rs:45:5\n    |\n-LL |     #[rustc_then_this_would_need(TypeOfItem)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[rustc_then_this_would_need(type_of)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n   --> $DIR/dep-graph-struct-signature.rs:52:5\n    |\n-LL |     #[rustc_then_this_would_need(TypeOfItem)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[rustc_then_this_would_need(type_of)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n   --> $DIR/dep-graph-struct-signature.rs:60:9\n    |\n-LL |         #[rustc_then_this_would_need(TypeOfItem)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         #[rustc_then_this_would_need(type_of)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n   --> $DIR/dep-graph-struct-signature.rs:62:9\n    |\n-LL |         #[rustc_then_this_would_need(TypeOfItem)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         #[rustc_then_this_would_need(type_of)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: no path from `WillChange` to `TypeOfItem`\n+error: no path from `WillChange` to `type_of`\n   --> $DIR/dep-graph-struct-signature.rs:67:5\n    |\n-LL |     #[rustc_then_this_would_need(TypeOfItem)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[rustc_then_this_would_need(type_of)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: no path from `WillChange` to `TypeOfItem`\n+error: no path from `WillChange` to `type_of`\n   --> $DIR/dep-graph-struct-signature.rs:74:5\n    |\n-LL |     #[rustc_then_this_would_need(TypeOfItem)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[rustc_then_this_would_need(type_of)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: no path from `WillChange` to `FnSignature`\n   --> $DIR/dep-graph-struct-signature.rs:80:5"}, {"sha": "5621284fb18b2ec24c45ef536fc52e1a77072f79", "filename": "src/test/ui/dep-graph/dep-graph-type-alias.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.rs?ref=3bf064beaa5d5e02b645f3130375e1340cfca4ac", "patch": "@@ -14,38 +14,38 @@ type TypeAlias = u32;\n \n // The type alias directly affects the type of the field,\n // not the enclosing struct:\n-#[rustc_then_this_would_need(TypeOfItem)] //~ ERROR no path\n+#[rustc_then_this_would_need(type_of)] //~ ERROR no path\n struct Struct {\n-    #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR OK\n+    #[rustc_then_this_would_need(type_of)] //~ ERROR OK\n     x: TypeAlias,\n     y: u32\n }\n \n-#[rustc_then_this_would_need(TypeOfItem)] //~ ERROR no path\n+#[rustc_then_this_would_need(type_of)] //~ ERROR no path\n enum Enum {\n     Variant1 {\n-        #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR OK\n+        #[rustc_then_this_would_need(type_of)] //~ ERROR OK\n         t: TypeAlias\n     },\n     Variant2(i32)\n }\n \n-#[rustc_then_this_would_need(TypeOfItem)] //~ ERROR no path\n+#[rustc_then_this_would_need(type_of)] //~ ERROR no path\n trait Trait {\n     #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK\n     fn method(&self, _: TypeAlias);\n }\n \n struct SomeType;\n \n-#[rustc_then_this_would_need(TypeOfItem)] //~ ERROR no path\n+#[rustc_then_this_would_need(type_of)] //~ ERROR no path\n impl SomeType {\n     #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK\n     #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n     fn method(&self, _: TypeAlias) {}\n }\n \n-#[rustc_then_this_would_need(TypeOfItem)] //~ ERROR OK\n+#[rustc_then_this_would_need(type_of)] //~ ERROR OK\n type TypeAlias2 = TypeAlias;\n \n #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK"}, {"sha": "520c2a5ed2182f9ec0eafead5bdba9493726656c", "filename": "src/test/ui/dep-graph/dep-graph-type-alias.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bf064beaa5d5e02b645f3130375e1340cfca4ac/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.stderr?ref=3bf064beaa5d5e02b645f3130375e1340cfca4ac", "patch": "@@ -1,44 +1,44 @@\n-error: no path from `TypeAlias` to `TypeOfItem`\n+error: no path from `TypeAlias` to `type_of`\n   --> $DIR/dep-graph-type-alias.rs:17:1\n    |\n-LL | #[rustc_then_this_would_need(TypeOfItem)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_then_this_would_need(type_of)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n   --> $DIR/dep-graph-type-alias.rs:19:5\n    |\n-LL |     #[rustc_then_this_would_need(TypeOfItem)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[rustc_then_this_would_need(type_of)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: no path from `TypeAlias` to `TypeOfItem`\n+error: no path from `TypeAlias` to `type_of`\n   --> $DIR/dep-graph-type-alias.rs:24:1\n    |\n-LL | #[rustc_then_this_would_need(TypeOfItem)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_then_this_would_need(type_of)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n   --> $DIR/dep-graph-type-alias.rs:27:9\n    |\n-LL |         #[rustc_then_this_would_need(TypeOfItem)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         #[rustc_then_this_would_need(type_of)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: no path from `TypeAlias` to `TypeOfItem`\n+error: no path from `TypeAlias` to `type_of`\n   --> $DIR/dep-graph-type-alias.rs:33:1\n    |\n-LL | #[rustc_then_this_would_need(TypeOfItem)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_then_this_would_need(type_of)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: no path from `TypeAlias` to `TypeOfItem`\n+error: no path from `TypeAlias` to `type_of`\n   --> $DIR/dep-graph-type-alias.rs:41:1\n    |\n-LL | #[rustc_then_this_would_need(TypeOfItem)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_then_this_would_need(type_of)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n   --> $DIR/dep-graph-type-alias.rs:48:1\n    |\n-LL | #[rustc_then_this_would_need(TypeOfItem)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_then_this_would_need(type_of)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n   --> $DIR/dep-graph-type-alias.rs:51:1"}]}