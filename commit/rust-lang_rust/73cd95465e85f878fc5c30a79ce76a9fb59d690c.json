{"sha": "73cd95465e85f878fc5c30a79ce76a9fb59d690c", "node_id": "C_kwDOAAsO6NoAKDczY2Q5NTQ2NWU4NWY4NzhmYzVjMzBhNzljZTc2YTlmYjU5ZDY5MGM", "commit": {"author": {"name": "Sosth\u00e8ne Gu\u00e9don", "email": "sosthene@guedon.gdn", "date": "2022-07-16T08:22:43Z"}, "committer": {"name": "Sosth\u00e8ne Gu\u00e9don", "email": "sosthene@guedon.gdn", "date": "2022-08-08T19:04:41Z"}, "message": "Add iter_once and iter_empty lints", "tree": {"sha": "064644eee9aadb86c3ab60be20b243ad486af42b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/064644eee9aadb86c3ab60be20b243ad486af42b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73cd95465e85f878fc5c30a79ce76a9fb59d690c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73cd95465e85f878fc5c30a79ce76a9fb59d690c", "html_url": "https://github.com/rust-lang/rust/commit/73cd95465e85f878fc5c30a79ce76a9fb59d690c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73cd95465e85f878fc5c30a79ce76a9fb59d690c/comments", "author": {"login": "sgued", "id": 51865119, "node_id": "MDQ6VXNlcjUxODY1MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/51865119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgued", "html_url": "https://github.com/sgued", "followers_url": "https://api.github.com/users/sgued/followers", "following_url": "https://api.github.com/users/sgued/following{/other_user}", "gists_url": "https://api.github.com/users/sgued/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgued/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgued/subscriptions", "organizations_url": "https://api.github.com/users/sgued/orgs", "repos_url": "https://api.github.com/users/sgued/repos", "events_url": "https://api.github.com/users/sgued/events{/privacy}", "received_events_url": "https://api.github.com/users/sgued/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgued", "id": 51865119, "node_id": "MDQ6VXNlcjUxODY1MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/51865119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgued", "html_url": "https://github.com/sgued", "followers_url": "https://api.github.com/users/sgued/followers", "following_url": "https://api.github.com/users/sgued/following{/other_user}", "gists_url": "https://api.github.com/users/sgued/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgued/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgued/subscriptions", "organizations_url": "https://api.github.com/users/sgued/orgs", "repos_url": "https://api.github.com/users/sgued/repos", "events_url": "https://api.github.com/users/sgued/events{/privacy}", "received_events_url": "https://api.github.com/users/sgued/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f390610a521b745b2fb84945b258371983fed49", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f390610a521b745b2fb84945b258371983fed49", "html_url": "https://github.com/rust-lang/rust/commit/8f390610a521b745b2fb84945b258371983fed49"}], "stats": {"total": 383, "additions": 383, "deletions": 0}, "files": [{"sha": "94f71eba0a2969636702bb46a0a59039f307d9b5", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cd95465e85f878fc5c30a79ce76a9fb59d690c/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/73cd95465e85f878fc5c30a79ce76a9fb59d690c/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=73cd95465e85f878fc5c30a79ce76a9fb59d690c", "patch": "@@ -3651,11 +3651,13 @@ Released 2018-09-13\n [`items_after_statements`]: https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements\n [`iter_cloned_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_cloned_collect\n [`iter_count`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_count\n+[`iter_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_empty\n [`iter_next_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_next_loop\n [`iter_next_slice`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_next_slice\n [`iter_not_returning_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_not_returning_iterator\n [`iter_nth`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth\n [`iter_nth_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth_zero\n+[`iter_once`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_once\n [`iter_overeager_cloned`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_overeager_cloned\n [`iter_skip_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_skip_next\n [`iter_with_drain`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_with_drain"}, {"sha": "098960011123364c93ac41eef1b86b284eed17f7", "filename": "clippy_lints/src/iter_once_empty.rs", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/73cd95465e85f878fc5c30a79ce76a9fb59d690c/clippy_lints%2Fsrc%2Fiter_once_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cd95465e85f878fc5c30a79ce76a9fb59d690c/clippy_lints%2Fsrc%2Fiter_once_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fiter_once_empty.rs?ref=73cd95465e85f878fc5c30a79ce76a9fb59d690c", "patch": "@@ -0,0 +1,164 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n+use rustc_ast::ast::{Expr, ExprKind};\n+use rustc_errors::Applicability;\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Checks for usage of:\n+    ///\n+    /// - `[foo].iter()`\n+    /// - `[foo].iter_mut()`\n+    /// - `[foo].into_iter()`\n+    /// - `Some(foo).iter()`\n+    /// - `Some(foo).iter_mut()`\n+    /// - `Some(foo).into_iter()`\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// It is simpler to use the once function from the standard library:\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// let a = [123].iter();\n+    /// let b = Some(123).into_iter();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::iter;\n+    /// let a = iter::once(&123);\n+    /// let b = iter::once(123);\n+    /// ```\n+    ///\n+    /// ### Known problems\n+    ///\n+    /// The type of the resulting iterator might become incompatible with its usage\n+    #[clippy::version = \"1.64.0\"]\n+    pub ITER_ONCE,\n+    nursery,\n+    \"Iterator for array of length 1\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Checks for usage of:\n+    ///\n+    /// - `[].iter()`\n+    /// - `[].iter_mut()`\n+    /// - `[].into_iter()`\n+    /// - `None.iter()`\n+    /// - `None.iter_mut()`\n+    /// - `None.into_iter()`\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// It is simpler to use the empty function from the standard library:\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// use std::{slice, option};\n+    /// let a: slice::Iter<i32> = [].iter();\n+    /// let f: option::IntoIter<i32> = None.into_iter();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::iter;\n+    /// let a: iter::Empty<i32> = iter::empty();\n+    /// let b: iter::Empty<i32> = iter::empty();\n+    /// ```\n+    ///\n+    /// ### Known problems\n+    ///\n+    /// The type of the resulting iterator might become incompatible with its usage\n+    #[clippy::version = \"1.64.0\"]\n+    pub ITER_EMPTY,\n+    nursery,\n+    \"Iterator for empty array\"\n+}\n+\n+declare_lint_pass!(IterOnceEmpty => [ITER_ONCE, ITER_EMPTY]);\n+\n+impl EarlyLintPass for IterOnceEmpty {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n+        if expr.span.from_expansion() {\n+            // Don't lint match expressions present in\n+            // macro_rules! block\n+            return;\n+        }\n+\n+        let (method_name, args) = if let ExprKind::MethodCall(seg, args, _) = &expr.kind {\n+            (seg.ident.as_str(), args)\n+        } else {\n+            return;\n+        };\n+        let arg = if args.len() == 1 {\n+            &args[0]\n+        } else {\n+            return;\n+        };\n+\n+        let item = match &arg.kind {\n+            ExprKind::Array(v) if v.len() <= 1 => v.first(),\n+            ExprKind::Path(None, p) => {\n+                if p.segments.len() == 1 && p.segments[0].ident.name == rustc_span::sym::None {\n+                    None\n+                } else {\n+                    return;\n+                }\n+            },\n+            ExprKind::Call(f, some_args) if some_args.len() == 1 => {\n+                if let ExprKind::Path(None, p) = &f.kind {\n+                    if p.segments.len() == 1 && p.segments[0].ident.name == rustc_span::sym::Some {\n+                        Some(&some_args[0])\n+                    } else {\n+                        return;\n+                    }\n+                } else {\n+                    return;\n+                }\n+            },\n+            _ => return,\n+        };\n+\n+        if let Some(i) = item {\n+            let (sugg, msg) = match method_name {\n+                \"iter\" => (\n+                    format!(\"std::iter::once(&{})\", snippet(cx, i.span, \"...\")),\n+                    \"this `iter` call can be replaced with std::iter::once\",\n+                ),\n+                \"iter_mut\" => (\n+                    format!(\"std::iter::once(&mut {})\", snippet(cx, i.span, \"...\")),\n+                    \"this `iter_mut` call can be replaced with std::iter::once\",\n+                ),\n+                \"into_iter\" => (\n+                    format!(\"std::iter::once({})\", snippet(cx, i.span, \"...\")),\n+                    \"this `into_iter` call can be replaced with std::iter::once\",\n+                ),\n+                _ => return,\n+            };\n+            span_lint_and_sugg(cx, ITER_ONCE, expr.span, msg, \"try\", sugg, Applicability::Unspecified);\n+        } else {\n+            let msg = match method_name {\n+                \"iter\" => \"this `iter call` can be replaced with std::iter::empty\",\n+                \"iter_mut\" => \"this `iter_mut` call can be replaced with std::iter::empty\",\n+                \"into_iter\" => \"this `into_iter` call can be replaced with std::iter::empty\",\n+                _ => return,\n+            };\n+            span_lint_and_sugg(\n+                cx,\n+                ITER_EMPTY,\n+                expr.span,\n+                msg,\n+                \"try\",\n+                \"std::iter::empty()\".to_string(),\n+                Applicability::Unspecified,\n+            );\n+        }\n+    }\n+}"}, {"sha": "49fc3a8952743b08979d21ec6527f9a40f7c4854", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cd95465e85f878fc5c30a79ce76a9fb59d690c/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cd95465e85f878fc5c30a79ce76a9fb59d690c/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=73cd95465e85f878fc5c30a79ce76a9fb59d690c", "patch": "@@ -200,6 +200,8 @@ store.register_lints(&[\n     invalid_utf8_in_unchecked::INVALID_UTF8_IN_UNCHECKED,\n     items_after_statements::ITEMS_AFTER_STATEMENTS,\n     iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR,\n+    iter_once_empty::ITER_EMPTY,\n+    iter_once_empty::ITER_ONCE,\n     large_const_arrays::LARGE_CONST_ARRAYS,\n     large_enum_variant::LARGE_ENUM_VARIANT,\n     large_include_file::LARGE_INCLUDE_FILE,"}, {"sha": "9953aca43ee2b683576fbdb6a401cc6341205cf7", "filename": "clippy_lints/src/lib.register_nursery.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cd95465e85f878fc5c30a79ce76a9fb59d690c/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cd95465e85f878fc5c30a79ce76a9fb59d690c/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_nursery.rs?ref=73cd95465e85f878fc5c30a79ce76a9fb59d690c", "patch": "@@ -14,6 +14,8 @@ store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n     LintId::of(index_refutable_slice::INDEX_REFUTABLE_SLICE),\n     LintId::of(let_if_seq::USELESS_LET_IF_SEQ),\n     LintId::of(matches::SIGNIFICANT_DROP_IN_SCRUTINEE),\n+    LintId::of(methods::ITER_EMPTY),\n+    LintId::of(methods::ITER_ONCE),\n     LintId::of(methods::ITER_WITH_DRAIN),\n     LintId::of(missing_const_for_fn::MISSING_CONST_FOR_FN),\n     LintId::of(mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),"}, {"sha": "6063fb00a7b6ce50fba875e6b6ba04e8c4977733", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cd95465e85f878fc5c30a79ce76a9fb59d690c/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cd95465e85f878fc5c30a79ce76a9fb59d690c/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=73cd95465e85f878fc5c30a79ce76a9fb59d690c", "patch": "@@ -41,6 +41,8 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS),\n     LintId::of(items_after_statements::ITEMS_AFTER_STATEMENTS),\n     LintId::of(iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR),\n+    LintId::of(iter_once_empty::ITER_EMPTY),\n+    LintId::of(iter_once_empty::ITER_ONCE),\n     LintId::of(large_stack_arrays::LARGE_STACK_ARRAYS),\n     LintId::of(let_underscore::LET_UNDERSCORE_DROP),\n     LintId::of(literal_representation::LARGE_DIGIT_GROUPS),"}, {"sha": "78279db9ad54a3345d5791795a710d1f3ca4c267", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73cd95465e85f878fc5c30a79ce76a9fb59d690c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cd95465e85f878fc5c30a79ce76a9fb59d690c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=73cd95465e85f878fc5c30a79ce76a9fb59d690c", "patch": "@@ -258,6 +258,7 @@ mod invalid_upcast_comparisons;\n mod invalid_utf8_in_unchecked;\n mod items_after_statements;\n mod iter_not_returning_iterator;\n+mod iter_once_empty;\n mod large_const_arrays;\n mod large_enum_variant;\n mod large_include_file;\n@@ -931,6 +932,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(invalid_utf8_in_unchecked::InvalidUtf8InUnchecked));\n     store.register_late_pass(|| Box::new(std_instead_of_core::StdReexports::default()));\n     store.register_late_pass(|| Box::new(manual_instant_elapsed::ManualInstantElapsed));\n+    store.register_early_pass(|| Box::new(iter_once_empty::IterOnceEmpty));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "9c58978a0703d5bbc4cc6264ace31208459608bf", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73cd95465e85f878fc5c30a79ce76a9fb59d690c/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cd95465e85f878fc5c30a79ce76a9fb59d690c/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=73cd95465e85f878fc5c30a79ce76a9fb59d690c", "patch": "@@ -484,6 +484,7 @@ pub fn def_path_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n     }\n     fn find_primitive<'tcx>(tcx: TyCtxt<'tcx>, name: &str) -> impl Iterator<Item = DefId> + 'tcx {\n         let single = |ty| tcx.incoherent_impls(ty).iter().copied();\n+        #[allow(clippy::iter_empty)]\n         let empty = || [].iter().copied();\n         match name {\n             \"bool\" => single(BoolSimplifiedType),"}, {"sha": "fb7118f0d4a07cd26eae88336095a6fc17c57297", "filename": "tests/ui/iter_empty.fixed", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/73cd95465e85f878fc5c30a79ce76a9fb59d690c/tests%2Fui%2Fiter_empty.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/73cd95465e85f878fc5c30a79ce76a9fb59d690c/tests%2Fui%2Fiter_empty.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_empty.fixed?ref=73cd95465e85f878fc5c30a79ce76a9fb59d690c", "patch": "@@ -0,0 +1,32 @@\n+// run-rustfix\n+#![warn(clippy::iter_empty)]\n+#![allow(clippy::iter_next_slice, clippy::redundant_clone)]\n+\n+fn array() {\n+    assert_eq!(std::iter::empty().next(), Option::<i32>::None);\n+    assert_eq!(std::iter::empty().next(), Option::<&mut i32>::None);\n+    assert_eq!(std::iter::empty().next(), Option::<&i32>::None);\n+    assert_eq!(std::iter::empty().next(), Option::<i32>::None);\n+    assert_eq!(std::iter::empty().next(), Option::<&mut i32>::None);\n+    assert_eq!(std::iter::empty().next(), Option::<&i32>::None);\n+\n+    // Don't trigger on non-iter methods\n+    let _: Option<String> = None.clone();\n+    let _: [String; 0] = [].clone();\n+}\n+\n+macro_rules! in_macros {\n+    () => {\n+        assert_eq!([].into_iter().next(), Option::<i32>::None);\n+        assert_eq!([].iter_mut().next(), Option::<&mut i32>::None);\n+        assert_eq!([].iter().next(), Option::<&i32>::None);\n+        assert_eq!(None.into_iter().next(), Option::<i32>::None);\n+        assert_eq!(None.iter_mut().next(), Option::<&mut i32>::None);\n+        assert_eq!(None.iter().next(), Option::<&i32>::None);\n+    };\n+}\n+\n+fn main() {\n+    array();\n+    in_macros!();\n+}"}, {"sha": "bb192fe16d1f16aed3fbc873bb18b8e9a6abfb0f", "filename": "tests/ui/iter_empty.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/73cd95465e85f878fc5c30a79ce76a9fb59d690c/tests%2Fui%2Fiter_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cd95465e85f878fc5c30a79ce76a9fb59d690c/tests%2Fui%2Fiter_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_empty.rs?ref=73cd95465e85f878fc5c30a79ce76a9fb59d690c", "patch": "@@ -0,0 +1,32 @@\n+// run-rustfix\n+#![warn(clippy::iter_empty)]\n+#![allow(clippy::iter_next_slice, clippy::redundant_clone)]\n+\n+fn array() {\n+    assert_eq!([].into_iter().next(), Option::<i32>::None);\n+    assert_eq!([].iter_mut().next(), Option::<&mut i32>::None);\n+    assert_eq!([].iter().next(), Option::<&i32>::None);\n+    assert_eq!(None.into_iter().next(), Option::<i32>::None);\n+    assert_eq!(None.iter_mut().next(), Option::<&mut i32>::None);\n+    assert_eq!(None.iter().next(), Option::<&i32>::None);\n+\n+    // Don't trigger on non-iter methods\n+    let _: Option<String> = None.clone();\n+    let _: [String; 0] = [].clone();\n+}\n+\n+macro_rules! in_macros {\n+    () => {\n+        assert_eq!([].into_iter().next(), Option::<i32>::None);\n+        assert_eq!([].iter_mut().next(), Option::<&mut i32>::None);\n+        assert_eq!([].iter().next(), Option::<&i32>::None);\n+        assert_eq!(None.into_iter().next(), Option::<i32>::None);\n+        assert_eq!(None.iter_mut().next(), Option::<&mut i32>::None);\n+        assert_eq!(None.iter().next(), Option::<&i32>::None);\n+    };\n+}\n+\n+fn main() {\n+    array();\n+    in_macros!();\n+}"}, {"sha": "f4f06e93b237748fead04a95da5296246df92f7a", "filename": "tests/ui/iter_empty.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/73cd95465e85f878fc5c30a79ce76a9fb59d690c/tests%2Fui%2Fiter_empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73cd95465e85f878fc5c30a79ce76a9fb59d690c/tests%2Fui%2Fiter_empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_empty.stderr?ref=73cd95465e85f878fc5c30a79ce76a9fb59d690c", "patch": "@@ -0,0 +1,40 @@\n+error: this `into_iter` call can be replaced with std::iter::empty\n+  --> $DIR/iter_empty.rs:6:16\n+   |\n+LL |     assert_eq!([].into_iter().next(), Option::<i32>::None);\n+   |                ^^^^^^^^^^^^^^ help: try: `std::iter::empty()`\n+   |\n+   = note: `-D clippy::iter-empty` implied by `-D warnings`\n+\n+error: this `iter_mut` call can be replaced with std::iter::empty\n+  --> $DIR/iter_empty.rs:7:16\n+   |\n+LL |     assert_eq!([].iter_mut().next(), Option::<&mut i32>::None);\n+   |                ^^^^^^^^^^^^^ help: try: `std::iter::empty()`\n+\n+error: this `iter call` can be replaced with std::iter::empty\n+  --> $DIR/iter_empty.rs:8:16\n+   |\n+LL |     assert_eq!([].iter().next(), Option::<&i32>::None);\n+   |                ^^^^^^^^^ help: try: `std::iter::empty()`\n+\n+error: this `into_iter` call can be replaced with std::iter::empty\n+  --> $DIR/iter_empty.rs:9:16\n+   |\n+LL |     assert_eq!(None.into_iter().next(), Option::<i32>::None);\n+   |                ^^^^^^^^^^^^^^^^ help: try: `std::iter::empty()`\n+\n+error: this `iter_mut` call can be replaced with std::iter::empty\n+  --> $DIR/iter_empty.rs:10:16\n+   |\n+LL |     assert_eq!(None.iter_mut().next(), Option::<&mut i32>::None);\n+   |                ^^^^^^^^^^^^^^^ help: try: `std::iter::empty()`\n+\n+error: this `iter call` can be replaced with std::iter::empty\n+  --> $DIR/iter_empty.rs:11:16\n+   |\n+LL |     assert_eq!(None.iter().next(), Option::<&i32>::None);\n+   |                ^^^^^^^^^^^ help: try: `std::iter::empty()`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "7247e34d7e8675771b164b770c163dba27838fca", "filename": "tests/ui/iter_once.fixed", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/73cd95465e85f878fc5c30a79ce76a9fb59d690c/tests%2Fui%2Fiter_once.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/73cd95465e85f878fc5c30a79ce76a9fb59d690c/tests%2Fui%2Fiter_once.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_once.fixed?ref=73cd95465e85f878fc5c30a79ce76a9fb59d690c", "patch": "@@ -0,0 +1,32 @@\n+// run-rustfix\n+#![warn(clippy::iter_once)]\n+#![allow(clippy::iter_next_slice, clippy::redundant_clone)]\n+\n+fn array() {\n+    assert_eq!(std::iter::once(123).next(), Some(123));\n+    assert_eq!(std::iter::once(&mut 123).next(), Some(&mut 123));\n+    assert_eq!(std::iter::once(&123).next(), Some(&123));\n+    assert_eq!(std::iter::once(123).next(), Some(123));\n+    assert_eq!(std::iter::once(&mut 123).next(), Some(&mut 123));\n+    assert_eq!(std::iter::once(&123).next(), Some(&123));\n+\n+    // Don't trigger on non-iter methods\n+    let _: Option<String> = Some(\"test\".to_string()).clone();\n+    let _: [String; 1] = [\"test\".to_string()].clone();\n+}\n+\n+macro_rules! in_macros {\n+    () => {\n+        assert_eq!([123].into_iter().next(), Some(123));\n+        assert_eq!([123].iter_mut().next(), Some(&mut 123));\n+        assert_eq!([123].iter().next(), Some(&123));\n+        assert_eq!(Some(123).into_iter().next(), Some(123));\n+        assert_eq!(Some(123).iter_mut().next(), Some(&mut 123));\n+        assert_eq!(Some(123).iter().next(), Some(&123));\n+    };\n+}\n+\n+fn main() {\n+    array();\n+    in_macros!();\n+}"}, {"sha": "3a2b9c95cc53e7dce18480db664fe0214274d893", "filename": "tests/ui/iter_once.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/73cd95465e85f878fc5c30a79ce76a9fb59d690c/tests%2Fui%2Fiter_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cd95465e85f878fc5c30a79ce76a9fb59d690c/tests%2Fui%2Fiter_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_once.rs?ref=73cd95465e85f878fc5c30a79ce76a9fb59d690c", "patch": "@@ -0,0 +1,32 @@\n+// run-rustfix\n+#![warn(clippy::iter_once)]\n+#![allow(clippy::iter_next_slice, clippy::redundant_clone)]\n+\n+fn array() {\n+    assert_eq!([123].into_iter().next(), Some(123));\n+    assert_eq!([123].iter_mut().next(), Some(&mut 123));\n+    assert_eq!([123].iter().next(), Some(&123));\n+    assert_eq!(Some(123).into_iter().next(), Some(123));\n+    assert_eq!(Some(123).iter_mut().next(), Some(&mut 123));\n+    assert_eq!(Some(123).iter().next(), Some(&123));\n+\n+    // Don't trigger on non-iter methods\n+    let _: Option<String> = Some(\"test\".to_string()).clone();\n+    let _: [String; 1] = [\"test\".to_string()].clone();\n+}\n+\n+macro_rules! in_macros {\n+    () => {\n+        assert_eq!([123].into_iter().next(), Some(123));\n+        assert_eq!([123].iter_mut().next(), Some(&mut 123));\n+        assert_eq!([123].iter().next(), Some(&123));\n+        assert_eq!(Some(123).into_iter().next(), Some(123));\n+        assert_eq!(Some(123).iter_mut().next(), Some(&mut 123));\n+        assert_eq!(Some(123).iter().next(), Some(&123));\n+    };\n+}\n+\n+fn main() {\n+    array();\n+    in_macros!();\n+}"}, {"sha": "d9e8f96f76396c9728c2e0e6b8841205d2df4eb3", "filename": "tests/ui/iter_once.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/73cd95465e85f878fc5c30a79ce76a9fb59d690c/tests%2Fui%2Fiter_once.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73cd95465e85f878fc5c30a79ce76a9fb59d690c/tests%2Fui%2Fiter_once.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_once.stderr?ref=73cd95465e85f878fc5c30a79ce76a9fb59d690c", "patch": "@@ -0,0 +1,40 @@\n+error: this `into_iter` call can be replaced with std::iter::once\n+  --> $DIR/iter_once.rs:6:16\n+   |\n+LL |     assert_eq!([123].into_iter().next(), Some(123));\n+   |                ^^^^^^^^^^^^^^^^^ help: try: `std::iter::once(123)`\n+   |\n+   = note: `-D clippy::iter-once` implied by `-D warnings`\n+\n+error: this `iter_mut` call can be replaced with std::iter::once\n+  --> $DIR/iter_once.rs:7:16\n+   |\n+LL |     assert_eq!([123].iter_mut().next(), Some(&mut 123));\n+   |                ^^^^^^^^^^^^^^^^ help: try: `std::iter::once(&mut 123)`\n+\n+error: this `iter` call can be replaced with std::iter::once\n+  --> $DIR/iter_once.rs:8:16\n+   |\n+LL |     assert_eq!([123].iter().next(), Some(&123));\n+   |                ^^^^^^^^^^^^ help: try: `std::iter::once(&123)`\n+\n+error: this `into_iter` call can be replaced with std::iter::once\n+  --> $DIR/iter_once.rs:9:16\n+   |\n+LL |     assert_eq!(Some(123).into_iter().next(), Some(123));\n+   |                ^^^^^^^^^^^^^^^^^^^^^ help: try: `std::iter::once(123)`\n+\n+error: this `iter_mut` call can be replaced with std::iter::once\n+  --> $DIR/iter_once.rs:10:16\n+   |\n+LL |     assert_eq!(Some(123).iter_mut().next(), Some(&mut 123));\n+   |                ^^^^^^^^^^^^^^^^^^^^ help: try: `std::iter::once(&mut 123)`\n+\n+error: this `iter` call can be replaced with std::iter::once\n+  --> $DIR/iter_once.rs:11:16\n+   |\n+LL |     assert_eq!(Some(123).iter().next(), Some(&123));\n+   |                ^^^^^^^^^^^^^^^^ help: try: `std::iter::once(&123)`\n+\n+error: aborting due to 6 previous errors\n+"}]}