{"sha": "10b7e468f3cc263b8df8ff0212d0911ed5a3c090", "node_id": "C_kwDOAAsO6NoAKDEwYjdlNDY4ZjNjYzI2M2I4ZGY4ZmYwMjEyZDA5MTFlZDVhM2MwOTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-07T06:04:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-07T06:04:32Z"}, "message": "Auto merge of #96875 - SabrinaJewson:noop-waker, r=m-ou-se\n\nAdd `task::Waker::noop`\n\nI have found myself reimplementing this function many times when I need a `Context` but don't have a runtime or `futures` to hand.\n\nPrior art: [`futures::task::noop_waker`](https://docs.rs/futures/0.3/futures/task/fn.noop_waker.html) and [`futures::task::noop_waker_ref`](https://docs.rs/futures/0.3/futures/task/fn.noop_waker_ref.html)\n\nTracking issue: https://github.com/rust-lang/rust/issues/98286\n\nUnresolved questions:\n1. Should we also add `RawWaker::noop()`? (I don't think so, I can't think of a use case for it)\n2. Should we also add `Context::noop()`? Depending on the future direction `Context` goes a \"noop context\" might not even make sense in future.\n3. Should it be an associated constant instead? That would allow for `let cx = &mut Context::from_waker(&Waker::NOOP);` to work on one line which is pretty nice. I don't really know what the guideline is here.\n\nr? rust-lang/libs-api `@rustbot` label +T-libs-api -T-libs", "tree": {"sha": "4638537e2fa54b9e0954a04c081528e5dbb04abb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4638537e2fa54b9e0954a04c081528e5dbb04abb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10b7e468f3cc263b8df8ff0212d0911ed5a3c090", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10b7e468f3cc263b8df8ff0212d0911ed5a3c090", "html_url": "https://github.com/rust-lang/rust/commit/10b7e468f3cc263b8df8ff0212d0911ed5a3c090", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10b7e468f3cc263b8df8ff0212d0911ed5a3c090/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3dd578767299e6bcb617fbb28724fe32b31cf3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3dd578767299e6bcb617fbb28724fe32b31cf3b", "html_url": "https://github.com/rust-lang/rust/commit/b3dd578767299e6bcb617fbb28724fe32b31cf3b"}, {"sha": "1818ed7cfe8182c14cf05265d7af21ebd987b71e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1818ed7cfe8182c14cf05265d7af21ebd987b71e", "html_url": "https://github.com/rust-lang/rust/commit/1818ed7cfe8182c14cf05265d7af21ebd987b71e"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "b63fd5c9095fcc8dbfc585754f4376c942688817", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/10b7e468f3cc263b8df8ff0212d0911ed5a3c090/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7e468f3cc263b8df8ff0212d0911ed5a3c090/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=10b7e468f3cc263b8df8ff0212d0911ed5a3c090", "patch": "@@ -2,6 +2,7 @@\n \n use crate::fmt;\n use crate::marker::{PhantomData, Unpin};\n+use crate::ptr;\n \n /// A `RawWaker` allows the implementor of a task executor to create a [`Waker`]\n /// which provides customized wakeup behavior.\n@@ -322,6 +323,45 @@ impl Waker {\n         Waker { waker }\n     }\n \n+    /// Creates a new `Waker` that does nothing when `wake` is called.\n+    ///\n+    /// This is mostly useful for writing tests that need a [`Context`] to poll\n+    /// some futures, but are not expecting those futures to wake the waker or\n+    /// do not need to do anything specific if it happens.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(noop_waker)]\n+    ///\n+    /// use std::future::Future;\n+    /// use std::task;\n+    ///\n+    /// let waker = task::Waker::noop();\n+    /// let mut cx = task::Context::from_waker(&waker);\n+    ///\n+    /// let mut future = Box::pin(async { 10 });\n+    /// assert_eq!(future.as_mut().poll(&mut cx), task::Poll::Ready(10));\n+    /// ```\n+    #[inline]\n+    #[must_use]\n+    #[unstable(feature = \"noop_waker\", issue = \"98286\")]\n+    pub const fn noop() -> Waker {\n+        const VTABLE: RawWakerVTable = RawWakerVTable::new(\n+            // Cloning just returns a new no-op raw waker\n+            |_| RAW,\n+            // `wake` does nothing\n+            |_| {},\n+            // `wake_by_ref` does nothing\n+            |_| {},\n+            // Dropping does nothing as we don't allocate anything\n+            |_| {},\n+        );\n+        const RAW: RawWaker = RawWaker::new(ptr::null(), &VTABLE);\n+\n+        Waker { waker: RAW }\n+    }\n+\n     /// Get a reference to the underlying [`RawWaker`].\n     #[inline]\n     #[must_use]"}]}