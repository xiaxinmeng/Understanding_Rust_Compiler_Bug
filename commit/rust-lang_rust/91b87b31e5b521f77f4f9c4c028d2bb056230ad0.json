{"sha": "91b87b31e5b521f77f4f9c4c028d2bb056230ad0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYjg3YjMxZTViNTIxZjc3ZjRmOWM0YzAyOGQyYmIwNTYyMzBhZDA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-01T06:44:12Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-01T17:45:30Z"}, "message": "Remove the concept of crate directive let statements. Issue #604", "tree": {"sha": "6ede76061284e0909c14d3e2858b092b4e4b3f82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ede76061284e0909c14d3e2858b092b4e4b3f82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91b87b31e5b521f77f4f9c4c028d2bb056230ad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91b87b31e5b521f77f4f9c4c028d2bb056230ad0", "html_url": "https://github.com/rust-lang/rust/commit/91b87b31e5b521f77f4f9c4c028d2bb056230ad0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91b87b31e5b521f77f4f9c4c028d2bb056230ad0/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8fe0d7cee1717fd2b9b2a75323c9c04516154fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8fe0d7cee1717fd2b9b2a75323c9c04516154fd", "html_url": "https://github.com/rust-lang/rust/commit/d8fe0d7cee1717fd2b9b2a75323c9c04516154fd"}], "stats": {"total": 123, "additions": 0, "deletions": 123}, "files": [{"sha": "ca25fb65b21132c06fb33cc0cbe7490e2e57c1b3", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b87b31e5b521f77f4f9c4c028d2bb056230ad0/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b87b31e5b521f77f4f9c4c028d2bb056230ad0/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=91b87b31e5b521f77f4f9c4c028d2bb056230ad0", "patch": "@@ -88,10 +88,6 @@ type crate_ = rec(vec[@crate_directive] directives,\n                   crate_cfg config);\n \n tag crate_directive_ {\n-    // FIXME: cdir_let should be eliminated\n-    // and redirected to the use of const stmt_decls inside\n-    // crate directive blocks.\n-    cdir_let(ident, @expr, vec[@crate_directive]);\n     cdir_src_mod(ident, option::t[filename], vec[attribute]);\n     cdir_dir_mod(ident, option::t[filename],\n                  vec[@crate_directive], vec[attribute]);"}, {"sha": "e37a1f1cf20758f8a0a4529629adda46ec17bd9c", "filename": "src/comp/front/eval.rs", "status": "modified", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/91b87b31e5b521f77f4f9c4c028d2bb056230ad0/src%2Fcomp%2Ffront%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b87b31e5b521f77f4f9c4c028d2bb056230ad0/src%2Fcomp%2Ffront%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Feval.rs?ref=91b87b31e5b521f77f4f9c4c028d2bb056230ad0", "patch": "@@ -65,94 +65,6 @@ fn eval_lit(ctx cx, span sp, @ast::lit lit) -> val {\n     }\n }\n \n-fn eval_expr(ctx cx, @ast::expr x) -> val {\n-    alt (x.node) {\n-        case (ast::expr_path(?pth)) {\n-            cx.sess.span_fatal(x.span, \"evaluating structured path-name\");\n-        }\n-        case (ast::expr_lit(?lit)) { ret eval_lit(cx, x.span, lit); }\n-        case (ast::expr_unary(?op, ?a)) {\n-            auto av = eval_expr(cx, a);\n-            alt (op) {\n-                case (ast::not) {\n-                    if (val_is_bool(av)) { ret val_bool(!val_as_bool(av)); }\n-                    cx.sess.span_fatal(x.span, \"bad types in '!' expression\");\n-                }\n-                case (_) {\n-                    cx.sess.span_fatal(x.span, \"evaluating unsupported unop\");\n-                }\n-            }\n-        }\n-        case (ast::expr_binary(?op, ?a, ?b)) {\n-            auto av = eval_expr(cx, a);\n-            auto bv = eval_expr(cx, b);\n-            alt (op) {\n-                case (ast::add) {\n-                    if (val_is_int(av) && val_is_int(bv)) {\n-                        ret val_int(val_as_int(av) + val_as_int(bv));\n-                    }\n-                    if (val_is_str(av) && val_is_str(bv)) {\n-                        ret val_str(val_as_str(av) + val_as_str(bv));\n-                    }\n-                    cx.sess.span_fatal(x.span, \"bad types in '+' expression\");\n-                }\n-                case (ast::sub) {\n-                    if (val_is_int(av) && val_is_int(bv)) {\n-                        ret val_int(val_as_int(av) - val_as_int(bv));\n-                    }\n-                    cx.sess.span_fatal(x.span, \"bad types in '-' expression\");\n-                }\n-                case (ast::mul) {\n-                    if (val_is_int(av) && val_is_int(bv)) {\n-                        ret val_int(val_as_int(av) * val_as_int(bv));\n-                    }\n-                    cx.sess.span_fatal(x.span, \"bad types in '*' expression\");\n-                }\n-                case (ast::div) {\n-                    if (val_is_int(av) && val_is_int(bv)) {\n-                        ret val_int(val_as_int(av) / val_as_int(bv));\n-                    }\n-                    cx.sess.span_fatal(x.span, \"bad types in '/' expression\");\n-                }\n-                case (ast::rem) {\n-                    if (val_is_int(av) && val_is_int(bv)) {\n-                        ret val_int(val_as_int(av) % val_as_int(bv));\n-                    }\n-                    cx.sess.span_fatal(x.span, \"bad types in '%' expression\");\n-                }\n-                case (ast::and) {\n-                    if (val_is_bool(av) && val_is_bool(bv)) {\n-                        ret val_bool(val_as_bool(av) && val_as_bool(bv));\n-                    }\n-                    cx.sess.span_fatal(x.span,\n-                                       \"bad types in '&&' expression\");\n-                }\n-                case (ast::or) {\n-                    if (val_is_bool(av) && val_is_bool(bv)) {\n-                        ret val_bool(val_as_bool(av) || val_as_bool(bv));\n-                    }\n-                    cx.sess.span_fatal(x.span,\n-                                       \"bad types in '||' expression\");\n-                }\n-                case (ast::eq) {\n-                    ret val_bool(val_eq(cx.sess, x.span, av, bv));\n-                }\n-                case (ast::ne) {\n-                    ret val_bool(!val_eq(cx.sess, x.span, av, bv));\n-                }\n-                case (_) {\n-                    cx.sess.span_fatal(x.span,\n-                                       \"evaluating unsupported binop\");\n-                }\n-            }\n-        }\n-        case (_) {\n-            cx.sess.span_fatal(x.span, \"evaluating unsupported expression\");\n-        }\n-    }\n-    fail;\n-}\n-\n fn val_eq(session::session sess, span sp, val av, val bv) -> bool {\n     if (val_is_bool(av) && val_is_bool(bv)) {\n         val_as_bool(av) == val_as_bool(bv)\n@@ -200,10 +112,6 @@ fn eval_crate_directive(ctx cx, @ast::crate_directive cdir, str prefix,\n                         &mutable vec[@ast::view_item] view_items,\n                         &mutable vec[@ast::item] items) {\n     alt (cdir.node) {\n-        case (ast::cdir_let(?id, ?x, ?cdirs)) {\n-            auto v = eval_expr(cx, x);\n-            eval_crate_directives(cx, cdirs, prefix, view_items, items);\n-        }\n         case (ast::cdir_src_mod(?id, ?file_opt, ?attrs)) {\n             auto file_path = id + \".rs\";\n             alt (file_opt) {"}, {"sha": "f200278e8dfd61a6f0f2632de4dcb9d5c9b87dd2", "filename": "src/comp/front/fold.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b87b31e5b521f77f4f9c4c028d2bb056230ad0/src%2Fcomp%2Ffront%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b87b31e5b521f77f4f9c4c028d2bb056230ad0/src%2Fcomp%2Ffront%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ffold.rs?ref=91b87b31e5b521f77f4f9c4c028d2bb056230ad0", "patch": "@@ -139,10 +139,6 @@ fn noop_fold_crate(&crate_ c, ast_fold fld) -> crate_ {\n fn noop_fold_crate_directive(&crate_directive_ cd, ast_fold fld) \n     -> crate_directive_ {\n     ret alt(cd) {\n-        case(cdir_let(?id, ?e, ?cds)) {\n-            cdir_let(fld.fold_ident(id), fld.fold_expr(e),\n-                     map(fld.fold_crate_directive, cds))\n-                }\n         case(cdir_src_mod(?id,?fname,?attrs)) { \n             cdir_src_mod(fld.fold_ident(id), fname, attrs)\n                 }"}, {"sha": "50a719ea2619ab7b6a274b36cc1f0cabd6a606ac", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/91b87b31e5b521f77f4f9c4c028d2bb056230ad0/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b87b31e5b521f77f4f9c4c028d2bb056230ad0/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=91b87b31e5b521f77f4f9c4c028d2bb056230ad0", "patch": "@@ -2397,17 +2397,6 @@ fn parse_crate_directive(&parser p, vec[ast::attribute] first_outer_attr)\n         auto hi = p.get_hi_pos();\n         expect(p, token::SEMI);\n         ret spanned(lo, hi, ast::cdir_auth(n, a));\n-    } else if (eat_word(p, \"let\")) {\n-        expect(p, token::LPAREN);\n-        auto id = parse_value_ident(p);\n-        expect(p, token::EQ);\n-        auto x = parse_expr(p);\n-        expect(p, token::RPAREN);\n-        expect(p, token::LBRACE);\n-        auto v = parse_crate_directives(p, token::RBRACE, []);\n-        auto hi = p.get_hi_pos();\n-        expect(p, token::RBRACE);\n-        ret spanned(lo, hi, ast::cdir_let(id, x, v));\n     } else if (is_view_item(p)) {\n         auto vi = parse_view_item(p);\n         ret spanned(lo, vi.span.hi, ast::cdir_view_item(vi));"}, {"sha": "3e80ed90032cb276b9e88d2aa11a37d28e0713d6", "filename": "src/comp/middle/visit.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91b87b31e5b521f77f4f9c4c028d2bb056230ad0/src%2Fcomp%2Fmiddle%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b87b31e5b521f77f4f9c4c028d2bb056230ad0/src%2Fcomp%2Fmiddle%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fvisit.rs?ref=91b87b31e5b521f77f4f9c4c028d2bb056230ad0", "patch": "@@ -60,12 +60,6 @@ fn visit_crate[E](&crate c, &E e, &vt[E] v) {\n \n fn visit_crate_directive[E](&@crate_directive cd, &E e, &vt[E] v) {\n     alt (cd.node) {\n-        case (cdir_let(_, ?ex, ?cdirs)) {\n-            vt(v).visit_expr(ex, e, v);\n-            for (@crate_directive cdir in cdirs) {\n-                visit_crate_directive(cdir, e, v);\n-            }\n-        }\n         case (cdir_src_mod(_, _, _)) { }\n         case (cdir_dir_mod(_, _, ?cdirs, _)) {\n             for (@crate_directive cdir in cdirs) {"}, {"sha": "9ea119f2eb14e10ced6384a6cb051acbbb66285e", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91b87b31e5b521f77f4f9c4c028d2bb056230ad0/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b87b31e5b521f77f4f9c4c028d2bb056230ad0/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=91b87b31e5b521f77f4f9c4c028d2bb056230ad0", "patch": "@@ -56,12 +56,6 @@ fn walk_crate_directive(&ast_visitor v, @ast::crate_directive cd) {\n     if (!v.want_crate_directives()) { ret; }\n     v.visit_crate_directive_pre(cd);\n     alt (cd.node) {\n-        case (ast::cdir_let(_, ?e, ?cdirs)) {\n-            walk_expr(v, e);\n-            for (@ast::crate_directive cdir in cdirs) {\n-                walk_crate_directive(v, cdir);\n-            }\n-        }\n         case (ast::cdir_src_mod(_, _, _)) { }\n         case (ast::cdir_dir_mod(_, _, ?cdirs, _)) {\n             for (@ast::crate_directive cdir in cdirs) {"}]}