{"sha": "9f13083542cb2b9fce83ed8a50238e4a6386820f", "node_id": "C_kwDOAAsO6NoAKDlmMTMwODM1NDJjYjJiOWZjZTgzZWQ4YTUwMjM4ZTRhNjM4NjgyMGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-30T13:06:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-30T13:06:51Z"}, "message": "Auto merge of #90416 - matthiaskrgr:rollup-55lzqng, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #89876 (Make most std::ops traits const on numeric types)\n - #90371 (Fix incorrect doc link)\n - #90374 (Unify titles in rustdoc book doc attributes chapter)\n - #90377 (Make `core::slice::from_raw_parts[_mut]` const)\n - #90395 (Restrict liveness of mutable borrow of inner infcx in ConstInferUnifier::consts)\n - #90396 (Prevent type flags assertions being thrown in default_anon_const_substs if errors occurred)\n - #90402 (Add a few query descriptions)\n - #90412 (Remove unnecessary `macro_use`s in rustdoc)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "93b9c9909310c68984b50f5a584dec10aeae5034", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93b9c9909310c68984b50f5a584dec10aeae5034"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f13083542cb2b9fce83ed8a50238e4a6386820f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f13083542cb2b9fce83ed8a50238e4a6386820f", "html_url": "https://github.com/rust-lang/rust/commit/9f13083542cb2b9fce83ed8a50238e4a6386820f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f13083542cb2b9fce83ed8a50238e4a6386820f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b643e987173b36cb0279a018579372e31a35776", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b643e987173b36cb0279a018579372e31a35776", "html_url": "https://github.com/rust-lang/rust/commit/2b643e987173b36cb0279a018579372e31a35776"}, {"sha": "19b5b0f8fbc2034993f39bdf60005a706d11a75d", "url": "https://api.github.com/repos/rust-lang/rust/commits/19b5b0f8fbc2034993f39bdf60005a706d11a75d", "html_url": "https://github.com/rust-lang/rust/commit/19b5b0f8fbc2034993f39bdf60005a706d11a75d"}], "stats": {"total": 539, "additions": 393, "deletions": 146}, "files": [{"sha": "09bfb3290f4ca7d8f4956d6cb379bf2cde3fec34", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -866,6 +866,7 @@ impl TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n         Ok(a.rebind(self.relate(a.skip_binder(), b.skip_binder())?))\n     }\n \n+    #[tracing::instrument(level = \"debug\", skip(self))]\n     fn tys(&mut self, t: Ty<'tcx>, _t: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n         debug_assert_eq!(t, _t);\n         debug!(\"ConstInferUnifier: t={:?}\", t);\n@@ -941,6 +942,7 @@ impl TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n         }\n     }\n \n+    #[tracing::instrument(level = \"debug\", skip(self))]\n     fn consts(\n         &mut self,\n         c: &'tcx ty::Const<'tcx>,\n@@ -951,29 +953,38 @@ impl TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n \n         match c.val {\n             ty::ConstKind::Infer(InferConst::Var(vid)) => {\n-                let mut inner = self.infcx.inner.borrow_mut();\n-                let variable_table = &mut inner.const_unification_table();\n-\n                 // Check if the current unification would end up\n                 // unifying `target_vid` with a const which contains\n                 // an inference variable which is unioned with `target_vid`.\n                 //\n                 // Not doing so can easily result in stack overflows.\n-                if variable_table.unioned(self.target_vid, vid) {\n+                if self\n+                    .infcx\n+                    .inner\n+                    .borrow_mut()\n+                    .const_unification_table()\n+                    .unioned(self.target_vid, vid)\n+                {\n                     return Err(TypeError::CyclicConst(c));\n                 }\n \n-                let var_value = variable_table.probe_value(vid);\n+                let var_value =\n+                    self.infcx.inner.borrow_mut().const_unification_table().probe_value(vid);\n                 match var_value.val {\n                     ConstVariableValue::Known { value: u } => self.consts(u, u),\n                     ConstVariableValue::Unknown { universe } => {\n                         if self.for_universe.can_name(universe) {\n                             Ok(c)\n                         } else {\n-                            let new_var_id = variable_table.new_key(ConstVarValue {\n-                                origin: var_value.origin,\n-                                val: ConstVariableValue::Unknown { universe: self.for_universe },\n-                            });\n+                            let new_var_id =\n+                                self.infcx.inner.borrow_mut().const_unification_table().new_key(\n+                                    ConstVarValue {\n+                                        origin: var_value.origin,\n+                                        val: ConstVariableValue::Unknown {\n+                                            universe: self.for_universe,\n+                                        },\n+                                    },\n+                                );\n                             Ok(self.tcx().mk_const_var(new_var_id, c.ty))\n                         }\n                     }"}, {"sha": "06041bbb02d355537240c012aefb6835520036d4", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -687,12 +687,13 @@ rustc_queries! {\n         desc { |tcx| \"processing `{}`\", tcx.def_path_str(key.to_def_id()) }\n     }\n \n-    /// The signature of functions.\n+    /// Computes the signature of the function.\n     query fn_sig(key: DefId) -> ty::PolyFnSig<'tcx> {\n         desc { |tcx| \"computing function signature of `{}`\", tcx.def_path_str(key) }\n         separate_provide_extern\n     }\n \n+    /// Performs lint checking for the module.\n     query lint_mod(key: LocalDefId) -> () {\n         desc { |tcx| \"linting {}\", describe_as_module(key, tcx) }\n     }\n@@ -702,6 +703,7 @@ rustc_queries! {\n         desc { |tcx| \"checking attributes in {}\", describe_as_module(key, tcx) }\n     }\n \n+    /// Checks for uses of unstable APIs in the module.\n     query check_mod_unstable_api_usage(key: LocalDefId) -> () {\n         desc { |tcx| \"checking for unstable API usage in {}\", describe_as_module(key, tcx) }\n     }\n@@ -928,6 +930,7 @@ rustc_queries! {\n         desc { |tcx| \"computing drop scopes for `{}`\", tcx.def_path_str(def_id) }\n     }\n \n+    /// Generates a MIR body for the shim.\n     query mir_shims(key: ty::InstanceDef<'tcx>) -> mir::Body<'tcx> {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { |tcx| \"generating MIR shim for `{}`\", tcx.def_path_str(key.def_id()) }\n@@ -946,11 +949,13 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n+    /// Gets the span for the definition.\n     query def_span(def_id: DefId) -> Span {\n         desc { |tcx| \"looking up span for `{}`\", tcx.def_path_str(def_id) }\n         separate_provide_extern\n     }\n \n+    /// Gets the span for the identifier of the definition.\n     query def_ident_span(def_id: DefId) -> Option<Span> {\n         desc { |tcx| \"looking up span for `{}`'s identifier\", tcx.def_path_str(def_id) }\n         separate_provide_extern\n@@ -1466,6 +1471,8 @@ rustc_queries! {\n         desc { \"fetching what a dependency looks like\" }\n         separate_provide_extern\n     }\n+\n+    /// Gets the name of the crate.\n     query crate_name(_: CrateNum) -> Symbol {\n         eval_always\n         desc { \"fetching what a crate is named\" }"}, {"sha": "596d13d2d9acbb7aa8c79b2f79820e88f76db106", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -765,7 +765,7 @@ impl CheckAttrVisitor<'tcx> {\n                             \"not a `use` item\",\n                         );\n                     }\n-                    err.note(\"read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#docno_inlinedocinline for more information\")\n+                    err.note(\"read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#inline-and-no_inline for more information\")\n                         .emit();\n                 },\n             );"}, {"sha": "96211be8cdcf7576984a2791ef08a50bfc8e3004", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -292,7 +292,8 @@ pub(super) fn default_anon_const_substs(tcx: TyCtxt<'_>, def_id: DefId) -> Subst\n     // Getting this wrong can lead to ICE and unsoundness, so we assert it here.\n     for arg in substs.iter() {\n         let allowed_flags = ty::TypeFlags::MAY_NEED_DEFAULT_CONST_SUBSTS\n-            | ty::TypeFlags::STILL_FURTHER_SPECIALIZABLE;\n+            | ty::TypeFlags::STILL_FURTHER_SPECIALIZABLE\n+            | ty::TypeFlags::HAS_ERROR;\n         assert!(!arg.has_type_flags(!allowed_flags));\n     }\n     substs"}, {"sha": "9c6acfb1e8c94f823ef1cb864dc62541074f9da1", "filename": "library/core/src/internal_macros.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/library%2Fcore%2Fsrc%2Finternal_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/library%2Fcore%2Fsrc%2Finternal_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Finternal_macros.rs?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -5,6 +5,23 @@ macro_rules! forward_ref_unop {\n         forward_ref_unop!(impl $imp, $method for $t,\n                 #[stable(feature = \"rust1\", since = \"1.0.0\")]);\n     };\n+    (impl const $imp:ident, $method:ident for $t:ty) => {\n+        forward_ref_unop!(impl const $imp, $method for $t,\n+                #[stable(feature = \"rust1\", since = \"1.0.0\")]);\n+    };\n+    // Equivalent to the non-const version, with the addition of `rustc_const_unstable`\n+    (impl const $imp:ident, $method:ident for $t:ty, #[$attr:meta]) => {\n+        #[$attr]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const $imp for &$t {\n+            type Output = <$t as $imp>::Output;\n+\n+            #[inline]\n+            fn $method(self) -> <$t as $imp>::Output {\n+                $imp::$method(*self)\n+            }\n+        }\n+    };\n     (impl $imp:ident, $method:ident for $t:ty, #[$attr:meta]) => {\n         #[$attr]\n         impl $imp for &$t {\n@@ -25,6 +42,45 @@ macro_rules! forward_ref_binop {\n         forward_ref_binop!(impl $imp, $method for $t, $u,\n                 #[stable(feature = \"rust1\", since = \"1.0.0\")]);\n     };\n+    (impl const $imp:ident, $method:ident for $t:ty, $u:ty) => {\n+        forward_ref_binop!(impl const $imp, $method for $t, $u,\n+                #[stable(feature = \"rust1\", since = \"1.0.0\")]);\n+    };\n+    // Equivalent to the non-const version, with the addition of `rustc_const_unstable`\n+    (impl const $imp:ident, $method:ident for $t:ty, $u:ty, #[$attr:meta]) => {\n+        #[$attr]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl<'a> const $imp<$u> for &'a $t {\n+            type Output = <$t as $imp<$u>>::Output;\n+\n+            #[inline]\n+            fn $method(self, other: $u) -> <$t as $imp<$u>>::Output {\n+                $imp::$method(*self, other)\n+            }\n+        }\n+\n+        #[$attr]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const $imp<&$u> for $t {\n+            type Output = <$t as $imp<$u>>::Output;\n+\n+            #[inline]\n+            fn $method(self, other: &$u) -> <$t as $imp<$u>>::Output {\n+                $imp::$method(self, *other)\n+            }\n+        }\n+\n+        #[$attr]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const $imp<&$u> for &$t {\n+            type Output = <$t as $imp<$u>>::Output;\n+\n+            #[inline]\n+            fn $method(self, other: &$u) -> <$t as $imp<$u>>::Output {\n+                $imp::$method(*self, *other)\n+            }\n+        }\n+    };\n     (impl $imp:ident, $method:ident for $t:ty, $u:ty, #[$attr:meta]) => {\n         #[$attr]\n         impl<'a> $imp<$u> for &'a $t {\n@@ -65,6 +121,21 @@ macro_rules! forward_ref_op_assign {\n         forward_ref_op_assign!(impl $imp, $method for $t, $u,\n                 #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]);\n     };\n+    (impl const $imp:ident, $method:ident for $t:ty, $u:ty) => {\n+        forward_ref_op_assign!(impl const $imp, $method for $t, $u,\n+                #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]);\n+    };\n+    // Equivalent to the non-const version, with the addition of `rustc_const_unstable`\n+    (impl const $imp:ident, $method:ident for $t:ty, $u:ty, #[$attr:meta]) => {\n+        #[$attr]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const $imp<&$u> for $t {\n+            #[inline]\n+            fn $method(&mut self, other: &$u) {\n+                $imp::$method(self, *other);\n+            }\n+        }\n+    };\n     (impl $imp:ident, $method:ident for $t:ty, $u:ty, #[$attr:meta]) => {\n         #[$attr]\n         impl $imp<&$u> for $t {"}, {"sha": "5f44087cabbbc7e5eec8cc57eacca8543280c306", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -105,6 +105,7 @@\n #![feature(const_caller_location)]\n #![feature(const_cell_into_inner)]\n #![feature(const_discriminant)]\n+#![cfg_attr(not(bootstrap), feature(const_eval_select))]\n #![feature(const_float_bits_conv)]\n #![feature(const_float_classify)]\n #![feature(const_fmt_arguments_new)]\n@@ -117,6 +118,7 @@\n #![feature(const_maybe_uninit_as_ptr)]\n #![feature(const_maybe_uninit_assume_init)]\n #![feature(const_num_from_num)]\n+#![feature(const_ops)]\n #![feature(const_option)]\n #![feature(const_pin)]\n #![feature(const_replace)]"}, {"sha": "7708094e1fceab656457dbd297339a35f914319e", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -92,7 +92,8 @@ macro_rules! nonzero_integers {\n             }\n \n             #[stable(feature = \"nonzero_bitor\", since = \"1.45.0\")]\n-            impl BitOr for $Ty {\n+            #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+            impl const BitOr for $Ty {\n                 type Output = Self;\n                 #[inline]\n                 fn bitor(self, rhs: Self) -> Self::Output {\n@@ -103,7 +104,8 @@ macro_rules! nonzero_integers {\n             }\n \n             #[stable(feature = \"nonzero_bitor\", since = \"1.45.0\")]\n-            impl BitOr<$Int> for $Ty {\n+            #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+            impl const BitOr<$Int> for $Ty {\n                 type Output = Self;\n                 #[inline]\n                 fn bitor(self, rhs: $Int) -> Self::Output {\n@@ -115,7 +117,8 @@ macro_rules! nonzero_integers {\n             }\n \n             #[stable(feature = \"nonzero_bitor\", since = \"1.45.0\")]\n-            impl BitOr<$Ty> for $Int {\n+            #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+            impl const BitOr<$Ty> for $Int {\n                 type Output = $Ty;\n                 #[inline]\n                 fn bitor(self, rhs: $Ty) -> Self::Output {\n@@ -127,15 +130,17 @@ macro_rules! nonzero_integers {\n             }\n \n             #[stable(feature = \"nonzero_bitor\", since = \"1.45.0\")]\n-            impl BitOrAssign for $Ty {\n+            #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+            impl const BitOrAssign for $Ty {\n                 #[inline]\n                 fn bitor_assign(&mut self, rhs: Self) {\n                     *self = *self | rhs;\n                 }\n             }\n \n             #[stable(feature = \"nonzero_bitor\", since = \"1.45.0\")]\n-            impl BitOrAssign<$Int> for $Ty {\n+            #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+            impl const BitOrAssign<$Int> for $Ty {\n                 #[inline]\n                 fn bitor_assign(&mut self, rhs: $Int) {\n                     *self = *self | rhs;\n@@ -257,7 +262,8 @@ macro_rules! nonzero_integers_div {\n     ( $( $Ty: ident($Int: ty); )+ ) => {\n         $(\n             #[stable(feature = \"nonzero_div\", since = \"1.51.0\")]\n-            impl Div<$Ty> for $Int {\n+            #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+            impl const Div<$Ty> for $Int {\n                 type Output = $Int;\n                 /// This operation rounds towards zero,\n                 /// truncating any fractional part of the exact result, and cannot panic.\n@@ -270,7 +276,8 @@ macro_rules! nonzero_integers_div {\n             }\n \n             #[stable(feature = \"nonzero_div\", since = \"1.51.0\")]\n-            impl Rem<$Ty> for $Int {\n+            #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+            impl const Rem<$Ty> for $Int {\n                 type Output = $Int;\n                 /// This operation satisfies `n % d == n - (n / d) * d`, and cannot panic.\n                 #[inline]"}, {"sha": "a0e42c51e4517a8091baa59893d90752983cac9b", "filename": "library/core/src/num/wrapping.rs", "status": "modified", "additions": 77, "deletions": 51, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -87,7 +87,8 @@ impl<T: fmt::UpperHex> fmt::UpperHex for Wrapping<T> {\n macro_rules! sh_impl_signed {\n     ($t:ident, $f:ident) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Shl<$f> for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Shl<$f> for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n@@ -99,20 +100,22 @@ macro_rules! sh_impl_signed {\n                 }\n             }\n         }\n-        forward_ref_binop! { impl Shl, shl for Wrapping<$t>, $f,\n+        forward_ref_binop! { impl const Shl, shl for Wrapping<$t>, $f,\n         #[stable(feature = \"wrapping_ref_ops\", since = \"1.39.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl ShlAssign<$f> for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const ShlAssign<$f> for Wrapping<$t> {\n             #[inline]\n             fn shl_assign(&mut self, other: $f) {\n                 *self = *self << other;\n             }\n         }\n-        forward_ref_op_assign! { impl ShlAssign, shl_assign for Wrapping<$t>, $f }\n+        forward_ref_op_assign! { impl const ShlAssign, shl_assign for Wrapping<$t>, $f }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Shr<$f> for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Shr<$f> for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n@@ -124,63 +127,68 @@ macro_rules! sh_impl_signed {\n                 }\n             }\n         }\n-        forward_ref_binop! { impl Shr, shr for Wrapping<$t>, $f,\n+        forward_ref_binop! { impl const Shr, shr for Wrapping<$t>, $f,\n         #[stable(feature = \"wrapping_ref_ops\", since = \"1.39.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl ShrAssign<$f> for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const ShrAssign<$f> for Wrapping<$t> {\n             #[inline]\n             fn shr_assign(&mut self, other: $f) {\n                 *self = *self >> other;\n             }\n         }\n-        forward_ref_op_assign! { impl ShrAssign, shr_assign for Wrapping<$t>, $f }\n+        forward_ref_op_assign! { impl const ShrAssign, shr_assign for Wrapping<$t>, $f }\n     };\n }\n \n macro_rules! sh_impl_unsigned {\n     ($t:ident, $f:ident) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Shl<$f> for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Shl<$f> for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n             fn shl(self, other: $f) -> Wrapping<$t> {\n                 Wrapping(self.0.wrapping_shl((other & self::shift_max::$t as $f) as u32))\n             }\n         }\n-        forward_ref_binop! { impl Shl, shl for Wrapping<$t>, $f,\n+        forward_ref_binop! { impl const Shl, shl for Wrapping<$t>, $f,\n         #[stable(feature = \"wrapping_ref_ops\", since = \"1.39.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl ShlAssign<$f> for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const ShlAssign<$f> for Wrapping<$t> {\n             #[inline]\n             fn shl_assign(&mut self, other: $f) {\n                 *self = *self << other;\n             }\n         }\n-        forward_ref_op_assign! { impl ShlAssign, shl_assign for Wrapping<$t>, $f }\n+        forward_ref_op_assign! { impl const ShlAssign, shl_assign for Wrapping<$t>, $f }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Shr<$f> for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Shr<$f> for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n             fn shr(self, other: $f) -> Wrapping<$t> {\n                 Wrapping(self.0.wrapping_shr((other & self::shift_max::$t as $f) as u32))\n             }\n         }\n-        forward_ref_binop! { impl Shr, shr for Wrapping<$t>, $f,\n+        forward_ref_binop! { impl const Shr, shr for Wrapping<$t>, $f,\n         #[stable(feature = \"wrapping_ref_ops\", since = \"1.39.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl ShrAssign<$f> for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const ShrAssign<$f> for Wrapping<$t> {\n             #[inline]\n             fn shr_assign(&mut self, other: $f) {\n                 *self = *self >> other;\n             }\n         }\n-        forward_ref_op_assign! { impl ShrAssign, shr_assign for Wrapping<$t>, $f }\n+        forward_ref_op_assign! { impl const ShrAssign, shr_assign for Wrapping<$t>, $f }\n     };\n }\n \n@@ -209,49 +217,54 @@ sh_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n macro_rules! wrapping_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Add for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Add for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n             fn add(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                 Wrapping(self.0.wrapping_add(other.0))\n             }\n         }\n-        forward_ref_binop! { impl Add, add for Wrapping<$t>, Wrapping<$t>,\n+        forward_ref_binop! { impl const Add, add for Wrapping<$t>, Wrapping<$t>,\n                 #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl AddAssign for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const AddAssign for Wrapping<$t> {\n             #[inline]\n             fn add_assign(&mut self, other: Wrapping<$t>) {\n                 *self = *self + other;\n             }\n         }\n-        forward_ref_op_assign! { impl AddAssign, add_assign for Wrapping<$t>, Wrapping<$t> }\n+        forward_ref_op_assign! { impl const AddAssign, add_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Sub for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Sub for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n             fn sub(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                 Wrapping(self.0.wrapping_sub(other.0))\n             }\n         }\n-        forward_ref_binop! { impl Sub, sub for Wrapping<$t>, Wrapping<$t>,\n+        forward_ref_binop! { impl const Sub, sub for Wrapping<$t>, Wrapping<$t>,\n                 #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl SubAssign for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const SubAssign for Wrapping<$t> {\n             #[inline]\n             fn sub_assign(&mut self, other: Wrapping<$t>) {\n                 *self = *self - other;\n             }\n         }\n-        forward_ref_op_assign! { impl SubAssign, sub_assign for Wrapping<$t>, Wrapping<$t> }\n+        forward_ref_op_assign! { impl const SubAssign, sub_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Mul for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Mul for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n@@ -263,140 +276,153 @@ macro_rules! wrapping_impl {\n                 #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl MulAssign for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const MulAssign for Wrapping<$t> {\n             #[inline]\n             fn mul_assign(&mut self, other: Wrapping<$t>) {\n                 *self = *self * other;\n             }\n         }\n-        forward_ref_op_assign! { impl MulAssign, mul_assign for Wrapping<$t>, Wrapping<$t> }\n+        forward_ref_op_assign! { impl const MulAssign, mul_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"wrapping_div\", since = \"1.3.0\")]\n-        impl Div for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Div for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n             fn div(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                 Wrapping(self.0.wrapping_div(other.0))\n             }\n         }\n-        forward_ref_binop! { impl Div, div for Wrapping<$t>, Wrapping<$t>,\n+        forward_ref_binop! { impl const Div, div for Wrapping<$t>, Wrapping<$t>,\n                 #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl DivAssign for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const DivAssign for Wrapping<$t> {\n             #[inline]\n             fn div_assign(&mut self, other: Wrapping<$t>) {\n                 *self = *self / other;\n             }\n         }\n-        forward_ref_op_assign! { impl DivAssign, div_assign for Wrapping<$t>, Wrapping<$t> }\n+        forward_ref_op_assign! { impl const DivAssign, div_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"wrapping_impls\", since = \"1.7.0\")]\n-        impl Rem for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Rem for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n             fn rem(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                 Wrapping(self.0.wrapping_rem(other.0))\n             }\n         }\n-        forward_ref_binop! { impl Rem, rem for Wrapping<$t>, Wrapping<$t>,\n+        forward_ref_binop! { impl const Rem, rem for Wrapping<$t>, Wrapping<$t>,\n                 #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl RemAssign for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const RemAssign for Wrapping<$t> {\n             #[inline]\n             fn rem_assign(&mut self, other: Wrapping<$t>) {\n                 *self = *self % other;\n             }\n         }\n-        forward_ref_op_assign! { impl RemAssign, rem_assign for Wrapping<$t>, Wrapping<$t> }\n+        forward_ref_op_assign! { impl const RemAssign, rem_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Not for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Not for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n             fn not(self) -> Wrapping<$t> {\n                 Wrapping(!self.0)\n             }\n         }\n-        forward_ref_unop! { impl Not, not for Wrapping<$t>,\n+        forward_ref_unop! { impl const Not, not for Wrapping<$t>,\n                 #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl BitXor for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitXor for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n             fn bitxor(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                 Wrapping(self.0 ^ other.0)\n             }\n         }\n-        forward_ref_binop! { impl BitXor, bitxor for Wrapping<$t>, Wrapping<$t>,\n+        forward_ref_binop! { impl const BitXor, bitxor for Wrapping<$t>, Wrapping<$t>,\n                 #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl BitXorAssign for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitXorAssign for Wrapping<$t> {\n             #[inline]\n             fn bitxor_assign(&mut self, other: Wrapping<$t>) {\n                 *self = *self ^ other;\n             }\n         }\n-        forward_ref_op_assign! { impl BitXorAssign, bitxor_assign for Wrapping<$t>, Wrapping<$t> }\n+        forward_ref_op_assign! { impl const BitXorAssign, bitxor_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl BitOr for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitOr for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n             fn bitor(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                 Wrapping(self.0 | other.0)\n             }\n         }\n-        forward_ref_binop! { impl BitOr, bitor for Wrapping<$t>, Wrapping<$t>,\n+        forward_ref_binop! { impl const BitOr, bitor for Wrapping<$t>, Wrapping<$t>,\n                 #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl BitOrAssign for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitOrAssign for Wrapping<$t> {\n             #[inline]\n             fn bitor_assign(&mut self, other: Wrapping<$t>) {\n                 *self = *self | other;\n             }\n         }\n-        forward_ref_op_assign! { impl BitOrAssign, bitor_assign for Wrapping<$t>, Wrapping<$t> }\n+        forward_ref_op_assign! { impl const BitOrAssign, bitor_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl BitAnd for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitAnd for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n             fn bitand(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                 Wrapping(self.0 & other.0)\n             }\n         }\n-        forward_ref_binop! { impl BitAnd, bitand for Wrapping<$t>, Wrapping<$t>,\n+        forward_ref_binop! { impl const BitAnd, bitand for Wrapping<$t>, Wrapping<$t>,\n                 #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl BitAndAssign for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitAndAssign for Wrapping<$t> {\n             #[inline]\n             fn bitand_assign(&mut self, other: Wrapping<$t>) {\n                 *self = *self & other;\n             }\n         }\n-        forward_ref_op_assign! { impl BitAndAssign, bitand_assign for Wrapping<$t>, Wrapping<$t> }\n+        forward_ref_op_assign! { impl const BitAndAssign, bitand_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"wrapping_neg\", since = \"1.10.0\")]\n-        impl Neg for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Neg for Wrapping<$t> {\n             type Output = Self;\n             #[inline]\n             fn neg(self) -> Self {\n                 Wrapping(0) - self\n             }\n         }\n-        forward_ref_unop! { impl Neg, neg for Wrapping<$t>,\n+        forward_ref_unop! { impl const Neg, neg for Wrapping<$t>,\n                 #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n \n     )*)"}, {"sha": "e954742938910cc4f36ea5f2432e7fe761a7a851", "filename": "library/core/src/ops/arith.rs", "status": "modified", "additions": 39, "deletions": 26, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Farith.rs?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -92,15 +92,16 @@ pub trait Add<Rhs = Self> {\n macro_rules! add_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Add for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Add for $t {\n             type Output = $t;\n \n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             fn add(self, other: $t) -> $t { self + other }\n         }\n \n-        forward_ref_binop! { impl Add, add for $t, $t }\n+        forward_ref_binop! { impl const Add, add for $t, $t }\n     )*)\n }\n \n@@ -198,15 +199,16 @@ pub trait Sub<Rhs = Self> {\n macro_rules! sub_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Sub for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Sub for $t {\n             type Output = $t;\n \n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             fn sub(self, other: $t) -> $t { self - other }\n         }\n \n-        forward_ref_binop! { impl Sub, sub for $t, $t }\n+        forward_ref_binop! { impl const Sub, sub for $t, $t }\n     )*)\n }\n \n@@ -326,15 +328,16 @@ pub trait Mul<Rhs = Self> {\n macro_rules! mul_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Mul for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Mul for $t {\n             type Output = $t;\n \n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             fn mul(self, other: $t) -> $t { self * other }\n         }\n \n-        forward_ref_binop! { impl Mul, mul for $t, $t }\n+        forward_ref_binop! { impl const Mul, mul for $t, $t }\n     )*)\n }\n \n@@ -464,14 +467,15 @@ macro_rules! div_impl_integer {\n         ///\n         #[doc = $panic]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Div for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Div for $t {\n             type Output = $t;\n \n             #[inline]\n             fn div(self, other: $t) -> $t { self / other }\n         }\n \n-        forward_ref_binop! { impl Div, div for $t, $t }\n+        forward_ref_binop! { impl const Div, div for $t, $t }\n     )*)*)\n }\n \n@@ -483,14 +487,15 @@ div_impl_integer! {\n macro_rules! div_impl_float {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Div for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Div for $t {\n             type Output = $t;\n \n             #[inline]\n             fn div(self, other: $t) -> $t { self / other }\n         }\n \n-        forward_ref_binop! { impl Div, div for $t, $t }\n+        forward_ref_binop! { impl const Div, div for $t, $t }\n     )*)\n }\n \n@@ -564,14 +569,15 @@ macro_rules! rem_impl_integer {\n         ///\n         #[doc = $panic]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Rem for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Rem for $t {\n             type Output = $t;\n \n             #[inline]\n             fn rem(self, other: $t) -> $t { self % other }\n         }\n \n-        forward_ref_binop! { impl Rem, rem for $t, $t }\n+        forward_ref_binop! { impl const Rem, rem for $t, $t }\n     )*)*)\n }\n \n@@ -598,14 +604,15 @@ macro_rules! rem_impl_float {\n         /// assert_eq!(x % y, remainder);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Rem for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Rem for $t {\n             type Output = $t;\n \n             #[inline]\n             fn rem(self, other: $t) -> $t { self % other }\n         }\n \n-        forward_ref_binop! { impl Rem, rem for $t, $t }\n+        forward_ref_binop! { impl const Rem, rem for $t, $t }\n     )*)\n }\n \n@@ -671,15 +678,16 @@ pub trait Neg {\n macro_rules! neg_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Neg for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Neg for $t {\n             type Output = $t;\n \n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             fn neg(self) -> $t { -self }\n         }\n \n-        forward_ref_unop! { impl Neg, neg for $t }\n+        forward_ref_unop! { impl const Neg, neg for $t }\n     )*)\n }\n \n@@ -739,13 +747,14 @@ pub trait AddAssign<Rhs = Self> {\n macro_rules! add_assign_impl {\n     ($($t:ty)+) => ($(\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl AddAssign for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const AddAssign for $t {\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             fn add_assign(&mut self, other: $t) { *self += other }\n         }\n \n-        forward_ref_op_assign! { impl AddAssign, add_assign for $t, $t }\n+        forward_ref_op_assign! { impl const AddAssign, add_assign for $t, $t }\n     )+)\n }\n \n@@ -805,13 +814,14 @@ pub trait SubAssign<Rhs = Self> {\n macro_rules! sub_assign_impl {\n     ($($t:ty)+) => ($(\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl SubAssign for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const SubAssign for $t {\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             fn sub_assign(&mut self, other: $t) { *self -= other }\n         }\n \n-        forward_ref_op_assign! { impl SubAssign, sub_assign for $t, $t }\n+        forward_ref_op_assign! { impl const SubAssign, sub_assign for $t, $t }\n     )+)\n }\n \n@@ -862,13 +872,14 @@ pub trait MulAssign<Rhs = Self> {\n macro_rules! mul_assign_impl {\n     ($($t:ty)+) => ($(\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl MulAssign for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const MulAssign for $t {\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             fn mul_assign(&mut self, other: $t) { *self *= other }\n         }\n \n-        forward_ref_op_assign! { impl MulAssign, mul_assign for $t, $t }\n+        forward_ref_op_assign! { impl const MulAssign, mul_assign for $t, $t }\n     )+)\n }\n \n@@ -919,12 +930,13 @@ pub trait DivAssign<Rhs = Self> {\n macro_rules! div_assign_impl {\n     ($($t:ty)+) => ($(\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl DivAssign for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const DivAssign for $t {\n             #[inline]\n             fn div_assign(&mut self, other: $t) { *self /= other }\n         }\n \n-        forward_ref_op_assign! { impl DivAssign, div_assign for $t, $t }\n+        forward_ref_op_assign! { impl const DivAssign, div_assign for $t, $t }\n     )+)\n }\n \n@@ -979,12 +991,13 @@ pub trait RemAssign<Rhs = Self> {\n macro_rules! rem_assign_impl {\n     ($($t:ty)+) => ($(\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl RemAssign for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const RemAssign for $t {\n             #[inline]\n             fn rem_assign(&mut self, other: $t) { *self %= other }\n         }\n \n-        forward_ref_op_assign! { impl RemAssign, rem_assign for $t, $t }\n+        forward_ref_op_assign! { impl const RemAssign, rem_assign for $t, $t }\n     )+)\n }\n "}, {"sha": "255f6cb7933a244271100cc9cd556cf06e8938c8", "filename": "library/core/src/ops/bit.rs", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fbit.rs?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -54,14 +54,15 @@ pub trait Not {\n macro_rules! not_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Not for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Not for $t {\n             type Output = $t;\n \n             #[inline]\n             fn not(self) -> $t { !self }\n         }\n \n-        forward_ref_unop! { impl Not, not for $t }\n+        forward_ref_unop! { impl const Not, not for $t }\n     )*)\n }\n \n@@ -154,14 +155,15 @@ pub trait BitAnd<Rhs = Self> {\n macro_rules! bitand_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl BitAnd for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitAnd for $t {\n             type Output = $t;\n \n             #[inline]\n             fn bitand(self, rhs: $t) -> $t { self & rhs }\n         }\n \n-        forward_ref_binop! { impl BitAnd, bitand for $t, $t }\n+        forward_ref_binop! { impl const BitAnd, bitand for $t, $t }\n     )*)\n }\n \n@@ -254,14 +256,15 @@ pub trait BitOr<Rhs = Self> {\n macro_rules! bitor_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl BitOr for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitOr for $t {\n             type Output = $t;\n \n             #[inline]\n             fn bitor(self, rhs: $t) -> $t { self | rhs }\n         }\n \n-        forward_ref_binop! { impl BitOr, bitor for $t, $t }\n+        forward_ref_binop! { impl const BitOr, bitor for $t, $t }\n     )*)\n }\n \n@@ -354,14 +357,15 @@ pub trait BitXor<Rhs = Self> {\n macro_rules! bitxor_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl BitXor for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitXor for $t {\n             type Output = $t;\n \n             #[inline]\n             fn bitxor(self, other: $t) -> $t { self ^ other }\n         }\n \n-        forward_ref_binop! { impl BitXor, bitxor for $t, $t }\n+        forward_ref_binop! { impl const BitXor, bitxor for $t, $t }\n     )*)\n }\n \n@@ -451,7 +455,8 @@ pub trait Shl<Rhs = Self> {\n macro_rules! shl_impl {\n     ($t:ty, $f:ty) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Shl<$f> for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Shl<$f> for $t {\n             type Output = $t;\n \n             #[inline]\n@@ -461,7 +466,7 @@ macro_rules! shl_impl {\n             }\n         }\n \n-        forward_ref_binop! { impl Shl, shl for $t, $f }\n+        forward_ref_binop! { impl const Shl, shl for $t, $f }\n     };\n }\n \n@@ -569,7 +574,8 @@ pub trait Shr<Rhs = Self> {\n macro_rules! shr_impl {\n     ($t:ty, $f:ty) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Shr<$f> for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Shr<$f> for $t {\n             type Output = $t;\n \n             #[inline]\n@@ -579,7 +585,7 @@ macro_rules! shr_impl {\n             }\n         }\n \n-        forward_ref_binop! { impl Shr, shr for $t, $f }\n+        forward_ref_binop! { impl const Shr, shr for $t, $f }\n     };\n }\n \n@@ -704,12 +710,13 @@ pub trait BitAndAssign<Rhs = Self> {\n macro_rules! bitand_assign_impl {\n     ($($t:ty)+) => ($(\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl BitAndAssign for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitAndAssign for $t {\n             #[inline]\n             fn bitand_assign(&mut self, other: $t) { *self &= other }\n         }\n \n-        forward_ref_op_assign! { impl BitAndAssign, bitand_assign for $t, $t }\n+        forward_ref_op_assign! { impl const BitAndAssign, bitand_assign for $t, $t }\n     )+)\n }\n \n@@ -775,12 +782,13 @@ pub trait BitOrAssign<Rhs = Self> {\n macro_rules! bitor_assign_impl {\n     ($($t:ty)+) => ($(\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl BitOrAssign for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitOrAssign for $t {\n             #[inline]\n             fn bitor_assign(&mut self, other: $t) { *self |= other }\n         }\n \n-        forward_ref_op_assign! { impl BitOrAssign, bitor_assign for $t, $t }\n+        forward_ref_op_assign! { impl const BitOrAssign, bitor_assign for $t, $t }\n     )+)\n }\n \n@@ -846,12 +854,13 @@ pub trait BitXorAssign<Rhs = Self> {\n macro_rules! bitxor_assign_impl {\n     ($($t:ty)+) => ($(\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl BitXorAssign for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitXorAssign for $t {\n             #[inline]\n             fn bitxor_assign(&mut self, other: $t) { *self ^= other }\n         }\n \n-        forward_ref_op_assign! { impl BitXorAssign, bitxor_assign for $t, $t }\n+        forward_ref_op_assign! { impl const BitXorAssign, bitxor_assign for $t, $t }\n     )+)\n }\n \n@@ -907,15 +916,16 @@ pub trait ShlAssign<Rhs = Self> {\n macro_rules! shl_assign_impl {\n     ($t:ty, $f:ty) => {\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl ShlAssign<$f> for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const ShlAssign<$f> for $t {\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             fn shl_assign(&mut self, other: $f) {\n                 *self <<= other\n             }\n         }\n \n-        forward_ref_op_assign! { impl ShlAssign, shl_assign for $t, $f }\n+        forward_ref_op_assign! { impl const ShlAssign, shl_assign for $t, $f }\n     };\n }\n \n@@ -989,15 +999,16 @@ pub trait ShrAssign<Rhs = Self> {\n macro_rules! shr_assign_impl {\n     ($t:ty, $f:ty) => {\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl ShrAssign<$f> for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const ShrAssign<$f> for $t {\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             fn shr_assign(&mut self, other: $f) {\n                 *self >>= other\n             }\n         }\n \n-        forward_ref_op_assign! { impl ShrAssign, shr_assign for $t, $f }\n+        forward_ref_op_assign! { impl const ShrAssign, shr_assign for $t, $f }\n     };\n }\n "}, {"sha": "81bb16d54015e9551266e41068e1bb6ec63cd5a5", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -1,8 +1,6 @@\n //! Free functions to create `&[T]` and `&mut [T]`.\n \n use crate::array;\n-use crate::intrinsics::is_aligned_and_not_null;\n-use crate::mem;\n use crate::ptr;\n \n /// Forms a slice from a pointer and a length.\n@@ -85,12 +83,10 @@ use crate::ptr;\n /// [`NonNull::dangling()`]: ptr::NonNull::dangling\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n-    debug_assert!(is_aligned_and_not_null(data), \"attempt to create unaligned or null slice\");\n-    debug_assert!(\n-        mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,\n-        \"attempt to create slice covering at least half the address space\"\n-    );\n+#[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n+pub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n+    debug_check_data_len(data, len);\n+\n     // SAFETY: the caller must uphold the safety contract for `from_raw_parts`.\n     unsafe { &*ptr::slice_from_raw_parts(data, len) }\n }\n@@ -126,16 +122,48 @@ pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n /// [`NonNull::dangling()`]: ptr::NonNull::dangling\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {\n-    debug_assert!(is_aligned_and_not_null(data), \"attempt to create unaligned or null slice\");\n-    debug_assert!(\n-        mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,\n-        \"attempt to create slice covering at least half the address space\"\n-    );\n+#[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n+pub const unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {\n+    debug_check_data_len(data as _, len);\n+\n     // SAFETY: the caller must uphold the safety contract for `from_raw_parts_mut`.\n     unsafe { &mut *ptr::slice_from_raw_parts_mut(data, len) }\n }\n \n+// In debug builds checks that `data` pointer is aligned and non-null and that slice with given `len` would cover less than half the address space\n+#[cfg(all(not(bootstrap), debug_assertions))]\n+#[unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n+#[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n+const fn debug_check_data_len<T>(data: *const T, len: usize) {\n+    fn rt_check<T>(data: *const T) {\n+        use crate::intrinsics::is_aligned_and_not_null;\n+\n+        assert!(is_aligned_and_not_null(data), \"attempt to create unaligned or null slice\");\n+    }\n+\n+    const fn noop<T>(_: *const T) {}\n+\n+    // SAFETY:\n+    //\n+    // `rt_check` is just a debug assert to hint users that they are causing UB,\n+    // it is not required for safety (the safety must be guatanteed by\n+    // the `from_raw_parts[_mut]` caller).\n+    //\n+    // Since the checks are not required, we ignore them in CTFE as they can't\n+    // be done there (alignment does not make much sense there).\n+    unsafe {\n+        crate::intrinsics::const_eval_select((data,), noop, rt_check);\n+    }\n+\n+    assert!(\n+        crate::mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,\n+        \"attempt to create slice covering at least half the address space\"\n+    );\n+}\n+\n+#[cfg(not(all(not(bootstrap), debug_assertions)))]\n+const fn debug_check_data_len<T>(_data: *const T, _len: usize) {}\n+\n /// Converts a reference to T into a slice of length 1 (without copying).\n #[stable(feature = \"from_ref\", since = \"1.28.0\")]\n #[rustc_const_unstable(feature = \"const_slice_from_ref\", issue = \"90206\")]"}, {"sha": "7939ea3bb7fb25c1f753d70063c6d644675c5b1a", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -1663,7 +1663,7 @@ impl str {\n     /// If the pattern allows a reverse search but its results might differ\n     /// from a forward search, the [`rmatch_indices`] method can be used.\n     ///\n-    /// [`rmatch_indices`]: str::match_indices\n+    /// [`rmatch_indices`]: str::rmatch_indices\n     ///\n     /// # Examples\n     ///"}, {"sha": "a75b6d3893128a6205907b856b614968718c6616", "filename": "src/doc/rustdoc/src/the-doc-attribute.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -153,7 +153,9 @@ example, if you want your doctests to fail if they produce any warnings, you cou\n These forms of the `#[doc]` attribute are used on individual items, to control how\n they are documented.\n \n-### `#[doc(no_inline)]`/`#[doc(inline)]`\n+### `inline` and `no_inline`\n+\n+<span id=\"docno_inlinedocinline\"></span>\n \n These attributes are used on `use` statements, and control where the documentation shows\n up. For example, consider this Rust code:\n@@ -219,7 +221,9 @@ Now we'll have a `Re-exports` line, and `Bar` will not link to anywhere.\n One special case: In Rust 2018 and later, if you `pub use` one of your dependencies, `rustdoc` will\n not eagerly inline it as a module unless you add `#[doc(inline)]`.\n \n-### `#[doc(hidden)]`\n+### `hidden`\n+\n+<span id=\"dochidden\"></span>\n \n Any item annotated with `#[doc(hidden)]` will not appear in the documentation, unless\n the `strip-hidden` pass is removed."}, {"sha": "1ce6a5c00be74ea397a559af4d386a685d3697b0", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -22,8 +22,7 @@ use super::{\n     BASIC_KEYWORDS,\n };\n \n-use crate::clean;\n-use crate::clean::ExternalCrate;\n+use crate::clean::{self, ExternalCrate};\n use crate::config::RenderOptions;\n use crate::docfs::{DocFS, PathError};\n use crate::error::Error;\n@@ -35,6 +34,7 @@ use crate::html::format::Buffer;\n use crate::html::markdown::{self, plain_text_summary, ErrorCodes, IdMap};\n use crate::html::{layout, sources};\n use crate::scrape_examples::AllCallLocations;\n+use crate::try_err;\n \n /// Major driving force in all rustdoc rendering. This contains information\n /// about where in the tree-like hierarchy rendering is occurring and controls"}, {"sha": "e2ecf20fe848bd2302154a8d26a0f9069400c358", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -77,6 +77,7 @@ use crate::html::highlight;\n use crate::html::markdown::{HeadingOffset, Markdown, MarkdownHtml, MarkdownSummaryLine};\n use crate::html::sources;\n use crate::scrape_examples::CallData;\n+use crate::try_none;\n \n /// A pair of name and its optional document.\n crate type NameDoc = (String, Option<String>);"}, {"sha": "27277015cd13f902674551d756c576ddda58d30e", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -17,6 +17,7 @@ use crate::config::{EmitType, RenderOptions};\n use crate::docfs::PathError;\n use crate::error::Error;\n use crate::html::{layout, static_files};\n+use crate::{try_err, try_none};\n \n static FILES_UNVERSIONED: Lazy<FxHashMap<&str, &[u8]>> = Lazy::new(|| {\n     map! {"}, {"sha": "b50fbf58bae29f025a19147bc4cc39a083c06311", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -103,17 +103,14 @@ macro_rules! map {\n     }}\n }\n \n-#[macro_use]\n-mod externalfiles;\n-\n mod clean;\n mod config;\n mod core;\n mod docfs;\n+mod doctest;\n mod doctree;\n-#[macro_use]\n mod error;\n-mod doctest;\n+mod externalfiles;\n mod fold;\n mod formats;\n // used by the error-index generator, so it needs to be public"}, {"sha": "55006b2087eb024f3037bbc638dfbd8f23d8131c", "filename": "src/test/rustdoc-ui/invalid-doc-attr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Ftest%2Frustdoc-ui%2Finvalid-doc-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Ftest%2Frustdoc-ui%2Finvalid-doc-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-doc-attr.stderr?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -29,7 +29,7 @@ LL | pub fn foo() {}\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n-   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#docno_inlinedocinline for more information\n+   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#inline-and-no_inline for more information\n \n error: this attribute can only be applied at the crate level\n   --> $DIR/invalid-doc-attr.rs:15:12\n@@ -72,7 +72,7 @@ LL |     pub fn baz() {}\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n-   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#docno_inlinedocinline for more information\n+   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#inline-and-no_inline for more information\n \n error: aborting due to 6 previous errors\n "}, {"sha": "55006b2087eb024f3037bbc638dfbd8f23d8131c", "filename": "src/test/ui/attributes/invalid-doc-attr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Ftest%2Fui%2Fattributes%2Finvalid-doc-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Ftest%2Fui%2Fattributes%2Finvalid-doc-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Finvalid-doc-attr.stderr?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -29,7 +29,7 @@ LL | pub fn foo() {}\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n-   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#docno_inlinedocinline for more information\n+   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#inline-and-no_inline for more information\n \n error: this attribute can only be applied at the crate level\n   --> $DIR/invalid-doc-attr.rs:15:12\n@@ -72,7 +72,7 @@ LL |     pub fn baz() {}\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n-   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#docno_inlinedocinline for more information\n+   = note: read https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#inline-and-no_inline for more information\n \n error: aborting due to 6 previous errors\n "}, {"sha": "7666a514101dade5785a217a32289c566340da8c", "filename": "src/test/ui/const-generics/issues/issue-88997.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-88997.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-88997.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-88997.rs?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -0,0 +1,14 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+\n+struct ConstAssert<const COND: bool>;\n+trait True {}\n+impl True for ConstAssert<true> {}\n+\n+struct Range<T: PartialOrd, const MIN: T, const MAX: T>(T)\n+//~^ ERROR the type of const parameters must not depend on other generic parameters\n+//~| ERROR the type of const parameters must not depend on other generic parameters\n+where\n+    ConstAssert<{ MIN <= MAX }>: True;\n+\n+fn main() {}"}, {"sha": "505ba0da23214c72791762ef3d8dcb374bb7a1a1", "filename": "src/test/ui/const-generics/issues/issue-88997.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-88997.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-88997.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-88997.stderr?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -0,0 +1,15 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/issue-88997.rs:8:40\n+   |\n+LL | struct Range<T: PartialOrd, const MIN: T, const MAX: T>(T)\n+   |                                        ^ the type must not depend on the parameter `T`\n+\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/issue-88997.rs:8:54\n+   |\n+LL | struct Range<T: PartialOrd, const MIN: T, const MAX: T>(T)\n+   |                                                      ^ the type must not depend on the parameter `T`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "d544d637cc490e258e4cae215c7c297842c6e77b", "filename": "src/test/ui/const-generics/issues/issue-89304.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-89304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-89304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-89304.rs?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+struct GenericStruct<const T: usize> { val: i64 }\n+\n+impl<const T: usize> From<GenericStruct<T>> for GenericStruct<{T + 1}> {\n+    fn from(other: GenericStruct<T>) -> Self {\n+        Self { val: other.val }\n+    }\n+}\n+\n+impl<const T: usize> From<GenericStruct<{T + 1}>> for GenericStruct<T> {\n+    fn from(other: GenericStruct<{T + 1}>) -> Self {\n+        Self { val: other.val }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "b11b07b5023b2348d3bbbb0a89f6327084b92599", "filename": "src/test/ui/const-generics/issues/issue-90364.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90364.rs?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -0,0 +1,9 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+pub struct Foo<T, const H: T>(T)\n+//~^ ERROR the type of const parameters must not depend on other generic parameters\n+where\n+    [(); 1]:;\n+\n+fn main() {}"}, {"sha": "e85bd136ef6dcba08a7fdbc3e10ba91cbb8a4da5", "filename": "src/test/ui/const-generics/issues/issue-90364.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f13083542cb2b9fce83ed8a50238e4a6386820f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90364.stderr?ref=9f13083542cb2b9fce83ed8a50238e4a6386820f", "patch": "@@ -0,0 +1,9 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/issue-90364.rs:4:28\n+   |\n+LL | pub struct Foo<T, const H: T>(T)\n+   |                            ^ the type must not depend on the parameter `T`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0770`."}]}