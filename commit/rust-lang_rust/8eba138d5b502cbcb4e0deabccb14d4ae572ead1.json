{"sha": "8eba138d5b502cbcb4e0deabccb14d4ae572ead1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYmExMzhkNWI1MDJjYmNiNGUwZGVhYmNjYjE0ZDRhZTU3MmVhZDE=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-08-16T21:59:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-16T21:59:20Z"}, "message": "Rollup merge of #74204 - ayazhafiz:i/74120, r=eddyb\n\nDon't visit foreign function bodies when lowering ast to hir\n\nPreviously the existence of bodies inside a foreign function block would\ncause a panic in the hir `NodeCollector` during its collection of crate\nbodies to compute a crate hash:\n\nhttps://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src/librustc_middle/hir/map/collector.rs#L154-L158\n\nThe collector walks the hir tree and creates a map of hir nodes, then\nattaching bodies in the crate to their owner in the map. For a code like\n\n```rust\nextern \"C\" {\n    fn f() {\n        fn g() {}\n    }\n}\n```\n\nThe crate bodies include the body of the function `g`. But foreign\nfunctions cannot have bodies, and while the parser AST permits a foreign\nfunction to have a body, the hir doesn't. This means that the body of\n`f` is not present in the hir, and so neither is `g`. So when the\n`NodeCollector` finishes the walking the hir, it has no record of `g`,\ncannot find an owner for the body of `g` it sees in the crate bodies,\nand blows up.\n\nWhy do the crate bodies include the body of `g`? The AST walker has a\nneed a for walking function bodies, and FFIs share the same AST node as\nfunctions in other contexts.\n\nThere are at least two options to fix this:\n\n- Don't unwrap the map entry for an hir node in the `NodeCollector`\n- Modifier the ast->hir lowering visitor to ignore foreign function\n  blocks\n\nI don't think the first is preferrable, since we want to know when we\ncan't find a body for an hir node that we thought had one (dropping this\ninformation may lead to an invalid hash). So this commit implements the\nsecond option.\n\nCloses #74120", "tree": {"sha": "e42d09f93385509d4b771a1745b86bb2acc36e19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e42d09f93385509d4b771a1745b86bb2acc36e19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eba138d5b502cbcb4e0deabccb14d4ae572ead1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfOaw4CRBK7hj4Ov3rIwAAdHIIADXK/KSQg/nDE0aHkahXySQc\nLELSuZdJobNeXyOnTWOdjS+Z1IYnyzcZw3yASqlW/MHdAliVmzEN7Bth2YdffHfK\n451RE2Iv0vsCDjKwXhOIxjNoO7JBleQUsruBbJCUOoe5Tey0KP65WxjXYxXRz3t1\ncrqRiFjYpufEWavfU6PspXptMcVQIYrZDf4oPaFNGPAm/4/vdpKNRUS4JNVTJ8gg\nnlhQdVF6qWctEDYgEQOkLa9r17v4MoVQYlVcU4vIElgD8jaUzgPiu0JJtOBfARVP\njOJTjPuhPnnNhvrUbgdsI2AzIBZfL5ic4fLKMHhn2wQwmVFxq82aOal4Sx72VAg=\n=Tq4m\n-----END PGP SIGNATURE-----\n", "payload": "tree e42d09f93385509d4b771a1745b86bb2acc36e19\nparent 9b4db695b0ab13885a61deb1b2e4d6599b8c5bbc\nparent d442bf7162647743f941977a5154676322a5614b\nauthor Tyler Mandry <tmandry@gmail.com> 1597615160 -0700\ncommitter GitHub <noreply@github.com> 1597615160 -0700\n\nRollup merge of #74204 - ayazhafiz:i/74120, r=eddyb\n\nDon't visit foreign function bodies when lowering ast to hir\n\nPreviously the existence of bodies inside a foreign function block would\ncause a panic in the hir `NodeCollector` during its collection of crate\nbodies to compute a crate hash:\n\nhttps://github.com/rust-lang/rust/blob/e59b08e62ea691916d2f063cac5aab4634128022/src/librustc_middle/hir/map/collector.rs#L154-L158\n\nThe collector walks the hir tree and creates a map of hir nodes, then\nattaching bodies in the crate to their owner in the map. For a code like\n\n```rust\nextern \"C\" {\n    fn f() {\n        fn g() {}\n    }\n}\n```\n\nThe crate bodies include the body of the function `g`. But foreign\nfunctions cannot have bodies, and while the parser AST permits a foreign\nfunction to have a body, the hir doesn't. This means that the body of\n`f` is not present in the hir, and so neither is `g`. So when the\n`NodeCollector` finishes the walking the hir, it has no record of `g`,\ncannot find an owner for the body of `g` it sees in the crate bodies,\nand blows up.\n\nWhy do the crate bodies include the body of `g`? The AST walker has a\nneed a for walking function bodies, and FFIs share the same AST node as\nfunctions in other contexts.\n\nThere are at least two options to fix this:\n\n- Don't unwrap the map entry for an hir node in the `NodeCollector`\n- Modifier the ast->hir lowering visitor to ignore foreign function\n  blocks\n\nI don't think the first is preferrable, since we want to know when we\ncan't find a body for an hir node that we thought had one (dropping this\ninformation may lead to an invalid hash). So this commit implements the\nsecond option.\n\nCloses #74120\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eba138d5b502cbcb4e0deabccb14d4ae572ead1", "html_url": "https://github.com/rust-lang/rust/commit/8eba138d5b502cbcb4e0deabccb14d4ae572ead1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eba138d5b502cbcb4e0deabccb14d4ae572ead1/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b4db695b0ab13885a61deb1b2e4d6599b8c5bbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b4db695b0ab13885a61deb1b2e4d6599b8c5bbc", "html_url": "https://github.com/rust-lang/rust/commit/9b4db695b0ab13885a61deb1b2e4d6599b8c5bbc"}, {"sha": "d442bf7162647743f941977a5154676322a5614b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d442bf7162647743f941977a5154676322a5614b", "html_url": "https://github.com/rust-lang/rust/commit/d442bf7162647743f941977a5154676322a5614b"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "699f5c9778a2f4338dcfd323470b5bab1303a947", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8eba138d5b502cbcb4e0deabccb14d4ae572ead1/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eba138d5b502cbcb4e0deabccb14d4ae572ead1/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=8eba138d5b502cbcb4e0deabccb14d4ae572ead1", "patch": "@@ -5,7 +5,7 @@ use crate::Arena;\n use rustc_ast::ast::*;\n use rustc_ast::node_id::NodeMap;\n use rustc_ast::ptr::P;\n-use rustc_ast::visit::{self, AssocCtxt, Visitor};\n+use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n@@ -75,6 +75,18 @@ impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n         }\n     }\n \n+    fn visit_fn(&mut self, fk: FnKind<'a>, sp: Span, _: NodeId) {\n+        match fk {\n+            FnKind::Fn(FnCtxt::Foreign, _, sig, _, _) => {\n+                self.visit_fn_header(&sig.header);\n+                visit::walk_fn_decl(self, &sig.decl);\n+                // Don't visit the foreign function body even if it has one, since lowering the\n+                // body would have no meaning and will have already been caught as a parse error.\n+            }\n+            _ => visit::walk_fn(self, fk, sp),\n+        }\n+    }\n+\n     fn visit_assoc_item(&mut self, item: &'a AssocItem, ctxt: AssocCtxt) {\n         self.lctx.with_hir_id_owner(item.id, |lctx| match ctxt {\n             AssocCtxt::Trait => {"}, {"sha": "a84065e02186855cbb0f6e4241eb0576638b005f", "filename": "src/test/ui/foreign/issue-74120-lowering-of-ffi-block-bodies.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8eba138d5b502cbcb4e0deabccb14d4ae572ead1/src%2Ftest%2Fui%2Fforeign%2Fissue-74120-lowering-of-ffi-block-bodies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eba138d5b502cbcb4e0deabccb14d4ae572ead1/src%2Ftest%2Fui%2Fforeign%2Fissue-74120-lowering-of-ffi-block-bodies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign%2Fissue-74120-lowering-of-ffi-block-bodies.rs?ref=8eba138d5b502cbcb4e0deabccb14d4ae572ead1", "patch": "@@ -0,0 +1,11 @@\n+// Previously this ICE'd because `fn g()` would be lowered, but the block associated with `fn f()`\n+// wasn't.\n+\n+// compile-flags: --crate-type=lib\n+\n+extern \"C\" {\n+    fn f() {\n+    //~^ incorrect function inside `extern` block\n+        fn g() {}\n+    }\n+}"}, {"sha": "d4a9ca3e7c66ef8d9362cd3fd6279b47dc64c8f6", "filename": "src/test/ui/foreign/issue-74120-lowering-of-ffi-block-bodies.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8eba138d5b502cbcb4e0deabccb14d4ae572ead1/src%2Ftest%2Fui%2Fforeign%2Fissue-74120-lowering-of-ffi-block-bodies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eba138d5b502cbcb4e0deabccb14d4ae572ead1/src%2Ftest%2Fui%2Fforeign%2Fissue-74120-lowering-of-ffi-block-bodies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign%2Fissue-74120-lowering-of-ffi-block-bodies.stderr?ref=8eba138d5b502cbcb4e0deabccb14d4ae572ead1", "patch": "@@ -0,0 +1,19 @@\n+error: incorrect function inside `extern` block\n+  --> $DIR/issue-74120-lowering-of-ffi-block-bodies.rs:7:8\n+   |\n+LL |   extern \"C\" {\n+   |   ---------- `extern` blocks define existing foreign functions and functions inside of them cannot have a body\n+LL |       fn f() {\n+   |  ________^___-\n+   | |        |\n+   | |        cannot have a body\n+LL | |\n+LL | |         fn g() {}\n+LL | |     }\n+   | |_____- help: remove the invalid body: `;`\n+   |\n+   = help: you might have meant to write a function accessible through FFI, which can be done by writing `extern fn` outside of the `extern` block\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: aborting due to previous error\n+"}]}