{"sha": "e41e694d9e5a6bcb2109c936df9757879a65eb59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MWU2OTRkOWU1YTZiY2IyMTA5YzkzNmRmOTc1Nzg3OWE2NWViNTk=", "commit": {"author": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2019-02-05T11:26:19Z"}, "committer": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2019-02-13T07:21:59Z"}, "message": "Clarify guarantees for `Box` allocation", "tree": {"sha": "927e2abc8244a62aa57e0584fd33f4fbf50dfbb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/927e2abc8244a62aa57e0584fd33f4fbf50dfbb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e41e694d9e5a6bcb2109c936df9757879a65eb59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e41e694d9e5a6bcb2109c936df9757879a65eb59", "html_url": "https://github.com/rust-lang/rust/commit/e41e694d9e5a6bcb2109c936df9757879a65eb59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e41e694d9e5a6bcb2109c936df9757879a65eb59/comments", "author": null, "committer": null, "parents": [{"sha": "8ae730a442cc8af6a487a137ae9ba78f89edbba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae730a442cc8af6a487a137ae9ba78f89edbba6", "html_url": "https://github.com/rust-lang/rust/commit/8ae730a442cc8af6a487a137ae9ba78f89edbba6"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "f3877e51a6633f2589885ce08015fa5d0da46b85", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e41e694d9e5a6bcb2109c936df9757879a65eb59/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41e694d9e5a6bcb2109c936df9757879a65eb59/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=e41e694d9e5a6bcb2109c936df9757879a65eb59", "patch": "@@ -34,6 +34,9 @@ extern \"Rust\" {\n /// This type implements the [`Alloc`] trait by forwarding calls\n /// to the allocator registered with the `#[global_allocator]` attribute\n /// if there is one, or the `std` crate\u2019s default.\n+///\n+/// Note: while this type is unstable, the functionality it provides can be\n+/// accessed through the [free functions in `alloc`](index.html#functions).\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n #[derive(Copy, Clone, Default, Debug)]\n pub struct Global;"}, {"sha": "462f65ed794554a05bf3bbef0af1f5eaf0d5b962", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e41e694d9e5a6bcb2109c936df9757879a65eb59/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41e694d9e5a6bcb2109c936df9757879a65eb59/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=e41e694d9e5a6bcb2109c936df9757879a65eb59", "patch": "@@ -4,6 +4,16 @@\n //! heap allocation in Rust. Boxes provide ownership for this allocation, and\n //! drop their contents when they go out of scope.\n //!\n+//! For non-zero-sized values, a [`Box`] will use the [`Global`] allocator for\n+//! its allocation. It is valid to convert both ways between a [`Box`] and a\n+//! raw pointer allocated with the [`Global`] allocator, given that the\n+//! [`Layout`] used with the allocator is correct for the type. More precisely,\n+//! a `value: *mut T` that has been allocated with the [`Global`] allocator\n+//! with `Layout::for_value(&*value)` may be converted into a box using\n+//! `Box::<T>::from_raw(value)`. Conversely, the memory backing a `value: *mut\n+//! T` obtained from `Box::<T>::into_raw` may be deallocated using the\n+//! [`Global`] allocator with `Layout::for_value(&*value)`.\n+//!\n //! # Examples\n //!\n //! Move a value from the stack to the heap by creating a [`Box`]:"}]}