{"sha": "63fdd46f9af41398fd2191135336e63d118114c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZmRkNDZmOWFmNDEzOThmZDIxOTExMzUzMzZlNjNkMTE4MTE0YzU=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-29T03:08:08Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-29T03:08:16Z"}, "message": "Handle custom discriminant values and detect invalid discriminants.", "tree": {"sha": "65a73cfc1db4b54d1b93e1b623dc4b509b9e494a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65a73cfc1db4b54d1b93e1b623dc4b509b9e494a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63fdd46f9af41398fd2191135336e63d118114c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63fdd46f9af41398fd2191135336e63d118114c5", "html_url": "https://github.com/rust-lang/rust/commit/63fdd46f9af41398fd2191135336e63d118114c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63fdd46f9af41398fd2191135336e63d118114c5/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71b94c9a5d68bcbb4667efb6edc054eda8be5665", "url": "https://api.github.com/repos/rust-lang/rust/commits/71b94c9a5d68bcbb4667efb6edc054eda8be5665", "html_url": "https://github.com/rust-lang/rust/commit/71b94c9a5d68bcbb4667efb6edc054eda8be5665"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "65dd187fa0b600fdf5ed5fbda8d7051b52ae61f3", "filename": "src/error.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63fdd46f9af41398fd2191135336e63d118114c5/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fdd46f9af41398fd2191135336e63d118114c5/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=63fdd46f9af41398fd2191135336e63d118114c5", "patch": "@@ -5,6 +5,7 @@ use std::fmt;\n pub enum EvalError {\n     DanglingPointerDeref,\n     InvalidBool,\n+    InvalidDiscriminant,\n     PointerOutOfBounds,\n     ReadPointerAsBytes,\n     ReadBytesAsPointer,\n@@ -21,6 +22,8 @@ impl Error for EvalError {\n                 \"dangling pointer was dereferenced\",\n             EvalError::InvalidBool =>\n                 \"invalid boolean value read\",\n+            EvalError::InvalidDiscriminant =>\n+                \"invalid enum discriminant value read\",\n             EvalError::PointerOutOfBounds =>\n                 \"pointer offset outside bounds of allocation\",\n             EvalError::ReadPointerAsBytes =>"}, {"sha": "f2e7702717d60287b9d7bf975ff7bcbe18c9a26d", "filename": "src/interpreter.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/63fdd46f9af41398fd2191135336e63d118114c5/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fdd46f9af41398fd2191135336e63d118114c5/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=63fdd46f9af41398fd2191135336e63d118114c5", "patch": "@@ -228,15 +228,22 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                 TerminatorTarget::Block(target_block)\n             }\n \n-            Switch { ref discr, ref targets, .. } => {\n+            Switch { ref discr, ref targets, adt_def } => {\n                 let adt_ptr = try!(self.eval_lvalue(discr)).to_ptr();\n                 let adt_repr = self.lvalue_repr(discr);\n                 let discr_size = match *adt_repr {\n                     Repr::Aggregate { discr_size, .. } => discr_size,\n                     _ => panic!(\"attmpted to switch on non-aggregate type\"),\n                 };\n                 let discr_val = try!(self.memory.read_uint(adt_ptr, discr_size));\n-                TerminatorTarget::Block(targets[discr_val as usize])\n+\n+                let matching = adt_def.variants.iter()\n+                    .position(|v| discr_val == v.disr_val.to_u64_unchecked());\n+\n+                match matching {\n+                    Some(i) => TerminatorTarget::Block(targets[i]),\n+                    None => return Err(EvalError::InvalidDiscriminant),\n+                }\n             }\n \n             Call { ref func, ref args, ref destination, .. } => {\n@@ -481,13 +488,18 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n         Ok(TerminatorTarget::Call)\n     }\n \n-    fn assign_to_aggregate(&mut self, dest: Pointer, dest_repr: &Repr, variant: usize,\n-                         operands: &[mir::Operand<'tcx>]) -> EvalResult<()> {\n+    fn assign_to_aggregate(\n+        &mut self,\n+        dest: Pointer,\n+        dest_repr: &Repr,\n+        variant: usize,\n+        discr: Option<u64>,\n+        operands: &[mir::Operand<'tcx>],\n+    ) -> EvalResult<()> {\n         match *dest_repr {\n             Repr::Aggregate { discr_size, ref variants, .. } => {\n                 if discr_size > 0 {\n-                    let discr = variant as u64;\n-                    try!(self.memory.write_uint(dest, discr, discr_size));\n+                    try!(self.memory.write_uint(dest, discr.unwrap(), discr_size));\n                 }\n                 let after_discr = dest.offset(discr_size as isize);\n                 for (field, operand) in variants[variant].iter().zip(operands) {\n@@ -538,10 +550,12 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                 use rustc::mir::repr::AggregateKind::*;\n                 match *kind {\n                     Tuple | Closure(..) =>\n-                        try!(self.assign_to_aggregate(dest, &dest_repr, 0, operands)),\n+                        try!(self.assign_to_aggregate(dest, &dest_repr, 0, None, operands)),\n \n-                    Adt(_, variant_idx, _) =>\n-                        try!(self.assign_to_aggregate(dest, &dest_repr, variant_idx, operands)),\n+                    Adt(adt_def, variant, _) => {\n+                        let discr = Some(adt_def.variants[variant].disr_val.to_u64_unchecked());\n+                        try!(self.assign_to_aggregate(dest, &dest_repr, variant, discr, operands));\n+                    }\n \n                     Vec => if let Repr::Array { elem_size, length } = *dest_repr {\n                         assert_eq!(length, operands.len());\n@@ -668,7 +682,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n         use rustc::mir::tcx::LvalueTy;\n         match self.mir().lvalue_ty(self.tcx, lvalue) {\n             LvalueTy::Ty { ty } => self.ty_to_repr(ty),\n-            LvalueTy::Downcast { ref adt_def, substs, variant_index } => {\n+            LvalueTy::Downcast { adt_def, substs, variant_index } => {\n                 let field_tys = adt_def.variants[variant_index].fields.iter()\n                     .map(|f| f.ty(self.tcx, substs));\n                 self.repr_arena.alloc(self.make_aggregate_repr(iter::once(field_tys)))"}, {"sha": "190e82ac01c5efa9ca8f72f6f4135beefd0ce646", "filename": "test/c_enums.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/63fdd46f9af41398fd2191135336e63d118114c5/test%2Fc_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fdd46f9af41398fd2191135336e63d118114c5/test%2Fc_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fc_enums.rs?ref=63fdd46f9af41398fd2191135336e63d118114c5", "patch": "@@ -0,0 +1,21 @@\n+#![feature(custom_attribute)]\n+#![allow(dead_code, unused_attributes)]\n+\n+enum Foo {\n+    Bar = 42,\n+    Baz,\n+    Quux = 100,\n+}\n+\n+#[miri_run]\n+fn foo() -> [u8; 3] {\n+    [Foo::Bar as u8, Foo::Baz as u8, Foo::Quux as u8]\n+}\n+\n+#[miri_run]\n+fn unsafe_match() -> bool {\n+    match unsafe { std::mem::transmute::<u8, Foo>(43) } {\n+        Foo::Baz => true,\n+        _ => false,\n+    }\n+}"}]}