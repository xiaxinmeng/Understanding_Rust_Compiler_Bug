{"sha": "94623ee882d6c598e09cd0787fcc62bd98d88d94", "node_id": "C_kwDOAAsO6NoAKDk0NjIzZWU4ODJkNmM1OThlMDljZDA3ODdmY2M2MmJkOThkODhkOTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-26T00:06:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-26T00:06:53Z"}, "message": "Auto merge of #8737 - smoelius:extra-impl-lifetimes, r=giraffate\n\nExtend `extra_unused_lifetimes` to handle impl lifetimes\n\nFixes #6437 (cc: `@carols10cents)`\n\nchangelog: fix #6437", "tree": {"sha": "a38e4a113543acdcc4fe590e2679b973a22b225f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a38e4a113543acdcc4fe590e2679b973a22b225f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94623ee882d6c598e09cd0787fcc62bd98d88d94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94623ee882d6c598e09cd0787fcc62bd98d88d94", "html_url": "https://github.com/rust-lang/rust/commit/94623ee882d6c598e09cd0787fcc62bd98d88d94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94623ee882d6c598e09cd0787fcc62bd98d88d94/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760f293d79d74bc013803e8f92f570f9bc6dc4e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/760f293d79d74bc013803e8f92f570f9bc6dc4e9", "html_url": "https://github.com/rust-lang/rust/commit/760f293d79d74bc013803e8f92f570f9bc6dc4e9"}, {"sha": "c22bb06bc02c81c132ef2dbb5513b6faac09688c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c22bb06bc02c81c132ef2dbb5513b6faac09688c", "html_url": "https://github.com/rust-lang/rust/commit/c22bb06bc02c81c132ef2dbb5513b6faac09688c"}], "stats": {"total": 136, "additions": 124, "deletions": 12}, "files": [{"sha": "54b80bf3b27d5917d0f2c94ea16013f4c1cfc8d0", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 59, "deletions": 7, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/94623ee882d6c598e09cd0787fcc62bd98d88d94/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94623ee882d6c598e09cd0787fcc62bd98d88d94/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=94623ee882d6c598e09cd0787fcc62bd98d88d94", "patch": "@@ -1,16 +1,19 @@\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::trait_ref_of_method;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir::intravisit::nested_filter::{self as hir_nested_filter, NestedFilter};\n use rustc_hir::intravisit::{\n-    walk_fn_decl, walk_generic_param, walk_generics, walk_item, walk_param_bound, walk_poly_trait_ref, walk_ty, Visitor,\n+    walk_fn_decl, walk_generic_param, walk_generics, walk_impl_item_ref, walk_item, walk_param_bound,\n+    walk_poly_trait_ref, walk_trait_ref, walk_ty, Visitor,\n };\n use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n-    BareFnTy, BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, ImplItem,\n+    BareFnTy, BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, Impl, ImplItem,\n     ImplItemKind, Item, ItemKind, LangItem, Lifetime, LifetimeName, ParamName, PolyTraitRef, TraitBoundModifier,\n     TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WhereClause, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::nested_filter as middle_nested_filter;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, Ident, Symbol};\n@@ -84,6 +87,8 @@ impl<'tcx> LateLintPass<'tcx> for Lifetimes {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if let ItemKind::Fn(ref sig, ref generics, id) = item.kind {\n             check_fn_inner(cx, sig.decl, Some(id), None, generics, item.span, true);\n+        } else if let ItemKind::Impl(ref impl_) = item.kind {\n+            report_extra_impl_lifetimes(cx, impl_);\n         }\n     }\n \n@@ -194,8 +199,7 @@ fn explicit_self_type<'tcx>(cx: &LateContext<'tcx>, func: &FnDecl<'tcx>, ident:\n             visitor.visit_ty(self_ty);\n \n             !visitor.all_lts().is_empty()\n-        }\n-        else {\n+        } else {\n             false\n         }\n     }\n@@ -481,11 +485,29 @@ fn has_where_lifetimes<'tcx>(cx: &LateContext<'tcx>, where_clause: &'tcx WhereCl\n     false\n }\n \n-struct LifetimeChecker {\n+struct LifetimeChecker<'cx, 'tcx, F> {\n+    cx: &'cx LateContext<'tcx>,\n     map: FxHashMap<Symbol, Span>,\n+    phantom: std::marker::PhantomData<F>,\n }\n \n-impl<'tcx> Visitor<'tcx> for LifetimeChecker {\n+impl<'cx, 'tcx, F> LifetimeChecker<'cx, 'tcx, F> {\n+    fn new(cx: &'cx LateContext<'tcx>, map: FxHashMap<Symbol, Span>) -> LifetimeChecker<'cx, 'tcx, F> {\n+        Self {\n+            cx,\n+            map,\n+            phantom: std::marker::PhantomData,\n+        }\n+    }\n+}\n+\n+impl<'cx, 'tcx, F> Visitor<'tcx> for LifetimeChecker<'cx, 'tcx, F>\n+where\n+    F: NestedFilter<'tcx>,\n+{\n+    type Map = rustc_middle::hir::map::Map<'tcx>;\n+    type NestedFilter = F;\n+\n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n         self.map.remove(&lifetime.name.ident().name);\n@@ -501,6 +523,10 @@ impl<'tcx> Visitor<'tcx> for LifetimeChecker {\n             walk_generic_param(self, param);\n         }\n     }\n+\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n+    }\n }\n \n fn report_extra_lifetimes<'tcx>(cx: &LateContext<'tcx>, func: &'tcx FnDecl<'_>, generics: &'tcx Generics<'_>) {\n@@ -512,7 +538,7 @@ fn report_extra_lifetimes<'tcx>(cx: &LateContext<'tcx>, func: &'tcx FnDecl<'_>,\n             _ => None,\n         })\n         .collect();\n-    let mut checker = LifetimeChecker { map: hs };\n+    let mut checker = LifetimeChecker::<hir_nested_filter::None>::new(cx, hs);\n \n     walk_generics(&mut checker, generics);\n     walk_fn_decl(&mut checker, func);\n@@ -527,6 +553,32 @@ fn report_extra_lifetimes<'tcx>(cx: &LateContext<'tcx>, func: &'tcx FnDecl<'_>,\n     }\n }\n \n+fn report_extra_impl_lifetimes<'tcx>(cx: &LateContext<'tcx>, impl_: &'tcx Impl<'_>) {\n+    let hs = impl_\n+        .generics\n+        .params\n+        .iter()\n+        .filter_map(|par| match par.kind {\n+            GenericParamKind::Lifetime { .. } => Some((par.name.ident().name, par.span)),\n+            _ => None,\n+        })\n+        .collect();\n+    let mut checker = LifetimeChecker::<middle_nested_filter::All>::new(cx, hs);\n+\n+    walk_generics(&mut checker, &impl_.generics);\n+    if let Some(ref trait_ref) = impl_.of_trait {\n+        walk_trait_ref(&mut checker, trait_ref);\n+    }\n+    walk_ty(&mut checker, impl_.self_ty);\n+    for item in impl_.items {\n+        walk_impl_item_ref(&mut checker, item);\n+    }\n+\n+    for &v in checker.map.values() {\n+        span_lint(cx, EXTRA_UNUSED_LIFETIMES, v, \"this lifetime isn't used in the impl\");\n+    }\n+}\n+\n struct BodyLifetimeChecker {\n     lifetimes_used_in_body: bool,\n }"}, {"sha": "c6298139601625392c47a5bd3614d3acd5ef1038", "filename": "tests/ui/crashes/ice-2865.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94623ee882d6c598e09cd0787fcc62bd98d88d94/tests%2Fui%2Fcrashes%2Fice-2865.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94623ee882d6c598e09cd0787fcc62bd98d88d94/tests%2Fui%2Fcrashes%2Fice-2865.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2865.rs?ref=94623ee882d6c598e09cd0787fcc62bd98d88d94", "patch": "@@ -1,4 +1,4 @@\n-#[allow(dead_code)]\n+#![allow(dead_code, clippy::extra_unused_lifetimes)]\n \n /// Test for https://github.com/rust-lang/rust-clippy/issues/2865\n "}, {"sha": "268ba86fc7aa80756b1aa151b1aff72949a4d75c", "filename": "tests/ui/crashes/ice-3151.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94623ee882d6c598e09cd0787fcc62bd98d88d94/tests%2Fui%2Fcrashes%2Fice-3151.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94623ee882d6c598e09cd0787fcc62bd98d88d94/tests%2Fui%2Fcrashes%2Fice-3151.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3151.rs?ref=94623ee882d6c598e09cd0787fcc62bd98d88d94", "patch": "@@ -1,4 +1,4 @@\n-/// Test for https://github.com/rust-lang/rust-clippy/issues/2865\n+/// Test for https://github.com/rust-lang/rust-clippy/issues/3151\n \n #[derive(Clone)]\n pub struct HashMap<V, S> {"}, {"sha": "f76127a7105fd5333dc9cca49947f943f394cf21", "filename": "tests/ui/extra_unused_lifetimes.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/94623ee882d6c598e09cd0787fcc62bd98d88d94/tests%2Fui%2Fextra_unused_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94623ee882d6c598e09cd0787fcc62bd98d88d94/tests%2Fui%2Fextra_unused_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.rs?ref=94623ee882d6c598e09cd0787fcc62bd98d88d94", "patch": "@@ -72,4 +72,46 @@ mod issue4291 {\n     }\n }\n \n+mod issue6437 {\n+    pub struct Scalar;\n+\n+    impl<'a> std::ops::AddAssign<&Scalar> for &mut Scalar {\n+        fn add_assign(&mut self, _rhs: &Scalar) {\n+            unimplemented!();\n+        }\n+    }\n+\n+    impl<'b> Scalar {\n+        pub fn something<'c>() -> Self {\n+            Self\n+        }\n+    }\n+}\n+\n+// https://github.com/rust-lang/rust-clippy/pull/8737#pullrequestreview-951268213\n+mod first_case {\n+    use serde::de::Visitor;\n+    pub trait Expected {\n+        fn fmt(&self, formatter: &mut std::fmt::Formatter);\n+    }\n+\n+    impl<'de, T> Expected for T\n+    where\n+        T: Visitor<'de>,\n+    {\n+        fn fmt(&self, formatter: &mut std::fmt::Formatter) {}\n+    }\n+}\n+\n+// https://github.com/rust-lang/rust-clippy/pull/8737#pullrequestreview-951268213\n+mod second_case {\n+    pub trait Source {\n+        fn hey();\n+    }\n+\n+    impl<'a, T: Source + ?Sized + 'a> Source for Box<T> {\n+        fn hey() {}\n+    }\n+}\n+\n fn main() {}"}, {"sha": "68f02c7ad0f48bb65d5d5ec08ed682950624ddaa", "filename": "tests/ui/extra_unused_lifetimes.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/94623ee882d6c598e09cd0787fcc62bd98d88d94/tests%2Fui%2Fextra_unused_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94623ee882d6c598e09cd0787fcc62bd98d88d94/tests%2Fui%2Fextra_unused_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.stderr?ref=94623ee882d6c598e09cd0787fcc62bd98d88d94", "patch": "@@ -24,5 +24,23 @@ error: this lifetime isn't used in the function definition\n LL |         fn unused_lt<'a>(x: u8) {}\n    |                      ^^\n \n-error: aborting due to 4 previous errors\n+error: this lifetime isn't used in the impl\n+  --> $DIR/extra_unused_lifetimes.rs:78:10\n+   |\n+LL |     impl<'a> std::ops::AddAssign<&Scalar> for &mut Scalar {\n+   |          ^^\n+\n+error: this lifetime isn't used in the impl\n+  --> $DIR/extra_unused_lifetimes.rs:84:10\n+   |\n+LL |     impl<'b> Scalar {\n+   |          ^^\n+\n+error: this lifetime isn't used in the function definition\n+  --> $DIR/extra_unused_lifetimes.rs:85:26\n+   |\n+LL |         pub fn something<'c>() -> Self {\n+   |                          ^^\n+\n+error: aborting due to 7 previous errors\n "}, {"sha": "aea52a852f987d6ab86d899240c9ed81cd3cddc3", "filename": "tests/ui/impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94623ee882d6c598e09cd0787fcc62bd98d88d94/tests%2Fui%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94623ee882d6c598e09cd0787fcc62bd98d88d94/tests%2Fui%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl.rs?ref=94623ee882d6c598e09cd0787fcc62bd98d88d94", "patch": "@@ -1,4 +1,4 @@\n-#![allow(dead_code)]\n+#![allow(dead_code, clippy::extra_unused_lifetimes)]\n #![warn(clippy::multiple_inherent_impl)]\n \n struct MyStruct;"}, {"sha": "538927b18055a289c771f5cb1cfdc1ba9bfad531", "filename": "tests/ui/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94623ee882d6c598e09cd0787fcc62bd98d88d94/tests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94623ee882d6c598e09cd0787fcc62bd98d88d94/tests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.rs?ref=94623ee882d6c598e09cd0787fcc62bd98d88d94", "patch": "@@ -1,4 +1,4 @@\n-#![allow(dead_code, clippy::missing_safety_doc)]\n+#![allow(dead_code, clippy::missing_safety_doc, clippy::extra_unused_lifetimes)]\n #![warn(clippy::new_without_default)]\n \n pub struct Foo;"}]}