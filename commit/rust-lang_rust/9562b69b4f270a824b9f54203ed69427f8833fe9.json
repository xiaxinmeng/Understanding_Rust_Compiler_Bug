{"sha": "9562b69b4f270a824b9f54203ed69427f8833fe9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NjJiNjliNGYyNzBhODI0YjlmNTQyMDNlZDY5NDI3Zjg4MzNmZTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-10-13T00:04:31Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-10-13T00:04:31Z"}, "message": "rustc: Allow targets to specify SIMD args are by-val\n\nThe upcoming SIMD support in the wasm target is unique from the other\nplatforms where it's either unconditionally available or not available,\nthere's no halfway where a subsection of the program can use it but no\nother parts of the program can use it. In this world it's valid for wasm\nSIMD args to always be passed by value and there's no need to pass them\nby reference.\n\nThis commit adds a new custom target specification option\n`simd_types_indirect` which defaults to `true`, but the wasm backend\ndisables this and sets it to `false`.", "tree": {"sha": "856d17110c72437caf09feebe58a8a9b63f81933", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/856d17110c72437caf09feebe58a8a9b63f81933"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9562b69b4f270a824b9f54203ed69427f8833fe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9562b69b4f270a824b9f54203ed69427f8833fe9", "html_url": "https://github.com/rust-lang/rust/commit/9562b69b4f270a824b9f54203ed69427f8833fe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9562b69b4f270a824b9f54203ed69427f8833fe9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "945372d26818f93d6f5cded7b751749e280b67bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/945372d26818f93d6f5cded7b751749e280b67bf", "html_url": "https://github.com/rust-lang/rust/commit/945372d26818f93d6f5cded7b751749e280b67bf"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "7b93d3e795ed8f29c41132a2ba11f65e87b1ccb6", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9562b69b4f270a824b9f54203ed69427f8833fe9/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9562b69b4f270a824b9f54203ed69427f8833fe9/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=9562b69b4f270a824b9f54203ed69427f8833fe9", "patch": "@@ -536,7 +536,10 @@ impl<'tcx> FnTypeExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n                     // Note that the platform intrinsic ABI is exempt here as\n                     // that's how we connect up to LLVM and it's unstable\n                     // anyway, we control all calls to it in libstd.\n-                    layout::Abi::Vector { .. } if abi != Abi::PlatformIntrinsic => {\n+                    layout::Abi::Vector { .. }\n+                        if abi != Abi::PlatformIntrinsic &&\n+                            cx.sess().target.target.options.simd_types_indirect =>\n+                    {\n                         arg.make_indirect();\n                         return\n                     }"}, {"sha": "9ee4582fabf7b3b594f444209a6c31d5d9dc2356", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9562b69b4f270a824b9f54203ed69427f8833fe9/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9562b69b4f270a824b9f54203ed69427f8833fe9/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=9562b69b4f270a824b9f54203ed69427f8833fe9", "patch": "@@ -680,6 +680,12 @@ pub struct TargetOptions {\n     /// typically because the platform needs to unwind for things like stack\n     /// unwinders.\n     pub requires_uwtable: bool,\n+\n+    /// Whether or not SIMD types are passed by reference in the Rust ABI,\n+    /// typically required if a target can be compiled with a mixed set of\n+    /// target features. This is `true` by default, and `false` for targets like\n+    /// wasm32 where the whole program either has simd or not.\n+    pub simd_types_indirect: bool,\n }\n \n impl Default for TargetOptions {\n@@ -760,6 +766,7 @@ impl Default for TargetOptions {\n             embed_bitcode: false,\n             emit_debug_gdb_scripts: true,\n             requires_uwtable: false,\n+            simd_types_indirect: true,\n         }\n     }\n }\n@@ -1041,6 +1048,7 @@ impl Target {\n         key!(embed_bitcode, bool);\n         key!(emit_debug_gdb_scripts, bool);\n         key!(requires_uwtable, bool);\n+        key!(simd_types_indirect, bool);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -1250,6 +1258,7 @@ impl ToJson for Target {\n         target_option_val!(embed_bitcode);\n         target_option_val!(emit_debug_gdb_scripts);\n         target_option_val!(requires_uwtable);\n+        target_option_val!(simd_types_indirect);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}, {"sha": "46353068bd04588840787936f803949adc1d8d17", "filename": "src/librustc_target/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9562b69b4f270a824b9f54203ed69427f8833fe9/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9562b69b4f270a824b9f54203ed69427f8833fe9/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs?ref=9562b69b4f270a824b9f54203ed69427f8833fe9", "patch": "@@ -54,6 +54,12 @@ pub fn target() -> Result<Target, String> {\n         linker: Some(\"rust-lld\".to_owned()),\n         lld_flavor: LldFlavor::Wasm,\n \n+        // No need for indirection here, simd types can always be passed by\n+        // value as the whole module either has simd or not, which is different\n+        // from x86 (for example) where programs can have functions that don't\n+        // enable simd features.\n+        simd_types_indirect: false,\n+\n         .. Default::default()\n     };\n     Ok(Target {"}]}