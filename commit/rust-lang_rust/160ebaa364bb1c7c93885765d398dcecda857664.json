{"sha": "160ebaa364bb1c7c93885765d398dcecda857664", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MGViYWEzNjRiYjFjN2M5Mzg4NTc2NWQzOThkY2VjZGE4NTc2NjQ=", "commit": {"author": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-27T04:10:45Z"}, "committer": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-27T04:10:45Z"}, "message": "add OS-specific handling to src/shims/env.rs", "tree": {"sha": "25c83520aad06364e93fa0bdd1bb4a8459d85a91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25c83520aad06364e93fa0bdd1bb4a8459d85a91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/160ebaa364bb1c7c93885765d398dcecda857664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/160ebaa364bb1c7c93885765d398dcecda857664", "html_url": "https://github.com/rust-lang/rust/commit/160ebaa364bb1c7c93885765d398dcecda857664", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/160ebaa364bb1c7c93885765d398dcecda857664/comments", "author": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc8f88e04e04f83879e7d2548de5b5addac10600", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc8f88e04e04f83879e7d2548de5b5addac10600", "html_url": "https://github.com/rust-lang/rust/commit/fc8f88e04e04f83879e7d2548de5b5addac10600"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "990ccf7d69bd001cddb878baeb54a80012dc0c33", "filename": "src/shims/env.rs", "status": "modified", "additions": 46, "deletions": 9, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/160ebaa364bb1c7c93885765d398dcecda857664/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160ebaa364bb1c7c93885765d398dcecda857664/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=160ebaa364bb1c7c93885765d398dcecda857664", "patch": "@@ -23,8 +23,12 @@ pub struct EnvVars<'tcx> {\n impl<'tcx> EnvVars<'tcx> {\n     pub(crate) fn init<'mir>(\n         ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n-        excluded_env_vars: Vec<String>,\n+        mut excluded_env_vars: Vec<String>,\n     ) -> InterpResult<'tcx> {\n+        if ecx.tcx.sess.target.target.target_os == \"windows\" {\n+            // Exclude `TERM` var to avoid terminfo trying to open the termcap file.\n+            excluded_env_vars.push(\"TERM\".to_owned());\n+        }\n         if ecx.machine.communicate {\n             for (name, value) in env::vars() {\n                 if !excluded_env_vars.contains(&name) {\n@@ -49,19 +53,41 @@ fn alloc_env_var_as_target_str<'mir, 'tcx>(\n     Ok(ecx.alloc_os_str_as_target_str(name_osstring.as_os_str(), MiriMemoryKind::Machine.into())?)\n }\n \n+fn alloc_env_var_as_c_str<'mir, 'tcx>(\n+    name: &OsStr,\n+    value: &OsStr,\n+    ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n+) -> InterpResult<'tcx, Pointer<Tag>> {\n+    let mut name_osstring = name.to_os_string();\n+    name_osstring.push(\"=\");\n+    name_osstring.push(value);\n+    Ok(ecx.alloc_os_str_as_c_str(name_osstring.as_os_str(), MiriMemoryKind::Machine.into()))\n+}\n+\n+fn alloc_env_var_as_wide_str<'mir, 'tcx>(\n+    name: &OsStr,\n+    value: &OsStr,\n+    ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n+) -> InterpResult<'tcx, Pointer<Tag>> {\n+    let mut name_osstring = name.to_os_string();\n+    name_osstring.push(\"=\");\n+    name_osstring.push(value);\n+    Ok(ecx.alloc_os_str_as_wide_str(name_osstring.as_os_str(), MiriMemoryKind::Machine.into()))\n+}\n+\n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn getenv(&mut self, name_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();\n-        let target_os = this.tcx.sess.target.target.target_os.as_str();\n-        assert!(target_os == \"linux\" || target_os == \"macos\", \"`{}` is only available for the UNIX target family\");\n+        let target_os = &this.tcx.sess.target.target.target_os;\n+        assert!(target_os == \"linux\" || target_os == \"macos\", \"`getenv` is only available for the UNIX target family\");\n \n         let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n         let name = this.read_os_str_from_c_str(name_ptr)?;\n         Ok(match this.machine.env_vars.map.get(name) {\n-            // The offset is used to strip the \"{name}=\" part of the string.\n             Some(var_ptr) => {\n-                Scalar::from(var_ptr.offset(Size::from_bytes(name.len()) + Size::from_bytes(1), this)?)\n+                // The offset is used to strip the \"{name}=\" part of the string.\n+                Scalar::from(var_ptr.offset(Size::from_bytes(u64::try_from(name.len()).unwrap().checked_add(1).unwrap()), this)?)\n             }\n             None => Scalar::ptr_null(&*this.tcx),\n         })\n@@ -73,32 +99,40 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         value_op: OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let mut this = self.eval_context_mut();\n+        let target_os = &this.tcx.sess.target.target.target_os;\n+        assert!(target_os == \"linux\" || target_os == \"macos\", \"`setenv` is only available for the UNIX target family\");\n \n         let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n         let value_ptr = this.read_scalar(value_op)?.not_undef()?;\n-        let value = this.read_os_str_from_target_str(value_ptr)?;\n+\n         let mut new = None;\n         if !this.is_null(name_ptr)? {\n-            let name = this.read_os_str_from_target_str(name_ptr)?;\n+            let name = this.read_os_str_from_c_str(name_ptr)?;\n             if !name.is_empty() && !name.to_string_lossy().contains('=') {\n+                let value = this.read_os_str_from_c_str(value_ptr)?;\n                 new = Some((name.to_owned(), value.to_owned()));\n             }\n         }\n         if let Some((name, value)) = new {\n-            let var_ptr = alloc_env_var_as_target_str(&name, &value, &mut this)?;\n+            let var_ptr = alloc_env_var_as_c_str(&name, &value, &mut this)?;\n             if let Some(var) = this.machine.env_vars.map.insert(name, var_ptr) {\n                 this.memory\n                     .deallocate(var, None, MiriMemoryKind::Machine.into())?;\n             }\n             this.update_environ()?;\n-            Ok(0)\n+            Ok(0) // return zero on success\n         } else {\n+            // name argument is a null pointer, points to an empty string, or points to a string containing an '=' character.\n+            let einval = this.eval_libc(\"EINVAL\")?;\n+            this.set_last_error(einval)?;\n             Ok(-1)\n         }\n     }\n \n     fn unsetenv(&mut self, name_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n+        let target_os = &this.tcx.sess.target.target.target_os;\n+        assert!(target_os == \"linux\" || target_os == \"macos\", \"`unsetenv` is only available for the UNIX target family\");\n \n         let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n         let mut success = None;\n@@ -116,6 +150,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             this.update_environ()?;\n             Ok(0)\n         } else {\n+            // name argument is a null pointer, points to an empty string, or points to a string containing an '=' character.\n+            let einval = this.eval_libc(\"EINVAL\")?;\n+            this.set_last_error(einval)?;\n             Ok(-1)\n         }\n     }"}]}