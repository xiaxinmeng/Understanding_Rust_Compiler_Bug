{"sha": "b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZmI1NzUyOWFkZWQ5MmM0ZjQ3MDU2OGU2YjVlYTdhNWEyOGY2YTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-17T05:52:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-17T05:52:35Z"}, "message": "Auto merge of #24512 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #23782, #24455, #24490, #24493, #24494, #24496, #24498, #24499, #24501, #24502, #24506, #24507, #24508, #24509, #24510\n- Failed merges: #24488", "tree": {"sha": "a906315439fb7dcdab8d025229a0e5e2028af7da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a906315439fb7dcdab8d025229a0e5e2028af7da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "html_url": "https://github.com/rust-lang/rust/commit/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fbedc58e3b0e102ece926a7f99041fc3ad3037a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fbedc58e3b0e102ece926a7f99041fc3ad3037a", "html_url": "https://github.com/rust-lang/rust/commit/7fbedc58e3b0e102ece926a7f99041fc3ad3037a"}, {"sha": "a4be1ec140e7c61b8f73834ab722f7b056ad21b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4be1ec140e7c61b8f73834ab722f7b056ad21b9", "html_url": "https://github.com/rust-lang/rust/commit/a4be1ec140e7c61b8f73834ab722f7b056ad21b9"}], "stats": {"total": 237, "additions": 175, "deletions": 62}, "files": [{"sha": "678c3970fe282554dc67fd0e0ddac08e54a0a438", "filename": "src/doc/complement-design-faq.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Fdoc%2Fcomplement-design-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Fdoc%2Fcomplement-design-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-design-faq.md?ref=b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "patch": "@@ -56,7 +56,7 @@ Types which are [`Sync`][sync] are thread-safe when multiple shared\n references to them are used concurrently. Types which are not `Sync` are not\n thread-safe, and thus when used in a global require unsafe code to use.\n \n-[sync]: core/kinds/trait.Sync.html\n+[sync]: core/marker/trait.Sync.html\n \n ### If mutable static items that implement `Sync` are safe, why is taking &mut SHARABLE unsafe?\n \n@@ -139,7 +139,7 @@ and explicitly calling the `clone` method. Making user-defined copy operators\n explicit surfaces the underlying complexity, forcing the developer to opt-in\n to potentially expensive operations.\n \n-[copy]: core/kinds/trait.Copy.html\n+[copy]: core/marker/trait.Copy.html\n [clone]: core/clone/trait.Clone.html\n \n ## No move constructors"}, {"sha": "57110df0f9e03d3fd712a2fbd09dd257e83bc204", "filename": "src/doc/reference.md", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "patch": "@@ -2177,6 +2177,14 @@ The following configurations must be defined by the implementation:\n * `unix`. See `target_family`.\n * `windows`. See `target_family`.\n \n+You can also set another attribute based on a `cfg` variable with `cfg_attr`:\n+\n+```rust,ignore\n+#[cfg_attr(a, b)]\n+```\n+\n+Will be the same as `#[b]` if `a` is set by `cfg`, and nothing otherwise.\n+\n ### Lint check attributes\n \n A lint check names a potentially undesirable coding pattern, such as\n@@ -2368,7 +2376,7 @@ The currently implemented features of the reference compiler are:\n                     removed entirely for something more wholesome.\n \n * `custom_attribute` - Allows the usage of attributes unknown to the compiler\n-                       so that new attributes can be added in a bacwards compatible\n+                       so that new attributes can be added in a backwards compatible\n                        manner (RFC 572).\n \n * `custom_derive` - Allows the use of `#[derive(Foo,Bar)]` as sugar for\n@@ -2397,7 +2405,7 @@ The currently implemented features of the reference compiler are:\n                  nasty hack that will certainly be removed.\n \n * `main` - Allows use of the `#[main]` attribute, which changes the entry point\n-           into a Rust program. This capabiilty is subject to change.\n+           into a Rust program. This capability is subject to change.\n \n * `macro_reexport` - Allows macros to be re-exported from one crate after being imported\n                      from another. This feature was originally designed with the sole\n@@ -2444,7 +2452,9 @@ The currently implemented features of the reference compiler are:\n * `simd_ffi` - Allows use of SIMD vectors in signatures for foreign functions.\n                The SIMD interface is subject to change.\n \n-* `staged_api` - Allows usage of stability markers and `#![staged_api]` in a crate\n+* `staged_api` - Allows usage of stability markers and `#![staged_api]` in a\n+                 crate. Stability markers are also attributes: `#[stable]`,\n+                 `#[unstable]`, and `#[deprecated]` are the three levels.\n \n * `static_assert` - The `#[static_assert]` functionality is experimental and\n                     unstable. The attribute can be attached to a `static` of\n@@ -2453,7 +2463,7 @@ The currently implemented features of the reference compiler are:\n                     is unintuitive and suboptimal.\n \n * `start` - Allows use of the `#[start]` attribute, which changes the entry point\n-            into a Rust program. This capabiilty, especially the signature for the\n+            into a Rust program. This capability, especially the signature for the\n             annotated function, is subject to change.\n \n * `struct_inherit` - Allows using struct inheritance, which is barely"}, {"sha": "e3de8eb30be916336b8739545a01783d6bceec18", "filename": "src/doc/trpl/closures.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Fdoc%2Ftrpl%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Fdoc%2Ftrpl%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fclosures.md?ref=b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "patch": "@@ -205,11 +205,11 @@ you tons of control over what your code does, and closures are no different.\n \n Rust's implementation of closures is a bit different than other languages. They\n are effectively syntax sugar for traits. You'll want to make sure to have read\n-the [traits chapter][traits] before this one, as well as the chapter on [static\n-and dynamic dispatch][dispatch], which talks about trait objects.\n+the [traits chapter][traits] before this one, as well as the chapter on [trait\n+objects][trait-objects].\n \n [traits]: traits.html\n-[dispatch]: static-and-dynamic-dispatch.html\n+[trait-objects]: trait-objects.html\n \n Got all that? Good.\n "}, {"sha": "575dfc7417a7f7ec6f3139951b5281a183191c93", "filename": "src/doc/trpl/concurrency.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconcurrency.md?ref=b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "patch": "@@ -176,8 +176,8 @@ Here's the error:\n                   ^~~~~~~~~~~~~\n ```\n \n-You see, [`Mutex`](std/sync/struct.Mutex.html) has a\n-[`lock`](http://doc.rust-lang.org/nightly/std/sync/struct.Mutex.html#method.lock)\n+You see, [`Mutex`](../std/sync/struct.Mutex.html) has a\n+[`lock`](../std/sync/struct.Mutex.html#method.lock)\n method which has this signature:\n \n ```ignore"}, {"sha": "732521a0c6064d99ee74d9a5894410c64bf2553e", "filename": "src/doc/trpl/documentation.md", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdocumentation.md?ref=b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "patch": "@@ -380,7 +380,10 @@ $ rustdoc --test path/to/my/crate/root.rs\n $ cargo test\n ```\n \n-That's right, `cargo test` tests embedded documentation too.\n+That's right, `cargo test` tests embedded documentation too. However, \n+`cargo test` will not test binary crates, only library ones. This is\n+due to the way `rustdoc` works: it links against the library to be tested,\n+but with a binary, there\u2019s nothing to link to.\n \n There are a few more annotations that are useful to help `rustdoc` do the right\n thing when testing your code:\n@@ -560,3 +563,13 @@ This sets a few different options, with a logo, favicon, and a root URL.\n - `--html-before-content FILE`: includes the contents of FILE directly after\n   `<body>`, before the rendered content (including the search bar).\n - `--html-after-content FILE`: includes the contents of FILE after all the rendered content.\n+\n+## Security note\n+\n+The Markdown in documentation comments is placed without processing into\n+the final webpage. Be careful with literal HTML:\n+\n+```rust\n+/// <script>alert(document.cookie)</script>\n+# fn foo() {}\n+```"}, {"sha": "e261eb01dba3e90faf7371c931f1c17d056ab549", "filename": "src/doc/trpl/error-handling.md", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ferror-handling.md?ref=b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "patch": "@@ -20,18 +20,18 @@ panic. A *failure* is an error that can be recovered from in some way. A\n *panic* is an error that cannot be recovered from.\n \n What do we mean by \"recover\"? Well, in most cases, the possibility of an error\n-is expected. For example, consider the `from_str` function:\n+is expected. For example, consider the `parse` function:\n \n-```{rust,ignore}\n-from_str(\"5\");\n+```ignore\n+\"5\".parse();\n ```\n \n-This function takes a string argument and converts it into another type. But\n-because it's a string, you can't be sure that the conversion actually works.\n-For example, what should this convert to?\n+This method converts a string into another type. But because it's a string, you\n+can't be sure that the conversion actually works. For example, what should this\n+convert to?\n \n-```{rust,ignore}\n-from_str(\"hello5world\");\n+```ignore\n+\"hello5world\".parse();\n ```\n \n This won't work. So we know that this function will only work properly for some\n@@ -40,7 +40,8 @@ inputs. It's expected behavior. We call this kind of error a *failure*.\n On the other hand, sometimes, there are errors that are unexpected, or which\n we cannot recover from. A classic example is an `assert!`:\n \n-```{rust,ignore}\n+```rust\n+# let x = 5;\n assert!(x == 5);\n ```\n \n@@ -119,17 +120,19 @@ Rust calls these sorts of errors *panics*.\n # Handling errors with `Option` and `Result`\n \n The simplest way to indicate that a function may fail is to use the `Option<T>`\n-type. Remember our `from_str()` example? Here's its type signature:\n+type. For example, the `find` method on strings attempts to find a pattern\n+in a string, and returns an `Option`:\n \n-```{rust,ignore}\n-pub fn from_str<A: FromStr>(s: &str) -> Option<A>\n+```rust\n+let s = \"foo\";\n+\n+assert_eq!(s.find('f'), Some(0));\n+assert_eq!(s.find('z'), None);\n ```\n \n-`from_str()` returns an `Option<A>`. If the conversion succeeds, it will return\n-`Some(value)`, and if it fails, it will return `None`.\n \n This is appropriate for the simplest of cases, but doesn't give us a lot of\n-information in the failure case. What if we wanted to know _why_ the conversion\n+information in the failure case. What if we wanted to know _why_ the function\n failed? For this, we can use the `Result<T, E>` type. It looks like this:\n \n ```rust\n@@ -297,5 +300,5 @@ It's worth noting that you can only use `try!` from a function that returns a\n `Result`, which means that you cannot use `try!` inside of `main()`, because\n `main()` doesn't return anything.\n \n-`try!` makes use of [`From<Error>`](../std/convert/trait.From.hml) to determine\n+`try!` makes use of [`From<Error>`](../std/convert/trait.From.html) to determine\n what to return in the error case."}, {"sha": "58d9e57dc51cc21d7ffeb0ff96570bac336ff1f1", "filename": "src/doc/trpl/installing-rust.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Finstalling-rust.md?ref=b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "patch": "@@ -91,9 +91,9 @@ If not, there are a number of places where you can get help. The easiest is\n [Mibbit][mibbit]. Click that link, and you'll be chatting with other Rustaceans\n (a silly nickname we call ourselves), and we can help you out. Other great\n resources include [the user\u2019s forum][users], and\n-[Stack Overflow][stack overflow].\n+[Stack Overflow][stackoverflow].\n \n [irc]: irc://irc.mozilla.org/#rust\n [mibbit]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust\n [users]: http://users.rust-lang.org/ \n-[stack overflow]: http://stackoverflow.com/questions/tagged/rust\n+[stackoverflow]: http://stackoverflow.com/questions/tagged/rust"}, {"sha": "713814d9147a7a5cdf0c5d884eef437ac2af4658", "filename": "src/doc/trpl/macros.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Fdoc%2Ftrpl%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Fdoc%2Ftrpl%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmacros.md?ref=b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "patch": "@@ -33,7 +33,7 @@ mind.\n You may have seen the `vec!` macro, used to initialize a [vector][] with any\n number of elements.\n \n-[vector]: arrays-vectors-and-slices.html\n+[vector]: vectors.html\n \n ```rust\n let x: Vec<u32> = vec![1, 2, 3];"}, {"sha": "811080cd50987ea542df4a2e516119801c0358ff", "filename": "src/doc/trpl/primitive-types.md", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Fdoc%2Ftrpl%2Fprimitive-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Fdoc%2Ftrpl%2Fprimitive-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fprimitive-types.md?ref=b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "patch": "@@ -216,6 +216,18 @@ In systems programming languages, strings are a bit more complex than in other\n languages. For now, just read `&str` as a *string slice*, and we\u2019ll learn more\n soon.\n \n+You can assign one tuple into another, if they have the same contained types\n+and [arity]. Tuples have the same arity when they have the same length.\n+\n+[arity]: glossary.html#arity\n+\n+```rust\n+let mut x = (1, 2); // x: (i32, i32)\n+let y = (2, 3); // y: (i32, i32)\n+\n+x = y;\n+```\n+\n You can access the fields in a tuple through a *destructuring let*. Here\u2019s\n an example:\n \n@@ -235,20 +247,24 @@ or \"breaks up,\" the tuple, and assigns the bits to three bindings.\n \n This pattern is very powerful, and we\u2019ll see it repeated more later.\n \n-There are also a few things you can do with a tuple as a whole, without\n-destructuring. You can assign one tuple into another, if they have the same\n-contained types and [arity]. Tuples have the same arity when they have the same\n-length.\n+## Tuple Indexing\n+\n+You can also access fields of a tuple with indexing syntax:\n \n-[arity]: glossary.html#arity\n \n ```rust\n-let mut x = (1, 2); // x: (i32, i32)\n-let y = (2, 3); // y: (i32, i32)\n+let tuple = (1, 2, 3);\n \n-x = y;\n+let x = tuple.0;\n+let y = tuple.1;\n+let z = tuple.2;\n+\n+println!(\"x is {}\", x);\n ```\n \n+Like array indexing, it starts at zero, but unlike array indexing, it uses a\n+`.`, rather than `[]`s.\n+\n You can find more documentation for tuples [in the standard library\n documentation][tuple].\n "}, {"sha": "16ee38898803fd0bb0194c9fdf61f80ca570638b", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "patch": "@@ -179,8 +179,8 @@ pub trait Iterator {\n \n     /// Creates an iterator that iterates over both this and the specified\n     /// iterators simultaneously, yielding the two elements as pairs. When\n-    /// either iterator returns None, all further invocations of next() will\n-    /// return None.\n+    /// either iterator returns `None`, all further invocations of next() will\n+    /// return `None`.\n     ///\n     /// # Examples\n     ///\n@@ -254,7 +254,7 @@ pub trait Iterator {\n     }\n \n     /// Creates an iterator that both filters and maps elements.\n-    /// If the specified function returns None, the element is skipped.\n+    /// If the specified function returns `None`, the element is skipped.\n     /// Otherwise the option is unwrapped and the new value is yielded.\n     ///\n     /// # Examples\n@@ -403,7 +403,7 @@ pub trait Iterator {\n     /// Creates a new iterator that behaves in a similar fashion to fold.\n     /// There is a state which is passed between each iteration and can be\n     /// mutated as necessary. The yielded values from the closure are yielded\n-    /// from the Scan instance when not None.\n+    /// from the Scan instance when not `None`.\n     ///\n     /// # Examples\n     ///\n@@ -701,7 +701,7 @@ pub trait Iterator {\n \n     /// Returns the index of the last element satisfying the specified predicate\n     ///\n-    /// If no element matches, None is returned.\n+    /// If no element matches, `None` is returned.\n     ///\n     /// Does not consume the iterator *before* the first found element.\n     ///"}, {"sha": "685b3e5c546ddfb097edbf553ed2ae9e0e14a473", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "patch": "@@ -71,11 +71,11 @@ impl<T> Clone for Slice<T> {\n /// The representation of a trait object like `&SomeTrait`.\n ///\n /// This struct has the same layout as types like `&SomeTrait` and\n-/// `Box<AnotherTrait>`. The [Static and Dynamic Dispatch chapter of the\n+/// `Box<AnotherTrait>`. The [Trait Objects chapter of the\n /// Book][moreinfo] contains more details about the precise nature of\n /// these internals.\n ///\n-/// [moreinfo]: ../../book/static-and-dynamic-dispatch.html#representation\n+/// [moreinfo]: ../../book/trait-objects.html#representation\n ///\n /// `TraitObject` is guaranteed to match layouts, but it is not the\n /// type of trait objects (e.g. the fields are not directly accessible"}, {"sha": "26bc653b26fa44ecae8de8cf98bd0bc698bf74a2", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "patch": "@@ -86,12 +86,12 @@\n //! useful value.\n //!\n //! Consider the `write_all` method defined for I/O types\n-//! by the [`Write`](../io/trait.Write.html) trait:\n+//! by the [`Write`](../../std/io/trait.Write.html) trait:\n //!\n //! ```\n //! use std::io;\n //!\n-//! trait Writer {\n+//! trait Write {\n //!     fn write_all(&mut self, bytes: &[u8]) -> Result<(), io::Error>;\n //! }\n //! ```"}, {"sha": "e1eb8d74186952fd9f1aabd11e5db0db2e4a9946", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 76, "deletions": 6, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "patch": "@@ -112,6 +112,46 @@ reference when using guards or refactor the entire expression, perhaps by\n putting the condition inside the body of the arm.\n \"##,\n \n+E0152: r##\"\n+Lang items are already implemented in the standard library. Unless you are\n+writing a free-standing application (e.g. a kernel), you do not need to provide\n+them yourself.\n+\n+You can build a free-standing crate by adding `#![no_std]` to the crate\n+attributes:\n+\n+#![feature(no_std)]\n+#![no_std]\n+\n+See also https://doc.rust-lang.org/book/no-stdlib.html\n+\"##,\n+\n+E0158: r##\"\n+`const` and `static` mean different things. A `const` is a compile-time\n+constant, an alias for a literal value. This property means you can match it\n+directly within a pattern.\n+\n+The `static` keyword, on the other hand, guarantees a fixed location in memory.\n+This does not always mean that the value is constant. For example, a global\n+mutex can be declared `static` as well.\n+\n+If you want to match against a `static`, consider using a guard instead:\n+\n+static FORTY_TWO: i32 = 42;\n+match Some(42) {\n+    Some(x) if x == FORTY_TWO => ...\n+    ...\n+}\n+\"##,\n+\n+E0161: r##\"\n+In Rust, you can only move a value when its size is known at compile time.\n+\n+To work around this restriction, consider \"hiding\" the value behind a reference:\n+either `&x` or `&mut x`. Since a reference has a fixed size, this lets you move\n+it around as usual.\n+\"##,\n+\n E0162: r##\"\n An if-let pattern attempts to match the pattern, and enters the body if the\n match was succesful. If the match is irrefutable (when it cannot fail to match),\n@@ -151,6 +191,32 @@ loop {\n }\n \"##,\n \n+E0170: r##\"\n+Enum variants are qualified by default. For example, given this type:\n+\n+enum Method {\n+    GET,\n+    POST\n+}\n+\n+you would match it using:\n+\n+match m {\n+    Method::GET => ...\n+    Method::POST => ...\n+}\n+\n+If you don't qualify the names, the code will bind new variables named \"GET\" and\n+\"POST\" instead. This behavior is likely not what you want, so rustc warns when\n+that happens.\n+\n+Qualified names are good practice, and most code works well with them. But if\n+you prefer them unqualified, you can import the variants into scope:\n+\n+use Method::*;\n+enum Method { GET, POST }\n+\"##,\n+\n E0297: r##\"\n Patterns used to bind names must be irrefutable. That is, they must guarantee\n that a name will be extracted in all cases. Instead of pattern matching the\n@@ -227,6 +293,16 @@ match Some(5) {\n }\n \n See also https://github.com/rust-lang/rust/issues/14587\n+\"##,\n+\n+E0306: r##\"\n+In an array literal `[x; N]`, `N` is the number of elements in the array. This\n+number cannot be negative.\n+\"##,\n+\n+E0307: r##\"\n+The length of an array is part of its type. For this reason, this length must be\n+a compile-time constant.\n \"##\n \n }\n@@ -256,10 +332,6 @@ register_diagnostics! {\n     E0137,\n     E0138,\n     E0139,\n-    E0152,\n-    E0158,\n-    E0161,\n-    E0170,\n     E0261, // use of undeclared lifetime name\n     E0262, // illegal lifetime parameter name\n     E0263, // lifetime name declared twice in same scope\n@@ -291,8 +363,6 @@ register_diagnostics! {\n     E0300, // unexpanded macro\n     E0304, // expected signed integer constant\n     E0305, // expected constant\n-    E0306, // expected positive integer for repeat count\n-    E0307, // expected constant integer for repeat count\n     E0308,\n     E0309, // thing may not live long enough\n     E0310, // thing may not live long enough"}, {"sha": "eab87dc846d64153aac7584a676a3ac229546097", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "patch": "@@ -437,7 +437,7 @@ pub struct MethodObject<'tcx> {\n     pub vtable_index: usize,\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n pub struct MethodCallee<'tcx> {\n     pub origin: MethodOrigin<'tcx>,\n     pub ty: Ty<'tcx>,"}, {"sha": "4a85e1893f0a136e3dc2fb4de39eacdbb006723e", "filename": "src/librustc/plugin/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Flibrustc%2Fplugin%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Flibrustc%2Fplugin%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fmod.rs?ref=b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "patch": "@@ -47,7 +47,7 @@\n //! #![plugin(myplugin)]\n //! ```\n //!\n-//! See the [Plugins Chapter](../../book/plugins.html) of the book\n+//! See the [Plugins Chapter](../../book/compiler-plugins.html) of the book\n //! for more examples.\n \n pub use self::registry::Registry;"}, {"sha": "250ec34edf7075085f3a3826e1c1c6f94d30b94b", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "patch": "@@ -37,7 +37,7 @@ pub use self::ExternalLocation::*;\n use std::ascii::OwnedAsciiExt;\n use std::cell::RefCell;\n use std::cmp::Ordering;\n-use std::collections::{HashMap, HashSet};\n+use std::collections::{BTreeMap, HashMap, HashSet};\n use std::default::Default;\n use std::fmt;\n use std::fs::{self, File};\n@@ -1298,8 +1298,9 @@ impl Context {\n         }\n     }\n \n-    fn build_sidebar_items(&self, m: &clean::Module) -> HashMap<String, Vec<NameDoc>> {\n-        let mut map = HashMap::new();\n+    fn build_sidebar_items(&self, m: &clean::Module) -> BTreeMap<String, Vec<NameDoc>> {\n+        // BTreeMap instead of HashMap to get a sorted output\n+        let mut map = BTreeMap::new();\n         for item in &m.items {\n             if self.ignore_private_item(item) { continue }\n "}, {"sha": "9b93066f9fb21c266708494edcdbffb8c11e41d7", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "patch": "@@ -1469,7 +1469,6 @@ impl<'a, K, V> ExactSizeIterator for Drain<'a, K, V> {\n }\n \n impl<'a, K, V> Entry<'a, K, V> {\n-    /// Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant.\n     #[unstable(feature = \"std_misc\",\n                reason = \"will soon be replaced by or_insert\")]\n     #[deprecated(since = \"1.0\","}, {"sha": "d0975c76e9351ad10d5cd9fba0be61d33d3f2ae3", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "patch": "@@ -10,7 +10,7 @@\n \n //! Feature gating\n //!\n-//! This modules implements the gating necessary for preventing certain compiler\n+//! This module implements the gating necessary for preventing certain compiler\n //! features from being used by default. This module will crawl a pre-expanded\n //! AST to ensure that there are no features which are used that are not\n //! enabled."}, {"sha": "00d9b7f4ea6875daba352124b7daa601d6e8a62c", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7fb57529aded92c4f470568e6b5ea7a5a28f6a4/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=b7fb57529aded92c4f470568e6b5ea7a5a28f6a4", "patch": "@@ -80,7 +80,8 @@ impl<'a> ParserObsoleteMethods for parser::Parser<'a> {\n             self.span_warn(sp, &format!(\"obsolete syntax: {}\", kind_str));\n         }\n \n-        if !self.obsolete_set.contains(&kind) {\n+        if !self.obsolete_set.contains(&kind) &&\n+            (error || self.sess.span_diagnostic.handler().can_emit_warnings) {\n             self.sess\n                 .span_diagnostic\n                 .handler()"}]}