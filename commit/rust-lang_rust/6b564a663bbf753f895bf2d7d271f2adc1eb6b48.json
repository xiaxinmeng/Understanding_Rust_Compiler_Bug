{"sha": "6b564a663bbf753f895bf2d7d271f2adc1eb6b48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNTY0YTY2M2JiZjc1M2Y4OTViZjJkN2QyNzFmMmFkYzFlYjZiNDg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-29T20:13:53Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-29T20:13:53Z"}, "message": "Rollup merge of #27232 - Dangthrimble:master, r=steveklabnik\n\nAdded definitions for 'Expression', 'Expression-Oriented Language' and 'Statement' to glossary.\r\nSorted the definitions alphabetically.\r\n\r\nr? @steveklabnik", "tree": {"sha": "ac29da6d9846b67b2b3d821d0f906f4eed7cc679", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac29da6d9846b67b2b3d821d0f906f4eed7cc679"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b564a663bbf753f895bf2d7d271f2adc1eb6b48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b564a663bbf753f895bf2d7d271f2adc1eb6b48", "html_url": "https://github.com/rust-lang/rust/commit/6b564a663bbf753f895bf2d7d271f2adc1eb6b48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b564a663bbf753f895bf2d7d271f2adc1eb6b48/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56bb9ed8054c4774c52c8799c78787154ac4cd84", "url": "https://api.github.com/repos/rust-lang/rust/commits/56bb9ed8054c4774c52c8799c78787154ac4cd84", "html_url": "https://github.com/rust-lang/rust/commit/56bb9ed8054c4774c52c8799c78787154ac4cd84"}, {"sha": "8fee56777c2b88509e81e5e71773e1b588fee614", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fee56777c2b88509e81e5e71773e1b588fee614", "html_url": "https://github.com/rust-lang/rust/commit/8fee56777c2b88509e81e5e71773e1b588fee614"}], "stats": {"total": 69, "additions": 49, "deletions": 20}, "files": [{"sha": "307aef8018066827593cb2b2c542dda63e26e069", "filename": "src/doc/trpl/glossary.md", "status": "modified", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6b564a663bbf753f895bf2d7d271f2adc1eb6b48/src%2Fdoc%2Ftrpl%2Fglossary.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b564a663bbf753f895bf2d7d271f2adc1eb6b48/src%2Fdoc%2Ftrpl%2Fglossary.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fglossary.md?ref=6b564a663bbf753f895bf2d7d271f2adc1eb6b48", "patch": "@@ -3,24 +3,12 @@\n Not every Rustacean has a background in systems programming, nor in computer\n science, so we've added explanations of terms that might be unfamiliar.\n \n-### Arity\n-\n-Arity refers to the number of arguments a function or operation takes.\n-\n-```rust\n-let x = (2, 3);\n-let y = (4, 6);\n-let z = (8, 2, 6);\n-```\n-\n-In the example above `x` and `y` have arity 2. `z` has arity 3.\n-\n ### Abstract Syntax Tree\n \n-When a compiler is compiling your program, it does a number of different\n-things. One of the things that it does is turn the text of your program into an\n-\u2018abstract syntax tree\u2019, or \u2018AST\u2019. This tree is a representation of the\n-structure of your program. For example, `2 + 3` can be turned into a tree:\n+When a compiler is compiling your program, it does a number of different things.\n+One of the things that it does is turn the text of your program into an\n+\u2018abstract syntax tree\u2019, or \u2018AST\u2019. This tree is a representation of the structure\n+of your program. For example, `2 + 3` can be turned into a tree:\n \n ```text\n   +\n@@ -37,3 +25,41 @@ And `2 + (3 * 4)` would look like this:\n    / \\\n   3   4\n ```\n+\n+### Arity\n+\n+Arity refers to the number of arguments a function or operation takes.\n+\n+```rust\n+let x = (2, 3);\n+let y = (4, 6);\n+let z = (8, 2, 6);\n+```\n+\n+In the example above `x` and `y` have arity 2. `z` has arity 3.\n+\n+### Expression\n+\n+In computer programming, an expression is a combination of values, constants,\n+variables, operators and functions that evaluate to a single value. For example,\n+`2 + (3 * 4)` is an expression that returns the value 14. It is worth noting\n+that expressions can have side-effects. For example, a function included in an\n+expression might perform actions other than simply returning a value.\n+\n+### Expression-Oriented Language\n+\n+In early programming languages, [expressions][expression] and\n+[statements][statement] were two separate syntactic categories: expressions had\n+a value and statements did things. However, later languages blurred this\n+distinction, allowing expressions to do things and statements to have a value.\n+In an expression-oriented language, (nearly) every statement is an expression\n+and therefore returns a value. Consequently, these expression statements can\n+themselves form part of larger expressions.\n+\n+[expression]: glossary.html#expression\n+[statement]: glossary.html#statement\n+\n+### Statement\n+\n+In computer programming, a statement is the smallest standalone element of a\n+programming language that commands a computer to perform an action."}, {"sha": "cd4326a28d80967f41b85cc6b058b8a62e71ee93", "filename": "src/doc/trpl/hello-world.md", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6b564a663bbf753f895bf2d7d271f2adc1eb6b48/src%2Fdoc%2Ftrpl%2Fhello-world.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b564a663bbf753f895bf2d7d271f2adc1eb6b48/src%2Fdoc%2Ftrpl%2Fhello-world.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-world.md?ref=6b564a663bbf753f895bf2d7d271f2adc1eb6b48", "patch": "@@ -111,10 +111,13 @@ string to the screen. Easy enough!\n \n [allocation]: the-stack-and-the-heap.html\n \n-Finally, the line ends with a semicolon (`;`). Rust is an \u2018expression oriented\u2019\n-language, which means that most things are expressions, rather than statements.\n-The `;` is used to indicate that this expression is over, and the next one is\n-ready to begin. Most lines of Rust code end with a `;`.\n+Finally, the line ends with a semicolon (`;`). Rust is an [\u2018expression oriented\u2019\n+language][expression-oriented language], which means that most things are\n+expressions, rather than statements. The `;` is used to indicate that this\n+expression is over, and the next one is ready to begin. Most lines of Rust code\n+end with a `;`.\n+\n+[expression-oriented language]: glossary.html#expression-oriented-language\n \n Finally, actually compiling and running our program. We can compile with our\n compiler, `rustc`, by passing it the name of our source file:"}]}