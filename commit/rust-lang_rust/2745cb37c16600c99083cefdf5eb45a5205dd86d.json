{"sha": "2745cb37c16600c99083cefdf5eb45a5205dd86d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NDVjYjM3YzE2NjAwYzk5MDgzY2VmZGY1ZWI0NWE1MjA1ZGQ4NmQ=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-06-19T14:29:38Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-06-19T19:46:47Z"}, "message": "Use correct substs for super trait assoc types\n\nWhen referring to an associated type of a super trait, we used the substs of the\nsubtrait. That led to the #4931 crash if the subtrait had less parameters, but\nit could also lead to other incorrectness if just the order was different.\n\nFixes #4931.", "tree": {"sha": "518fe5b3895e021e1d35e90d6e7d71abfc36692a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/518fe5b3895e021e1d35e90d6e7d71abfc36692a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2745cb37c16600c99083cefdf5eb45a5205dd86d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2745cb37c16600c99083cefdf5eb45a5205dd86d", "html_url": "https://github.com/rust-lang/rust/commit/2745cb37c16600c99083cefdf5eb45a5205dd86d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2745cb37c16600c99083cefdf5eb45a5205dd86d/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6654055308515cb330f23942f347de5605f69be1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6654055308515cb330f23942f347de5605f69be1", "html_url": "https://github.com/rust-lang/rust/commit/6654055308515cb330f23942f347de5605f69be1"}], "stats": {"total": 64, "additions": 47, "deletions": 17}, "files": [{"sha": "7a7fcb0aba64e47faf7db541558f90a5647e1338", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2745cb37c16600c99083cefdf5eb45a5205dd86d/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2745cb37c16600c99083cefdf5eb45a5205dd86d/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=2745cb37c16600c99083cefdf5eb45a5205dd86d", "patch": "@@ -337,17 +337,17 @@ impl Ty {\n                     TraitRef::from_resolved_path(ctx, trait_, resolved_segment, self_ty);\n                 let ty = if remaining_segments.len() == 1 {\n                     let segment = remaining_segments.first().unwrap();\n-                    let associated_ty = associated_type_by_name_including_super_traits(\n-                        ctx.db.upcast(),\n-                        trait_ref.trait_,\n+                    let found = associated_type_by_name_including_super_traits(\n+                        ctx.db,\n+                        trait_ref.clone(),\n                         &segment.name,\n                     );\n-                    match associated_ty {\n-                        Some(associated_ty) => {\n+                    match found {\n+                        Some((super_trait_ref, associated_ty)) => {\n                             // FIXME handle type parameters on the segment\n                             Ty::Projection(ProjectionTy {\n                                 associated_ty,\n-                                parameters: trait_ref.substs,\n+                                parameters: super_trait_ref.substs,\n                             })\n                         }\n                         None => {\n@@ -706,17 +706,17 @@ fn assoc_type_bindings_from_type_bound<'a>(\n         .flat_map(|segment| segment.args_and_bindings.into_iter())\n         .flat_map(|args_and_bindings| args_and_bindings.bindings.iter())\n         .flat_map(move |binding| {\n-            let associated_ty = associated_type_by_name_including_super_traits(\n-                ctx.db.upcast(),\n-                trait_ref.trait_,\n+            let found = associated_type_by_name_including_super_traits(\n+                ctx.db,\n+                trait_ref.clone(),\n                 &binding.name,\n             );\n-            let associated_ty = match associated_ty {\n+            let (super_trait_ref, associated_ty) = match found {\n                 None => return SmallVec::<[GenericPredicate; 1]>::new(),\n                 Some(t) => t,\n             };\n             let projection_ty =\n-                ProjectionTy { associated_ty, parameters: trait_ref.substs.clone() };\n+                ProjectionTy { associated_ty, parameters: super_trait_ref.substs.clone() };\n             let mut preds = SmallVec::with_capacity(\n                 binding.type_ref.as_ref().map_or(0, |_| 1) + binding.bounds.len(),\n             );"}, {"sha": "8dc5603b747d7f1d77b7868b7923094a9bdf92a3", "filename": "crates/ra_hir_ty/src/tests/regression.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2745cb37c16600c99083cefdf5eb45a5205dd86d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2745cb37c16600c99083cefdf5eb45a5205dd86d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=2745cb37c16600c99083cefdf5eb45a5205dd86d", "patch": "@@ -665,3 +665,31 @@ impl Foo<i64> {\n     \"###\n     );\n }\n+\n+#[test]\n+fn issue_4931() {\n+    assert_snapshot!(\n+        infer(r#\"\n+trait Div<T> {\n+    type Output;\n+}\n+\n+trait CheckedDiv: Div<()> {}\n+\n+trait PrimInt: CheckedDiv<Output = ()> {\n+    fn pow(self);\n+}\n+\n+fn check<T: PrimInt>(i: T) {\n+    i.pow();\n+}\n+\"#),\n+        @r###\"\n+    118..122 'self': Self\n+    149..150 'i': T\n+    155..171 '{     ...w(); }': ()\n+    161..162 'i': T\n+    161..168 'i.pow()': ()\n+    \"###\n+    );\n+}"}, {"sha": "c45820ff059bfd5ebfca3279b614321e3a59e271", "filename": "crates/ra_hir_ty/src/utils.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2745cb37c16600c99083cefdf5eb45a5205dd86d/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2745cb37c16600c99083cefdf5eb45a5205dd86d/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Futils.rs?ref=2745cb37c16600c99083cefdf5eb45a5205dd86d", "patch": "@@ -143,13 +143,14 @@ pub(super) fn find_super_trait_path(\n }\n \n pub(super) fn associated_type_by_name_including_super_traits(\n-    db: &dyn DefDatabase,\n-    trait_: TraitId,\n+    db: &dyn HirDatabase,\n+    trait_ref: TraitRef,\n     name: &Name,\n-) -> Option<TypeAliasId> {\n-    all_super_traits(db, trait_)\n-        .into_iter()\n-        .find_map(|t| db.trait_data(t).associated_type_by_name(name))\n+) -> Option<(TraitRef, TypeAliasId)> {\n+    all_super_trait_refs(db, trait_ref).into_iter().find_map(|t| {\n+        let assoc_type = db.trait_data(t.trait_).associated_type_by_name(name)?;\n+        Some((t, assoc_type))\n+    })\n }\n \n pub(super) fn variant_data(db: &dyn DefDatabase, var: VariantId) -> Arc<VariantData> {\n@@ -176,6 +177,7 @@ pub(crate) fn generics(db: &dyn DefDatabase, def: GenericDefId) -> Generics {\n     Generics { def, params: db.generic_params(def), parent_generics }\n }\n \n+#[derive(Debug)]\n pub(crate) struct Generics {\n     def: GenericDefId,\n     pub(crate) params: Arc<GenericParams>,"}]}