{"sha": "0c9510ac389dc796e183e4125dbdd3a2e51b1f50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjOTUxMGFjMzg5ZGM3OTZlMTgzZTQxMjVkYmRkM2EyZTUxYjFmNTA=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-06-04T05:34:51Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-06-04T07:18:48Z"}, "message": "Use ABI alignment, not \"preferred\" alignment, to unify monomorphizations.\n\nSee the comment in the added test case for details.", "tree": {"sha": "e13f9b1071d0c6a2fbebe162cc3b6ac93724e335", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e13f9b1071d0c6a2fbebe162cc3b6ac93724e335"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c9510ac389dc796e183e4125dbdd3a2e51b1f50", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c9510ac389dc796e183e4125dbdd3a2e51b1f50", "html_url": "https://github.com/rust-lang/rust/commit/0c9510ac389dc796e183e4125dbdd3a2e51b1f50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c9510ac389dc796e183e4125dbdd3a2e51b1f50/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "133d45171564c8b7de14523c9f3aa87140b9f043", "url": "https://api.github.com/repos/rust-lang/rust/commits/133d45171564c8b7de14523c9f3aa87140b9f043", "html_url": "https://github.com/rust-lang/rust/commit/133d45171564c8b7de14523c9f3aa87140b9f043"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "062f72b6feba63b87fcf99fa2e5ffca72c26f0ba", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c9510ac389dc796e183e4125dbdd3a2e51b1f50/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c9510ac389dc796e183e4125dbdd3a2e51b1f50/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=0c9510ac389dc796e183e4125dbdd3a2e51b1f50", "patch": "@@ -30,7 +30,7 @@ use middle::trans::type_use;\n use middle::ty;\n use middle::ty::{FnSig};\n use middle::typeck;\n-use util::ppaux::Repr;\n+use util::ppaux::{Repr,ty_to_str};\n \n use core::vec;\n use syntax::ast;\n@@ -379,10 +379,14 @@ pub fn make_mono_id(ccx: @CrateContext,\n                         {\n                             let llty = type_of::type_of(ccx, subst);\n                             let size = machine::llbitsize_of_real(ccx, llty);\n-                            let align = machine::llalign_of_pref(ccx, llty);\n+                            let align = machine::llalign_of_min(ccx, llty);\n                             let mode = datum::appropriate_mode(subst);\n                             let data_class = mono_data_classify(subst);\n \n+                            debug!(\"make_mono_id: type %s -> size %u align %u mode %? class %?\",\n+                                  ty_to_str(ccx.tcx, subst),\n+                                  size, align, mode, data_class);\n+\n                             // Special value for nil to prevent problems\n                             // with undef return pointers.\n                             if size <= 8u && ty::type_is_nil(subst) {"}, {"sha": "12c882a87089d138d451c1fd515e873a1d8ac978", "filename": "src/test/run-pass/monomorphize-abi-alignment.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0c9510ac389dc796e183e4125dbdd3a2e51b1f50/src%2Ftest%2Frun-pass%2Fmonomorphize-abi-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c9510ac389dc796e183e4125dbdd3a2e51b1f50/src%2Ftest%2Frun-pass%2Fmonomorphize-abi-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphize-abi-alignment.rs?ref=0c9510ac389dc796e183e4125dbdd3a2e51b1f50", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*!\n+ * On x86_64-linux-gnu and possibly other platforms, structs get 8-byte \"preferred\" alignment,\n+ * but their \"ABI\" alignment (i.e., what actually matters for data layout) is the largest alignment\n+ * of any field.  (Also, u64 has 8-byte ABI alignment; this is not always true).\n+ *\n+ * On such platforms, if monomorphize uses the \"preferred\" alignment, then it will unify\n+ * `A` and `B`, even though `S<A>` and `S<B>` have the field `t` at different offsets,\n+ * and apply the wrong instance of the method `unwrap`.\n+ */\n+\n+struct S<T> { i:u8, t:T }\n+impl<T> S<T> { fn unwrap(self) -> T { self.t } }\n+struct A((u32, u32));\n+struct B(u64);\n+\n+pub fn main() {\n+\tstatic Ca: S<A> = S { i: 0, t: A((13, 104)) };\n+\tstatic Cb: S<B> = S { i: 0, t: B(31337) };\n+\tassert_eq!(*(Ca.unwrap()), (13, 104));\n+\tassert_eq!(*(Cb.unwrap()), 31337);\n+}"}]}