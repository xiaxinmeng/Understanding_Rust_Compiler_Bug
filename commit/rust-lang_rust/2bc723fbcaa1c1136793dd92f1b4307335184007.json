{"sha": "2bc723fbcaa1c1136793dd92f1b4307335184007", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYzcyM2ZiY2FhMWMxMTM2NzkzZGQ5MmYxYjQzMDczMzUxODQwMDc=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-04T19:15:31Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-07T22:03:57Z"}, "message": "Change opaque type map to be a `VecMap`", "tree": {"sha": "c1348971c411ef4fb391434d02e384e8ef61d484", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1348971c411ef4fb391434d02e384e8ef61d484"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bc723fbcaa1c1136793dd92f1b4307335184007", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmC+l80ACgkQgTGiTgx5\n76/f1xAAntdvMVfn37on4tCkAbWzmNrHomVxOvt1g/4NU06DKzIzC0+G7yfMH9Nl\nw+qtZGSyv6lvnAYOHdsR8gyFEdiNgn+axVGCnhhl1cTIe73uH3Bi2/xFxzETPcQF\nenZ7QQGA5ECQzDKkKcuksCC8R/0zwC+jpooqFEgozhf+4z5SRSwLCxj8o5O1JGNY\nWkbFrWm6gHhTVYn9KKe/i2Fa7iAyjTiCsKrdrtjy+U161T+dHI1wq4e+zVJJZNlB\nGT9eWQ5OARTYhMPR0T5lyTf3DIWGQIxcV294hoteMsZgJrvuTEfxlViIF24T/daf\nW05BymHc5PfDCtJUvXEZMoHdYCLtB7f1kh5DlUhkugWz5wj3jbY3QxrDs9eGW96/\nla3P/vKc9a0kV6ChoPZAGL71TuyVmsAZYei7owjE66UlP8olZ6cG3SaMHiJJeJNQ\nCgiVQjwg2UgOVJVot35BV2LOpzVvu5W6K3jfbvBiYPvwWdbZykB8Sz1Kh1XYbrj3\nqTgnhIoMfOfIH+OeJX3UW0dIXUwKV4q/FCKBphkjHOjcRRHKjAwg/X1BTMOsQrSL\nTU99LFl45J1ILQWncCxUnG95kglHB2kSSLmWEo7jdzeT2R3TnQMNLiknn+2fg96K\nRzi+vIQIxKJ4uS5ZUEKgoGqcIuvOI3UcuDXAGURA5DYeQzm/N6Y=\n=L8YL\n-----END PGP SIGNATURE-----", "payload": "tree c1348971c411ef4fb391434d02e384e8ef61d484\nparent aa7024b0c7034c75d36ebe9048d12480c8d0bae2\nauthor Santiago Pastorino <spastorino@gmail.com> 1622834131 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1623103437 -0300\n\nChange opaque type map to be a `VecMap`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc723fbcaa1c1136793dd92f1b4307335184007", "html_url": "https://github.com/rust-lang/rust/commit/2bc723fbcaa1c1136793dd92f1b4307335184007", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bc723fbcaa1c1136793dd92f1b4307335184007/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa7024b0c7034c75d36ebe9048d12480c8d0bae2", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa7024b0c7034c75d36ebe9048d12480c8d0bae2", "html_url": "https://github.com/rust-lang/rust/commit/aa7024b0c7034c75d36ebe9048d12480c8d0bae2"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "4b9569b74b9047fae4a1edcf62c4efe91f5f02f1", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc723fbcaa1c1136793dd92f1b4307335184007/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc723fbcaa1c1136793dd92f1b4307335184007/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=2bc723fbcaa1c1136793dd92f1b4307335184007", "patch": "@@ -1281,7 +1281,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             .eq(output_ty, revealed_ty)?,\n                     );\n \n-                    for (&opaque_def_id, opaque_decl) in &opaque_type_map {\n+                    for &(opaque_def_id, opaque_decl) in &opaque_type_map {\n                         let resolved_ty = infcx.resolve_vars_if_possible(opaque_decl.concrete_ty);\n                         let concrete_is_opaque = if let ty::Opaque(def_id, _) = resolved_ty.kind() {\n                             *def_id == opaque_def_id"}, {"sha": "2fdb267d0db8f023bec7b85457de943f1434cafd", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bc723fbcaa1c1136793dd92f1b4307335184007/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc723fbcaa1c1136793dd92f1b4307335184007/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=2bc723fbcaa1c1136793dd92f1b4307335184007", "patch": "@@ -2,8 +2,9 @@ use crate::infer::InferCtxtExt as _;\n use crate::traits::{self, PredicateObligation};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::vec_map::VecMap;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::Node;\n use rustc_infer::infer::error_reporting::unexpected_hidden_region_diagnostic;\n use rustc_infer::infer::free_regions::FreeRegionRelations;\n@@ -16,7 +17,7 @@ use rustc_span::Span;\n \n use std::ops::ControlFlow;\n \n-pub type OpaqueTypeMap<'tcx> = DefIdMap<OpaqueTypeDecl<'tcx>>;\n+pub type OpaqueTypeMap<'tcx> = VecMap<DefId, OpaqueTypeDecl<'tcx>>;\n \n /// Information about the opaque types whose values we\n /// are inferring in this function (these are the `impl Trait` that\n@@ -370,10 +371,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     ) {\n         debug!(\"constrain_opaque_types()\");\n \n-        for (&def_id, opaque_defn) in opaque_types {\n+        for &(def_id, opaque_defn) in opaque_types {\n             self.constrain_opaque_type(\n                 def_id,\n-                opaque_defn,\n+                &opaque_defn,\n                 GenerateMemberConstraints::WhenRequired,\n                 free_region_relations,\n             );"}, {"sha": "0ff9bed749c754a823e3fab323eec49e5b9a75c7", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2bc723fbcaa1c1136793dd92f1b4307335184007/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc723fbcaa1c1136793dd92f1b4307335184007/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=2bc723fbcaa1c1136793dd92f1b4307335184007", "patch": "@@ -2,8 +2,9 @@ use super::callee::DeferredCallResolution;\n use super::MaybeInProgressTables;\n \n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::vec_map::VecMap;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefIdMap, LocalDefId};\n+use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId};\n use rustc_hir::HirIdMap;\n use rustc_infer::infer;\n use rustc_infer::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n@@ -58,7 +59,7 @@ pub struct Inherited<'a, 'tcx> {\n     // associated fresh inference variable. Writeback resolves these\n     // variables to get the concrete type, which can be used to\n     // 'de-opaque' OpaqueTypeDecl, after typeck is done with all functions.\n-    pub(super) opaque_types: RefCell<DefIdMap<OpaqueTypeDecl<'tcx>>>,\n+    pub(super) opaque_types: RefCell<VecMap<DefId, OpaqueTypeDecl<'tcx>>>,\n \n     /// A map from inference variables created from opaque\n     /// type instantiations (`ty::Infer`) to the actual opaque"}, {"sha": "685f81b3bd6a51e2dc377788179c6602428feb48", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc723fbcaa1c1136793dd92f1b4307335184007/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc723fbcaa1c1136793dd92f1b4307335184007/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=2bc723fbcaa1c1136793dd92f1b4307335184007", "patch": "@@ -475,7 +475,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n     }\n \n     fn visit_opaque_types(&mut self, span: Span) {\n-        for (&def_id, opaque_defn) in self.fcx.opaque_types.borrow().iter() {\n+        for &(def_id, opaque_defn) in self.fcx.opaque_types.borrow().iter() {\n             let hir_id = self.tcx().hir().local_def_id_to_hir_id(def_id.expect_local());\n             let instantiated_ty = self.resolve(opaque_defn.concrete_ty, &hir_id);\n "}]}