{"sha": "2290ce14f29450560cd34c219dbc8b6a10283967", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyOTBjZTE0ZjI5NDUwNTYwY2QzNGMyMTlkYmM4YjZhMTAyODM5Njc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-06T23:08:56Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-10T10:38:51Z"}, "message": "Remove some users of io::file_reader", "tree": {"sha": "8cd9fd814b29f514de8582f52dfd4c26bab3cfad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cd9fd814b29f514de8582f52dfd4c26bab3cfad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2290ce14f29450560cd34c219dbc8b6a10283967", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2290ce14f29450560cd34c219dbc8b6a10283967", "html_url": "https://github.com/rust-lang/rust/commit/2290ce14f29450560cd34c219dbc8b6a10283967", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2290ce14f29450560cd34c219dbc8b6a10283967/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff95904c488f573bfd07e94a0d456e4d35f325ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff95904c488f573bfd07e94a0d456e4d35f325ce", "html_url": "https://github.com/rust-lang/rust/commit/ff95904c488f573bfd07e94a0d456e4d35f325ce"}], "stats": {"total": 98, "additions": 68, "deletions": 30}, "files": [{"sha": "e49a9701460b0eff721ffe3ae9c4e595949cf2e3", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2290ce14f29450560cd34c219dbc8b6a10283967/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2290ce14f29450560cd34c219dbc8b6a10283967/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=2290ce14f29450560cd34c219dbc8b6a10283967", "patch": "@@ -8,17 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io;\n-\n pub struct ExpectedError { line: uint, kind: ~str, msg: ~str }\n \n // Load any test directives embedded in the file\n pub fn load_errors(testfile: &Path) -> ~[ExpectedError] {\n+    use std::rt::io::Open;\n+    use std::rt::io::file::FileInfo;\n+    use std::rt::io::buffered::BufferedReader;\n+\n     let mut error_patterns = ~[];\n-    let rdr = io::file_reader(testfile).unwrap();\n+    let mut rdr = BufferedReader::new(testfile.open_reader(Open).unwrap());\n     let mut line_num = 1u;\n-    while !rdr.eof() {\n-        let ln = rdr.read_line();\n+    loop {\n+        let ln = match rdr.read_line() {\n+            Some(ln) => ln, None => break,\n+        };\n         error_patterns.push_all_move(parse_expected(line_num, ln));\n         line_num += 1u;\n     }"}, {"sha": "730df66af23e6ea6b80efa2694b9aa24491c95f2", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2290ce14f29450560cd34c219dbc8b6a10283967/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2290ce14f29450560cd34c219dbc8b6a10283967/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=2290ce14f29450560cd34c219dbc8b6a10283967", "patch": "@@ -12,8 +12,6 @@ use common::config;\n use common;\n use util;\n \n-use std::io;\n-\n pub struct TestProps {\n     // Lines that should be expected, in order, on standard out\n     error_patterns: ~[~str],\n@@ -104,17 +102,23 @@ pub fn is_test_ignored(config: &config, testfile: &Path) -> bool {\n     !val\n }\n \n-fn iter_header(testfile: &Path, it: &fn(~str) -> bool) -> bool {\n-    let rdr = io::file_reader(testfile).unwrap();\n-    while !rdr.eof() {\n-        let ln = rdr.read_line();\n+fn iter_header(testfile: &Path, it: &fn(&str) -> bool) -> bool {\n+    use std::rt::io::Open;\n+    use std::rt::io::file::FileInfo;\n+    use std::rt::io::buffered::BufferedReader;\n+\n+    let mut rdr = BufferedReader::new(testfile.open_reader(Open).unwrap());\n+    loop {\n+        let ln = match rdr.read_line() {\n+            Some(ln) => ln, None => break\n+        };\n \n         // Assume that any directives will be found before the first\n         // module or function. This doesn't seem to be an optimization\n         // with a warm page cache. Maybe with a cold one.\n         if ln.starts_with(\"fn\") || ln.starts_with(\"mod\") {\n             return true;\n-        } else { if !(it(ln)) { return false; } }\n+        } else { if !(it(ln.trim())) { return false; } }\n     }\n     return true;\n }"}, {"sha": "9dcb35c806f7cb8512df97b2c467596e0666131d", "filename": "src/libstd/rt/io/buffered.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2290ce14f29450560cd34c219dbc8b6a10283967/src%2Flibstd%2Frt%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2290ce14f29450560cd34c219dbc8b6a10283967/src%2Flibstd%2Frt%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fbuffered.rs?ref=2290ce14f29450560cd34c219dbc8b6a10283967", "patch": "@@ -89,14 +89,14 @@ impl<R: Reader> BufferedReader<R> {\n     /// Reads the next line of input, interpreted as a sequence of utf-8\n     /// encoded unicode codepoints. If a newline is encountered, then the\n     /// newline is contained in the returned string.\n-    pub fn read_line(&mut self) -> ~str {\n-        str::from_utf8_owned(self.read_until('\\n' as u8))\n+    pub fn read_line(&mut self) -> Option<~str> {\n+        self.read_until('\\n' as u8).map(str::from_utf8_owned)\n     }\n \n     /// Reads a sequence of bytes leading up to a specified delimeter. Once the\n     /// specified byte is encountered, reading ceases and the bytes up to and\n     /// including the delimiter are returned.\n-    pub fn read_until(&mut self, byte: u8) -> ~[u8] {\n+    pub fn read_until(&mut self, byte: u8) -> Option<~[u8]> {\n         let mut res = ~[];\n         let mut used;\n         loop {\n@@ -120,7 +120,7 @@ impl<R: Reader> BufferedReader<R> {\n             self.pos += used;\n         }\n         self.pos += used;\n-        return res;\n+        return if res.len() == 0 {None} else {Some(res)};\n     }\n \n     fn fill_buffer<'a>(&'a mut self) -> &'a [u8] {"}, {"sha": "fa53f3cda259260b9280276f30e330b6940c9a3d", "filename": "src/libstd/rt/io/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2290ce14f29450560cd34c219dbc8b6a10283967/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2290ce14f29450560cd34c219dbc8b6a10283967/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmod.rs?ref=2290ce14f29450560cd34c219dbc8b6a10283967", "patch": "@@ -462,6 +462,16 @@ pub trait Reader {\n     fn eof(&mut self) -> bool;\n }\n \n+impl Reader for ~Reader {\n+    fn read(&mut self, buf: &mut [u8]) -> Option<uint> { self.read(buf) }\n+    fn eof(&mut self) -> bool { self.eof() }\n+}\n+\n+impl<'self> Reader for &'self mut Reader {\n+    fn read(&mut self, buf: &mut [u8]) -> Option<uint> { self.read(buf) }\n+    fn eof(&mut self) -> bool { self.eof() }\n+}\n+\n pub trait Writer {\n     /// Write the given buffer\n     ///\n@@ -474,6 +484,16 @@ pub trait Writer {\n     fn flush(&mut self);\n }\n \n+impl Writer for ~Writer {\n+    fn write(&mut self, buf: &[u8]) { self.write(buf) }\n+    fn flush(&mut self) { self.flush() }\n+}\n+\n+impl<'self> Writer for &'self mut Writer {\n+    fn write(&mut self, buf: &[u8]) { self.write(buf) }\n+    fn flush(&mut self) { self.flush() }\n+}\n+\n pub trait Stream: Reader + Writer { }\n \n impl<T: Reader + Writer> Stream for T {}"}, {"sha": "5222c4f59b723e1c92fbb9d64dfccf9b744ff39b", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2290ce14f29450560cd34c219dbc8b6a10283967/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2290ce14f29450560cd34c219dbc8b6a10283967/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=2290ce14f29450560cd34c219dbc8b6a10283967", "patch": "@@ -15,7 +15,6 @@\n extern mod extra;\n \n use extra::time::precise_time_s;\n-use std::io;\n use std::os;\n use std::rand::Rng;\n use std::rand;\n@@ -70,11 +69,15 @@ fn shift_push() {\n }\n \n fn read_line() {\n+    use std::rt::io::{Reader, Open};\n+    use std::rt::io::file::FileInfo;\n+    use std::rt::io::buffered::BufferedReader;\n+\n     let path = Path(env!(\"CFG_SRC_DIR\"))\n         .push_rel(&Path(\"src/test/bench/shootout-k-nucleotide.data\"));\n \n     for _ in range(0, 3) {\n-        let reader = io::file_reader(&path).unwrap();\n+        let mut reader = BufferedReader::new(path.open_reader(Open).unwrap());\n         while !reader.eof() {\n             reader.read_line();\n         }"}, {"sha": "445b28b693cfccaa7859d214921e50862d953df6", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2290ce14f29450560cd34c219dbc8b6a10283967/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2290ce14f29450560cd34c219dbc8b6a10283967/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=2290ce14f29450560cd34c219dbc8b6a10283967", "patch": "@@ -156,17 +156,21 @@ fn make_sequence_processor(sz: uint,\n \n // given a FASTA file on stdin, process sequence THREE\n fn main() {\n-    let rdr = if os::getenv(\"RUST_BENCH\").is_some() {\n-       // FIXME: Using this compile-time env variable is a crummy way to\n-       // get to this massive data set, but include_bin! chokes on it (#2598)\n-       let path = Path(env!(\"CFG_SRC_DIR\"))\n-           .push_rel(&Path(\"src/test/bench/shootout-k-nucleotide.data\"));\n-       io::file_reader(&path).unwrap()\n-   } else {\n-      io::stdin()\n-   };\n-\n+    use std::rt::io::{Reader, Open};\n+    use std::rt::io::file::FileInfo;\n+    use std::rt::io::native::stdio;\n+    use std::rt::io::buffered::BufferedReader;\n \n+    let rdr = if os::getenv(\"RUST_BENCH\").is_some() {\n+        // FIXME: Using this compile-time env variable is a crummy way to\n+        // get to this massive data set, but include_bin! chokes on it (#2598)\n+        let path = Path(env!(\"CFG_SRC_DIR\"))\n+            .push_rel(&Path(\"src/test/bench/shootout-k-nucleotide.data\"));\n+        ~path.open_reader(Open).unwrap() as ~Reader\n+    } else {\n+        ~stdio::stdin() as ~Reader\n+    };\n+    let mut rdr = BufferedReader::new(rdr);\n \n     // initialize each sequence sorter\n     let sizes = ~[1u,2,3,4,6,12,18];\n@@ -193,8 +197,11 @@ fn main() {\n    // reading the sequence of interest\n    let mut proc_mode = false;\n \n-   while !rdr.eof() {\n-      let line: ~str = rdr.read_line();\n+   loop {\n+      let line = match rdr.read_line() {\n+          Some(ln) => ln, None => break,\n+      };\n+      let line = line.trim().to_owned();\n \n       if line.len() == 0u { continue; }\n "}]}