{"sha": "07e52eb7fc75466d294a1fd9d614f5e0276ab834", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZTUyZWI3ZmM3NTQ2NmQyOTRhMWZkOWQ2MTRmNWUwMjc2YWI4MzQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-09T20:29:05Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-09T20:29:05Z"}, "message": "std: Make os::set_exit_status work with newsched", "tree": {"sha": "6182b833c7ca092a18e6e7017fd5752bf5bd6c9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6182b833c7ca092a18e6e7017fd5752bf5bd6c9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07e52eb7fc75466d294a1fd9d614f5e0276ab834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07e52eb7fc75466d294a1fd9d614f5e0276ab834", "html_url": "https://github.com/rust-lang/rust/commit/07e52eb7fc75466d294a1fd9d614f5e0276ab834", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07e52eb7fc75466d294a1fd9d614f5e0276ab834/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec6d4a1733b07d4cc561eda7463ad596a9d52bf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec6d4a1733b07d4cc561eda7463ad596a9d52bf0", "html_url": "https://github.com/rust-lang/rust/commit/ec6d4a1733b07d4cc561eda7463ad596a9d52bf0"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "5c78b7c14e5332cd25a75b6f5d93be3f3e9d6f35", "filename": "src/libstd/os.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/07e52eb7fc75466d294a1fd9d614f5e0276ab834/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e52eb7fc75466d294a1fd9d614f5e0276ab834/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=07e52eb7fc75466d294a1fd9d614f5e0276ab834", "patch": "@@ -1134,8 +1134,15 @@ pub fn last_os_error() -> ~str {\n  * ignored and the process exits with the default failure status\n  */\n pub fn set_exit_status(code: int) {\n-    unsafe {\n-        rustrt::rust_set_exit_status(code as libc::intptr_t);\n+    use rt;\n+    use rt::OldTaskContext;\n+\n+    if rt::context() == OldTaskContext {\n+        unsafe {\n+            rustrt::rust_set_exit_status(code as libc::intptr_t);\n+        }\n+    } else {\n+        rt::util::set_exit_status(code);\n     }\n }\n "}, {"sha": "51f4737ef85fb0561cbd4472d2b1b02633e48cf7", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07e52eb7fc75466d294a1fd9d614f5e0276ab834/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e52eb7fc75466d294a1fd9d614f5e0276ab834/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=07e52eb7fc75466d294a1fd9d614f5e0276ab834", "patch": "@@ -260,7 +260,15 @@ pub fn run(main: ~fn()) -> int {\n         }\n \n         unsafe {\n-            let exit_code = if exit_success { 0 } else { DEFAULT_ERROR_CODE };\n+            let exit_code = if exit_success {\n+                use rt::util;\n+\n+                // If we're exiting successfully, then return the global\n+                // exit status, which can be set programmatically.\n+                util::get_exit_status()\n+            } else {\n+                DEFAULT_ERROR_CODE\n+            };\n             (*exit_code_clone.get()).store(exit_code, SeqCst);\n         }\n     };"}, {"sha": "a1169954688b097356aeeefdabd39ce00be43f3e", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/07e52eb7fc75466d294a1fd9d614f5e0276ab834/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e52eb7fc75466d294a1fd9d614f5e0276ab834/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=07e52eb7fc75466d294a1fd9d614f5e0276ab834", "patch": "@@ -97,3 +97,25 @@ memory and partly incapable of presentation to others.\",\n \n     unsafe { libc::abort(); }\n }\n+\n+pub fn set_exit_status(code: int) {\n+\n+    unsafe {\n+        return rust_set_exit_status_newrt(code as libc::uintptr_t);\n+    }\n+\n+    extern {\n+        fn rust_set_exit_status_newrt(code: libc::uintptr_t);\n+    }\n+}\n+\n+pub fn get_exit_status() -> int {\n+\n+    unsafe {\n+        return rust_get_exit_status_newrt() as int;\n+    }\n+\n+    extern {\n+        fn rust_get_exit_status_newrt() -> libc::uintptr_t;\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "caa2b53b3dbe38da798aa1394eff6aa47403848e", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/07e52eb7fc75466d294a1fd9d614f5e0276ab834/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/07e52eb7fc75466d294a1fd9d614f5e0276ab834/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=07e52eb7fc75466d294a1fd9d614f5e0276ab834", "patch": "@@ -960,6 +960,21 @@ rust_get_global_args_ptr() {\n     return &global_args_ptr;\n }\n \n+static lock_and_signal exit_status_lock;\n+static uintptr_t exit_status = 0;\n+\n+extern \"C\" CDECL void\n+rust_set_exit_status_newrt(uintptr_t code) {\n+    scoped_lock with(exit_status_lock);\n+    exit_status = code;\n+}\n+\n+extern \"C\" CDECL uintptr_t\n+rust_get_exit_status_newrt() {\n+    scoped_lock with(exit_status_lock);\n+    return exit_status;\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "ea614330866fe5358de7bcbc868153dd7c42334e", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e52eb7fc75466d294a1fd9d614f5e0276ab834/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/07e52eb7fc75466d294a1fd9d614f5e0276ab834/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=07e52eb7fc75466d294a1fd9d614f5e0276ab834", "patch": "@@ -270,3 +270,5 @@ rust_get_global_args_ptr\n rust_current_boxed_region\n rust_take_global_args_lock\n rust_drop_global_args_lock\n+rust_set_exit_status_newrt\n+rust_get_exit_status_newrt\n\\ No newline at end of file"}]}