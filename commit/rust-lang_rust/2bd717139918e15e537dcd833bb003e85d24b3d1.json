{"sha": "2bd717139918e15e537dcd833bb003e85d24b3d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZDcxNzEzOTkxOGUxNWU1MzdkY2Q4MzNiYjAwM2U4NWQyNGIzZDE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-29T23:33:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-29T23:33:34Z"}, "message": "Merge #5120\n\n5120: Add a simple SSR subcommand to the rust-analyzer command line binary r=davidlattimore a=davidlattimore\n\nIs adding the dependency on ra_ide_db OK? It's needed for the call to `db.local_roots()`\n\nCo-authored-by: David Lattimore <dml@google.com>", "tree": {"sha": "b289dd362a6da8124003cd66edf4f8674139f03f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b289dd362a6da8124003cd66edf4f8674139f03f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bd717139918e15e537dcd833bb003e85d24b3d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe+npOCRBK7hj4Ov3rIwAAdHIIAD4Gc586O/Qal4TZwXxu5sck\nvkMxhRHiSpDPrcDZujt3UtJc4Z2RinmSJhYDrzfcbtzQsK91hQsyayP1JONoldVn\nj4y0TiL5WKHQ2jzFz/DzU5d+qgI+e1Extl2UPg4wdSSwp7Fq+owEgdPJRp/2mxrG\nztutwZr4/o7p3gsz01mZbodwe8Xq8Perqt7+MKyj9dhBCuEHDqIk5jX3PPJrpcJn\nC4+KHBnAsWSgPdF00S6DzhygbTsiBgonQ55O2tZ4zgZJtyQjejDMkfDEDbqHGjRp\nA6HDbAZODMJBGKRT6H+f0CH3wTk/+m5mnhJXGsxUcbC5Tk86abRBITsvAnB1Ay8=\n=CYC0\n-----END PGP SIGNATURE-----\n", "payload": "tree b289dd362a6da8124003cd66edf4f8674139f03f\nparent 8035b0a27ebfa4a64fbb55eada1df63ac3e54835\nparent 867f29559f0f49bb19ff4625e4bd59b278474bde\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593473614 +0000\ncommitter GitHub <noreply@github.com> 1593473614 +0000\n\nMerge #5120\n\n5120: Add a simple SSR subcommand to the rust-analyzer command line binary r=davidlattimore a=davidlattimore\n\nIs adding the dependency on ra_ide_db OK? It's needed for the call to `db.local_roots()`\n\nCo-authored-by: David Lattimore <dml@google.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd717139918e15e537dcd833bb003e85d24b3d1", "html_url": "https://github.com/rust-lang/rust/commit/2bd717139918e15e537dcd833bb003e85d24b3d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bd717139918e15e537dcd833bb003e85d24b3d1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8035b0a27ebfa4a64fbb55eada1df63ac3e54835", "url": "https://api.github.com/repos/rust-lang/rust/commits/8035b0a27ebfa4a64fbb55eada1df63ac3e54835", "html_url": "https://github.com/rust-lang/rust/commit/8035b0a27ebfa4a64fbb55eada1df63ac3e54835"}, {"sha": "867f29559f0f49bb19ff4625e4bd59b278474bde", "url": "https://api.github.com/repos/rust-lang/rust/commits/867f29559f0f49bb19ff4625e4bd59b278474bde", "html_url": "https://github.com/rust-lang/rust/commit/867f29559f0f49bb19ff4625e4bd59b278474bde"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "ca3d14a091902c1c7e943b12714114e34b71376e", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd717139918e15e537dcd833bb003e85d24b3d1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2bd717139918e15e537dcd833bb003e85d24b3d1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2bd717139918e15e537dcd833bb003e85d24b3d1", "patch": "@@ -1464,10 +1464,12 @@ dependencies = [\n  \"ra_hir_def\",\n  \"ra_hir_ty\",\n  \"ra_ide\",\n+ \"ra_ide_db\",\n  \"ra_mbe\",\n  \"ra_proc_macro_srv\",\n  \"ra_prof\",\n  \"ra_project_model\",\n+ \"ra_ssr\",\n  \"ra_syntax\",\n  \"ra_text_edit\",\n  \"ra_toolchain\","}, {"sha": "8037551068f3b6f8aa2ac4831e3307fcb696b319", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd717139918e15e537dcd833bb003e85d24b3d1/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2bd717139918e15e537dcd833bb003e85d24b3d1/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=2bd717139918e15e537dcd833bb003e85d24b3d1", "patch": "@@ -45,6 +45,8 @@ ra_toolchain = { path = \"../ra_toolchain\" }\n \n # This should only be used in CLI\n ra_db = { path = \"../ra_db\" }\n+ra_ide_db = { path = \"../ra_ide_db\" }\n+ra_ssr = { path = \"../ra_ssr\" }\n hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n hir_def = { path = \"../ra_hir_def\", package = \"ra_hir_def\" }\n hir_ty = { path = \"../ra_hir_ty\", package = \"ra_hir_ty\" }"}, {"sha": "3f0bb3865f65e2aef43f130f8aa0473e83ccee96", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2bd717139918e15e537dcd833bb003e85d24b3d1/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd717139918e15e537dcd833bb003e85d24b3d1/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=2bd717139918e15e537dcd833bb003e85d24b3d1", "patch": "@@ -5,6 +5,7 @@\n \n use anyhow::{bail, Result};\n use pico_args::Arguments;\n+use ra_ssr::SsrRule;\n use rust_analyzer::cli::{BenchWhat, Position, Verbosity};\n \n use std::{fmt::Write, path::PathBuf};\n@@ -45,6 +46,9 @@ pub(crate) enum Command {\n         /// this would include the parser test files.\n         all: bool,\n     },\n+    Ssr {\n+        rules: Vec<SsrRule>,\n+    },\n     ProcMacro,\n     RunServer,\n     Version,\n@@ -270,6 +274,32 @@ ARGS:\n                 Command::Diagnostics { path, load_output_dirs, with_proc_macro, all }\n             }\n             \"proc-macro\" => Command::ProcMacro,\n+            \"ssr\" => {\n+                if matches.contains([\"-h\", \"--help\"]) {\n+                    eprintln!(\n+                        \"\\\n+rust-analyzer ssr\n+\n+USAGE:\n+    rust-analyzer ssr [FLAGS] [RULE...]\n+\n+EXAMPLE:\n+    rust-analyzer ssr '$a.foo($b) ==> bar($a, $b)'\n+\n+FLAGS:\n+    -h, --help          Prints help information\n+\n+ARGS:\n+    <RULE>              A structured search replace rule\"\n+                    );\n+                    return Ok(Err(HelpPrinted));\n+                }\n+                let mut rules = Vec::new();\n+                while let Some(rule) = matches.free_from_str()? {\n+                    rules.push(rule);\n+                }\n+                Command::Ssr { rules }\n+            }\n             _ => {\n                 print_subcommands();\n                 return Ok(Err(HelpPrinted));\n@@ -297,6 +327,7 @@ SUBCOMMANDS:\n     diagnostics\n     proc-macro\n     parse\n+    ssr\n     symbols\"\n     )\n }"}, {"sha": "16882fc137662af1680d232f5e35d2d7c81fc2b9", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2bd717139918e15e537dcd833bb003e85d24b3d1/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd717139918e15e537dcd833bb003e85d24b3d1/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=2bd717139918e15e537dcd833bb003e85d24b3d1", "patch": "@@ -60,6 +60,9 @@ fn main() -> Result<()> {\n         args::Command::Diagnostics { path, load_output_dirs, with_proc_macro, all } => {\n             cli::diagnostics(path.as_ref(), load_output_dirs, with_proc_macro, all)?\n         }\n+        args::Command::Ssr { rules } => {\n+            cli::apply_ssr_rules(rules)?;\n+        }\n         args::Command::Version => println!(\"rust-analyzer {}\", env!(\"REV\")),\n     }\n     Ok(())"}, {"sha": "13e3d75be111d10af503db45b92dadafcfa9ded1", "filename": "crates/rust-analyzer/src/cli.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd717139918e15e537dcd833bb003e85d24b3d1/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd717139918e15e537dcd833bb003e85d24b3d1/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli.rs?ref=2bd717139918e15e537dcd833bb003e85d24b3d1", "patch": "@@ -5,6 +5,7 @@ mod analysis_stats;\n mod analysis_bench;\n mod diagnostics;\n mod progress_report;\n+mod ssr;\n \n use std::io::Read;\n \n@@ -17,6 +18,7 @@ pub use analysis_bench::{analysis_bench, BenchWhat, Position};\n pub use analysis_stats::analysis_stats;\n pub use diagnostics::diagnostics;\n pub use load_cargo::load_cargo;\n+pub use ssr::apply_ssr_rules;\n \n #[derive(Clone, Copy)]\n pub enum Verbosity {"}, {"sha": "a5265ac1587fbb335992d0d7c3d20c7916b266ae", "filename": "crates/rust-analyzer/src/cli/ssr.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2bd717139918e15e537dcd833bb003e85d24b3d1/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd717139918e15e537dcd833bb003e85d24b3d1/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs?ref=2bd717139918e15e537dcd833bb003e85d24b3d1", "patch": "@@ -0,0 +1,33 @@\n+//! Applies structured search replace rules from the command line.\n+\n+use crate::cli::{load_cargo::load_cargo, Result};\n+use ra_ide::SourceFileEdit;\n+use ra_ssr::{MatchFinder, SsrRule};\n+\n+pub fn apply_ssr_rules(rules: Vec<SsrRule>) -> Result<()> {\n+    use ra_db::SourceDatabaseExt;\n+    use ra_ide_db::symbol_index::SymbolsDatabase;\n+    let (host, vfs) = load_cargo(&std::env::current_dir()?, true, true)?;\n+    let db = host.raw_database();\n+    let mut match_finder = MatchFinder::new(db);\n+    for rule in rules {\n+        match_finder.add_rule(rule);\n+    }\n+    let mut edits = Vec::new();\n+    for &root in db.local_roots().iter() {\n+        let sr = db.source_root(root);\n+        for file_id in sr.iter() {\n+            if let Some(edit) = match_finder.edits_for_file(file_id) {\n+                edits.push(SourceFileEdit { file_id, edit });\n+            }\n+        }\n+    }\n+    for edit in edits {\n+        if let Some(path) = vfs.file_path(edit.file_id).as_path() {\n+            let mut contents = db.file_text(edit.file_id).to_string();\n+            edit.edit.apply(&mut contents);\n+            std::fs::write(path, contents)?;\n+        }\n+    }\n+    Ok(())\n+}"}]}