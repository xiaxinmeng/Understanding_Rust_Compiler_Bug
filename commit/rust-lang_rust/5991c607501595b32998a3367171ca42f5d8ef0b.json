{"sha": "5991c607501595b32998a3367171ca42f5d8ef0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5OTFjNjA3NTAxNTk1YjMyOTk4YTMzNjcxNzFjYTQyZjVkOGVmMGI=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-20T17:19:13Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-20T17:19:13Z"}, "message": "option: Title-case `Some` and `None` in docs and fail messages\n\nFor accuracy, say 'get_ref None' instead of 'get_ref none', and so on.", "tree": {"sha": "1731457d70283eaf5db85f3be88cc9816069039f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1731457d70283eaf5db85f3be88cc9816069039f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5991c607501595b32998a3367171ca42f5d8ef0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5991c607501595b32998a3367171ca42f5d8ef0b", "html_url": "https://github.com/rust-lang/rust/commit/5991c607501595b32998a3367171ca42f5d8ef0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5991c607501595b32998a3367171ca42f5d8ef0b/comments", "author": null, "committer": null, "parents": [{"sha": "e3142c5d3e0a69bff0e3d5506f617c5433a9a750", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3142c5d3e0a69bff0e3d5506f617c5433a9a750", "html_url": "https://github.com/rust-lang/rust/commit/e3142c5d3e0a69bff0e3d5506f617c5433a9a750"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "b68c67e8903b2781a02b04fec13aac6fecfb0ad5", "filename": "src/libstd/option.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5991c607501595b32998a3367171ca42f5d8ef0b/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5991c607501595b32998a3367171ca42f5d8ef0b/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=5991c607501595b32998a3367171ca42f5d8ef0b", "patch": "@@ -119,13 +119,13 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Returns true if the option equals `none`\n+    /// Returns true if the option equals `None`\n     #[inline]\n     pub fn is_none(&self) -> bool {\n         match *self { None => true, Some(_) => false }\n     }\n \n-    /// Returns true if the option contains some value\n+    /// Returns true if the option contains a `Some` value\n     #[inline]\n     pub fn is_some(&self) -> bool { !self.is_none() }\n \n@@ -168,19 +168,19 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Maps a `some` value from one type to another by reference\n+    /// Maps a `Some` value from one type to another by reference\n     #[inline]\n     pub fn map<'a, U>(&'a self, f: &fn(&'a T) -> U) -> Option<U> {\n         match *self { Some(ref x) => Some(f(x)), None => None }\n     }\n \n-    /// Maps a `some` value from one type to another by a mutable reference\n+    /// Maps a `Some` value from one type to another by a mutable reference\n     #[inline]\n     pub fn map_mut<'a, U>(&'a mut self, f: &fn(&'a mut T) -> U) -> Option<U> {\n         match *self { Some(ref mut x) => Some(f(x)), None => None }\n     }\n \n-    /// Maps a `some` value from one type to another by a mutable reference,\n+    /// Maps a `Some` value from one type to another by a mutable reference,\n     /// or returns a default value.\n     #[inline]\n     pub fn map_mut_default<'a, U>(&'a mut self, def: U, f: &fn(&'a mut T) -> U) -> U {\n@@ -261,7 +261,7 @@ impl<T> Option<T> {\n     pub fn get_ref<'a>(&'a self) -> &'a T {\n         match *self {\n           Some(ref x) => x,\n-          None => fail!(\"option::get_ref none\")\n+          None => fail!(\"option::get_ref None\")\n         }\n     }\n \n@@ -283,7 +283,7 @@ impl<T> Option<T> {\n     pub fn get_mut_ref<'a>(&'a mut self) -> &'a mut T {\n         match *self {\n           Some(ref mut x) => x,\n-          None => fail!(\"option::get_mut_ref none\")\n+          None => fail!(\"option::get_mut_ref None\")\n         }\n     }\n \n@@ -307,7 +307,7 @@ impl<T> Option<T> {\n          */\n         match self {\n           Some(x) => x,\n-          None => fail!(\"option::unwrap none\")\n+          None => fail!(\"option::unwrap None\")\n         }\n     }\n \n@@ -321,7 +321,7 @@ impl<T> Option<T> {\n      */\n     #[inline]\n     pub fn take_unwrap(&mut self) -> T {\n-        if self.is_none() { fail!(\"option::take_unwrap none\") }\n+        if self.is_none() { fail!(\"option::take_unwrap None\") }\n         self.take().unwrap()\n     }\n \n@@ -331,7 +331,7 @@ impl<T> Option<T> {\n      *\n      * # Failure\n      *\n-     * Fails if the value equals `none`\n+     * Fails if the value equals `None`\n      */\n     #[inline]\n     pub fn expect(self, reason: &str) -> T {\n@@ -359,7 +359,7 @@ impl<T> Option<T> {\n     pub fn get(self) -> T {\n         match self {\n           Some(x) => return x,\n-          None => fail!(\"option::get none\")\n+          None => fail!(\"option::get None\")\n         }\n     }\n \n@@ -369,7 +369,7 @@ impl<T> Option<T> {\n         match self { Some(x) => x, None => def }\n     }\n \n-    /// Applies a function zero or more times until the result is none.\n+    /// Applies a function zero or more times until the result is None.\n     #[inline]\n     pub fn while_some(self, blk: &fn(v: T) -> Option<T>) {\n         let mut opt = self;"}]}