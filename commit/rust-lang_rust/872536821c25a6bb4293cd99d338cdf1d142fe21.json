{"sha": "872536821c25a6bb4293cd99d338cdf1d142fe21", "node_id": "C_kwDOAAsO6NoAKDg3MjUzNjgyMWMyNWE2YmI0MjkzY2Q5OWQzMzhjZGYxZDE0MmZlMjE", "commit": {"author": {"name": "XFFXFF", "email": "1247714429@qq.com", "date": "2022-06-06T10:49:29Z"}, "committer": {"name": "XFFXFF", "email": "1247714429@qq.com", "date": "2022-06-10T23:11:56Z"}, "message": "Make add_label_to_loop basically work", "tree": {"sha": "80a051ad5257fc96ff9665e38fdd578a32c7e6a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80a051ad5257fc96ff9665e38fdd578a32c7e6a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/872536821c25a6bb4293cd99d338cdf1d142fe21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/872536821c25a6bb4293cd99d338cdf1d142fe21", "html_url": "https://github.com/rust-lang/rust/commit/872536821c25a6bb4293cd99d338cdf1d142fe21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/872536821c25a6bb4293cd99d338cdf1d142fe21/comments", "author": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ef01d0895bb1fef141d9c781519ca03f94c5e85", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ef01d0895bb1fef141d9c781519ca03f94c5e85", "html_url": "https://github.com/rust-lang/rust/commit/9ef01d0895bb1fef141d9c781519ca03f94c5e85"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "c36ce9cced07652d8ae6993992635c5996bde52e", "filename": "crates/ide-assists/src/handlers/add_label_to_loop.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/872536821c25a6bb4293cd99d338cdf1d142fe21/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_label_to_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872536821c25a6bb4293cd99d338cdf1d142fe21/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_label_to_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_label_to_loop.rs?ref=872536821c25a6bb4293cd99d338cdf1d142fe21", "patch": "@@ -0,0 +1,93 @@\n+use ide_db::syntax_helpers::node_ext::for_each_break_and_continue_expr;\n+use syntax::ast::{self, AstNode, HasLoopBody};\n+use syntax::T;\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: add_lifetime_to_type\n+//\n+// Adds a new lifetime to a struct, enum or union.\n+//\n+// ```\n+// struct Point {\n+//     x: &u32,\n+//     y: u32,\n+// }\n+// ```\n+// ->\n+// ```\n+// struct Point<'a> {\n+//     x: &'a u32,\n+//     y: u32,\n+// }\n+// ```\n+pub(crate) fn add_label_to_loop(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let loop_expr = ctx.find_node_at_offset::<ast::LoopExpr>()?;\n+    let loop_body = loop_expr.loop_body().and_then(|it| it.stmt_list());\n+    let mut related_exprs = vec![];\n+    related_exprs.push(ast::Expr::LoopExpr(loop_expr.clone()));\n+    for_each_break_and_continue_expr(loop_expr.label(), loop_body, &mut |expr| {\n+        if let ast::Expr::BreakExpr(_) | ast::Expr::ContinueExpr(_) = expr {\n+            related_exprs.push(expr)\n+        }\n+    });\n+    dbg!(loop_expr.syntax().text_range());\n+\n+    acc.add(\n+        AssistId(\"add_label_to_loop\", AssistKind::Generate),\n+        \"Add Label\",\n+        loop_expr.syntax().text_range(),\n+        |builder| {\n+            for expr in related_exprs {\n+                match expr {\n+                    ast::Expr::BreakExpr(break_expr) => {\n+                        if let Some(break_token) = break_expr.break_token() {\n+                            builder.insert(break_token.text_range().end(), \" 'loop\")\n+                        }\n+                    },\n+                    ast::Expr::ContinueExpr(continue_expr) => {\n+                        if let Some(continue_token) = continue_expr.continue_token() {\n+                            builder.insert(continue_token.text_range().end(), \" 'loop\")\n+                        }\n+                    },\n+                    ast::Expr::LoopExpr(loop_expr) => {\n+                        if let Some(loop_token) = loop_expr.loop_token() {\n+                            builder.insert(loop_token.text_range().start(), \"'loop: \")\n+                        }\n+                    },\n+                    _ => todo!()\n+                }\n+            }\n+        },\n+    )\n+}\n+\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::check_assist;\n+\n+    use super::*;\n+\n+    #[test]\n+    fn add_label() {\n+        check_assist(\n+            add_label_to_loop,\n+            r#\"\n+fn main() {\n+    loop$0 { \n+        break; \n+        continue; \n+    }\n+}\"#,\n+            r#\"\n+fn main() {\n+    'loop: loop { \n+        break 'loop; \n+        continue 'loop; \n+    }\n+}\"#,\n+        );\n+    }\n+\n+}"}, {"sha": "7b9134efb48cc99c655628888c8558fa09450ba2", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872536821c25a6bb4293cd99d338cdf1d142fe21/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872536821c25a6bb4293cd99d338cdf1d142fe21/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=872536821c25a6bb4293cd99d338cdf1d142fe21", "patch": "@@ -104,6 +104,7 @@ mod handlers {\n     pub(crate) type Handler = fn(&mut Assists, &AssistContext) -> Option<()>;\n \n     mod add_explicit_type;\n+    mod add_label_to_loop;\n     mod add_lifetime_to_type;\n     mod add_missing_impl_members;\n     mod add_turbo_fish;\n@@ -193,6 +194,7 @@ mod handlers {\n         &[\n             // These are alphabetic for the foolish consistency\n             add_explicit_type::add_explicit_type,\n+            add_label_to_loop::add_label_to_loop,\n             add_missing_match_arms::add_missing_match_arms,\n             add_lifetime_to_type::add_lifetime_to_type,\n             add_return_type::add_return_type,"}]}