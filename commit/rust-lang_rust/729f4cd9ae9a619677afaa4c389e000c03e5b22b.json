{"sha": "729f4cd9ae9a619677afaa4c389e000c03e5b22b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyOWY0Y2Q5YWU5YTYxOTY3N2FmYWE0YzM4OWUwMDBjMDNlNWIyMmI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-17T08:21:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-29T08:27:25Z"}, "message": "we cannot short-circuit just becuase the Abi seems harmless\n\nalso add tests for ScalarPair enums", "tree": {"sha": "30fe269f3131e0193a793d74f2dd46cc8fa9eb26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30fe269f3131e0193a793d74f2dd46cc8fa9eb26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/729f4cd9ae9a619677afaa4c389e000c03e5b22b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/729f4cd9ae9a619677afaa4c389e000c03e5b22b", "html_url": "https://github.com/rust-lang/rust/commit/729f4cd9ae9a619677afaa4c389e000c03e5b22b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/729f4cd9ae9a619677afaa4c389e000c03e5b22b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e66f586a0da51fbd4cafa2e1da914cf07c65503", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e66f586a0da51fbd4cafa2e1da914cf07c65503", "html_url": "https://github.com/rust-lang/rust/commit/6e66f586a0da51fbd4cafa2e1da914cf07c65503"}], "stats": {"total": 111, "additions": 59, "deletions": 52}, "files": [{"sha": "aa9474233a4ea8bcfa6e0921fcd8141399a4e68b", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 13, "deletions": 50, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/729f4cd9ae9a619677afaa4c389e000c03e5b22b/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729f4cd9ae9a619677afaa4c389e000c03e5b22b/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=729f4cd9ae9a619677afaa4c389e000c03e5b22b", "patch": "@@ -1045,7 +1045,7 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n     /// This is conservative: in doubt, it will answer `true`.\n     ///\n     /// FIXME: Once we removed all the conservatism, we could alternatively\n-    /// create an all-0/all-undef constant and run the vonst value validator to see if\n+    /// create an all-0/all-undef constant and run the const value validator to see if\n     /// this is a valid value for the given type.\n     pub fn might_permit_raw_init<C, E>(self, cx: &C, zero: bool) -> Result<bool, E>\n     where\n@@ -1067,59 +1067,22 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n             }\n         };\n \n-        // Abi is the most informative here.\n-        let res = match &self.abi {\n+        // Check the ABI.\n+        let valid = match &self.abi {\n             Abi::Uninhabited => false, // definitely UB\n             Abi::Scalar(s) => scalar_allows_raw_init(s),\n             Abi::ScalarPair(s1, s2) => scalar_allows_raw_init(s1) && scalar_allows_raw_init(s2),\n             Abi::Vector { element: s, count } => *count == 0 || scalar_allows_raw_init(s),\n-            Abi::Aggregate { .. } => {\n-                match self.variants {\n-                    Variants::Multiple { .. } => {\n-                        if zero {\n-                            // FIXME(#66151):\n-                            // could we identify the variant with discriminant 0, check that?\n-                            true\n-                        } else {\n-                            // FIXME(#66151): This needs to have some sort of discriminant,\n-                            // which cannot be undef. But for now we are conservative.\n-                            true\n-                        }\n-                    }\n-                    Variants::Single { .. } => {\n-                        // For aggregates, recurse.\n-                        match self.fields {\n-                            FieldPlacement::Union(..) => true, // An all-0 unit is fine.\n-                            FieldPlacement::Array { .. } =>\n-                            // FIXME(#66151): The widely use smallvec 0.6 creates uninit arrays\n-                            // with any element type, so let us not (yet) complain about that.\n-                            /* count == 0 ||\n-                            self.field(cx, 0).to_result()?.might_permit_raw_init(cx, zero)? */\n-                            {\n-                                true\n-                            }\n-                            FieldPlacement::Arbitrary { .. } => {\n-                                // FIXME(#66151) cargo depends on sized-chunks 0.3.0 which\n-                                // has some illegal zero-initialization, so let us not (yet)\n-                                // complain about aggregates either.\n-                                /* let mut res = true;\n-                                // Check that all fields accept zero-init.\n-                                for idx in 0..offsets.len() {\n-                                    let field = self.field(cx, idx).to_result()?;\n-                                    if !field.might_permit_raw_init(cx, zero)? {\n-                                        res = false;\n-                                        break;\n-                                    }\n-                                }\n-                                res */\n-                                true\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n+            Abi::Aggregate { .. } => true, // Cannot be excluded *right now*.\n         };\n-        trace!(\"might_permit_raw_init({:?}, zero={}) = {}\", self.details, zero, res);\n-        Ok(res)\n+        if !valid {\n+            // This is definitely not okay.\n+            trace!(\"might_permit_raw_init({:?}, zero={}): not valid\", self.details, zero);\n+            return Ok(false);\n+        }\n+\n+        // If we have not found an error yet, we need to recursively descend.\n+        // FIXME(#66151): For now, we are conservative and do not do this.\n+        Ok(true)\n     }\n }"}, {"sha": "be0df0ea2541cddcb6f8709cb7bca74929860f0e", "filename": "src/test/ui/intrinsics/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/729f4cd9ae9a619677afaa4c389e000c03e5b22b/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729f4cd9ae9a619677afaa4c389e000c03e5b22b/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs?ref=729f4cd9ae9a619677afaa4c389e000c03e5b22b", "patch": "@@ -7,9 +7,10 @@\n #![allow(deprecated, invalid_value)]\n \n use std::{\n-    mem::{self, MaybeUninit},\n+    mem::{self, MaybeUninit, ManuallyDrop},\n     panic,\n     ptr::NonNull,\n+    num,\n };\n \n #[allow(dead_code)]\n@@ -23,6 +24,18 @@ enum Bar {}\n #[allow(dead_code)]\n enum OneVariant { Variant(i32) }\n \n+// An enum with ScalarPair layout\n+#[allow(dead_code)]\n+enum LR {\n+    Left(i64),\n+    Right(i64),\n+}\n+#[allow(dead_code, non_camel_case_types)]\n+enum LR_NonZero {\n+    Left(num::NonZeroI64),\n+    Right(num::NonZeroI64),\n+}\n+\n fn test_panic_msg<T>(op: impl (FnOnce() -> T) + panic::UnwindSafe, msg: &str) {\n     let err = panic::catch_unwind(op).err();\n     assert_eq!(\n@@ -33,7 +46,7 @@ fn test_panic_msg<T>(op: impl (FnOnce() -> T) + panic::UnwindSafe, msg: &str) {\n \n fn main() {\n     unsafe {\n-        // Uninitialized types\n+        // Uninhabited types\n         test_panic_msg(\n             || mem::uninitialized::<!>(),\n             \"attempted to instantiate uninhabited type `!`\"\n@@ -93,6 +106,26 @@ fn main() {\n         );\n \n         /* FIXME(#66151) we conservatively do not error here yet.\n+        test_panic_msg(\n+            || mem::uninitialized::<LR_NonZero>(),\n+            \"attempted to leave type `LR_NonZero` uninitialized, which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<LR_NonZero>(),\n+            \"attempted to zero-initialize type `LR_NonZero`, which is invalid\"\n+        );\n+\n+        test_panic_msg(\n+            || mem::uninitialized::<ManuallyDrop<LR_NonZero>>(),\n+            \"attempted to leave type `std::mem::ManuallyDrop<LR_NonZero>` uninitialized, \\\n+             which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<ManuallyDrop<LR_NonZero>>(),\n+            \"attempted to zero-initialize type `std::mem::ManuallyDrop<LR_NonZero>`, \\\n+             which is invalid\"\n+        );\n+\n         test_panic_msg(\n             || mem::uninitialized::<(NonNull<u32>, u32, u32)>(),\n             \"attempted to leave type `(std::ptr::NonNull<u32>, u32, u32)` uninitialized, \\\n@@ -105,13 +138,24 @@ fn main() {\n         );\n         */\n \n+        // Types that can be zero, but not uninit.\n         test_panic_msg(\n             || mem::uninitialized::<bool>(),\n             \"attempted to leave type `bool` uninitialized, which is invalid\"\n         );\n+        test_panic_msg(\n+            || mem::uninitialized::<LR>(),\n+            \"attempted to leave type `LR` uninitialized, which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::uninitialized::<ManuallyDrop<LR>>(),\n+            \"attempted to leave type `std::mem::ManuallyDrop<LR>` uninitialized, which is invalid\"\n+        );\n \n         // Some things that should work.\n         let _val = mem::zeroed::<bool>();\n+        let _val = mem::zeroed::<LR>();\n+        let _val = mem::zeroed::<ManuallyDrop<LR>>();\n         let _val = mem::zeroed::<OneVariant>();\n         let _val = mem::zeroed::<Option<&'static i32>>();\n         let _val = mem::zeroed::<MaybeUninit<NonNull<u32>>>();"}]}