{"sha": "76003f31f100b96b7c5f6d2414dde5088394b5bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MDAzZjMxZjEwMGI5NmI3YzVmNmQyNDE0ZGRlNTA4ODM5NGI1YmQ=", "commit": {"author": {"name": "LingMan", "email": "LingMan@users.noreply.github.com", "date": "2020-12-30T17:22:41Z"}, "committer": {"name": "LingMan", "email": "LingMan@users.noreply.github.com", "date": "2021-01-16T19:05:02Z"}, "message": "Use Option::map instead of open-coding it", "tree": {"sha": "4eeddad8ed72248b6736b0441a338043e66a388c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eeddad8ed72248b6736b0441a338043e66a388c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76003f31f100b96b7c5f6d2414dde5088394b5bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76003f31f100b96b7c5f6d2414dde5088394b5bd", "html_url": "https://github.com/rust-lang/rust/commit/76003f31f100b96b7c5f6d2414dde5088394b5bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76003f31f100b96b7c5f6d2414dde5088394b5bd/comments", "author": {"login": "LingMan", "id": 18645382, "node_id": "MDQ6VXNlcjE4NjQ1Mzgy", "avatar_url": "https://avatars.githubusercontent.com/u/18645382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LingMan", "html_url": "https://github.com/LingMan", "followers_url": "https://api.github.com/users/LingMan/followers", "following_url": "https://api.github.com/users/LingMan/following{/other_user}", "gists_url": "https://api.github.com/users/LingMan/gists{/gist_id}", "starred_url": "https://api.github.com/users/LingMan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LingMan/subscriptions", "organizations_url": "https://api.github.com/users/LingMan/orgs", "repos_url": "https://api.github.com/users/LingMan/repos", "events_url": "https://api.github.com/users/LingMan/events{/privacy}", "received_events_url": "https://api.github.com/users/LingMan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LingMan", "id": 18645382, "node_id": "MDQ6VXNlcjE4NjQ1Mzgy", "avatar_url": "https://avatars.githubusercontent.com/u/18645382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LingMan", "html_url": "https://github.com/LingMan", "followers_url": "https://api.github.com/users/LingMan/followers", "following_url": "https://api.github.com/users/LingMan/following{/other_user}", "gists_url": "https://api.github.com/users/LingMan/gists{/gist_id}", "starred_url": "https://api.github.com/users/LingMan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LingMan/subscriptions", "organizations_url": "https://api.github.com/users/LingMan/orgs", "repos_url": "https://api.github.com/users/LingMan/repos", "events_url": "https://api.github.com/users/LingMan/events{/privacy}", "received_events_url": "https://api.github.com/users/LingMan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efdb859dcdf7077cf6b8c85af0ea8820c93bcbdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/efdb859dcdf7077cf6b8c85af0ea8820c93bcbdf", "html_url": "https://github.com/rust-lang/rust/commit/efdb859dcdf7077cf6b8c85af0ea8820c93bcbdf"}], "stats": {"total": 42, "additions": 17, "deletions": 25}, "files": [{"sha": "26843670131b8d57909ec7415c8f4a4440e2f907", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76003f31f100b96b7c5f6d2414dde5088394b5bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76003f31f100b96b7c5f6d2414dde5088394b5bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=76003f31f100b96b7c5f6d2414dde5088394b5bd", "patch": "@@ -254,8 +254,6 @@ pub fn handle_native_features(sess: &Session) -> Vec<String> {\n }\n \n pub fn tune_cpu(sess: &Session) -> Option<&str> {\n-    match sess.opts.debugging_opts.tune_cpu {\n-        Some(ref s) => Some(handle_native(&**s)),\n-        None => None,\n-    }\n+    let name = sess.opts.debugging_opts.tune_cpu.as_ref()?;\n+    Some(handle_native(name))\n }"}, {"sha": "157959b115947fad19da82cdff593fa8f92bf937", "filename": "compiler/rustc_mir/src/borrow_check/type_check/input_output.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/76003f31f100b96b7c5f6d2414dde5088394b5bd/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76003f31f100b96b7c5f6d2414dde5088394b5bd/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs?ref=76003f31f100b96b7c5f6d2414dde5088394b5bd", "patch": "@@ -39,10 +39,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             user_provided_sig = None;\n         } else {\n             let typeck_results = self.tcx().typeck(mir_def_id);\n-            user_provided_sig = match typeck_results.user_provided_sigs.get(&mir_def_id.to_def_id())\n-            {\n-                None => None,\n-                Some(user_provided_poly_sig) => {\n+            user_provided_sig = typeck_results.user_provided_sigs.get(&mir_def_id.to_def_id()).map(\n+                |user_provided_poly_sig| {\n                     // Instantiate the canonicalized variables from\n                     // user-provided signature (e.g., the `_` in the code\n                     // above) with fresh variables.\n@@ -54,18 +52,16 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     // Replace the bound items in the fn sig with fresh\n                     // variables, so that they represent the view from\n                     // \"inside\" the closure.\n-                    Some(\n-                        self.infcx\n-                            .replace_bound_vars_with_fresh_vars(\n-                                body.span,\n-                                LateBoundRegionConversionTime::FnCall,\n-                                poly_sig,\n-                            )\n-                            .0,\n-                    )\n-                }\n-            }\n-        };\n+                    self.infcx\n+                        .replace_bound_vars_with_fresh_vars(\n+                            body.span,\n+                            LateBoundRegionConversionTime::FnCall,\n+                            poly_sig,\n+                        )\n+                        .0\n+                },\n+            );\n+        }\n \n         debug!(\n             \"equate_inputs_and_outputs: normalized_input_tys = {:?}, local_decls = {:?}\","}, {"sha": "d37d6bc4f2df657465a80a083abdbb90cfa1a4b6", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76003f31f100b96b7c5f6d2414dde5088394b5bd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76003f31f100b96b7c5f6d2414dde5088394b5bd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=76003f31f100b96b7c5f6d2414dde5088394b5bd", "patch": "@@ -365,12 +365,10 @@ fn check_region_bounds_on_impl_item<'tcx>(\n         let item_kind = assoc_item_kind_str(impl_m);\n         let def_span = tcx.sess.source_map().guess_head_span(span);\n         let span = tcx.hir().get_generics(impl_m.def_id).map_or(def_span, |g| g.span);\n-        let generics_span = if let Some(sp) = tcx.hir().span_if_local(trait_m.def_id) {\n+        let generics_span = tcx.hir().span_if_local(trait_m.def_id).map(|sp| {\n             let def_sp = tcx.sess.source_map().guess_head_span(sp);\n-            Some(tcx.hir().get_generics(trait_m.def_id).map_or(def_sp, |g| g.span))\n-        } else {\n-            None\n-        };\n+            tcx.hir().get_generics(trait_m.def_id).map_or(def_sp, |g| g.span)\n+        });\n \n         tcx.sess.emit_err(LifetimesOrBoundsMismatchOnTrait {\n             span,"}]}