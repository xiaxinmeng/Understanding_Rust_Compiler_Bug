{"sha": "8dd1f6a0dc59236caffb483fdb0176df1945062f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZDFmNmEwZGM1OTIzNmNhZmZiNDgzZmRiMDE3NmRmMTk0NTA2MmY=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-29T17:52:01Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-16T14:29:21Z"}, "message": "rustc: remove the vestigial \"const marking\" pass.", "tree": {"sha": "eccfc009e10cb73e445bba20d8780761fbbfc117", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eccfc009e10cb73e445bba20d8780761fbbfc117"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dd1f6a0dc59236caffb483fdb0176df1945062f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dd1f6a0dc59236caffb483fdb0176df1945062f", "html_url": "https://github.com/rust-lang/rust/commit/8dd1f6a0dc59236caffb483fdb0176df1945062f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dd1f6a0dc59236caffb483fdb0176df1945062f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5db290bf6df986a6acd5ce993f278c18e55ca37", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5db290bf6df986a6acd5ce993f278c18e55ca37", "html_url": "https://github.com/rust-lang/rust/commit/c5db290bf6df986a6acd5ce993f278c18e55ca37"}], "stats": {"total": 170, "additions": 1, "deletions": 169}, "files": [{"sha": "ac0caebd6cf056405379e3b6e37b46836bdaf3bb", "filename": "src/librustc/middle/check_static.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dd1f6a0dc59236caffb483fdb0176df1945062f/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dd1f6a0dc59236caffb483fdb0176df1945062f/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs?ref=8dd1f6a0dc59236caffb483fdb0176df1945062f", "patch": "@@ -79,6 +79,7 @@ pub fn check_crate(tcx: &ty::ctxt) {\n         mode: InNothing,\n         checker: &mut checker,\n     }, tcx.map.krate());\n+    tcx.sess.abort_if_errors();\n }\n \n impl<'a, 'tcx> CheckStaticVisitor<'a, 'tcx> {"}, {"sha": "04c054db0b7b1ba2acf9a8e154898ec7d97a4031", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 0, "deletions": 165, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/8dd1f6a0dc59236caffb483fdb0176df1945062f/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dd1f6a0dc59236caffb483fdb0176df1945062f/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=8dd1f6a0dc59236caffb483fdb0176df1945062f", "patch": "@@ -12,80 +12,22 @@\n #![allow(unsigned_negation)]\n \n pub use self::const_val::*;\n-pub use self::constness::*;\n \n use metadata::csearch;\n use middle::{astencode, def};\n use middle::pat_util::def_to_path;\n use middle::ty::{self};\n use middle::astconv_util::{ast_ty_to_prim_ty};\n-use util::nodemap::DefIdMap;\n \n use syntax::ast::{self, Expr};\n use syntax::codemap::Span;\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n-use syntax::visit::{self, Visitor};\n use syntax::{ast_map, ast_util, codemap};\n \n use std::collections::hash_map::Entry::Vacant;\n use std::rc::Rc;\n \n-//\n-// This pass classifies expressions by their constant-ness.\n-//\n-// Constant-ness comes in 3 flavours:\n-//\n-//   - Integer-constants: can be evaluated by the frontend all the way down\n-//     to their actual value. They are used in a few places (enum\n-//     discriminants, switch arms) and are a subset of\n-//     general-constants. They cover all the integer and integer-ish\n-//     literals (nil, bool, int, uint, char, iNN, uNN) and all integer\n-//     operators and copies applied to them.\n-//\n-//   - General-constants: can be evaluated by LLVM but not necessarily by\n-//     the frontend; usually due to reliance on target-specific stuff such\n-//     as \"where in memory the value goes\" or \"what floating point mode the\n-//     target uses\". This _includes_ integer-constants, plus the following\n-//     constructors:\n-//\n-//        fixed-size vectors and strings: [] and \"\"/_\n-//        vector and string slices: &[] and &\"\"\n-//        tuples: (,)\n-//        enums: foo(...)\n-//        floating point literals and operators\n-//        & and * pointers\n-//        copies of general constants\n-//\n-//        (in theory, probably not at first: if/match on integer-const\n-//         conditions / discriminants)\n-//\n-//   - Non-constants: everything else.\n-//\n-\n-#[derive(Copy)]\n-pub enum constness {\n-    integral_const,\n-    general_const,\n-    non_const\n-}\n-\n-type constness_cache = DefIdMap<constness>;\n-\n-pub fn join(a: constness, b: constness) -> constness {\n-    match (a, b) {\n-      (integral_const, integral_const) => integral_const,\n-      (integral_const, general_const)\n-      | (general_const, integral_const)\n-      | (general_const, general_const) => general_const,\n-      _ => non_const\n-    }\n-}\n-\n-pub fn join_all<It: Iterator<Item=constness>>(cs: It) -> constness {\n-    cs.fold(integral_const, |a, b| join(a, b))\n-}\n-\n fn lookup_const<'a>(tcx: &'a ty::ctxt, e: &Expr) -> Option<&'a Expr> {\n     let opt_def = tcx.def_map.borrow().get(&e.id).cloned();\n     match opt_def {\n@@ -186,113 +128,6 @@ pub fn lookup_const_by_id<'a>(tcx: &'a ty::ctxt, def_id: ast::DefId)\n     }\n }\n \n-struct ConstEvalVisitor<'a, 'tcx: 'a> {\n-    tcx: &'a ty::ctxt<'tcx>,\n-    ccache: constness_cache,\n-}\n-\n-impl<'a, 'tcx> ConstEvalVisitor<'a, 'tcx> {\n-    fn classify(&mut self, e: &Expr) -> constness {\n-        let did = ast_util::local_def(e.id);\n-        match self.ccache.get(&did) {\n-            Some(&x) => return x,\n-            None => {}\n-        }\n-        let cn = match e.node {\n-            ast::ExprLit(ref lit) => {\n-                match lit.node {\n-                    ast::LitStr(..) | ast::LitFloat(..) => general_const,\n-                    _ => integral_const\n-                }\n-            }\n-\n-            ast::ExprUnary(_, ref inner) | ast::ExprParen(ref inner) =>\n-                self.classify(&**inner),\n-\n-            ast::ExprBinary(_, ref a, ref b) =>\n-                join(self.classify(&**a), self.classify(&**b)),\n-\n-            ast::ExprTup(ref es) |\n-            ast::ExprVec(ref es) =>\n-                join_all(es.iter().map(|e| self.classify(&**e))),\n-\n-            ast::ExprStruct(_, ref fs, None) => {\n-                let cs = fs.iter().map(|f| self.classify(&*f.expr));\n-                join_all(cs)\n-            }\n-\n-            ast::ExprCast(ref base, _) => {\n-                let ty = ty::expr_ty(self.tcx, e);\n-                let base = self.classify(&**base);\n-                if ty::type_is_integral(ty) {\n-                    join(integral_const, base)\n-                } else if ty::type_is_fp(ty) {\n-                    join(general_const, base)\n-                } else {\n-                    non_const\n-                }\n-            }\n-\n-            ast::ExprField(ref base, _) => self.classify(&**base),\n-\n-            ast::ExprTupField(ref base, _) => self.classify(&**base),\n-\n-            ast::ExprIndex(ref base, ref idx) =>\n-                join(self.classify(&**base), self.classify(&**idx)),\n-\n-            ast::ExprAddrOf(ast::MutImmutable, ref base) =>\n-                self.classify(&**base),\n-\n-            // FIXME: (#3728) we can probably do something CCI-ish\n-            // surrounding nonlocal constants. But we don't yet.\n-            ast::ExprPath(_) | ast::ExprQPath(_) => self.lookup_constness(e),\n-\n-            ast::ExprRepeat(..) => general_const,\n-\n-            ast::ExprBlock(ref block) => {\n-                match block.expr {\n-                    Some(ref e) => self.classify(&**e),\n-                    None => integral_const\n-                }\n-            }\n-\n-            _ => non_const\n-        };\n-        self.ccache.insert(did, cn);\n-        cn\n-    }\n-\n-    fn lookup_constness(&self, e: &Expr) -> constness {\n-        match lookup_const(self.tcx, e) {\n-            Some(rhs) => {\n-                let ty = ty::expr_ty(self.tcx, &*rhs);\n-                if ty::type_is_integral(ty) {\n-                    integral_const\n-                } else {\n-                    general_const\n-                }\n-            }\n-            None => non_const\n-        }\n-    }\n-\n-}\n-\n-impl<'a, 'tcx, 'v> Visitor<'v> for ConstEvalVisitor<'a, 'tcx> {\n-    fn visit_expr_post(&mut self, e: &Expr) {\n-        self.classify(e);\n-    }\n-}\n-\n-pub fn process_crate(tcx: &ty::ctxt) {\n-    visit::walk_crate(&mut ConstEvalVisitor {\n-        tcx: tcx,\n-        ccache: DefIdMap(),\n-    }, tcx.map.krate());\n-    tcx.sess.abort_if_errors();\n-}\n-\n-\n // FIXME (#33): this doesn't handle big integer/float literals correctly\n // (nor does the rest of our literal handling).\n #[derive(Clone, PartialEq)]"}, {"sha": "c0c464a4f514a7e1fc21ec11cffe902f6bd3adf0", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8dd1f6a0dc59236caffb483fdb0176df1945062f/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dd1f6a0dc59236caffb483fdb0176df1945062f/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=8dd1f6a0dc59236caffb483fdb0176df1945062f", "patch": "@@ -614,10 +614,6 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n     time(time_passes, \"check static items\", (), |_|\n          middle::check_static::check_crate(&ty_cx));\n \n-    // These next two const passes can probably be merged\n-    time(time_passes, \"const marking\", (), |_|\n-         middle::const_eval::process_crate(&ty_cx));\n-\n     time(time_passes, \"const checking\", (), |_|\n          middle::check_const::check_crate(&ty_cx));\n "}]}