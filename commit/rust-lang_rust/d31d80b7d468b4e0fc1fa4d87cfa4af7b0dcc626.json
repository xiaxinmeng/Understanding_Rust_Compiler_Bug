{"sha": "d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMWQ4MGI3ZDQ2OGI0ZTBmYzFmYTRkODdjZmE0YWY3YjBkY2M2MjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-03T02:36:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-03T02:36:14Z"}, "message": "Rollup merge of #59630 - nnethercote:shrink-mir-Statement, r=pnkfelix\n\nShrink `mir::Statement`.\n\nThe `InlineAsm` variant is extremely rare, and `mir::Statement` often\ncontributes significantly to peak memory usage.", "tree": {"sha": "d8bca65d580fe79d66b0d13f11621474a2cdcecb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8bca65d580fe79d66b0d13f11621474a2cdcecb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcpBweCRBK7hj4Ov3rIwAAdHIIAHX0K2jd/zXNUe5yFgy5P2ZZ\nwJheHuO6Q8LdK+yJCSqpYKS8mmw5tAa34WQ9feCBilJdPazGNlK9COjTkZvE0y4l\nmNarHbaFBqZhhyVedM9do3/S7mIUbatgzrvn9HtSNtf2KMjih5SRROMz/lx0tB4/\ntlE8oYMNcpjQlbbNxgSACx6ZwPKugcJmrXlJwnzRnCZiBfSsAJ9dqHH9FHugxYSA\nkApqDSFa3xzTOnY8mZLGRG2D/rJFzPYLiU9DCZ9JH/Q2v8zDQuxmR6iCKrBIOvdm\nbSQUL86cf9ja1jXCjJibIYK0r8PzPbv96ASzjNBI1GENyIUb3b8DB915aE/7o5w=\n=YMjB\n-----END PGP SIGNATURE-----\n", "payload": "tree d8bca65d580fe79d66b0d13f11621474a2cdcecb\nparent a96e3883c130972ac01348df2a912dc97843939d\nparent d00d639c54ae49a35c0c215cd8161af8c7d2e8ee\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1554258974 +0200\ncommitter GitHub <noreply@github.com> 1554258974 +0200\n\nRollup merge of #59630 - nnethercote:shrink-mir-Statement, r=pnkfelix\n\nShrink `mir::Statement`.\n\nThe `InlineAsm` variant is extremely rare, and `mir::Statement` often\ncontributes significantly to peak memory usage.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626", "html_url": "https://github.com/rust-lang/rust/commit/d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a96e3883c130972ac01348df2a912dc97843939d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a96e3883c130972ac01348df2a912dc97843939d", "html_url": "https://github.com/rust-lang/rust/commit/a96e3883c130972ac01348df2a912dc97843939d"}, {"sha": "d00d639c54ae49a35c0c215cd8161af8c7d2e8ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/d00d639c54ae49a35c0c215cd8161af8c7d2e8ee", "html_url": "https://github.com/rust-lang/rust/commit/d00d639c54ae49a35c0c215cd8161af8c7d2e8ee"}], "stats": {"total": 95, "additions": 48, "deletions": 47}, "files": [{"sha": "8424c096e88c019d2907d05436dcfd12c07bdc7f", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626", "patch": "@@ -4,7 +4,7 @@\n \n use crate::hir::def::{CtorKind, Namespace};\n use crate::hir::def_id::DefId;\n-use crate::hir::{self, HirId, InlineAsm};\n+use crate::hir::{self, HirId, InlineAsm as HirInlineAsm};\n use crate::mir::interpret::{ConstValue, InterpError, Scalar};\n use crate::mir::visit::MirVisitable;\n use rustc_apfloat::ieee::{Double, Single};\n@@ -1735,7 +1735,7 @@ pub struct Statement<'tcx> {\n \n // `Statement` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(MEM_SIZE_OF_STATEMENT: mem::size_of::<Statement<'_>>() == 56);\n+static_assert!(MEM_SIZE_OF_STATEMENT: mem::size_of::<Statement<'_>>() == 48);\n \n impl<'tcx> Statement<'tcx> {\n     /// Changes a statement to a nop. This is both faster than deleting instructions and avoids\n@@ -1779,12 +1779,9 @@ pub enum StatementKind<'tcx> {\n     /// End the current live range for the storage of the local.\n     StorageDead(Local),\n \n-    /// Executes a piece of inline Assembly.\n-    InlineAsm {\n-        asm: Box<InlineAsm>,\n-        outputs: Box<[Place<'tcx>]>,\n-        inputs: Box<[(Span, Operand<'tcx>)]>,\n-    },\n+    /// Executes a piece of inline Assembly. Stored in a Box to keep the size\n+    /// of `StatementKind` low.\n+    InlineAsm(Box<InlineAsm<'tcx>>),\n \n     /// Retag references in the given place, ensuring they got fresh tags. This is\n     /// part of the Stacked Borrows model. These statements are currently only interpreted\n@@ -1858,6 +1855,13 @@ pub enum FakeReadCause {\n     ForLet,\n }\n \n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n+pub struct InlineAsm<'tcx> {\n+    pub asm: HirInlineAsm,\n+    pub outputs: Box<[Place<'tcx>]>,\n+    pub inputs: Box<[(Span, Operand<'tcx>)]>,\n+}\n+\n impl<'tcx> Debug for Statement<'tcx> {\n     fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         use self::StatementKind::*;\n@@ -1880,11 +1884,8 @@ impl<'tcx> Debug for Statement<'tcx> {\n                 ref place,\n                 variant_index,\n             } => write!(fmt, \"discriminant({:?}) = {:?}\", place, variant_index),\n-            InlineAsm {\n-                ref asm,\n-                ref outputs,\n-                ref inputs,\n-            } => write!(fmt, \"asm!({:?} : {:?} : {:?})\", asm, outputs, inputs),\n+            InlineAsm(ref asm) =>\n+                write!(fmt, \"asm!({:?} : {:?} : {:?})\", asm.asm, asm.outputs, asm.inputs),\n             AscribeUserType(ref place, ref variance, ref c_ty) => {\n                 write!(fmt, \"AscribeUserType({:?}, {:?}, {:?})\", place, variance, c_ty)\n             }\n@@ -3149,13 +3150,21 @@ EnumTypeFoldableImpl! {\n         (StatementKind::SetDiscriminant) { place, variant_index },\n         (StatementKind::StorageLive)(a),\n         (StatementKind::StorageDead)(a),\n-        (StatementKind::InlineAsm) { asm, outputs, inputs },\n+        (StatementKind::InlineAsm)(a),\n         (StatementKind::Retag)(kind, place),\n         (StatementKind::AscribeUserType)(a, v, b),\n         (StatementKind::Nop),\n     }\n }\n \n+BraceStructTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for InlineAsm<'tcx> {\n+        asm,\n+        outputs,\n+        inputs,\n+    }\n+}\n+\n EnumTypeFoldableImpl! {\n     impl<'tcx, T> TypeFoldable<'tcx> for ClearCrossCrate<T> {\n         (ClearCrossCrate::Clear),"}, {"sha": "b04c28cde571cdfea5c9bf737dd135953b7ad2ea", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626", "patch": "@@ -391,15 +391,15 @@ macro_rules! make_mir_visitor {\n                             location\n                         );\n                     }\n-                    StatementKind::InlineAsm { outputs, inputs, asm: _ } => {\n-                        for output in & $($mutability)? outputs[..] {\n+                    StatementKind::InlineAsm(asm) => {\n+                        for output in & $($mutability)? asm.outputs[..] {\n                             self.visit_place(\n                                 output,\n                                 PlaceContext::MutatingUse(MutatingUseContext::AsmOutput),\n                                 location\n                             );\n                         }\n-                        for (span, input) in & $($mutability)? inputs[..] {\n+                        for (span, input) in & $($mutability)? asm.inputs[..] {\n                             self.visit_span(span);\n                             self.visit_operand(input, location);\n                         }"}, {"sha": "618d05245d2caddfa38c2d199c91125eb4414cc3", "filename": "src/librustc_codegen_ssa/mir/statement.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs?ref=d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626", "patch": "@@ -68,13 +68,13 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n                 bx\n             }\n-            mir::StatementKind::InlineAsm { ref asm, ref outputs, ref inputs } => {\n-                let outputs = outputs.iter().map(|output| {\n+            mir::StatementKind::InlineAsm(ref asm) => {\n+                let outputs = asm.outputs.iter().map(|output| {\n                     self.codegen_place(&mut bx, output)\n                 }).collect();\n \n-                let input_vals = inputs.iter()\n-                    .fold(Vec::with_capacity(inputs.len()), |mut acc, (span, input)| {\n+                let input_vals = asm.inputs.iter()\n+                    .fold(Vec::with_capacity(asm.inputs.len()), |mut acc, (span, input)| {\n                         let op = self.codegen_operand(&mut bx, input);\n                         if let OperandValue::Immediate(_) = op.val {\n                             acc.push(op.immediate());\n@@ -85,8 +85,8 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         acc\n                 });\n \n-                if input_vals.len() == inputs.len() {\n-                    let res = bx.codegen_inline_asm(asm, outputs, input_vals);\n+                if input_vals.len() == asm.inputs.len() {\n+                    let res = bx.codegen_inline_asm(&asm.asm, outputs, input_vals);\n                     if !res {\n                         span_err!(bx.sess(), statement.source_info.span, E0668,\n                                   \"malformed inline assembly\");"}, {"sha": "a8c151a22eebcd7b5d5c495bd23f3d05c15df9a2", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626", "patch": "@@ -525,16 +525,12 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                     flow_state,\n                 );\n             }\n-            StatementKind::InlineAsm {\n-                ref asm,\n-                ref outputs,\n-                ref inputs,\n-            } => {\n+            StatementKind::InlineAsm(ref asm) => {\n                 let context = ContextKind::InlineAsm.new(location);\n-                for (o, output) in asm.outputs.iter().zip(outputs.iter()) {\n+                for (o, output) in asm.asm.outputs.iter().zip(asm.outputs.iter()) {\n                     if o.is_indirect {\n                         // FIXME(eddyb) indirect inline asm outputs should\n-                        // be encoeded through MIR place derefs instead.\n+                        // be encoded through MIR place derefs instead.\n                         self.access_place(\n                             context,\n                             (output, o.span),\n@@ -558,7 +554,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                         );\n                     }\n                 }\n-                for (_, input) in inputs.iter() {\n+                for (_, input) in asm.inputs.iter() {\n                     self.consume_operand(context, (input, span), flow_state);\n                 }\n             }"}, {"sha": "8217200b05788f96707a0a24008fe42265a33cfb", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626", "patch": "@@ -92,16 +92,12 @@ impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n                     JustWrite,\n                 );\n             }\n-            StatementKind::InlineAsm {\n-                ref asm,\n-                ref outputs,\n-                ref inputs,\n-            } => {\n+            StatementKind::InlineAsm(ref asm) => {\n                 let context = ContextKind::InlineAsm.new(location);\n-                for (o, output) in asm.outputs.iter().zip(outputs.iter()) {\n+                for (o, output) in asm.asm.outputs.iter().zip(asm.outputs.iter()) {\n                     if o.is_indirect {\n                         // FIXME(eddyb) indirect inline asm outputs should\n-                        // be encoeded through MIR place derefs instead.\n+                        // be encoded through MIR place derefs instead.\n                         self.access_place(\n                             context,\n                             output,\n@@ -117,7 +113,7 @@ impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n                         );\n                     }\n                 }\n-                for (_, input) in inputs.iter() {\n+                for (_, input) in asm.inputs.iter() {\n                     self.consume_operand(context, input);\n                 }\n             }"}, {"sha": "b58914b017fd4601f4a677772ed2fa9d93c0ac17", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626", "patch": "@@ -188,11 +188,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     block,\n                     Statement {\n                         source_info,\n-                        kind: StatementKind::InlineAsm {\n-                            asm: box asm.clone(),\n+                        kind: StatementKind::InlineAsm(box InlineAsm {\n+                            asm: asm.clone(),\n                             outputs,\n                             inputs,\n-                        },\n+                        }),\n                     },\n                 );\n                 this.block_context.pop();"}, {"sha": "5a3105ed160492b1751b7d2ecda94e1d1a01bcc5", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626", "patch": "@@ -288,8 +288,8 @@ impl<'a, 'gcx, 'tcx> BitDenotation<'tcx> for Borrows<'a, 'gcx, 'tcx> {\n                 self.kill_borrows_on_place(sets, &Place::Base(PlaceBase::Local(local)));\n             }\n \n-            mir::StatementKind::InlineAsm { ref outputs, ref asm, .. } => {\n-                for (output, kind) in outputs.iter().zip(&asm.outputs) {\n+            mir::StatementKind::InlineAsm(ref asm) => {\n+                for (output, kind) in asm.outputs.iter().zip(&asm.asm.outputs) {\n                     if !kind.is_indirect && !kind.is_rw {\n                         self.kill_borrows_on_place(sets, output);\n                     }"}, {"sha": "011dc54f3b315d1e1ae5e27acb3068eee2bf1f93", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=d31d80b7d468b4e0fc1fa4d87cfa4af7b0dcc626", "patch": "@@ -272,13 +272,13 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n             StatementKind::FakeRead(_, ref place) => {\n                 self.create_move_path(place);\n             }\n-            StatementKind::InlineAsm { ref outputs, ref inputs, ref asm } => {\n-                for (output, kind) in outputs.iter().zip(&asm.outputs) {\n+            StatementKind::InlineAsm(ref asm) => {\n+                for (output, kind) in asm.outputs.iter().zip(&asm.asm.outputs) {\n                     if !kind.is_indirect {\n                         self.gather_init(output, InitKind::Deep);\n                     }\n                 }\n-                for (_, input) in inputs.iter() {\n+                for (_, input) in asm.inputs.iter() {\n                     self.gather_operand(input);\n                 }\n             }"}]}