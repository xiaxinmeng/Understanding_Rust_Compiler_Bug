{"sha": "a9ecfd729507d19946f0b66c78cebca1e23e9a15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZWNmZDcyOTUwN2QxOTk0NmYwYjY2Yzc4Y2ViY2ExZTIzZTlhMTU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-15T18:23:11Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-15T19:58:50Z"}, "message": "Hygienize use of built-in macros in the standard library", "tree": {"sha": "f29b8a76e33b61b40e12edac49b1b1aae10a9296", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f29b8a76e33b61b40e12edac49b1b1aae10a9296"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9ecfd729507d19946f0b66c78cebca1e23e9a15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ecfd729507d19946f0b66c78cebca1e23e9a15", "html_url": "https://github.com/rust-lang/rust/commit/a9ecfd729507d19946f0b66c78cebca1e23e9a15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9ecfd729507d19946f0b66c78cebca1e23e9a15/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7af19c279b8b7ea3d2c21fcbd67164af8d5d968", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7af19c279b8b7ea3d2c21fcbd67164af8d5d968", "html_url": "https://github.com/rust-lang/rust/commit/f7af19c279b8b7ea3d2c21fcbd67164af8d5d968"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "0b5e186d4c77b17c5ae683437df783fea53bd320", "filename": "src/liballoc/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9ecfd729507d19946f0b66c78cebca1e23e9a15/src%2Fliballoc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ecfd729507d19946f0b66c78cebca1e23e9a15/src%2Fliballoc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fmacros.rs?ref=a9ecfd729507d19946f0b66c78cebca1e23e9a15", "patch": "@@ -98,5 +98,5 @@ macro_rules! vec {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! format {\n-    ($($arg:tt)*) => ($crate::fmt::format(format_args!($($arg)*)))\n+    ($($arg:tt)*) => ($crate::fmt::format(::core::format_args!($($arg)*)))\n }"}, {"sha": "c41763756b94de293547bf3acad9720caba8e050", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a9ecfd729507d19946f0b66c78cebca1e23e9a15/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ecfd729507d19946f0b66c78cebca1e23e9a15/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=a9ecfd729507d19946f0b66c78cebca1e23e9a15", "patch": "@@ -9,14 +9,14 @@ macro_rules! panic {\n         $crate::panic!(\"explicit panic\")\n     );\n     ($msg:expr) => ({\n-        $crate::panicking::panic(&($msg, file!(), line!(), __rust_unstable_column!()))\n+        $crate::panicking::panic(&($msg, $crate::file!(), $crate::line!(), $crate::column!()))\n     });\n     ($msg:expr,) => (\n         $crate::panic!($msg)\n     );\n     ($fmt:expr, $($arg:tt)+) => ({\n-        $crate::panicking::panic_fmt(format_args!($fmt, $($arg)+),\n-                                     &(file!(), line!(), __rust_unstable_column!()))\n+        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+),\n+                                     &($crate::file!(), $crate::line!(), $crate::column!()))\n     });\n }\n \n@@ -70,7 +70,7 @@ macro_rules! assert_eq {\n                     panic!(r#\"assertion failed: `(left == right)`\n   left: `{:?}`,\n  right: `{:?}`: {}\"#, &*left_val, &*right_val,\n-                           format_args!($($arg)+))\n+                           $crate::format_args!($($arg)+))\n                 }\n             }\n         }\n@@ -127,7 +127,7 @@ macro_rules! assert_ne {\n                     panic!(r#\"assertion failed: `(left != right)`\n   left: `{:?}`,\n  right: `{:?}`: {}\"#, &*left_val, &*right_val,\n-                           format_args!($($arg)+))\n+                           $crate::format_args!($($arg)+))\n                 }\n             }\n         }\n@@ -181,7 +181,7 @@ macro_rules! assert_ne {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! debug_assert {\n-    ($($arg:tt)*) => (if cfg!(debug_assertions) { assert!($($arg)*); })\n+    ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert!($($arg)*); })\n }\n \n /// Asserts that two expressions are equal to each other.\n@@ -208,7 +208,7 @@ macro_rules! debug_assert {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! debug_assert_eq {\n-    ($($arg:tt)*) => (if cfg!(debug_assertions) { $crate::assert_eq!($($arg)*); })\n+    ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert_eq!($($arg)*); })\n }\n \n /// Asserts that two expressions are not equal to each other.\n@@ -235,7 +235,7 @@ macro_rules! debug_assert_eq {\n #[macro_export]\n #[stable(feature = \"assert_ne\", since = \"1.13.0\")]\n macro_rules! debug_assert_ne {\n-    ($($arg:tt)*) => (if cfg!(debug_assertions) { $crate::assert_ne!($($arg)*); })\n+    ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert_ne!($($arg)*); })\n }\n \n /// Unwraps a result or propagates its error.\n@@ -386,7 +386,7 @@ macro_rules! r#try {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! write {\n-    ($dst:expr, $($arg:tt)*) => ($dst.write_fmt(format_args!($($arg)*)))\n+    ($dst:expr, $($arg:tt)*) => ($dst.write_fmt($crate::format_args!($($arg)*)))\n }\n \n /// Write formatted data into a buffer, with a newline appended.\n@@ -446,7 +446,7 @@ macro_rules! writeln {\n         $crate::writeln!($dst)\n     );\n     ($dst:expr, $($arg:tt)*) => (\n-        $dst.write_fmt(format_args_nl!($($arg)*))\n+        $dst.write_fmt($crate::format_args_nl!($($arg)*))\n     );\n }\n \n@@ -515,7 +515,7 @@ macro_rules! unreachable {\n         $crate::unreachable!($msg)\n     });\n     ($fmt:expr, $($arg:tt)*) => ({\n-        panic!(concat!(\"internal error: entered unreachable code: \", $fmt), $($arg)*)\n+        panic!($crate::concat!(\"internal error: entered unreachable code: \", $fmt), $($arg)*)\n     });\n }\n \n@@ -573,7 +573,7 @@ macro_rules! unreachable {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! unimplemented {\n     () => (panic!(\"not yet implemented\"));\n-    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", format_args!($($arg)+)));\n+    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", $crate::format_args!($($arg)+)));\n }\n \n /// Indicates unfinished code.\n@@ -632,7 +632,7 @@ macro_rules! unimplemented {\n #[unstable(feature = \"todo_macro\", issue = \"59277\")]\n macro_rules! todo {\n     () => (panic!(\"not yet implemented\"));\n-    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", format_args!($($arg)+)));\n+    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", $crate::format_args!($($arg)+)));\n }\n \n /// Definitions of built-in macros."}, {"sha": "9fafe26104ab470efb84de74651d5c4652f20af2", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a9ecfd729507d19946f0b66c78cebca1e23e9a15/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ecfd729507d19946f0b66c78cebca1e23e9a15/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=a9ecfd729507d19946f0b66c78cebca1e23e9a15", "patch": "@@ -59,14 +59,14 @@ macro_rules! panic {\n         $crate::panic!(\"explicit panic\")\n     });\n     ($msg:expr) => ({\n-        $crate::rt::begin_panic($msg, &(file!(), line!(), __rust_unstable_column!()))\n+        $crate::rt::begin_panic($msg, &($crate::file!(), $crate::line!(), $crate::column!()))\n     });\n     ($msg:expr,) => ({\n         $crate::panic!($msg)\n     });\n     ($fmt:expr, $($arg:tt)+) => ({\n-        $crate::rt::begin_panic_fmt(&format_args!($fmt, $($arg)+),\n-                                    &(file!(), line!(), __rust_unstable_column!()))\n+        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+),\n+                                    &($crate::file!(), $crate::line!(), $crate::column!()))\n     });\n }\n \n@@ -113,7 +113,7 @@ macro_rules! panic {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable(print_internals)]\n macro_rules! print {\n-    ($($arg:tt)*) => ($crate::io::_print(format_args!($($arg)*)));\n+    ($($arg:tt)*) => ($crate::io::_print($crate::format_args!($($arg)*)));\n }\n \n /// Prints to the standard output, with a newline.\n@@ -147,7 +147,7 @@ macro_rules! print {\n macro_rules! println {\n     () => ($crate::print!(\"\\n\"));\n     ($($arg:tt)*) => ({\n-        $crate::io::_print(format_args_nl!($($arg)*));\n+        $crate::io::_print($crate::format_args_nl!($($arg)*));\n     })\n }\n \n@@ -176,7 +176,7 @@ macro_rules! println {\n #[stable(feature = \"eprint\", since = \"1.19.0\")]\n #[allow_internal_unstable(print_internals)]\n macro_rules! eprint {\n-    ($($arg:tt)*) => ($crate::io::_eprint(format_args!($($arg)*)));\n+    ($($arg:tt)*) => ($crate::io::_eprint($crate::format_args!($($arg)*)));\n }\n \n /// Prints to the standard error, with a newline.\n@@ -206,7 +206,7 @@ macro_rules! eprint {\n macro_rules! eprintln {\n     () => ($crate::eprint!(\"\\n\"));\n     ($($arg:tt)*) => ({\n-        $crate::io::_eprint(format_args_nl!($($arg)*));\n+        $crate::io::_eprint($crate::format_args_nl!($($arg)*));\n     })\n }\n \n@@ -337,15 +337,15 @@ macro_rules! eprintln {\n #[stable(feature = \"dbg_macro\", since = \"1.32.0\")]\n macro_rules! dbg {\n     () => {\n-        $crate::eprintln!(\"[{}:{}]\", file!(), line!());\n+        $crate::eprintln!(\"[{}:{}]\", $crate::file!(), $crate::line!());\n     };\n     ($val:expr) => {\n         // Use of `match` here is intentional because it affects the lifetimes\n         // of temporaries - https://stackoverflow.com/a/48732525/1063961\n         match $val {\n             tmp => {\n                 $crate::eprintln!(\"[{}:{}] {} = {:#?}\",\n-                    file!(), line!(), stringify!($val), &tmp);\n+                    $crate::file!(), $crate::line!(), $crate::stringify!($val), &tmp);\n                 tmp\n             }\n         }"}, {"sha": "202a9235adbace98ed0df1f04f76f7d78adce6f8", "filename": "src/test/ui/macros/trace-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9ecfd729507d19946f0b66c78cebca1e23e9a15/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ecfd729507d19946f0b66c78cebca1e23e9a15/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr?ref=a9ecfd729507d19946f0b66c78cebca1e23e9a15", "patch": "@@ -5,5 +5,5 @@ LL |     println!(\"Hello, World!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expanding `println! { \"Hello, World!\" }`\n-   = note: to `{ $crate :: io :: _print (format_args_nl ! (\"Hello, World!\")) ; }`\n+   = note: to `{ $crate :: io :: _print ($crate :: format_args_nl ! (\"Hello, World!\")) ; }`\n "}]}