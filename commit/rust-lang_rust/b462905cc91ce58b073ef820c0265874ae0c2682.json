{"sha": "b462905cc91ce58b073ef820c0265874ae0c2682", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NjI5MDVjYzkxY2U1OGIwNzNlZjgyMGMwMjY1ODc0YWUwYzI2ODI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-10-01T18:30:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-01T18:30:22Z"}, "message": "Merge pull request #4604 from Manishearth/rustup\n\nRustup to rustc 1.40.0-nightly (702b45e40 2019-10-01)", "tree": {"sha": "0f1105197eb88f376fbc0d3d4b7509124ba91492", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f1105197eb88f376fbc0d3d4b7509124ba91492"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b462905cc91ce58b073ef820c0265874ae0c2682", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdk5s+CRBK7hj4Ov3rIwAAdHIIAJ0zrQrw2ftReliZaP/PGlpo\ncUnFmiMnghAl603ShJLfiu3MXhMI+Vu2Jl6A+Z00HCupOuWPFrjmxkqBHU1dpB6i\nMG+bP9QJP19o25k6U1EHN9HN3pJtTTIJs2MZMGGOAh/4sHg2u5FoCgv/NNFaTyep\n76gnRtZ93p5VGjHmbYWu0GreKXwGeaJ9umCU3NcrbENjs+evis9/h9mte93dhIL7\nydvCaMDLJuMru3g10gIMGYeSOhu6FMhth2IfEu+w7jhwZtPs/2OmhiF6QqRYh5Zt\ni+iGJlBDLu8FW8PiWphsMGOEz8+T46fX0FylsWKU/8mwtQqEqJiWQv5zkTHqsoQ=\n=v6Um\n-----END PGP SIGNATURE-----\n", "payload": "tree 0f1105197eb88f376fbc0d3d4b7509124ba91492\nparent 406e89a00c3cca86abe619b703f192bf699f92f6\nparent 9e166e09b8e4883ba6b47e190e2e7b8b72126c6f\nauthor Manish Goregaokar <manishsmail@gmail.com> 1569954622 -0700\ncommitter GitHub <noreply@github.com> 1569954622 -0700\n\nMerge pull request #4604 from Manishearth/rustup\n\nRustup to rustc 1.40.0-nightly (702b45e40 2019-10-01)"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b462905cc91ce58b073ef820c0265874ae0c2682", "html_url": "https://github.com/rust-lang/rust/commit/b462905cc91ce58b073ef820c0265874ae0c2682", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b462905cc91ce58b073ef820c0265874ae0c2682/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "406e89a00c3cca86abe619b703f192bf699f92f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/406e89a00c3cca86abe619b703f192bf699f92f6", "html_url": "https://github.com/rust-lang/rust/commit/406e89a00c3cca86abe619b703f192bf699f92f6"}, {"sha": "9e166e09b8e4883ba6b47e190e2e7b8b72126c6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e166e09b8e4883ba6b47e190e2e7b8b72126c6f", "html_url": "https://github.com/rust-lang/rust/commit/9e166e09b8e4883ba6b47e190e2e7b8b72126c6f"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "52477f68cd30291dbbeb584f7eb22d0a99c8fd78", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b462905cc91ce58b073ef820c0265874ae0c2682/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b462905cc91ce58b073ef820c0265874ae0c2682/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=b462905cc91ce58b073ef820c0265874ae0c2682", "patch": "@@ -476,15 +476,21 @@ declare_lint_pass!(Loops => [\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Loops {\n     #[allow(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if let Some((pat, arg, body)) = higher::for_loop(expr) {\n+            // we don't want to check expanded macros\n+            // this check is not at the top of the function\n+            // since higher::for_loop expressions are marked as expansions\n+            if body.span.from_expansion() {\n+                return;\n+            }\n+            check_for_loop(cx, pat, arg, body, expr);\n+        }\n+\n         // we don't want to check expanded macros\n         if expr.span.from_expansion() {\n             return;\n         }\n \n-        if let Some((pat, arg, body)) = higher::for_loop(expr) {\n-            check_for_loop(cx, pat, arg, body, expr);\n-        }\n-\n         // check for never_loop\n         if let ExprKind::Loop(ref block, _, _) = expr.kind {\n             match never_loop_block(block, expr.hir_id) {\n@@ -1039,10 +1045,6 @@ fn check_for_loop_range<'a, 'tcx>(\n     body: &'tcx Expr,\n     expr: &'tcx Expr,\n ) {\n-    if expr.span.from_expansion() {\n-        return;\n-    }\n-\n     if let Some(higher::Range {\n         start: Some(start),\n         ref end,"}]}