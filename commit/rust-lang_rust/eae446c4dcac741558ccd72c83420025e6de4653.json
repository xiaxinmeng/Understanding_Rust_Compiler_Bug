{"sha": "eae446c4dcac741558ccd72c83420025e6de4653", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZTQ0NmM0ZGNhYzc0MTU1OGNjZDcyYzgzNDIwMDI1ZTZkZTQ2NTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-04T02:15:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-04T02:15:04Z"}, "message": "Auto merge of #43459 - ids1024:asrawfd, r=alexcrichton\n\nImplement AsRawFd for Stdin, Stdout, and Stderr\n\nhttps://github.com/rust-lang/rfcs/issues/2074", "tree": {"sha": "bf42c8258093adfd3fb51fd92e598e975f3b34fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf42c8258093adfd3fb51fd92e598e975f3b34fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eae446c4dcac741558ccd72c83420025e6de4653", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eae446c4dcac741558ccd72c83420025e6de4653", "html_url": "https://github.com/rust-lang/rust/commit/eae446c4dcac741558ccd72c83420025e6de4653", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eae446c4dcac741558ccd72c83420025e6de4653/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d2a6df38442a297b4ae25899700e29d1f150bb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d2a6df38442a297b4ae25899700e29d1f150bb0", "html_url": "https://github.com/rust-lang/rust/commit/1d2a6df38442a297b4ae25899700e29d1f150bb0"}, {"sha": "64e426e8e9fff27a7dc0a1bdf297bf5fd3f10b15", "url": "https://api.github.com/repos/rust-lang/rust/commits/64e426e8e9fff27a7dc0a1bdf297bf5fd3f10b15", "html_url": "https://github.com/rust-lang/rust/commit/64e426e8e9fff27a7dc0a1bdf297bf5fd3f10b15"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "c4d99568c55c79a37285e671a532be80a94dca1e", "filename": "src/libstd/sys/redox/ext/io.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eae446c4dcac741558ccd72c83420025e6de4653/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae446c4dcac741558ccd72c83420025e6de4653/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fio.rs?ref=eae446c4dcac741558ccd72c83420025e6de4653", "patch": "@@ -15,6 +15,7 @@\n use fs;\n use net;\n use sys;\n+use io;\n use sys_common::{self, AsInner, FromInner, IntoInner};\n \n /// Raw file descriptors.\n@@ -109,6 +110,21 @@ impl AsRawFd for net::UdpSocket {\n     }\n }\n \n+#[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n+impl AsRawFd for io::Stdin {\n+    fn as_raw_fd(&self) -> RawFd { 0 }\n+}\n+\n+#[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n+impl AsRawFd for io::Stdout {\n+    fn as_raw_fd(&self) -> RawFd { 1 }\n+}\n+\n+#[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n+impl AsRawFd for io::Stderr {\n+    fn as_raw_fd(&self) -> RawFd { 2 }\n+}\n+\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawFd for net::TcpStream {\n     unsafe fn from_raw_fd(fd: RawFd) -> net::TcpStream {"}, {"sha": "a0323d933d65a9cf9bc47cdccc29c1151151b221", "filename": "src/libstd/sys/unix/ext/io.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eae446c4dcac741558ccd72c83420025e6de4653/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae446c4dcac741558ccd72c83420025e6de4653/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs?ref=eae446c4dcac741558ccd72c83420025e6de4653", "patch": "@@ -16,7 +16,9 @@ use fs;\n use net;\n use os::raw;\n use sys;\n+use io;\n use sys_common::{self, AsInner, FromInner, IntoInner};\n+use libc;\n \n /// Raw file descriptors.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -104,6 +106,21 @@ impl AsRawFd for net::UdpSocket {\n     fn as_raw_fd(&self) -> RawFd { *self.as_inner().socket().as_inner() }\n }\n \n+#[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n+impl AsRawFd for io::Stdin {\n+    fn as_raw_fd(&self) -> RawFd { libc::STDIN_FILENO }\n+}\n+\n+#[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n+impl AsRawFd for io::Stdout {\n+    fn as_raw_fd(&self) -> RawFd { libc::STDOUT_FILENO }\n+}\n+\n+#[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n+impl AsRawFd for io::Stderr {\n+    fn as_raw_fd(&self) -> RawFd { libc::STDERR_FILENO }\n+}\n+\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawFd for net::TcpStream {\n     unsafe fn from_raw_fd(fd: RawFd) -> net::TcpStream {"}, {"sha": "90128dda088a998862d64b48ddc9d64c3a8a69bf", "filename": "src/libstd/sys/windows/ext/io.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eae446c4dcac741558ccd72c83420025e6de4653/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae446c4dcac741558ccd72c83420025e6de4653/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs?ref=eae446c4dcac741558ccd72c83420025e6de4653", "patch": "@@ -15,6 +15,7 @@ use os::windows::raw;\n use net;\n use sys_common::{self, AsInner, FromInner, IntoInner};\n use sys;\n+use io;\n use sys::c;\n \n /// Raw HANDLEs.\n@@ -71,6 +72,27 @@ impl AsRawHandle for fs::File {\n     }\n }\n \n+#[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n+impl AsRawHandle for io::Stdin {\n+    fn as_raw_handle(&self) -> RawHandle {\n+        unsafe { c::GetStdHandle(c::STD_INPUT_HANDLE) as RawHandle }\n+    }\n+}\n+\n+#[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n+impl AsRawHandle for io::Stdout {\n+    fn as_raw_handle(&self) -> RawHandle {\n+        unsafe { c::GetStdHandle(c::STD_OUTPUT_HANDLE) as RawHandle }\n+    }\n+}\n+\n+#[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n+impl AsRawHandle for io::Stderr {\n+    fn as_raw_handle(&self) -> RawHandle {\n+        unsafe { c::GetStdHandle(c::STD_ERROR_HANDLE) as RawHandle }\n+    }\n+}\n+\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawHandle for fs::File {\n     unsafe fn from_raw_handle(handle: RawHandle) -> fs::File {"}]}