{"sha": "1830c9e8f946f20c9c81f46f8b5de29de24d58a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MzBjOWU4Zjk0NmYyMGM5YzgxZjQ2ZjhiNWRlMjlkZTI0ZDU4YTM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-12T19:43:26Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T13:30:54Z"}, "message": "use a `UnlessNll` flag to consolidate error reporting paths", "tree": {"sha": "66987a4a5adb862a121f01a562e85e510f348269", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66987a4a5adb862a121f01a562e85e510f348269"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1830c9e8f946f20c9c81f46f8b5de29de24d58a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1830c9e8f946f20c9c81f46f8b5de29de24d58a3", "html_url": "https://github.com/rust-lang/rust/commit/1830c9e8f946f20c9c81f46f8b5de29de24d58a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1830c9e8f946f20c9c81f46f8b5de29de24d58a3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84563dac88f1bda275ccbc8bb66067fd6cbbdcfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/84563dac88f1bda275ccbc8bb66067fd6cbbdcfe", "html_url": "https://github.com/rust-lang/rust/commit/84563dac88f1bda275ccbc8bb66067fd6cbbdcfe"}], "stats": {"total": 80, "additions": 32, "deletions": 48}, "files": [{"sha": "fe9e00f8a60383a3cf19bad67812b5e35b47a1a0", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1830c9e8f946f20c9c81f46f8b5de29de24d58a3/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1830c9e8f946f20c9c81f46f8b5de29de24d58a3/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=1830c9e8f946f20c9c81f46f8b5de29de24d58a3", "patch": "@@ -55,7 +55,7 @@\n //! ported to this system, and which relies on string concatenation at the\n //! time of error detection.\n \n-use infer;\n+use infer::{self, UnlessNll};\n use super::{InferCtxt, RegionVariableOrigin, SubregionOrigin, TypeTrace, ValuePairs};\n use super::region_constraints::GenericKind;\n use super::lexical_region_resolve::RegionResolutionError;\n@@ -298,13 +298,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         &self,\n         region_scope_tree: &region::ScopeTree,\n         errors: &Vec<RegionResolutionError<'tcx>>,\n-        will_later_be_reported_by_nll: bool,\n+        unless_nll: UnlessNll,\n     ) {\n         debug!(\"report_region_errors(): {} errors to start\", errors.len());\n \n         // If the errors will later be reported by NLL, choose wether to display them or not based\n         // on the borrowck mode\n-        if will_later_be_reported_by_nll {\n+        if unless_nll.0 {\n             match self.tcx.borrowck_mode() {\n                 // If we're on AST or Migrate mode, report AST region errors\n                 BorrowckMode::Ast | BorrowckMode::Migrate => {},"}, {"sha": "6e20194dff9b75c635f5e7ca100b839c58a759da", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 12, "deletions": 29, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1830c9e8f946f20c9c81f46f8b5de29de24d58a3/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1830c9e8f946f20c9c81f46f8b5de29de24d58a3/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=1830c9e8f946f20c9c81f46f8b5de29de24d58a3", "patch": "@@ -80,6 +80,16 @@ pub type Bound<T> = Option<T>;\n pub type UnitResult<'tcx> = RelateResult<'tcx, ()>; // \"unify result\"\n pub type FixupResult<T> = Result<T, FixupError>; // \"fixup result\"\n \n+/// A flag that is given when running region resolution: if true, it\n+/// indicates that we should not report the region errors to the user\n+/// if NLL is enabled, since NLL will also detect them (and do a\n+/// better job of it).\n+///\n+/// Currently, NLL only runs on HIR bodies, so you should use `false`\n+/// unless you are region-checking a `hir::Body` (basically, a fn or\n+/// expression).\n+pub struct UnlessNll(pub bool);\n+\n pub struct InferCtxt<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     pub tcx: TyCtxt<'a, 'gcx, 'tcx>,\n \n@@ -1039,34 +1049,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         region_context: DefId,\n         region_map: &region::ScopeTree,\n         outlives_env: &OutlivesEnvironment<'tcx>,\n-    ) {\n-        self.resolve_regions_and_report_errors_inner(\n-            region_context,\n-            region_map,\n-            outlives_env,\n-            false,\n-        )\n-    }\n-\n-    /// Like `resolve_regions_and_report_errors`, but skips error\n-    /// reporting if NLL is enabled.  This is used for fn bodies where\n-    /// the same error may later be reported by the NLL-based\n-    /// inference.\n-    pub fn resolve_regions_and_report_errors_unless_nll(\n-        &self,\n-        region_context: DefId,\n-        region_map: &region::ScopeTree,\n-        outlives_env: &OutlivesEnvironment<'tcx>,\n-    ) {\n-        self.resolve_regions_and_report_errors_inner(region_context, region_map, outlives_env, true)\n-    }\n-\n-    fn resolve_regions_and_report_errors_inner(\n-        &self,\n-        region_context: DefId,\n-        region_map: &region::ScopeTree,\n-        outlives_env: &OutlivesEnvironment<'tcx>,\n-        will_later_be_reported_by_nll: bool,\n+        unless_nll: UnlessNll,\n     ) {\n         assert!(\n             self.is_tainted_by_errors() || self.region_obligations.borrow().is_empty(),\n@@ -1098,7 +1081,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             // this infcx was in use.  This is totally hokey but\n             // otherwise we have a hard time separating legit region\n             // errors from silly ones.\n-            self.report_region_errors(region_map, &errors, will_later_be_reported_by_nll);\n+            self.report_region_errors(region_map, &errors, unless_nll);\n         }\n     }\n "}, {"sha": "6c0fe157a2a6593820d970efff1cb2e7908dceab", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1830c9e8f946f20c9c81f46f8b5de29de24d58a3/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1830c9e8f946f20c9c81f46f8b5de29de24d58a3/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=1830c9e8f946f20c9c81f46f8b5de29de24d58a3", "patch": "@@ -20,6 +20,7 @@ pub use self::ObligationCauseCode::*;\n use chalk_engine;\n use hir;\n use hir::def_id::DefId;\n+use infer::UnlessNll;\n use infer::outlives::env::OutlivesEnvironment;\n use middle::region;\n use mir::interpret::ConstEvalErr;\n@@ -715,7 +716,12 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // cares about declarations like `'a: 'b`.\n         let outlives_env = OutlivesEnvironment::new(elaborated_env);\n \n-        infcx.resolve_regions_and_report_errors(region_context, &region_scope_tree, &outlives_env);\n+        infcx.resolve_regions_and_report_errors(\n+            region_context,\n+            &region_scope_tree,\n+            &outlives_env,\n+            UnlessNll(false),\n+        );\n \n         let predicates = match infcx.fully_resolve(&predicates) {\n             Ok(predicates) => predicates,"}, {"sha": "c6e0da309a40ffdf795288a2e1e91d05753742df", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1830c9e8f946f20c9c81f46f8b5de29de24d58a3/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1830c9e8f946f20c9c81f46f8b5de29de24d58a3/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=1830c9e8f946f20c9c81f46f8b5de29de24d58a3", "patch": "@@ -11,7 +11,7 @@\n use check::regionck::RegionCtxt;\n \n use hir::def_id::DefId;\n-use rustc::infer::{self, InferOk};\n+use rustc::infer::{self, InferOk, UnlessNll};\n use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::middle::region;\n use rustc::ty::subst::{Subst, Substs, UnpackedKind};\n@@ -128,7 +128,7 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n         // conservative. -nmatsakis\n         let outlives_env = OutlivesEnvironment::new(ty::ParamEnv::empty());\n \n-        infcx.resolve_regions_and_report_errors(drop_impl_did, &region_scope_tree, &outlives_env);\n+        infcx.resolve_regions_and_report_errors(drop_impl_did, &region_scope_tree, &outlives_env, UnlessNll(false));\n         Ok(())\n     })\n }"}, {"sha": "3c462c1ae7a25a5d9c2385b92c492542dd706c22", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1830c9e8f946f20c9c81f46f8b5de29de24d58a3/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1830c9e8f946f20c9c81f46f8b5de29de24d58a3/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=1830c9e8f946f20c9c81f46f8b5de29de24d58a3", "patch": "@@ -88,7 +88,7 @@ use middle::mem_categorization as mc;\n use middle::mem_categorization::Categorization;\n use middle::region;\n use rustc::hir::def_id::DefId;\n-use rustc::infer;\n+use rustc::infer::{self, UnlessNll};\n use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::ty::adjustment;\n use rustc::ty::subst::Substs;\n@@ -140,7 +140,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             rcx.visit_body(body);\n             rcx.visit_region_obligations(id);\n         }\n-        rcx.resolve_regions_and_report_errors_unless_nll();\n+        rcx.resolve_regions_and_report_errors(UnlessNll(true));\n \n         assert!(self.tables.borrow().free_region_map.is_empty());\n         self.tables.borrow_mut().free_region_map = rcx.outlives_environment.into_free_region_map();\n@@ -162,7 +162,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             .add_implied_bounds(self, wf_tys, item_id, span);\n         rcx.outlives_environment.save_implied_bounds(item_id);\n         rcx.visit_region_obligations(item_id);\n-        rcx.resolve_regions_and_report_errors();\n+        rcx.resolve_regions_and_report_errors(UnlessNll(false));\n     }\n \n     /// Region check a function body. Not invoked on closures, but\n@@ -190,7 +190,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             rcx.visit_fn_body(fn_id, body, self.tcx.hir.span(fn_id));\n         }\n \n-        rcx.resolve_regions_and_report_errors_unless_nll();\n+        rcx.resolve_regions_and_report_errors(UnlessNll(true));\n \n         // In this mode, we also copy the free-region-map into the\n         // tables of the enclosing fcx. In the other regionck modes\n@@ -399,19 +399,12 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n         );\n     }\n \n-    fn resolve_regions_and_report_errors(&self) {\n+    fn resolve_regions_and_report_errors(&self, unless_nll: UnlessNll) {\n         self.fcx.resolve_regions_and_report_errors(\n             self.subject_def_id,\n             &self.region_scope_tree,\n             &self.outlives_environment,\n-        );\n-    }\n-\n-    fn resolve_regions_and_report_errors_unless_nll(&self) {\n-        self.fcx.resolve_regions_and_report_errors_unless_nll(\n-            self.subject_def_id,\n-            &self.region_scope_tree,\n-            &self.outlives_environment,\n+            unless_nll,\n         );\n     }\n "}, {"sha": "4def76e892289bf3c0410a0d68927558f7de84e2", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1830c9e8f946f20c9c81f46f8b5de29de24d58a3/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1830c9e8f946f20c9c81f46f8b5de29de24d58a3/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=1830c9e8f946f20c9c81f46f8b5de29de24d58a3", "patch": "@@ -11,6 +11,7 @@\n //! Check properties that are required by built-in traits and set\n //! up data structures required by type-checking/codegen.\n \n+use rustc::infer::UnlessNll;\n use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::middle::region;\n use rustc::middle::lang_items::UnsizeTraitLangItem;\n@@ -396,6 +397,7 @@ pub fn coerce_unsized_info<'a, 'gcx>(gcx: TyCtxt<'a, 'gcx, 'gcx>,\n             impl_did,\n             &region_scope_tree,\n             &outlives_env,\n+            UnlessNll(false),\n         );\n \n         CoerceUnsizedInfo {"}]}