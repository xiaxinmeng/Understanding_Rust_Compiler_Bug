{"sha": "ba71a63fde087b5bddd71bc13b95cee4b71da8e2", "node_id": "C_kwDOAAsO6NoAKGJhNzFhNjNmZGUwODdiNWJkZGQ3MWJjMTNiOTVjZWU0YjcxZGE4ZTI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-14T16:17:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-14T16:17:57Z"}, "message": "Rollup merge of #105578 - erikdesjardins:addrspacecast, r=bjorn3\n\nFix transmutes between pointers in different address spaces (e.g. fn ptrs on AVR)\n\nCurrently, this causes a verifier error (https://godbolt.org/z/YYohed4bj), since it uses `bitcast`, which can't convert between address spaces.\n\nUncovered due to https://github.com/rust-lang/rust/pull/105545#discussion_r1045269309\n\nr? `@bjorn3`", "tree": {"sha": "f5d4f8840a82289cb3e516541c8d525d6d01de4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5d4f8840a82289cb3e516541c8d525d6d01de4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba71a63fde087b5bddd71bc13b95cee4b71da8e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjmfc1CRBK7hj4Ov3rIwAAgSUIAI79IC7JpNOvk5ZJRe4Yzez8\nHNeWdgSoykgqNfL1LJveUj0EAA+XL2uZv8hkSyQxmcNYV86fPDR2pn6/6SvBNoYQ\nGwngW1F+FbPVGs0P+UpO+lJDnuzuQKnizYXwbhitZ2vTXcY2gjwgewPupVBt5xmN\n+HcDcHPrTLqsd4ILPT6hVEGML5tu0qixl7JmaN68d/ODgEJOE8rbL4O482HXKbNi\nbei0o+V3MnHW3069Yol8+xSHCaRbycl8SWVCDBZHgANTJmy2DrZgn5MM4dfNavk2\nON57mZOlBw7JcJcdJmaVJRpNiQ8KhJn8a0BqqjgzTkDaoND8M+jI/oF19xh5HAI=\n=4GeZ\n-----END PGP SIGNATURE-----\n", "payload": "tree f5d4f8840a82289cb3e516541c8d525d6d01de4e\nparent 35ff2cf29570b2e0a94dbe014258284f6f000749\nparent 6085d330339f6206cc449357db15d94328c207da\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671034677 +0100\ncommitter GitHub <noreply@github.com> 1671034677 +0100\n\nRollup merge of #105578 - erikdesjardins:addrspacecast, r=bjorn3\n\nFix transmutes between pointers in different address spaces (e.g. fn ptrs on AVR)\n\nCurrently, this causes a verifier error (https://godbolt.org/z/YYohed4bj), since it uses `bitcast`, which can't convert between address spaces.\n\nUncovered due to https://github.com/rust-lang/rust/pull/105545#discussion_r1045269309\n\nr? `@bjorn3`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba71a63fde087b5bddd71bc13b95cee4b71da8e2", "html_url": "https://github.com/rust-lang/rust/commit/ba71a63fde087b5bddd71bc13b95cee4b71da8e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba71a63fde087b5bddd71bc13b95cee4b71da8e2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35ff2cf29570b2e0a94dbe014258284f6f000749", "url": "https://api.github.com/repos/rust-lang/rust/commits/35ff2cf29570b2e0a94dbe014258284f6f000749", "html_url": "https://github.com/rust-lang/rust/commit/35ff2cf29570b2e0a94dbe014258284f6f000749"}, {"sha": "6085d330339f6206cc449357db15d94328c207da", "url": "https://api.github.com/repos/rust-lang/rust/commits/6085d330339f6206cc449357db15d94328c207da", "html_url": "https://github.com/rust-lang/rust/commit/6085d330339f6206cc449357db15d94328c207da"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "3860138018bb14c2a69bdfe4a5cfc37bfc1e6da3", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ba71a63fde087b5bddd71bc13b95cee4b71da8e2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba71a63fde087b5bddd71bc13b95cee4b71da8e2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=ba71a63fde087b5bddd71bc13b95cee4b71da8e2", "patch": "@@ -1802,15 +1802,20 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         match (src.layout.abi, dst.layout.abi) {\n             (abi::Abi::Scalar(src_scalar), abi::Abi::Scalar(dst_scalar)) => {\n                 // HACK(eddyb) LLVM doesn't like `bitcast`s between pointers and non-pointers.\n-                if (src_scalar.primitive() == abi::Pointer)\n-                    == (dst_scalar.primitive() == abi::Pointer)\n-                {\n+                let src_is_ptr = src_scalar.primitive() == abi::Pointer;\n+                let dst_is_ptr = dst_scalar.primitive() == abi::Pointer;\n+                if src_is_ptr == dst_is_ptr {\n                     assert_eq!(src.layout.size, dst.layout.size);\n \n                     // NOTE(eddyb) the `from_immediate` and `to_immediate_scalar`\n                     // conversions allow handling `bool`s the same as `u8`s.\n                     let src = bx.from_immediate(src.immediate());\n-                    let src_as_dst = bx.bitcast(src, bx.backend_type(dst.layout));\n+                    // LLVM also doesn't like `bitcast`s between pointers in different address spaces.\n+                    let src_as_dst = if src_is_ptr {\n+                        bx.pointercast(src, bx.backend_type(dst.layout))\n+                    } else {\n+                        bx.bitcast(src, bx.backend_type(dst.layout))\n+                    };\n                     Immediate(bx.to_immediate_scalar(src_as_dst, dst_scalar)).store(bx, dst);\n                     return;\n                 }"}, {"sha": "e9740e30da483d6a5231c8e47a17fe2a678d015a", "filename": "src/test/codegen/avr/avr-func-addrspace.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ba71a63fde087b5bddd71bc13b95cee4b71da8e2/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba71a63fde087b5bddd71bc13b95cee4b71da8e2/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs?ref=ba71a63fde087b5bddd71bc13b95cee4b71da8e2", "patch": "@@ -9,7 +9,7 @@\n // It also validates that functions can be called through function pointers\n // through traits.\n \n-#![feature(no_core, lang_items, unboxed_closures, arbitrary_self_types)]\n+#![feature(no_core, lang_items, intrinsics, unboxed_closures, arbitrary_self_types)]\n #![crate_type = \"lib\"]\n #![no_core]\n \n@@ -49,6 +49,10 @@ pub trait Fn<Args: Tuple>: FnOnce<Args> {\n     extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n }\n \n+extern \"rust-intrinsic\" {\n+    pub fn transmute<Src, Dst>(src: Src) -> Dst;\n+}\n+\n pub static mut STORAGE_FOO: fn(&usize, &mut u32) -> Result<(), ()> = arbitrary_black_box;\n pub static mut STORAGE_BAR: u32 = 12;\n \n@@ -87,3 +91,21 @@ pub extern \"C\" fn test() {\n         STORAGE_FOO(&1, &mut buf);\n     }\n }\n+\n+// Validate that we can codegen transmutes between data ptrs and fn ptrs.\n+\n+// CHECK: define{{.+}}{{void \\(\\) addrspace\\(1\\)\\*|ptr addrspace\\(1\\)}} @transmute_data_ptr_to_fn({{\\{\\}\\*|ptr}}{{.*}} %x)\n+#[no_mangle]\n+pub unsafe fn transmute_data_ptr_to_fn(x: *const ()) -> fn() {\n+    // It doesn't matter precisely how this is codegenned (through memory or an addrspacecast),\n+    // as long as it doesn't cause a verifier error by using `bitcast`.\n+    transmute(x)\n+}\n+\n+// CHECK: define{{.+}}{{\\{\\}\\*|ptr}} @transmute_fn_ptr_to_data({{void \\(\\) addrspace\\(1\\)\\*|ptr addrspace\\(1\\)}}{{.*}} %x)\n+#[no_mangle]\n+pub unsafe fn transmute_fn_ptr_to_data(x: fn()) -> *const () {\n+    // It doesn't matter precisely how this is codegenned (through memory or an addrspacecast),\n+    // as long as it doesn't cause a verifier error by using `bitcast`.\n+    transmute(x)\n+}"}]}