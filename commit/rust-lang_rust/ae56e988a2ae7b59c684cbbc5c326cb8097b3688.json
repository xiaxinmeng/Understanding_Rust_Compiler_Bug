{"sha": "ae56e988a2ae7b59c684cbbc5c326cb8097b3688", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNTZlOTg4YTJhZTdiNTljNjg0Y2JiYzVjMzI2Y2I4MDk3YjM2ODg=", "commit": {"author": {"name": "Christoph Walcher", "email": "christoph-wa@gmx.de", "date": "2020-08-14T10:52:19Z"}, "committer": {"name": "Christoph Walcher", "email": "christoph-wa@gmx.de", "date": "2020-08-14T23:40:55Z"}, "message": "Merge lint with `single_char_pattern`", "tree": {"sha": "f61a47e281187921cf1c789ff3ba9a99143fa85b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f61a47e281187921cf1c789ff3ba9a99143fa85b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae56e988a2ae7b59c684cbbc5c326cb8097b3688", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE2xeoiquC04hUiBqUoZMWSk0F7kQFAl83IQcACgkQoZMWSk0F\n7kQheAgAgS9e7p9aj1Cz+z9fEepvxME0mQCmAzHhjzFzFbA+9ALwB/P1ifiqUYKr\nZRx7k3sFeAny7hYxOS/Rxi4kkRZTqNpSWdY3f1C5MYwIfNgkqZ/O8UXmF7wpYBf9\nmqcKhoYdxRVChOL/nM7kgZsSXv3ai4OQjm8iCqhLmD9PrkBZP/dnZ6FrQ7bxhZaN\nIHVEKPZzyJZXYXNeSb+eL8AYOtCGaDU2BbmCIPvPao+vCXhj5DwrPNt/2mPyEtqC\nz/cfFqh9TpME6gnFI6HXNIXtqD0rAhv2D2GjIjHg8liiZabnuJUcB1xiQcpAtY0+\nc1IH8f1oXyPkQvw3pS3l3OynMxiYLw==\n=ivKz\n-----END PGP SIGNATURE-----", "payload": "tree f61a47e281187921cf1c789ff3ba9a99143fa85b\nparent 72d2c2eab42fe8c7247e4a45b01a6e7411898443\nauthor Christoph Walcher <christoph-wa@gmx.de> 1597402339 +0200\ncommitter Christoph Walcher <christoph-wa@gmx.de> 1597448455 +0200\n\nMerge lint with `single_char_pattern`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae56e988a2ae7b59c684cbbc5c326cb8097b3688", "html_url": "https://github.com/rust-lang/rust/commit/ae56e988a2ae7b59c684cbbc5c326cb8097b3688", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae56e988a2ae7b59c684cbbc5c326cb8097b3688/comments", "author": {"login": "wiomoc", "id": 10638299, "node_id": "MDQ6VXNlcjEwNjM4Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/10638299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wiomoc", "html_url": "https://github.com/wiomoc", "followers_url": "https://api.github.com/users/wiomoc/followers", "following_url": "https://api.github.com/users/wiomoc/following{/other_user}", "gists_url": "https://api.github.com/users/wiomoc/gists{/gist_id}", "starred_url": "https://api.github.com/users/wiomoc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wiomoc/subscriptions", "organizations_url": "https://api.github.com/users/wiomoc/orgs", "repos_url": "https://api.github.com/users/wiomoc/repos", "events_url": "https://api.github.com/users/wiomoc/events{/privacy}", "received_events_url": "https://api.github.com/users/wiomoc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wiomoc", "id": 10638299, "node_id": "MDQ6VXNlcjEwNjM4Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/10638299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wiomoc", "html_url": "https://github.com/wiomoc", "followers_url": "https://api.github.com/users/wiomoc/followers", "following_url": "https://api.github.com/users/wiomoc/following{/other_user}", "gists_url": "https://api.github.com/users/wiomoc/gists{/gist_id}", "starred_url": "https://api.github.com/users/wiomoc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wiomoc/subscriptions", "organizations_url": "https://api.github.com/users/wiomoc/orgs", "repos_url": "https://api.github.com/users/wiomoc/repos", "events_url": "https://api.github.com/users/wiomoc/events{/privacy}", "received_events_url": "https://api.github.com/users/wiomoc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72d2c2eab42fe8c7247e4a45b01a6e7411898443", "url": "https://api.github.com/repos/rust-lang/rust/commits/72d2c2eab42fe8c7247e4a45b01a6e7411898443", "html_url": "https://github.com/rust-lang/rust/commit/72d2c2eab42fe8c7247e4a45b01a6e7411898443"}], "stats": {"total": 191, "additions": 108, "deletions": 83}, "files": [{"sha": "5e4a4a4f49cefdef4fd29420d0d0096435a09163", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae56e988a2ae7b59c684cbbc5c326cb8097b3688/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae56e988a2ae7b59c684cbbc5c326cb8097b3688/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ae56e988a2ae7b59c684cbbc5c326cb8097b3688", "patch": "@@ -287,7 +287,6 @@ mod repeat_once;\n mod returns;\n mod serde_api;\n mod shadow;\n-mod single_char_push_str;\n mod single_component_path_imports;\n mod slow_vector_initialization;\n mod stable_sort_primitive;\n@@ -678,6 +677,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::SEARCH_IS_SOME,\n         &methods::SHOULD_IMPLEMENT_TRAIT,\n         &methods::SINGLE_CHAR_PATTERN,\n+        &methods::SINGLE_CHAR_PUSH_STR,\n         &methods::SKIP_WHILE_NEXT,\n         &methods::STRING_EXTEND_CHARS,\n         &methods::SUSPICIOUS_MAP,\n@@ -776,7 +776,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &shadow::SHADOW_REUSE,\n         &shadow::SHADOW_SAME,\n         &shadow::SHADOW_UNRELATED,\n-        &single_char_push_str::SINGLE_CHAR_PUSH_STR,\n         &single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS,\n         &slow_vector_initialization::SLOW_VECTOR_INITIALIZATION,\n         &stable_sort_primitive::STABLE_SORT_PRIMITIVE,\n@@ -934,7 +933,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box escape::BoxedLocal{too_large_for_stack});\n     store.register_late_pass(|| box panic_unimplemented::PanicUnimplemented);\n     store.register_late_pass(|| box strings::StringLitAsBytes);\n-    store.register_late_pass(|| box single_char_push_str::SingleCharPushStrPass);\n     store.register_late_pass(|| box derive::Derive);\n     store.register_late_pass(|| box types::CharLitAsU8);\n     store.register_late_pass(|| box vec::UselessVec);\n@@ -1352,6 +1350,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::SEARCH_IS_SOME),\n         LintId::of(&methods::SHOULD_IMPLEMENT_TRAIT),\n         LintId::of(&methods::SINGLE_CHAR_PATTERN),\n+        LintId::of(&methods::SINGLE_CHAR_PUSH_STR),\n         LintId::of(&methods::SKIP_WHILE_NEXT),\n         LintId::of(&methods::STRING_EXTEND_CHARS),\n         LintId::of(&methods::SUSPICIOUS_MAP),\n@@ -1419,7 +1418,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&returns::NEEDLESS_RETURN),\n         LintId::of(&returns::UNUSED_UNIT),\n         LintId::of(&serde_api::SERDE_API_MISUSE),\n-        LintId::of(&single_char_push_str::SINGLE_CHAR_PUSH_STR),\n         LintId::of(&single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n         LintId::of(&slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n         LintId::of(&stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n@@ -1536,6 +1534,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::OPTION_MAP_OR_NONE),\n         LintId::of(&methods::RESULT_MAP_OR_INTO_OPTION),\n         LintId::of(&methods::SHOULD_IMPLEMENT_TRAIT),\n+        LintId::of(&methods::SINGLE_CHAR_PUSH_STR),\n         LintId::of(&methods::STRING_EXTEND_CHARS),\n         LintId::of(&methods::UNNECESSARY_FOLD),\n         LintId::of(&methods::WRONG_SELF_CONVENTION),\n@@ -1560,7 +1559,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&regex::TRIVIAL_REGEX),\n         LintId::of(&returns::NEEDLESS_RETURN),\n         LintId::of(&returns::UNUSED_UNIT),\n-        LintId::of(&single_char_push_str::SINGLE_CHAR_PUSH_STR),\n         LintId::of(&single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n         LintId::of(&strings::STRING_LIT_AS_BYTES),\n         LintId::of(&tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),"}, {"sha": "2986a5a59449ba58fcf7b8f42bb0b1945c458817", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 75, "deletions": 14, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/ae56e988a2ae7b59c684cbbc5c326cb8097b3688/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae56e988a2ae7b59c684cbbc5c326cb8097b3688/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=ae56e988a2ae7b59c684cbbc5c326cb8097b3688", "patch": "@@ -1306,6 +1306,29 @@ declare_clippy_lint! {\n     \"using `.iter().next()` on a sliced array, which can be shortened to just `.get()`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Warns when using push_str with a single-character string literal,\n+    /// and push with a char would work fine.\n+    ///\n+    /// **Why is this bad?** it's less clear that we are pushing a single character\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    /// ```\n+    /// let mut string = String::new();\n+    /// string.push_str(\"R\");\n+    /// ```\n+    /// Could be written as\n+    /// ```\n+    /// let mut string = String::new();\n+    /// string.push('R');\n+    /// ```\n+    pub SINGLE_CHAR_PUSH_STR,\n+    style,\n+    \"`push_str()` used with a single-character string literal as parameter\"\n+}\n+\n declare_lint_pass!(Methods => [\n     UNWRAP_USED,\n     EXPECT_USED,\n@@ -1327,6 +1350,7 @@ declare_lint_pass!(Methods => [\n     INEFFICIENT_TO_STRING,\n     NEW_RET_NO_SELF,\n     SINGLE_CHAR_PATTERN,\n+    SINGLE_CHAR_PUSH_STR,\n     SEARCH_IS_SOME,\n     TEMPORARY_CSTRING_AS_PTR,\n     FILTER_NEXT,\n@@ -1441,6 +1465,12 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                     inefficient_to_string::lint(cx, expr, &args[0], self_ty);\n                 }\n \n+                if let Some(fn_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n+                    if match_def_path(cx, fn_def_id, &paths::PUSH_STR) {\n+                        lint_single_char_push_string(cx, expr, args);\n+                    }\n+                }\n+\n                 match self_ty.kind {\n                     ty::Ref(_, ty, _) if ty.kind == ty::Str => {\n                         for &(method, pos) in &PATTERN_METHODS {\n@@ -3124,15 +3154,18 @@ fn lint_chars_last_cmp_with_unwrap<'tcx>(cx: &LateContext<'tcx>, info: &BinaryEx\n     }\n }\n \n-/// lint for length-1 `str`s for methods in `PATTERN_METHODS`\n-fn lint_single_char_pattern<'tcx>(cx: &LateContext<'tcx>, _expr: &'tcx hir::Expr<'_>, arg: &'tcx hir::Expr<'_>) {\n+fn get_hint_if_single_char_arg<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    arg: &'tcx hir::Expr<'_>,\n+    applicability: &mut Applicability,\n+) -> Option<String> {\n     if_chain! {\n         if let hir::ExprKind::Lit(lit) = &arg.kind;\n         if let ast::LitKind::Str(r, style) = lit.node;\n-        if r.as_str().len() == 1;\n+        let string = r.as_str();\n+        if string.len() == 1;\n         then {\n-            let mut applicability = Applicability::MachineApplicable;\n-            let snip = snippet_with_applicability(cx, arg.span, \"..\", &mut applicability);\n+            let snip = snippet_with_applicability(cx, arg.span, &string, applicability);\n             let ch = if let ast::StrStyle::Raw(nhash) = style {\n                 let nhash = nhash as usize;\n                 // for raw string: r##\"a\"##\n@@ -3142,19 +3175,47 @@ fn lint_single_char_pattern<'tcx>(cx: &LateContext<'tcx>, _expr: &'tcx hir::Expr\n                 &snip[1..(snip.len() - 1)]\n             };\n             let hint = format!(\"'{}'\", if ch == \"'\" { \"\\\\'\" } else { ch });\n-            span_lint_and_sugg(\n-                cx,\n-                SINGLE_CHAR_PATTERN,\n-                arg.span,\n-                \"single-character string constant used as pattern\",\n-                \"try using a `char` instead\",\n-                hint,\n-                applicability,\n-            );\n+            Some(hint)\n+        } else {\n+            None\n         }\n     }\n }\n \n+/// lint for length-1 `str`s for methods in `PATTERN_METHODS`\n+fn lint_single_char_pattern<'tcx>(cx: &LateContext<'tcx>, _expr: &'tcx hir::Expr<'_>, arg: &'tcx hir::Expr<'_>) {\n+    let mut applicability = Applicability::MachineApplicable;\n+    if let Some(hint) = get_hint_if_single_char_arg(cx, arg, &mut applicability) {\n+        span_lint_and_sugg(\n+            cx,\n+            SINGLE_CHAR_PATTERN,\n+            arg.span,\n+            \"single-character string constant used as pattern\",\n+            \"try using a `char` instead\",\n+            hint,\n+            applicability,\n+        );\n+    }\n+}\n+\n+/// lint for length-1 `str`s as argument for `push_str`\n+fn lint_single_char_push_string<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, args: &'tcx [hir::Expr<'_>]) {\n+    let mut applicability = Applicability::MachineApplicable;\n+    if let Some(extension_string) = get_hint_if_single_char_arg(cx, &args[1], &mut applicability) {\n+        let base_string_snippet = snippet_with_applicability(cx, args[0].span, \"_\", &mut applicability);\n+        let sugg = format!(\"{}.push({})\", base_string_snippet, extension_string);\n+        span_lint_and_sugg(\n+            cx,\n+            SINGLE_CHAR_PUSH_STR,\n+            expr.span,\n+            \"calling `push_str()` using a single-character string literal\",\n+            \"consider using `push` with a character literal\",\n+            sugg,\n+            applicability,\n+        );\n+    }\n+}\n+\n /// Checks for the `USELESS_ASREF` lint.\n fn lint_asref(cx: &LateContext<'_>, expr: &hir::Expr<'_>, call_name: &str, as_ref_args: &[hir::Expr<'_>]) {\n     // when we get here, we've already checked that the call name is \"as_ref\" or \"as_mut\""}, {"sha": "68bbef7261a934e647cf5eacefd8b9fbf935cd91", "filename": "clippy_lints/src/single_char_push_str.rs", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/72d2c2eab42fe8c7247e4a45b01a6e7411898443/clippy_lints%2Fsrc%2Fsingle_char_push_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d2c2eab42fe8c7247e4a45b01a6e7411898443/clippy_lints%2Fsrc%2Fsingle_char_push_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsingle_char_push_str.rs?ref=72d2c2eab42fe8c7247e4a45b01a6e7411898443", "patch": "@@ -1,62 +0,0 @@\n-use crate::utils::{match_def_path, paths, snippet_with_applicability, span_lint_and_sugg};\n-use if_chain::if_chain;\n-use rustc_ast::ast::LitKind;\n-use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Warns when using push_str with a single-character string literal,\n-    /// and push with a char would work fine.\n-    ///\n-    /// **Why is this bad?** This is in all probability not the intended outcome. At\n-    /// the least it hurts readability of the code.\n-    ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n-    /// ```\n-    /// let mut string = String::new();\n-    /// string.push_str(\"R\");\n-    /// ```\n-    /// Could be written as\n-    /// ```\n-    /// let mut string = String::new();\n-    /// string.push('R');\n-    /// ```\n-    pub SINGLE_CHAR_PUSH_STR,\n-    style,\n-    \"`push_str()` used with a single-character string literal as parameter\"\n-}\n-\n-declare_lint_pass!(SingleCharPushStrPass => [SINGLE_CHAR_PUSH_STR]);\n-\n-impl<'tcx> LateLintPass<'tcx> for SingleCharPushStrPass {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if let ExprKind::MethodCall(_, _, ref args, _) = expr.kind;\n-            if let [base_string, extension_string] = args;\n-            if let Some(fn_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n-            if match_def_path(cx, fn_def_id, &paths::PUSH_STR);\n-            if let ExprKind::Lit(ref lit) = extension_string.kind;\n-            if let LitKind::Str(symbol,_) = lit.node;\n-            let extension_string_val = symbol.as_str().to_string();\n-            if extension_string_val.len() == 1;\n-            then {\n-                let mut applicability = Applicability::MachineApplicable;\n-                let base_string_snippet = snippet_with_applicability(cx, base_string.span, \"_\", &mut applicability);\n-                let sugg = format!(\"{}.push({:?})\", base_string_snippet, extension_string_val.chars().next().unwrap());\n-                span_lint_and_sugg(\n-                    cx,\n-                    SINGLE_CHAR_PUSH_STR,\n-                    expr.span,\n-                    \"calling `push_str()` using a single-character string literal\",\n-                    \"consider using `push` with a character literal\",\n-                    sugg,\n-                    applicability\n-                );\n-            }\n-        }\n-    }\n-}"}, {"sha": "4fd3277687438b2bec897b5494ed75ee977dac35", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae56e988a2ae7b59c684cbbc5c326cb8097b3688/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae56e988a2ae7b59c684cbbc5c326cb8097b3688/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=ae56e988a2ae7b59c684cbbc5c326cb8097b3688", "patch": "@@ -2017,7 +2017,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         group: \"style\",\n         desc: \"`push_str()` used with a single-character string literal as parameter\",\n         deprecation: None,\n-        module: \"single_char_push_str\",\n+        module: \"methods\",\n     },\n     Lint {\n         name: \"single_component_path_imports\","}, {"sha": "0812c026a644fbdd84f05569edc5cf954a8a109f", "filename": "tests/ui/single_char_push_str.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae56e988a2ae7b59c684cbbc5c326cb8097b3688/tests%2Fui%2Fsingle_char_push_str.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ae56e988a2ae7b59c684cbbc5c326cb8097b3688/tests%2Fui%2Fsingle_char_push_str.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_push_str.fixed?ref=ae56e988a2ae7b59c684cbbc5c326cb8097b3688", "patch": "@@ -7,4 +7,9 @@ fn main() {\n     string.push('\\'');\n \n     string.push('u');\n+    string.push_str(\"st\");\n+    string.push_str(\"\");\n+    string.push('\\x52');\n+    string.push('\\u{0052}');\n+    string.push('a');\n }"}, {"sha": "ab293bbe4eeb5ce8171ec28f610410a45f2d5cb8", "filename": "tests/ui/single_char_push_str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae56e988a2ae7b59c684cbbc5c326cb8097b3688/tests%2Fui%2Fsingle_char_push_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae56e988a2ae7b59c684cbbc5c326cb8097b3688/tests%2Fui%2Fsingle_char_push_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_push_str.rs?ref=ae56e988a2ae7b59c684cbbc5c326cb8097b3688", "patch": "@@ -7,4 +7,9 @@ fn main() {\n     string.push_str(\"'\");\n \n     string.push('u');\n+    string.push_str(\"st\");\n+    string.push_str(\"\");\n+    string.push_str(\"\\x52\");\n+    string.push_str(\"\\u{0052}\");\n+    string.push_str(r##\"a\"##);\n }"}, {"sha": "0e9bdaa23e7e8474accd8321884cc0861db8405c", "filename": "tests/ui/single_char_push_str.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ae56e988a2ae7b59c684cbbc5c326cb8097b3688/tests%2Fui%2Fsingle_char_push_str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae56e988a2ae7b59c684cbbc5c326cb8097b3688/tests%2Fui%2Fsingle_char_push_str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_push_str.stderr?ref=ae56e988a2ae7b59c684cbbc5c326cb8097b3688", "patch": "@@ -12,5 +12,23 @@ error: calling `push_str()` using a single-character string literal\n LL |     string.push_str(\"'\");\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/'')`\n \n-error: aborting due to 2 previous errors\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_push_str.rs:12:5\n+   |\n+LL |     string.push_str(\"/x52\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/x52')`\n+\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_push_str.rs:13:5\n+   |\n+LL |     string.push_str(\"/u{0052}\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/u{0052}')`\n+\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_push_str.rs:14:5\n+   |\n+LL |     string.push_str(r##\"a\"##);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('a')`\n+\n+error: aborting due to 5 previous errors\n "}]}