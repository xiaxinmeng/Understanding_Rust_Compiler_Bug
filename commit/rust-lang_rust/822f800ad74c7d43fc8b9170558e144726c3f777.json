{"sha": "822f800ad74c7d43fc8b9170558e144726c3f777", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMmY4MDBhZDc0YzdkNDNmYzhiOTE3MDU1OGUxNDQ3MjZjM2Y3Nzc=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-06-08T01:17:48Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-06-08T01:17:48Z"}, "message": "Include macro name in 'local ambiguity' error\n\nCurrently, we only point at the span of the macro argument. When the\nmacro call is itself generated by another macro, this can make it\ndifficult or impossible to determine which macro is responsible for\nproducing the error.", "tree": {"sha": "3ed8b0f7a6721352c4db9fa55126869ad059514e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ed8b0f7a6721352c4db9fa55126869ad059514e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/822f800ad74c7d43fc8b9170558e144726c3f777", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmC+xXEACgkQtAh+UQ6Y\nsWRmsg//R7YgaZsgls/wmFy74jhpkGoC/vr7eDh8876LGkUGs1OOOC+q3luFkfri\nNI6c/yEBdoGnIuZumyDu++eVK0cMwojH/U2sy0YFDLgBwcNFQ+SNjE2mYwkLOMxx\nwABsxckl6Ak6RiUQvsgLfFng8KM7lgBu3JHvgEiaCRQjx/a16AgPml46DMoC0MTR\njwFOzBR0keMBai/oOlAFk+RDwqpusLhvObITTVj5DneISbYiU+YWfj+TAUYBc1hR\n9Cwlr2a85x4ZkIskq0TWsegNSnuH/yJzrEvQA2QcEbP6+FtjuJT+UiI9NArra7fu\n8YfF6Ux5zroQBHHERybq5hOyp7D3/9/ksSKUrXkVAXrAhfc/1XuBkDUrFk5eYNs7\n52ZhM/BhMInYZL4iUOfkouxhPv8U2J7I0cKAR7c4ajVmTinK/l3nmLy9rQ3LfMAc\nmwTeoVATX5kwhIQLzZeJStYP8swKpsMkjkYfwbgVlss7VUe1vpu9IhzXQj6NCLr8\nDGX+Oit5ayHvbVawJtRHP5oFz1XJhD36Ls2/w4hZGmQkp4EcqWku+Ln7HmIOgp2U\nFQkI/5Tyds1L/FQCidCROiJe0kBPAxEIv3MCXI4MTrxer2tiHGmJf571bb9T4m7w\n1AEGIugEpbMJmnDhYSqY2OAJbeGDOCO7nYi1hgMMKZjp9htQzqQ=\n=JitM\n-----END PGP SIGNATURE-----", "payload": "tree 3ed8b0f7a6721352c4db9fa55126869ad059514e\nparent e4a60327063e82413eed50a10df3b7d19b77bda0\nauthor Aaron Hill <aa1ronham@gmail.com> 1623115068 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1623115068 -0500\n\nInclude macro name in 'local ambiguity' error\n\nCurrently, we only point at the span of the macro argument. When the\nmacro call is itself generated by another macro, this can make it\ndifficult or impossible to determine which macro is responsible for\nproducing the error.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/822f800ad74c7d43fc8b9170558e144726c3f777", "html_url": "https://github.com/rust-lang/rust/commit/822f800ad74c7d43fc8b9170558e144726c3f777", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/822f800ad74c7d43fc8b9170558e144726c3f777/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4a60327063e82413eed50a10df3b7d19b77bda0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4a60327063e82413eed50a10df3b7d19b77bda0", "html_url": "https://github.com/rust-lang/rust/commit/e4a60327063e82413eed50a10df3b7d19b77bda0"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "efed41de23a89ebf23b7f0c86841db93167d20f5", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/822f800ad74c7d43fc8b9170558e144726c3f777/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/822f800ad74c7d43fc8b9170558e144726c3f777/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=822f800ad74c7d43fc8b9170558e144726c3f777", "patch": "@@ -1,6 +1,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(destructuring_assignment)]\n+#![feature(format_args_capture)]\n #![feature(iter_zip)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]"}, {"sha": "a7434d73abe68ea7ec514b8650eee802313ce095", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/822f800ad74c7d43fc8b9170558e144726c3f777/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/822f800ad74c7d43fc8b9170558e144726c3f777/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=822f800ad74c7d43fc8b9170558e144726c3f777", "patch": "@@ -85,6 +85,7 @@ use smallvec::{smallvec, SmallVec};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n+use rustc_span::symbol::Ident;\n use std::borrow::Cow;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::mem;\n@@ -615,7 +616,11 @@ fn inner_parse_loop<'root, 'tt>(\n \n /// Use the given sequence of token trees (`ms`) as a matcher. Match the token\n /// stream from the given `parser` against it and return the match.\n-pub(super) fn parse_tt(parser: &mut Cow<'_, Parser<'_>>, ms: &[TokenTree]) -> NamedParseResult {\n+pub(super) fn parse_tt(\n+    parser: &mut Cow<'_, Parser<'_>>,\n+    ms: &[TokenTree],\n+    macro_name: Ident,\n+) -> NamedParseResult {\n     // A queue of possible matcher positions. We initialize it with the matcher position in which\n     // the \"dot\" is before the first token of the first token tree in `ms`. `inner_parse_loop` then\n     // processes all of these possible matcher positions and produces possible next positions into\n@@ -711,7 +716,7 @@ pub(super) fn parse_tt(parser: &mut Cow<'_, Parser<'_>>, ms: &[TokenTree]) -> Na\n             return Error(\n                 parser.token.span,\n                 format!(\n-                    \"local ambiguity: multiple parsing options: {}\",\n+                    \"local ambiguity when calling macro `{macro_name}`: multiple parsing options: {}\",\n                     match next_items.len() {\n                         0 => format!(\"built-in NTs {}.\", nts),\n                         1 => format!(\"built-in NTs {} or 1 other option.\", nts),"}, {"sha": "abad190b072ab3081cc8ce064bdd659c147e55c8", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/822f800ad74c7d43fc8b9170558e144726c3f777/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/822f800ad74c7d43fc8b9170558e144726c3f777/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=822f800ad74c7d43fc8b9170558e144726c3f777", "patch": "@@ -245,7 +245,7 @@ fn generic_extension<'cx>(\n         // are not recorded. On the first `Success(..)`ful matcher, the spans are merged.\n         let mut gated_spans_snapshot = mem::take(&mut *sess.gated_spans.spans.borrow_mut());\n \n-        match parse_tt(&mut Cow::Borrowed(&parser), lhs_tt) {\n+        match parse_tt(&mut Cow::Borrowed(&parser), lhs_tt, name) {\n             Success(named_matches) => {\n                 // The matcher was `Success(..)`ful.\n                 // Merge the gated spans from parsing the matcher with the pre-existing ones.\n@@ -338,7 +338,7 @@ fn generic_extension<'cx>(\n                 _ => continue,\n             };\n             if let Success(_) =\n-                parse_tt(&mut Cow::Borrowed(&parser_from_cx(sess, arg.clone())), lhs_tt)\n+                parse_tt(&mut Cow::Borrowed(&parser_from_cx(sess, arg.clone())), lhs_tt, name)\n             {\n                 if comma_span.is_dummy() {\n                     err.note(\"you might be missing a comma\");\n@@ -432,7 +432,7 @@ pub fn compile_declarative_macro(\n     ];\n \n     let parser = Parser::new(&sess.parse_sess, body, true, rustc_parse::MACRO_ARGUMENTS);\n-    let argument_map = match parse_tt(&mut Cow::Borrowed(&parser), &argument_gram) {\n+    let argument_map = match parse_tt(&mut Cow::Borrowed(&parser), &argument_gram, def.ident) {\n         Success(m) => m,\n         Failure(token, msg) => {\n             let s = parse_failure_msg(&token);"}, {"sha": "68b278fd3c88685c217711f147c56b5ca589433a", "filename": "src/test/ui/macros/local-ambiguity-multiple-parsing-options.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/822f800ad74c7d43fc8b9170558e144726c3f777/src%2Ftest%2Fui%2Fmacros%2Flocal-ambiguity-multiple-parsing-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/822f800ad74c7d43fc8b9170558e144726c3f777/src%2Ftest%2Fui%2Fmacros%2Flocal-ambiguity-multiple-parsing-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Flocal-ambiguity-multiple-parsing-options.stderr?ref=822f800ad74c7d43fc8b9170558e144726c3f777", "patch": "@@ -1,10 +1,10 @@\n-error: local ambiguity: multiple parsing options: built-in NTs ident ('i') or ident ('j').\n+error: local ambiguity when calling macro `ambiguity`: multiple parsing options: built-in NTs ident ('i') or ident ('j').\n   --> $DIR/local-ambiguity-multiple-parsing-options.rs:7:12\n    |\n LL | ambiguity!(error);\n    |            ^^^^^\n \n-error: local ambiguity: multiple parsing options: built-in NTs ident ('i') or ident ('j').\n+error: local ambiguity when calling macro `ambiguity`: multiple parsing options: built-in NTs ident ('i') or ident ('j').\n   --> $DIR/local-ambiguity-multiple-parsing-options.rs:8:12\n    |\n LL | ambiguity!(error);"}]}