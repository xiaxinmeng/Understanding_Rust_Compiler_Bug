{"sha": "f61ab585742d2e1d2f5fe2e0093739685717cd5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MWFiNTg1NzQyZDJlMWQyZjVmZTJlMDA5MzczOTY4NTcxN2NkNWQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-02T11:14:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-02T11:14:49Z"}, "message": "Rollup merge of #81022 - seanchen1991:feat/frames-iter, r=KodrAus\n\nAdd Frames Iterator for Backtrace\n\nSecond attempt at adding the ability to iterate over the frames of a Backtrace by exposing the frames method.", "tree": {"sha": "f2d838b8a6a52dbe91c575c9527ef7e1e1157f34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2d838b8a6a52dbe91c575c9527ef7e1e1157f34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f61ab585742d2e1d2f5fe2e0093739685717cd5d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgGTQpCRBK7hj4Ov3rIwAAdHIIALLXVKculKThNyTR2x7qsxiU\niYNeZLU4viLxI7TpJFJPxuBOW6jVOa0nk7suOyikrdNvwDSGQzcbu4WqHBRhZQay\n4Wpp6krzmbxHgAJxAQZjEdimAcgXxNR3d4/mZi3rOYu6fS6/GyQxaNsuKDlG5WN4\njFpn1ENe8Dr+zo1LAGj/xL1Mgrfs6oj+EaRVYRLhCJ0V1X8dEukqAHFLAPMbaA2Q\nX1JuEH62iwKfE/Vpx5J1PP44s9D6YS4H3JTT+6X0/0JR4ETWIlAFbRyBt0JSSe1F\nj2nAwXHOBZCDbhhjEO7B4V3407vMQMfvvXOXWtXnDnLGpkeiTchiag252iQegQw=\n=4X9I\n-----END PGP SIGNATURE-----\n", "payload": "tree f2d838b8a6a52dbe91c575c9527ef7e1e1157f34\nparent a1887912e8a9dc3c190814d27ba00f5f488c6cd3\nparent 050643a9606c279d9b959976c3718ad3d7bdb84a\nauthor Jonas Schievink <jonasschievink@gmail.com> 1612264489 +0100\ncommitter GitHub <noreply@github.com> 1612264489 +0100\n\nRollup merge of #81022 - seanchen1991:feat/frames-iter, r=KodrAus\n\nAdd Frames Iterator for Backtrace\n\nSecond attempt at adding the ability to iterate over the frames of a Backtrace by exposing the frames method.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f61ab585742d2e1d2f5fe2e0093739685717cd5d", "html_url": "https://github.com/rust-lang/rust/commit/f61ab585742d2e1d2f5fe2e0093739685717cd5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f61ab585742d2e1d2f5fe2e0093739685717cd5d/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1887912e8a9dc3c190814d27ba00f5f488c6cd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1887912e8a9dc3c190814d27ba00f5f488c6cd3", "html_url": "https://github.com/rust-lang/rust/commit/a1887912e8a9dc3c190814d27ba00f5f488c6cd3"}, {"sha": "050643a9606c279d9b959976c3718ad3d7bdb84a", "url": "https://api.github.com/repos/rust-lang/rust/commits/050643a9606c279d9b959976c3718ad3d7bdb84a", "html_url": "https://github.com/rust-lang/rust/commit/050643a9606c279d9b959976c3718ad3d7bdb84a"}], "stats": {"total": 130, "additions": 92, "deletions": 38}, "files": [{"sha": "0aae4674b29423c763025113ecf236b8591f4dd4", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f61ab585742d2e1d2f5fe2e0093739685717cd5d/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f61ab585742d2e1d2f5fe2e0093739685717cd5d/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=f61ab585742d2e1d2f5fe2e0093739685717cd5d", "patch": "@@ -147,11 +147,14 @@ fn _assert_send_sync() {\n     _assert::<Backtrace>();\n }\n \n-struct BacktraceFrame {\n+/// A single frame of a backtrace.\n+#[unstable(feature = \"backtrace_frames\", issue = \"79676\")]\n+pub struct BacktraceFrame {\n     frame: RawFrame,\n     symbols: Vec<BacktraceSymbol>,\n }\n \n+#[derive(Debug)]\n enum RawFrame {\n     Actual(backtrace_rs::Frame),\n     #[cfg(test)]\n@@ -196,6 +199,14 @@ impl fmt::Debug for Backtrace {\n     }\n }\n \n+impl fmt::Debug for BacktraceFrame {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let mut dbg = fmt.debug_list();\n+        dbg.entries(&self.symbols);\n+        dbg.finish()\n+    }\n+}\n+\n impl fmt::Debug for BacktraceSymbol {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // FIXME: improve formatting: https://github.com/rust-lang/rust/issues/65280\n@@ -353,6 +364,14 @@ impl Backtrace {\n     }\n }\n \n+impl<'a> Backtrace {\n+    /// Returns an iterator over the backtrace frames.\n+    #[unstable(feature = \"backtrace_frames\", issue = \"79676\")]\n+    pub fn frames(&'a self) -> &'a [BacktraceFrame] {\n+        if let Inner::Captured(c) = &self.inner { &c.force().frames } else { &[] }\n+    }\n+}\n+\n impl fmt::Display for Backtrace {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let capture = match &self.inner {"}, {"sha": "f5da93f93fd932b0e7ed6134e1893c18b6d02d2a", "filename": "library/std/src/backtrace/tests.rs", "status": "modified", "additions": 72, "deletions": 37, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/f61ab585742d2e1d2f5fe2e0093739685717cd5d/library%2Fstd%2Fsrc%2Fbacktrace%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f61ab585742d2e1d2f5fe2e0093739685717cd5d/library%2Fstd%2Fsrc%2Fbacktrace%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace%2Ftests.rs?ref=f61ab585742d2e1d2f5fe2e0093739685717cd5d", "patch": "@@ -1,48 +1,52 @@\n use super::*;\n \n+fn generate_fake_frames() -> Vec<BacktraceFrame> {\n+    vec![\n+        BacktraceFrame {\n+            frame: RawFrame::Fake,\n+            symbols: vec![BacktraceSymbol {\n+                name: Some(b\"std::backtrace::Backtrace::create\".to_vec()),\n+                filename: Some(BytesOrWide::Bytes(b\"rust/backtrace.rs\".to_vec())),\n+                lineno: Some(100),\n+                colno: None,\n+            }],\n+        },\n+        BacktraceFrame {\n+            frame: RawFrame::Fake,\n+            symbols: vec![BacktraceSymbol {\n+                name: Some(b\"__rust_maybe_catch_panic\".to_vec()),\n+                filename: None,\n+                lineno: None,\n+                colno: None,\n+            }],\n+        },\n+        BacktraceFrame {\n+            frame: RawFrame::Fake,\n+            symbols: vec![\n+                BacktraceSymbol {\n+                    name: Some(b\"std::rt::lang_start_internal\".to_vec()),\n+                    filename: Some(BytesOrWide::Bytes(b\"rust/rt.rs\".to_vec())),\n+                    lineno: Some(300),\n+                    colno: Some(5),\n+                },\n+                BacktraceSymbol {\n+                    name: Some(b\"std::rt::lang_start\".to_vec()),\n+                    filename: Some(BytesOrWide::Bytes(b\"rust/rt.rs\".to_vec())),\n+                    lineno: Some(400),\n+                    colno: None,\n+                },\n+            ],\n+        },\n+    ]\n+}\n+\n #[test]\n fn test_debug() {\n     let backtrace = Backtrace {\n         inner: Inner::Captured(LazilyResolvedCapture::new(Capture {\n             actual_start: 1,\n             resolved: true,\n-            frames: vec![\n-                BacktraceFrame {\n-                    frame: RawFrame::Fake,\n-                    symbols: vec![BacktraceSymbol {\n-                        name: Some(b\"std::backtrace::Backtrace::create\".to_vec()),\n-                        filename: Some(BytesOrWide::Bytes(b\"rust/backtrace.rs\".to_vec())),\n-                        lineno: Some(100),\n-                        colno: None,\n-                    }],\n-                },\n-                BacktraceFrame {\n-                    frame: RawFrame::Fake,\n-                    symbols: vec![BacktraceSymbol {\n-                        name: Some(b\"__rust_maybe_catch_panic\".to_vec()),\n-                        filename: None,\n-                        lineno: None,\n-                        colno: None,\n-                    }],\n-                },\n-                BacktraceFrame {\n-                    frame: RawFrame::Fake,\n-                    symbols: vec![\n-                        BacktraceSymbol {\n-                            name: Some(b\"std::rt::lang_start_internal\".to_vec()),\n-                            filename: Some(BytesOrWide::Bytes(b\"rust/rt.rs\".to_vec())),\n-                            lineno: Some(300),\n-                            colno: Some(5),\n-                        },\n-                        BacktraceSymbol {\n-                            name: Some(b\"std::rt::lang_start\".to_vec()),\n-                            filename: Some(BytesOrWide::Bytes(b\"rust/rt.rs\".to_vec())),\n-                            lineno: Some(400),\n-                            colno: None,\n-                        },\n-                    ],\n-                },\n-            ],\n+            frames: generate_fake_frames(),\n         })),\n     };\n \n@@ -58,3 +62,34 @@ fn test_debug() {\n     // Format the backtrace a second time, just to make sure lazily resolved state is stable\n     assert_eq!(format!(\"{:#?}\", backtrace), expected);\n }\n+\n+#[test]\n+fn test_frames() {\n+    let backtrace = Backtrace {\n+        inner: Inner::Captured(LazilyResolvedCapture::new(Capture {\n+            actual_start: 1,\n+            resolved: true,\n+            frames: generate_fake_frames(),\n+        })),\n+    };\n+\n+    let frames = backtrace.frames();\n+\n+    #[rustfmt::skip]\n+    let expected = vec![\n+        \"[\n+    { fn: \\\"std::backtrace::Backtrace::create\\\", file: \\\"rust/backtrace.rs\\\", line: 100 },\n+]\",\n+        \"[\n+    { fn: \\\"__rust_maybe_catch_panic\\\" },\n+]\",\n+        \"[\n+    { fn: \\\"std::rt::lang_start_internal\\\", file: \\\"rust/rt.rs\\\", line: 300 },\n+    { fn: \\\"std::rt::lang_start\\\", file: \\\"rust/rt.rs\\\", line: 400 },\n+]\"\n+    ];\n+\n+    let mut iter = frames.iter().zip(expected.iter());\n+\n+    assert!(iter.all(|(f, e)| format!(\"{:#?}\", f) == *e));\n+}"}]}