{"sha": "cd97b9d965ada49ed07af7ee651b2b2266df4cec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkOTdiOWQ5NjVhZGE0OWVkMDdhZjdlZTY1MWIyYjIyNjZkZjRjZWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-01T19:39:03Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-01T19:39:03Z"}, "message": "rustc: Typecheck tag constructors", "tree": {"sha": "afb8030482ebd888bb9b2c6bf2ace14186d1ba83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afb8030482ebd888bb9b2c6bf2ace14186d1ba83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd97b9d965ada49ed07af7ee651b2b2266df4cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd97b9d965ada49ed07af7ee651b2b2266df4cec", "html_url": "https://github.com/rust-lang/rust/commit/cd97b9d965ada49ed07af7ee651b2b2266df4cec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd97b9d965ada49ed07af7ee651b2b2266df4cec/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67a616340d8e3a3af8cb2524736f824ea640b456", "url": "https://api.github.com/repos/rust-lang/rust/commits/67a616340d8e3a3af8cb2524736f824ea640b456", "html_url": "https://github.com/rust-lang/rust/commit/67a616340d8e3a3af8cb2524736f824ea640b456"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "d9e1494f0bd862c4999817765633e8f49f21d7fa", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cd97b9d965ada49ed07af7ee651b2b2266df4cec/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd97b9d965ada49ed07af7ee651b2b2266df4cec/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=cd97b9d965ada49ed07af7ee651b2b2266df4cec", "patch": "@@ -39,6 +39,7 @@ tag sty {\n     ty_machine(util.common.ty_mach);\n     ty_char;\n     ty_str;\n+    ty_tag(ast.def_id);\n     ty_box(@ty);\n     ty_vec(@ty);\n     ty_tup(vec[@ty]);\n@@ -401,6 +402,34 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n         }\n     }\n \n+    fn add_tag_variant_types(@hashmap[ast.def_id,@ast.item] id_to_ty_item,\n+                             @ty_table item_to_ty,\n+                             &ast.def_id tag_id,\n+                             &vec[ast.variant] variants) {\n+        for (ast.variant variant in variants) {\n+            // Nullary tag constructors get turned into constants; n-ary tag\n+            // constructors get turned into functions.\n+            auto result_ty;\n+            if (_vec.len[@ast.ty](variant.args) == 0u) {\n+                result_ty = plain_ty(ty_tag(tag_id));\n+            } else {\n+                // As above, tell ast_ty_to_ty() that trans_ty_item_to_ty()\n+                // should be called to resolve named types.\n+                auto f = bind trans_ty_item_id_to_ty(id_to_ty_item,\n+                                                     item_to_ty, _);\n+\n+                let vec[arg] args = vec();\n+                for (@ast.ty arg_ast_ty in variant.args) {\n+                    auto arg_ty = ast_ty_to_ty(f, arg_ast_ty);\n+                    args += vec(rec(mode=ast.alias, ty=arg_ty));\n+                }\n+                result_ty = plain_ty(ty_fn(args, plain_ty(ty_tag(tag_id)))); \n+            }\n+\n+            item_to_ty.insert(variant.id, result_ty);\n+        }\n+    }\n+\n     // First pass: collect all type item IDs.\n     auto module = crate.node.module;\n     auto id_to_ty_item = @common.new_def_hash[@ast.item]();\n@@ -434,7 +463,9 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n             case (ast.item_mod(_, _, _)) {\n                 result = it.node;\n             }\n-            case (ast.item_tag(_, _, _, _)) {\n+            case (ast.item_tag(_, ?variants, _, ?tag_id)) {\n+                add_tag_variant_types(id_to_ty_item, item_to_ty, tag_id,\n+                                      variants);\n                 result = it.node;\n             }\n         }\n@@ -1195,6 +1226,10 @@ fn check_expr(&fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n                     check (fcx.ccx.item_types.contains_key(id));\n                     t = fcx.ccx.item_types.get(id);\n                 }\n+                case (ast.def_variant(_, ?variant_id)) {\n+                    check (fcx.ccx.item_types.contains_key(variant_id));\n+                    t = fcx.ccx.item_types.get(variant_id);\n+                }\n                 case (_) {\n                     // FIXME: handle other names.\n                     fcx.ccx.sess.unimpl(\"definition variant for: \""}]}