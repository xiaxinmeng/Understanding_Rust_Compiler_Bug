{"sha": "cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYTdhYzVlMDE0ZTdlMjI1YTRlMjI2ZjE1ZTljMDU1NjNkNmU0YTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-08T21:56:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-08T21:56:45Z"}, "message": "auto merge of #12065 : mrshu/rust/error-formating-fix, r=alexcrichton\n\nThis pull request tries to fix #12050.\r\n\r\nI went after these wrong errors quite aggressively so it might be that I also changed some strings that are not actual errors.\r\n\r\nPlease point those out and I will update this pull request accordingly.", "tree": {"sha": "4173461fe0af3aa02aabdd2d6a216055b6426a41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4173461fe0af3aa02aabdd2d6a216055b6426a41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "html_url": "https://github.com/rust-lang/rust/commit/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8759f6b56735d444288661655527edbc5ac333f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8759f6b56735d444288661655527edbc5ac333f", "html_url": "https://github.com/rust-lang/rust/commit/c8759f6b56735d444288661655527edbc5ac333f"}, {"sha": "ee3fa68fed13e7b8cde523e4bc73b9a07d082212", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee3fa68fed13e7b8cde523e4bc73b9a07d082212", "html_url": "https://github.com/rust-lang/rust/commit/ee3fa68fed13e7b8cde523e4bc73b9a07d082212"}], "stats": {"total": 334, "additions": 167, "deletions": 167}, "files": [{"sha": "531b8bf9034579a8b69a1c28fbbef4d46df707e2", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -76,7 +76,7 @@ pub fn WriteOutputFile(\n             let result = llvm::LLVMRustWriteOutputFile(\n                     Target, PM, M, Output, FileType);\n             if !result {\n-                llvm_err(sess, ~\"Could not write output\");\n+                llvm_err(sess, ~\"could not write output\");\n             }\n         })\n     }\n@@ -189,7 +189,7 @@ pub mod write {\n             for pass in sess.opts.custom_passes.iter() {\n                 pass.with_c_str(|s| {\n                     if !llvm::LLVMRustAddPass(mpm, s) {\n-                        sess.warn(format!(\"Unknown pass {}, ignoring\", *pass));\n+                        sess.warn(format!(\"unknown pass {}, ignoring\", *pass));\n                     }\n                 })\n             }\n@@ -876,11 +876,11 @@ fn link_binary_output(sess: Session,\n     let obj_is_writeable = is_writeable(&obj_filename);\n     let out_is_writeable = is_writeable(&out_filename);\n     if !out_is_writeable {\n-        sess.fatal(format!(\"Output file {} is not writeable -- check its permissions.\",\n+        sess.fatal(format!(\"output file {} is not writeable -- check its permissions.\",\n                            out_filename.display()));\n     }\n     else if !obj_is_writeable {\n-        sess.fatal(format!(\"Object file {} is not writeable -- check its permissions.\",\n+        sess.fatal(format!(\"object file {} is not writeable -- check its permissions.\",\n                            obj_filename.display()));\n     }\n "}, {"sha": "dc8598c10d0d05d91c99ccb996a37426162c9797", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -308,7 +308,7 @@ impl Session_ {\n     // This exists to help with refactoring to eliminate impossible\n     // cases later on\n     pub fn impossible_case(&self, sp: Span, msg: &str) -> ! {\n-        self.span_bug(sp, format!(\"Impossible case reached: {}\", msg));\n+        self.span_bug(sp, format!(\"impossible case reached: {}\", msg));\n     }\n     pub fn verbose(&self) -> bool { self.debugging_opt(VERBOSE) }\n     pub fn time_passes(&self) -> bool { self.debugging_opt(TIME_PASSES) }"}, {"sha": "42e4d986837be4e64e5c744bd2babfd15a4273cf", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -527,7 +527,7 @@ fn parse_sig(st: &mut PState, conv: conv_did) -> ty::FnSig {\n     let variadic = match next(st) {\n         'V' => true,\n         'N' => false,\n-        r => fail!(format!(\"Bad variadic: {}\", r)),\n+        r => fail!(format!(\"bad variadic: {}\", r)),\n     };\n     let ret_ty = parse_ty(st, |x,y| conv(x,y));\n     ty::FnSig {binder_id: id,"}, {"sha": "08632b5c9a6e0b3a325a4789a7f4f3060cdf2df1", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -195,7 +195,7 @@ fn enc_region(w: &mut MemWriter, cx: @ctxt, r: ty::Region) {\n         }\n         ty::ReInfer(_) => {\n             // these should not crop up after typeck\n-            cx.diag.handler().bug(\"Cannot encode region variables\");\n+            cx.diag.handler().bug(\"cannot encode region variables\");\n         }\n     }\n }\n@@ -320,7 +320,7 @@ fn enc_sty(w: &mut MemWriter, cx: @ctxt, st: &ty::sty) {\n             enc_bare_fn_ty(w, cx, f);\n         }\n         ty::ty_infer(_) => {\n-            cx.diag.handler().bug(\"Cannot encode inference variable types\");\n+            cx.diag.handler().bug(\"cannot encode inference variable types\");\n         }\n         ty::ty_param(param_ty {idx: id, def_id: did}) => {\n             mywrite!(w, \"p{}|{}\", (cx.ds)(did), id);\n@@ -334,7 +334,7 @@ fn enc_sty(w: &mut MemWriter, cx: @ctxt, st: &ty::sty) {\n             enc_substs(w, cx, substs);\n             mywrite!(w, \"]\");\n         }\n-        ty::ty_err => fail!(\"Shouldn't encode error type\")\n+        ty::ty_err => fail!(\"shouldn't encode error type\")\n     }\n }\n "}, {"sha": "e151f39845860c03f26e0e633cbbdf678b75fa9b", "filename": "src/librustc/middle/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -215,7 +215,7 @@ impl<'a> GuaranteeLifetimeContext<'a> {\n                 // the check above should fail for anything is not ReScope\n                 self.bccx.tcx.sess.span_bug(\n                     cmt_base.span,\n-                    format!(\"Cannot issue root for scope region: {:?}\",\n+                    format!(\"cannot issue root for scope region: {:?}\",\n                          self.loan_region));\n             }\n         };"}, {"sha": "173120e32f5caab7c9f2a81af3bf05ed6d040c58", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -496,7 +496,7 @@ impl<'a> GatherLoanCtxt<'a> {\n                     ty::ReInfer(..) => {\n                         self.tcx().sess.span_bug(\n                             cmt.span,\n-                            format!(\"Invalid borrow lifetime: {:?}\", loan_region));\n+                            format!(\"invalid borrow lifetime: {:?}\", loan_region));\n                     }\n                 };\n                 debug!(\"loan_scope = {:?}\", loan_scope);\n@@ -820,7 +820,7 @@ impl<'a> GatherLoanCtxt<'a> {\n             _ => {\n                 self.tcx().sess.span_bug(\n                     pat.span,\n-                    format!(\"Type of slice pattern is not a slice\"));\n+                    format!(\"type of slice pattern is not a slice\"));\n             }\n         }\n     }"}, {"sha": "6f3578f667de0e8c7a5def55c4524a5c62cfc459", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -769,14 +769,14 @@ impl BorrowckCtxt {\n                             }\n                             _ => {\n                                 self.tcx.sess.bug(\n-                                    format!(\"Loan path LpVar({:?}) maps to {:?}, not local\",\n+                                    format!(\"loan path LpVar({:?}) maps to {:?}, not local\",\n                                         id, pat));\n                             }\n                         }\n                     }\n                     r => {\n                         self.tcx.sess.bug(\n-                            format!(\"Loan path LpVar({:?}) maps to {:?}, not local\",\n+                            format!(\"loan path LpVar({:?}) maps to {:?}, not local\",\n                                  id, r));\n                     }\n                 }"}, {"sha": "75549c5944df76cb90310598e44a4f5ec9a9b1ef", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -494,7 +494,7 @@ impl MoveData {\n                         dfcx_assign.add_kill(kill_id, assignment_index);\n                     }\n                     LpExtend(..) => {\n-                        tcx.sess.bug(\"Var assignment for non var path\");\n+                        tcx.sess.bug(\"var assignment for non var path\");\n                     }\n                 }\n             }"}, {"sha": "9c213558d9ca507c77d04780933663d78c320dd1", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -507,13 +507,13 @@ impl CFGBuilder {\n                         }\n                         self.tcx.sess.span_bug(\n                             expr.span,\n-                            format!(\"No loop scope for id {:?}\", loop_id));\n+                            format!(\"no loop scope for id {:?}\", loop_id));\n                     }\n \n                     r => {\n                         self.tcx.sess.span_bug(\n                             expr.span,\n-                            format!(\"Bad entry `{:?}` in def_map for label\", r));\n+                            format!(\"bad entry `{:?}` in def_map for label\", r));\n                     }\n                 }\n             }"}, {"sha": "ab9eff3a372c62ea20eba32fd20f9320f3e94615", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -971,7 +971,7 @@ fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,\n                     _ => {\n                         cx.tcx.sess.span_bug(\n                             p.span,\n-                            format!(\"Binding pattern {} is \\\n+                            format!(\"binding pattern {} is \\\n                                   not an identifier: {:?}\",\n                                  p.id, p.node));\n                     }"}, {"sha": "75874339f3a6852b73e939e9a9d78fea480ed138", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -342,8 +342,8 @@ pub fn eval_const_expr_partial<T: ty::ExprTyProvider>(tcx: &T, e: &Expr)\n           Ok(const_float(f)) => Ok(const_float(-f)),\n           Ok(const_int(i)) => Ok(const_int(-i)),\n           Ok(const_uint(i)) => Ok(const_uint(-i)),\n-          Ok(const_str(_)) => Err(~\"Negate on string\"),\n-          Ok(const_bool(_)) => Err(~\"Negate on boolean\"),\n+          Ok(const_str(_)) => Err(~\"negate on string\"),\n+          Ok(const_bool(_)) => Err(~\"negate on boolean\"),\n           ref err => ((*err).clone())\n         }\n       }\n@@ -352,7 +352,7 @@ pub fn eval_const_expr_partial<T: ty::ExprTyProvider>(tcx: &T, e: &Expr)\n           Ok(const_int(i)) => Ok(const_int(!i)),\n           Ok(const_uint(i)) => Ok(const_uint(!i)),\n           Ok(const_bool(b)) => Ok(const_bool(!b)),\n-          _ => Err(~\"Not on float or string\")\n+          _ => Err(~\"not on float or string\")\n         }\n       }\n       ExprBinary(_, op, a, b) => {\n@@ -371,7 +371,7 @@ pub fn eval_const_expr_partial<T: ty::ExprTyProvider>(tcx: &T, e: &Expr)\n               BiNe => fromb(a != b),\n               BiGe => fromb(a >= b),\n               BiGt => fromb(a > b),\n-              _ => Err(~\"Can't do this op on floats\")\n+              _ => Err(~\"can't do this op on floats\")\n             }\n           }\n           (Ok(const_int(a)), Ok(const_int(b))) => {\n@@ -423,14 +423,14 @@ pub fn eval_const_expr_partial<T: ty::ExprTyProvider>(tcx: &T, e: &Expr)\n             match op {\n               BiShl => Ok(const_int(a << b)),\n               BiShr => Ok(const_int(a >> b)),\n-              _ => Err(~\"Can't do this op on an int and uint\")\n+              _ => Err(~\"can't do this op on an int and uint\")\n             }\n           }\n           (Ok(const_uint(a)), Ok(const_int(b))) => {\n             match op {\n               BiShl => Ok(const_uint(a << b)),\n               BiShr => Ok(const_uint(a >> b)),\n-              _ => Err(~\"Can't do this op on a uint and int\")\n+              _ => Err(~\"can't do this op on a uint and int\")\n             }\n           }\n           (Ok(const_bool(a)), Ok(const_bool(b))) => {\n@@ -442,10 +442,10 @@ pub fn eval_const_expr_partial<T: ty::ExprTyProvider>(tcx: &T, e: &Expr)\n               BiBitOr => a | b,\n               BiEq => a == b,\n               BiNe => a != b,\n-              _ => return Err(~\"Can't do this op on bools\")\n+              _ => return Err(~\"can't do this op on bools\")\n              }))\n           }\n-          _ => Err(~\"Bad operands for binary\")\n+          _ => Err(~\"bad operands for binary\")\n         }\n       }\n       ExprCast(base, target_ty) => {\n@@ -456,7 +456,7 @@ pub fn eval_const_expr_partial<T: ty::ExprTyProvider>(tcx: &T, e: &Expr)\n                 .or_else(|| astconv::ast_ty_to_prim_ty(tcx.ty_ctxt(), target_ty))\n                 .unwrap_or_else(|| tcx.ty_ctxt().sess.span_fatal(\n                     target_ty.span,\n-                    format!(\"Target type not found for const cast\")\n+                    format!(\"target type not found for const cast\")\n                 ));\n \n         let base = eval_const_expr_partial(tcx, base);\n@@ -469,41 +469,41 @@ pub fn eval_const_expr_partial<T: ty::ExprTyProvider>(tcx: &T, e: &Expr)\n                             const_uint(u) => Ok(const_float(u as f64)),\n                             const_int(i) => Ok(const_float(i as f64)),\n                             const_float(f) => Ok(const_float(f)),\n-                            _ => Err(~\"Can't cast float to str\"),\n+                            _ => Err(~\"can't cast float to str\"),\n                         }\n                     }\n                     ty::ty_uint(_) => {\n                         match val {\n                             const_uint(u) => Ok(const_uint(u)),\n                             const_int(i) => Ok(const_uint(i as u64)),\n                             const_float(f) => Ok(const_uint(f as u64)),\n-                            _ => Err(~\"Can't cast str to uint\"),\n+                            _ => Err(~\"can't cast str to uint\"),\n                         }\n                     }\n                     ty::ty_int(_) | ty::ty_bool => {\n                         match val {\n                             const_uint(u) => Ok(const_int(u as i64)),\n                             const_int(i) => Ok(const_int(i)),\n                             const_float(f) => Ok(const_int(f as i64)),\n-                            _ => Err(~\"Can't cast str to int\"),\n+                            _ => Err(~\"can't cast str to int\"),\n                         }\n                     }\n-                    _ => Err(~\"Can't cast this type\")\n+                    _ => Err(~\"can't cast this type\")\n                 }\n             }\n         }\n       }\n       ExprPath(_) => {\n           match lookup_const(tcx.ty_ctxt(), e) {\n               Some(actual_e) => eval_const_expr_partial(&tcx.ty_ctxt(), actual_e),\n-              None => Err(~\"Non-constant path in constant expr\")\n+              None => Err(~\"non-constant path in constant expr\")\n           }\n       }\n       ExprLit(lit) => Ok(lit_to_const(lit)),\n       // If we have a vstore, just keep going; it has to be a string\n       ExprVstore(e, _) => eval_const_expr_partial(tcx, e),\n       ExprParen(e)     => eval_const_expr_partial(tcx, e),\n-      _ => Err(~\"Unsupported constant expr\")\n+      _ => Err(~\"unsupported constant expr\")\n     }\n }\n "}, {"sha": "e4b648dd43c23383891eab1f552672eaabde2be2", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -879,15 +879,15 @@ impl<'a, O:DataFlowOperator> PropagationContext<'a, O> {\n                             None => {\n                                 self.tcx().sess.span_bug(\n                                     expr.span,\n-                                    format!(\"No loop scope for id {:?}\", loop_id));\n+                                    format!(\"no loop scope for id {:?}\", loop_id));\n                             }\n                         }\n                     }\n \n                     r => {\n                         self.tcx().sess.span_bug(\n                             expr.span,\n-                            format!(\"Bad entry `{:?}` in def_map for label\", r));\n+                            format!(\"bad entry `{:?}` in def_map for label\", r));\n                     }\n                 }\n             }"}, {"sha": "546d6f272040831b773eebef9a267a45cb214211", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -328,7 +328,7 @@ impl IrMaps {\n           Some(&var) => var,\n           None => {\n             self.tcx.sess.span_bug(\n-                span, format!(\"No variable registered for id {}\", node_id));\n+                span, format!(\"no variable registered for id {}\", node_id));\n           }\n         }\n     }\n@@ -627,7 +627,7 @@ impl Liveness {\n             // code have to agree about which AST nodes are worth\n             // creating liveness nodes for.\n             self.tcx.sess.span_bug(\n-                span, format!(\"No live node registered for node {}\",\n+                span, format!(\"no live node registered for node {}\",\n                            node_id));\n           }\n         }\n@@ -759,7 +759,7 @@ impl Liveness {\n                 let def_map = self.tcx.def_map.borrow();\n                 match def_map.get().find(&id) {\n                     Some(&DefLabel(loop_id)) => loop_id,\n-                    _ => self.tcx.sess.span_bug(sp, \"Label on break/loop \\\n+                    _ => self.tcx.sess.span_bug(sp, \"label on break/loop \\\n                                                      doesn't refer to a loop\")\n                 }\n             }\n@@ -1152,7 +1152,7 @@ impl Liveness {\n               match break_ln.get().find(&sc) {\n                   Some(&b) => b,\n                   None => self.tcx.sess.span_bug(expr.span,\n-                                                 \"Break to unknown label\")\n+                                                 \"break to unknown label\")\n               }\n           }\n \n@@ -1167,7 +1167,7 @@ impl Liveness {\n               match cont_ln.get().find(&sc) {\n                   Some(&b) => b,\n                   None => self.tcx.sess.span_bug(expr.span,\n-                                                 \"Loop to unknown label\")\n+                                                 \"loop to unknown label\")\n               }\n           }\n "}, {"sha": "f5e3ff5db34d8117c070a53e7ea840df06d0e040", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -548,7 +548,7 @@ impl mem_categorization_ctxt {\n                   _ => {\n                       self.tcx.sess.span_bug(\n                           span,\n-                          format!(\"Upvar of non-closure {:?} - {}\",\n+                          format!(\"upvar of non-closure {:?} - {}\",\n                                fn_node_id, ty.repr(self.tcx)));\n                   }\n               }\n@@ -652,7 +652,7 @@ impl mem_categorization_ctxt {\n             None => {\n                 self.tcx.sess.span_bug(\n                     node.span(),\n-                    format!(\"Explicit deref of non-derefable type: {}\",\n+                    format!(\"explicit deref of non-derefable type: {}\",\n                          ty_to_str(self.tcx, base_cmt.ty)));\n             }\n         };\n@@ -745,7 +745,7 @@ impl mem_categorization_ctxt {\n           None => {\n             self.tcx.sess.span_bug(\n                 elt.span(),\n-                format!(\"Explicit index of non-index type `{}`\",\n+                format!(\"explicit index of non-index type `{}`\",\n                      ty_to_str(self.tcx, base_cmt.ty)));\n           }\n         };"}, {"sha": "86de1399acbb9b6cdf4c09791ead8719cebc18b7", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -142,7 +142,7 @@ impl RegionMaps {\n         let scope_map = self.scope_map.borrow();\n         match scope_map.get().find(&id) {\n             Some(&r) => r,\n-            None => { fail!(\"No enclosing scope for id {}\", id); }\n+            None => { fail!(\"no enclosing scope for id {}\", id); }\n         }\n     }\n \n@@ -154,7 +154,7 @@ impl RegionMaps {\n         let var_map = self.var_map.borrow();\n         match var_map.get().find(&var_id) {\n             Some(&r) => r,\n-            None => { fail!(\"No enclosing scope for id {}\", var_id); }\n+            None => { fail!(\"no enclosing scope for id {}\", var_id); }\n         }\n     }\n \n@@ -554,7 +554,7 @@ fn resolve_local(visitor: &mut RegionResolutionVisitor,\n         None => {\n             visitor.sess.span_bug(\n                 local.span,\n-                \"Local without enclosing block\");\n+                \"local without enclosing block\");\n         }\n     };\n "}, {"sha": "19e67bb865dd2167bb939b00784fb49dc2d103b9", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -1378,7 +1378,7 @@ impl Resolver {\n                     }\n                     match method_map.get().find_mut(name) {\n                         Some(s) => { s.insert(def_id); },\n-                        _ => fail!(\"Can't happen\"),\n+                        _ => fail!(\"can't happen\"),\n                     }\n                 }\n \n@@ -1696,7 +1696,7 @@ impl Resolver {\n                   }\n                   match method_map.get().find_mut(name) {\n                       Some(s) => { s.insert(def_id); },\n-                      _ => fail!(\"Can't happen\"),\n+                      _ => fail!(\"can't happen\"),\n                   }\n               }\n \n@@ -3992,7 +3992,7 @@ impl Resolver {\n                             self.resolve_error(field.span,\n                                 format!(\"field `{}` is already declared\", ident_str));\n                             self.session.span_note(prev_field.span,\n-                                \"Previously declared here\");\n+                                \"previously declared here\");\n                         },\n                         None => {\n                             ident_map.insert(ident, field);\n@@ -4476,7 +4476,7 @@ impl Resolver {\n                                       // in the same disjunct, which is an\n                                       // error\n                                      self.resolve_error(pattern.span,\n-                                       format!(\"Identifier `{}` is bound more \\\n+                                       format!(\"identifier `{}` is bound more \\\n                                              than once in the same pattern\",\n                                             path_to_str(path, self.session\n                                                         .intr())));"}, {"sha": "ab730c1b2e5470fd661a14ca3e164edb10b54b7b", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -297,7 +297,7 @@ impl LifetimeContext {\n                        def: ast::DefRegion) {\n         if lifetime_ref.id == ast::DUMMY_NODE_ID {\n             self.sess.span_bug(lifetime_ref.span,\n-                               \"Lifetime reference not renumbered, \\\n+                               \"lifetime reference not renumbered, \\\n                                probably a bug in syntax::fold\");\n         }\n "}, {"sha": "f49b0f1af08b3dc3c41264f05fc07c3811a5ebcd", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -484,7 +484,7 @@ fn assert_is_binding_or_wild(bcx: &Block, p: @ast::Pat) {\n     if !pat_is_binding_or_wild(bcx.tcx().def_map, p) {\n         bcx.sess().span_bug(\n             p.span,\n-            format!(\"Expected an identifier pattern but found p: {}\",\n+            format!(\"expected an identifier pattern but found p: {}\",\n                  p.repr(bcx.tcx())));\n     }\n }"}, {"sha": "15fbb54cd11e6f2c9900dc1ee2c956b309eb1341", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -434,7 +434,7 @@ fn generic_type_of(cx: &CrateContext, r: &Repr, name: Option<&str>, sizing: bool\n                                  Type::array(&Type::i64(), align_units),\n                 a if a.population_count() == 1 => Type::array(&Type::vector(&Type::i32(), a / 4),\n                                                               align_units),\n-                _ => fail!(\"Unsupported enum alignment: {:?}\", align)\n+                _ => fail!(\"unsupported enum alignment: {:?}\", align)\n             };\n             assert_eq!(machine::llalign_of_min(cx, pad_ty) as u64, align);\n             assert_eq!(align % discr_size, 0);"}, {"sha": "77fe847f5f221a9727c24dd7d6b2a37fbc17377b", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -103,7 +103,7 @@ fn trans<'a>(bcx: &'a Block<'a>, expr: &ast::Expr) -> Callee<'a> {\n             _ => {\n                 bcx.tcx().sess.span_bug(\n                     expr.span,\n-                    format!(\"Type of callee is neither bare-fn nor closure: {}\",\n+                    format!(\"type of callee is neither bare-fn nor closure: {}\",\n                          bcx.ty_to_str(datum.ty)));\n             }\n         }\n@@ -151,7 +151,7 @@ fn trans<'a>(bcx: &'a Block<'a>, expr: &ast::Expr) -> Callee<'a> {\n             ast::DefSelfTy(..) | ast::DefMethod(..) => {\n                 bcx.tcx().sess.span_bug(\n                     ref_expr.span,\n-                    format!(\"Cannot translate def {:?} \\\n+                    format!(\"cannot translate def {:?} \\\n                           to a callable thing!\", def));\n             }\n         }"}, {"sha": "e28660ea01f9467aad0019c2023c42129493016e", "filename": "src/librustc/middle/trans/cleanup.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -211,7 +211,7 @@ impl<'a> CleanupMethods<'a> for FunctionContext<'a> {\n                 _ => {}\n             }\n         }\n-        self.ccx.tcx.sess.bug(\"No loop scope found\");\n+        self.ccx.tcx.sess.bug(\"no loop scope found\");\n     }\n \n     fn normal_exit_block(&'a self,\n@@ -337,7 +337,7 @@ impl<'a> CleanupMethods<'a> for FunctionContext<'a> {\n         }\n \n         self.ccx.tcx.sess.bug(\n-            format!(\"No cleanup scope {} found\",\n+            format!(\"no cleanup scope {} found\",\n                     ast_map::node_id_to_str(self.ccx.tcx.items, cleanup_scope,\n                                             token::get_ident_interner())));\n     }\n@@ -548,7 +548,7 @@ impl<'a> CleanupHelperMethods<'a> for FunctionContext<'a> {\n \n                     LoopExit(id, _) => {\n                         self.ccx.tcx.sess.bug(format!(\n-                                \"Cannot exit from scope {:?}, \\\n+                                \"cannot exit from scope {:?}, \\\n                                 not in scope\", id));\n                     }\n                 }"}, {"sha": "7dbf159265dd1ccb82543e3f60bf49c7f8b46521", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -472,7 +472,7 @@ impl<'a> Block<'a> {\n             Some(&v) => v,\n             None => {\n                 self.tcx().sess.bug(format!(\n-                    \"No def associated with node id {:?}\", nid));\n+                    \"no def associated with node id {:?}\", nid));\n             }\n         }\n     }\n@@ -852,7 +852,7 @@ pub fn node_id_type_params(bcx: &Block, id: ast::NodeId) -> ~[ty::t] {\n \n     if !params.iter().all(|t| !ty::type_needs_infer(*t)) {\n         bcx.sess().bug(\n-            format!(\"Type parameters for node {} include inference types: {}\",\n+            format!(\"type parameters for node {} include inference types: {}\",\n                  id, params.map(|t| bcx.ty_to_str(*t)).connect(\",\")));\n     }\n "}, {"sha": "760c56dd9459ab2024307958800cfb2c25b1b1d4", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -146,14 +146,14 @@ fn const_deref(cx: &CrateContext, v: ValueRef, t: ty::t, explicit: bool)\n                     const_deref_newtype(cx, v, t)\n                 }\n                 _ => {\n-                    cx.sess.bug(format!(\"Unexpected dereferenceable type {}\",\n+                    cx.sess.bug(format!(\"unexpected dereferenceable type {}\",\n                                      ty_to_str(cx.tcx, t)))\n                 }\n             };\n             (dv, mt.ty)\n         }\n         None => {\n-            cx.sess.bug(format!(\"Can't dereference const of type {}\",\n+            cx.sess.bug(format!(\"can't dereference const of type {}\",\n                              ty_to_str(cx.tcx, t)))\n         }\n     }"}, {"sha": "d214a192ed8d48e670640a0eeb73d0c410be70c4", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -298,7 +298,7 @@ pub fn create_local_var_metadata(bcx: &Block, local: &ast::Local) {\n                 Some(datum) => datum,\n                 None => {\n                     bcx.tcx().sess.span_bug(span,\n-                        format!(\"No entry in lllocals table for {:?}\",\n+                        format!(\"no entry in lllocals table for {:?}\",\n                                 node_id));\n                 }\n             }\n@@ -440,7 +440,7 @@ pub fn create_argument_metadata(bcx: &Block, arg: &ast::Arg) {\n                 Some(v) => v,\n                 None => {\n                     bcx.tcx().sess.span_bug(span,\n-                        format!(\"No entry in llargs table for {:?}\",\n+                        format!(\"no entry in llargs table for {:?}\",\n                                 node_id));\n                 }\n             }"}, {"sha": "cb638e99ab72371c4925d8f75799ff4be369d45f", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -81,17 +81,17 @@ pub fn llvm_calling_convention(ccx: &CrateContext,\n         match abi {\n             RustIntrinsic => {\n                 // Intrinsics are emitted by monomorphic fn\n-                ccx.sess.bug(format!(\"Asked to register intrinsic fn\"));\n+                ccx.sess.bug(format!(\"asked to register intrinsic fn\"));\n             }\n \n             Rust => {\n                 // FIXME(#3678) Implement linking to foreign fns with Rust ABI\n                 ccx.sess.unimpl(\n-                    format!(\"Foreign functions with Rust ABI\"));\n+                    format!(\"foreign functions with Rust ABI\"));\n             }\n \n             // It's the ABI's job to select this, not us.\n-            System => ccx.sess.bug(\"System abi should be selected elsewhere\"),\n+            System => ccx.sess.bug(\"system abi should be selected elsewhere\"),\n \n             Stdcall => lib::llvm::X86StdcallCallConv,\n             Fastcall => lib::llvm::X86FastcallCallConv,\n@@ -365,7 +365,7 @@ pub fn trans_foreign_mod(ccx: @CrateContext,\n                             (abis, (*path).clone())\n                         }\n                         _ => {\n-                            fail!(\"Unable to find foreign item in tcx.items \\\n+                            fail!(\"unable to find foreign item in tcx.items \\\n                                    table.\")\n                         }\n                     };"}, {"sha": "653f56c6de313208eb71a8ec1865bb55ebeab003", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -227,7 +227,7 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n                 \"acq\"     => lib::llvm::Acquire,\n                 \"rel\"     => lib::llvm::Release,\n                 \"acqrel\"  => lib::llvm::AcquireRelease,\n-                _ => ccx.sess.fatal(\"Unknown ordering in atomic intrinsic\")\n+                _ => ccx.sess.fatal(\"unknown ordering in atomic intrinsic\")\n             }\n         };\n \n@@ -268,7 +268,7 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n                     \"min\"   => lib::llvm::Min,\n                     \"umax\"  => lib::llvm::UMax,\n                     \"umin\"  => lib::llvm::UMin,\n-                    _ => ccx.sess.fatal(\"Unknown atomic operation\")\n+                    _ => ccx.sess.fatal(\"unknown atomic operation\")\n                 };\n \n                 let old = AtomicRMW(bcx, atom_op, get_param(decl, first_real_arg),"}, {"sha": "61100220ffb478c669aaa4c79be964232bc757bd", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -98,7 +98,7 @@ pub fn monomorphic_fn(ccx: @CrateContext,\n         session::expect(\n             ccx.sess,\n             ccx.tcx.items.find(fn_id.node),\n-            || format!(\"While monomorphizing {:?}, couldn't find it in the \\\n+            || format!(\"while monomorphizing {:?}, couldn't find it in the \\\n                         item map (may have attempted to monomorphize an item \\\n                         defined in a different crate?)\", fn_id))\n     };\n@@ -286,7 +286,7 @@ pub fn monomorphic_fn(ccx: @CrateContext,\n                     d\n                 }\n                 _ => {\n-                    ccx.tcx.sess.bug(format!(\"Can't monomorphize a {:?}\",\n+                    ccx.tcx.sess.bug(format!(\"can't monomorphize a {:?}\",\n                                              map_node))\n                 }\n             }\n@@ -310,7 +310,7 @@ pub fn monomorphic_fn(ccx: @CrateContext,\n         ast_map::NodeBlock(..) |\n         ast_map::NodeCalleeScope(..) |\n         ast_map::NodeLocal(..) => {\n-            ccx.tcx.sess.bug(format!(\"Can't monomorphize a {:?}\", map_node))\n+            ccx.tcx.sess.bug(format!(\"can't monomorphize a {:?}\", map_node))\n         }\n     };\n "}, {"sha": "1a1ae97bbcdb93451712db86fa76e4428b842bad", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -95,7 +95,7 @@ impl<'a> Reflector<'a> {\n         let tcx = self.bcx.tcx();\n         let mth_idx = ty::method_idx(\n             tcx.sess.ident_of(~\"visit_\" + ty_name),\n-            *self.visitor_methods).expect(format!(\"Couldn't find visit method \\\n+            *self.visitor_methods).expect(format!(\"couldn't find visit method \\\n                                                 for {}\", ty_name));\n         let mth_ty =\n             ty::mk_bare_fn(tcx, self.visitor_methods[mth_idx].fty.clone());"}, {"sha": "c8180362bc5cfde1c1e4c0c42dd534ec543c8922", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -404,7 +404,7 @@ pub fn write_content<'a>(\n                 }\n                 _ => {\n                     bcx.tcx().sess.span_bug(content_expr.span,\n-                                            \"Unexpected evec content\");\n+                                            \"unexpected evec content\");\n                 }\n             }\n         }\n@@ -465,7 +465,7 @@ pub fn write_content<'a>(\n         }\n         _ => {\n             bcx.tcx().sess.span_bug(content_expr.span,\n-                                    \"Unexpected vec content\");\n+                                    \"unexpected vec content\");\n         }\n     }\n }\n@@ -498,7 +498,7 @@ pub fn elements_required(bcx: &Block, content_expr: &ast::Expr) -> uint {\n                 ast::LitStr(ref s, _) => s.get().len(),\n                 _ => {\n                     bcx.tcx().sess.span_bug(content_expr.span,\n-                                            \"Unexpected evec content\")\n+                                            \"unexpected evec content\")\n                 }\n             }\n         },\n@@ -507,7 +507,7 @@ pub fn elements_required(bcx: &Block, content_expr: &ast::Expr) -> uint {\n             ty::eval_repeat_count(&bcx.tcx(), count_expr)\n         }\n         _ => bcx.tcx().sess.span_bug(content_expr.span,\n-                                     \"Unexpected vec content\")\n+                                     \"unexpected vec content\")\n     }\n }\n "}, {"sha": "7b2aee9274a7dc3a717553ea675a79a27127f8b2", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -2101,7 +2101,7 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n             ty_type => TC::None,\n \n             ty_err => {\n-                cx.sess.bug(\"Asked to compute contents of error type\");\n+                cx.sess.bug(\"asked to compute contents of error type\");\n             }\n         };\n \n@@ -2926,7 +2926,7 @@ pub fn adjust_ty(cx: ctxt,\n                                 None => {\n                                     cx.sess.span_bug(\n                                         span,\n-                                        format!(\"The {}th autoderef failed: \\\n+                                        format!(\"the {}th autoderef failed: \\\n                                                 {}\",\n                                                 i,\n                                                 ty_to_str(cx, adjusted_ty)));\n@@ -3132,7 +3132,7 @@ pub fn resolve_expr(tcx: ctxt, expr: &ast::Expr) -> ast::Def {\n         Some(&def) => def,\n         None => {\n             tcx.sess.span_bug(expr.span, format!(\n-                \"No def-map entry for expr {:?}\", expr.id));\n+                \"no def-map entry for expr {:?}\", expr.id));\n         }\n     }\n }\n@@ -3209,7 +3209,7 @@ pub fn expr_kind(tcx: ctxt,\n \n                 def => {\n                     tcx.sess.span_bug(expr.span, format!(\n-                        \"Uncategorized def for expr {:?}: {:?}\",\n+                        \"uncategorized def for expr {:?}: {:?}\",\n                         expr.id, def));\n                 }\n             }\n@@ -3335,7 +3335,7 @@ pub fn field_idx_strict(tcx: ty::ctxt, name: ast::Name, fields: &[field])\n     for f in fields.iter() { if f.ident.name == name { return i; } i += 1u; }\n     let string = token::get_ident(name);\n     tcx.sess.bug(format!(\n-        \"No field named `{}` found in the list of fields `{:?}`\",\n+        \"no field named `{}` found in the list of fields `{:?}`\",\n         string.get(),\n         fields.map(|f| tcx.sess.str_of(f.ident))));\n }\n@@ -3687,7 +3687,7 @@ fn lookup_locally_or_in_crate_store<V:Clone>(\n     }\n \n     if def_id.crate == ast::LOCAL_CRATE {\n-        fail!(\"No def'n found for {:?} in tcx.{}\", def_id, descr);\n+        fail!(\"no def'n found for {:?} in tcx.{}\", def_id, descr);\n     }\n     let v = load_external();\n     map.insert(def_id, v.clone());"}, {"sha": "f19ca049368d05b5ecdae9e1740500ceaf5ceab1", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -789,7 +789,7 @@ impl<'a> LookupContext<'a> {\n             ty_err => None,\n \n             ty_unboxed_vec(_) | ty_type | ty_infer(TyVar(_)) => {\n-                self.bug(format!(\"Unexpected type: {}\",\n+                self.bug(format!(\"unexpected type: {}\",\n                               self.ty_to_str(self_ty)));\n             }\n         }"}, {"sha": "2332152a5d73470168a3f094e4a6964c89501b8f", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -517,9 +517,9 @@ pub fn check_no_duplicate_fields(tcx: ty::ctxt,\n         let orig_sp = field_names.find(&id).map(|x| *x);\n         match orig_sp {\n             Some(orig_sp) => {\n-                tcx.sess.span_err(sp, format!(\"Duplicate field name {} in record type declaration\",\n+                tcx.sess.span_err(sp, format!(\"duplicate field name {} in record type declaration\",\n                                               tcx.sess.str_of(id)));\n-                tcx.sess.span_note(orig_sp, \"First declaration of this field occurred here\");\n+                tcx.sess.span_note(orig_sp, \"first declaration of this field occurred here\");\n                 break;\n             }\n             None => {\n@@ -1006,7 +1006,7 @@ impl FnCtxt {\n             None => {\n                 self.tcx().sess.span_bug(\n                     span,\n-                    format!(\"No type for local variable {:?}\", nid));\n+                    format!(\"no type for local variable {:?}\", nid));\n             }\n         }\n     }\n@@ -1619,7 +1619,7 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n                 _ => {\n                     fcx.tcx().sess.span_bug(\n                         sp,\n-                        format!(\"Method without bare fn type\"));\n+                        format!(\"method without bare fn type\"));\n                 }\n             }\n         }"}, {"sha": "ac15d52ff13b50e3ea3eb8b85d253a8a0cc6b426", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -473,7 +473,7 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n         _ => {\n             tcx.sess.span_bug(\n                 expr.span,\n-                \"Expected expr_fn_block\");\n+                \"expected expr_fn_block\");\n         }\n     }\n }\n@@ -1189,7 +1189,7 @@ pub mod guarantor {\n                 None => {\n                     tcx.sess.span_bug(\n                         expr.span,\n-                        format!(\"Autoderef but type not derefable: {}\",\n+                        format!(\"autoderef but type not derefable: {}\",\n                              ty_to_str(tcx, ct.ty)));\n                 }\n             }"}, {"sha": "5e46daad7ee20befb563d754eccf132846a15011", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -430,7 +430,7 @@ pub fn ensure_supertraits(ccx: &CrateCtxt,\n             if ty_trait_refs.iter().any(|other_trait| other_trait.def_id == trait_ref.def_id) {\n                 // This means a trait inherited from the same supertrait more\n                 // than once.\n-                tcx.sess.span_err(sp, \"Duplicate supertrait in trait declaration\");\n+                tcx.sess.span_err(sp, \"duplicate supertrait in trait declaration\");\n                 break;\n             } else {\n                 ty_trait_refs.push(trait_ref);\n@@ -891,7 +891,7 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: &ast::Item)\n         ast::ItemTrait(..) => {\n             tcx.sess.span_bug(\n                 it.span,\n-                format!(\"Invoked ty_of_item on trait\"));\n+                format!(\"invoked ty_of_item on trait\"));\n         }\n         ast::ItemStruct(_, ref generics) => {\n             let ty_generics = ty_generics(ccx, generics, 0);"}, {"sha": "d8166108947fd75eb185577e2138a5eef57cb707", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -202,7 +202,7 @@ impl<'f> Coerce<'f> {\n             Err(e) => {\n                 self.get_ref().infcx.tcx.sess.span_bug(\n                     self.get_ref().trace.origin.span(),\n-                    format!(\"Failed to resolve even without \\\n+                    format!(\"failed to resolve even without \\\n                           any force options: {:?}\", e));\n             }\n         }"}, {"sha": "fa40fa6a06441aa07e24c78185e418b84fe0f6fa", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -528,7 +528,7 @@ pub fn var_ids<T:Combine>(this: &T,\n             r => {\n                 this.infcx().tcx.sess.span_bug(\n                     this.trace().origin.span(),\n-                    format!(\"Found non-region-vid: {:?}\", r));\n+                    format!(\"found non-region-vid: {:?}\", r));\n             }\n         }).collect()\n }"}, {"sha": "2bc0d7d64195600fa9af654ef9ec653a94f48190", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -233,7 +233,7 @@ impl RegionVarBindings {\n         self.bound_count.set(sc + 1);\n \n         if sc >= self.bound_count.get() {\n-            self.tcx.sess.bug(\"Rollover in RegionInference new_bound()\");\n+            self.tcx.sess.bug(\"rollover in RegionInference new_bound()\");\n         }\n \n         ReLateBound(binder_id, BrFresh(sc))\n@@ -278,7 +278,7 @@ impl RegionVarBindings {\n           (_, ReLateBound(..)) => {\n             self.tcx.sess.span_bug(\n                 origin.span(),\n-                format!(\"Cannot relate bound region: {} <= {}\",\n+                format!(\"cannot relate bound region: {} <= {}\",\n                         sub.repr(self.tcx),\n                         sup.repr(self.tcx)));\n           }\n@@ -351,7 +351,7 @@ impl RegionVarBindings {\n                 let var_origins = self.var_origins.borrow();\n                 self.tcx.sess.span_bug(\n                     var_origins.get()[rid.to_uint()].span(),\n-                    format!(\"Attempt to resolve region variable before \\\n+                    format!(\"attempt to resolve region variable before \\\n                              values have been computed!\"))\n             }\n             Some(ref values) => values[rid.to_uint()]\n@@ -544,7 +544,7 @@ impl RegionVarBindings {\n           (ReEarlyBound(..), _) |\n           (_, ReEarlyBound(..)) => {\n             self.tcx.sess.bug(\n-                format!(\"Cannot relate bound region: LUB({}, {})\",\n+                format!(\"cannot relate bound region: LUB({}, {})\",\n                         a.repr(self.tcx),\n                         b.repr(self.tcx)));\n           }\n@@ -646,7 +646,7 @@ impl RegionVarBindings {\n             (ReEarlyBound(..), _) |\n             (_, ReEarlyBound(..)) => {\n               self.tcx.sess.bug(\n-                  format!(\"Cannot relate bound region: GLB({}, {})\",\n+                  format!(\"cannot relate bound region: GLB({}, {})\",\n                           a.repr(self.tcx),\n                           b.repr(self.tcx)));\n             }"}, {"sha": "517fe232b0345dbada68595436d3b70899ed50a4", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -97,7 +97,7 @@ impl Env {\n         return match search_mod(self, &self.crate.node.module, 0, names) {\n             Some(id) => id,\n             None => {\n-                fail!(\"No item found: `%s`\", names.connect(\"::\"));\n+                fail!(\"no item found: `%s`\", names.connect(\"::\"));\n             }\n         };\n \n@@ -230,7 +230,7 @@ impl Env {\n             for msg in self.err_messages.iter() {\n                 debug!(\"Error encountered: %s\", *msg);\n             }\n-            format!(\"Resolving regions encountered %u errors but expected %u!\",\n+            format!(\"resolving regions encountered %u errors but expected %u!\",\n                  self.err_messages.len(),\n                  exp_count);\n         }\n@@ -240,7 +240,7 @@ impl Env {\n     pub fn check_lub(&self, t1: ty::t, t2: ty::t, t_lub: ty::t) {\n         match self.lub().tys(t1, t2) {\n             Err(e) => {\n-                fail!(\"Unexpected error computing LUB: %?\", e)\n+                fail!(\"unexpected error computing LUB: %?\", e)\n             }\n             Ok(t) => {\n                 self.assert_eq(t, t_lub);\n@@ -262,7 +262,7 @@ impl Env {\n                self.ty_to_str(t_glb));\n         match self.glb().tys(t1, t2) {\n             Err(e) => {\n-                fail!(\"Unexpected error computing LUB: %?\", e)\n+                fail!(\"unexpected error computing LUB: %?\", e)\n             }\n             Ok(t) => {\n                 self.assert_eq(t, t_glb);\n@@ -281,7 +281,7 @@ impl Env {\n         match self.lub().tys(t1, t2) {\n             Err(_) => {}\n             Ok(t) => {\n-                fail!(\"Unexpected success computing LUB: %?\", self.ty_to_str(t))\n+                fail!(\"unexpected success computing LUB: %?\", self.ty_to_str(t))\n             }\n         }\n     }\n@@ -291,7 +291,7 @@ impl Env {\n         match self.glb().tys(t1, t2) {\n             Err(_) => {}\n             Ok(t) => {\n-                fail!(\"Unexpected success computing GLB: %?\", self.ty_to_str(t))\n+                fail!(\"unexpected success computing GLB: %?\", self.ty_to_str(t))\n             }\n         }\n     }"}, {"sha": "e29add4bc95c1b17cf1dd4c14373d94023b5490b", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -718,7 +718,7 @@ impl<'a> ConstraintContext<'a> {\n             ty::ty_infer(..) | ty::ty_err |\n             ty::ty_type | ty::ty_unboxed_vec(..) => {\n                 self.tcx().sess.bug(\n-                    format!(\"Unexpected type encountered in \\\n+                    format!(\"unexpected type encountered in \\\n                             variance inference: {}\",\n                             ty.repr(self.tcx())));\n             }\n@@ -804,7 +804,7 @@ impl<'a> ConstraintContext<'a> {\n             ty::ReEmpty => {\n                 // We don't expect to see anything but 'static or bound\n                 // regions when visiting member types or method types.\n-                self.tcx().sess.bug(format!(\"Unexpected region encountered in \\\n+                self.tcx().sess.bug(format!(\"unexpected region encountered in \\\n                                             variance inference: {}\",\n                                             region.repr(self.tcx())));\n             }"}, {"sha": "5fbf57c506065e49f373be896e6278c2171faaf0", "filename": "src/librustc/util/sha2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Futil%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibrustc%2Futil%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsha2.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -64,12 +64,12 @@ fn add_bytes_to_bits<T: Int + CheckedAdd + ToBits>(bits: T, bytes: T) -> T {\n     let (new_high_bits, new_low_bits) = bytes.to_bits();\n \n     if new_high_bits > Zero::zero() {\n-        fail!(\"Numeric overflow occured.\")\n+        fail!(\"numeric overflow occured.\")\n     }\n \n     match bits.checked_add(&new_low_bits) {\n         Some(x) => return x,\n-        None => fail!(\"Numeric overflow occured.\")\n+        None => fail!(\"numeric overflow occured.\")\n     }\n }\n "}, {"sha": "6b0f2c6e516c63f9b6802be5253a14aee324c50a", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -323,7 +323,7 @@ fn cannot_combine(n: Abi, m: Abi) {\n                          (m == a && n == b));\n         }\n         None => {\n-            fail!(\"Invalid match not detected\");\n+            fail!(\"invalid match not detected\");\n         }\n     }\n }\n@@ -335,7 +335,7 @@ fn can_combine(n: Abi, m: Abi) {\n     set.add(m);\n     match set.check_valid() {\n         Some((_, _)) => {\n-            fail!(\"Valid match declared invalid\");\n+            fail!(\"valid match declared invalid\");\n         }\n         None => {}\n     }"}, {"sha": "39bb870b969a0798489aa86390c1101a0d5432fd", "filename": "src/libsyntax/ext/bytes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Fbytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Fbytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbytes.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -40,7 +40,7 @@ pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree]) ->\n                 // u8 literal, push to vector expression\n                 ast::LitUint(v, ast::TyU8) => {\n                     if v > 0xFF {\n-                        cx.span_err(expr.span, \"Too large u8 literal in bytes!\")\n+                        cx.span_err(expr.span, \"too large u8 literal in bytes!\")\n                     } else {\n                         bytes.push(cx.expr_u8(expr.span, v as u8));\n                     }\n@@ -49,9 +49,9 @@ pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree]) ->\n                 // integer literal, push to vector expression\n                 ast::LitIntUnsuffixed(v) => {\n                     if v > 0xFF {\n-                        cx.span_err(expr.span, \"Too large integer literal in bytes!\")\n+                        cx.span_err(expr.span, \"too large integer literal in bytes!\")\n                     } else if v < 0 {\n-                        cx.span_err(expr.span, \"Negative integer literal in bytes!\")\n+                        cx.span_err(expr.span, \"negative integer literal in bytes!\")\n                     } else {\n                         bytes.push(cx.expr_u8(expr.span, v as u8));\n                     }\n@@ -62,14 +62,14 @@ pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree]) ->\n                     if char::from_u32(v).unwrap().is_ascii() {\n                         bytes.push(cx.expr_u8(expr.span, v as u8));\n                     } else {\n-                        cx.span_err(expr.span, \"Non-ascii char literal in bytes!\")\n+                        cx.span_err(expr.span, \"non-ascii char literal in bytes!\")\n                     }\n                 }\n \n-                _ => cx.span_err(expr.span, \"Unsupported literal in bytes!\")\n+                _ => cx.span_err(expr.span, \"unsupported literal in bytes!\")\n             },\n \n-            _ => cx.span_err(expr.span, \"Non-literal in bytes!\")\n+            _ => cx.span_err(expr.span, \"non-literal in bytes!\")\n         }\n     }\n "}, {"sha": "d911208e7de30628fe64d77a047564b11debf1e1", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -92,10 +92,10 @@ fn cs_clone(\n             all_fields = af;\n         },\n         EnumNonMatching(..) => cx.span_bug(trait_span,\n-                                           format!(\"Non-matching enum variants in `deriving({})`\",\n+                                           format!(\"non-matching enum variants in `deriving({})`\",\n                                                   name)),\n         StaticEnum(..) | StaticStruct(..) => cx.span_bug(trait_span,\n-                                                         format!(\"Static method in `deriving({})`\",\n+                                                         format!(\"static method in `deriving({})`\",\n                                                                  name))\n     }\n "}, {"sha": "c06b4e30e07cfd399c6e35fb753a9d4433ece031", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -75,7 +75,7 @@ fn cs_op(less: bool, equal: bool, cx: &mut ExtCtxt, span: Span, substr: &Substru\n             */\n             let other_f = match other_fs {\n                 [o_f] => o_f,\n-                _ => cx.span_bug(span, \"Not exactly 2 arguments in `deriving(Ord)`\")\n+                _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(Ord)`\")\n             };\n \n             let cmp = cx.expr_binary(span, op, self_f, other_f);\n@@ -99,7 +99,7 @@ fn cs_op(less: bool, equal: bool, cx: &mut ExtCtxt, span: Span, substr: &Substru\n                                  } else {\n                                      self_var > other_var\n                                  }),\n-                _ => cx.span_bug(span, \"Not exactly 2 arguments in `deriving(Ord)`\")\n+                _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(Ord)`\")\n             }\n         },\n         cx, span, substr)"}, {"sha": "68de158e9e78b561ca2f274e6924375b01117589", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -110,7 +110,7 @@ pub fn cs_cmp(cx: &mut ExtCtxt, span: Span,\n                     let order = ordering_const(cx, span, self_var.cmp(&other_var));\n                     cx.expr_path(order)\n                 }\n-                _ => cx.span_bug(span, \"Not exactly 2 arguments in `deriving(TotalOrd)`\")\n+                _ => cx.span_bug(span, \"not exactly 2 arguments in `deriving(TotalOrd)`\")\n             }\n         },\n         cx, span, substr)"}, {"sha": "01006a0c15d073406cf19e4a3e4466e79bb71af4", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -656,7 +656,7 @@ impl<'a> MethodDef<'a> {\n                 }).collect()\n             }\n             [] => { trait_.cx.span_bug(trait_.span,\n-                                       \"No self arguments to non-static method \\\n+                                       \"no self arguments to non-static method \\\n                                        in generic `deriving`\") }\n         };\n \n@@ -840,7 +840,7 @@ impl<'a> MethodDef<'a> {\n                 let index = match matching {\n                     Some(i) => i,\n                     None => cx.span_bug(trait_.span,\n-                                        \"Non-matching variants when required to \\\n+                                        \"non-matching variants when required to \\\n                                         be matching in generic `deriving`\")\n                 };\n \n@@ -965,7 +965,7 @@ impl<'a> TraitDef<'a> {\n \n         match (just_spans.is_empty(), named_idents.is_empty()) {\n             (false, false) => self.cx.span_bug(self.span,\n-                                               \"A struct with named and unnamed \\\n+                                               \"a struct with named and unnamed \\\n                                                fields in generic `deriving`\"),\n             // named fields\n             (_, false) => Named(named_idents),\n@@ -1019,7 +1019,7 @@ impl<'a> TraitDef<'a> {\n                     None\n                 }\n                 _ => {\n-                    cx.span_bug(sp, \"A struct with named and unnamed fields in `deriving`\");\n+                    cx.span_bug(sp, \"a struct with named and unnamed fields in `deriving`\");\n                 }\n             };\n             let path = cx.path_ident(sp, cx.ident_of(format!(\"{}_{}\", prefix, i)));\n@@ -1116,7 +1116,7 @@ pub fn cs_fold(use_foldl: bool,\n                                                           *all_enums,\n                                                           substructure.nonself_args),\n         StaticEnum(..) | StaticStruct(..) => {\n-            cx.span_bug(trait_span, \"Static function in `deriving`\")\n+            cx.span_bug(trait_span, \"static function in `deriving`\")\n         }\n     }\n }\n@@ -1154,7 +1154,7 @@ pub fn cs_same_method(f: |&mut ExtCtxt, Span, ~[@Expr]| -> @Expr,\n                                                           *all_enums,\n                                                           substructure.nonself_args),\n         StaticEnum(..) | StaticStruct(..) => {\n-            cx.span_bug(trait_span, \"Static function in `deriving`\")\n+            cx.span_bug(trait_span, \"static function in `deriving`\")\n         }\n     }\n }"}, {"sha": "5f680745ea7c60acee2e326e9898c374862a225f", "filename": "src/libsyntax/ext/deriving/iter_bytes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -48,7 +48,7 @@ pub fn expand_deriving_iter_bytes(cx: &mut ExtCtxt,\n fn iter_bytes_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> @Expr {\n     let (lsb0, f)= match substr.nonself_args {\n         [l, f] => (l, f),\n-        _ => cx.span_bug(trait_span, \"Incorrect number of arguments in `deriving(IterBytes)`\")\n+        _ => cx.span_bug(trait_span, \"incorrect number of arguments in `deriving(IterBytes)`\")\n     };\n     // Build the \"explicitly borrowed\" stack closure, \"|_buf| f(_buf)\".\n     let blk_arg = cx.ident_of(\"_buf\");\n@@ -82,7 +82,7 @@ fn iter_bytes_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substruc\n \n             fields = fs;\n         }\n-        _ => cx.span_bug(trait_span, \"Impossible substructure in `deriving(IterBytes)`\")\n+        _ => cx.span_bug(trait_span, \"impossible substructure in `deriving(IterBytes)`\")\n     }\n \n     for &FieldInfo { self_, span, .. } in fields.iter() {"}, {"sha": "f74b807bae6a0e58bb17e0d12d7c23153f428032", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -68,7 +68,7 @@ pub fn expand_deriving_from_primitive(cx: &mut ExtCtxt,\n fn cs_from(name: &str, cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> @Expr {\n     let n = match substr.nonself_args {\n         [n] => n,\n-        _ => cx.span_bug(trait_span, \"Incorrect number of arguments in `deriving(FromPrimitive)`\")\n+        _ => cx.span_bug(trait_span, \"incorrect number of arguments in `deriving(FromPrimitive)`\")\n     };\n \n     match *substr.fields {"}, {"sha": "ff0fd388ebe6d4823992da6200c789c3233b2744", "filename": "src/libsyntax/ext/deriving/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -178,8 +178,8 @@ impl<'a> Ty<'a> {\n             Literal(ref p) => {\n                 p.to_path(cx, span, self_ty, self_generics)\n             }\n-            Ptr(..) => { cx.span_bug(span, \"Pointer in a path in generic `deriving`\") }\n-            Tuple(..) => { cx.span_bug(span, \"Tuple in a path in generic `deriving`\") }\n+            Ptr(..) => { cx.span_bug(span, \"pointer in a path in generic `deriving`\") }\n+            Tuple(..) => { cx.span_bug(span, \"tuple in a path in generic `deriving`\") }\n         }\n     }\n }"}, {"sha": "e98322099040e7d81c8a77fc31bba20c6fe82805", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -257,7 +257,7 @@ pub mod rt {\n             match res {\n                 Some(ast) => ast,\n                 None => {\n-                    error!(\"Parse error\");\n+                    error!(\"parse error\");\n                     fail!()\n                 }\n             }\n@@ -589,7 +589,7 @@ fn expand_tts(cx: &ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n \n     let cx_expr = p.parse_expr();\n     if !p.eat(&token::COMMA) {\n-        p.fatal(\"Expected token `,`\");\n+        p.fatal(\"expected token `,`\");\n     }\n \n     let tts = p.parse_all_token_trees();"}, {"sha": "e831e8fbb10d9a4e980d68042f9e156600dd4dc9", "filename": "src/libsyntax/ext/registrar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Fregistrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Fregistrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fregistrar.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -49,7 +49,7 @@ pub fn find_macro_registrar(diagnostic: @diagnostic::SpanHandler,\n             })\n         },\n         _ => {\n-            diagnostic.handler().err(\"Multiple macro registration functions found\");\n+            diagnostic.handler().err(\"multiple macro registration functions found\");\n             for &(_, span) in ctx.registrars.iter() {\n                 diagnostic.span_note(span, \"one is here\");\n             }"}, {"sha": "92bc204e2c18c2b167b4c87f32ae563bc26285fa", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -185,7 +185,7 @@ pub fn nameize(p_s: @ParseSess, ms: &[Matcher], res: &[@NamedMatch])\n             if ret_val.contains_key(bind_name) {\n                 let string = token::get_ident(bind_name.name);\n                 p_s.span_diagnostic\n-                   .span_fatal(sp, \"Duplicated bind name: \" + string.get())\n+                   .span_fatal(sp, \"duplicated bind name: \" + string.get())\n             }\n             ret_val.insert(*bind_name, res[idx]);\n           }\n@@ -441,6 +441,6 @@ pub fn parse_nt(p: &mut Parser, name: &str) -> Nonterminal {\n         res\n       }\n       \"matchers\" => token::NtMatchers(p.parse_matchers()),\n-      _ => p.fatal(~\"Unsupported builtin nonterminal parser: \" + name)\n+      _ => p.fatal(~\"unsupported builtin nonterminal parser: \" + name)\n     }\n }"}, {"sha": "fccbc57f12c0f4688020482b3ef030fc633cd0b5", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -148,7 +148,7 @@ fn lis_merge(lhs: LockstepIterSize, rhs: LockstepIterSize) -> LockstepIterSize {\n             LisConstraint(r_len, ref r_id) => {\n                 let l_n = token::get_ident(l_id.name);\n                 let r_n = token::get_ident(r_id.name);\n-                LisContradiction(format!(\"Inconsistent lockstep iteration: \\\n+                LisContradiction(format!(\"inconsistent lockstep iteration: \\\n                                           '{}' has {} items, but '{}' has {}\",\n                                           l_n.get(), l_len, r_n.get(), r_len))\n             }"}, {"sha": "21f05fa684a844ff061514899ec1567dcc9e6b7b", "filename": "src/libsyntax/opt_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fopt_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fopt_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fopt_vec.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -85,7 +85,7 @@ impl<T> OptVec<T> {\n \n     pub fn get<'a>(&'a self, i: uint) -> &'a T {\n         match *self {\n-            Empty => fail!(\"Invalid index {}\", i),\n+            Empty => fail!(\"invalid index {}\", i),\n             Vec(ref v) => &v[i]\n         }\n     }\n@@ -103,7 +103,7 @@ impl<T> OptVec<T> {\n \n     pub fn swap_remove(&mut self, index: uint) {\n         match *self {\n-            Empty => { fail!(\"Index out of bounds\"); }\n+            Empty => { fail!(\"index out of bounds\"); }\n             Vec(ref mut v) => {\n                 assert!(index < v.len());\n                 v.swap_remove(index);"}, {"sha": "091fbf82b0d5b0a51a8ac59e2277d8cdb85f3880", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -76,7 +76,7 @@ impl ParserObsoleteMethods for Parser {\n         let (kind_str, desc) = match kind {\n             ObsoleteSwap => (\n                 \"swap\",\n-                \"Use std::util::{swap, replace} instead\"\n+                \"use std::util::{swap, replace} instead\"\n             ),\n             ObsoleteUnsafeBlock => (\n                 \"non-standalone unsafe block\","}, {"sha": "fd8b945a177ffaf8ba6fe08d5ce721ab33ecf661", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -431,7 +431,7 @@ impl Parser {\n             && self.look_ahead(1, |t| *t == token::RBRACE) {\n             // matched; signal non-fatal error and recover.\n             self.span_err(self.span,\n-                          \"Unit-like struct construction is written with no trailing `{ }`\");\n+                          \"unit-like struct construction is written with no trailing `{ }`\");\n             self.eat(&token::LBRACE);\n             self.eat(&token::RBRACE);\n             true\n@@ -1601,7 +1601,7 @@ impl Parser {\n                 };\n             }\n             _ => {\n-                self.fatal(format!(\"Expected a lifetime name\"));\n+                self.fatal(format!(\"expected a lifetime name\"));\n             }\n         }\n     }\n@@ -2137,7 +2137,7 @@ impl Parser {\n                 }\n                 // There shouldn't really be a span, but it's easier for the test runner\n                 // if we give it one\n-                self.fatal(\"This file contains an un-closed delimiter \");\n+                self.fatal(\"this file contains an un-closed delimiter \");\n             }\n             token::LPAREN | token::LBRACE | token::LBRACKET => {\n                 let close_delim = token::flip_delimiter(&self.token);\n@@ -3957,7 +3957,7 @@ impl Parser {\n             }\n             if fields.len() == 0 {\n                 let string = get_ident_interner().get(class_name.name);\n-                self.fatal(format!(\"Unit-like struct definition should be written as `struct {};`\",\n+                self.fatal(format!(\"unit-like struct definition should be written as `struct {};`\",\n                                    string.as_slice()));\n             }\n             self.bump();"}, {"sha": "f60406129618be0b9936224b16a7cbf8fc004870", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -68,7 +68,7 @@ impl<T> SmallVector<T> {\n         match *self {\n             One(ref v) if idx == 0 => v,\n             Many(ref vs) => &vs[idx],\n-            _ => fail!(\"Out of bounds access\")\n+            _ => fail!(\"out of bounds access\")\n         }\n     }\n "}, {"sha": "a2bb56fdf5f65b38b0cb4c15ca839924cb8ee556", "filename": "src/test/compile-fail/issue-2354.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fissue-2354.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fissue-2354.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2354.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -19,4 +19,4 @@ fn bar() {\n     while (i < 1000) {}\n }\n \n-fn main() {} //~ ERROR This file contains an un-closed delimiter\n+fn main() {} //~ ERROR this file contains an un-closed delimiter"}, {"sha": "691bd3b4211cc2dbef9c9018714780b1ba038ef7", "filename": "src/test/compile-fail/issue-3038.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -20,16 +20,16 @@ fn main()\n \n     let _z = match g(1, 2) {\n       g(x, x) => { info!(\"{:?}\", x + x); }\n-      //~^ ERROR Identifier `x` is bound more than once in the same pattern\n+      //~^ ERROR identifier `x` is bound more than once in the same pattern\n     };\n \n     let _z = match i(l(1, 2), m(3, 4)) {\n-      i(l(x, _), m(_, x))  //~ ERROR Identifier `x` is bound more than once in the same pattern\n+      i(l(x, _), m(_, x))  //~ ERROR identifier `x` is bound more than once in the same pattern\n         => { error!(\"{:?}\", x + x); }\n     };\n \n     let _z = match (1, 2) {\n-        (x, x) => { x } //~ ERROR Identifier `x` is bound more than once in the same pattern\n+        (x, x) => { x } //~ ERROR identifier `x` is bound more than once in the same pattern\n     };\n \n }"}, {"sha": "cfb10d39201ab8d21b5e776dd596b4a5eadfc72a", "filename": "src/test/compile-fail/issue-3953.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -10,7 +10,7 @@\n \n use std::cmp::Eq;\n \n-trait Hahaha: Eq + Eq + Eq + Eq + Eq + //~ ERROR Duplicate supertrait\n+trait Hahaha: Eq + Eq + Eq + Eq + Eq + //~ ERROR duplicate supertrait\n               Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq +\n               Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq +\n               Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq + Eq +"}, {"sha": "82b1438d6fe013195bd78013da804c65e427736f", "filename": "src/test/compile-fail/multiple-macro-registrars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fmultiple-macro-registrars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fmultiple-macro-registrars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmultiple-macro-registrars.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: Multiple macro registration functions found\n+// error-pattern: multiple macro registration functions found\n \n #[feature(macro_registrar)];\n "}, {"sha": "2a9a0358cc6c0fb220a2888a8f2de440aa2bfd3b", "filename": "src/test/compile-fail/non-constant-expr-for-fixed-len-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-fixed-len-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-fixed-len-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-fixed-len-vec.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -13,6 +13,6 @@\n fn main() {\n     fn bar(n: int) {\n         let _x: [int, ..n];\n-        //~^ ERROR expected constant expr for vector length: Non-constant path in constant expr\n+        //~^ ERROR expected constant expr for vector length: non-constant path in constant expr\n     }\n }"}, {"sha": "cd555f8d917882cf403381a36cdcfde3eea1da5a", "filename": "src/test/compile-fail/struct-no-fields-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-2.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -12,7 +12,7 @@ struct Foo;\n \n fn f2() {\n     let _end_stmt     = Foo { };\n-    //~^ ERROR: Unit-like struct construction is written with no trailing `{ }`\n+    //~^ ERROR: unit-like struct construction is written with no trailing `{ }`\n }\n \n fn main() {}"}, {"sha": "2595c5e8acf87374a8efd5a886135a2d6b327b23", "filename": "src/test/compile-fail/struct-no-fields-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-3.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -12,7 +12,7 @@ struct Foo;\n \n fn g3() {\n     let _mid_tuple    = (Foo { }, 2);\n-    //~^ ERROR: Unit-like struct construction is written with no trailing `{ }`\n+    //~^ ERROR: unit-like struct construction is written with no trailing `{ }`\n }\n \n fn main() {}"}, {"sha": "fee5c35e85005fca39aa7f0eb07c318c0ad188da", "filename": "src/test/compile-fail/struct-no-fields-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-4.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -12,7 +12,7 @@ struct Foo;\n \n fn h4() {\n     let _end_of_tuple = (3, Foo { });\n-    //~^ ERROR: Unit-like struct construction is written with no trailing `{ }`\n+    //~^ ERROR: unit-like struct construction is written with no trailing `{ }`\n }\n \n fn main() {}"}, {"sha": "bd196e881aa35cc5c6ba64f6b38acd07a941d771", "filename": "src/test/compile-fail/struct-no-fields-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-5.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -12,7 +12,7 @@ struct Foo;\n \n fn i5() {\n     let _end_of_block = { Foo { } };\n-    //~^ ERROR: Unit-like struct construction is written with no trailing `{ }`\n+    //~^ ERROR: unit-like struct construction is written with no trailing `{ }`\n }\n \n fn main() {}"}, {"sha": "ee853ade18eab51e1258fd5429f4c36ec6c1492a", "filename": "src/test/compile-fail/struct-no-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n struct Foo {}\n-//~^ ERROR: Unit-like struct definition should be written as `struct Foo;`\n+//~^ ERROR: unit-like struct definition should be written as `struct Foo;`\n \n fn main() {}"}, {"sha": "f5b4342ceb7498e09586bcd61ef627b0bd375c29", "filename": "src/test/compile-fail/syntax-extension-bytes-non-ascii-char-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-non-ascii-char-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-non-ascii-char-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-non-ascii-char-literal.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let vec = bytes!('\u03bb'); //~ ERROR Non-ascii char literal in bytes!\n+    let vec = bytes!('\u03bb'); //~ ERROR non-ascii char literal in bytes!\n }"}, {"sha": "281a5630f82c9b82898a535cc9b00051d53687d4", "filename": "src/test/compile-fail/syntax-extension-bytes-non-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-non-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-non-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-non-literal.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let vec = bytes!(foo); //~ ERROR Non-literal in bytes!\n+    let vec = bytes!(foo); //~ ERROR non-literal in bytes!\n }"}, {"sha": "25688d7d17ab44f6228042a17a2bdf2317c98bf9", "filename": "src/test/compile-fail/syntax-extension-bytes-too-large-integer-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-large-integer-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-large-integer-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-large-integer-literal.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let vec = bytes!(1024); //~ ERROR Too large integer literal in bytes!\n+    let vec = bytes!(1024); //~ ERROR too large integer literal in bytes!\n }"}, {"sha": "d1c8a2c091304354dc3b6875482dd5895915f05d", "filename": "src/test/compile-fail/syntax-extension-bytes-too-large-u8-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-large-u8-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-large-u8-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-large-u8-literal.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let vec = bytes!(1024u8); //~ ERROR Too large u8 literal in bytes!\n+    let vec = bytes!(1024u8); //~ ERROR too large u8 literal in bytes!\n }"}, {"sha": "ef45ea06003d5f9c2c2b54ff57f91796fa53ee7e", "filename": "src/test/compile-fail/syntax-extension-bytes-too-small-integer-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-small-integer-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-small-integer-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-small-integer-literal.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let vec = bytes!(-1024); //~ ERROR Non-literal in bytes\n+    let vec = bytes!(-1024); //~ ERROR non-literal in bytes\n }"}, {"sha": "b8ba73559aa74ea019eba2b72c6f9439701c760a", "filename": "src/test/compile-fail/syntax-extension-bytes-too-small-u8-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-small-u8-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-small-u8-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-too-small-u8-literal.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let vec = bytes!(-1024u8); //~ ERROR Non-literal in bytes\n+    let vec = bytes!(-1024u8); //~ ERROR non-literal in bytes\n }"}, {"sha": "142566fe8ab789f0768817bd75616a8ade1e9090", "filename": "src/test/compile-fail/syntax-extension-bytes-unsupported-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-unsupported-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba7ac5e014e7e225a4e226f15e9c05563d6e4a9/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-unsupported-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-bytes-unsupported-literal.rs?ref=cba7ac5e014e7e225a4e226f15e9c05563d6e4a9", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let vec = bytes!(45f64); //~ ERROR Unsupported literal in bytes!\n+    let vec = bytes!(45f64); //~ ERROR unsupported literal in bytes!\n }"}]}