{"sha": "3615cb476b30d4058f397f45016e9b1823b4c870", "node_id": "C_kwDOAAsO6NoAKDM2MTVjYjQ3NmIzMGQ0MDU4ZjM5N2Y0NTAxNmU5YjE4MjNiNGM4NzA", "commit": {"author": {"name": "Lukas Lueg", "email": "lukas.lueg@gmail.com", "date": "2022-04-17T18:58:36Z"}, "committer": {"name": "Lukas Lueg", "email": "lukas.lueg@gmail.com", "date": "2022-04-17T18:58:36Z"}, "message": "Expand core::hint::unreachable_unchecked() docs\n\nFixes #95865", "tree": {"sha": "8d36786e38c0ca86aabe50400df52f7c7c0f0aa8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d36786e38c0ca86aabe50400df52f7c7c0f0aa8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3615cb476b30d4058f397f45016e9b1823b4c870", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3615cb476b30d4058f397f45016e9b1823b4c870", "html_url": "https://github.com/rust-lang/rust/commit/3615cb476b30d4058f397f45016e9b1823b4c870", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3615cb476b30d4058f397f45016e9b1823b4c870/comments", "author": {"login": "lukaslueg", "id": 3148704, "node_id": "MDQ6VXNlcjMxNDg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3148704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaslueg", "html_url": "https://github.com/lukaslueg", "followers_url": "https://api.github.com/users/lukaslueg/followers", "following_url": "https://api.github.com/users/lukaslueg/following{/other_user}", "gists_url": "https://api.github.com/users/lukaslueg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaslueg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaslueg/subscriptions", "organizations_url": "https://api.github.com/users/lukaslueg/orgs", "repos_url": "https://api.github.com/users/lukaslueg/repos", "events_url": "https://api.github.com/users/lukaslueg/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaslueg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lukaslueg", "id": 3148704, "node_id": "MDQ6VXNlcjMxNDg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3148704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaslueg", "html_url": "https://github.com/lukaslueg", "followers_url": "https://api.github.com/users/lukaslueg/followers", "following_url": "https://api.github.com/users/lukaslueg/following{/other_user}", "gists_url": "https://api.github.com/users/lukaslueg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaslueg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaslueg/subscriptions", "organizations_url": "https://api.github.com/users/lukaslueg/orgs", "repos_url": "https://api.github.com/users/lukaslueg/repos", "events_url": "https://api.github.com/users/lukaslueg/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaslueg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ec2c136b35bd4660cba778346f8df7daf2ab173", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec2c136b35bd4660cba778346f8df7daf2ab173", "html_url": "https://github.com/rust-lang/rust/commit/1ec2c136b35bd4660cba778346f8df7daf2ab173"}], "stats": {"total": 72, "additions": 58, "deletions": 14}, "files": [{"sha": "2473fbd18661a0196cf9041e50bba9467e420f7f", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 58, "deletions": 14, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/3615cb476b30d4058f397f45016e9b1823b4c870/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3615cb476b30d4058f397f45016e9b1823b4c870/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=3615cb476b30d4058f397f45016e9b1823b4c870", "patch": "@@ -5,27 +5,71 @@\n \n use crate::intrinsics;\n \n-/// Informs the compiler that this point in the code is not reachable, enabling\n-/// further optimizations.\n+/// Informs the compiler that the site which is calling this function is not\n+/// reachable, possibly enabling further optimizations.\n ///\n /// # Safety\n ///\n-/// Reaching this function is completely *undefined behavior* (UB). In\n-/// particular, the compiler assumes that all UB must never happen, and\n-/// therefore will eliminate all branches that reach to a call to\n+/// Reaching this function is *Undefined Behavior* (UB). In particular, as the\n+/// compiler assumes that all forms of Undefined Behavior can never happen, it\n+/// will eliminate all branches which themselves reach a call to\n /// `unreachable_unchecked()`.\n ///\n-/// Like all instances of UB, if this assumption turns out to be wrong, i.e., the\n-/// `unreachable_unchecked()` call is actually reachable among all possible\n-/// control flow, the compiler will apply the wrong optimization strategy, and\n-/// may sometimes even corrupt seemingly unrelated code, causing\n-/// difficult-to-debug problems.\n+/// If the assumptions embedded in using this function turn out to be wrong -\n+/// that is, if the site which is calling `unreachable_unchecked()` is actually\n+/// reachable at runtime - the compiler may have generated nonsensical machine\n+/// instructions for this situation, including in seemingly unrelated code,\n+/// causing difficult-to-debug problems.\n ///\n-/// Use this function only when you can prove that the code will never call it.\n-/// Otherwise, consider using the [`unreachable!`] macro, which does not allow\n-/// optimizations but will panic when executed.\n+/// Use this function sparingly. Consider using the [`unreachable!`] macro,\n+/// which may prevent some optimizations but will safely panic in case it is\n+/// actually reached at runtime. Benchmark your code to find out if using\n+/// `unreachable_unchecked()` comes with a performance benefit.\n ///\n-/// # Example\n+/// # Examples\n+///\n+/// `unreachable_unchecked()` can be used in situations where the compiler\n+/// can't prove invariants that were previously established. Such situations\n+/// have a higher chance of occuring if those invariants are upheld by\n+/// external code that the compiler can't analyze.\n+/// ```\n+/// fn prepare_inputs(divisors: &mut Vec<u32>) {\n+///     // Note to future-self when making changes: The invariant established\n+///     // here is NOT checked in `do_computation()`; if this changes, you HAVE\n+///     // to change `do_computation()`.\n+///     divisors.retain(|divisor| *divisor != 0)\n+/// }\n+///\n+/// fn do_computation(i: u32, divisors: &[u32]) -> u32 {\n+///     divisors.iter().fold(i, |acc, divisor| {\n+///         // Convince the compiler that a division by zero can't happen here\n+///         // and a check is not needed below.\n+///         if *divisor == 0 {\n+///             // SAFETY: `divisor` can't be zero because of `prepare_inputs`,\n+///             // but the compiler does not know about this. We *promise*\n+///             // that we always call `prepare_inputs`.\n+///             unsafe { std::hint::unreachable_unchecked() }\n+///         }\n+///         // The compiler would normally introduce a check here that prevents\n+///         // a division by zero. However, if `divisor` was zero, the branch\n+///         // above would reach what we explicitly marked as unreachable.\n+///         // The compiler concludes that `divisor` can't be zero at this point\n+///         // and removes the - now proven useless - check.\n+///         acc / divisor\n+///     })\n+/// }\n+///\n+/// let mut divisors = vec![2, 0, 4];\n+/// prepare_inputs(&mut divisors);\n+/// assert_eq!(do_computation(100, &divisors), 12);\n+///\n+/// ```\n+///\n+/// While using `unreachable_unchecked()` is perfectly safe in the following\n+/// example, the compiler is able to prove that a division by zero is not\n+/// possible. Benchmarking reveals that `unreachable_unchecked()` provides\n+/// no benefit over using [`unreachable!`], while the latter does not introduce\n+/// the possibility of Undefined Behavior.\n ///\n /// ```\n /// fn div_1(a: u32, b: u32) -> u32 {"}]}