{"sha": "426c51d6ea567170e237a66b49d512fab24cd32c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNmM1MWQ2ZWE1NjcxNzBlMjM3YTY2YjQ5ZDUxMmZhYjI0Y2QzMmM=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-03-10T05:40:17Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-03-14T23:43:02Z"}, "message": "Make FileMap thread-safe", "tree": {"sha": "40ef495c03b49cd2fe4262d7e397369c5898698f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40ef495c03b49cd2fe4262d7e397369c5898698f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/426c51d6ea567170e237a66b49d512fab24cd32c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/426c51d6ea567170e237a66b49d512fab24cd32c", "html_url": "https://github.com/rust-lang/rust/commit/426c51d6ea567170e237a66b49d512fab24cd32c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/426c51d6ea567170e237a66b49d512fab24cd32c/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26fe97f1f90f71613b648e822e663ec52832c51e", "url": "https://api.github.com/repos/rust-lang/rust/commits/26fe97f1f90f71613b648e822e663ec52832c51e", "html_url": "https://github.com/rust-lang/rust/commit/26fe97f1f90f71613b648e822e663ec52832c51e"}], "stats": {"total": 100, "additions": 55, "deletions": 45}, "files": [{"sha": "289bc753d7fecb7d938d50003509f5c3e9c9b570", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/426c51d6ea567170e237a66b49d512fab24cd32c/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426c51d6ea567170e237a66b49d512fab24cd32c/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=426c51d6ea567170e237a66b49d512fab24cd32c", "patch": "@@ -417,24 +417,27 @@ impl<'a> HashStable<StableHashingContext<'a>> for FileMap {\n         src_hash.hash_stable(hcx, hasher);\n \n         // We only hash the relative position within this filemap\n-        let lines = lines.borrow();\n-        lines.len().hash_stable(hcx, hasher);\n-        for &line in lines.iter() {\n-            stable_byte_pos(line, start_pos).hash_stable(hcx, hasher);\n-        }\n+        lines.with_lock(|lines| {\n+            lines.len().hash_stable(hcx, hasher);\n+            for &line in lines.iter() {\n+                stable_byte_pos(line, start_pos).hash_stable(hcx, hasher);\n+            }\n+        });\n \n         // We only hash the relative position within this filemap\n-        let multibyte_chars = multibyte_chars.borrow();\n-        multibyte_chars.len().hash_stable(hcx, hasher);\n-        for &char_pos in multibyte_chars.iter() {\n-            stable_multibyte_char(char_pos, start_pos).hash_stable(hcx, hasher);\n-        }\n+        multibyte_chars.with_lock(|multibyte_chars| {\n+            multibyte_chars.len().hash_stable(hcx, hasher);\n+            for &char_pos in multibyte_chars.iter() {\n+                stable_multibyte_char(char_pos, start_pos).hash_stable(hcx, hasher);\n+            }\n+        });\n \n-        let non_narrow_chars = non_narrow_chars.borrow();\n-        non_narrow_chars.len().hash_stable(hcx, hasher);\n-        for &char_pos in non_narrow_chars.iter() {\n-            stable_non_narrow_char(char_pos, start_pos).hash_stable(hcx, hasher);\n-        }\n+        non_narrow_chars.with_lock(|non_narrow_chars| {\n+            non_narrow_chars.len().hash_stable(hcx, hasher);\n+            for &char_pos in non_narrow_chars.iter() {\n+                stable_non_narrow_char(char_pos, start_pos).hash_stable(hcx, hasher);\n+            }\n+        });\n     }\n }\n "}, {"sha": "4711d43bfab1a2e289769b24ed3f36a9d423db1a", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 37, "deletions": 30, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/426c51d6ea567170e237a66b49d512fab24cd32c/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426c51d6ea567170e237a66b49d512fab24cd32c/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=426c51d6ea567170e237a66b49d512fab24cd32c", "patch": "@@ -27,7 +27,7 @@\n #![feature(specialization)]\n \n use std::borrow::Cow;\n-use std::cell::{Cell, RefCell};\n+use std::cell::Cell;\n use std::cmp::{self, Ordering};\n use std::fmt;\n use std::hash::{Hasher, Hash};\n@@ -699,17 +699,17 @@ pub struct FileMap {\n     pub src_hash: u128,\n     /// The external source code (used for external crates, which will have a `None`\n     /// value as `self.src`.\n-    pub external_src: RefCell<ExternalSource>,\n+    pub external_src: Lock<ExternalSource>,\n     /// The start position of this source in the CodeMap\n     pub start_pos: BytePos,\n     /// The end position of this source in the CodeMap\n     pub end_pos: BytePos,\n     /// Locations of lines beginnings in the source code\n-    pub lines: RefCell<Vec<BytePos>>,\n+    pub lines: Lock<Vec<BytePos>>,\n     /// Locations of multi-byte characters in the source code\n-    pub multibyte_chars: RefCell<Vec<MultiByteChar>>,\n+    pub multibyte_chars: Lock<Vec<MultiByteChar>>,\n     /// Width of characters that are not narrow in the source code\n-    pub non_narrow_chars: RefCell<Vec<NonNarrowChar>>,\n+    pub non_narrow_chars: Lock<Vec<NonNarrowChar>>,\n     /// A hash of the filename, used for speeding up the incr. comp. hashing.\n     pub name_hash: u128,\n }\n@@ -839,10 +839,10 @@ impl Decodable for FileMap {\n                 end_pos,\n                 src: None,\n                 src_hash,\n-                external_src: RefCell::new(ExternalSource::AbsentOk),\n-                lines: RefCell::new(lines),\n-                multibyte_chars: RefCell::new(multibyte_chars),\n-                non_narrow_chars: RefCell::new(non_narrow_chars),\n+                external_src: Lock::new(ExternalSource::AbsentOk),\n+                lines: Lock::new(lines),\n+                multibyte_chars: Lock::new(multibyte_chars),\n+                non_narrow_chars: Lock::new(non_narrow_chars),\n                 name_hash,\n             })\n         })\n@@ -882,12 +882,12 @@ impl FileMap {\n             crate_of_origin: 0,\n             src: Some(Lrc::new(src)),\n             src_hash,\n-            external_src: RefCell::new(ExternalSource::Unneeded),\n+            external_src: Lock::new(ExternalSource::Unneeded),\n             start_pos,\n             end_pos: Pos::from_usize(end_pos),\n-            lines: RefCell::new(Vec::new()),\n-            multibyte_chars: RefCell::new(Vec::new()),\n-            non_narrow_chars: RefCell::new(Vec::new()),\n+            lines: Lock::new(Vec::new()),\n+            multibyte_chars: Lock::new(Vec::new()),\n+            non_narrow_chars: Lock::new(Vec::new()),\n             name_hash,\n         }\n     }\n@@ -919,19 +919,24 @@ impl FileMap {\n         if *self.external_src.borrow() == ExternalSource::AbsentOk {\n             let src = get_src();\n             let mut external_src = self.external_src.borrow_mut();\n-            if let Some(src) = src {\n-                let mut hasher: StableHasher<u128> = StableHasher::new();\n-                hasher.write(src.as_bytes());\n-\n-                if hasher.finish() == self.src_hash {\n-                    *external_src = ExternalSource::Present(src);\n-                    return true;\n+            // Check that no-one else have provided the source while we were getting it\n+            if *external_src == ExternalSource::AbsentOk {\n+                if let Some(src) = src {\n+                    let mut hasher: StableHasher<u128> = StableHasher::new();\n+                    hasher.write(src.as_bytes());\n+\n+                    if hasher.finish() == self.src_hash {\n+                        *external_src = ExternalSource::Present(src);\n+                        return true;\n+                    }\n+                } else {\n+                    *external_src = ExternalSource::AbsentErr;\n                 }\n+\n+                false\n             } else {\n-                *external_src = ExternalSource::AbsentErr;\n+                self.src.is_some() || external_src.get_source().is_some()\n             }\n-\n-            false\n         } else {\n             self.src.is_some() || self.external_src.borrow().get_source().is_some()\n         }\n@@ -951,14 +956,16 @@ impl FileMap {\n             }\n         }\n \n-        let lines = self.lines.borrow();\n-        let line = if let Some(line) = lines.get(line_number) {\n-            line\n-        } else {\n-            return None;\n+        let begin = {\n+            let lines = self.lines.borrow();\n+            let line = if let Some(line) = lines.get(line_number) {\n+                line\n+            } else {\n+                return None;\n+            };\n+            let begin: BytePos = *line - self.start_pos;\n+            begin.to_usize()\n         };\n-        let begin: BytePos = *line - self.start_pos;\n-        let begin = begin.to_usize();\n \n         if let Some(ref src) = self.src {\n             Some(Cow::from(get_until_newline(src, begin)))"}]}