{"sha": "dfdb6321acbe30704ef07ba7a2257f860a7a1398", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZGI2MzIxYWNiZTMwNzA0ZWYwN2JhN2EyMjU3Zjg2MGE3YTEzOTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-04T10:25:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-04T10:25:42Z"}, "message": "Use new text DSL instead of crate_graph! macro", "tree": {"sha": "0a80169066d5f3a9e24f92deb6f2ad195a89f2ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a80169066d5f3a9e24f92deb6f2ad195a89f2ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfdb6321acbe30704ef07ba7a2257f860a7a1398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfdb6321acbe30704ef07ba7a2257f860a7a1398", "html_url": "https://github.com/rust-lang/rust/commit/dfdb6321acbe30704ef07ba7a2257f860a7a1398", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfdb6321acbe30704ef07ba7a2257f860a7a1398/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c35539f0f69472546253d415c30f524d0a1a212", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c35539f0f69472546253d415c30f524d0a1a212", "html_url": "https://github.com/rust-lang/rust/commit/5c35539f0f69472546253d415c30f524d0a1a212"}], "stats": {"total": 153, "additions": 25, "deletions": 128}, "files": [{"sha": "c086e5bedc0f06b0b8d09ee2e47caa92c1a27fed", "filename": "crates/ra_hir/src/marks.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfdb6321acbe30704ef07ba7a2257f860a7a1398/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfdb6321acbe30704ef07ba7a2257f860a7a1398/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmarks.rs?ref=dfdb6321acbe30704ef07ba7a2257f860a7a1398", "patch": "@@ -17,5 +17,4 @@ test_utils::marks!(\n     prelude_is_macro_use\n     coerce_merge_fail_fallback\n     macro_dollar_crate_self\n-    macro_dollar_crate_other\n );"}, {"sha": "ab97a09b9114c7b901507d0520b9abf15d74f8a2", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/dfdb6321acbe30704ef07ba7a2257f860a7a1398/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfdb6321acbe30704ef07ba7a2257f860a7a1398/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=dfdb6321acbe30704ef07ba7a2257f860a7a1398", "patch": "@@ -77,38 +77,13 @@ impl MockDatabase {\n         (db, source_root, file_id)\n     }\n \n-    pub fn with_position(fixture: &str) -> (MockDatabase, FilePosition) {\n-        let (db, position) = MockDatabase::from_fixture(fixture);\n-        let position = position.expect(\"expected a marker ( <|> )\");\n-        (db, position)\n-    }\n-\n     pub fn file_id_of(&self, path: &str) -> FileId {\n         match self.files.get(path) {\n             Some(it) => *it,\n             None => panic!(\"unknown file: {:?}\\nexisting files:\\n{:#?}\", path, self.files),\n         }\n     }\n \n-    pub fn set_crate_graph_from_fixture(&mut self, graph: CrateGraphFixture) {\n-        let mut ids = FxHashMap::default();\n-        let mut crate_graph = CrateGraph::default();\n-        for (crate_name, (crate_root, edition, cfg_options, _)) in graph.0.iter() {\n-            let crate_root = self.file_id_of(&crate_root);\n-            let crate_id = crate_graph.add_crate_root(crate_root, *edition, cfg_options.clone());\n-            Arc::make_mut(&mut self.crate_names).insert(crate_id, crate_name.clone());\n-            ids.insert(crate_name, crate_id);\n-        }\n-        for (crate_name, (_, _, _, deps)) in graph.0.iter() {\n-            let from = ids[crate_name];\n-            for dep in deps {\n-                let to = ids[dep];\n-                crate_graph.add_dep(from, dep.as_str().into(), to).unwrap();\n-            }\n-        }\n-        self.set_crate_graph(Arc::new(crate_graph))\n-    }\n-\n     pub fn diagnostics(&self) -> String {\n         let mut buf = String::new();\n         let mut files: Vec<FileId> = self.files.values().copied().collect();\n@@ -285,46 +260,3 @@ impl MockDatabase {\n             .collect()\n     }\n }\n-\n-#[derive(Default)]\n-pub struct CrateGraphFixture(pub Vec<(String, (String, Edition, CfgOptions, Vec<String>))>);\n-\n-#[macro_export]\n-macro_rules! crate_graph {\n-    ($(\n-        $crate_name:literal: (\n-            $crate_path:literal,\n-            $($edition:literal,)?\n-            [$($dep:literal),*]\n-            $(, cfg = {\n-                $($key:literal $(= $value:literal)?),*\n-                $(,)?\n-            })?\n-        ),\n-    )*) => {{\n-        let mut res = $crate::mock::CrateGraphFixture::default();\n-        $(\n-            #[allow(unused_mut, unused_assignments)]\n-            let mut edition = ra_db::Edition::Edition2018;\n-            $(edition = ra_db::Edition::from_string($edition);)?\n-            let cfg_options = {\n-                #[allow(unused_mut)]\n-                let mut cfg = ::ra_cfg::CfgOptions::default();\n-                $(\n-                    $(\n-                        if 0 == 0 $(+ { drop($value); 1})? {\n-                            cfg.insert_atom($key.into());\n-                        }\n-                        $(cfg.insert_key_value($key.into(), $value.into());)?\n-                    )*\n-                )?\n-                cfg\n-            };\n-            res.0.push((\n-                $crate_name.to_string(),\n-                ($crate_path.to_string(), edition, cfg_options, vec![$($dep.to_string()),*])\n-            ));\n-        )*\n-        res\n-    }}\n-}"}, {"sha": "4b7e34878acddbd5054ad0e327b131f77e1918e6", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 25, "deletions": 59, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/dfdb6321acbe30704ef07ba7a2257f860a7a1398/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfdb6321acbe30704ef07ba7a2257f860a7a1398/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=dfdb6321acbe30704ef07ba7a2257f860a7a1398", "patch": "@@ -2,8 +2,7 @@ use std::fmt::Write;\n use std::sync::Arc;\n \n use insta::assert_snapshot;\n-\n-use ra_db::{salsa::Database, FilePosition, SourceDatabase};\n+use ra_db::{fixture::WithFixture, salsa::Database, FilePosition, SourceDatabase};\n use ra_syntax::{\n     algo,\n     ast::{self, AstNode},\n@@ -25,9 +24,9 @@ mod coercion;\n \n #[test]\n fn cfg_impl_block() {\n-    let (mut db, pos) = MockDatabase::with_position(\n+    let (db, pos) = MockDatabase::with_position(\n         r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:foo cfg:test\n use foo::S as T;\n struct S;\n \n@@ -46,7 +45,7 @@ fn test() {\n     t<|>;\n }\n \n-//- /foo.rs\n+//- /foo.rs crate:foo\n struct S;\n \n #[cfg(not(test))]\n@@ -60,18 +59,14 @@ impl S {\n }\n \"#,\n     );\n-    db.set_crate_graph_from_fixture(crate_graph! {\n-        \"main\": (\"/main.rs\", [\"foo\"], cfg = { \"test\" }),\n-        \"foo\": (\"/foo.rs\", []),\n-    });\n     assert_eq!(\"(i32, {unknown}, i32, {unknown})\", type_at_pos(&db, pos));\n }\n \n #[test]\n fn infer_await() {\n-    let (mut db, pos) = MockDatabase::with_position(\n+    let (db, pos) = MockDatabase::with_position(\n         r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:std\n \n struct IntFuture;\n \n@@ -85,7 +80,7 @@ fn test() {\n     v<|>;\n }\n \n-//- /std.rs\n+//- /std.rs crate:std\n #[prelude_import] use future::*;\n mod future {\n     trait Future {\n@@ -95,26 +90,22 @@ mod future {\n \n \"#,\n     );\n-    db.set_crate_graph_from_fixture(crate_graph! {\n-        \"main\": (\"/main.rs\", [\"std\"]),\n-        \"std\": (\"/std.rs\", []),\n-    });\n     assert_eq!(\"u64\", type_at_pos(&db, pos));\n }\n \n #[test]\n fn infer_box() {\n-    let (mut db, pos) = MockDatabase::with_position(\n+    let (db, pos) = MockDatabase::with_position(\n         r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:std\n \n fn test() {\n     let x = box 1;\n     let t = (x, box x, box &1, box [1]);\n     t<|>;\n }\n \n-//- /std.rs\n+//- /std.rs crate:std\n #[prelude_import] use prelude::*;\n mod prelude {}\n \n@@ -126,10 +117,6 @@ mod boxed {\n \n \"#,\n     );\n-    db.set_crate_graph_from_fixture(crate_graph! {\n-        \"main\": (\"/main.rs\", [\"std\"]),\n-        \"std\": (\"/std.rs\", []),\n-    });\n     assert_eq!(\"(Box<i32>, Box<Box<i32>>, Box<&i32>, Box<[i32;_]>)\", type_at_pos(&db, pos));\n }\n \n@@ -154,17 +141,17 @@ fn test() {\n \n #[test]\n fn infer_try() {\n-    let (mut db, pos) = MockDatabase::with_position(\n+    let (db, pos) = MockDatabase::with_position(\n         r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:std\n \n fn test() {\n     let r: Result<i32, u64> = Result::Ok(1);\n     let v = r?;\n     v<|>;\n }\n \n-//- /std.rs\n+//- /std.rs crate:std\n \n #[prelude_import] use ops::*;\n mod ops {\n@@ -189,18 +176,14 @@ mod result {\n \n \"#,\n     );\n-    db.set_crate_graph_from_fixture(crate_graph! {\n-        \"main\": (\"/main.rs\", [\"std\"]),\n-        \"std\": (\"/std.rs\", []),\n-    });\n     assert_eq!(\"i32\", type_at_pos(&db, pos));\n }\n \n #[test]\n fn infer_for_loop() {\n-    let (mut db, pos) = MockDatabase::with_position(\n+    let (db, pos) = MockDatabase::with_position(\n         r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:std\n \n use std::collections::Vec;\n \n@@ -212,7 +195,7 @@ fn test() {\n     }\n }\n \n-//- /std.rs\n+//- /std.rs crate:std\n \n #[prelude_import] use iter::*;\n mod iter {\n@@ -234,10 +217,6 @@ mod collections {\n }\n \"#,\n     );\n-    db.set_crate_graph_from_fixture(crate_graph! {\n-        \"main\": (\"/main.rs\", [\"std\"]),\n-        \"std\": (\"/std.rs\", []),\n-    });\n     assert_eq!(\"&str\", type_at_pos(&db, pos));\n }\n \n@@ -2505,15 +2484,15 @@ pub fn main_loop() {\n \n #[test]\n fn cross_crate_associated_method_call() {\n-    let (mut db, pos) = MockDatabase::with_position(\n+    let (db, pos) = MockDatabase::with_position(\n         r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:other_crate\n fn test() {\n     let x = other_crate::foo::S::thing();\n     x<|>;\n }\n \n-//- /lib.rs\n+//- /lib.rs crate:other_crate\n mod foo {\n     struct S;\n     impl S {\n@@ -2522,10 +2501,6 @@ mod foo {\n }\n \"#,\n     );\n-    db.set_crate_graph_from_fixture(crate_graph! {\n-        \"main\": (\"/main.rs\", [\"other_crate\"]),\n-        \"other_crate\": (\"/lib.rs\", []),\n-    });\n     assert_eq!(\"i128\", type_at_pos(&db, pos));\n }\n \n@@ -3403,16 +3378,15 @@ fn test() { S.foo()<|>; }\n \n #[test]\n fn infer_macro_with_dollar_crate_is_correct_in_expr() {\n-    // covers!(macro_dollar_crate_other);\n-    let (mut db, pos) = MockDatabase::with_position(\n+    let (db, pos) = MockDatabase::with_position(\n         r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:foo\n fn test() {\n     let x = (foo::foo!(1), foo::foo!(2));\n     x<|>;\n }\n \n-//- /lib.rs\n+//- /lib.rs crate:foo\n #[macro_export]\n macro_rules! foo {\n     (1) => { $crate::bar!() };\n@@ -3427,10 +3401,6 @@ macro_rules! bar {\n pub fn baz() -> usize { 31usize }\n \"#,\n     );\n-    db.set_crate_graph_from_fixture(crate_graph! {\n-        \"main\": (\"/main.rs\", [\"foo\"]),\n-        \"foo\": (\"/lib.rs\", []),\n-    });\n     assert_eq!(\"(i32, usize)\", type_at_pos(&db, pos));\n }\n \n@@ -3512,17 +3482,17 @@ fn test() { (&S).foo()<|>; }\n \n #[test]\n fn method_resolution_trait_from_prelude() {\n-    let (mut db, pos) = MockDatabase::with_position(\n+    let (db, pos) = MockDatabase::with_position(\n         r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:other_crate\n struct S;\n impl Clone for S {}\n \n fn test() {\n     S.clone()<|>;\n }\n \n-//- /lib.rs\n+//- /lib.rs crate:other_crate\n #[prelude_import] use foo::*;\n \n mod foo {\n@@ -3532,10 +3502,6 @@ mod foo {\n }\n \"#,\n     );\n-    db.set_crate_graph_from_fixture(crate_graph! {\n-        \"main\": (\"/main.rs\", [\"other_crate\"]),\n-        \"other_crate\": (\"/lib.rs\", []),\n-    });\n     assert_eq!(\"S\", type_at_pos(&db, pos));\n }\n "}]}