{"sha": "f72b8a44c51313d384deefcda753df668f2e265e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MmI4YTQ0YzUxMzEzZDM4NGRlZWZjZGE3NTNkZjY2OGYyZTI2NWU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-08-05T13:33:38Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-08-05T13:33:38Z"}, "message": "Use span of the closure args in free region errors", "tree": {"sha": "614c7ac810f1a856109e586a1d713f22f193e088", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/614c7ac810f1a856109e586a1d713f22f193e088"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f72b8a44c51313d384deefcda753df668f2e265e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f72b8a44c51313d384deefcda753df668f2e265e", "html_url": "https://github.com/rust-lang/rust/commit/f72b8a44c51313d384deefcda753df668f2e265e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f72b8a44c51313d384deefcda753df668f2e265e/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddcf17e1ed577bad26e92db3c25499620f853a49", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddcf17e1ed577bad26e92db3c25499620f853a49", "html_url": "https://github.com/rust-lang/rust/commit/ddcf17e1ed577bad26e92db3c25499620f853a49"}], "stats": {"total": 146, "additions": 91, "deletions": 55}, "files": [{"sha": "6a21e0025884574db2f530d1abe14006c38b55fa", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 53, "deletions": 9, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f72b8a44c51313d384deefcda753df668f2e265e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f72b8a44c51313d384deefcda753df668f2e265e/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=f72b8a44c51313d384deefcda753df668f2e265e", "patch": "@@ -10,6 +10,7 @@\n \n use borrow_check::nll::region_infer::RegionInferenceContext;\n use borrow_check::nll::ToRegionVid;\n+use borrow_check::nll::universal_regions::DefiningTy;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n@@ -72,7 +73,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             })\n             .or_else(|| {\n                 self.give_name_if_anonymous_region_appears_in_output(\n-                    infcx.tcx, mir, fr, counter, diag)\n+                    infcx.tcx, mir, mir_def_id, fr, counter, diag)\n             })\n             .unwrap_or_else(|| span_bug!(mir.span, \"can't make a name for free region {:?}\", fr))\n     }\n@@ -107,13 +108,46 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 },\n \n                 ty::BoundRegion::BrEnv => {\n-                    let closure_span = tcx.hir.span_if_local(mir_def_id).unwrap();\n-                    let region_name = self.synthesize_region_name(counter);\n-                    diag.span_label(\n-                        closure_span,\n-                        format!(\"lifetime `{}` represents the closure body\", region_name),\n-                    );\n-                    Some(region_name)\n+                    let mir_node_id = tcx.hir.as_local_node_id(mir_def_id).expect(\"non-local mir\");\n+                    let def_ty = self.universal_regions.defining_ty;\n+\n+                    if let DefiningTy::Closure(def_id, substs) = def_ty {\n+                        let args_span = if let hir::ExprKind::Closure(_, _, _, span, _)\n+                            = tcx.hir.expect_expr(mir_node_id).node\n+                        {\n+                            span\n+                        } else {\n+                            bug!(\"Closure is not defined by a closure expr\");\n+                        };\n+                        let region_name = self.synthesize_region_name(counter);\n+                        diag.span_label(\n+                            args_span,\n+                            format!(\"lifetime `{}` represents this closure's body\", region_name),\n+                        );\n+\n+                        let closure_kind_ty = substs.closure_kind_ty(def_id, tcx);\n+                        let note = match closure_kind_ty.to_opt_closure_kind() {\n+                            Some(ty::ClosureKind::Fn) => {\n+                                \"closure implements `Fn`, so references to captured variables \\\n+                                 can't escape the closure\"\n+                            }\n+                            Some(ty::ClosureKind::FnMut) => {\n+                                \"closure implements `FnMut`, so references to captured variables \\\n+                                 can't escape the closure\"\n+                            }\n+                            Some(ty::ClosureKind::FnOnce) => {\n+                                bug!(\"BrEnv in a `FnOnce` closure\");\n+                            }\n+                            None => bug!(\"Closure kind not inferred in borrow check\"),\n+                        };\n+\n+                        diag.note(note);\n+\n+                        Some(region_name)\n+                    } else {\n+                        // Can't have BrEnv in functions, constants or generators.\n+                        bug!(\"BrEnv outside of closure.\");\n+                    }\n                 }\n \n                 ty::BoundRegion::BrAnon(_) | ty::BoundRegion::BrFresh(_) => None,\n@@ -545,6 +579,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         tcx: TyCtxt<'_, '_, 'tcx>,\n         mir: &Mir<'tcx>,\n+        mir_def_id: DefId,\n         fr: RegionVid,\n         counter: &mut usize,\n         diag: &mut DiagnosticBuilder<'_>,\n@@ -558,9 +593,18 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             return None;\n         }\n \n+        let mir_node_id = tcx.hir.as_local_node_id(mir_def_id).expect(\"non-local mir\");\n+        let args_span = if let hir::ExprKind::Closure(_, _, _, span, _)\n+            = tcx.hir.expect_expr(mir_node_id).node\n+        {\n+            span\n+        } else {\n+            mir.span\n+        };\n+\n         let region_name = self.synthesize_region_name(counter);\n         diag.span_label(\n-            mir.span,\n+            args_span,\n             format!(\"lifetime `{}` appears in return type\", region_name),\n         );\n "}, {"sha": "27a51cb83fb25330e86849b944ca481716b3abbf", "filename": "src/test/ui/error-codes/E0621-does-not-trigger-for-closures.nll.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f72b8a44c51313d384deefcda753df668f2e265e/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f72b8a44c51313d384deefcda753df668f2e265e/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr?ref=f72b8a44c51313d384deefcda753df668f2e265e", "patch": "@@ -8,9 +8,8 @@ error: unsatisfied lifetime constraints\n   --> $DIR/E0621-does-not-trigger-for-closures.rs:25:26\n    |\n LL |     invoke(&x, |a, b| if a > b { a } else { b }); //~ ERROR E0495\n-   |                ----------^^^^^-----------------\n-   |                |   |     |\n-   |                |   |     requires that `'1` must outlive `'2`\n+   |                ------    ^^^^^ requires that `'1` must outlive `'2`\n+   |                |   |\n    |                |   has type `&'1 i32`\n    |                lifetime `'2` appears in return type\n "}, {"sha": "7eb6a0e7fb22651ddf6149cff5778493e62841fc", "filename": "src/test/ui/issue-40510-1.nll.stderr", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f72b8a44c51313d384deefcda753df668f2e265e/src%2Ftest%2Fui%2Fissue-40510-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f72b8a44c51313d384deefcda753df668f2e265e/src%2Ftest%2Fui%2Fissue-40510-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40510-1.nll.stderr?ref=f72b8a44c51313d384deefcda753df668f2e265e", "patch": "@@ -1,17 +1,15 @@\n error: unsatisfied lifetime constraints\n   --> $DIR/issue-40510-1.rs:18:9\n    |\n-LL |        || {\n-   |   _____-\n-   |  |_____|\n-   | ||\n-LL | ||         &mut x\n-   | ||         ^^^^^^ return requires that `'1` must outlive `'2`\n-LL | ||     };\n-   | ||     -\n-   | ||_____|\n-   | |______lifetime `'1` represents the closure body\n-   |        lifetime `'2` appears in return type\n+LL |     || {\n+   |     --\n+   |     |\n+   |     lifetime `'1` represents this closure's body\n+   |     lifetime `'2` appears in return type\n+LL |         &mut x\n+   |         ^^^^^^ return requires that `'1` must outlive `'2`\n+   |\n+   = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n \n error: aborting due to previous error\n "}, {"sha": "ae3ae3a27ab200c5f7d3985cd6f643594089f0f2", "filename": "src/test/ui/issue-40510-3.nll.stderr", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f72b8a44c51313d384deefcda753df668f2e265e/src%2Ftest%2Fui%2Fissue-40510-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f72b8a44c51313d384deefcda753df668f2e265e/src%2Ftest%2Fui%2Fissue-40510-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40510-3.nll.stderr?ref=f72b8a44c51313d384deefcda753df668f2e265e", "patch": "@@ -1,20 +1,17 @@\n error: unsatisfied lifetime constraints\n   --> $DIR/issue-40510-3.rs:18:9\n    |\n-LL |         || {\n-   |    _____-\n-   |   |_____|\n-   |  ||\n-LL |  ||         || {\n-   |  ||_________^\n-LL | |||             x.push(())\n-LL | |||         }\n-   | |||_________^ requires that `'1` must outlive `'2`\n-LL |  ||     };\n-   |  ||     -\n-   |  ||_____|\n-   |  |______lifetime `'1` represents the closure body\n-   |         lifetime `'2` appears in return type\n+LL |       || {\n+   |       --\n+   |       |\n+   |       lifetime `'1` represents this closure's body\n+   |       lifetime `'2` appears in return type\n+LL | /         || {\n+LL | |             x.push(())\n+LL | |         }\n+   | |_________^ requires that `'1` must outlive `'2`\n+   |\n+   = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n \n error: aborting due to previous error\n "}, {"sha": "432036c9d90ceda976844af87c4e4081dcf778b9", "filename": "src/test/ui/issue-49824.nll.stderr", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f72b8a44c51313d384deefcda753df668f2e265e/src%2Ftest%2Fui%2Fissue-49824.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f72b8a44c51313d384deefcda753df668f2e265e/src%2Ftest%2Fui%2Fissue-49824.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-49824.nll.stderr?ref=f72b8a44c51313d384deefcda753df668f2e265e", "patch": "@@ -1,20 +1,17 @@\n error: unsatisfied lifetime constraints\n   --> $DIR/issue-49824.rs:22:9\n    |\n-LL |         || {\n-   |    _____-\n-   |   |_____|\n-   |  ||\n-LL |  ||         || {\n-   |  ||_________^\n-LL | |||             let _y = &mut x;\n-LL | |||         }\n-   | |||_________^ requires that `'1` must outlive `'2`\n-LL |  ||     };\n-   |  ||     -\n-   |  ||_____|\n-   |  |______lifetime `'1` represents the closure body\n-   |         lifetime `'2` appears in return type\n+LL |       || {\n+   |       --\n+   |       |\n+   |       lifetime `'1` represents this closure's body\n+   |       lifetime `'2` appears in return type\n+LL | /         || {\n+LL | |             let _y = &mut x;\n+LL | |         }\n+   | |_________^ requires that `'1` must outlive `'2`\n+   |\n+   = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n \n error: aborting due to previous error\n "}, {"sha": "4baa9044424647bfadf518585b07ae36f39eb131", "filename": "src/test/ui/nll/issue-48238.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f72b8a44c51313d384deefcda753df668f2e265e/src%2Ftest%2Fui%2Fnll%2Fissue-48238.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f72b8a44c51313d384deefcda753df668f2e265e/src%2Ftest%2Fui%2Fnll%2Fissue-48238.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48238.stderr?ref=f72b8a44c51313d384deefcda753df668f2e265e", "patch": "@@ -2,11 +2,12 @@ error: unsatisfied lifetime constraints\n   --> $DIR/issue-48238.rs:21:13\n    |\n LL |     move || use_val(&orig); //~ ERROR\n-   |     --------^^^^^^^^^^^^^^\n-   |     |       |\n-   |     |       argument requires that `'1` must outlive `'2`\n-   |     lifetime `'1` represents the closure body\n+   |     ------- ^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+   |     |\n+   |     lifetime `'1` represents this closure's body\n    |     lifetime `'2` appears in return type\n+   |\n+   = note: closure implements `Fn`, so references to captured variables can't escape the closure\n \n error: aborting due to previous error\n "}]}