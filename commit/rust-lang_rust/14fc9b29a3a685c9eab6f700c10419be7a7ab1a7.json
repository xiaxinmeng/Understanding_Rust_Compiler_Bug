{"sha": "14fc9b29a3a685c9eab6f700c10419be7a7ab1a7", "node_id": "C_kwDOAAsO6NoAKDE0ZmM5YjI5YTNhNjg1YzllYWI2ZjcwMGMxMDQxOWJlN2E3YWIxYTc", "commit": {"author": {"name": "Christian Poveda", "email": "git@pvdrz.com", "date": "2022-09-16T20:41:25Z"}, "committer": {"name": "Christian Poveda", "email": "git@pvdrz.com", "date": "2022-09-23T21:28:59Z"}, "message": "add flag to specify the number of cpus", "tree": {"sha": "64cd2fe120419be839165fcb4046fd5d1acf8bdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64cd2fe120419be839165fcb4046fd5d1acf8bdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14fc9b29a3a685c9eab6f700c10419be7a7ab1a7", "comment_count": 0, "verification": {"verified": false, "reason": "invalid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCYy4lHwAKCRAnUl7150IK\nUIo9AQDunPp9yssyTmTP8Zra/KnnkOhvnhRbM8TAn350AYFLGwD/ec0aM8HUKsOB\nj1fptOUDtGX9tGMNinJrNlTaN3SnBw4=\n=Er6X\n-----END PGP SIGNATURE-----", "payload": "tree 64cd2fe120419be839165fcb4046fd5d1acf8bdb\nparent 6671f830b091de4d31516a966f72e915445ccbb1\nauthor Christian Poveda <git@pvdrz.com> 1663360885 -0500\ncommitter Christian Poveda <git@pvdrz.com> 1663968539 -0500\n\nadd flag to specify the number of cpus\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14fc9b29a3a685c9eab6f700c10419be7a7ab1a7", "html_url": "https://github.com/rust-lang/rust/commit/14fc9b29a3a685c9eab6f700c10419be7a7ab1a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14fc9b29a3a685c9eab6f700c10419be7a7ab1a7/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6671f830b091de4d31516a966f72e915445ccbb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6671f830b091de4d31516a966f72e915445ccbb1", "html_url": "https://github.com/rust-lang/rust/commit/6671f830b091de4d31516a966f72e915445ccbb1"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "5b16fc2948cbbb0be35e220a9e835f0785f83419", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14fc9b29a3a685c9eab6f700c10419be7a7ab1a7/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14fc9b29a3a685c9eab6f700c10419be7a7ab1a7/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=14fc9b29a3a685c9eab6f700c10419be7a7ab1a7", "patch": "@@ -550,6 +550,13 @@ fn main() {\n             } else {\n                 show_error!(\"-Zmiri-extern-so-file `{}` does not exist\", filename);\n             }\n+        } else if let Some(param) = arg.strip_prefix(\"-Zmiri-num-cpus=\") {\n+            let num_cpus = match param.parse::<u32>() {\n+                Ok(i) => i,\n+                Err(err) => show_error!(\"-Zmiri-num-cpus requires a `u32`: {}\", err),\n+            };\n+\n+            miri_config.num_cpus = num_cpus;\n         } else {\n             // Forward to rustc.\n             rustc_args.push(arg);"}, {"sha": "4734d488d0491a9f6d8f6f67f8a5ec8aa6c0cd95", "filename": "src/tools/miri/src/eval.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14fc9b29a3a685c9eab6f700c10419be7a7ab1a7/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14fc9b29a3a685c9eab6f700c10419be7a7ab1a7/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs?ref=14fc9b29a3a685c9eab6f700c10419be7a7ab1a7", "patch": "@@ -132,6 +132,8 @@ pub struct MiriConfig {\n     pub external_so_file: Option<PathBuf>,\n     /// Run a garbage collector for SbTags every N basic blocks.\n     pub gc_interval: u32,\n+    /// FIXME: add docs.\n+    pub num_cpus: u32,\n }\n \n impl Default for MiriConfig {\n@@ -164,6 +166,7 @@ impl Default for MiriConfig {\n             retag_fields: false,\n             external_so_file: None,\n             gc_interval: 10_000,\n+            num_cpus: 1,\n         }\n     }\n }"}, {"sha": "43455de8c6b2e397d95bb4dc9bfc3095ce8aefea", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14fc9b29a3a685c9eab6f700c10419be7a7ab1a7/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14fc9b29a3a685c9eab6f700c10419be7a7ab1a7/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=14fc9b29a3a685c9eab6f700c10419be7a7ab1a7", "patch": "@@ -104,7 +104,7 @@ pub use crate::helpers::{CurrentSpan, EvalContextExt as HelpersEvalContextExt};\n pub use crate::intptrcast::ProvenanceMode;\n pub use crate::machine::{\n     AllocExtra, FrameData, MiriInterpCx, MiriInterpCxExt, MiriMachine, MiriMemoryKind, Provenance,\n-    ProvenanceExtra, NUM_CPUS, PAGE_SIZE, STACK_ADDR, STACK_SIZE,\n+    ProvenanceExtra, PAGE_SIZE, STACK_ADDR, STACK_SIZE,\n };\n pub use crate::mono_hash_map::MonoHashMap;\n pub use crate::operator::EvalContextExt as OperatorEvalContextExt;"}, {"sha": "bd51207bbb19e54b07d3fe5362d90b6f1be62c66", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14fc9b29a3a685c9eab6f700c10419be7a7ab1a7/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14fc9b29a3a685c9eab6f700c10419be7a7ab1a7/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=14fc9b29a3a685c9eab6f700c10419be7a7ab1a7", "patch": "@@ -35,7 +35,6 @@ use crate::{\n pub const PAGE_SIZE: u64 = 4 * 1024; // FIXME: adjust to target architecture\n pub const STACK_ADDR: u64 = 32 * PAGE_SIZE; // not really about the \"stack\", but where we start assigning integer addresses to allocations\n pub const STACK_SIZE: u64 = 16 * PAGE_SIZE; // whatever\n-pub const NUM_CPUS: u64 = 1;\n \n /// Extra data stored with each stack frame\n pub struct FrameData<'tcx> {\n@@ -407,6 +406,8 @@ pub struct MiriMachine<'mir, 'tcx> {\n     pub(crate) gc_interval: u32,\n     /// The number of blocks that passed since the last SbTag GC pass.\n     pub(crate) since_gc: u32,\n+    /// FIXME: docs,\n+    pub(crate) num_cpus: u32,\n }\n \n impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n@@ -486,6 +487,7 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n             }),\n             gc_interval: config.gc_interval,\n             since_gc: 0,\n+            num_cpus: config.num_cpus,\n         }\n     }\n "}, {"sha": "c21e0441cacf4da56c0c8ed093fb135067806d4d", "filename": "src/tools/miri/src/shims/unix/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14fc9b29a3a685c9eab6f700c10419be7a7ab1a7/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14fc9b29a3a685c9eab6f700c10419be7a7ab1a7/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs?ref=14fc9b29a3a685c9eab6f700c10419be7a7ab1a7", "patch": "@@ -225,13 +225,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"sysconf\" => {\n                 let [name] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let name = this.read_scalar(name)?.to_i32()?;\n-\n                 // FIXME: Which of these are POSIX, and which are GNU/Linux?\n                 // At least the names seem to all also exist on macOS.\n                 let sysconfs: &[(&str, fn(&MiriInterpCx<'_, '_>) -> Scalar<Provenance>)] = &[\n                     (\"_SC_PAGESIZE\", |this| Scalar::from_int(PAGE_SIZE, this.pointer_size())),\n-                    (\"_SC_NPROCESSORS_CONF\", |this| Scalar::from_int(NUM_CPUS, this.pointer_size())),\n-                    (\"_SC_NPROCESSORS_ONLN\", |this| Scalar::from_int(NUM_CPUS, this.pointer_size())),\n+                    (\"_SC_NPROCESSORS_CONF\", |this| Scalar::from_int(this.machine.num_cpus, this.pointer_size())),\n+                    (\"_SC_NPROCESSORS_ONLN\", |this| Scalar::from_int(this.machine.num_cpus, this.pointer_size())),\n                     // 512 seems to be a reasonable default. The value is not critical, in\n                     // the sense that getpwuid_r takes and checks the buffer length.\n                     (\"_SC_GETPW_R_SIZE_MAX\", |this| Scalar::from_int(512, this.pointer_size()))"}, {"sha": "c5f0de4307c3a56709c9681af7585fdb427a1d0b", "filename": "src/tools/miri/src/shims/windows/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14fc9b29a3a685c9eab6f700c10419be7a7ab1a7/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14fc9b29a3a685c9eab6f700c10419be7a7ab1a7/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs?ref=14fc9b29a3a685c9eab6f700c10419be7a7ab1a7", "patch": "@@ -163,7 +163,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 )?;\n                 // Set number of processors.\n                 let num_cpus = system_info.offset(field_offsets[6], dword_layout, &this.tcx)?;\n-                this.write_scalar(Scalar::from_int(NUM_CPUS, dword_layout.size), &num_cpus.into())?;\n+                this.write_scalar(\n+                    Scalar::from_int(this.machine.num_cpus, dword_layout.size),\n+                    &num_cpus.into(),\n+                )?;\n             }\n \n             // Thread-local storage"}, {"sha": "137fa510249755ee922f3c11323b64f154957ac4", "filename": "src/tools/miri/tests/pass/available-parallelism-miri-num-cpus.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14fc9b29a3a685c9eab6f700c10419be7a7ab1a7/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Favailable-parallelism-miri-num-cpus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14fc9b29a3a685c9eab6f700c10419be7a7ab1a7/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Favailable-parallelism-miri-num-cpus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Favailable-parallelism-miri-num-cpus.rs?ref=14fc9b29a3a685c9eab6f700c10419be7a7ab1a7", "patch": "@@ -0,0 +1,8 @@\n+//@compile-flags: -Zmiri-num-cpus=1024\n+\n+use std::num::NonZeroUsize;\n+use std::thread::available_parallelism;\n+\n+fn main() {\n+    assert_eq!(available_parallelism().unwrap(), NonZeroUsize::new(1024).unwrap());\n+}"}]}