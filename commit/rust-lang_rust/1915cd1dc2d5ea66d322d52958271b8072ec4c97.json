{"sha": "1915cd1dc2d5ea66d322d52958271b8072ec4c97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MTVjZDFkYzJkNWVhNjZkMzIyZDUyOTU4MjcxYjgwNzJlYzRjOTc=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-11T07:11:39Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-11T07:11:39Z"}, "message": "Add missing dyn in tests", "tree": {"sha": "a8925c140f063df3d3a5dbeebcf9a81a2b7365c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8925c140f063df3d3a5dbeebcf9a81a2b7365c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1915cd1dc2d5ea66d322d52958271b8072ec4c97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1915cd1dc2d5ea66d322d52958271b8072ec4c97", "html_url": "https://github.com/rust-lang/rust/commit/1915cd1dc2d5ea66d322d52958271b8072ec4c97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1915cd1dc2d5ea66d322d52958271b8072ec4c97/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b29a6fbabcb425f6e238a00946fb1c9869f657e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b29a6fbabcb425f6e238a00946fb1c9869f657e9", "html_url": "https://github.com/rust-lang/rust/commit/b29a6fbabcb425f6e238a00946fb1c9869f657e9"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "29534696abc5be232de994c97448fe71c6e3b398", "filename": "src/libstd/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1915cd1dc2d5ea66d322d52958271b8072ec4c97/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1915cd1dc2d5ea66d322d52958271b8072ec4c97/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=1915cd1dc2d5ea66d322d52958271b8072ec4c97", "patch": "@@ -533,13 +533,13 @@ mod tests {\n     #[test]\n     fn downcasting() {\n         let mut a = A;\n-        let a = &mut a as &mut (Error + 'static);\n+        let a = &mut a as &mut (dyn Error + 'static);\n         assert_eq!(a.downcast_ref::<A>(), Some(&A));\n         assert_eq!(a.downcast_ref::<B>(), None);\n         assert_eq!(a.downcast_mut::<A>(), Some(&mut A));\n         assert_eq!(a.downcast_mut::<B>(), None);\n \n-        let a: Box<Error> = Box::new(A);\n+        let a: Box<dyn Error> = Box::new(A);\n         match a.downcast::<B>() {\n             Ok(..) => panic!(\"expected error\"),\n             Err(e) => assert_eq!(*e.downcast::<A>().unwrap(), A),"}, {"sha": "33f741dbc38f22716aa2762b959be5108c9d7c4a", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1915cd1dc2d5ea66d322d52958271b8072ec4c97/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1915cd1dc2d5ea66d322d52958271b8072ec4c97/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=1915cd1dc2d5ea66d322d52958271b8072ec4c97", "patch": "@@ -223,7 +223,7 @@ mod tests {\n         assert_eq!(copy(&mut r, &mut w).unwrap(), 4);\n \n         let mut r = repeat(0).take(1 << 17);\n-        assert_eq!(copy(&mut r as &mut Read, &mut w as &mut Write).unwrap(), 1 << 17);\n+        assert_eq!(copy(&mut r as &mut dyn Read, &mut w as &mut dyn Write).unwrap(), 1 << 17);\n     }\n \n     #[test]"}, {"sha": "f6f589cb6bd5e94d220da5e17cd1c38912898070", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1915cd1dc2d5ea66d322d52958271b8072ec4c97/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1915cd1dc2d5ea66d322d52958271b8072ec4c97/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=1915cd1dc2d5ea66d322d52958271b8072ec4c97", "patch": "@@ -927,7 +927,7 @@ mod tests {\n     use time::{Instant, Duration};\n     use thread;\n \n-    fn each_ip(f: &mut FnMut(SocketAddr)) {\n+    fn each_ip(f: &mut dyn FnMut(SocketAddr)) {\n         f(next_test_ip4());\n         f(next_test_ip6());\n     }"}, {"sha": "0ebe3284b4f0a9de5a8c33d653c77b78341f0f8d", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1915cd1dc2d5ea66d322d52958271b8072ec4c97/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1915cd1dc2d5ea66d322d52958271b8072ec4c97/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=1915cd1dc2d5ea66d322d52958271b8072ec4c97", "patch": "@@ -826,7 +826,7 @@ mod tests {\n     use time::{Instant, Duration};\n     use thread;\n \n-    fn each_ip(f: &mut FnMut(SocketAddr, SocketAddr)) {\n+    fn each_ip(f: &mut dyn FnMut(SocketAddr, SocketAddr)) {\n         f(next_test_ip4(), next_test_ip4());\n         f(next_test_ip6(), next_test_ip6());\n     }"}, {"sha": "f7052e4834a8800d9b224c3aa469da5955f3bf19", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1915cd1dc2d5ea66d322d52958271b8072ec4c97/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1915cd1dc2d5ea66d322d52958271b8072ec4c97/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=1915cd1dc2d5ea66d322d52958271b8072ec4c97", "patch": "@@ -1438,7 +1438,7 @@ mod tests {\n         rx.recv().unwrap();\n     }\n \n-    fn avoid_copying_the_body<F>(spawnfn: F) where F: FnOnce(Box<Fn() + Send>) {\n+    fn avoid_copying_the_body<F>(spawnfn: F) where F: FnOnce(Box<dyn Fn() + Send>) {\n         let (tx, rx) = channel();\n \n         let x: Box<_> = box 1;\n@@ -1485,7 +1485,7 @@ mod tests {\n         // (well, it would if the constant were 8000+ - I lowered it to be more\n         // valgrind-friendly. try this at home, instead..!)\n         const GENERATIONS: u32 = 16;\n-        fn child_no(x: u32) -> Box<Fn() + Send> {\n+        fn child_no(x: u32) -> Box<dyn Fn() + Send> {\n             return Box::new(move|| {\n                 if x < GENERATIONS {\n                     thread::spawn(move|| child_no(x+1)());\n@@ -1531,10 +1531,10 @@ mod tests {\n     #[test]\n     fn test_try_panic_message_any() {\n         match thread::spawn(move|| {\n-            panic!(box 413u16 as Box<Any + Send>);\n+            panic!(box 413u16 as Box<dyn Any + Send>);\n         }).join() {\n             Err(e) => {\n-                type T = Box<Any + Send>;\n+                type T = Box<dyn Any + Send>;\n                 assert!(e.is::<T>());\n                 let any = e.downcast::<T>().unwrap();\n                 assert!(any.is::<u16>());"}]}