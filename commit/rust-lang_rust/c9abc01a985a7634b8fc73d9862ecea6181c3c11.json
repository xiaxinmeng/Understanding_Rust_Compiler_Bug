{"sha": "c9abc01a985a7634b8fc73d9862ecea6181c3c11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YWJjMDFhOTg1YTc2MzRiOGZjNzNkOTg2MmVjZWE2MTgxYzNjMTE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-07T03:17:03Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-13T18:30:15Z"}, "message": "core: Rename MutableCloneableSlice::copy_from to clone_from_slice\n\nDeprecate the previous.", "tree": {"sha": "9d0b0c07cfb806b2703fb03bc93dca60814d3bb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d0b0c07cfb806b2703fb03bc93dca60814d3bb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9abc01a985a7634b8fc73d9862ecea6181c3c11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9abc01a985a7634b8fc73d9862ecea6181c3c11", "html_url": "https://github.com/rust-lang/rust/commit/c9abc01a985a7634b8fc73d9862ecea6181c3c11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9abc01a985a7634b8fc73d9862ecea6181c3c11/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4c736b1f0bd76fc083f1710f16f07e0e15fe6a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c736b1f0bd76fc083f1710f16f07e0e15fe6a0", "html_url": "https://github.com/rust-lang/rust/commit/d4c736b1f0bd76fc083f1710f16f07e0e15fe6a0"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "b914a26d94c3a2134dc97993f96aa43f876fa42e", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9abc01a985a7634b8fc73d9862ecea6181c3c11/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9abc01a985a7634b8fc73d9862ecea6181c3c11/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=c9abc01a985a7634b8fc73d9862ecea6181c3c11", "patch": "@@ -837,6 +837,12 @@ impl<'a, T: Ord> ImmutableOrdSlice<T> for &'a [T] {\n \n /// Trait for &[T] where T is Cloneable\n pub trait MutableCloneableSlice<T> {\n+    /// Copies as many elements from `src` as it can into `self` (the\n+    /// shorter of `self.len()` and `src.len()`). Returns the number\n+    /// of elements copied.\n+    #[deprecated = \"renamed to clone_from_slice\"]\n+    fn copy_from(self, s: &[T]) -> uint { self.clone_from_slice(s) }\n+\n     /// Copies as many elements from `src` as it can into `self` (the\n     /// shorter of `self.len()` and `src.len()`). Returns the number\n     /// of elements copied.\n@@ -856,12 +862,12 @@ pub trait MutableCloneableSlice<T> {\n     /// assert!(dst.copy_from(src2) == 3);\n     /// assert!(dst == [3i, 4, 5]);\n     /// ```\n-    fn copy_from(self, &[T]) -> uint;\n+    fn clone_from_slice(self, &[T]) -> uint;\n }\n \n impl<'a, T:Clone> MutableCloneableSlice<T> for &'a mut [T] {\n     #[inline]\n-    fn copy_from(self, src: &[T]) -> uint {\n+    fn clone_from_slice(self, src: &[T]) -> uint {\n         for (a, b) in self.mut_iter().zip(src.iter()) {\n             a.clone_from(b);\n         }"}]}