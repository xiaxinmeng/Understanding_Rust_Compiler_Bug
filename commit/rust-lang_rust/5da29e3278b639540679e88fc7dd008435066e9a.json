{"sha": "5da29e3278b639540679e88fc7dd008435066e9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYTI5ZTMyNzhiNjM5NTQwNjc5ZTg4ZmM3ZGQwMDg0MzUwNjZlOWE=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-07-19T23:03:02Z"}, "committer": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-07-22T20:19:04Z"}, "message": "std: add rt::io::Timer", "tree": {"sha": "e36870f595b94de599d6693142cb7dbf4e3499cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e36870f595b94de599d6693142cb7dbf4e3499cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5da29e3278b639540679e88fc7dd008435066e9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5da29e3278b639540679e88fc7dd008435066e9a", "html_url": "https://github.com/rust-lang/rust/commit/5da29e3278b639540679e88fc7dd008435066e9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5da29e3278b639540679e88fc7dd008435066e9a/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "921d99108cd452f92569a0cafc8d11b36b38dfc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/921d99108cd452f92569a0cafc8d11b36b38dfc0", "html_url": "https://github.com/rust-lang/rust/commit/921d99108cd452f92569a0cafc8d11b36b38dfc0"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "e261b3a3c579d1a6fcbeb260e998d20a728efedf", "filename": "src/libstd/rt/io/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5da29e3278b639540679e88fc7dd008435066e9a/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da29e3278b639540679e88fc7dd008435066e9a/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmod.rs?ref=5da29e3278b639540679e88fc7dd008435066e9a", "patch": "@@ -252,6 +252,7 @@ pub use self::stdio::print;\n pub use self::stdio::println;\n \n pub use self::file::FileStream;\n+pub use self::timer::Timer;\n pub use self::net::ip::IpAddr;\n pub use self::net::tcp::TcpListener;\n pub use self::net::tcp::TcpStream;\n@@ -296,6 +297,9 @@ mod extensions;\n /// Non-I/O things needed by the I/O module\n mod support;\n \n+/// Basic Timer\n+mod timer;\n+\n /// Thread-blocking implementations\n pub mod native {\n     /// Posix file I/O"}, {"sha": "1a5fc66f183f432746a5872e7a51da3f1a7864d3", "filename": "src/libstd/rt/io/timer.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/5da29e3278b639540679e88fc7dd008435066e9a/src%2Flibstd%2Frt%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da29e3278b639540679e88fc7dd008435066e9a/src%2Flibstd%2Frt%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ftimer.rs?ref=5da29e3278b639540679e88fc7dd008435066e9a", "patch": "@@ -0,0 +1,63 @@\n+// copyright 2013 the rust project developers. see the copyright\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/copyright.\n+//\n+// licensed under the apache license, version 2.0 <license-apache or\n+// http://www.apache.org/licenses/license-2.0> or the mit license\n+// <license-mit or http://opensource.org/licenses/mit>, at your\n+// option. this file may not be copied, modified, or distributed\n+// except according to those terms.\n+use option::{Option, Some, None};\n+use result::{Ok, Err};\n+use rt::io::{io_error};\n+use rt::rtio::{IoFactory, IoFactoryObject,\n+               RtioTimer, RtioTimerObject};\n+use rt::local::Local;\n+\n+pub struct Timer(~RtioTimerObject);\n+\n+impl Timer {\n+    fn new(i: ~RtioTimerObject) -> Timer {\n+        Timer(i)\n+    }\n+\n+    pub fn init() -> Option<Timer> {\n+        let timer = unsafe {\n+            rtdebug!(\"Timer::init: borrowing io to init timer\");\n+            let io = Local::unsafe_borrow::<IoFactoryObject>();\n+            rtdebug!(\"about to init timer\");\n+            (*io).timer_init()\n+        };\n+        match timer {\n+            Ok(t) => Some(Timer::new(t)),\n+            Err(ioerr) => {\n+                rtdebug!(\"Timer::init: failed to init: %?\", ioerr);\n+                io_error::cond.raise(ioerr);\n+                None\n+            }\n+        }\n+    }\n+}\n+\n+impl RtioTimer for Timer {\n+    fn sleep(&self, msecs: u64) {\n+        (**self).sleep(msecs);\n+    }\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use super::*;\n+    use rt::test::*;\n+    use option::{Some, None};\n+    #[test]\n+    fn test_io_timer_sleep_simple() {\n+        do run_in_newsched_task {\n+            let timer = Timer::init();\n+            match timer {\n+                Some(t) => t.sleep(1),\n+                None => assert!(false)\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file"}]}