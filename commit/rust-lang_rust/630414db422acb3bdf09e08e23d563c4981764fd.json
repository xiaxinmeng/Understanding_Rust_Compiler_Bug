{"sha": "630414db422acb3bdf09e08e23d563c4981764fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMDQxNGRiNDIyYWNiM2JkZjA5ZTA4ZTIzZDU2M2M0OTgxNzY0ZmQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-05T04:44:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-05T04:44:44Z"}, "message": "Rollup merge of #70748 - ogoffart:enum-layout-optim2, r=eddyb\n\nDo not disable field reordering on enums with big discriminant\n\nThe field are always re-ordered to minimize padding, regardless of the\nalignment of the discriminant\n\n(spinoff from #70477)", "tree": {"sha": "4539ed86fff54f0fd8ddf446590b97f70cbe089c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4539ed86fff54f0fd8ddf446590b97f70cbe089c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/630414db422acb3bdf09e08e23d563c4981764fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeiWI8CRBK7hj4Ov3rIwAAdHIIACAMBWuHuBBxgCYDuf7E/Ysi\nM+TWSMrxd6p1QiB5Qt5qH76Q9/ZNjpFppGt8QUBuP9T4YS3CzUeo7kCWjOXwbHIy\nVZajgfItxcnCldb+4Y+FGw99hdl9dbWt1NrRIUtpj1AaPcWa9niPzUG8fuBXT+CG\nI3bxUEY27tgjFmheIldXXH1NTVyqirQH/Lhpr0hnidn+mjRtDkH1jT4m52A/ABGG\nEVQZUL+nYztuP9VgP7BN3LOgINJOZG2s+ZR3+uSg0Ci+W4u7vu8gbrY/IUPRHbwt\nfJKq8RzOSPpTDL9Y5QsqogP3zh8XRqHEYkFNf5++ZXO9zpZ0d6tjqGAcKWFY6Sc=\n=NTCA\n-----END PGP SIGNATURE-----\n", "payload": "tree 4539ed86fff54f0fd8ddf446590b97f70cbe089c\nparent 9baba3476b46519656ed6a91264506ce782c053c\nparent 6b6cb7bda73f16ecd8e8755a13af93d64f284684\nauthor Dylan DPC <dylan.dpc@gmail.com> 1586061884 +0200\ncommitter GitHub <noreply@github.com> 1586061884 +0200\n\nRollup merge of #70748 - ogoffart:enum-layout-optim2, r=eddyb\n\nDo not disable field reordering on enums with big discriminant\n\nThe field are always re-ordered to minimize padding, regardless of the\nalignment of the discriminant\n\n(spinoff from #70477)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/630414db422acb3bdf09e08e23d563c4981764fd", "html_url": "https://github.com/rust-lang/rust/commit/630414db422acb3bdf09e08e23d563c4981764fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/630414db422acb3bdf09e08e23d563c4981764fd/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9baba3476b46519656ed6a91264506ce782c053c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9baba3476b46519656ed6a91264506ce782c053c", "html_url": "https://github.com/rust-lang/rust/commit/9baba3476b46519656ed6a91264506ce782c053c"}, {"sha": "6b6cb7bda73f16ecd8e8755a13af93d64f284684", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b6cb7bda73f16ecd8e8755a13af93d64f284684", "html_url": "https://github.com/rust-lang/rust/commit/6b6cb7bda73f16ecd8e8755a13af93d64f284684"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "5740f8cc091c42c65568fcb564ce447059267cbd", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/630414db422acb3bdf09e08e23d563c4981764fd/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630414db422acb3bdf09e08e23d563c4981764fd/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=630414db422acb3bdf09e08e23d563c4981764fd", "patch": "@@ -285,11 +285,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n         let mut inverse_memory_index: Vec<u32> = (0..fields.len() as u32).collect();\n \n-        let mut optimize = !repr.inhibit_struct_field_reordering_opt();\n-        if let StructKind::Prefixed(_, align) = kind {\n-            optimize &= align.bytes() == 1;\n-        }\n-\n+        let optimize = !repr.inhibit_struct_field_reordering_opt();\n         if optimize {\n             let end =\n                 if let StructKind::MaybeUnsized = kind { fields.len() - 1 } else { fields.len() };\n@@ -307,6 +303,8 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     });\n                 }\n                 StructKind::Prefixed(..) => {\n+                    // Sort in ascending alignment so that the layout stay optimal\n+                    // regardless of the prefix\n                     optimizing.sort_by_key(|&x| field_align(&fields[x as usize]));\n                 }\n             }"}, {"sha": "6a3f3c98f127a96d1b5e0a3c93e7d1e1f95b0018", "filename": "src/test/ui/type-sizes.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/630414db422acb3bdf09e08e23d563c4981764fd/src%2Ftest%2Fui%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/630414db422acb3bdf09e08e23d563c4981764fd/src%2Ftest%2Fui%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-sizes.rs?ref=630414db422acb3bdf09e08e23d563c4981764fd", "patch": "@@ -37,6 +37,29 @@ enum ReorderedEnum {\n     B(u8, u16, u8),\n }\n \n+enum ReorderedEnum2 {\n+    A(u8, u32, u8),\n+    B(u16, u8, u16, u8),\n+\n+    // 0x100 niche variants.\n+    _00, _01, _02, _03, _04, _05, _06, _07, _08, _09, _0A, _0B, _0C, _0D, _0E, _0F,\n+    _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _1A, _1B, _1C, _1D, _1E, _1F,\n+    _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _2A, _2B, _2C, _2D, _2E, _2F,\n+    _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _3A, _3B, _3C, _3D, _3E, _3F,\n+    _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _4A, _4B, _4C, _4D, _4E, _4F,\n+    _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _5A, _5B, _5C, _5D, _5E, _5F,\n+    _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _6A, _6B, _6C, _6D, _6E, _6F,\n+    _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _7A, _7B, _7C, _7D, _7E, _7F,\n+    _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _8A, _8B, _8C, _8D, _8E, _8F,\n+    _90, _91, _92, _93, _94, _95, _96, _97, _98, _99, _9A, _9B, _9C, _9D, _9E, _9F,\n+    _A0, _A1, _A2, _A3, _A4, _A5, _A6, _A7, _A8, _A9, _AA, _AB, _AC, _AD, _AE, _AF,\n+    _B0, _B1, _B2, _B3, _B4, _B5, _B6, _B7, _B8, _B9, _BA, _BB, _BC, _BD, _BE, _BF,\n+    _C0, _C1, _C2, _C3, _C4, _C5, _C6, _C7, _C8, _C9, _CA, _CB, _CC, _CD, _CE, _CF,\n+    _D0, _D1, _D2, _D3, _D4, _D5, _D6, _D7, _D8, _D9, _DA, _DB, _DC, _DD, _DE, _DF,\n+    _E0, _E1, _E2, _E3, _E4, _E5, _E6, _E7, _E8, _E9, _EA, _EB, _EC, _ED, _EE, _EF,\n+    _F0, _F1, _F2, _F3, _F4, _F5, _F6, _F7, _F8, _F9, _FA, _FB, _FC, _FD, _FE, _FF,\n+}\n+\n enum EnumEmpty {}\n \n enum EnumSingle1 {\n@@ -104,6 +127,8 @@ pub fn main() {\n     assert_eq!(size_of::<e3>(), 4 as usize);\n     assert_eq!(size_of::<ReorderedStruct>(), 4);\n     assert_eq!(size_of::<ReorderedEnum>(), 6);\n+    assert_eq!(size_of::<ReorderedEnum2>(), 8);\n+\n \n     assert_eq!(size_of::<EnumEmpty>(), 0);\n     assert_eq!(size_of::<EnumSingle1>(), 0);"}]}