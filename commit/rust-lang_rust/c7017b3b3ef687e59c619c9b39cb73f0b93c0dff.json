{"sha": "c7017b3b3ef687e59c619c9b39cb73f0b93c0dff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MDE3YjNiM2VmNjg3ZTU5YzYxOWM5YjM5Y2I3M2YwYjkzYzBkZmY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-21T22:23:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-21T22:23:13Z"}, "message": "rollup merge of #24661: SimonSapin/fmt-write-char\n\nas accepted in [RFC 526](https://github.com/rust-lang/rfcs/blob/master/text/0526-fmt-text-writer.md).\n\nNote that this brand new method is marked as **stable**. I judged this safe enough: it\u2019s simple enough that it\u2019s very unlikely to change. Still, I can mark it unstable instead if you prefer.\n\nr? @alexcrichton", "tree": {"sha": "b5a3558656617870313d267aeb3d090e5c6a9030", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5a3558656617870313d267aeb3d090e5c6a9030"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7017b3b3ef687e59c619c9b39cb73f0b93c0dff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7017b3b3ef687e59c619c9b39cb73f0b93c0dff", "html_url": "https://github.com/rust-lang/rust/commit/c7017b3b3ef687e59c619c9b39cb73f0b93c0dff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7017b3b3ef687e59c619c9b39cb73f0b93c0dff/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "251f8d3fbd5b63d003f35dd1a82fc820f4af1ccd", "url": "https://api.github.com/repos/rust-lang/rust/commits/251f8d3fbd5b63d003f35dd1a82fc820f4af1ccd", "html_url": "https://github.com/rust-lang/rust/commit/251f8d3fbd5b63d003f35dd1a82fc820f4af1ccd"}, {"sha": "16181e686a0b03960887889e28ef5f636ceccd4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/16181e686a0b03960887889e28ef5f636ceccd4d", "html_url": "https://github.com/rust-lang/rust/commit/16181e686a0b03960887889e28ef5f636ceccd4d"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "25f450e53a42044f7ed8e8fe681a7de2fabecaf7", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7017b3b3ef687e59c619c9b39cb73f0b93c0dff/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7017b3b3ef687e59c619c9b39cb73f0b93c0dff/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=c7017b3b3ef687e59c619c9b39cb73f0b93c0dff", "patch": "@@ -1082,4 +1082,10 @@ impl fmt::Write for String {\n         self.push_str(s);\n         Ok(())\n     }\n+\n+    #[inline]\n+    fn write_char(&mut self, c: char) -> fmt::Result {\n+        self.push(c);\n+        Ok(())\n+    }\n }"}, {"sha": "f6b3bdcecb9979d446d6c47f23bc2d75306818fd", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c7017b3b3ef687e59c619c9b39cb73f0b93c0dff/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7017b3b3ef687e59c619c9b39cb73f0b93c0dff/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=c7017b3b3ef687e59c619c9b39cb73f0b93c0dff", "patch": "@@ -83,6 +83,23 @@ pub trait Write {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn write_str(&mut self, s: &str) -> Result;\n \n+    /// Writes a `char` into this writer, returning whether the write succeeded.\n+    ///\n+    /// A single `char` may be encoded as more than one byte.\n+    /// This method can only succeed if the entire byte sequence was successfully\n+    /// written, and this method will not return until all data has been\n+    /// written or an error occurs.\n+    ///\n+    /// # Errors\n+    ///\n+    /// This function will return an instance of `FormatError` on error.\n+    #[stable(feature = \"fmt_write_char\", since = \"1.1.0\")]\n+    fn write_char(&mut self, c: char) -> Result {\n+        let mut utf_8 = [0u8; 4];\n+        let bytes_written = c.encode_utf8(&mut utf_8).unwrap_or(0);\n+        self.write_str(unsafe { mem::transmute(&utf_8[..bytes_written]) })\n+    }\n+\n     /// Glue for usage of the `write!` macro with implementers of this trait.\n     ///\n     /// This method should generally not be invoked manually, but rather through"}]}