{"sha": "aaba2300fb14360a00e75da1916b11fd99c0afce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYmEyMzAwZmIxNDM2MGEwMGU3NWRhMTkxNmIxMWZkOTljMGFmY2U=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-04T07:35:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-04T07:36:53Z"}, "message": "Modernize completion presentation tests", "tree": {"sha": "02a2411d18064c2bf168bcdabe94f9155bccc373", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02a2411d18064c2bf168bcdabe94f9155bccc373"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaba2300fb14360a00e75da1916b11fd99c0afce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaba2300fb14360a00e75da1916b11fd99c0afce", "html_url": "https://github.com/rust-lang/rust/commit/aaba2300fb14360a00e75da1916b11fd99c0afce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaba2300fb14360a00e75da1916b11fd99c0afce/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65768feaff5fad91c5bded8b606de29ed7ef4b12", "url": "https://api.github.com/repos/rust-lang/rust/commits/65768feaff5fad91c5bded8b606de29ed7ef4b12", "html_url": "https://github.com/rust-lang/rust/commit/65768feaff5fad91c5bded8b606de29ed7ef4b12"}], "stats": {"total": 733, "additions": 340, "deletions": 393}, "files": [{"sha": "9ec33a05092827f67d1c201d1991cb06b5cf2760", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 340, "deletions": 393, "changes": 733, "blob_url": "https://github.com/rust-lang/rust/blob/aaba2300fb14360a00e75da1916b11fd99c0afce/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaba2300fb14360a00e75da1916b11fd99c0afce/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=aaba2300fb14360a00e75da1916b11fd99c0afce", "patch": "@@ -330,14 +330,14 @@ pub(crate) fn compute_score(\n     // FIXME: this should not fall back to string equality.\n     let ty = &ty.display(ctx.db).to_string();\n     let (active_name, active_type) = if let Some(record_field) = &ctx.record_field_syntax {\n-        mark::hit!(test_struct_field_completion_in_record_lit);\n+        mark::hit!(record_field_type_match);\n         let (struct_field, _local) = ctx.sema.resolve_record_field(record_field)?;\n         (\n             struct_field.name(ctx.db).to_string(),\n             struct_field.signature_ty(ctx.db).display(ctx.db).to_string(),\n         )\n     } else if let Some(active_parameter) = &ctx.active_parameter {\n-        mark::hit!(test_struct_field_completion_in_func_call);\n+        mark::hit!(active_param_type_match);\n         (active_parameter.name.clone(), active_parameter.ty.clone())\n     } else {\n         return None;\n@@ -461,174 +461,155 @@ fn guess_macro_braces(macro_name: &str, docs: &str) -> (&'static str, &'static s\n \n #[cfg(test)]\n mod tests {\n-    use insta::assert_debug_snapshot;\n+    use expect::{expect, Expect};\n     use test_utils::mark;\n \n     use crate::completion::{\n         test_utils::{check_edit, check_edit_with_config, do_completion},\n-        CompletionConfig, CompletionItem, CompletionKind,\n+        CompletionConfig, CompletionKind,\n     };\n \n-    fn do_reference_completion(ra_fixture: &str) -> Vec<CompletionItem> {\n-        do_completion(ra_fixture, CompletionKind::Reference)\n+    fn check(ra_fixture: &str, expect: Expect) {\n+        let actual = do_completion(ra_fixture, CompletionKind::Reference);\n+        expect.assert_debug_eq(&actual);\n     }\n \n     #[test]\n-    fn enum_detail_includes_names_for_record() {\n-        assert_debug_snapshot!(\n-        do_reference_completion(\n+    fn enum_detail_includes_record_fields() {\n+        check(\n             r#\"\n-                enum Foo {\n-                    Foo {x: i32, y: i32}\n-                }\n+enum Foo { Foo { x: i32, y: i32 } }\n \n-                fn main() { Foo::Fo<|> }\n-                \"#,\n-        ),\n-        @r###\"\n-        [\n-            CompletionItem {\n-                label: \"Foo\",\n-                source_range: 56..58,\n-                delete: 56..58,\n-                insert: \"Foo\",\n-                kind: EnumVariant,\n-                detail: \"{ x: i32, y: i32 }\",\n-            },\n-        ]\n-        \"###\n+fn main() { Foo::Fo<|> }\n+\"#,\n+            expect![[r#\"\n+                [\n+                    CompletionItem {\n+                        label: \"Foo\",\n+                        source_range: 54..56,\n+                        delete: 54..56,\n+                        insert: \"Foo\",\n+                        kind: EnumVariant,\n+                        detail: \"{ x: i32, y: i32 }\",\n+                    },\n+                ]\n+            \"#]],\n         );\n     }\n \n     #[test]\n-    fn enum_detail_doesnt_include_names_for_tuple() {\n-        assert_debug_snapshot!(\n-        do_reference_completion(\n+    fn enum_detail_doesnt_include_tuple_fields() {\n+        check(\n             r#\"\n-                enum Foo {\n-                    Foo (i32, i32)\n-                }\n+enum Foo { Foo (i32, i32) }\n \n-                fn main() { Foo::Fo<|> }\n-                \"#,\n-        ),\n-        @r###\"\n-        [\n-            CompletionItem {\n-                label: \"Foo(\u2026)\",\n-                source_range: 50..52,\n-                delete: 50..52,\n-                insert: \"Foo($0)\",\n-                kind: EnumVariant,\n-                lookup: \"Foo\",\n-                detail: \"(i32, i32)\",\n-                trigger_call_info: true,\n-            },\n-        ]\n-        \"###\n+fn main() { Foo::Fo<|> }\n+\"#,\n+            expect![[r#\"\n+                [\n+                    CompletionItem {\n+                        label: \"Foo(\u2026)\",\n+                        source_range: 46..48,\n+                        delete: 46..48,\n+                        insert: \"Foo($0)\",\n+                        kind: EnumVariant,\n+                        lookup: \"Foo\",\n+                        detail: \"(i32, i32)\",\n+                        trigger_call_info: true,\n+                    },\n+                ]\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn enum_detail_just_parentheses_for_unit() {\n-        assert_debug_snapshot!(\n-        do_reference_completion(\n+        check(\n             r#\"\n-                enum Foo {\n-                    Foo\n-                }\n+enum Foo { Foo }\n \n-                fn main() { Foo::Fo<|> }\n-                \"#,\n-        ),\n-        @r###\"\n-        [\n-            CompletionItem {\n-                label: \"Foo\",\n-                source_range: 39..41,\n-                delete: 39..41,\n-                insert: \"Foo\",\n-                kind: EnumVariant,\n-                detail: \"()\",\n-            },\n-        ]\n-        \"###\n+fn main() { Foo::Fo<|> }\n+\"#,\n+            expect![[r#\"\n+                [\n+                    CompletionItem {\n+                        label: \"Foo\",\n+                        source_range: 35..37,\n+                        delete: 35..37,\n+                        insert: \"Foo\",\n+                        kind: EnumVariant,\n+                        detail: \"()\",\n+                    },\n+                ]\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn sets_deprecated_flag_in_completion_items() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r#\"\n-                #[deprecated]\n-                fn something_deprecated() {}\n-\n-                #[deprecated(since = \"1.0.0\")]\n-                fn something_else_deprecated() {}\n-\n-                fn main() { som<|> }\n-                \"#,\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"main()\",\n-                source_range: 122..125,\n-                delete: 122..125,\n-                insert: \"main()$0\",\n-                kind: Function,\n-                lookup: \"main\",\n-                detail: \"fn main()\",\n-            },\n-            CompletionItem {\n-                label: \"something_deprecated()\",\n-                source_range: 122..125,\n-                delete: 122..125,\n-                insert: \"something_deprecated()$0\",\n-                kind: Function,\n-                lookup: \"something_deprecated\",\n-                detail: \"fn something_deprecated()\",\n-                deprecated: true,\n-            },\n-            CompletionItem {\n-                label: \"something_else_deprecated()\",\n-                source_range: 122..125,\n-                delete: 122..125,\n-                insert: \"something_else_deprecated()$0\",\n-                kind: Function,\n-                lookup: \"something_else_deprecated\",\n-                detail: \"fn something_else_deprecated()\",\n-                deprecated: true,\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+#[deprecated]\n+fn something_deprecated() {}\n+#[deprecated(since = \"1.0.0\")]\n+fn something_else_deprecated() {}\n+\n+fn main() { som<|> }\n+\"#,\n+            expect![[r#\"\n+                [\n+                    CompletionItem {\n+                        label: \"main()\",\n+                        source_range: 121..124,\n+                        delete: 121..124,\n+                        insert: \"main()$0\",\n+                        kind: Function,\n+                        lookup: \"main\",\n+                        detail: \"fn main()\",\n+                    },\n+                    CompletionItem {\n+                        label: \"something_deprecated()\",\n+                        source_range: 121..124,\n+                        delete: 121..124,\n+                        insert: \"something_deprecated()$0\",\n+                        kind: Function,\n+                        lookup: \"something_deprecated\",\n+                        detail: \"fn something_deprecated()\",\n+                        deprecated: true,\n+                    },\n+                    CompletionItem {\n+                        label: \"something_else_deprecated()\",\n+                        source_range: 121..124,\n+                        delete: 121..124,\n+                        insert: \"something_else_deprecated()$0\",\n+                        kind: Function,\n+                        lookup: \"something_else_deprecated\",\n+                        detail: \"fn something_else_deprecated()\",\n+                        deprecated: true,\n+                    },\n+                ]\n+            \"#]],\n         );\n \n-        assert_debug_snapshot!(do_reference_completion(\n+        check(\n             r#\"\n-struct A {\n-    #[deprecated]\n-    the_field: u32,\n-}\n-fn foo() {\n-   A { the<|> }\n-}\n+struct A { #[deprecated] the_field: u32 }\n+fn foo() { A { the<|> } }\n \"#,\n-        ),\n-        @r###\"\n-        [\n-            CompletionItem {\n-                label: \"the_field\",\n-                source_range: 69..72,\n-                delete: 69..72,\n-                insert: \"the_field\",\n-                kind: Field,\n-                detail: \"u32\",\n-                deprecated: true,\n-            },\n-        ]\n-        \"###);\n+            expect![[r#\"\n+                [\n+                    CompletionItem {\n+                        label: \"the_field\",\n+                        source_range: 57..60,\n+                        delete: 57..60,\n+                        insert: \"the_field\",\n+                        kind: Field,\n+                        detail: \"u32\",\n+                        deprecated: true,\n+                    },\n+                ]\n+            \"#]],\n+        );\n     }\n \n     #[test]\n@@ -921,279 +902,245 @@ fn main() { frobnicate!(); }\n     }\n \n     #[test]\n-    fn test_struct_field_completion_in_func_call() {\n-        mark::check!(test_struct_field_completion_in_func_call);\n-        assert_debug_snapshot!(\n-        do_reference_completion(\n-                r\"\n-                struct A { another_field: i64, the_field: u32, my_string: String }\n-                fn test(my_param: u32) -> u32 { my_param }\n-                fn foo(a: A) {\n-                    test(a.<|>)\n-                }\n-                \",\n-        ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"another_field\",\n-                source_range: 136..136,\n-                delete: 136..136,\n-                insert: \"another_field\",\n-                kind: Field,\n-                detail: \"i64\",\n-            },\n-            CompletionItem {\n-                label: \"my_string\",\n-                source_range: 136..136,\n-                delete: 136..136,\n-                insert: \"my_string\",\n-                kind: Field,\n-                detail: \"{unknown}\",\n-            },\n-            CompletionItem {\n-                label: \"the_field\",\n-                source_range: 136..136,\n-                delete: 136..136,\n-                insert: \"the_field\",\n-                kind: Field,\n-                detail: \"u32\",\n-                score: TypeMatch,\n-            },\n-        ]\n-        \"###\n+    fn active_param_type_match() {\n+        mark::check!(active_param_type_match);\n+        check(\n+            r#\"\n+struct S { foo: i64, bar: u32, baz: () }\n+fn test(x: u32) { }\n+fn foo(s: S) { test(s.<|>) }\n+\"#,\n+            expect![[r#\"\n+                [\n+                    CompletionItem {\n+                        label: \"bar\",\n+                        source_range: 83..83,\n+                        delete: 83..83,\n+                        insert: \"bar\",\n+                        kind: Field,\n+                        detail: \"u32\",\n+                        score: TypeMatch,\n+                    },\n+                    CompletionItem {\n+                        label: \"baz\",\n+                        source_range: 83..83,\n+                        delete: 83..83,\n+                        insert: \"baz\",\n+                        kind: Field,\n+                        detail: \"()\",\n+                    },\n+                    CompletionItem {\n+                        label: \"foo\",\n+                        source_range: 83..83,\n+                        delete: 83..83,\n+                        insert: \"foo\",\n+                        kind: Field,\n+                        detail: \"i64\",\n+                    },\n+                ]\n+            \"#]],\n         );\n     }\n \n     #[test]\n-    fn test_struct_field_completion_in_func_call_with_type_and_name() {\n-        assert_debug_snapshot!(\n-        do_reference_completion(\n-                r\"\n-                struct A { another_field: i64, another_good_type: u32, the_field: u32 }\n-                fn test(the_field: u32) -> u32 { the_field }\n-                fn foo(a: A) {\n-                    test(a.<|>)\n-                }\n-                \",\n-        ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"another_field\",\n-                source_range: 143..143,\n-                delete: 143..143,\n-                insert: \"another_field\",\n-                kind: Field,\n-                detail: \"i64\",\n-            },\n-            CompletionItem {\n-                label: \"another_good_type\",\n-                source_range: 143..143,\n-                delete: 143..143,\n-                insert: \"another_good_type\",\n-                kind: Field,\n-                detail: \"u32\",\n-                score: TypeMatch,\n-            },\n-            CompletionItem {\n-                label: \"the_field\",\n-                source_range: 143..143,\n-                delete: 143..143,\n-                insert: \"the_field\",\n-                kind: Field,\n-                detail: \"u32\",\n-                score: TypeAndNameMatch,\n-            },\n-        ]\n-        \"###\n+    fn active_param_type_and_name_match() {\n+        check(\n+            r#\"\n+struct S { foo: i64, bar: u32, baz: u32 }\n+fn test(bar: u32) { }\n+fn foo(s: S) { test(s.<|>) }\n+\"#,\n+            expect![[r#\"\n+                [\n+                    CompletionItem {\n+                        label: \"bar\",\n+                        source_range: 86..86,\n+                        delete: 86..86,\n+                        insert: \"bar\",\n+                        kind: Field,\n+                        detail: \"u32\",\n+                        score: TypeAndNameMatch,\n+                    },\n+                    CompletionItem {\n+                        label: \"baz\",\n+                        source_range: 86..86,\n+                        delete: 86..86,\n+                        insert: \"baz\",\n+                        kind: Field,\n+                        detail: \"u32\",\n+                        score: TypeMatch,\n+                    },\n+                    CompletionItem {\n+                        label: \"foo\",\n+                        source_range: 86..86,\n+                        delete: 86..86,\n+                        insert: \"foo\",\n+                        kind: Field,\n+                        detail: \"i64\",\n+                    },\n+                ]\n+            \"#]],\n         );\n     }\n \n     #[test]\n-    fn test_struct_field_completion_in_record_lit() {\n-        mark::check!(test_struct_field_completion_in_record_lit);\n-        assert_debug_snapshot!(\n-        do_reference_completion(\n-                r\"\n-                struct A { another_field: i64, another_good_type: u32, the_field: u32 }\n-                struct B { my_string: String, my_vec: Vec<u32>, the_field: u32 }\n-                fn foo(a: A) {\n-                    let b = B {\n-                        the_field: a.<|>\n-                    };\n-                }\n-                \",\n-        ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"another_field\",\n-                source_range: 189..189,\n-                delete: 189..189,\n-                insert: \"another_field\",\n-                kind: Field,\n-                detail: \"i64\",\n-            },\n-            CompletionItem {\n-                label: \"another_good_type\",\n-                source_range: 189..189,\n-                delete: 189..189,\n-                insert: \"another_good_type\",\n-                kind: Field,\n-                detail: \"u32\",\n-                score: TypeMatch,\n-            },\n-            CompletionItem {\n-                label: \"the_field\",\n-                source_range: 189..189,\n-                delete: 189..189,\n-                insert: \"the_field\",\n-                kind: Field,\n-                detail: \"u32\",\n-                score: TypeAndNameMatch,\n-            },\n-        ]\n-        \"###\n-        );\n+    fn record_field_type_match() {\n+        mark::check!(record_field_type_match);\n+        check(\n+            r#\"\n+struct A { foo: i64, bar: u32, baz: u32 }\n+struct B { x: (), y: f32, bar: u32 }\n+fn foo(a: A) { B { bar: a.<|> }; }\n+\"#,\n+            expect![[r#\"\n+                [\n+                    CompletionItem {\n+                        label: \"bar\",\n+                        source_range: 105..105,\n+                        delete: 105..105,\n+                        insert: \"bar\",\n+                        kind: Field,\n+                        detail: \"u32\",\n+                        score: TypeAndNameMatch,\n+                    },\n+                    CompletionItem {\n+                        label: \"baz\",\n+                        source_range: 105..105,\n+                        delete: 105..105,\n+                        insert: \"baz\",\n+                        kind: Field,\n+                        detail: \"u32\",\n+                        score: TypeMatch,\n+                    },\n+                    CompletionItem {\n+                        label: \"foo\",\n+                        source_range: 105..105,\n+                        delete: 105..105,\n+                        insert: \"foo\",\n+                        kind: Field,\n+                        detail: \"i64\",\n+                    },\n+                ]\n+            \"#]],\n+        )\n     }\n \n     #[test]\n-    fn test_struct_field_completion_in_record_lit_and_fn_call() {\n-        assert_debug_snapshot!(\n-        do_reference_completion(\n-                r\"\n-                struct A { another_field: i64, another_good_type: u32, the_field: u32 }\n-                struct B { my_string: String, my_vec: Vec<u32>, the_field: u32 }\n-                fn test(the_field: i64) -> i64 { the_field }\n-                fn foo(a: A) {\n-                    let b = B {\n-                        the_field: test(a.<|>)\n-                    };\n-                }\n-                \",\n-        ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"another_field\",\n-                source_range: 239..239,\n-                delete: 239..239,\n-                insert: \"another_field\",\n-                kind: Field,\n-                detail: \"i64\",\n-                score: TypeMatch,\n-            },\n-            CompletionItem {\n-                label: \"another_good_type\",\n-                source_range: 239..239,\n-                delete: 239..239,\n-                insert: \"another_good_type\",\n-                kind: Field,\n-                detail: \"u32\",\n-            },\n-            CompletionItem {\n-                label: \"the_field\",\n-                source_range: 239..239,\n-                delete: 239..239,\n-                insert: \"the_field\",\n-                kind: Field,\n-                detail: \"u32\",\n-            },\n-        ]\n-        \"###\n+    fn record_field_type_match_and_fn_call() {\n+        check(\n+            r#\"\n+struct A { foo: i64, bar: u32, baz: u32 }\n+struct B { x: (), y: f32, bar: u32 }\n+fn f(foo: i64) {  }\n+fn foo(a: A) { B { bar: f(a.<|>) }; }\n+\"#,\n+            expect![[r#\"\n+                [\n+                    CompletionItem {\n+                        label: \"bar\",\n+                        source_range: 127..127,\n+                        delete: 127..127,\n+                        insert: \"bar\",\n+                        kind: Field,\n+                        detail: \"u32\",\n+                    },\n+                    CompletionItem {\n+                        label: \"baz\",\n+                        source_range: 127..127,\n+                        delete: 127..127,\n+                        insert: \"baz\",\n+                        kind: Field,\n+                        detail: \"u32\",\n+                    },\n+                    CompletionItem {\n+                        label: \"foo\",\n+                        source_range: 127..127,\n+                        delete: 127..127,\n+                        insert: \"foo\",\n+                        kind: Field,\n+                        detail: \"i64\",\n+                        score: TypeAndNameMatch,\n+                    },\n+                ]\n+            \"#]],\n         );\n-    }\n-\n-    #[test]\n-    fn test_struct_field_completion_in_fn_call_and_record_lit() {\n-        assert_debug_snapshot!(\n-        do_reference_completion(\n-                r\"\n-                struct A { another_field: i64, another_good_type: u32, the_field: u32 }\n-                struct B { my_string: String, my_vec: Vec<u32>, the_field: u32 }\n-                fn test(the_field: i64) -> i64 { the_field }\n-                fn foo(a: A) {\n-                    test(B {\n-                        the_field: a.<|>\n-                    });\n-                }\n-                \",\n-        ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"another_field\",\n-                source_range: 231..231,\n-                delete: 231..231,\n-                insert: \"another_field\",\n-                kind: Field,\n-                detail: \"i64\",\n-            },\n-            CompletionItem {\n-                label: \"another_good_type\",\n-                source_range: 231..231,\n-                delete: 231..231,\n-                insert: \"another_good_type\",\n-                kind: Field,\n-                detail: \"u32\",\n-                score: TypeMatch,\n-            },\n-            CompletionItem {\n-                label: \"the_field\",\n-                source_range: 231..231,\n-                delete: 231..231,\n-                insert: \"the_field\",\n-                kind: Field,\n-                detail: \"u32\",\n-                score: TypeAndNameMatch,\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+struct A { foo: i64, bar: u32, baz: u32 }\n+struct B { x: (), y: f32, bar: u32 }\n+fn f(foo: i64) {  }\n+fn foo(a: A) { f(B { bar: a.<|> }); }\n+\"#,\n+            expect![[r#\"\n+                [\n+                    CompletionItem {\n+                        label: \"bar\",\n+                        source_range: 127..127,\n+                        delete: 127..127,\n+                        insert: \"bar\",\n+                        kind: Field,\n+                        detail: \"u32\",\n+                        score: TypeAndNameMatch,\n+                    },\n+                    CompletionItem {\n+                        label: \"baz\",\n+                        source_range: 127..127,\n+                        delete: 127..127,\n+                        insert: \"baz\",\n+                        kind: Field,\n+                        detail: \"u32\",\n+                        score: TypeMatch,\n+                    },\n+                    CompletionItem {\n+                        label: \"foo\",\n+                        source_range: 127..127,\n+                        delete: 127..127,\n+                        insert: \"foo\",\n+                        kind: Field,\n+                        detail: \"i64\",\n+                    },\n+                ]\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn prioritize_exact_ref_match() {\n-        assert_debug_snapshot!(\n-        do_reference_completion(\n-                r\"\n-                    struct WorldSnapshot { _f: () };\n-                    fn go(world: &WorldSnapshot) {\n-                        go(w<|>)\n-                    }\n-                    \",\n-        ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"WorldSnapshot\",\n-                source_range: 71..72,\n-                delete: 71..72,\n-                insert: \"WorldSnapshot\",\n-                kind: Struct,\n-            },\n-            CompletionItem {\n-                label: \"go(\u2026)\",\n-                source_range: 71..72,\n-                delete: 71..72,\n-                insert: \"go(${1:world})$0\",\n-                kind: Function,\n-                lookup: \"go\",\n-                detail: \"fn go(world: &WorldSnapshot)\",\n-                trigger_call_info: true,\n-            },\n-            CompletionItem {\n-                label: \"world\",\n-                source_range: 71..72,\n-                delete: 71..72,\n-                insert: \"world\",\n-                kind: Binding,\n-                detail: \"&WorldSnapshot\",\n-                score: TypeAndNameMatch,\n-            },\n-        ]\n-        \"###\n+        check(\n+            r#\"\n+struct WorldSnapshot { _f: () };\n+fn go(world: &WorldSnapshot) { go(w<|>) }\n+\"#,\n+            expect![[r#\"\n+                [\n+                    CompletionItem {\n+                        label: \"WorldSnapshot\",\n+                        source_range: 67..68,\n+                        delete: 67..68,\n+                        insert: \"WorldSnapshot\",\n+                        kind: Struct,\n+                    },\n+                    CompletionItem {\n+                        label: \"go(\u2026)\",\n+                        source_range: 67..68,\n+                        delete: 67..68,\n+                        insert: \"go(${1:world})$0\",\n+                        kind: Function,\n+                        lookup: \"go\",\n+                        detail: \"fn go(world: &WorldSnapshot)\",\n+                        trigger_call_info: true,\n+                    },\n+                    CompletionItem {\n+                        label: \"world\",\n+                        source_range: 67..68,\n+                        delete: 67..68,\n+                        insert: \"world\",\n+                        kind: Binding,\n+                        detail: \"&WorldSnapshot\",\n+                        score: TypeAndNameMatch,\n+                    },\n+                ]\n+            \"#]],\n         );\n     }\n }"}]}