{"sha": "44c3cc100b826afcfd0afef4d16bd47195a62f94", "node_id": "C_kwDOAAsO6NoAKDQ0YzNjYzEwMGI4MjZhZmNmZDBhZmVmNGQxNmJkNDcxOTVhNjJmOTQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-07T13:05:43Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-07T13:06:59Z"}, "message": "Merge the different identifier contexts into one enum", "tree": {"sha": "f3f8fdbb2c77b65001b5d4ba68ffe1c44f28c126", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3f8fdbb2c77b65001b5d4ba68ffe1c44f28c126"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44c3cc100b826afcfd0afef4d16bd47195a62f94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44c3cc100b826afcfd0afef4d16bd47195a62f94", "html_url": "https://github.com/rust-lang/rust/commit/44c3cc100b826afcfd0afef4d16bd47195a62f94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44c3cc100b826afcfd0afef4d16bd47195a62f94/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99fa37d6e312699e8c7887146c6e0a7ef315c1f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/99fa37d6e312699e8c7887146c6e0a7ef315c1f7", "html_url": "https://github.com/rust-lang/rust/commit/99fa37d6e312699e8c7887146c6e0a7ef315c1f7"}], "stats": {"total": 229, "additions": 138, "deletions": 91}, "files": [{"sha": "0b7479fd0e84f748724ad247a4325f4bd559803f", "filename": "crates/ide-completion/src/completions/attribute.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=44c3cc100b826afcfd0afef4d16bd47195a62f94", "patch": "@@ -18,7 +18,7 @@ use syntax::{\n \n use crate::{\n     completions::module_or_attr,\n-    context::{CompletionContext, PathCompletionCtx, PathKind, PathQualifierCtx},\n+    context::{CompletionContext, IdentContext, PathCompletionCtx, PathKind, PathQualifierCtx},\n     item::CompletionItem,\n     Completions,\n };\n@@ -35,7 +35,10 @@ pub(crate) fn complete_known_attribute_input(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n ) -> Option<()> {\n-    let attribute = ctx.fake_attribute_under_caret.as_ref()?;\n+    let attribute = match &ctx.ident_ctx {\n+        IdentContext::UnexpandedAttrTT { fake_attribute_under_caret: Some(it) } => it,\n+        _ => return None,\n+    };\n     let name_ref = match attribute.path() {\n         Some(p) => Some(p.as_single_name_ref()?),\n         None => None,"}, {"sha": "6a553eadc1949257cb6c13fa2d8a85e6d1f48adc", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=44c3cc100b826afcfd0afef4d16bd47195a62f94", "patch": "@@ -9,7 +9,7 @@ use crate::{\n \n /// Complete dot accesses, i.e. fields or methods.\n pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (dot_access, dot_receiver) = match &ctx.nameref_ctx {\n+    let (dot_access, dot_receiver) = match ctx.nameref_ctx() {\n         Some(NameRefContext {\n             dot_access:\n                 Some("}, {"sha": "ae8c199f0c4699474aeacb39e6e0d27823a6f9ac", "filename": "crates/ide-completion/src/completions/extern_abi.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fextern_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fextern_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fextern_abi.rs?ref=44c3cc100b826afcfd0afef4d16bd47195a62f94", "patch": "@@ -5,7 +5,9 @@ use syntax::{\n };\n \n use crate::{\n-    completions::Completions, context::CompletionContext, CompletionItem, CompletionItemKind,\n+    completions::Completions,\n+    context::{CompletionContext, IdentContext},\n+    CompletionItem, CompletionItemKind,\n };\n \n // Most of these are feature gated, we should filter/add feature gate completions once we have them.\n@@ -41,10 +43,14 @@ const SUPPORTED_CALLING_CONVENTIONS: &[&str] = &[\n ];\n \n pub(crate) fn complete_extern_abi(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n-    if ctx.token.parent().and_then(ast::Abi::cast).is_none() {\n-        return None;\n-    }\n-    let abi_str = ast::String::cast(ctx.token.clone())?;\n+    let abi_str = match &ctx.ident_ctx {\n+        IdentContext::String { expanded: Some(expanded), .. }\n+            if expanded.syntax().parent().map_or(false, |it| ast::Abi::can_cast(it.kind())) =>\n+        {\n+            expanded\n+        }\n+        _ => return None,\n+    };\n     let source_range = abi_str.text_range_between_quotes()?;\n     for &abi in SUPPORTED_CALLING_CONVENTIONS {\n         CompletionItem::new(CompletionItemKind::Keyword, source_range, abi).add_to(acc);"}, {"sha": "132599906af26b3ea2905105926daadeb43d8ccd", "filename": "crates/ide-completion/src/completions/format_string.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fformat_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fformat_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fformat_string.rs?ref=44c3cc100b826afcfd0afef4d16bd47195a62f94", "patch": "@@ -2,16 +2,21 @@\n \n use ide_db::syntax_helpers::format_string::is_format_string;\n use itertools::Itertools;\n-use syntax::{ast, AstToken, TextRange, TextSize};\n+use syntax::{AstToken, TextRange, TextSize};\n \n-use crate::{context::CompletionContext, CompletionItem, CompletionItemKind, Completions};\n+use crate::{\n+    context::{CompletionContext, IdentContext},\n+    CompletionItem, CompletionItemKind, Completions,\n+};\n \n /// Complete identifiers in format strings.\n pub(crate) fn format_string(acc: &mut Completions, ctx: &CompletionContext) {\n-    let string = match ast::String::cast(ctx.token.clone())\n-        .zip(ast::String::cast(ctx.original_token.clone()))\n-    {\n-        Some((expanded, original)) if is_format_string(&expanded) => original,\n+    let string = match &ctx.ident_ctx {\n+        IdentContext::String { expanded: Some(expanded), original }\n+            if is_format_string(&expanded) =>\n+        {\n+            original\n+        }\n         _ => return,\n     };\n     let cursor = ctx.position.offset;"}, {"sha": "b34545414ec216d8ce5ffe0bbfc7ee138bef150a", "filename": "crates/ide-completion/src/completions/keyword.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=44c3cc100b826afcfd0afef4d16bd47195a62f94", "patch": "@@ -2,7 +2,7 @@\n //! - `self`, `super` and `crate`, as these are considered part of path completions.\n //! - `await`, as this is a postfix completion we handle this in the postfix completions.\n \n-use syntax::{SyntaxKind, T};\n+use syntax::T;\n \n use crate::{\n     context::{PathCompletionCtx, PathKind},\n@@ -11,18 +11,10 @@ use crate::{\n };\n \n pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n-    if ctx.token.kind() == SyntaxKind::COMMENT {\n-        cov_mark::hit!(no_keyword_completion_in_comments);\n-        return;\n-    }\n     if matches!(ctx.completion_location, Some(ImmediateLocation::RecordExpr(_))) {\n         cov_mark::hit!(no_keyword_completion_in_record_lit);\n         return;\n     }\n-    if ctx.fake_attribute_under_caret.is_some() {\n-        cov_mark::hit!(no_keyword_completion_in_attr_of_expr);\n-        return;\n-    }\n     if ctx.is_non_trivial_path() {\n         cov_mark::hit!(no_keyword_completion_in_non_trivial_path);\n         return;"}, {"sha": "12fcc8920a14034ef3785da44ecf00e51ab6f11e", "filename": "crates/ide-completion/src/completions/lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Fcompletions%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Fcompletions%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Flifetime.rs?ref=44c3cc100b826afcfd0afef4d16bd47195a62f94", "patch": "@@ -17,7 +17,7 @@ use crate::{\n \n /// Completes lifetimes.\n pub(crate) fn complete_lifetime(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (lp, lifetime) = match &ctx.lifetime_ctx {\n+    let (lp, lifetime) = match ctx.lifetime_ctx() {\n         Some(LifetimeContext { kind: LifetimeKind::Lifetime, lifetime }) => (None, lifetime),\n         Some(LifetimeContext {\n             kind: LifetimeKind::LifetimeParam { is_decl: false, param },\n@@ -49,7 +49,7 @@ pub(crate) fn complete_lifetime(acc: &mut Completions, ctx: &CompletionContext)\n \n /// Completes labels.\n pub(crate) fn complete_label(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !matches!(ctx.lifetime_ctx, Some(LifetimeContext { kind: LifetimeKind::LabelRef, .. })) {\n+    if !matches!(ctx.lifetime_ctx(), Some(LifetimeContext { kind: LifetimeKind::LabelRef, .. })) {\n         return;\n     }\n     ctx.process_all_names_raw(&mut |name, res| {"}, {"sha": "3ba663067a0e38e0bfdbc91afc67cee74ef09a00", "filename": "crates/ide-completion/src/completions/mod_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=44c3cc100b826afcfd0afef4d16bd47195a62f94", "patch": "@@ -16,7 +16,7 @@ use crate::{\n \n /// Complete mod declaration, i.e. `mod ;`\n pub(crate) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n-    let mod_under_caret = match &ctx.name_ctx {\n+    let mod_under_caret = match ctx.name_ctx() {\n         Some(NameContext { kind: NameKind::Module(mod_under_caret), .. })\n             if mod_under_caret.item_list().is_none() =>\n         {"}, {"sha": "be0f6748891105b56379efae4f271f309f84273c", "filename": "crates/ide-completion/src/completions/postfix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=44c3cc100b826afcfd0afef4d16bd47195a62f94", "patch": "@@ -23,7 +23,7 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n         return;\n     }\n \n-    let (dot_receiver, receiver_is_ambiguous_float_literal) = match &ctx.nameref_ctx {\n+    let (dot_receiver, receiver_is_ambiguous_float_literal) = match ctx.nameref_ctx() {\n         Some(NameRefContext {\n             dot_access: Some(DotAccess::Method { receiver: Some(it), .. }),\n             .."}, {"sha": "f1beeb454c893a09ea20d1aaad1f510e536c063e", "filename": "crates/ide-completion/src/completions/use_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=44c3cc100b826afcfd0afef4d16bd47195a62f94", "patch": "@@ -11,7 +11,7 @@ use crate::{\n };\n \n pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (&is_absolute_path, qualifier, name_ref) = match &ctx.nameref_ctx {\n+    let (&is_absolute_path, qualifier, name_ref) = match ctx.nameref_ctx() {\n         Some(NameRefContext {\n             path_ctx:\n                 Some(PathCompletionCtx { kind: PathKind::Use, is_absolute_path, qualifier, .. }),"}, {"sha": "1381e87031c204b3702f4110eb308ec23a6732e9", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 103, "deletions": 42, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=44c3cc100b826afcfd0afef4d16bd47195a62f94", "patch": "@@ -15,7 +15,7 @@ use ide_db::{\n use syntax::{\n     algo::{find_node_at_offset, non_trivia_sibling},\n     ast::{self, AttrKind, HasArgList, HasName, NameOrNameRef},\n-    match_ast, AstNode, NodeOrToken,\n+    match_ast, AstNode, AstToken, NodeOrToken,\n     SyntaxKind::{self, *},\n     SyntaxNode, SyntaxToken, TextRange, TextSize, T,\n };\n@@ -169,6 +169,21 @@ pub(super) struct NameRefContext {\n     pub(super) path_ctx: Option<PathCompletionCtx>,\n }\n \n+#[derive(Debug)]\n+pub(super) enum IdentContext {\n+    Name(NameContext),\n+    NameRef(NameRefContext),\n+    Lifetime(LifetimeContext),\n+    /// Original token, fake token\n+    String {\n+        original: ast::String,\n+        expanded: Option<ast::String>,\n+    },\n+    UnexpandedAttrTT {\n+        fake_attribute_under_caret: Option<ast::Attr>,\n+    },\n+}\n+\n #[derive(Debug)]\n pub(super) enum DotAccess {\n     Field {\n@@ -223,12 +238,9 @@ pub(crate) struct CompletionContext<'a> {\n \n     pub(super) completion_location: Option<ImmediateLocation>,\n     pub(super) prev_sibling: Option<ImmediatePrevSibling>,\n-    pub(super) fake_attribute_under_caret: Option<ast::Attr>,\n     pub(super) previous_token: Option<SyntaxToken>,\n \n-    pub(super) name_ctx: Option<NameContext>,\n-    pub(super) lifetime_ctx: Option<LifetimeContext>,\n-    pub(super) nameref_ctx: Option<NameRefContext>,\n+    pub(super) ident_ctx: IdentContext,\n \n     pub(super) pattern_ctx: Option<PatternContext>,\n \n@@ -262,8 +274,29 @@ impl<'a> CompletionContext<'a> {\n         FamousDefs(&self.sema, self.krate)\n     }\n \n+    pub(super) fn nameref_ctx(&self) -> Option<&NameRefContext> {\n+        match &self.ident_ctx {\n+            IdentContext::NameRef(it) => Some(it),\n+            _ => None,\n+        }\n+    }\n+\n+    pub(super) fn name_ctx(&self) -> Option<&NameContext> {\n+        match &self.ident_ctx {\n+            IdentContext::Name(it) => Some(it),\n+            _ => None,\n+        }\n+    }\n+\n+    pub(super) fn lifetime_ctx(&self) -> Option<&LifetimeContext> {\n+        match &self.ident_ctx {\n+            IdentContext::Lifetime(it) => Some(it),\n+            _ => None,\n+        }\n+    }\n+\n     pub(crate) fn dot_receiver(&self) -> Option<&ast::Expr> {\n-        match &self.nameref_ctx {\n+        match self.nameref_ctx() {\n             Some(NameRefContext {\n                 dot_access:\n                     Some(DotAccess::Method { receiver, .. } | DotAccess::Field { receiver, .. }),\n@@ -282,7 +315,7 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     pub(crate) fn expects_variant(&self) -> bool {\n-        matches!(self.name_ctx, Some(NameContext { kind: NameKind::Variant, .. }))\n+        matches!(self.name_ctx(), Some(NameContext { kind: NameKind::Variant, .. }))\n     }\n \n     pub(crate) fn expects_non_trait_assoc_item(&self) -> bool {\n@@ -307,7 +340,7 @@ impl<'a> CompletionContext<'a> {\n \n     pub(crate) fn expect_field(&self) -> bool {\n         matches!(self.completion_location, Some(ImmediateLocation::TupleField))\n-            || matches!(self.name_ctx, Some(NameContext { kind: NameKind::RecordField, .. }))\n+            || matches!(self.name_ctx(), Some(NameContext { kind: NameKind::RecordField, .. }))\n     }\n \n     /// Whether the cursor is right after a trait or impl header.\n@@ -345,13 +378,13 @@ impl<'a> CompletionContext<'a> {\n                 Some(ImmediateLocation::RecordPat(_) | ImmediateLocation::RecordExpr(_))\n             )\n             || matches!(\n-                self.name_ctx,\n+                self.name_ctx(),\n                 Some(NameContext { kind: NameKind::Module(_) | NameKind::Rename, .. })\n             )\n     }\n \n     pub(crate) fn path_context(&self) -> Option<&PathCompletionCtx> {\n-        self.nameref_ctx.as_ref().and_then(|ctx| ctx.path_ctx.as_ref())\n+        self.nameref_ctx().and_then(|ctx| ctx.path_ctx.as_ref())\n     }\n \n     pub(crate) fn expects_expression(&self) -> bool {\n@@ -501,7 +534,9 @@ impl<'a> CompletionContext<'a> {\n             file_with_fake_ident.syntax().token_at_offset(offset).right_biased()?;\n \n         let original_token = original_file.syntax().token_at_offset(offset).left_biased()?;\n+        dbg!(&original_token);\n         let token = sema.descend_into_macros_single(original_token.clone());\n+        dbg!(&token);\n         let scope = sema.scope_at_offset(&token.parent()?, offset)?;\n         let krate = scope.krate();\n         let module = scope.module();\n@@ -530,11 +565,9 @@ impl<'a> CompletionContext<'a> {\n             incomplete_let: false,\n             completion_location: None,\n             prev_sibling: None,\n-            fake_attribute_under_caret: None,\n             previous_token: None,\n-            name_ctx: None,\n-            lifetime_ctx: None,\n-            nameref_ctx: None,\n+            // dummy value, will be overwritten\n+            ident_ctx: IdentContext::UnexpandedAttrTT { fake_attribute_under_caret: None },\n             pattern_ctx: None,\n             existing_derives: Default::default(),\n             locals,\n@@ -544,7 +577,7 @@ impl<'a> CompletionContext<'a> {\n             file_with_fake_ident.syntax().clone(),\n             offset,\n             fake_ident_token,\n-        );\n+        )?;\n         Some(ctx)\n     }\n \n@@ -557,7 +590,7 @@ impl<'a> CompletionContext<'a> {\n         mut speculative_file: SyntaxNode,\n         mut offset: TextSize,\n         mut fake_ident_token: SyntaxToken,\n-    ) {\n+    ) -> Option<()> {\n         let _p = profile::span(\"CompletionContext::expand_and_fill\");\n         let mut derive_ctx = None;\n \n@@ -687,7 +720,7 @@ impl<'a> CompletionContext<'a> {\n             break 'expansion;\n         }\n \n-        self.fill(&original_file, speculative_file, offset, derive_ctx);\n+        self.fill(&original_file, speculative_file, offset, derive_ctx)\n     }\n \n     /// Calculate the expected type and name of the cursor position.\n@@ -835,7 +868,7 @@ impl<'a> CompletionContext<'a> {\n         file_with_fake_ident: SyntaxNode,\n         offset: TextSize,\n         derive_ctx: Option<(SyntaxNode, SyntaxNode, TextSize, ast::Attr)>,\n-    ) {\n+    ) -> Option<()> {\n         let fake_ident_token = file_with_fake_ident.token_at_offset(offset).right_biased().unwrap();\n         let syntax_element = NodeOrToken::Token(fake_ident_token);\n         if is_in_token_of_for_loop(syntax_element.clone()) {\n@@ -844,11 +877,10 @@ impl<'a> CompletionContext<'a> {\n             // don't bother populating the context\n             // FIXME: the completion calculations should end up good enough\n             // such that this special case becomes unnecessary\n-            return;\n+            return None;\n         }\n \n         self.previous_token = previous_token(syntax_element.clone());\n-        self.fake_attribute_under_caret = syntax_element.ancestors().find_map(ast::Attr::cast);\n \n         self.incomplete_let =\n             syntax_element.ancestors().take(6).find_map(ast::LetStmt::cast).map_or(false, |it| {\n@@ -870,21 +902,49 @@ impl<'a> CompletionContext<'a> {\n             if let Some(ast::NameLike::NameRef(name_ref)) =\n                 find_node_at_offset(&file_with_fake_ident, offset)\n             {\n-                if let Some(parent) = name_ref.syntax().parent() {\n-                    let (mut nameref_ctx, _) =\n-                        Self::classify_name_ref(&self.sema, &original_file, name_ref, parent);\n-                    if let Some(path_ctx) = &mut nameref_ctx.path_ctx {\n-                        path_ctx.kind = PathKind::Derive;\n-                    }\n-                    self.nameref_ctx = Some(nameref_ctx);\n+                let parent = name_ref.syntax().parent()?;\n+                let (mut nameref_ctx, _) =\n+                    Self::classify_name_ref(&self.sema, &original_file, name_ref, parent);\n+                if let Some(path_ctx) = &mut nameref_ctx.path_ctx {\n+                    path_ctx.kind = PathKind::Derive;\n                 }\n+                self.ident_ctx = IdentContext::NameRef(nameref_ctx);\n+                return Some(());\n             }\n-            return;\n+            return None;\n         }\n \n         let name_like = match find_node_at_offset(&file_with_fake_ident, offset) {\n             Some(it) => it,\n-            None => return,\n+            None => {\n+                if let Some(original) = ast::String::cast(self.original_token.clone()) {\n+                    self.ident_ctx = IdentContext::String {\n+                        original,\n+                        expanded: ast::String::cast(self.token.clone()),\n+                    };\n+                } else {\n+                    // Fix up trailing whitespace problem\n+                    // #[attr(foo = $0\n+                    let token = if self.token.kind() == SyntaxKind::WHITESPACE {\n+                        self.previous_token.as_ref()?\n+                    } else {\n+                        &self.token\n+                    };\n+                    let p = token.parent()?;\n+                    if p.kind() == SyntaxKind::TOKEN_TREE\n+                        && p.ancestors().any(|it| it.kind() == SyntaxKind::META)\n+                    {\n+                        self.ident_ctx = IdentContext::UnexpandedAttrTT {\n+                            fake_attribute_under_caret: syntax_element\n+                                .ancestors()\n+                                .find_map(ast::Attr::cast),\n+                        };\n+                    } else {\n+                        return None;\n+                    }\n+                }\n+                return Some(());\n+            }\n         };\n         self.completion_location =\n             determine_location(&self.sema, original_file, offset, &name_like);\n@@ -902,25 +962,26 @@ impl<'a> CompletionContext<'a> {\n \n         match name_like {\n             ast::NameLike::Lifetime(lifetime) => {\n-                self.lifetime_ctx = Self::classify_lifetime(&self.sema, original_file, lifetime);\n+                self.ident_ctx = IdentContext::Lifetime(Self::classify_lifetime(\n+                    &self.sema,\n+                    original_file,\n+                    lifetime,\n+                )?);\n             }\n             ast::NameLike::NameRef(name_ref) => {\n-                if let Some(parent) = name_ref.syntax().parent() {\n-                    let (nameref_ctx, pat_ctx) =\n-                        Self::classify_name_ref(&self.sema, &original_file, name_ref, parent);\n-                    self.nameref_ctx = Some(nameref_ctx);\n-                    self.pattern_ctx = pat_ctx;\n-                }\n+                let parent = name_ref.syntax().parent()?;\n+                let (nameref_ctx, pat_ctx) =\n+                    Self::classify_name_ref(&self.sema, &original_file, name_ref, parent);\n+                self.ident_ctx = IdentContext::NameRef(nameref_ctx);\n+                self.pattern_ctx = pat_ctx;\n             }\n             ast::NameLike::Name(name) => {\n-                if let Some((name_ctx, pat_ctx)) =\n-                    Self::classify_name(&self.sema, original_file, name)\n-                {\n-                    self.pattern_ctx = pat_ctx;\n-                    self.name_ctx = Some(name_ctx);\n-                }\n+                let (name_ctx, pat_ctx) = Self::classify_name(&self.sema, original_file, name)?;\n+                self.pattern_ctx = pat_ctx;\n+                self.ident_ctx = IdentContext::Name(name_ctx);\n             }\n         }\n+        Some(())\n     }\n \n     fn classify_lifetime("}, {"sha": "1ede314e87bb40845f3d07e91e9d92e431496e9a", "filename": "crates/ide-completion/src/render/function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs?ref=44c3cc100b826afcfd0afef4d16bd47195a62f94", "patch": "@@ -207,7 +207,7 @@ fn should_add_parens(ctx: &CompletionContext) -> bool {\n     };\n \n     if matches!(\n-        ctx.nameref_ctx,\n+        ctx.nameref_ctx(),\n         Some(NameRefContext { dot_access: Some(DotAccess::Method { has_parens: true, .. }), .. })\n     ) {\n         return false;"}, {"sha": "0430aeea59b43af7c94584505eec177abe8638d8", "filename": "crates/ide-completion/src/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests.rs?ref=44c3cc100b826afcfd0afef4d16bd47195a62f94", "patch": "@@ -257,7 +257,6 @@ fn foo() {\n \n #[test]\n fn no_completions_in_comments() {\n-    cov_mark::check!(no_keyword_completion_in_comments);\n     assert_eq!(\n         completion_list(\n             r#\""}, {"sha": "52c69f84b610856b7156a6298331da811d6d2cf0", "filename": "crates/ide-completion/src/tests/attribute.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Ftests%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c3cc100b826afcfd0afef4d16bd47195a62f94/crates%2Fide-completion%2Fsrc%2Ftests%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fattribute.rs?ref=44c3cc100b826afcfd0afef4d16bd47195a62f94", "patch": "@@ -579,25 +579,6 @@ fn attr_on_fn() {\n     );\n }\n \n-#[test]\n-fn attr_on_expr() {\n-    cov_mark::check!(no_keyword_completion_in_attr_of_expr);\n-    check(\n-        r#\"fn main() { #[$0] foo() }\"#,\n-        expect![[r#\"\n-            at allow(\u2026)\n-            at cfg(\u2026)\n-            at cfg_attr(\u2026)\n-            at deny(\u2026)\n-            at forbid(\u2026)\n-            at warn(\u2026)\n-            kw crate::\n-            kw self::\n-            kw super::\n-        \"#]],\n-    );\n-}\n-\n #[test]\n fn attr_in_source_file_end() {\n     check("}]}