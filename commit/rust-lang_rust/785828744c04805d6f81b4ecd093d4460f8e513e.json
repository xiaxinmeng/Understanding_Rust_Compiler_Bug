{"sha": "785828744c04805d6f81b4ecd093d4460f8e513e", "node_id": "C_kwDOAAsO6NoAKDc4NTgyODc0NGMwNDgwNWQ2ZjgxYjRlY2QwOTNkNDQ2MGY4ZTUxM2U", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-26T05:59:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-26T05:59:54Z"}, "message": "Rollup merge of #103416 - compiler-errors:rpit-named, r=cjgillot\n\nName the `impl Trait` in region bound suggestions\n\nSlightly more descriptive message", "tree": {"sha": "d9bb20c49d39f3d6413ed61ca2f2f5ce86f881c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9bb20c49d39f3d6413ed61ca2f2f5ce86f881c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/785828744c04805d6f81b4ecd093d4460f8e513e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjWMzaCRBK7hj4Ov3rIwAAK+oIADFtuiEqKaXR3RPjh2s/9QNo\nmkFA7E7Us/d2BLOkr5B3LoQN92+Mh2GLJIvx/qrDpUDA40RM2LmSOmgkNIiQhFz5\n/OvFZS5rBXdsjKBF5RgB0WXumX7A70eU+Z5rKd9nuTbxfxin9qdGuT4/hqToIxR2\nhxZ7rI2Pxu+AAwuW7xiiiGfS6Mrx2NB2U5fa12k5Ddw05XbVj9BDrTMdPxjSXG57\nSVFcIB8ooVfePMLSICr86ShSLWOsij8tjMg7UmwCgoNJW323X2PJCptVR6qQXG30\nSREMOnt/0MHmzqsN+NF32bXdJBmpcAuw8Jwku9W+3v4o4i2nCf5xm4HXQp1Wijc=\n=SE+W\n-----END PGP SIGNATURE-----\n", "payload": "tree d9bb20c49d39f3d6413ed61ca2f2f5ce86f881c5\nparent 8ed3a80b9a37ee31e69f1dbe2f720046f8d4422c\nparent 726bf18d2d97eec43196e8ba48be5f28892b6729\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1666763994 +0530\ncommitter GitHub <noreply@github.com> 1666763994 +0530\n\nRollup merge of #103416 - compiler-errors:rpit-named, r=cjgillot\n\nName the `impl Trait` in region bound suggestions\n\nSlightly more descriptive message\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/785828744c04805d6f81b4ecd093d4460f8e513e", "html_url": "https://github.com/rust-lang/rust/commit/785828744c04805d6f81b4ecd093d4460f8e513e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/785828744c04805d6f81b4ecd093d4460f8e513e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ed3a80b9a37ee31e69f1dbe2f720046f8d4422c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed3a80b9a37ee31e69f1dbe2f720046f8d4422c", "html_url": "https://github.com/rust-lang/rust/commit/8ed3a80b9a37ee31e69f1dbe2f720046f8d4422c"}, {"sha": "726bf18d2d97eec43196e8ba48be5f28892b6729", "url": "https://api.github.com/repos/rust-lang/rust/commits/726bf18d2d97eec43196e8ba48be5f28892b6729", "html_url": "https://github.com/rust-lang/rust/commit/726bf18d2d97eec43196e8ba48be5f28892b6729"}], "stats": {"total": 67, "additions": 33, "deletions": 34}, "files": [{"sha": "a74c172fa0c131ba646d44c03f896bb9e155a5a6", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/785828744c04805d6f81b4ecd093d4460f8e513e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/785828744c04805d6f81b4ecd093d4460f8e513e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=785828744c04805d6f81b4ecd093d4460f8e513e", "patch": "@@ -286,8 +286,8 @@ pub fn suggest_new_region_bound(\n ) {\n     debug!(\"try_report_static_impl_trait: fn_return={:?}\", fn_returns);\n     // FIXME: account for the need of parens in `&(dyn Trait + '_)`\n-    let consider = \"consider changing the\";\n-    let declare = \"to declare that the\";\n+    let consider = \"consider changing\";\n+    let declare = \"to declare that\";\n     let explicit = format!(\"you can add an explicit `{}` lifetime bound\", lifetime_name);\n     let explicit_static =\n         arg.map(|arg| format!(\"explicit `'static` bound to the lifetime of {}\", arg));\n@@ -305,6 +305,10 @@ pub fn suggest_new_region_bound(\n                     return;\n                 };\n \n+                // Get the identity type for this RPIT\n+                let did = item_id.def_id.to_def_id();\n+                let ty = tcx.mk_opaque(did, ty::InternalSubsts::identity_for_item(tcx, did));\n+\n                 if let Some(span) = opaque\n                     .bounds\n                     .iter()\n@@ -321,7 +325,7 @@ pub fn suggest_new_region_bound(\n                     if let Some(explicit_static) = &explicit_static {\n                         err.span_suggestion_verbose(\n                             span,\n-                            &format!(\"{} `impl Trait`'s {}\", consider, explicit_static),\n+                            &format!(\"{consider} `{ty}`'s {explicit_static}\"),\n                             &lifetime_name,\n                             Applicability::MaybeIncorrect,\n                         );\n@@ -351,12 +355,7 @@ pub fn suggest_new_region_bound(\n                 } else {\n                     err.span_suggestion_verbose(\n                         fn_return.span.shrink_to_hi(),\n-                        &format!(\n-                            \"{declare} `impl Trait` {captures}, {explicit}\",\n-                            declare = declare,\n-                            captures = captures,\n-                            explicit = explicit,\n-                        ),\n+                        &format!(\"{declare} `{ty}` {captures}, {explicit}\",),\n                         &plus_lt,\n                         Applicability::MaybeIncorrect,\n                     );\n@@ -367,7 +366,7 @@ pub fn suggest_new_region_bound(\n                     err.span_suggestion_verbose(\n                         fn_return.span.shrink_to_hi(),\n                         &format!(\n-                            \"{declare} trait object {captures}, {explicit}\",\n+                            \"{declare} the trait object {captures}, {explicit}\",\n                             declare = declare,\n                             captures = captures,\n                             explicit = explicit,\n@@ -384,7 +383,7 @@ pub fn suggest_new_region_bound(\n                     if let Some(explicit_static) = &explicit_static {\n                         err.span_suggestion_verbose(\n                             lt.span,\n-                            &format!(\"{} trait object's {}\", consider, explicit_static),\n+                            &format!(\"{} the trait object's {}\", consider, explicit_static),\n                             &lifetime_name,\n                             Applicability::MaybeIncorrect,\n                         );"}, {"sha": "ae4d0d5853ca687569c3800263494400d435061b", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr?ref=785828744c04805d6f81b4ecd093d4460f8e513e", "patch": "@@ -25,7 +25,7 @@ LL | |     (a, b)\n LL | | }\n    | |_^\n    |\n-help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n+help: to declare that `impl Trait<'a>` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n    |                                                                                ++++"}, {"sha": "3cc47e1e89da8b4da45aac0b3cf87ae176b5dfc8", "filename": "src/test/ui/impl-trait/hidden-lifetimes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr?ref=785828744c04805d6f81b4ecd093d4460f8e513e", "patch": "@@ -6,7 +6,7 @@ LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a {\n LL |     x\n    |     ^\n    |\n-help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n+help: to declare that `impl Swap + 'a` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a + 'b {\n    |                                                                     ++++\n@@ -19,7 +19,7 @@ LL | fn hide_rc_refcell<'a, 'b: 'a, T: 'static>(x: Rc<RefCell<&'b T>>) -> impl S\n LL |     x\n    |     ^\n    |\n-help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n+help: to declare that `impl Swap + 'a` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | fn hide_rc_refcell<'a, 'b: 'a, T: 'static>(x: Rc<RefCell<&'b T>>) -> impl Swap + 'a + 'b {\n    |                                                                                     ++++"}, {"sha": "ec49a61795a0c4cd03f6eb09efd1191fa125a443", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr?ref=785828744c04805d6f81b4ecd093d4460f8e513e", "patch": "@@ -7,7 +7,7 @@ LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> im\n LL |     if condition() { a } else { b }\n    |                                 ^\n    |\n-help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n+help: to declare that `impl Trait<'d, 'e>` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e> + 'b\n    |                                                                                             ++++"}, {"sha": "c36f9bc6957c62e0c99ee21a334944d1a185e8a1", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr?ref=785828744c04805d6f81b4ecd093d4460f8e513e", "patch": "@@ -7,7 +7,7 @@ LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a,\n LL |     if condition() { a } else { b }\n    |                                 ^\n    |\n-help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n+help: to declare that `impl Trait<'a, 'b>` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b> + 'b\n    |                                                                                 ++++"}, {"sha": "9c81791fbcba541b2141c9527e4ea5af9bc3034a", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=785828744c04805d6f81b4ecd093d4460f8e513e", "patch": "@@ -6,7 +6,7 @@ LL | fn elided(x: &i32) -> impl Copy { x }\n    |              |\n    |              hidden type `&i32` captures the anonymous lifetime defined here\n    |\n-help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n+help: to declare that `impl Copy` captures `'_`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                                 ++++\n@@ -19,7 +19,7 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             |\n    |             hidden type `&'a i32` captures the lifetime `'a` as defined here\n    |\n-help: to declare that the `impl Trait` captures `'a`, you can add an explicit `'a` lifetime bound\n+help: to declare that `impl Copy` captures `'a`, you can add an explicit `'a` lifetime bound\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                          ++++\n@@ -32,7 +32,7 @@ LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n    |               |\n    |               let's call the lifetime of this reference `'1`\n    |\n-help: consider changing the `impl Trait`'s explicit `'static` bound to the lifetime of argument `x`\n+help: consider changing `impl Copy + 'static`'s explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn elided2(x: &i32) -> impl Copy + '_ { x }\n    |                                    ~~\n@@ -47,7 +47,7 @@ error: lifetime may not live long enough\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n    |              -- lifetime `'a` defined here            ^ returning this value requires that `'a` must outlive `'static`\n    |\n-help: consider changing the `impl Trait`'s explicit `'static` bound to the lifetime of argument `x`\n+help: consider changing `impl Copy + 'static`'s explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                             ~~\n@@ -76,7 +76,7 @@ help: to declare that the trait object captures data from argument `x`, you can\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug + '_>, impl Debug) { (Box::new(x), x) }\n    |                                       ++++\n-help: to declare that the `impl Trait` captures data from argument `x`, you can add an explicit `'_` lifetime bound\n+help: to declare that `impl Debug` captures data from argument `x`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided5(x: &i32) -> (Box<dyn Debug>, impl Debug + '_) { (Box::new(x), x) }\n    |                                                    ++++\n@@ -87,7 +87,7 @@ error: lifetime may not live long enough\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |               -- lifetime `'a` defined here                         ^ returning this value requires that `'a` must outlive `'static`\n    |\n-help: consider changing the `impl Trait`'s explicit `'static` bound to the lifetime of argument `x`\n+help: consider changing `impl LifetimeTrait<'a> + 'static`'s explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'a { x }\n    |                                                           ~~\n@@ -104,7 +104,7 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n LL |     move |_| println!(\"{}\", y)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n+help: to declare that `impl Fn(&'a u32)` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) + 'b {\n    |                                                                              ++++"}, {"sha": "44a790cb1a43abba4b41412e0039477a8ac1ffba", "filename": "src/test/ui/impl-trait/region-escape-via-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr?ref=785828744c04805d6f81b4ecd093d4460f8e513e", "patch": "@@ -7,7 +7,7 @@ LL | fn foo<'x, 'y>(x: Cell<&'x u32>) -> impl Trait<'y>\n LL |     x\n    |     ^\n    |\n-help: to declare that the `impl Trait` captures `'x`, you can add an explicit `'x` lifetime bound\n+help: to declare that `impl Trait<'y>` captures `'x`, you can add an explicit `'x` lifetime bound\n    |\n LL | fn foo<'x, 'y>(x: Cell<&'x u32>) -> impl Trait<'y> + 'x\n    |                                                    ++++"}, {"sha": "b365bd8845480ca89abf64df1e5a1502f53c38ac", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=785828744c04805d6f81b4ecd093d4460f8e513e", "patch": "@@ -6,7 +6,7 @@ LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n LL |         self.x.iter().map(|a| a.0)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n+help: to declare that `impl Iterator<Item = u32>` captures `'_`, you can add an explicit `'_` lifetime bound\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                                           ++++\n@@ -19,7 +19,7 @@ LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n LL |         self.x.iter().map(|a| a.0)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n+help: to declare that `impl Iterator<Item = u32>` captures `'_`, you can add an explicit `'_` lifetime bound\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                                           ++++\n@@ -32,7 +32,7 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n LL |         self.x.iter().map(|a| a.0)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: to declare that the `impl Trait` captures `'a`, you can add an explicit `'a` lifetime bound\n+help: to declare that `impl Iterator<Item = u32>` captures `'a`, you can add an explicit `'a` lifetime bound\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                                             ++++\n@@ -45,7 +45,7 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n LL |         self.x.iter().map(|a| a.0)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: to declare that the `impl Trait` captures `'a`, you can add an explicit `'a` lifetime bound\n+help: to declare that `impl Iterator<Item = u32>` captures `'a`, you can add an explicit `'a` lifetime bound\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                                             ++++"}, {"sha": "737cb35841cf59fe72bea1c5f47e71674932638e", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=785828744c04805d6f81b4ecd093d4460f8e513e", "patch": "@@ -6,7 +6,7 @@ LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n LL |     x\n    |     ^\n    |\n-help: to declare that the `impl Trait` captures `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_))`, you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_))` lifetime bound\n+help: to declare that `Opaque(DefId(0:13 ~ impl_trait_captures[1afc]::foo::{opaque#0}), [ReEarlyBound(0, 'a), T, ReEarlyBound(2, 'a)])` captures `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_))`, you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_))` lifetime bound\n    |\n LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> + ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_)) {\n    |                                      ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"}, {"sha": "eb3d3e4a67a98e6a74219a8851804f74f2c3f957", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=785828744c04805d6f81b4ecd093d4460f8e513e", "patch": "@@ -6,7 +6,7 @@ LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                          |\n    |                          hidden type `Pin<&Foo>` captures the anonymous lifetime defined here\n    |\n-help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n+help: to declare that `impl Clone` captures `'_`, you can add an explicit `'_` lifetime bound\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                                ++++"}, {"sha": "2c0b2a0d919382d7aaee4b8c60676823d83010b9", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=785828744c04805d6f81b4ecd093d4460f8e513e", "patch": "@@ -6,7 +6,7 @@ LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                    |\n    |                    hidden type `Pin<&Foo>` captures the anonymous lifetime defined here\n    |\n-help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n+help: to declare that `impl Clone` captures `'_`, you can add an explicit `'_` lifetime bound\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                          ++++"}, {"sha": "fa758bf05df5a1d747ccfd521e73439e67801e14", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=785828744c04805d6f81b4ecd093d4460f8e513e", "patch": "@@ -18,7 +18,7 @@ LL | |         *dest = g.get();\n LL | |     }\n    | |_____^\n    |\n-help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n+help: to declare that `impl FnOnce()` captures `'_`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                                   ++++"}, {"sha": "c77ef79e7ed18f47302360117013f27e7efeb2e5", "filename": "src/test/ui/suggestions/lifetimes/trait-object-nested-in-impl-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/785828744c04805d6f81b4ecd093d4460f8e513e/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Ftrait-object-nested-in-impl-trait.stderr?ref=785828744c04805d6f81b4ecd093d4460f8e513e", "patch": "@@ -10,7 +10,7 @@ LL | |             remaining: self.0.iter(),\n LL | |         }\n    | |_________^ returning this value requires that `'1` must outlive `'static`\n    |\n-help: to declare that the `impl Trait` captures data from argument `self`, you can add an explicit `'_` lifetime bound\n+help: to declare that `impl Iterator<Item = Box<(dyn Foo + 'static)>>` captures data from argument `self`, you can add an explicit `'_` lifetime bound\n    |\n LL |     fn iter(&self) -> impl Iterator<Item = Box<dyn Foo>> + '_ {\n    |                                                          ++++\n@@ -65,7 +65,7 @@ LL | |             remaining: self.0.iter(),\n LL | |         }\n    | |_________^ returning this value requires that `'a` must outlive `'static`\n    |\n-help: to declare that the `impl Trait` captures data from argument `self`, you can add an explicit `'a` lifetime bound\n+help: to declare that `impl Iterator<Item = Box<(dyn Foo + 'static)>>` captures data from argument `self`, you can add an explicit `'a` lifetime bound\n    |\n LL |     fn iter<'a>(&'a self) -> impl Iterator<Item = Box<dyn Foo>> + 'a {\n    |                                                                 ++++"}]}