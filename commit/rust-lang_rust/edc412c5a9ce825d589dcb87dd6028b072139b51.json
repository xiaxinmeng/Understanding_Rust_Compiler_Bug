{"sha": "edc412c5a9ce825d589dcb87dd6028b072139b51", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkYzQxMmM1YTljZTgyNWQ1ODlkY2I4N2RkNjAyOGIwNzIxMzliNTE=", "commit": {"author": {"name": "tinaun", "email": "tinagma@gmail.com", "date": "2018-04-17T04:30:06Z"}, "committer": {"name": "tinaun", "email": "tinagma@gmail.com", "date": "2018-04-17T04:48:23Z"}, "message": "stabilize `slice_rsplit` feature", "tree": {"sha": "2b8ebedcc02ace9421ef7b95e3cb64c0f5a1138a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b8ebedcc02ace9421ef7b95e3cb64c0f5a1138a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edc412c5a9ce825d589dcb87dd6028b072139b51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edc412c5a9ce825d589dcb87dd6028b072139b51", "html_url": "https://github.com/rust-lang/rust/commit/edc412c5a9ce825d589dcb87dd6028b072139b51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edc412c5a9ce825d589dcb87dd6028b072139b51/comments", "author": {"login": "tinaun", "id": 2565671, "node_id": "MDQ6VXNlcjI1NjU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2565671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tinaun", "html_url": "https://github.com/tinaun", "followers_url": "https://api.github.com/users/tinaun/followers", "following_url": "https://api.github.com/users/tinaun/following{/other_user}", "gists_url": "https://api.github.com/users/tinaun/gists{/gist_id}", "starred_url": "https://api.github.com/users/tinaun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tinaun/subscriptions", "organizations_url": "https://api.github.com/users/tinaun/orgs", "repos_url": "https://api.github.com/users/tinaun/repos", "events_url": "https://api.github.com/users/tinaun/events{/privacy}", "received_events_url": "https://api.github.com/users/tinaun/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tinaun", "id": 2565671, "node_id": "MDQ6VXNlcjI1NjU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2565671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tinaun", "html_url": "https://github.com/tinaun", "followers_url": "https://api.github.com/users/tinaun/followers", "following_url": "https://api.github.com/users/tinaun/following{/other_user}", "gists_url": "https://api.github.com/users/tinaun/gists{/gist_id}", "starred_url": "https://api.github.com/users/tinaun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tinaun/subscriptions", "organizations_url": "https://api.github.com/users/tinaun/orgs", "repos_url": "https://api.github.com/users/tinaun/repos", "events_url": "https://api.github.com/users/tinaun/events{/privacy}", "received_events_url": "https://api.github.com/users/tinaun/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94516c5038b1203988a3be1d7912d08a6db86202", "url": "https://api.github.com/repos/rust-lang/rust/commits/94516c5038b1203988a3be1d7912d08a6db86202", "html_url": "https://github.com/rust-lang/rust/commit/94516c5038b1203988a3be1d7912d08a6db86202"}], "stats": {"total": 50, "additions": 17, "deletions": 33}, "files": [{"sha": "8c2954f7294e02b666e4ad15244be99048f15867", "filename": "src/doc/unstable-book/src/library-features/slice-rsplit.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94516c5038b1203988a3be1d7912d08a6db86202/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fslice-rsplit.md", "raw_url": "https://github.com/rust-lang/rust/raw/94516c5038b1203988a3be1d7912d08a6db86202/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fslice-rsplit.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fslice-rsplit.md?ref=94516c5038b1203988a3be1d7912d08a6db86202", "patch": "@@ -1,10 +0,0 @@\n-# `slice_rsplit`\n-\n-The tracking issue for this feature is: [#41020]\n-\n-[#41020]: https://github.com/rust-lang/rust/issues/41020\n-\n-------------------------\n-\n-The `slice_rsplit` feature enables two methods on slices:\n-`slice.rsplit(predicate)` and `slice.rsplit_mut(predicate)`."}, {"sha": "87ad2751c5b78358a0cd25ece05846dfae51c79a", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/edc412c5a9ce825d589dcb87dd6028b072139b51/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc412c5a9ce825d589dcb87dd6028b072139b51/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=edc412c5a9ce825d589dcb87dd6028b072139b51", "patch": "@@ -108,7 +108,6 @@\n #![feature(ptr_offset_from)]\n #![feature(rustc_attrs)]\n #![feature(slice_get_slice)]\n-#![feature(slice_rsplit)]\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(str_internals)]"}, {"sha": "eb8a293013d9e2a9cb27bd8fe0fac52d7d9cea73", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/edc412c5a9ce825d589dcb87dd6028b072139b51/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc412c5a9ce825d589dcb87dd6028b072139b51/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=edc412c5a9ce825d589dcb87dd6028b072139b51", "patch": "@@ -116,7 +116,7 @@ pub use core::slice::{Iter, IterMut};\n pub use core::slice::{SplitMut, ChunksMut, Split};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::slice::{SplitN, RSplitN, SplitNMut, RSplitNMut};\n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n pub use core::slice::{RSplit, RSplitMut};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::slice::{from_raw_parts, from_raw_parts_mut};\n@@ -888,7 +888,6 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(slice_rsplit)]\n     ///\n     /// let slice = [11, 22, 33, 0, 44, 55];\n     /// let mut iter = slice.rsplit(|num| *num == 0);\n@@ -902,8 +901,6 @@ impl<T> [T] {\n     /// slice will be the first (or last) item returned by the iterator.\n     ///\n     /// ```\n-    /// #![feature(slice_rsplit)]\n-    ///\n     /// let v = &[0, 1, 1, 2, 3, 5, 8];\n     /// let mut it = v.rsplit(|n| *n % 2 == 0);\n     /// assert_eq!(it.next().unwrap(), &[]);\n@@ -912,7 +909,7 @@ impl<T> [T] {\n     /// assert_eq!(it.next().unwrap(), &[]);\n     /// assert_eq!(it.next(), None);\n     /// ```\n-    #[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+    #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n     #[inline]\n     pub fn rsplit<F>(&self, pred: F) -> RSplit<T, F>\n         where F: FnMut(&T) -> bool\n@@ -927,8 +924,6 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(slice_rsplit)]\n-    ///\n     /// let mut v = [100, 400, 300, 200, 600, 500];\n     ///\n     /// let mut count = 0;\n@@ -939,7 +934,7 @@ impl<T> [T] {\n     /// assert_eq!(v, [3, 400, 300, 2, 600, 1]);\n     /// ```\n     ///\n-    #[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+    #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n     #[inline]\n     pub fn rsplit_mut<F>(&mut self, pred: F) -> RSplitMut<T, F>\n         where F: FnMut(&T) -> bool"}, {"sha": "68f081c2e879c4bfd4285787e738ebe5c2b887bc", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/edc412c5a9ce825d589dcb87dd6028b072139b51/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc412c5a9ce825d589dcb87dd6028b072139b51/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=edc412c5a9ce825d589dcb87dd6028b072139b51", "patch": "@@ -86,7 +86,7 @@ pub trait SliceExt {\n     fn split<P>(&self, pred: P) -> Split<Self::Item, P>\n         where P: FnMut(&Self::Item) -> bool;\n \n-    #[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+    #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n     fn rsplit<P>(&self, pred: P) -> RSplit<Self::Item, P>\n         where P: FnMut(&Self::Item) -> bool;\n \n@@ -169,7 +169,7 @@ pub trait SliceExt {\n     fn split_mut<P>(&mut self, pred: P) -> SplitMut<Self::Item, P>\n         where P: FnMut(&Self::Item) -> bool;\n \n-    #[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+    #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n     fn rsplit_mut<P>(&mut self, pred: P) -> RSplitMut<Self::Item, P>\n         where P: FnMut(&Self::Item) -> bool;\n \n@@ -1840,13 +1840,13 @@ impl<'a, T, P> FusedIterator for SplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n ///\n /// [`rsplit`]: ../../std/primitive.slice.html#method.rsplit\n /// [slices]: ../../std/primitive.slice.html\n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n #[derive(Clone)] // Is this correct, or does it incorrectly require `T: Clone`?\n pub struct RSplit<'a, T:'a, P> where P: FnMut(&T) -> bool {\n     inner: Split<'a, T, P>\n }\n \n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for RSplit<'a, T, P> where P: FnMut(&T) -> bool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RSplit\")\n@@ -1856,7 +1856,7 @@ impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for RSplit<'a, T, P> where P: FnMut(&\n     }\n }\n \n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<'a, T, P> Iterator for RSplit<'a, T, P> where P: FnMut(&T) -> bool {\n     type Item = &'a [T];\n \n@@ -1871,23 +1871,23 @@ impl<'a, T, P> Iterator for RSplit<'a, T, P> where P: FnMut(&T) -> bool {\n     }\n }\n \n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<'a, T, P> DoubleEndedIterator for RSplit<'a, T, P> where P: FnMut(&T) -> bool {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a [T]> {\n         self.inner.next()\n     }\n }\n \n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<'a, T, P> SplitIter for RSplit<'a, T, P> where P: FnMut(&T) -> bool {\n     #[inline]\n     fn finish(&mut self) -> Option<&'a [T]> {\n         self.inner.finish()\n     }\n }\n \n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<'a, T, P> FusedIterator for RSplit<'a, T, P> where P: FnMut(&T) -> bool {}\n \n /// An iterator over the subslices of the vector which are separated\n@@ -1897,12 +1897,12 @@ impl<'a, T, P> FusedIterator for RSplit<'a, T, P> where P: FnMut(&T) -> bool {}\n ///\n /// [`rsplit_mut`]: ../../std/primitive.slice.html#method.rsplit_mut\n /// [slices]: ../../std/primitive.slice.html\n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n pub struct RSplitMut<'a, T:'a, P> where P: FnMut(&T) -> bool {\n     inner: SplitMut<'a, T, P>\n }\n \n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for RSplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RSplitMut\")\n@@ -1912,15 +1912,15 @@ impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for RSplitMut<'a, T, P> where P: FnMu\n     }\n }\n \n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<'a, T, P> SplitIter for RSplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n     #[inline]\n     fn finish(&mut self) -> Option<&'a mut [T]> {\n         self.inner.finish()\n     }\n }\n \n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<'a, T, P> Iterator for RSplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n     type Item = &'a mut [T];\n \n@@ -1935,7 +1935,7 @@ impl<'a, T, P> Iterator for RSplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n     }\n }\n \n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<'a, T, P> DoubleEndedIterator for RSplitMut<'a, T, P> where\n     P: FnMut(&T) -> bool,\n {\n@@ -1945,7 +1945,7 @@ impl<'a, T, P> DoubleEndedIterator for RSplitMut<'a, T, P> where\n     }\n }\n \n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<'a, T, P> FusedIterator for RSplitMut<'a, T, P> where P: FnMut(&T) -> bool {}\n \n /// An private iterator over subslices separated by elements that"}]}