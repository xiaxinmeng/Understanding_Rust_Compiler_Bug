{"sha": "4a915ac8d9f33567b77b23e90557f92860aa6db4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhOTE1YWM4ZDlmMzM1NjdiNzdiMjNlOTA1NTdmOTI4NjBhYTZkYjQ=", "commit": {"author": {"name": "Emil Gardstr\u00f6m", "email": "emil.gardstrom@gmail.com", "date": "2021-09-04T11:26:07Z"}, "committer": {"name": "Emil Gardstr\u00f6m", "email": "emil.gardstrom@gmail.com", "date": "2021-09-06T20:46:02Z"}, "message": "fix ICE on hidden tuple variant fields\n\nthis also renders them as `_`, which rustdoc previously did not.", "tree": {"sha": "5df5b25cfd3363a72de9529831cbc5e242691651", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5df5b25cfd3363a72de9529831cbc5e242691651"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a915ac8d9f33567b77b23e90557f92860aa6db4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRVsF4dMy9m92mNijsIqrtPgMP6xgUCYTZ+CgAKCRAIqrtPgMP6\nxki+APsHnRe1IEJY4uoPJwxqWhjfOccW3anotm/3ha8Y/PUEewEA9ys1Io2oiCvW\nU3VQg7qYr8+MUWIjN1GqFSRmBq+TgwQ=\n=cUZg\n-----END PGP SIGNATURE-----", "payload": "tree 5df5b25cfd3363a72de9529831cbc5e242691651\nparent 065a3720b80fde1bd04c3ca8a1268b5d6eb0c985\nauthor Emil Gardstr\u00f6m <emil.gardstrom@gmail.com> 1630754767 +0200\ncommitter Emil Gardstr\u00f6m <emil.gardstrom@gmail.com> 1630961162 +0200\n\nfix ICE on hidden tuple variant fields\n\nthis also renders them as `_`, which rustdoc previously did not.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a915ac8d9f33567b77b23e90557f92860aa6db4", "html_url": "https://github.com/rust-lang/rust/commit/4a915ac8d9f33567b77b23e90557f92860aa6db4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a915ac8d9f33567b77b23e90557f92860aa6db4/comments", "author": {"login": "Emilgardis", "id": 1502855, "node_id": "MDQ6VXNlcjE1MDI4NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1502855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emilgardis", "html_url": "https://github.com/Emilgardis", "followers_url": "https://api.github.com/users/Emilgardis/followers", "following_url": "https://api.github.com/users/Emilgardis/following{/other_user}", "gists_url": "https://api.github.com/users/Emilgardis/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emilgardis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emilgardis/subscriptions", "organizations_url": "https://api.github.com/users/Emilgardis/orgs", "repos_url": "https://api.github.com/users/Emilgardis/repos", "events_url": "https://api.github.com/users/Emilgardis/events{/privacy}", "received_events_url": "https://api.github.com/users/Emilgardis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Emilgardis", "id": 1502855, "node_id": "MDQ6VXNlcjE1MDI4NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1502855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emilgardis", "html_url": "https://github.com/Emilgardis", "followers_url": "https://api.github.com/users/Emilgardis/followers", "following_url": "https://api.github.com/users/Emilgardis/following{/other_user}", "gists_url": "https://api.github.com/users/Emilgardis/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emilgardis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emilgardis/subscriptions", "organizations_url": "https://api.github.com/users/Emilgardis/orgs", "repos_url": "https://api.github.com/users/Emilgardis/repos", "events_url": "https://api.github.com/users/Emilgardis/events{/privacy}", "received_events_url": "https://api.github.com/users/Emilgardis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "065a3720b80fde1bd04c3ca8a1268b5d6eb0c985", "url": "https://api.github.com/repos/rust-lang/rust/commits/065a3720b80fde1bd04c3ca8a1268b5d6eb0c985", "html_url": "https://github.com/rust-lang/rust/commit/065a3720b80fde1bd04c3ca8a1268b5d6eb0c985"}], "stats": {"total": 85, "additions": 61, "deletions": 24}, "files": [{"sha": "023e47719778b4166140cb6200f8c6dacd9791e3", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4a915ac8d9f33567b77b23e90557f92860aa6db4/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a915ac8d9f33567b77b23e90557f92860aa6db4/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=4a915ac8d9f33567b77b23e90557f92860aa6db4", "patch": "@@ -942,15 +942,15 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n }\n \n fn print_tuple_struct_fields(w: &mut Buffer, cx: &Context<'_>, s: &[clean::Item]) {\n-    for (i, ty) in s\n-        .iter()\n-        .map(|f| if let clean::StructFieldItem(ref ty) = *f.kind { ty } else { unreachable!() })\n-        .enumerate()\n-    {\n+    for (i, ty) in s.iter().enumerate() {\n         if i > 0 {\n             w.write_str(\",&nbsp;\");\n         }\n-        write!(w, \"{}\", ty.print(cx));\n+        match *ty.kind {\n+            clean::StrippedItem(box clean::StructFieldItem(_)) => w.write_str(\"_\"),\n+            clean::StructFieldItem(ref ty) => write!(w, \"{}\", ty.print(cx)),\n+            _ => unreachable!(),\n+        }\n     }\n }\n \n@@ -1066,24 +1066,27 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                     name = variant.name.as_ref().unwrap(),\n                 );\n                 for field in fields {\n-                    use crate::clean::StructFieldItem;\n-                    if let StructFieldItem(ref ty) = *field.kind {\n-                        let id = cx.derive_id(format!(\n-                            \"variant.{}.field.{}\",\n-                            variant.name.as_ref().unwrap(),\n-                            field.name.as_ref().unwrap()\n-                        ));\n-                        write!(\n-                            w,\n-                            \"<span id=\\\"{id}\\\" class=\\\"variant small-section-header\\\">\\\n-                                 <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                                 <code>{f}:&nbsp;{t}</code>\\\n-                             </span>\",\n-                            id = id,\n-                            f = field.name.as_ref().unwrap(),\n-                            t = ty.print(cx)\n-                        );\n-                        document(w, cx, field, Some(variant));\n+                    match *field.kind {\n+                        clean::StrippedItem(box clean::StructFieldItem(_)) => {}\n+                        clean::StructFieldItem(ref ty) => {\n+                            let id = cx.derive_id(format!(\n+                                \"variant.{}.field.{}\",\n+                                variant.name.as_ref().unwrap(),\n+                                field.name.as_ref().unwrap()\n+                            ));\n+                            write!(\n+                                w,\n+                                \"<span id=\\\"{id}\\\" class=\\\"variant small-section-header\\\">\\\n+                                    <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n+                                    <code>{f}:&nbsp;{t}</code>\\\n+                                </span>\",\n+                                id = id,\n+                                f = field.name.as_ref().unwrap(),\n+                                t = ty.print(cx)\n+                            );\n+                            document(w, cx, field, Some(variant));\n+                        }\n+                        _ => unreachable!(),\n                     }\n                 }\n                 w.write_str(\"</div></div>\");"}, {"sha": "3761805b48b71ecc6f5c6f7b7faf1e7be99878d7", "filename": "src/test/rustdoc/issue-88600.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4a915ac8d9f33567b77b23e90557f92860aa6db4/src%2Ftest%2Frustdoc%2Fissue-88600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a915ac8d9f33567b77b23e90557f92860aa6db4/src%2Ftest%2Frustdoc%2Fissue-88600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-88600.rs?ref=4a915ac8d9f33567b77b23e90557f92860aa6db4", "patch": "@@ -0,0 +1,34 @@\n+// This test ensure that #[doc(hidden)] is applied correctly in enum variant fields.\n+\n+// Denotes a field which should be hidden.\n+pub struct H;\n+\n+// Denotes a field which should not be hidden (shown).\n+pub struct S;\n+\n+// @has issue_88600/enum.FooEnum.html\n+pub enum FooEnum {\n+    // @has - '//*[@id=\"variant.HiddenTupleItem\"]//code' 'HiddenTupleItem(_)'\n+    // @count - '//*[@id=\"variant.HiddenTupleItem.field.0\"]' 0\n+    HiddenTupleItem(#[doc(hidden)] H),\n+    // @has - '//*[@id=\"variant.MultipleHidden\"]//code' 'MultipleHidden(_, _)'\n+    // @count - '//*[@id=\"variant.MultipleHidden.field.0\"]' 0\n+    // @count - '//*[@id=\"variant.MultipleHidden.field.1\"]' 0\n+    MultipleHidden(#[doc(hidden)] H, #[doc(hidden)] H),\n+    // @has - '//*[@id=\"variant.MixedHiddenFirst\"]//code' 'MixedHiddenFirst(_, S)'\n+    // @count - '//*[@id=\"variant.MixedHiddenFirst.field.0\"]' 0\n+    // @has - '//*[@id=\"variant.MixedHiddenFirst.field.1\"]' '1: S'\n+    MixedHiddenFirst(#[doc(hidden)] H, S),\n+    // @has - '//*[@id=\"variant.MixedHiddenLast\"]//code' 'MixedHiddenLast(S, _)'\n+    // @has - '//*[@id=\"variant.MixedHiddenLast.field.0\"]' '0: S'\n+    // @count - '//*[@id=\"variant.MixedHiddenLast.field.1\"]' 0\n+    MixedHiddenLast(S, #[doc(hidden)] H),\n+    // @has - '//*[@id=\"variant.HiddenStruct\"]//code' 'HiddenStruct'\n+    // @count - '//*[@id=\"variant.HiddenStruct.field.h\"]' 0\n+    // @has - '//*[@id=\"variant.HiddenStruct.field.s\"]' 's: S'\n+    HiddenStruct {\n+        #[doc(hidden)]\n+        h: H,\n+        s: S,\n+    },\n+}"}]}