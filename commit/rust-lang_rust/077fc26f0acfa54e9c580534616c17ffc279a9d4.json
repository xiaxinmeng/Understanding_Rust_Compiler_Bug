{"sha": "077fc26f0acfa54e9c580534616c17ffc279a9d4", "node_id": "C_kwDOAAsO6NoAKDA3N2ZjMjZmMGFjZmE1NGU5YzU4MDUzNDYxNmMxN2ZmYzI3OWE5ZDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-12T12:04:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-12T12:04:32Z"}, "message": "Auto merge of #109732 - Urgau:uplift_drop_forget_ref_lints, r=davidtwco\n\nUplift `clippy::{drop,forget}_{ref,copy}` lints\n\nThis PR aims at uplifting the `clippy::drop_ref`, `clippy::drop_copy`, `clippy::forget_ref` and `clippy::forget_copy` lints.\n\nThose lints are/were declared in the correctness category of clippy because they lint on useless and most probably is not what the developer wanted.\n\n## `drop_ref` and `forget_ref`\n\nThe `drop_ref` and `forget_ref` lint checks for calls to `std::mem::drop` or `std::mem::forget` with a reference instead of an owned value.\n\n### Example\n\n```rust\nlet mut lock_guard = mutex.lock();\nstd::mem::drop(&lock_guard) // Should have been drop(lock_guard), mutex\n// still locked\noperation_that_requires_mutex_to_be_unlocked();\n```\n\n### Explanation\n\nCalling `drop` or `forget` on a reference will only drop the reference itself, which is a no-op. It will not call the `drop` or `forget` method on the underlying referenced value, which is likely what was intended.\n\n## `drop_copy` and `forget_copy`\n\nThe `drop_copy` and `forget_copy` lint checks for calls to `std::mem::forget` or `std::mem::drop` with a value that derives the Copy trait.\n\n### Example\n\n```rust\nlet x: i32 = 42; // i32 implements Copy\nstd::mem::forget(x) // A copy of x is passed to the function, leaving the\n                    // original unaffected\n```\n\n### Explanation\n\nCalling `std::mem::forget` [does nothing for types that implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html) since the value will be copied and moved into the function on invocation.\n\n-----\n\nFollowed the instructions for uplift a clippy describe here: https://github.com/rust-lang/rust/pull/99696#pullrequestreview-1134072751\n\ncc `@m-ou-se` (as T-libs-api leader because the uplifting was discussed in a recent meeting)", "tree": {"sha": "5ac9db2c8e201070d88c537c9f9b37c37caff01a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ac9db2c8e201070d88c537c9f9b37c37caff01a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/077fc26f0acfa54e9c580534616c17ffc279a9d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/077fc26f0acfa54e9c580534616c17ffc279a9d4", "html_url": "https://github.com/rust-lang/rust/commit/077fc26f0acfa54e9c580534616c17ffc279a9d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/077fc26f0acfa54e9c580534616c17ffc279a9d4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b795044c6f0854445f1f2bb6443e87848e150d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b795044c6f0854445f1f2bb6443e87848e150d1", "html_url": "https://github.com/rust-lang/rust/commit/0b795044c6f0854445f1f2bb6443e87848e150d1"}, {"sha": "f5aede9c822875345eb7eb468ecd9bc4568ed112", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5aede9c822875345eb7eb468ecd9bc4568ed112", "html_url": "https://github.com/rust-lang/rust/commit/f5aede9c822875345eb7eb468ecd9bc4568ed112"}], "stats": {"total": 1878, "additions": 1106, "deletions": 772}, "files": [{"sha": "bd5356575ca872d759289b5e5db5a11d392b21a1", "filename": "compiler/rustc_builtin_macros/src/format_foreign.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -562,15 +562,13 @@ pub(crate) mod printf {\n         }\n \n         if let Type = state {\n-            drop(c);\n             type_ = at.slice_between(next).unwrap();\n \n             // Don't use `move_to!` here, as we *can* be at the end of the input.\n             at = next;\n         }\n \n-        drop(c);\n-        drop(next);\n+        let _ = c; // to avoid never used value\n \n         end = at;\n         let position = InnerSpan::new(start.at, end.at);"}, {"sha": "9c139d17c183dba5455a35aca3303d8ff09b6a6f", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -828,7 +828,7 @@ where\n                 } else {\n                     match variables.probe(vid) {\n                         TypeVariableValue::Known { value: u } => {\n-                            drop(variables);\n+                            drop(inner);\n                             self.relate(u, u)\n                         }\n                         TypeVariableValue::Unknown { universe: _universe } => {"}, {"sha": "a5639404fafd463f1f8a85a26c050a7f938069c6", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -520,3 +520,19 @@ lint_opaque_hidden_inferred_bound = opaque type `{$ty}` does not satisfy its ass\n     .specifically = this associated type bound is unsatisfied for `{$proj_ty}`\n \n lint_opaque_hidden_inferred_bound_sugg = add this bound\n+\n+lint_drop_ref = calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+    .label = argument has type `{$arg_ty}`\n+    .note = use `let _ = ...` to ignore the expression or result\n+\n+lint_drop_copy = calls to `std::mem::drop` with a value that implements `Copy` does nothing\n+    .label = argument has type `{$arg_ty}`\n+    .note = use `let _ = ...` to ignore the expression or result\n+\n+lint_forget_ref = calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+    .label = argument has type `{$arg_ty}`\n+    .note = use `let _ = ...` to ignore the expression or result\n+\n+lint_forget_copy = calls to `std::mem::forget` with a value that implements `Copy` does nothing\n+    .label = argument has type `{$arg_ty}`\n+    .note = use `let _ = ...` to ignore the expression or result"}, {"sha": "259abc2af11291b11cf26265a478ccd29591796c", "filename": "compiler/rustc_lint/src/drop_forget_useless.rs", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -0,0 +1,164 @@\n+use rustc_hir::{Arm, Expr, ExprKind, Node};\n+use rustc_span::sym;\n+\n+use crate::{\n+    lints::{DropCopyDiag, DropRefDiag, ForgetCopyDiag, ForgetRefDiag},\n+    LateContext, LateLintPass, LintContext,\n+};\n+\n+declare_lint! {\n+    /// The `drop_ref` lint checks for calls to `std::mem::drop` with a reference\n+    /// instead of an owned value.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// # fn operation_that_requires_mutex_to_be_unlocked() {} // just to make it compile\n+    /// # let mutex = std::sync::Mutex::new(1); // just to make it compile\n+    /// let mut lock_guard = mutex.lock();\n+    /// std::mem::drop(&lock_guard); // Should have been drop(lock_guard), mutex\n+    /// // still locked\n+    /// operation_that_requires_mutex_to_be_unlocked();\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Calling `drop` on a reference will only drop the\n+    /// reference itself, which is a no-op. It will not call the `drop` method (from\n+    /// the `Drop` trait implementation) on the underlying referenced value, which\n+    /// is likely what was intended.\n+    pub DROP_REF,\n+    Warn,\n+    \"calls to `std::mem::drop` with a reference instead of an owned value\"\n+}\n+\n+declare_lint! {\n+    /// The `forget_ref` lint checks for calls to `std::mem::forget` with a reference\n+    /// instead of an owned value.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// let x = Box::new(1);\n+    /// std::mem::forget(&x); // Should have been forget(x), x will still be dropped\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Calling `forget` on a reference will only forget the\n+    /// reference itself, which is a no-op. It will not forget the underlying\n+    /// referenced value, which is likely what was intended.\n+    pub FORGET_REF,\n+    Warn,\n+    \"calls to `std::mem::forget` with a reference instead of an owned value\"\n+}\n+\n+declare_lint! {\n+    /// The `drop_copy` lint checks for calls to `std::mem::drop` with a value\n+    /// that derives the Copy trait.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// let x: i32 = 42; // i32 implements Copy\n+    /// std::mem::drop(x); // A copy of x is passed to the function, leaving the\n+    ///                    // original unaffected\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Calling `std::mem::drop` [does nothing for types that\n+    /// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html), since the\n+    /// value will be copied and moved into the function on invocation.\n+    pub DROP_COPY,\n+    Warn,\n+    \"calls to `std::mem::drop` with a value that implements Copy\"\n+}\n+\n+declare_lint! {\n+    /// The `forget_copy` lint checks for calls to `std::mem::forget` with a value\n+    /// that derives the Copy trait.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// let x: i32 = 42; // i32 implements Copy\n+    /// std::mem::forget(x); // A copy of x is passed to the function, leaving the\n+    ///                      // original unaffected\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Calling `std::mem::forget` [does nothing for types that\n+    /// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html) since the\n+    /// value will be copied and moved into the function on invocation.\n+    ///\n+    /// An alternative, but also valid, explanation is that Copy types do not\n+    /// implement the Drop trait, which means they have no destructors. Without a\n+    /// destructor, there is nothing for `std::mem::forget` to ignore.\n+    pub FORGET_COPY,\n+    Warn,\n+    \"calls to `std::mem::forget` with a value that implements Copy\"\n+}\n+\n+declare_lint_pass!(DropForgetUseless => [DROP_REF, FORGET_REF, DROP_COPY, FORGET_COPY]);\n+\n+impl<'tcx> LateLintPass<'tcx> for DropForgetUseless {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if let ExprKind::Call(path, [arg]) = expr.kind\n+            && let ExprKind::Path(ref qpath) = path.kind\n+            && let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id()\n+            && let Some(fn_name) = cx.tcx.get_diagnostic_name(def_id)\n+        {\n+            let arg_ty = cx.typeck_results().expr_ty(arg);\n+            let is_copy = arg_ty.is_copy_modulo_regions(cx.tcx, cx.param_env);\n+            let drop_is_single_call_in_arm = is_single_call_in_arm(cx, arg, expr);\n+            match fn_name {\n+                sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => {\n+                    cx.emit_spanned_lint(DROP_REF, expr.span, DropRefDiag { arg_ty, label: arg.span });\n+                },\n+                sym::mem_forget if arg_ty.is_ref() => {\n+                    cx.emit_spanned_lint(FORGET_REF, expr.span, ForgetRefDiag { arg_ty, label: arg.span });\n+                },\n+                sym::mem_drop if is_copy && !drop_is_single_call_in_arm => {\n+                    cx.emit_spanned_lint(DROP_COPY, expr.span, DropCopyDiag { arg_ty, label: arg.span });\n+                }\n+                sym::mem_forget if is_copy => {\n+                    cx.emit_spanned_lint(FORGET_COPY, expr.span, ForgetCopyDiag { arg_ty, label: arg.span });\n+                }\n+                _ => return,\n+            };\n+        }\n+    }\n+}\n+\n+// Dropping returned value of a function, as in the following snippet is considered idiomatic, see\n+// rust-lang/rust-clippy#9482 for examples.\n+//\n+// ```\n+// match <var> {\n+//     <pat> => drop(fn_with_side_effect_and_returning_some_value()),\n+//     ..\n+// }\n+// ```\n+fn is_single_call_in_arm<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    arg: &'tcx Expr<'_>,\n+    drop_expr: &'tcx Expr<'_>,\n+) -> bool {\n+    if matches!(arg.kind, ExprKind::Call(..) | ExprKind::MethodCall(..)) {\n+        let parent_node = cx.tcx.hir().find_parent(drop_expr.hir_id);\n+        if let Some(Node::Arm(Arm { body, .. })) = &parent_node {\n+            return body.hir_id == drop_expr.hir_id;\n+        }\n+    }\n+    false\n+}"}, {"sha": "5c7016633c2d1568ae0f60cf8ea9202e1d1bb99b", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -52,6 +52,7 @@ mod array_into_iter;\n pub mod builtin;\n mod context;\n mod deref_into_dyn_supertrait;\n+mod drop_forget_useless;\n mod early;\n mod enum_intrinsics_non_enums;\n mod errors;\n@@ -96,6 +97,7 @@ use rustc_span::Span;\n use array_into_iter::ArrayIntoIter;\n use builtin::*;\n use deref_into_dyn_supertrait::*;\n+use drop_forget_useless::*;\n use enum_intrinsics_non_enums::EnumIntrinsicsNonEnums;\n use for_loops_over_fallibles::*;\n use hidden_unicode_codepoints::*;\n@@ -201,6 +203,7 @@ late_lint_methods!(\n         [\n             ForLoopsOverFallibles: ForLoopsOverFallibles,\n             DerefIntoDynSupertrait: DerefIntoDynSupertrait,\n+            DropForgetUseless: DropForgetUseless,\n             HardwiredLints: HardwiredLints,\n             ImproperCTypesDeclarations: ImproperCTypesDeclarations,\n             ImproperCTypesDefinitions: ImproperCTypesDefinitions,"}, {"sha": "8e48806b50447dd50b10c9f60c0710c39eb08ea4", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -662,6 +662,43 @@ pub struct ForLoopsOverFalliblesSuggestion<'a> {\n     pub end_span: Span,\n }\n \n+// drop_ref.rs\n+#[derive(LintDiagnostic)]\n+#[diag(lint_drop_ref)]\n+#[note]\n+pub struct DropRefDiag<'a> {\n+    pub arg_ty: Ty<'a>,\n+    #[label]\n+    pub label: Span,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(lint_drop_copy)]\n+#[note]\n+pub struct DropCopyDiag<'a> {\n+    pub arg_ty: Ty<'a>,\n+    #[label]\n+    pub label: Span,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(lint_forget_ref)]\n+#[note]\n+pub struct ForgetRefDiag<'a> {\n+    pub arg_ty: Ty<'a>,\n+    #[label]\n+    pub label: Span,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(lint_forget_copy)]\n+#[note]\n+pub struct ForgetCopyDiag<'a> {\n+    pub arg_ty: Ty<'a>,\n+    #[label]\n+    pub label: Span,\n+}\n+\n // hidden_unicode_codepoints.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_hidden_unicode_codepoints)]"}, {"sha": "d7a7fdebda6e1c7da279246f8b112256434934d2", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -880,12 +880,11 @@ macro_rules! make_mir_visitor {\n             ) {\n                 let Constant {\n                     span,\n-                    user_ty,\n+                    user_ty: _, // no visit method for this\n                     literal,\n                 } = constant;\n \n                 self.visit_span($(& $mutability)? *span);\n-                drop(user_ty); // no visit method for this\n                 match literal {\n                     ConstantKind::Ty(ct) => self.visit_ty_const($(&$mutability)? *ct, location),\n                     ConstantKind::Val(_, ty) => self.visit_ty($(& $mutability)? *ty, TyContext::Location(location)),"}, {"sha": "289305253ecc1f0f30a024136a4f739b81cce46d", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -968,6 +968,7 @@ pub const fn replace<T>(dest: &mut T, src: T) -> T {\n /// Integers and other types implementing [`Copy`] are unaffected by `drop`.\n ///\n /// ```\n+/// # #![cfg_attr(not(bootstrap), allow(drop_copy))]\n /// #[derive(Copy, Clone)]\n /// struct Foo(u8);\n ///"}, {"sha": "5283a576d1b21a83a964592e599dc582dc06f8d9", "filename": "library/core/src/task/poll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -116,7 +116,7 @@ impl<T> Poll<T> {\n     ///     let fut = Pin::new(&mut fut);\n     ///\n     ///     let num = fut.poll(cx).ready()?;\n-    ///     # drop(num);\n+    ///     # let _ = num; // to silence unused warning\n     ///     // ... use num\n     ///\n     ///     Poll::Ready(())"}, {"sha": "8d12625e88d0cff183aaf0b087b2ce76736139d4", "filename": "library/core/src/task/ready.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/library%2Fcore%2Fsrc%2Ftask%2Fready.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/library%2Fcore%2Fsrc%2Ftask%2Fready.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fready.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -22,7 +22,7 @@ use core::task::Poll;\n ///     let fut = Pin::new(&mut fut);\n ///\n ///     let num = ready!(fut.poll(cx));\n-///     # drop(num);\n+///     # let _ = num;\n ///     // ... use num\n ///\n ///     Poll::Ready(())\n@@ -44,7 +44,7 @@ use core::task::Poll;\n ///     Poll::Ready(t) => t,\n ///     Poll::Pending => return Poll::Pending,\n /// };\n-///     # drop(num);\n+///     # let _ = num; // to silence unused warning\n ///     # // ... use num\n ///     #\n ///     # Poll::Ready(())"}, {"sha": "6d59266b6f838dd5304c7b28c3e95dce2bb38544", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -541,7 +541,7 @@ pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {\n             // Lazily, the first time this gets called, run the actual string formatting.\n             self.string.get_or_insert_with(|| {\n                 let mut s = String::new();\n-                drop(s.write_fmt(*inner));\n+                let _err = s.write_fmt(*inner);\n                 s\n             })\n         }"}, {"sha": "5e1d859ee99c3dff556172da35c9e7c62fb060d8", "filename": "library/std/src/sys/sgx/waitqueue/mod.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fwaitqueue%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fwaitqueue%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fwaitqueue%2Fmod.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -202,12 +202,18 @@ impl WaitQueue {\n     pub fn notify_one<T>(\n         mut guard: SpinMutexGuard<'_, WaitVariable<T>>,\n     ) -> Result<WaitGuard<'_, T>, SpinMutexGuard<'_, WaitVariable<T>>> {\n+        // SAFETY: lifetime of the pop() return value is limited to the map\n+        // closure (The closure return value is 'static). The underlying\n+        // stack frame won't be freed until after the WaitGuard created below\n+        // is dropped.\n         unsafe {\n-            if let Some(entry) = guard.queue.inner.pop() {\n+            let tcs = guard.queue.inner.pop().map(|entry| -> Tcs {\n                 let mut entry_guard = entry.lock();\n-                let tcs = entry_guard.tcs;\n                 entry_guard.wake = true;\n-                drop(entry);\n+                entry_guard.tcs\n+            });\n+\n+            if let Some(tcs) = tcs {\n                 Ok(WaitGuard { mutex_guard: Some(guard), notified_tcs: NotifiedTcs::Single(tcs) })\n             } else {\n                 Err(guard)\n@@ -223,13 +229,17 @@ impl WaitQueue {\n     pub fn notify_all<T>(\n         mut guard: SpinMutexGuard<'_, WaitVariable<T>>,\n     ) -> Result<WaitGuard<'_, T>, SpinMutexGuard<'_, WaitVariable<T>>> {\n+        // SAFETY: lifetime of the pop() return values are limited to the\n+        // while loop body. The underlying stack frames won't be freed until\n+        // after the WaitGuard created below is dropped.\n         unsafe {\n             let mut count = 0;\n             while let Some(entry) = guard.queue.inner.pop() {\n                 count += 1;\n                 let mut entry_guard = entry.lock();\n                 entry_guard.wake = true;\n             }\n+\n             if let Some(count) = NonZeroUsize::new(count) {\n                 Ok(WaitGuard { mutex_guard: Some(guard), notified_tcs: NotifiedTcs::All { count } })\n             } else {"}, {"sha": "09db5b11dbfd32be6ae3afcd0fe4eb8361ea50c0", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1210,7 +1210,7 @@ impl File {\n                 // Redox doesn't appear to support `UTIME_OMIT`.\n                 // ESP-IDF and HorizonOS do not support `futimens` at all and the behavior for those OS is therefore\n                 // the same as for Redox.\n-                drop(times);\n+                let _ = times;\n                 Err(io::const_io_error!(\n                     io::ErrorKind::Unsupported,\n                     \"setting file times not supported\","}, {"sha": "b65e2572cc5e4b656f27bb623a1774f73e8d64b1", "filename": "library/std/src/thread/tests.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -375,7 +375,9 @@ fn test_scoped_threads_nll() {\n     // this is mostly a *compilation test* for this exact function:\n     fn foo(x: &u8) {\n         thread::scope(|s| {\n-            s.spawn(|| drop(x));\n+            s.spawn(|| match x {\n+                _ => (),\n+            });\n         });\n     }\n     // let's also run it for good measure"}, {"sha": "04993e4928799b41b64c14a0eb35849a581519f1", "filename": "src/tools/clippy/clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -132,12 +132,8 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::doc::NEEDLESS_DOCTEST_MAIN_INFO,\n     crate::doc::UNNECESSARY_SAFETY_DOC_INFO,\n     crate::double_parens::DOUBLE_PARENS_INFO,\n-    crate::drop_forget_ref::DROP_COPY_INFO,\n     crate::drop_forget_ref::DROP_NON_DROP_INFO,\n-    crate::drop_forget_ref::DROP_REF_INFO,\n-    crate::drop_forget_ref::FORGET_COPY_INFO,\n     crate::drop_forget_ref::FORGET_NON_DROP_INFO,\n-    crate::drop_forget_ref::FORGET_REF_INFO,\n     crate::drop_forget_ref::UNDROPPED_MANUALLY_DROPS_INFO,\n     crate::duplicate_mod::DUPLICATE_MOD_INFO,\n     crate::else_if_without_else::ELSE_IF_WITHOUT_ELSE_INFO,"}, {"sha": "b2f7d026cc8b24a00cea5c932b21beae676bc919", "filename": "src/tools/clippy/clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 5, "deletions": 112, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -7,102 +7,6 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for calls to `std::mem::drop` with a reference\n-    /// instead of an owned value.\n-    ///\n-    /// ### Why is this bad?\n-    /// Calling `drop` on a reference will only drop the\n-    /// reference itself, which is a no-op. It will not call the `drop` method (from\n-    /// the `Drop` trait implementation) on the underlying referenced value, which\n-    /// is likely what was intended.\n-    ///\n-    /// ### Example\n-    /// ```ignore\n-    /// let mut lock_guard = mutex.lock();\n-    /// std::mem::drop(&lock_guard) // Should have been drop(lock_guard), mutex\n-    /// // still locked\n-    /// operation_that_requires_mutex_to_be_unlocked();\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub DROP_REF,\n-    correctness,\n-    \"calls to `std::mem::drop` with a reference instead of an owned value\"\n-}\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for calls to `std::mem::forget` with a reference\n-    /// instead of an owned value.\n-    ///\n-    /// ### Why is this bad?\n-    /// Calling `forget` on a reference will only forget the\n-    /// reference itself, which is a no-op. It will not forget the underlying\n-    /// referenced\n-    /// value, which is likely what was intended.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// let x = Box::new(1);\n-    /// std::mem::forget(&x) // Should have been forget(x), x will still be dropped\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub FORGET_REF,\n-    correctness,\n-    \"calls to `std::mem::forget` with a reference instead of an owned value\"\n-}\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for calls to `std::mem::drop` with a value\n-    /// that derives the Copy trait\n-    ///\n-    /// ### Why is this bad?\n-    /// Calling `std::mem::drop` [does nothing for types that\n-    /// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html), since the\n-    /// value will be copied and moved into the function on invocation.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// let x: i32 = 42; // i32 implements Copy\n-    /// std::mem::drop(x) // A copy of x is passed to the function, leaving the\n-    ///                   // original unaffected\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub DROP_COPY,\n-    correctness,\n-    \"calls to `std::mem::drop` with a value that implements Copy\"\n-}\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for calls to `std::mem::forget` with a value that\n-    /// derives the Copy trait\n-    ///\n-    /// ### Why is this bad?\n-    /// Calling `std::mem::forget` [does nothing for types that\n-    /// implement Copy](https://doc.rust-lang.org/std/mem/fn.drop.html) since the\n-    /// value will be copied and moved into the function on invocation.\n-    ///\n-    /// An alternative, but also valid, explanation is that Copy types do not\n-    /// implement\n-    /// the Drop trait, which means they have no destructors. Without a destructor,\n-    /// there\n-    /// is nothing for `std::mem::forget` to ignore.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// let x: i32 = 42; // i32 implements Copy\n-    /// std::mem::forget(x) // A copy of x is passed to the function, leaving the\n-    ///                     // original unaffected\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub FORGET_COPY,\n-    correctness,\n-    \"calls to `std::mem::forget` with a value that implements Copy\"\n-}\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for calls to `std::mem::drop` with a value that does not implement `Drop`.\n@@ -172,24 +76,12 @@ declare_clippy_lint! {\n     \"use of safe `std::mem::drop` function to drop a std::mem::ManuallyDrop, which will not drop the inner value\"\n }\n \n-const DROP_REF_SUMMARY: &str = \"calls to `std::mem::drop` with a reference instead of an owned value. \\\n-                                Dropping a reference does nothing\";\n-const FORGET_REF_SUMMARY: &str = \"calls to `std::mem::forget` with a reference instead of an owned value. \\\n-                                  Forgetting a reference does nothing\";\n-const DROP_COPY_SUMMARY: &str = \"calls to `std::mem::drop` with a value that implements `Copy`. \\\n-                                 Dropping a copy leaves the original intact\";\n-const FORGET_COPY_SUMMARY: &str = \"calls to `std::mem::forget` with a value that implements `Copy`. \\\n-                                   Forgetting a copy leaves the original intact\";\n const DROP_NON_DROP_SUMMARY: &str = \"call to `std::mem::drop` with a value that does not implement `Drop`. \\\n                                  Dropping such a type only extends its contained lifetimes\";\n const FORGET_NON_DROP_SUMMARY: &str = \"call to `std::mem::forget` with a value that does not implement `Drop`. \\\n                                    Forgetting such a type is the same as dropping it\";\n \n declare_lint_pass!(DropForgetRef => [\n-    DROP_REF,\n-    FORGET_REF,\n-    DROP_COPY,\n-    FORGET_COPY,\n     DROP_NON_DROP,\n     FORGET_NON_DROP,\n     UNDROPPED_MANUALLY_DROPS\n@@ -206,10 +98,11 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n             let is_copy = is_copy(cx, arg_ty);\n             let drop_is_single_call_in_arm = is_single_call_in_arm(cx, arg, expr);\n             let (lint, msg) = match fn_name {\n-                sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => (DROP_REF, DROP_REF_SUMMARY),\n-                sym::mem_forget if arg_ty.is_ref() => (FORGET_REF, FORGET_REF_SUMMARY),\n-                sym::mem_drop if is_copy && !drop_is_single_call_in_arm => (DROP_COPY, DROP_COPY_SUMMARY),\n-                sym::mem_forget if is_copy => (FORGET_COPY, FORGET_COPY_SUMMARY),\n+                // early return for uplifted lints: drop_ref, drop_copy, forget_ref, forget_copy\n+                sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => return,\n+                sym::mem_forget if arg_ty.is_ref() => return,\n+                sym::mem_drop if is_copy && !drop_is_single_call_in_arm => return,\n+                sym::mem_forget if is_copy => return,\n                 sym::mem_drop if is_type_lang_item(cx, arg_ty, LangItem::ManuallyDrop) => {\n                     span_lint_and_help(\n                         cx,"}, {"sha": "52e22c0c6303c22a8b010d5924ebb72124acc242", "filename": "src/tools/clippy/clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -32,9 +32,13 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::zero_width_space\", \"clippy::invisible_characters\"),\n     (\"clippy::clone_double_ref\", \"suspicious_double_ref_op\"),\n     (\"clippy::drop_bounds\", \"drop_bounds\"),\n+    (\"clippy::drop_copy\", \"drop_copy\"),\n+    (\"clippy::drop_ref\", \"drop_ref\"),\n     (\"clippy::for_loop_over_option\", \"for_loops_over_fallibles\"),\n     (\"clippy::for_loop_over_result\", \"for_loops_over_fallibles\"),\n     (\"clippy::for_loops_over_fallibles\", \"for_loops_over_fallibles\"),\n+    (\"clippy::forget_copy\", \"forget_copy\"),\n+    (\"clippy::forget_ref\", \"forget_ref\"),\n     (\"clippy::into_iter_on_array\", \"array_into_iter\"),\n     (\"clippy::invalid_atomic_ordering\", \"invalid_atomic_ordering\"),\n     (\"clippy::invalid_ref\", \"invalid_value\"),"}, {"sha": "a7276dd59f4343d2e345a7c4ea54e6ce3d2b6172", "filename": "src/tools/clippy/tests/ui/drop_forget_copy.rs", "status": "removed", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_forget_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_forget_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_forget_copy.rs?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -1,86 +0,0 @@\n-#![warn(clippy::drop_copy, clippy::forget_copy)]\n-#![allow(clippy::toplevel_ref_arg, clippy::drop_ref, clippy::forget_ref, unused_mut)]\n-\n-use std::mem::{drop, forget};\n-use std::vec::Vec;\n-\n-#[derive(Copy, Clone)]\n-struct SomeStruct;\n-\n-struct AnotherStruct {\n-    x: u8,\n-    y: u8,\n-    z: Vec<u8>,\n-}\n-\n-impl Clone for AnotherStruct {\n-    fn clone(&self) -> AnotherStruct {\n-        AnotherStruct {\n-            x: self.x,\n-            y: self.y,\n-            z: self.z.clone(),\n-        }\n-    }\n-}\n-\n-fn main() {\n-    let s1 = SomeStruct {};\n-    let s2 = s1;\n-    let s3 = &s1;\n-    let mut s4 = s1;\n-    let ref s5 = s1;\n-\n-    drop(s1);\n-    drop(s2);\n-    drop(s3);\n-    drop(s4);\n-    drop(s5);\n-\n-    forget(s1);\n-    forget(s2);\n-    forget(s3);\n-    forget(s4);\n-    forget(s5);\n-\n-    let a1 = AnotherStruct {\n-        x: 255,\n-        y: 0,\n-        z: vec![1, 2, 3],\n-    };\n-    let a2 = &a1;\n-    let mut a3 = a1.clone();\n-    let ref a4 = a1;\n-    let a5 = a1.clone();\n-\n-    drop(a2);\n-    drop(a3);\n-    drop(a4);\n-    drop(a5);\n-\n-    forget(a2);\n-    let a3 = &a1;\n-    forget(a3);\n-    forget(a4);\n-    let a5 = a1.clone();\n-    forget(a5);\n-}\n-\n-#[allow(unused)]\n-#[allow(clippy::unit_cmp)]\n-fn issue9482(x: u8) {\n-    fn println_and<T>(t: T) -> T {\n-        println!(\"foo\");\n-        t\n-    }\n-\n-    match x {\n-        0 => drop(println_and(12)), // Don't lint (copy type), we only care about side-effects\n-        1 => drop(println_and(String::new())), // Don't lint (no copy type), we only care about side-effects\n-        2 => {\n-            drop(println_and(13)); // Lint, even if we only care about the side-effect, it's already in a block\n-        },\n-        3 if drop(println_and(14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n-        4 => drop(2),                           // Lint, not a fn/method call\n-        _ => (),\n-    }\n-}"}, {"sha": "90bef1c3c439f76d334e209619d160b5ac0e8ad5", "filename": "src/tools/clippy/tests/ui/drop_forget_copy.stderr", "status": "removed", "additions": 0, "deletions": 112, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_forget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_forget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_forget_copy.stderr?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -1,112 +0,0 @@\n-error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:33:5\n-   |\n-LL |     drop(s1);\n-   |     ^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/drop_forget_copy.rs:33:10\n-   |\n-LL |     drop(s1);\n-   |          ^^\n-   = note: `-D clippy::drop-copy` implied by `-D warnings`\n-\n-error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:34:5\n-   |\n-LL |     drop(s2);\n-   |     ^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/drop_forget_copy.rs:34:10\n-   |\n-LL |     drop(s2);\n-   |          ^^\n-\n-error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:36:5\n-   |\n-LL |     drop(s4);\n-   |     ^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/drop_forget_copy.rs:36:10\n-   |\n-LL |     drop(s4);\n-   |          ^^\n-\n-error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetting a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:39:5\n-   |\n-LL |     forget(s1);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/drop_forget_copy.rs:39:12\n-   |\n-LL |     forget(s1);\n-   |            ^^\n-   = note: `-D clippy::forget-copy` implied by `-D warnings`\n-\n-error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetting a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:40:5\n-   |\n-LL |     forget(s2);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/drop_forget_copy.rs:40:12\n-   |\n-LL |     forget(s2);\n-   |            ^^\n-\n-error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetting a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:42:5\n-   |\n-LL |     forget(s4);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `SomeStruct`\n-  --> $DIR/drop_forget_copy.rs:42:12\n-   |\n-LL |     forget(s4);\n-   |            ^^\n-\n-error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:80:13\n-   |\n-LL |             drop(println_and(13)); // Lint, even if we only care about the side-effect, it's already in a block\n-   |             ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `i32`\n-  --> $DIR/drop_forget_copy.rs:80:18\n-   |\n-LL |             drop(println_and(13)); // Lint, even if we only care about the side-effect, it's already in a block\n-   |                  ^^^^^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:82:14\n-   |\n-LL |         3 if drop(println_and(14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n-   |              ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `i32`\n-  --> $DIR/drop_forget_copy.rs:82:19\n-   |\n-LL |         3 if drop(println_and(14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n-   |                   ^^^^^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact\n-  --> $DIR/drop_forget_copy.rs:83:14\n-   |\n-LL |         4 => drop(2),                           // Lint, not a fn/method call\n-   |              ^^^^^^^\n-   |\n-note: argument has type `i32`\n-  --> $DIR/drop_forget_copy.rs:83:19\n-   |\n-LL |         4 => drop(2),                           // Lint, not a fn/method call\n-   |                   ^\n-\n-error: aborting due to 9 previous errors\n-"}, {"sha": "293b9f6de832dc5ca5f2f3d5a1eefb67d79f3195", "filename": "src/tools/clippy/tests/ui/drop_ref.stderr", "status": "removed", "additions": 0, "deletions": 147, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_ref.stderr?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -1,147 +0,0 @@\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:11:5\n-   |\n-LL |     drop(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:11:10\n-   |\n-LL |     drop(&SomeStruct);\n-   |          ^^^^^^^^^^^\n-   = note: `-D clippy::drop-ref` implied by `-D warnings`\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:14:5\n-   |\n-LL |     drop(&owned1);\n-   |     ^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:14:10\n-   |\n-LL |     drop(&owned1);\n-   |          ^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:15:5\n-   |\n-LL |     drop(&&owned1);\n-   |     ^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&&SomeStruct`\n-  --> $DIR/drop_ref.rs:15:10\n-   |\n-LL |     drop(&&owned1);\n-   |          ^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:16:5\n-   |\n-LL |     drop(&mut owned1);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_ref.rs:16:10\n-   |\n-LL |     drop(&mut owned1);\n-   |          ^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:20:5\n-   |\n-LL |     drop(reference1);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:20:10\n-   |\n-LL |     drop(reference1);\n-   |          ^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:23:5\n-   |\n-LL |     drop(reference2);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_ref.rs:23:10\n-   |\n-LL |     drop(reference2);\n-   |          ^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:26:5\n-   |\n-LL |     drop(reference3);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:26:10\n-   |\n-LL |     drop(reference3);\n-   |          ^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:31:5\n-   |\n-LL |     drop(&val);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `&T`\n-  --> $DIR/drop_ref.rs:31:10\n-   |\n-LL |     drop(&val);\n-   |          ^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:39:5\n-   |\n-LL |     std::mem::drop(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:39:20\n-   |\n-LL |     std::mem::drop(&SomeStruct);\n-   |                    ^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:91:13\n-   |\n-LL |             drop(println_and(&13)); // Lint, even if we only care about the side-effect, it's already in a block\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&i32`\n-  --> $DIR/drop_ref.rs:91:18\n-   |\n-LL |             drop(println_and(&13)); // Lint, even if we only care about the side-effect, it's already in a block\n-   |                  ^^^^^^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:93:14\n-   |\n-LL |         3 if drop(println_and(&14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n-   |              ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&i32`\n-  --> $DIR/drop_ref.rs:93:19\n-   |\n-LL |         3 if drop(println_and(&14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n-   |                   ^^^^^^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:94:14\n-   |\n-LL |         4 => drop(&2),                           // Lint, not a fn/method call\n-   |              ^^^^^^^^\n-   |\n-note: argument has type `&i32`\n-  --> $DIR/drop_ref.rs:94:19\n-   |\n-LL |         4 => drop(&2),                           // Lint, not a fn/method call\n-   |                   ^^\n-\n-error: aborting due to 12 previous errors\n-"}, {"sha": "031b415f56ff6d643554a033f3f06ee6d72b7e78", "filename": "src/tools/clippy/tests/ui/forget_ref.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_ref.rs?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -1,50 +0,0 @@\n-#![warn(clippy::forget_ref)]\n-#![allow(clippy::toplevel_ref_arg)]\n-#![allow(clippy::unnecessary_wraps, clippy::forget_non_drop)]\n-#![allow(clippy::borrow_deref_ref)]\n-\n-use std::mem::forget;\n-\n-struct SomeStruct;\n-\n-fn main() {\n-    forget(&SomeStruct);\n-\n-    let mut owned = SomeStruct;\n-    forget(&owned);\n-    forget(&&owned);\n-    forget(&mut owned);\n-    forget(owned); //OK\n-\n-    let reference1 = &SomeStruct;\n-    forget(&*reference1);\n-\n-    let reference2 = &mut SomeStruct;\n-    forget(reference2);\n-\n-    let ref reference3 = SomeStruct;\n-    forget(reference3);\n-}\n-\n-#[allow(dead_code)]\n-fn test_generic_fn_forget<T>(val: T) {\n-    forget(&val);\n-    forget(val); //OK\n-}\n-\n-#[allow(dead_code)]\n-fn test_similarly_named_function() {\n-    fn forget<T>(_val: T) {}\n-    forget(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n-    std::mem::forget(&SomeStruct);\n-}\n-\n-#[derive(Copy, Clone)]\n-pub struct Error;\n-fn produce_half_owl_error() -> Result<(), Error> {\n-    Ok(())\n-}\n-\n-fn produce_half_owl_ok() -> Result<bool, ()> {\n-    Ok(true)\n-}"}, {"sha": "011cdefc665f886bc3b6857301f91370d4e2bba8", "filename": "src/tools/clippy/tests/ui/forget_ref.stderr", "status": "removed", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fforget_ref.stderr?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -1,111 +0,0 @@\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:11:5\n-   |\n-LL |     forget(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:11:12\n-   |\n-LL |     forget(&SomeStruct);\n-   |            ^^^^^^^^^^^\n-   = note: `-D clippy::forget-ref` implied by `-D warnings`\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:14:5\n-   |\n-LL |     forget(&owned);\n-   |     ^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:14:12\n-   |\n-LL |     forget(&owned);\n-   |            ^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:15:5\n-   |\n-LL |     forget(&&owned);\n-   |     ^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&&SomeStruct`\n-  --> $DIR/forget_ref.rs:15:12\n-   |\n-LL |     forget(&&owned);\n-   |            ^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:16:5\n-   |\n-LL |     forget(&mut owned);\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/forget_ref.rs:16:12\n-   |\n-LL |     forget(&mut owned);\n-   |            ^^^^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:20:5\n-   |\n-LL |     forget(&*reference1);\n-   |     ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:20:12\n-   |\n-LL |     forget(&*reference1);\n-   |            ^^^^^^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:23:5\n-   |\n-LL |     forget(reference2);\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/forget_ref.rs:23:12\n-   |\n-LL |     forget(reference2);\n-   |            ^^^^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:26:5\n-   |\n-LL |     forget(reference3);\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:26:12\n-   |\n-LL |     forget(reference3);\n-   |            ^^^^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:31:5\n-   |\n-LL |     forget(&val);\n-   |     ^^^^^^^^^^^^\n-   |\n-note: argument has type `&T`\n-  --> $DIR/forget_ref.rs:31:12\n-   |\n-LL |     forget(&val);\n-   |            ^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing\n-  --> $DIR/forget_ref.rs:39:5\n-   |\n-LL |     std::mem::forget(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:39:22\n-   |\n-LL |     std::mem::forget(&SomeStruct);\n-   |                      ^^^^^^^^^^^\n-\n-error: aborting due to 9 previous errors\n-"}, {"sha": "5137448a6d4babcbc7ec7c3391d885700c3d52bd", "filename": "src/tools/clippy/tests/ui/mem_forget.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmem_forget.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -5,7 +5,7 @@ use std::mem as memstuff;\n use std::mem::forget as forgetSomething;\n \n #[warn(clippy::mem_forget)]\n-#[allow(clippy::forget_copy)]\n+#[allow(forget_copy)]\n fn main() {\n     let five: i32 = 5;\n     forgetSomething(five);"}, {"sha": "f28153e56b0fe732a4354352d73a2ae9c2241655", "filename": "src/tools/clippy/tests/ui/multiple_unsafe_ops_per_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmultiple_unsafe_ops_per_block.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused)]\n #![allow(deref_nullptr)]\n #![allow(clippy::unnecessary_operation)]\n-#![allow(clippy::drop_copy)]\n+#![allow(drop_copy)]\n #![warn(clippy::multiple_unsafe_ops_per_block)]\n \n extern crate proc_macros;"}, {"sha": "9036f89261288ffb1f35a9634ba67b3ca0007798", "filename": "src/tools/clippy/tests/ui/rename.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -29,7 +29,11 @@\n #![allow(clippy::invisible_characters)]\n #![allow(suspicious_double_ref_op)]\n #![allow(drop_bounds)]\n+#![allow(drop_copy)]\n+#![allow(drop_ref)]\n #![allow(for_loops_over_fallibles)]\n+#![allow(forget_copy)]\n+#![allow(forget_ref)]\n #![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n #![allow(invalid_value)]\n@@ -71,9 +75,13 @@\n #![warn(clippy::invisible_characters)]\n #![warn(suspicious_double_ref_op)]\n #![warn(drop_bounds)]\n+#![warn(drop_copy)]\n+#![warn(drop_ref)]\n #![warn(for_loops_over_fallibles)]\n #![warn(for_loops_over_fallibles)]\n #![warn(for_loops_over_fallibles)]\n+#![warn(forget_copy)]\n+#![warn(forget_ref)]\n #![warn(array_into_iter)]\n #![warn(invalid_atomic_ordering)]\n #![warn(invalid_value)]"}, {"sha": "43cabe810f3447d7825e3d7bb6936c022ac7075b", "filename": "src/tools/clippy/tests/ui/rename.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -29,7 +29,11 @@\n #![allow(clippy::invisible_characters)]\n #![allow(suspicious_double_ref_op)]\n #![allow(drop_bounds)]\n+#![allow(drop_copy)]\n+#![allow(drop_ref)]\n #![allow(for_loops_over_fallibles)]\n+#![allow(forget_copy)]\n+#![allow(forget_ref)]\n #![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n #![allow(invalid_value)]\n@@ -71,9 +75,13 @@\n #![warn(clippy::zero_width_space)]\n #![warn(clippy::clone_double_ref)]\n #![warn(clippy::drop_bounds)]\n+#![warn(clippy::drop_copy)]\n+#![warn(clippy::drop_ref)]\n #![warn(clippy::for_loop_over_option)]\n #![warn(clippy::for_loop_over_result)]\n #![warn(clippy::for_loops_over_fallibles)]\n+#![warn(clippy::forget_copy)]\n+#![warn(clippy::forget_ref)]\n #![warn(clippy::into_iter_on_array)]\n #![warn(clippy::invalid_atomic_ordering)]\n #![warn(clippy::invalid_ref)]"}, {"sha": "1ad7cf412c896db6cb34030b19cfc03dafdb94ec", "filename": "src/tools/clippy/tests/ui/rename.stderr", "status": "modified", "additions": 68, "deletions": 44, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,262 +1,286 @@\n error: lint `clippy::almost_complete_letter_range` has been renamed to `clippy::almost_complete_range`\n-  --> $DIR/rename.rs:44:9\n+  --> $DIR/rename.rs:48:9\n    |\n LL | #![warn(clippy::almost_complete_letter_range)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::almost_complete_range`\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::blacklisted_name` has been renamed to `clippy::disallowed_names`\n-  --> $DIR/rename.rs:45:9\n+  --> $DIR/rename.rs:49:9\n    |\n LL | #![warn(clippy::blacklisted_name)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_names`\n \n error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:46:9\n+  --> $DIR/rename.rs:50:9\n    |\n LL | #![warn(clippy::block_in_if_condition_expr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:47:9\n+  --> $DIR/rename.rs:51:9\n    |\n LL | #![warn(clippy::block_in_if_condition_stmt)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n-  --> $DIR/rename.rs:48:9\n+  --> $DIR/rename.rs:52:9\n    |\n LL | #![warn(clippy::box_vec)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:49:9\n+  --> $DIR/rename.rs:53:9\n    |\n LL | #![warn(clippy::const_static_lifetime)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:50:9\n+  --> $DIR/rename.rs:54:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n \n error: lint `clippy::derive_hash_xor_eq` has been renamed to `clippy::derived_hash_with_manual_eq`\n-  --> $DIR/rename.rs:51:9\n+  --> $DIR/rename.rs:55:9\n    |\n LL | #![warn(clippy::derive_hash_xor_eq)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::derived_hash_with_manual_eq`\n \n error: lint `clippy::disallowed_method` has been renamed to `clippy::disallowed_methods`\n-  --> $DIR/rename.rs:52:9\n+  --> $DIR/rename.rs:56:9\n    |\n LL | #![warn(clippy::disallowed_method)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_methods`\n \n error: lint `clippy::disallowed_type` has been renamed to `clippy::disallowed_types`\n-  --> $DIR/rename.rs:53:9\n+  --> $DIR/rename.rs:57:9\n    |\n LL | #![warn(clippy::disallowed_type)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_types`\n \n error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_read_write_in_expression`\n-  --> $DIR/rename.rs:54:9\n+  --> $DIR/rename.rs:58:9\n    |\n LL | #![warn(clippy::eval_order_dependence)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n-  --> $DIR/rename.rs:55:9\n+  --> $DIR/rename.rs:59:9\n    |\n LL | #![warn(clippy::identity_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n \n error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n-  --> $DIR/rename.rs:56:9\n+  --> $DIR/rename.rs:60:9\n    |\n LL | #![warn(clippy::if_let_some_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n \n error: lint `clippy::logic_bug` has been renamed to `clippy::overly_complex_bool_expr`\n-  --> $DIR/rename.rs:57:9\n+  --> $DIR/rename.rs:61:9\n    |\n LL | #![warn(clippy::logic_bug)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::overly_complex_bool_expr`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:58:9\n+  --> $DIR/rename.rs:62:9\n    |\n LL | #![warn(clippy::new_without_default_derive)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n-  --> $DIR/rename.rs:59:9\n+  --> $DIR/rename.rs:63:9\n    |\n LL | #![warn(clippy::option_and_then_some)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n \n error: lint `clippy::option_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:60:9\n+  --> $DIR/rename.rs:64:9\n    |\n LL | #![warn(clippy::option_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:61:9\n+  --> $DIR/rename.rs:65:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:62:9\n+  --> $DIR/rename.rs:66:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:63:9\n+  --> $DIR/rename.rs:67:9\n    |\n LL | #![warn(clippy::option_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::ref_in_deref` has been renamed to `clippy::needless_borrow`\n-  --> $DIR/rename.rs:64:9\n+  --> $DIR/rename.rs:68:9\n    |\n LL | #![warn(clippy::ref_in_deref)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::needless_borrow`\n \n error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:65:9\n+  --> $DIR/rename.rs:69:9\n    |\n LL | #![warn(clippy::result_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:66:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::result_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:67:9\n+  --> $DIR/rename.rs:71:9\n    |\n LL | #![warn(clippy::result_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n-  --> $DIR/rename.rs:68:9\n+  --> $DIR/rename.rs:72:9\n    |\n LL | #![warn(clippy::single_char_push_str)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n \n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:69:9\n+  --> $DIR/rename.rs:73:9\n    |\n LL | #![warn(clippy::stutter)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::to_string_in_display` has been renamed to `clippy::recursive_format_impl`\n-  --> $DIR/rename.rs:70:9\n+  --> $DIR/rename.rs:74:9\n    |\n LL | #![warn(clippy::to_string_in_display)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::recursive_format_impl`\n \n error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n-  --> $DIR/rename.rs:71:9\n+  --> $DIR/rename.rs:75:9\n    |\n LL | #![warn(clippy::zero_width_space)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n \n error: lint `clippy::clone_double_ref` has been renamed to `suspicious_double_ref_op`\n-  --> $DIR/rename.rs:72:9\n+  --> $DIR/rename.rs:76:9\n    |\n LL | #![warn(clippy::clone_double_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `suspicious_double_ref_op`\n \n error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n-  --> $DIR/rename.rs:73:9\n+  --> $DIR/rename.rs:77:9\n    |\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n+error: lint `clippy::drop_copy` has been renamed to `drop_copy`\n+  --> $DIR/rename.rs:78:9\n+   |\n+LL | #![warn(clippy::drop_copy)]\n+   |         ^^^^^^^^^^^^^^^^^ help: use the new name: `drop_copy`\n+\n+error: lint `clippy::drop_ref` has been renamed to `drop_ref`\n+  --> $DIR/rename.rs:79:9\n+   |\n+LL | #![warn(clippy::drop_ref)]\n+   |         ^^^^^^^^^^^^^^^^ help: use the new name: `drop_ref`\n+\n error: lint `clippy::for_loop_over_option` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:74:9\n+  --> $DIR/rename.rs:80:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loop_over_result` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:75:9\n+  --> $DIR/rename.rs:81:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loops_over_fallibles` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:76:9\n+  --> $DIR/rename.rs:82:9\n    |\n LL | #![warn(clippy::for_loops_over_fallibles)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n+error: lint `clippy::forget_copy` has been renamed to `forget_copy`\n+  --> $DIR/rename.rs:83:9\n+   |\n+LL | #![warn(clippy::forget_copy)]\n+   |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `forget_copy`\n+\n+error: lint `clippy::forget_ref` has been renamed to `forget_ref`\n+  --> $DIR/rename.rs:84:9\n+   |\n+LL | #![warn(clippy::forget_ref)]\n+   |         ^^^^^^^^^^^^^^^^^^ help: use the new name: `forget_ref`\n+\n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n-  --> $DIR/rename.rs:77:9\n+  --> $DIR/rename.rs:85:9\n    |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:78:9\n+  --> $DIR/rename.rs:86:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:79:9\n+  --> $DIR/rename.rs:87:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n error: lint `clippy::let_underscore_drop` has been renamed to `let_underscore_drop`\n-  --> $DIR/rename.rs:80:9\n+  --> $DIR/rename.rs:88:9\n    |\n LL | #![warn(clippy::let_underscore_drop)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `let_underscore_drop`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:81:9\n+  --> $DIR/rename.rs:89:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:82:9\n+  --> $DIR/rename.rs:90:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::positional_named_format_parameters` has been renamed to `named_arguments_used_positionally`\n-  --> $DIR/rename.rs:83:9\n+  --> $DIR/rename.rs:91:9\n    |\n LL | #![warn(clippy::positional_named_format_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `named_arguments_used_positionally`\n \n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:84:9\n+  --> $DIR/rename.rs:92:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:85:9\n+  --> $DIR/rename.rs:93:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:86:9\n+  --> $DIR/rename.rs:94:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n-error: aborting due to 43 previous errors\n+error: aborting due to 47 previous errors\n "}, {"sha": "49c0e4dc7eb101b2a5b1d8bf8329ea5d917b8c8c", "filename": "src/tools/clippy/tests/ui/unknown_clippy_lints.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.fixed?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -10,7 +10,7 @@\n #[warn(clippy::unnecessary_cast)]\n #[warn(clippy::useless_transmute)]\n // Shouldn't suggest rustc lint name(`dead_code`)\n-#[warn(clippy::drop_copy)]\n+#[warn(clippy::eq_op)]\n // Shouldn't suggest removed/deprecated clippy lint name(`unused_collect`)\n #[warn(clippy::unused_self)]\n // Shouldn't suggest renamed clippy lint name(`const_static_lifetime`)"}, {"sha": "584c428932fee8ead45dfc41e240fde385290519", "filename": "src/tools/clippy/tests/ui/unknown_clippy_lints.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funknown_clippy_lints.stderr?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -34,7 +34,7 @@ error: unknown lint: `clippy::dead_cod`\n   --> $DIR/unknown_clippy_lints.rs:13:8\n    |\n LL | #[warn(clippy::dead_cod)]\n-   |        ^^^^^^^^^^^^^^^^ help: did you mean: `clippy::drop_copy`\n+   |        ^^^^^^^^^^^^^^^^ help: did you mean: `clippy::eq_op`\n \n error: unknown lint: `clippy::unused_colle`\n   --> $DIR/unknown_clippy_lints.rs:15:8"}, {"sha": "bf4204c61fd726747b237fbc65581a3fdd3774f6", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_write2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,3 +1,5 @@\n+#![allow(drop_ref)]\n+\n fn main() {\n     let target = &mut 42;\n     let target2 = target as *mut _;"}, {"sha": "8a33005837528eceb16ea84d6e754a763404fe67", "filename": "src/tools/miri/tests/fail/uninit_buffer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,5 +1,7 @@\n //@error-in-other-file: memory is uninitialized at [0x4..0x10]\n \n+#![allow(drop_copy)]\n+\n use std::alloc::{alloc, dealloc, Layout};\n use std::slice::from_raw_parts;\n "}, {"sha": "e4d9404c2ba58ac781de37aadb03cfd290427702", "filename": "src/tools/miri/tests/fail/uninit_buffer_with_provenance.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -2,6 +2,8 @@\n //@normalize-stderr-test: \"a[0-9]+\" -> \"ALLOC\"\n #![feature(strict_provenance)]\n \n+#![allow(drop_copy)]\n+\n // Test printing allocations that contain single-byte provenance.\n \n use std::alloc::{alloc, dealloc, Layout};"}, {"sha": "9f743f0b56656070cd3d60431461777c947f646b", "filename": "src/tools/miri/tests/pass/stacked-borrows/zst-field-retagging-terminates.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fzst-field-retagging-terminates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fzst-field-retagging-terminates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fzst-field-retagging-terminates.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,5 +1,8 @@\n //@compile-flags: -Zmiri-retag-fields\n // Checks that the test does not run forever (which relies on a fast path).\n+\n+#![allow(drop_copy)]\n+\n fn main() {\n     let array = [(); usize::MAX];\n     drop(array); // Pass the array to a function, retagging its fields"}, {"sha": "7d6d26003f60efef13ad7154a62c50970f3cf56f", "filename": "tests/ui/associated-inherent-types/inference.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fassociated-inherent-types%2Finference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fassociated-inherent-types%2Finference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Finference.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -3,6 +3,7 @@\n \n #![feature(inherent_associated_types)]\n #![allow(incomplete_features)]\n+#![allow(drop_copy)]\n \n use std::convert::identity;\n "}, {"sha": "7375cb6d3a0dd9681c9432772737b7efb989d4e2", "filename": "tests/ui/async-await/multiple-lifetimes/partial-relation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fpartial-relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fpartial-relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fpartial-relation.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -4,7 +4,7 @@\n async fn lotsa_lifetimes<'a, 'b, 'c>(a: &'a u32, b: &'b u32, c: &'c u32) -> (&'a u32, &'b u32)\n     where 'b: 'a\n {\n-    drop((a, c));\n+    let _ = (a, c);\n     (b, b)\n }\n "}, {"sha": "9163c8ed6fb2c0711fbc11ad002730463b8702c0", "filename": "tests/ui/borrowck/borrowck-closures-slice-patterns-ok.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns-ok.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,6 +1,7 @@\n // Check that closure captures for slice patterns are inferred correctly\n \n #![allow(unused_variables)]\n+#![allow(drop_ref)]\n \n // run-pass\n "}, {"sha": "a88b323e0bf1ec2c33e140bf5ff122141e130fc3", "filename": "tests/ui/borrowck/borrowck-field-sensitivity-rpass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fborrowck%2Fborrowck-field-sensitivity-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fborrowck%2Fborrowck-field-sensitivity-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-field-sensitivity-rpass.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n #![allow(unused_mut)]\n #![allow(unused_variables)]\n+#![allow(drop_copy)]\n // pretty-expanded FIXME #23616\n \n struct A { a: isize, b: Box<isize> }"}, {"sha": "40c6bfeeb434b0bc12d63a7ccb825cf5fe08ef67", "filename": "tests/ui/borrowck/borrowck-use-mut-borrow-rpass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow-rpass.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n+#![allow(drop_copy)]\n+\n struct A { a: isize, b: Box<isize> }\n \n fn field_copy_after_field_borrow() {"}, {"sha": "bc7295a0826f15c1088450d44d22fba7e76213cb", "filename": "tests/ui/closures/2229_closure_analysis/migrations/issue-78720.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n #![warn(rust_2021_incompatible_closure_captures)]\n+#![allow(drop_ref, drop_copy)]\n \n fn main() {\n     if let a = \"\" {"}, {"sha": "2609e2951ec5487ba42ca5f1b4fb8e8bee87cc22", "filename": "tests/ui/closures/2229_closure_analysis/migrations/issue-78720.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.stderr?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,5 +1,5 @@\n warning: irrefutable `if let` pattern\n-  --> $DIR/issue-78720.rs:6:8\n+  --> $DIR/issue-78720.rs:7:8\n    |\n LL |     if let a = \"\" {\n    |        ^^^^^^^^^^"}, {"sha": "0f15f664e757e8e86e11d69f4cb968914b1e39db", "filename": "tests/ui/closures/2229_closure_analysis/optimization/edge_case_run_pass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Foptimization%2Fedge_case_run_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Foptimization%2Fedge_case_run_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Foptimization%2Fedge_case_run_pass.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -3,6 +3,7 @@\n \n #![allow(unused)]\n #![allow(dead_code)]\n+#![allow(drop_ref)]\n \n struct Int(i32);\n struct B<'a>(&'a i32);"}, {"sha": "a097424a02172cb2ba5597bf272ece9f000dc858", "filename": "tests/ui/closures/2229_closure_analysis/run_pass/drop_then_use_fake_reads.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdrop_then_use_fake_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdrop_then_use_fake_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdrop_then_use_fake_reads.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,6 +1,8 @@\n // edition:2021\n // check-pass\n+\n #![feature(rustc_attrs)]\n+#![allow(drop_ref)]\n \n fn main() {\n     let mut x = 1;"}, {"sha": "acdd6a54cf4ecd33ba5f6a737c6b52cbc1eaf380", "filename": "tests/ui/consts/const_forget.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fconsts%2Fconst_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fconsts%2Fconst_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_forget.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n \n+#![allow(forget_copy)]\n+\n use std::mem::forget;\n \n const _: () = forget(0i32);"}, {"sha": "b3821f467b617cdaff6f4a8c2a8340b7ac645049", "filename": "tests/ui/consts/issue-104155.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fconsts%2Fissue-104155.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fconsts%2Fissue-104155.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-104155.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,4 +1,7 @@\n // check-pass\n+\n+#![allow(forget_copy)]\n+\n const _: () = core::mem::forget(Box::<u32>::default);\n const _: () = core::mem::forget(|| Box::<u32>::default());\n "}, {"sha": "8d1d0b4fcdf02e8dfa5e5c0577308e989c29802c", "filename": "tests/ui/crate-leading-sep.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fcrate-leading-sep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fcrate-leading-sep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate-leading-sep.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n+#![allow(drop_copy)]\n+\n fn main() {\n     use ::std::mem;\n     mem::drop(2_usize);"}, {"sha": "659d35db6575ae6940d185a25aaab5bd8c29d109", "filename": "tests/ui/drop/repeat-drop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fdrop%2Frepeat-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fdrop%2Frepeat-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop%2Frepeat-drop.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n // needs-unwind\n \n+#![allow(drop_ref, drop_copy)]\n+\n static mut CHECK: usize = 0;\n \n struct DropChecker(usize);"}, {"sha": "0bc4feed329d36edf1a0cba9dd710ffb9c3ef846", "filename": "tests/ui/explicit/explicit-call-to-supertrait-dtor.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.fixed?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,4 +1,7 @@\n // run-rustfix\n+\n+#![allow(drop_ref)]\n+\n struct Foo {\n     x: isize\n }"}, {"sha": "26ae6698d669dfaefb6e8a9d12ee846f377a0356", "filename": "tests/ui/explicit/explicit-call-to-supertrait-dtor.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,4 +1,7 @@\n // run-rustfix\n+\n+#![allow(drop_ref)]\n+\n struct Foo {\n     x: isize\n }"}, {"sha": "c70671173491e7b589067dc52f6b5a653cbde6e8", "filename": "tests/ui/explicit/explicit-call-to-supertrait-dtor.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.stderr?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,5 +1,5 @@\n error[E0040]: explicit use of destructor method\n-  --> $DIR/explicit-call-to-supertrait-dtor.rs:19:14\n+  --> $DIR/explicit-call-to-supertrait-dtor.rs:22:14\n    |\n LL |         self.drop();\n    |         -----^^^^--"}, {"sha": "dce94c9eab27588696793927d037032ecf0c52d4", "filename": "tests/ui/feature-gates/feature-gate-unsafe_pin_internals.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_pin_internals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_pin_internals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_pin_internals.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -13,5 +13,4 @@ fn non_unsafe_pin_new_unchecked<T>(pointer: &mut T) -> Pin<&mut T> {\n fn main() {\n     let mut self_referential = PhantomPinned;\n     let _: Pin<&mut PhantomPinned> = non_unsafe_pin_new_unchecked(&mut self_referential);\n-    core::mem::forget(self_referential); // move and disable drop glue!\n }"}, {"sha": "cb46953dac3c8c9ab176eec03c278b805d7b07a6", "filename": "tests/ui/generator/drop-env.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fgenerator%2Fdrop-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fgenerator%2Fdrop-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fdrop-env.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -4,6 +4,7 @@\n //[nomiropt]compile-flags: -Z mir-opt-level=0\n \n #![feature(generators, generator_trait)]\n+#![allow(drop_copy)]\n \n use std::ops::Generator;\n use std::pin::Pin;"}, {"sha": "f7b8e198cc4bfbf798fc5e1cd8e282aef29f4a50", "filename": "tests/ui/generator/issue-57017.no_drop_tracking.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fgenerator%2Fissue-57017.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fgenerator%2Fissue-57017.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57017.no_drop_tracking.stderr?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,5 +1,5 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:31:25\n+  --> $DIR/issue-57017.rs:32:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -15,7 +15,7 @@ LL | |     );\n    |\n    = help: the trait `Sync` is not implemented for `copy::unsync::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:29:28\n+  --> $DIR/issue-57017.rs:30:28\n    |\n LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n    |                                          --------------------------------- has type `&copy::unsync::Client` which is not `Send`\n@@ -33,14 +33,14 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:51:19\n+  --> $DIR/issue-57017.rs:52:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:43:25\n+  --> $DIR/issue-57017.rs:44:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -54,9 +54,9 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n    |\n-   = help: within `[generator@$DIR/issue-57017.rs:40:21: 40:28]`, the trait `Send` is not implemented for `copy::unsend::Client`\n+   = help: within `[generator@$DIR/issue-57017.rs:41:21: 41:28]`, the trait `Send` is not implemented for `copy::unsend::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:41:28\n+  --> $DIR/issue-57017.rs:42:28\n    |\n LL |               let g = move || match drop($name::unsend::Client::default()) {\n    |                                          -------------------------------- has type `copy::unsend::Client` which is not `Send`\n@@ -74,14 +74,14 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:51:19\n+  --> $DIR/issue-57017.rs:52:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:31:25\n+  --> $DIR/issue-57017.rs:32:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -97,7 +97,7 @@ LL | |     );\n    |\n    = help: the trait `Sync` is not implemented for `derived_drop::unsync::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:29:28\n+  --> $DIR/issue-57017.rs:30:28\n    |\n LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n    |                                          --------------------------------- has type `&derived_drop::unsync::Client` which is not `Send`\n@@ -115,14 +115,14 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:51:19\n+  --> $DIR/issue-57017.rs:52:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:43:25\n+  --> $DIR/issue-57017.rs:44:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -136,9 +136,9 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n    |\n-   = help: within `[generator@$DIR/issue-57017.rs:40:21: 40:28]`, the trait `Send` is not implemented for `derived_drop::unsend::Client`\n+   = help: within `[generator@$DIR/issue-57017.rs:41:21: 41:28]`, the trait `Send` is not implemented for `derived_drop::unsend::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:41:28\n+  --> $DIR/issue-57017.rs:42:28\n    |\n LL |               let g = move || match drop($name::unsend::Client::default()) {\n    |                                          -------------------------------- has type `derived_drop::unsend::Client` which is not `Send`\n@@ -156,14 +156,14 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:51:19\n+  --> $DIR/issue-57017.rs:52:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:31:25\n+  --> $DIR/issue-57017.rs:32:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -179,7 +179,7 @@ LL | |     );\n    |\n    = help: the trait `Sync` is not implemented for `significant_drop::unsync::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:29:28\n+  --> $DIR/issue-57017.rs:30:28\n    |\n LL |               let g = move || match drop(&$name::unsync::Client::default()) {\n    |                                          --------------------------------- has type `&significant_drop::unsync::Client` which is not `Send`\n@@ -197,14 +197,14 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:51:19\n+  --> $DIR/issue-57017.rs:52:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-57017.rs:43:25\n+  --> $DIR/issue-57017.rs:44:25\n    |\n LL |               assert_send(g);\n    |                           ^ generator is not `Send`\n@@ -218,9 +218,9 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n    |\n-   = help: within `[generator@$DIR/issue-57017.rs:40:21: 40:28]`, the trait `Send` is not implemented for `significant_drop::unsend::Client`\n+   = help: within `[generator@$DIR/issue-57017.rs:41:21: 41:28]`, the trait `Send` is not implemented for `significant_drop::unsend::Client`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-57017.rs:41:28\n+  --> $DIR/issue-57017.rs:42:28\n    |\n LL |               let g = move || match drop($name::unsend::Client::default()) {\n    |                                          -------------------------------- has type `significant_drop::unsend::Client` which is not `Send`\n@@ -238,7 +238,7 @@ LL | |         }\n LL | |     );\n    | |_____- in this macro invocation\n note: required by a bound in `assert_send`\n-  --> $DIR/issue-57017.rs:51:19\n+  --> $DIR/issue-57017.rs:52:19\n    |\n LL | fn assert_send<T: Send>(_thing: T) {}\n    |                   ^^^^ required by this bound in `assert_send`"}, {"sha": "918d233bf4ee6436de8fb60304290379bebbe9a1", "filename": "tests/ui/generator/issue-57017.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fgenerator%2Fissue-57017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fgenerator%2Fissue-57017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57017.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -5,6 +5,7 @@\n // [drop_tracking_mir] build-pass\n \n #![feature(generators, negative_impls)]\n+#![allow(drop_ref, drop_copy)]\n \n macro_rules! type_combinations {\n     ("}, {"sha": "adba800e25aeb98687e892904c9edd8d90afdcbf", "filename": "tests/ui/generator/non-static-is-unpin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -3,6 +3,7 @@\n // run-pass\n \n #![feature(generators, generator_trait)]\n+#![allow(drop_copy)]\n \n use std::marker::{PhantomPinned, Unpin};\n "}, {"sha": "19618f8d0aa551187f6e08ae0b9ccaf0f71b577e", "filename": "tests/ui/generator/resume-arg-size.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fgenerator%2Fresume-arg-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fgenerator%2Fresume-arg-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fresume-arg-size.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,4 +1,5 @@\n #![feature(generators)]\n+#![allow(drop_copy)]\n \n // run-pass\n "}, {"sha": "214267372bf87aa739a2ddf1eb23a45401a5fffd", "filename": "tests/ui/hygiene/stdlib-prelude-from-opaque-late.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fhygiene%2Fstdlib-prelude-from-opaque-late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fhygiene%2Fstdlib-prelude-from-opaque-late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fstdlib-prelude-from-opaque-late.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,6 +1,7 @@\n // check-pass\n \n #![feature(decl_macro)]\n+#![allow(drop_copy)]\n \n macro mac() {\n     mod m {"}, {"sha": "8783682dec47d31fe96d3ee1ec163889fa5cfa20", "filename": "tests/ui/illegal-ufcs-drop.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fillegal-ufcs-drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fillegal-ufcs-drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fillegal-ufcs-drop.fixed?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,4 +1,7 @@\n // run-rustfix\n+\n+#![allow(drop_ref)]\n+\n struct Foo;\n \n impl Drop for Foo {"}, {"sha": "29774306ec6f513ffed8715aa96782bd61f3c4e6", "filename": "tests/ui/illegal-ufcs-drop.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fillegal-ufcs-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fillegal-ufcs-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fillegal-ufcs-drop.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,4 +1,7 @@\n // run-rustfix\n+\n+#![allow(drop_ref)]\n+\n struct Foo;\n \n impl Drop for Foo {"}, {"sha": "7a5c0612c07eb425290fdc1ea65c90af0bbc309e", "filename": "tests/ui/illegal-ufcs-drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fillegal-ufcs-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fillegal-ufcs-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fillegal-ufcs-drop.stderr?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,5 +1,5 @@\n error[E0040]: explicit use of destructor method\n-  --> $DIR/illegal-ufcs-drop.rs:9:5\n+  --> $DIR/illegal-ufcs-drop.rs:12:5\n    |\n LL |     Drop::drop(&mut Foo)\n    |     ^^^^^^^^^^"}, {"sha": "0adcd34505f0b93a95029852e91a846d1331cac2", "filename": "tests/ui/lint/drop_copy.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Flint%2Fdrop_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Flint%2Fdrop_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdrop_copy.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -0,0 +1,79 @@\n+// check-pass\n+\n+#![warn(drop_copy)]\n+\n+use std::mem::drop;\n+use std::vec::Vec;\n+\n+#[derive(Copy, Clone)]\n+struct SomeStruct;\n+\n+struct AnotherStruct {\n+    x: u8,\n+    y: u8,\n+    z: Vec<u8>,\n+}\n+\n+impl Clone for AnotherStruct {\n+    fn clone(&self) -> AnotherStruct {\n+        AnotherStruct {\n+            x: self.x,\n+            y: self.y,\n+            z: self.z.clone(),\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let s1 = SomeStruct {};\n+    let s2 = s1;\n+    let s3 = &s1;\n+    let mut s4 = s1;\n+    let ref s5 = s1;\n+\n+    drop(s1); //~ WARN calls to `std::mem::drop`\n+    drop(s2); //~ WARN calls to `std::mem::drop`\n+    drop(s3); //~ WARN calls to `std::mem::drop`\n+    drop(s4); //~ WARN calls to `std::mem::drop`\n+    drop(s5); //~ WARN calls to `std::mem::drop`\n+\n+    let a1 = AnotherStruct {\n+        x: 255,\n+        y: 0,\n+        z: vec![1, 2, 3],\n+    };\n+    let a2 = &a1;\n+    let mut a3 = a1.clone();\n+    let ref a4 = a1;\n+    let a5 = a1.clone();\n+\n+    drop(a2); //~ WARN calls to `std::mem::drop`\n+    drop(a3);\n+    drop(a4); //~ WARN calls to `std::mem::drop`\n+    drop(a5);\n+}\n+\n+#[allow(unused)]\n+#[allow(clippy::unit_cmp)]\n+fn issue9482(x: u8) {\n+    fn println_and<T>(t: T) -> T {\n+        println!(\"foo\");\n+        t\n+    }\n+\n+    match x {\n+        // Don't lint (copy type), we only care about side-effects\n+        0 => drop(println_and(12)),\n+        // Don't lint (no copy type), we only care about side-effects\n+        1 => drop(println_and(String::new())),\n+        2 => {\n+            // Lint, even if we only care about the side-effect, it's already in a block\n+            drop(println_and(13)); //~ WARN calls to `std::mem::drop`\n+        },\n+         // Lint, idiomatic use is only in body of `Arm`\n+        3 if drop(println_and(14)) == () => (), //~ WARN calls to `std::mem::drop`\n+        // Lint, not a fn/method call\n+        4 => drop(2),//~ WARN calls to `std::mem::drop`\n+        _ => (),\n+    }\n+}"}, {"sha": "db8e89ad295b96f73ceaeb823b754931d19ae965", "filename": "tests/ui/lint/drop_copy.stderr", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Flint%2Fdrop_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Flint%2Fdrop_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdrop_copy.stderr?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -0,0 +1,108 @@\n+warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n+  --> $DIR/drop_copy.rs:34:5\n+   |\n+LL |     drop(s1);\n+   |     ^^^^^--^\n+   |          |\n+   |          argument has type `SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+note: the lint level is defined here\n+  --> $DIR/drop_copy.rs:3:9\n+   |\n+LL | #![warn(drop_copy)]\n+   |         ^^^^^^^^^\n+\n+warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n+  --> $DIR/drop_copy.rs:35:5\n+   |\n+LL |     drop(s2);\n+   |     ^^^^^--^\n+   |          |\n+   |          argument has type `SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_copy.rs:36:5\n+   |\n+LL |     drop(s3);\n+   |     ^^^^^--^\n+   |          |\n+   |          argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+   = note: `#[warn(drop_ref)]` on by default\n+\n+warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n+  --> $DIR/drop_copy.rs:37:5\n+   |\n+LL |     drop(s4);\n+   |     ^^^^^--^\n+   |          |\n+   |          argument has type `SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_copy.rs:38:5\n+   |\n+LL |     drop(s5);\n+   |     ^^^^^--^\n+   |          |\n+   |          argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_copy.rs:50:5\n+   |\n+LL |     drop(a2);\n+   |     ^^^^^--^\n+   |          |\n+   |          argument has type `&AnotherStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_copy.rs:52:5\n+   |\n+LL |     drop(a4);\n+   |     ^^^^^--^\n+   |          |\n+   |          argument has type `&AnotherStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n+  --> $DIR/drop_copy.rs:71:13\n+   |\n+LL |             drop(println_and(13));\n+   |             ^^^^^---------------^\n+   |                  |\n+   |                  argument has type `i32`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n+  --> $DIR/drop_copy.rs:74:14\n+   |\n+LL |         3 if drop(println_and(14)) == () => (),\n+   |              ^^^^^---------------^\n+   |                   |\n+   |                   argument has type `i32`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n+  --> $DIR/drop_copy.rs:76:14\n+   |\n+LL |         4 => drop(2),\n+   |              ^^^^^-^\n+   |                   |\n+   |                   argument has type `i32`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: 10 warnings emitted\n+"}, {"sha": "db4f7569f6fa3ac64a68ce3b1f0fa056afba42db", "filename": "tests/ui/lint/drop_ref.rs", "status": "renamed", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Flint%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Flint%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdrop_ref.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,42 +1,39 @@\n-#![warn(clippy::drop_ref)]\n-#![allow(clippy::toplevel_ref_arg)]\n-#![allow(clippy::map_err_ignore)]\n-#![allow(clippy::unnecessary_wraps, clippy::drop_non_drop)]\n+// check-pass\n \n-use std::mem::drop;\n+#![warn(drop_ref)]\n \n struct SomeStruct;\n \n fn main() {\n-    drop(&SomeStruct);\n+    drop(&SomeStruct); //~ WARN calls to `std::mem::drop`\n \n     let mut owned1 = SomeStruct;\n-    drop(&owned1);\n-    drop(&&owned1);\n-    drop(&mut owned1);\n-    drop(owned1); //OK\n+    drop(&owned1); //~ WARN calls to `std::mem::drop`\n+    drop(&&owned1); //~ WARN calls to `std::mem::drop`\n+    drop(&mut owned1); //~ WARN calls to `std::mem::drop`\n+    drop(owned1);\n \n     let reference1 = &SomeStruct;\n-    drop(reference1);\n+    drop(reference1); //~ WARN calls to `std::mem::drop`\n \n     let reference2 = &mut SomeStruct;\n-    drop(reference2);\n+    drop(reference2); //~ WARN calls to `std::mem::drop`\n \n     let ref reference3 = SomeStruct;\n-    drop(reference3);\n+    drop(reference3); //~ WARN calls to `std::mem::drop`\n }\n \n #[allow(dead_code)]\n fn test_generic_fn_drop<T>(val: T) {\n-    drop(&val);\n-    drop(val); //OK\n+    drop(&val); //~ WARN calls to `std::mem::drop`\n+    drop(val);\n }\n \n #[allow(dead_code)]\n fn test_similarly_named_function() {\n     fn drop<T>(_val: T) {}\n     drop(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n-    std::mem::drop(&SomeStruct);\n+    std::mem::drop(&SomeStruct); //~ WARN calls to `std::mem::drop`\n }\n \n #[derive(Copy, Clone)]\n@@ -77,21 +74,26 @@ fn test_owl_result_2() -> Result<u8, ()> {\n #[allow(clippy::unit_cmp)]\n fn issue10122(x: u8) {\n     // This is a function which returns a reference and has a side-effect, which means\n-    // that calling drop() on the function is considered an idiomatic way of achieving the side-effect\n-    // in a match arm.\n+    // that calling drop() on the function is considered an idiomatic way of achieving\n+    // the side-effect in a match arm.\n     fn println_and<T>(t: &T) -> &T {\n         println!(\"foo\");\n         t\n     }\n \n     match x {\n-        0 => drop(println_and(&12)), // Don't lint (copy type), we only care about side-effects\n-        1 => drop(println_and(&String::new())), // Don't lint (no copy type), we only care about side-effects\n+        // Don't lint (copy type), we only care about side-effects\n+        0 => drop(println_and(&12)),\n+        // Don't lint (no copy type), we only care about side-effects\n+        1 => drop(println_and(&String::new())),\n         2 => {\n-            drop(println_and(&13)); // Lint, even if we only care about the side-effect, it's already in a block\n+            // Lint, even if we only care about the side-effect, it's already in a block\n+            drop(println_and(&13)); //~ WARN calls to `std::mem::drop`\n         },\n-        3 if drop(println_and(&14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n-        4 => drop(&2),                           // Lint, not a fn/method call\n+        // Lint, idiomatic use is only in body of `Arm`\n+        3 if drop(println_and(&14)) == () => (), //~ WARN calls to `std::mem::drop`\n+         // Lint, not a fn/method call\n+        4 => drop(&2), //~ WARN calls to `std::mem::drop`\n         _ => (),\n     }\n }", "previous_filename": "src/tools/clippy/tests/ui/drop_ref.rs"}, {"sha": "04c988fe99da479a0d7fceb99a3d9baed06e2804", "filename": "tests/ui/lint/drop_ref.stderr", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Flint%2Fdrop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Flint%2Fdrop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdrop_ref.stderr?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -0,0 +1,127 @@\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:8:5\n+   |\n+LL |     drop(&SomeStruct);\n+   |     ^^^^^-----------^\n+   |          |\n+   |          argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+note: the lint level is defined here\n+  --> $DIR/drop_ref.rs:3:9\n+   |\n+LL | #![warn(drop_ref)]\n+   |         ^^^^^^^^\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:11:5\n+   |\n+LL |     drop(&owned1);\n+   |     ^^^^^-------^\n+   |          |\n+   |          argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:12:5\n+   |\n+LL |     drop(&&owned1);\n+   |     ^^^^^--------^\n+   |          |\n+   |          argument has type `&&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:13:5\n+   |\n+LL |     drop(&mut owned1);\n+   |     ^^^^^-----------^\n+   |          |\n+   |          argument has type `&mut SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:17:5\n+   |\n+LL |     drop(reference1);\n+   |     ^^^^^----------^\n+   |          |\n+   |          argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:20:5\n+   |\n+LL |     drop(reference2);\n+   |     ^^^^^----------^\n+   |          |\n+   |          argument has type `&mut SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:23:5\n+   |\n+LL |     drop(reference3);\n+   |     ^^^^^----------^\n+   |          |\n+   |          argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:28:5\n+   |\n+LL |     drop(&val);\n+   |     ^^^^^----^\n+   |          |\n+   |          argument has type `&T`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:36:5\n+   |\n+LL |     std::mem::drop(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^-----------^\n+   |                    |\n+   |                    argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:91:13\n+   |\n+LL |             drop(println_and(&13));\n+   |             ^^^^^----------------^\n+   |                  |\n+   |                  argument has type `&i32`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:94:14\n+   |\n+LL |         3 if drop(println_and(&14)) == () => (),\n+   |              ^^^^^----------------^\n+   |                   |\n+   |                   argument has type `&i32`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n+  --> $DIR/drop_ref.rs:96:14\n+   |\n+LL |         4 => drop(&2),\n+   |              ^^^^^--^\n+   |                   |\n+   |                   argument has type `&i32`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: 12 warnings emitted\n+"}, {"sha": "a6b17b76971f27c8a8f49c4e7c11751a2c609e52", "filename": "tests/ui/lint/forget_copy.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Flint%2Fforget_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Flint%2Fforget_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforget_copy.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -0,0 +1,56 @@\n+// check-pass\n+\n+#![warn(forget_copy)]\n+\n+use std::mem::forget;\n+use std::vec::Vec;\n+\n+#[derive(Copy, Clone)]\n+struct SomeStruct;\n+\n+struct AnotherStruct {\n+    x: u8,\n+    y: u8,\n+    z: Vec<u8>,\n+}\n+\n+impl Clone for AnotherStruct {\n+    fn clone(&self) -> AnotherStruct {\n+        AnotherStruct {\n+            x: self.x,\n+            y: self.y,\n+            z: self.z.clone(),\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let s1 = SomeStruct {};\n+    let s2 = s1;\n+    let s3 = &s1;\n+    let mut s4 = s1;\n+    let ref s5 = s1;\n+\n+    forget(s1); //~ WARN calls to `std::mem::forget`\n+    forget(s2); //~ WARN calls to `std::mem::forget`\n+    forget(s3); //~ WARN calls to `std::mem::forget`\n+    forget(s4); //~ WARN calls to `std::mem::forget`\n+    forget(s5); //~ WARN calls to `std::mem::forget`\n+\n+    let a1 = AnotherStruct {\n+        x: 255,\n+        y: 0,\n+        z: vec![1, 2, 3],\n+    };\n+    let a2 = &a1;\n+    let mut a3 = a1.clone();\n+    let ref a4 = a1;\n+    let a5 = a1.clone();\n+\n+    forget(a2); //~ WARN calls to `std::mem::forget`\n+    let a3 = &a1;\n+    forget(a3); //~ WARN calls to `std::mem::forget`\n+    forget(a4); //~ WARN calls to `std::mem::forget`\n+    let a5 = a1.clone();\n+    forget(a5);\n+}"}, {"sha": "37bc8a8854ee7334a52e48fe53dda22b54058431", "filename": "tests/ui/lint/forget_copy.stderr", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Flint%2Fforget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Flint%2Fforget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforget_copy.stderr?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -0,0 +1,88 @@\n+warning: calls to `std::mem::forget` with a value that implements `Copy` does nothing\n+  --> $DIR/forget_copy.rs:34:5\n+   |\n+LL |     forget(s1);\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+note: the lint level is defined here\n+  --> $DIR/forget_copy.rs:3:9\n+   |\n+LL | #![warn(forget_copy)]\n+   |         ^^^^^^^^^^^\n+\n+warning: calls to `std::mem::forget` with a value that implements `Copy` does nothing\n+  --> $DIR/forget_copy.rs:35:5\n+   |\n+LL |     forget(s2);\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_copy.rs:36:5\n+   |\n+LL |     forget(s3);\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+   = note: `#[warn(forget_ref)]` on by default\n+\n+warning: calls to `std::mem::forget` with a value that implements `Copy` does nothing\n+  --> $DIR/forget_copy.rs:37:5\n+   |\n+LL |     forget(s4);\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_copy.rs:38:5\n+   |\n+LL |     forget(s5);\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_copy.rs:50:5\n+   |\n+LL |     forget(a2);\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `&AnotherStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_copy.rs:52:5\n+   |\n+LL |     forget(a3);\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `&AnotherStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_copy.rs:53:5\n+   |\n+LL |     forget(a4);\n+   |     ^^^^^^^--^\n+   |            |\n+   |            argument has type `&AnotherStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: 8 warnings emitted\n+"}, {"sha": "13f6d4be3d153b029c56648b09f3a115e439368e", "filename": "tests/ui/lint/forget_ref.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Flint%2Fforget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Flint%2Fforget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforget_ref.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+\n+#![warn(forget_ref)]\n+\n+use std::mem::forget;\n+\n+struct SomeStruct;\n+\n+fn main() {\n+    forget(&SomeStruct); //~ WARN calls to `std::mem::forget`\n+\n+    let mut owned = SomeStruct;\n+    forget(&owned); //~ WARN calls to `std::mem::forget`\n+    forget(&&owned); //~ WARN calls to `std::mem::forget`\n+    forget(&mut owned); //~ WARN calls to `std::mem::forget`\n+    forget(owned);\n+\n+    let reference1 = &SomeStruct;\n+    forget(&*reference1); //~ WARN calls to `std::mem::forget`\n+\n+    let reference2 = &mut SomeStruct;\n+    forget(reference2); //~ WARN calls to `std::mem::forget`\n+\n+    let ref reference3 = SomeStruct;\n+    forget(reference3); //~ WARN calls to `std::mem::forget`\n+}\n+\n+#[allow(dead_code)]\n+fn test_generic_fn_forget<T>(val: T) {\n+    forget(&val); //~ WARN calls to `std::mem::forget`\n+    forget(val);\n+}\n+\n+#[allow(dead_code)]\n+fn test_similarly_named_function() {\n+    fn forget<T>(_val: T) {}\n+    forget(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n+    std::mem::forget(&SomeStruct); //~ WARN calls to `std::mem::forget`\n+}"}, {"sha": "63fc779198007c0138baffa410d2083f41c98dd7", "filename": "tests/ui/lint/forget_ref.stderr", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Flint%2Fforget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Flint%2Fforget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforget_ref.stderr?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -0,0 +1,97 @@\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_ref.rs:10:5\n+   |\n+LL |     forget(&SomeStruct);\n+   |     ^^^^^^^-----------^\n+   |            |\n+   |            argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+note: the lint level is defined here\n+  --> $DIR/forget_ref.rs:3:9\n+   |\n+LL | #![warn(forget_ref)]\n+   |         ^^^^^^^^^^\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_ref.rs:13:5\n+   |\n+LL |     forget(&owned);\n+   |     ^^^^^^^------^\n+   |            |\n+   |            argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_ref.rs:14:5\n+   |\n+LL |     forget(&&owned);\n+   |     ^^^^^^^-------^\n+   |            |\n+   |            argument has type `&&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_ref.rs:15:5\n+   |\n+LL |     forget(&mut owned);\n+   |     ^^^^^^^----------^\n+   |            |\n+   |            argument has type `&mut SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_ref.rs:19:5\n+   |\n+LL |     forget(&*reference1);\n+   |     ^^^^^^^------------^\n+   |            |\n+   |            argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_ref.rs:22:5\n+   |\n+LL |     forget(reference2);\n+   |     ^^^^^^^----------^\n+   |            |\n+   |            argument has type `&mut SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_ref.rs:25:5\n+   |\n+LL |     forget(reference3);\n+   |     ^^^^^^^----------^\n+   |            |\n+   |            argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_ref.rs:30:5\n+   |\n+LL |     forget(&val);\n+   |     ^^^^^^^----^\n+   |            |\n+   |            argument has type `&T`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+  --> $DIR/forget_ref.rs:38:5\n+   |\n+LL |     std::mem::forget(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^^^-----------^\n+   |                      |\n+   |                      argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n+\n+warning: 9 warnings emitted\n+"}, {"sha": "8ef6ab1b6ff4500cfa57a598c20c350a3db373ab", "filename": "tests/ui/liveness/liveness-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fliveness%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fliveness%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliveness%2Fliveness-unused.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,7 +1,7 @@\n #![warn(unused)]\n #![deny(unused_variables)]\n #![deny(unused_assignments)]\n-#![allow(dead_code, non_camel_case_types, trivial_numeric_casts)]\n+#![allow(dead_code, non_camel_case_types, trivial_numeric_casts, drop_copy)]\n \n use std::ops::AddAssign;\n "}, {"sha": "c50dfdf0116a253f1c2e88b7b69a386179404953", "filename": "tests/ui/macros/parse-complex-macro-invoc-op.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fmacros%2Fparse-complex-macro-invoc-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fmacros%2Fparse-complex-macro-invoc-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fparse-complex-macro-invoc-op.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -4,6 +4,7 @@\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n #![allow(stable_features)]\n+#![allow(drop_copy)]\n \n // Test parsing binary operators after macro invocations.\n "}, {"sha": "e95a992d7804cc5ed0288f682ac5834360ceae60", "filename": "tests/ui/never_type/never-assign-dead-code.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -3,6 +3,7 @@\n // check-pass\n \n #![feature(never_type)]\n+#![allow(drop_copy)]\n #![warn(unused)]\n \n fn main() {"}, {"sha": "5660bde5c279bac4d6637e6481266c7f47c2faf5", "filename": "tests/ui/never_type/never-assign-dead-code.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,28 +1,28 @@\n warning: unreachable statement\n-  --> $DIR/never-assign-dead-code.rs:10:5\n+  --> $DIR/never-assign-dead-code.rs:11:5\n    |\n LL |     let x: ! = panic!(\"aah\");\n    |                ------------- any code following this expression is unreachable\n LL |     drop(x);\n    |     ^^^^^^^^ unreachable statement\n    |\n note: the lint level is defined here\n-  --> $DIR/never-assign-dead-code.rs:6:9\n+  --> $DIR/never-assign-dead-code.rs:7:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unreachable_code)]` implied by `#[warn(unused)]`\n \n warning: unreachable call\n-  --> $DIR/never-assign-dead-code.rs:10:5\n+  --> $DIR/never-assign-dead-code.rs:11:5\n    |\n LL |     drop(x);\n    |     ^^^^ - any code following this expression is unreachable\n    |     |\n    |     unreachable call\n \n warning: unused variable: `x`\n-  --> $DIR/never-assign-dead-code.rs:9:9\n+  --> $DIR/never-assign-dead-code.rs:10:9\n    |\n LL |     let x: ! = panic!(\"aah\");\n    |         ^ help: if this is intentional, prefix it with an underscore: `_x`"}, {"sha": "73ceaeeb875726cadd4834232314d8d9aabe2ee9", "filename": "tests/ui/nll/relate_tys/hr-fn-aba-as-aaa.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aba-as-aaa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aba-as-aaa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aba-as-aaa.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -5,6 +5,8 @@\n // check-pass\n // compile-flags:-Zno-leak-check\n \n+#![allow(drop_copy)]\n+\n fn make_it() -> for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 {\n     panic!()\n }"}, {"sha": "bff9058a507b1c08f7c73dda9c2434e56838e563", "filename": "tests/ui/nll/ty-outlives/projection-body.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-body.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -3,6 +3,8 @@\n //\n // check-pass\n \n+#![allow(drop_ref)]\n+\n trait MyTrait<'a> {\n     type Output;\n }"}, {"sha": "c138d99d303280d835635f208bcc84b0a5035fb4", "filename": "tests/ui/or-patterns/or-patterns-default-binding-modes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For-patterns%2For-patterns-default-binding-modes.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -3,6 +3,8 @@\n // check-pass\n \n #![allow(irrefutable_let_patterns)]\n+#![allow(drop_copy)]\n+#![allow(drop_ref)]\n \n fn main() {\n     // A regression test for a mistake we made at one point:"}, {"sha": "965204bf240e38b96df6e5adbd29c32c705d7b86", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-at-and-box-pass.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -2,6 +2,9 @@\n \n // Test `@` patterns combined with `box` patterns.\n \n+#![allow(drop_ref)]\n+#![allow(drop_copy)]\n+\n #![feature(box_patterns)]\n \n #[derive(Copy, Clone)]"}, {"sha": "3eb5d2cbf5466dadb5e0fa9a0af1413fe2049cd7", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-by-copy-bindings-in-at.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -2,6 +2,8 @@\n \n // Test `Copy` bindings in the rhs of `@` patterns.\n \n+#![allow(drop_copy)]\n+\n #[derive(Copy, Clone)]\n struct C;\n "}, {"sha": "0550238549ef3fd2ee55ad1e2deb1cc4496f3cd2", "filename": "tests/ui/pattern/move-ref-patterns/borrowck-move-ref-pattern-pass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern-pass.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n \n+#![allow(drop_ref)]\n+\n fn main() {}\n \n struct U;"}, {"sha": "788975d960aa932f1a9c6e34a11763119d334224", "filename": "tests/ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-pass.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n \n+#![allow(drop_ref)]\n+\n fn main() {\n     struct U;\n     fn accept_fn_once(_: impl FnOnce()) {}"}, {"sha": "c73268dc46a72c28e1e2c037cbc98a486b908fa7", "filename": "tests/ui/print_type_sizes/async.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fprint_type_sizes%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fprint_type_sizes%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fasync.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -3,6 +3,8 @@\n // build-pass\n // ignore-pass\n \n+#![allow(drop_copy)]\n+\n async fn wait() {}\n \n pub async fn test(arg: [u8; 8192]) {"}, {"sha": "873def9031aaa863914304112d7ebb33cf4f2bcb", "filename": "tests/ui/print_type_sizes/async.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fprint_type_sizes%2Fasync.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fprint_type_sizes%2Fasync.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fasync.stdout?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,4 +1,4 @@\n-print-type-size type: `[async fn body@$DIR/async.rs:8:36: 11:2]`: 16386 bytes, alignment: 1 bytes\n+print-type-size type: `[async fn body@$DIR/async.rs:10:36: 13:2]`: 16386 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Unresumed`: 8192 bytes\n print-type-size         upvar `.arg`: 8192 bytes\n@@ -16,14 +16,14 @@ print-type-size type: `std::mem::MaybeUninit<[u8; 8192]>`: 8192 bytes, alignment\n print-type-size     variant `MaybeUninit`: 8192 bytes\n print-type-size         field `.uninit`: 0 bytes\n print-type-size         field `.value`: 8192 bytes\n-print-type-size type: `[async fn body@$DIR/async.rs:6:17: 6:19]`: 1 bytes, alignment: 1 bytes\n+print-type-size type: `[async fn body@$DIR/async.rs:8:17: 8:19]`: 1 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Unresumed`: 0 bytes\n print-type-size     variant `Returned`: 0 bytes\n print-type-size     variant `Panicked`: 0 bytes\n-print-type-size type: `std::mem::ManuallyDrop<[async fn body@$DIR/async.rs:6:17: 6:19]>`: 1 bytes, alignment: 1 bytes\n+print-type-size type: `std::mem::ManuallyDrop<[async fn body@$DIR/async.rs:8:17: 8:19]>`: 1 bytes, alignment: 1 bytes\n print-type-size     field `.value`: 1 bytes\n-print-type-size type: `std::mem::MaybeUninit<[async fn body@$DIR/async.rs:6:17: 6:19]>`: 1 bytes, alignment: 1 bytes\n+print-type-size type: `std::mem::MaybeUninit<[async fn body@$DIR/async.rs:8:17: 8:19]>`: 1 bytes, alignment: 1 bytes\n print-type-size     variant `MaybeUninit`: 1 bytes\n print-type-size         field `.uninit`: 0 bytes\n print-type-size         field `.value`: 1 bytes"}, {"sha": "a77a03f0a8ae43a67ce80f266b39be081a19a14e", "filename": "tests/ui/print_type_sizes/generator_discr_placement.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -6,6 +6,7 @@\n \n // Avoid emitting panic handlers, like the rest of these tests...\n #![feature(generators)]\n+#![allow(drop_copy)]\n \n pub fn foo() {\n     let a = || {"}, {"sha": "fe0022cf5f4c9863fddef8081684819562bd808b", "filename": "tests/ui/print_type_sizes/generator_discr_placement.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.stdout?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,4 +1,4 @@\n-print-type-size type: `[generator@$DIR/generator_discr_placement.rs:11:13: 11:15]`: 8 bytes, alignment: 4 bytes\n+print-type-size type: `[generator@$DIR/generator_discr_placement.rs:12:13: 12:15]`: 8 bytes, alignment: 4 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Unresumed`: 0 bytes\n print-type-size     variant `Suspend0`: 7 bytes"}, {"sha": "5ae5ebb450e84332bf012ddcb400d4312d20c8d3", "filename": "tests/ui/regions/type-param-outlives-reempty-issue-74429-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429-2.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -55,11 +55,11 @@ where\n }\n \n pub fn x<T: Copy>(a: Array<T>) {\n-    // drop just avoids a must_use warning\n-    drop((0..1).filter(|_| true));\n+    // _ just avoids a must_use warning\n+    let _ = (0..1).filter(|_| true);\n     let y = a.index_axis();\n     a.axis_iter().for_each(|_| {\n-        drop(y);\n+        let _ = y;\n     });\n }\n "}, {"sha": "af2bb09805ac6ccd50d6d362d78dfe48f66823e6", "filename": "tests/ui/regions/type-param-outlives-reempty-issue-74429.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -3,6 +3,8 @@\n \n // check-pass\n \n+#![allow(drop_copy)]\n+\n use std::marker::PhantomData;\n \n fn apply<T, F: FnOnce(T)>(_: T, _: F) {}"}, {"sha": "8f45b989f136381be65713d69d90dc27a0237513", "filename": "tests/ui/rfc-2008-non-exhaustive/borrowck-exhaustive.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-exhaustive.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -3,6 +3,8 @@\n \n // check-pass\n \n+#![allow(drop_ref)]\n+\n // aux-build:monovariants.rs\n extern crate monovariants;\n "}, {"sha": "4c1562790d5f474dc9b2034d9ff5c8598399a8ff", "filename": "tests/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -4,6 +4,8 @@\n // Tests ensuring that `dbg!(expr)` has the expected run-time behavior.\n // as well as some compile time properties we expect.\n \n+#![allow(drop_copy)]\n+\n #[derive(Copy, Clone, Debug)]\n struct Unit;\n "}, {"sha": "a20a6062c13b6ff011bd1702c57a843bdf5c10cf", "filename": "tests/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.run.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,28 +1,28 @@\n-[$DIR/dbg-macro-expected-behavior.rs:20] Unit = Unit\n-[$DIR/dbg-macro-expected-behavior.rs:21] a = Unit\n-[$DIR/dbg-macro-expected-behavior.rs:27] Point { x: 42, y: 24 } = Point {\n+[$DIR/dbg-macro-expected-behavior.rs:22] Unit = Unit\n+[$DIR/dbg-macro-expected-behavior.rs:23] a = Unit\n+[$DIR/dbg-macro-expected-behavior.rs:29] Point { x: 42, y: 24 } = Point {\n     x: 42,\n     y: 24,\n }\n-[$DIR/dbg-macro-expected-behavior.rs:28] b = Point {\n+[$DIR/dbg-macro-expected-behavior.rs:30] b = Point {\n     x: 42,\n     y: 24,\n }\n-[$DIR/dbg-macro-expected-behavior.rs:36]\n-[$DIR/dbg-macro-expected-behavior.rs:40] &a = NoCopy(\n+[$DIR/dbg-macro-expected-behavior.rs:38]\n+[$DIR/dbg-macro-expected-behavior.rs:42] &a = NoCopy(\n     1337,\n )\n-[$DIR/dbg-macro-expected-behavior.rs:40] dbg!(& a) = NoCopy(\n+[$DIR/dbg-macro-expected-behavior.rs:42] dbg!(& a) = NoCopy(\n     1337,\n )\n-[$DIR/dbg-macro-expected-behavior.rs:45] f(&42) = 42\n+[$DIR/dbg-macro-expected-behavior.rs:47] f(&42) = 42\n before\n-[$DIR/dbg-macro-expected-behavior.rs:50] { foo += 1; eprintln!(\"before\"); 7331 } = 7331\n-[$DIR/dbg-macro-expected-behavior.rs:58] (\"Yeah\",) = (\n+[$DIR/dbg-macro-expected-behavior.rs:52] { foo += 1; eprintln!(\"before\"); 7331 } = 7331\n+[$DIR/dbg-macro-expected-behavior.rs:60] (\"Yeah\",) = (\n     \"Yeah\",\n )\n-[$DIR/dbg-macro-expected-behavior.rs:61] 1 = 1\n-[$DIR/dbg-macro-expected-behavior.rs:61] 2 = 2\n-[$DIR/dbg-macro-expected-behavior.rs:65] 1u8 = 1\n-[$DIR/dbg-macro-expected-behavior.rs:65] 2u32 = 2\n-[$DIR/dbg-macro-expected-behavior.rs:65] \"Yeah\" = \"Yeah\"\n+[$DIR/dbg-macro-expected-behavior.rs:63] 1 = 1\n+[$DIR/dbg-macro-expected-behavior.rs:63] 2 = 2\n+[$DIR/dbg-macro-expected-behavior.rs:67] 1u8 = 1\n+[$DIR/dbg-macro-expected-behavior.rs:67] 2u32 = 2\n+[$DIR/dbg-macro-expected-behavior.rs:67] \"Yeah\" = \"Yeah\""}, {"sha": "4ed4d610025fae05bc9c0af062d6f56ad6f004da", "filename": "tests/ui/rust-2018/remove-extern-crate.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fremove-extern-crate.fixed?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -5,6 +5,7 @@\n // compile-flags:--extern remove_extern_crate\n \n #![warn(rust_2018_idioms)]\n+#![allow(drop_copy)]\n \n  //~ WARNING unused extern crate\n // Shouldn't suggest changing to `use`, as `another_name`"}, {"sha": "5dafdb2b7b7742ce6db03c3fdce88d1e7f3a1952", "filename": "tests/ui/rust-2018/remove-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fremove-extern-crate.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -5,6 +5,7 @@\n // compile-flags:--extern remove_extern_crate\n \n #![warn(rust_2018_idioms)]\n+#![allow(drop_copy)]\n \n extern crate core; //~ WARNING unused extern crate\n // Shouldn't suggest changing to `use`, as `another_name`"}, {"sha": "f752cac8ed63064a4ae9929823c9f5c664468d28", "filename": "tests/ui/rust-2018/remove-extern-crate.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Frust-2018%2Fremove-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Frust-2018%2Fremove-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fremove-extern-crate.stderr?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,5 +1,5 @@\n warning: unused extern crate\n-  --> $DIR/remove-extern-crate.rs:9:1\n+  --> $DIR/remove-extern-crate.rs:10:1\n    |\n LL | extern crate core;\n    | ^^^^^^^^^^^^^^^^^^ help: remove it\n@@ -12,7 +12,7 @@ LL | #![warn(rust_2018_idioms)]\n    = note: `#[warn(unused_extern_crates)]` implied by `#[warn(rust_2018_idioms)]`\n \n warning: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/remove-extern-crate.rs:33:5\n+  --> $DIR/remove-extern-crate.rs:34:5\n    |\n LL |     extern crate core;\n    |     ^^^^^^^^^^^^^^^^^^\n@@ -23,7 +23,7 @@ LL |     use core;\n    |     ~~~\n \n warning: `extern crate` is not idiomatic in the new edition\n-  --> $DIR/remove-extern-crate.rs:43:5\n+  --> $DIR/remove-extern-crate.rs:44:5\n    |\n LL |     pub extern crate core;\n    |     ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f59bcf0b8033902518a1f093a5e1d1c89e16d140", "filename": "tests/ui/statics/issue-91050-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fstatics%2Fissue-91050-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Fstatics%2Fissue-91050-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatics%2Fissue-91050-1.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -12,6 +12,8 @@\n //\n // In regular builds, the bad cast was UB, like \"Invalid LLVMRustVisibility value!\"\n \n+#![allow(drop_copy)]\n+\n pub mod before {\n     #[no_mangle]\n     pub static GLOBAL1: [u8; 1] = [1];"}, {"sha": "558303c2e40bc90e2585dcdc79abd882cfc90dd2", "filename": "tests/ui/traits/copy-guessing.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Ftraits%2Fcopy-guessing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Ftraits%2Fcopy-guessing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fcopy-guessing.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,5 +1,8 @@\n // run-pass\n+\n #![allow(dead_code)]\n+#![allow(drop_copy)]\n+\n // \"guessing\" in trait selection can affect `copy_or_move`. Check that this\n // is correctly handled. I am not sure what is the \"correct\" behaviour,\n // but we should at least not ICE."}, {"sha": "256ce992eefc49c8eea35719e0e2168eb893a846", "filename": "tests/ui/traits/impl-evaluation-order.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Ftraits%2Fimpl-evaluation-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Ftraits%2Fimpl-evaluation-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fimpl-evaluation-order.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -6,6 +6,8 @@\n \n // check-pass\n \n+#![allow(drop_copy)]\n+\n trait A {\n     type B;\n }"}, {"sha": "4aefdd6bb073579e1495c8955246a221ec9ed6e9", "filename": "tests/ui/traits/new-solver/auto-with-drop_tracking_mir.fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.fail.stderr?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `impl Future<Output = ()>` cannot be sent between threads safely\n-  --> $DIR/auto-with-drop_tracking_mir.rs:24:13\n+  --> $DIR/auto-with-drop_tracking_mir.rs:25:13\n    |\n LL |     is_send(foo());\n    |     ------- ^^^^^ `impl Future<Output = ()>` cannot be sent between threads safely\n@@ -8,7 +8,7 @@ LL |     is_send(foo());\n    |\n    = help: the trait `Send` is not implemented for `impl Future<Output = ()>`\n note: required by a bound in `is_send`\n-  --> $DIR/auto-with-drop_tracking_mir.rs:23:24\n+  --> $DIR/auto-with-drop_tracking_mir.rs:24:24\n    |\n LL |     fn is_send(_: impl Send) {}\n    |                        ^^^^ required by this bound in `is_send`"}, {"sha": "f115e1433182cad6088b4635ea98551ced874aa0", "filename": "tests/ui/traits/new-solver/auto-with-drop_tracking_mir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -14,6 +14,7 @@ async fn foo() {\n     #[cfg(fail)]\n     let x = &NotSync;\n     bar().await;\n+    #[allow(drop_ref)]\n     drop(x);\n }\n "}, {"sha": "c6c11a1a1de182e6eefe20a21ddec36e8c45c30a", "filename": "tests/ui/traits/new-solver/temporary-ambiguity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Ftraits%2Fnew-solver%2Ftemporary-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Ftraits%2Fnew-solver%2Ftemporary-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Ftemporary-ambiguity.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     let w = Wrapper(x);\n     needs_foo(w);\n     x = 1;\n-    drop(x);\n+    let _ = x;\n }"}, {"sha": "6ed7667115a0db8b3fe86b86ee42f8c14a2e6329", "filename": "tests/ui/trivial-bounds/trivial-bounds-inconsistent-copy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.rs?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,6 +1,8 @@\n // check-pass\n // Check tautalogically false `Copy` bounds\n+\n #![feature(trivial_bounds)]\n+#![allow(drop_ref, drop_copy)]\n \n fn copy_string(t: String) -> String where String: Copy { //~ WARNING trivial_bounds\n     is_copy(&t);"}, {"sha": "deeb352a2a851f5fa1d13cb9629fcd9042319a94", "filename": "tests/ui/trivial-bounds/trivial-bounds-inconsistent-copy.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/077fc26f0acfa54e9c580534616c17ffc279a9d4/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.stderr?ref=077fc26f0acfa54e9c580534616c17ffc279a9d4", "patch": "@@ -1,25 +1,25 @@\n warning: trait bound String: Copy does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent-copy.rs:5:51\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:7:51\n    |\n LL | fn copy_string(t: String) -> String where String: Copy {\n    |                                                   ^^^^\n    |\n    = note: `#[warn(trivial_bounds)]` on by default\n \n warning: trait bound String: Copy does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent-copy.rs:12:56\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:14:56\n    |\n LL | fn copy_out_string(t: &String) -> String where String: Copy {\n    |                                                        ^^^^\n \n warning: trait bound String: Copy does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent-copy.rs:16:55\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:18:55\n    |\n LL | fn copy_string_with_param<T>(x: String) where String: Copy {\n    |                                                       ^^^^\n \n warning: trait bound for<'b> &'b mut i32: Copy does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent-copy.rs:22:76\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:24:76\n    |\n LL | fn copy_mut<'a>(t: &&'a mut i32) -> &'a mut i32 where for<'b> &'b mut i32: Copy {\n    |                                                                            ^^^^"}]}