{"sha": "1b39c0a602ad316b8eebd2dd50ae14e45d47dd13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMzljMGE2MDJhZDMxNmI4ZWViZDJkZDUwYWUxNGU0NWQ0N2RkMTM=", "commit": {"author": {"name": "nwin", "email": "nwin@users.noreply.github.com", "date": "2016-10-31T18:43:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-31T18:43:50Z"}, "message": "Remove remark about poor code style\n\nThe current wording [seems to be confusing](https://www.reddit.com/r/rust/comments/5aat03/why_is_implementing_traits_on_primitive_types/). As an explanation when and why this could be considered as poor style would go beyond of the scope of this chapter I suggest to remove this remark.", "tree": {"sha": "1041a4ae00ab40328c8a86063a84818b050ee976", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1041a4ae00ab40328c8a86063a84818b050ee976"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b39c0a602ad316b8eebd2dd50ae14e45d47dd13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b39c0a602ad316b8eebd2dd50ae14e45d47dd13", "html_url": "https://github.com/rust-lang/rust/commit/1b39c0a602ad316b8eebd2dd50ae14e45d47dd13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b39c0a602ad316b8eebd2dd50ae14e45d47dd13/comments", "author": {"login": "nwin", "id": 949560, "node_id": "MDQ6VXNlcjk0OTU2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/949560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nwin", "html_url": "https://github.com/nwin", "followers_url": "https://api.github.com/users/nwin/followers", "following_url": "https://api.github.com/users/nwin/following{/other_user}", "gists_url": "https://api.github.com/users/nwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/nwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nwin/subscriptions", "organizations_url": "https://api.github.com/users/nwin/orgs", "repos_url": "https://api.github.com/users/nwin/repos", "events_url": "https://api.github.com/users/nwin/events{/privacy}", "received_events_url": "https://api.github.com/users/nwin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01", "html_url": "https://github.com/rust-lang/rust/commit/bf5b824c1cb1fa5ec9b060f9b552cf7fd7465f01"}], "stats": {"total": 22, "additions": 1, "deletions": 21}, "files": [{"sha": "18e7f07f722e4508eb9ba220622be29a2ed7c3bb", "filename": "src/doc/book/traits.md", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1b39c0a602ad316b8eebd2dd50ae14e45d47dd13/src%2Fdoc%2Fbook%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b39c0a602ad316b8eebd2dd50ae14e45d47dd13/src%2Fdoc%2Fbook%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftraits.md?ref=1b39c0a602ad316b8eebd2dd50ae14e45d47dd13", "patch": "@@ -243,27 +243,7 @@ to know more about [operator traits][operators-and-overloading].\n # Rules for implementing traits\n \n So far, we\u2019ve only added trait implementations to structs, but you can\n-implement a trait for any type. So technically, we _could_ implement `HasArea`\n-for `i32`:\n-\n-```rust\n-trait HasArea {\n-    fn area(&self) -> f64;\n-}\n-\n-impl HasArea for i32 {\n-    fn area(&self) -> f64 {\n-        println!(\"this is silly\");\n-\n-        *self as f64\n-    }\n-}\n-\n-5.area();\n-```\n-\n-It is considered poor style to implement methods on such primitive types, even\n-though it is possible.\n+implement a trait for any type such as `i32`.\n \n This may seem like the Wild West, but there are two restrictions around\n implementing traits that prevent this from getting out of hand. The first is"}]}