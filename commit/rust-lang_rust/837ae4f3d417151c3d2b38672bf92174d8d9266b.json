{"sha": "837ae4f3d417151c3d2b38672bf92174d8d9266b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzN2FlNGYzZDQxNzE1MWMzZDJiMzg2NzJiZjkyMTc0ZDhkOTI2NmI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-08-12T05:11:46Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-08-12T05:42:22Z"}, "message": "rollup merge of #27678: alexcrichton/snapshots\n\n* Lots of core prelude imports removed\n* Makefile support for MSVC env vars and Rust crates removed\n* Makefile support for morestack removed", "tree": {"sha": "042a42462a85d298668f0974ab97e2a652414434", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/042a42462a85d298668f0974ab97e2a652414434"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/837ae4f3d417151c3d2b38672bf92174d8d9266b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/837ae4f3d417151c3d2b38672bf92174d8d9266b", "html_url": "https://github.com/rust-lang/rust/commit/837ae4f3d417151c3d2b38672bf92174d8d9266b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/837ae4f3d417151c3d2b38672bf92174d8d9266b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbef8893f798452874f15374992804c8184c32c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbef8893f798452874f15374992804c8184c32c5", "html_url": "https://github.com/rust-lang/rust/commit/bbef8893f798452874f15374992804c8184c32c5"}, {"sha": "938099a7ebccbad2a2cad58d71df316d5ccd512c", "url": "https://api.github.com/repos/rust-lang/rust/commits/938099a7ebccbad2a2cad58d71df316d5ccd512c", "html_url": "https://github.com/rust-lang/rust/commit/938099a7ebccbad2a2cad58d71df316d5ccd512c"}], "stats": {"total": 508, "additions": 25, "deletions": 483}, "files": [{"sha": "4c8f110373483078803bf29283d38a43d3cbfec7", "filename": "mk/cfg/i686-pc-windows-msvc.mk", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/mk%2Fcfg%2Fi686-pc-windows-msvc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/mk%2Fcfg%2Fi686-pc-windows-msvc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-pc-windows-msvc.mk?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -22,8 +22,3 @@ CFG_LDPATH_i686-pc-windows-msvc :=\n CFG_RUN_i686-pc-windows-msvc=$(2)\n CFG_RUN_TARG_i686-pc-windows-msvc=$(call CFG_RUN_i686-pc-windows-msvc,,$(2))\n CFG_GNU_TRIPLE_i686-pc-windows-msvc := i686-pc-win32\n-\n-# All windows nightiles are currently a GNU triple, so this MSVC triple is not\n-# bootstrapping from itself. This is relevant during stage0, and other parts of\n-# the build system take this into account.\n-BOOTSTRAP_FROM_i686-pc-windows-msvc := i686-pc-windows-gnu"}, {"sha": "65cf28f6852b24c822652345237acb3058b05038", "filename": "mk/cfg/x86_64-pc-windows-msvc.mk", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -22,8 +22,3 @@ CFG_LDPATH_x86_64-pc-windows-msvc :=\n CFG_RUN_x86_64-pc-windows-msvc=$(2)\n CFG_RUN_TARG_x86_64-pc-windows-msvc=$(call CFG_RUN_x86_64-pc-windows-msvc,,$(2))\n CFG_GNU_TRIPLE_x86_64-pc-windows-msvc := x86_64-pc-win32\n-\n-# All windows nightiles are currently a GNU triple, so this MSVC triple is not\n-# bootstrapping from itself. This is relevant during stage0, and other parts of\n-# the build system take this into account.\n-BOOTSTRAP_FROM_x86_64-pc-windows-msvc := x86_64-pc-windows-gnu"}, {"sha": "b70926388caa423dd2591bf01e214170006d5382", "filename": "mk/main.mk", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -400,11 +400,6 @@ TSREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(foreach obj,$$(INSTALLED_OBJECTS_$(2)),\\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(obj))\n \n-ifeq ($(1),0)\n-TSREQ$(1)_T_$(2)_H_$(3) += \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(call CFG_STATIC_LIB_NAME_$(2),morestack)\n-endif\n-\n # Prerequisites for a working stageN compiler and libraries, for a specific\n # target\n SREQ$(1)_T_$(2)_H_$(3) = \\"}, {"sha": "fcb6a5b50d3cebc049cca98288e20035460dc08e", "filename": "mk/platform.mk", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -237,64 +237,3 @@ endef\n \n $(foreach target,$(CFG_TARGET), \\\n   $(eval $(call CFG_MAKE_TOOLCHAIN,$(target))))\n-\n-# There are more comments about this available in the target specification for\n-# Windows MSVC in the compiler, but the gist of it is that we use `llvm-ar.exe`\n-# instead of `lib.exe` for assembling archives, so we need to inject this custom\n-# dependency here.\n-#\n-# FIXME(stage0): remove this and all other relevant support in the makefiles\n-#                after a snapshot is made\n-define ADD_LLVM_AR_TO_MSVC_DEPS\n-ifeq ($$(findstring msvc,$(1)),msvc)\n-NATIVE_TOOL_DEPS_core_T_$(1) += llvm-ar.exe\n-INSTALLED_BINS_$(1) += llvm-ar.exe\n-endif\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call ADD_LLVM_AR_TO_MSVC_DEPS,$(target))))\n-\n-# When working with MSVC on windows, each DLL needs to explicitly declare its\n-# interface to the outside world through some means. The options for doing so\n-# include:\n-#\n-# 1. A custom attribute on each function itself\n-# 2. A linker argument saying what to export\n-# 3. A file which lists all symbols that need to be exported\n-#\n-# The Rust compiler takes care (1) for us for all Rust code by annotating all\n-# public-facing functions with dllexport, but we have a few native dependencies\n-# which need to cross the DLL boundary. The most important of these dependencies\n-# is LLVM which is linked into `rustc_llvm.dll` but primarily used from\n-# `rustc_trans.dll`. This means that many of LLVM's C API functions need to be\n-# exposed from `rustc_llvm.dll` to be forwarded over the boundary.\n-#\n-# Unfortunately, at this time, LLVM does not handle this sort of exportation on\n-# Windows for us, so we're forced to do it ourselves if we want it (which seems\n-# like the path of least resistance right now). To do this we generate a `.DEF`\n-# file [1] which we then custom-pass to the linker when building the rustc_llvm\n-# crate. This DEF file list all symbols that are exported from\n-# `src/librustc_llvm/lib.rs` and is generated by a small python script.\n-#\n-# Fun times!\n-#\n-# [1]: https://msdn.microsoft.com/en-us/library/28d6s79h.aspx\n-#\n-# FIXME(stage0): remove this macro and the usage below (and the commments above)\n-# \t         when a new snapshot is available. Also remove the\n-# \t         RUSTFLAGS$(1)_.._T_ variable in mk/target.mk along with\n-# \t         CUSTOM_DEPS (as they were only added for this)\n-define ADD_RUSTC_LLVM_DEF_TO_MSVC\n-ifeq ($$(findstring msvc,$(1)),msvc)\n-RUSTFLAGS0_rustc_llvm_T_$(1) += -C link-args=\"-DEF:$(1)/rt/rustc_llvm.def\"\n-CUSTOM_DEPS0_rustc_llvm_T_$(1) += $(1)/rt/rustc_llvm.def\n-\n-$(1)/rt/rustc_llvm.def: $$(S)src/etc/mklldef.py $$(S)src/librustc_llvm/lib.rs\n-\t$$(CFG_PYTHON) $$^ $$@ rustc_llvm-$$(CFG_FILENAME_EXTRA)\n-endif\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call ADD_RUSTC_LLVM_DEF_TO_MSVC,$(target))))\n-"}, {"sha": "b8f345699f45e6f19210f89cf16f76a0bb368561", "filename": "mk/rt.mk", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -35,8 +35,7 @@\n # that's per-target so you're allowed to conditionally add files based on the\n # target.\n ################################################################################\n-NATIVE_LIBS := rust_builtin hoedown miniz \\\n-\t\trust_test_helpers morestack\n+NATIVE_LIBS := rust_builtin hoedown miniz rust_test_helpers\n \n # $(1) is the target triple\n define NATIVE_LIBRARIES\n@@ -54,7 +53,6 @@ NATIVE_DEPS_miniz_$(1) = miniz.c\n NATIVE_DEPS_rust_builtin_$(1) := rust_builtin.c \\\n \t\t\trust_android_dummy.c\n NATIVE_DEPS_rust_test_helpers_$(1) := rust_test_helpers.c\n-NATIVE_DEPS_morestack_$(1) := empty.c\n \n ################################################################################\n # You shouldn't find it that necessary to edit anything below this line."}, {"sha": "aae66c45b57e3c2fbb9074de39b7749ecc79c1dc", "filename": "mk/target.mk", "status": "modified", "additions": 1, "deletions": 92, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -37,10 +37,7 @@ CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4) := \\\n \t\t$$(foreach dep,$$(NATIVE_DEPS_$(4)), \\\n \t\t  $$(RT_OUTPUT_DIR_$(2))/$$(call CFG_STATIC_LIB_NAME_$(2),$$(dep))) \\\n \t\t$$(foreach dep,$$(NATIVE_DEPS_$(4)_T_$(2)), \\\n-\t\t  $$(RT_OUTPUT_DIR_$(2))/$$(dep)) \\\n-\t\t$$(foreach dep,$$(NATIVE_TOOL_DEPS_$(4)_T_$(2)), \\\n-\t\t  $$(TBIN$(1)_T_$(3)_H_$(3))/$$(dep)) \\\n-\t\t$$(CUSTOM_DEPS$(1)_$(4)_T_$(2))\n+\t\t  $$(RT_OUTPUT_DIR_$(2))/$$(dep))\n endef\n \n $(foreach host,$(CFG_HOST), \\\n@@ -142,21 +139,13 @@ SNAPSHOT_RUSTC_POST_CLEANUP=$(HBIN0_H_$(CFG_BUILD))/rustc$(X_$(CFG_BUILD))\n \n define TARGET_HOST_RULES\n \n-$$(TBIN$(1)_T_$(2)_H_$(3))/:\n-\tmkdir -p $$@\n-\n $$(TLIB$(1)_T_$(2)_H_$(3))/:\n \tmkdir -p $$@\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/%: $$(RT_OUTPUT_DIR_$(2))/% \\\n \t    | $$(TLIB$(1)_T_$(2)_H_$(3))/ $$(SNAPSHOT_RUSTC_POST_CLEANUP)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n-\n-$$(TBIN$(1)_T_$(2)_H_$(3))/%: $$(CFG_LLVM_INST_DIR_$(2))/bin/% \\\n-\t    | $$(TBIN$(1)_T_$(2)_H_$(3))/ $$(SNAPSHOT_RUSTC_POST_CLEANUP)\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n endef\n \n $(foreach source,$(CFG_HOST), \\\n@@ -180,83 +169,3 @@ $(foreach host,$(CFG_HOST), \\\n   $(foreach stage,$(STAGES), \\\n    $(foreach tool,$(TOOLS), \\\n     $(eval $(call TARGET_TOOL,$(stage),$(target),$(host),$(tool)))))))\n-\n-# We have some triples which are bootstrapped from other triples, and this means\n-# that we need to fixup some of the native tools that a triple depends on.\n-#\n-# For example, MSVC requires the llvm-ar.exe executable to manage archives, but\n-# it bootstraps from the GNU Windows triple. This means that the compiler will\n-# add this directory to PATH when executing new processes:\n-#\n-# \t$SYSROOT/rustlib/x86_64-pc-windows-gnu/bin\n-#\n-# Unfortunately, however, the GNU triple is not known about in stage0, so the\n-# tools are actually located in:\n-#\n-# \t$SYSROOT/rustlib/x86_64-pc-windows-msvc/bin\n-#\n-# To remedy this problem, the rules below copy all native tool dependencies into\n-# the bootstrap triple's location in stage 0 so the bootstrap compiler can find\n-# the right sets of tools. Later stages (1+) will have the right host triple for\n-# the compiler, so there's no need to worry there.\n-#\n-# $(1) - stage\n-# $(2) - triple that's being used as host/target\n-# $(3) - triple snapshot is built for\n-# $(4) - crate\n-# $(5) - tool\n-#\n-# FIXME(stage0): remove this and all other relevant support in the makefiles\n-#                after a snapshot is made\n-define MOVE_TOOLS_TO_SNAPSHOT_HOST_DIR\n-ifneq (,$(3))\n-$$(TLIB$(1)_T_$(2)_H_$(2))/stamp.$(4): $$(HLIB$(1)_H_$(2))/rustlib/$(3)/bin/$(5)\n-\n-$$(HLIB$(1)_H_$(2))/rustlib/$(3)/bin/$(5): $$(TBIN$(1)_T_$(2)_H_$(2))/$(5)\n-\tmkdir -p $$(@D)\n-\tcp $$< $$@\n-endif\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n- $(foreach crate,$(CRATES), \\\n-  $(foreach tool,$(NATIVE_TOOL_DEPS_$(crate)_T_$(target)), \\\n-   $(eval $(call MOVE_TOOLS_TO_SNAPSHOT_HOST_DIR,0,$(target),$(BOOTSTRAP_FROM_$(target)),$(crate),$(tool))))))\n-\n-# For MSVC targets we need to set up some environment variables for the linker\n-# to work correctly when building Rust crates. These two variables are:\n-#\n-# - LIB tells the linker the default search path for finding system libraries,\n-#   for example kernel32.dll\n-# - PATH needs to be modified to ensure that MSVC's link.exe is first in the\n-#   path instead of MinGW's /usr/bin/link.exe (entirely unrelated)\n-#\n-# The values for these variables are detected by the configure script.\n-#\n-# FIXME(stage0): remove this and all other relevant support in the makefiles\n-#                after a snapshot is made\n-define SETUP_LIB_MSVC_ENV_VARS\n-ifeq ($$(findstring msvc,$(2)),msvc)\n-$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4): \\\n-\texport LIB := $$(CFG_MSVC_LIB_PATH_$$(HOST_$(2)))\n-$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4): \\\n-\texport PATH := $$(CFG_MSVC_BINDIR_$$(HOST_$(2))):$$(PATH)\n-endif\n-endef\n-define SETUP_TOOL_MSVC_ENV_VARS\n-ifeq ($$(findstring msvc,$(2)),msvc)\n-$$(TBIN$(1)_T_$(2)_H_$(3))/$(4)$$(X_$(2)): \\\n-\texport LIB := $$(CFG_MSVC_LIB_PATH_$$(HOST_$(2)))\n-$$(TBIN$(1)_T_$(2)_H_$(3))/$(4)$$(X_$(2)): \\\n-\texport PATH := $$(CFG_MSVC_BINDIR_$$(HOST_$(2))):$$(PATH)\n-endif\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach crate,$(CRATES), \\\n-   $(eval $(call SETUP_LIB_MSVC_ENV_VARS,0,$(target),$(host),$(crate))))))\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach tool,$(TOOLS), \\\n-   $(eval $(call SETUP_TOOL_MSVC_ENV_VARS,0,$(target),$(host),$(tool))))))"}, {"sha": "ccf8784e2a7e6206126ac17d830b6827599e41d5", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -71,9 +71,6 @@\n \n use boxed::Box;\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::atomic;\n use core::atomic::Ordering::{Relaxed, Release, Acquire, SeqCst};\n use core::fmt;"}, {"sha": "f31bb60ed97ee5418b2203ecf97e06179e8d63c0", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -53,9 +53,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use heap;\n use raw_vec::RawVec;\n "}, {"sha": "6551011e81d3e346b591c4e8328a91a31ccaace0", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -92,7 +92,6 @@\n #![feature(unsize)]\n #![feature(core_slice_ext)]\n #![feature(core_str_ext)]\n-#![cfg_attr(stage0, feature(core, core_prelude))]\n \n #![cfg_attr(test, feature(test, alloc, rustc_private, box_raw))]\n #![cfg_attr(all(not(feature = \"external_funcs\"), not(feature = \"external_crate\")),\n@@ -101,8 +100,6 @@\n #[cfg(all(not(feature = \"external_funcs\"), not(feature = \"external_crate\")))]\n extern crate libc;\n \n-#[cfg(stage0)] #[macro_use] extern crate core;\n-\n // Allow testing this library\n \n #[cfg(test)] #[macro_use] extern crate std;"}, {"sha": "620ceaa346b706b9858131c4324d0fa15b8f70b8", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -150,9 +150,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n #[cfg(not(test))]\n use boxed::Box;\n #[cfg(test)]"}, {"sha": "c46025b33351c21748de801b3fa6e611cdb32544", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -151,9 +151,6 @@\n #![allow(missing_docs)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::iter::{FromIterator};\n use core::mem::swap;\n use core::ptr;"}, {"sha": "e1ae4c51e3affb642e0bf782ae62fc8c7c6e95ce", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -86,9 +86,6 @@\n //! println!(\"There are {} primes below {}\", num_primes, max_prime);\n //! ```\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::cmp::Ordering;\n use core::cmp;\n use core::fmt;"}, {"sha": "a5c6ebaa5ae4442ced83fd32c55869a0192d2582", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -17,9 +17,6 @@\n \n use self::Entry::*;\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::cmp::Ordering;\n use core::fmt::Debug;\n use core::hash::{Hash, Hasher};\n@@ -531,8 +528,6 @@ enum Continuation<A, B> {\n /// to nodes. By using this module much better safety guarantees can be made, and more search\n /// boilerplate gets cut out.\n mod stack {\n-    #[cfg(stage0)]\n-    use core::prelude::v1::*;\n     use core::marker;\n     use core::mem;\n     use core::ops::{Deref, DerefMut};"}, {"sha": "7b544078d5b2fc5068ab7ad65edbc2e90ff41d90", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -16,9 +16,6 @@ pub use self::SearchResult::*;\n pub use self::ForceResult::*;\n pub use self::TraversalItem::*;\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::cmp::Ordering::{Greater, Less, Equal};\n use core::intrinsics::arith_offset;\n use core::iter::Zip;"}, {"sha": "3f545e7b2a16d704e3cfdcc0b4d4b2c7969fef14", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -11,9 +11,6 @@\n // This is pretty much entirely stolen from TreeSet, since BTreeMap has an identical interface\n // to TreeMap\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::cmp::Ordering::{self, Less, Greater, Equal};\n use core::fmt::Debug;\n use core::fmt;"}, {"sha": "246c213a19b2dd9d75fa72ff5cdba42374864600", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -17,9 +17,6 @@\n             reason = \"matches collection reform specification, \\\n                       waiting for dust to settle\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::marker;\n use core::fmt;\n use core::iter::{FromIterator};"}, {"sha": "740fba73c173c2242971bdeaf12e1618007673c3", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -59,13 +59,10 @@\n #![feature(utf8_error)]\n #![cfg_attr(test, feature(rand, test))]\n #![cfg_attr(not(test), feature(str_words))]\n-#![cfg_attr(stage0, feature(core, core_prelude))]\n \n #![feature(no_std)]\n #![no_std]\n \n-#[cfg(stage0)] #[macro_use] extern crate core;\n-\n extern crate rustc_unicode;\n extern crate alloc;\n "}, {"sha": "50b5db758c1ed4eddc768d4733b8ea39b3cfbff9", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -21,9 +21,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use alloc::boxed::Box;\n use core::cmp::Ordering;\n use core::fmt;"}, {"sha": "aa41c57b92712c8ac4832a3c92f46fa271c29572", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -12,9 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::fmt;\n use core::hash;\n use core::iter::FromIterator;"}, {"sha": "45b0dea493f4518f68454964dbfdb0dbeb0a5ab7", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -58,9 +58,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use alloc::raw_vec::RawVec;\n use alloc::boxed::Box;\n use alloc::heap::EMPTY;"}, {"sha": "f189d7b80d98115f8747bc6729d5c5d9f27fdcb1", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -18,9 +18,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::cmp::Ordering;\n use core::fmt;\n use core::iter::{self, repeat, FromIterator, RandomAccessIterator};"}, {"sha": "93f8db23e565a3aef7f61acf1bc469f1d64aa32d", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -20,9 +20,6 @@\n \n use self::Entry::*;\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::cmp::{max, Ordering};\n use core::fmt;\n use core::hash::{Hash, Hasher};"}, {"sha": "64a56549d0ff02f8247379717b899e98dddec2ad", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 10, "deletions": 34, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -60,28 +60,26 @@\n        html_playground_url = \"https://play.rust-lang.org/\")]\n #![doc(test(no_crate_inject))]\n \n-#![cfg_attr(stage0, feature(no_std))]\n-#![cfg_attr(stage0, no_std)]\n-#![cfg_attr(not(stage0), feature(no_core))]\n-#![cfg_attr(not(stage0), no_core)]\n+#![no_core]\n #![allow(raw_pointer_derive)]\n #![deny(missing_docs)]\n \n+#![feature(allow_internal_unstable)]\n #![feature(associated_type_defaults)]\n+#![feature(concat_idents)]\n+#![feature(const_fn)]\n+#![feature(custom_attribute)]\n+#![feature(fundamental)]\n #![feature(intrinsics)]\n #![feature(lang_items)]\n+#![feature(no_core)]\n #![feature(on_unimplemented)]\n+#![feature(optin_builtin_traits)]\n+#![feature(reflect)]\n+#![feature(rustc_attrs)]\n #![feature(simd)]\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n-#![feature(rustc_attrs)]\n-#![feature(optin_builtin_traits)]\n-#![feature(fundamental)]\n-#![feature(concat_idents)]\n-#![feature(reflect)]\n-#![feature(custom_attribute)]\n-#![feature(const_fn)]\n-#![feature(allow_internal_unstable)]\n \n #[macro_use]\n mod macros;\n@@ -159,25 +157,3 @@ pub mod fmt;\n \n // note: does not need to be public\n mod tuple;\n-\n-// A curious inner-module that's not exported that contains the bindings of core\n-// so that compiler-expanded references to `core::$foo` can be resolved within\n-// core itself.\n-//\n-// Note that no crate-defined macros require this module due to the existence of\n-// the `$crate` meta variable, only those expansions defined in the compiler\n-// require this. This is because the compiler doesn't currently know that it's\n-// compiling the core library when it's compiling this library, so it expands\n-// all references to `::core::$foo`\n-#[doc(hidden)]\n-#[cfg(stage0)]\n-mod core {\n-    pub use intrinsics;     // derive(PartialOrd)\n-    pub use fmt;            // format_args!\n-    pub use clone;          // derive(Clone)\n-    pub use cmp;            // derive(Ord)\n-    pub use hash;           // derive(Hash)\n-    pub use marker;         // derive(Copy)\n-    pub use option;         // iterator protocol\n-    pub use iter;           // iterator protocol\n-}"}, {"sha": "2718694490c4de24ded3a6e0408adb9515ee6401", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -15,7 +15,6 @@\n #![cfg_attr(not(feature = \"cargo-build\"), unstable(feature = \"libc\",\n                                                    reason = \"use `libc` from crates.io\"))]\n #![cfg_attr(not(feature = \"cargo-build\"), feature(staged_api, no_std))]\n-#![cfg_attr(all(not(feature = \"cargo-build\"), stage0), feature(core))]\n #![cfg_attr(not(feature = \"cargo-build\"), staged_api)]\n #![cfg_attr(not(feature = \"cargo-build\"), no_std)]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -79,7 +78,6 @@\n #![allow(bad_style, raw_pointer_derive)]\n #![cfg_attr(target_os = \"nacl\", allow(unused_imports))]\n #[cfg(feature = \"cargo-build\")] extern crate std as core;\n-#[cfg(all(stage0, not(feature = \"cargo-build\")))] extern crate core;\n \n #[cfg(test)] extern crate std;\n #[cfg(test)] extern crate test;"}, {"sha": "db81ff5c0700dc4e1c176ec36e4a0dc5e36a6505", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -10,9 +10,6 @@\n \n //! The ChaCha random number generator.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use {Rng, SeedableRng, Rand};\n \n const KEY_WORDS    : usize =  8; // 8 words for the 256-bit key"}, {"sha": "5defe174cf5d7f02e2bd189552f691ad6c7ba72d", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -17,9 +17,6 @@\n //! internally. The `IndependentSample` trait is for generating values\n //! that do not need to record state.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::num::Float;\n use core::marker::PhantomData;\n "}, {"sha": "e196708368ad35bdf763baf9c0549881458b5a71", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -12,9 +12,6 @@\n \n // this is surprisingly complicated to be both generic & correct\n \n-#[cfg(stage0)]\n-use core::prelude::v1::PartialOrd;\n-\n use Rng;\n use distributions::{Sample, IndependentSample};\n "}, {"sha": "f51483cc11f464b7b732f19fb19b191bf17da518", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -12,9 +12,6 @@\n \n #![allow(non_camel_case_types)]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::slice;\n use core::iter::repeat;\n use core::num::Wrapping as w;"}, {"sha": "56104064a7291d5e35cd3d3875382ff776b3b85e", "filename": "src/librand/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -34,20 +34,14 @@\n #![feature(num_bits_bytes)]\n #![feature(staged_api)]\n #![feature(step_by)]\n-#![cfg_attr(stage0, feature(core, core_prelude))]\n \n #![cfg_attr(test, feature(test, rand, rustc_private, iter_order))]\n \n #![allow(deprecated)]\n \n-#[cfg(stage0)] #[macro_use] extern crate core;\n-\n #[cfg(test)] #[macro_use] extern crate std;\n #[cfg(test)] #[macro_use] extern crate log;\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::marker::PhantomData;\n \n pub use isaac::{IsaacRng, Isaac64Rng};"}, {"sha": "04093db4b6ff79fd2b0eda113c744f3729e94481", "filename": "src/librand/rand_impls.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibrand%2Frand_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibrand%2Frand_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Frand_impls.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -10,9 +10,6 @@\n \n //! The implementations of `Rand` for the built-in types.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::char;\n use core::isize;\n use core::usize;"}, {"sha": "99fe2bb5ab507f530f2eb1f8ae0d6082ab5e5f97", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -11,9 +11,6 @@\n //! A wrapper around another RNG that reseeds it after it\n //! generates a certain number of random bytes.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use {Rng, SeedableRng};\n \n /// How many bytes of entropy the underling RNG is allowed to generate"}, {"sha": "15661283aac2993db711a4a0ed18c081883fad86", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -31,7 +31,7 @@\n #![feature(link_args)]\n #![feature(staged_api)]\n #![feature(vec_push_all)]\n-#![cfg_attr(not(stage0), feature(linked_from))]\n+#![feature(linked_from)]\n \n extern crate libc;\n #[macro_use] #[no_link] extern crate rustc_bitflags;\n@@ -599,7 +599,7 @@ pub mod debuginfo {\n // automatically updated whenever LLVM is updated to include an up-to-date\n // set of the libraries we need to link to LLVM for.\n #[link(name = \"rustllvm\", kind = \"static\")]\n-#[cfg_attr(not(stage0), linked_from = \"rustllvm\")] // not quite true but good enough\n+#[linked_from = \"rustllvm\"] // not quite true but good enough\n extern {\n     /* Create and destroy contexts. */\n     pub fn LLVMContextCreate() -> ContextRef;"}, {"sha": "3ff405602640363d630c0883c82620ff69eb164f", "filename": "src/librustc_unicode/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibrustc_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibrustc_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Flib.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -41,9 +41,6 @@\n #![feature(lang_items)]\n #![feature(no_std)]\n #![feature(staged_api)]\n-#![cfg_attr(stage0, feature(core, core_prelude))]\n-\n-#[cfg(stage0)] extern crate core;\n \n mod normalize;\n mod tables;"}, {"sha": "a938312248f478b6fdfe6e862b51d49037e84cc3", "filename": "src/librustc_unicode/u_str.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibrustc_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibrustc_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fu_str.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -14,8 +14,6 @@\n //! unicode parts of the CharExt trait.\n \n use self::GraphemeState::*;\n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n \n use core::char;\n use core::cmp;"}, {"sha": "8831830f799fe1ebe46138e6ca342f16119cbe3f", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -32,9 +32,6 @@\n #![unstable(feature = \"os_str\",\n             reason = \"recently added as part of path/io reform\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use borrow::{Borrow, Cow, ToOwned};\n use ffi::CString;\n use fmt::{self, Debug};"}, {"sha": "ba32ffc49d4428b0dd69fbb506ef054f49d6fe8c", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -17,9 +17,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use fmt;\n use ffi::OsString;\n use io::{self, SeekFrom, Seek, Read, Write};"}, {"sha": "9590f0b7aa72693eb6e4d21b99b3733cb01ad5c9", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -292,9 +292,6 @@ impl Write for Cursor<Vec<u8>> {\n \n #[cfg(test)]\n mod tests {\n-    #[cfg(stage0)]\n-    use core::prelude::v1::*;\n-\n     use io::prelude::*;\n     use io::{Cursor, SeekFrom};\n     use vec::Vec;"}, {"sha": "a5c8ba335c1505852fa3aff2a4145fea47454d27", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use boxed::Box;\n use cmp;\n use io::{self, SeekFrom, Read, Write, Seek, BufRead, Error, ErrorKind};"}, {"sha": "07a9548224aca8c8508166c03eddd896ce8a8e72", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -10,9 +10,6 @@\n \n #![allow(missing_copy_implementations)]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use io::{self, Read, Write, ErrorKind, BufRead};\n \n /// Copies the entire contents of a reader into a writer."}, {"sha": "6041c2d3d47f33beb597935b8ecd993b8a70c789", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -249,16 +249,13 @@\n #![cfg_attr(test, feature(float_from_str_radix, range_inclusive, float_extras, hash_default))]\n #![cfg_attr(test, feature(test, rustc_private, float_consts))]\n #![cfg_attr(target_env = \"msvc\", feature(link_args))]\n-#![cfg_attr(stage0, feature(core, core_prelude))]\n \n // Don't link to std. We are std.\n #![no_std]\n \n #![allow(trivial_casts)]\n #![deny(missing_docs)]\n \n-#[cfg(stage0)] #[macro_use] extern crate core;\n-\n #[cfg(test)] extern crate test;\n #[cfg(test)] #[macro_use] extern crate log;\n "}, {"sha": "1e1ffc19900c5ed9953e541ee6157a61a7b6c474", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -11,9 +11,6 @@\n #![unstable(feature = \"udp\", reason = \"remaining functions have not been \\\n                                        scrutinized enough to be stabilized\")]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use fmt;\n use io::{self, Error, ErrorKind};\n use net::{ToSocketAddrs, SocketAddr, IpAddr};"}, {"sha": "6a8026a807e726925ad17f6145181e9f043a1512", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -15,9 +15,6 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use core::num;\n #[cfg(not(target_env = \"msvc\"))]\n use intrinsics;"}, {"sha": "e757ff90fddf71e8a31056c9621bb8b3d3c30d3c", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -15,9 +15,6 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use core::num;\n use intrinsics;\n use libc::c_int;"}, {"sha": "d1ef763e0f620715222ba1adce043feed52aca21", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -43,8 +43,6 @@ pub fn test_num<T>(ten: T, two: T) where\n \n #[cfg(test)]\n mod tests {\n-    #[cfg(stage0)]\n-    use core::prelude::v1::*;\n     use super::*;\n     use i8;\n     use i16;"}, {"sha": "489438973b302dbc8e5e6b663249f5437d76e1c2", "filename": "src/libstd/path.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -98,9 +98,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use ascii::*;\n use borrow::{Borrow, IntoCow, ToOwned, Cow};\n use cmp;\n@@ -135,8 +132,6 @@ use self::platform::{is_sep_byte, is_verbatim_sep, MAIN_SEP_STR, parse_prefix};\n #[cfg(unix)]\n mod platform {\n     use super::Prefix;\n-    #[cfg(stage0)]\n-    use core::prelude::v1::*;\n     use ffi::OsStr;\n \n     #[inline]\n@@ -159,8 +154,6 @@ mod platform {\n \n #[cfg(windows)]\n mod platform {\n-    #[cfg(stage0)]\n-    use core::prelude::v1::*;\n     use ascii::*;\n \n     use super::{os_str_as_u8_slice, u8_slice_as_os_str, Prefix};\n@@ -1749,8 +1742,6 @@ impl AsRef<Path> for PathBuf {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    #[cfg(stage0)]\n-    use core::prelude::v1::*;\n     use string::{ToString, String};\n     use vec::Vec;\n "}, {"sha": "ee46ec5c9c4660005169d00cd145697dd5e19c20", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -57,9 +57,6 @@\n \n #![unstable(feature = \"rand\")]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use cell::RefCell;\n use io;\n use mem;"}, {"sha": "51d5af056cb7f838f89b4a5962de5ed3dc830ada", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -15,7 +15,6 @@ pub use self::imp::OsRng;\n \n #[cfg(all(unix, not(target_os = \"ios\")))]\n mod imp {\n-    #[cfg(stage0)] use prelude::v1::*;\n     use self::OsRngInner::*;\n \n     use fs::File;\n@@ -249,9 +248,6 @@ mod imp {\n \n #[cfg(windows)]\n mod imp {\n-    #[cfg(stage0)]\n-    use prelude::v1::*;\n-\n     use io;\n     use mem;\n     use rand::Rng;"}, {"sha": "36adf44cd3a3ea2913dbc72980fc97167641b677", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -12,7 +12,6 @@\n \n #![allow(dead_code)]\n \n-#[cfg(stage0)] use prelude::v1::*;\n use io::prelude::*;\n use rand::Rng;\n "}, {"sha": "cf8bac31057f78131b4ac49015890e4f2816e9a8", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -19,8 +19,6 @@\n //!\n //! FIXME #7756: Would be nice for this to not exist.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n use vec::Vec;\n \n /// One-time global initialization.\n@@ -141,8 +139,6 @@ mod imp {\n           target_os = \"ios\",\n           target_os = \"windows\"))]\n mod imp {\n-    #[cfg(stage0)]\n-    use core::prelude::v1::*;\n     use vec::Vec;\n \n     pub unsafe fn init(_argc: isize, _argv: *const *const u8) {"}, {"sha": "9e7ed89bae1b7d1c03439da5cc54305de4b24339", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -12,9 +12,6 @@\n \n #![allow(non_camel_case_types)]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use env;\n use sync::atomic::{self, Ordering};\n "}, {"sha": "506b8260278a87416af983f3ddc92dec0a25ced7", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -39,8 +39,6 @@\n                         outside in crates.io first\")]\n #![allow(deprecated)]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n use core::mem::replace;\n \n use boxed::Box;"}, {"sha": "c37c0405bbb3851e647b78c61412422866da97d2", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -265,9 +265,6 @@\n // And now that you've seen all the races that I found and attempted to fix,\n // here's the code for you to find some more!\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use sync::Arc;\n use error;\n use fmt;"}, {"sha": "e4eba3d3d2065960deeed37350f19c298d954612", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -40,9 +40,6 @@\n \n pub use self::PopResult::*;\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use alloc::boxed::Box;\n use core::ptr;\n use core::cell::UnsafeCell;"}, {"sha": "cb930280964b3260fbd7cb6fbc922ac3db2cb256", "filename": "src/libstd/sync/mpsc/oneshot.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -37,9 +37,6 @@ pub use self::UpgradeResult::*;\n pub use self::SelectionResult::*;\n use self::MyUpgrade::*;\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use sync::mpsc::Receiver;\n use sync::mpsc::blocking::{self, SignalToken};\n use core::mem;"}, {"sha": "56d903fed3b564f3afd468a44d866640eb1bf27a", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -57,9 +57,6 @@\n                       but no guarantees beyond this are being made\")]\n \n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::cell::{Cell, UnsafeCell};\n use core::marker;\n use core::ptr;"}, {"sha": "a3779931c7bd294291a8d75d43e487a5ca24f89b", "filename": "src/libstd/sync/mpsc/shared.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -20,9 +20,6 @@\n \n pub use self::Failure::*;\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::cmp;\n use core::isize;\n "}, {"sha": "819f75c006b3112584f6d09f5f8a883f07d37a16", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -33,9 +33,6 @@\n //! concurrently between two threads. This data structure is safe to use and\n //! enforces the semantics that there is one pusher and one popper.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use alloc::boxed::Box;\n use core::ptr;\n use core::cell::UnsafeCell;"}, {"sha": "a9da1b12f7d926ab2be1989c79b9e438a3286abc", "filename": "src/libstd/sync/mpsc/stream.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -22,9 +22,6 @@ pub use self::UpgradeResult::*;\n pub use self::SelectionResult::*;\n use self::Message::*;\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::cmp;\n use core::isize;\n use thread;"}, {"sha": "84d758cf9b3b6684244f5dcee7584dc119efcb01", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -33,9 +33,6 @@\n /// of a synchronous channel. There are a few branches for the unbuffered case,\n /// but they're mostly just relevant to blocking senders.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n pub use self::Failure::*;\n use self::Blocker::*;\n "}, {"sha": "a91e1321149a3fa8eb210f6e120f2385ea68edda", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -13,9 +13,6 @@\n //! This primitive is meant to be used to run one-time initialization. An\n //! example use case would be for initializing an FFI library.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use isize;\n use sync::atomic::{AtomicIsize, Ordering};\n use sync::StaticMutex;"}, {"sha": "7f56afc9e1ff2d2695e36d785b6222e7c754fd1b", "filename": "src/libstd/sys/common/backtrace.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n use io::prelude::*;\n \n use io;"}, {"sha": "aca1f42c529fc4fbd7708a6c3031a04ff4f2ad96", "filename": "src/libstd/sys/common/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -10,9 +10,6 @@\n \n #![allow(missing_docs)]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n pub mod backtrace;\n pub mod condvar;\n pub mod mutex;\n@@ -51,7 +48,3 @@ pub trait IntoInner<Inner> {\n pub trait FromInner<Inner> {\n     fn from_inner(inner: Inner) -> Self;\n }\n-\n-#[cfg(stage0)]\n-#[lang = \"stack_exhausted\"]\n-pub fn stack_exhausted() {}"}, {"sha": "c6917d8fca5f4c59924e90cce6afbcbfb69ef5f3", "filename": "src/libstd/sys/common/poison.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use cell::Cell;\n use error::{Error};\n use fmt;"}, {"sha": "0467c67167bd518d85d7a9fd2c419e17a404e4d3", "filename": "src/libstd/sys/common/thread_info.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -10,9 +10,6 @@\n \n #![allow(dead_code)] // stack_guard isn't used right now on all platforms\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use cell::RefCell;\n use string::String;\n use thread::Thread;"}, {"sha": "f68c57c86ef4bf664ef198168f10a2fb722046c5", "filename": "src/libstd/sys/common/thread_local.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -58,9 +58,6 @@\n #![unstable(feature = \"thread_local_internals\")]\n #![allow(dead_code)] // sys isn't exported yet\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use sync::atomic::{self, AtomicUsize, Ordering};\n \n use sys::thread_local as imp;"}, {"sha": "9e4a80a411bb1ba6d08a834ce5b661f806b13924", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -25,9 +25,6 @@\n // unix (it's mostly used on windows), so don't worry about dead code here.\n #![allow(dead_code)]\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use core::char::{encode_utf8_raw, encode_utf16_raw};\n use core::str::next_code_point;\n "}, {"sha": "853e745b8a190ad57fbef1b4faeef464019dca1f", "filename": "src/libstd/sys/unix/backtrace.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -83,8 +83,6 @@\n /// to symbols. This is a bit of a hokey implementation as-is, but it works for\n /// all unix platforms we support right now, so it at least gets the job done.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n use io::prelude::*;\n \n use ffi::CStr;"}, {"sha": "b9538867b252d26f888b33e15c95da6dfdfc9e38", "filename": "src/libstd/sys/unix/condvar.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use cell::UnsafeCell;\n use libc;\n use ptr;"}, {"sha": "9bcd62dbdd15a156379d2434a5f2dffc298e997e", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -12,9 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use fs::{self, Permissions, OpenOptions};\n use io;\n use libc;"}, {"sha": "4ff6daf84c12af702256dfa932f29b1154d0664b", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -14,8 +14,6 @@\n \n use os::unix::raw::{uid_t, gid_t};\n use os::unix::io::{FromRawFd, RawFd, AsRawFd, IntoRawFd};\n-#[cfg(stage0)]\n-use prelude::v1::*;\n use process;\n use sys;\n use sys_common::{AsInnerMut, AsInner, FromInner, IntoInner};"}, {"sha": "4ac498f77ce48642804a2307d4df6cab980e8647", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use io;\n use libc::{self, c_int, size_t, c_void};\n use mem;"}, {"sha": "922a213f9c2c78cc54f2b020de835e2643d3396b", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n use io::prelude::*;\n use os::unix::prelude::*;\n "}, {"sha": "2efca0257f3c8dd1bda0b4de68f2a18cc135738e", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -11,9 +11,6 @@\n #![allow(missing_docs)]\n #![allow(non_camel_case_types)]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use io::{self, ErrorKind};\n use libc;\n use num::One;"}, {"sha": "e4c231ff971d35c54b2805aa0a2bffebea792a87", "filename": "src/libstd/sys/unix/mutex.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use cell::UnsafeCell;\n use sys::sync as ffi;\n use mem;"}, {"sha": "f0f08a72ed8df212c44d4ef590011e79fe45a6ea", "filename": "src/libstd/sys/unix/os_str.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -11,9 +11,6 @@\n /// The underlying OsString/OsStr implementation on Unix systems: just\n /// a `Vec<u8>`/`[u8]`.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use borrow::Cow;\n use fmt::{self, Debug};\n use vec::Vec;"}, {"sha": "5c29c4c08111d246d172c885145480bd3a8b7891", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use sys::fd::FileDesc;\n use io;\n use libc;"}, {"sha": "788bff6243018f22aff3a404c18e182f95da2032", "filename": "src/libstd/sys/unix/rwlock.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use libc;\n use cell::UnsafeCell;\n use sys::sync as ffi;"}, {"sha": "1aa75fa18b7374383d02a1a0781a974c04646224", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n-\n use libc;\n use self::imp::{make_handler, drop_handler};\n "}, {"sha": "c87800a1498f05d31870649630d96c77f6199116", "filename": "src/libstd/sys/unix/stdio.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use io;\n use libc;\n use sys::fd::FileDesc;"}, {"sha": "8d59461f1e4e775801e8d93729ef57f5041244fe", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -163,9 +163,6 @@ impl Drop for Thread {\n           not(target_os = \"netbsd\"),\n           not(target_os = \"openbsd\")))]\n pub mod guard {\n-    #[cfg(stage0)]\n-    use prelude::v1::*;\n-\n     pub unsafe fn current() -> Option<usize> { None }\n     pub unsafe fn init() -> Option<usize> { None }\n }"}, {"sha": "c375788fdc16989b1660b896dfbe17f1a00d7d1a", "filename": "src/libstd/sys/unix/thread_local.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread_local.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -10,8 +10,6 @@\n \n #![allow(dead_code)] // sys isn't exported yet\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n use libc::c_int;\n \n pub type Key = pthread_key_t;"}, {"sha": "7078ee92085fb60c67f5617446219419ca58292c", "filename": "src/libstd/sys/windows/backtrace.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -24,8 +24,6 @@\n \n #![allow(dead_code)]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n use io::prelude::*;\n \n use dynamic_lib::DynamicLibrary;"}, {"sha": "ac76479d7dbd02baab2d8ba32f767f883f0231ef", "filename": "src/libstd/sys/windows/condvar.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use cell::UnsafeCell;\n use libc::{self, DWORD};\n use sys::c;"}, {"sha": "66f42db42cfc856e12ef34e69a1b618d49640ed3", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -12,9 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use fs::{OpenOptions, Metadata};\n use io;\n use path::Path;"}, {"sha": "b8c3f1e7b358268e23e8b476f26460f8a832233e", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use core::prelude::v1::*;\n use io::prelude::*;\n use os::windows::prelude::*;\n "}, {"sha": "a9e9b0e25207748c883f09660484f593ee2b5ff3", "filename": "src/libstd/sys/windows/handle.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use io::ErrorKind;\n use io;\n use libc::funcs::extra::kernel32::{GetCurrentProcess, DuplicateHandle};"}, {"sha": "02c5bc1f0ab14a0cc8fd0d07f739b724621b78dc", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use io;\n use libc::consts::os::extra::INVALID_SOCKET;\n use libc::{self, c_int, c_void};"}, {"sha": "7e286b91f4a7fd48eb1eea342e339020e679da1e", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use io;\n use libc;\n use sys::cvt;"}, {"sha": "3e81ebfcedfb9954db6e51149bec588fcdd6ea62", "filename": "src/libstd/sys/windows/rwlock.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fwindows%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fwindows%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Frwlock.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use cell::UnsafeCell;\n use sys::c;\n "}, {"sha": "cf1b3ebddb97b60d902c82dd592ef2dcb701b0e5", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -81,9 +81,6 @@ impl Thread {\n }\n \n pub mod guard {\n-    #[cfg(stage0)]\n-    use prelude::v1::*;\n-\n     pub unsafe fn current() -> Option<usize> { None }\n     pub unsafe fn init() -> Option<usize> { None }\n }"}, {"sha": "3bf170b5fe2185be9cff8ee33d74471290c32b8b", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -12,9 +12,6 @@\n \n #![unstable(feature = \"thread_local_internals\")]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use cell::UnsafeCell;\n \n // Sure wish we had macro hygiene, no?\n@@ -272,9 +269,6 @@ impl<T: 'static> LocalKey<T> {\n           not(no_elf_tls)))]\n #[doc(hidden)]\n mod imp {\n-    #[cfg(stage0)]\n-    use prelude::v1::*;\n-\n     use cell::{Cell, UnsafeCell};\n     use intrinsics;\n     use ptr;"}, {"sha": "303ab0f9f01347f39a9e0c729a0b0afa07d14da7", "filename": "src/libstd/thread/scoped_tls.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fscoped_tls.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -42,9 +42,6 @@\n \n #![unstable(feature = \"thread_local_internals\")]\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n #[doc(hidden)]\n pub use self::imp::KeyInner as __KeyInner;\n \n@@ -250,9 +247,6 @@ mod imp {\n           no_elf_tls))]\n #[doc(hidden)]\n mod imp {\n-    #[cfg(stage0)]\n-    use prelude::v1::*;\n-\n     use cell::Cell;\n     use marker;\n     use sys_common::thread_local::StaticKey as OsStaticKey;\n@@ -280,8 +274,6 @@ mod imp {\n #[cfg(test)]\n mod tests {\n     use cell::Cell;\n-    #[cfg(stage0)]\n-    use prelude::v1::*;\n \n     scoped_thread_local!(static FOO: u32);\n "}, {"sha": "ba9c3157b0275832e25ec5d211bcb85309d7b36d", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[cfg(stage0)]\n-use prelude::v1::*;\n-\n use ops::{Add, Sub, Mul, Div};\n use sys::time::SteadyTime;\n "}, {"sha": "6a54ed322de0ae3c4bd17a800fc5aa6f81125cbf", "filename": "src/rt/empty.c", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbef8893f798452874f15374992804c8184c32c5/src%2Frt%2Fempty.c", "raw_url": "https://github.com/rust-lang/rust/raw/bbef8893f798452874f15374992804c8184c32c5/src%2Frt%2Fempty.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fempty.c?ref=bbef8893f798452874f15374992804c8184c32c5", "patch": "@@ -1,9 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms."}, {"sha": "704c1b0b835b1ec470b523f31a10da293bc77141", "filename": "src/snapshots.txt", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/837ae4f3d417151c3d2b38672bf92174d8d9266b/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=837ae4f3d417151c3d2b38672bf92174d8d9266b", "patch": "@@ -1,3 +1,14 @@\n+S 2015-08-11 1af31d4\n+  bitrig-x86_64 0000000000000000000000000000000000000000\n+  freebsd-i386 0000000000000000000000000000000000000000\n+  freebsd-x86_64 0000000000000000000000000000000000000000\n+  linux-i386 e2553bf399cd134a08ef3511a0a6ab0d7a667216\n+  linux-x86_64 7df8ba9dec63ec77b857066109d4b6250f3d222f\n+  macos-i386 29750870c82a0347f8b8b735a4e2e0da26f5098d\n+  macos-x86_64 c9f2c588238b4c6998190c3abeb33fd6164099a2\n+  winnt-i386 dc01ac690efdcc40eb6fd8154205a1f21893eb6c\n+  winnt-x86_64 1464a2e54768498222277f904ccd559e27608950\n+\n S 2015-07-26 a5c12f4\n   bitrig-x86_64 8734eb41ffbe6ddc1120aa2910db4162ec9cf270\n   freebsd-i386 2fee22adec101e2f952a5548fd1437ce1bd8d26f"}]}