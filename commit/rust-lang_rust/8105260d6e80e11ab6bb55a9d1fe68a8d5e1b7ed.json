{"sha": "8105260d6e80e11ab6bb55a9d1fe68a8d5e1b7ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMDUyNjBkNmU4MGUxMWFiNmJiNTVhOWQxZmU2OGE4ZDVlMWI3ZWQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-12-14T16:53:42Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-12-14T16:53:42Z"}, "message": "Merge pull request #501 from oli-obk/fix/seme\n\nfix cyclomatic complexity lint (fixes #491, fixes #478)", "tree": {"sha": "1c2dafae7c3930333847faca19d240acb5244df3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c2dafae7c3930333847faca19d240acb5244df3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8105260d6e80e11ab6bb55a9d1fe68a8d5e1b7ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8105260d6e80e11ab6bb55a9d1fe68a8d5e1b7ed", "html_url": "https://github.com/rust-lang/rust/commit/8105260d6e80e11ab6bb55a9d1fe68a8d5e1b7ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8105260d6e80e11ab6bb55a9d1fe68a8d5e1b7ed/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0bccc95670fc3891c1991f22815ef9a6f043850", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0bccc95670fc3891c1991f22815ef9a6f043850", "html_url": "https://github.com/rust-lang/rust/commit/c0bccc95670fc3891c1991f22815ef9a6f043850"}, {"sha": "cc1d696cb9df64b1da9aeebcc47717d84ec649f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc1d696cb9df64b1da9aeebcc47717d84ec649f8", "html_url": "https://github.com/rust-lang/rust/commit/cc1d696cb9df64b1da9aeebcc47717d84ec649f8"}], "stats": {"total": 226, "additions": 187, "deletions": 39}, "files": [{"sha": "cb391769279d5a410c16e1b21c014387f2284992", "filename": "src/cyclomatic_complexity.rs", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8105260d6e80e11ab6bb55a9d1fe68a8d5e1b7ed/src%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8105260d6e80e11ab6bb55a9d1fe68a8d5e1b7ed/src%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcyclomatic_complexity.rs?ref=8105260d6e80e11ab6bb55a9d1fe68a8d5e1b7ed", "patch": "@@ -3,6 +3,7 @@\n use rustc::lint::*;\n use rustc_front::hir::*;\n use rustc::middle::cfg::CFG;\n+use rustc::middle::ty;\n use syntax::codemap::Span;\n use syntax::attr::*;\n use syntax::ast::Attribute;\n@@ -32,23 +33,24 @@ impl LintPass for CyclomaticComplexity {\n }\n \n impl CyclomaticComplexity {\n-    fn check(&mut self, cx: &LateContext, block: &Block, span: Span) {\n+    fn check<'a, 'tcx>(&mut self, cx: &'a LateContext<'a, 'tcx>, block: &Block, span: Span) {\n         if in_macro(cx, span) { return; }\n         let cfg = CFG::new(cx.tcx, block);\n         let n = cfg.graph.len_nodes() as u64;\n         let e = cfg.graph.len_edges() as u64;\n         let cc = e + 2 - n;\n         let mut arm_counter = MatchArmCounter(0);\n         arm_counter.visit_block(block);\n-        let mut narms = arm_counter.0;\n-        if narms > 0 {\n-            narms = narms - 1;\n-        }\n-        \n-        if cc < narms {\n-            report_cc_bug(cx, cc, narms, span);\n+        let narms = arm_counter.0;\n+\n+        let mut diverge_counter = DivergenceCounter(0, &cx.tcx);\n+        diverge_counter.visit_block(block);\n+        let divergence = diverge_counter.0;\n+\n+        if cc + divergence < narms {\n+            report_cc_bug(cx, cc, narms, divergence, span);\n         } else {\n-            let rust_cc = cc - narms;\n+            let rust_cc = cc + divergence - narms;\n             if rust_cc > self.limit.limit() {\n                 cx.span_lint_help(CYCLOMATIC_COMPLEXITY, span,\n                 &format!(\"The function has a cyclomatic complexity of {}.\", rust_cc),\n@@ -93,8 +95,28 @@ impl<'a> Visitor<'a> for MatchArmCounter {\n             ExprMatch(_, ref arms, _) => {\n                 walk_expr(self, e);\n                 let arms_n: u64 = arms.iter().map(|arm| arm.pats.len() as u64).sum();\n-                if arms_n > 0 {\n-                    self.0 += arms_n - 1;\n+                if arms_n > 1 {\n+                    self.0 += arms_n - 2;\n+                }\n+            },\n+            ExprClosure(..) => {},\n+            _ => walk_expr(self, e),\n+        }\n+    }\n+}\n+\n+struct DivergenceCounter<'a, 'tcx: 'a>(u64, &'a ty::ctxt<'tcx>);\n+\n+impl<'a, 'b, 'tcx> Visitor<'a> for DivergenceCounter<'b, 'tcx> {\n+    fn visit_expr(&mut self, e: &'a Expr) {\n+        match e.node {\n+            ExprCall(ref callee, _) => {\n+                walk_expr(self, e);\n+                let ty = self.1.node_id_to_type(callee.id);\n+                if let ty::TyBareFn(_, ty) = ty.sty {\n+                    if ty.sig.skip_binder().output.diverges() {\n+                        self.0 += 1;\n+                    }\n                 }\n             },\n             ExprClosure(..) => {},\n@@ -104,15 +126,15 @@ impl<'a> Visitor<'a> for MatchArmCounter {\n }\n \n #[cfg(feature=\"debugging\")]\n-fn report_cc_bug(cx: &LateContext, cc: u64, narms: u64, span: Span) {\n+fn report_cc_bug(cx: &LateContext, cc: u64, narms: u64, div: u64, span: Span) {\n     cx.sess().span_bug(span, &format!(\"Clippy encountered a bug calculating cyclomatic complexity: \\\n-                                       cc = {}, arms = {}. Please file a bug report.\", cc, narms));;\n+                                       cc = {}, arms = {}, div = {}. Please file a bug report.\", cc, narms, div));;\n }\n #[cfg(not(feature=\"debugging\"))]\n-fn report_cc_bug(cx: &LateContext, cc: u64, narms: u64, span: Span) {\n+fn report_cc_bug(cx: &LateContext, cc: u64, narms: u64, div: u64, span: Span) {\n     if cx.current_level(CYCLOMATIC_COMPLEXITY) != Level::Allow {\n         cx.sess().span_note(span, &format!(\"Clippy encountered a bug calculating cyclomatic complexity \\\n                                             (hide this message with `#[allow(cyclomatic_complexity)]`): \\\n-                                            cc = {}, arms = {}. Please file a bug report.\", cc, narms));\n+                                            cc = {}, arms = {}, div = {}. Please file a bug report.\", cc, narms, div));\n     }\n }"}, {"sha": "8295e18617259e3b85e3d79777931fa6ce0b4a12", "filename": "src/loops.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8105260d6e80e11ab6bb55a9d1fe68a8d5e1b7ed/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8105260d6e80e11ab6bb55a9d1fe68a8d5e1b7ed/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=8105260d6e80e11ab6bb55a9d1fe68a8d5e1b7ed", "patch": "@@ -147,14 +147,8 @@ impl LateLintPass for LoopsPass {\n \n             // extract the expression from the first statement (if any) in a block\n             let inner_stmt_expr = extract_expr_from_first_stmt(block);\n-            // extract the first expression (if any) from the block\n-            let inner_expr = extract_first_expr(block);\n-            let (extracted, collect_expr) = match inner_stmt_expr {\n-                Some(_) => (inner_stmt_expr, true),     // check if an expression exists in the first statement\n-                None => (inner_expr, false),    // if not, let's go for the first expression in the block\n-            };\n-\n-            if let Some(inner) = extracted {\n+            // or extract the first expression (if any) from the block\n+            if let Some(inner) = inner_stmt_expr.or_else(|| extract_first_expr(block)) {\n                 if let ExprMatch(ref matchexpr, ref arms, ref source) = inner.node {\n                     // collect the remaining statements below the match\n                     let mut other_stuff = block.stmts\n@@ -163,10 +157,11 @@ impl LateLintPass for LoopsPass {\n                                   .map(|stmt| {\n                                       format!(\"{}\", snippet(cx, stmt.span, \"..\"))\n                                   }).collect::<Vec<String>>();\n-                    if collect_expr {           // if we have a statement which has a match,\n-                        match block.expr {      // then collect the expression (without semicolon) below it\n-                            Some(ref expr) => other_stuff.push(format!(\"{}\", snippet(cx, expr.span, \"..\"))),\n-                            None => (),\n+                    if inner_stmt_expr.is_some() {\n+                        // if we have a statement which has a match,\n+                        if let Some(ref expr) = block.expr {\n+                            // then collect the expression (without semicolon) below it\n+                            other_stuff.push(format!(\"{}\", snippet(cx, expr.span, \"..\")));\n                         }\n                     }\n \n@@ -180,12 +175,12 @@ impl LateLintPass for LoopsPass {\n                             is_break_expr(&arms[1].body)\n                         {\n                             if in_external_macro(cx, expr.span) { return; }\n-                            let loop_body = match inner_stmt_expr {\n+                            let loop_body = if inner_stmt_expr.is_some() {\n                                 // FIXME: should probably be an ellipsis\n                                 // tabbing and newline is probably a bad idea, especially for large blocks\n-                                Some(_) => Cow::Owned(format!(\"{{\\n    {}\\n}}\", other_stuff.join(\"\\n    \"))),\n-                                None => expr_block(cx, &arms[0].body,\n-                                                   Some(other_stuff.join(\"\\n    \")), \"..\"),\n+                                Cow::Owned(format!(\"{{\\n    {}\\n}}\", other_stuff.join(\"\\n    \")))\n+                            } else {\n+                                expr_block(cx, &arms[0].body, Some(other_stuff.join(\"\\n    \")), \"..\")\n                             };\n                             span_help_and_lint(cx, WHILE_LET_LOOP, expr.span,\n                                                \"this loop could be written as a `while let` loop\","}, {"sha": "460893d93ab1f18c5348ebf16a4e4cc02500b363", "filename": "src/matches.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8105260d6e80e11ab6bb55a9d1fe68a8d5e1b7ed/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8105260d6e80e11ab6bb55a9d1fe68a8d5e1b7ed/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=8105260d6e80e11ab6bb55a9d1fe68a8d5e1b7ed", "patch": "@@ -102,13 +102,11 @@ impl LateLintPass for MatchPass {\n                 if arms.len() == 2 && arms[0].pats.len() == 1 { // no guards\n                     let exprs = if let PatLit(ref arm_bool) = arms[0].pats[0].node {\n                         if let ExprLit(ref lit) = arm_bool.node {\n-                            if let LitBool(val) = lit.node {\n-                                if val {\n-                                    Some((&*arms[0].body, &*arms[1].body))\n-                                } else {\n-                                    Some((&*arms[1].body, &*arms[0].body))\n-                                }\n-                            } else { None }\n+                            match lit.node {\n+                                LitBool(true) => Some((&*arms[0].body, &*arms[1].body)),\n+                                LitBool(false) => Some((&*arms[1].body, &*arms[0].body)),\n+                                _ => None,\n+                            }\n                         } else { None }\n                     } else { None };\n                     if let Some((ref true_expr, ref false_expr)) = exprs {"}, {"sha": "a26731c396a57fc9fc78e021eb6521979bfcfb85", "filename": "tests/cc_seme.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8105260d6e80e11ab6bb55a9d1fe68a8d5e1b7ed/tests%2Fcc_seme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8105260d6e80e11ab6bb55a9d1fe68a8d5e1b7ed/tests%2Fcc_seme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcc_seme.rs?ref=8105260d6e80e11ab6bb55a9d1fe68a8d5e1b7ed", "patch": "@@ -0,0 +1,25 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[allow(dead_code)]\n+enum Baz {\n+    Baz1,\n+    Baz2,\n+}\n+\n+struct Test {\n+    t: Option<usize>,\n+    b: Baz,\n+}\n+\n+fn main() {\n+    use Baz::*;\n+    let x = Test { t: Some(0), b: Baz1 };\n+\n+    match x {\n+        Test { t: Some(_), b: Baz1 } => unreachable!(),\n+        Test { t: Some(42), b: Baz2 } => unreachable!(),\n+        Test { t: None, .. } => unreachable!(),\n+        Test { .. } => unreachable!(),\n+    }\n+}"}, {"sha": "1a6dfd28728cff861b882a8097f0a16626067b6a", "filename": "tests/compile-fail/cyclomatic_complexity.rs", "status": "modified", "additions": 109, "deletions": 1, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/8105260d6e80e11ab6bb55a9d1fe68a8d5e1b7ed/tests%2Fcompile-fail%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8105260d6e80e11ab6bb55a9d1fe68a8d5e1b7ed/tests%2Fcompile-fail%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcyclomatic_complexity.rs?ref=8105260d6e80e11ab6bb55a9d1fe68a8d5e1b7ed", "patch": "@@ -89,7 +89,7 @@ fn main() { //~ ERROR: The function has a cyclomatic complexity of 28.\n }\n \n #[cyclomatic_complexity = \"0\"]\n-fn kaboom() {  //~ ERROR: The function has a cyclomatic complexity of 6\n+fn kaboom() {  //~ ERROR: The function has a cyclomatic complexity of 8\n     let n = 0;\n     'a: for i in 0..20 {\n         'b: for j in i..20 {\n@@ -170,6 +170,114 @@ fn barr() { //~ ERROR: The function has a cyclomatic complexity of 2\n     }\n }\n \n+#[cyclomatic_complexity = \"0\"]\n+fn barr2() { //~ ERROR: The function has a cyclomatic complexity of 3\n+    match 99 {\n+        0 => println!(\"hi\"),\n+        1 => println!(\"bla\"),\n+        2 | 3 => println!(\"blub\"),\n+        _ => println!(\"bye\"),\n+    }\n+    match 99 {\n+        0 => println!(\"hi\"),\n+        1 => println!(\"bla\"),\n+        2 | 3 => println!(\"blub\"),\n+        _ => println!(\"bye\"),\n+    }\n+}\n+\n+#[cyclomatic_complexity = \"0\"]\n+fn barrr() { //~ ERROR: The function has a cyclomatic complexity of 2\n+    match 99 {\n+        0 => println!(\"hi\"),\n+        1 => panic!(\"bla\"),\n+        2 | 3 => println!(\"blub\"),\n+        _ => println!(\"bye\"),\n+    }\n+}\n+\n+#[cyclomatic_complexity = \"0\"]\n+fn barrr2() { //~ ERROR: The function has a cyclomatic complexity of 3\n+    match 99 {\n+        0 => println!(\"hi\"),\n+        1 => panic!(\"bla\"),\n+        2 | 3 => println!(\"blub\"),\n+        _ => println!(\"bye\"),\n+    }\n+    match 99 {\n+        0 => println!(\"hi\"),\n+        1 => panic!(\"bla\"),\n+        2 | 3 => println!(\"blub\"),\n+        _ => println!(\"bye\"),\n+    }\n+}\n+\n+#[cyclomatic_complexity = \"0\"]\n+fn barrrr() { //~ ERROR: The function has a cyclomatic complexity of 2\n+    match 99 {\n+        0 => println!(\"hi\"),\n+        1 => println!(\"bla\"),\n+        2 | 3 => panic!(\"blub\"),\n+        _ => println!(\"bye\"),\n+    }\n+}\n+\n+#[cyclomatic_complexity = \"0\"]\n+fn barrrr2() { //~ ERROR: The function has a cyclomatic complexity of 3\n+    match 99 {\n+        0 => println!(\"hi\"),\n+        1 => println!(\"bla\"),\n+        2 | 3 => panic!(\"blub\"),\n+        _ => println!(\"bye\"),\n+    }\n+    match 99 {\n+        0 => println!(\"hi\"),\n+        1 => println!(\"bla\"),\n+        2 | 3 => panic!(\"blub\"),\n+        _ => println!(\"bye\"),\n+    }\n+}\n+\n+#[cyclomatic_complexity = \"0\"]\n+fn cake() { //~ ERROR: The function has a cyclomatic complexity of 2\n+    if 4 == 5 {\n+        println!(\"yea\");\n+    } else {\n+        panic!(\"meh\");\n+    }\n+    println!(\"whee\");\n+}\n+\n+\n+#[cyclomatic_complexity = \"0\"]\n+pub fn read_file(input_path: &str) -> String { //~ ERROR: The function has a cyclomatic complexity of 4\n+    use std::fs::File;\n+    use std::io::{Read, Write};\n+    use std::path::Path;\n+    let mut file = match File::open(&Path::new(input_path)) {\n+        Ok(f) => f,\n+        Err(err) => {\n+            panic!(\"Can't open {}: {}\", input_path, err);\n+        }\n+    };\n+\n+    let mut bytes = Vec::new();\n+\n+    match file.read_to_end(&mut bytes) {\n+        Ok(..) => {},\n+        Err(_) => {\n+            panic!(\"Can't read {}\", input_path);\n+        }\n+    };\n+\n+    match String::from_utf8(bytes) {\n+        Ok(contents) => contents,\n+        Err(_) => {\n+            panic!(\"{} is not UTF-8 encoded\", input_path);\n+        }\n+    }\n+}\n+\n enum Void {}\n \n #[cyclomatic_complexity = \"0\"]"}]}