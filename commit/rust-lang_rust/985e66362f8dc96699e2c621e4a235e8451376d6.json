{"sha": "985e66362f8dc96699e2c621e4a235e8451376d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NWU2NjM2MmY4ZGM5NjY5OWUyYzYyMWU0YTIzNWU4NDUxMzc2ZDY=", "commit": {"author": {"name": "lcnr/Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2019-11-19T09:18:53Z"}, "committer": {"name": "lcnr/Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2019-11-19T09:18:53Z"}, "message": "add fn any::type_name_of_val", "tree": {"sha": "ad4afe27cab2d40809e4084ee9cc7089a9e22598", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad4afe27cab2d40809e4084ee9cc7089a9e22598"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/985e66362f8dc96699e2c621e4a235e8451376d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/985e66362f8dc96699e2c621e4a235e8451376d6", "html_url": "https://github.com/rust-lang/rust/commit/985e66362f8dc96699e2c621e4a235e8451376d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/985e66362f8dc96699e2c621e4a235e8451376d6/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b7e28a1610924a27471ffdb59a2885709b3b415", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7e28a1610924a27471ffdb59a2885709b3b415", "html_url": "https://github.com/rust-lang/rust/commit/0b7e28a1610924a27471ffdb59a2885709b3b415"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "fc6d2c2ee2c79d5e90b2ccd1ca6ea957f0a38449", "filename": "src/libcore/any.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/985e66362f8dc96699e2c621e4a235e8451376d6/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/985e66362f8dc96699e2c621e4a235e8451376d6/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=985e66362f8dc96699e2c621e4a235e8451376d6", "patch": "@@ -446,7 +446,7 @@ impl TypeId {\n /// The current implementation uses the same infrastructure as compiler\n /// diagnostics and debuginfo, but this is not guaranteed.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// assert_eq!(\n@@ -459,3 +459,42 @@ impl TypeId {\n pub const fn type_name<T: ?Sized>() -> &'static str {\n     intrinsics::type_name::<T>()\n }\n+\n+/// Returns the name of the type of the pointed-to value as a string slice.\n+/// This is the same as `type_name::<T>()`, but can be used where the type of a\n+/// variable is not easily available.\n+///\n+/// # Note\n+///\n+/// This is intended for diagnostic use. The exact contents and format of the\n+/// string are not specified, other than being a best-effort description of the\n+/// type. For example, `type_name_of::<Option<String>>(None)` could return the\n+/// `\"Option<String>\"` or `\"std::option::Option<std::string::String>\"`, but not\n+/// `\"foobar\"`. In addition, the output may change between versions of the\n+/// compiler.\n+///\n+/// The type name should not be considered a unique identifier of a type;\n+/// multiple types may share the same type name.\n+///\n+/// The current implementation uses the same infrastructure as compiler\n+/// diagnostics and debuginfo, but this is not guaranteed.\n+///\n+/// # Examples\n+///\n+/// Prints the default integer and float types.\n+///\n+/// ```rust\n+/// #![feature(type_name_of_val)]\n+/// use std::any::type_name_of_val;\n+///\n+/// let x = 1;\n+/// println!(\"{}\", type_name_of_val(&x));\n+/// let y = 1.0;\n+/// println!(\"{}\", type_name_of_val(&y));\n+/// ```\n+#[unstable(feature = \"type_name_of_val\", issue = \"66359\")]\n+#[rustc_const_unstable(feature = \"const_type_name\")]\n+pub const fn type_name_of_val<T: ?Sized>(val: &T) -> &'static str {\n+    let _ = val;\n+    type_name::<T>()\n+}"}]}