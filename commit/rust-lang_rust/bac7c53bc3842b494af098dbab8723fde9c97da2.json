{"sha": "bac7c53bc3842b494af098dbab8723fde9c97da2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYzdjNTNiYzM4NDJiNDk0YWYwOThkYmFiODcyM2ZkZTljOTdkYTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-21T06:42:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-21T06:42:14Z"}, "message": "Auto merge of #45545 - durka:macro-backtrace, r=nrc\n\nshow macro backtrace with -Z flag\n\nFixes #39413 by adding a facility to restore the \"old school\" macro expansion backtraces (previously removed in https://github.com/rust-lang/rust/commit/61865384b8fa6d79d2b36cbd7c899eaf15f4aeea).\n\nThe restored functionality is accessed through the flag `-Z external-macro-backtrace`. Errors showing the truncated backtraces will suggest this flag.\n\n### Example\n\nCode: <details>\n`a/src/lib.rs`\n```rust\n#[macro_export]\nmacro_rules! a {\n    () => { a!(@) };\n    (@) => { a!(@@) };\n    (@@) => {\n        syntax error;\n    }\n}\n```\n`b/src/main.rs`\n```rust\n#[macro_use] extern crate a;\n\nmacro_rules! b {\n    () => { b!(@) };\n    (@) => { b!(@@) };\n    (@@) => {\n        syntax error;\n    }\n}\n\nfn main() {\n    a!();\n    b!();\n}\n```\n</details>\n\n<br/><br/>\nRunning without env var (note: first error is from remote macro, second from local macro):\n\n<details>\n\n```\n$ cargo +custom run\n   Compiling b v0.1.0\nerror: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n  --> src/main.rs:12:5\n   |\n12 |     a!();\n   |     ^^^^^\n   |     |\n   |     expected one of 8 possible tokens here\n   |     unexpected token\n   |\n   = note: this error originates in a macro outside of the current crate (run with RUST_MACRO_BACKTRACE=1 for more info)\n\nerror: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n  --> src/main.rs:7:16\n   |\n7  |         syntax error;\n   |               -^^^^^ unexpected token\n   |               |\n   |               expected one of 8 possible tokens here\n...\n13 |     b!();\n   |     ----- in this macro invocation\n\nerror: aborting due to 2 previous errors\n\nerror: Could not compile `b`.\n\nTo learn more, run the command again with --verbose.\n```\n</details>\nThe output is the same as today, except for an addition to the note which aids discoverability of the new environment variable.\n\n<br/><br/>\nRunning _with_ env var:\n<details>\n\n```\n$ RUST_MACRO_BACKTRACE=1 cargo +custom run\n   Compiling b v0.1.0\nerror: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n --> <a macros>:1:72\n  |\n1 | (  ) => { a ! ( @ ) } ; ( @ ) => { a ! ( @ @ ) } ; ( @ @ ) => { syntax error ;\n  |                                                                       -^^^^^ unexpected token\n  |                                                                       |\n  |                                                                       expected one of 8 possible tokens here\nsrc/main.rs:12:5: 12:10 note: in this expansion of a! (defined in <a macros>)\n<a macros>:1:11: 1:20 note: in this expansion of a! (defined in <a macros>)\n<a macros>:1:36: 1:47 note: in this expansion of a! (defined in <a macros>)\n\nerror: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n --> src/main.rs:7:16\n  |\n7 |         syntax error;\n  |               -^^^^^ unexpected token\n  |               |\n  |               expected one of 8 possible tokens here\nsrc/main.rs:12:5: 12:10 note: in this expansion of a! (defined in <a macros>)\n<a macros>:1:11: 1:20 note: in this expansion of a! (defined in <a macros>)\n<a macros>:1:36: 1:47 note: in this expansion of a! (defined in <a macros>)\n\nerror: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n --> src/main.rs:7:16\n  |\n7 |         syntax error;\n  |               -^^^^^ unexpected token\n  |               |\n  |               expected one of 8 possible tokens here\nsrc/main.rs:13:5: 13:10 note: in this expansion of b! (defined in src/main.rs)\nsrc/main.rs:4:13: 4:18 note: in this expansion of b! (defined in src/main.rs)\nsrc/main.rs:5:14: 5:20 note: in this expansion of b! (defined in src/main.rs)\n\nerror: aborting due to 2 previous errors\n\nerror: Could not compile `b`.\n\nTo learn more, run the command again with --verbose.\n```\n</details>\n\nThe output is hard to read, but better than nothing (and it's exactly what we used to have before the infamous `fix_multispans_in_std_macros`).\n\n<br/><br/>\nWishlist:\n\n- Save the actual source of macros in crate metadata, not just AST, so the output can be improved\n    - Hopefully this would allow line numbers in the trace as well\n- Show the actual macro invocations in the traces\n\nr? @nrc", "tree": {"sha": "215ef7bb6abc3c66adf8401d875ac04edbe56200", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/215ef7bb6abc3c66adf8401d875ac04edbe56200"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bac7c53bc3842b494af098dbab8723fde9c97da2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bac7c53bc3842b494af098dbab8723fde9c97da2", "html_url": "https://github.com/rust-lang/rust/commit/bac7c53bc3842b494af098dbab8723fde9c97da2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bac7c53bc3842b494af098dbab8723fde9c97da2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "421a2113a840aa5801230e7226fc9628100072ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/421a2113a840aa5801230e7226fc9628100072ef", "html_url": "https://github.com/rust-lang/rust/commit/421a2113a840aa5801230e7226fc9628100072ef"}, {"sha": "b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a", "html_url": "https://github.com/rust-lang/rust/commit/b34a7ffb2524bbe2e8d563a846f6c9f8e2453c1a"}], "stats": {"total": 269, "additions": 211, "deletions": 58}, "files": [{"sha": "ee197a009f8ad4e228c4dcd2041f35e311def34b", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -1036,6 +1036,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"run all passes except translation; no output\"),\n     treat_err_as_bug: bool = (false, parse_bool, [TRACKED],\n           \"treat all errors that occur as bugs\"),\n+    external_macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n+          \"show macro backtraces even for non-local macros\"),\n     continue_parse_after_error: bool = (false, parse_bool, [TRACKED],\n           \"attempt to recover from parse errors (experimental)\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n@@ -2100,7 +2102,7 @@ mod tests {\n             let registry = errors::registry::Registry::new(&[]);\n             let (sessopts, _) = build_session_options_and_crate_config(&matches);\n             let sess = build_session(sessopts, None, registry);\n-            assert!(!sess.diagnostic().can_emit_warnings);\n+            assert!(!sess.diagnostic().flags.can_emit_warnings);\n         }\n \n         {\n@@ -2111,7 +2113,7 @@ mod tests {\n             let registry = errors::registry::Registry::new(&[]);\n             let (sessopts, _) = build_session_options_and_crate_config(&matches);\n             let sess = build_session(sessopts, None, registry);\n-            assert!(sess.diagnostic().can_emit_warnings);\n+            assert!(sess.diagnostic().flags.can_emit_warnings);\n         }\n \n         {\n@@ -2121,7 +2123,7 @@ mod tests {\n             let registry = errors::registry::Registry::new(&[]);\n             let (sessopts, _) = build_session_options_and_crate_config(&matches);\n             let sess = build_session(sessopts, None, registry);\n-            assert!(sess.diagnostic().can_emit_warnings);\n+            assert!(sess.diagnostic().flags.can_emit_warnings);\n         }\n     }\n "}, {"sha": "780159674289e2579793cb1a444f0b1de95a89a1", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -727,10 +727,12 @@ pub fn build_session_with_codemap(sopts: config::Options,\n         .unwrap_or(false);\n     let cap_lints_allow = sopts.lint_cap.map_or(false, |cap| cap == lint::Allow);\n \n-    let can_print_warnings = !(warnings_allow || cap_lints_allow);\n+    let can_emit_warnings = !(warnings_allow || cap_lints_allow);\n \n     let treat_err_as_bug = sopts.debugging_opts.treat_err_as_bug;\n \n+    let external_macro_backtrace = sopts.debugging_opts.external_macro_backtrace;\n+\n     let emitter: Box<Emitter> = match (sopts.error_format, emitter_dest) {\n         (config::ErrorOutputType::HumanReadable(color_config), None) => {\n             Box::new(EmitterWriter::stderr(color_config, Some(codemap.clone()), false))\n@@ -753,9 +755,14 @@ pub fn build_session_with_codemap(sopts: config::Options,\n     };\n \n     let diagnostic_handler =\n-        errors::Handler::with_emitter(can_print_warnings,\n-                                      treat_err_as_bug,\n-                                      emitter);\n+        errors::Handler::with_emitter_and_flags(\n+            emitter,\n+            errors::HandlerFlags {\n+                can_emit_warnings,\n+                treat_err_as_bug,\n+                external_macro_backtrace,\n+                .. Default::default()\n+            });\n \n     build_session_(sopts,\n                    local_crate_source_file,"}, {"sha": "27e895164e7645d56a193a585a7ae3919628b086", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -23,7 +23,7 @@ use syntax_pos::{MultiSpan, Span};\n #[must_use]\n #[derive(Clone)]\n pub struct DiagnosticBuilder<'a> {\n-    handler: &'a Handler,\n+    pub handler: &'a Handler,\n     diagnostic: Diagnostic,\n }\n "}, {"sha": "17ed1734fe2033a957e7282857f25818f36725b4", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -64,8 +64,11 @@ impl Emitter for EmitterWriter {\n             }\n         }\n \n-        self.fix_multispans_in_std_macros(&mut primary_span, &mut children);\n+        if !db.handler.flags.external_macro_backtrace {\n+            self.fix_multispans_in_std_macros(&mut primary_span, &mut children);\n+        }\n         self.emit_messages_default(&db.level,\n+                                   db.handler.flags.external_macro_backtrace,\n                                    &db.styled_message(),\n                                    &db.code,\n                                    &primary_span,\n@@ -793,8 +796,11 @@ impl EmitterWriter {\n         if spans_updated {\n             children.push(SubDiagnostic {\n                 level: Level::Note,\n-                message: vec![(\"this error originates in a macro outside of the current crate\"\n-                    .to_string(), Style::NoStyle)],\n+                message: vec![\n+                    ([\"this error originates in a macro outside of the current crate\",\n+                      \"(run with -Z external-macro-backtrace for more info)\"].join(\" \"),\n+                     Style::NoStyle),\n+                ],\n                 span: MultiSpan::new(),\n                 render_span: None,\n             });\n@@ -882,6 +888,7 @@ impl EmitterWriter {\n                             msg: &Vec<(String, Style)>,\n                             code: &Option<DiagnosticId>,\n                             level: &Level,\n+                            external_macro_backtrace: bool,\n                             max_line_num_len: usize,\n                             is_secondary: bool)\n                             -> io::Result<()> {\n@@ -1079,6 +1086,12 @@ impl EmitterWriter {\n             }\n         }\n \n+        if external_macro_backtrace {\n+            if let Some(ref primary_span) = msp.primary_span().as_ref() {\n+                self.render_macro_backtrace_old_school(primary_span, &mut buffer)?;\n+            }\n+        }\n+\n         // final step: take our styled buffer, render it, then output it\n         emit_to_destination(&buffer.render(), level, &mut self.dst, self.short_message)?;\n \n@@ -1170,6 +1183,7 @@ impl EmitterWriter {\n     }\n     fn emit_messages_default(&mut self,\n                              level: &Level,\n+                             external_macro_backtrace: bool,\n                              message: &Vec<(String, Style)>,\n                              code: &Option<DiagnosticId>,\n                              span: &MultiSpan,\n@@ -1178,7 +1192,13 @@ impl EmitterWriter {\n         let max_line_num = self.get_max_line_num(span, children);\n         let max_line_num_len = max_line_num.to_string().len();\n \n-        match self.emit_message_default(span, message, code, level, max_line_num_len, false) {\n+        match self.emit_message_default(span,\n+                                        message,\n+                                        code,\n+                                        level,\n+                                        external_macro_backtrace,\n+                                        max_line_num_len,\n+                                        false) {\n             Ok(()) => {\n                 if !children.is_empty() {\n                     let mut buffer = StyledBuffer::new();\n@@ -1198,6 +1218,7 @@ impl EmitterWriter {\n                                                         &child.styled_message(),\n                                                         &None,\n                                                         &child.level,\n+                                                        external_macro_backtrace,\n                                                         max_line_num_len,\n                                                         true) {\n                             Err(e) => panic!(\"failed to emit error: {}\", e),\n@@ -1226,6 +1247,30 @@ impl EmitterWriter {\n             }\n         }\n     }\n+\n+    fn render_macro_backtrace_old_school(&self,\n+                                         sp: &Span,\n+                                         buffer: &mut StyledBuffer) -> io::Result<()> {\n+        if let Some(ref cm) = self.cm {\n+            for trace in sp.macro_backtrace().iter().rev() {\n+                let line_offset = buffer.num_lines();\n+\n+                let mut diag_string =\n+                    format!(\"in this expansion of {}\", trace.macro_decl_name);\n+                if let Some(def_site_span) = trace.def_site_span {\n+                    diag_string.push_str(\n+                        &format!(\" (defined in {})\",\n+                            cm.span_to_filename(def_site_span)));\n+                }\n+                let snippet = cm.span_to_string(trace.call_site);\n+                buffer.append(line_offset, &format!(\"{} \", snippet), Style::NoStyle);\n+                buffer.append(line_offset, \"note\", Style::Level(Level::Note));\n+                buffer.append(line_offset, \": \", Style::NoStyle);\n+                buffer.append(line_offset, &diag_string, Style::OldSchoolNoteText);\n+            }\n+        }\n+        Ok(())\n+    }\n }\n \n fn draw_col_separator(buffer: &mut StyledBuffer, line: usize, col: usize) {\n@@ -1415,7 +1460,7 @@ impl Destination {\n                 }\n             }\n             Style::Quotation => {}\n-            Style::HeaderMsg => {\n+            Style::OldSchoolNoteText | Style::HeaderMsg => {\n                 self.start_attr(term::Attr::Bold)?;\n                 if cfg!(windows) {\n                     self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_WHITE))?;"}, {"sha": "605cfc5ed127eb7331f2bbb76cb250e57f9a8ef9", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 44, "deletions": 14, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -233,10 +233,10 @@ pub use diagnostic_builder::DiagnosticBuilder;\n /// (fatal, bug, unimpl) may cause immediate exit,\n /// others log errors for later reporting.\n pub struct Handler {\n+    pub flags: HandlerFlags,\n+\n     err_count: Cell<usize>,\n     emitter: RefCell<Box<Emitter>>,\n-    pub can_emit_warnings: bool,\n-    treat_err_as_bug: bool,\n     continue_after_error: Cell<bool>,\n     delayed_span_bug: RefCell<Option<Diagnostic>>,\n     tracked_diagnostics: RefCell<Option<Vec<Diagnostic>>>,\n@@ -247,25 +247,55 @@ pub struct Handler {\n     emitted_diagnostics: RefCell<FxHashSet<u128>>,\n }\n \n+#[derive(Default)]\n+pub struct HandlerFlags {\n+    pub can_emit_warnings: bool,\n+    pub treat_err_as_bug: bool,\n+    pub external_macro_backtrace: bool,\n+}\n+\n impl Handler {\n     pub fn with_tty_emitter(color_config: ColorConfig,\n                             can_emit_warnings: bool,\n                             treat_err_as_bug: bool,\n                             cm: Option<Rc<CodeMapper>>)\n                             -> Handler {\n+        Handler::with_tty_emitter_and_flags(\n+            color_config,\n+            cm,\n+            HandlerFlags {\n+                can_emit_warnings,\n+                treat_err_as_bug,\n+                .. Default::default()\n+            })\n+    }\n+\n+    pub fn with_tty_emitter_and_flags(color_config: ColorConfig,\n+                                      cm: Option<Rc<CodeMapper>>,\n+                                      flags: HandlerFlags)\n+                                      -> Handler {\n         let emitter = Box::new(EmitterWriter::stderr(color_config, cm, false));\n-        Handler::with_emitter(can_emit_warnings, treat_err_as_bug, emitter)\n+        Handler::with_emitter_and_flags(emitter, flags)\n     }\n \n     pub fn with_emitter(can_emit_warnings: bool,\n                         treat_err_as_bug: bool,\n                         e: Box<Emitter>)\n                         -> Handler {\n+        Handler::with_emitter_and_flags(\n+            e,\n+            HandlerFlags {\n+                can_emit_warnings,\n+                treat_err_as_bug,\n+                .. Default::default()\n+            })\n+    }\n+\n+    pub fn with_emitter_and_flags(e: Box<Emitter>, flags: HandlerFlags) -> Handler {\n         Handler {\n+            flags,\n             err_count: Cell::new(0),\n             emitter: RefCell::new(e),\n-            can_emit_warnings,\n-            treat_err_as_bug,\n             continue_after_error: Cell::new(true),\n             delayed_span_bug: RefCell::new(None),\n             tracked_diagnostics: RefCell::new(None),\n@@ -293,7 +323,7 @@ impl Handler {\n                                                     -> DiagnosticBuilder<'a> {\n         let mut result = DiagnosticBuilder::new(self, Level::Warning, msg);\n         result.set_span(sp);\n-        if !self.can_emit_warnings {\n+        if !self.flags.can_emit_warnings {\n             result.cancel();\n         }\n         result\n@@ -306,14 +336,14 @@ impl Handler {\n         let mut result = DiagnosticBuilder::new(self, Level::Warning, msg);\n         result.set_span(sp);\n         result.code(code);\n-        if !self.can_emit_warnings {\n+        if !self.flags.can_emit_warnings {\n             result.cancel();\n         }\n         result\n     }\n     pub fn struct_warn<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n         let mut result = DiagnosticBuilder::new(self, Level::Warning, msg);\n-        if !self.can_emit_warnings {\n+        if !self.flags.can_emit_warnings {\n             result.cancel();\n         }\n         result\n@@ -376,7 +406,7 @@ impl Handler {\n     }\n \n     fn panic_if_treat_err_as_bug(&self) {\n-        if self.treat_err_as_bug {\n+        if self.flags.treat_err_as_bug {\n             panic!(\"encountered error with `-Z treat_err_as_bug\");\n         }\n     }\n@@ -418,7 +448,7 @@ impl Handler {\n         panic!(ExplicitBug);\n     }\n     pub fn delay_span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n-        if self.treat_err_as_bug {\n+        if self.flags.treat_err_as_bug {\n             self.span_bug(sp, msg);\n         }\n         let mut diagnostic = Diagnostic::new(Level::Bug, msg);\n@@ -443,15 +473,15 @@ impl Handler {\n         self.span_bug(sp, &format!(\"unimplemented {}\", msg));\n     }\n     pub fn fatal(&self, msg: &str) -> FatalError {\n-        if self.treat_err_as_bug {\n+        if self.flags.treat_err_as_bug {\n             self.bug(msg);\n         }\n         let mut db = DiagnosticBuilder::new(self, Fatal, msg);\n         db.emit();\n         FatalError\n     }\n     pub fn err(&self, msg: &str) {\n-        if self.treat_err_as_bug {\n+        if self.flags.treat_err_as_bug {\n             self.bug(msg);\n         }\n         let mut db = DiagnosticBuilder::new(self, Error, msg);\n@@ -504,7 +534,7 @@ impl Handler {\n         panic!(self.fatal(&s));\n     }\n     pub fn emit(&self, msp: &MultiSpan, msg: &str, lvl: Level) {\n-        if lvl == Warning && !self.can_emit_warnings {\n+        if lvl == Warning && !self.flags.can_emit_warnings {\n             return;\n         }\n         let mut db = DiagnosticBuilder::new(self, lvl, msg);\n@@ -515,7 +545,7 @@ impl Handler {\n         }\n     }\n     pub fn emit_with_code(&self, msp: &MultiSpan, msg: &str, code: DiagnosticId, lvl: Level) {\n-        if lvl == Warning && !self.can_emit_warnings {\n+        if lvl == Warning && !self.flags.can_emit_warnings {\n             return;\n         }\n         let mut db = DiagnosticBuilder::new_with_code(self, lvl, Some(code), msg);"}, {"sha": "b76036b22df533d3b88732dd07f90edfe1e1a6d7", "filename": "src/librustc_errors/snippet.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Flibrustc_errors%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Flibrustc_errors%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fsnippet.rs?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -213,6 +213,7 @@ pub enum Style {\n     UnderlineSecondary,\n     LabelPrimary,\n     LabelSecondary,\n+    OldSchoolNoteText,\n     NoStyle,\n     Level(Level),\n     Highlight,"}, {"sha": "ea0d32e2a2d5685310ac2ee476c6ee7a084ad95c", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -81,7 +81,9 @@ pub fn run(input: &str,\n \n     let codemap = Rc::new(CodeMap::new(sessopts.file_path_mapping()));\n     let handler =\n-        errors::Handler::with_tty_emitter(ColorConfig::Auto, true, false, Some(codemap.clone()));\n+        errors::Handler::with_tty_emitter(ColorConfig::Auto,\n+                                          true, false,\n+                                          Some(codemap.clone()));\n \n     let cstore = Rc::new(CStore::new(box rustc_trans::LlvmMetadataLoader));\n     let mut sess = session::build_session_("}, {"sha": "49a697edf4164e64a7eb5fd2b4322d29478228a7", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -58,7 +58,7 @@ impl<'a> ParserObsoleteMethods for parser::Parser<'a> {\n         };\n \n         if !self.obsolete_set.contains(&kind) &&\n-            (error || self.sess.span_diagnostic.can_emit_warnings) {\n+            (error || self.sess.span_diagnostic.flags.can_emit_warnings) {\n             err.note(desc);\n             self.obsolete_set.insert(kind);\n         }"}, {"sha": "7faabc6b3a6c6bf53943d80df9bb1cd4ea3dbf4f", "filename": "src/test/ui/codemap_tests/bad-format-args.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -4,23 +4,23 @@ error: requires at least a format string argument\n 12 |     format!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: expected token: `,`\n   --> $DIR/bad-format-args.rs:13:5\n    |\n 13 |     format!(\"\" 1);\n    |     ^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: expected token: `,`\n   --> $DIR/bad-format-args.rs:14:5\n    |\n 14 |     format!(\"\", 1 1);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "bb91bbbc9e320661c7d4b00d3512ed67804fbda7", "filename": "src/test/ui/codemap_tests/issue-28308.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -4,7 +4,7 @@ error[E0600]: cannot apply unary operator `!` to type `&'static str`\n 12 |     assert!(\"foo\");\n    |     ^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "7d5055deb895aa5630cb3d45abee0d43f4124ed3", "filename": "src/test/ui/cross-crate-macro-backtrace/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate-macro-backtrace%2Fmain.stderr?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -4,7 +4,7 @@ error: 1 positional argument in format string, but no arguments were given\n 16 |     myprintln!(\"{}\"); //~ ERROR in this macro\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "1da8833e0f838bd57f6f8b301d0714ac2edff4b4", "filename": "src/test/ui/fmt/format-string-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -5,7 +5,7 @@ error: invalid format string: expected `'}'` but string was terminated\n    |     ^^^^^^^^^^^^^^\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n   --> $DIR/format-string-error.rs:14:5\n@@ -14,7 +14,7 @@ error: invalid format string: unmatched `}` found\n    |     ^^^^^^^^^^^^^^\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ea8aafadc8e79fb9a289367ec0e08a6ced4a1b5e", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -9,7 +9,7 @@ error[E0597]: borrowed value does not live long enough\n    | - temporary value needs to live until here\n    |\n    = note: consider using a `let` binding to increase its lifetime\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "eeed0d78158c8ed6e74c4be3452e7982315ba6a3", "filename": "src/test/ui/macro_backtrace/auxiliary/ping.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fmacro_backtrace%2Fauxiliary%2Fping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fmacro_backtrace%2Fauxiliary%2Fping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fauxiliary%2Fping.rs?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the macro backtrace facility works (supporting file)\n+\n+// a non-local macro\n+#[macro_export]\n+macro_rules! ping {\n+    () => {\n+        pong!();\n+    }\n+}\n+"}, {"sha": "488aeddbf549b1fba0712c63e73f1a56fbcb5ea9", "filename": "src/test/ui/macro_backtrace/main.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the macro backtrace facility works\n+// aux-build:ping.rs\n+// compile-flags: -Z external-macro-backtrace\n+\n+#[macro_use] extern crate ping;\n+\n+// a local macro\n+macro_rules! pong {\n+    () => { syntax error };\n+}\n+\n+fn main() {\n+    pong!();\n+    ping!();\n+}"}, {"sha": "37f3d450215727eebcd793a9d713d80f7ecc5e1a", "filename": "src/test/ui/macro_backtrace/main.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.stderr?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -0,0 +1,21 @@\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n+  --> $DIR/main.rs:19:20\n+   |\n+19 |     () => { syntax error };\n+   |                   -^^^^^ unexpected token\n+   |                   |\n+   |                   expected one of 8 possible tokens here\n+$DIR/main.rs:23:5: 23:13 note: in this expansion of pong! (defined in $DIR/main.rs)\n+\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n+  --> $DIR/main.rs:19:20\n+   |\n+19 |     () => { syntax error };\n+   |                   -^^^^^ unexpected token\n+   |                   |\n+   |                   expected one of 8 possible tokens here\n+$DIR/main.rs:24:5: 24:13 note: in this expansion of ping! (defined in <ping macros>)\n+<ping macros>:1:11: 1:24 note: in this expansion of pong! (defined in $DIR/main.rs)\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "cb27bb2281d263a17e41ef3edc9434f519355467", "filename": "src/test/ui/macros/format-foreign.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -11,7 +11,7 @@ error: multiple unused formatting arguments\n    = help: `%.*3$s` should be written as `{:.2$}`\n    = help: `%s` should be written as `{}`\n    = note: printf formatting not supported; see the documentation for `std::fmt`\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: argument never used\n   --> $DIR/format-foreign.rs:13:29"}, {"sha": "0205e9a9bfca3263e77dacd14676a6ede6edc1a2", "filename": "src/test/ui/macros/format-unused-lables.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -8,7 +8,7 @@ error: multiple unused formatting arguments\n    |                      |    unused\n    |                      unused\n    |\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: multiple unused formatting arguments\n   --> $DIR/format-unused-lables.rs:14:5\n@@ -23,7 +23,7 @@ error: multiple unused formatting arguments\n 18 | |     );\n    | |______^\n    |\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: named argument never used\n   --> $DIR/format-unused-lables.rs:20:35\n@@ -47,7 +47,7 @@ error: multiple unused formatting arguments\n    |\n    = help: `$STUFF` should be written as `{STUFF}`\n    = note: shell formatting not supported; see the documentation for `std::fmt`\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "54b1d47710c979252749f8f022a423df92c96f29", "filename": "src/test/ui/reachable/expr_again.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n 13 | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "8a17d4e6278cc862d2a6c039dcf5a20ec8abd660", "filename": "src/test/ui/reachable/expr_block.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -16,7 +16,7 @@ error: unreachable statement\n 36 |         println!(\"foo\");\n    |         ^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2b77f5bb3ca54ee7425c9601714e8849419e4ecd", "filename": "src/test/ui/reachable/expr_if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n 14 | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "bcfe2c5bd634b42f85b0124dd362187d9e87669a", "filename": "src/test/ui/reachable/expr_loop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -9,23 +9,23 @@ note: lint level defined here\n    |\n 14 | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_loop.rs:31:5\n    |\n 31 |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_loop.rs:41:5\n    |\n 41 |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "dcfefe109c383c6a807198da7acca931303e8a5b", "filename": "src/test/ui/reachable/expr_match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -16,15 +16,15 @@ error: unreachable statement\n 25 |     println!(\"I am dead\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_match.rs:35:5\n    |\n 35 |     println!(\"I am dead\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "31e63c324d2b16f6530aa43af501c50f5ade5ffe", "filename": "src/test/ui/reachable/expr_while.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -9,23 +9,23 @@ note: lint level defined here\n    |\n 14 | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_while.rs:33:9\n    |\n 33 |         println!(\"I am dead.\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_while.rs:35:5\n    |\n 35 |     println!(\"I am, too.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "07f49d999a4f4987bc0f42c4c64a652d0760b5a4", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -56,7 +56,7 @@ error[E0308]: mismatched types\n    = note: expected type `&mut std::string::String`\n               found type `std::string::String`\n    = help: try with `&mut format!(\"foo\")`\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "22eecb9d882f6307c8c69798e5cc16eeec99f8f1", "filename": "src/test/ui/span/issue-33884.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -6,7 +6,7 @@ error[E0308]: mismatched types\n    |\n    = note: expected type `std::fmt::Arguments<'_>`\n               found type `std::string::String`\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "0879cb5fac251232db12d6cafd5ca4464c7a0217", "filename": "src/test/ui/span/issue-40157.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -8,7 +8,7 @@ error[E0597]: `foo` does not live long enough\n    |      |                                              borrow occurs here\n    |      borrowed value needs to live until here\n    |\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f9dbddd226f099adc456d6e2b147f6531cbafd34", "filename": "src/test/ui/span/slice-borrow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -9,7 +9,7 @@ error[E0597]: borrowed value does not live long enough\n 19 | }\n    | - temporary value needs to live until here\n    |\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "923dcd01070b8c407473b0ff58718f76e6703a97", "filename": "src/test/ui/type-check/cannot_infer_local_or_vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec.stderr?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -6,7 +6,7 @@ error[E0282]: type annotations needed\n    |         |\n    |         consider giving `x` a type\n    |\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "24f2cef4a6c6927e395fa8088aa19180534f09c3", "filename": "src/test/ui/type-check/cannot_infer_local_or_vec_in_tuples.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bac7c53bc3842b494af098dbab8723fde9c97da2/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr?ref=bac7c53bc3842b494af098dbab8723fde9c97da2", "patch": "@@ -6,7 +6,7 @@ error[E0282]: type annotations needed\n    |         |\n    |         consider giving the pattern a type\n    |\n-   = note: this error originates in a macro outside of the current crate\n+   = note: this error originates in a macro outside of the current crate (run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}]}