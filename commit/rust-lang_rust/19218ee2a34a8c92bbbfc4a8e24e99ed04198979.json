{"sha": "19218ee2a34a8c92bbbfc4a8e24e99ed04198979", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MjE4ZWUyYTM0YThjOTJiYmJmYzRhOGUyNGU5OWVkMDQxOTg5Nzk=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-07-11T02:16:35Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-07-11T02:16:35Z"}, "message": "Fix make tidy", "tree": {"sha": "2c6a6fe57814e3ee349bd63237a0f04aec543798", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c6a6fe57814e3ee349bd63237a0f04aec543798"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19218ee2a34a8c92bbbfc4a8e24e99ed04198979", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19218ee2a34a8c92bbbfc4a8e24e99ed04198979", "html_url": "https://github.com/rust-lang/rust/commit/19218ee2a34a8c92bbbfc4a8e24e99ed04198979", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19218ee2a34a8c92bbbfc4a8e24e99ed04198979/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990", "html_url": "https://github.com/rust-lang/rust/commit/1a268f4d1b085acc06daf3c13ad6ad3ea30f4990"}], "stats": {"total": 60, "additions": 34, "deletions": 26}, "files": [{"sha": "6017c88bf87250c617ce66b2c3f3e1712041198d", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/19218ee2a34a8c92bbbfc4a8e24e99ed04198979/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19218ee2a34a8c92bbbfc4a8e24e99ed04198979/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=19218ee2a34a8c92bbbfc4a8e24e99ed04198979", "patch": "@@ -10,14 +10,11 @@\n \n //! See the Book for more information.\n \n-#![allow(non_camel_case_types)]\n-\n pub use self::LateBoundRegionConversionTime::*;\n pub use self::RegionVariableOrigin::*;\n pub use self::SubregionOrigin::*;\n pub use self::TypeOrigin::*;\n pub use self::ValuePairs::*;\n-pub use self::fixup_err::*;\n pub use middle::ty::IntVarValue;\n pub use self::freshen::TypeFreshener;\n pub use self::region_inference::GenericKind;\n@@ -65,7 +62,7 @@ pub mod unify_key;\n \n pub type Bound<T> = Option<T>;\n pub type UnitResult<'tcx> = RelateResult<'tcx, ()>; // \"unify result\"\n-pub type fres<T> = Result<T, fixup_err>; // \"fixup result\"\n+pub type FixupResult<T> = Result<T, FixupError>; // \"fixup result\"\n \n pub struct InferCtxt<'a, 'tcx: 'a> {\n     pub tcx: &'a ty::ctxt<'tcx>,\n@@ -313,23 +310,25 @@ pub enum RegionVariableOrigin {\n }\n \n #[derive(Copy, Clone, Debug)]\n-pub enum fixup_err {\n-    unresolved_int_ty(IntVid),\n-    unresolved_float_ty(FloatVid),\n-    unresolved_ty(TyVid)\n+pub enum FixupError {\n+    UnresolvedIntTy(IntVid),\n+    UnresolvedFloatTy(FloatVid),\n+    UnresolvedTy(TyVid)\n }\n \n-pub fn fixup_err_to_string(f: fixup_err) -> String {\n+pub fn fixup_err_to_string(f: FixupError) -> String {\n+    use self::FixupError::*;\n+\n     match f {\n-      unresolved_int_ty(_) => {\n+      UnresolvedIntTy(_) => {\n           \"cannot determine the type of this integer; add a suffix to \\\n            specify the type explicitly\".to_string()\n       }\n-      unresolved_float_ty(_) => {\n+      UnresolvedFloatTy(_) => {\n           \"cannot determine the type of this number; add a suffix to specify \\\n            the type explicitly\".to_string()\n       }\n-      unresolved_ty(_) => \"unconstrained type\".to_string(),\n+      UnresolvedTy(_) => \"unconstrained type\".to_string(),\n     }\n }\n \n@@ -1169,7 +1168,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         if ty.has_infer_types() || ty.references_error() { Err(()) } else { Ok(ty) }\n     }\n \n-    pub fn fully_resolve<T:TypeFoldable<'tcx>>(&self, value: &T) -> fres<T> {\n+    pub fn fully_resolve<T:TypeFoldable<'tcx>>(&self, value: &T) -> FixupResult<T> {\n         /*!\n          * Attempts to resolve all type/region variables in\n          * `value`. Region inference must have been run already (e.g.,"}, {"sha": "39807002b58a167c67785fdf1cb4f9a23ccdff6e", "filename": "src/librustc/middle/infer/resolve.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/19218ee2a34a8c92bbbfc4a8e24e99ed04198979/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19218ee2a34a8c92bbbfc4a8e24e99ed04198979/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fresolve.rs?ref=19218ee2a34a8c92bbbfc4a8e24e99ed04198979", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::{InferCtxt, fixup_err, fres, unresolved_ty, unresolved_int_ty, unresolved_float_ty};\n+use super::{InferCtxt, FixupError, FixupResult};\n use middle::ty::{self, Ty, HasTypeFlags};\n use middle::ty_fold::{self, TypeFoldable};\n \n@@ -51,7 +51,7 @@ impl<'a, 'tcx> ty_fold::TypeFolder<'tcx> for OpportunisticTypeResolver<'a, 'tcx>\n /// Full type resolution replaces all type and region variables with\n /// their concrete results. If any variable cannot be replaced (never unified, etc)\n /// then an `Err` result is returned.\n-pub fn fully_resolve<'a, 'tcx, T>(infcx: &InferCtxt<'a,'tcx>, value: &T) -> fres<T>\n+pub fn fully_resolve<'a, 'tcx, T>(infcx: &InferCtxt<'a,'tcx>, value: &T) -> FixupResult<T>\n     where T : TypeFoldable<'tcx>\n {\n     let mut full_resolver = FullTypeResolver { infcx: infcx, err: None };\n@@ -66,7 +66,7 @@ pub fn fully_resolve<'a, 'tcx, T>(infcx: &InferCtxt<'a,'tcx>, value: &T) -> fres\n // `err` field is not enforcable otherwise.\n struct FullTypeResolver<'a, 'tcx:'a> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n-    err: Option<fixup_err>,\n+    err: Option<FixupError>,\n }\n \n impl<'a, 'tcx> ty_fold::TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n@@ -81,15 +81,15 @@ impl<'a, 'tcx> ty_fold::TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n             let t = self.infcx.shallow_resolve(t);\n             match t.sty {\n                 ty::TyInfer(ty::TyVar(vid)) => {\n-                    self.err = Some(unresolved_ty(vid));\n+                    self.err = Some(FixupError::UnresolvedTy(vid));\n                     self.tcx().types.err\n                 }\n                 ty::TyInfer(ty::IntVar(vid)) => {\n-                    self.err = Some(unresolved_int_ty(vid));\n+                    self.err = Some(FixupError::UnresolvedIntTy(vid));\n                     self.tcx().types.err\n                 }\n                 ty::TyInfer(ty::FloatVar(vid)) => {\n-                    self.err = Some(unresolved_float_ty(vid));\n+                    self.err = Some(FixupError::UnresolvedFloatTy(vid));\n                     self.tcx().types.err\n                 }\n                 ty::TyInfer(_) => {"}, {"sha": "8f44bb670506e736b7f5d066790fdfddead83cf7", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19218ee2a34a8c92bbbfc4a8e24e99ed04198979/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19218ee2a34a8c92bbbfc4a8e24e99ed04198979/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=19218ee2a34a8c92bbbfc4a8e24e99ed04198979", "patch": "@@ -765,7 +765,9 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                         trait_pointer_metadata(cx, t, None, unique_type_id),\n             false)\n         }\n-        ty::TyBox(ty) | ty::TyRawPtr(ty::TypeAndMut{ty, ..}) | ty::TyRef(_, ty::TypeAndMut{ty, ..}) => {\n+        ty::TyBox(ty) |\n+        ty::TyRawPtr(ty::TypeAndMut{ty, ..}) |\n+        ty::TyRef(_, ty::TypeAndMut{ty, ..}) => {\n             match ty.sty {\n                 ty::TySlice(typ) => {\n                     vec_slice_metadata(cx, t, typ, unique_type_id, usage_site_span)"}, {"sha": "c08ab4f0ce670a32404e6116b1e77b148e39705e", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/19218ee2a34a8c92bbbfc4a8e24e99ed04198979/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19218ee2a34a8c92bbbfc4a8e24e99ed04198979/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=19218ee2a34a8c92bbbfc4a8e24e99ed04198979", "patch": "@@ -440,9 +440,12 @@ fn coerce_unsized<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     match (&source.ty.sty, &target.ty.sty) {\n         (&ty::TyBox(a), &ty::TyBox(b)) |\n-        (&ty::TyRef(_, ty::TypeAndMut { ty: a, .. }), &ty::TyRef(_, ty::TypeAndMut { ty: b, .. })) |\n-        (&ty::TyRef(_, ty::TypeAndMut { ty: a, .. }), &ty::TyRawPtr(ty::TypeAndMut { ty: b, .. })) |\n-        (&ty::TyRawPtr(ty::TypeAndMut { ty: a, .. }), &ty::TyRawPtr(ty::TypeAndMut { ty: b, .. })) => {\n+        (&ty::TyRef(_, ty::TypeAndMut { ty: a, .. }),\n+         &ty::TyRef(_, ty::TypeAndMut { ty: b, .. })) |\n+        (&ty::TyRef(_, ty::TypeAndMut { ty: a, .. }),\n+         &ty::TyRawPtr(ty::TypeAndMut { ty: b, .. })) |\n+        (&ty::TyRawPtr(ty::TypeAndMut { ty: a, .. }),\n+         &ty::TyRawPtr(ty::TypeAndMut { ty: b, .. })) => {\n             let (inner_source, inner_target) = (a, b);\n \n             let (base, old_info) = if !type_is_sized(bcx.tcx(), inner_source) {"}, {"sha": "5be513d8ba48222b8a6183891581407ce56c634b", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19218ee2a34a8c92bbbfc4a8e24e99ed04198979/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19218ee2a34a8c92bbbfc4a8e24e99ed04198979/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=19218ee2a34a8c92bbbfc4a8e24e99ed04198979", "patch": "@@ -193,7 +193,9 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n         ty::TyUint(t) => Type::uint_from_ty(cx, t),\n         ty::TyFloat(t) => Type::float_from_ty(cx, t),\n \n-        ty::TyBox(ty) | ty::TyRef(_, ty::TypeAndMut{ty, ..}) | ty::TyRawPtr(ty::TypeAndMut{ty, ..}) => {\n+        ty::TyBox(ty) |\n+        ty::TyRef(_, ty::TypeAndMut{ty, ..}) |\n+        ty::TyRawPtr(ty::TypeAndMut{ty, ..}) => {\n             if type_is_sized(cx.tcx(), ty) {\n                 Type::i8p(cx)\n             } else {\n@@ -352,7 +354,9 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n           adt::incomplete_type_of(cx, &*repr, \"closure\")\n       }\n \n-      ty::TyBox(ty) | ty::TyRef(_, ty::TypeAndMut{ty, ..}) | ty::TyRawPtr(ty::TypeAndMut{ty, ..}) => {\n+      ty::TyBox(ty) |\n+      ty::TyRef(_, ty::TypeAndMut{ty, ..}) |\n+      ty::TyRawPtr(ty::TypeAndMut{ty, ..}) => {\n           if !type_is_sized(cx.tcx(), ty) {\n               if let ty::TyStr = ty.sty {\n                   // This means we get a nicer name in the output (str is always"}, {"sha": "9d7ff3b9613d0ffb9a12796c4dc9dfd0ab99add7", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19218ee2a34a8c92bbbfc4a8e24e99ed04198979/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19218ee2a34a8c92bbbfc4a8e24e99ed04198979/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=19218ee2a34a8c92bbbfc4a8e24e99ed04198979", "patch": "@@ -390,7 +390,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n                    reason: reason }\n     }\n \n-    fn report_error(&self, e: infer::fixup_err) {\n+    fn report_error(&self, e: infer::FixupError) {\n         self.writeback_errors.set(true);\n         if !self.tcx.sess.has_errors() {\n             match self.reason {"}]}