{"sha": "50d749770836ddb001944eb3ffa37675881c48e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZDc0OTc3MDgzNmRkYjAwMTk0NGViM2ZmYTM3Njc1ODgxYzQ4ZTg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-31T11:13:04Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-31T14:28:15Z"}, "message": "Write scalars separately for Abi::ScalarPair in write_cvalue\n\nThis makes it easier to perform store to load forwarding", "tree": {"sha": "dd2ca5f67dc1075ac84e3554b17b58a70545d8a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd2ca5f67dc1075ac84e3554b17b58a70545d8a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50d749770836ddb001944eb3ffa37675881c48e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50d749770836ddb001944eb3ffa37675881c48e8", "html_url": "https://github.com/rust-lang/rust/commit/50d749770836ddb001944eb3ffa37675881c48e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50d749770836ddb001944eb3ffa37675881c48e8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "958c58545f0fa8753e8ba978174dc55b577fa605", "url": "https://api.github.com/repos/rust-lang/rust/commits/958c58545f0fa8753e8ba978174dc55b577fa605", "html_url": "https://github.com/rust-lang/rust/commit/958c58545f0fa8753e8ba978174dc55b577fa605"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "17beb96b1d202f3c6d2f74cabf191de38604675e", "filename": "src/value_and_place.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/50d749770836ddb001944eb3ffa37675881c48e8/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d749770836ddb001944eb3ffa37675881c48e8/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=50d749770836ddb001944eb3ffa37675881c48e8", "patch": "@@ -458,21 +458,33 @@ impl<'tcx> CPlace<'tcx> {\n             CPlaceInner::Addr(_, Some(_)) => bug!(\"Can't write value to unsized place {:?}\", self),\n         };\n \n+        match self.layout().abi {\n+            // FIXME make Abi::Vector work too\n+            Abi::Scalar(_) => {\n+                let val = from.load_scalar(fx);\n+                to_ptr.store(fx, val, MemFlags::new());\n+                return;\n+            }\n+            Abi::ScalarPair(ref a_scalar, ref b_scalar) => {\n+                let (value, extra) = from.load_scalar_pair(fx);\n+                let b_offset = scalar_pair_calculate_b_offset(fx.tcx, a_scalar, b_scalar);\n+                to_ptr.store(fx, value, MemFlags::new());\n+                to_ptr.offset(fx, b_offset).store(fx, extra, MemFlags::new());\n+                return;\n+            }\n+            _ => {}\n+        }\n+\n         match from.0 {\n             CValueInner::ByVal(val) => {\n                 to_ptr.store(fx, val, MemFlags::new());\n             }\n-            CValueInner::ByValPair(value, extra) => match dst_layout.abi {\n-                Abi::ScalarPair(ref a_scalar, ref b_scalar) => {\n-                    let b_offset = scalar_pair_calculate_b_offset(fx.tcx, a_scalar, b_scalar);\n-                    to_ptr.store(fx, value, MemFlags::new());\n-                    to_ptr.offset(fx, b_offset).store(fx, extra, MemFlags::new());\n-                }\n-                _ => bug!(\n+            CValueInner::ByValPair(value, extra) => {\n+                bug!(\n                     \"Non ScalarPair abi {:?} for ByValPair CValue\",\n                     dst_layout.abi\n-                ),\n-            },\n+                );\n+            }\n             CValueInner::ByRef(from_ptr) => {\n                 let from_addr = from_ptr.get_addr(fx);\n                 let to_addr = to_ptr.get_addr(fx);"}]}