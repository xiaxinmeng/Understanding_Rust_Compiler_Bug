{"sha": "b5d7783546f938c7c2903b4d5143ff8e8e612674", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZDc3ODM1NDZmOTM4YzdjMjkwM2I0ZDUxNDNmZjhlOGU2MTI2NzQ=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2016-04-20T06:10:40Z"}, "committer": {"name": "James Miller", "email": "james@aatch.net", "date": "2016-04-28T01:18:51Z"}, "message": "Check when building invoke as well as calls\n\nLLVM's assertion doesn't provide much insight as to what the problem\nwas. We were already checking `call` instructions ourselves, so this\nbrings the checks from there to `invoke`.\n\nBoth the `invoke` and `call` checking is controlled by\n`debug_assertions`.", "tree": {"sha": "eb54fb028fa6dbe5ee877cca310bacbe0e0d0eb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb54fb028fa6dbe5ee877cca310bacbe0e0d0eb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5d7783546f938c7c2903b4d5143ff8e8e612674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5d7783546f938c7c2903b4d5143ff8e8e612674", "html_url": "https://github.com/rust-lang/rust/commit/b5d7783546f938c7c2903b4d5143ff8e8e612674", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5d7783546f938c7c2903b4d5143ff8e8e612674/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bcee269b50def69d73bd588b1619ec6a4756662", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bcee269b50def69d73bd588b1619ec6a4756662", "html_url": "https://github.com/rust-lang/rust/commit/3bcee269b50def69d73bd588b1619ec6a4756662"}], "stats": {"total": 56, "additions": 41, "deletions": 15}, "files": [{"sha": "c7de7fd3695d1a908ba907ece97d442864fe4668", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 41, "deletions": 15, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b5d7783546f938c7c2903b4d5143ff8e8e612674/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d7783546f938c7c2903b4d5143ff8e8e612674/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=b5d7783546f938c7c2903b4d5143ff8e8e612674", "patch": "@@ -165,8 +165,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                   args: &[ValueRef],\n                   then: BasicBlockRef,\n                   catch: BasicBlockRef,\n-                  bundle: Option<&OperandBundleDef>)\n-                  -> ValueRef {\n+                  bundle: Option<&OperandBundleDef>) -> ValueRef {\n         self.count_insn(\"invoke\");\n \n         debug!(\"Invoke {:?} with args ({})\",\n@@ -176,6 +175,31 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                    .collect::<Vec<String>>()\n                    .join(\", \"));\n \n+        if cfg!(debug_assertions) {\n+            let mut fn_ty = val_ty(llfn);\n+            // Strip off pointers\n+            while fn_ty.kind() == llvm::TypeKind::Pointer {\n+                fn_ty = fn_ty.element_type();\n+            }\n+\n+            assert!(fn_ty.kind() == llvm::TypeKind::Function,\n+                    \"builder::invoke not passed a function\");\n+\n+            let param_tys = fn_ty.func_params();\n+\n+            let iter = param_tys.into_iter()\n+                .zip(args.iter().map(|&v| val_ty(v)));\n+            for (i, (expected_ty, actual_ty)) in iter.enumerate() {\n+                if expected_ty != actual_ty {\n+                    bug!(\"Type mismatch in invoke of {:?}. \\\n+                      Expected {:?} for param {}, got {:?}\",\n+                     Value(llfn),\n+                     expected_ty, i, actual_ty);\n+\n+                }\n+            }\n+        }\n+\n         let bundle = bundle.as_ref().map(|b| b.raw()).unwrap_or(0 as *mut _);\n \n         unsafe {\n@@ -856,26 +880,28 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                    .collect::<Vec<String>>()\n                    .join(\", \"));\n \n-        let mut fn_ty = val_ty(llfn);\n-        // Strip off pointers\n-        while fn_ty.kind() == llvm::TypeKind::Pointer {\n-            fn_ty = fn_ty.element_type();\n-        }\n+        if cfg!(debug_assertions) {\n+            let mut fn_ty = val_ty(llfn);\n+            // Strip off pointers\n+            while fn_ty.kind() == llvm::TypeKind::Pointer {\n+                fn_ty = fn_ty.element_type();\n+            }\n \n-        assert!(fn_ty.kind() == llvm::TypeKind::Function,\n-                \"builder::call not passed a function\");\n+            assert!(fn_ty.kind() == llvm::TypeKind::Function,\n+                    \"builder::call not passed a function\");\n \n-        let param_tys = fn_ty.func_params();\n+            let param_tys = fn_ty.func_params();\n \n-        let iter = param_tys.into_iter()\n-            .zip(args.iter().map(|&v| val_ty(v)));\n-        for (i, (expected_ty, actual_ty)) in iter.enumerate() {\n-            if expected_ty != actual_ty {\n-                bug!(\"Type mismatch in function call of {:?}. \\\n+            let iter = param_tys.into_iter()\n+                .zip(args.iter().map(|&v| val_ty(v)));\n+            for (i, (expected_ty, actual_ty)) in iter.enumerate() {\n+                if expected_ty != actual_ty {\n+                    bug!(\"Type mismatch in function call of {:?}. \\\n                       Expected {:?} for param {}, got {:?}\",\n                      Value(llfn),\n                      expected_ty, i, actual_ty);\n \n+                }\n             }\n         }\n "}]}