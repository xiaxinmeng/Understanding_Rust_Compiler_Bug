{"sha": "2205c3fa5ffdb8794917d541e580742f527be8f1", "node_id": "C_kwDOAAsO6NoAKDIyMDVjM2ZhNWZmZGI4Nzk0OTE3ZDU0MWU1ODA3NDJmNTI3YmU4ZjE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-03-03T11:29:21Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-27T15:58:46Z"}, "message": "Add a macro to conveniently implement marker traits", "tree": {"sha": "b278f6c579d8034fb7ecccc1af1b8c09732984b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b278f6c579d8034fb7ecccc1af1b8c09732984b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2205c3fa5ffdb8794917d541e580742f527be8f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2205c3fa5ffdb8794917d541e580742f527be8f1", "html_url": "https://github.com/rust-lang/rust/commit/2205c3fa5ffdb8794917d541e580742f527be8f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2205c3fa5ffdb8794917d541e580742f527be8f1/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7234d63ea4880c62fa2ed0078c465cc07bbbb289", "url": "https://api.github.com/repos/rust-lang/rust/commits/7234d63ea4880c62fa2ed0078c465cc07bbbb289", "html_url": "https://github.com/rust-lang/rust/commit/7234d63ea4880c62fa2ed0078c465cc07bbbb289"}], "stats": {"total": 222, "additions": 114, "deletions": 108}, "files": [{"sha": "b269a3bcb000ed89d00d9e23eef846f396669ace", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2205c3fa5ffdb8794917d541e580742f527be8f1/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2205c3fa5ffdb8794917d541e580742f527be8f1/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=2205c3fa5ffdb8794917d541e580742f527be8f1", "patch": "@@ -162,6 +162,7 @@\n #![feature(const_waker)]\n #![feature(core_panic)]\n #![feature(duration_consts_float)]\n+#![feature(internal_impls_macro)]\n #![feature(ip)]\n #![feature(is_ascii_octdigit)]\n #![feature(maybe_uninit_uninit_array)]"}, {"sha": "8c240661b2b442f2e2b9d2ff95fcca71863bca64", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 113, "deletions": 108, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/2205c3fa5ffdb8794917d541e580742f527be8f1/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2205c3fa5ffdb8794917d541e580742f527be8f1/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=2205c3fa5ffdb8794917d541e580742f527be8f1", "patch": "@@ -12,6 +12,60 @@ use crate::fmt::Debug;\n use crate::hash::Hash;\n use crate::hash::Hasher;\n \n+/// Implements a given marker trait for multiple types at the same time.\n+///\n+/// The basic syntax looks like this:\n+/// ```ignore private macro\n+/// marker_impls! { MarkerTrait for u8, i8 }\n+/// ```\n+/// You can also implement `unsafe` traits\n+/// ```ignore private macro\n+/// marker_impls! { unsafe MarkerTrait for u8, i8 }\n+/// ```\n+/// Add attributes to all impls:\n+/// ```ignore private macro\n+/// marker_impls! {\n+///     #[allow(lint)]\n+///     #[unstable(feature = \"marker_trait\", issue = \"none\")]\n+///     MarkerTrait for u8, i8\n+/// }\n+/// ```\n+/// And use generics:\n+/// ```ignore private macro\n+/// marker_impls! {\n+///     MarkerTrait for\n+///         u8, i8,\n+///         {T: ?Sized} *const T,\n+///         {T: ?Sized} *mut T,\n+///         {T: MarkerTrait} PhantomData<T>,\n+///         u32,\n+/// }\n+/// ```\n+#[unstable(feature = \"internal_impls_macro\", issue = \"none\")]\n+macro marker_impls {\n+    ( $(#[$($meta:tt)*])* $Trait:ident for $( $({$($bounds:tt)*})? $T:ty ),+ $(,)?) => {\n+        // This inner macro is needed because... idk macros are weird.\n+        // It allows repeating `meta` on all impls.\n+        #[unstable(feature = \"internal_impls_macro\", issue = \"none\")]\n+        macro _impl {\n+            ( $$({$$($$bounds_:tt)*})? $$T_:ty ) => {\n+                $(#[$($meta)*])* impl<$$($$($$bounds_)*)?> $Trait for $$T_ {}\n+            }\n+        }\n+        $( _impl! { $({$($bounds)*})? $T } )+\n+    },\n+    ( $(#[$($meta:tt)*])* unsafe $Trait:ident for $( $({$($bounds:tt)*})? $T:ty ),+ $(,)?) => {\n+        #[unstable(feature = \"internal_impls_macro\", issue = \"none\")]\n+        macro _impl {\n+            ( $$({$$($$bounds_:tt)*})? $$T_:ty ) => {\n+                $(#[$($meta)*])* unsafe impl<$$($$($$bounds_)*)?> $Trait for $$T_ {}\n+            }\n+        }\n+\n+        $( _impl! { $({$($bounds)*})? $T } )+\n+    },\n+}\n+\n /// Types that can be transferred across thread boundaries.\n ///\n /// This trait is automatically implemented when the compiler determines it's\n@@ -214,34 +268,14 @@ pub trait StructuralEq {\n     // Empty.\n }\n \n-#[unstable(feature = \"structural_match\", issue = \"31434\")]\n-impl StructuralEq for usize {}\n-#[unstable(feature = \"structural_match\", issue = \"31434\")]\n-impl StructuralEq for u8 {}\n-#[unstable(feature = \"structural_match\", issue = \"31434\")]\n-impl StructuralEq for u16 {}\n-#[unstable(feature = \"structural_match\", issue = \"31434\")]\n-impl StructuralEq for u32 {}\n-#[unstable(feature = \"structural_match\", issue = \"31434\")]\n-impl StructuralEq for u64 {}\n-#[unstable(feature = \"structural_match\", issue = \"31434\")]\n-impl StructuralEq for u128 {}\n-#[unstable(feature = \"structural_match\", issue = \"31434\")]\n-impl StructuralEq for isize {}\n-#[unstable(feature = \"structural_match\", issue = \"31434\")]\n-impl StructuralEq for i8 {}\n-#[unstable(feature = \"structural_match\", issue = \"31434\")]\n-impl StructuralEq for i16 {}\n-#[unstable(feature = \"structural_match\", issue = \"31434\")]\n-impl StructuralEq for i32 {}\n-#[unstable(feature = \"structural_match\", issue = \"31434\")]\n-impl StructuralEq for i64 {}\n-#[unstable(feature = \"structural_match\", issue = \"31434\")]\n-impl StructuralEq for i128 {}\n-#[unstable(feature = \"structural_match\", issue = \"31434\")]\n-impl StructuralEq for bool {}\n-#[unstable(feature = \"structural_match\", issue = \"31434\")]\n-impl StructuralEq for char {}\n+marker_impls! {\n+    #[unstable(feature = \"structural_match\", issue = \"31434\")]\n+    StructuralEq for\n+        usize, u8, u16, u32, u64, u128,\n+        isize, i8, i16, i32, i64, i128,\n+        bool,\n+        char,\n+}\n \n /// Types whose values can be duplicated simply by copying bits.\n ///\n@@ -430,6 +464,30 @@ pub macro Copy($item:item) {\n     /* compiler built-in */\n }\n \n+// Implementations of `Copy` for primitive types.\n+//\n+// Implementations that cannot be described in Rust\n+// are implemented in `traits::SelectionContext::copy_clone_conditions()`\n+// in `rustc_trait_selection`.\n+marker_impls! {\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    Copy for\n+        usize, u8, u16, u32, u64, u128,\n+        isize, i8, i16, i32, i64, i128,\n+        f32, f64,\n+        bool, char,\n+        {T: ?Sized} *const T,\n+        {T: ?Sized} *mut T,\n+\n+}\n+\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n+impl Copy for ! {}\n+\n+/// Shared references can be copied, but mutable references *cannot*!\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> Copy for &T {}\n+\n /// Types for which it is safe to share references between threads.\n ///\n /// This trait is automatically implemented when the compiler determines\n@@ -802,11 +860,14 @@ pub trait DiscriminantKind {\n pub(crate) unsafe auto trait Freeze {}\n \n impl<T: ?Sized> !Freeze for UnsafeCell<T> {}\n-unsafe impl<T: ?Sized> Freeze for PhantomData<T> {}\n-unsafe impl<T: ?Sized> Freeze for *const T {}\n-unsafe impl<T: ?Sized> Freeze for *mut T {}\n-unsafe impl<T: ?Sized> Freeze for &T {}\n-unsafe impl<T: ?Sized> Freeze for &mut T {}\n+marker_impls! {\n+    unsafe Freeze for\n+        {T: ?Sized} PhantomData<T>,\n+        {T: ?Sized} *const T,\n+        {T: ?Sized} *mut T,\n+        {T: ?Sized} &T,\n+        {T: ?Sized} &mut T,\n+}\n \n /// Types that can be safely moved after being pinned.\n ///\n@@ -867,17 +928,19 @@ pub struct PhantomPinned;\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl !Unpin for PhantomPinned {}\n \n-#[stable(feature = \"pin\", since = \"1.33.0\")]\n-impl<'a, T: ?Sized + 'a> Unpin for &'a T {}\n-\n-#[stable(feature = \"pin\", since = \"1.33.0\")]\n-impl<'a, T: ?Sized + 'a> Unpin for &'a mut T {}\n-\n-#[stable(feature = \"pin_raw\", since = \"1.38.0\")]\n-impl<T: ?Sized> Unpin for *const T {}\n+marker_impls! {\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    Unpin for\n+        {T: ?Sized} &T,\n+        {T: ?Sized} &mut T,\n+}\n \n-#[stable(feature = \"pin_raw\", since = \"1.38.0\")]\n-impl<T: ?Sized> Unpin for *mut T {}\n+marker_impls! {\n+    #[stable(feature = \"pin_raw\", since = \"1.38.0\")]\n+    Unpin for\n+        {T: ?Sized} *const T,\n+        {T: ?Sized} *mut T,\n+}\n \n /// A marker for types that can be dropped.\n ///\n@@ -917,72 +980,14 @@ pub trait PointerLike {}\n #[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n #[rustc_on_unimplemented(message = \"`{Self}` can't be used as a const parameter type\")]\n pub trait ConstParamTy: StructuralEq {}\n-#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n-impl ConstParamTy for usize {}\n-#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n-impl ConstParamTy for u8 {}\n-#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n-impl ConstParamTy for u16 {}\n-#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n-impl ConstParamTy for u32 {}\n-#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n-impl ConstParamTy for u64 {}\n-#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n-impl ConstParamTy for u128 {}\n-#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n-impl ConstParamTy for isize {}\n-#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n-impl ConstParamTy for i8 {}\n-#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n-impl ConstParamTy for i16 {}\n-#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n-impl ConstParamTy for i32 {}\n-#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n-impl ConstParamTy for i64 {}\n-#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n-impl ConstParamTy for i128 {}\n-#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n-impl ConstParamTy for bool {}\n-#[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n-impl ConstParamTy for char {}\n-\n-/// Implementations of `Copy` for primitive types.\n-///\n-/// Implementations that cannot be described in Rust\n-/// are implemented in `traits::SelectionContext::copy_clone_conditions()`\n-/// in `rustc_trait_selection`.\n-mod copy_impls {\n-\n-    use super::Copy;\n-\n-    macro_rules! impl_copy {\n-        ($($t:ty)*) => {\n-            $(\n-                #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-                impl Copy for $t {}\n-            )*\n-        }\n-    }\n \n-    impl_copy! {\n-        usize u8 u16 u32 u64 u128\n-        isize i8 i16 i32 i64 i128\n-        f32 f64\n-        bool char\n-    }\n-\n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n-    impl Copy for ! {}\n-\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<T: ?Sized> Copy for *const T {}\n-\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<T: ?Sized> Copy for *mut T {}\n-\n-    /// Shared references can be copied, but mutable references *cannot*!\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<T: ?Sized> Copy for &T {}\n+marker_impls! {\n+    #[unstable(feature = \"adt_const_params\", issue = \"95174\")]\n+    ConstParamTy for\n+        usize, u8, u16, u32, u64, u128,\n+        isize, i8, i16, i32, i64, i128,\n+        bool,\n+        char,\n }\n \n /// A common trait implemented by all function pointers."}]}