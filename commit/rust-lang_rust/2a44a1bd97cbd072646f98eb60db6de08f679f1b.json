{"sha": "2a44a1bd97cbd072646f98eb60db6de08f679f1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNDRhMWJkOTdjYmQwNzI2NDZmOThlYjYwZGI2ZGUwOGY2NzlmMWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-04-02T16:42:08Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-04-05T09:36:03Z"}, "message": "Fix various warnings, NOTEs, etc", "tree": {"sha": "73e938ce602036d9cc3c7299c7a5babda8d1650d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73e938ce602036d9cc3c7299c7a5babda8d1650d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a44a1bd97cbd072646f98eb60db6de08f679f1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a44a1bd97cbd072646f98eb60db6de08f679f1b", "html_url": "https://github.com/rust-lang/rust/commit/2a44a1bd97cbd072646f98eb60db6de08f679f1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a44a1bd97cbd072646f98eb60db6de08f679f1b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d28f7344125b47b7e991413c5612708ce8d5ed77", "url": "https://api.github.com/repos/rust-lang/rust/commits/d28f7344125b47b7e991413c5612708ce8d5ed77", "html_url": "https://github.com/rust-lang/rust/commit/d28f7344125b47b7e991413c5612708ce8d5ed77"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "95d963a36e3aa97abdd0c3a302f627aeef5052bb", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a44a1bd97cbd072646f98eb60db6de08f679f1b/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a44a1bd97cbd072646f98eb60db6de08f679f1b/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=2a44a1bd97cbd072646f98eb60db6de08f679f1b", "patch": "@@ -1394,7 +1394,7 @@ pub mod funcs {\n             use libc::types::common::posix88::{DIR, dirent_t};\n             use libc::types::os::arch::c95::{c_char, c_int, c_long};\n \n-            // NOTE: On OS X opendir and readdir have two versions,\n+            // NB: On OS X opendir and readdir have two versions,\n             // one for 32-bit kernelspace and one for 64.\n             // We should be linking to the 64-bit ones, called\n             // opendir$INODE64, etc. but for some reason rustc"}, {"sha": "cd1af369570efff738bf46e1fb1055d062a35881", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a44a1bd97cbd072646f98eb60db6de08f679f1b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a44a1bd97cbd072646f98eb60db6de08f679f1b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=2a44a1bd97cbd072646f98eb60db6de08f679f1b", "patch": "@@ -308,7 +308,7 @@ pub fn compile_rest(sess: Session, cfg: ast::crate_cfg,\n \n     };\n \n-    // NOTE: Android hack\n+    // NB: Android hack\n     if sess.targ_cfg.arch == abi::Arm &&\n             (sess.opts.output_type == link::output_type_object ||\n              sess.opts.output_type == link::output_type_exe) {"}, {"sha": "1401d86123e646e2cd7ed46c84cb34b43b5db225", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a44a1bd97cbd072646f98eb60db6de08f679f1b/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a44a1bd97cbd072646f98eb60db6de08f679f1b/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=2a44a1bd97cbd072646f98eb60db6de08f679f1b", "patch": "@@ -211,7 +211,7 @@ use core::prelude::*;\n use middle::pat_util::{pat_bindings};\n use middle::freevars;\n use middle::ty;\n-use middle::typeck::{method_map, method_map_entry};\n+use middle::typeck::{method_map};\n use util::ppaux;\n use util::common::indenter;\n "}, {"sha": "d4a1013e83c85a8e0aaef642303c74213138c4cd", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a44a1bd97cbd072646f98eb60db6de08f679f1b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a44a1bd97cbd072646f98eb60db6de08f679f1b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=2a44a1bd97cbd072646f98eb60db6de08f679f1b", "patch": "@@ -1714,7 +1714,6 @@ fn trans_assign_op(bcx: block,\n     return result_datum.copy_to_datum(bcx, DROP_EXISTING, dst_datum);\n }\n \n-// NOTE: Mode neccessary here?\n fn shorten(+x: ~str) -> ~str {\n     if x.len() > 60 { x.substr(0, 60).to_owned() } else { x }\n }"}, {"sha": "b20678ac092e02c4227264170bf11cf539ef3d1c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a44a1bd97cbd072646f98eb60db6de08f679f1b/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a44a1bd97cbd072646f98eb60db6de08f679f1b/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=2a44a1bd97cbd072646f98eb60db6de08f679f1b", "patch": "@@ -4367,7 +4367,7 @@ pub fn iter_bound_traits_and_supertraits(tcx: ctxt,\n                 for supertrait_refs.each |&supertrait_ref| {\n                     let d_id = supertrait_ref.def_id;\n                     if !supertrait_set.contains_key(&d_id) {\n-                        // NOTE Could have same trait multiple times\n+                        // FIXME(#5527) Could have same trait multiple times\n                         supertrait_set.insert(d_id, ());\n                         trait_ref = supertrait_ref;\n                         seen_def_ids.push(d_id);"}, {"sha": "b0e5ecee01ebbec03dbd4f7802ad1a05e1c8213b", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a44a1bd97cbd072646f98eb60db6de08f679f1b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a44a1bd97cbd072646f98eb60db6de08f679f1b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=2a44a1bd97cbd072646f98eb60db6de08f679f1b", "patch": "@@ -38,7 +38,7 @@ use middle::typeck::infer::combine::Combine;\n use middle::typeck::infer::InferCtxt;\n use middle::typeck::infer::{new_infer_ctxt, resolve_ivar};\n use middle::typeck::infer::{resolve_nested_tvar, resolve_type};\n-use syntax::ast::{crate, def_id, def_mod, def_ty, def_trait};\n+use syntax::ast::{crate, def_id, def_mod, def_trait};\n use syntax::ast::{item, item_impl, item_mod, local_crate, method, trait_ref};\n use syntax::ast;\n use syntax::ast_map::node_item;"}, {"sha": "8dda513106e68f0ad2243f2a9603a714a7e74489", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a44a1bd97cbd072646f98eb60db6de08f679f1b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a44a1bd97cbd072646f98eb60db6de08f679f1b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=2a44a1bd97cbd072646f98eb60db6de08f679f1b", "patch": "@@ -33,16 +33,15 @@ are represented as `ty_param()` instances.\n use core::prelude::*;\n \n use metadata::csearch;\n-use middle::ty::{substs, ty_param_bounds_and_ty, ty_param_substs_and_ty};\n+use middle::ty::{substs, ty_param_bounds_and_ty};\n use middle::ty;\n use middle::typeck::astconv::{AstConv, ty_of_arg};\n use middle::typeck::astconv::{ast_ty_to_ty};\n use middle::typeck::astconv;\n use middle::typeck::infer;\n use middle::typeck::rscope::*;\n use middle::typeck::rscope;\n-use middle::typeck::{CrateCtxt, lookup_def_tcx, no_params, write_ty_to_tcx,\n-                     write_tpt_to_tcx};\n+use middle::typeck::{CrateCtxt, lookup_def_tcx, no_params, write_ty_to_tcx};\n use util::common::{indenter, pluralize};\n use util::ppaux;\n \n@@ -362,7 +361,7 @@ pub fn ensure_supertraits(ccx: &CrateCtxt,\n     for ast_trait_refs.each |&ast_trait_ref| {\n         let trait_ref = instantiate_trait_ref(ccx, ast_trait_ref, rp, generics);\n \n-        // NOTE Could have same trait multiple times\n+        // FIXME(#5527) Could have same trait multiple times\n         if ty_trait_refs.any(|other_trait| other_trait.def_id == trait_ref.def_id) {\n             // This means a trait inherited from the same supertrait more\n             // than once."}, {"sha": "08008ab2bcae08d144a1dc5dc8d3ff2d463a8cf2", "filename": "src/librustdoc/prune_private_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a44a1bd97cbd072646f98eb60db6de08f679f1b/src%2Flibrustdoc%2Fprune_private_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a44a1bd97cbd072646f98eb60db6de08f679f1b/src%2Flibrustdoc%2Fprune_private_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_private_pass.rs?ref=2a44a1bd97cbd072646f98eb60db6de08f679f1b", "patch": "@@ -117,7 +117,7 @@ fn fold_mod(\n                         !doc.methods.is_empty()\n                     } else {\n                         // This is a trait implementation, make it visible\n-                        // NOTE: This is not quite right since this could be an impl\n+                        // NB: This is not quite right since this could be an impl\n                         // of a private trait. We can't know that without running\n                         // resolve though.\n                         true"}, {"sha": "97bc89248acf2abef2a0d7e39feee5533497318f", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a44a1bd97cbd072646f98eb60db6de08f679f1b/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a44a1bd97cbd072646f98eb60db6de08f679f1b/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=2a44a1bd97cbd072646f98eb60db6de08f679f1b", "patch": "@@ -222,7 +222,7 @@ pub fn expand_auto_decode(\n priv impl @ext_ctxt {\n     fn bind_path(\n         &self,\n-        span: span,\n+        _span: span,\n         ident: ast::ident,\n         path: @ast::path,\n         bounds: @OptVec<ast::TyParamBound>"}, {"sha": "32723cf31bc6ff6a7c59dfb7b856caecd1829a2b", "filename": "src/rt/rust_log.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a44a1bd97cbd072646f98eb60db6de08f679f1b/src%2Frt%2Frust_log.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2a44a1bd97cbd072646f98eb60db6de08f679f1b/src%2Frt%2Frust_log.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.cpp?ref=2a44a1bd97cbd072646f98eb60db6de08f679f1b", "patch": "@@ -314,7 +314,7 @@ void update_log_settings(void* crate_map, char* settings) {\n                      n_dirs, &n_matches);\n \n     if (n_matches < n_dirs) {\n-        // NOTE: Android compiler is complaining about format specifiers here\n+        // NB: Android compiler is complaining about format specifiers here\n         // and I don't understand why\n         /*printf(\"warning: got %\" PRIdPTR \" RUST_LOG specs, \"\n                \"enabled %\" PRIdPTR \" flags.\","}]}