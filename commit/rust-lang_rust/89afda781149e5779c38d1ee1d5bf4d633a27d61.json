{"sha": "89afda781149e5779c38d1ee1d5bf4d633a27d61", "node_id": "C_kwDOAAsO6NoAKDg5YWZkYTc4MTE0OWU1Nzc5YzM4ZDFlZTFkNWJmNGQ2MzNhMjdkNjE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-26T09:46:05Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-26T09:50:01Z"}, "message": "Ignore bivariant parameters in test_type_match.", "tree": {"sha": "5c21a66cb2800960cbcd5fb8494e0e741314fd1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c21a66cb2800960cbcd5fb8494e0e741314fd1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89afda781149e5779c38d1ee1d5bf4d633a27d61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89afda781149e5779c38d1ee1d5bf4d633a27d61", "html_url": "https://github.com/rust-lang/rust/commit/89afda781149e5779c38d1ee1d5bf4d633a27d61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89afda781149e5779c38d1ee1d5bf4d633a27d61/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8a2e491ebec34113563cf8683f6fec2646cebb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8a2e491ebec34113563cf8683f6fec2646cebb1", "html_url": "https://github.com/rust-lang/rust/commit/f8a2e491ebec34113563cf8683f6fec2646cebb1"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "10b474efd5aebdc9337b0a3d863fa04d0badc674", "filename": "compiler/rustc_infer/src/infer/outlives/test_type_match.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/89afda781149e5779c38d1ee1d5bf4d633a27d61/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89afda781149e5779c38d1ee1d5bf4d633a27d61/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs?ref=89afda781149e5779c38d1ee1d5bf4d633a27d61", "patch": "@@ -155,14 +155,17 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n         bug!()\n     }\n \n+    #[instrument(level = \"trace\", skip(self))]\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n-        _: ty::Variance,\n+        variance: ty::Variance,\n         _: ty::VarianceDiagInfo<'tcx>,\n         a: T,\n         b: T,\n     ) -> RelateResult<'tcx, T> {\n-        self.relate(a, b)\n+        // Opaque types substs have lifetime parameters.\n+        // We must not check them to be equal, as we never insert anything to make them so.\n+        if variance != ty::Bivariant { self.relate(a, b) } else { Ok(a) }\n     }\n \n     #[instrument(skip(self), level = \"debug\")]"}, {"sha": "7a9826a8dff9142a23652a162fa0bde8945b1df3", "filename": "src/test/ui/impl-trait/issues/issue-104815.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/89afda781149e5779c38d1ee1d5bf4d633a27d61/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-104815.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89afda781149e5779c38d1ee1d5bf4d633a27d61/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-104815.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-104815.rs?ref=89afda781149e5779c38d1ee1d5bf4d633a27d61", "patch": "@@ -0,0 +1,66 @@\n+// check-pass\n+\n+struct It;\n+\n+struct Data {\n+    items: Vec<It>,\n+}\n+\n+impl Data {\n+    fn new() -> Self {\n+        Self {\n+            items: vec![It, It],\n+        }\n+    }\n+\n+    fn content(&self) -> impl Iterator<Item = &It> {\n+        self.items.iter()\n+    }\n+}\n+\n+struct Container<'a> {\n+    name: String,\n+    resolver: Box<dyn Resolver + 'a>,\n+}\n+\n+impl<'a> Container<'a> {\n+    fn new<R: Resolver + 'a>(name: &str, resolver: R) -> Self {\n+        Self {\n+            name: name.to_owned(),\n+            resolver: Box::new(resolver),\n+        }\n+    }\n+}\n+\n+trait Resolver {}\n+\n+impl<R: Resolver> Resolver for &R {}\n+\n+impl Resolver for It {}\n+\n+fn get<'a>(mut items: impl Iterator<Item = &'a It>) -> impl Resolver + 'a {\n+    items.next().unwrap()\n+}\n+\n+fn get2<'a, 'b: 'b>(mut items: impl Iterator<Item = &'a It>) -> impl Resolver + 'a {\n+    items.next().unwrap()\n+}\n+\n+fn main() {\n+    let data = Data::new();\n+    let resolver = get(data.content());\n+\n+    let _ = [\"a\", \"b\"]\n+        .iter()\n+        .map(|&n| Container::new(n, &resolver))\n+        .map(|c| c.name)\n+        .collect::<Vec<_>>();\n+\n+    let resolver = get2(data.content());\n+\n+    let _ = [\"a\", \"b\"]\n+        .iter()\n+        .map(|&n| Container::new(n, &resolver))\n+        .map(|c| c.name)\n+        .collect::<Vec<_>>();\n+}"}]}