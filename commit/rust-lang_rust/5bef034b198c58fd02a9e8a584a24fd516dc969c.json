{"sha": "5bef034b198c58fd02a9e8a584a24fd516dc969c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZWYwMzRiMTk4YzU4ZmQwMmE5ZThhNTg0YTI0ZmQ1MTZkYzk2OWM=", "commit": {"author": {"name": "Martin Hoffmann", "email": "hn@nvnc.de", "date": "2018-03-17T13:05:24Z"}, "committer": {"name": "Martin Hoffmann", "email": "hn@nvnc.de", "date": "2018-03-17T13:05:24Z"}, "message": "Bring back the phrase 'borrowing as' for what Borrow does.", "tree": {"sha": "0168cad01cef11bed6a608e256c9a0ac5c7c3115", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0168cad01cef11bed6a608e256c9a0ac5c7c3115"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bef034b198c58fd02a9e8a584a24fd516dc969c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bef034b198c58fd02a9e8a584a24fd516dc969c", "html_url": "https://github.com/rust-lang/rust/commit/5bef034b198c58fd02a9e8a584a24fd516dc969c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bef034b198c58fd02a9e8a584a24fd516dc969c/comments", "author": {"login": "partim", "id": 1318494, "node_id": "MDQ6VXNlcjEzMTg0OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1318494?v=4", "gravatar_id": "", "url": "https://api.github.com/users/partim", "html_url": "https://github.com/partim", "followers_url": "https://api.github.com/users/partim/followers", "following_url": "https://api.github.com/users/partim/following{/other_user}", "gists_url": "https://api.github.com/users/partim/gists{/gist_id}", "starred_url": "https://api.github.com/users/partim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/partim/subscriptions", "organizations_url": "https://api.github.com/users/partim/orgs", "repos_url": "https://api.github.com/users/partim/repos", "events_url": "https://api.github.com/users/partim/events{/privacy}", "received_events_url": "https://api.github.com/users/partim/received_events", "type": "User", "site_admin": false}, "committer": {"login": "partim", "id": 1318494, "node_id": "MDQ6VXNlcjEzMTg0OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1318494?v=4", "gravatar_id": "", "url": "https://api.github.com/users/partim", "html_url": "https://github.com/partim", "followers_url": "https://api.github.com/users/partim/followers", "following_url": "https://api.github.com/users/partim/following{/other_user}", "gists_url": "https://api.github.com/users/partim/gists{/gist_id}", "starred_url": "https://api.github.com/users/partim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/partim/subscriptions", "organizations_url": "https://api.github.com/users/partim/orgs", "repos_url": "https://api.github.com/users/partim/repos", "events_url": "https://api.github.com/users/partim/events{/privacy}", "received_events_url": "https://api.github.com/users/partim/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44be054a2acbeeb682d02a5f88ddedc0cb5c9bf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/44be054a2acbeeb682d02a5f88ddedc0cb5c9bf2", "html_url": "https://github.com/rust-lang/rust/commit/44be054a2acbeeb682d02a5f88ddedc0cb5c9bf2"}], "stats": {"total": 47, "additions": 22, "deletions": 25}, "files": [{"sha": "0014bddb55cd7930efd04052bf697b8b4710bd1b", "filename": "src/libcore/borrow.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5bef034b198c58fd02a9e8a584a24fd516dc969c/src%2Flibcore%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bef034b198c58fd02a9e8a584a24fd516dc969c/src%2Flibcore%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fborrow.rs?ref=5bef034b198c58fd02a9e8a584a24fd516dc969c", "patch": "@@ -12,7 +12,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-/// A trait identifying how borrowed data behaves.\n+/// A trait for borrowing data.\n ///\n /// In Rust, it is common to provide different representations of a type for\n /// different use cases. For instance, storage location and management for a\n@@ -24,40 +24,37 @@\n /// [`str`]. This requires keeping additional information unnecessary for a\n /// simple, immutable string.\n ///\n-/// These types signal that they are a specialized representation of a basic\n-/// type `T` by implementing `Borrow<T>`. The method `borrow` provides a way\n-/// to convert a reference to the type into a reference to this basic type\n-/// `T`.\n+/// These types provide access to the underlying data through references\n+/// to the type of that data. They are said to be \u2018borrowed as\u2019 that type.\n+/// For instance, a [`Box<T>`] can be borrowed as `T` while a [`String`]\n+/// can be borrowed as `str`.\n+///\n+/// Types express that they can be borrowed as some type `T` by implementing\n+/// `Borrow<T>`, providing a reference to a `T` in the trait\u2019s\n+/// [`borrow`] method. A type is free to borrow as several different types.\n+/// If it wishes to mutably borrow as the type \u2013 allowing the underlying data\n+/// to be modified, it can additionally implement [`BorrowMut<T>`].\n ///\n /// Further, when providing implementations for additional traits, it needs\n /// to be considered whether they should behave identical to those of the\n /// underlying type as a consequence of acting as a representation of that\n-/// underlying type.\n-///\n-/// Generic code typically uses `Borrow<T>` when it not only needs access\n-/// to a reference of the underlying type but relies on the identical\n-/// behavior of these additional trait implementations. These traits are\n-/// likely to appear as additional trait bounds.\n+/// underlying type. Generic code typically uses `Borrow<T>` when it relies\n+/// on the identical behavior of these additional trait implementations.\n+/// These traits will likely appear as additional trait bounds.\n ///\n /// If generic code merely needs to work for all types that can\n /// provide a reference to related type `T`, it is often better to use\n /// [`AsRef<T>`] as more types can safely implement it.\n ///\n-/// If a type implementing `Borrow<T>` also wishes to allow mutable access\n-/// to the underlying type `T`, it can do so by implementing the companion\n-/// trait [`BorrowMut`].\n-///\n-/// Note also that it is perfectly fine for a single type to have multiple\n-/// implementations of `Borrow<T>` for different `T`s. In fact, a blanket\n-/// implementation lets every type be at least a borrow of itself.\n-///\n /// [`AsRef<T>`]: ../../std/convert/trait.AsRef.html\n-/// [`BorrowMut`]: trait.BorrowMut.html\n+/// [`BorrowMut<T>`]: trait.BorrowMut.html\n /// [`Box<T>`]: ../../std/boxed/struct.Box.html\n /// [`Mutex<T>`]: ../../std/sync/struct.Mutex.html\n /// [`Rc<T>`]: ../../std/rc/struct.Rc.html\n /// [`str`]: ../../std/primitive.str.html\n /// [`String`]: ../../std/string/struct.String.html\n+/// [`borrow`]: #tymethod.borrow\n+///\n ///\n /// # Examples\n ///\n@@ -113,10 +110,10 @@\n /// `str` is available.\n ///\n /// Instead, the `get` method is generic over the type of the underlying key\n-/// data, called `Q` in the method signature above. It states that `K` is a\n-/// representation of `Q` by requiring that `K: Borrow<Q>`. By additionally\n-/// requiring `Q: Hash + Eq`, it demands that `K` and `Q` have\n-/// implementations of the `Hash` and `Eq` traits that produce identical\n+/// data, called `Q` in the method signature above. It states that `K`\n+/// borrows as a `Q` by requiring that `K: Borrow<Q>`. By additionally\n+/// requiring `Q: Hash + Eq`, it signals the requirement that `K` and `Q`\n+/// have implementations of the `Hash` and `Eq` traits that produce identical\n /// results.\n ///\n /// The implementation of `get` relies in particular on identical\n@@ -141,7 +138,7 @@\n /// ```\n ///\n /// Because two equal values need to produce the same hash value, the\n-/// implementation of `Hash` needs to reflect that, too:\n+/// implementation of `Hash` needs to ignore ASCII case, too:\n ///\n /// ```\n /// # use std::hash::{Hash, Hasher};"}]}