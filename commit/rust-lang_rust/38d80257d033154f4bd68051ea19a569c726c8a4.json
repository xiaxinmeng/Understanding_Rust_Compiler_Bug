{"sha": "38d80257d033154f4bd68051ea19a569c726c8a4", "node_id": "C_kwDOAAsO6NoAKDM4ZDgwMjU3ZDAzMzE1NGY0YmQ2ODA1MWVhMTlhNTY5YzcyNmM4YTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-02T09:57:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-02T09:57:12Z"}, "message": "Auto merge of #7726 - dswij:unseparated-literal-suffix, r=flip1995\n\nUnseparated literal suffix\n\nCloses #7658\n\nSince `literal_suffix` style is opinionated, we should disable by default and only enforce if it's stated as so.\n\nchangelog: [`unseparated_literal_suffix`] is renamed to `literal_suffix`, adds a new configuration `literal-suffix-style` to enforce a certain style writing literal_suffix. Possible values for `literal-suffix-style`: `\"separated\"`, `\"unseparated\"`", "tree": {"sha": "fdfbc8cb625d16b66ca35db39b509c253d319514", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdfbc8cb625d16b66ca35db39b509c253d319514"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38d80257d033154f4bd68051ea19a569c726c8a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38d80257d033154f4bd68051ea19a569c726c8a4", "html_url": "https://github.com/rust-lang/rust/commit/38d80257d033154f4bd68051ea19a569c726c8a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38d80257d033154f4bd68051ea19a569c726c8a4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e355ebb6e8bc7269a37548f51743f897493a129", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e355ebb6e8bc7269a37548f51743f897493a129", "html_url": "https://github.com/rust-lang/rust/commit/4e355ebb6e8bc7269a37548f51743f897493a129"}, {"sha": "bb1cf729990e063a858bf31b54bd1d0e13dc4707", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb1cf729990e063a858bf31b54bd1d0e13dc4707", "html_url": "https://github.com/rust-lang/rust/commit/bb1cf729990e063a858bf31b54bd1d0e13dc4707"}], "stats": {"total": 210, "additions": 151, "deletions": 59}, "files": [{"sha": "85a6a6be8b7f2618d9b515afc201e54f27781e13", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38d80257d033154f4bd68051ea19a569c726c8a4/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/38d80257d033154f4bd68051ea19a569c726c8a4/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=38d80257d033154f4bd68051ea19a569c726c8a4", "patch": "@@ -3123,6 +3123,7 @@ Released 2018-09-13\n [`self_named_constructors`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_named_constructors\n [`self_named_module_files`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_named_module_files\n [`semicolon_if_nothing_returned`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\n+[`separated_literal_suffix`]: https://rust-lang.github.io/rust-clippy/master/index.html#separated_literal_suffix\n [`serde_api_misuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#serde_api_misuse\n [`shadow_reuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\n [`shadow_same`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_same"}, {"sha": "2cb86418e3cb5df2cc946ba79a8095fe48de7be0", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38d80257d033154f4bd68051ea19a569c726c8a4/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d80257d033154f4bd68051ea19a569c726c8a4/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=38d80257d033154f4bd68051ea19a569c726c8a4", "patch": "@@ -327,6 +327,7 @@ store.register_lints(&[\n     misc_early::DUPLICATE_UNDERSCORE_ARGUMENT,\n     misc_early::MIXED_CASE_HEX_LITERALS,\n     misc_early::REDUNDANT_PATTERN,\n+    misc_early::SEPARATED_LITERAL_SUFFIX,\n     misc_early::UNNEEDED_FIELD_PATTERN,\n     misc_early::UNNEEDED_WILDCARD_PATTERN,\n     misc_early::UNSEPARATED_LITERAL_SUFFIX,"}, {"sha": "1008ca29e73d5a52c8c94e6276ad800de3e36248", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38d80257d033154f4bd68051ea19a569c726c8a4/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d80257d033154f4bd68051ea19a569c726c8a4/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=38d80257d033154f4bd68051ea19a569c726c8a4", "patch": "@@ -66,7 +66,6 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(methods::MAP_UNWRAP_OR),\n     LintId::of(misc::FLOAT_CMP),\n     LintId::of(misc::USED_UNDERSCORE_BINDING),\n-    LintId::of(misc_early::UNSEPARATED_LITERAL_SUFFIX),\n     LintId::of(mut_mut::MUT_MUT),\n     LintId::of(needless_bitwise_bool::NEEDLESS_BITWISE_BOOL),\n     LintId::of(needless_borrow::REF_BINDING_TO_REFERENCE),"}, {"sha": "bd416a4979b6f64e36a9c49b6beed0efb0884a3a", "filename": "clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38d80257d033154f4bd68051ea19a569c726c8a4/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d80257d033154f4bd68051ea19a569c726c8a4/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=38d80257d033154f4bd68051ea19a569c726c8a4", "patch": "@@ -35,7 +35,9 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(methods::GET_UNWRAP),\n     LintId::of(methods::UNWRAP_USED),\n     LintId::of(misc::FLOAT_CMP_CONST),\n+    LintId::of(misc_early::SEPARATED_LITERAL_SUFFIX),\n     LintId::of(misc_early::UNNEEDED_FIELD_PATTERN),\n+    LintId::of(misc_early::UNSEPARATED_LITERAL_SUFFIX),\n     LintId::of(missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS),\n     LintId::of(missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES),\n     LintId::of(missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS),"}, {"sha": "06ba968fa4ed31da1700c3df599ff67badc51359", "filename": "clippy_lints/src/misc_early/double_neg.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/38d80257d033154f4bd68051ea19a569c726c8a4/clippy_lints%2Fsrc%2Fmisc_early%2Fdouble_neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d80257d033154f4bd68051ea19a569c726c8a4/clippy_lints%2Fsrc%2Fmisc_early%2Fdouble_neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fdouble_neg.rs?ref=38d80257d033154f4bd68051ea19a569c726c8a4", "patch": "@@ -1,23 +1,18 @@\n-use super::MiscEarlyLints;\n use clippy_utils::diagnostics::span_lint;\n use rustc_ast::ast::{Expr, ExprKind, UnOp};\n use rustc_lint::EarlyContext;\n \n use super::DOUBLE_NEG;\n \n pub(super) fn check(cx: &EarlyContext<'_>, expr: &Expr) {\n-    match expr.kind {\n-        ExprKind::Unary(UnOp::Neg, ref inner) => {\n-            if let ExprKind::Unary(UnOp::Neg, _) = inner.kind {\n-                span_lint(\n-                    cx,\n-                    DOUBLE_NEG,\n-                    expr.span,\n-                    \"`--x` could be misinterpreted as pre-decrement by C programmers, is usually a no-op\",\n-                );\n-            }\n-        },\n-        ExprKind::Lit(ref lit) => MiscEarlyLints::check_lit(cx, lit),\n-        _ => (),\n+    if let ExprKind::Unary(UnOp::Neg, ref inner) = expr.kind {\n+        if let ExprKind::Unary(UnOp::Neg, _) = inner.kind {\n+            span_lint(\n+                cx,\n+                DOUBLE_NEG,\n+                expr.span,\n+                \"`--x` could be misinterpreted as pre-decrement by C programmers, is usually a no-op\",\n+            );\n+        }\n     }\n }"}, {"sha": "1165c19a0cf0b442fbee3d8622e1637dff722849", "filename": "clippy_lints/src/misc_early/literal_suffix.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/38d80257d033154f4bd68051ea19a569c726c8a4/clippy_lints%2Fsrc%2Fmisc_early%2Fliteral_suffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d80257d033154f4bd68051ea19a569c726c8a4/clippy_lints%2Fsrc%2Fmisc_early%2Fliteral_suffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fliteral_suffix.rs?ref=38d80257d033154f4bd68051ea19a569c726c8a4", "patch": "@@ -0,0 +1,38 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use rustc_ast::ast::Lit;\n+use rustc_errors::Applicability;\n+use rustc_lint::EarlyContext;\n+\n+use super::{SEPARATED_LITERAL_SUFFIX, UNSEPARATED_LITERAL_SUFFIX};\n+\n+pub(super) fn check(cx: &EarlyContext<'_>, lit: &Lit, lit_snip: &str, suffix: &str, sugg_type: &str) {\n+    let maybe_last_sep_idx = if let Some(val) = lit_snip.len().checked_sub(suffix.len() + 1) {\n+        val\n+    } else {\n+        return; // It's useless so shouldn't lint.\n+    };\n+    // Do not lint when literal is unsuffixed.\n+    if !suffix.is_empty() {\n+        if lit_snip.as_bytes()[maybe_last_sep_idx] == b'_' {\n+            span_lint_and_sugg(\n+                cx,\n+                SEPARATED_LITERAL_SUFFIX,\n+                lit.span,\n+                &format!(\"{} type suffix should not be separated by an underscore\", sugg_type),\n+                \"remove the underscore\",\n+                format!(\"{}{}\", &lit_snip[..maybe_last_sep_idx], suffix),\n+                Applicability::MachineApplicable,\n+            );\n+        } else {\n+            span_lint_and_sugg(\n+                cx,\n+                UNSEPARATED_LITERAL_SUFFIX,\n+                lit.span,\n+                &format!(\"{} type suffix should be separated by an underscore\", sugg_type),\n+                \"add an underscore\",\n+                format!(\"{}_{}\", &lit_snip[..=maybe_last_sep_idx], suffix),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}"}, {"sha": "7c3f5f22ade0f9ba447d1dc583791b092f1abf80", "filename": "clippy_lints/src/misc_early/mod.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/38d80257d033154f4bd68051ea19a569c726c8a4/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d80257d033154f4bd68051ea19a569c726c8a4/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs?ref=38d80257d033154f4bd68051ea19a569c726c8a4", "patch": "@@ -1,15 +1,15 @@\n mod builtin_type_shadow;\n mod double_neg;\n+mod literal_suffix;\n mod mixed_case_hex_literals;\n mod redundant_pattern;\n mod unneeded_field_pattern;\n mod unneeded_wildcard_pattern;\n-mod unseparated_literal_suffix;\n mod zero_prefixed_literal;\n \n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::source::snippet_opt;\n-use rustc_ast::ast::{Expr, Generics, Lit, LitFloatType, LitIntType, LitKind, NodeId, Pat, PatKind};\n+use rustc_ast::ast::{Expr, ExprKind, Generics, Lit, LitFloatType, LitIntType, LitKind, NodeId, Pat, PatKind};\n use rustc_ast::visit::FnKind;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n@@ -115,9 +115,11 @@ declare_clippy_lint! {\n     /// ### What it does\n     /// Warns if literal suffixes are not separated by an\n     /// underscore.\n+    /// To enforce unseparated literal suffix style,\n+    /// see the `separated_literal_suffix` lint.\n     ///\n     /// ### Why is this bad?\n-    /// It is much less readable.\n+    /// Suffix style should be consistent.\n     ///\n     /// ### Example\n     /// ```rust\n@@ -128,10 +130,32 @@ declare_clippy_lint! {\n     /// let y = 123832_i32;\n     /// ```\n     pub UNSEPARATED_LITERAL_SUFFIX,\n-    pedantic,\n+    restriction,\n     \"literals whose suffix is not separated by an underscore\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Warns if literal suffixes are separated by an underscore.\n+    /// To enforce separated literal suffix style,\n+    /// see the `unseparated_literal_suffix` lint.\n+    ///\n+    /// ### Why is this bad?\n+    /// Suffix style should be consistent.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// // Bad\n+    /// let y = 123832_i32;\n+    ///\n+    /// // Good\n+    /// let y = 123832i32;\n+    /// ```\n+    pub SEPARATED_LITERAL_SUFFIX,\n+    restriction,\n+    \"literals whose suffix is separated by an underscore\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Warns if an integral constant literal starts with `0`.\n@@ -260,6 +284,7 @@ declare_lint_pass!(MiscEarlyLints => [\n     DOUBLE_NEG,\n     MIXED_CASE_HEX_LITERALS,\n     UNSEPARATED_LITERAL_SUFFIX,\n+    SEPARATED_LITERAL_SUFFIX,\n     ZERO_PREFIXED_LITERAL,\n     BUILTIN_TYPE_SHADOW,\n     REDUNDANT_PATTERN,\n@@ -310,6 +335,10 @@ impl EarlyLintPass for MiscEarlyLints {\n         if in_external_macro(cx.sess, expr.span) {\n             return;\n         }\n+\n+        if let ExprKind::Lit(ref lit) = expr.kind {\n+            MiscEarlyLints::check_lit(cx, lit);\n+        }\n         double_neg::check(cx, expr);\n     }\n }\n@@ -332,7 +361,7 @@ impl MiscEarlyLints {\n                 LitIntType::Unsigned(ty) => ty.name_str(),\n                 LitIntType::Unsuffixed => \"\",\n             };\n-            unseparated_literal_suffix::check(cx, lit, &lit_snip, suffix, \"integer\");\n+            literal_suffix::check(cx, lit, &lit_snip, suffix, \"integer\");\n             if lit_snip.starts_with(\"0x\") {\n                 mixed_case_hex_literals::check(cx, lit, suffix, &lit_snip);\n             } else if lit_snip.starts_with(\"0b\") || lit_snip.starts_with(\"0o\") {\n@@ -342,7 +371,7 @@ impl MiscEarlyLints {\n             }\n         } else if let LitKind::Float(_, LitFloatType::Suffixed(float_ty)) = lit.kind {\n             let suffix = float_ty.name_str();\n-            unseparated_literal_suffix::check(cx, lit, &lit_snip, suffix, \"float\");\n+            literal_suffix::check(cx, lit, &lit_snip, suffix, \"float\");\n         }\n     }\n }"}, {"sha": "2018aa6184a8db4568f751017d6e5514cbcda95f", "filename": "clippy_lints/src/misc_early/unseparated_literal_suffix.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4e355ebb6e8bc7269a37548f51743f897493a129/clippy_lints%2Fsrc%2Fmisc_early%2Funseparated_literal_suffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e355ebb6e8bc7269a37548f51743f897493a129/clippy_lints%2Fsrc%2Fmisc_early%2Funseparated_literal_suffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Funseparated_literal_suffix.rs?ref=4e355ebb6e8bc7269a37548f51743f897493a129", "patch": "@@ -1,26 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use rustc_ast::ast::Lit;\n-use rustc_errors::Applicability;\n-use rustc_lint::EarlyContext;\n-\n-use super::UNSEPARATED_LITERAL_SUFFIX;\n-\n-pub(super) fn check(cx: &EarlyContext<'_>, lit: &Lit, lit_snip: &str, suffix: &str, sugg_type: &str) {\n-    let maybe_last_sep_idx = if let Some(val) = lit_snip.len().checked_sub(suffix.len() + 1) {\n-        val\n-    } else {\n-        return; // It's useless so shouldn't lint.\n-    };\n-    // Do not lint when literal is unsuffixed.\n-    if !suffix.is_empty() && lit_snip.as_bytes()[maybe_last_sep_idx] != b'_' {\n-        span_lint_and_sugg(\n-            cx,\n-            UNSEPARATED_LITERAL_SUFFIX,\n-            lit.span,\n-            &format!(\"{} type suffix should be separated by an underscore\", sugg_type),\n-            \"add an underscore\",\n-            format!(\"{}_{}\", &lit_snip[..=maybe_last_sep_idx], suffix),\n-            Applicability::MachineApplicable,\n-        );\n-    }\n-}"}, {"sha": "e60ce8492fc7716f70f3f490086d03d76904f07f", "filename": "tests/ui/literals.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38d80257d033154f4bd68051ea19a569c726c8a4/tests%2Fui%2Fliterals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38d80257d033154f4bd68051ea19a569c726c8a4/tests%2Fui%2Fliterals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.rs?ref=38d80257d033154f4bd68051ea19a569c726c8a4", "patch": "@@ -2,7 +2,8 @@\n \n #![warn(clippy::mixed_case_hex_literals)]\n #![warn(clippy::zero_prefixed_literal)]\n-#![allow(clippy::unseparated_literal_suffix)]\n+#![warn(clippy::unseparated_literal_suffix)]\n+#![warn(clippy::separated_literal_suffix)]\n #![allow(dead_code)]\n \n fn main() {"}, {"sha": "365b240747352d76bc06b3e802e04f0049dabec6", "filename": "tests/ui/literals.stderr", "status": "modified", "additions": 63, "deletions": 11, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/38d80257d033154f4bd68051ea19a569c726c8a4/tests%2Fui%2Fliterals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38d80257d033154f4bd68051ea19a569c726c8a4/tests%2Fui%2Fliterals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.stderr?ref=38d80257d033154f4bd68051ea19a569c726c8a4", "patch": "@@ -1,25 +1,65 @@\n+error: integer type suffix should not be separated by an underscore\n+  --> $DIR/literals.rs:12:15\n+   |\n+LL |     let ok4 = 0xab_cd_i32;\n+   |               ^^^^^^^^^^^ help: remove the underscore: `0xab_cdi32`\n+   |\n+   = note: `-D clippy::separated-literal-suffix` implied by `-D warnings`\n+\n+error: integer type suffix should not be separated by an underscore\n+  --> $DIR/literals.rs:13:15\n+   |\n+LL |     let ok5 = 0xAB_CD_u32;\n+   |               ^^^^^^^^^^^ help: remove the underscore: `0xAB_CDu32`\n+\n+error: integer type suffix should not be separated by an underscore\n+  --> $DIR/literals.rs:14:15\n+   |\n+LL |     let ok5 = 0xAB_CD_isize;\n+   |               ^^^^^^^^^^^^^ help: remove the underscore: `0xAB_CDisize`\n+\n error: inconsistent casing in hexadecimal literal\n-  --> $DIR/literals.rs:14:17\n+  --> $DIR/literals.rs:15:17\n    |\n LL |     let fail1 = 0xabCD;\n    |                 ^^^^^^\n    |\n    = note: `-D clippy::mixed-case-hex-literals` implied by `-D warnings`\n \n+error: integer type suffix should not be separated by an underscore\n+  --> $DIR/literals.rs:16:17\n+   |\n+LL |     let fail2 = 0xabCD_u32;\n+   |                 ^^^^^^^^^^ help: remove the underscore: `0xabCDu32`\n+\n error: inconsistent casing in hexadecimal literal\n-  --> $DIR/literals.rs:15:17\n+  --> $DIR/literals.rs:16:17\n    |\n LL |     let fail2 = 0xabCD_u32;\n    |                 ^^^^^^^^^^\n \n+error: integer type suffix should not be separated by an underscore\n+  --> $DIR/literals.rs:17:17\n+   |\n+LL |     let fail2 = 0xabCD_isize;\n+   |                 ^^^^^^^^^^^^ help: remove the underscore: `0xabCDisize`\n+\n error: inconsistent casing in hexadecimal literal\n-  --> $DIR/literals.rs:16:17\n+  --> $DIR/literals.rs:17:17\n    |\n LL |     let fail2 = 0xabCD_isize;\n    |                 ^^^^^^^^^^^^\n \n+error: integer type suffix should be separated by an underscore\n+  --> $DIR/literals.rs:18:27\n+   |\n+LL |     let fail_multi_zero = 000_123usize;\n+   |                           ^^^^^^^^^^^^ help: add an underscore: `000_123_usize`\n+   |\n+   = note: `-D clippy::unseparated-literal-suffix` implied by `-D warnings`\n+\n error: this is a decimal constant\n-  --> $DIR/literals.rs:17:27\n+  --> $DIR/literals.rs:18:27\n    |\n LL |     let fail_multi_zero = 000_123usize;\n    |                           ^^^^^^^^^^^^\n@@ -34,8 +74,14 @@ help: if you mean to use an octal constant, use `0o`\n LL |     let fail_multi_zero = 0o123usize;\n    |                           ~~~~~~~~~~\n \n+error: integer type suffix should not be separated by an underscore\n+  --> $DIR/literals.rs:21:16\n+   |\n+LL |     let ok10 = 0_i64;\n+   |                ^^^^^ help: remove the underscore: `0i64`\n+\n error: this is a decimal constant\n-  --> $DIR/literals.rs:21:17\n+  --> $DIR/literals.rs:22:17\n    |\n LL |     let fail8 = 0123;\n    |                 ^^^^\n@@ -49,39 +95,45 @@ help: if you mean to use an octal constant, use `0o`\n LL |     let fail8 = 0o123;\n    |                 ~~~~~\n \n+error: integer type suffix should not be separated by an underscore\n+  --> $DIR/literals.rs:31:16\n+   |\n+LL |     let ok17 = 0x123_4567_8901_usize;\n+   |                ^^^^^^^^^^^^^^^^^^^^^ help: remove the underscore: `0x123_4567_8901usize`\n+\n error: digits grouped inconsistently by underscores\n-  --> $DIR/literals.rs:33:18\n+  --> $DIR/literals.rs:34:18\n    |\n LL |     let fail19 = 12_3456_21;\n    |                  ^^^^^^^^^^ help: consider: `12_345_621`\n    |\n    = note: `-D clippy::inconsistent-digit-grouping` implied by `-D warnings`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/literals.rs:34:18\n+  --> $DIR/literals.rs:35:18\n    |\n LL |     let fail22 = 3__4___23;\n    |                  ^^^^^^^^^ help: consider: `3_423`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/literals.rs:35:18\n+  --> $DIR/literals.rs:36:18\n    |\n LL |     let fail23 = 3__16___23;\n    |                  ^^^^^^^^^^ help: consider: `31_623`\n \n error: digits of hex or binary literal not grouped by four\n-  --> $DIR/literals.rs:37:18\n+  --> $DIR/literals.rs:38:18\n    |\n LL |     let fail24 = 0xAB_ABC_AB;\n    |                  ^^^^^^^^^^^ help: consider: `0x0ABA_BCAB`\n    |\n    = note: `-D clippy::unusual-byte-groupings` implied by `-D warnings`\n \n error: digits of hex or binary literal not grouped by four\n-  --> $DIR/literals.rs:38:18\n+  --> $DIR/literals.rs:39:18\n    |\n LL |     let fail25 = 0b01_100_101;\n    |                  ^^^^^^^^^^^^ help: consider: `0b0110_0101`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 18 previous errors\n "}]}