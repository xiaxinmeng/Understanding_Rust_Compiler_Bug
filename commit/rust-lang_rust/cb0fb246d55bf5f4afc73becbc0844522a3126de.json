{"sha": "cb0fb246d55bf5f4afc73becbc0844522a3126de", "node_id": "C_kwDOAAsO6NoAKGNiMGZiMjQ2ZDU1YmY1ZjRhZmM3M2JlY2JjMDg0NDUyMmEzMTI2ZGU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-10T20:15:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-10T20:15:42Z"}, "message": "Rollup merge of #105798 - Amanieu:relax-asm, r=joshtriplett\n\nRelax ordering rules for `asm!` operands\n\nThe `asm!` and `global_asm!` macros require their operands to appear strictly in the following order:\n- Template strings\n- Positional operands\n- Named operands\n- Explicit register operands\n- `clobber_abi`\n- `options`\n\nThis is overly strict and can be inconvienent when building complex `asm!` statements with macros. This PR relaxes the ordering requirements as follows:\n- Template strings must still come before all other operands.\n- Positional operands must still come before named and explicit register operands.\n- Named and explicit register operands can be freely mixed.\n- `options` and `clobber_abi` can appear in any position after the template strings.\n\nr? ```````@joshtriplett```````", "tree": {"sha": "94eb62d191f5e6f82f363051ef333fb6d9710da7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94eb62d191f5e6f82f363051ef333fb6d9710da7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb0fb246d55bf5f4afc73becbc0844522a3126de", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkC4/uCRBK7hj4Ov3rIwAAOC8IAE20okaLKdXEmBzFH0sirjnm\nmC85bRwJimvl45wOqOWnTZ0cU7t4L3ayP05AaM76h6H3h6y4cMI7vhrDMz2Y6zjC\ns3c++gCkYnJGghGjvbyCQgxZWkHOveJtibr3ZQeLkEe5cb8RGZW6RAoFG0bvgEw7\n/W07jKt4TRwMUZxJJo0aqY9+RI2SbPD+Unry87of9msyr1rFP6vU4Z03ORp2vqVr\nWlu3ipAfil10qOr+UQz4XhgF08rcCMTn9QEYc0VJYiLfQbHqxTfx4bcVqmPTmc5m\nZiIN3a+k9s+JY4YvpgnBwy5lt/1q+k0+EaE9eTl5Ln5O7epDhv4qpNoWaJUhAyI=\n=Fq6e\n-----END PGP SIGNATURE-----\n", "payload": "tree 94eb62d191f5e6f82f363051ef333fb6d9710da7\nparent 35a0961bbc8fba75bb863c7835b39d431ad9fc5d\nparent 52f7a218fb496aefb2364ccc508556c45df47e7f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678479342 +0100\ncommitter GitHub <noreply@github.com> 1678479342 +0100\n\nRollup merge of #105798 - Amanieu:relax-asm, r=joshtriplett\n\nRelax ordering rules for `asm!` operands\n\nThe `asm!` and `global_asm!` macros require their operands to appear strictly in the following order:\n- Template strings\n- Positional operands\n- Named operands\n- Explicit register operands\n- `clobber_abi`\n- `options`\n\nThis is overly strict and can be inconvienent when building complex `asm!` statements with macros. This PR relaxes the ordering requirements as follows:\n- Template strings must still come before all other operands.\n- Positional operands must still come before named and explicit register operands.\n- Named and explicit register operands can be freely mixed.\n- `options` and `clobber_abi` can appear in any position after the template strings.\n\nr? ```````@joshtriplett```````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb0fb246d55bf5f4afc73becbc0844522a3126de", "html_url": "https://github.com/rust-lang/rust/commit/cb0fb246d55bf5f4afc73becbc0844522a3126de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb0fb246d55bf5f4afc73becbc0844522a3126de/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/35a0961bbc8fba75bb863c7835b39d431ad9fc5d", "html_url": "https://github.com/rust-lang/rust/commit/35a0961bbc8fba75bb863c7835b39d431ad9fc5d"}, {"sha": "52f7a218fb496aefb2364ccc508556c45df47e7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/52f7a218fb496aefb2364ccc508556c45df47e7f", "html_url": "https://github.com/rust-lang/rust/commit/52f7a218fb496aefb2364ccc508556c45df47e7f"}], "stats": {"total": 443, "additions": 152, "deletions": 291}, "files": [{"sha": "8c1579baacb08775c9126449c1dd7274d9a2e6d3", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 4, "deletions": 31, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cb0fb246d55bf5f4afc73becbc0844522a3126de/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb0fb246d55bf5f4afc73becbc0844522a3126de/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=cb0fb246d55bf5f4afc73becbc0844522a3126de", "patch": "@@ -203,17 +203,6 @@ pub fn parse_asm_args<'a>(\n         // Validate the order of named, positional & explicit register operands and\n         // clobber_abi/options. We do this at the end once we have the full span\n         // of the argument available.\n-        if !args.options_spans.is_empty() {\n-            diag.struct_span_err(span, \"arguments are not allowed after options\")\n-                .span_labels(args.options_spans.clone(), \"previous options\")\n-                .span_label(span, \"argument\")\n-                .emit();\n-        } else if let Some((_, abi_span)) = args.clobber_abis.last() {\n-            diag.struct_span_err(span, \"arguments are not allowed after clobber_abi\")\n-                .span_label(*abi_span, \"clobber_abi\")\n-                .span_label(span, \"argument\")\n-                .emit();\n-        }\n         if explicit_reg {\n             if name.is_some() {\n                 diag.struct_span_err(span, \"explicit register arguments cannot have names\").emit();\n@@ -227,17 +216,6 @@ pub fn parse_asm_args<'a>(\n                     .emit();\n                 continue;\n             }\n-            if !args.reg_args.is_empty() {\n-                let mut err = diag.struct_span_err(\n-                    span,\n-                    \"named arguments cannot follow explicit register arguments\",\n-                );\n-                err.span_label(span, \"named argument\");\n-                for pos in &args.reg_args {\n-                    err.span_label(args.operands[*pos].1, \"explicit register argument\");\n-                }\n-                err.emit();\n-            }\n             args.named_args.insert(name, slot);\n         } else {\n             if !args.named_args.is_empty() || !args.reg_args.is_empty() {\n@@ -478,15 +456,6 @@ fn parse_clobber_abi<'a>(p: &mut Parser<'a>, args: &mut AsmArgs) -> PResult<'a,\n \n     let full_span = span_start.to(p.prev_token.span);\n \n-    if !args.options_spans.is_empty() {\n-        let mut err = p\n-            .sess\n-            .span_diagnostic\n-            .struct_span_err(full_span, \"clobber_abi is not allowed after options\");\n-        err.span_labels(args.options_spans.clone(), \"options\");\n-        return Err(err);\n-    }\n-\n     match &new_abis[..] {\n         // should have errored above during parsing\n         [] => unreachable!(),\n@@ -699,6 +668,10 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n                                         args.operands[idx].1,\n                                         \"explicit register arguments cannot be used in the asm template\",\n                                     );\n+                                    err.span_help(\n+                                        args.operands[idx].1,\n+                                        \"use the register name directly in the assembly code\",\n+                                    );\n                                 }\n                                 err.emit();\n                                 None"}, {"sha": "9b8170840bb0723ed8efd6cbe132c6c7258679f9", "filename": "tests/ui/asm/aarch64/parse-error.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cb0fb246d55bf5f4afc73becbc0844522a3126de/tests%2Fui%2Fasm%2Faarch64%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb0fb246d55bf5f4afc73becbc0844522a3126de/tests%2Fui%2Fasm%2Faarch64%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm%2Faarch64%2Fparse-error.rs?ref=cb0fb246d55bf5f4afc73becbc0844522a3126de", "patch": "@@ -37,21 +37,18 @@ fn main() {\n         asm!(\"\", options(nomem, foo));\n         //~^ ERROR expected one of\n         asm!(\"{}\", options(), const foo);\n-        //~^ ERROR arguments are not allowed after options\n-        //~^^ ERROR attempt to use a non-constant value in a constant\n+        //~^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"\", clobber_abi(foo));\n         //~^ ERROR expected string literal\n         asm!(\"\", clobber_abi(\"C\" foo));\n         //~^ ERROR expected one of `)` or `,`, found `foo`\n         asm!(\"\", clobber_abi(\"C\", foo));\n         //~^ ERROR expected string literal\n         asm!(\"{}\", clobber_abi(\"C\"), const foo);\n-        //~^ ERROR arguments are not allowed after clobber_abi\n-        //~^^ ERROR attempt to use a non-constant value in a constant\n+        //~^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"\", options(), clobber_abi(\"C\"));\n-        //~^ ERROR clobber_abi is not allowed after options\n         asm!(\"{}\", options(), clobber_abi(\"C\"), const foo);\n-        //~^ ERROR clobber_abi is not allowed after options\n+        //~^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"{a}\", a = const foo, a = const bar);\n         //~^ ERROR duplicate argument named `a`\n         //~^^ ERROR argument never used\n@@ -60,11 +57,9 @@ fn main() {\n         asm!(\"\", a = in(\"x0\") foo);\n         //~^ ERROR explicit register arguments cannot have names\n         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n-        //~^ ERROR named arguments cannot follow explicit register arguments\n-        //~^^ ERROR attempt to use a non-constant value in a constant\n+        //~^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n-        //~^ ERROR named arguments cannot follow explicit register arguments\n-        //~^^ ERROR attempt to use a non-constant value in a constant\n+        //~^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"{1}\", in(\"x0\") foo, const bar);\n         //~^ ERROR positional arguments cannot follow named arguments or explicit register arguments\n         //~^^ ERROR attempt to use a non-constant value in a constant\n@@ -106,20 +101,18 @@ global_asm!(\"\", options(nomem FOO));\n global_asm!(\"\", options(nomem, FOO));\n //~^ ERROR expected one of\n global_asm!(\"{}\", options(), const FOO);\n-//~^ ERROR arguments are not allowed after options\n global_asm!(\"\", clobber_abi(FOO));\n //~^ ERROR expected string literal\n global_asm!(\"\", clobber_abi(\"C\" FOO));\n //~^ ERROR expected one of `)` or `,`, found `FOO`\n global_asm!(\"\", clobber_abi(\"C\", FOO));\n //~^ ERROR expected string literal\n global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n-//~^ ERROR arguments are not allowed after clobber_abi\n-//~^^ ERROR `clobber_abi` cannot be used with `global_asm!`\n+//~^ ERROR `clobber_abi` cannot be used with `global_asm!`\n global_asm!(\"\", options(), clobber_abi(\"C\"));\n-//~^ ERROR clobber_abi is not allowed after options\n+//~^ ERROR `clobber_abi` cannot be used with `global_asm!`\n global_asm!(\"{}\", options(), clobber_abi(\"C\"), const FOO);\n-//~^ ERROR clobber_abi is not allowed after options\n+//~^ ERROR `clobber_abi` cannot be used with `global_asm!`\n global_asm!(\"{a}\", a = const FOO, a = const BAR);\n //~^ ERROR duplicate argument named `a`\n //~^^ ERROR argument never used"}, {"sha": "46984a1fe1ca094514aa5bba9934d74a111fbdf5", "filename": "tests/ui/asm/aarch64/parse-error.stderr", "status": "modified", "additions": 55, "deletions": 114, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/cb0fb246d55bf5f4afc73becbc0844522a3126de/tests%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb0fb246d55bf5f4afc73becbc0844522a3126de/tests%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr?ref=cb0fb246d55bf5f4afc73becbc0844522a3126de", "patch": "@@ -82,296 +82,228 @@ error: expected one of `)`, `att_syntax`, `may_unwind`, `nomem`, `noreturn`, `no\n LL |         asm!(\"\", options(nomem, foo));\n    |                                 ^^^ expected one of 10 possible tokens\n \n-error: arguments are not allowed after options\n-  --> $DIR/parse-error.rs:39:31\n-   |\n-LL |         asm!(\"{}\", options(), const foo);\n-   |                    ---------  ^^^^^^^^^ argument\n-   |                    |\n-   |                    previous options\n-\n error: expected string literal\n-  --> $DIR/parse-error.rs:42:30\n+  --> $DIR/parse-error.rs:41:30\n    |\n LL |         asm!(\"\", clobber_abi(foo));\n    |                              ^^^ not a string literal\n \n error: expected one of `)` or `,`, found `foo`\n-  --> $DIR/parse-error.rs:44:34\n+  --> $DIR/parse-error.rs:43:34\n    |\n LL |         asm!(\"\", clobber_abi(\"C\" foo));\n    |                                  ^^^ expected one of `)` or `,`\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:46:35\n+  --> $DIR/parse-error.rs:45:35\n    |\n LL |         asm!(\"\", clobber_abi(\"C\", foo));\n    |                                   ^^^ not a string literal\n \n-error: arguments are not allowed after clobber_abi\n-  --> $DIR/parse-error.rs:48:38\n-   |\n-LL |         asm!(\"{}\", clobber_abi(\"C\"), const foo);\n-   |                    ----------------  ^^^^^^^^^ argument\n-   |                    |\n-   |                    clobber_abi\n-\n-error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:51:29\n-   |\n-LL |         asm!(\"\", options(), clobber_abi(\"C\"));\n-   |                  ---------  ^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  options\n-\n-error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:53:31\n-   |\n-LL |         asm!(\"{}\", options(), clobber_abi(\"C\"), const foo);\n-   |                    ---------  ^^^^^^^^^^^^^^^^\n-   |                    |\n-   |                    options\n-\n error: duplicate argument named `a`\n-  --> $DIR/parse-error.rs:55:36\n+  --> $DIR/parse-error.rs:52:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                     -------------  ^^^^^^^^^^^^^ duplicate argument\n    |                     |\n    |                     previously here\n \n error: argument never used\n-  --> $DIR/parse-error.rs:55:36\n+  --> $DIR/parse-error.rs:52:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                    ^^^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n error: explicit register arguments cannot have names\n-  --> $DIR/parse-error.rs:60:18\n+  --> $DIR/parse-error.rs:57:18\n    |\n LL |         asm!(\"\", a = in(\"x0\") foo);\n    |                  ^^^^^^^^^^^^^^^^\n \n-error: named arguments cannot follow explicit register arguments\n-  --> $DIR/parse-error.rs:62:35\n-   |\n-LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n-   |                     ------------  ^^^^^^^^^^^^^ named argument\n-   |                     |\n-   |                     explicit register argument\n-\n-error: named arguments cannot follow explicit register arguments\n-  --> $DIR/parse-error.rs:65:35\n-   |\n-LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n-   |                     ------------  ^^^^^^^^^^^^^ named argument\n-   |                     |\n-   |                     explicit register argument\n-\n error: positional arguments cannot follow named arguments or explicit register arguments\n-  --> $DIR/parse-error.rs:68:35\n+  --> $DIR/parse-error.rs:63:35\n    |\n LL |         asm!(\"{1}\", in(\"x0\") foo, const bar);\n    |                     ------------  ^^^^^^^^^ positional argument\n    |                     |\n    |                     explicit register argument\n \n error: expected one of `clobber_abi`, `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"\"`\n-  --> $DIR/parse-error.rs:71:29\n+  --> $DIR/parse-error.rs:66:29\n    |\n LL |         asm!(\"\", options(), \"\");\n    |                             ^^ expected one of 9 possible tokens\n \n error: expected one of `clobber_abi`, `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"{}\"`\n-  --> $DIR/parse-error.rs:73:33\n+  --> $DIR/parse-error.rs:68:33\n    |\n LL |         asm!(\"{}\", in(reg) foo, \"{}\", out(reg) foo);\n    |                                 ^^^^ expected one of 9 possible tokens\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:75:14\n+  --> $DIR/parse-error.rs:70:14\n    |\n LL |         asm!(format!(\"{{{}}}\", 0), in(reg) foo);\n    |              ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:77:21\n+  --> $DIR/parse-error.rs:72:21\n    |\n LL |         asm!(\"{1}\", format!(\"{{{}}}\", 0), in(reg) foo, out(reg) bar);\n    |                     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: _ cannot be used for input operands\n-  --> $DIR/parse-error.rs:79:28\n+  --> $DIR/parse-error.rs:74:28\n    |\n LL |         asm!(\"{}\", in(reg) _);\n    |                            ^\n \n error: _ cannot be used for input operands\n-  --> $DIR/parse-error.rs:81:31\n+  --> $DIR/parse-error.rs:76:31\n    |\n LL |         asm!(\"{}\", inout(reg) _);\n    |                               ^\n \n error: _ cannot be used for input operands\n-  --> $DIR/parse-error.rs:83:35\n+  --> $DIR/parse-error.rs:78:35\n    |\n LL |         asm!(\"{}\", inlateout(reg) _);\n    |                                   ^\n \n error: requires at least a template string argument\n-  --> $DIR/parse-error.rs:90:1\n+  --> $DIR/parse-error.rs:85:1\n    |\n LL | global_asm!();\n    | ^^^^^^^^^^^^^\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:92:13\n+  --> $DIR/parse-error.rs:87:13\n    |\n LL | global_asm!(FOO);\n    |             ^^^\n \n error: expected token: `,`\n-  --> $DIR/parse-error.rs:94:18\n+  --> $DIR/parse-error.rs:89:18\n    |\n LL | global_asm!(\"{}\" FOO);\n    |                  ^^^ expected `,`\n \n error: expected operand, options, or additional template string\n-  --> $DIR/parse-error.rs:96:19\n+  --> $DIR/parse-error.rs:91:19\n    |\n LL | global_asm!(\"{}\", FOO);\n    |                   ^^^ expected operand, options, or additional template string\n \n error: expected expression, found end of macro arguments\n-  --> $DIR/parse-error.rs:98:24\n+  --> $DIR/parse-error.rs:93:24\n    |\n LL | global_asm!(\"{}\", const);\n    |                        ^ expected expression\n \n error: expected one of `,`, `.`, `?`, or an operator, found `FOO`\n-  --> $DIR/parse-error.rs:100:30\n+  --> $DIR/parse-error.rs:95:30\n    |\n LL | global_asm!(\"{}\", const(reg) FOO);\n    |                              ^^^ expected one of `,`, `.`, `?`, or an operator\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `FOO`\n-  --> $DIR/parse-error.rs:102:25\n+  --> $DIR/parse-error.rs:97:25\n    |\n LL | global_asm!(\"\", options(FOO));\n    |                         ^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n-  --> $DIR/parse-error.rs:104:25\n+  --> $DIR/parse-error.rs:99:25\n    |\n LL | global_asm!(\"\", options(nomem FOO));\n    |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n-  --> $DIR/parse-error.rs:106:25\n+  --> $DIR/parse-error.rs:101:25\n    |\n LL | global_asm!(\"\", options(nomem, FOO));\n    |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: arguments are not allowed after options\n-  --> $DIR/parse-error.rs:108:30\n-   |\n-LL | global_asm!(\"{}\", options(), const FOO);\n-   |                   ---------  ^^^^^^^^^ argument\n-   |                   |\n-   |                   previous options\n-\n error: expected string literal\n-  --> $DIR/parse-error.rs:110:29\n+  --> $DIR/parse-error.rs:104:29\n    |\n LL | global_asm!(\"\", clobber_abi(FOO));\n    |                             ^^^ not a string literal\n \n error: expected one of `)` or `,`, found `FOO`\n-  --> $DIR/parse-error.rs:112:33\n+  --> $DIR/parse-error.rs:106:33\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\" FOO));\n    |                                 ^^^ expected one of `)` or `,`\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:114:34\n+  --> $DIR/parse-error.rs:108:34\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\", FOO));\n    |                                  ^^^ not a string literal\n \n-error: arguments are not allowed after clobber_abi\n-  --> $DIR/parse-error.rs:116:37\n-   |\n-LL | global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n-   |                   ----------------  ^^^^^^^^^ argument\n-   |                   |\n-   |                   clobber_abi\n-\n error: `clobber_abi` cannot be used with `global_asm!`\n-  --> $DIR/parse-error.rs:116:19\n+  --> $DIR/parse-error.rs:110:19\n    |\n LL | global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n    |                   ^^^^^^^^^^^^^^^^\n \n-error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:119:28\n+error: `clobber_abi` cannot be used with `global_asm!`\n+  --> $DIR/parse-error.rs:112:28\n    |\n LL | global_asm!(\"\", options(), clobber_abi(\"C\"));\n-   |                 ---------  ^^^^^^^^^^^^^^^^\n-   |                 |\n-   |                 options\n+   |                            ^^^^^^^^^^^^^^^^\n \n-error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:121:30\n+error: `clobber_abi` cannot be used with `global_asm!`\n+  --> $DIR/parse-error.rs:114:30\n    |\n LL | global_asm!(\"{}\", options(), clobber_abi(\"C\"), const FOO);\n-   |                   ---------  ^^^^^^^^^^^^^^^^\n-   |                   |\n-   |                   options\n+   |                              ^^^^^^^^^^^^^^^^\n \n error: duplicate argument named `a`\n-  --> $DIR/parse-error.rs:123:35\n+  --> $DIR/parse-error.rs:116:35\n    |\n LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |                    -------------  ^^^^^^^^^^^^^ duplicate argument\n    |                    |\n    |                    previously here\n \n error: argument never used\n-  --> $DIR/parse-error.rs:123:35\n+  --> $DIR/parse-error.rs:116:35\n    |\n LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |                                   ^^^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n error: expected one of `clobber_abi`, `const`, `options`, or `sym`, found `\"\"`\n-  --> $DIR/parse-error.rs:126:28\n+  --> $DIR/parse-error.rs:119:28\n    |\n LL | global_asm!(\"\", options(), \"\");\n    |                            ^^ expected one of `clobber_abi`, `const`, `options`, or `sym`\n \n error: expected one of `clobber_abi`, `const`, `options`, or `sym`, found `\"{}\"`\n-  --> $DIR/parse-error.rs:128:30\n+  --> $DIR/parse-error.rs:121:30\n    |\n LL | global_asm!(\"{}\", const FOO, \"{}\", const FOO);\n    |                              ^^^^ expected one of `clobber_abi`, `const`, `options`, or `sym`\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:130:13\n+  --> $DIR/parse-error.rs:123:13\n    |\n LL | global_asm!(format!(\"{{{}}}\", 0), const FOO);\n    |             ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:132:20\n+  --> $DIR/parse-error.rs:125:20\n    |\n LL | global_asm!(\"{1}\", format!(\"{{{}}}\", 0), const FOO, const BAR);\n    |                    ^^^^^^^^^^^^^^^^^^^^\n@@ -388,7 +320,7 @@ LL |         asm!(\"{}\", options(), const foo);\n    |                                     ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:48:44\n+  --> $DIR/parse-error.rs:47:44\n    |\n LL |     let mut foo = 0;\n    |     ----------- help: consider using `const` instead of `let`: `const foo`\n@@ -397,7 +329,16 @@ LL |         asm!(\"{}\", clobber_abi(\"C\"), const foo);\n    |                                            ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:55:31\n+  --> $DIR/parse-error.rs:50:55\n+   |\n+LL |     let mut foo = 0;\n+   |     ----------- help: consider using `const` instead of `let`: `const foo`\n+...\n+LL |         asm!(\"{}\", options(), clobber_abi(\"C\"), const foo);\n+   |                                                       ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/parse-error.rs:52:31\n    |\n LL |     let mut foo = 0;\n    |     ----------- help: consider using `const` instead of `let`: `const foo`\n@@ -406,7 +347,7 @@ LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                               ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:55:46\n+  --> $DIR/parse-error.rs:52:46\n    |\n LL |     let mut bar = 0;\n    |     ----------- help: consider using `const` instead of `let`: `const bar`\n@@ -415,7 +356,7 @@ LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                              ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:62:45\n+  --> $DIR/parse-error.rs:59:45\n    |\n LL |     let mut bar = 0;\n    |     ----------- help: consider using `const` instead of `let`: `const bar`\n@@ -424,7 +365,7 @@ LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n    |                                             ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:65:45\n+  --> $DIR/parse-error.rs:61:45\n    |\n LL |     let mut bar = 0;\n    |     ----------- help: consider using `const` instead of `let`: `const bar`\n@@ -433,14 +374,14 @@ LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n    |                                             ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:68:41\n+  --> $DIR/parse-error.rs:63:41\n    |\n LL |     let mut bar = 0;\n    |     ----------- help: consider using `const` instead of `let`: `const bar`\n ...\n LL |         asm!(\"{1}\", in(\"x0\") foo, const bar);\n    |                                         ^^^ non-constant value\n \n-error: aborting due to 64 previous errors\n+error: aborting due to 57 previous errors\n \n For more information about this error, try `rustc --explain E0435`."}, {"sha": "b16f9a06c2abe5a5f78a81371170abfed5487597", "filename": "tests/ui/asm/bad-template.aarch64_mirunsafeck.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb0fb246d55bf5f4afc73becbc0844522a3126de/tests%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb0fb246d55bf5f4afc73becbc0844522a3126de/tests%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr?ref=cb0fb246d55bf5f4afc73becbc0844522a3126de", "patch": "@@ -81,6 +81,11 @@ note: explicit register arguments cannot be used in the asm template\n    |\n LL |         asm!(\"{}\", in(\"x0\") foo);\n    |                    ^^^^^^^^^^^^\n+help: use the register name directly in the assembly code\n+  --> $DIR/bad-template.rs:48:20\n+   |\n+LL |         asm!(\"{}\", in(\"x0\") foo);\n+   |                    ^^^^^^^^^^^^\n \n error: asm template modifier must be a single character\n   --> $DIR/bad-template.rs:50:17"}, {"sha": "b16f9a06c2abe5a5f78a81371170abfed5487597", "filename": "tests/ui/asm/bad-template.aarch64_thirunsafeck.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb0fb246d55bf5f4afc73becbc0844522a3126de/tests%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb0fb246d55bf5f4afc73becbc0844522a3126de/tests%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr?ref=cb0fb246d55bf5f4afc73becbc0844522a3126de", "patch": "@@ -81,6 +81,11 @@ note: explicit register arguments cannot be used in the asm template\n    |\n LL |         asm!(\"{}\", in(\"x0\") foo);\n    |                    ^^^^^^^^^^^^\n+help: use the register name directly in the assembly code\n+  --> $DIR/bad-template.rs:48:20\n+   |\n+LL |         asm!(\"{}\", in(\"x0\") foo);\n+   |                    ^^^^^^^^^^^^\n \n error: asm template modifier must be a single character\n   --> $DIR/bad-template.rs:50:17"}, {"sha": "41ac37c33c2e057676ec24a44404480504e84d5b", "filename": "tests/ui/asm/bad-template.x86_64_mirunsafeck.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb0fb246d55bf5f4afc73becbc0844522a3126de/tests%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb0fb246d55bf5f4afc73becbc0844522a3126de/tests%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr?ref=cb0fb246d55bf5f4afc73becbc0844522a3126de", "patch": "@@ -81,6 +81,11 @@ note: explicit register arguments cannot be used in the asm template\n    |\n LL |         asm!(\"{}\", in(\"eax\") foo);\n    |                    ^^^^^^^^^^^^^\n+help: use the register name directly in the assembly code\n+  --> $DIR/bad-template.rs:45:20\n+   |\n+LL |         asm!(\"{}\", in(\"eax\") foo);\n+   |                    ^^^^^^^^^^^^^\n \n error: asm template modifier must be a single character\n   --> $DIR/bad-template.rs:50:17"}, {"sha": "41ac37c33c2e057676ec24a44404480504e84d5b", "filename": "tests/ui/asm/bad-template.x86_64_thirunsafeck.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb0fb246d55bf5f4afc73becbc0844522a3126de/tests%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb0fb246d55bf5f4afc73becbc0844522a3126de/tests%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr?ref=cb0fb246d55bf5f4afc73becbc0844522a3126de", "patch": "@@ -81,6 +81,11 @@ note: explicit register arguments cannot be used in the asm template\n    |\n LL |         asm!(\"{}\", in(\"eax\") foo);\n    |                    ^^^^^^^^^^^^^\n+help: use the register name directly in the assembly code\n+  --> $DIR/bad-template.rs:45:20\n+   |\n+LL |         asm!(\"{}\", in(\"eax\") foo);\n+   |                    ^^^^^^^^^^^^^\n \n error: asm template modifier must be a single character\n   --> $DIR/bad-template.rs:50:17"}, {"sha": "2e714d464ae74a7536dff0f7376a2f8aa22a201f", "filename": "tests/ui/asm/x86_64/parse-error.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cb0fb246d55bf5f4afc73becbc0844522a3126de/tests%2Fui%2Fasm%2Fx86_64%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb0fb246d55bf5f4afc73becbc0844522a3126de/tests%2Fui%2Fasm%2Fx86_64%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm%2Fx86_64%2Fparse-error.rs?ref=cb0fb246d55bf5f4afc73becbc0844522a3126de", "patch": "@@ -37,8 +37,7 @@ fn main() {\n         asm!(\"\", options(nomem, foo));\n         //~^ ERROR expected one of\n         asm!(\"{}\", options(), const foo);\n-        //~^ ERROR arguments are not allowed after options\n-        //~^^ ERROR attempt to use a non-constant value in a constant\n+        //~^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"\", clobber_abi());\n         //~^ ERROR at least one abi must be provided\n         asm!(\"\", clobber_abi(foo));\n@@ -48,12 +47,10 @@ fn main() {\n         asm!(\"\", clobber_abi(\"C\", foo));\n         //~^ ERROR expected string literal\n         asm!(\"{}\", clobber_abi(\"C\"), const foo);\n-        //~^ ERROR arguments are not allowed after clobber_abi\n-        //~^^ ERROR attempt to use a non-constant value in a constant\n+        //~^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"\", options(), clobber_abi(\"C\"));\n-        //~^ ERROR clobber_abi is not allowed after options\n         asm!(\"{}\", options(), clobber_abi(\"C\"), const foo);\n-        //~^ ERROR clobber_abi is not allowed after options\n+        //~^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"{a}\", a = const foo, a = const bar);\n         //~^ ERROR duplicate argument named `a`\n         //~^^ ERROR argument never used\n@@ -62,11 +59,9 @@ fn main() {\n         asm!(\"\", a = in(\"eax\") foo);\n         //~^ ERROR explicit register arguments cannot have names\n         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n-        //~^ ERROR named arguments cannot follow explicit register arguments\n-        //~^^ ERROR attempt to use a non-constant value in a constant\n+        //~^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n-        //~^ ERROR named arguments cannot follow explicit register arguments\n-        //~^^ ERROR attempt to use a non-constant value in a constant\n+        //~^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"{1}\", in(\"eax\") foo, const bar);\n         //~^ ERROR positional arguments cannot follow named arguments or explicit register arguments\n         //~^^ ERROR attempt to use a non-constant value in a constant\n@@ -108,20 +103,18 @@ global_asm!(\"\", options(nomem FOO));\n global_asm!(\"\", options(nomem, FOO));\n //~^ ERROR expected one of\n global_asm!(\"{}\", options(), const FOO);\n-//~^ ERROR arguments are not allowed after options\n global_asm!(\"\", clobber_abi(FOO));\n //~^ ERROR expected string literal\n global_asm!(\"\", clobber_abi(\"C\" FOO));\n //~^ ERROR expected one of `)` or `,`, found `FOO`\n global_asm!(\"\", clobber_abi(\"C\", FOO));\n //~^ ERROR expected string literal\n global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n-//~^ ERROR arguments are not allowed after clobber_abi\n-//~^^ ERROR `clobber_abi` cannot be used with `global_asm!`\n+//~^ ERROR `clobber_abi` cannot be used with `global_asm!`\n global_asm!(\"\", options(), clobber_abi(\"C\"));\n-//~^ ERROR clobber_abi is not allowed after options\n+//~^ ERROR `clobber_abi` cannot be used with `global_asm!`\n global_asm!(\"{}\", options(), clobber_abi(\"C\"), const FOO);\n-//~^ ERROR clobber_abi is not allowed after options\n+//~^ ERROR `clobber_abi` cannot be used with `global_asm!`\n global_asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n //~^ ERROR `clobber_abi` cannot be used with `global_asm!`\n global_asm!(\"{a}\", a = const FOO, a = const BAR);"}, {"sha": "0c9d6f71529c1a180d6f4d0166f14693f3fb6702", "filename": "tests/ui/asm/x86_64/parse-error.stderr", "status": "modified", "additions": 57, "deletions": 116, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/cb0fb246d55bf5f4afc73becbc0844522a3126de/tests%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb0fb246d55bf5f4afc73becbc0844522a3126de/tests%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr?ref=cb0fb246d55bf5f4afc73becbc0844522a3126de", "patch": "@@ -82,308 +82,240 @@ error: expected one of `)`, `att_syntax`, `may_unwind`, `nomem`, `noreturn`, `no\n LL |         asm!(\"\", options(nomem, foo));\n    |                                 ^^^ expected one of 10 possible tokens\n \n-error: arguments are not allowed after options\n-  --> $DIR/parse-error.rs:39:31\n-   |\n-LL |         asm!(\"{}\", options(), const foo);\n-   |                    ---------  ^^^^^^^^^ argument\n-   |                    |\n-   |                    previous options\n-\n error: at least one abi must be provided as an argument to `clobber_abi`\n-  --> $DIR/parse-error.rs:42:30\n+  --> $DIR/parse-error.rs:41:30\n    |\n LL |         asm!(\"\", clobber_abi());\n    |                              ^\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:44:30\n+  --> $DIR/parse-error.rs:43:30\n    |\n LL |         asm!(\"\", clobber_abi(foo));\n    |                              ^^^ not a string literal\n \n error: expected one of `)` or `,`, found `foo`\n-  --> $DIR/parse-error.rs:46:34\n+  --> $DIR/parse-error.rs:45:34\n    |\n LL |         asm!(\"\", clobber_abi(\"C\" foo));\n    |                                  ^^^ expected one of `)` or `,`\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:48:35\n+  --> $DIR/parse-error.rs:47:35\n    |\n LL |         asm!(\"\", clobber_abi(\"C\", foo));\n    |                                   ^^^ not a string literal\n \n-error: arguments are not allowed after clobber_abi\n-  --> $DIR/parse-error.rs:50:38\n-   |\n-LL |         asm!(\"{}\", clobber_abi(\"C\"), const foo);\n-   |                    ----------------  ^^^^^^^^^ argument\n-   |                    |\n-   |                    clobber_abi\n-\n-error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:53:29\n-   |\n-LL |         asm!(\"\", options(), clobber_abi(\"C\"));\n-   |                  ---------  ^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  options\n-\n-error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:55:31\n-   |\n-LL |         asm!(\"{}\", options(), clobber_abi(\"C\"), const foo);\n-   |                    ---------  ^^^^^^^^^^^^^^^^\n-   |                    |\n-   |                    options\n-\n error: duplicate argument named `a`\n-  --> $DIR/parse-error.rs:57:36\n+  --> $DIR/parse-error.rs:54:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                     -------------  ^^^^^^^^^^^^^ duplicate argument\n    |                     |\n    |                     previously here\n \n error: argument never used\n-  --> $DIR/parse-error.rs:57:36\n+  --> $DIR/parse-error.rs:54:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                    ^^^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n error: explicit register arguments cannot have names\n-  --> $DIR/parse-error.rs:62:18\n+  --> $DIR/parse-error.rs:59:18\n    |\n LL |         asm!(\"\", a = in(\"eax\") foo);\n    |                  ^^^^^^^^^^^^^^^^^\n \n-error: named arguments cannot follow explicit register arguments\n-  --> $DIR/parse-error.rs:64:36\n-   |\n-LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n-   |                     -------------  ^^^^^^^^^^^^^ named argument\n-   |                     |\n-   |                     explicit register argument\n-\n-error: named arguments cannot follow explicit register arguments\n-  --> $DIR/parse-error.rs:67:36\n-   |\n-LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n-   |                     -------------  ^^^^^^^^^^^^^ named argument\n-   |                     |\n-   |                     explicit register argument\n-\n error: positional arguments cannot follow named arguments or explicit register arguments\n-  --> $DIR/parse-error.rs:70:36\n+  --> $DIR/parse-error.rs:65:36\n    |\n LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n    |                     -------------  ^^^^^^^^^ positional argument\n    |                     |\n    |                     explicit register argument\n \n error: expected one of `clobber_abi`, `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"\"`\n-  --> $DIR/parse-error.rs:73:29\n+  --> $DIR/parse-error.rs:68:29\n    |\n LL |         asm!(\"\", options(), \"\");\n    |                             ^^ expected one of 9 possible tokens\n \n error: expected one of `clobber_abi`, `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"{}\"`\n-  --> $DIR/parse-error.rs:75:33\n+  --> $DIR/parse-error.rs:70:33\n    |\n LL |         asm!(\"{}\", in(reg) foo, \"{}\", out(reg) foo);\n    |                                 ^^^^ expected one of 9 possible tokens\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:77:14\n+  --> $DIR/parse-error.rs:72:14\n    |\n LL |         asm!(format!(\"{{{}}}\", 0), in(reg) foo);\n    |              ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:79:21\n+  --> $DIR/parse-error.rs:74:21\n    |\n LL |         asm!(\"{1}\", format!(\"{{{}}}\", 0), in(reg) foo, out(reg) bar);\n    |                     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: _ cannot be used for input operands\n-  --> $DIR/parse-error.rs:81:28\n+  --> $DIR/parse-error.rs:76:28\n    |\n LL |         asm!(\"{}\", in(reg) _);\n    |                            ^\n \n error: _ cannot be used for input operands\n-  --> $DIR/parse-error.rs:83:31\n+  --> $DIR/parse-error.rs:78:31\n    |\n LL |         asm!(\"{}\", inout(reg) _);\n    |                               ^\n \n error: _ cannot be used for input operands\n-  --> $DIR/parse-error.rs:85:35\n+  --> $DIR/parse-error.rs:80:35\n    |\n LL |         asm!(\"{}\", inlateout(reg) _);\n    |                                   ^\n \n error: requires at least a template string argument\n-  --> $DIR/parse-error.rs:92:1\n+  --> $DIR/parse-error.rs:87:1\n    |\n LL | global_asm!();\n    | ^^^^^^^^^^^^^\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:94:13\n+  --> $DIR/parse-error.rs:89:13\n    |\n LL | global_asm!(FOO);\n    |             ^^^\n \n error: expected token: `,`\n-  --> $DIR/parse-error.rs:96:18\n+  --> $DIR/parse-error.rs:91:18\n    |\n LL | global_asm!(\"{}\" FOO);\n    |                  ^^^ expected `,`\n \n error: expected operand, options, or additional template string\n-  --> $DIR/parse-error.rs:98:19\n+  --> $DIR/parse-error.rs:93:19\n    |\n LL | global_asm!(\"{}\", FOO);\n    |                   ^^^ expected operand, options, or additional template string\n \n error: expected expression, found end of macro arguments\n-  --> $DIR/parse-error.rs:100:24\n+  --> $DIR/parse-error.rs:95:24\n    |\n LL | global_asm!(\"{}\", const);\n    |                        ^ expected expression\n \n error: expected one of `,`, `.`, `?`, or an operator, found `FOO`\n-  --> $DIR/parse-error.rs:102:30\n+  --> $DIR/parse-error.rs:97:30\n    |\n LL | global_asm!(\"{}\", const(reg) FOO);\n    |                              ^^^ expected one of `,`, `.`, `?`, or an operator\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `FOO`\n-  --> $DIR/parse-error.rs:104:25\n+  --> $DIR/parse-error.rs:99:25\n    |\n LL | global_asm!(\"\", options(FOO));\n    |                         ^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n-  --> $DIR/parse-error.rs:106:25\n+  --> $DIR/parse-error.rs:101:25\n    |\n LL | global_asm!(\"\", options(nomem FOO));\n    |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n-  --> $DIR/parse-error.rs:108:25\n+  --> $DIR/parse-error.rs:103:25\n    |\n LL | global_asm!(\"\", options(nomem, FOO));\n    |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: arguments are not allowed after options\n-  --> $DIR/parse-error.rs:110:30\n-   |\n-LL | global_asm!(\"{}\", options(), const FOO);\n-   |                   ---------  ^^^^^^^^^ argument\n-   |                   |\n-   |                   previous options\n-\n error: expected string literal\n-  --> $DIR/parse-error.rs:112:29\n+  --> $DIR/parse-error.rs:106:29\n    |\n LL | global_asm!(\"\", clobber_abi(FOO));\n    |                             ^^^ not a string literal\n \n error: expected one of `)` or `,`, found `FOO`\n-  --> $DIR/parse-error.rs:114:33\n+  --> $DIR/parse-error.rs:108:33\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\" FOO));\n    |                                 ^^^ expected one of `)` or `,`\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:116:34\n+  --> $DIR/parse-error.rs:110:34\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\", FOO));\n    |                                  ^^^ not a string literal\n \n-error: arguments are not allowed after clobber_abi\n-  --> $DIR/parse-error.rs:118:37\n-   |\n-LL | global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n-   |                   ----------------  ^^^^^^^^^ argument\n-   |                   |\n-   |                   clobber_abi\n-\n error: `clobber_abi` cannot be used with `global_asm!`\n-  --> $DIR/parse-error.rs:118:19\n+  --> $DIR/parse-error.rs:112:19\n    |\n LL | global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n    |                   ^^^^^^^^^^^^^^^^\n \n-error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:121:28\n+error: `clobber_abi` cannot be used with `global_asm!`\n+  --> $DIR/parse-error.rs:114:28\n    |\n LL | global_asm!(\"\", options(), clobber_abi(\"C\"));\n-   |                 ---------  ^^^^^^^^^^^^^^^^\n-   |                 |\n-   |                 options\n+   |                            ^^^^^^^^^^^^^^^^\n \n-error: clobber_abi is not allowed after options\n-  --> $DIR/parse-error.rs:123:30\n+error: `clobber_abi` cannot be used with `global_asm!`\n+  --> $DIR/parse-error.rs:116:30\n    |\n LL | global_asm!(\"{}\", options(), clobber_abi(\"C\"), const FOO);\n-   |                   ---------  ^^^^^^^^^^^^^^^^\n-   |                   |\n-   |                   options\n+   |                              ^^^^^^^^^^^^^^^^\n \n error: `clobber_abi` cannot be used with `global_asm!`\n-  --> $DIR/parse-error.rs:125:17\n+  --> $DIR/parse-error.rs:118:17\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n    |                 ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^\n \n error: duplicate argument named `a`\n-  --> $DIR/parse-error.rs:127:35\n+  --> $DIR/parse-error.rs:120:35\n    |\n LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |                    -------------  ^^^^^^^^^^^^^ duplicate argument\n    |                    |\n    |                    previously here\n \n error: argument never used\n-  --> $DIR/parse-error.rs:127:35\n+  --> $DIR/parse-error.rs:120:35\n    |\n LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |                                   ^^^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n error: expected one of `clobber_abi`, `const`, `options`, or `sym`, found `\"\"`\n-  --> $DIR/parse-error.rs:130:28\n+  --> $DIR/parse-error.rs:123:28\n    |\n LL | global_asm!(\"\", options(), \"\");\n    |                            ^^ expected one of `clobber_abi`, `const`, `options`, or `sym`\n \n error: expected one of `clobber_abi`, `const`, `options`, or `sym`, found `\"{}\"`\n-  --> $DIR/parse-error.rs:132:30\n+  --> $DIR/parse-error.rs:125:30\n    |\n LL | global_asm!(\"{}\", const FOO, \"{}\", const FOO);\n    |                              ^^^^ expected one of `clobber_abi`, `const`, `options`, or `sym`\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:134:13\n+  --> $DIR/parse-error.rs:127:13\n    |\n LL | global_asm!(format!(\"{{{}}}\", 0), const FOO);\n    |             ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:136:20\n+  --> $DIR/parse-error.rs:129:20\n    |\n LL | global_asm!(\"{1}\", format!(\"{{{}}}\", 0), const FOO, const BAR);\n    |                    ^^^^^^^^^^^^^^^^^^^^\n@@ -400,7 +332,7 @@ LL |         asm!(\"{}\", options(), const foo);\n    |                                     ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:50:44\n+  --> $DIR/parse-error.rs:49:44\n    |\n LL |     let mut foo = 0;\n    |     ----------- help: consider using `const` instead of `let`: `const foo`\n@@ -409,7 +341,16 @@ LL |         asm!(\"{}\", clobber_abi(\"C\"), const foo);\n    |                                            ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:57:31\n+  --> $DIR/parse-error.rs:52:55\n+   |\n+LL |     let mut foo = 0;\n+   |     ----------- help: consider using `const` instead of `let`: `const foo`\n+...\n+LL |         asm!(\"{}\", options(), clobber_abi(\"C\"), const foo);\n+   |                                                       ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/parse-error.rs:54:31\n    |\n LL |     let mut foo = 0;\n    |     ----------- help: consider using `const` instead of `let`: `const foo`\n@@ -418,7 +359,7 @@ LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                               ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:57:46\n+  --> $DIR/parse-error.rs:54:46\n    |\n LL |     let mut bar = 0;\n    |     ----------- help: consider using `const` instead of `let`: `const bar`\n@@ -427,7 +368,7 @@ LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                              ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:64:46\n+  --> $DIR/parse-error.rs:61:46\n    |\n LL |     let mut bar = 0;\n    |     ----------- help: consider using `const` instead of `let`: `const bar`\n@@ -436,7 +377,7 @@ LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n    |                                              ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:67:46\n+  --> $DIR/parse-error.rs:63:46\n    |\n LL |     let mut bar = 0;\n    |     ----------- help: consider using `const` instead of `let`: `const bar`\n@@ -445,14 +386,14 @@ LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n    |                                              ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:70:42\n+  --> $DIR/parse-error.rs:65:42\n    |\n LL |     let mut bar = 0;\n    |     ----------- help: consider using `const` instead of `let`: `const bar`\n ...\n LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n    |                                          ^^^ non-constant value\n \n-error: aborting due to 66 previous errors\n+error: aborting due to 59 previous errors\n \n For more information about this error, try `rustc --explain E0435`."}]}