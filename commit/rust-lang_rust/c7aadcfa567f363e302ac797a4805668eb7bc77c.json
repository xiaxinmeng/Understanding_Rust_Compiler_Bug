{"sha": "c7aadcfa567f363e302ac797a4805668eb7bc77c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3YWFkY2ZhNTY3ZjM2M2UzMDJhYzc5N2E0ODA1NjY4ZWI3YmM3N2M=", "commit": {"author": {"name": "Ben Lewis", "email": "benlewisj@gmail.com", "date": "2020-02-14T23:57:46Z"}, "committer": {"name": "Ben Lewis", "email": "benlewisj@gmail.com", "date": "2020-02-14T23:57:46Z"}, "message": "Change `const_field` and `const_caller_location` to return `ConstValue` instead of `Const` as the type\nin the returned const isn't needed.", "tree": {"sha": "d53b24ba9f17492691f48b290c3b750f0571dc38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d53b24ba9f17492691f48b290c3b750f0571dc38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7aadcfa567f363e302ac797a4805668eb7bc77c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7aadcfa567f363e302ac797a4805668eb7bc77c", "html_url": "https://github.com/rust-lang/rust/commit/c7aadcfa567f363e302ac797a4805668eb7bc77c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7aadcfa567f363e302ac797a4805668eb7bc77c/comments", "author": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac", "html_url": "https://github.com/rust-lang/rust/commit/c423a8649c0bac16fd4d1b9cbea657e4245bb5ac"}], "stats": {"total": 75, "additions": 33, "deletions": 42}, "files": [{"sha": "d9bf93dd6793c3daf620569baba68bf10fac769c", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7aadcfa567f363e302ac797a4805668eb7bc77c/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7aadcfa567f363e302ac797a4805668eb7bc77c/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=c7aadcfa567f363e302ac797a4805668eb7bc77c", "patch": "@@ -517,7 +517,7 @@ rustc_queries! {\n         /// Extracts a field of a (variant of a) const.\n         query const_field(\n             key: ty::ParamEnvAnd<'tcx, (&'tcx ty::Const<'tcx>, mir::Field)>\n-        ) -> &'tcx ty::Const<'tcx> {\n+        ) -> ConstValue<'tcx> {\n             no_force\n             desc { \"extract field of const\" }\n         }\n@@ -531,7 +531,7 @@ rustc_queries! {\n             desc { \"destructure constant\" }\n         }\n \n-        query const_caller_location(key: (rustc_span::Symbol, u32, u32)) -> &'tcx ty::Const<'tcx> {\n+        query const_caller_location(key: (rustc_span::Symbol, u32, u32)) -> ConstValue<'tcx> {\n             no_force\n             desc { \"get a &core::panic::Location referring to a span\" }\n         }"}, {"sha": "33312e730f209c4fb60194fb2a9f538d34f78c51", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7aadcfa567f363e302ac797a4805668eb7bc77c/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7aadcfa567f363e302ac797a4805668eb7bc77c/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=c7aadcfa567f363e302ac797a4805668eb7bc77c", "patch": "@@ -14,7 +14,7 @@ use crate::middle::resolve_lifetime::{ObjectLifetimeDefault, Region, ResolveLife\n use crate::middle::stability::{self, DeprecationEntry};\n use crate::mir;\n use crate::mir::interpret::GlobalId;\n-use crate::mir::interpret::{ConstEvalRawResult, ConstEvalResult};\n+use crate::mir::interpret::{ConstEvalRawResult, ConstEvalResult, ConstValue};\n use crate::mir::interpret::{LitToConstError, LitToConstInput};\n use crate::mir::mono::CodegenUnit;\n use crate::session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};"}, {"sha": "3d1e72e1c73d735c1b00faa32e5d855b22f70965", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7aadcfa567f363e302ac797a4805668eb7bc77c/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7aadcfa567f363e302ac797a4805668eb7bc77c/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=c7aadcfa567f363e302ac797a4805668eb7bc77c", "patch": "@@ -193,8 +193,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                     .tcx\n                     .const_eval_instance(ty::ParamEnv::reveal_all(), instance, None)\n                     .unwrap();\n-                let const_ = ty::Const { val: ty::ConstKind::Value(ty_name), ty: ret_ty };\n-                OperandRef::from_const(self, &const_).immediate_or_packed_pair(self)\n+                OperandRef::from_const(self, ty_name, ret_ty).immediate_or_packed_pair(self)\n             }\n             \"init\" => {\n                 let ty = substs.type_at(0);"}, {"sha": "d684f842ddc69e0df96f81c53bc258d915f67585", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7aadcfa567f363e302ac797a4805668eb7bc77c/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7aadcfa567f363e302ac797a4805668eb7bc77c/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=c7aadcfa567f363e302ac797a4805668eb7bc77c", "patch": "@@ -991,7 +991,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 caller.line as u32,\n                 caller.col_display as u32 + 1,\n             ));\n-            OperandRef::from_const(bx, const_loc)\n+            OperandRef::from_const(bx, const_loc, bx.tcx().caller_location_ty())\n         })\n     }\n "}, {"sha": "8722aacca721f4efabdcd11071e7e18e481b0293", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c7aadcfa567f363e302ac797a4805668eb7bc77c/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7aadcfa567f363e302ac797a4805668eb7bc77c/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=c7aadcfa567f363e302ac797a4805668eb7bc77c", "patch": "@@ -1,7 +1,7 @@\n use crate::mir::operand::OperandRef;\n use crate::traits::*;\n use rustc::mir;\n-use rustc::mir::interpret::ErrorHandled;\n+use rustc::mir::interpret::{ConstValue, ErrorHandled};\n use rustc::ty::layout::{self, HasTyCtxt};\n use rustc::ty::{self, Ty};\n use rustc_index::vec::Idx;\n@@ -30,27 +30,21 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n             _ => {\n                 let val = self.eval_mir_constant(constant)?;\n-                Ok(OperandRef::from_const(bx, &val))\n+                Ok(OperandRef::from_const(bx, val.clone(), constant.literal.ty))\n             }\n         }\n     }\n \n     pub fn eval_mir_constant(\n         &mut self,\n         constant: &mir::Constant<'tcx>,\n-    ) -> Result<&'tcx ty::Const<'tcx>, ErrorHandled> {\n+    ) -> Result<ConstValue<'tcx>, ErrorHandled> {\n         match constant.literal.val {\n             ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n                 let substs = self.monomorphize(&substs);\n                 self.cx\n                     .tcx()\n                     .const_eval_resolve(ty::ParamEnv::reveal_all(), def_id, substs, promoted, None)\n-                    .map(|val| {\n-                        self.cx.tcx().mk_const(ty::Const {\n-                            val: ty::ConstKind::Value(val),\n-                            ty: constant.literal.ty,\n-                        })\n-                    })\n                     .map_err(|err| {\n                         if promoted.is_none() {\n                             self.cx\n@@ -61,7 +55,15 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         err\n                     })\n             }\n-            _ => Ok(self.monomorphize(&constant.literal)),\n+            ty::ConstKind::Value(value) => Ok(value),\n+            _ => {\n+                let const_ = self.monomorphize(&constant.literal);\n+                if let ty::ConstKind::Value(value) = const_.val {\n+                    Ok(value)\n+                } else {\n+                    bug!(\"encountered bad ConstKind in codegen\");\n+                }\n+            }\n         }\n     }\n \n@@ -71,21 +73,22 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         bx: &Bx,\n         span: Span,\n         ty: Ty<'tcx>,\n-        constant: Result<&'tcx ty::Const<'tcx>, ErrorHandled>,\n+        constant: Result<ConstValue<'tcx>, ErrorHandled>,\n     ) -> (Bx::Value, Ty<'tcx>) {\n         constant\n-            .map(|c| {\n-                let field_ty = c.ty.builtin_index().unwrap();\n-                let fields = match c.ty.kind {\n+            .map(|val| {\n+                let field_ty = ty.builtin_index().unwrap();\n+                let fields = match ty.kind {\n                     ty::Array(_, n) => n.eval_usize(bx.tcx(), ty::ParamEnv::reveal_all()),\n-                    _ => bug!(\"invalid simd shuffle type: {}\", c.ty),\n+                    _ => bug!(\"invalid simd shuffle type: {}\", ty),\n                 };\n+                let c = bx.tcx().mk_const(ty::Const { val: ty::ConstKind::Value(val), ty });\n                 let values: Vec<_> = (0..fields)\n                     .map(|field| {\n                         let field = bx.tcx().const_field(\n                             ty::ParamEnv::reveal_all().and((&c, mir::Field::new(field as usize))),\n                         );\n-                        if let Some(prim) = field.val.try_to_scalar() {\n+                        if let Some(prim) = field.try_to_scalar() {\n                             let layout = bx.layout_of(field_ty);\n                             let scalar = match layout.abi {\n                                 layout::Abi::Scalar(ref x) => x,"}, {"sha": "07c8829e7d88352bb6edf0ce4c9e6075d7e0cb58", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c7aadcfa567f363e302ac797a4805668eb7bc77c/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7aadcfa567f363e302ac797a4805668eb7bc77c/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=c7aadcfa567f363e302ac797a4805668eb7bc77c", "patch": "@@ -8,8 +8,8 @@ use crate::MemFlags;\n \n use rustc::mir;\n use rustc::mir::interpret::{ConstValue, ErrorHandled, Pointer, Scalar};\n-use rustc::ty;\n use rustc::ty::layout::{self, Align, LayoutOf, Size, TyLayout};\n+use rustc::ty::Ty;\n \n use std::fmt;\n \n@@ -66,20 +66,16 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n \n     pub fn from_const<Bx: BuilderMethods<'a, 'tcx, Value = V>>(\n         bx: &mut Bx,\n-        val: &ty::Const<'tcx>,\n+        val: ConstValue<'tcx>,\n+        ty: Ty<'tcx>,\n     ) -> Self {\n-        let layout = bx.layout_of(val.ty);\n+        let layout = bx.layout_of(ty);\n \n         if layout.is_zst() {\n             return OperandRef::new_zst(bx, layout);\n         }\n \n-        let val_val = match val.val {\n-            ty::ConstKind::Value(val_val) => val_val,\n-            _ => bug!(\"encountered bad ConstKind in codegen\"),\n-        };\n-\n-        let val = match val_val {\n+        let val = match val {\n             ConstValue::Scalar(x) => {\n                 let scalar = match layout.abi {\n                     layout::Abi::Scalar(ref x) => x,"}, {"sha": "5915520535d24990295de2e70052e1187c8c18c5", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c7aadcfa567f363e302ac797a4805668eb7bc77c/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7aadcfa567f363e302ac797a4805668eb7bc77c/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=c7aadcfa567f363e302ac797a4805668eb7bc77c", "patch": "@@ -26,7 +26,7 @@ pub(crate) fn const_field<'tcx>(\n     variant: Option<VariantIdx>,\n     field: mir::Field,\n     value: &'tcx ty::Const<'tcx>,\n-) -> &'tcx ty::Const<'tcx> {\n+) -> ConstValue<'tcx> {\n     trace!(\"const_field: {:?}, {:?}\", field, value);\n     let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n     // get the operand again\n@@ -40,26 +40,19 @@ pub(crate) fn const_field<'tcx>(\n     let field = ecx.operand_field(down, field.index() as u64).unwrap();\n     // and finally move back to the const world, always normalizing because\n     // this is not called for statics.\n-    let val = op_to_const(&ecx, field);\n-    tcx.mk_const(ty::Const { val: ty::ConstKind::Value(val), ty: op.layout.ty })\n+    op_to_const(&ecx, field)\n }\n \n pub(crate) fn const_caller_location<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     (file, line, col): (Symbol, u32, u32),\n-) -> &'tcx ty::Const<'tcx> {\n+) -> ConstValue<'tcx> {\n     trace!(\"const_caller_location: {}:{}:{}\", file, line, col);\n     let mut ecx = mk_eval_cx(tcx, DUMMY_SP, ty::ParamEnv::reveal_all(), false);\n \n-    let loc_ty = tcx.caller_location_ty();\n     let loc_place = ecx.alloc_caller_location(file, line, col);\n     intern_const_alloc_recursive(&mut ecx, InternKind::Constant, loc_place, false).unwrap();\n-    let loc_const = ty::Const {\n-        ty: loc_ty,\n-        val: ty::ConstKind::Value(ConstValue::Scalar(loc_place.ptr.into())),\n-    };\n-\n-    tcx.mk_const(loc_const)\n+    ConstValue::Scalar(loc_place.ptr.into())\n }\n \n // this function uses `unwrap` copiously, because an already validated constant"}]}