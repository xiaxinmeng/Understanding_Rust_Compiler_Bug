{"sha": "e80a37558df5ac9828caccd48459fdb7be488f5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MGEzNzU1OGRmNWFjOTgyOGNhY2NkNDg0NTlmZGI3YmU0ODhmNWI=", "commit": {"author": {"name": "Andrea Corradi", "email": "andreac@unstable.it", "date": "2019-05-02T14:35:43Z"}, "committer": {"name": "Andrea Corradi", "email": "andreac@unstable.it", "date": "2019-05-29T20:33:38Z"}, "message": "Add custom nth_back for Skip", "tree": {"sha": "684d14894147b7f3f78002e9b43c4c41495b555b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/684d14894147b7f3f78002e9b43c4c41495b555b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e80a37558df5ac9828caccd48459fdb7be488f5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e80a37558df5ac9828caccd48459fdb7be488f5b", "html_url": "https://github.com/rust-lang/rust/commit/e80a37558df5ac9828caccd48459fdb7be488f5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e80a37558df5ac9828caccd48459fdb7be488f5b/comments", "author": {"login": "acrrd", "id": 1222231, "node_id": "MDQ6VXNlcjEyMjIyMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1222231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acrrd", "html_url": "https://github.com/acrrd", "followers_url": "https://api.github.com/users/acrrd/followers", "following_url": "https://api.github.com/users/acrrd/following{/other_user}", "gists_url": "https://api.github.com/users/acrrd/gists{/gist_id}", "starred_url": "https://api.github.com/users/acrrd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acrrd/subscriptions", "organizations_url": "https://api.github.com/users/acrrd/orgs", "repos_url": "https://api.github.com/users/acrrd/repos", "events_url": "https://api.github.com/users/acrrd/events{/privacy}", "received_events_url": "https://api.github.com/users/acrrd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acrrd", "id": 1222231, "node_id": "MDQ6VXNlcjEyMjIyMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1222231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acrrd", "html_url": "https://github.com/acrrd", "followers_url": "https://api.github.com/users/acrrd/followers", "following_url": "https://api.github.com/users/acrrd/following{/other_user}", "gists_url": "https://api.github.com/users/acrrd/gists{/gist_id}", "starred_url": "https://api.github.com/users/acrrd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acrrd/subscriptions", "organizations_url": "https://api.github.com/users/acrrd/orgs", "repos_url": "https://api.github.com/users/acrrd/repos", "events_url": "https://api.github.com/users/acrrd/events{/privacy}", "received_events_url": "https://api.github.com/users/acrrd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "758dc9af504e2fe75813bd362619231ecc727898", "url": "https://api.github.com/repos/rust-lang/rust/commits/758dc9af504e2fe75813bd362619231ecc727898", "html_url": "https://github.com/rust-lang/rust/commit/758dc9af504e2fe75813bd362619231ecc727898"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "c2edcd22f953b45d0fecc20167b3d8eea20af3a9", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e80a37558df5ac9828caccd48459fdb7be488f5b/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80a37558df5ac9828caccd48459fdb7be488f5b/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=e80a37558df5ac9828caccd48459fdb7be488f5b", "patch": "@@ -1509,6 +1509,20 @@ impl<I> DoubleEndedIterator for Skip<I> where I: DoubleEndedIterator + ExactSize\n         }\n     }\n \n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<I::Item> {\n+        let len = self.len();\n+        if n < len {\n+            self.iter.nth_back(n)\n+        } else {\n+            if len > 0 {\n+                // consume the original iterator\n+                self.iter.nth_back(len-1);\n+            }\n+            None\n+        }\n+    }\n+\n     fn try_rfold<Acc, Fold, R>(&mut self, init: Acc, mut fold: Fold) -> R where\n         Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n     {"}, {"sha": "7e3190f8a20d603e6d488c2e3cb91b0263dccb86", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e80a37558df5ac9828caccd48459fdb7be488f5b/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80a37558df5ac9828caccd48459fdb7be488f5b/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=e80a37558df5ac9828caccd48459fdb7be488f5b", "patch": "@@ -2280,6 +2280,40 @@ fn test_skip_try_folds() {\n     assert_eq!(iter.next_back(), Some(24));\n }\n \n+#[test]\n+fn test_skip_nth_back() {\n+    let xs = [0, 1, 2, 3, 4, 5];\n+    let mut it = xs.iter().skip(2);\n+    assert_eq!(it.nth_back(0), Some(&5));\n+    assert_eq!(it.nth_back(1), Some(&3));\n+    assert_eq!(it.nth_back(0), Some(&2));\n+    assert_eq!(it.nth_back(0), None);\n+\n+    let ys = [2, 3, 4, 5];\n+    let mut ity = ys.iter();\n+    let mut it = xs.iter().skip(2);\n+    assert_eq!(it.nth_back(1), ity.nth_back(1));\n+    assert_eq!(it.clone().nth(0), ity.clone().nth(0));\n+    assert_eq!(it.nth_back(0), ity.nth_back(0));\n+    assert_eq!(it.clone().nth(0), ity.clone().nth(0));\n+    assert_eq!(it.nth_back(0), ity.nth_back(0));\n+    assert_eq!(it.clone().nth(0), ity.clone().nth(0));\n+    assert_eq!(it.nth_back(0), ity.nth_back(0));\n+    assert_eq!(it.clone().nth(0), ity.clone().nth(0));\n+\n+    let mut it = xs.iter().skip(2);\n+    assert_eq!(it.nth_back(4), None);\n+    assert_eq!(it.nth_back(0), None);\n+\n+    let mut it = xs.iter();\n+    it.by_ref().skip(2).nth_back(3);\n+    assert_eq!(it.next_back(), Some(&1));\n+\n+    let mut it = xs.iter();\n+    it.by_ref().skip(2).nth_back(10);\n+    assert_eq!(it.next_back(), Some(&1));\n+}\n+\n #[test]\n fn test_take_try_folds() {\n     let f = &|acc, x| i32::checked_add(2*acc, x);"}]}