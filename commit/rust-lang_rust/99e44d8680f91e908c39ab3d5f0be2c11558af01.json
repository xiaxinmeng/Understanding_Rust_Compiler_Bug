{"sha": "99e44d8680f91e908c39ab3d5f0be2c11558af01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZTQ0ZDg2ODBmOTFlOTA4YzM5YWIzZDVmMGJlMmMxMTU1OGFmMDE=", "commit": {"author": {"name": "lukaramu", "email": "lukaramu@users.noreply.github.com", "date": "2017-08-07T21:07:34Z"}, "committer": {"name": "lukaramu", "email": "lukaramu@users.noreply.github.com", "date": "2017-08-07T22:37:20Z"}, "message": "Added to core::ops module docs\n\nPart of #29365.\n* Added paragraph adapted from API guidelines that operator implementations\n  should be unsurprising\n* Modified Point example to be more clear when just reading it", "tree": {"sha": "00951caba7b09748ac3be2d6999f111ed49cd358", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00951caba7b09748ac3be2d6999f111ed49cd358"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99e44d8680f91e908c39ab3d5f0be2c11558af01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99e44d8680f91e908c39ab3d5f0be2c11558af01", "html_url": "https://github.com/rust-lang/rust/commit/99e44d8680f91e908c39ab3d5f0be2c11558af01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99e44d8680f91e908c39ab3d5f0be2c11558af01/comments", "author": null, "committer": null, "parents": [{"sha": "f1cc7d6c142247de355d65d87578ccd1469b1304", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1cc7d6c142247de355d65d87578ccd1469b1304", "html_url": "https://github.com/rust-lang/rust/commit/f1cc7d6c142247de355d65d87578ccd1469b1304"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "b5e6912b10d6e2948b0852ce17dde722d0052279", "filename": "src/libcore/ops/mod.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/99e44d8680f91e908c39ab3d5f0be2c11558af01/src%2Flibcore%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e44d8680f91e908c39ab3d5f0be2c11558af01/src%2Flibcore%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fmod.rs?ref=99e44d8680f91e908c39ab3d5f0be2c11558af01", "patch": "@@ -21,6 +21,12 @@\n //! custom operators are required, you should look toward macros or compiler\n //! plugins to extend Rust's syntax.\n //!\n+//! Implementations of operator traits should be unsurprising in their\n+//! respective contexts, keeping in mind their usual meanings and\n+//! [operator precedence]. For example, when implementing [`Mul`], the operation\n+//! should have some resemblance to multiplication (and share expected\n+//! properties like associativity).\n+//!\n //! Note that the `&&` and `||` operators short-circuit, i.e. they only\n //! evaluate their second operand if it contributes to the result. Since this\n //! behavior is not enforceable by traits, `&&` and `||` are not supported as\n@@ -46,7 +52,7 @@\n //! ```rust\n //! use std::ops::{Add, Sub};\n //!\n-//! #[derive(Debug)]\n+//! #[derive(Debug, PartialEq)]\n //! struct Point {\n //!     x: i32,\n //!     y: i32,\n@@ -67,10 +73,9 @@\n //!         Point {x: self.x - other.x, y: self.y - other.y}\n //!     }\n //! }\n-//! fn main() {\n-//!     println!(\"{:?}\", Point {x: 1, y: 0} + Point {x: 2, y: 3});\n-//!     println!(\"{:?}\", Point {x: 1, y: 0} - Point {x: 2, y: 3});\n-//! }\n+//!\n+//! assert_eq!(Point {x: 3, y: 3}, Point {x: 1, y: 0} + Point {x: 2, y: 3});\n+//! assert_eq!(Point {x: -1, y: -3}, Point {x: 1, y: 0} - Point {x: 2, y: 3});\n //! ```\n //!\n //! See the documentation for each trait for an example implementation.\n@@ -143,7 +148,9 @@\n //! [`FnOnce`]: trait.FnOnce.html\n //! [`Add`]: trait.Add.html\n //! [`Sub`]: trait.Sub.html\n+//! [`Mul`]: trait.Mul.html\n //! [`clone`]: ../clone/trait.Clone.html#tymethod.clone\n+//! [operator precedence]: ../../reference/expressions.html#operator-precedence\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}