{"sha": "2d7edf908d5767567d20bec2440099b317169d8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkN2VkZjkwOGQ1NzY3NTY3ZDIwYmVjMjQ0MDA5OWIzMTcxNjlkOGQ=", "commit": {"author": {"name": "Diogo Sousa", "email": "diogogsousa@gmail.com", "date": "2018-09-19T00:09:36Z"}, "committer": {"name": "Diogo Sousa", "email": "diogogsousa@gmail.com", "date": "2018-09-19T00:12:13Z"}, "message": "Use full name to identify a macro in a `FileName`.\n\nBefore this two macros with same name would be indistinguishable inside a\n`FileName`.  This caused a bug in incremental compilation (see #53097) since\ntwo different macros would map out to the same `StableFilemapId`.\n\nFixes #53097.", "tree": {"sha": "ceea9482ad60fa28b9ed1dcb9f20b345492bf634", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ceea9482ad60fa28b9ed1dcb9f20b345492bf634"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d7edf908d5767567d20bec2440099b317169d8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d7edf908d5767567d20bec2440099b317169d8d", "html_url": "https://github.com/rust-lang/rust/commit/2d7edf908d5767567d20bec2440099b317169d8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d7edf908d5767567d20bec2440099b317169d8d/comments", "author": {"login": "orium", "id": 4107683, "node_id": "MDQ6VXNlcjQxMDc2ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4107683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orium", "html_url": "https://github.com/orium", "followers_url": "https://api.github.com/users/orium/followers", "following_url": "https://api.github.com/users/orium/following{/other_user}", "gists_url": "https://api.github.com/users/orium/gists{/gist_id}", "starred_url": "https://api.github.com/users/orium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orium/subscriptions", "organizations_url": "https://api.github.com/users/orium/orgs", "repos_url": "https://api.github.com/users/orium/repos", "events_url": "https://api.github.com/users/orium/events{/privacy}", "received_events_url": "https://api.github.com/users/orium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "orium", "id": 4107683, "node_id": "MDQ6VXNlcjQxMDc2ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4107683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orium", "html_url": "https://github.com/orium", "followers_url": "https://api.github.com/users/orium/followers", "following_url": "https://api.github.com/users/orium/following{/other_user}", "gists_url": "https://api.github.com/users/orium/gists{/gist_id}", "starred_url": "https://api.github.com/users/orium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orium/subscriptions", "organizations_url": "https://api.github.com/users/orium/orgs", "repos_url": "https://api.github.com/users/orium/repos", "events_url": "https://api.github.com/users/orium/events{/privacy}", "received_events_url": "https://api.github.com/users/orium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79fcc58b24d85743d025fd880fca55748662ed3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/79fcc58b24d85743d025fd880fca55748662ed3e", "html_url": "https://github.com/rust-lang/rust/commit/79fcc58b24d85743d025fd880fca55748662ed3e"}], "stats": {"total": 62, "additions": 47, "deletions": 15}, "files": [{"sha": "fa4bf1511b87434bc6c1d2094293f2b96fed6afe", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2d7edf908d5767567d20bec2440099b317169d8d/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7edf908d5767567d20bec2440099b317169d8d/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=2d7edf908d5767567d20bec2440099b317169d8d", "patch": "@@ -287,6 +287,31 @@ impl DefPath {\n         s\n     }\n \n+    /// Return filename friendly string of the DefPah with the\n+    /// crate-prefix.\n+    pub fn to_string_friendly<F>(&self, crate_imported_name: F) -> String\n+        where F: FnOnce(CrateNum) -> Symbol\n+    {\n+        let crate_name_str = crate_imported_name(self.krate).as_str();\n+        let mut s = String::with_capacity(crate_name_str.len() + self.data.len() * 16);\n+\n+        write!(s, \"::{}\", crate_name_str).unwrap();\n+\n+        for component in &self.data {\n+            if component.disambiguator == 0 {\n+                write!(s, \"::{}\", component.data.as_interned_str()).unwrap();\n+            } else {\n+                write!(s,\n+                       \"{}[{}]\",\n+                       component.data.as_interned_str(),\n+                       component.disambiguator)\n+                    .unwrap();\n+            }\n+        }\n+\n+        s\n+    }\n+\n     /// Return filename friendly string of the DefPah without\n     /// the crate-prefix. This method is useful if you don't have\n     /// a TyCtxt available."}, {"sha": "296602e21bad74f13c0871478811dc8eb62adfdb", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d7edf908d5767567d20bec2440099b317169d8d/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7edf908d5767567d20bec2440099b317169d8d/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=2d7edf908d5767567d20bec2440099b317169d8d", "patch": "@@ -606,6 +606,7 @@ impl<'a, 'tcx, 'x> SpecializedDecoder<interpret::AllocId> for CacheDecoder<'a, '\n         alloc_decoding_session.decode_alloc_id(self)\n     }\n }\n+\n impl<'a, 'tcx, 'x> SpecializedDecoder<Span> for CacheDecoder<'a, 'tcx, 'x> {\n     fn specialized_decode(&mut self) -> Result<Span, Self::Error> {\n         let tag: u8 = Decodable::decode(self)?;"}, {"sha": "fa2debf2c0dc75e1cad65d7bf402f87c5d615af8", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d7edf908d5767567d20bec2440099b317169d8d/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7edf908d5767567d20bec2440099b317169d8d/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=2d7edf908d5767567d20bec2440099b317169d8d", "patch": "@@ -256,6 +256,7 @@ impl<'a> CrateLoader<'a> {\n \n         let cmeta = cstore::CrateMetadata {\n             name: crate_root.name,\n+            imported_name: ident,\n             extern_crate: Lock::new(None),\n             def_path_table: Lrc::new(def_path_table),\n             trait_impls,"}, {"sha": "ec48a4a4c6997187fd3e2a8cf1cbdbfa39e087a1", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d7edf908d5767567d20bec2440099b317169d8d/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7edf908d5767567d20bec2440099b317169d8d/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=2d7edf908d5767567d20bec2440099b317169d8d", "patch": "@@ -53,8 +53,13 @@ pub struct ImportedSourceFile {\n }\n \n pub struct CrateMetadata {\n+    /// Original name of the crate.\n     pub name: Symbol,\n \n+    /// Name of the crate as imported.  I.e. if imported with\n+    /// `extern crate foo as bar;` this will be `bar`.\n+    pub imported_name: Symbol,\n+\n     /// Information about the extern crate that caused this crate to\n     /// be loaded. If this is `None`, then the crate was injected\n     /// (e.g., by the allocator)"}, {"sha": "1236857826c1ce0325240843bf4215ae797659b0", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d7edf908d5767567d20bec2440099b317169d8d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7edf908d5767567d20bec2440099b317169d8d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=2d7edf908d5767567d20bec2440099b317169d8d", "patch": "@@ -447,8 +447,7 @@ impl cstore::CStore {\n         let data = self.get_crate_data(id.krate);\n         if let Some(ref proc_macros) = data.proc_macros {\n             return LoadedMacro::ProcMacro(proc_macros[id.index.to_proc_macro_index()].1.clone());\n-        } else if data.name == \"proc_macro\" &&\n-                  self.get_crate_data(id.krate).item_name(id.index) == \"quote\" {\n+        } else if data.name == \"proc_macro\" && data.item_name(id.index) == \"quote\" {\n             use syntax::ext::base::SyntaxExtension;\n             use syntax_ext::proc_macro_impl::BangProcMacro;\n \n@@ -460,8 +459,9 @@ impl cstore::CStore {\n             return LoadedMacro::ProcMacro(Lrc::new(ext));\n         }\n \n-        let (name, def) = data.get_macro(id.index);\n-        let source_name = FileName::Macros(name.to_string());\n+        let def = data.get_macro(id.index);\n+        let macro_full_name = data.def_path(id.index).to_string_friendly(|_| data.imported_name);\n+        let source_name = FileName::Macros(macro_full_name);\n \n         let source_file = sess.parse_sess.source_map().new_source_file(source_name, def.body);\n         let local_span = Span::new(source_file.start_pos, source_file.end_pos, NO_EXPANSION);"}, {"sha": "3f93bfcc3ae223333e4269489114f927552d5af7", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d7edf908d5767567d20bec2440099b317169d8d/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7edf908d5767567d20bec2440099b317169d8d/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=2d7edf908d5767567d20bec2440099b317169d8d", "patch": "@@ -1069,10 +1069,10 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    pub fn get_macro(&self, id: DefIndex) -> (InternedString, MacroDef) {\n+    pub fn get_macro(&self, id: DefIndex) -> MacroDef {\n         let entry = self.entry(id);\n         match entry.kind {\n-            EntryKind::MacroDef(macro_def) => (self.item_name(id), macro_def.decode(self)),\n+            EntryKind::MacroDef(macro_def) => macro_def.decode(self),\n             _ => bug!(),\n         }\n     }"}, {"sha": "67fd847a2ae9197790a0d2a71917e0cec74d84fb", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d7edf908d5767567d20bec2440099b317169d8d/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7edf908d5767567d20bec2440099b317169d8d/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=2d7edf908d5767567d20bec2440099b317169d8d", "patch": "@@ -87,7 +87,7 @@ scoped_thread_local!(pub static GLOBALS: Globals);\n #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash, RustcDecodable, RustcEncodable)]\n pub enum FileName {\n     Real(PathBuf),\n-    /// e.g. \"std\" macros\n+    /// A macro.  This includes the full name of the macro, so that there are no clashes.\n     Macros(String),\n     /// call to `quote!`\n     QuoteExpansion,"}, {"sha": "5955410aa106b15582ac56b85c2e04d29e5a31f0", "filename": "src/test/ui/editions/edition-keywords-2018-2015-parsing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d7edf908d5767567d20bec2440099b317169d8d/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d7edf908d5767567d20bec2440099b317169d8d/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr?ref=2d7edf908d5767567d20bec2440099b317169d8d", "patch": "@@ -23,7 +23,7 @@ LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the t\n    |                                   ^^^^^\n \n error: expected one of `move`, `|`, or `||`, found `<eof>`\n-  --> <passes_ident macros>:1:22\n+  --> <::edition_kw_macro_2015::passes_ident macros>:1:22\n    |\n LL | ( $ i : ident ) => ( $ i )\n    |                      ^^^ expected one of `move`, `|`, or `||` here"}, {"sha": "6ea736828f9078e95716a36760032b4b3d3b50fe", "filename": "src/test/ui/editions/edition-keywords-2018-2018-parsing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d7edf908d5767567d20bec2440099b317169d8d/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d7edf908d5767567d20bec2440099b317169d8d/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr?ref=2d7edf908d5767567d20bec2440099b317169d8d", "patch": "@@ -23,7 +23,7 @@ LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the t\n    |                                   ^^^^^\n \n error: expected one of `move`, `|`, or `||`, found `<eof>`\n-  --> <passes_ident macros>:1:22\n+  --> <::edition_kw_macro_2018::passes_ident macros>:1:22\n    |\n LL | ( $ i : ident ) => ( $ i )\n    |                      ^^^ expected one of `move`, `|`, or `||` here"}, {"sha": "9c475451ce32f64e14cdd86af0a7e6512f7c0968", "filename": "src/test/ui/imports/local-modularized-tricky-fail-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d7edf908d5767567d20bec2440099b317169d8d/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d7edf908d5767567d20bec2440099b317169d8d/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr?ref=2d7edf908d5767567d20bec2440099b317169d8d", "patch": "@@ -60,7 +60,7 @@ LL |       define_panic!();\n    = note: macro-expanded macros do not shadow\n \n error[E0659]: `panic` is ambiguous\n-  --> <panic macros>:1:13\n+  --> <::std::macros::panic macros>:1:13\n    |\n LL | (  ) => ( { panic ! ( \"explicit panic\" ) } ) ; ( $ msg : expr ) => (\n    |             ^^^^^ ambiguous name"}, {"sha": "8cecef508a2b295f4fd2f156f2ec7f9ab8892b17", "filename": "src/test/ui/macro_backtrace/main.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d7edf908d5767567d20bec2440099b317169d8d/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d7edf908d5767567d20bec2440099b317169d8d/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.stderr?ref=2d7edf908d5767567d20bec2440099b317169d8d", "patch": "@@ -22,7 +22,7 @@ LL | | }\n LL |       ping!();\n    |       -------- in this macro invocation\n    | \n-  ::: <ping macros>:1:1\n+  ::: <::ping::ping macros>:1:1\n    |\n LL |   (  ) => { pong ! (  ) ; }\n    |   -------------------------\n@@ -42,31 +42,31 @@ LL | | }\n LL |       deep!();\n    |       -------- in this macro invocation (#1)\n    | \n-  ::: <deep macros>:1:1\n+  ::: <::ping::deep macros>:1:1\n    |\n LL |   (  ) => { foo ! (  ) ; }\n    |   ------------------------\n    |   |         |\n    |   |         in this macro invocation (#2)\n    |   in this expansion of `deep!` (#1)\n    | \n-  ::: <foo macros>:1:1\n+  ::: <::ping::foo macros>:1:1\n    |\n LL |   (  ) => { bar ! (  ) ; }\n    |   ------------------------\n    |   |         |\n    |   |         in this macro invocation (#3)\n    |   in this expansion of `foo!` (#2)\n    | \n-  ::: <bar macros>:1:1\n+  ::: <::ping::bar macros>:1:1\n    |\n LL |   (  ) => { ping ! (  ) ; }\n    |   -------------------------\n    |   |         |\n    |   |         in this macro invocation (#4)\n    |   in this expansion of `bar!` (#3)\n    | \n-  ::: <ping macros>:1:1\n+  ::: <::ping::ping macros>:1:1\n    |\n LL |   (  ) => { pong ! (  ) ; }\n    |   -------------------------"}]}