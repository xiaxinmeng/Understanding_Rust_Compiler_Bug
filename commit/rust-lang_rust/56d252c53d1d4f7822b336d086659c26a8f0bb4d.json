{"sha": "56d252c53d1d4f7822b336d086659c26a8f0bb4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZDI1MmM1M2QxZDRmNzgyMmIzMzZkMDg2NjU5YzI2YThmMGJiNGQ=", "commit": {"author": {"name": "rsulli55", "email": "rsulli55@gmail.com", "date": "2020-11-11T06:17:46Z"}, "committer": {"name": "Ryan Sullivant", "email": "rsulli55@gmail.com", "date": "2020-11-11T06:18:48Z"}, "message": "Update clippy_lints/src/methods/mod.rs\n\nCo-authored-by: Philipp Krones <hello@philkrones.com>", "tree": {"sha": "b6b95a7bc07b3c8bf1d99eaefda2a2cf90a1398b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6b95a7bc07b3c8bf1d99eaefda2a2cf90a1398b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56d252c53d1d4f7822b336d086659c26a8f0bb4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56d252c53d1d4f7822b336d086659c26a8f0bb4d", "html_url": "https://github.com/rust-lang/rust/commit/56d252c53d1d4f7822b336d086659c26a8f0bb4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56d252c53d1d4f7822b336d086659c26a8f0bb4d/comments", "author": {"login": "rsulli55", "id": 22406159, "node_id": "MDQ6VXNlcjIyNDA2MTU5", "avatar_url": "https://avatars.githubusercontent.com/u/22406159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsulli55", "html_url": "https://github.com/rsulli55", "followers_url": "https://api.github.com/users/rsulli55/followers", "following_url": "https://api.github.com/users/rsulli55/following{/other_user}", "gists_url": "https://api.github.com/users/rsulli55/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsulli55/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsulli55/subscriptions", "organizations_url": "https://api.github.com/users/rsulli55/orgs", "repos_url": "https://api.github.com/users/rsulli55/repos", "events_url": "https://api.github.com/users/rsulli55/events{/privacy}", "received_events_url": "https://api.github.com/users/rsulli55/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsulli55", "id": 22406159, "node_id": "MDQ6VXNlcjIyNDA2MTU5", "avatar_url": "https://avatars.githubusercontent.com/u/22406159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsulli55", "html_url": "https://github.com/rsulli55", "followers_url": "https://api.github.com/users/rsulli55/followers", "following_url": "https://api.github.com/users/rsulli55/following{/other_user}", "gists_url": "https://api.github.com/users/rsulli55/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsulli55/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsulli55/subscriptions", "organizations_url": "https://api.github.com/users/rsulli55/orgs", "repos_url": "https://api.github.com/users/rsulli55/repos", "events_url": "https://api.github.com/users/rsulli55/events{/privacy}", "received_events_url": "https://api.github.com/users/rsulli55/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd303132a27f0fa9bbbfb3282200f8190353574b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd303132a27f0fa9bbbfb3282200f8190353574b", "html_url": "https://github.com/rust-lang/rust/commit/fd303132a27f0fa9bbbfb3282200f8190353574b"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "5c1c1594f7dc963ca809e59596b48a580fa9cce3", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56d252c53d1d4f7822b336d086659c26a8f0bb4d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d252c53d1d4f7822b336d086659c26a8f0bb4d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=56d252c53d1d4f7822b336d086659c26a8f0bb4d", "patch": "@@ -3053,7 +3053,7 @@ fn lint_search_is_some<'tcx>(\n     // lint if caller of search is an Iterator\n     if match_trait_method(cx, &is_some_args[0], &paths::ITERATOR) {\n         let msg = format!(\n-            \"called `is_some()` after searching an `Iterator` with {}\",\n+            \"called `is_some()` after searching an `Iterator` with `{}`\",\n             search_method\n         );\n         let hint = \"this is more succinctly expressed by calling `any()`\";"}]}