{"sha": "7ba24e8fcf472984c22d78b432aed411bf9ad510", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYTI0ZThmY2Y0NzI5ODRjMjJkNzhiNDMyYWVkNDExYmY5YWQ1MTA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-10-15T17:15:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-15T17:15:11Z"}, "message": "Rollup merge of #54820 - kleimkuhler:issue-54538-unused_patterns-lint, r=nikomatsakis\n\nCloses #54538: `unused_patterns` lint\n\nCloses #54538\n\nr? @nikomatsakis", "tree": {"sha": "5f023e44f5504a0046a1c59f209a2cab86e1f63e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f023e44f5504a0046a1c59f209a2cab86e1f63e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ba24e8fcf472984c22d78b432aed411bf9ad510", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbxMsfCRBK7hj4Ov3rIwAAdHIIAGEIKgHxSpjEtRO/2kMgC2W4\nDDCcPAlZdQmJiZrrWvwZKH2aKjSgjuWBC+SumK/3Wyxr4J3a9Uwo7UILDSCMh3Sy\nAWxGcdY0SyD5kZEzumWxel1RR476d+Ta+hYm/TtheYu8jvZlVNfViQ5bg0v0+NL6\nYpQxKJUwBV/xYVXHRUNjIlwkOJYMOuSY30Kjmd9BG2EGMZvpul9BYepeHYv4uvuh\n1jIx+qTGr+LvoFa2qlQcLKm56mch/PgjgS1aH+tveH4Ki/NZZVyKpTCpOt333hUF\njI70MUOntmLp/kEMA0ZI+XunMXsdMZZp3Qpcg23IzqBHu77VbIwWvvs4zX+ZGCI=\n=zucV\n-----END PGP SIGNATURE-----\n", "payload": "tree 5f023e44f5504a0046a1c59f209a2cab86e1f63e\nparent 4f9b581f71810744069228f86242e6ba00b7d09c\nparent 0e411c2597dcfe75dd76acefcecec916a950ac6e\nauthor Manish Goregaokar <manishsmail@gmail.com> 1539623711 -0700\ncommitter GitHub <noreply@github.com> 1539623711 -0700\n\nRollup merge of #54820 - kleimkuhler:issue-54538-unused_patterns-lint, r=nikomatsakis\n\nCloses #54538: `unused_patterns` lint\n\nCloses #54538\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba24e8fcf472984c22d78b432aed411bf9ad510", "html_url": "https://github.com/rust-lang/rust/commit/7ba24e8fcf472984c22d78b432aed411bf9ad510", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ba24e8fcf472984c22d78b432aed411bf9ad510/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f9b581f71810744069228f86242e6ba00b7d09c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f9b581f71810744069228f86242e6ba00b7d09c", "html_url": "https://github.com/rust-lang/rust/commit/4f9b581f71810744069228f86242e6ba00b7d09c"}, {"sha": "0e411c2597dcfe75dd76acefcecec916a950ac6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e411c2597dcfe75dd76acefcecec916a950ac6e", "html_url": "https://github.com/rust-lang/rust/commit/0e411c2597dcfe75dd76acefcecec916a950ac6e"}], "stats": {"total": 192, "additions": 150, "deletions": 42}, "files": [{"sha": "76717548521b7343b7b59cb002f9e1f08438fc19", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 69, "deletions": 42, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/7ba24e8fcf472984c22d78b432aed411bf9ad510/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba24e8fcf472984c22d78b432aed411bf9ad510/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=7ba24e8fcf472984c22d78b432aed411bf9ad510", "patch": "@@ -272,7 +272,7 @@ declare_lint! {\n pub struct UnusedParens;\n \n impl UnusedParens {\n-    fn check_unused_parens_core(&self,\n+    fn check_unused_parens_expr(&self,\n                                 cx: &EarlyContext,\n                                 value: &ast::Expr,\n                                 msg: &str,\n@@ -281,46 +281,57 @@ impl UnusedParens {\n             let necessary = struct_lit_needs_parens &&\n                             parser::contains_exterior_struct_lit(&inner);\n             if !necessary {\n-                let span_msg = format!(\"unnecessary parentheses around {}\", msg);\n-                let mut err = cx.struct_span_lint(UNUSED_PARENS,\n-                                                  value.span,\n-                                                  &span_msg);\n-                // Remove exactly one pair of parentheses (rather than na\u00efvely\n-                // stripping all paren characters)\n-                let mut ate_left_paren = false;\n-                let mut ate_right_paren = false;\n-                let parens_removed = pprust::expr_to_string(value)\n-                    .trim_matches(|c| {\n-                        match c {\n-                            '(' => {\n-                                if ate_left_paren {\n-                                    false\n-                                } else {\n-                                    ate_left_paren = true;\n-                                    true\n-                                }\n-                            },\n-                            ')' => {\n-                                if ate_right_paren {\n-                                    false\n-                                } else {\n-                                    ate_right_paren = true;\n-                                    true\n-                                }\n-                            },\n-                            _ => false,\n-                        }\n-                    }).to_owned();\n-                err.span_suggestion_short_with_applicability(\n-                    value.span,\n-                    \"remove these parentheses\",\n-                    parens_removed,\n-                    Applicability::MachineApplicable\n-                );\n-                err.emit();\n+                let pattern = pprust::expr_to_string(value);\n+                Self::remove_outer_parens(cx, value.span, &pattern, msg);\n             }\n         }\n     }\n+\n+    fn check_unused_parens_pat(&self,\n+                                cx: &EarlyContext,\n+                                value: &ast::Pat,\n+                                msg: &str) {\n+        if let ast::PatKind::Paren(_) = value.node {\n+            let pattern = pprust::pat_to_string(value);\n+            Self::remove_outer_parens(cx, value.span, &pattern, msg);\n+        }\n+    }\n+\n+    fn remove_outer_parens(cx: &EarlyContext, span: Span, pattern: &str, msg: &str) {\n+        let span_msg = format!(\"unnecessary parentheses around {}\", msg);\n+        let mut err = cx.struct_span_lint(UNUSED_PARENS, span, &span_msg);\n+        let mut ate_left_paren = false;\n+        let mut ate_right_paren = false;\n+        let parens_removed = pattern\n+            .trim_matches(|c| {\n+                match c {\n+                    '(' => {\n+                        if ate_left_paren {\n+                            false\n+                        } else {\n+                            ate_left_paren = true;\n+                            true\n+                        }\n+                    },\n+                    ')' => {\n+                        if ate_right_paren {\n+                            false\n+                        } else {\n+                            ate_right_paren = true;\n+                            true\n+                        }\n+                    },\n+                    _ => false,\n+                }\n+            }).to_owned();\n+        err.span_suggestion_short_with_applicability(\n+                span,\n+                \"remove these parentheses\",\n+                parens_removed,\n+                Applicability::MachineApplicable\n+            );\n+        err.emit();\n+    }\n }\n \n impl LintPass for UnusedParens {\n@@ -349,7 +360,9 @@ impl EarlyLintPass for UnusedParens {\n                     // first \"argument\" is self (which sometimes needs parens)\n                     MethodCall(_, ref args) => (&args[1..], \"method\"),\n                     // actual catch-all arm\n-                    _ => { return; }\n+                    _ => {\n+                        return;\n+                    }\n                 };\n                 // Don't lint if this is a nested macro expansion: otherwise, the lint could\n                 // trigger in situations that macro authors shouldn't have to care about, e.g.,\n@@ -362,18 +375,32 @@ impl EarlyLintPass for UnusedParens {\n                 }\n                 let msg = format!(\"{} argument\", call_kind);\n                 for arg in args_to_check {\n-                    self.check_unused_parens_core(cx, arg, &msg, false);\n+                    self.check_unused_parens_expr(cx, arg, &msg, false);\n                 }\n                 return;\n             }\n         };\n-        self.check_unused_parens_core(cx, &value, msg, struct_lit_needs_parens);\n+        self.check_unused_parens_expr(cx, &value, msg, struct_lit_needs_parens);\n+    }\n+\n+    fn check_pat(&mut self, cx: &EarlyContext, p: &ast::Pat) {\n+        use ast::PatKind::{Paren, Range};\n+        // The lint visitor will visit each subpattern of `p`. We do not want to lint any range\n+        // pattern no matter where it occurs in the pattern. For something like `&(a..=b)`, there\n+        // is a recursive `check_pat` on `a` and `b`, but we will assume that if there are\n+        // unnecessry parens they serve a purpose of readability.\n+        if let Paren(ref pat) = p.node {\n+            match pat.node {\n+                Range(..) => {}\n+                _ => self.check_unused_parens_pat(cx, &p, \"pattern\")\n+            }\n+        }\n     }\n \n     fn check_stmt(&mut self, cx: &EarlyContext, s: &ast::Stmt) {\n         if let ast::StmtKind::Local(ref local) = s.node {\n             if let Some(ref value) = local.init {\n-                self.check_unused_parens_core(cx, &value, \"assigned value\", false);\n+                self.check_unused_parens_expr(cx, &value, \"assigned value\", false);\n             }\n         }\n     }"}, {"sha": "06bd14d188e34f25aeab55fe076db084a9758bf9", "filename": "src/test/run-pass/binding/pat-tuple-7.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ba24e8fcf472984c22d78b432aed411bf9ad510/src%2Ftest%2Frun-pass%2Fbinding%2Fpat-tuple-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba24e8fcf472984c22d78b432aed411bf9ad510/src%2Ftest%2Frun-pass%2Fbinding%2Fpat-tuple-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fpat-tuple-7.rs?ref=7ba24e8fcf472984c22d78b432aed411bf9ad510", "patch": "@@ -11,6 +11,7 @@\n // run-pass\n \n fn main() {\n+    #[allow(unused_parens)]\n     match 0 {\n         (pat) => assert_eq!(pat, 0)\n     }"}, {"sha": "97a2dd59a6209d0332099fca262f65fb4e37cae8", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7ba24e8fcf472984c22d78b432aed411bf9ad510/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba24e8fcf472984c22d78b432aed411bf9ad510/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs?ref=7ba24e8fcf472984c22d78b432aed411bf9ad510", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#![allow(unreachable_patterns)]\n+#![allow(unused_variables)]\n+#![warn(unused_parens)]\n+\n+fn main() {\n+    match 1 {\n+        (_) => {}         //~ WARNING: unnecessary parentheses around pattern\n+        (y) => {}         //~ WARNING: unnecessary parentheses around pattern\n+        (ref r) => {}     //~ WARNING: unnecessary parentheses around pattern\n+        (e @ 1..=2) => {} //~ WARNING: unnecessary parentheses around outer pattern\n+        (1..=2) => {}     // Non ambiguous range pattern should not warn\n+        e @ (3..=4) => {} // Non ambiguous range pattern should not warn\n+    }\n+\n+    match &1 {\n+        (e @ &(1...2)) => {} //~ WARNING: unnecessary parentheses around outer pattern\n+        &(_) => {}           //~ WARNING: unnecessary parentheses around pattern\n+        e @ &(1...2) => {}   // Ambiguous range pattern should not warn\n+        &(1..=2) => {}       // Ambiguous range pattern should not warn\n+    }\n+\n+    match &1 {\n+        e @ &(1...2) | e @ &(3..=4) => {} // Complex ambiguous pattern should not warn\n+        &_ => {}\n+    }\n+}"}, {"sha": "b76b969fd2b1a8ab1693933076b75d177db00149", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7ba24e8fcf472984c22d78b432aed411bf9ad510/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba24e8fcf472984c22d78b432aed411bf9ad510/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr?ref=7ba24e8fcf472984c22d78b432aed411bf9ad510", "patch": "@@ -0,0 +1,42 @@\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:19:9\n+   |\n+LL |         (_) => {}         //~ WARNING: unnecessary parentheses around pattern\n+   |         ^^^ help: remove these parentheses\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-54538-unused-parens-lint.rs:15:9\n+   |\n+LL | #![warn(unused_parens)]\n+   |         ^^^^^^^^^^^^^\n+\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:20:9\n+   |\n+LL |         (y) => {}         //~ WARNING: unnecessary parentheses around pattern\n+   |         ^^^ help: remove these parentheses\n+\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:21:9\n+   |\n+LL |         (ref r) => {}     //~ WARNING: unnecessary parentheses around pattern\n+   |         ^^^^^^^ help: remove these parentheses\n+\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:22:9\n+   |\n+LL |         (e @ 1..=2) => {} //~ WARNING: unnecessary parentheses around outer pattern\n+   |         ^^^^^^^^^^^ help: remove these parentheses\n+\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:28:9\n+   |\n+LL |         (e @ &(1...2)) => {} //~ WARNING: unnecessary parentheses around outer pattern\n+   |         ^^^^^^^^^^^^^^ help: remove these parentheses\n+\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:29:10\n+   |\n+LL |         &(_) => {}           //~ WARNING: unnecessary parentheses around pattern\n+   |          ^^^ help: remove these parentheses\n+"}]}