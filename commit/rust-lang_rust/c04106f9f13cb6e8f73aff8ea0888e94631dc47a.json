{"sha": "c04106f9f13cb6e8f73aff8ea0888e94631dc47a", "node_id": "C_kwDOAAsO6NoAKGMwNDEwNmY5ZjEzY2I2ZThmNzNhZmY4ZWEwODg4ZTk0NjMxZGM0N2E", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-05-02T17:04:52Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-05-04T10:22:40Z"}, "message": "check array type of repeat exprs is wf", "tree": {"sha": "ac257300aa7b7dd2b51df6684aa9e8fd01f85c60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac257300aa7b7dd2b51df6684aa9e8fd01f85c60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c04106f9f13cb6e8f73aff8ea0888e94631dc47a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c04106f9f13cb6e8f73aff8ea0888e94631dc47a", "html_url": "https://github.com/rust-lang/rust/commit/c04106f9f13cb6e8f73aff8ea0888e94631dc47a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c04106f9f13cb6e8f73aff8ea0888e94631dc47a/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c", "html_url": "https://github.com/rust-lang/rust/commit/6f8c0557e0b73c73a8a7163a15f4a5a3feca7d5c"}], "stats": {"total": 102, "additions": 96, "deletions": 6}, "files": [{"sha": "4389d2b60bc5573ffbc62ae92527d575e805747f", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c04106f9f13cb6e8f73aff8ea0888e94631dc47a/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04106f9f13cb6e8f73aff8ea0888e94631dc47a/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=c04106f9f13cb6e8f73aff8ea0888e94631dc47a", "patch": "@@ -108,6 +108,14 @@ impl<'a, 'tcx> MutVisitor<'tcx> for RegionRenumberer<'a, 'tcx> {\n         debug!(?region);\n     }\n \n+    #[instrument(skip(self), level = \"debug\")]\n+    fn visit_ty_const(&mut self, ct: &mut ty::Const<'tcx>, location: Location) {\n+        let old_ct = *ct;\n+        *ct = self.renumber_regions(old_ct, || RegionCtxt::Location(location));\n+\n+        debug!(?ct);\n+    }\n+\n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_constant(&mut self, constant: &mut Constant<'tcx>, location: Location) {\n         let literal = constant.literal;"}, {"sha": "6eb67644741174029e208265bfe4b0feb939bb11", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c04106f9f13cb6e8f73aff8ea0888e94631dc47a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04106f9f13cb6e8f73aff8ea0888e94631dc47a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=c04106f9f13cb6e8f73aff8ea0888e94631dc47a", "patch": "@@ -1803,6 +1803,13 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             Rvalue::Repeat(operand, len) => {\n                 self.check_operand(operand, location);\n \n+                let array_ty = rvalue.ty(body.local_decls(), tcx);\n+                self.prove_predicate(\n+                    ty::PredicateKind::WellFormed(array_ty.into()),\n+                    Locations::Single(location),\n+                    ConstraintCategory::Boring,\n+                );\n+\n                 // If the length cannot be evaluated we must assume that the length can be larger\n                 // than 1.\n                 // If the length is larger than 1, the repeat expression will need to copy the"}, {"sha": "bba049c3819343d97f24d82b7fa785c719dba5ea", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c04106f9f13cb6e8f73aff8ea0888e94631dc47a/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04106f9f13cb6e8f73aff8ea0888e94631dc47a/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=c04106f9f13cb6e8f73aff8ea0888e94631dc47a", "patch": "@@ -1426,6 +1426,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         self.check_repeat_element_needs_copy_bound(element, count, element_ty);\n \n+        self.register_wf_obligation(\n+            tcx.mk_array_with_const_len(t, count).into(),\n+            expr.span,\n+            traits::WellFormed(None),\n+        );\n+\n         tcx.mk_array_with_const_len(t, count)\n     }\n "}, {"sha": "8e379e0baacdb8217e2f658d6e4822084c64543e", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c04106f9f13cb6e8f73aff8ea0888e94631dc47a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04106f9f13cb6e8f73aff8ea0888e94631dc47a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=c04106f9f13cb6e8f73aff8ea0888e94631dc47a", "patch": "@@ -192,6 +192,15 @@ macro_rules! make_mir_visitor {\n                 self.super_constant(constant, location);\n             }\n \n+            #[allow(rustc::pass_by_value)]\n+            fn visit_ty_const(\n+                &mut self,\n+                ct: & $($mutability)? ty::Const<'tcx>,\n+                location: Location,\n+            ) {\n+                self.super_ty_const(ct, location);\n+            }\n+\n             fn visit_span(\n                 &mut self,\n                 span: $(& $mutability)? Span,\n@@ -625,8 +634,9 @@ macro_rules! make_mir_visitor {\n                         self.visit_operand(operand, location);\n                     }\n \n-                    Rvalue::Repeat(value, _) => {\n+                    Rvalue::Repeat(value, ct) => {\n                         self.visit_operand(value, location);\n+                        self.visit_ty_const(ct, location);\n                     }\n \n                     Rvalue::ThreadLocalRef(_) => {}\n@@ -878,12 +888,21 @@ macro_rules! make_mir_visitor {\n                 self.visit_span($(& $mutability)? *span);\n                 drop(user_ty); // no visit method for this\n                 match literal {\n-                    ConstantKind::Ty(_) => {}\n+                    ConstantKind::Ty(ct) => self.visit_ty_const(ct, location),\n                     ConstantKind::Val(_, ty) => self.visit_ty($(& $mutability)? *ty, TyContext::Location(location)),\n                     ConstantKind::Unevaluated(_, ty) => self.visit_ty($(& $mutability)? *ty, TyContext::Location(location)),\n                 }\n             }\n \n+            #[allow(rustc::pass_by_value)]\n+            fn super_ty_const(\n+                &mut self,\n+                _ct: & $($mutability)? ty::Const<'tcx>,\n+                _location: Location,\n+            ) {\n+\n+            }\n+\n             fn super_span(&mut self, _span: $(& $mutability)? Span) {\n             }\n "}, {"sha": "cd1607608a6e96d89e1453744b9a65e3ff805409", "filename": "tests/ui/const-generics/sneaky-array-repeat-expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c04106f9f13cb6e8f73aff8ea0888e94631dc47a/tests%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04106f9f13cb6e8f73aff8ea0888e94631dc47a/tests%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.rs?ref=c04106f9f13cb6e8f73aff8ea0888e94631dc47a", "patch": "@@ -10,6 +10,7 @@ impl<const N: usize> Trait<N> for () {\n pub const fn foo<const N: usize>() where (): Trait<N> {\n     let bar = [(); <()>::Assoc];\n     //~^ error: constant expression depends on a generic parameter\n+    //~| error: constant expression depends on a generic parameter\n }\n \n trait Trait2<const N: usize> {\n@@ -24,6 +25,7 @@ impl<const N: usize> Trait2<N> for () {\n pub const fn foo2<const N: usize>() where (): Trait2<N> {\n     let bar2 = [(); <()>::Assoc2];\n     //~^ error: constant expression depends on a generic parameter\n+    //~| error: constant expression depends on a generic parameter\n }\n \n fn main() {"}, {"sha": "e532f27a10da9af028960f7f2e6d3b971fed84b7", "filename": "tests/ui/const-generics/sneaky-array-repeat-expr.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c04106f9f13cb6e8f73aff8ea0888e94631dc47a/tests%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c04106f9f13cb6e8f73aff8ea0888e94631dc47a/tests%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.stderr?ref=c04106f9f13cb6e8f73aff8ea0888e94631dc47a", "patch": "@@ -7,12 +7,28 @@ LL |     let bar = [(); <()>::Assoc];\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/sneaky-array-repeat-expr.rs:25:21\n+  --> $DIR/sneaky-array-repeat-expr.rs:11:15\n+   |\n+LL |     let bar = [(); <()>::Assoc];\n+   |               ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/sneaky-array-repeat-expr.rs:26:21\n    |\n LL |     let bar2 = [(); <()>::Assoc2];\n    |                     ^^^^^^^^^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n-error: aborting due to 2 previous errors\n+error: constant expression depends on a generic parameter\n+  --> $DIR/sneaky-array-repeat-expr.rs:26:16\n+   |\n+LL |     let bar2 = [(); <()>::Assoc2];\n+   |                ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "d42347e136e1c5385076a4adc2858b77adc3ad58", "filename": "tests/ui/consts/issue-50439.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c04106f9f13cb6e8f73aff8ea0888e94631dc47a/tests%2Fui%2Fconsts%2Fissue-50439.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04106f9f13cb6e8f73aff8ea0888e94631dc47a/tests%2Fui%2Fconsts%2Fissue-50439.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-50439.rs?ref=c04106f9f13cb6e8f73aff8ea0888e94631dc47a", "patch": "@@ -22,7 +22,9 @@ impl<T: Sized> PinDropInternal for Bears<T> {\n     where\n         Self: ReflectDrop,\n     {\n-        let _ = [(); 0 - !!(<Bears<T> as ReflectDrop>::REFLECT_DROP) as usize]; //~ ERROR constant expression depends on a generic parameter\n+        let _ = [(); 0 - !!(<Bears<T> as ReflectDrop>::REFLECT_DROP) as usize];\n+        //~^ ERROR constant expression depends on a generic parameter\n+        //~| ERROR constant expression depends on a generic parameter\n     }\n }\n "}, {"sha": "7a8cd45ecc7d1c1696e19d0afc3396ac91525c2d", "filename": "tests/ui/consts/issue-50439.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c04106f9f13cb6e8f73aff8ea0888e94631dc47a/tests%2Fui%2Fconsts%2Fissue-50439.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c04106f9f13cb6e8f73aff8ea0888e94631dc47a/tests%2Fui%2Fconsts%2Fissue-50439.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-50439.stderr?ref=c04106f9f13cb6e8f73aff8ea0888e94631dc47a", "patch": "@@ -6,5 +6,13 @@ LL |         let _ = [(); 0 - !!(<Bears<T> as ReflectDrop>::REFLECT_DROP) as usi\n    |\n    = note: this may fail depending on what value the parameter takes\n \n-error: aborting due to previous error\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-50439.rs:25:17\n+   |\n+LL |         let _ = [(); 0 - !!(<Bears<T> as ReflectDrop>::REFLECT_DROP) as usize];\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "b8a2a0ceb58807f8e39be26950ffd30c8b3eb133", "filename": "tests/ui/typeck/repeat-expr-checks-wf.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c04106f9f13cb6e8f73aff8ea0888e94631dc47a/tests%2Fui%2Ftypeck%2Frepeat-expr-checks-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c04106f9f13cb6e8f73aff8ea0888e94631dc47a/tests%2Fui%2Ftypeck%2Frepeat-expr-checks-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Frepeat-expr-checks-wf.rs?ref=c04106f9f13cb6e8f73aff8ea0888e94631dc47a", "patch": "@@ -0,0 +1,10 @@\n+trait Foo {\n+    const ASSOC: [u8];\n+}\n+\n+fn bar<T: Foo>() {\n+    let a = [T::ASSOC; 2];\n+    //~^ ERROR: the size for values of type `[u8]` cannot be known at compilation time\n+}\n+\n+fn main() {}"}, {"sha": "a821088a4b30e073187c3a212be0bb62319e71f8", "filename": "tests/ui/typeck/repeat-expr-checks-wf.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c04106f9f13cb6e8f73aff8ea0888e94631dc47a/tests%2Fui%2Ftypeck%2Frepeat-expr-checks-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c04106f9f13cb6e8f73aff8ea0888e94631dc47a/tests%2Fui%2Ftypeck%2Frepeat-expr-checks-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Frepeat-expr-checks-wf.stderr?ref=c04106f9f13cb6e8f73aff8ea0888e94631dc47a", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/repeat-expr-checks-wf.rs:6:13\n+   |\n+LL |     let a = [T::ASSOC; 2];\n+   |             ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+   = note: slice and array elements must have `Sized` type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}