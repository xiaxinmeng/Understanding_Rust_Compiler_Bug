{"sha": "15a2dfa324d6c10f6dfae0f874d050a009ab8f3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YTJkZmEzMjRkNmMxMGY2ZGZhZTBmODc0ZDA1MGEwMDlhYjhmM2Q=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-04T11:36:00Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-15T21:49:22Z"}, "message": "move the `OutlivesEnvironment` into `infer` so that `nll` can use it\n\nUnquestionably there is more cleanup to be done, but I'm not sure what\nit should look like yet, so leaving it roughly as is.", "tree": {"sha": "836de9f7c961fb6f8fc363e995bf38f79cf1689f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/836de9f7c961fb6f8fc363e995bf38f79cf1689f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15a2dfa324d6c10f6dfae0f874d050a009ab8f3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15a2dfa324d6c10f6dfae0f874d050a009ab8f3d", "html_url": "https://github.com/rust-lang/rust/commit/15a2dfa324d6c10f6dfae0f874d050a009ab8f3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15a2dfa324d6c10f6dfae0f874d050a009ab8f3d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56e5eb5fd4c3977fb6abdb867af4a85076045d59", "url": "https://api.github.com/repos/rust-lang/rust/commits/56e5eb5fd4c3977fb6abdb867af4a85076045d59", "html_url": "https://github.com/rust-lang/rust/commit/56e5eb5fd4c3977fb6abdb867af4a85076045d59"}], "stats": {"total": 57, "additions": 48, "deletions": 9}, "files": [{"sha": "e73d74c22ba7de46d32108c3502e9b264faa051c", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15a2dfa324d6c10f6dfae0f874d050a009ab8f3d/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a2dfa324d6c10f6dfae0f874d050a009ab8f3d/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=15a2dfa324d6c10f6dfae0f874d050a009ab8f3d", "patch": "@@ -62,6 +62,8 @@ mod sub;\n pub mod type_variable;\n pub mod unify_key;\n \n+pub use self::outlives::env::OutlivesEnvironment;\n+\n #[must_use]\n pub struct InferOk<'tcx, T> {\n     pub value: T,"}, {"sha": "ef09479f75131629b123f785674e1330f0a17cc4", "filename": "src/librustc/infer/outlives/env.rs", "status": "renamed", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/15a2dfa324d6c10f6dfae0f874d050a009ab8f3d/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a2dfa324d6c10f6dfae0f874d050a009ab8f3d/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs?ref=15a2dfa324d6c10f6dfae0f874d050a009ab8f3d", "patch": "@@ -1,13 +1,42 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n use middle::free_region::FreeRegionMap;\n-use rustc::ty::{self, Ty, TypeFoldable};\n-use rustc::infer::{InferCtxt, GenericKind};\n-use rustc::traits::FulfillmentContext;\n-use rustc::ty::outlives::Component;\n-use rustc::ty::wf;\n+use infer::{InferCtxt, GenericKind};\n+use traits::FulfillmentContext;\n+use ty::{self, Ty, TypeFoldable};\n+use ty::outlives::Component;\n+use ty::wf;\n \n use syntax::ast;\n use syntax_pos::Span;\n \n+/// The `OutlivesEnvironment` collects information about what outlives\n+/// what in a given type-checking setting. For example, if we have a\n+/// where-clause like `where T: 'a` in scope, then the\n+/// `OutlivesEnvironment` would record that (in its\n+/// `region_bound_pairs` field). Similarly, it contains methods for\n+/// processing and adding implied bounds into the outlives\n+/// environment.\n+///\n+/// Other code at present does not typically take a\n+/// `&OutlivesEnvironment`, but rather takes some of its fields (e.g.,\n+/// `process_registered_region_obligations` wants the\n+/// region-bound-pairs). There is no mistaking it: the current setup\n+/// of tracking region information is quite scattered! The\n+/// `OutlivesEnvironment`, for example, needs to sometimes be combined\n+/// with the `middle::RegionRelations`, to yield a full picture of how\n+/// (lexical) lifetimes interact. However, I'm reluctant to do more\n+/// refactoring here, since the setup with NLL is quite different.\n+/// For example, NLL has no need of `RegionRelations`, and is solely\n+/// interested in the `OutlivesEnvironment`. -nmatsakis\n #[derive(Clone)]\n pub struct OutlivesEnvironment<'tcx> {\n     param_env: ty::ParamEnv<'tcx>,", "previous_filename": "src/librustc_typeck/check/regionck_implied_bounds.rs"}, {"sha": "ae2fb5e2580e0dc8c626911a290c441c2ea3a66f", "filename": "src/librustc/infer/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15a2dfa324d6c10f6dfae0f874d050a009ab8f3d/src%2Flibrustc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a2dfa324d6c10f6dfae0f874d050a009ab8f3d/src%2Flibrustc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fmod.rs?ref=15a2dfa324d6c10f6dfae0f874d050a009ab8f3d", "patch": "@@ -1 +1,2 @@\n+pub mod env;\n mod obligations;"}, {"sha": "2fb085bc1d86fb33d263b1ff5bd120d340be5b52", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15a2dfa324d6c10f6dfae0f874d050a009ab8f3d/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a2dfa324d6c10f6dfae0f874d050a009ab8f3d/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=15a2dfa324d6c10f6dfae0f874d050a009ab8f3d", "patch": "@@ -1,3 +1,13 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n //! Code that handles \"type-outlives\" constraints like `T: 'a`. This\n //! is based on the `outlives_components` function defined on the tcx,\n //! but it adds a bit of heuristics on top, in particular to deal with"}, {"sha": "c8b2032a49871510fc973b0ff9ca546d31dc395c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15a2dfa324d6c10f6dfae0f874d050a009ab8f3d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a2dfa324d6c10f6dfae0f874d050a009ab8f3d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=15a2dfa324d6c10f6dfae0f874d050a009ab8f3d", "patch": "@@ -137,7 +137,6 @@ pub mod dropck;\n pub mod _match;\n pub mod writeback;\n mod regionck;\n-mod regionck_implied_bounds;\n pub mod coercion;\n pub mod demand;\n pub mod method;"}, {"sha": "932cb12e81dfb4ba968c917eabd366ba64d51484", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15a2dfa324d6c10f6dfae0f874d050a009ab8f3d/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a2dfa324d6c10f6dfae0f874d050a009ab8f3d/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=15a2dfa324d6c10f6dfae0f874d050a009ab8f3d", "patch": "@@ -90,7 +90,7 @@ use middle::region;\n use rustc::hir::def_id::DefId;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty};\n-use rustc::infer;\n+use rustc::infer::{self, OutlivesEnvironment};\n use rustc::ty::adjustment;\n \n use std::mem;\n@@ -101,8 +101,6 @@ use syntax_pos::Span;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::{self, PatKind};\n \n-use super::regionck_implied_bounds::OutlivesEnvironment;\n-\n // a variation on try that just returns unit\n macro_rules! ignore_err {\n     ($e:expr) => (match $e { Ok(e) => e, Err(_) => return () })"}]}