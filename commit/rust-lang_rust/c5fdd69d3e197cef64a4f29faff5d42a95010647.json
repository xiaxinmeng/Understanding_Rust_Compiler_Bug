{"sha": "c5fdd69d3e197cef64a4f29faff5d42a95010647", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZmRkNjlkM2UxOTdjZWY2NGE0ZjI5ZmFmZjVkNDJhOTUwMTA2NDc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-09T05:59:50Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-10T09:37:12Z"}, "message": "Carefully destroy channels at the right time.\n\nWhen a channel is destroyed, it may attempt scheduler operations which could\nmove a task off of it's I/O scheduler. This is obviously a bad interaction, and\nsome finesse is required to make it work (making destructors run at the right\ntime).\n\nCloses #10375", "tree": {"sha": "857fc8f120d5240544233c8b6e4b23635135654e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/857fc8f120d5240544233c8b6e4b23635135654e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5fdd69d3e197cef64a4f29faff5d42a95010647", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5fdd69d3e197cef64a4f29faff5d42a95010647", "html_url": "https://github.com/rust-lang/rust/commit/c5fdd69d3e197cef64a4f29faff5d42a95010647", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5fdd69d3e197cef64a4f29faff5d42a95010647/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86a321b65dcc5253f61202b2fdaac41f275344ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/86a321b65dcc5253f61202b2fdaac41f275344ce", "html_url": "https://github.com/rust-lang/rust/commit/86a321b65dcc5253f61202b2fdaac41f275344ce"}], "stats": {"total": 76, "additions": 67, "deletions": 9}, "files": [{"sha": "5486cdfc418c31aee90ba4e9c014062f577c4187", "filename": "src/librustuv/signal.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c5fdd69d3e197cef64a4f29faff5d42a95010647/src%2Flibrustuv%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fdd69d3e197cef64a4f29faff5d42a95010647/src%2Flibrustuv%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fsignal.rs?ref=c5fdd69d3e197cef64a4f29faff5d42a95010647", "patch": "@@ -77,3 +77,29 @@ impl Drop for SignalWatcher {\n         self.close_async_();\n     }\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use super::*;\n+    use std::cell::Cell;\n+    use super::super::local_loop;\n+    use std::rt::io::signal;\n+    use std::comm::{SharedChan, stream};\n+\n+    #[test]\n+    fn closing_channel_during_drop_doesnt_kill_everything() {\n+        // see issue #10375, relates to timers as well.\n+        let (port, chan) = stream();\n+        let chan = SharedChan::new(chan);\n+        let _signal = SignalWatcher::new(local_loop(), signal::Interrupt,\n+                                         chan);\n+\n+        let port = Cell::new(port);\n+        do spawn {\n+            port.take().try_recv();\n+        }\n+\n+        // when we drop the SignalWatcher we're going to destroy the channel,\n+        // which must wake up the task on the other end\n+    }\n+}"}, {"sha": "7cc41b2a8827f0f22ca8186b96e586ccb4129736", "filename": "src/librustuv/timer.rs", "status": "modified", "additions": 41, "deletions": 9, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c5fdd69d3e197cef64a4f29faff5d42a95010647/src%2Flibrustuv%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fdd69d3e197cef64a4f29faff5d42a95010647/src%2Flibrustuv%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ftimer.rs?ref=c5fdd69d3e197cef64a4f29faff5d42a95010647", "patch": "@@ -14,6 +14,7 @@ use std::rt::BlockedTask;\n use std::rt::local::Local;\n use std::rt::rtio::RtioTimer;\n use std::rt::sched::{Scheduler, SchedHandle};\n+use std::util;\n \n use uvll;\n use super::{Loop, UvHandle, ForbidUnwind, ForbidSwitch};\n@@ -82,9 +83,13 @@ impl RtioTimer for TimerWatcher {\n     fn oneshot(&mut self, msecs: u64) -> PortOne<()> {\n         let (port, chan) = oneshot();\n \n-        let _m = self.fire_homing_missile();\n-        self.action = Some(SendOnce(chan));\n-        self.start(msecs, 0);\n+        // similarly to the destructor, we must drop the previous action outside\n+        // of the homing missile\n+        let _prev_action = {\n+            let _m = self.fire_homing_missile();\n+            self.start(msecs, 0);\n+            util::replace(&mut self.action, Some(SendOnce(chan)))\n+        };\n \n         return port;\n     }\n@@ -93,8 +98,14 @@ impl RtioTimer for TimerWatcher {\n         let (port, chan) = stream();\n \n         let _m = self.fire_homing_missile();\n-        self.action = Some(SendMany(chan));\n-        self.start(msecs, msecs);\n+\n+        // similarly to the destructor, we must drop the previous action outside\n+        // of the homing missile\n+        let _prev_action = {\n+            let _m = self.fire_homing_missile();\n+            self.start(msecs, msecs);\n+            util::replace(&mut self.action, Some(SendMany(chan)))\n+        };\n \n         return port;\n     }\n@@ -120,16 +131,24 @@ extern fn timer_cb(handle: *uvll::uv_timer_t, status: c_int) {\n \n impl Drop for TimerWatcher {\n     fn drop(&mut self) {\n-        let _m = self.fire_homing_missile();\n-        self.action = None;\n-        self.stop();\n-        self.close_async_();\n+        // note that this drop is a little subtle. Dropping a channel which is\n+        // held internally may invoke some scheduling operations. We can't take\n+        // the channel unless we're on the home scheduler, but once we're on the\n+        // home scheduler we should never move. Hence, we take the timer's\n+        // action item and then move it outside of the homing block.\n+        let _action = {\n+            let _m = self.fire_homing_missile();\n+            self.stop();\n+            self.close_async_();\n+            self.action.take()\n+        };\n     }\n }\n \n #[cfg(test)]\n mod test {\n     use super::*;\n+    use std::cell::Cell;\n     use std::rt::rtio::RtioTimer;\n     use super::super::local_loop;\n \n@@ -205,6 +224,19 @@ mod test {\n         // which must wake up the task on the other end\n     }\n \n+    #[test]\n+    fn reset_doesnt_switch_tasks() {\n+        // similar test to the one above.\n+        let mut timer = TimerWatcher::new(local_loop());\n+        let timer_port = Cell::new(timer.period(1000));\n+\n+        do spawn {\n+            timer_port.take().try_recv();\n+        }\n+\n+        timer.oneshot(1);\n+    }\n+\n     #[test]\n     fn sender_goes_away_oneshot() {\n         let port = {"}]}