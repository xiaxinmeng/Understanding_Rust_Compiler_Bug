{"sha": "fdf6cc34b2564100c5d07b573ef246124ee45b47", "node_id": "C_kwDOAAsO6NoAKGZkZjZjYzM0YjI1NjQxMDBjNWQwN2I1NzNlZjI0NjEyNGVlNDViNDc", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-12-26T21:01:53Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-12-28T14:18:43Z"}, "message": "delete more `cfg(bootstrap)`", "tree": {"sha": "c8dba4e6ad1885186c89c184d23a453a1c29341e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8dba4e6ad1885186c89c184d23a453a1c29341e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdf6cc34b2564100c5d07b573ef246124ee45b47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdf6cc34b2564100c5d07b573ef246124ee45b47", "html_url": "https://github.com/rust-lang/rust/commit/fdf6cc34b2564100c5d07b573ef246124ee45b47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdf6cc34b2564100c5d07b573ef246124ee45b47/comments", "author": null, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11191279b721b326d545005b96ad9eecc7a95827", "url": "https://api.github.com/repos/rust-lang/rust/commits/11191279b721b326d545005b96ad9eecc7a95827", "html_url": "https://github.com/rust-lang/rust/commit/11191279b721b326d545005b96ad9eecc7a95827"}], "stats": {"total": 60, "additions": 22, "deletions": 38}, "files": [{"sha": "62ce2cb33dc55e9df04055a0efc1efe67512e497", "filename": "library/std/src/process.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fdf6cc34b2564100c5d07b573ef246124ee45b47/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdf6cc34b2564100c5d07b573ef246124ee45b47/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=fdf6cc34b2564100c5d07b573ef246124ee45b47", "patch": "@@ -2164,18 +2164,11 @@ pub fn id() -> u32 {\n /// to provide similar functionality.\n #[cfg_attr(not(test), lang = \"termination\")]\n #[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\n-#[rustc_on_unimplemented(\n-    on(\n-        all(not(bootstrap), cause = \"MainFunctionType\"),\n-        message = \"`main` has invalid return type `{Self}`\",\n-        label = \"`main` can only return types that implement `{Termination}`\"\n-    ),\n-    on(\n-        bootstrap,\n-        message = \"`main` has invalid return type `{Self}`\",\n-        label = \"`main` can only return types that implement `{Termination}`\"\n-    )\n-)]\n+#[rustc_on_unimplemented(on(\n+    cause = \"MainFunctionType\",\n+    message = \"`main` has invalid return type `{Self}`\",\n+    label = \"`main` can only return types that implement `{Termination}`\"\n+))]\n pub trait Termination {\n     /// Is called to get the representation of the value as status code.\n     /// This status code is returned to the operating system."}, {"sha": "233e4a26bdc060d8bd1a0785e5ffe63e3b2fc52f", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fdf6cc34b2564100c5d07b573ef246124ee45b47/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdf6cc34b2564100c5d07b573ef246124ee45b47/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=fdf6cc34b2564100c5d07b573ef246124ee45b47", "patch": "@@ -184,12 +184,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n                 sigpipe::SIG_DFL => (true, Some(libc::SIG_DFL)),\n                 _ => unreachable!(),\n             };\n-            // The bootstrap compiler doesn't know about sigpipe::DEFAULT, and always passes in\n-            // SIG_IGN. This causes some tests to fail because they expect SIGPIPE to be reset to\n-            // default on process spawning (which doesn't happen if #[unix_sigpipe] is specified).\n-            // Since we can't differentiate between the cases here, treat SIG_IGN as DEFAULT\n-            // unconditionally.\n-            if sigpipe_attr_specified && !(cfg!(bootstrap) && sigpipe == sigpipe::SIG_IGN) {\n+            if sigpipe_attr_specified {\n                 UNIX_SIGPIPE_ATTR_SPECIFIED.store(true, crate::sync::atomic::Ordering::Relaxed);\n             }\n             if let Some(handler) = handler {"}, {"sha": "7fbfe3daaa826c7e7aebe4bbbd70f6a52952e57c", "filename": "library/std/tests/run-time-detect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdf6cc34b2564100c5d07b573ef246124ee45b47/library%2Fstd%2Ftests%2Frun-time-detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdf6cc34b2564100c5d07b573ef246124ee45b47/library%2Fstd%2Ftests%2Frun-time-detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Frun-time-detect.rs?ref=fdf6cc34b2564100c5d07b573ef246124ee45b47", "patch": "@@ -3,7 +3,6 @@\n #![cfg_attr(\n     any(\n         all(target_arch = \"arm\", any(target_os = \"linux\", target_os = \"android\")),\n-        all(bootstrap, target_arch = \"aarch64\", any(target_os = \"linux\", target_os = \"android\")),\n         all(target_arch = \"powerpc\", target_os = \"linux\"),\n         all(target_arch = \"powerpc64\", target_os = \"linux\"),\n     ),"}, {"sha": "ae5dfdea19f289a8e386a7e2d37390a9067dc1d0", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fdf6cc34b2564100c5d07b573ef246124ee45b47/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdf6cc34b2564100c5d07b573ef246124ee45b47/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=fdf6cc34b2564100c5d07b573ef246124ee45b47", "patch": "@@ -691,26 +691,23 @@ impl Step for Rustc {\n             ));\n         }\n \n-        // cfg(bootstrap): remove if condition once the bootstrap compiler supports dylib LTO\n-        if compiler.stage != 0 {\n-            match builder.config.rust_lto {\n-                RustcLto::Thin | RustcLto::Fat => {\n-                    // Since using LTO for optimizing dylibs is currently experimental,\n-                    // we need to pass -Zdylib-lto.\n-                    cargo.rustflag(\"-Zdylib-lto\");\n-                    // Cargo by default passes `-Cembed-bitcode=no` and doesn't pass `-Clto` when\n-                    // compiling dylibs (and their dependencies), even when LTO is enabled for the\n-                    // crate. Therefore, we need to override `-Clto` and `-Cembed-bitcode` here.\n-                    let lto_type = match builder.config.rust_lto {\n-                        RustcLto::Thin => \"thin\",\n-                        RustcLto::Fat => \"fat\",\n-                        _ => unreachable!(),\n-                    };\n-                    cargo.rustflag(&format!(\"-Clto={}\", lto_type));\n-                    cargo.rustflag(\"-Cembed-bitcode=yes\");\n-                }\n-                RustcLto::ThinLocal => { /* Do nothing, this is the default */ }\n+        match builder.config.rust_lto {\n+            RustcLto::Thin | RustcLto::Fat => {\n+                // Since using LTO for optimizing dylibs is currently experimental,\n+                // we need to pass -Zdylib-lto.\n+                cargo.rustflag(\"-Zdylib-lto\");\n+                // Cargo by default passes `-Cembed-bitcode=no` and doesn't pass `-Clto` when\n+                // compiling dylibs (and their dependencies), even when LTO is enabled for the\n+                // crate. Therefore, we need to override `-Clto` and `-Cembed-bitcode` here.\n+                let lto_type = match builder.config.rust_lto {\n+                    RustcLto::Thin => \"thin\",\n+                    RustcLto::Fat => \"fat\",\n+                    _ => unreachable!(),\n+                };\n+                cargo.rustflag(&format!(\"-Clto={}\", lto_type));\n+                cargo.rustflag(\"-Cembed-bitcode=yes\");\n             }\n+            RustcLto::ThinLocal => { /* Do nothing, this is the default */ }\n         }\n \n         builder.info(&format!("}]}