{"sha": "c9b395be2bfcd67e045c1031143b7e8c27a6d3fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YjM5NWJlMmJmY2Q2N2UwNDVjMTAzMTE0M2I3ZThjMjdhNmQzZmI=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-05-05T22:42:04Z"}, "committer": {"name": "Craig Disselkoen", "email": "craigdissel@gmail.com", "date": "2020-05-05T23:12:56Z"}, "message": "Fix cargo not found on macos bug at vscode extension side", "tree": {"sha": "57ae8c2de16be47befcd115766fd15ceeb395a86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57ae8c2de16be47befcd115766fd15ceeb395a86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9b395be2bfcd67e045c1031143b7e8c27a6d3fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b395be2bfcd67e045c1031143b7e8c27a6d3fb", "html_url": "https://github.com/rust-lang/rust/commit/c9b395be2bfcd67e045c1031143b7e8c27a6d3fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9b395be2bfcd67e045c1031143b7e8c27a6d3fb/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cdisselkoen", "id": 4458638, "node_id": "MDQ6VXNlcjQ0NTg2Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/4458638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdisselkoen", "html_url": "https://github.com/cdisselkoen", "followers_url": "https://api.github.com/users/cdisselkoen/followers", "following_url": "https://api.github.com/users/cdisselkoen/following{/other_user}", "gists_url": "https://api.github.com/users/cdisselkoen/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdisselkoen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdisselkoen/subscriptions", "organizations_url": "https://api.github.com/users/cdisselkoen/orgs", "repos_url": "https://api.github.com/users/cdisselkoen/repos", "events_url": "https://api.github.com/users/cdisselkoen/events{/privacy}", "received_events_url": "https://api.github.com/users/cdisselkoen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a78dd06951dffcc6ff69aec21a2d8224c12f5026", "url": "https://api.github.com/repos/rust-lang/rust/commits/a78dd06951dffcc6ff69aec21a2d8224c12f5026", "html_url": "https://github.com/rust-lang/rust/commit/a78dd06951dffcc6ff69aec21a2d8224c12f5026"}], "stats": {"total": 55, "additions": 48, "deletions": 7}, "files": [{"sha": "2a2c2e0e1bb8fc7ebc7824e7490221c43e188c08", "filename": "editors/code/src/cargo.ts", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c9b395be2bfcd67e045c1031143b7e8c27a6d3fb/editors%2Fcode%2Fsrc%2Fcargo.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c9b395be2bfcd67e045c1031143b7e8c27a6d3fb/editors%2Fcode%2Fsrc%2Fcargo.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcargo.ts?ref=c9b395be2bfcd67e045c1031143b7e8c27a6d3fb", "patch": "@@ -1,6 +1,9 @@\n import * as cp from 'child_process';\n+import * as os from 'os';\n+import * as path from 'path';\n import * as readline from 'readline';\n import { OutputChannel } from 'vscode';\n+import { isValidExecutable } from './util';\n \n interface CompilationArtifact {\n     fileName: string;\n@@ -63,7 +66,14 @@ export class Cargo {\n         onStderrString: (data: string) => void\n     ): Promise<number> {\n         return new Promise((resolve, reject) => {\n-            const cargo = cp.spawn('cargo', cargoArgs, {\n+            let cargoPath;\n+            try {\n+                cargoPath = getCargoPathOrFail();\n+            } catch (err) {\n+                return reject(err);\n+            }\n+\n+            const cargo = cp.spawn(cargoPath, cargoArgs, {\n                 stdio: ['ignore', 'pipe', 'pipe'],\n                 cwd: this.rootFolder\n             });\n@@ -87,3 +97,27 @@ export class Cargo {\n         });\n     }\n }\n+\n+// Mirrors `ra_env::get_path_for_executable` implementation\n+function getCargoPathOrFail(): string {\n+    const envVar = process.env.CARGO;\n+    const executableName = \"cargo\";\n+\n+    if (envVar) {\n+        if (isValidExecutable(envVar)) return envVar;\n+\n+        throw new Error(`\\`${envVar}\\` environment variable points to something that's not a valid executable`);\n+    }\n+\n+    if (isValidExecutable(executableName)) return executableName;\n+\n+    const standardLocation = path.join(os.homedir(), '.cargo', 'bin', executableName);\n+\n+    if (isValidExecutable(standardLocation)) return standardLocation;\n+\n+    throw new Error(\n+        `Failed to find \\`${executableName}\\` executable. ` +\n+        `Make sure \\`${executableName}\\` is in \\`$PATH\\`, ` +\n+        `or set \\`${envVar}\\` to point to a valid executable.`\n+    );\n+}"}, {"sha": "9b020d0019a3b49fb5fd18e51d51e8ef8b04fb71", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9b395be2bfcd67e045c1031143b7e8c27a6d3fb/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c9b395be2bfcd67e045c1031143b7e8c27a6d3fb/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=c9b395be2bfcd67e045c1031143b7e8c27a6d3fb", "patch": "@@ -8,10 +8,9 @@ import { activateInlayHints } from './inlay_hints';\n import { activateStatusDisplay } from './status_display';\n import { Ctx } from './ctx';\n import { Config, NIGHTLY_TAG } from './config';\n-import { log, assert } from './util';\n+import { log, assert, isValidExecutable } from './util';\n import { PersistentState } from './persistent_state';\n import { fetchRelease, download } from './net';\n-import { spawnSync } from 'child_process';\n import { activateTaskProvider } from './tasks';\n \n let ctx: Ctx | undefined;\n@@ -179,10 +178,7 @@ async function bootstrapServer(config: Config, state: PersistentState): Promise<\n \n     log.debug(\"Using server binary at\", path);\n \n-    const res = spawnSync(path, [\"--version\"], { encoding: 'utf8' });\n-    log.debug(\"Checked binary availability via --version\", res);\n-    log.debug(res, \"--version output:\", res.output);\n-    if (res.status !== 0) {\n+    if (!isValidExecutable(path)) {\n         throw new Error(`Failed to execute ${path} --version`);\n     }\n "}, {"sha": "127a9e9112499ab357df4b483cb205cea40f83fe", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9b395be2bfcd67e045c1031143b7e8c27a6d3fb/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c9b395be2bfcd67e045c1031143b7e8c27a6d3fb/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=c9b395be2bfcd67e045c1031143b7e8c27a6d3fb", "patch": "@@ -1,6 +1,7 @@\n import * as lc from \"vscode-languageclient\";\n import * as vscode from \"vscode\";\n import { strict as nativeAssert } from \"assert\";\n+import { spawnSync } from \"child_process\";\n \n export function assert(condition: boolean, explanation: string): asserts condition {\n     try {\n@@ -82,3 +83,13 @@ export function isRustDocument(document: vscode.TextDocument): document is RustD\n export function isRustEditor(editor: vscode.TextEditor): editor is RustEditor {\n     return isRustDocument(editor.document);\n }\n+\n+export function isValidExecutable(path: string): boolean {\n+    log.debug(\"Checking availability of a binary at\", path);\n+\n+    const res = spawnSync(path, [\"--version\"], { encoding: 'utf8' });\n+\n+    log.debug(res, \"--version output:\", res.output);\n+\n+    return res.status === 0;\n+}"}]}