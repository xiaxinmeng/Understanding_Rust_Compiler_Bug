{"sha": "20781f195d205dcc3fa244a659dfc5b3547a87d3", "node_id": "C_kwDOAAsO6NoAKDIwNzgxZjE5NWQyMDVkY2MzZmEyNDRhNjU5ZGZjNWIzNTQ3YTg3ZDM", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-01-17T18:57:45Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-01-28T21:45:41Z"}, "message": "Rename qpath_generic_tys", "tree": {"sha": "91a43af8d68bc628359d6957686c63ab6e0db8da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91a43af8d68bc628359d6957686c63ab6e0db8da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20781f195d205dcc3fa244a659dfc5b3547a87d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20781f195d205dcc3fa244a659dfc5b3547a87d3", "html_url": "https://github.com/rust-lang/rust/commit/20781f195d205dcc3fa244a659dfc5b3547a87d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20781f195d205dcc3fa244a659dfc5b3547a87d3/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bea09a2329676e48ea9f780c47e27d653417a4e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bea09a2329676e48ea9f780c47e27d653417a4e3", "html_url": "https://github.com/rust-lang/rust/commit/bea09a2329676e48ea9f780c47e27d653417a4e3"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "0a2df7d21883561dada1a46e75bf4c4acf727b1a", "filename": "clippy_lints/src/types/rc_buffer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20781f195d205dcc3fa244a659dfc5b3547a87d3/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20781f195d205dcc3fa244a659dfc5b3547a87d3/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs?ref=20781f195d205dcc3fa244a659dfc5b3547a87d3", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{get_qpath_generic_tys, is_ty_param_diagnostic_item};\n+use clippy_utils::{is_ty_param_diagnostic_item, qpath_generic_tys};\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, def_id::DefId, QPath, TyKind};\n use rustc_lint::LateContext;\n@@ -25,7 +25,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 TyKind::Path(qpath) => qpath,\n                 _ => return false,\n             };\n-            let inner_span = match get_qpath_generic_tys(qpath).next() {\n+            let inner_span = match qpath_generic_tys(qpath).next() {\n                 Some(ty) => ty.span,\n                 None => return false,\n             };\n@@ -60,7 +60,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 TyKind::Path(qpath) => qpath,\n                 _ => return false,\n             };\n-            let inner_span = match get_qpath_generic_tys(qpath).next() {\n+            let inner_span = match qpath_generic_tys(qpath).next() {\n                 Some(ty) => ty.span,\n                 None => return false,\n             };"}, {"sha": "8638197a5842f68317f1137ea3330899cfead3eb", "filename": "clippy_lints/src/types/redundant_allocation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20781f195d205dcc3fa244a659dfc5b3547a87d3/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20781f195d205dcc3fa244a659dfc5b3547a87d3/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs?ref=20781f195d205dcc3fa244a659dfc5b3547a87d3", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::{snippet, snippet_with_applicability};\n-use clippy_utils::{get_qpath_generic_tys, is_ty_param_diagnostic_item, is_ty_param_lang_item};\n+use clippy_utils::{is_ty_param_diagnostic_item, is_ty_param_lang_item, qpath_generic_tys};\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, def_id::DefId, LangItem, QPath, TyKind};\n use rustc_lint::LateContext;\n@@ -53,7 +53,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n         TyKind::Path(inner_qpath) => inner_qpath,\n         _ => return false,\n     };\n-    let inner_span = match get_qpath_generic_tys(inner_qpath).next() {\n+    let inner_span = match qpath_generic_tys(inner_qpath).next() {\n         Some(ty) => {\n             // Box<Box<dyn T>> is smaller than Box<dyn T> because of wide pointers\n             if matches!(ty.kind, TyKind::TraitObject(..)) {"}, {"sha": "64634c64602f606d691c99f5bded65bc264c95c5", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20781f195d205dcc3fa244a659dfc5b3547a87d3/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20781f195d205dcc3fa244a659dfc5b3547a87d3/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=20781f195d205dcc3fa244a659dfc5b3547a87d3", "patch": "@@ -268,7 +268,7 @@ pub fn is_ty_param_lang_item<'tcx>(\n     qpath: &QPath<'tcx>,\n     item: LangItem,\n ) -> Option<&'tcx hir::Ty<'tcx>> {\n-    let ty = get_qpath_generic_tys(qpath).next()?;\n+    let ty = qpath_generic_tys(qpath).next()?;\n \n     if let TyKind::Path(qpath) = &ty.kind {\n         cx.qpath_res(qpath, ty.hir_id)\n@@ -288,7 +288,7 @@ pub fn is_ty_param_diagnostic_item<'tcx>(\n     qpath: &QPath<'tcx>,\n     item: Symbol,\n ) -> Option<&'tcx hir::Ty<'tcx>> {\n-    let ty = get_qpath_generic_tys(qpath).next()?;\n+    let ty = qpath_generic_tys(qpath).next()?;\n \n     if let TyKind::Path(qpath) = &ty.kind {\n         cx.qpath_res(qpath, ty.hir_id)\n@@ -368,7 +368,7 @@ pub fn get_qpath_generics<'tcx>(path: &QPath<'tcx>) -> Option<&'tcx GenericArgs<\n     }\n }\n \n-pub fn get_qpath_generic_tys<'tcx>(path: &QPath<'tcx>) -> impl Iterator<Item = &'tcx hir::Ty<'tcx>> {\n+pub fn qpath_generic_tys<'tcx>(path: &QPath<'tcx>) -> impl Iterator<Item = &'tcx hir::Ty<'tcx>> {\n     get_qpath_generics(path)\n         .map_or([].as_ref(), |a| a.args)\n         .iter()"}]}