{"sha": "d286113024ce50ada7a34f00041f4ff41f3217e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyODYxMTMwMjRjZTUwYWRhN2EzNGYwMDA0MWY0ZmY0MWYzMjE3ZTY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-12-11T14:55:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-12-14T14:01:09Z"}, "message": "Revert \"Stabilize the `never_type`, written `!`.\"\n\nThis reverts commit 15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1.", "tree": {"sha": "70d2d7673cfdc4b87a1bc391ab94198af0bf634c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70d2d7673cfdc4b87a1bc391ab94198af0bf634c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d286113024ce50ada7a34f00041f4ff41f3217e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d286113024ce50ada7a34f00041f4ff41f3217e6", "html_url": "https://github.com/rust-lang/rust/commit/d286113024ce50ada7a34f00041f4ff41f3217e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d286113024ce50ada7a34f00041f4ff41f3217e6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1719337d02b0830234e3a1a86aae8f05af888cbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/1719337d02b0830234e3a1a86aae8f05af888cbe", "html_url": "https://github.com/rust-lang/rust/commit/1719337d02b0830234e3a1a86aae8f05af888cbe"}], "stats": {"total": 67, "additions": 44, "deletions": 23}, "files": [{"sha": "18f808638deac783c6291e8b35c089a18b6c86c7", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=d286113024ce50ada7a34f00041f4ff41f3217e6", "patch": "@@ -195,7 +195,7 @@ mod impls {\n         bool char\n     }\n \n-    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl Clone for ! {\n         #[inline]\n         fn clone(&self) -> Self {"}, {"sha": "4aa52a7a390e3373f01de95e90fe8fd691199a12", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=d286113024ce50ada7a34f00041f4ff41f3217e6", "patch": "@@ -1141,24 +1141,24 @@ mod impls {\n \n     ord_impl! { char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl PartialEq for ! {\n         fn eq(&self, _: &!) -> bool {\n             *self\n         }\n     }\n \n-    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl Eq for ! {}\n \n-    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl PartialOrd for ! {\n         fn partial_cmp(&self, _: &!) -> Option<Ordering> {\n             *self\n         }\n     }\n \n-    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl Ord for ! {\n         fn cmp(&self, _: &!) -> Ordering {\n             *self"}, {"sha": "223f91d909b3424c2420ca91eb4dcb3a56c48f76", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=d286113024ce50ada7a34f00041f4ff41f3217e6", "patch": "@@ -1940,14 +1940,14 @@ macro_rules! fmt_refs {\n \n fmt_refs! { Debug, Display, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperExp }\n \n-#[stable(feature = \"never_type\", since = \"1.41.0\")]\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n impl Debug for ! {\n     fn fmt(&self, _: &mut Formatter<'_>) -> Result {\n         *self\n     }\n }\n \n-#[stable(feature = \"never_type\", since = \"1.41.0\")]\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n impl Display for ! {\n     fn fmt(&self, _: &mut Formatter<'_>) -> Result {\n         *self"}, {"sha": "8412e79aa333d3058eedf68ce4016177616fc744", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=d286113024ce50ada7a34f00041f4ff41f3217e6", "patch": "@@ -87,7 +87,7 @@\n #![feature(iter_once_with)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n-#![cfg_attr(bootstrap, feature(never_type))]\n+#![feature(never_type)]\n #![feature(nll)]\n #![feature(exhaustive_patterns)]\n #![feature(no_core)]"}, {"sha": "2db55508ad546087e58239d9f3ca55b4ad179b9c", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=d286113024ce50ada7a34f00041f4ff41f3217e6", "patch": "@@ -776,7 +776,7 @@ mod copy_impls {\n         bool char\n     }\n \n-    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n+    #[unstable(feature = \"never_type\", issue = \"35121\")]\n     impl Copy for ! {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "00447a7d532f145721d0d7e38c501501178b5007", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=d286113024ce50ada7a34f00041f4ff41f3217e6", "patch": "@@ -4731,7 +4731,7 @@ impl From<Infallible> for TryFromIntError {\n     }\n }\n \n-#[stable(feature = \"never_type\", since = \"1.41.0\")]\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n impl From<!> for TryFromIntError {\n     fn from(never: !) -> TryFromIntError {\n         // Match rather than coerce to make sure that code like"}, {"sha": "641e6a4f6148914ed19d2906a5b46d107c9d5618", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=d286113024ce50ada7a34f00041f4ff41f3217e6", "patch": "@@ -37,7 +37,7 @@\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n #![cfg_attr(windows, feature(libc))]\n-#![cfg_attr(bootstrap, feature(never_type))]\n+#![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(overlapping_marker_traits)]\n #![feature(extern_types)]"}, {"sha": "fb2099e71a31a136597f853f93f18dba1d50bdd0", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=d286113024ce50ada7a34f00041f4ff41f3217e6", "patch": "@@ -8,7 +8,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n-#![cfg_attr(bootstrap, feature(never_type))]\n+#![feature(never_type)]\n #![feature(nll)]\n #![feature(in_band_lifetimes)]\n "}, {"sha": "9bd321e5f82d62401f509fc05826204f2ac0811a", "filename": "src/librustc_error_codes/error_codes/E0725.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibrustc_error_codes%2Ferror_codes%2FE0725.md", "raw_url": "https://github.com/rust-lang/rust/raw/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibrustc_error_codes%2Ferror_codes%2FE0725.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0725.md?ref=d286113024ce50ada7a34f00041f4ff41f3217e6", "patch": "@@ -4,8 +4,8 @@ command line flags.\n Erroneous code example:\n \n ```ignore (can't specify compiler flags from doctests)\n-#![feature(specialization)] // error: the feature `specialization` is not in\n-                            // the list of allowed features\n+#![feature(never_type)] // error: the feature `never_type` is not in\n+                        // the list of allowed features\n ```\n \n Delete the offending feature attribute, or add it to the list of allowed"}, {"sha": "3f294dc02ed6f6cbcac0fddd729dac8f61c5f49d", "filename": "src/librustc_feature/accepted.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibrustc_feature%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibrustc_feature%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Faccepted.rs?ref=d286113024ce50ada7a34f00041f4ff41f3217e6", "patch": "@@ -253,8 +253,6 @@ declare_features! (\n     (accepted, const_constructor, \"1.40.0\", Some(61456), None),\n     /// Allows the use of `#[cfg(doctest)]`, set when rustdoc is collecting doctests.\n     (accepted, cfg_doctest, \"1.40.0\", Some(62210), None),\n-    /// Allows the `!` type. Does not imply 'exhaustive_patterns' any more.\n-    (accepted, never_type, \"1.41.0\", Some(35121), None),\n     /// Allows relaxing the coherence rules such that\n     /// `impl<T> ForeignTrait<LocalType> for ForeignType<T>` is permitted.\n     (accepted, re_rebalance_coherence, \"1.41.0\", Some(55437), None),"}, {"sha": "c0dfed99d3bfc53b97fff000857fb4c92bffa09e", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=d286113024ce50ada7a34f00041f4ff41f3217e6", "patch": "@@ -307,6 +307,9 @@ declare_features! (\n     /// Allows `X..Y` patterns.\n     (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n \n+    /// Allows the `!` type. Does not imply 'exhaustive_patterns' (below) any more.\n+    (active, never_type, \"1.13.0\", Some(35121), None),\n+\n     /// Allows exhaustive pattern matching on types that contain uninhabited types.\n     (active, exhaustive_patterns, \"1.13.0\", Some(51085), None),\n "}, {"sha": "f6b3c5b8e5e821bb754d261119e3ce1f5f30754c", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=d286113024ce50ada7a34f00041f4ff41f3217e6", "patch": "@@ -18,7 +18,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(drain_filter)]\n #![feature(exhaustive_patterns)]\n #![feature(iter_order_by)]\n-#![cfg_attr(bootstrap, feature(never_type))]\n+#![feature(never_type)]\n #![feature(specialization)]\n #![feature(try_trait)]\n #![feature(unicode_internals)]"}, {"sha": "c6c9703e92c92350a79c09b03f01e427a56fa952", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=d286113024ce50ada7a34f00041f4ff41f3217e6", "patch": "@@ -67,7 +67,7 @@ This API is completely unstable and subject to change.\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(slice_patterns)]\n-#![cfg_attr(bootstrap, feature(never_type))]\n+#![feature(never_type)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "11d50cb7ce628bffcaabed5d0a8e9d9b60e7b043", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d286113024ce50ada7a34f00041f4ff41f3217e6", "patch": "@@ -14,7 +14,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(const_fn)]\n #![feature(drain_filter)]\n-#![cfg_attr(bootstrap, feature(never_type))]\n+#![feature(never_type)]\n #![feature(unicode_internals)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "e45d56c320cd800bf30605b4e4ac08cfec884ff3", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=d286113024ce50ada7a34f00041f4ff41f3217e6", "patch": "@@ -11,7 +11,7 @@ Core encoding and decoding interfaces.\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n #![feature(specialization)]\n-#![cfg_attr(bootstrap, feature(never_type))]\n+#![feature(never_type)]\n #![feature(nll)]\n #![feature(associated_type_bounds)]\n #![cfg_attr(test, feature(test))]"}, {"sha": "d4c4cb9c3b997f40773c76af7ec5f971fe200fdf", "filename": "src/libstd/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=d286113024ce50ada7a34f00041f4ff41f3217e6", "patch": "@@ -465,7 +465,7 @@ impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n     }\n }\n \n-#[stable(feature = \"never_type\", since = \"1.41.0\")]\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n impl Error for ! {\n     fn description(&self) -> &str { *self }\n }"}, {"sha": "6128c1d46ae3bef8bcff032e40349b49df5988df", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=d286113024ce50ada7a34f00041f4ff41f3217e6", "patch": "@@ -281,7 +281,7 @@\n #![feature(maybe_uninit_ref)]\n #![feature(maybe_uninit_slice)]\n #![feature(needs_panic_runtime)]\n-#![cfg_attr(bootstrap, feature(never_type))]\n+#![feature(never_type)]\n #![feature(nll)]\n #![cfg_attr(bootstrap, feature(on_unimplemented))]\n #![feature(optin_builtin_traits)]"}, {"sha": "a72951c03461083a4bae1960c0b6cef616c198c9", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=d286113024ce50ada7a34f00041f4ff41f3217e6", "patch": "@@ -71,6 +71,7 @@ mod prim_bool { }\n /// write:\n ///\n /// ```\n+/// #![feature(never_type)]\n /// # fn foo() -> u32 {\n /// let x: ! = {\n ///     return 123\n@@ -200,6 +201,7 @@ mod prim_bool { }\n /// for example:\n ///\n /// ```\n+/// #![feature(never_type)]\n /// # use std::fmt;\n /// # trait Debug {\n /// # fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result;\n@@ -237,7 +239,7 @@ mod prim_bool { }\n /// [`Default`]: default/trait.Default.html\n /// [`default()`]: default/trait.Default.html#tymethod.default\n ///\n-#[stable(feature = \"never_type\", since = \"1.41.0\")]\n+#[unstable(feature = \"never_type\", issue = \"35121\")]\n mod prim_never { }\n \n #[doc(primitive = \"char\")]"}, {"sha": "99d89183e5b0d19c8262e36b840d1f3c123cc343", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d286113024ce50ada7a34f00041f4ff41f3217e6/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=d286113024ce50ada7a34f00041f4ff41f3217e6", "patch": "@@ -464,11 +464,25 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::TyKind::BareFn(ref bare_fn_ty) => {\n                 self.check_extern(bare_fn_ty.ext);\n             }\n+            ast::TyKind::Never => {\n+                gate_feature_post!(&self, never_type, ty.span,\n+                                   \"The `!` type is experimental\");\n+            }\n             _ => {}\n         }\n         visit::walk_ty(self, ty)\n     }\n \n+    fn visit_fn_ret_ty(&mut self, ret_ty: &'a ast::FunctionRetTy) {\n+        if let ast::FunctionRetTy::Ty(ref output_ty) = *ret_ty {\n+            if let ast::TyKind::Never = output_ty.kind {\n+                // Do nothing.\n+            } else {\n+                self.visit_ty(output_ty)\n+            }\n+        }\n+    }\n+\n     fn visit_expr(&mut self, e: &'a ast::Expr) {\n         match e.kind {\n             ast::ExprKind::Box(_) => {\n@@ -499,6 +513,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         visit::walk_expr(self, e)\n     }\n \n+    fn visit_arm(&mut self, arm: &'a ast::Arm) {\n+        visit::walk_arm(self, arm)\n+    }\n+\n     fn visit_pat(&mut self, pattern: &'a ast::Pat) {\n         match &pattern.kind {\n             PatKind::Slice(pats) => {"}]}