{"sha": "de1c29c95e075af9d95b20860b7f2d9af1449c07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMWMyOWM5NWUwNzVhZjlkOTViMjA4NjBiN2YyZDlhZjE0NDljMDc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-02-24T18:29:40Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:20:19Z"}, "message": "Reduce parent_params to parent_count", "tree": {"sha": "7fa3f298f21b461a3f651f8a2e78f5397db097ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fa3f298f21b461a3f651f8a2e78f5397db097ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de1c29c95e075af9d95b20860b7f2d9af1449c07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de1c29c95e075af9d95b20860b7f2d9af1449c07", "html_url": "https://github.com/rust-lang/rust/commit/de1c29c95e075af9d95b20860b7f2d9af1449c07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de1c29c95e075af9d95b20860b7f2d9af1449c07/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe0c119e7da2e9b068dd54bb88e8acb23d31bfa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe0c119e7da2e9b068dd54bb88e8acb23d31bfa4", "html_url": "https://github.com/rust-lang/rust/commit/fe0c119e7da2e9b068dd54bb88e8acb23d31bfa4"}], "stats": {"total": 62, "additions": 29, "deletions": 33}, "files": [{"sha": "62da6be5b211e402218d2a44466177a04716ca5e", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de1c29c95e075af9d95b20860b7f2d9af1449c07/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1c29c95e075af9d95b20860b7f2d9af1449c07/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=de1c29c95e075af9d95b20860b7f2d9af1449c07", "patch": "@@ -735,7 +735,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::Generics {\n                                           hasher: &mut StableHasher<W>) {\n         let ty::Generics {\n             parent,\n-            ref parent_parameters,\n+            ref parent_count,\n             ref parameters,\n \n             // Reverse map to each `TypeParameterDef`'s `index` field, from\n@@ -746,7 +746,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::Generics {\n         } = *self;\n \n         parent.hash_stable(hcx, hasher);\n-        parent_parameters.hash_stable(hcx, hasher);\n+        parent_count.hash_stable(hcx, hasher);\n         parameters.hash_stable(hcx, hasher);\n         has_self.hash_stable(hcx, hasher);\n         has_late_bound_regions.hash_stable(hcx, hasher);"}, {"sha": "8f5ec3aae8a358e9a2f4e90c5f6a7e9b23d9af79", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/de1c29c95e075af9d95b20860b7f2d9af1449c07/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1c29c95e075af9d95b20860b7f2d9af1449c07/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=de1c29c95e075af9d95b20860b7f2d9af1449c07", "patch": "@@ -784,7 +784,7 @@ impl GenericParameterDef {\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct Generics {\n     pub parent: Option<DefId>,\n-    pub parent_parameters: Vec<u32>,\n+    pub parent_count: usize,\n     pub parameters: Vec<GenericParameterDef>,\n \n     /// Reverse map to each `TypeParameterDef`'s `index` field\n@@ -795,16 +795,12 @@ pub struct Generics {\n }\n \n impl<'a, 'gcx, 'tcx> Generics {\n-    pub fn parent_count(&self) -> usize {\n-        self.parent_parameters.iter().map(|&x| x as usize).sum()\n-    }\n-\n     pub fn own_count(&self) -> usize {\n         self.parameters.len()\n     }\n \n     pub fn count(&self) -> usize {\n-        self.parent_count() + self.own_count()\n+        self.parent_count + self.own_count()\n     }\n \n     pub fn lifetimes(&self) -> Vec<&RegionParameterDef> {\n@@ -827,20 +823,24 @@ impl<'a, 'gcx, 'tcx> Generics {\n         }).collect()\n     }\n \n-    pub fn parent_lifetimes(&self) -> u32 {\n-        self.parent_parameters[0]\n-    }\n-\n-    pub fn parent_types(&self) -> u32 {\n-        self.parent_parameters[1]\n+    pub fn has_type_parameters(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n+        if self.types().len() != 0 {\n+            return true;\n+        }\n+        if let Some(parent_def_id) = self.parent {\n+            let parent = tcx.generics_of(parent_def_id);\n+            parent.has_type_parameters(tcx)\n+        } else {\n+            false\n+        }\n     }\n \n     pub fn region_param(&'tcx self,\n                         param: &EarlyBoundRegion,\n                         tcx: TyCtxt<'a, 'gcx, 'tcx>)\n                         -> &'tcx RegionParameterDef\n     {\n-        if let Some(index) = param.index.checked_sub(self.parent_count() as u32) {\n+        if let Some(index) = param.index.checked_sub(self.parent_count as u32) {\n             // We're currently assuming that lifetimes precede other generic parameters.\n             match self.parameters[index as usize - self.has_self as usize] {\n                 ty::GenericParameterDef::Lifetime(ref lt) => lt,\n@@ -857,7 +857,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n                       param: &ParamTy,\n                       tcx: TyCtxt<'a, 'gcx, 'tcx>)\n                       -> &TypeParameterDef {\n-        if let Some(idx) = param.idx.checked_sub(self.parent_count() as u32) {\n+        if let Some(idx) = param.idx.checked_sub(self.parent_count as u32) {\n             // non-Self type parameters are always offset by exactly\n             // `self.regions.len()`. In the absence of a Self, this is obvious,\n             // but even in the presence of a `Self` we just have to \"compensate\""}, {"sha": "c1e3153c4618e87da8ce47ca6dc742c54fa51e8f", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de1c29c95e075af9d95b20860b7f2d9af1449c07/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1c29c95e075af9d95b20860b7f2d9af1449c07/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=de1c29c95e075af9d95b20860b7f2d9af1449c07", "patch": "@@ -292,7 +292,7 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     /// ordering.\n     fn split(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> SplitClosureSubsts<'tcx> {\n         let generics = tcx.generics_of(def_id);\n-        let parent_len = generics.parent_count();\n+        let parent_len = generics.parent_count;\n         SplitClosureSubsts {\n             closure_kind_ty: self.substs.type_at(parent_len),\n             closure_sig_ty: self.substs.type_at(parent_len + 1),"}, {"sha": "9ebffa4c744e151577a993f1f72eb8a3a632bf7f", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de1c29c95e075af9d95b20860b7f2d9af1449c07/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1c29c95e075af9d95b20860b7f2d9af1449c07/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=de1c29c95e075af9d95b20860b7f2d9af1449c07", "patch": "@@ -929,10 +929,9 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 hir::ImplItemKind::Const(..) => true,\n                 hir::ImplItemKind::Method(ref sig, _) => {\n                     let generics = self.tcx.generics_of(def_id);\n-                    let types = generics.parent_types() as usize + generics.types().len();\n-                    let needs_inline =\n-                        (types > 0 || tcx.trans_fn_attrs(def_id).requests_inline())\n-                            && !self.metadata_output_only();\n+                    let needs_inline = (generics.has_type_parameters(self.tcx) ||\n+                                        tcx.trans_fn_attrs(def_id).requests_inline()) &&\n+                                        !self.metadata_output_only();\n                     let is_const_fn = sig.constness == hir::Constness::Const;\n                     let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n                     needs_inline || is_const_fn || always_encode_mir"}, {"sha": "ecdd6b358cd7bc9a598f94f6eb6886c9e588eecf", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de1c29c95e075af9d95b20860b7f2d9af1449c07/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1c29c95e075af9d95b20860b7f2d9af1449c07/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=de1c29c95e075af9d95b20860b7f2d9af1449c07", "patch": "@@ -1076,7 +1076,7 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n \n fn item_has_type_parameters<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n     let generics = tcx.generics_of(def_id);\n-    generics.parent_types() as usize + generics.types().len() > 0\n+    generics.has_type_parameters(tcx)\n }\n \n fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "ef3f81cfc5c36f78c198edda7f8b62d470b804d2", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de1c29c95e075af9d95b20860b7f2d9af1449c07/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1c29c95e075af9d95b20860b7f2d9af1449c07/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=de1c29c95e075af9d95b20860b7f2d9af1449c07", "patch": "@@ -1139,7 +1139,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             }\n             debug!(\"impl_trait_ty_to_ty: substs from parent = {:?}\", substs);\n         }\n-        assert_eq!(substs.len(), generics.parent_count());\n+        assert_eq!(substs.len(), generics.parent_count);\n \n         // Fill in our own generics with the resolved lifetimes\n         assert_eq!(lifetimes.len(), generics.own_count());"}, {"sha": "ed4fb7ba93960b637d94e18f80c086a3d7357cf2", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de1c29c95e075af9d95b20860b7f2d9af1449c07/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1c29c95e075af9d95b20860b7f2d9af1449c07/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=de1c29c95e075af9d95b20860b7f2d9af1449c07", "patch": "@@ -314,7 +314,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n \n         // Create subst for early-bound lifetime parameters, combining\n         // parameters from the type and those from the method.\n-        assert_eq!(method_generics.parent_count(), parent_substs.len());\n+        assert_eq!(method_generics.parent_count, parent_substs.len());\n         let provided = &segment.parameters;\n         Substs::for_item(self.tcx, pick.item.def_id, |def, _| {\n             let i = def.index as usize;"}, {"sha": "513bc6931ecef90b95f62cd7eb031689126d1bc6", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de1c29c95e075af9d95b20860b7f2d9af1449c07/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1c29c95e075af9d95b20860b7f2d9af1449c07/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=de1c29c95e075af9d95b20860b7f2d9af1449c07", "patch": "@@ -1378,8 +1378,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         // method yet. So create fresh variables here for those too,\n         // if there are any.\n         let generics = self.tcx.generics_of(method);\n-        assert_eq!(substs.regions().count(), generics.parent_lifetimes() as usize);\n-        assert_eq!(substs.types().count(), generics.parent_types() as usize);\n+        assert_eq!(substs.len(), generics.parent_count as usize);\n \n         // Erase any late-bound regions from the method and substitute\n         // in the values from the substitution."}, {"sha": "0c875e704c6deccc1b01b97547ce750d82b93f2c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de1c29c95e075af9d95b20860b7f2d9af1449c07/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1c29c95e075af9d95b20860b7f2d9af1449c07/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=de1c29c95e075af9d95b20860b7f2d9af1449c07", "patch": "@@ -4751,7 +4751,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         let (fn_start, has_self) = match (type_segment, fn_segment) {\n             (_, Some((_, generics))) => {\n-                (generics.parent_count(), generics.has_self)\n+                (generics.parent_count, generics.has_self)\n             }\n             (Some((_, generics)), None) => {\n                 (generics.own_count(), generics.has_self)"}, {"sha": "ffbbb3b1faef4ee462021a22f8a36ffe3722e66a", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/de1c29c95e075af9d95b20860b7f2d9af1449c07/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de1c29c95e075af9d95b20860b7f2d9af1449c07/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=de1c29c95e075af9d95b20860b7f2d9af1449c07", "patch": "@@ -876,13 +876,12 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let has_self = opt_self.is_some();\n     let mut parent_has_self = false;\n     let mut own_start = has_self as u32;\n-    let (parent_regions, parent_types) = parent_def_id.map_or((0, 0), |def_id| {\n+    let parent_count = parent_def_id.map_or(0, |def_id| {\n         let generics = tcx.generics_of(def_id);\n         assert_eq!(has_self, false);\n         parent_has_self = generics.has_self;\n         own_start = generics.count() as u32;\n-        (generics.parent_lifetimes() + generics.lifetimes().len() as u32,\n-            generics.parent_types() + generics.types().len() as u32)\n+        generics.parent_count + generics.parameters.len()\n     });\n \n     let early_lifetimes = early_bound_lifetimes_from_generics(tcx, ast_generics);\n@@ -971,7 +970,6 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                    .map(|param| (param.def_id, param.index))\n                                    .collect();\n \n-    let parent_parameters = vec![parent_regions, parent_types];\n     let lifetimes: Vec<ty::GenericParameterDef> =\n         regions.into_iter().map(|lt| ty::GenericParameterDef::Lifetime(lt)).collect();\n     let types: Vec<ty::GenericParameterDef> =\n@@ -980,7 +978,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     tcx.alloc_generics(ty::Generics {\n         parent: parent_def_id,\n-        parent_parameters,\n+        parent_count,\n         parameters,\n         type_param_to_index,\n         has_self: has_self || parent_has_self,\n@@ -1395,7 +1393,7 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     };\n \n     let generics = tcx.generics_of(def_id);\n-    let parent_count = generics.parent_count() as u32;\n+    let parent_count = generics.parent_count as u32;\n     let has_own_self = generics.has_self && parent_count == 0;\n \n     let mut predicates = vec![];"}]}