{"sha": "94211416bcde4d1049f241b6c95594e28c8865e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MjExNDE2YmNkZTRkMTA0OWYyNDFiNmM5NTU5NGUyOGM4ODY1ZTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-13T21:20:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-13T21:20:19Z"}, "message": "Auto merge of #44516 - gaurikholkar:fns, r=arielb1\n\nExtend E0623 for fn items\n\nThis fixes #44516\nThe below example now gives\n```\nerror[E0623]: lifetime mismatch\n --> gg.rs:3:10\n  |\n2 | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n  |                               ---      --- these two types are declared with different lifetimes...\n3 |   y.push(z);\n  |          ^ ...but data from `z` flows into `y` here\n\nerror: aborting due to previous error\n```\n\nr? @nikomatsakis\ncc @arielb1", "tree": {"sha": "e297275cd8200201f04d24b0083fbef2668fde2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e297275cd8200201f04d24b0083fbef2668fde2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94211416bcde4d1049f241b6c95594e28c8865e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94211416bcde4d1049f241b6c95594e28c8865e6", "html_url": "https://github.com/rust-lang/rust/commit/94211416bcde4d1049f241b6c95594e28c8865e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94211416bcde4d1049f241b6c95594e28c8865e6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "539f2083de809b5c8304fe7426655cfeb0e66d5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/539f2083de809b5c8304fe7426655cfeb0e66d5e", "html_url": "https://github.com/rust-lang/rust/commit/539f2083de809b5c8304fe7426655cfeb0e66d5e"}, {"sha": "e71eef1775f9da8bc2e8d312b83df007b4751ec6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e71eef1775f9da8bc2e8d312b83df007b4751ec6", "html_url": "https://github.com/rust-lang/rust/commit/e71eef1775f9da8bc2e8d312b83df007b4751ec6"}], "stats": {"total": 153, "additions": 151, "deletions": 2}, "files": [{"sha": "186eda95fecbde4424d34a3325fbb723ed94cbd5", "filename": "fn.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94211416bcde4d1049f241b6c95594e28c8865e6/fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94211416bcde4d1049f241b6c95594e28c8865e6/fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/fn.rs?ref=94211416bcde4d1049f241b6c95594e28c8865e6", "patch": "@@ -0,0 +1,8 @@\n+\n+fn foo(x:  fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n+// Debruijn   1    1            1        1\n+// Anon-Index 0    1            0        1\n+//            ------\n+//            debruijn indices are shifted by 1 in here\n+  y.push(z); // index will be zero or one\n+}"}, {"sha": "051263dfb53ef30f5e8f5283c7550d25049b3f70", "filename": "src/librustc/infer/error_reporting/different_lifetimes.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/94211416bcde4d1049f241b6c95594e28c8865e6/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94211416bcde4d1049f241b6c95594e28c8865e6/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs?ref=94211416bcde4d1049f241b6c95594e28c8865e6", "patch": "@@ -173,6 +173,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             hir_map: &self.tcx.hir,\n             bound_region: *br,\n             found_type: None,\n+            depth: 1,\n         };\n         nested_visitor.visit_ty(arg);\n         nested_visitor.found_type\n@@ -195,6 +196,7 @@ struct FindNestedTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     // The type where the anonymous lifetime appears\n     // for e.g. Vec<`&u8`> and <`&u8`>\n     found_type: Option<&'gcx hir::Ty>,\n+    depth: u32,\n }\n \n impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n@@ -204,6 +206,21 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n \n     fn visit_ty(&mut self, arg: &'gcx hir::Ty) {\n         match arg.node {\n+            hir::TyBareFn(_) => {\n+                self.depth += 1;\n+                intravisit::walk_ty(self, arg);\n+                self.depth -= 1;\n+                return;\n+            }\n+\n+            hir::TyTraitObject(ref bounds, _) => {\n+                for bound in bounds {\n+                    self.depth += 1;\n+                    self.visit_poly_trait_ref(bound, hir::TraitBoundModifier::None);\n+                    self.depth -= 1;\n+                }\n+            }\n+\n             hir::TyRptr(ref lifetime, _) => {\n                 // the lifetime of the TyRptr\n                 let hir_id = self.infcx.tcx.hir.node_to_hir_id(lifetime.id);\n@@ -217,7 +234,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n                                debruijn_index.depth,\n                                anon_index,\n                                br_index);\n-                        if debruijn_index.depth == 1 && anon_index == br_index {\n+                        if debruijn_index.depth == self.depth && anon_index == br_index {\n                             self.found_type = Some(arg);\n                             return; // we can stop visiting now\n                         }\n@@ -246,7 +263,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n                         debug!(\"self.infcx.tcx.hir.local_def_id(id)={:?}\",\n                                self.infcx.tcx.hir.local_def_id(id));\n                         debug!(\"def_id={:?}\", def_id);\n-                        if debruijn_index.depth == 1 &&\n+                        if debruijn_index.depth == self.depth &&\n                            self.infcx.tcx.hir.local_def_id(id) == def_id {\n                             self.found_type = Some(arg);\n                             return; // we can stop visiting now"}, {"sha": "b159e14786995a20681dab9b9e0f3ea9d9bc272b", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-4.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/94211416bcde4d1049f241b6c95594e28c8865e6/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94211416bcde4d1049f241b6c95594e28c8865e6/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-4.stderr?ref=94211416bcde4d1049f241b6c95594e28c8865e6", "patch": "@@ -0,0 +1,18 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-4.rs:12:13\n+   |\n+11 | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n+   |                     ---                 --- these references are declared with different lifetimes...\n+12 |     z.push((x,y));\n+   |             ^ ...but data flows into `z` here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-4.rs:12:15\n+   |\n+11 | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n+   |                         ---                  --- these references are declared with different lifetimes...\n+12 |     z.push((x,y));\n+   |               ^ ...but data flows into `z` here\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "606e611865fc772746230d09cd4104c9dfef6913", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-4.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/94211416bcde4d1049f241b6c95594e28c8865e6/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94211416bcde4d1049f241b6c95594e28c8865e6/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.rs?ref=94211416bcde4d1049f241b6c95594e28c8865e6", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+struct Ref<'a, 'b> {\n+    a: &'a u32,\n+    b: &'b u32,\n+}\n+\n+fn foo(mut x: Ref) {\n+    x.a = x.b;\n+}\n+\n+fn main() {}"}, {"sha": "689a1ac292b33e58ecd21df5b565ac54525f1af3", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-4.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94211416bcde4d1049f241b6c95594e28c8865e6/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94211416bcde4d1049f241b6c95594e28c8865e6/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.stderr?ref=94211416bcde4d1049f241b6c95594e28c8865e6", "patch": "@@ -0,0 +1,12 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-4.rs:16:11\n+   |\n+15 | fn foo(mut x: Ref) {\n+   |               ---\n+   |               |\n+   |               this type was declared with multiple lifetimes...\n+16 |     x.a = x.b;\n+   |           ^^^ ...but data with one lifetime flows into the other here\n+\n+error: aborting due to previous error\n+"}, {"sha": "4933dbb7e7a7a2c3ec95ffb312fa34dcd9875ee4", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct-4.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/94211416bcde4d1049f241b6c95594e28c8865e6/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94211416bcde4d1049f241b6c95594e28c8865e6/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.rs?ref=94211416bcde4d1049f241b6c95594e28c8865e6", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Ref<'a, 'b> { a: &'a u32, b: &'b u32 }\n+\n+fn foo(mut y: Ref, x: &u32) {\n+    y.b = x;\n+}\n+\n+fn main() { }"}, {"sha": "40f026bcb1b588e67d3aebf5e1b3be560b787e54", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct-4.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94211416bcde4d1049f241b6c95594e28c8865e6/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94211416bcde4d1049f241b6c95594e28c8865e6/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.stderr?ref=94211416bcde4d1049f241b6c95594e28c8865e6", "patch": "@@ -0,0 +1,10 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-one-is-struct-4.rs:14:11\n+   |\n+13 | fn foo(mut y: Ref, x: &u32) {\n+   |               ---     ---- these two types are declared with different lifetimes...\n+14 |     y.b = x;\n+   |           ^ ...but data from `x` flows into `y` here\n+\n+error: aborting due to previous error\n+"}, {"sha": "9220c34489fab9e781e050bc7d372445bdf4d211", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-using-fn-items.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/94211416bcde4d1049f241b6c95594e28c8865e6/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94211416bcde4d1049f241b6c95594e28c8865e6/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.rs?ref=94211416bcde4d1049f241b6c95594e28c8865e6", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n+  y.push(z);\n+}\n+\n+fn main() { }"}, {"sha": "adfc4dc0c276e8c1018a5a822cd812033324d923", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-using-fn-items.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94211416bcde4d1049f241b6c95594e28c8865e6/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94211416bcde4d1049f241b6c95594e28c8865e6/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.stderr?ref=94211416bcde4d1049f241b6c95594e28c8865e6", "patch": "@@ -0,0 +1,10 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-using-fn-items.rs:11:10\n+   |\n+10 | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n+   |                               ---      --- these two types are declared with different lifetimes...\n+11 |   y.push(z);\n+   |          ^ ...but data from `z` flows into `y` here\n+\n+error: aborting due to previous error\n+"}, {"sha": "78a6ad54eae4f417c11505b5253feaf255fe3713", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-using-trait-objects.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/94211416bcde4d1049f241b6c95594e28c8865e6/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94211416bcde4d1049f241b6c95594e28c8865e6/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.rs?ref=94211416bcde4d1049f241b6c95594e28c8865e6", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+fn foo(x:Box<Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n+  y.push(z);\n+}\n+\n+fn main() { }"}, {"sha": "ce766b2e406a2cdf7b3c8f44599c8557ce8236c1", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-using-trait-objects.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94211416bcde4d1049f241b6c95594e28c8865e6/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94211416bcde4d1049f241b6c95594e28c8865e6/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.stderr?ref=94211416bcde4d1049f241b6c95594e28c8865e6", "patch": "@@ -0,0 +1,10 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:11:10\n+   |\n+10 | fn foo(x:Box<Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n+   |                 ---  --- these two types are declared with different lifetimes...\n+11 |   y.push(z);\n+   |          ^ ...but data from `z` flows into `y` here\n+\n+error: aborting due to previous error\n+"}]}