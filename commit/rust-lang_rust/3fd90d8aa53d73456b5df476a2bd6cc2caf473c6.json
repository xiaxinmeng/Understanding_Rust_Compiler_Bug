{"sha": "3fd90d8aa53d73456b5df476a2bd6cc2caf473c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZDkwZDhhYTUzZDczNDU2YjVkZjQ3NmEyYmQ2Y2MyY2FmNDczYzY=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2016-10-21T08:25:53Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2016-10-25T00:48:25Z"}, "message": "Use `SmallVector` for `TtReader::stack`.\n\nThis avoids 800,000 heap allocations when compiling html5ever. It\nrequires tweaking `SmallVector` a little.", "tree": {"sha": "d36f7cb1f8e1b511f6994c3301f50c350120d665", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d36f7cb1f8e1b511f6994c3301f50c350120d665"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fd90d8aa53d73456b5df476a2bd6cc2caf473c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fd90d8aa53d73456b5df476a2bd6cc2caf473c6", "html_url": "https://github.com/rust-lang/rust/commit/3fd90d8aa53d73456b5df476a2bd6cc2caf473c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fd90d8aa53d73456b5df476a2bd6cc2caf473c6/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a16a11c392d227ca845e65905c06599579e2828", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a16a11c392d227ca845e65905c06599579e2828", "html_url": "https://github.com/rust-lang/rust/commit/0a16a11c392d227ca845e65905c06599579e2828"}], "stats": {"total": 58, "additions": 45, "deletions": 13}, "files": [{"sha": "8a6a8e53a3e4c1b122aa2c33030b4724e94a1449", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3fd90d8aa53d73456b5df476a2bd6cc2caf473c6/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd90d8aa53d73456b5df476a2bd6cc2caf473c6/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=3fd90d8aa53d73456b5df476a2bd6cc2caf473c6", "patch": "@@ -10,14 +10,15 @@\n use self::LockstepIterSize::*;\n \n use ast::Ident;\n-use syntax_pos::{Span, DUMMY_SP};\n use errors::{Handler, DiagnosticBuilder};\n use ext::tt::macro_parser::{NamedMatch, MatchedSeq, MatchedNonterminal};\n use parse::token::{DocComment, MatchNt, SubstNt};\n use parse::token::{Token, Interpolated, NtIdent, NtTT};\n use parse::token;\n use parse::lexer::TokenAndSpan;\n+use syntax_pos::{Span, DUMMY_SP};\n use tokenstream::{self, TokenTree};\n+use util::small_vector::SmallVector;\n \n use std::rc::Rc;\n use std::ops::Add;\n@@ -36,7 +37,7 @@ struct TtFrame {\n pub struct TtReader<'a> {\n     pub sp_diag: &'a Handler,\n     /// the unzipped tree:\n-    stack: Vec<TtFrame>,\n+    stack: SmallVector<TtFrame>,\n     /* for MBE-style macro transcription */\n     interpolations: HashMap<Ident, Rc<NamedMatch>>,\n \n@@ -74,7 +75,7 @@ pub fn new_tt_reader_with_doc_flag(sp_diag: &Handler,\n                                    -> TtReader {\n     let mut r = TtReader {\n         sp_diag: sp_diag,\n-        stack: vec!(TtFrame {\n+        stack: SmallVector::one(TtFrame {\n             forest: TokenTree::Sequence(DUMMY_SP, Rc::new(tokenstream::SequenceRepetition {\n                 tts: src,\n                 // doesn't matter. This merely holds the root unzipping."}, {"sha": "169388d72b6a6b118152cb08f8adc75a0a7d7d6e", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3fd90d8aa53d73456b5df476a2bd6cc2caf473c6/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd90d8aa53d73456b5df476a2bd6cc2caf473c6/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=3fd90d8aa53d73456b5df476a2bd6cc2caf473c6", "patch": "@@ -35,6 +35,7 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(specialization)]\n \n+extern crate core;\n extern crate serialize;\n extern crate term;\n extern crate libc;"}, {"sha": "57258c76335a1a4c39bb1bcd9a84c50404f250f5", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3fd90d8aa53d73456b5df476a2bd6cc2caf473c6/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd90d8aa53d73456b5df476a2bd6cc2caf473c6/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=3fd90d8aa53d73456b5df476a2bd6cc2caf473c6", "patch": "@@ -11,6 +11,7 @@\n use self::SmallVectorRepr::*;\n use self::IntoIterRepr::*;\n \n+use core::ops;\n use std::iter::{IntoIterator, FromIterator};\n use std::mem;\n use std::slice;\n@@ -19,10 +20,12 @@ use std::vec;\n use util::move_map::MoveMap;\n \n /// A vector type optimized for cases where the size is almost always 0 or 1\n+#[derive(Clone)]\n pub struct SmallVector<T> {\n     repr: SmallVectorRepr<T>,\n }\n \n+#[derive(Clone)]\n enum SmallVectorRepr<T> {\n     Zero,\n     One(T),\n@@ -75,16 +78,11 @@ impl<T> SmallVector<T> {\n     }\n \n     pub fn as_slice(&self) -> &[T] {\n-        match self.repr {\n-            Zero => {\n-                let result: &[T] = &[];\n-                result\n-            }\n-            One(ref v) => {\n-                unsafe { slice::from_raw_parts(v, 1) }\n-            }\n-            Many(ref vs) => vs\n-        }\n+        self\n+    }\n+\n+    pub fn as_mut_slice(&mut self) -> &mut [T] {\n+        self\n     }\n \n     pub fn pop(&mut self) -> Option<T> {\n@@ -163,6 +161,38 @@ impl<T> SmallVector<T> {\n     }\n }\n \n+impl<T> ops::Deref for SmallVector<T> {\n+    type Target = [T];\n+\n+    fn deref(&self) -> &[T] {\n+        match self.repr {\n+            Zero => {\n+                let result: &[T] = &[];\n+                result\n+            }\n+            One(ref v) => {\n+                unsafe { slice::from_raw_parts(v, 1) }\n+            }\n+            Many(ref vs) => vs\n+        }\n+    }\n+}\n+\n+impl<T> ops::DerefMut for SmallVector<T> {\n+    fn deref_mut(&mut self) -> &mut [T] {\n+        match self.repr {\n+            Zero => {\n+                let result: &mut [T] = &mut [];\n+                result\n+            }\n+            One(ref mut v) => {\n+                unsafe { slice::from_raw_parts_mut(v, 1) }\n+            }\n+            Many(ref mut vs) => vs\n+        }\n+    }\n+}\n+\n impl<T> IntoIterator for SmallVector<T> {\n     type Item = T;\n     type IntoIter = IntoIter<T>;"}]}