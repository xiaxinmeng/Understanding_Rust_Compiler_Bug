{"sha": "2a20cc0b94a60447c159095676d5813dd508d894", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMjBjYzBiOTRhNjA0NDdjMTU5MDk1Njc2ZDU4MTNkZDUwOGQ4OTQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-18T14:52:07Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-18T14:52:07Z"}, "message": "Use anonymous lifetimes where possible", "tree": {"sha": "6b0750c1cfa9421d16a89ac6c7390dee29e1639d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b0750c1cfa9421d16a89ac6c7390dee29e1639d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a20cc0b94a60447c159095676d5813dd508d894", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a20cc0b94a60447c159095676d5813dd508d894", "html_url": "https://github.com/rust-lang/rust/commit/2a20cc0b94a60447c159095676d5813dd508d894", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a20cc0b94a60447c159095676d5813dd508d894/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bee110d95e4611385b821a199bc8c4ce7ee00e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bee110d95e4611385b821a199bc8c4ce7ee00e0", "html_url": "https://github.com/rust-lang/rust/commit/1bee110d95e4611385b821a199bc8c4ce7ee00e0"}], "stats": {"total": 284, "additions": 134, "deletions": 150}, "files": [{"sha": "b0fd9a1d73ac434e143d164086852b39c24d2926", "filename": "src/abi.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=2a20cc0b94a60447c159095676d5813dd508d894", "patch": "@@ -133,8 +133,8 @@ fn get_pass_mode<'tcx>(\n     }\n }\n \n-fn adjust_arg_for_abi<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+fn adjust_arg_for_abi<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     arg: CValue<'tcx>,\n ) -> EmptySinglePair<Value> {\n     match get_pass_mode(fx.tcx, arg.layout()) {\n@@ -250,7 +250,7 @@ pub fn import_function<'tcx>(\n         .unwrap()\n }\n \n-impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n+impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n     /// Instance must be monomorphized\n     pub fn get_function_ref(&mut self, inst: Instance<'tcx>) -> FuncRef {\n         let func_id = import_function(self.tcx, self.module, inst);\n@@ -337,8 +337,8 @@ impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n }\n \n #[cfg(debug_assertions)]\n-fn add_arg_comment<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+fn add_arg_comment<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     msg: &str,\n     local: mir::Local,\n     local_field: Option<usize>,\n@@ -377,8 +377,8 @@ fn add_local_header_comment(fx: &mut FunctionCx<impl Backend>) {\n     ));\n }\n \n-fn local_place<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+fn local_place<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     local: Local,\n     layout: TyLayout<'tcx>,\n     is_ssa: bool,\n@@ -432,8 +432,8 @@ fn local_place<'a, 'tcx: 'a>(\n     fx.local_map[&local]\n }\n \n-fn cvalue_for_param<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+fn cvalue_for_param<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     start_ebb: Ebb,\n     local: mir::Local,\n     local_field: Option<usize>,\n@@ -473,8 +473,8 @@ fn cvalue_for_param<'a, 'tcx: 'a>(\n     }\n }\n \n-pub fn codegen_fn_prelude<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn codegen_fn_prelude(\n+    fx: &mut FunctionCx<'_, '_, impl Backend>,\n     start_ebb: Ebb,\n ) {\n     let ssa_analyzed = crate::analyze::analyze(fx);\n@@ -622,8 +622,8 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(\n         .jump(*fx.ebb_map.get(&START_BLOCK).unwrap(), &[]);\n }\n \n-pub fn codegen_terminator_call<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn codegen_terminator_call<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     func: &Operand<'tcx>,\n     args: &[Operand<'tcx>],\n     destination: &Option<(Place<'tcx>, BasicBlock)>,\n@@ -698,8 +698,8 @@ pub fn codegen_terminator_call<'a, 'tcx: 'a>(\n     }\n }\n \n-fn codegen_call_inner<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+fn codegen_call_inner<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     func: Option<&Operand<'tcx>>,\n     fn_ty: Ty<'tcx>,\n     args: Vec<CValue<'tcx>>,\n@@ -827,8 +827,8 @@ fn codegen_call_inner<'a, 'tcx: 'a>(\n     }\n }\n \n-pub fn codegen_drop<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn codegen_drop<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     drop_place: CPlace<'tcx>,\n ) {\n     let ty = drop_place.layout().ty;"}, {"sha": "f4624221ca88cf9dbb645886acac1ef4780c29b9", "filename": "src/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fanalyze.rs?ref=2a20cc0b94a60447c159095676d5813dd508d894", "patch": "@@ -8,7 +8,7 @@ bitflags::bitflags! {\n     }\n }\n \n-pub fn analyze<'a, 'tcx: 'a>(fx: &FunctionCx<'a, 'tcx, impl Backend>) -> HashMap<Local, Flags> {\n+pub fn analyze(fx: &FunctionCx<'_, '_, impl Backend>) -> HashMap<Local, Flags> {\n     let mut flag_map = HashMap::new();\n \n     for local in fx.mir.local_decls.indices() {"}, {"sha": "54db738031feb65ea7bd5f8745ccb18cb2997c8f", "filename": "src/base.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=2a20cc0b94a60447c159095676d5813dd508d894", "patch": "@@ -2,7 +2,7 @@ use rustc::ty::adjustment::PointerCast;\n \n use crate::prelude::*;\n \n-pub fn trans_fn<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n+pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     cx: &mut crate::CodegenCx<'clif, 'tcx, B>,\n     instance: Instance<'tcx>,\n     linkage: Linkage,\n@@ -48,7 +48,7 @@ pub fn trans_fn<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n         local_map: HashMap::new(),\n \n         clif_comments,\n-        constants: &mut cx.ccx,\n+        constants_cx: &mut cx.constants_cx,\n         caches: &mut cx.caches,\n         source_info_set: indexmap::IndexSet::new(),\n     };\n@@ -110,7 +110,7 @@ fn verify_func(tcx: TyCtxt, writer: &crate::pretty_clif::CommentWriter, func: &F\n     }\n }\n \n-fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>) {\n+fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n     for (bb, bb_data) in fx.mir.basic_blocks().iter_enumerated() {\n         if bb_data.is_cleanup {\n             // Unwinding after panicking is not supported\n@@ -222,8 +222,8 @@ fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>)\n     fx.bcx.finalize();\n }\n \n-fn trans_stmt<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+fn trans_stmt<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     cur_ebb: Ebb,\n     stmt: &Statement<'tcx>,\n ) {\n@@ -343,7 +343,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     let operand = trans_operand(fx, operand);\n                     let from_ty = operand.layout().ty;\n \n-                    fn is_fat_ptr<'a, 'tcx: 'a>(fx: &FunctionCx<'a, 'tcx, impl Backend>, ty: Ty<'tcx>) -> bool {\n+                    fn is_fat_ptr<'tcx>(fx: &FunctionCx<'_, 'tcx, impl Backend>, ty: Ty<'tcx>) -> bool {\n                         ty\n                             .builtin_deref(true)\n                             .map(|ty::TypeAndMut {ty: pointee_ty, mutbl: _ }| fx.layout_of(pointee_ty).is_unsized())\n@@ -533,8 +533,8 @@ fn trans_stmt<'a, 'tcx: 'a>(\n     }\n }\n \n-fn codegen_array_len<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+fn codegen_array_len<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     place: CPlace<'tcx>,\n ) -> Value {\n     match place.layout().ty.sty {\n@@ -551,8 +551,8 @@ fn codegen_array_len<'a, 'tcx: 'a>(\n     }\n }\n \n-pub fn trans_place<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn trans_place<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     place: &Place<'tcx>,\n ) -> CPlace<'tcx> {\n     let base = match &place.base {\n@@ -570,8 +570,8 @@ pub fn trans_place<'a, 'tcx: 'a>(\n     trans_place_projection(fx, base, &place.projection)\n }\n \n-pub fn trans_place_projection<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn trans_place_projection<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     base: CPlace<'tcx>,\n     projection: &Option<Box<Projection<'tcx>>>,\n ) -> CPlace<'tcx> {\n@@ -635,8 +635,8 @@ pub fn trans_place_projection<'a, 'tcx: 'a>(\n     }\n }\n \n-pub fn trans_operand<'a, 'tcx>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn trans_operand<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     operand: &Operand<'tcx>,\n ) -> CValue<'tcx> {\n     match operand {"}, {"sha": "7e411438875b970cdd66b7cb3be67c01a0d9e375", "filename": "src/cast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcast.rs?ref=2a20cc0b94a60447c159095676d5813dd508d894", "patch": "@@ -1,7 +1,7 @@\n use crate::prelude::*;\n \n-pub fn clif_intcast<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn clif_intcast(\n+    fx: &mut FunctionCx<'_, '_, impl Backend>,\n     val: Value,\n     to: Type,\n     signed: bool,\n@@ -73,7 +73,7 @@ pub fn clif_int_or_float_cast(\n     } else if from_ty.is_float() && to_ty.is_int() {\n         // float -> int-like\n         if to_ty == types::I8 || to_ty == types::I16 {\n-            // FIXME implement fcbt_to_*int_sat.i8/i16\n+            // FIXME implement fcvt_to_*int_sat.i8/i16\n             let val = if to_signed {\n                 fx.bcx.ins().fcvt_to_sint_sat(types::I32, from)\n             } else {"}, {"sha": "d8632e2f4aa94d0ab15209a35dbcf6a1e36adb2e", "filename": "src/codegen_i128.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodegen_i128.rs?ref=2a20cc0b94a60447c159095676d5813dd508d894", "patch": "@@ -2,8 +2,8 @@\n \n use crate::prelude::*;\n \n-pub fn maybe_codegen<'a, 'tcx>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn maybe_codegen<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     bin_op: BinOp,\n     checked: bool,\n     lhs: CValue<'tcx>,"}, {"sha": "eb6f204a8d284438d6af228b96a228acb663dcdb", "filename": "src/common.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=2a20cc0b94a60447c159095676d5813dd508d894", "patch": "@@ -1,7 +1,6 @@\n use rustc_target::spec::{HasTargetSpec, Target};\n \n use cranelift::codegen::ir::{Opcode, InstructionData, ValueDef};\n-use cranelift_module::Module;\n \n use crate::prelude::*;\n \n@@ -73,8 +72,8 @@ pub fn codegen_select(bcx: &mut FunctionBuilder, cond: Value, lhs: Value, rhs: V\n     }\n }\n \n-pub fn codegen_icmp<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+pub fn codegen_icmp(\n+    fx: &mut FunctionCx<'_, '_, impl Backend>,\n     intcc: IntCC,\n     lhs: Value,\n     rhs: Value,\n@@ -118,8 +117,8 @@ pub fn codegen_icmp<'tcx>(\n     }\n }\n \n-pub fn codegen_icmp_imm<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+pub fn codegen_icmp_imm(\n+    fx: &mut FunctionCx<'_, '_, impl Backend>,\n     intcc: IntCC,\n     lhs: Value,\n     rhs: i128,\n@@ -245,26 +244,26 @@ pub fn type_sign(ty: Ty<'_>) -> bool {\n     }\n }\n \n-pub struct FunctionCx<'a, 'tcx: 'a, B: Backend> {\n+pub struct FunctionCx<'clif, 'tcx, B: Backend + 'static> {\n     // FIXME use a reference to `CodegenCx` instead of `tcx`, `module` and `constants` and `caches`\n     pub tcx: TyCtxt<'tcx>,\n-    pub module: &'a mut Module<B>,\n+    pub module: &'clif mut Module<B>,\n     pub pointer_type: Type, // Cached from module\n \n     pub instance: Instance<'tcx>,\n     pub mir: &'tcx Body<'tcx>,\n \n-    pub bcx: FunctionBuilder<'a>,\n+    pub bcx: FunctionBuilder<'clif>,\n     pub ebb_map: HashMap<BasicBlock, Ebb>,\n     pub local_map: HashMap<Local, CPlace<'tcx>>,\n \n     pub clif_comments: crate::pretty_clif::CommentWriter,\n-    pub constants: &'a mut crate::constant::ConstantCx,\n-    pub caches: &'a mut Caches<'tcx>,\n+    pub constants_cx: &'clif mut crate::constant::ConstantCx,\n+    pub caches: &'clif mut Caches<'tcx>,\n     pub source_info_set: indexmap::IndexSet<SourceInfo>,\n }\n \n-impl<'a, 'tcx: 'a, B: Backend> LayoutOf for FunctionCx<'a, 'tcx, B> {\n+impl<'tcx, B: Backend> LayoutOf for FunctionCx<'_, 'tcx, B> {\n     type Ty = Ty<'tcx>;\n     type TyLayout = TyLayout<'tcx>;\n \n@@ -279,39 +278,39 @@ impl<'a, 'tcx: 'a, B: Backend> LayoutOf for FunctionCx<'a, 'tcx, B> {\n     }\n }\n \n-impl<'a, 'tcx, B: Backend + 'a> layout::HasTyCtxt<'tcx> for FunctionCx<'a, 'tcx, B> {\n+impl<'tcx, B: Backend + 'static> layout::HasTyCtxt<'tcx> for FunctionCx<'_, 'tcx, B> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n }\n \n-impl<'a, 'tcx, B: Backend + 'a> layout::HasDataLayout for FunctionCx<'a, 'tcx, B> {\n+impl<'tcx, B: Backend + 'static> layout::HasDataLayout for FunctionCx<'_, 'tcx, B> {\n     fn data_layout(&self) -> &layout::TargetDataLayout {\n         &self.tcx.data_layout\n     }\n }\n \n-impl<'a, 'tcx, B: Backend + 'a> layout::HasParamEnv<'tcx> for FunctionCx<'a, 'tcx, B> {\n+impl<'tcx, B: Backend + 'static> layout::HasParamEnv<'tcx> for FunctionCx<'_, 'tcx, B> {\n     fn param_env(&self) -> ParamEnv<'tcx> {\n         ParamEnv::reveal_all()\n     }\n }\n \n-impl<'a, 'tcx, B: Backend + 'a> HasTargetSpec for FunctionCx<'a, 'tcx, B> {\n+impl<'tcx, B: Backend + 'static> HasTargetSpec for FunctionCx<'_, 'tcx, B> {\n     fn target_spec(&self) -> &Target {\n         &self.tcx.sess.target.target\n     }\n }\n \n-impl<'a, 'tcx, B: Backend> BackendTypes for FunctionCx<'a, 'tcx, B> {\n+impl<'tcx, B: Backend> BackendTypes for FunctionCx<'_, 'tcx, B> {\n     type Value = Value;\n     type BasicBlock = Ebb;\n     type Type = Type;\n     type Funclet = !;\n     type DIScope = !;\n }\n \n-impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n+impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n     pub fn monomorphize<T>(&self, value: &T) -> T\n     where\n         T: TypeFoldable<'tcx>,"}, {"sha": "465ca06a2b61251ad3b2514f56f5b74dd58f54ea", "filename": "src/constant.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=2a20cc0b94a60447c159095676d5813dd508d894", "patch": "@@ -38,12 +38,12 @@ impl ConstantCx {\n     }\n }\n \n-pub fn codegen_static(ccx: &mut ConstantCx, def_id: DefId) {\n-    ccx.todo.insert(TodoItem::Static(def_id));\n+pub fn codegen_static(constants_cx: &mut ConstantCx, def_id: DefId) {\n+    constants_cx.todo.insert(TodoItem::Static(def_id));\n }\n \n-pub fn codegen_static_ref<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn codegen_static_ref<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     def_id: DefId,\n     ty: Ty<'tcx>,\n ) -> CPlace<'tcx> {\n@@ -52,8 +52,8 @@ pub fn codegen_static_ref<'a, 'tcx: 'a>(\n     cplace_for_dataid(fx, ty, data_id)\n }\n \n-pub fn trans_promoted<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn trans_promoted<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     promoted: Promoted,\n     dest_ty: Ty<'tcx>,\n ) -> CPlace<'tcx> {\n@@ -79,16 +79,16 @@ pub fn trans_promoted<'a, 'tcx: 'a>(\n     }\n }\n \n-pub fn trans_constant<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn trans_constant<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     constant: &Constant<'tcx>,\n ) -> CValue<'tcx> {\n     let const_ = force_eval_const(fx, &constant.literal);\n     trans_const_value(fx, const_)\n }\n \n-pub fn force_eval_const<'a, 'tcx: 'a>(\n-    fx: &FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn force_eval_const<'tcx>(\n+    fx: &FunctionCx<'_, 'tcx, impl Backend>,\n     const_: &'tcx Const,\n ) -> &'tcx Const<'tcx> {\n     match const_.val {\n@@ -106,8 +106,8 @@ pub fn force_eval_const<'a, 'tcx: 'a>(\n     }\n }\n \n-pub fn trans_const_value<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn trans_const_value<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     const_: &'tcx Const<'tcx>,\n ) -> CValue<'tcx> {\n     let ty = fx.monomorphize(&const_.ty);\n@@ -131,8 +131,8 @@ pub fn trans_const_value<'a, 'tcx: 'a>(\n     }\n }\n \n-fn trans_const_place<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+fn trans_const_place<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     const_: &'tcx Const<'tcx>,\n ) -> CPlace<'tcx> {\n     // Adapted from https://github.com/rust-lang/rust/pull/53671/files#diff-e0b58bb6712edaa8595ad7237542c958L551\n@@ -168,7 +168,7 @@ fn trans_const_place<'a, 'tcx: 'a>(\n \n     //println!(\"const value: {:?} allocation: {:?}\", value, alloc);\n     let alloc_id = fx.tcx.alloc_map.lock().create_memory_alloc(alloc);\n-    fx.constants.todo.insert(TodoItem::Alloc(alloc_id));\n+    fx.constants_cx.todo.insert(TodoItem::Alloc(alloc_id));\n     let data_id = data_id_for_alloc_id(fx.module, alloc_id, alloc.align);\n     cplace_for_dataid(fx, const_.ty, data_id)\n }\n@@ -222,8 +222,8 @@ fn data_id_for_static(\n     data_id\n }\n \n-fn cplace_for_dataid<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+fn cplace_for_dataid<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     ty: Ty<'tcx>,\n     data_id: DataId,\n ) -> CPlace<'tcx> {"}, {"sha": "74cc58a0c431b4f45f7fb19de99232a5b805ed6b", "filename": "src/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=2a20cc0b94a60447c159095676d5813dd508d894", "patch": "@@ -93,7 +93,7 @@ pub struct DebugContext<'tcx> {\n }\n \n impl<'tcx> DebugContext<'tcx> {\n-    pub fn new(tcx: TyCtxt, address_size: u8) -> Self {\n+    pub fn new(tcx: TyCtxt<'tcx>, address_size: u8) -> Self {\n         let encoding = Encoding {\n             format: Format::Dwarf32,\n             // TODO: this should be configurable"}, {"sha": "0662762e220cdc5e639e51a602e145afd3d67c8a", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=2a20cc0b94a60447c159095676d5813dd508d894", "patch": "@@ -344,7 +344,7 @@ fn trans_mono_item<'clif, 'tcx, B: Backend + 'static>(\n             crate::base::trans_fn(cx, inst, linkage);\n         }\n         MonoItem::Static(def_id) => {\n-            crate::constant::codegen_static(&mut cx.ccx, def_id);\n+            crate::constant::codegen_static(&mut cx.constants_cx, def_id);\n         }\n         MonoItem::GlobalAsm(node_id) => tcx\n             .sess"}, {"sha": "74d5e95091f433efeb3a67f8152b5eb2026cba7c", "filename": "src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=2a20cc0b94a60447c159095676d5813dd508d894", "patch": "@@ -275,8 +275,8 @@ macro_rules! simd_flt_binop {\n     }\n }\n \n-pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn codegen_intrinsic_call<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     def_id: DefId,\n     substs: SubstsRef<'tcx>,\n     args: &[mir::Operand<'tcx>],"}, {"sha": "21c7f3af2267f81b6be9e59e5cf0224b250d28a6", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a20cc0b94a60447c159095676d5813dd508d894/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20cc0b94a60447c159095676d5813dd508d894/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2a20cc0b94a60447c159095676d5813dd508d894", "patch": "@@ -132,7 +132,7 @@ impl Default for Caches<'_> {\n pub struct CodegenCx<'clif, 'tcx, B: Backend + 'static> {\n     tcx: TyCtxt<'tcx>,\n     module: &'clif mut Module<B>,\n-    ccx: ConstantCx,\n+    constants_cx: ConstantCx,\n     caches: Caches<'tcx>,\n     debug_context: Option<&'clif mut DebugContext<'tcx>>,\n }\n@@ -146,14 +146,14 @@ impl<'clif, 'tcx, B: Backend + 'static> CodegenCx<'clif, 'tcx, B> {\n         CodegenCx {\n             tcx,\n             module,\n-            ccx: ConstantCx::default(),\n+            constants_cx: ConstantCx::default(),\n             caches: Caches::default(),\n             debug_context,\n         }\n     }\n \n     fn finalize(self) {\n-        self.ccx.finalize(self.tcx, self.module);\n+        self.constants_cx.finalize(self.tcx, self.module);\n     }\n }\n "}, {"sha": "ef5c9092c7018b65c40c124a297aa8beb7fe15f3", "filename": "src/llvm_intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fllvm_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fllvm_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm_intrinsics.rs?ref=2a20cc0b94a60447c159095676d5813dd508d894", "patch": "@@ -3,8 +3,8 @@ use crate::intrinsics::*;\n \n use rustc::ty::subst::SubstsRef;\n \n-pub fn codegen_llvm_intrinsic_call<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn codegen_llvm_intrinsic_call<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     intrinsic: &str,\n     substs: SubstsRef<'tcx>,\n     args: &[mir::Operand<'tcx>],"}, {"sha": "ef1ab328be505955861225d62780ac9d265ed90d", "filename": "src/num.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=2a20cc0b94a60447c159095676d5813dd508d894", "patch": "@@ -75,8 +75,8 @@ pub fn codegen_binop<'tcx>(\n     }\n }\n \n-pub fn trans_bool_binop<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn trans_bool_binop<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,\n     in_rhs: CValue<'tcx>,\n@@ -96,8 +96,8 @@ pub fn trans_bool_binop<'a, 'tcx: 'a>(\n     CValue::by_val(res, fx.layout_of(fx.tcx.types.bool))\n }\n \n-pub fn trans_int_binop<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn trans_int_binop<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,\n     in_rhs: CValue<'tcx>,\n@@ -150,8 +150,8 @@ pub fn trans_int_binop<'a, 'tcx: 'a>(\n     CValue::by_val(val, in_lhs.layout())\n }\n \n-pub fn trans_checked_int_binop<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn trans_checked_int_binop<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,\n     in_rhs: CValue<'tcx>,\n@@ -246,8 +246,8 @@ pub fn trans_checked_int_binop<'a, 'tcx: 'a>(\n     out_place.to_cvalue(fx)\n }\n \n-pub fn trans_float_binop<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn trans_float_binop<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,\n     in_rhs: CValue<'tcx>,\n@@ -291,8 +291,8 @@ pub fn trans_float_binop<'a, 'tcx: 'a>(\n     CValue::by_val(res, in_lhs.layout())\n }\n \n-pub fn trans_ptr_binop<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn trans_ptr_binop<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     bin_op: BinOp,\n     in_lhs: CValue<'tcx>,\n     in_rhs: CValue<'tcx>,"}, {"sha": "597789b1f0ba2194b92f8fb78e50839978db9df1", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=2a20cc0b94a60447c159095676d5813dd508d894", "patch": "@@ -157,7 +157,7 @@ impl FuncWriter for &'_ CommentWriter {\n }\n \n #[cfg(debug_assertions)]\n-impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n+impl<'a, 'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n     pub fn add_global_comment<S: Into<String>>(&mut self, comment: S) {\n         self.clif_comments.global_comments.push(comment.into());\n     }\n@@ -239,7 +239,7 @@ pub fn write_clif_file<'tcx>(\n     }\n }\n \n-impl<'a, 'tcx: 'a, B: Backend + 'a> fmt::Debug for FunctionCx<'a, 'tcx, B> {\n+impl<'a, 'tcx, B: Backend + 'static> fmt::Debug for FunctionCx<'_, 'tcx, B> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         writeln!(f, \"{:?}\", self.instance.substs)?;\n         writeln!(f, \"{:?}\", self.local_map)?;"}, {"sha": "c692f0c88aa5f5e1a6fadd75daaa6cf350db32f2", "filename": "src/unsize.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a20cc0b94a60447c159095676d5813dd508d894/src%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20cc0b94a60447c159095676d5813dd508d894/src%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsize.rs?ref=2a20cc0b94a60447c159095676d5813dd508d894", "patch": "@@ -8,8 +8,8 @@ use crate::prelude::*;\n /// The `old_info` argument is a bit funny. It is intended for use\n /// in an upcast, where the new vtable for an object will be derived\n /// from the old one.\n-pub fn unsized_info<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn unsized_info<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     source: Ty<'tcx>,\n     target: Ty<'tcx>,\n     old_info: Option<Value>,\n@@ -40,8 +40,8 @@ pub fn unsized_info<'a, 'tcx: 'a>(\n }\n \n /// Coerce `src` to `dst_ty`. `src_ty` must be a thin pointer.\n-pub fn unsize_thin_ptr<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn unsize_thin_ptr<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     src: Value,\n     src_ty: Ty<'tcx>,\n     dst_ty: Ty<'tcx>,\n@@ -86,8 +86,8 @@ pub fn unsize_thin_ptr<'a, 'tcx: 'a>(\n \n /// Coerce `src`, which is a reference to a value of type `src_ty`,\n /// to a value of type `dst_ty` and store the result in `dst`\n-pub fn coerce_unsized_into<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn coerce_unsized_into<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     src: CValue<'tcx>,\n     dst: CPlace<'tcx>,\n ) {\n@@ -139,8 +139,8 @@ pub fn coerce_unsized_into<'a, 'tcx: 'a>(\n \n // Adapted from https://github.com/rust-lang/rust/blob/2a663555ddf36f6b041445894a8c175cd1bc718c/src/librustc_codegen_ssa/glue.rs\n \n-pub fn size_and_align_of_dst<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn size_and_align_of_dst<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     ty: Ty<'tcx>,\n     info: Value,\n ) -> (Value, Value) {"}, {"sha": "f018ed0a2babea842d07837e544d26b8b4dbf7a5", "filename": "src/value_and_place.rs", "status": "modified", "additions": 23, "deletions": 38, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=2a20cc0b94a60447c159095676d5813dd508d894", "patch": "@@ -1,7 +1,7 @@\n use crate::prelude::*;\n \n-fn codegen_field<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+fn codegen_field<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     base: Value,\n     layout: TyLayout<'tcx>,\n     field: mir::Field,\n@@ -51,10 +51,7 @@ impl<'tcx> CValue<'tcx> {\n         self.1\n     }\n \n-    pub fn force_stack<'a>(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> Value\n-    where\n-        'tcx: 'a,\n-    {\n+    pub fn force_stack<'a>(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> Value {\n         let layout = self.1;\n         match self.0 {\n             CValueInner::ByRef(value) => value,\n@@ -67,10 +64,7 @@ impl<'tcx> CValue<'tcx> {\n     }\n \n     /// Load a value with layout.abi of scalar\n-    pub fn load_scalar<'a>(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> Value\n-    where\n-        'tcx: 'a,\n-    {\n+    pub fn load_scalar<'a>(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> Value {\n         let layout = self.1;\n         match self.0 {\n             CValueInner::ByRef(addr) => {\n@@ -87,10 +81,7 @@ impl<'tcx> CValue<'tcx> {\n     }\n \n     /// Load a value pair with layout.abi of scalar pair\n-    pub fn load_scalar_pair<'a>(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> (Value, Value)\n-    where\n-        'tcx: 'a,\n-    {\n+    pub fn load_scalar_pair<'a>(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> (Value, Value) {\n         let layout = self.1;\n         match self.0 {\n             CValueInner::ByRef(addr) => {\n@@ -117,12 +108,9 @@ impl<'tcx> CValue<'tcx> {\n \n     pub fn value_field<'a>(\n         self,\n-        fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n         field: mir::Field,\n-    ) -> CValue<'tcx>\n-    where\n-        'tcx: 'a,\n-    {\n+    ) -> CValue<'tcx> {\n         let layout = self.1;\n         let base = match self.0 {\n             CValueInner::ByRef(addr) => addr,\n@@ -133,19 +121,16 @@ impl<'tcx> CValue<'tcx> {\n         CValue::by_ref(field_ptr, field_layout)\n     }\n \n-    pub fn unsize_value<'a>(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>, dest: CPlace<'tcx>) {\n+    pub fn unsize_value<'a>(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>, dest: CPlace<'tcx>) {\n         crate::unsize::coerce_unsized_into(fx, self, dest);\n     }\n \n     /// If `ty` is signed, `const_val` must already be sign extended.\n     pub fn const_val<'a>(\n-        fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n         ty: Ty<'tcx>,\n         const_val: u128,\n-    ) -> CValue<'tcx>\n-    where\n-        'tcx: 'a,\n-    {\n+    ) -> CValue<'tcx> {\n         let clif_ty = fx.clif_type(ty).unwrap();\n         let layout = fx.layout_of(ty);\n \n@@ -185,7 +170,7 @@ pub enum CPlace<'tcx> {\n     NoPlace(TyLayout<'tcx>),\n }\n \n-impl<'a, 'tcx: 'a> CPlace<'tcx> {\n+impl<'tcx> CPlace<'tcx> {\n     pub fn layout(&self) -> TyLayout<'tcx> {\n         match *self {\n             CPlace::Var(_, layout)\n@@ -200,7 +185,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n     }\n \n     pub fn new_stack_slot(\n-        fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n         ty: Ty<'tcx>,\n     ) -> CPlace<'tcx> {\n         let layout = fx.layout_of(ty);\n@@ -218,7 +203,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n     }\n \n     pub fn new_var(\n-        fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n         local: Local,\n         layout: TyLayout<'tcx>,\n     ) -> CPlace<'tcx> {\n@@ -235,7 +220,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         CPlace::Addr(addr, Some(extra), layout)\n     }\n \n-    pub fn to_cvalue(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> CValue<'tcx> {\n+    pub fn to_cvalue(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> CValue<'tcx> {\n         match self {\n             CPlace::Var(var, layout) => CValue::by_val(fx.bcx.use_var(mir_var(var)), layout),\n             CPlace::Addr(addr, extra, layout) => {\n@@ -255,7 +240,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         }\n     }\n \n-    pub fn to_addr(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> Value {\n+    pub fn to_addr(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> Value {\n         match self.to_addr_maybe_unsized(fx) {\n             (addr, None) => addr,\n             (_, Some(_)) => bug!(\"Expected sized cplace, found {:?}\", self),\n@@ -264,7 +249,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n \n     pub fn to_addr_maybe_unsized(\n         self,\n-        fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     ) -> (Value, Option<Value>) {\n         match self {\n             CPlace::Addr(addr, extra, _layout) => (addr, extra),\n@@ -277,13 +262,13 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         }\n     }\n \n-    pub fn write_cvalue(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>, from: CValue<'tcx>) {\n+    pub fn write_cvalue(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>, from: CValue<'tcx>) {\n         use rustc::hir::Mutability::*;\n \n         let from_ty = from.layout().ty;\n         let to_ty = self.layout().ty;\n \n-        fn assert_assignable<'a, 'tcx: 'a>(fx: &FunctionCx<'a, 'tcx, impl Backend>, from_ty: Ty<'tcx>, to_ty: Ty<'tcx>) {\n+        fn assert_assignable<'tcx>(fx: &FunctionCx<'_, 'tcx, impl Backend>, from_ty: Ty<'tcx>, to_ty: Ty<'tcx>) {\n             match (&from_ty.sty, &to_ty.sty) {\n                 (ty::Ref(_, t, MutImmutable), ty::Ref(_, u, MutImmutable))\n                 | (ty::Ref(_, t, MutMutable), ty::Ref(_, u, MutImmutable))\n@@ -403,7 +388,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n \n     pub fn place_field(\n         self,\n-        fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n         field: mir::Field,\n     ) -> CPlace<'tcx> {\n         let layout = self.layout();\n@@ -421,7 +406,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n \n     pub fn place_index(\n         self,\n-        fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n         index: Value,\n     ) -> CPlace<'tcx> {\n         let (elem_layout, addr) = match self.layout().ty.sty {\n@@ -438,7 +423,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         CPlace::Addr(fx.bcx.ins().iadd(addr, offset), None, elem_layout)\n     }\n \n-    pub fn place_deref(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> CPlace<'tcx> {\n+    pub fn place_deref(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> CPlace<'tcx> {\n         let inner_layout = fx.layout_of(self.layout().ty.builtin_deref(true).unwrap().ty);\n         if !inner_layout.is_unsized() {\n             CPlace::Addr(self.to_cvalue(fx).load_scalar(fx), None, inner_layout)\n@@ -448,7 +433,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         }\n     }\n \n-    pub fn write_place_ref(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>, dest: CPlace<'tcx>) {\n+    pub fn write_place_ref(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>, dest: CPlace<'tcx>) {\n         if !self.layout().is_unsized() {\n             let ptr = CValue::by_val(self.to_addr(fx), dest.layout());\n             dest.write_cvalue(fx, ptr);\n@@ -474,7 +459,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n \n     pub fn downcast_variant(\n         self,\n-        fx: &FunctionCx<'a, 'tcx, impl Backend>,\n+        fx: &FunctionCx<'_, 'tcx, impl Backend>,\n         variant: VariantIdx,\n     ) -> Self {\n         let layout = self.layout().for_variant(fx, variant);"}, {"sha": "fc601130710bfd2b6db58a40a7cae3c1bd938ec8", "filename": "src/vtable.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20cc0b94a60447c159095676d5813dd508d894/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=2a20cc0b94a60447c159095676d5813dd508d894", "patch": "@@ -6,8 +6,8 @@ const DROP_FN_INDEX: usize = 0;\n const SIZE_INDEX: usize = 1;\n const ALIGN_INDEX: usize = 2;\n \n-pub fn drop_fn_of_obj<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn drop_fn_of_obj(\n+    fx: &mut FunctionCx<'_, '_, impl Backend>,\n     vtable: Value,\n ) -> Value {\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes() as usize;\n@@ -19,8 +19,8 @@ pub fn drop_fn_of_obj<'a, 'tcx: 'a>(\n     )\n }\n \n-pub fn size_of_obj<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn size_of_obj(\n+    fx: &mut FunctionCx<'_, '_, impl Backend>,\n     vtable: Value,\n ) -> Value {\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes() as usize;\n@@ -32,8 +32,8 @@ pub fn size_of_obj<'a, 'tcx: 'a>(\n     )\n }\n \n-pub fn min_align_of_obj<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn min_align_of_obj(\n+    fx: &mut FunctionCx<'_, '_, impl Backend>,\n     vtable: Value,\n ) -> Value {\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes() as usize;\n@@ -45,8 +45,8 @@ pub fn min_align_of_obj<'a, 'tcx: 'a>(\n     )\n }\n \n-pub fn get_ptr_and_method_ref<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn get_ptr_and_method_ref<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     arg: CValue<'tcx>,\n     idx: usize,\n ) -> (Value, Value) {\n@@ -61,8 +61,8 @@ pub fn get_ptr_and_method_ref<'a, 'tcx: 'a>(\n     (ptr, func_ref)\n }\n \n-pub fn get_vtable<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+pub fn get_vtable<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     ty: Ty<'tcx>,\n     trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n ) -> Value {\n@@ -78,8 +78,8 @@ pub fn get_vtable<'a, 'tcx: 'a>(\n     fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n }\n \n-fn build_vtable<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+fn build_vtable<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     ty: Ty<'tcx>,\n     trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n ) -> DataId {"}]}