{"sha": "f2a2e298bafd113fc277ce6fc53df340f55c3cd0", "node_id": "C_kwDOAAsO6NoAKGYyYTJlMjk4YmFmZDExM2ZjMjc3Y2U2ZmM1M2RmMzQwZjU1YzNjZDA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-09T10:21:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-09T10:21:59Z"}, "message": "Rollup merge of #107835 - tshepang:fmt, r=WaffleLapkin\n\nuse idiomatic formatting\n\nAlso, remove needless `else`", "tree": {"sha": "3c13a999562eee41ed85e413270c4e7f6a78c8ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c13a999562eee41ed85e413270c4e7f6a78c8ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2a2e298bafd113fc277ce6fc53df340f55c3cd0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj5MlHCRBK7hj4Ov3rIwAA7F8IAHP+NlJ0bxfoWiWQFw1i9mKg\n/C/5yE04lzTJR5ed3dDcbO1Vz/wJQfdfEHZVCB3Q4x8Unnm+dc8en7uuC/GfsuO5\nZnGxgmPnIq76lcXMuNeRKJ8WHvzAYUU64zY+jobCT45Ola5vHyeAnKC4kv7Her1x\n45/YlZ+HG48GGyW47hHCIRM3w5GyQeOPiFwda5FALJxYDX26BviWM9i7JU61hhQB\nukkOmbVt4gd1WqLHSeD17H0uSlYXhlG3vcVdMXUVYgqOvmLVRdNPvAGDuvEqJfMf\nfAkXhCaWo1FujAuqYNPjd770rR6Vhv61LJoI7LD9kQNZlc6edDUkMAGoJZRpA64=\n=Tprf\n-----END PGP SIGNATURE-----\n", "payload": "tree 3c13a999562eee41ed85e413270c4e7f6a78c8ef\nparent a8df4b15302ebb452369797439470b135d6736d2\nparent b651679d90bf3ed6f22c4fed53d330cf416eaf09\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675938119 +0100\ncommitter GitHub <noreply@github.com> 1675938119 +0100\n\nRollup merge of #107835 - tshepang:fmt, r=WaffleLapkin\n\nuse idiomatic formatting\n\nAlso, remove needless `else`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2a2e298bafd113fc277ce6fc53df340f55c3cd0", "html_url": "https://github.com/rust-lang/rust/commit/f2a2e298bafd113fc277ce6fc53df340f55c3cd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2a2e298bafd113fc277ce6fc53df340f55c3cd0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8df4b15302ebb452369797439470b135d6736d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8df4b15302ebb452369797439470b135d6736d2", "html_url": "https://github.com/rust-lang/rust/commit/a8df4b15302ebb452369797439470b135d6736d2"}, {"sha": "b651679d90bf3ed6f22c4fed53d330cf416eaf09", "url": "https://api.github.com/repos/rust-lang/rust/commits/b651679d90bf3ed6f22c4fed53d330cf416eaf09", "html_url": "https://github.com/rust-lang/rust/commit/b651679d90bf3ed6f22c4fed53d330cf416eaf09"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "b220a87bc658abe171e2f7cce84d9b1813710186", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f2a2e298bafd113fc277ce6fc53df340f55c3cd0/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2a2e298bafd113fc277ce6fc53df340f55c3cd0/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=f2a2e298bafd113fc277ce6fc53df340f55c3cd0", "patch": "@@ -802,18 +802,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut walk = ty.walk();\n         while let Some(arg) = walk.next() {\n             if arg == param_to_point_at {\n-            return true;\n-        } else if let ty::GenericArgKind::Type(ty) = arg.unpack()\n-            && let ty::Alias(ty::Projection, ..) = ty.kind()\n-        {\n-            // This logic may seem a bit strange, but typically when\n-            // we have a projection type in a function signature, the\n-            // argument that's being passed into that signature is\n-            // not actually constraining that projection's substs in\n-            // a meaningful way. So we skip it, and see improvements\n-            // in some UI tests.\n-            walk.skip_current_subtree();\n-        }\n+                return true;\n+            }\n+            if let ty::GenericArgKind::Type(ty) = arg.unpack()\n+                && let ty::Alias(ty::Projection, ..) = ty.kind()\n+            {\n+                // This logic may seem a bit strange, but typically when\n+                // we have a projection type in a function signature, the\n+                // argument that's being passed into that signature is\n+                // not actually constraining that projection's substs in\n+                // a meaningful way. So we skip it, and see improvements\n+                // in some UI tests.\n+                walk.skip_current_subtree();\n+            }\n         }\n         false\n     }"}]}