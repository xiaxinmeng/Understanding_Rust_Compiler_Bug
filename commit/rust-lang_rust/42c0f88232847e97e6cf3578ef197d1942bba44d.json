{"sha": "42c0f88232847e97e6cf3578ef197d1942bba44d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYzBmODgyMzI4NDdlOTdlNmNmMzU3OGVmMTk3ZDE5NDJiYmE0NGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-23T00:15:31Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-23T00:15:31Z"}, "message": "core::rt: Add unwinding to newsched tasks", "tree": {"sha": "6167cb170f891dad4674e2c186f785d6a0160b5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6167cb170f891dad4674e2c186f785d6a0160b5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42c0f88232847e97e6cf3578ef197d1942bba44d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42c0f88232847e97e6cf3578ef197d1942bba44d", "html_url": "https://github.com/rust-lang/rust/commit/42c0f88232847e97e6cf3578ef197d1942bba44d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42c0f88232847e97e6cf3578ef197d1942bba44d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fbb0949a53a6ac51c6d9b187ef4c464e52ae536", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fbb0949a53a6ac51c6d9b187ef4c464e52ae536", "html_url": "https://github.com/rust-lang/rust/commit/5fbb0949a53a6ac51c6d9b187ef4c464e52ae536"}], "stats": {"total": 210, "additions": 190, "deletions": 20}, "files": [{"sha": "131743305bccee4322bcdb37afbdfcefa0b68b35", "filename": "src/libcore/rt/io/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42c0f88232847e97e6cf3578ef197d1942bba44d/src%2Flibcore%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c0f88232847e97e6cf3578ef197d1942bba44d/src%2Flibcore%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fmod.rs?ref=42c0f88232847e97e6cf3578ef197d1942bba44d", "patch": "@@ -153,6 +153,7 @@ pub mod mem;\n pub mod stdio;\n \n /// Implementations for Option\n+#[cfg(not(stage0))] // Requires condition! fixes\n mod option;\n \n /// Basic stream compression. XXX: Belongs with other flate code"}, {"sha": "fc75a256428616b20346dc618c9d3bc13fbaf3ce", "filename": "src/libcore/rt/local_services.rs", "status": "modified", "additions": 74, "deletions": 4, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/42c0f88232847e97e6cf3578ef197d1942bba44d/src%2Flibcore%2Frt%2Flocal_services.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c0f88232847e97e6cf3578ef197d1942bba44d/src%2Flibcore%2Frt%2Flocal_services.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Flocal_services.rs?ref=42c0f88232847e97e6cf3578ef197d1942bba44d", "patch": "@@ -19,7 +19,8 @@\n //! (freestanding rust with local services?).\n \n use prelude::*;\n-use libc::c_void;\n+use libc::{c_void, uintptr_t};\n+use cast::transmute;\n use super::sched::{Task, local_sched};\n use super::local_heap::LocalHeap;\n \n@@ -35,7 +36,10 @@ pub struct LocalServices {\n pub struct GarbageCollector;\n pub struct LocalStorage(*c_void, Option<~fn(*c_void)>);\n pub struct Logger;\n-pub struct Unwinder;\n+\n+pub struct Unwinder {\n+    unwinding: bool,\n+}\n \n impl LocalServices {\n     pub fn new() -> LocalServices {\n@@ -44,17 +48,28 @@ impl LocalServices {\n             gc: GarbageCollector,\n             storage: LocalStorage(ptr::null(), None),\n             logger: Logger,\n-            unwinder: Unwinder,\n+            unwinder: Unwinder { unwinding: false },\n             destroyed: false\n         }\n     }\n \n+    pub fn run(&mut self, f: &fn()) {\n+        // This is just an assertion that `run` was called unsafely\n+        // and this instance of LocalServices is still accessible.\n+        do borrow_local_services |sched| {\n+            assert!(ptr::ref_eq(sched, self));\n+        }\n+\n+        self.unwinder.try(f);\n+        self.destroy();\n+    }\n+\n     /// Must be called manually before finalization to clean up\n     /// thread-local resources. Some of the routines here expect\n     /// LocalServices to be available recursively so this must be\n     /// called unsafely, without removing LocalServices from\n     /// thread-local-storage.\n-    pub fn destroy(&mut self) {\n+    fn destroy(&mut self) {\n         // This is just an assertion that `destroy` was called unsafely\n         // and this instance of LocalServices is still accessible.\n         do borrow_local_services |sched| {\n@@ -72,6 +87,51 @@ impl Drop for LocalServices {\n     fn finalize(&self) { assert!(self.destroyed) }\n }\n \n+// Just a sanity check to make sure we are catching a Rust-thrown exception\n+static UNWIND_TOKEN: uintptr_t = 839147;\n+\n+impl Unwinder {\n+    pub fn try(&mut self, f: &fn()) {\n+        use sys::Closure;\n+\n+        unsafe {\n+            let closure: Closure = transmute(f);\n+            let code = transmute(closure.code);\n+            let env = transmute(closure.env);\n+\n+            let token = rust_try(try_fn, code, env);\n+            assert!(token == 0 || token == UNWIND_TOKEN);\n+        }\n+\n+        extern fn try_fn(code: *c_void, env: *c_void) {\n+            unsafe {\n+                let closure: Closure = Closure {\n+                    code: transmute(code),\n+                    env: transmute(env),\n+                };\n+                let closure: &fn() = transmute(closure);\n+                closure();\n+            }\n+        }\n+\n+        extern {\n+            #[rust_stack]\n+            fn rust_try(f: *u8, code: *c_void, data: *c_void) -> uintptr_t;\n+        }\n+    }\n+\n+    pub fn begin_unwind(&mut self) -> ! {\n+        self.unwinding = true;\n+        unsafe {\n+            rust_begin_unwind(UNWIND_TOKEN);\n+            return transmute(());\n+        }\n+        extern {\n+            fn rust_begin_unwind(token: uintptr_t);\n+        }\n+    }\n+}\n+\n /// Borrow a pointer to the installed local services.\n /// Fails (likely aborting the process) if local services are not available.\n pub fn borrow_local_services(f: &fn(&mut LocalServices)) {\n@@ -125,4 +185,14 @@ mod test {\n             }\n         }\n     }\n+\n+    #[test]\n+    fn unwind() {\n+        do run_in_newsched_task() {\n+            let result = spawn_try(||());\n+            assert!(result.is_ok());\n+            let result = spawn_try(|| fail!());\n+            assert!(result.is_err());\n+        }\n+    }\n }\n\\ No newline at end of file"}, {"sha": "65456c30fee7931b283425fcc0a614a31cf2d49e", "filename": "src/libcore/rt/sched/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42c0f88232847e97e6cf3578ef197d1942bba44d/src%2Flibcore%2Frt%2Fsched%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c0f88232847e97e6cf3578ef197d1942bba44d/src%2Flibcore%2Frt%2Fsched%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched%2Fmod.rs?ref=42c0f88232847e97e6cf3578ef197d1942bba44d", "patch": "@@ -353,15 +353,10 @@ pub impl Task {\n             unsafe {\n                 let sched = local_sched::unsafe_borrow();\n                 sched.run_cleanup_job();\n-            }\n-\n-            start();\n \n-            unsafe {\n-                // Destroy the local heap, TLS, etc.\n                 let sched = local_sched::unsafe_borrow();\n                 let task = sched.current_task.get_mut_ref();\n-                task.local_services.destroy();\n+                task.local_services.run(start);\n             }\n \n             let sched = local_sched::take();"}, {"sha": "f3d73c91bd6043178452ea604ecedd574a2d0885", "filename": "src/libcore/rt/test.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/42c0f88232847e97e6cf3578ef197d1942bba44d/src%2Flibcore%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c0f88232847e97e6cf3578ef197d1942bba44d/src%2Flibcore%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Ftest.rs?ref=42c0f88232847e97e6cf3578ef197d1942bba44d", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use result::{Result, Ok, Err};\n use super::io::net::ip::{IpAddr, Ipv4};\n \n /// Creates a new scheduler in a new thread and runs a task in it,\n@@ -47,6 +48,46 @@ pub fn spawn_immediately(f: ~fn()) {\n     }\n }\n \n+/// Spawn a task and wait for it to finish, returning whether it completed successfully or failed\n+pub fn spawn_try(f: ~fn()) -> Result<(), ()> {\n+    use cell::Cell;\n+    use super::sched::*;\n+    use task;\n+    use unstable::finally::Finally;\n+\n+    // Our status variables will be filled in from the scheduler context\n+    let mut failed = false;\n+    let failed_ptr: *mut bool = &mut failed;\n+\n+    // Switch to the scheduler\n+    let f = Cell(Cell(f));\n+    let mut sched = local_sched::take();\n+    do sched.deschedule_running_task_and_then() |old_task| {\n+        let old_task = Cell(old_task);\n+        let f = f.take();\n+        let mut sched = local_sched::take();\n+        let new_task = ~do Task::new(&mut sched.stack_pool) {\n+            do (|| {\n+                (f.take())()\n+            }).finally {\n+                // Check for failure then resume the parent task\n+                unsafe { *failed_ptr = task::failing(); }\n+                let sched = local_sched::take();\n+                do sched.switch_running_tasks_and_then(old_task.take()) |new_task| {\n+                    let new_task = Cell(new_task);\n+                    do local_sched::borrow |sched| {\n+                        sched.task_queue.push_front(new_task.take());\n+                    }\n+                }\n+            }\n+        };\n+\n+        sched.resume_task_immediately(new_task);\n+    }\n+\n+    if !failed { Ok(()) } else { Err(()) }\n+}\n+\n /// Get a port number, starting at 9600, for use in tests\n pub fn next_test_port() -> u16 {\n     unsafe {"}, {"sha": "c50bc03517fa473d8fc0a9376e528358b500a759", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/42c0f88232847e97e6cf3578ef197d1942bba44d/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c0f88232847e97e6cf3578ef197d1942bba44d/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=42c0f88232847e97e6cf3578ef197d1942bba44d", "patch": "@@ -134,12 +134,27 @@ pub fn log_str<T>(t: &T) -> ~str {\n \n /** Initiate task failure */\n pub fn begin_unwind(msg: ~str, file: ~str, line: uint) -> ! {\n-    do str::as_buf(msg) |msg_buf, _msg_len| {\n-        do str::as_buf(file) |file_buf, _file_len| {\n+\n+    use rt::{context, OldTaskContext};\n+    use rt::local_services::unsafe_borrow_local_services;\n+\n+    match context() {\n+        OldTaskContext => {\n+            do str::as_buf(msg) |msg_buf, _msg_len| {\n+                do str::as_buf(file) |file_buf, _file_len| {\n+                    unsafe {\n+                        let msg_buf = cast::transmute(msg_buf);\n+                        let file_buf = cast::transmute(file_buf);\n+                        begin_unwind_(msg_buf, file_buf, line as libc::size_t)\n+                    }\n+                }\n+            }\n+        }\n+        _ => {\n+            gc::cleanup_stack_for_failure();\n             unsafe {\n-                let msg_buf = cast::transmute(msg_buf);\n-                let file_buf = cast::transmute(file_buf);\n-                begin_unwind_(msg_buf, file_buf, line as libc::size_t)\n+                let local_services = unsafe_borrow_local_services();\n+                local_services.unwinder.begin_unwind();\n             }\n         }\n     }"}, {"sha": "e1f4805a692082896eab2fc888697272c0ab2a31", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/42c0f88232847e97e6cf3578ef197d1942bba44d/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c0f88232847e97e6cf3578ef197d1942bba44d/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=42c0f88232847e97e6cf3578ef197d1942bba44d", "patch": "@@ -558,8 +558,22 @@ pub fn yield() {\n pub fn failing() -> bool {\n     //! True if the running task has failed\n \n-    unsafe {\n-        rt::rust_task_is_unwinding(rt::rust_get_task())\n+    use rt::{context, OldTaskContext};\n+    use rt::local_services::borrow_local_services;\n+\n+    match context() {\n+        OldTaskContext => {\n+            unsafe {\n+                rt::rust_task_is_unwinding(rt::rust_get_task())\n+            }\n+        }\n+        _ => {\n+            let mut unwinding = false;\n+            do borrow_local_services |local| {\n+                unwinding = local.unwinder.unwinding;\n+            }\n+            return unwinding;\n+        }\n     }\n }\n "}, {"sha": "b37644460aa9e023b0ee83f3782ddd64203d3a08", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/42c0f88232847e97e6cf3578ef197d1942bba44d/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/42c0f88232847e97e6cf3578ef197d1942bba44d/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=42c0f88232847e97e6cf3578ef197d1942bba44d", "patch": "@@ -886,6 +886,28 @@ rust_boxed_region_free(boxed_region *region, rust_opaque_box *box) {\n     region->free(box);\n }\n \n+typedef void *(rust_try_fn)(void*, void*);\n+\n+extern \"C\" CDECL uintptr_t\n+rust_try(rust_try_fn f, void *fptr, void *env) {\n+    try {\n+        f(fptr, env);\n+    } catch (uintptr_t token) {\n+        assert(token != 0);\n+        return token;\n+    }\n+    return 0;\n+}\n+\n+extern \"C\" CDECL void\n+rust_begin_unwind(uintptr_t token) {\n+#ifndef __WIN32__\n+    throw token;\n+#else\n+    abort(\"failing on win32\");\n+#endif\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "34236c36c146658b4d45ac5bf824f10cbe2f1318", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/42c0f88232847e97e6cf3578ef197d1942bba44d/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/42c0f88232847e97e6cf3578ef197d1942bba44d/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=42c0f88232847e97e6cf3578ef197d1942bba44d", "patch": "@@ -272,7 +272,13 @@ upcall_rust_personality(int version,\n     s_rust_personality_args args = {(_Unwind_Reason_Code)0,\n                                     version, actions, exception_class,\n                                     ue_header, context};\n-    rust_task *task = rust_get_current_task();\n+    rust_task *task = rust_try_get_current_task();\n+\n+    if (task == NULL) {\n+        // Assuming we're running with the new scheduler\n+        upcall_s_rust_personality(&args);\n+        return args.retval;\n+    }\n \n     // The personality function is run on the stack of the\n     // last function that threw or landed, which is going\n@@ -309,8 +315,12 @@ upcall_del_stack() {\n // needs to acquire the value of the stack pointer\n extern \"C\" CDECL void\n upcall_reset_stack_limit() {\n-    rust_task *task = rust_get_current_task();\n-    task->reset_stack_limit();\n+    rust_task *task = rust_try_get_current_task();\n+    if (task != NULL) {\n+        task->reset_stack_limit();\n+    } else {\n+        // We must be in a newsched task\n+    }\n }\n \n //"}, {"sha": "5e9a4b343eeda36befbe222a2cca2602223225cd", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42c0f88232847e97e6cf3578ef197d1942bba44d/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/42c0f88232847e97e6cf3578ef197d1942bba44d/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=42c0f88232847e97e6cf3578ef197d1942bba44d", "patch": "@@ -228,3 +228,5 @@ rust_new_boxed_region\n rust_delete_boxed_region\n rust_boxed_region_malloc\n rust_boxed_region_free\n+rust_try\n+rust_begin_unwind\n\\ No newline at end of file"}]}