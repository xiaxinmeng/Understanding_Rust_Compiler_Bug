{"sha": "3ec3fca414f62cb3172b9324fe7aaa516c71b4e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYzNmY2E0MTRmNjJjYjMxNzJiOTMyNGZlN2FhYTUxNmM3MWI0ZTk=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-11-25T21:29:57Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-12-19T02:19:05Z"}, "message": "remove a bit more hackery", "tree": {"sha": "c5d84ca17b53165ee25260e3917585f13cf94786", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5d84ca17b53165ee25260e3917585f13cf94786"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ec3fca414f62cb3172b9324fe7aaa516c71b4e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ec3fca414f62cb3172b9324fe7aaa516c71b4e9", "html_url": "https://github.com/rust-lang/rust/commit/3ec3fca414f62cb3172b9324fe7aaa516c71b4e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ec3fca414f62cb3172b9324fe7aaa516c71b4e9/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17aa0cb2ca73ad789e718bf9162a740af02a829f", "url": "https://api.github.com/repos/rust-lang/rust/commits/17aa0cb2ca73ad789e718bf9162a740af02a829f", "html_url": "https://github.com/rust-lang/rust/commit/17aa0cb2ca73ad789e718bf9162a740af02a829f"}], "stats": {"total": 50, "additions": 9, "deletions": 41}, "files": [{"sha": "6e44c7631b3f0ee7b5e4c71aa9d9a2586a646f9c", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ec3fca414f62cb3172b9324fe7aaa516c71b4e9/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ec3fca414f62cb3172b9324fe7aaa516c71b4e9/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=3ec3fca414f62cb3172b9324fe7aaa516c71b4e9", "patch": "@@ -85,6 +85,7 @@\n #![feature(const_generic_impls_guard)]\n #![feature(const_generics)]\n #![feature(const_in_array_repeat_expressions)]\n+#![cfg_attr(not(bootstrap), feature(const_if_match))]\n #![feature(cow_is_borrowed)]\n #![feature(dispatch_from_dyn)]\n #![feature(core_intrinsics)]"}, {"sha": "ce192a7450c9d73c6c83f05f7ac242e5de00b182", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 8, "deletions": 41, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3ec3fca414f62cb3172b9324fe7aaa516c71b4e9/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ec3fca414f62cb3172b9324fe7aaa516c71b4e9/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=3ec3fca414f62cb3172b9324fe7aaa516c71b4e9", "patch": "@@ -1,8 +1,6 @@\n #![unstable(feature = \"raw_vec_internals\", reason = \"implementation detail\", issue = \"0\")]\n #![doc(hidden)]\n \n-#![feature(const_if_match)]\n-\n use core::cmp;\n use core::mem;\n use core::ops::Drop;\n@@ -53,9 +51,14 @@ pub struct RawVec<T, A: Alloc = Global> {\n impl<T, A: Alloc> RawVec<T, A> {\n     /// Like `new`, but parameterized over the choice of allocator for\n     /// the returned `RawVec`.\n-    #[cfg(not(bootstrap))]\n     pub const fn new_in(a: A) -> Self {\n-        let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n+        let cap = {\n+            #[cfg(not(bootstrap))]\n+            { if mem::size_of::<T>() == 0 { !0 } else { 0 } }\n+\n+            #[cfg(bootstrap)]\n+            [0, !0][(mem::size_of::<T>() == 0) as usize]\n+        };\n \n         // `Unique::empty()` doubles as \"unallocated\" and \"zero-sized allocation\".\n         RawVec {\n@@ -65,17 +68,6 @@ impl<T, A: Alloc> RawVec<T, A> {\n         }\n     }\n \n-    /// Like `new`, but parameterized over the choice of allocator for\n-    /// the returned `RawVec`.\n-    #[cfg(bootstrap)]\n-    pub const fn new_in(a: A) -> Self {\n-        RawVec {\n-            ptr: Unique::empty(),\n-            cap: [0, !0][(mem::size_of::<T>() == 0) as usize],\n-            a,\n-        }\n-    }\n-\n     /// Like `with_capacity`, but parameterized over the choice of\n     /// allocator for the returned `RawVec`.\n     #[inline]\n@@ -142,33 +134,8 @@ impl<T> RawVec<T, Global> {\n     /// `RawVec` with capacity `0`. If `T` is zero-sized, then it makes a\n     /// `RawVec` with capacity `usize::MAX`. Useful for implementing\n     /// delayed allocation.\n-    #[cfg(not(bootstrap))]\n-    pub const fn new() -> Self {\n-        // FIXME(Centril): Reintegrate this with `fn new_in` when we can.\n-\n-        let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n-\n-        // `Unique::empty()` doubles as \"unallocated\" and \"zero-sized allocation\".\n-        RawVec {\n-            ptr: Unique::empty(),\n-            cap,\n-            a: Global,\n-        }\n-    }\n-\n-    /// Creates the biggest possible `RawVec` (on the system heap)\n-    /// without allocating. If `T` has positive size, then this makes a\n-    /// `RawVec` with capacity `0`. If `T` is zero-sized, then it makes a\n-    /// `RawVec` with capacity `usize::MAX`. Useful for implementing\n-    /// delayed allocation.\n-    #[cfg(bootstrap)]\n     pub const fn new() -> Self {\n-        // `Unique::empty()` doubles as \"unallocated\" and \"zero-sized allocation\".\n-        RawVec {\n-            ptr: Unique::empty(),\n-            cap: [0, !0][(mem::size_of::<T>() == 0) as usize],\n-            a: Global,\n-        }\n+        Self::new_in(Global)\n     }\n \n     /// Creates a `RawVec` (on the system heap) with exactly the"}]}