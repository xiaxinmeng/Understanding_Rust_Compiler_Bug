{"sha": "3a4fb823e26c512d14d97bd86e2ac7b1e7d3d0fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNGZiODIzZTI2YzUxMmQxNGQ5N2JkODZlMmFjN2IxZTdkM2QwZmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-09T14:42:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-09T14:42:00Z"}, "message": "Auto merge of #28316 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #28281, #28283, #28289, #28294, #28295, #28305\n- Failed merges:", "tree": {"sha": "1c2d3e2fec6a51c47b1ae12f44958a79b43d0169", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c2d3e2fec6a51c47b1ae12f44958a79b43d0169"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a4fb823e26c512d14d97bd86e2ac7b1e7d3d0fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a4fb823e26c512d14d97bd86e2ac7b1e7d3d0fa", "html_url": "https://github.com/rust-lang/rust/commit/3a4fb823e26c512d14d97bd86e2ac7b1e7d3d0fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a4fb823e26c512d14d97bd86e2ac7b1e7d3d0fa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c8ae608dc65665039f3aeb01548d675953a2a68", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c8ae608dc65665039f3aeb01548d675953a2a68", "html_url": "https://github.com/rust-lang/rust/commit/7c8ae608dc65665039f3aeb01548d675953a2a68"}, {"sha": "519a186773c2b972f84fd499f57ce52400bbdcf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/519a186773c2b972f84fd499f57ce52400bbdcf1", "html_url": "https://github.com/rust-lang/rust/commit/519a186773c2b972f84fd499f57ce52400bbdcf1"}], "stats": {"total": 118, "additions": 10, "deletions": 108}, "files": [{"sha": "0eac7ac9de2c56c669ecb088fba2d64b941f1bae", "filename": "COPYRIGHT", "status": "modified", "additions": 0, "deletions": 98, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/3a4fb823e26c512d14d97bd86e2ac7b1e7d3d0fa/COPYRIGHT", "raw_url": "https://github.com/rust-lang/rust/raw/3a4fb823e26c512d14d97bd86e2ac7b1e7d3d0fa/COPYRIGHT", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/COPYRIGHT?ref=3a4fb823e26c512d14d97bd86e2ac7b1e7d3d0fa", "patch": "@@ -22,104 +22,6 @@ The Rust Project includes packages written by third parties.\n The following third party packages are included, and carry\n their own copyright notices and license terms:\n \n-* Two header files that are part of the Valgrind\n-  package. These files are found at src/rt/valgrind/valgrind.h and\n-  src/rt/valgrind/memcheck.h, within this distribution. These files\n-  are redistributed under the following terms, as noted in\n-  them:\n-\n-  for src/rt/valgrind/valgrind.h:\n-\n-    This file is part of Valgrind, a dynamic binary\n-    instrumentation framework.\n-\n-    Copyright (C) 2000-2010 Julian Seward.  All rights\n-    reserved.\n-\n-    Redistribution and use in source and binary forms, with\n-    or without modification, are permitted provided that the\n-    following conditions are met:\n-\n-    1. Redistributions of source code must retain the above\n-       copyright notice, this list of conditions and the\n-       following disclaimer.\n-\n-    2. The origin of this software must not be\n-       misrepresented; you must not claim that you wrote the\n-       original software.  If you use this software in a\n-       product, an acknowledgment in the product\n-       documentation would be appreciated but is not\n-       required.\n-\n-    3. Altered source versions must be plainly marked as\n-       such, and must not be misrepresented as being the\n-       original software.\n-\n-    4. The name of the author may not be used to endorse or\n-       promote products derived from this software without\n-       specific prior written permission.\n-\n-    THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND\n-    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n-    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n-    AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN\n-    NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\n-    INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n-    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n-    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n-    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n-    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n-    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n-    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n-    USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\n-    OF SUCH DAMAGE.\n-\n-  for src/rt/valgrind/memcheck.h:\n-\n-    This file is part of MemCheck, a heavyweight Valgrind\n-    tool for detecting memory errors.\n-\n-    Copyright (C) 2000-2010 Julian Seward.  All rights\n-    reserved.\n-\n-    Redistribution and use in source and binary forms, with\n-    or without modification, are permitted provided that the\n-    following conditions are met:\n-\n-    1. Redistributions of source code must retain the above\n-       copyright notice, this list of conditions and the\n-       following disclaimer.\n-\n-    2. The origin of this software must not be\n-       misrepresented; you must not claim that you wrote the\n-       original software.  If you use this software in a\n-       product, an acknowledgment in the product\n-       documentation would be appreciated but is not\n-       required.\n-\n-    3. Altered source versions must be plainly marked as\n-       such, and must not be misrepresented as being the\n-       original software.\n-\n-    4. The name of the author may not be used to endorse or\n-       promote products derived from this software without\n-       specific prior written permission.\n-\n-    THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND\n-    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n-    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n-    AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN\n-    NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\n-    INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n-    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n-    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n-    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n-    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n-    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n-    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n-    USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\n-    OF SUCH DAMAGE.\n-\n * The src/rt/miniz.c file, carrying an implementation of\n   RFC1950/RFC1951 DEFLATE, by Rich Geldreich\n   <richgel99@gmail.com>. All uses of this file are"}, {"sha": "d74cd6d0d35b4379cfe7afff05657cbf5dd2c370", "filename": "src/doc/trpl/macros.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a4fb823e26c512d14d97bd86e2ac7b1e7d3d0fa/src%2Fdoc%2Ftrpl%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/3a4fb823e26c512d14d97bd86e2ac7b1e7d3d0fa/src%2Fdoc%2Ftrpl%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmacros.md?ref=3a4fb823e26c512d14d97bd86e2ac7b1e7d3d0fa", "patch": "@@ -313,7 +313,7 @@ fn main() {\n }\n ```\n \n-This works because Rust has a [hygienic macro system][https://en.wikipedia.org/wiki/Hygienic_macro]. Each macro expansion\n+This works because Rust has a [hygienic macro system]. Each macro expansion\n happens in a distinct \u2018syntax context\u2019, and each variable is tagged with the\n syntax context where it was introduced. It\u2019s as though the variable `state`\n inside `main` is painted a different \"color\" from the variable `state` inside"}, {"sha": "2c4316e651a8e135b638ab7f2c0aca650fe89ce0", "filename": "src/doc/trpl/mutability.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a4fb823e26c512d14d97bd86e2ac7b1e7d3d0fa/src%2Fdoc%2Ftrpl%2Fmutability.md", "raw_url": "https://github.com/rust-lang/rust/raw/3a4fb823e26c512d14d97bd86e2ac7b1e7d3d0fa/src%2Fdoc%2Ftrpl%2Fmutability.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmutability.md?ref=3a4fb823e26c512d14d97bd86e2ac7b1e7d3d0fa", "patch": "@@ -62,7 +62,7 @@ fn foo(mut x: i32) {\n # Interior vs. Exterior Mutability\n \n However, when we say something is \u2018immutable\u2019 in Rust, that doesn\u2019t mean that\n-it\u2019s not able to be changed: We mean something has \u2018exterior mutability\u2019. Consider,\n+it\u2019s not able to be changed: we mean something has \u2018exterior mutability\u2019. Consider,\n for example, [`Arc<T>`][arc]:\n \n ```rust\n@@ -85,8 +85,8 @@ philosophy, memory safety, and the mechanism by which Rust guarantees it, the\n > You may have one or the other of these two kinds of borrows, but not both at\n > the same time:\n > \n-> * one or more references (`&T`) to a resource.\n-> * exactly one mutable reference (`&mut T`)\n+> * one or more references (`&T`) to a resource,\n+> * exactly one mutable reference (`&mut T`).\n \n [ownership]: ownership.html\n [borrowing]: references-and-borrowing.html#borrowing"}, {"sha": "50297b266d98c1a6ff648127dab19b26d52f45ce", "filename": "src/doc/trpl/references-and-borrowing.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a4fb823e26c512d14d97bd86e2ac7b1e7d3d0fa/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md", "raw_url": "https://github.com/rust-lang/rust/raw/3a4fb823e26c512d14d97bd86e2ac7b1e7d3d0fa/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md?ref=3a4fb823e26c512d14d97bd86e2ac7b1e7d3d0fa", "patch": "@@ -159,8 +159,8 @@ First, any borrow must last for a scope no greater than that of the owner.\n Second, you may have one or the other of these two kinds of borrows, but not\n both at the same time:\n \n-* one or more references (`&T`) to a resource.\n-* exactly one mutable reference (`&mut T`)\n+* one or more references (`&T`) to a resource,\n+* exactly one mutable reference (`&mut T`).\n \n \n You may notice that this is very similar, though not exactly the same as,\n@@ -298,8 +298,8 @@ We can\u2019t modify `v` because it\u2019s borrowed by the loop.\n \n ### use after free\n \n-References must live as long as the resource they refer to. Rust will check the\n-scopes of your references to ensure that this is true.\n+References must not live longer than the resource they refer to. Rust will\n+check the scopes of your references to ensure that this is true.\n \n If Rust didn\u2019t check this property, we could accidentally use a reference\n which was invalid. For example:"}, {"sha": "a0c3f013f2b4e15280c58bd0957b57aedc00b743", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a4fb823e26c512d14d97bd86e2ac7b1e7d3d0fa/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a4fb823e26c512d14d97bd86e2ac7b1e7d3d0fa/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=3a4fb823e26c512d14d97bd86e2ac7b1e7d3d0fa", "patch": "@@ -412,9 +412,9 @@ pub mod builtin {\n     #[macro_export]\n     macro_rules! include_str { ($file:expr) => ({ /* compiler built-in */ }) }\n \n-    /// Includes a file as a byte slice.\n+    /// Includes a file as a reference to a byte array.\n     ///\n-    /// This macro will yield an expression of type `&'static [u8]` which is\n+    /// This macro will yield an expression of type `&'static [u8; N]` which is\n     /// the contents of the filename specified. The file is located relative to\n     /// the current file (similarly to how modules are found),\n     ///"}]}