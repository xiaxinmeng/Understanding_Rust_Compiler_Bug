{"sha": "ded98853ec377556112970cb35be4814efa0843e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZDk4ODUzZWMzNzc1NTYxMTI5NzBjYjM1YmU0ODE0ZWZhMDg0M2U=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T18:41:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-03T18:41:55Z"}, "message": "Rollup merge of #66960 - wesleywiser:fix_66787_take2, r=oli-obk,RalfJung\n\n[const-prop] Fix ICE calculating enum discriminant\n\nFixes #66787\n\nDifferent approach than #66857\n\nr? @oli-obk\ncc @RalfJung @eddyb", "tree": {"sha": "939b44221247382641d7197ebf5141d1002ba373", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/939b44221247382641d7197ebf5141d1002ba373"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ded98853ec377556112970cb35be4814efa0843e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd5qxzCRBK7hj4Ov3rIwAAdHIIAE6j4XdbyjWZzTDrD3FoTrjY\njRE/RR9Gy1ZivIFLNypjqlQV6cudeiQ3oY5K4NIyKGlsNDcC7mcWLDU2sXy0aZcT\nHCE16l99h2Hk3ohzdNicKHjJtRMsVYNOfRws4XpIHr5mwmRYsUaIATY8WpS9XIy7\nje7+PLVNksoDKM7/EFWMa/EScFlhjgdrcf/mB+THHsD2800HpW6JOpWfks4kClxJ\nmP1BKKIgGzmC6yvDp91AUhpG7LtJjtp48mDb0ROqyi1YHex3M5ntU22lMjY++KaJ\nL6rhRKy27a7HBX0uTHKQNbaB8Gq4aX+KQDtXCHNOX8mSGmmcD51A2VQgVdZNnvg=\n=56L/\n-----END PGP SIGNATURE-----\n", "payload": "tree 939b44221247382641d7197ebf5141d1002ba373\nparent 69f1323167c71b79561fb4ac297de2fbd75eb017\nparent 0be80f2909e0b5246c884db241a602a2f6d90488\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1575398515 +0100\ncommitter GitHub <noreply@github.com> 1575398515 +0100\n\nRollup merge of #66960 - wesleywiser:fix_66787_take2, r=oli-obk,RalfJung\n\n[const-prop] Fix ICE calculating enum discriminant\n\nFixes #66787\n\nDifferent approach than #66857\n\nr? @oli-obk\ncc @RalfJung @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ded98853ec377556112970cb35be4814efa0843e", "html_url": "https://github.com/rust-lang/rust/commit/ded98853ec377556112970cb35be4814efa0843e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ded98853ec377556112970cb35be4814efa0843e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69f1323167c71b79561fb4ac297de2fbd75eb017", "url": "https://api.github.com/repos/rust-lang/rust/commits/69f1323167c71b79561fb4ac297de2fbd75eb017", "html_url": "https://github.com/rust-lang/rust/commit/69f1323167c71b79561fb4ac297de2fbd75eb017"}, {"sha": "0be80f2909e0b5246c884db241a602a2f6d90488", "url": "https://api.github.com/repos/rust-lang/rust/commits/0be80f2909e0b5246c884db241a602a2f6d90488", "html_url": "https://github.com/rust-lang/rust/commit/0be80f2909e0b5246c884db241a602a2f6d90488"}], "stats": {"total": 62, "additions": 52, "deletions": 10}, "files": [{"sha": "902472d18beae6e0a16acfdb9a65a7273d7aeafb", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ded98853ec377556112970cb35be4814efa0843e/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded98853ec377556112970cb35be4814efa0843e/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=ded98853ec377556112970cb35be4814efa0843e", "patch": "@@ -1065,23 +1065,26 @@ where\n         variant_index: VariantIdx,\n         dest: PlaceTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx> {\n-        let variant_scalar = Scalar::from_u32(variant_index.as_u32()).into();\n+\n+        // Layout computation excludes uninhabited variants from consideration\n+        // therefore there's no way to represent those variants in the given layout.\n+        if dest.layout.for_variant(self, variant_index).abi.is_uninhabited() {\n+            throw_ub!(Unreachable);\n+        }\n \n         match dest.layout.variants {\n             layout::Variants::Single { index } => {\n-                if index != variant_index {\n-                    throw_ub!(InvalidDiscriminant(variant_scalar));\n-                }\n+                assert_eq!(index, variant_index);\n             }\n             layout::Variants::Multiple {\n                 discr_kind: layout::DiscriminantKind::Tag,\n                 discr: ref discr_layout,\n                 discr_index,\n                 ..\n             } => {\n-                if !dest.layout.ty.variant_range(*self.tcx).unwrap().contains(&variant_index) {\n-                    throw_ub!(InvalidDiscriminant(variant_scalar));\n-                }\n+                // No need to validate that the discriminant here because the\n+                // `TyLayout::for_variant()` call earlier already checks the variant is valid.\n+\n                 let discr_val =\n                     dest.layout.ty.discriminant_for_variant(*self.tcx, variant_index).unwrap().val;\n \n@@ -1104,9 +1107,9 @@ where\n                 discr_index,\n                 ..\n             } => {\n-                if !variant_index.as_usize() < dest.layout.ty.ty_adt_def().unwrap().variants.len() {\n-                    throw_ub!(InvalidDiscriminant(variant_scalar));\n-                }\n+                // No need to validate that the discriminant here because the\n+                // `TyLayout::for_variant()` call earlier already checks the variant is valid.\n+\n                 if variant_index != dataful_variant {\n                     let variants_start = niche_variants.start().as_u32();\n                     let variant_index_relative = variant_index.as_u32()"}, {"sha": "612b795eb5cd0a0a5fab14a720e84cbb20cbfee4", "filename": "src/test/ui/consts/issue-66787.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ded98853ec377556112970cb35be4814efa0843e/src%2Ftest%2Fui%2Fconsts%2Fissue-66787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded98853ec377556112970cb35be4814efa0843e/src%2Ftest%2Fui%2Fconsts%2Fissue-66787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66787.rs?ref=ded98853ec377556112970cb35be4814efa0843e", "patch": "@@ -0,0 +1,39 @@\n+// build-pass\n+// compile-flags: --crate-type lib\n+\n+// Regression test for ICE which occurred when const propagating an enum with three variants\n+// one of which is uninhabited.\n+\n+pub enum ApiError {}\n+#[allow(dead_code)]\n+pub struct TokioError {\n+    b: bool,\n+}\n+pub enum Error {\n+    Api {\n+        source: ApiError,\n+    },\n+    Ethereum,\n+    Tokio {\n+        source: TokioError,\n+    },\n+}\n+struct Api;\n+impl IntoError<Error> for Api\n+{\n+    type Source = ApiError;\n+    fn into_error(self, error: Self::Source) -> Error {\n+        Error::Api {\n+            source: (|v| v)(error),\n+        }\n+    }\n+}\n+\n+pub trait IntoError<E>\n+{\n+    /// The underlying error\n+    type Source;\n+\n+    /// Combine the information to produce the error\n+    fn into_error(self, source: Self::Source) -> E;\n+}"}]}