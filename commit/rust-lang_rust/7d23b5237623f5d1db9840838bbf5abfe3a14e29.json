{"sha": "7d23b5237623f5d1db9840838bbf5abfe3a14e29", "node_id": "C_kwDOAAsO6NoAKDdkMjNiNTIzNzYyM2Y1ZDFkYjk4NDA4MzhiYmY1YWJmZTNhMTRlMjk", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-19T11:12:42Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-24T13:53:37Z"}, "message": "`const`-ify some `{IndexVec, IndexSlice}` methods", "tree": {"sha": "477ed0c1a5d0cd4133c80329cf469c3aaf53efc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/477ed0c1a5d0cd4133c80329cf469c3aaf53efc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d23b5237623f5d1db9840838bbf5abfe3a14e29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d23b5237623f5d1db9840838bbf5abfe3a14e29", "html_url": "https://github.com/rust-lang/rust/commit/7d23b5237623f5d1db9840838bbf5abfe3a14e29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d23b5237623f5d1db9840838bbf5abfe3a14e29/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99ebfe2f15048377960b006afae5b52252f933a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/99ebfe2f15048377960b006afae5b52252f933a7", "html_url": "https://github.com/rust-lang/rust/commit/99ebfe2f15048377960b006afae5b52252f933a7"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "0663c7247ded884088f4cc98c1de53f1e7b747d8", "filename": "compiler/rustc_index/src/slice.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7d23b5237623f5d1db9840838bbf5abfe3a14e29/compiler%2Frustc_index%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d23b5237623f5d1db9840838bbf5abfe3a14e29/compiler%2Frustc_index%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fslice.rs?ref=7d23b5237623f5d1db9840838bbf5abfe3a14e29", "patch": "@@ -23,12 +23,12 @@ pub struct IndexSlice<I: Idx, T> {\n \n impl<I: Idx, T> IndexSlice<I, T> {\n     #[inline]\n-    pub fn empty() -> &'static Self {\n-        Default::default()\n+    pub const fn empty() -> &'static Self {\n+        Self::from_raw(&[])\n     }\n \n     #[inline]\n-    pub fn from_raw(raw: &[T]) -> &Self {\n+    pub const fn from_raw(raw: &[T]) -> &Self {\n         let ptr: *const [T] = raw;\n         // SAFETY: `IndexSlice` is `repr(transparent)` over a normal slice\n         unsafe { &*(ptr as *const Self) }\n@@ -42,10 +42,15 @@ impl<I: Idx, T> IndexSlice<I, T> {\n     }\n \n     #[inline]\n-    pub fn len(&self) -> usize {\n+    pub const fn len(&self) -> usize {\n         self.raw.len()\n     }\n \n+    #[inline]\n+    pub const fn is_empty(&self) -> bool {\n+        self.raw.is_empty()\n+    }\n+\n     /// Gives the next index that will be assigned when `push` is called.\n     ///\n     /// Manual bounds checks can be done using `idx < slice.next_index()`\n@@ -55,11 +60,6 @@ impl<I: Idx, T> IndexSlice<I, T> {\n         I::new(self.len())\n     }\n \n-    #[inline]\n-    pub fn is_empty(&self) -> bool {\n-        self.raw.is_empty()\n-    }\n-\n     #[inline]\n     pub fn iter(&self) -> slice::Iter<'_, T> {\n         self.raw.iter()"}, {"sha": "5631e2867b0a967f51bd79ffa0f22dfcbbdeaf20", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d23b5237623f5d1db9840838bbf5abfe3a14e29/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d23b5237623f5d1db9840838bbf5abfe3a14e29/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=7d23b5237623f5d1db9840838bbf5abfe3a14e29", "patch": "@@ -26,12 +26,12 @@ pub struct IndexVec<I: Idx, T> {\n \n impl<I: Idx, T> IndexVec<I, T> {\n     #[inline]\n-    pub fn new() -> Self {\n+    pub const fn new() -> Self {\n         IndexVec { raw: Vec::new(), _marker: PhantomData }\n     }\n \n     #[inline]\n-    pub fn from_raw(raw: Vec<T>) -> Self {\n+    pub const fn from_raw(raw: Vec<T>) -> Self {\n         IndexVec { raw, _marker: PhantomData }\n     }\n "}]}