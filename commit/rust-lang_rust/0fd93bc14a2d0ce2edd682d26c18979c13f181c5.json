{"sha": "0fd93bc14a2d0ce2edd682d26c18979c13f181c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmZDkzYmMxNGEyZDBjZTJlZGQ2ODJkMjZjMTg5NzljMTNmMTgxYzU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-12T21:44:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-12T21:44:47Z"}, "message": "use really correct resolver for expressions", "tree": {"sha": "e800dc46abe63bad2eaffaf7f3c0f4d8358d0c9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e800dc46abe63bad2eaffaf7f3c0f4d8358d0c9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fd93bc14a2d0ce2edd682d26c18979c13f181c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fd93bc14a2d0ce2edd682d26c18979c13f181c5", "html_url": "https://github.com/rust-lang/rust/commit/0fd93bc14a2d0ce2edd682d26c18979c13f181c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fd93bc14a2d0ce2edd682d26c18979c13f181c5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20013de2abb95bc024f55163b1a5044cfb52a873", "url": "https://api.github.com/repos/rust-lang/rust/commits/20013de2abb95bc024f55163b1a5044cfb52a873", "html_url": "https://github.com/rust-lang/rust/commit/20013de2abb95bc024f55163b1a5044cfb52a873"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "cb0ac988597c390d85c8b576f163e57912bf4dff", "filename": "crates/ra_assists/src/add_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fd93bc14a2d0ce2edd682d26c18979c13f181c5/crates%2Fra_assists%2Fsrc%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd93bc14a2d0ce2edd682d26c18979c13f181c5/crates%2Fra_assists%2Fsrc%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_explicit_type.rs?ref=0fd93bc14a2d0ce2edd682d26c18979c13f181c5", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn add_explicit_type(mut ctx: AssistCtx<impl HirDatabase>) -> Option<\n     }\n     // Infer type\n     let db = ctx.db;\n-    let analyzer = hir::SourceAnalyzer::new(db, ctx.frange.file_id, stmt.syntax());\n+    let analyzer = hir::SourceAnalyzer::new(db, ctx.frange.file_id, stmt.syntax(), None);\n     let ty = analyzer.type_of(db, expr)?;\n     // Assist not applicable if the type is unknown\n     if is_unknown(&ty) {"}, {"sha": "100ebb7b6f6cca3dd3efbf7971d2f04cf9d2108e", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fd93bc14a2d0ce2edd682d26c18979c13f181c5/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd93bc14a2d0ce2edd682d26c18979c13f181c5/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=0fd93bc14a2d0ce2edd682d26c18979c13f181c5", "patch": "@@ -45,7 +45,7 @@ fn add_missing_impl_members_inner(\n     let trait_def = {\n         let file_id = ctx.frange.file_id;\n         let position = FilePosition { file_id, offset: impl_node.syntax().range().start() };\n-        let analyzer = hir::SourceAnalyzer::new(ctx.db, position.file_id, impl_node.syntax());\n+        let analyzer = hir::SourceAnalyzer::new(ctx.db, position.file_id, impl_node.syntax(), None);\n \n         resolve_target_trait_def(ctx.db, &analyzer, impl_node)?\n     };"}, {"sha": "45e327cd4aeb20f87253232980cf8c6c7a09618d", "filename": "crates/ra_assists/src/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fd93bc14a2d0ce2edd682d26c18979c13f181c5/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd93bc14a2d0ce2edd682d26c18979c13f181c5/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs?ref=0fd93bc14a2d0ce2edd682d26c18979c13f181c5", "patch": "@@ -20,7 +20,7 @@ pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n     }\n \n     let expr = match_expr.expr()?;\n-    let analyzer = hir::SourceAnalyzer::new(ctx.db, ctx.frange.file_id, expr.syntax());\n+    let analyzer = hir::SourceAnalyzer::new(ctx.db, ctx.frange.file_id, expr.syntax(), None);\n     let match_expr_ty = analyzer.type_of(ctx.db, expr)?;\n     let enum_def = match_expr_ty.autoderef(ctx.db).find_map(|ty| match ty.as_adt() {\n         Some((AdtDef::Enum(e), _)) => Some(e),"}, {"sha": "663b4f669d0fe6cf740ca7effb9c1f1e65aaa003", "filename": "crates/ra_assists/src/fill_struct_fields.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fd93bc14a2d0ce2edd682d26c18979c13f181c5/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd93bc14a2d0ce2edd682d26c18979c13f181c5/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs?ref=0fd93bc14a2d0ce2edd682d26c18979c13f181c5", "patch": "@@ -55,6 +55,7 @@ where\n             self.ctx.db,\n             self.ctx.frange.file_id,\n             self.struct_lit.syntax(),\n+            None,\n         );\n         let struct_lit_ty = analyzer.type_of(self.ctx.db, self.struct_lit.into())?;\n         let struct_def = match struct_lit_ty.as_adt() {"}, {"sha": "846394212c9997c4a2157f4f70f4f19baf9c426b", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0fd93bc14a2d0ce2edd682d26c18979c13f181c5/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd93bc14a2d0ce2edd682d26c18979c13f181c5/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=0fd93bc14a2d0ce2edd682d26c18979c13f181c5", "patch": "@@ -9,7 +9,7 @@ use std::sync::Arc;\n \n use ra_db::{FileId, FilePosition};\n use ra_syntax::{\n-    SyntaxNode, AstPtr,\n+    SyntaxNode, AstPtr, TextUnit,\n     ast::{self, AstNode, NameOwner},\n     algo::find_node_at_offset,\n };\n@@ -196,13 +196,21 @@ pub fn trait_from_module(\n     Trait { id: ctx.to_def(trait_def) }\n }\n \n-fn resolver_for_node(db: &impl HirDatabase, file_id: FileId, node: &SyntaxNode) -> Resolver {\n+fn resolver_for_node(\n+    db: &impl HirDatabase,\n+    file_id: FileId,\n+    node: &SyntaxNode,\n+    offset: Option<TextUnit>,\n+) -> Resolver {\n     node.ancestors()\n         .find_map(|node| {\n             if ast::Expr::cast(node).is_some() || ast::Block::cast(node).is_some() {\n                 if let Some(func) = function_from_child_node(db, file_id, node) {\n                     let scopes = func.scopes(db);\n-                    let scope = scopes.scope_for(&node);\n+                    let scope = match offset {\n+                        None => scopes.scope_for(&node),\n+                        Some(offset) => scopes.scope_for_offset(offset),\n+                    };\n                     Some(expr::resolver_for_scope(func.body(db), db, scope))\n                 } else {\n                     // FIXME const/static/array length\n@@ -260,7 +268,12 @@ pub enum PathResolution {\n }\n \n impl SourceAnalyzer {\n-    pub fn new(db: &impl HirDatabase, file_id: FileId, node: &SyntaxNode) -> SourceAnalyzer {\n+    pub fn new(\n+        db: &impl HirDatabase,\n+        file_id: FileId,\n+        node: &SyntaxNode,\n+        offset: Option<TextUnit>,\n+    ) -> SourceAnalyzer {\n         let def_with_body = node.ancestors().find_map(|node| {\n             if let Some(src) = ast::FnDef::cast(node) {\n                 return function_from_source(db, file_id, src).map(DefWithBody::from);\n@@ -274,8 +287,7 @@ impl SourceAnalyzer {\n             None\n         });\n         SourceAnalyzer {\n-            //TODO: use scope_for_offset here to get correct scope for completion\n-            resolver: resolver_for_node(db, file_id, node),\n+            resolver: resolver_for_node(db, file_id, node, offset),\n             body_source_map: def_with_body.map(|it| it.body_source_map(db)),\n             infer: def_with_body.map(|it| it.infer(db)),\n         }"}, {"sha": "4413aec7378d48ad7078751b31b8f6a217c0c82f", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fd93bc14a2d0ce2edd682d26c18979c13f181c5/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd93bc14a2d0ce2edd682d26c18979c13f181c5/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=0fd93bc14a2d0ce2edd682d26c18979c13f181c5", "patch": "@@ -17,7 +17,7 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n     let calling_node = FnCallNode::with_node(syntax, position.offset)?;\n     let name_ref = calling_node.name_ref()?;\n \n-    let analyzer = hir::SourceAnalyzer::new(db, position.file_id, name_ref.syntax());\n+    let analyzer = hir::SourceAnalyzer::new(db, position.file_id, name_ref.syntax(), None);\n     let function = match calling_node {\n         FnCallNode::CallExpr(expr) => {\n             //FIXME: apply subst"}, {"sha": "359f2cffa5496711128c36f92d3d8ff49782da28", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0fd93bc14a2d0ce2edd682d26c18979c13f181c5/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd93bc14a2d0ce2edd682d26c18979c13f181c5/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=0fd93bc14a2d0ce2edd682d26c18979c13f181c5", "patch": "@@ -48,7 +48,8 @@ impl<'a> CompletionContext<'a> {\n     ) -> Option<CompletionContext<'a>> {\n         let module = source_binder::module_from_position(db, position);\n         let token = find_token_at_offset(original_file.syntax(), position.offset).left_biased()?;\n-        let analyzer = hir::SourceAnalyzer::new(db, position.file_id, token.parent());\n+        let analyzer =\n+            hir::SourceAnalyzer::new(db, position.file_id, token.parent(), Some(position.offset));\n         let mut ctx = CompletionContext {\n             db,\n             analyzer,"}, {"sha": "517dffbca5f393d51ef1fbd57dd21b53eea47349", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fd93bc14a2d0ce2edd682d26c18979c13f181c5/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd93bc14a2d0ce2edd682d26c18979c13f181c5/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=0fd93bc14a2d0ce2edd682d26c18979c13f181c5", "patch": "@@ -47,7 +47,7 @@ pub(crate) fn reference_definition(\n ) -> ReferenceResult {\n     use self::ReferenceResult::*;\n \n-    let analyzer = hir::SourceAnalyzer::new(db, file_id, name_ref.syntax());\n+    let analyzer = hir::SourceAnalyzer::new(db, file_id, name_ref.syntax(), None);\n \n     // Special cases:\n "}, {"sha": "397b567867a98a24ce9302b4e2b8683992a101a6", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fd93bc14a2d0ce2edd682d26c18979c13f181c5/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd93bc14a2d0ce2edd682d26c18979c13f181c5/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=0fd93bc14a2d0ce2edd682d26c18979c13f181c5", "patch": "@@ -132,7 +132,7 @@ pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Option<String> {\n         .ancestors()\n         .take_while(|it| it.range() == leaf_node.range())\n         .find(|&it| ast::Expr::cast(it).is_some() || ast::Pat::cast(it).is_some())?;\n-    let analyzer = hir::SourceAnalyzer::new(db, frange.file_id, node);\n+    let analyzer = hir::SourceAnalyzer::new(db, frange.file_id, node, None);\n     let ty = if let Some(ty) = ast::Expr::cast(node).and_then(|e| analyzer.type_of(db, e)) {\n         ty\n     } else if let Some(ty) = ast::Pat::cast(node).and_then(|p| analyzer.type_of_pat(db, p)) {"}]}