{"sha": "9c302f55bd07a04305dfa2bd815d2559deb8468f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMzAyZjU1YmQwN2EwNDMwNWRmYTJiZDgxNWQyNTU5ZGViODQ2OGY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-28T18:56:52Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-07T07:50:30Z"}, "message": "normalize in codegen_fulfill_obligations", "tree": {"sha": "2d0511bf4f2ef7487c9192cce60da4ec0dc99966", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d0511bf4f2ef7487c9192cce60da4ec0dc99966"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c302f55bd07a04305dfa2bd815d2559deb8468f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c302f55bd07a04305dfa2bd815d2559deb8468f", "html_url": "https://github.com/rust-lang/rust/commit/9c302f55bd07a04305dfa2bd815d2559deb8468f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c302f55bd07a04305dfa2bd815d2559deb8468f/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5296ac656504883ef3432694ac3c5f3033255641", "url": "https://api.github.com/repos/rust-lang/rust/commits/5296ac656504883ef3432694ac3c5f3033255641", "html_url": "https://github.com/rust-lang/rust/commit/5296ac656504883ef3432694ac3c5f3033255641"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "753d64d6115f65958e48cdf1d0ca44a25bba8489", "filename": "compiler/rustc_trait_selection/src/traits/codegen/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c302f55bd07a04305dfa2bd815d2559deb8468f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c302f55bd07a04305dfa2bd815d2559deb8468f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen%2Fmod.rs?ref=9c302f55bd07a04305dfa2bd815d2559deb8468f", "patch": "@@ -19,11 +19,11 @@ use rustc_middle::ty::{self, TyCtxt};\n /// obligations *could be* resolved if we wanted to.\n /// Assumes that this is run after the entire crate has been successfully type-checked.\n pub fn codegen_fulfill_obligation<'tcx>(\n-    ty: TyCtxt<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n     (param_env, trait_ref): (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>),\n ) -> Result<ImplSource<'tcx, ()>, ErrorReported> {\n-    // Remove any references to regions; this helps improve caching.\n-    let trait_ref = ty.erase_regions(&trait_ref);\n+    // Remove any references to regions and normalize; this helps improve caching.\n+    let trait_ref = tcx.normalize_erasing_regions(param_env, trait_ref);\n \n     debug!(\n         \"codegen_fulfill_obligation(trait_ref={:?}, def_id={:?})\",\n@@ -33,7 +33,7 @@ pub fn codegen_fulfill_obligation<'tcx>(\n \n     // Do the initial selection for the obligation. This yields the\n     // shallow result we are looking for -- that is, what specific impl.\n-    ty.infer_ctxt().enter(|infcx| {\n+    tcx.infer_ctxt().enter(|infcx| {\n         let mut selcx = SelectionContext::new(&infcx);\n \n         let obligation_cause = ObligationCause::dummy();"}]}