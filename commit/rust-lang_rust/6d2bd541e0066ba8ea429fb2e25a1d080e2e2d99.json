{"sha": "6d2bd541e0066ba8ea429fb2e25a1d080e2e2d99", "node_id": "C_kwDOAAsO6NoAKDZkMmJkNTQxZTAwNjZiYThlYTQyOWZiMmUyNWExZDA4MGUyZTJkOTk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-17T17:56:12Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-17T17:56:12Z"}, "message": "use body's param-env when checking if type needs drop", "tree": {"sha": "0b10923133b997f53f675859b691a86f32607fdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b10923133b997f53f675859b691a86f32607fdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d2bd541e0066ba8ea429fb2e25a1d080e2e2d99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2bd541e0066ba8ea429fb2e25a1d080e2e2d99", "html_url": "https://github.com/rust-lang/rust/commit/6d2bd541e0066ba8ea429fb2e25a1d080e2e2d99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d2bd541e0066ba8ea429fb2e25a1d080e2e2d99/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2ecd3af87477147695aa3f6e1237e3185044e62", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2ecd3af87477147695aa3f6e1237e3185044e62", "html_url": "https://github.com/rust-lang/rust/commit/c2ecd3af87477147695aa3f6e1237e3185044e62"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "1f0d0ce04aaa3aebdb023c6a0950c67b78c8b709", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d2bd541e0066ba8ea429fb2e25a1d080e2e2d99/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2bd541e0066ba8ea429fb2e25a1d080e2e2d99/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=6d2bd541e0066ba8ea429fb2e25a1d080e2e2d99", "patch": "@@ -431,9 +431,9 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                 let lhs = &self.thir[lhs];\n                 if let ty::Adt(adt_def, _) = lhs.ty.kind() && adt_def.is_union() {\n                     if let Some((assigned_ty, assignment_span)) = self.assignment_info {\n-                        if assigned_ty.needs_drop(self.tcx, self.tcx.param_env(adt_def.did())) {\n+                        if assigned_ty.needs_drop(self.tcx, self.param_env) {\n                             // This would be unsafe, but should be outright impossible since we reject such unions.\n-                            self.tcx.sess.delay_span_bug(assignment_span, \"union fields that need dropping should be impossible\");\n+                            self.tcx.sess.delay_span_bug(assignment_span, format!(\"union fields that need dropping should be impossible: {assigned_ty}\"));\n                         }\n                     } else {\n                         self.requires_unsafe(expr.span, AccessToUnionField);"}, {"sha": "a2ad96cfc16d2929999300a8000d06dbd6d5f4cc", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d2bd541e0066ba8ea429fb2e25a1d080e2e2d99/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2bd541e0066ba8ea429fb2e25a1d080e2e2d99/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=6d2bd541e0066ba8ea429fb2e25a1d080e2e2d99", "patch": "@@ -219,14 +219,11 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n                     // We have to check the actual type of the assignment, as that determines if the\n                     // old value is being dropped.\n                     let assigned_ty = place.ty(&self.body.local_decls, self.tcx).ty;\n-                    if assigned_ty.needs_drop(\n-                        self.tcx,\n-                        self.tcx.param_env(base_ty.ty_adt_def().unwrap().did()),\n-                    ) {\n+                    if assigned_ty.needs_drop(self.tcx, self.param_env) {\n                         // This would be unsafe, but should be outright impossible since we reject such unions.\n                         self.tcx.sess.delay_span_bug(\n                             self.source_info.span,\n-                            \"union fields that need dropping should be impossible\",\n+                            format!(\"union fields that need dropping should be impossible: {assigned_ty}\")\n                         );\n                     }\n                 } else {"}, {"sha": "175018a7d71a71ac182efea4d7075c2d429dbd42", "filename": "src/test/ui/union/issue-99375.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6d2bd541e0066ba8ea429fb2e25a1d080e2e2d99/src%2Ftest%2Fui%2Funion%2Fissue-99375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2bd541e0066ba8ea429fb2e25a1d080e2e2d99/src%2Ftest%2Fui%2Funion%2Fissue-99375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Fissue-99375.rs?ref=6d2bd541e0066ba8ea429fb2e25a1d080e2e2d99", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+\n+union URes<R: Copy> {\n+    uninit: (),\n+    init: R,\n+}\n+\n+struct Params<F, R: Copy> {\n+    function: F,\n+    result: URes<R>,\n+}\n+\n+unsafe extern \"C\" fn do_call<F, R>(params: *mut Params<F, R>)\n+where\n+    R: Copy,\n+    F: Fn() -> R,\n+{\n+    (*params).result.init = ((*params).function)();\n+}\n+\n+fn main() {}"}]}