{"sha": "a8ff9f2ef9fd29ef937d2d2955c2ad8ee3b4b305", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZmY5ZjJlZjlmZDI5ZWY5MzdkMmQyOTU1YzJhZDhlZTNiNGIzMDU=", "commit": {"author": {"name": "Chris Peterson", "email": "cpeterson@mozilla.com", "date": "2013-01-15T07:36:45Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-18T22:38:46Z"}, "message": "Rename copy_overlapping_memory() to copy_memory()", "tree": {"sha": "cccb0397f554bd8d155ffe005b562fcf7d6f74be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cccb0397f554bd8d155ffe005b562fcf7d6f74be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8ff9f2ef9fd29ef937d2d2955c2ad8ee3b4b305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8ff9f2ef9fd29ef937d2d2955c2ad8ee3b4b305", "html_url": "https://github.com/rust-lang/rust/commit/a8ff9f2ef9fd29ef937d2d2955c2ad8ee3b4b305", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8ff9f2ef9fd29ef937d2d2955c2ad8ee3b4b305/comments", "author": {"login": "cpeterso", "id": 629193, "node_id": "MDQ6VXNlcjYyOTE5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/629193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpeterso", "html_url": "https://github.com/cpeterso", "followers_url": "https://api.github.com/users/cpeterso/followers", "following_url": "https://api.github.com/users/cpeterso/following{/other_user}", "gists_url": "https://api.github.com/users/cpeterso/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpeterso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpeterso/subscriptions", "organizations_url": "https://api.github.com/users/cpeterso/orgs", "repos_url": "https://api.github.com/users/cpeterso/repos", "events_url": "https://api.github.com/users/cpeterso/events{/privacy}", "received_events_url": "https://api.github.com/users/cpeterso/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97b20f8e024096b903b8ec05bd39d0387d9190cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/97b20f8e024096b903b8ec05bd39d0387d9190cb", "html_url": "https://github.com/rust-lang/rust/commit/97b20f8e024096b903b8ec05bd39d0387d9190cb"}], "stats": {"total": 54, "additions": 2, "deletions": 52}, "files": [{"sha": "513a3095292c0f03dc1c15684766cec57a51f5a2", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff9f2ef9fd29ef937d2d2955c2ad8ee3b4b305/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff9f2ef9fd29ef937d2d2955c2ad8ee3b4b305/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=a8ff9f2ef9fd29ef937d2d2955c2ad8ee3b4b305", "patch": "@@ -25,12 +25,6 @@ use vec;\n #[nolink]\n #[abi = \"cdecl\"]\n extern mod libc_ {\n-    #[rust_stack]\n-    unsafe fn memcpy(dest: *mut c_void,\n-                     src: *const c_void,\n-                     n: libc::size_t)\n-                  -> *c_void;\n-\n     #[rust_stack]\n     unsafe fn memmove(dest: *mut c_void,\n                       src: *const c_void,\n@@ -115,27 +109,14 @@ pub pure fn is_null<T>(ptr: *const T) -> bool { ptr == null() }\n #[inline(always)]\n pub pure fn is_not_null<T>(ptr: *const T) -> bool { !is_null(ptr) }\n \n-/**\n- * Copies data from one location to another\n- *\n- * Copies `count` elements (not bytes) from `src` to `dst`. The source\n- * and destination may not overlap.\n- */\n-#[inline(always)]\n-pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n-    let n = count * sys::size_of::<T>();\n-    libc_::memcpy(dst as *mut c_void, src as *c_void, n as size_t);\n-}\n-\n /**\n  * Copies data from one location to another\n  *\n  * Copies `count` elements (not bytes) from `src` to `dst`. The source\n  * and destination may overlap.\n  */\n #[inline(always)]\n-pub unsafe fn copy_overlapping_memory<T>(dst: *mut T, src: *const T,\n-                                         count: uint) {\n+pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n     let n = count * sys::size_of::<T>();\n     libc_::memmove(dst as *mut c_void, src as *c_void, n as size_t);\n }\n@@ -146,7 +127,6 @@ pub unsafe fn set_memory<T>(dst: *mut T, c: int, count: uint) {\n     libc_::memset(dst as *mut c_void, c as libc::c_int, n as size_t);\n }\n \n-\n /**\n   Transform a region pointer - &T - to an unsafe pointer - *T.\n   This is safe, but is implemented with an unsafe block due to"}, {"sha": "e6c2211b593f4c8aa8cea4ed72d239213e7b215e", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a8ff9f2ef9fd29ef937d2d2955c2ad8ee3b4b305/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ff9f2ef9fd29ef937d2d2955c2ad8ee3b4b305/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=a8ff9f2ef9fd29ef937d2d2955c2ad8ee3b4b305", "patch": "@@ -2095,24 +2095,6 @@ pub mod raw {\n             }\n         }\n     }\n-\n-    /**\n-      * Copies data from one vector to another.\n-      *\n-      * Copies `count` bytes from `src` to `dst`. The source and destination\n-      * may overlap.\n-      */\n-    pub unsafe fn copy_overlapping_memory<T>(dst: &[mut T], src: &[const T],\n-                                             count: uint) {\n-        assert dst.len() >= count;\n-        assert src.len() >= count;\n-\n-        do as_mut_buf(dst) |p_dst, _len_dst| {\n-            do as_const_buf(src) |p_src, _len_src| {\n-                ptr::copy_overlapping_memory(p_dst, p_src, count)\n-            }\n-        }\n-    }\n }\n \n /// Operations on `[u8]`\n@@ -2166,24 +2148,12 @@ pub mod bytes {\n       * Copies data from one vector to another.\n       *\n       * Copies `count` bytes from `src` to `dst`. The source and destination\n-      * may not overlap.\n+      * may overlap.\n       */\n     pub fn copy_memory(dst: &[mut u8], src: &[const u8], count: uint) {\n         // Bound checks are done at vec::raw::copy_memory.\n         unsafe { vec::raw::copy_memory(dst, src, count) }\n     }\n-\n-    /**\n-      * Copies data from one vector to another.\n-      *\n-      * Copies `count` bytes from `src` to `dst`. The source and destination\n-      * may overlap.\n-      */\n-    pub fn copy_overlapping_memory(dst: &[mut u8], src: &[const u8],\n-                                   count: uint) {\n-        // Bound checks are done at vec::raw::copy_overlapping_memory.\n-        unsafe { vec::raw::copy_overlapping_memory(dst, src, count) }\n-    }\n }\n \n // ___________________________________________________________________________"}]}