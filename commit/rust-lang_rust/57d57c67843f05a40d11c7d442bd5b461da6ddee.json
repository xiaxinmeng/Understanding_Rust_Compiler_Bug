{"sha": "57d57c67843f05a40d11c7d442bd5b461da6ddee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZDU3YzY3ODQzZjA1YTQwZDExYzdkNDQyYmQ1YjQ2MWRhNmRkZWU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-12T11:21:04Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-26T22:51:34Z"}, "message": "Mutate DocContext from LibEmbargoVisitor and RustdocVisitor\n\nWe have &mut access, so remove the RefCell borrowing", "tree": {"sha": "257f60ca084323da52feeb69b5473b301645ae7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/257f60ca084323da52feeb69b5473b301645ae7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57d57c67843f05a40d11c7d442bd5b461da6ddee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57d57c67843f05a40d11c7d442bd5b461da6ddee", "html_url": "https://github.com/rust-lang/rust/commit/57d57c67843f05a40d11c7d442bd5b461da6ddee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57d57c67843f05a40d11c7d442bd5b461da6ddee/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2b6f4c662ee2b57aeb0bdcd63356721cc6c4894", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b6f4c662ee2b57aeb0bdcd63356721cc6c4894", "html_url": "https://github.com/rust-lang/rust/commit/e2b6f4c662ee2b57aeb0bdcd63356721cc6c4894"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "62900fa9fb15f5caa6a63a241045461427a9dceb", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/57d57c67843f05a40d11c7d442bd5b461da6ddee/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57d57c67843f05a40d11c7d442bd5b461da6ddee/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=57d57c67843f05a40d11c7d442bd5b461da6ddee", "patch": "@@ -136,24 +136,22 @@ pub struct Crate {\n     pub collapsed: bool,\n }\n \n-pub fn krate(cx: &mut DocContext<'a>) -> Crate {\n+pub fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n     use crate::visit_lib::LibEmbargoVisitor;\n \n-    let v = crate::visit_ast::RustdocVisitor::new(&cx);\n-    let module = v.visit(cx.tcx.hir().krate());\n+    let krate = cx.tcx.hir().krate();\n+    let module = crate::visit_ast::RustdocVisitor::new(&mut cx).visit(krate);\n \n-    {\n-        let mut r = cx.renderinfo.borrow_mut();\n-        r.deref_trait_did = cx.tcx.lang_items().deref_trait();\n-        r.deref_mut_trait_did = cx.tcx.lang_items().deref_mut_trait();\n-        r.owned_box_did = cx.tcx.lang_items().owned_box();\n-    }\n+    let mut r = cx.renderinfo.get_mut();\n+    r.deref_trait_did = cx.tcx.lang_items().deref_trait();\n+    r.deref_mut_trait_did = cx.tcx.lang_items().deref_mut_trait();\n+    r.owned_box_did = cx.tcx.lang_items().owned_box();\n \n     let mut externs = Vec::new();\n     for &cnum in cx.tcx.crates().iter() {\n         externs.push((cnum, cnum.clean(cx)));\n         // Analyze doc-reachability for extern items\n-        LibEmbargoVisitor::new(cx).visit_lib(cnum);\n+        LibEmbargoVisitor::new(&mut cx).visit_lib(cnum);\n     }\n     externs.sort_by(|&(a, _), &(b, _)| a.cmp(&b));\n "}, {"sha": "ee330cb32111e545d7b24bc1255ccdb1457d6cea", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57d57c67843f05a40d11c7d442bd5b461da6ddee/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57d57c67843f05a40d11c7d442bd5b461da6ddee/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=57d57c67843f05a40d11c7d442bd5b461da6ddee", "patch": "@@ -41,7 +41,7 @@ fn def_id_to_path(\n // framework from syntax?.\n \n pub struct RustdocVisitor<'a, 'tcx> {\n-    cx: &'a core::DocContext<'tcx>,\n+    cx: &'a mut core::DocContext<'tcx>,\n     view_item_stack: FxHashSet<hir::HirId>,\n     inlining: bool,\n     /// Are the current module and all of its parents public?\n@@ -51,7 +51,7 @@ pub struct RustdocVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     pub fn new(\n-        cx: &'a core::DocContext<'tcx>\n+        cx: &'a mut core::DocContext<'tcx>\n     ) -> RustdocVisitor<'a, 'tcx> {\n         // If the root is re-exported, terminate all recursion.\n         let mut stack = FxHashSet::default();\n@@ -84,7 +84,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         );\n         module.is_crate = true;\n \n-        self.cx.renderinfo.borrow_mut().exact_paths = self.exact_paths;\n+        self.cx.renderinfo.get_mut().exact_paths = self.exact_paths;\n \n         module\n     }\n@@ -292,7 +292,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 Res::Def(DefKind::ForeignTy, did) |\n                 Res::Def(DefKind::TyAlias, did) if !self_is_hidden => {\n                     self.cx.renderinfo\n-                        .borrow_mut()\n+                        .get_mut()\n                         .access_levels.map\n                         .insert(did, AccessLevel::Public);\n                 },"}, {"sha": "b229b5f6884d82381fd1657f24db7d00162eef2f", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/57d57c67843f05a40d11c7d442bd5b461da6ddee/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57d57c67843f05a40d11c7d442bd5b461da6ddee/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=57d57c67843f05a40d11c7d442bd5b461da6ddee", "patch": "@@ -1,22 +1,20 @@\n use rustc::middle::privacy::{AccessLevels, AccessLevel};\n use rustc::hir::def::{Res, DefKind};\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId};\n-use rustc::ty::Visibility;\n+use rustc::ty::{TyCtxt, Visibility};\n use rustc::util::nodemap::FxHashSet;\n use syntax::symbol::sym;\n \n-use std::cell::RefMut;\n-\n use crate::clean::{AttributesExt, NestedAttributesExt};\n \n // FIXME: this may not be exhaustive, but is sufficient for rustdocs current uses\n \n /// Similar to `librustc_privacy::EmbargoVisitor`, but also takes\n /// specific rustdoc annotations into account (i.e., `doc(hidden)`)\n pub struct LibEmbargoVisitor<'a, 'tcx> {\n-    cx: &'a crate::core::DocContext<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n     // Accessibility levels for reachable nodes\n-    access_levels: RefMut<'a, AccessLevels<DefId>>,\n+    access_levels: &'a mut AccessLevels<DefId>,\n     // Previous accessibility level, None means unreachable\n     prev_level: Option<AccessLevel>,\n     // Keeps track of already visited modules, in case a module re-exports its parent\n@@ -25,13 +23,13 @@ pub struct LibEmbargoVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> LibEmbargoVisitor<'a, 'tcx> {\n     pub fn new(\n-        cx: &'a crate::core::DocContext<'tcx>\n+        cx: &'a mut crate::core::DocContext<'tcx>\n     ) -> LibEmbargoVisitor<'a, 'tcx> {\n         LibEmbargoVisitor {\n-            cx,\n-            access_levels: RefMut::map(cx.renderinfo.borrow_mut(), |ri| &mut ri.access_levels),\n+            tcx: cx.tcx,\n+            access_levels: &mut cx.renderinfo.get_mut().access_levels,\n             prev_level: Some(AccessLevel::Public),\n-            visited_mods: FxHashSet::default()\n+            visited_mods: FxHashSet::default(),\n         }\n     }\n \n@@ -43,7 +41,7 @@ impl<'a, 'tcx> LibEmbargoVisitor<'a, 'tcx> {\n \n     // Updates node level and returns the updated level\n     fn update(&mut self, did: DefId, level: Option<AccessLevel>) -> Option<AccessLevel> {\n-        let is_hidden = self.cx.tcx.get_attrs(did).lists(sym::doc).has_word(sym::hidden);\n+        let is_hidden = self.tcx.get_attrs(did).lists(sym::doc).has_word(sym::hidden);\n \n         let old_level = self.access_levels.map.get(&did).cloned();\n         // Accessibility levels can only grow\n@@ -60,9 +58,9 @@ impl<'a, 'tcx> LibEmbargoVisitor<'a, 'tcx> {\n             return;\n         }\n \n-        for item in self.cx.tcx.item_children(def_id).iter() {\n+        for item in self.tcx.item_children(def_id).iter() {\n             if let Some(def_id) = item.res.opt_def_id() {\n-                if self.cx.tcx.def_key(def_id).parent.map_or(false, |d| d == def_id.index) ||\n+                if self.tcx.def_key(def_id).parent.map_or(false, |d| d == def_id.index) ||\n                     item.vis == Visibility::Public {\n                     self.visit_item(item.res);\n                 }\n@@ -72,7 +70,7 @@ impl<'a, 'tcx> LibEmbargoVisitor<'a, 'tcx> {\n \n     fn visit_item(&mut self, res: Res) {\n         let def_id = res.def_id();\n-        let vis = self.cx.tcx.visibility(def_id);\n+        let vis = self.tcx.visibility(def_id);\n         let inherited_item_level = if vis == Visibility::Public {\n             self.prev_level\n         } else {"}]}