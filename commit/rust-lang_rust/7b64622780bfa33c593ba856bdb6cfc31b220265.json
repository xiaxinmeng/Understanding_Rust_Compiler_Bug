{"sha": "7b64622780bfa33c593ba856bdb6cfc31b220265", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNjQ2MjI3ODBiZmEzM2M1OTNiYTg1NmJkYjZjZmMzMWIyMjAyNjU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-13T22:35:04Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-13T22:47:21Z"}, "message": "Don't rename field record patterns directly", "tree": {"sha": "e9e7a8493dd3d158721fb25fa51ccb8dfa6b7f38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9e7a8493dd3d158721fb25fa51ccb8dfa6b7f38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b64622780bfa33c593ba856bdb6cfc31b220265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b64622780bfa33c593ba856bdb6cfc31b220265", "html_url": "https://github.com/rust-lang/rust/commit/7b64622780bfa33c593ba856bdb6cfc31b220265", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b64622780bfa33c593ba856bdb6cfc31b220265/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b045069241f3a610f5ee1ff448e6e8997b5f92f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b045069241f3a610f5ee1ff448e6e8997b5f92f", "html_url": "https://github.com/rust-lang/rust/commit/9b045069241f3a610f5ee1ff448e6e8997b5f92f"}], "stats": {"total": 112, "additions": 73, "deletions": 39}, "files": [{"sha": "08f16b54df2cf8f93f90f39662e82187dec8c056", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 71, "deletions": 36, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/7b64622780bfa33c593ba856bdb6cfc31b220265/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b64622780bfa33c593ba856bdb6cfc31b220265/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=7b64622780bfa33c593ba856bdb6cfc31b220265", "patch": "@@ -183,25 +183,41 @@ fn source_edit_from_references(\n ) -> (FileId, TextEdit) {\n     let mut edit = TextEdit::builder();\n     for reference in references {\n-        match reference.name.as_name_ref() {\n+        let (range, replacement) = match &reference.name {\n             // if the ranges differ then the node is inside a macro call, we can't really attempt\n             // to make special rewrites like shorthand syntax and such, so just rename the node in\n             // the macro input\n-            Some(name_ref) if name_ref.syntax().text_range() == reference.range => {\n-                let (range, replacement) = source_edit_from_name_ref(name_ref, new_name, def);\n-                edit.replace(range, replacement);\n+            NameLike::NameRef(name_ref) if name_ref.syntax().text_range() == reference.range => {\n+                source_edit_from_name_ref(name_ref, new_name, def)\n             }\n-            _ => edit.replace(reference.range, new_name.to_owned()),\n-        };\n+            NameLike::Name(name) if name.syntax().text_range() == reference.range => {\n+                source_edit_from_name(name, new_name)\n+            }\n+            _ => None,\n+        }\n+        .unwrap_or_else(|| (reference.range, new_name.to_string()));\n+        edit.replace(range, replacement);\n     }\n     (file_id, edit.finish())\n }\n \n+fn source_edit_from_name(name: &ast::Name, new_name: &str) -> Option<(TextRange, String)> {\n+    if let Some(_) = ast::RecordPatField::for_field_name(name) {\n+        if let Some(ident_pat) = name.syntax().parent().and_then(ast::IdentPat::cast) {\n+            return Some((\n+                TextRange::empty(ident_pat.syntax().text_range().start()),\n+                format!(\"{}: \", new_name),\n+            ));\n+        }\n+    }\n+    None\n+}\n+\n fn source_edit_from_name_ref(\n     name_ref: &ast::NameRef,\n     new_name: &str,\n     def: Definition,\n-) -> (TextRange, String) {\n+) -> Option<(TextRange, String)> {\n     if let Some(record_field) = ast::RecordExprField::for_name_ref(name_ref) {\n         let rcf_name_ref = record_field.name_ref();\n         let rcf_expr = record_field.expr();\n@@ -215,7 +231,7 @@ fn source_edit_from_name_ref(\n                         // we do not want to erase attributes hence this range start\n                         let s = field_name.syntax().text_range().start();\n                         let e = record_field.syntax().text_range().end();\n-                        return (TextRange::new(s, e), new_name.to_owned());\n+                        return Some((TextRange::new(s, e), new_name.to_owned()));\n                     }\n                 } else if init == *name_ref {\n                     if field_name.text() == new_name {\n@@ -224,32 +240,27 @@ fn source_edit_from_name_ref(\n                         // we do not want to erase attributes hence this range start\n                         let s = field_name.syntax().text_range().start();\n                         let e = record_field.syntax().text_range().end();\n-                        return (TextRange::new(s, e), new_name.to_owned());\n+                        return Some((TextRange::new(s, e), new_name.to_owned()));\n                     }\n                 }\n+                None\n             }\n             // init shorthand\n-            (None, Some(_)) => {\n-                // FIXME: instead of splitting the shorthand, recursively trigger a rename of the\n-                // other name https://github.com/rust-analyzer/rust-analyzer/issues/6547\n-                match def {\n-                    Definition::Field(_) => {\n-                        mark::hit!(test_rename_field_in_field_shorthand);\n-                        let s = name_ref.syntax().text_range().start();\n-                        return (TextRange::empty(s), format!(\"{}: \", new_name));\n-                    }\n-                    Definition::Local(_) => {\n-                        mark::hit!(test_rename_local_in_field_shorthand);\n-                        let s = name_ref.syntax().text_range().end();\n-                        return (TextRange::empty(s), format!(\": {}\", new_name));\n-                    }\n-                    _ => {}\n-                }\n+            // FIXME: instead of splitting the shorthand, recursively trigger a rename of the\n+            // other name https://github.com/rust-analyzer/rust-analyzer/issues/6547\n+            (None, Some(_)) if matches!(def, Definition::Field(_)) => {\n+                mark::hit!(test_rename_field_in_field_shorthand);\n+                let s = name_ref.syntax().text_range().start();\n+                Some((TextRange::empty(s), format!(\"{}: \", new_name)))\n+            }\n+            (None, Some(_)) if matches!(def, Definition::Local(_)) => {\n+                mark::hit!(test_rename_local_in_field_shorthand);\n+                let s = name_ref.syntax().text_range().end();\n+                Some((TextRange::empty(s), format!(\": {}\", new_name)))\n             }\n-            _ => {}\n+            _ => None,\n         }\n-    }\n-    if let Some(record_field) = ast::RecordPatField::for_field_name_ref(name_ref) {\n+    } else if let Some(record_field) = ast::RecordPatField::for_field_name_ref(name_ref) {\n         let rcf_name_ref = record_field.name_ref();\n         let rcf_pat = record_field.pat();\n         match (rcf_name_ref, rcf_pat) {\n@@ -262,13 +273,16 @@ fn source_edit_from_name_ref(\n                     // we do not want to erase attributes hence this range start\n                     let s = field_name.syntax().text_range().start();\n                     let e = record_field.syntax().text_range().end();\n-                    return (TextRange::new(s, e), new_name.to_owned());\n+                    Some((TextRange::new(s, e), pat.to_string()))\n+                } else {\n+                    None\n                 }\n             }\n-            _ => {}\n+            _ => None,\n         }\n+    } else {\n+        None\n     }\n-    (name_ref.syntax().text_range(), new_name.to_owned())\n }\n \n fn rename_mod(\n@@ -1491,24 +1505,24 @@ fn foo(i: i32) -> Foo {\n     }\n \n     #[test]\n-    fn test_struct_field_destructure_into_shorthand() {\n+    fn test_struct_field_pat_into_shorthand() {\n         mark::check!(test_rename_field_put_init_shorthand_pat);\n         check(\n             \"baz\",\n             r#\"\n struct Foo { i$0: i32 }\n \n fn foo(foo: Foo) {\n-    let Foo { i: baz } = foo;\n-    let _ = baz;\n+    let Foo { i: ref baz @ qux } = foo;\n+    let _ = qux;\n }\n \"#,\n             r#\"\n struct Foo { baz: i32 }\n \n fn foo(foo: Foo) {\n-    let Foo { baz } = foo;\n-    let _ = baz;\n+    let Foo { ref baz @ qux } = foo;\n+    let _ = qux;\n }\n \"#,\n         );\n@@ -1581,6 +1595,27 @@ fn foo(Foo { i: bar }: foo) -> i32 {\n         )\n     }\n \n+    #[test]\n+    fn test_struct_field_complex_ident_pat() {\n+        check(\n+            \"baz\",\n+            r#\"\n+struct Foo { i$0: i32 }\n+\n+fn foo(foo: Foo) {\n+    let Foo { ref i } = foo;\n+}\n+\"#,\n+            r#\"\n+struct Foo { baz: i32 }\n+\n+fn foo(foo: Foo) {\n+    let Foo { baz: ref i } = foo;\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_rename_lifetimes() {\n         mark::check!(rename_lifetime);"}, {"sha": "307e150e944b618ffae0cc6b42af7c4a2f195446", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7b64622780bfa33c593ba856bdb6cfc31b220265/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b64622780bfa33c593ba856bdb6cfc31b220265/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=7b64622780bfa33c593ba856bdb6cfc31b220265", "patch": "@@ -3,12 +3,11 @@\n \n use std::fmt;\n \n-use ast::AttrsOwner;\n use itertools::Itertools;\n use parser::SyntaxKind;\n \n use crate::{\n-    ast::{self, support, AstNode, AstToken, NameOwner, SyntaxNode},\n+    ast::{self, support, AstNode, AstToken, AttrsOwner, NameOwner, SyntaxNode},\n     SmolStr, SyntaxElement, SyntaxToken, T,\n };\n \n@@ -324,7 +323,7 @@ impl ast::RecordPatField {\n \n     pub fn for_field_name(field_name: &ast::Name) -> Option<ast::RecordPatField> {\n         let candidate =\n-            field_name.syntax().ancestors().nth(3).and_then(ast::RecordPatField::cast)?;\n+            field_name.syntax().ancestors().nth(2).and_then(ast::RecordPatField::cast)?;\n         match candidate.field_name()? {\n             NameOrNameRef::Name(name) if name == *field_name => Some(candidate),\n             _ => None,"}]}