{"sha": "dda916bc4d51383fcf84f736bd12c7a77c445fb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYTkxNmJjNGQ1MTM4M2ZjZjg0ZjczNmJkMTJjN2E3N2M0NDVmYjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-11T15:17:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-11T15:32:22Z"}, "message": "fix tests", "tree": {"sha": "1d1a8246105eba1a16fd066365ea095ff0377740", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d1a8246105eba1a16fd066365ea095ff0377740"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dda916bc4d51383fcf84f736bd12c7a77c445fb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dda916bc4d51383fcf84f736bd12c7a77c445fb0", "html_url": "https://github.com/rust-lang/rust/commit/dda916bc4d51383fcf84f736bd12c7a77c445fb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dda916bc4d51383fcf84f736bd12c7a77c445fb0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a5f74a24f726a839f3a0e154cfadec23040e14c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a5f74a24f726a839f3a0e154cfadec23040e14c", "html_url": "https://github.com/rust-lang/rust/commit/8a5f74a24f726a839f3a0e154cfadec23040e14c"}], "stats": {"total": 206, "additions": 108, "deletions": 98}, "files": [{"sha": "8d2ff561ac6304e67436560e8c182e1ad17b387f", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 19, "deletions": 35, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/dda916bc4d51383fcf84f736bd12c7a77c445fb0/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda916bc4d51383fcf84f736bd12c7a77c445fb0/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=dda916bc4d51383fcf84f736bd12c7a77c445fb0", "patch": "@@ -85,31 +85,32 @@ fn name_definition(\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::assert_eq_dbg;\n     use crate::mock_analysis::analysis_and_position;\n \n+    fn check_goto(fixuture: &str, expected: &str) {\n+        let (analysis, pos) = analysis_and_position(fixuture);\n+\n+        let mut navs = analysis.goto_definition(pos).unwrap().unwrap().info;\n+        assert_eq!(navs.len(), 1);\n+        let nav = navs.pop().unwrap();\n+        nav.assert_match(expected);\n+    }\n+\n     #[test]\n     fn goto_definition_works_in_items() {\n-        let (analysis, pos) = analysis_and_position(\n+        check_goto(\n             \"\n             //- /lib.rs\n             struct Foo;\n             enum E { X(Foo<|>) }\n             \",\n-        );\n-\n-        let symbols = analysis.goto_definition(pos).unwrap().unwrap();\n-        assert_eq_dbg(\n-            r#\"[NavigationTarget { file_id: FileId(1), name: \"Foo\",\n-                                   kind: STRUCT_DEF, range: [0; 11),\n-                                   ptr: Some(LocalSyntaxPtr { range: [0; 11), kind: STRUCT_DEF }) }]\"#,\n-            &symbols,\n+            \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n         );\n     }\n \n     #[test]\n     fn goto_definition_resolves_correct_name() {\n-        let (analysis, pos) = analysis_and_position(\n+        check_goto(\n             \"\n             //- /lib.rs\n             use a::Foo;\n@@ -121,47 +122,30 @@ mod tests {\n             //- /b.rs\n             struct Foo;\n             \",\n-        );\n-\n-        let symbols = analysis.goto_definition(pos).unwrap().unwrap();\n-        assert_eq_dbg(\n-            r#\"[NavigationTarget { file_id: FileId(2), name: \"Foo\",\n-                                   kind: STRUCT_DEF, range: [0; 11),\n-                                   ptr: Some(LocalSyntaxPtr { range: [0; 11), kind: STRUCT_DEF }) }]\"#,\n-            &symbols,\n+            \"Foo STRUCT_DEF FileId(2) [0; 11) [7; 10)\",\n         );\n     }\n \n     #[test]\n     fn goto_definition_works_for_module_declaration() {\n-        let (analysis, pos) = analysis_and_position(\n+        check_goto(\n             \"\n             //- /lib.rs\n             mod <|>foo;\n             //- /foo.rs\n             // empty\n-        \",\n-        );\n-\n-        let symbols = analysis.goto_definition(pos).unwrap().unwrap();\n-        assert_eq_dbg(\n-            r#\"[NavigationTarget { file_id: FileId(2), name: \"foo\", kind: MODULE, range: [0; 0), ptr: None }]\"#,\n-            &symbols,\n+            \",\n+            \"foo SOURCE_FILE FileId(2) [0; 10)\",\n         );\n \n-        let (analysis, pos) = analysis_and_position(\n+        check_goto(\n             \"\n             //- /lib.rs\n             mod <|>foo;\n             //- /foo/mod.rs\n             // empty\n-        \",\n-        );\n-\n-        let symbols = analysis.goto_definition(pos).unwrap().unwrap();\n-        assert_eq_dbg(\n-            r#\"[NavigationTarget { file_id: FileId(2), name: \"foo\", kind: MODULE, range: [0; 0), ptr: None }]\"#,\n-            &symbols,\n+            \",\n+            \"foo SOURCE_FILE FileId(2) [0; 10)\",\n         );\n     }\n }"}, {"sha": "f544ffa6d129f036f66bb9749d3e592e682ccae9", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dda916bc4d51383fcf84f736bd12c7a77c445fb0/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda916bc4d51383fcf84f736bd12c7a77c445fb0/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=dda916bc4d51383fcf84f736bd12c7a77c445fb0", "patch": "@@ -92,7 +92,7 @@ impl NavigationTarget {\n         let source_file = source_file.syntax();\n         let node = source_file\n             .descendants()\n-            .find(|node| node.kind() == self.kind() && node.range() == self.range())?\n+            .find(|node| node.kind() == self.kind() && node.range() == self.full_range())?\n             .to_owned();\n         Some(node)\n     }"}, {"sha": "ba4aa0fd5790731a69e87b5c1bea234e125cdbed", "filename": "crates/ra_ide_api/src/imp.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dda916bc4d51383fcf84f736bd12c7a77c445fb0/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda916bc4d51383fcf84f736bd12c7a77c445fb0/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimp.rs?ref=dda916bc4d51383fcf84f736bd12c7a77c445fb0", "patch": "@@ -15,7 +15,7 @@ use ra_syntax::{\n \n use crate::{\n     AnalysisChange,\n-    Cancelable, NavigationTarget,\n+    Cancelable,\n     CrateId, db, Diagnostic, FileId, FilePosition, FileRange, FileSystemEdit,\n     Query, RootChange, SourceChange, SourceFileEdit,\n     symbol_index::{LibrarySymbolsQuery, FileSymbol},\n@@ -98,19 +98,6 @@ impl db::RootDatabase {\n }\n \n impl db::RootDatabase {\n-    /// This returns `Vec` because a module may be included from several places. We\n-    /// don't handle this case yet though, so the Vec has length at most one.\n-    pub(crate) fn parent_module(\n-        &self,\n-        position: FilePosition,\n-    ) -> Cancelable<Vec<NavigationTarget>> {\n-        let module = match source_binder::module_from_position(self, position)? {\n-            None => return Ok(Vec::new()),\n-            Some(it) => it,\n-        };\n-        let nav = NavigationTarget::from_module(self, module)?;\n-        Ok(vec![nav])\n-    }\n     /// Returns `Vec` for the same reason as `parent_module`\n     pub(crate) fn crate_for(&self, file_id: FileId) -> Cancelable<Vec<CrateId>> {\n         let module = match source_binder::module_from_file_id(self, file_id)? {"}, {"sha": "6155d903a0cd3133e90e484606eed6f707d8425a", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dda916bc4d51383fcf84f736bd12c7a77c445fb0/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda916bc4d51383fcf84f736bd12c7a77c445fb0/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=dda916bc4d51383fcf84f736bd12c7a77c445fb0", "patch": "@@ -31,6 +31,7 @@ mod extend_selection;\n mod hover;\n mod call_info;\n mod syntax_highlighting;\n+mod parent_module;\n \n use std::{fmt, sync::Arc};\n \n@@ -414,7 +415,7 @@ impl Analysis {\n \n     /// Returns a `mod name;` declaration which created the current module.\n     pub fn parent_module(&self, position: FilePosition) -> Cancelable<Vec<NavigationTarget>> {\n-        self.with_db(|db| db.parent_module(position))?\n+        self.with_db(|db| parent_module::parent_module(db, position))?\n     }\n \n     /// Returns crates this file belongs too."}, {"sha": "8b29c3a977e265faa8c714cefbbec08034001026", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/dda916bc4d51383fcf84f736bd12c7a77c445fb0/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda916bc4d51383fcf84f736bd12c7a77c445fb0/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=dda916bc4d51383fcf84f736bd12c7a77c445fb0", "patch": "@@ -17,7 +17,7 @@ pub struct NavigationTarget {\n     file_id: FileId,\n     name: SmolStr,\n     kind: SyntaxKind,\n-    range: TextRange,\n+    full_range: TextRange,\n     focus_range: Option<TextRange>,\n     // Should be DefId ideally\n     ptr: Option<LocalSyntaxPtr>,\n@@ -36,11 +36,11 @@ impl NavigationTarget {\n         self.file_id\n     }\n \n-    pub fn range(&self) -> TextRange {\n-        self.range\n+    pub fn full_range(&self) -> TextRange {\n+        self.full_range\n     }\n \n-    /// A \"most interesting\" range withing the `range`.\n+    /// A \"most interesting\" range withing the `range_full`.\n     ///\n     /// Typically, `range` is the whole syntax node, including doc comments, and\n     /// `focus_range` is the range of the identifier.\n@@ -53,7 +53,7 @@ impl NavigationTarget {\n             file_id: symbol.file_id,\n             name: symbol.name.clone(),\n             kind: symbol.ptr.kind(),\n-            range: symbol.ptr.range(),\n+            full_range: symbol.ptr.range(),\n             focus_range: None,\n             ptr: Some(symbol.ptr.clone()),\n         }\n@@ -66,7 +66,7 @@ impl NavigationTarget {\n         NavigationTarget {\n             file_id,\n             name: entry.name().to_string().into(),\n-            range: entry.ptr().range(),\n+            full_range: entry.ptr().range(),\n             focus_range: None,\n             kind: NAME,\n             ptr: None,\n@@ -118,6 +118,27 @@ impl NavigationTarget {\n         Ok(Some(res))\n     }\n \n+    #[cfg(test)]\n+    pub(crate) fn assert_match(&self, expected: &str) {\n+        let actual = self.debug_render();\n+        test_utils::assert_eq_text!(expected.trim(), actual.trim(),);\n+    }\n+\n+    #[cfg(test)]\n+    pub(crate) fn debug_render(&self) -> String {\n+        let mut buf = format!(\n+            \"{} {:?} {:?} {:?}\",\n+            self.name(),\n+            self.kind(),\n+            self.file_id(),\n+            self.full_range()\n+        );\n+        if let Some(focus_range) = self.focus_range() {\n+            buf.push_str(&format!(\" {:?}\", focus_range))\n+        }\n+        buf\n+    }\n+\n     fn from_named(file_id: FileId, node: &impl ast::NameOwner) -> NavigationTarget {\n         let name = node.name().map(|it| it.text().clone()).unwrap_or_default();\n         let focus_range = node.name().map(|it| it.syntax().range());\n@@ -134,7 +155,7 @@ impl NavigationTarget {\n             file_id,\n             name,\n             kind: node.kind(),\n-            range: node.range(),\n+            full_range: node.range(),\n             focus_range,\n             ptr: Some(LocalSyntaxPtr::new(node)),\n         }"}, {"sha": "d345839a35006a427cdd9a7b33a8fe31da0b16d1", "filename": "crates/ra_ide_api/src/parent_module.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/dda916bc4d51383fcf84f736bd12c7a77c445fb0/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda916bc4d51383fcf84f736bd12c7a77c445fb0/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs?ref=dda916bc4d51383fcf84f736bd12c7a77c445fb0", "patch": "@@ -0,0 +1,52 @@\n+use ra_db::{Cancelable, FilePosition};\n+\n+use crate::{NavigationTarget, db::RootDatabase};\n+\n+/// This returns `Vec` because a module may be included from several places. We\n+/// don't handle this case yet though, so the Vec has length at most one.\n+pub(crate) fn parent_module(\n+    db: &RootDatabase,\n+    position: FilePosition,\n+) -> Cancelable<Vec<NavigationTarget>> {\n+    let module = match hir::source_binder::module_from_position(db, position)? {\n+        None => return Ok(Vec::new()),\n+        Some(it) => it,\n+    };\n+    let nav = NavigationTarget::from_module(db, module)?;\n+    Ok(vec![nav])\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::mock_analysis::analysis_and_position;\n+\n+    #[test]\n+    fn test_resolve_parent_module() {\n+        let (analysis, pos) = analysis_and_position(\n+            \"\n+            //- /lib.rs\n+            mod foo;\n+            //- /foo.rs\n+            <|>// empty\n+            \",\n+        );\n+        let nav = analysis.parent_module(pos).unwrap().pop().unwrap();\n+        nav.assert_match(\"foo SOURCE_FILE FileId(2) [0; 10)\");\n+    }\n+\n+    #[test]\n+    fn test_resolve_parent_module_for_inline() {\n+        let (analysis, pos) = analysis_and_position(\n+            \"\n+            //- /lib.rs\n+            mod foo {\n+                mod bar {\n+                    mod baz { <|> }\n+                }\n+            }\n+            \",\n+        );\n+        let nav = analysis.parent_module(pos).unwrap().pop().unwrap();\n+        nav.assert_match(\"baz MODULE FileId(1) [32; 44)\");\n+    }\n+}"}, {"sha": "7dc1dba73ae564e308a5cd66be6689579c8e6483", "filename": "crates/ra_ide_api/tests/test/main.rs", "status": "modified", "additions": 2, "deletions": 38, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/dda916bc4d51383fcf84f736bd12c7a77c445fb0/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda916bc4d51383fcf84f736bd12c7a77c445fb0/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs?ref=dda916bc4d51383fcf84f736bd12c7a77c445fb0", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::TextRange;\n use test_utils::{assert_eq_dbg, assert_eq_text};\n \n use ra_ide_api::{\n-    mock_analysis::{analysis_and_position, single_file, single_file_with_position, MockAnalysis},\n+    mock_analysis::{single_file, single_file_with_position, MockAnalysis},\n     AnalysisChange, CrateGraph, FileId, Query\n };\n \n@@ -34,42 +34,6 @@ fn test_unresolved_module_diagnostic_no_diag_for_inline_mode() {\n     assert_eq_dbg(r#\"[]\"#, &diagnostics);\n }\n \n-#[test]\n-fn test_resolve_parent_module() {\n-    let (analysis, pos) = analysis_and_position(\n-        \"\n-        //- /lib.rs\n-        mod foo;\n-        //- /foo.rs\n-        <|>// empty\n-    \",\n-    );\n-    let symbols = analysis.parent_module(pos).unwrap();\n-    assert_eq_dbg(\n-        r#\"[NavigationTarget { file_id: FileId(1), name: \"foo\", kind: MODULE, range: [4; 7), ptr: None }]\"#,\n-        &symbols,\n-    );\n-}\n-\n-#[test]\n-fn test_resolve_parent_module_for_inline() {\n-    let (analysis, pos) = analysis_and_position(\n-        \"\n-        //- /lib.rs\n-        mod foo {\n-            mod bar {\n-                mod baz { <|> }\n-            }\n-        }\n-    \",\n-    );\n-    let symbols = analysis.parent_module(pos).unwrap();\n-    assert_eq_dbg(\n-        r#\"[NavigationTarget { file_id: FileId(1), name: \"baz\", kind: MODULE, range: [36; 39), ptr: None }]\"#,\n-        &symbols,\n-    );\n-}\n-\n #[test]\n fn test_resolve_crate_root() {\n     let mock = MockAnalysis::with_files(\n@@ -245,5 +209,5 @@ pub trait HirDatabase: SyntaxDatabase {}\n     let mut symbols = analysis.symbol_search(Query::new(\"Hir\".into())).unwrap();\n     let s = symbols.pop().unwrap();\n     assert_eq!(s.name(), \"HirDatabase\");\n-    assert_eq!(s.range(), TextRange::from_to(33.into(), 44.into()));\n+    assert_eq!(s.full_range(), TextRange::from_to(33.into(), 44.into()));\n }"}, {"sha": "76fa98cbeb9b89d4a05315e624035bde75b45c56", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dda916bc4d51383fcf84f736bd12c7a77c445fb0/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda916bc4d51383fcf84f736bd12c7a77c445fb0/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=dda916bc4d51383fcf84f736bd12c7a77c445fb0", "patch": "@@ -345,7 +345,8 @@ impl TryConvWith for &NavigationTarget {\n     type Output = Location;\n     fn try_conv_with(self, world: &ServerWorld) -> Result<Location> {\n         let line_index = world.analysis().file_line_index(self.file_id());\n-        to_location(self.file_id(), self.range(), &world, &line_index)\n+        let range = self.focus_range().unwrap_or(self.full_range());\n+        to_location(self.file_id(), range, &world, &line_index)\n     }\n }\n \n@@ -361,7 +362,7 @@ pub fn to_location_link(\n     let res = LocationLink {\n         origin_selection_range: Some(target.range.conv_with(line_index)),\n         target_uri: url.to_string(),\n-        target_range: target.info.range().conv_with(&tgt_line_index),\n+        target_range: target.info.full_range().conv_with(&tgt_line_index),\n         target_selection_range: target\n             .info\n             .focus_range()"}]}