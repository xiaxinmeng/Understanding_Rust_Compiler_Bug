{"sha": "0c39762dd620c278f1defa42394f09293e1a98b9", "node_id": "C_kwDOAAsO6NoAKDBjMzk3NjJkZDYyMGMyNzhmMWRlZmE0MjM5NGYwOTI5M2UxYTk4Yjk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-11T05:20:37Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-11T05:21:02Z"}, "message": "Use fake substs to check for `Self: Sized` predicates on method receivers", "tree": {"sha": "8cef46f2d960f1a4374854e5f8857f9af888031d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cef46f2d960f1a4374854e5f8857f9af888031d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c39762dd620c278f1defa42394f09293e1a98b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c39762dd620c278f1defa42394f09293e1a98b9", "html_url": "https://github.com/rust-lang/rust/commit/0c39762dd620c278f1defa42394f09293e1a98b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c39762dd620c278f1defa42394f09293e1a98b9/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c396bb3b8a16b1f2762b7c6078dc3e023f6a2493", "url": "https://api.github.com/repos/rust-lang/rust/commits/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493", "html_url": "https://github.com/rust-lang/rust/commit/c396bb3b8a16b1f2762b7c6078dc3e023f6a2493"}], "stats": {"total": 85, "additions": 74, "deletions": 11}, "files": [{"sha": "b14f3d6de4ef1be75c45b024136dd6a31328c41e", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0c39762dd620c278f1defa42394f09293e1a98b9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c39762dd620c278f1defa42394f09293e1a98b9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=0c39762dd620c278f1defa42394f09293e1a98b9", "patch": "@@ -81,11 +81,25 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         let rcvr_substs = self.fresh_receiver_substs(self_ty, &pick);\n         let all_substs = self.instantiate_method_substs(&pick, segment, rcvr_substs);\n \n-        debug!(\"all_substs={:?}\", all_substs);\n+        debug!(\"rcvr_substs={rcvr_substs:?}, all_substs={all_substs:?}\");\n \n         // Create the final signature for the method, replacing late-bound regions.\n         let (method_sig, method_predicates) = self.instantiate_method_sig(&pick, all_substs);\n \n+        // If there is a `Self: Sized` bound and `Self` is a trait object, it is possible that\n+        // something which derefs to `Self` actually implements the trait and the caller\n+        // wanted to make a static dispatch on it but forgot to import the trait.\n+        // See test `src/test/ui/issue-35976.rs`.\n+        //\n+        // In that case, we'll error anyway, but we'll also re-run the search with all traits\n+        // in scope, and if we find another method which can be used, we'll output an\n+        // appropriate hint suggesting to import the trait.\n+        let filler_substs = rcvr_substs\n+            .extend_to(self.tcx, pick.item.def_id, |def, _| self.tcx.mk_param_from_def(def));\n+        let illegal_sized_bound = self.predicates_require_illegal_sized_bound(\n+            &self.tcx.predicates_of(pick.item.def_id).instantiate(self.tcx, filler_substs),\n+        );\n+\n         // Unify the (adjusted) self type with what the method expects.\n         //\n         // SUBTLE: if we want good error messages, because of \"guessing\" while matching\n@@ -106,16 +120,6 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         // Make sure nobody calls `drop()` explicitly.\n         self.enforce_illegal_method_limitations(&pick);\n \n-        // If there is a `Self: Sized` bound and `Self` is a trait object, it is possible that\n-        // something which derefs to `Self` actually implements the trait and the caller\n-        // wanted to make a static dispatch on it but forgot to import the trait.\n-        // See test `src/test/ui/issue-35976.rs`.\n-        //\n-        // In that case, we'll error anyway, but we'll also re-run the search with all traits\n-        // in scope, and if we find another method which can be used, we'll output an\n-        // appropriate hint suggesting to import the trait.\n-        let illegal_sized_bound = self.predicates_require_illegal_sized_bound(&method_predicates);\n-\n         // Add any trait/regions obligations specified on the method's type parameters.\n         // We won't add these if we encountered an illegal sized bound, so that we can use\n         // a custom error in that case."}, {"sha": "c5ca0326e430c466d8eb9729857da836bf3e2033", "filename": "src/test/ui/methods/issues/issue-61525.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0c39762dd620c278f1defa42394f09293e1a98b9/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c39762dd620c278f1defa42394f09293e1a98b9/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.rs?ref=0c39762dd620c278f1defa42394f09293e1a98b9", "patch": "@@ -0,0 +1,20 @@\n+pub trait Example {\n+    fn query<Q>(self, q: Q);\n+}\n+\n+impl Example for i32 {\n+    fn query<Q>(self, _: Q) {\n+        unimplemented!()\n+    }\n+}\n+\n+mod nested {\n+    use super::Example;\n+    fn example() {\n+        1.query::<dyn ToString>(\"\")\n+        //~^ ERROR the size for values of type `dyn ToString` cannot be known at compilation time\n+        //~| ERROR mismatched types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "aec968d7c44f45538a9c05e5e35997ea7a1ffcaf", "filename": "src/test/ui/methods/issues/issue-61525.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0c39762dd620c278f1defa42394f09293e1a98b9/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c39762dd620c278f1defa42394f09293e1a98b9/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr?ref=0c39762dd620c278f1defa42394f09293e1a98b9", "patch": "@@ -0,0 +1,39 @@\n+error[E0277]: the size for values of type `dyn ToString` cannot be known at compilation time\n+  --> $DIR/issue-61525.rs:14:33\n+   |\n+LL |         1.query::<dyn ToString>(\"\")\n+   |           -----                 ^^ doesn't have a size known at compile-time\n+   |           |\n+   |           required by a bound introduced by this call\n+   |\n+   = help: the trait `Sized` is not implemented for `dyn ToString`\n+note: required by a bound in `Example::query`\n+  --> $DIR/issue-61525.rs:2:14\n+   |\n+LL |     fn query<Q>(self, q: Q);\n+   |              ^ required by this bound in `Example::query`\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL |     fn query<Q: ?Sized>(self, q: Q);\n+   |               ++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-61525.rs:14:33\n+   |\n+LL |         1.query::<dyn ToString>(\"\")\n+   |           --------------------- ^^ expected trait object `dyn ToString`, found `&str`\n+   |           |\n+   |           arguments to this function are incorrect\n+   |\n+   = note: expected trait object `dyn ToString`\n+                 found reference `&'static str`\n+note: associated function defined here\n+  --> $DIR/issue-61525.rs:2:8\n+   |\n+LL |     fn query<Q>(self, q: Q);\n+   |        ^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0277, E0308.\n+For more information about an error, try `rustc --explain E0277`."}]}