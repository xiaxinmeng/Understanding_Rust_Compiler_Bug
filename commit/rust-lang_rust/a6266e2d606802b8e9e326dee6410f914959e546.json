{"sha": "a6266e2d606802b8e9e326dee6410f914959e546", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MjY2ZTJkNjA2ODAyYjhlOWUzMjZkZWU2NDEwZjkxNDk1OWU1NDY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-18T23:50:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-18T23:50:52Z"}, "message": "Rollup merge of #73762 - poliorcetics:trait-keyword, r=KodrAus\n\nDocument the trait keyword\n\nPartial fix of #34601.\n\nThis document the trait keyword. To avoid doing too much and forcing more updates as functionalities evolve, I put two links to the reference, especially for trait objects. This mainly documents the \"big\" parts, not so much the small details that might trip someone experimenting.\n\n@rustbot modify labels: T-doc,C-enhancement", "tree": {"sha": "569fad60dcba93ddaf92d3492b1ed0df92a25c4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/569fad60dcba93ddaf92d3492b1ed0df92a25c4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6266e2d606802b8e9e326dee6410f914959e546", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfE4rcCRBK7hj4Ov3rIwAAdHIIAKDVyPl0fg3BPuAi9uaEjhZZ\nMxjdNFa9CLu23ADuc1TmTZJU6IkfbtdEhpwY+Pun3khV/cTgBQJEIpL1bnJbqohm\nPOX6AbHzA1F4fn0KVJ7qZDLukLBFgTsH418KIJNFuCcEbXIVZDHaaIzWsbrwGSGV\nkOhXdtBJtLrT+3JJP2CEwVMne7OIibK8GPhpGf76Kk+BaEgaYnXCJeJdG+Mu2Vh0\nWzgHIhTTwFhnRDXTafEgZrv7ReaS3NdO5UCiJp4xRZvtCSr0LhJbHgRVIkuqSsmk\nRB17cuxg4TJJvKSxEjk+G7rFbg9GLn5PFJFLLRFyHvfTRvxlPrHEaXpTFhe+N0I=\n=cPIM\n-----END PGP SIGNATURE-----\n", "payload": "tree 569fad60dcba93ddaf92d3492b1ed0df92a25c4e\nparent 479c8ad17c6908bd792dcacb0a3e0b5503903cf4\nparent 8a2f147b5b9756e67dc2299777b8b534bbd73d0b\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595116252 -0700\ncommitter GitHub <noreply@github.com> 1595116252 -0700\n\nRollup merge of #73762 - poliorcetics:trait-keyword, r=KodrAus\n\nDocument the trait keyword\n\nPartial fix of #34601.\n\nThis document the trait keyword. To avoid doing too much and forcing more updates as functionalities evolve, I put two links to the reference, especially for trait objects. This mainly documents the \"big\" parts, not so much the small details that might trip someone experimenting.\n\n@rustbot modify labels: T-doc,C-enhancement\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6266e2d606802b8e9e326dee6410f914959e546", "html_url": "https://github.com/rust-lang/rust/commit/a6266e2d606802b8e9e326dee6410f914959e546", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6266e2d606802b8e9e326dee6410f914959e546/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "479c8ad17c6908bd792dcacb0a3e0b5503903cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/479c8ad17c6908bd792dcacb0a3e0b5503903cf4", "html_url": "https://github.com/rust-lang/rust/commit/479c8ad17c6908bd792dcacb0a3e0b5503903cf4"}, {"sha": "8a2f147b5b9756e67dc2299777b8b534bbd73d0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a2f147b5b9756e67dc2299777b8b534bbd73d0b", "html_url": "https://github.com/rust-lang/rust/commit/8a2f147b5b9756e67dc2299777b8b534bbd73d0b"}], "stats": {"total": 183, "additions": 180, "deletions": 3}, "files": [{"sha": "d985f10ccb486489fe65680c495e9127b851dbd7", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 180, "deletions": 3, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/a6266e2d606802b8e9e326dee6410f914959e546/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6266e2d606802b8e9e326dee6410f914959e546/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=a6266e2d606802b8e9e326dee6410f914959e546", "patch": "@@ -1497,11 +1497,188 @@ mod super_keyword {}\n \n #[doc(keyword = \"trait\")]\n //\n-/// A common interface for a class of types.\n+/// A common interface for a group of types.\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// A `trait` is like an interface that data types can implement. When a type\n+/// implements a trait it can be treated abstractly as that trait using generics\n+/// or trait objects.\n ///\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+/// Traits can be made up of three varieties of associated items:\n+///\n+/// - functions and methods\n+/// - types\n+/// - constants\n+///\n+/// Traits may also contain additional type parameters. Those type parameters\n+/// or the trait itself can be constrained by other traits.\n+///\n+/// Traits can serve as markers or carry other logical semantics that\n+/// aren't expressed through their items. When a type implements that\n+/// trait it is promising to uphold its contract. [`Send`] and [`Sync`] are two\n+/// such marker traits present in the standard library.\n+///\n+/// See the [Reference][Ref-Traits] for a lot more information on traits.\n+///\n+/// # Examples\n+///\n+/// Traits are declared using the `trait` keyword. Types can implement them\n+/// using [`impl`] `Trait` [`for`] `Type`:\n+///\n+/// ```rust\n+/// trait Zero {\n+///     const ZERO: Self;\n+///     fn is_zero(&self) -> bool;\n+/// }\n+///\n+/// impl Zero for i32 {\n+///     const ZERO: Self = 0;\n+///\n+///     fn is_zero(&self) -> bool {\n+///         *self == Self::ZERO\n+///     }\n+/// }\n+///\n+/// assert_eq!(i32::ZERO, 0);\n+/// assert!(i32::ZERO.is_zero());\n+/// assert!(!4.is_zero());\n+/// ```\n+///\n+/// With an associated type:\n+///\n+/// ```rust\n+/// trait Builder {\n+///     type Built;\n+///\n+///     fn build(&self) -> Self::Built;\n+/// }\n+/// ```\n+///\n+/// Traits can be generic, with constraints or without:\n+///\n+/// ```rust\n+/// trait MaybeFrom<T> {\n+///     fn maybe_from(value: T) -> Option<Self>\n+///     where\n+///         Self: Sized;\n+/// }\n+/// ```\n+///\n+/// Traits can build upon the requirements of other traits. In the example\n+/// below `Iterator` is a **supertrait** and `ThreeIterator` is a **subtrait**:\n+///\n+/// ```rust\n+/// trait ThreeIterator: std::iter::Iterator {\n+///     fn next_three(&mut self) -> Option<[Self::Item; 3]>;\n+/// }\n+/// ```\n+///\n+/// Traits can be used in functions, as parameters:\n+///\n+/// ```rust\n+/// # #![allow(dead_code)]\n+/// fn debug_iter<I: Iterator>(it: I) where I::Item: std::fmt::Debug {\n+///     for elem in it {\n+///         println!(\"{:#?}\", elem);\n+///     }\n+/// }\n+///\n+/// // u8_len_1, u8_len_2 and u8_len_3 are equivalent\n+///\n+/// fn u8_len_1(val: impl Into<Vec<u8>>) -> usize {\n+///     val.into().len()\n+/// }\n+///\n+/// fn u8_len_2<T: Into<Vec<u8>>>(val: T) -> usize {\n+///     val.into().len()\n+/// }\n+///\n+/// fn u8_len_3<T>(val: T) -> usize\n+/// where\n+///     T: Into<Vec<u8>>,\n+/// {\n+///     val.into().len()\n+/// }\n+/// ```\n+///\n+/// Or as return types:\n+///\n+/// ```rust\n+/// # #![allow(dead_code)]\n+/// fn from_zero_to(v: u8) -> impl Iterator<Item = u8> {\n+///     (0..v).into_iter()\n+/// }\n+/// ```\n+///\n+/// The use of the [`impl`] keyword in this position allows the function writer\n+/// to hide the concrete type as an implementation detail which can change\n+/// without breaking user's code.\n+///\n+/// # Trait objects\n+///\n+/// A *trait object* is an opaque value of another type that implements a set of\n+/// traits. A trait object implements all specified traits as well as their\n+/// supertraits (if any).\n+///\n+/// The syntax is the following: `dyn BaseTrait + AutoTrait1 + ... AutoTraitN`.\n+/// Only one `BaseTrait` can be used so this will not compile:\n+///\n+/// ```rust,compile_fail,E0225\n+/// trait A {}\n+/// trait B {}\n+///\n+/// let _: Box<dyn A + B>;\n+/// ```\n+///\n+/// Neither will this, which is a syntax error:\n+///\n+/// ```rust,compile_fail\n+/// trait A {}\n+/// trait B {}\n+///\n+/// let _: Box<dyn A + dyn B>;\n+/// ```\n+///\n+/// On the other hand, this is correct:\n+///\n+/// ```rust\n+/// trait A {}\n+///\n+/// let _: Box<dyn A + Send + Sync>;\n+/// ```\n+///\n+/// The [Reference][Ref-Trait-Objects] has more information about trait objects,\n+/// their limitations and the differences between editions.\n+///\n+/// # Unsafe traits\n+///\n+/// Some traits may be unsafe to implement. Using the [`unsafe`] keyword in\n+/// front of the trait's declaration is used to mark this:\n+///\n+/// ```rust\n+/// unsafe trait UnsafeTrait {}\n+///\n+/// unsafe impl UnsafeTrait for i32 {}\n+/// ```\n+///\n+/// # Differences between the 2015 and 2018 editions\n+///\n+/// In the 2015 edition parameters pattern where not needed for traits:\n+///\n+/// ```rust,edition2015\n+/// trait Tr {\n+///     fn f(i32);\n+/// }\n+/// ```\n+///\n+/// This behavior is no longer valid in edition 2018.\n+///\n+/// [`for`]: keyword.for.html\n+/// [`impl`]: keyword.impl.html\n+/// [`unsafe`]: keyword.unsafe.html\n+/// [`Send`]: marker/trait.Send.html\n+/// [`Sync`]: marker/trait.Sync.html\n+/// [Ref-Traits]: ../reference/items/traits.html\n+/// [Ref-Trait-Objects]: ../reference/types/trait-object.html\n mod trait_keyword {}\n \n #[doc(keyword = \"true\")]"}]}