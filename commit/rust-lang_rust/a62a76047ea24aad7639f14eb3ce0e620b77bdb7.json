{"sha": "a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MmE3NjA0N2VhMjRhYWQ3NjM5ZjE0ZWIzY2UwZTYyMGI3N2JkYjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-13T20:35:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-13T20:35:58Z"}, "message": "Auto merge of #77524 - Patryk27:fixes/66228, r=estebank\n\nRework diagnostics for wrong number of generic args (fixes #66228 and #71924)\n\nThis PR reworks the `wrong number of {} arguments` message, so that it provides more details and contextual hints.", "tree": {"sha": "a3a7fb0140d8cc55261f719e566e7221b1d3c41b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3a7fb0140d8cc55261f719e566e7221b1d3c41b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "html_url": "https://github.com/rust-lang/rust/commit/a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bc8b00b4a4e38ccbc3aeec2c123538973c67eba", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bc8b00b4a4e38ccbc3aeec2c123538973c67eba", "html_url": "https://github.com/rust-lang/rust/commit/9bc8b00b4a4e38ccbc3aeec2c123538973c67eba"}, {"sha": "d2f8e398f19b5b3d38646328ec158f50db6b8b06", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2f8e398f19b5b3d38646328ec158f50db6b8b06", "html_url": "https://github.com/rust-lang/rust/commit/d2f8e398f19b5b3d38646328ec158f50db6b8b06"}], "stats": {"total": 3499, "additions": 2760, "deletions": 739}, "files": [{"sha": "e933eb434a1557c0664f431edececf22686c8686", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -242,12 +242,21 @@ impl Into<Option<P<GenericArgs>>> for ParenthesizedArgs {\n /// A path like `Foo(A, B) -> C`.\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct ParenthesizedArgs {\n-    /// Overall span\n+    /// ```text\n+    /// Foo(A, B) -> C\n+    /// ^^^^^^^^^^^^^^\n+    /// ```\n     pub span: Span,\n \n     /// `(A, B)`\n     pub inputs: Vec<P<Ty>>,\n \n+    /// ```text\n+    /// Foo(A, B) -> C\n+    ///    ^^^^^^\n+    /// ```\n+    pub inputs_span: Span,\n+\n     /// `C`\n     pub output: FnRetTy,\n }"}, {"sha": "08695491de756d2a7b71139ceddc34f1bc05d580", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -13,6 +13,7 @@\n #![feature(const_fn_transmute)]\n #![feature(const_panic)]\n #![feature(crate_visibility_modifier)]\n+#![feature(iterator_fold_self)]\n #![feature(label_break_value)]\n #![feature(nll)]\n #![feature(or_patterns)]"}, {"sha": "35de744d274c94ecb13113610879f4fed607b170", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -565,7 +565,7 @@ pub fn noop_visit_parenthesized_parameter_data<T: MutVisitor>(\n     args: &mut ParenthesizedArgs,\n     vis: &mut T,\n ) {\n-    let ParenthesizedArgs { inputs, output, span } = args;\n+    let ParenthesizedArgs { inputs, output, span, .. } = args;\n     visit_vec(inputs, |input| vis.visit_ty(input));\n     noop_visit_fn_ret_ty(output, vis);\n     vis.visit_span(span);"}, {"sha": "9325d4c413941d8c392c20dd28d6064ced9c83bc", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -401,15 +401,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // compatibility, even in contexts like an impl header where\n         // we generally don't permit such things (see #51008).\n         self.with_anonymous_lifetime_mode(AnonymousLifetimeMode::PassThrough, |this| {\n-            let &ParenthesizedArgs { ref inputs, ref output, span } = data;\n+            let ParenthesizedArgs { span, inputs, inputs_span, output } = data;\n             let inputs = this.arena.alloc_from_iter(\n                 inputs.iter().map(|ty| this.lower_ty_direct(ty, ImplTraitContext::disallowed())),\n             );\n             let output_ty = match output {\n                 FnRetTy::Ty(ty) => this.lower_ty(&ty, ImplTraitContext::disallowed()),\n-                FnRetTy::Default(_) => this.arena.alloc(this.ty_tup(span, &[])),\n+                FnRetTy::Default(_) => this.arena.alloc(this.ty_tup(*span, &[])),\n             };\n-            let args = smallvec![GenericArg::Type(this.ty_tup(span, inputs))];\n+            let args = smallvec![GenericArg::Type(this.ty_tup(*inputs_span, inputs))];\n             let binding = this.output_ty_binding(output_ty.span, output_ty);\n             (\n                 GenericArgsCtor { args, bindings: arena_vec![this; binding], parenthesized: true },"}, {"sha": "269916390ed45ab85a6122a7cd96c2bb8af5a761", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 44, "deletions": 11, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -11,9 +11,9 @@ pub use rustc_ast::{CaptureBy, Movability, Mutability};\n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_macros::HashStable_Generic;\n-use rustc_span::def_id::LocalDefId;\n-use rustc_span::source_map::Spanned;\n+use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n+use rustc_span::{def_id::LocalDefId, BytePos};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::asm::InlineAsmRegOrRegClass;\n use rustc_target::spec::abi::Abi;\n@@ -231,7 +231,11 @@ impl<'hir> PathSegment<'hir> {\n         PathSegment { ident, hir_id: None, res: None, infer_args: true, args: None }\n     }\n \n-    pub fn generic_args(&self) -> &GenericArgs<'hir> {\n+    pub fn invalid() -> Self {\n+        Self::from_ident(Ident::invalid())\n+    }\n+\n+    pub fn args(&self) -> &GenericArgs<'hir> {\n         if let Some(ref args) = self.args {\n             args\n         } else {\n@@ -275,19 +279,15 @@ impl GenericArg<'_> {\n         matches!(self, GenericArg::Const(_))\n     }\n \n-    pub fn descr(&self) -> &'static str {\n-        match self {\n-            GenericArg::Lifetime(_) => \"lifetime\",\n-            GenericArg::Type(_) => \"type\",\n-            GenericArg::Const(_) => \"constant\",\n-        }\n+    pub fn is_synthetic(&self) -> bool {\n+        matches!(self, GenericArg::Lifetime(lifetime) if lifetime.name.ident() == Ident::invalid())\n     }\n \n-    pub fn short_descr(&self) -> &'static str {\n+    pub fn descr(&self) -> &'static str {\n         match self {\n             GenericArg::Lifetime(_) => \"lifetime\",\n             GenericArg::Type(_) => \"type\",\n-            GenericArg::Const(_) => \"const\",\n+            GenericArg::Const(_) => \"constant\",\n         }\n     }\n \n@@ -352,6 +352,39 @@ impl GenericArgs<'_> {\n \n         own_counts\n     }\n+\n+    pub fn span(&self) -> Option<Span> {\n+        self.args\n+            .iter()\n+            .filter(|arg| !arg.is_synthetic())\n+            .map(|arg| arg.span())\n+            .fold_first(|span1, span2| span1.to(span2))\n+    }\n+\n+    /// Returns span encompassing arguments and their surrounding `<>` or `()`\n+    pub fn span_ext(&self, sm: &SourceMap) -> Option<Span> {\n+        let mut span = self.span()?;\n+\n+        let (o, c) = if self.parenthesized { ('(', ')') } else { ('<', '>') };\n+\n+        if let Ok(snippet) = sm.span_to_snippet(span) {\n+            let snippet = snippet.as_bytes();\n+\n+            if snippet[0] != (o as u8) || snippet[snippet.len() - 1] != (c as u8) {\n+                span = sm.span_extend_to_prev_char(span, o, true);\n+                span = span.with_lo(span.lo() - BytePos(1));\n+\n+                span = sm.span_extend_to_next_char(span, c, true);\n+                span = span.with_hi(span.hi() + BytePos(1));\n+            }\n+        }\n+\n+        Some(span)\n+    }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.args.is_empty()\n+    }\n }\n \n /// A modifier on a bound, currently this is only used for `?Sized`, where the"}, {"sha": "e82ea310b8cc59c035115e71c791df5082ccec7a", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -157,7 +157,7 @@ where\n }\n \n language_item_table! {\n-//  Variant name,            Name,                    Method name,             Target;\n+//  Variant name,            Name,                     Method name,                Target;\n     Bool,                    sym::bool,                bool_impl,                  Target::Impl;\n     Char,                    sym::char,                char_impl,                  Target::Impl;\n     Str,                     sym::str,                 str_impl,                   Target::Impl;"}, {"sha": "8b55ec6c7059116dfbbfed25901a142e540343b0", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -7,6 +7,7 @@\n #![feature(const_fn)] // For the unsizing cast on `&[]`\n #![feature(const_panic)]\n #![feature(in_band_lifetimes)]\n+#![feature(iterator_fold_self)]\n #![feature(once_cell)]\n #![feature(or_patterns)]\n #![recursion_limit = \"256\"]"}, {"sha": "06599e78932851fb3992344006980006dd0ed67f", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1213,7 +1213,7 @@ impl<'a> State<'a> {\n         self.s.word(\".\");\n         self.print_ident(segment.ident);\n \n-        let generic_args = segment.generic_args();\n+        let generic_args = segment.args();\n         if !generic_args.args.is_empty() || !generic_args.bindings.is_empty() {\n             self.print_generic_args(generic_args, segment.infer_args, true);\n         }\n@@ -1661,19 +1661,15 @@ impl<'a> State<'a> {\n             }\n             if segment.ident.name != kw::PathRoot {\n                 self.print_ident(segment.ident);\n-                self.print_generic_args(\n-                    segment.generic_args(),\n-                    segment.infer_args,\n-                    colons_before_params,\n-                );\n+                self.print_generic_args(segment.args(), segment.infer_args, colons_before_params);\n             }\n         }\n     }\n \n     pub fn print_path_segment(&mut self, segment: &hir::PathSegment<'_>) {\n         if segment.ident.name != kw::PathRoot {\n             self.print_ident(segment.ident);\n-            self.print_generic_args(segment.generic_args(), segment.infer_args, false);\n+            self.print_generic_args(segment.args(), segment.infer_args, false);\n         }\n     }\n \n@@ -1693,7 +1689,7 @@ impl<'a> State<'a> {\n                     if segment.ident.name != kw::PathRoot {\n                         self.print_ident(segment.ident);\n                         self.print_generic_args(\n-                            segment.generic_args(),\n+                            segment.args(),\n                             segment.infer_args,\n                             colons_before_params,\n                         );\n@@ -1705,7 +1701,7 @@ impl<'a> State<'a> {\n                 let item_segment = path.segments.last().unwrap();\n                 self.print_ident(item_segment.ident);\n                 self.print_generic_args(\n-                    item_segment.generic_args(),\n+                    item_segment.args(),\n                     item_segment.infer_args,\n                     colons_before_params,\n                 )\n@@ -1725,7 +1721,7 @@ impl<'a> State<'a> {\n                 self.s.word(\"::\");\n                 self.print_ident(item_segment.ident);\n                 self.print_generic_args(\n-                    item_segment.generic_args(),\n+                    item_segment.args(),\n                     item_segment.infer_args,\n                     colons_before_params,\n                 )"}, {"sha": "064a5b71fc7adac557f0b7d0cb8a54071e46b97e", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -721,21 +721,25 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         &self.raw_proc_macros.unwrap()[pos]\n     }\n \n-    fn item_ident(&self, item_index: DefIndex, sess: &Session) -> Ident {\n+    fn try_item_ident(&self, item_index: DefIndex, sess: &Session) -> Result<Ident, String> {\n         let name = self\n             .def_key(item_index)\n             .disambiguated_data\n             .data\n             .get_opt_name()\n-            .expect(\"no name in item_ident\");\n+            .ok_or_else(|| format!(\"Missing opt name for {:?}\", item_index))?;\n         let span = self\n             .root\n             .tables\n             .ident_span\n             .get(self, item_index)\n-            .map(|data| data.decode((self, sess)))\n-            .unwrap_or_else(|| panic!(\"Missing ident span for {:?} ({:?})\", name, item_index));\n-        Ident::new(name, span)\n+            .ok_or_else(|| format!(\"Missing ident span for {:?} ({:?})\", name, item_index))?\n+            .decode((self, sess));\n+        Ok(Ident::new(name, span))\n+    }\n+\n+    fn item_ident(&self, item_index: DefIndex, sess: &Session) -> Ident {\n+        self.try_item_ident(item_index, sess).unwrap()\n     }\n \n     fn def_kind(&self, index: DefIndex) -> DefKind {"}, {"sha": "9b1992343318d43ae2b5da78c68f4a036774215b", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -129,6 +129,9 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     generator_kind => { cdata.generator_kind(def_id.index) }\n     def_kind => { cdata.def_kind(def_id.index) }\n     def_span => { cdata.get_span(def_id.index, &tcx.sess) }\n+    def_ident_span => {\n+        cdata.try_item_ident(def_id.index, &tcx.sess).ok().map(|ident| ident.span)\n+    }\n     lookup_stability => {\n         cdata.get_stability(def_id.index).map(|s| tcx.intern_stability(s))\n     }"}, {"sha": "f1ef7982c3ed356056f497cf27069aef93e5d6b0", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -881,6 +881,7 @@ rustc_queries! {\n         query def_kind(def_id: DefId) -> DefKind {\n             desc { |tcx| \"looking up definition kind of `{}`\", tcx.def_path_str(def_id) }\n         }\n+\n         query def_span(def_id: DefId) -> Span {\n             desc { |tcx| \"looking up span for `{}`\", tcx.def_path_str(def_id) }\n             // FIXME(mw): DefSpans are not really inputs since they are derived from\n@@ -890,15 +891,23 @@ rustc_queries! {\n             // regardless of HIR hashing.\n             eval_always\n         }\n+\n+        query def_ident_span(def_id: DefId) -> Option<Span> {\n+            desc { |tcx| \"looking up span for `{}`'s identifier\", tcx.def_path_str(def_id) }\n+        }\n+\n         query lookup_stability(def_id: DefId) -> Option<&'tcx attr::Stability> {\n             desc { |tcx| \"looking up stability of `{}`\", tcx.def_path_str(def_id) }\n         }\n+\n         query lookup_const_stability(def_id: DefId) -> Option<&'tcx attr::ConstStability> {\n             desc { |tcx| \"looking up const stability of `{}`\", tcx.def_path_str(def_id) }\n         }\n+\n         query lookup_deprecation_entry(def_id: DefId) -> Option<DeprecationEntry> {\n             desc { |tcx| \"checking whether `{}` is deprecated\", tcx.def_path_str(def_id) }\n         }\n+\n         query item_attrs(def_id: DefId) -> &'tcx [ast::Attribute] {\n             desc { |tcx| \"collecting attributes of `{}`\", tcx.def_path_str(def_id) }\n         }"}, {"sha": "f172790fe5fff9d507276c39aabbbf57ce3de0bb", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -847,7 +847,7 @@ fn foo(&self) -> Self::T { String::new() }\n     }\n \n     /// Given a slice of `hir::GenericBound`s, if any of them corresponds to the `trait_ref`\n-    /// requirement, provide a strucuted suggestion to constrain it to a given type `ty`.\n+    /// requirement, provide a structured suggestion to constrain it to a given type `ty`.\n     fn constrain_generic_bound_associated_type_structured_suggestion(\n         self,\n         db: &mut DiagnosticBuilder<'_>,"}, {"sha": "8068574a38f403091bfe50d87d4fba3b1ae0a170", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -871,19 +871,37 @@ impl<'tcx> Generics {\n         // We could cache this as a property of `GenericParamCount`, but\n         // the aim is to refactor this away entirely eventually and the\n         // presence of this method will be a constant reminder.\n-        let mut own_counts: GenericParamCount = Default::default();\n+        let mut own_counts = GenericParamCount::default();\n \n         for param in &self.params {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => own_counts.lifetimes += 1,\n                 GenericParamDefKind::Type { .. } => own_counts.types += 1,\n                 GenericParamDefKind::Const => own_counts.consts += 1,\n-            };\n+            }\n         }\n \n         own_counts\n     }\n \n+    pub fn own_defaults(&self) -> GenericParamCount {\n+        let mut own_defaults = GenericParamCount::default();\n+\n+        for param in &self.params {\n+            match param.kind {\n+                GenericParamDefKind::Lifetime => (),\n+                GenericParamDefKind::Type { has_default, .. } => {\n+                    own_defaults.types += has_default as usize;\n+                }\n+                GenericParamDefKind::Const => {\n+                    // FIXME(const_generics:defaults)\n+                }\n+            }\n+        }\n+\n+        own_defaults\n+    }\n+\n     pub fn requires_monomorphization(&self, tcx: TyCtxt<'tcx>) -> bool {\n         if self.own_requires_monomorphization() {\n             return true;"}, {"sha": "dd36122f6a10e8d42762c35ba19f7acf12b4dcfb", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -230,10 +230,11 @@ impl<'a> Parser<'a> {\n                 } else {\n                     // `(T, U) -> R`\n                     let (inputs, _) = self.parse_paren_comma_seq(|p| p.parse_ty())?;\n+                    let inputs_span = lo.to(self.prev_token.span);\n                     let span = ident.span.to(self.prev_token.span);\n                     let output =\n                         self.parse_ret_ty(AllowPlus::No, RecoverQPath::No, RecoverReturnSign::No)?;\n-                    ParenthesizedArgs { inputs, output, span }.into()\n+                    ParenthesizedArgs { span, inputs, inputs_span, output }.into()\n                 };\n \n                 PathSegment { ident, args, id: ast::DUMMY_NODE_ID }"}, {"sha": "cc0e99dc6b10c9a3180df6efabf7736810067dac", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1433,7 +1433,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     hir::TyKind::Path(ref qpath) => {\n                         if let QPath::Resolved(_, path) = qpath {\n                             let last_segment = &path.segments[path.segments.len() - 1];\n-                            let generics = last_segment.generic_args();\n+                            let generics = last_segment.args();\n                             for arg in generics.args.iter() {\n                                 if let GenericArg::Lifetime(lt) = arg {\n                                     if lt.name.ident() == name {"}, {"sha": "842ccda6ea8b0c93d3ac9b64edebaa37ae1d237a", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -582,9 +582,9 @@ impl SourceMap {\n     /// Extracts the source surrounding the given `Span` using the `extract_source` function. The\n     /// extract function takes three arguments: a string slice containing the source, an index in\n     /// the slice for the beginning of the span and an index in the slice for the end of the span.\n-    fn span_to_source<F>(&self, sp: Span, extract_source: F) -> Result<String, SpanSnippetError>\n+    fn span_to_source<F, T>(&self, sp: Span, extract_source: F) -> Result<T, SpanSnippetError>\n     where\n-        F: Fn(&str, usize, usize) -> Result<String, SpanSnippetError>,\n+        F: Fn(&str, usize, usize) -> Result<T, SpanSnippetError>,\n     {\n         let local_begin = self.lookup_byte_offset(sp.lo());\n         let local_end = self.lookup_byte_offset(sp.hi());\n@@ -648,10 +648,10 @@ impl SourceMap {\n \n     /// Extends the given `Span` to just after the previous occurrence of `c`. Return the same span\n     /// if no character could be found or if an error occurred while retrieving the code snippet.\n-    pub fn span_extend_to_prev_char(&self, sp: Span, c: char) -> Span {\n+    pub fn span_extend_to_prev_char(&self, sp: Span, c: char, accept_newlines: bool) -> Span {\n         if let Ok(prev_source) = self.span_to_prev_source(sp) {\n-            let prev_source = prev_source.rsplit(c).next().unwrap_or(\"\").trim_start();\n-            if !prev_source.is_empty() && !prev_source.contains('\\n') {\n+            let prev_source = prev_source.rsplit(c).next().unwrap_or(\"\");\n+            if !prev_source.is_empty() && (!prev_source.contains('\\n') || accept_newlines) {\n                 return sp.with_lo(BytePos(sp.lo().0 - prev_source.len() as u32));\n             }\n         }\n@@ -682,6 +682,25 @@ impl SourceMap {\n         sp\n     }\n \n+    /// Returns the source snippet as `String` after the given `Span`.\n+    pub fn span_to_next_source(&self, sp: Span) -> Result<String, SpanSnippetError> {\n+        self.span_to_source(sp, |src, _, end_index| {\n+            src.get(end_index..).map(|s| s.to_string()).ok_or(SpanSnippetError::IllFormedSpan(sp))\n+        })\n+    }\n+\n+    /// Extends the given `Span` to just after the next occurrence of `c`.\n+    pub fn span_extend_to_next_char(&self, sp: Span, c: char, accept_newlines: bool) -> Span {\n+        if let Ok(next_source) = self.span_to_next_source(sp) {\n+            let next_source = next_source.split(c).next().unwrap_or(\"\");\n+            if !next_source.is_empty() && (!next_source.contains('\\n') || accept_newlines) {\n+                return sp.with_hi(BytePos(sp.hi().0 + next_source.len() as u32));\n+            }\n+        }\n+\n+        sp\n+    }\n+\n     /// Given a `Span`, tries to get a shorter span ending before the first occurrence of `char`\n     /// `c`.\n     pub fn span_until_char(&self, sp: Span, c: char) -> Span {"}, {"sha": "b28cc765330d270222858951385f0b2380fc83aa", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -222,6 +222,10 @@ fn def_span(tcx: TyCtxt<'_>, def_id: DefId) -> Span {\n     tcx.hir().span_if_local(def_id).unwrap()\n }\n \n+fn def_ident_span(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Span> {\n+    tcx.hir().get_if_local(def_id).and_then(|node| node.ident()).map(|ident| ident.span)\n+}\n+\n /// If the given `DefId` describes an item belonging to a trait,\n /// returns the `DefId` of the trait that the trait item belongs to;\n /// otherwise, returns `None`.\n@@ -492,6 +496,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         associated_items,\n         adt_sized_constraint,\n         def_span,\n+        def_ident_span,\n         param_env,\n         param_env_reveal_all_normalized,\n         trait_of_item,"}, {"sha": "545c30169b91ebe40f2411aa4c605312847980d2", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -96,7 +96,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let trait_def = self.tcx().trait_def(trait_def_id);\n \n         if !self.tcx().features().unboxed_closures\n-            && trait_segment.generic_args().parenthesized != trait_def.paren_sugar\n+            && trait_segment.args().parenthesized != trait_def.paren_sugar\n         {\n             let sess = &self.tcx().sess.parse_sess;\n             // For now, require that parenthetical notation be used only with `Fn()` etc.\n@@ -126,7 +126,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             })\n                             .unwrap_or_else(|| \"()\".to_string()),\n                         trait_segment\n-                            .generic_args()\n+                            .args()\n                             .bindings\n                             .iter()\n                             .find_map(|b| match (b.ident.name == sym::Output, &b.kind) {"}, {"sha": "0797c9563626047126d8ae1a31da501753a1ad22", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 97, "deletions": 134, "changes": 231, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,10 +1,12 @@\n+use super::IsMethodCall;\n use crate::astconv::{\n     AstConv, CreateSubstsForGenericArgsCtxt, ExplicitLateBound, GenericArgCountMismatch,\n     GenericArgCountResult, GenericArgPosition,\n };\n use crate::errors::AssocTypeBindingNotAllowed;\n+use crate::structured_errors::{StructuredDiagnostic, WrongNumberOfGenericArgs};\n use rustc_ast::ast::ParamKindOrd;\n-use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId, ErrorReported};\n+use rustc_errors::{struct_span_err, Applicability, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::GenericArg;\n@@ -13,7 +15,6 @@ use rustc_middle::ty::{\n };\n use rustc_session::lint::builtin::LATE_BOUND_LIFETIME_ARGUMENTS;\n use rustc_span::{symbol::kw, MultiSpan, Span};\n-\n use smallvec::SmallVec;\n \n impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n@@ -353,20 +354,25 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     pub fn check_generic_arg_count_for_call(\n         tcx: TyCtxt<'_>,\n         span: Span,\n-        def: &ty::Generics,\n+        def_id: DefId,\n+        generics: &ty::Generics,\n         seg: &hir::PathSegment<'_>,\n-        is_method_call: bool,\n+        is_method_call: IsMethodCall,\n     ) -> GenericArgCountResult {\n         let empty_args = hir::GenericArgs::none();\n-        let suppress_mismatch = Self::check_impl_trait(tcx, seg, &def);\n+        let suppress_mismatch = Self::check_impl_trait(tcx, seg, &generics);\n+\n+        let gen_args = seg.args.unwrap_or(&empty_args);\n+        let gen_pos = if is_method_call == IsMethodCall::Yes {\n+            GenericArgPosition::MethodCall\n+        } else {\n+            GenericArgPosition::Value\n+        };\n+        let has_self = generics.parent.is_none() && generics.has_self;\n+        let infer_args = seg.infer_args || suppress_mismatch;\n+\n         Self::check_generic_arg_count(\n-            tcx,\n-            span,\n-            def,\n-            if let Some(ref args) = seg.args { args } else { &empty_args },\n-            if is_method_call { GenericArgPosition::MethodCall } else { GenericArgPosition::Value },\n-            def.parent.is_none() && def.has_self, // `has_self`\n-            seg.infer_args || suppress_mismatch,  // `infer_args`\n+            tcx, span, def_id, seg, generics, gen_args, gen_pos, has_self, infer_args,\n         )\n     }\n \n@@ -375,156 +381,109 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     pub(crate) fn check_generic_arg_count(\n         tcx: TyCtxt<'_>,\n         span: Span,\n-        def: &ty::Generics,\n-        args: &hir::GenericArgs<'_>,\n-        position: GenericArgPosition,\n+        def_id: DefId,\n+        seg: &hir::PathSegment<'_>,\n+        gen_params: &ty::Generics,\n+        gen_args: &hir::GenericArgs<'_>,\n+        gen_pos: GenericArgPosition,\n         has_self: bool,\n         infer_args: bool,\n     ) -> GenericArgCountResult {\n-        // At this stage we are guaranteed that the generic arguments are in the correct order, e.g.\n-        // that lifetimes will proceed types. So it suffices to check the number of each generic\n-        // arguments in order to validate them with respect to the generic parameters.\n-        let param_counts = def.own_counts();\n+        let default_counts = gen_params.own_defaults();\n+        let param_counts = gen_params.own_counts();\n         let named_type_param_count = param_counts.types - has_self as usize;\n-        let arg_counts = args.own_counts();\n-        let infer_lifetimes = position != GenericArgPosition::Type && arg_counts.lifetimes == 0;\n+        let arg_counts = gen_args.own_counts();\n+        let infer_lifetimes = gen_pos != GenericArgPosition::Type && arg_counts.lifetimes == 0;\n \n-        let mut defaults: ty::GenericParamCount = Default::default();\n-        for param in &def.params {\n-            match param.kind {\n-                GenericParamDefKind::Lifetime => {}\n-                GenericParamDefKind::Type { has_default, .. } => {\n-                    defaults.types += has_default as usize\n-                }\n-                GenericParamDefKind::Const => {\n-                    // FIXME(const_generics_defaults)\n-                }\n-            };\n-        }\n-\n-        if position != GenericArgPosition::Type && !args.bindings.is_empty() {\n-            AstConv::prohibit_assoc_ty_binding(tcx, args.bindings[0].span);\n+        if gen_pos != GenericArgPosition::Type && !gen_args.bindings.is_empty() {\n+            Self::prohibit_assoc_ty_binding(tcx, gen_args.bindings[0].span);\n         }\n \n         let explicit_late_bound =\n-            Self::prohibit_explicit_late_bound_lifetimes(tcx, def, args, position);\n-\n-        let check_kind_count = |kind,\n-                                required,\n-                                permitted,\n-                                provided,\n-                                offset,\n-                                unexpected_spans: &mut Vec<Span>,\n-                                silent| {\n-            debug!(\n-                \"check_kind_count: kind: {} required: {} permitted: {} provided: {} offset: {}\",\n-                kind, required, permitted, provided, offset\n-            );\n-            // We enforce the following: `required` <= `provided` <= `permitted`.\n-            // For kinds without defaults (e.g.., lifetimes), `required == permitted`.\n-            // For other kinds (i.e., types), `permitted` may be greater than `required`.\n-            if required <= provided && provided <= permitted {\n-                return true;\n-            }\n+            Self::prohibit_explicit_late_bound_lifetimes(tcx, gen_params, gen_args, gen_pos);\n \n-            if silent {\n-                return false;\n-            }\n+        let mut invalid_args = vec![];\n \n-            // Unfortunately lifetime and type parameter mismatches are typically styled\n-            // differently in diagnostics, which means we have a few cases to consider here.\n-            let (bound, quantifier) = if required != permitted {\n-                if provided < required {\n-                    (required, \"at least \")\n-                } else {\n-                    // provided > permitted\n-                    (permitted, \"at most \")\n+        let mut check_generics =\n+            |kind, expected_min, expected_max, provided, params_offset, args_offset, silent| {\n+                if (expected_min..=expected_max).contains(&provided) {\n+                    return true;\n                 }\n-            } else {\n-                (required, \"\")\n-            };\n \n-            let (spans, labels) = if provided > permitted {\n-                // In the case when the user has provided too many arguments,\n-                // we want to point to the unexpected arguments.\n-                let (spans, labels): (Vec<Span>, Vec<String>) = args.args\n-                    [offset + permitted..offset + provided]\n-                    .iter()\n-                    .map(|arg| (arg.span(), format!(\"unexpected {} argument\", arg.short_descr())))\n-                    .unzip();\n-                unexpected_spans.extend(spans.clone());\n-                (spans, labels)\n-            } else {\n-                (\n-                    vec![span],\n-                    vec![format!(\n-                        \"expected {}{} {} argument{}\",\n-                        quantifier,\n-                        bound,\n-                        kind,\n-                        pluralize!(bound),\n-                    )],\n-                )\n-            };\n+                if silent {\n+                    return false;\n+                }\n \n-            let mut err = tcx.sess.struct_span_err_with_code(\n-                spans.clone(),\n-                &format!(\n-                    \"wrong number of {} arguments: expected {}{}, found {}\",\n-                    kind, quantifier, bound, provided,\n-                ),\n-                DiagnosticId::Error(\"E0107\".into()),\n-            );\n-            for (span, label) in spans.into_iter().zip(labels) {\n-                err.span_label(span, label.as_str());\n-            }\n-            err.emit();\n-            false\n-        };\n+                if provided > expected_max {\n+                    invalid_args.extend(\n+                        gen_args.args[args_offset + expected_max..args_offset + provided]\n+                            .iter()\n+                            .map(|arg| arg.span()),\n+                    );\n+                };\n+\n+                WrongNumberOfGenericArgs {\n+                    tcx,\n+                    kind,\n+                    expected_min,\n+                    expected_max,\n+                    provided,\n+                    params_offset,\n+                    args_offset,\n+                    path_segment: seg,\n+                    gen_params,\n+                    gen_args,\n+                    def_id,\n+                    span,\n+                }\n+                .diagnostic()\n+                .emit();\n \n-        let mut unexpected_spans = vec![];\n+                false\n+            };\n \n-        let lifetime_count_correct = check_kind_count(\n+        let lifetimes_correct = check_generics(\n             \"lifetime\",\n             if infer_lifetimes { 0 } else { param_counts.lifetimes },\n             param_counts.lifetimes,\n             arg_counts.lifetimes,\n+            has_self as usize,\n             0,\n-            &mut unexpected_spans,\n             explicit_late_bound == ExplicitLateBound::Yes,\n         );\n \n-        let kind_str = if param_counts.consts + arg_counts.consts == 0 {\n-            \"type\"\n-        } else if named_type_param_count + arg_counts.types == 0 {\n-            \"const\"\n-        } else {\n-            \"generic\"\n-        };\n+        let args_correct = {\n+            let kind = if param_counts.consts + arg_counts.consts == 0 {\n+                \"type\"\n+            } else if named_type_param_count + arg_counts.types == 0 {\n+                \"const\"\n+            } else {\n+                \"generic\"\n+            };\n \n-        let arg_count_correct = check_kind_count(\n-            kind_str,\n-            if infer_args {\n+            let expected_min = if infer_args {\n                 0\n             } else {\n-                param_counts.consts + named_type_param_count - defaults.types\n-            },\n-            param_counts.consts + named_type_param_count,\n-            arg_counts.consts + arg_counts.types,\n-            arg_counts.lifetimes,\n-            &mut unexpected_spans,\n-            false,\n-        );\n+                param_counts.consts + named_type_param_count - default_counts.types\n+            };\n+\n+            check_generics(\n+                kind,\n+                expected_min,\n+                param_counts.consts + named_type_param_count,\n+                arg_counts.consts + arg_counts.types,\n+                param_counts.lifetimes + has_self as usize,\n+                arg_counts.lifetimes,\n+                false,\n+            )\n+        };\n \n         GenericArgCountResult {\n             explicit_late_bound,\n-            correct: if lifetime_count_correct && arg_count_correct {\n+            correct: if lifetimes_correct && args_correct {\n                 Ok(())\n             } else {\n-                Err(GenericArgCountMismatch {\n-                    reported: Some(ErrorReported),\n-                    invalid_args: unexpected_spans,\n-                })\n+                Err(GenericArgCountMismatch { reported: Some(ErrorReported), invalid_args })\n             },\n         }\n     }\n@@ -549,7 +508,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         if explicit && impl_trait {\n             let spans = seg\n-                .generic_args()\n+                .args()\n                 .args\n                 .iter()\n                 .filter_map(|arg| match arg {\n@@ -594,12 +553,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let infer_lifetimes = position != GenericArgPosition::Type && arg_counts.lifetimes == 0;\n \n         if infer_lifetimes {\n-            ExplicitLateBound::No\n-        } else if let Some(span_late) = def.has_late_bound_regions {\n+            return ExplicitLateBound::No;\n+        }\n+\n+        if let Some(span_late) = def.has_late_bound_regions {\n             let msg = \"cannot specify lifetime arguments explicitly \\\n                        if late bound lifetime parameters are present\";\n             let note = \"the late bound lifetime parameter is introduced here\";\n             let span = args.args[0].span();\n+\n             if position == GenericArgPosition::Value\n                 && arg_counts.lifetimes != param_counts.lifetimes\n             {\n@@ -616,6 +578,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     |lint| lint.build(msg).emit(),\n                 );\n             }\n+\n             ExplicitLateBound::Yes\n         } else {\n             ExplicitLateBound::No"}, {"sha": "9a2f69da32e81fe48c9e3056161f3b2e592007b0", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -138,6 +138,12 @@ pub enum ExplicitLateBound {\n     No,\n }\n \n+#[derive(Copy, Clone, PartialEq)]\n+pub enum IsMethodCall {\n+    Yes,\n+    No,\n+}\n+\n /// Denotes the \"position\" of a generic argument, indicating if it is a generic type,\n /// generic function or generic method call.\n #[derive(Copy, Clone, PartialEq)]\n@@ -252,7 +258,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             span,\n             def_id,\n             &[],\n-            item_segment.generic_args(),\n+            item_segment,\n+            item_segment.args(),\n             item_segment.infer_args,\n             None,\n         );\n@@ -300,6 +307,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         span: Span,\n         def_id: DefId,\n         parent_substs: &[subst::GenericArg<'tcx>],\n+        seg: &hir::PathSegment<'_>,\n         generic_args: &'a hir::GenericArgs<'_>,\n         infer_args: bool,\n         self_ty: Option<Ty<'tcx>>,\n@@ -314,10 +322,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         );\n \n         let tcx = self.tcx();\n-        let generic_params = tcx.generics_of(def_id);\n+        let generics = tcx.generics_of(def_id);\n \n-        if generic_params.has_self {\n-            if generic_params.parent.is_some() {\n+        if generics.has_self {\n+            if generics.parent.is_some() {\n                 // The parent is a trait so it should have at least one subst\n                 // for the `Self` type.\n                 assert!(!parent_substs.is_empty())\n@@ -332,7 +340,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let arg_count = Self::check_generic_arg_count(\n             tcx,\n             span,\n-            &generic_params,\n+            def_id,\n+            seg,\n+            &generics,\n             &generic_args,\n             GenericArgPosition::Type,\n             self_ty.is_some(),\n@@ -343,7 +353,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         // Traits always have `Self` as a generic parameter, which means they will not return early\n         // here and so associated type bindings will be handled regardless of whether there are any\n         // non-`Self` generic parameters.\n-        if generic_params.params.len() == 0 {\n+        if generics.params.len() == 0 {\n             return (tcx.intern_substs(&[]), vec![], arg_count);\n         }\n \n@@ -553,7 +563,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         debug!(\n             \"create_substs_for_ast_path(generic_params={:?}, self_ty={:?}) -> {:?}\",\n-            generic_params, self_ty, substs\n+            generics, self_ty, substs\n         );\n \n         (substs, assoc_bindings, arg_count)\n@@ -576,7 +586,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 span,\n                 item_def_id,\n                 parent_substs,\n-                item_segment.generic_args(),\n+                item_segment,\n+                item_segment.args(),\n                 item_segment.infer_args,\n                 None,\n             )\n@@ -701,8 +712,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     ) {\n         let trait_def_id = self.tcx().require_lang_item(lang_item, Some(span));\n \n-        let (substs, assoc_bindings, _) =\n-            self.create_substs_for_ast_path(span, trait_def_id, &[], args, false, Some(self_ty));\n+        let (substs, assoc_bindings, _) = self.create_substs_for_ast_path(\n+            span,\n+            trait_def_id,\n+            &[],\n+            &hir::PathSegment::invalid(),\n+            args,\n+            false,\n+            Some(self_ty),\n+        );\n         let poly_trait_ref = ty::Binder::bind(ty::TraitRef::new(trait_def_id, substs));\n         bounds.trait_bounds.push((poly_trait_ref, span, Constness::NotConst));\n \n@@ -750,7 +768,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             span,\n             trait_def_id,\n             &[],\n-            trait_segment.generic_args(),\n+            trait_segment,\n+            trait_segment.args(),\n             trait_segment.infer_args,\n             Some(self_ty),\n         )\n@@ -1076,7 +1095,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 dummy_self,\n                 &mut bounds,\n             ) {\n-                potential_assoc_types.extend(cur_potential_assoc_types.into_iter());\n+                potential_assoc_types.extend(cur_potential_assoc_types);\n             }\n         }\n \n@@ -1751,7 +1770,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let mut has_err = false;\n         for segment in segments {\n             let (mut err_for_lt, mut err_for_ty, mut err_for_ct) = (false, false, false);\n-            for arg in segment.generic_args().args {\n+            for arg in segment.args().args {\n                 let (span, kind) = match arg {\n                     hir::GenericArg::Lifetime(lt) => {\n                         if err_for_lt {\n@@ -1793,7 +1812,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n \n             // Only emit the first error to avoid overloading the user with error messages.\n-            if let [binding, ..] = segment.generic_args().bindings {\n+            if let [binding, ..] = segment.args().bindings {\n                 has_err = true;\n                 Self::prohibit_assoc_ty_binding(self.tcx(), binding.span);\n             }\n@@ -2130,6 +2149,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     span,\n                     def_id,\n                     &[],\n+                    &hir::PathSegment::invalid(),\n                     &GenericArgs::none(),\n                     true,\n                     None,"}, {"sha": "39dac0a909f6f401b815d96d1ec4236412f678bb", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -418,13 +418,14 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 err.emit();\n             }\n             CastError::SizedUnsizedCast => {\n-                use crate::structured_errors::{SizedUnsizedCastError, StructuredDiagnostic};\n-                SizedUnsizedCastError::new(\n-                    &fcx.tcx.sess,\n-                    self.span,\n-                    self.expr_ty,\n-                    fcx.ty_to_string(self.cast_ty),\n-                )\n+                use crate::structured_errors::{SizedUnsizedCast, StructuredDiagnostic};\n+\n+                SizedUnsizedCast {\n+                    sess: &fcx.tcx.sess,\n+                    span: self.span,\n+                    expr_ty: self.expr_ty,\n+                    cast_ty: fcx.ty_to_string(self.cast_ty),\n+                }\n                 .diagnostic()\n                 .emit();\n             }"}, {"sha": "c3166ce8164f47487a7851c3112d0c8b707ec8d4", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,6 +1,6 @@\n use crate::astconv::{\n     AstConv, CreateSubstsForGenericArgsCtxt, ExplicitLateBound, GenericArgCountMismatch,\n-    GenericArgCountResult, PathSeg,\n+    GenericArgCountResult, IsMethodCall, PathSeg,\n };\n use crate::check::callee::{self, DeferredCallResolution};\n use crate::check::method::{self, MethodCallee, SelfSource};\n@@ -1219,18 +1219,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // a problem.\n \n         let mut infer_args_for_err = FxHashSet::default();\n+\n         for &PathSeg(def_id, index) in &path_segs {\n             let seg = &segments[index];\n             let generics = tcx.generics_of(def_id);\n+\n             // Argument-position `impl Trait` is treated as a normal generic\n             // parameter internally, but we don't allow users to specify the\n             // parameter's value explicitly, so we have to do some error-\n             // checking here.\n             if let GenericArgCountResult {\n-                correct: Err(GenericArgCountMismatch { reported: Some(ErrorReported), .. }),\n+                correct: Err(GenericArgCountMismatch { reported: Some(_), .. }),\n                 ..\n             } = AstConv::check_generic_arg_count_for_call(\n-                tcx, span, &generics, &seg, false, // `is_method_call`\n+                tcx,\n+                span,\n+                def_id,\n+                &generics,\n+                seg,\n+                IsMethodCall::No,\n             ) {\n                 infer_args_for_err.insert(index);\n                 self.set_tainted_by_errors(); // See issue #53251."}, {"sha": "94f8bfa3fc04bf72ba66c40c550872f3b66bf1d0", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -22,6 +22,7 @@ use rustc_span::symbol::{sym, Ident};\n use rustc_span::{self, MultiSpan, Span};\n use rustc_trait_selection::traits::{self, ObligationCauseCode, StatementAsExpression};\n \n+use crate::structured_errors::StructuredDiagnostic;\n use std::mem::replace;\n use std::slice;\n \n@@ -173,18 +174,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n \n             if let Some(def_id) = def_id {\n-                if let Some(node) = tcx.hir().get_if_local(def_id) {\n-                    let mut spans: MultiSpan = node\n-                        .ident()\n-                        .map(|ident| ident.span)\n-                        .unwrap_or_else(|| tcx.hir().span(node.hir_id().unwrap()))\n-                        .into();\n-\n-                    if let Some(id) = node.body_id() {\n-                        let body = tcx.hir().body(id);\n-                        for param in body.params {\n-                            spans.push_span_label(param.span, String::new());\n-                        }\n+                if let Some(def_span) = tcx.def_ident_span(def_id) {\n+                    let mut spans: MultiSpan = def_span.into();\n+\n+                    let params = tcx\n+                        .hir()\n+                        .get_if_local(def_id)\n+                        .and_then(|node| node.body_id())\n+                        .into_iter()\n+                        .map(|id| tcx.hir().body(id).params)\n+                        .flatten();\n+\n+                    for param in params {\n+                        spans.push_span_label(param.span, String::new());\n                     }\n \n                     let def_kind = tcx.def_kind(def_id);\n@@ -358,9 +360,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // We also need to make sure we at least write the ty of the other\n         // arguments which we skipped above.\n         if c_variadic {\n-            fn variadic_error<'tcx>(s: &Session, span: Span, t: Ty<'tcx>, cast_ty: &str) {\n-                use crate::structured_errors::{StructuredDiagnostic, VariadicError};\n-                VariadicError::new(s, span, t, cast_ty).diagnostic().emit();\n+            fn variadic_error<'tcx>(sess: &Session, span: Span, ty: Ty<'tcx>, cast_ty: &str) {\n+                use crate::structured_errors::MissingCastForVariadicArg;\n+\n+                MissingCastForVariadicArg { sess, span, ty, cast_ty }.diagnostic().emit()\n             }\n \n             for arg in args.iter().skip(expected_arg_count) {"}, {"sha": "e604419f41378d2b3a0c4bc5e9671ba0ef3edb53", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,6 +1,6 @@\n use super::{probe, MethodCallee};\n \n-use crate::astconv::{AstConv, CreateSubstsForGenericArgsCtxt};\n+use crate::astconv::{AstConv, CreateSubstsForGenericArgsCtxt, IsMethodCall};\n use crate::check::{callee, FnCtxt};\n use crate::hir::def_id::DefId;\n use crate::hir::GenericArg;\n@@ -298,8 +298,14 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         // If they were not explicitly supplied, just construct fresh\n         // variables.\n         let generics = self.tcx.generics_of(pick.item.def_id);\n+\n         let arg_count_correct = AstConv::check_generic_arg_count_for_call(\n-            self.tcx, self.span, &generics, &seg, true, // `is_method_call`\n+            self.tcx,\n+            self.span,\n+            pick.item.def_id,\n+            &generics,\n+            seg,\n+            IsMethodCall::Yes,\n         );\n \n         // Create subst for early-bound lifetime parameters, combining"}, {"sha": "1626a0116a7eb55bcfc9116ef3255798af7268a6", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1498,13 +1498,11 @@ fn is_suggestable_infer_ty(ty: &hir::Ty<'_>) -> bool {\n         Ptr(mut_ty) | Rptr(_, mut_ty) => is_suggestable_infer_ty(mut_ty.ty),\n         OpaqueDef(_, generic_args) => are_suggestable_generic_args(generic_args),\n         Path(hir::QPath::TypeRelative(ty, segment)) => {\n-            is_suggestable_infer_ty(ty) || are_suggestable_generic_args(segment.generic_args().args)\n+            is_suggestable_infer_ty(ty) || are_suggestable_generic_args(segment.args().args)\n         }\n         Path(hir::QPath::Resolved(ty_opt, hir::Path { segments, .. })) => {\n             ty_opt.map_or(false, is_suggestable_infer_ty)\n-                || segments\n-                    .iter()\n-                    .any(|segment| are_suggestable_generic_args(segment.generic_args().args))\n+                || segments.iter().any(|segment| are_suggestable_generic_args(segment.args().args))\n         }\n         _ => false,\n     }"}, {"sha": "04d04304e70f919e63cd3e95277f1fe88d6adff0", "filename": "compiler/rustc_typeck/src/structured_errors.rs", "status": "modified", "additions": 17, "deletions": 130, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,149 +1,36 @@\n-use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n-use rustc_middle::ty::{Ty, TypeFoldable};\n+mod missing_cast_for_variadic_arg;\n+mod sized_unsized_cast;\n+mod wrong_number_of_generic_args;\n+\n+pub use self::{\n+    missing_cast_for_variadic_arg::*, sized_unsized_cast::*, wrong_number_of_generic_args::*,\n+};\n+\n+use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_session::Session;\n-use rustc_span::Span;\n \n pub trait StructuredDiagnostic<'tcx> {\n     fn session(&self) -> &Session;\n \n     fn code(&self) -> DiagnosticId;\n \n-    fn common(&self) -> DiagnosticBuilder<'tcx>;\n-\n     fn diagnostic(&self) -> DiagnosticBuilder<'tcx> {\n-        let err = self.common();\n-        if self.session().teach(&self.code()) { self.extended(err) } else { self.regular(err) }\n-    }\n-\n-    fn regular(&self, err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {\n-        err\n-    }\n-\n-    fn extended(&self, err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {\n-        err\n-    }\n-}\n-\n-pub struct VariadicError<'tcx> {\n-    sess: &'tcx Session,\n-    span: Span,\n-    t: Ty<'tcx>,\n-    cast_ty: &'tcx str,\n-}\n-\n-impl<'tcx> VariadicError<'tcx> {\n-    pub fn new(\n-        sess: &'tcx Session,\n-        span: Span,\n-        t: Ty<'tcx>,\n-        cast_ty: &'tcx str,\n-    ) -> VariadicError<'tcx> {\n-        VariadicError { sess, span, t, cast_ty }\n-    }\n-}\n-\n-impl<'tcx> StructuredDiagnostic<'tcx> for VariadicError<'tcx> {\n-    fn session(&self) -> &Session {\n-        self.sess\n-    }\n-\n-    fn code(&self) -> DiagnosticId {\n-        rustc_errors::error_code!(E0617)\n-    }\n+        let err = self.diagnostic_common();\n \n-    fn common(&self) -> DiagnosticBuilder<'tcx> {\n-        let mut err = if self.t.references_error() {\n-            self.sess.diagnostic().struct_dummy()\n+        if self.session().teach(&self.code()) {\n+            self.diagnostic_extended(err)\n         } else {\n-            self.sess.struct_span_fatal_with_code(\n-                self.span,\n-                &format!(\"can't pass `{}` to variadic function\", self.t),\n-                self.code(),\n-            )\n-        };\n-        if let Ok(snippet) = self.sess.source_map().span_to_snippet(self.span) {\n-            err.span_suggestion(\n-                self.span,\n-                &format!(\"cast the value to `{}`\", self.cast_ty),\n-                format!(\"{} as {}\", snippet, self.cast_ty),\n-                Applicability::MachineApplicable,\n-            );\n-        } else {\n-            err.help(&format!(\"cast the value to `{}`\", self.cast_ty));\n+            self.diagnostic_regular(err)\n         }\n-        err\n-    }\n-\n-    fn extended(&self, mut err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {\n-        err.note(&format!(\n-            \"certain types, like `{}`, must be cast before passing them to a \\\n-                           variadic function, because of arcane ABI rules dictated by the C \\\n-                           standard\",\n-            self.t\n-        ));\n-        err\n-    }\n-}\n-\n-pub struct SizedUnsizedCastError<'tcx> {\n-    sess: &'tcx Session,\n-    span: Span,\n-    expr_ty: Ty<'tcx>,\n-    cast_ty: String,\n-}\n-\n-impl<'tcx> SizedUnsizedCastError<'tcx> {\n-    pub fn new(\n-        sess: &'tcx Session,\n-        span: Span,\n-        expr_ty: Ty<'tcx>,\n-        cast_ty: String,\n-    ) -> SizedUnsizedCastError<'tcx> {\n-        SizedUnsizedCastError { sess, span, expr_ty, cast_ty }\n     }\n-}\n \n-impl<'tcx> StructuredDiagnostic<'tcx> for SizedUnsizedCastError<'tcx> {\n-    fn session(&self) -> &Session {\n-        self.sess\n-    }\n+    fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx>;\n \n-    fn code(&self) -> DiagnosticId {\n-        rustc_errors::error_code!(E0607)\n-    }\n-\n-    fn common(&self) -> DiagnosticBuilder<'tcx> {\n-        if self.expr_ty.references_error() {\n-            self.sess.diagnostic().struct_dummy()\n-        } else {\n-            self.sess.struct_span_fatal_with_code(\n-                self.span,\n-                &format!(\n-                    \"cannot cast thin pointer `{}` to fat pointer `{}`\",\n-                    self.expr_ty, self.cast_ty\n-                ),\n-                self.code(),\n-            )\n-        }\n+    fn diagnostic_regular(&self, err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {\n+        err\n     }\n \n-    fn extended(&self, mut err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {\n-        err.help(\n-            \"Thin pointers are \\\"simple\\\" pointers: they are purely a reference to a\n-memory address.\n-\n-Fat pointers are pointers referencing \\\"Dynamically Sized Types\\\" (also\n-called DST). DST don't have a statically known size, therefore they can\n-only exist behind some kind of pointers that contain additional\n-information. Slices and trait objects are DSTs. In the case of slices,\n-the additional information the fat pointer holds is their size.\n-\n-To fix this error, don't try to cast directly between thin and fat\n-pointers.\n-\n-For more information about casts, take a look at The Book:\n-https://doc.rust-lang.org/reference/expressions/operator-expr.html#type-cast-expressions\",\n-        );\n+    fn diagnostic_extended(&self, err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {\n         err\n     }\n }"}, {"sha": "674b0e463f51d21fe095e08c18ec7cfb465e0fd5", "filename": "compiler/rustc_typeck/src/structured_errors/missing_cast_for_variadic_arg.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -0,0 +1,58 @@\n+use crate::structured_errors::StructuredDiagnostic;\n+use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use rustc_middle::ty::{Ty, TypeFoldable};\n+use rustc_session::Session;\n+use rustc_span::Span;\n+\n+pub struct MissingCastForVariadicArg<'tcx> {\n+    pub sess: &'tcx Session,\n+    pub span: Span,\n+    pub ty: Ty<'tcx>,\n+    pub cast_ty: &'tcx str,\n+}\n+\n+impl<'tcx> StructuredDiagnostic<'tcx> for MissingCastForVariadicArg<'tcx> {\n+    fn session(&self) -> &Session {\n+        self.sess\n+    }\n+\n+    fn code(&self) -> DiagnosticId {\n+        rustc_errors::error_code!(E0617)\n+    }\n+\n+    fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx> {\n+        let mut err = if self.ty.references_error() {\n+            self.sess.diagnostic().struct_dummy()\n+        } else {\n+            self.sess.struct_span_fatal_with_code(\n+                self.span,\n+                &format!(\"can't pass `{}` to variadic function\", self.ty),\n+                self.code(),\n+            )\n+        };\n+\n+        if let Ok(snippet) = self.sess.source_map().span_to_snippet(self.span) {\n+            err.span_suggestion(\n+                self.span,\n+                &format!(\"cast the value to `{}`\", self.cast_ty),\n+                format!(\"{} as {}\", snippet, self.cast_ty),\n+                Applicability::MachineApplicable,\n+            );\n+        } else {\n+            err.help(&format!(\"cast the value to `{}`\", self.cast_ty));\n+        }\n+\n+        err\n+    }\n+\n+    fn diagnostic_extended(&self, mut err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {\n+        err.note(&format!(\n+            \"certain types, like `{}`, must be casted before passing them to a \\\n+                variadic function, because of arcane ABI rules dictated by the C \\\n+                standard\",\n+            self.ty\n+        ));\n+\n+        err\n+    }\n+}"}, {"sha": "d0477a3e74829f8e808ef3591ba5d4bf85b9d443", "filename": "compiler/rustc_typeck/src/structured_errors/sized_unsized_cast.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -0,0 +1,57 @@\n+use crate::structured_errors::StructuredDiagnostic;\n+use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n+use rustc_middle::ty::{Ty, TypeFoldable};\n+use rustc_session::Session;\n+use rustc_span::Span;\n+\n+pub struct SizedUnsizedCast<'tcx> {\n+    pub sess: &'tcx Session,\n+    pub span: Span,\n+    pub expr_ty: Ty<'tcx>,\n+    pub cast_ty: String,\n+}\n+\n+impl<'tcx> StructuredDiagnostic<'tcx> for SizedUnsizedCast<'tcx> {\n+    fn session(&self) -> &Session {\n+        self.sess\n+    }\n+\n+    fn code(&self) -> DiagnosticId {\n+        rustc_errors::error_code!(E0607)\n+    }\n+\n+    fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx> {\n+        if self.expr_ty.references_error() {\n+            self.sess.diagnostic().struct_dummy()\n+        } else {\n+            self.sess.struct_span_fatal_with_code(\n+                self.span,\n+                &format!(\n+                    \"cannot cast thin pointer `{}` to fat pointer `{}`\",\n+                    self.expr_ty, self.cast_ty\n+                ),\n+                self.code(),\n+            )\n+        }\n+    }\n+\n+    fn diagnostic_extended(&self, mut err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {\n+        err.help(\n+            \"Thin pointers are \\\"simple\\\" pointers: they are purely a reference to a\n+memory address.\n+\n+Fat pointers are pointers referencing \\\"Dynamically Sized Types\\\" (also\n+called DST). DST don't have a statically known size, therefore they can\n+only exist behind some kind of pointers that contain additional\n+information. Slices and trait objects are DSTs. In the case of slices,\n+the additional information the fat pointer holds is their size.\n+\n+To fix this error, don't try to cast directly between thin and fat\n+pointers.\n+\n+For more information about casts, take a look at The Book:\n+https://doc.rust-lang.org/reference/expressions/operator-expr.html#type-cast-expressions\",\n+        );\n+        err\n+    }\n+}"}, {"sha": "e35c1557466426ac819197b3b44e2b5cf0874ed1", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "added", "additions": 393, "deletions": 0, "changes": 393, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -0,0 +1,393 @@\n+use crate::structured_errors::StructuredDiagnostic;\n+use hir::def::DefKind;\n+use rustc_errors::{pluralize, Applicability, DiagnosticBuilder, DiagnosticId};\n+use rustc_hir as hir;\n+use rustc_middle::ty::{self as ty, TyCtxt};\n+use rustc_session::Session;\n+use rustc_span::Span;\n+use rustc_span::{def_id::DefId, MultiSpan};\n+\n+/// Handles the `wrong number of type / lifetime / ... arguments` family of error messages.\n+pub struct WrongNumberOfGenericArgs<'a, 'tcx> {\n+    crate tcx: TyCtxt<'tcx>,\n+\n+    /// \"type\", \"lifetime\" etc., put verbatim into the message\n+    crate kind: &'static str,\n+\n+    /// Minimum number of expected generic arguments (e.g. `2` for `HashMap`)\n+    crate expected_min: usize,\n+\n+    /// Maximum number of expected generic arguments (e.g. `3` for `HashMap`)\n+    crate expected_max: usize,\n+\n+    /// Number of generic arguments provided by the user\n+    crate provided: usize,\n+\n+    /// Offset into `gen_params` - depends on the `kind`; might be different than `args_offset` when\n+    /// user passed e.g. more arguments than was actually expected\n+    crate params_offset: usize,\n+\n+    /// Offset into `gen_args` - depends on the `kind`\n+    crate args_offset: usize,\n+\n+    /// Offending path segment\n+    crate path_segment: &'a hir::PathSegment<'a>,\n+\n+    /// Generic parameters as expected by type or trait\n+    crate gen_params: &'a ty::Generics,\n+\n+    /// Generic arguments as provided by user\n+    crate gen_args: &'a hir::GenericArgs<'a>,\n+\n+    /// DefId of the generic type\n+    crate def_id: DefId,\n+\n+    /// Offending place where the generic type has been misused\n+    crate span: Span,\n+}\n+\n+impl<'tcx> WrongNumberOfGenericArgs<'_, 'tcx> {\n+    fn quantifier_and_bound(&self) -> (&'static str, usize) {\n+        if self.expected_min == self.expected_max {\n+            (\"\", self.expected_min)\n+        } else if self.provided < self.expected_min {\n+            (\"at least \", self.expected_min)\n+        } else {\n+            (\"at most \", self.expected_max)\n+        }\n+    }\n+\n+    fn start_diagnostics(&self) -> DiagnosticBuilder<'tcx> {\n+        let span = self.path_segment.ident.span;\n+\n+        let msg = {\n+            let def_path = self.tcx.def_path_str(self.def_id);\n+            let def_kind = self.tcx.def_kind(self.def_id).descr(self.def_id);\n+            let (quantifier, bound) = self.quantifier_and_bound();\n+\n+            if self.gen_args.span().is_some() {\n+                format!(\n+                    \"this {} takes {}{} {} argument{} but {}{} {} argument{} {} supplied\",\n+                    def_kind,\n+                    quantifier,\n+                    bound,\n+                    self.kind,\n+                    pluralize!(bound),\n+                    if self.provided > 0 && self.provided < self.expected_min {\n+                        \"only \"\n+                    } else {\n+                        \"\"\n+                    },\n+                    self.provided,\n+                    self.kind,\n+                    pluralize!(self.provided),\n+                    if self.provided == 1 { \"was\" } else { \"were\" },\n+                )\n+            } else {\n+                format!(\"missing generics for {} `{}`\", def_kind, def_path)\n+            }\n+        };\n+\n+        self.tcx.sess.struct_span_err_with_code(span, &msg, self.code())\n+    }\n+\n+    /// Builds the `expected 1 type argument / supplied 2 type arguments` message.\n+    fn notify(&self, err: &mut DiagnosticBuilder<'_>) {\n+        let (quantifier, bound) = self.quantifier_and_bound();\n+\n+        err.span_label(\n+            self.path_segment.ident.span,\n+            format!(\n+                \"expected {}{} {} argument{}\",\n+                quantifier,\n+                bound,\n+                self.kind,\n+                pluralize!(bound),\n+            ),\n+        );\n+\n+        // When user's provided too many arguments, we don't highlight each of them, because it\n+        // would overlap with the suggestion to remove them:\n+        //\n+        // ```\n+        // type Foo = Bar<usize, usize>;\n+        //                -----  ----- supplied 2 type arguments\n+        //                     ^^^^^^^ remove this type argument\n+        // ```\n+        if self.provided > self.expected_max {\n+            return;\n+        }\n+\n+        let args = self.gen_args.args.iter().skip(self.args_offset).take(self.provided).enumerate();\n+\n+        for (i, arg) in args {\n+            err.span_label(\n+                arg.span(),\n+                if i + 1 == self.provided {\n+                    format!(\n+                        \"supplied {} {} argument{}\",\n+                        self.provided,\n+                        self.kind,\n+                        pluralize!(self.provided)\n+                    )\n+                } else {\n+                    String::new()\n+                },\n+            );\n+        }\n+    }\n+\n+    fn suggest(&self, err: &mut DiagnosticBuilder<'_>) {\n+        if self.provided == 0 {\n+            if self.gen_args.span().is_some() {\n+                self.suggest_adding_args(err);\n+            } else {\n+                self.suggest_creating_generics(err);\n+            }\n+        } else if self.provided < self.expected_min {\n+            self.suggest_adding_args(err);\n+        } else {\n+            self.suggest_removing_args_or_generics(err);\n+        }\n+    }\n+\n+    /// Suggests to create generics (`<...>`) when current invocation site contains no generics at\n+    /// all:\n+    ///\n+    /// ```text\n+    /// type Map = HashMap;\n+    /// ```\n+    fn suggest_creating_generics(&self, err: &mut DiagnosticBuilder<'_>) {\n+        let params = self\n+            .gen_params\n+            .params\n+            .iter()\n+            .skip(self.params_offset)\n+            .take(self.expected_min)\n+            .map(|param| param.name.to_string())\n+            .collect::<Vec<_>>()\n+            .join(\", \");\n+\n+        let def_kind = self.tcx.def_kind(self.def_id);\n+\n+        let sugg = if matches!(def_kind, DefKind::Fn | DefKind::AssocFn) {\n+            format!(\"::<{}>\", params)\n+        } else {\n+            format!(\"<{}>\", params)\n+        };\n+\n+        let msg = format!(\n+            \"use angle brackets to add missing {} argument{}\",\n+            self.kind,\n+            pluralize!(self.expected_min),\n+        );\n+\n+        err.span_suggestion_verbose(\n+            self.path_segment.ident.span.shrink_to_hi(),\n+            &msg,\n+            sugg,\n+            Applicability::HasPlaceholders,\n+        );\n+    }\n+\n+    /// Suggests to add missing argument(s) when current invocation site already contains some\n+    /// generics:\n+    ///\n+    /// ```text\n+    /// type Map = HashMap<String>;\n+    /// ```\n+    fn suggest_adding_args(&self, err: &mut DiagnosticBuilder<'_>) {\n+        assert!(!self.gen_args.is_empty());\n+\n+        if self.gen_args.parenthesized {\n+            return;\n+        }\n+\n+        let missing_arg_count = self.expected_min - self.provided;\n+\n+        let (span, sugg_prefix) = if self.args_offset + self.provided == 0 {\n+            let span = self.gen_args.args[0].span().shrink_to_lo();\n+            (span, \"\")\n+        } else {\n+            let span =\n+                self.gen_args.args[self.args_offset + self.provided - 1].span().shrink_to_hi();\n+            (span, \", \")\n+        };\n+\n+        let msg = format!(\"add missing {} argument{}\", self.kind, pluralize!(missing_arg_count));\n+\n+        let sugg = self\n+            .gen_params\n+            .params\n+            .iter()\n+            .skip(self.params_offset + self.provided)\n+            .take(missing_arg_count)\n+            .map(|param| param.name.to_string())\n+            .collect::<Vec<_>>()\n+            .join(\", \");\n+\n+        let sugg = format!(\"{}{}\", sugg_prefix, sugg);\n+\n+        err.span_suggestion_verbose(span, &msg, sugg, Applicability::HasPlaceholders);\n+    }\n+\n+    /// Suggests to remove redundant argument(s):\n+    ///\n+    /// ```text\n+    /// type Map = HashMap<String, String, String, String>;\n+    /// ```\n+    fn suggest_removing_args_or_generics(&self, err: &mut DiagnosticBuilder<'_>) {\n+        assert!(self.provided > 0);\n+\n+        let redundant_args_count = self.provided - self.expected_max;\n+        let remove_entire_generics = redundant_args_count >= self.gen_args.args.len();\n+\n+        let (span, msg) = if remove_entire_generics {\n+            let sm = self.tcx.sess.source_map();\n+\n+            let span = self\n+                .path_segment\n+                .args\n+                .unwrap()\n+                .span_ext(sm)\n+                .unwrap()\n+                .with_lo(self.path_segment.ident.span.hi());\n+\n+            let msg = format!(\n+                \"remove these {}generics\",\n+                if self.gen_args.parenthesized { \"parenthetical \" } else { \"\" },\n+            );\n+\n+            (span, msg)\n+        } else {\n+            // When it comes to removing particular argument(s) from the generics, there are two\n+            // edge cases we have to consider:\n+            //\n+            // When the first redundant argument is at the beginning or in the middle of the\n+            // generics, like so:\n+            //\n+            // ```\n+            // type Map = HashMap<String, String, String, String>;\n+            //                    ^^^^^^^^^^^^^^^^\n+            //                    | span must start with the argument\n+            // ```\n+            //\n+            // When the last redundant argument is at the ending of the generics, like so:\n+            //\n+            // ```\n+            // type Map = HashMap<String, String, String, String>;\n+            //                                  ^^^^^^^^^^^^^^^^\n+            //                                  | span must start with the comma\n+            // ```\n+\n+            // Index of the first redundant argument\n+            let from_idx = self.args_offset + self.expected_max;\n+\n+            // Index of the last redundant argument\n+            let to_idx = self.args_offset + self.provided - 1;\n+\n+            assert!(from_idx <= to_idx);\n+\n+            let (from, comma_eaten) = {\n+                let first_argument_starts_generics = from_idx == 0;\n+                let last_argument_ends_generics = to_idx + 1 == self.gen_args.args.len();\n+\n+                if !first_argument_starts_generics && last_argument_ends_generics {\n+                    (self.gen_args.args[from_idx - 1].span().hi(), true)\n+                } else {\n+                    (self.gen_args.args[from_idx].span().lo(), false)\n+                }\n+            };\n+\n+            let to = {\n+                let hi = self.gen_args.args[to_idx].span().hi();\n+\n+                if comma_eaten {\n+                    hi\n+                } else {\n+                    self.gen_args.args.get(to_idx + 1).map(|arg| arg.span().lo()).unwrap_or(hi)\n+                }\n+            };\n+\n+            let span = Span::new(from, to, self.span.ctxt());\n+\n+            let msg = format!(\n+                \"remove {} {} argument{}\",\n+                if redundant_args_count == 1 { \"this\" } else { \"these\" },\n+                self.kind,\n+                pluralize!(redundant_args_count),\n+            );\n+\n+            (span, msg)\n+        };\n+\n+        err.span_suggestion(span, &msg, String::new(), Applicability::MaybeIncorrect);\n+    }\n+\n+    /// Builds the `type defined here` message.\n+    fn show_definition(&self, err: &mut DiagnosticBuilder<'_>) {\n+        let mut spans: MultiSpan = if let Some(def_span) = self.tcx.def_ident_span(self.def_id) {\n+            def_span.into()\n+        } else {\n+            return;\n+        };\n+\n+        let msg = {\n+            let def_kind = self.tcx.def_kind(self.def_id).descr(self.def_id);\n+            let (quantifier, bound) = self.quantifier_and_bound();\n+\n+            let params = if bound == 0 {\n+                String::new()\n+            } else {\n+                let params = self\n+                    .gen_params\n+                    .params\n+                    .iter()\n+                    .skip(self.params_offset)\n+                    .take(bound)\n+                    .map(|param| {\n+                        let span = self.tcx.def_span(param.def_id);\n+                        spans.push_span_label(span, String::new());\n+                        param\n+                    })\n+                    .map(|param| format!(\"`{}`\", param.name))\n+                    .collect::<Vec<_>>()\n+                    .join(\", \");\n+\n+                format!(\": {}\", params)\n+            };\n+\n+            format!(\n+                \"{} defined here, with {}{} {} parameter{}{}\",\n+                def_kind,\n+                quantifier,\n+                bound,\n+                self.kind,\n+                pluralize!(bound),\n+                params,\n+            )\n+        };\n+\n+        err.span_note(spans, &msg);\n+    }\n+}\n+\n+impl<'tcx> StructuredDiagnostic<'tcx> for WrongNumberOfGenericArgs<'_, 'tcx> {\n+    fn session(&self) -> &Session {\n+        self.tcx.sess\n+    }\n+\n+    fn code(&self) -> DiagnosticId {\n+        rustc_errors::error_code!(E0107)\n+    }\n+\n+    fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx> {\n+        let mut err = self.start_diagnostics();\n+\n+        self.notify(&mut err);\n+        self.suggest(&mut err);\n+        self.show_definition(&mut err);\n+\n+        err\n+    }\n+}"}, {"sha": "117db6e3e3bf795ef13c9c1b8dcf0dd58f4574b5", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -103,7 +103,7 @@ pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n-/// * `data` must be [valid] for boths reads and writes for `len * mem::size_of::<T>()` many bytes,\n+/// * `data` must be [valid] for both reads and writes for `len * mem::size_of::<T>()` many bytes,\n ///   and it must be properly aligned. This means in particular:\n ///\n ///     * The entire memory range of this slice must be contained within a single allocated object!"}, {"sha": "771887be1ea4e994a882840651694f755fd58e62", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1328,7 +1328,7 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &DocContext<'_>) -> Type {\n                 let mut ty_substs = FxHashMap::default();\n                 let mut lt_substs = FxHashMap::default();\n                 let mut ct_substs = FxHashMap::default();\n-                let generic_args = provided_params.generic_args();\n+                let generic_args = provided_params.args();\n                 {\n                     let mut indices: GenericParamCount = Default::default();\n                     for param in generics.params.iter() {\n@@ -1943,7 +1943,7 @@ impl Clean<GenericArgs> for hir::GenericArgs<'_> {\n \n impl Clean<PathSegment> for hir::PathSegment<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> PathSegment {\n-        PathSegment { name: self.ident.name, args: self.generic_args().clean(cx) }\n+        PathSegment { name: self.ident.name, args: self.args().clean(cx) }\n     }\n }\n "}, {"sha": "ce3fa9180cb9e97c103910b50f97d6b2222aaeca", "filename": "src/test/ui/async-await/issues/issue-65159.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -2,7 +2,8 @@\n //\n // edition:2018\n \n-async fn copy() -> Result<()> //~ ERROR wrong number of type arguments\n+async fn copy() -> Result<()>\n+//~^ ERROR this enum takes 2 type arguments but only 1 type argument was supplied\n {\n     Ok(())\n     //~^ ERROR type annotations needed"}, {"sha": "bcb4c292e2626f0284378f81c132f170f6af8625", "filename": "src/test/ui/async-await/issues/issue-65159.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,11 +1,23 @@\n-error[E0107]: wrong number of type arguments: expected 2, found 1\n+error[E0107]: this enum takes 2 type arguments but only 1 type argument was supplied\n   --> $DIR/issue-65159.rs:5:20\n    |\n LL | async fn copy() -> Result<()>\n-   |                    ^^^^^^^^^^ expected 2 type arguments\n+   |                    ^^^^^^ -- supplied 1 type argument\n+   |                    |\n+   |                    expected 2 type arguments\n+   |\n+note: enum defined here, with 2 type parameters: `T`, `E`\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL | pub enum Result<T, E> {\n+   |          ^^^^^^ -  -\n+help: add missing type argument\n+   |\n+LL | async fn copy() -> Result<(), E>\n+   |                             ^^^\n \n error[E0282]: type annotations needed\n-  --> $DIR/issue-65159.rs:7:5\n+  --> $DIR/issue-65159.rs:8:5\n    |\n LL |     Ok(())\n    |     ^^ cannot infer type for type parameter `E` declared on the enum `Result`"}, {"sha": "c42ce602e998799cd9029858037d2f851d584615", "filename": "src/test/ui/bad/bad-mid-path-type-params.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fbad%2Fbad-mid-path-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fbad%2Fbad-mid-path-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-mid-path-type-params.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -28,16 +28,17 @@ impl Trait<isize> for S2 {\n \n fn foo<'a>() {\n     let _ = S::new::<isize,f64>(1, 1.0);\n-    //~^ ERROR wrong number of type arguments\n+    //~^ ERROR this associated function takes 1 type argument but 2 type arguments were supplied\n \n     let _ = S::<'a,isize>::new::<f64>(1, 1.0);\n-    //~^ ERROR wrong number of lifetime arguments\n+    //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n \n     let _: S2 = Trait::new::<isize,f64>(1, 1.0);\n-    //~^ ERROR wrong number of type arguments\n+    //~^ ERROR this associated function takes 1 type argument but 2 type arguments were supplied\n \n-    let _: S2 = Trait::<'a,isize>::new::<f64>(1, 1.0);\n-    //~^ ERROR wrong number of lifetime arguments\n+    let _: S2 = Trait::<'a,isize>::new::<f64,f64>(1, 1.0);\n+    //~^ ERROR this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n+    //~| ERROR this associated function takes 1 type argument but 2 type arguments were supplied\n }\n \n fn main() {}"}, {"sha": "dd96856e563243ecd1b2b878cf19861a46f86b24", "filename": "src/test/ui/bad/bad-mid-path-type-params.stderr", "status": "modified", "additions": 60, "deletions": 14, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fbad%2Fbad-mid-path-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fbad%2Fbad-mid-path-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-mid-path-type-params.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,27 +1,73 @@\n-error[E0107]: wrong number of type arguments: expected 1, found 2\n-  --> $DIR/bad-mid-path-type-params.rs:30:28\n+error[E0107]: this associated function takes 1 type argument but 2 type arguments were supplied\n+  --> $DIR/bad-mid-path-type-params.rs:30:16\n    |\n LL |     let _ = S::new::<isize,f64>(1, 1.0);\n-   |                            ^^^ unexpected type argument\n+   |                ^^^        ---- help: remove this type argument\n+   |                |\n+   |                expected 1 type argument\n+   |\n+note: associated function defined here, with 1 type parameter: `U`\n+  --> $DIR/bad-mid-path-type-params.rs:6:8\n+   |\n+LL |     fn new<U>(x: T, _: U) -> S<T> {\n+   |        ^^^ -\n \n-error[E0107]: wrong number of lifetime arguments: expected 0, found 1\n-  --> $DIR/bad-mid-path-type-params.rs:33:17\n+error[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+  --> $DIR/bad-mid-path-type-params.rs:33:13\n    |\n LL |     let _ = S::<'a,isize>::new::<f64>(1, 1.0);\n-   |                 ^^ unexpected lifetime argument\n+   |             ^   --- help: remove this lifetime argument\n+   |             |\n+   |             expected 0 lifetime arguments\n+   |\n+note: struct defined here, with 0 lifetime parameters\n+  --> $DIR/bad-mid-path-type-params.rs:1:8\n+   |\n+LL | struct S<T> {\n+   |        ^\n \n-error[E0107]: wrong number of type arguments: expected 1, found 2\n-  --> $DIR/bad-mid-path-type-params.rs:36:36\n+error[E0107]: this associated function takes 1 type argument but 2 type arguments were supplied\n+  --> $DIR/bad-mid-path-type-params.rs:36:24\n    |\n LL |     let _: S2 = Trait::new::<isize,f64>(1, 1.0);\n-   |                                    ^^^ unexpected type argument\n+   |                        ^^^        ---- help: remove this type argument\n+   |                        |\n+   |                        expected 1 type argument\n+   |\n+note: associated function defined here, with 1 type parameter: `U`\n+  --> $DIR/bad-mid-path-type-params.rs:14:8\n+   |\n+LL |     fn new<U>(x: T, y: U) -> Self;\n+   |        ^^^ -\n \n-error[E0107]: wrong number of lifetime arguments: expected 0, found 1\n-  --> $DIR/bad-mid-path-type-params.rs:39:25\n+error[E0107]: this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n+  --> $DIR/bad-mid-path-type-params.rs:39:17\n+   |\n+LL |     let _: S2 = Trait::<'a,isize>::new::<f64,f64>(1, 1.0);\n+   |                 ^^^^^   --- help: remove this lifetime argument\n+   |                 |\n+   |                 expected 0 lifetime arguments\n+   |\n+note: trait defined here, with 0 lifetime parameters\n+  --> $DIR/bad-mid-path-type-params.rs:13:7\n+   |\n+LL | trait Trait<T> {\n+   |       ^^^^^\n+\n+error[E0107]: this associated function takes 1 type argument but 2 type arguments were supplied\n+  --> $DIR/bad-mid-path-type-params.rs:39:36\n+   |\n+LL |     let _: S2 = Trait::<'a,isize>::new::<f64,f64>(1, 1.0);\n+   |                                    ^^^      ---- help: remove this type argument\n+   |                                    |\n+   |                                    expected 1 type argument\n+   |\n+note: associated function defined here, with 1 type parameter: `U`\n+  --> $DIR/bad-mid-path-type-params.rs:14:8\n    |\n-LL |     let _: S2 = Trait::<'a,isize>::new::<f64>(1, 1.0);\n-   |                         ^^ unexpected lifetime argument\n+LL |     fn new<U>(x: T, y: U) -> Self;\n+   |        ^^^ -\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0107`."}, {"sha": "dd7e63480eb207ed71d62c1c6ecb9c34d0024f96", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.full.stderr", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.full.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,14 +1,34 @@\n-error[E0107]: wrong number of const arguments: expected 2, found 1\n+error[E0107]: this function takes 2 const arguments but only 1 const argument was supplied\n   --> $DIR/incorrect-number-of-const-args.rs:11:5\n    |\n LL |     foo::<0>();\n-   |     ^^^^^^^^ expected 2 const arguments\n+   |     ^^^   - supplied 1 const argument\n+   |     |\n+   |     expected 2 const arguments\n+   |\n+note: function defined here, with 2 const parameters: `X`, `Y`\n+  --> $DIR/incorrect-number-of-const-args.rs:6:4\n+   |\n+LL | fn foo<const X: usize, const Y: usize>() -> usize {\n+   |    ^^^       -               -\n+help: add missing const argument\n+   |\n+LL |     foo::<0, Y>();\n+   |            ^^^\n \n-error[E0107]: wrong number of const arguments: expected 2, found 3\n-  --> $DIR/incorrect-number-of-const-args.rs:12:17\n+error[E0107]: this function takes 2 const arguments but 3 const arguments were supplied\n+  --> $DIR/incorrect-number-of-const-args.rs:14:5\n    |\n LL |     foo::<0, 0, 0>();\n-   |                 ^ unexpected const argument\n+   |     ^^^       --- help: remove this const argument\n+   |     |\n+   |     expected 2 const arguments\n+   |\n+note: function defined here, with 2 const parameters: `X`, `Y`\n+  --> $DIR/incorrect-number-of-const-args.rs:6:4\n+   |\n+LL | fn foo<const X: usize, const Y: usize>() -> usize {\n+   |    ^^^       -               -\n \n error: aborting due to 2 previous errors\n "}, {"sha": "dd7e63480eb207ed71d62c1c6ecb9c34d0024f96", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.min.stderr", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.min.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,14 +1,34 @@\n-error[E0107]: wrong number of const arguments: expected 2, found 1\n+error[E0107]: this function takes 2 const arguments but only 1 const argument was supplied\n   --> $DIR/incorrect-number-of-const-args.rs:11:5\n    |\n LL |     foo::<0>();\n-   |     ^^^^^^^^ expected 2 const arguments\n+   |     ^^^   - supplied 1 const argument\n+   |     |\n+   |     expected 2 const arguments\n+   |\n+note: function defined here, with 2 const parameters: `X`, `Y`\n+  --> $DIR/incorrect-number-of-const-args.rs:6:4\n+   |\n+LL | fn foo<const X: usize, const Y: usize>() -> usize {\n+   |    ^^^       -               -\n+help: add missing const argument\n+   |\n+LL |     foo::<0, Y>();\n+   |            ^^^\n \n-error[E0107]: wrong number of const arguments: expected 2, found 3\n-  --> $DIR/incorrect-number-of-const-args.rs:12:17\n+error[E0107]: this function takes 2 const arguments but 3 const arguments were supplied\n+  --> $DIR/incorrect-number-of-const-args.rs:14:5\n    |\n LL |     foo::<0, 0, 0>();\n-   |                 ^ unexpected const argument\n+   |     ^^^       --- help: remove this const argument\n+   |     |\n+   |     expected 2 const arguments\n+   |\n+note: function defined here, with 2 const parameters: `X`, `Y`\n+  --> $DIR/incorrect-number-of-const-args.rs:6:4\n+   |\n+LL | fn foo<const X: usize, const Y: usize>() -> usize {\n+   |    ^^^       -               -\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3114e716845bfc7addde8b93ca7146fea736c13f", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -8,6 +8,9 @@ fn foo<const X: usize, const Y: usize>() -> usize {\n }\n \n fn main() {\n-    foo::<0>(); //~ ERROR wrong number of const arguments: expected 2, found 1\n-    foo::<0, 0, 0>(); //~ ERROR wrong number of const arguments: expected 2, found 3\n+    foo::<0>();\n+    //~^ ERROR this function takes 2 const arguments but only 1 const argument was supplied\n+\n+    foo::<0, 0, 0>();\n+    //~^ ERROR this function takes 2 const arguments but 3 const arguments were supplied\n }"}, {"sha": "b67a1f153ffef520efb7ec7f17d1c6b29cb5f3cd", "filename": "src/test/ui/const-generics/invalid-const-arg-for-type-param.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -3,7 +3,12 @@ use std::convert::TryInto;\n struct S;\n \n fn main() {\n-    let _: u32 = 5i32.try_into::<32>().unwrap(); //~ ERROR wrong number of const arguments\n-    S.f::<0>(); //~ ERROR no method named `f`\n-    S::<0>; //~ ERROR  wrong number of const arguments\n+    let _: u32 = 5i32.try_into::<32>().unwrap();\n+    //~^ ERROR this associated function takes 0 const arguments but 1 const argument was supplied\n+\n+    S.f::<0>();\n+    //~^ ERROR no method named `f`\n+\n+    S::<0>;\n+    //~^ ERROR this struct takes 0 const arguments but 1 const argument was supplied\n }"}, {"sha": "a75da91caa84f825f95451a96ba9a9e7d648cf32", "filename": "src/test/ui/const-generics/invalid-const-arg-for-type-param.stderr", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,23 +1,39 @@\n-error[E0107]: wrong number of const arguments: expected 0, found 1\n-  --> $DIR/invalid-const-arg-for-type-param.rs:6:34\n+error[E0107]: this associated function takes 0 const arguments but 1 const argument was supplied\n+  --> $DIR/invalid-const-arg-for-type-param.rs:6:23\n    |\n LL |     let _: u32 = 5i32.try_into::<32>().unwrap();\n-   |                                  ^^ unexpected const argument\n+   |                       ^^^^^^^^------ help: remove these generics\n+   |                       |\n+   |                       expected 0 const arguments\n+   |\n+note: associated function defined here, with 0 const parameters\n+  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn try_into(self) -> Result<T, Self::Error>;\n+   |        ^^^^^^^^\n \n error[E0599]: no method named `f` found for struct `S` in the current scope\n-  --> $DIR/invalid-const-arg-for-type-param.rs:7:7\n+  --> $DIR/invalid-const-arg-for-type-param.rs:9:7\n    |\n LL | struct S;\n    | --------- method `f` not found for this\n ...\n LL |     S.f::<0>();\n    |       ^ method not found in `S`\n \n-error[E0107]: wrong number of const arguments: expected 0, found 1\n-  --> $DIR/invalid-const-arg-for-type-param.rs:8:9\n+error[E0107]: this struct takes 0 const arguments but 1 const argument was supplied\n+  --> $DIR/invalid-const-arg-for-type-param.rs:12:5\n    |\n LL |     S::<0>;\n-   |         ^ unexpected const argument\n+   |     ^----- help: remove these generics\n+   |     |\n+   |     expected 0 const arguments\n+   |\n+note: struct defined here, with 0 const parameters\n+  --> $DIR/invalid-const-arg-for-type-param.rs:3:8\n+   |\n+LL | struct S;\n+   |        ^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7419d4a25ce12bc2e0b9bf87751b73efe848f3dc", "filename": "src/test/ui/const-generics/invalid-constant-in-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -2,5 +2,5 @@ use std::cell::Cell;\n \n fn main() {\n     let _: Cell<&str, \"a\"> = Cell::new(\"\");\n-    //~^ ERROR wrong number of generic arguments\n+    //~^ ERROR this struct takes 1 generic argument but 2 generic arguments were supplied\n }"}, {"sha": "57c1af36d61ccfece39381490b7a0863def360a3", "filename": "src/test/ui/const-generics/invalid-constant-in-args.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,8 +1,16 @@\n-error[E0107]: wrong number of generic arguments: expected 1, found 2\n-  --> $DIR/invalid-constant-in-args.rs:4:23\n+error[E0107]: this struct takes 1 generic argument but 2 generic arguments were supplied\n+  --> $DIR/invalid-constant-in-args.rs:4:12\n    |\n LL |     let _: Cell<&str, \"a\"> = Cell::new(\"\");\n-   |                       ^^^ unexpected const argument\n+   |            ^^^^     ----- help: remove this generic argument\n+   |            |\n+   |            expected 1 generic argument\n+   |\n+note: struct defined here, with 1 generic parameter: `T`\n+  --> $SRC_DIR/core/src/cell.rs:LL:COL\n+   |\n+LL | pub struct Cell<T: ?Sized> {\n+   |            ^^^^ -\n \n error: aborting due to previous error\n "}, {"sha": "d95d675ddad76cdf8dae9544237664ff014f5556", "filename": "src/test/ui/const-generics/issues/issue-76595.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -13,5 +13,5 @@ fn test<T, const P: usize>() where Bool<{core::mem::size_of::<T>() > 4}>: True {\n \n fn main() {\n     test::<2>();\n-    //~^ ERROR wrong number of generic arguments\n+    //~^ ERROR this function takes 2 generic arguments but only 1 generic argument was supplied\n }"}, {"sha": "9d95e5a014de4e28e1abda1c7b737cdd96d1ce17", "filename": "src/test/ui/const-generics/issues/issue-76595.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,8 +1,20 @@\n-error[E0107]: wrong number of generic arguments: expected 2, found 1\n+error[E0107]: this function takes 2 generic arguments but only 1 generic argument was supplied\n   --> $DIR/issue-76595.rs:15:5\n    |\n LL |     test::<2>();\n-   |     ^^^^^^^^^ expected 2 generic arguments\n+   |     ^^^^   - supplied 1 generic argument\n+   |     |\n+   |     expected 2 generic arguments\n+   |\n+note: function defined here, with 2 generic parameters: `T`, `P`\n+  --> $DIR/issue-76595.rs:10:4\n+   |\n+LL | fn test<T, const P: usize>() where Bool<{core::mem::size_of::<T>() > 4}>: True {\n+   |    ^^^^ -        -\n+help: add missing generic argument\n+   |\n+LL |     test::<2, P>();\n+   |             ^^^\n \n error: aborting due to previous error\n "}, {"sha": "d038269382be5ed0c170a1151014030a4636154c", "filename": "src/test/ui/constructor-lifetime-args.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconstructor-lifetime-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconstructor-lifetime-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconstructor-lifetime-args.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -15,12 +15,12 @@ enum E<'a, 'b> {\n fn main() {\n     S(&0, &0); // OK\n     S::<'static>(&0, &0);\n-    //~^ ERROR wrong number of lifetime arguments: expected 2, found 1\n+    //~^ ERROR this struct takes 2 lifetime arguments but only 1 lifetime argument was supplied\n     S::<'static, 'static, 'static>(&0, &0);\n-    //~^ ERROR wrong number of lifetime arguments: expected 2, found 3\n+    //~^ ERROR this struct takes 2 lifetime arguments but 3 lifetime arguments were supplied\n     E::V(&0); // OK\n     E::V::<'static>(&0);\n-    //~^ ERROR wrong number of lifetime arguments: expected 2, found 1\n+    //~^ ERROR this enum takes 2 lifetime arguments but only 1 lifetime argument was supplied\n     E::V::<'static, 'static, 'static>(&0);\n-    //~^ ERROR wrong number of lifetime arguments: expected 2, found 3\n+    //~^ ERROR this enum takes 2 lifetime arguments but 3 lifetime arguments were supplied\n }"}, {"sha": "378b07694e6fec451d8f2fd7afacc551e1e89871", "filename": "src/test/ui/constructor-lifetime-args.stderr", "status": "modified", "additions": 51, "deletions": 11, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconstructor-lifetime-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fconstructor-lifetime-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconstructor-lifetime-args.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,26 +1,66 @@\n-error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+error[E0107]: this struct takes 2 lifetime arguments but only 1 lifetime argument was supplied\n   --> $DIR/constructor-lifetime-args.rs:17:5\n    |\n LL |     S::<'static>(&0, &0);\n-   |     ^^^^^^^^^^^^ expected 2 lifetime arguments\n+   |     ^   ------- supplied 1 lifetime argument\n+   |     |\n+   |     expected 2 lifetime arguments\n+   |\n+note: struct defined here, with 2 lifetime parameters: `'a`, `'b`\n+  --> $DIR/constructor-lifetime-args.rs:9:8\n+   |\n+LL | struct S<'a, 'b>(&'a u8, &'b u8);\n+   |        ^ --  --\n+help: add missing lifetime argument\n+   |\n+LL |     S::<'static, 'b>(&0, &0);\n+   |                ^^^^\n \n-error[E0107]: wrong number of lifetime arguments: expected 2, found 3\n-  --> $DIR/constructor-lifetime-args.rs:19:27\n+error[E0107]: this struct takes 2 lifetime arguments but 3 lifetime arguments were supplied\n+  --> $DIR/constructor-lifetime-args.rs:19:5\n    |\n LL |     S::<'static, 'static, 'static>(&0, &0);\n-   |                           ^^^^^^^ unexpected lifetime argument\n+   |     ^                   --------- help: remove this lifetime argument\n+   |     |\n+   |     expected 2 lifetime arguments\n+   |\n+note: struct defined here, with 2 lifetime parameters: `'a`, `'b`\n+  --> $DIR/constructor-lifetime-args.rs:9:8\n+   |\n+LL | struct S<'a, 'b>(&'a u8, &'b u8);\n+   |        ^ --  --\n \n-error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n-  --> $DIR/constructor-lifetime-args.rs:22:5\n+error[E0107]: this enum takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+  --> $DIR/constructor-lifetime-args.rs:22:8\n    |\n LL |     E::V::<'static>(&0);\n-   |     ^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+   |        ^   ------- supplied 1 lifetime argument\n+   |        |\n+   |        expected 2 lifetime arguments\n+   |\n+note: enum defined here, with 2 lifetime parameters: `'a`, `'b`\n+  --> $DIR/constructor-lifetime-args.rs:10:6\n+   |\n+LL | enum E<'a, 'b> {\n+   |      ^ --  --\n+help: add missing lifetime argument\n+   |\n+LL |     E::V::<'static, 'b>(&0);\n+   |                   ^^^^\n \n-error[E0107]: wrong number of lifetime arguments: expected 2, found 3\n-  --> $DIR/constructor-lifetime-args.rs:24:30\n+error[E0107]: this enum takes 2 lifetime arguments but 3 lifetime arguments were supplied\n+  --> $DIR/constructor-lifetime-args.rs:24:8\n    |\n LL |     E::V::<'static, 'static, 'static>(&0);\n-   |                              ^^^^^^^ unexpected lifetime argument\n+   |        ^                   --------- help: remove this lifetime argument\n+   |        |\n+   |        expected 2 lifetime arguments\n+   |\n+note: enum defined here, with 2 lifetime parameters: `'a`, `'b`\n+  --> $DIR/constructor-lifetime-args.rs:10:6\n+   |\n+LL | enum E<'a, 'b> {\n+   |      ^ --  --\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c3dde72599b71d719f3d9a8b0c8908dcf3c33462", "filename": "src/test/ui/error-codes/E0107.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ferror-codes%2FE0107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ferror-codes%2FE0107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0107.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -9,15 +9,16 @@ enum Bar {\n \n struct Baz<'a, 'b, 'c> {\n     buzz: Buzz<'a>,\n-    //~^ ERROR E0107\n-    //~| expected 2 lifetime arguments\n+    //~^ ERROR this struct takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+    //~| HELP add missing lifetime argument\n+\n     bar: Bar<'a>,\n-    //~^ ERROR E0107\n-    //~| unexpected lifetime argument\n+    //~^ ERROR this enum takes 0 lifetime arguments but 1 lifetime argument was supplied\n+    //~| HELP remove these generics\n+\n     foo2: Foo<'a, 'b, 'c>,\n-    //~^ ERROR E0107\n-    //~| unexpected lifetime argument\n-    //~| unexpected lifetime argument\n+    //~^ ERROR this struct takes 1 lifetime argument but 3 lifetime arguments were supplied\n+    //~| HELP remove these lifetime arguments\n }\n \n fn main() {}"}, {"sha": "30a2768d060583f2c04e99ac52b47c958fdf3d2a", "filename": "src/test/ui/error-codes/E0107.stderr", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,22 +1,48 @@\n-error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+error[E0107]: this struct takes 2 lifetime arguments but only 1 lifetime argument was supplied\n   --> $DIR/E0107.rs:11:11\n    |\n LL |     buzz: Buzz<'a>,\n-   |           ^^^^^^^^ expected 2 lifetime arguments\n+   |           ^^^^ -- supplied 1 lifetime argument\n+   |           |\n+   |           expected 2 lifetime arguments\n+   |\n+note: struct defined here, with 2 lifetime parameters: `'a`, `'b`\n+  --> $DIR/E0107.rs:2:8\n+   |\n+LL | struct Buzz<'a, 'b>(&'a str, &'b str);\n+   |        ^^^^ --  --\n+help: add missing lifetime argument\n+   |\n+LL |     buzz: Buzz<'a, 'b>,\n+   |                  ^^^^\n \n-error[E0107]: wrong number of lifetime arguments: expected 0, found 1\n-  --> $DIR/E0107.rs:14:14\n+error[E0107]: this enum takes 0 lifetime arguments but 1 lifetime argument was supplied\n+  --> $DIR/E0107.rs:15:10\n    |\n LL |     bar: Bar<'a>,\n-   |              ^^ unexpected lifetime argument\n+   |          ^^^---- help: remove these generics\n+   |          |\n+   |          expected 0 lifetime arguments\n+   |\n+note: enum defined here, with 0 lifetime parameters\n+  --> $DIR/E0107.rs:4:6\n+   |\n+LL | enum Bar {\n+   |      ^^^\n \n-error[E0107]: wrong number of lifetime arguments: expected 1, found 3\n-  --> $DIR/E0107.rs:17:19\n+error[E0107]: this struct takes 1 lifetime argument but 3 lifetime arguments were supplied\n+  --> $DIR/E0107.rs:19:11\n    |\n LL |     foo2: Foo<'a, 'b, 'c>,\n-   |                   ^^  ^^ unexpected lifetime argument\n-   |                   |\n-   |                   unexpected lifetime argument\n+   |           ^^^   -------- help: remove these lifetime arguments\n+   |           |\n+   |           expected 1 lifetime argument\n+   |\n+note: struct defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/E0107.rs:1:8\n+   |\n+LL | struct Foo<'a>(&'a str);\n+   |        ^^^ --\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9d7ef88b7679d19140693dbc781828ecdb4e8e90", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -11,10 +11,10 @@ trait Foo {\n     // Test parameters in default values\n     type FOk<T> = Self::E<'static, T>;\n     type FErr1 = Self::E<'static, 'static>;\n-    //~^ ERROR wrong number of lifetime arguments: expected 1, found 2\n-    //~| ERROR wrong number of type arguments: expected 1, found 0\n+    //~^ ERROR this associated type takes 1 lifetime argument but 2 lifetime arguments were supplied\n+    //~| ERROR this associated type takes 1 type argument but 0 type arguments were supplied\n     type FErr2<T> = Self::E<'static, T, u32>;\n-    //~^ ERROR wrong number of type arguments: expected 1, found 2\n+    //~^ ERROR this associated type takes 1 type argument but 2 type arguments were supplied\n }\n \n fn main() {}"}, {"sha": "d021889c08424c1d8674ec5ace5f451df0d1f21e", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind.stderr", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,20 +1,46 @@\n-error[E0107]: wrong number of lifetime arguments: expected 1, found 2\n-  --> $DIR/parameter_number_and_kind.rs:13:35\n+error[E0107]: this associated type takes 1 lifetime argument but 2 lifetime arguments were supplied\n+  --> $DIR/parameter_number_and_kind.rs:13:24\n    |\n LL |     type FErr1 = Self::E<'static, 'static>;\n-   |                                   ^^^^^^^ unexpected lifetime argument\n+   |                        ^        --------- help: remove this lifetime argument\n+   |                        |\n+   |                        expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/parameter_number_and_kind.rs:10:10\n+   |\n+LL |     type E<'a, T>;\n+   |          ^ --\n \n-error[E0107]: wrong number of type arguments: expected 1, found 0\n-  --> $DIR/parameter_number_and_kind.rs:13:18\n+error[E0107]: this associated type takes 1 type argument but 0 type arguments were supplied\n+  --> $DIR/parameter_number_and_kind.rs:13:24\n    |\n LL |     type FErr1 = Self::E<'static, 'static>;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 type argument\n+   |                        ^ expected 1 type argument\n+   |\n+note: associated type defined here, with 1 type parameter: `T`\n+  --> $DIR/parameter_number_and_kind.rs:10:10\n+   |\n+LL |     type E<'a, T>;\n+   |          ^     -\n+help: add missing type argument\n+   |\n+LL |     type FErr1 = Self::E<'static, 'static, T>;\n+   |                                          ^^^\n \n-error[E0107]: wrong number of type arguments: expected 1, found 2\n-  --> $DIR/parameter_number_and_kind.rs:16:41\n+error[E0107]: this associated type takes 1 type argument but 2 type arguments were supplied\n+  --> $DIR/parameter_number_and_kind.rs:16:27\n    |\n LL |     type FErr2<T> = Self::E<'static, T, u32>;\n-   |                                         ^^^ unexpected type argument\n+   |                           ^           ----- help: remove this type argument\n+   |                           |\n+   |                           expected 1 type argument\n+   |\n+note: associated type defined here, with 1 type parameter: `T`\n+  --> $DIR/parameter_number_and_kind.rs:10:10\n+   |\n+LL |     type E<'a, T>;\n+   |          ^     -\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0e0d1daec5f313c6167dd28d2f84e9266724e560", "filename": "src/test/ui/generics/generic-arg-mismatch-recover.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -3,8 +3,10 @@ struct Foo<'a, T: 'a>(&'a T);\n struct Bar<'a>(&'a ());\n \n fn main() {\n-    Foo::<'static, 'static, ()>(&0); //~ ERROR wrong number of lifetime arguments\n+    Foo::<'static, 'static, ()>(&0);\n+    //~^ ERROR this struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n \n-    Bar::<'static, 'static, ()>(&()); //~ ERROR wrong number of lifetime arguments\n-    //~^ ERROR wrong number of type arguments\n+    Bar::<'static, 'static, ()>(&());\n+    //~^ ERROR this struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n+    //~| ERROR this struct takes 0 type arguments but 1 type argument was supplied\n }"}, {"sha": "ca73b82737d64b406b8333761919e25fef39ec30", "filename": "src/test/ui/generics/generic-arg-mismatch-recover.stderr", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,20 +1,44 @@\n-error[E0107]: wrong number of lifetime arguments: expected 1, found 2\n-  --> $DIR/generic-arg-mismatch-recover.rs:6:20\n+error[E0107]: this struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n+  --> $DIR/generic-arg-mismatch-recover.rs:6:5\n    |\n LL |     Foo::<'static, 'static, ()>(&0);\n-   |                    ^^^^^^^ unexpected lifetime argument\n+   |     ^^^            --------- help: remove this lifetime argument\n+   |     |\n+   |     expected 1 lifetime argument\n+   |\n+note: struct defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/generic-arg-mismatch-recover.rs:1:8\n+   |\n+LL | struct Foo<'a, T: 'a>(&'a T);\n+   |        ^^^ --\n \n-error[E0107]: wrong number of lifetime arguments: expected 1, found 2\n-  --> $DIR/generic-arg-mismatch-recover.rs:8:20\n+error[E0107]: this struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n+  --> $DIR/generic-arg-mismatch-recover.rs:9:5\n    |\n LL |     Bar::<'static, 'static, ()>(&());\n-   |                    ^^^^^^^ unexpected lifetime argument\n+   |     ^^^            --------- help: remove this lifetime argument\n+   |     |\n+   |     expected 1 lifetime argument\n+   |\n+note: struct defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/generic-arg-mismatch-recover.rs:3:8\n+   |\n+LL | struct Bar<'a>(&'a ());\n+   |        ^^^ --\n \n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/generic-arg-mismatch-recover.rs:8:29\n+error[E0107]: this struct takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/generic-arg-mismatch-recover.rs:9:5\n    |\n LL |     Bar::<'static, 'static, ()>(&());\n-   |                             ^^ unexpected type argument\n+   |     ^^^                   ---- help: remove this type argument\n+   |     |\n+   |     expected 0 type arguments\n+   |\n+note: struct defined here, with 0 type parameters\n+  --> $DIR/generic-arg-mismatch-recover.rs:3:8\n+   |\n+LL | struct Bar<'a>(&'a ());\n+   |        ^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "01964f652ee090f30bb36b45b1dde405014a43a9", "filename": "src/test/ui/generics/generic-impl-less-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -9,5 +9,5 @@ impl<A, B, C> Foo<A, B, C> {\n \n fn main() {\n     Foo::<isize>::new();\n-    //~^ ERROR wrong number of type arguments\n+    //~^ ERROR this struct takes at least 2 type arguments but only 1 type argument was supplied\n }"}, {"sha": "a8a17876ee0fdab5578fc30c42fc6f3c41c50680", "filename": "src/test/ui/generics/generic-impl-less-params-with-defaults.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,8 +1,20 @@\n-error[E0107]: wrong number of type arguments: expected at least 2, found 1\n+error[E0107]: this struct takes at least 2 type arguments but only 1 type argument was supplied\n   --> $DIR/generic-impl-less-params-with-defaults.rs:11:5\n    |\n LL |     Foo::<isize>::new();\n-   |     ^^^^^^^^^^^^^^^^^ expected at least 2 type arguments\n+   |     ^^^   ----- supplied 1 type argument\n+   |     |\n+   |     expected at least 2 type arguments\n+   |\n+note: struct defined here, with at least 2 type parameters: `A`, `B`\n+  --> $DIR/generic-impl-less-params-with-defaults.rs:3:8\n+   |\n+LL | struct Foo<A, B, C = (A, B)>(\n+   |        ^^^ -  -\n+help: add missing type argument\n+   |\n+LL |     Foo::<isize, B>::new();\n+   |                ^^^\n \n error: aborting due to previous error\n "}, {"sha": "24c41a9088b994d267dea8bfb82c4e9f90ef5bfb", "filename": "src/test/ui/generics/generic-impl-more-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -11,5 +11,5 @@ impl<T, A> Vec<T, A> {\n \n fn main() {\n     Vec::<isize, Heap, bool>::new();\n-    //~^ ERROR wrong number of type arguments\n+    //~^ ERROR this struct takes at most 2 type arguments but 3 type arguments were supplied\n }"}, {"sha": "8ba86afe91ea0b99c8f454fd632838ebb9545e90", "filename": "src/test/ui/generics/generic-impl-more-params-with-defaults.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,8 +1,16 @@\n-error[E0107]: wrong number of type arguments: expected at most 2, found 3\n-  --> $DIR/generic-impl-more-params-with-defaults.rs:13:24\n+error[E0107]: this struct takes at most 2 type arguments but 3 type arguments were supplied\n+  --> $DIR/generic-impl-more-params-with-defaults.rs:13:5\n    |\n LL |     Vec::<isize, Heap, bool>::new();\n-   |                        ^^^^ unexpected type argument\n+   |     ^^^              ------ help: remove this type argument\n+   |     |\n+   |     expected at most 2 type arguments\n+   |\n+note: struct defined here, with at most 2 type parameters: `T`, `A`\n+  --> $DIR/generic-impl-more-params-with-defaults.rs:5:8\n+   |\n+LL | struct Vec<T, A = Heap>(\n+   |        ^^^ -  -\n \n error: aborting due to previous error\n "}, {"sha": "6b877ab8aee6ad86093fc82ed5d4e0f3d9dae82e", "filename": "src/test/ui/generics/generic-type-less-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-less-params-with-defaults.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -7,5 +7,5 @@ struct Vec<T, A = Heap>(\n \n fn main() {\n     let _: Vec;\n-    //~^ ERROR wrong number of type arguments: expected at least 1, found 0 [E0107]\n+    //~^ ERROR missing generics for struct `Vec`\n }"}, {"sha": "93f7a24d877418c3689d5ee635785ffd573b296a", "filename": "src/test/ui/generics/generic-type-less-params-with-defaults.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-less-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-less-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-less-params-with-defaults.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,8 +1,18 @@\n-error[E0107]: wrong number of type arguments: expected at least 1, found 0\n+error[E0107]: missing generics for struct `Vec`\n   --> $DIR/generic-type-less-params-with-defaults.rs:9:12\n    |\n LL |     let _: Vec;\n    |            ^^^ expected at least 1 type argument\n+   |\n+note: struct defined here, with at least 1 type parameter: `T`\n+  --> $DIR/generic-type-less-params-with-defaults.rs:5:8\n+   |\n+LL | struct Vec<T, A = Heap>(\n+   |        ^^^ -\n+help: use angle brackets to add missing type argument\n+   |\n+LL |     let _: Vec<T>;\n+   |               ^^^\n \n error: aborting due to previous error\n "}, {"sha": "c421774ebbadd1065aec8fe506ec2592406f2137", "filename": "src/test/ui/generics/generic-type-more-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -7,5 +7,5 @@ struct Vec<T, A = Heap>(\n \n fn main() {\n     let _: Vec<isize, Heap, bool>;\n-    //~^ ERROR wrong number of type arguments: expected at most 2, found 3 [E0107]\n+    //~^ ERROR this struct takes at most 2 type arguments but 3 type arguments were supplied\n }"}, {"sha": "e331481390b66f1b066cae91762ed654aea907cd", "filename": "src/test/ui/generics/generic-type-more-params-with-defaults.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,8 +1,16 @@\n-error[E0107]: wrong number of type arguments: expected at most 2, found 3\n-  --> $DIR/generic-type-more-params-with-defaults.rs:9:29\n+error[E0107]: this struct takes at most 2 type arguments but 3 type arguments were supplied\n+  --> $DIR/generic-type-more-params-with-defaults.rs:9:12\n    |\n LL |     let _: Vec<isize, Heap, bool>;\n-   |                             ^^^^ unexpected type argument\n+   |            ^^^            ------ help: remove this type argument\n+   |            |\n+   |            expected at most 2 type arguments\n+   |\n+note: struct defined here, with at most 2 type parameters: `T`, `A`\n+  --> $DIR/generic-type-more-params-with-defaults.rs:5:8\n+   |\n+LL | struct Vec<T, A = Heap>(\n+   |        ^^^ -  -\n \n error: aborting due to previous error\n "}, {"sha": "6b99865202e5487f3042c3695c1098521b154927", "filename": "src/test/ui/generics/wrong-number-of-args.rs", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -0,0 +1,161 @@\n+mod no_generics {\n+    struct Ty;\n+\n+    type A = Ty;\n+\n+    type B = Ty<'static>;\n+    //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+    //~| HELP remove these generics\n+\n+    type C = Ty<'static, usize>;\n+    //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+    //~| ERROR this struct takes 0 type arguments but 1 type argument was supplied\n+    //~| HELP remove this lifetime argument\n+    //~| HELP remove this type argument\n+\n+    type D = Ty<'static, usize, { 0 }>;\n+    //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+    //~| ERROR this struct takes 0 generic arguments but 2 generic arguments were supplied\n+    //~| HELP remove this lifetime argument\n+    //~| HELP remove these generic arguments\n+}\n+\n+mod type_and_type {\n+    struct Ty<A, B>;\n+\n+    type A = Ty;\n+    //~^ ERROR missing generics for struct `type_and_type::Ty`\n+    //~| HELP use angle brackets\n+\n+    type B = Ty<usize>;\n+    //~^ ERROR this struct takes 2 type arguments but only 1 type argument was supplied\n+    //~| HELP add missing type argument\n+\n+    type C = Ty<usize, String>;\n+\n+    type D = Ty<usize, String, char>;\n+    //~^ ERROR this struct takes 2 type arguments but 3 type arguments were supplied\n+    //~| HELP remove this type argument\n+}\n+\n+mod lifetime_and_type {\n+    struct Ty<'a, T>;\n+\n+    type A = Ty;\n+    //~^ ERROR missing generics for struct `lifetime_and_type::Ty`\n+    //~| ERROR missing lifetime specifier\n+    //~| HELP consider introducing\n+    //~| HELP use angle brackets\n+\n+    type B = Ty<'static>;\n+    //~^ ERROR this struct takes 1 type argument but 0 type arguments were supplied\n+    //~| HELP add missing type argument\n+\n+    type C = Ty<usize>;\n+    //~^ ERROR missing lifetime specifier\n+    //~| HELP consider introducing\n+\n+    type D = Ty<'static, usize>;\n+}\n+\n+mod type_and_type_and_type {\n+    struct Ty<A, B, C = &'static str>;\n+\n+    type A = Ty;\n+    //~^ ERROR missing generics for struct `type_and_type_and_type::Ty`\n+    //~| HELP use angle brackets\n+\n+    type B = Ty<usize>;\n+    //~^ ERROR this struct takes at least 2 type arguments but only 1 type argument was supplied\n+    //~| HELP add missing type argument\n+\n+    type C = Ty<usize, String>;\n+\n+    type D = Ty<usize, String, char>;\n+\n+    type E = Ty<usize, String, char, f64>;\n+    //~^ ERROR this struct takes at most 3 type arguments but 4 type arguments were supplied\n+    //~| HELP remove\n+}\n+\n+// Traits have an implicit `Self` type - these tests ensure we don't accidentally return it\n+// somewhere in the message\n+mod r#trait {\n+    trait NonGeneric {\n+        //\n+    }\n+\n+    trait GenericLifetime<'a> {\n+        //\n+    }\n+\n+    trait GenericType<A> {\n+        //\n+    }\n+\n+    type A = Box<dyn NonGeneric<usize>>;\n+    //~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n+    //~| HELP remove\n+\n+    type B = Box<dyn GenericLifetime>;\n+    //~^ ERROR missing lifetime specifier\n+    //~| HELP consider introducing\n+\n+    type C = Box<dyn GenericLifetime<'static, 'static>>;\n+    //~^ ERROR this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+    //~| HELP remove\n+\n+    type D = Box<dyn GenericType>;\n+    //~^ ERROR missing generics for trait `GenericType`\n+    //~| HELP use angle brackets\n+\n+    type E = Box<dyn GenericType<String, usize>>;\n+    //~^ ERROR this trait takes 1 type argument but 2 type arguments were supplied\n+    //~| HELP remove\n+}\n+\n+mod stdlib {\n+    mod hash_map {\n+        use std::collections::HashMap;\n+\n+        type A = HashMap;\n+        //~^ ERROR missing generics for struct `HashMap`\n+        //~| HELP use angle brackets\n+\n+        type B = HashMap<String>;\n+        //~^ ERROR this struct takes at least 2 type arguments but only 1 type argument was supplied\n+        //~| HELP add missing type argument\n+\n+        type C = HashMap<'static>;\n+        //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+        //~| HELP remove these generics\n+        //~| ERROR this struct takes at least 2 type arguments but 0 type arguments were supplied\n+        //~| HELP add missing type arguments\n+\n+        type D = HashMap<usize, String, char, f64>;\n+        //~^ ERROR this struct takes at most 3 type arguments but 4 type arguments were supplied\n+        //~| HELP remove this type argument\n+    }\n+\n+    mod result {\n+        type A = Result;\n+        //~^ ERROR missing generics for enum `std::result::Result`\n+        //~| HELP use angle brackets\n+\n+        type B = Result<String>;\n+        //~^ ERROR this enum takes 2 type arguments but only 1 type argument was supplied\n+        //~| HELP add missing type argument\n+\n+        type C = Result<'static>;\n+        //~^ ERROR this enum takes 0 lifetime arguments but 1 lifetime argument was supplied\n+        //~| HELP remove these generics\n+        //~| ERROR this enum takes 2 type arguments but 0 type arguments were supplied\n+        //~| HELP add missing type arguments\n+\n+        type D = Result<usize, String, char>;\n+        //~^ ERROR this enum takes 2 type arguments but 3 type arguments were supplied\n+        //~| HELP remove\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "2a34fba2c48750c9bd6ea565efd3283646779fcc", "filename": "src/test/ui/generics/wrong-number-of-args.stderr", "status": "added", "additions": 449, "deletions": 0, "changes": 449, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -0,0 +1,449 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/wrong-number-of-args.rs:44:14\n+   |\n+LL |     type A = Ty;\n+   |              ^^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     type A<'a> = Ty<'a>;\n+   |           ^^^^   ^^^^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/wrong-number-of-args.rs:54:17\n+   |\n+LL |     type C = Ty<usize>;\n+   |                 ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     type C<'a> = Ty<'a, usize>;\n+   |           ^^^^      ^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/wrong-number-of-args.rs:100:22\n+   |\n+LL |     type B = Box<dyn GenericLifetime>;\n+   |                      ^^^^^^^^^^^^^^^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     type B<'a> = Box<dyn GenericLifetime<'a>>;\n+   |           ^^^^           ^^^^^^^^^^^^^^^^^^^\n+\n+error[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+  --> $DIR/wrong-number-of-args.rs:6:14\n+   |\n+LL |     type B = Ty<'static>;\n+   |              ^^--------- help: remove these generics\n+   |              |\n+   |              expected 0 lifetime arguments\n+   |\n+note: struct defined here, with 0 lifetime parameters\n+  --> $DIR/wrong-number-of-args.rs:2:12\n+   |\n+LL |     struct Ty;\n+   |            ^^\n+\n+error[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+  --> $DIR/wrong-number-of-args.rs:10:14\n+   |\n+LL |     type C = Ty<'static, usize>;\n+   |              ^^ --------- help: remove this lifetime argument\n+   |              |\n+   |              expected 0 lifetime arguments\n+   |\n+note: struct defined here, with 0 lifetime parameters\n+  --> $DIR/wrong-number-of-args.rs:2:12\n+   |\n+LL |     struct Ty;\n+   |            ^^\n+\n+error[E0107]: this struct takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/wrong-number-of-args.rs:10:14\n+   |\n+LL |     type C = Ty<'static, usize>;\n+   |              ^^        ------- help: remove this type argument\n+   |              |\n+   |              expected 0 type arguments\n+   |\n+note: struct defined here, with 0 type parameters\n+  --> $DIR/wrong-number-of-args.rs:2:12\n+   |\n+LL |     struct Ty;\n+   |            ^^\n+\n+error[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+  --> $DIR/wrong-number-of-args.rs:16:14\n+   |\n+LL |     type D = Ty<'static, usize, { 0 }>;\n+   |              ^^ --------- help: remove this lifetime argument\n+   |              |\n+   |              expected 0 lifetime arguments\n+   |\n+note: struct defined here, with 0 lifetime parameters\n+  --> $DIR/wrong-number-of-args.rs:2:12\n+   |\n+LL |     struct Ty;\n+   |            ^^\n+\n+error[E0107]: this struct takes 0 generic arguments but 2 generic arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:16:14\n+   |\n+LL |     type D = Ty<'static, usize, { 0 }>;\n+   |              ^^        -------------- help: remove these generic arguments\n+   |              |\n+   |              expected 0 generic arguments\n+   |\n+note: struct defined here, with 0 generic parameters\n+  --> $DIR/wrong-number-of-args.rs:2:12\n+   |\n+LL |     struct Ty;\n+   |            ^^\n+\n+error[E0107]: missing generics for struct `type_and_type::Ty`\n+  --> $DIR/wrong-number-of-args.rs:26:14\n+   |\n+LL |     type A = Ty;\n+   |              ^^ expected 2 type arguments\n+   |\n+note: struct defined here, with 2 type parameters: `A`, `B`\n+  --> $DIR/wrong-number-of-args.rs:24:12\n+   |\n+LL |     struct Ty<A, B>;\n+   |            ^^ -  -\n+help: use angle brackets to add missing type arguments\n+   |\n+LL |     type A = Ty<A, B>;\n+   |                ^^^^^^\n+\n+error[E0107]: this struct takes 2 type arguments but only 1 type argument was supplied\n+  --> $DIR/wrong-number-of-args.rs:30:14\n+   |\n+LL |     type B = Ty<usize>;\n+   |              ^^ ----- supplied 1 type argument\n+   |              |\n+   |              expected 2 type arguments\n+   |\n+note: struct defined here, with 2 type parameters: `A`, `B`\n+  --> $DIR/wrong-number-of-args.rs:24:12\n+   |\n+LL |     struct Ty<A, B>;\n+   |            ^^ -  -\n+help: add missing type argument\n+   |\n+LL |     type B = Ty<usize, B>;\n+   |                      ^^^\n+\n+error[E0107]: this struct takes 2 type arguments but 3 type arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:36:14\n+   |\n+LL |     type D = Ty<usize, String, char>;\n+   |              ^^              ------ help: remove this type argument\n+   |              |\n+   |              expected 2 type arguments\n+   |\n+note: struct defined here, with 2 type parameters: `A`, `B`\n+  --> $DIR/wrong-number-of-args.rs:24:12\n+   |\n+LL |     struct Ty<A, B>;\n+   |            ^^ -  -\n+\n+error[E0107]: missing generics for struct `lifetime_and_type::Ty`\n+  --> $DIR/wrong-number-of-args.rs:44:14\n+   |\n+LL |     type A = Ty;\n+   |              ^^ expected 1 type argument\n+   |\n+note: struct defined here, with 1 type parameter: `T`\n+  --> $DIR/wrong-number-of-args.rs:42:12\n+   |\n+LL |     struct Ty<'a, T>;\n+   |            ^^     -\n+help: use angle brackets to add missing type argument\n+   |\n+LL |     type A = Ty<T>;\n+   |                ^^^\n+\n+error[E0107]: this struct takes 1 type argument but 0 type arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:50:14\n+   |\n+LL |     type B = Ty<'static>;\n+   |              ^^ expected 1 type argument\n+   |\n+note: struct defined here, with 1 type parameter: `T`\n+  --> $DIR/wrong-number-of-args.rs:42:12\n+   |\n+LL |     struct Ty<'a, T>;\n+   |            ^^     -\n+help: add missing type argument\n+   |\n+LL |     type B = Ty<'static, T>;\n+   |                        ^^^\n+\n+error[E0107]: missing generics for struct `type_and_type_and_type::Ty`\n+  --> $DIR/wrong-number-of-args.rs:64:14\n+   |\n+LL |     type A = Ty;\n+   |              ^^ expected at least 2 type arguments\n+   |\n+note: struct defined here, with at least 2 type parameters: `A`, `B`\n+  --> $DIR/wrong-number-of-args.rs:62:12\n+   |\n+LL |     struct Ty<A, B, C = &'static str>;\n+   |            ^^ -  -\n+help: use angle brackets to add missing type arguments\n+   |\n+LL |     type A = Ty<A, B>;\n+   |                ^^^^^^\n+\n+error[E0107]: this struct takes at least 2 type arguments but only 1 type argument was supplied\n+  --> $DIR/wrong-number-of-args.rs:68:14\n+   |\n+LL |     type B = Ty<usize>;\n+   |              ^^ ----- supplied 1 type argument\n+   |              |\n+   |              expected at least 2 type arguments\n+   |\n+note: struct defined here, with at least 2 type parameters: `A`, `B`\n+  --> $DIR/wrong-number-of-args.rs:62:12\n+   |\n+LL |     struct Ty<A, B, C = &'static str>;\n+   |            ^^ -  -\n+help: add missing type argument\n+   |\n+LL |     type B = Ty<usize, B>;\n+   |                      ^^^\n+\n+error[E0107]: this struct takes at most 3 type arguments but 4 type arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:76:14\n+   |\n+LL |     type E = Ty<usize, String, char, f64>;\n+   |              ^^                    ----- help: remove this type argument\n+   |              |\n+   |              expected at most 3 type arguments\n+   |\n+note: struct defined here, with at most 3 type parameters: `A`, `B`, `C`\n+  --> $DIR/wrong-number-of-args.rs:62:12\n+   |\n+LL |     struct Ty<A, B, C = &'static str>;\n+   |            ^^ -  -  -\n+\n+error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/wrong-number-of-args.rs:96:22\n+   |\n+LL |     type A = Box<dyn NonGeneric<usize>>;\n+   |                      ^^^^^^^^^^------- help: remove these generics\n+   |                      |\n+   |                      expected 0 type arguments\n+   |\n+note: trait defined here, with 0 type parameters\n+  --> $DIR/wrong-number-of-args.rs:84:11\n+   |\n+LL |     trait NonGeneric {\n+   |           ^^^^^^^^^^\n+\n+error[E0107]: this trait takes 1 lifetime argument but 2 lifetime arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:104:22\n+   |\n+LL |     type C = Box<dyn GenericLifetime<'static, 'static>>;\n+   |                      ^^^^^^^^^^^^^^^        --------- help: remove this lifetime argument\n+   |                      |\n+   |                      expected 1 lifetime argument\n+   |\n+note: trait defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/wrong-number-of-args.rs:88:11\n+   |\n+LL |     trait GenericLifetime<'a> {\n+   |           ^^^^^^^^^^^^^^^ --\n+\n+error[E0107]: missing generics for trait `GenericType`\n+  --> $DIR/wrong-number-of-args.rs:108:22\n+   |\n+LL |     type D = Box<dyn GenericType>;\n+   |                      ^^^^^^^^^^^ expected 1 type argument\n+   |\n+note: trait defined here, with 1 type parameter: `A`\n+  --> $DIR/wrong-number-of-args.rs:92:11\n+   |\n+LL |     trait GenericType<A> {\n+   |           ^^^^^^^^^^^ -\n+help: use angle brackets to add missing type argument\n+   |\n+LL |     type D = Box<dyn GenericType<A>>;\n+   |                                 ^^^\n+\n+error[E0107]: this trait takes 1 type argument but 2 type arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:112:22\n+   |\n+LL |     type E = Box<dyn GenericType<String, usize>>;\n+   |                      ^^^^^^^^^^^       ------- help: remove this type argument\n+   |                      |\n+   |                      expected 1 type argument\n+   |\n+note: trait defined here, with 1 type parameter: `A`\n+  --> $DIR/wrong-number-of-args.rs:92:11\n+   |\n+LL |     trait GenericType<A> {\n+   |           ^^^^^^^^^^^ -\n+\n+error[E0107]: missing generics for struct `HashMap`\n+  --> $DIR/wrong-number-of-args.rs:121:18\n+   |\n+LL |         type A = HashMap;\n+   |                  ^^^^^^^ expected at least 2 type arguments\n+   |\n+note: struct defined here, with at least 2 type parameters: `K`, `V`\n+  --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n+   |\n+LL | pub struct HashMap<K, V, S = RandomState> {\n+   |            ^^^^^^^ -  -\n+help: use angle brackets to add missing type arguments\n+   |\n+LL |         type A = HashMap<K, V>;\n+   |                         ^^^^^^\n+\n+error[E0107]: this struct takes at least 2 type arguments but only 1 type argument was supplied\n+  --> $DIR/wrong-number-of-args.rs:125:18\n+   |\n+LL |         type B = HashMap<String>;\n+   |                  ^^^^^^^ ------ supplied 1 type argument\n+   |                  |\n+   |                  expected at least 2 type arguments\n+   |\n+note: struct defined here, with at least 2 type parameters: `K`, `V`\n+  --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n+   |\n+LL | pub struct HashMap<K, V, S = RandomState> {\n+   |            ^^^^^^^ -  -\n+help: add missing type argument\n+   |\n+LL |         type B = HashMap<String, V>;\n+   |                                ^^^\n+\n+error[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+  --> $DIR/wrong-number-of-args.rs:129:18\n+   |\n+LL |         type C = HashMap<'static>;\n+   |                  ^^^^^^^--------- help: remove these generics\n+   |                  |\n+   |                  expected 0 lifetime arguments\n+   |\n+note: struct defined here, with 0 lifetime parameters\n+  --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n+   |\n+LL | pub struct HashMap<K, V, S = RandomState> {\n+   |            ^^^^^^^\n+\n+error[E0107]: this struct takes at least 2 type arguments but 0 type arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:129:18\n+   |\n+LL |         type C = HashMap<'static>;\n+   |                  ^^^^^^^ expected at least 2 type arguments\n+   |\n+note: struct defined here, with at least 2 type parameters: `K`, `V`\n+  --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n+   |\n+LL | pub struct HashMap<K, V, S = RandomState> {\n+   |            ^^^^^^^ -  -\n+help: add missing type arguments\n+   |\n+LL |         type C = HashMap<'static, K, V>;\n+   |                                 ^^^^^^\n+\n+error[E0107]: this struct takes at most 3 type arguments but 4 type arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:135:18\n+   |\n+LL |         type D = HashMap<usize, String, char, f64>;\n+   |                  ^^^^^^^                    ----- help: remove this type argument\n+   |                  |\n+   |                  expected at most 3 type arguments\n+   |\n+note: struct defined here, with at most 3 type parameters: `K`, `V`, `S`\n+  --> $SRC_DIR/std/src/collections/hash/map.rs:LL:COL\n+   |\n+LL | pub struct HashMap<K, V, S = RandomState> {\n+   |            ^^^^^^^ -  -  -\n+\n+error[E0107]: missing generics for enum `std::result::Result`\n+  --> $DIR/wrong-number-of-args.rs:141:18\n+   |\n+LL |         type A = Result;\n+   |                  ^^^^^^ expected 2 type arguments\n+   |\n+note: enum defined here, with 2 type parameters: `T`, `E`\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL | pub enum Result<T, E> {\n+   |          ^^^^^^ -  -\n+help: use angle brackets to add missing type arguments\n+   |\n+LL |         type A = Result<T, E>;\n+   |                        ^^^^^^\n+\n+error[E0107]: this enum takes 2 type arguments but only 1 type argument was supplied\n+  --> $DIR/wrong-number-of-args.rs:145:18\n+   |\n+LL |         type B = Result<String>;\n+   |                  ^^^^^^ ------ supplied 1 type argument\n+   |                  |\n+   |                  expected 2 type arguments\n+   |\n+note: enum defined here, with 2 type parameters: `T`, `E`\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL | pub enum Result<T, E> {\n+   |          ^^^^^^ -  -\n+help: add missing type argument\n+   |\n+LL |         type B = Result<String, E>;\n+   |                               ^^^\n+\n+error[E0107]: this enum takes 0 lifetime arguments but 1 lifetime argument was supplied\n+  --> $DIR/wrong-number-of-args.rs:149:18\n+   |\n+LL |         type C = Result<'static>;\n+   |                  ^^^^^^--------- help: remove these generics\n+   |                  |\n+   |                  expected 0 lifetime arguments\n+   |\n+note: enum defined here, with 0 lifetime parameters\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL | pub enum Result<T, E> {\n+   |          ^^^^^^\n+\n+error[E0107]: this enum takes 2 type arguments but 0 type arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:149:18\n+   |\n+LL |         type C = Result<'static>;\n+   |                  ^^^^^^ expected 2 type arguments\n+   |\n+note: enum defined here, with 2 type parameters: `T`, `E`\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL | pub enum Result<T, E> {\n+   |          ^^^^^^ -  -\n+help: add missing type arguments\n+   |\n+LL |         type C = Result<'static, T, E>;\n+   |                                ^^^^^^\n+\n+error[E0107]: this enum takes 2 type arguments but 3 type arguments were supplied\n+  --> $DIR/wrong-number-of-args.rs:155:18\n+   |\n+LL |         type D = Result<usize, String, char>;\n+   |                  ^^^^^^              ------ help: remove this type argument\n+   |                  |\n+   |                  expected 2 type arguments\n+   |\n+note: enum defined here, with 2 type parameters: `T`, `E`\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL | pub enum Result<T, E> {\n+   |          ^^^^^^ -  -\n+\n+error: aborting due to 30 previous errors\n+\n+Some errors have detailed explanations: E0106, E0107.\n+For more information about an error, try `rustc --explain E0106`."}, {"sha": "67c2a42eafb78861a9b8fb00b99f114976cdf40a", "filename": "src/test/ui/issues/issue-14092.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-14092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-14092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14092.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,4 +1,4 @@\n fn fn1(0: Box) {}\n-        //~^ ERROR wrong number of type arguments: expected at least 1, found 0 [E0107]\n+//~^ ERROR missing generics for struct `Box`\n \n fn main() {}"}, {"sha": "5cacce751c925bd27721baa4a2aabe19b0ba076e", "filename": "src/test/ui/issues/issue-14092.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-14092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-14092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14092.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,8 +1,20 @@\n-error[E0107]: wrong number of type arguments: expected at least 1, found 0\n+error[E0107]: missing generics for struct `Box`\n   --> $DIR/issue-14092.rs:1:11\n    |\n LL | fn fn1(0: Box) {}\n    |           ^^^ expected at least 1 type argument\n+   |\n+note: struct defined here, with at least 1 type parameter: `T`\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+   |\n+LL | pub struct Box<\n+   |            ^^^\n+LL |     T: ?Sized,\n+   |     -\n+help: use angle brackets to add missing type argument\n+   |\n+LL | fn fn1(0: Box<T>) {}\n+   |              ^^^\n \n error: aborting due to previous error\n "}, {"sha": "8e4237039fad742c4b7b448238cc1da91f6e08af", "filename": "src/test/ui/issues/issue-16939.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-16939.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-16939.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16939.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -5,6 +5,12 @@ LL |     |t| f(t);\n    |         ^ - supplied 1 argument\n    |         |\n    |         expected 0 arguments\n+   |\n+note: associated function defined here\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL |     extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n+   |                           ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a81b32f050c3861e48979f6adb0cfb8ce00f46d5", "filename": "src/test/ui/issues/issue-18423.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-18423.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-18423.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18423.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,8 +1,8 @@\n // Test that `Box` cannot be used with a lifetime argument.\n \n struct Foo<'a> {\n-    x: Box<'a, isize> //~ ERROR wrong number of lifetime arguments\n+    x: Box<'a, isize>\n+    //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n }\n \n-pub fn main() {\n-}\n+fn main() { }"}, {"sha": "f9006235234b3f0c901911a4414062db1505498c", "filename": "src/test/ui/issues/issue-18423.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-18423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-18423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18423.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,8 +1,16 @@\n-error[E0107]: wrong number of lifetime arguments: expected 0, found 1\n-  --> $DIR/issue-18423.rs:4:12\n+error[E0107]: this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n+  --> $DIR/issue-18423.rs:4:8\n    |\n LL |     x: Box<'a, isize>\n-   |            ^^ unexpected lifetime argument\n+   |        ^^^ ---- help: remove this lifetime argument\n+   |        |\n+   |        expected 0 lifetime arguments\n+   |\n+note: struct defined here, with 0 lifetime parameters\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+   |\n+LL | pub struct Box<\n+   |            ^^^\n \n error: aborting due to previous error\n "}, {"sha": "e92273bd409142c22324b14f0c34b991530f8a9b", "filename": "src/test/ui/issues/issue-23024.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-23024.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-23024.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23024.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -8,6 +8,6 @@ fn main()\n     vfnfer.push(box h);\n     println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n     //~^ ERROR the precise format of `Fn`-family traits'\n-    //~| ERROR wrong number of type arguments: expected 1, found 0 [E0107]\n+    //~| ERROR missing generics for trait `Fn`\n     //~| ERROR the value of the associated type `Output` (from trait `FnOnce`)\n }"}, {"sha": "1b876090ad6f6522e4d60584ba8ac59cc7c72de7", "filename": "src/test/ui/issues/issue-23024.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23024.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -7,11 +7,21 @@ LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error[E0107]: wrong number of type arguments: expected 1, found 0\n+error[E0107]: missing generics for trait `Fn`\n   --> $DIR/issue-23024.rs:9:39\n    |\n LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn)(3));\n    |                                       ^^ expected 1 type argument\n+   |\n+note: trait defined here, with 1 type parameter: `Args`\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL | pub trait Fn<Args>: FnMut<Args> {\n+   |           ^^ ----\n+help: use angle brackets to add missing type argument\n+   |\n+LL |     println!(\"{:?}\",(vfnfer[0] as dyn Fn<Args>)(3));\n+   |                                         ^^^^^^\n \n error[E0191]: the value of the associated type `Output` (from trait `FnOnce`) must be specified\n   --> $DIR/issue-23024.rs:9:39"}, {"sha": "b93aeade95e42d37e1fba71104252081c6e74724", "filename": "src/test/ui/issues/issue-3044.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -7,6 +7,12 @@ LL |       needlesArr.iter().fold(|x, y| {\n    | |                       expected 2 arguments\n LL | |     });\n    | |_____- supplied 1 argument\n+   |\n+note: associated function defined here\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |     fn fold<B, F>(mut self, init: B, mut f: F) -> B\n+   |        ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "9bb164f1ddd2dfbf7eefed87bb7ee57262bc3535", "filename": "src/test/ui/issues/issue-3214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -6,7 +6,7 @@ fn foo<T>() {\n     }\n \n     impl<T> Drop for Foo<T> {\n-        //~^ ERROR wrong number of type arguments\n+        //~^ ERROR this struct takes 0 type arguments but 1 type argument was supplied\n         //~| ERROR the type parameter `T` is not constrained by the impl trait, self type, or predicates\n         fn drop(&mut self) {}\n     }"}, {"sha": "c2268924bc4e958bd684f0ef97a74d4ddaf0a830", "filename": "src/test/ui/issues/issue-3214.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -9,11 +9,19 @@ LL |     struct Foo {\n LL |         x: T,\n    |            ^ use of generic parameter from outer function\n \n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/issue-3214.rs:8:26\n+error[E0107]: this struct takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/issue-3214.rs:8:22\n    |\n LL |     impl<T> Drop for Foo<T> {\n-   |                          ^ unexpected type argument\n+   |                      ^^^--- help: remove these generics\n+   |                      |\n+   |                      expected 0 type arguments\n+   |\n+note: struct defined here, with 0 type parameters\n+  --> $DIR/issue-3214.rs:4:12\n+   |\n+LL |     struct Foo {\n+   |            ^^^\n \n error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n   --> $DIR/issue-3214.rs:8:10"}, {"sha": "309b9800b7d37a0df3b626b2fb2a0f7edfeae022", "filename": "src/test/ui/issues/issue-53251.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-53251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-53251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53251.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-linelength\n+\n struct S;\n \n impl S {\n@@ -9,13 +11,13 @@ macro_rules! impl_add {\n         $(\n             fn $n() {\n                 S::f::<i64>();\n-                //~^ ERROR wrong number of type arguments\n-                //~| ERROR wrong number of type arguments\n+                //~^ ERROR this associated function takes 0 type arguments but 1 type argument was supplied\n+                //~| ERROR this associated function takes 0 type arguments but 1 type argument was supplied\n             }\n         )*\n     }\n }\n \n impl_add!(a b);\n \n-fn main() {}\n+fn main() { }"}, {"sha": "5d1a6d4a522f678ab3666fb59d0aa6fa901b0cd6", "filename": "src/test/ui/issues/issue-53251.stderr", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-53251.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-53251.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53251.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,23 +1,37 @@\n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/issue-53251.rs:11:24\n+error[E0107]: this associated function takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/issue-53251.rs:13:20\n    |\n LL |                 S::f::<i64>();\n-   |                        ^^^ unexpected type argument\n+   |                    ^------- help: remove these generics\n+   |                    |\n+   |                    expected 0 type arguments\n ...\n LL | impl_add!(a b);\n    | --------------- in this macro invocation\n    |\n+note: associated function defined here, with 0 type parameters\n+  --> $DIR/issue-53251.rs:6:8\n+   |\n+LL |     fn f() {}\n+   |        ^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/issue-53251.rs:11:24\n+error[E0107]: this associated function takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/issue-53251.rs:13:20\n    |\n LL |                 S::f::<i64>();\n-   |                        ^^^ unexpected type argument\n+   |                    ^------- help: remove these generics\n+   |                    |\n+   |                    expected 0 type arguments\n ...\n LL | impl_add!(a b);\n    | --------------- in this macro invocation\n    |\n+note: associated function defined here, with 0 type parameters\n+  --> $DIR/issue-53251.rs:6:8\n+   |\n+LL |     fn f() {}\n+   |        ^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "1d9bd2dd2dc1c6e0b17162715a262a697dbe1f97", "filename": "src/test/ui/issues/issue-60622.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-60622.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-60622.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60622.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -11,8 +11,8 @@ impl Borked {\n fn run_wild<T>(b: &Borked) {\n     b.a::<'_, T>();\n     //~^ ERROR cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-    //~^^ ERROR wrong number of type arguments: expected 0, found 1\n-    //~^^^ WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    //~| ERROR this associated function takes 0 type arguments but 1 type argument was supplied\n+    //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n }\n \n fn main() {}"}, {"sha": "47f2f181f2d7a4bdf82f67df1a3ee775e7b9eb1a", "filename": "src/test/ui/issues/issue-60622.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-60622.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fissues%2Fissue-60622.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60622.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -16,11 +16,19 @@ LL | #![deny(warnings)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42868 <https://github.com/rust-lang/rust/issues/42868>\n \n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/issue-60622.rs:12:15\n+error[E0107]: this associated function takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/issue-60622.rs:12:7\n    |\n LL |     b.a::<'_, T>();\n-   |               ^ unexpected type argument\n+   |       ^     --- help: remove this type argument\n+   |       |\n+   |       expected 0 type arguments\n+   |\n+note: associated function defined here, with 0 type parameters\n+  --> $DIR/issue-60622.rs:8:8\n+   |\n+LL |     fn a(&self) {}\n+   |        ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8a840ba62cc0d1cb478476e17c70f03e2de973dc", "filename": "src/test/ui/methods/method-call-lifetime-args-fail.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-linelength\n+\n struct S;\n \n impl S {\n@@ -14,9 +16,9 @@ impl S {\n fn method_call() {\n     S.early(); // OK\n     S.early::<'static>();\n-    //~^ ERROR wrong number of lifetime arguments: expected 2, found 1\n+    //~^ ERROR this associated function takes 2 lifetime arguments but only 1 lifetime argument was supplied\n     S.early::<'static, 'static, 'static>();\n-    //~^ ERROR wrong number of lifetime arguments: expected 2, found 3\n+    //~^ ERROR this associated function takes 2 lifetime arguments but 3 lifetime arguments were supplied\n     let _: &u8 = S.life_and_type::<'static>();\n     S.life_and_type::<u8>();\n     S.life_and_type::<'static, u8>();\n@@ -61,9 +63,9 @@ fn ufcs() {\n \n     S::early(S); // OK\n     S::early::<'static>(S);\n-    //~^ ERROR wrong number of lifetime arguments: expected 2, found 1\n+    //~^ ERROR this associated function takes 2 lifetime arguments but only 1 lifetime argument was supplied\n     S::early::<'static, 'static, 'static>(S);\n-    //~^ ERROR wrong number of lifetime arguments: expected 2, found 3\n+    //~^ ERROR this associated function takes 2 lifetime arguments but 3 lifetime arguments were supplied\n     let _: &u8 = S::life_and_type::<'static>(S);\n     S::life_and_type::<u8>(S);\n     S::life_and_type::<'static, u8>(S);"}, {"sha": "34a2e3dec2ecf1d4f8b016f082421386c67308f1", "filename": "src/test/ui/methods/method-call-lifetime-args-fail.stderr", "status": "modified", "additions": 80, "deletions": 40, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,194 +1,234 @@\n-error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n-  --> $DIR/method-call-lifetime-args-fail.rs:16:7\n+error[E0107]: this associated function takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+  --> $DIR/method-call-lifetime-args-fail.rs:18:7\n    |\n LL |     S.early::<'static>();\n-   |       ^^^^^ expected 2 lifetime arguments\n+   |       ^^^^^   ------- supplied 1 lifetime argument\n+   |       |\n+   |       expected 2 lifetime arguments\n+   |\n+note: associated function defined here, with 2 lifetime parameters: `'a`, `'b`\n+  --> $DIR/method-call-lifetime-args-fail.rs:8:8\n+   |\n+LL |     fn early<'a, 'b>(self) -> (&'a u8, &'b u8) { loop {} }\n+   |        ^^^^^ --  --\n+help: add missing lifetime argument\n+   |\n+LL |     S.early::<'static, 'b>();\n+   |                      ^^^^\n \n-error[E0107]: wrong number of lifetime arguments: expected 2, found 3\n-  --> $DIR/method-call-lifetime-args-fail.rs:18:33\n+error[E0107]: this associated function takes 2 lifetime arguments but 3 lifetime arguments were supplied\n+  --> $DIR/method-call-lifetime-args-fail.rs:20:7\n    |\n LL |     S.early::<'static, 'static, 'static>();\n-   |                                 ^^^^^^^ unexpected lifetime argument\n+   |       ^^^^^                   --------- help: remove this lifetime argument\n+   |       |\n+   |       expected 2 lifetime arguments\n+   |\n+note: associated function defined here, with 2 lifetime parameters: `'a`, `'b`\n+  --> $DIR/method-call-lifetime-args-fail.rs:8:8\n+   |\n+LL |     fn early<'a, 'b>(self) -> (&'a u8, &'b u8) { loop {} }\n+   |        ^^^^^ --  --\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/method-call-lifetime-args-fail.rs:27:15\n+  --> $DIR/method-call-lifetime-args-fail.rs:29:15\n    |\n LL |     S::late::<'static>(S, &0, &0);\n    |               ^^^^^^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/method-call-lifetime-args-fail.rs:4:13\n+  --> $DIR/method-call-lifetime-args-fail.rs:6:13\n    |\n LL |     fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n    |             ^^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/method-call-lifetime-args-fail.rs:29:15\n+  --> $DIR/method-call-lifetime-args-fail.rs:31:15\n    |\n LL |     S::late::<'static, 'static>(S, &0, &0);\n    |               ^^^^^^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/method-call-lifetime-args-fail.rs:4:13\n+  --> $DIR/method-call-lifetime-args-fail.rs:6:13\n    |\n LL |     fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n    |             ^^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/method-call-lifetime-args-fail.rs:31:15\n+  --> $DIR/method-call-lifetime-args-fail.rs:33:15\n    |\n LL |     S::late::<'static, 'static, 'static>(S, &0, &0);\n    |               ^^^^^^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/method-call-lifetime-args-fail.rs:4:13\n+  --> $DIR/method-call-lifetime-args-fail.rs:6:13\n    |\n LL |     fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n    |             ^^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/method-call-lifetime-args-fail.rs:34:21\n+  --> $DIR/method-call-lifetime-args-fail.rs:36:21\n    |\n LL |     S::late_early::<'static, 'static>(S, &0);\n    |                     ^^^^^^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/method-call-lifetime-args-fail.rs:7:19\n+  --> $DIR/method-call-lifetime-args-fail.rs:9:19\n    |\n LL |     fn late_early<'a, 'b>(self, _: &'a u8) -> &'b u8 { loop {} }\n    |                   ^^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/method-call-lifetime-args-fail.rs:36:21\n+  --> $DIR/method-call-lifetime-args-fail.rs:38:21\n    |\n LL |     S::late_early::<'static, 'static, 'static>(S, &0);\n    |                     ^^^^^^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/method-call-lifetime-args-fail.rs:7:19\n+  --> $DIR/method-call-lifetime-args-fail.rs:9:19\n    |\n LL |     fn late_early<'a, 'b>(self, _: &'a u8) -> &'b u8 { loop {} }\n    |                   ^^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/method-call-lifetime-args-fail.rs:40:24\n+  --> $DIR/method-call-lifetime-args-fail.rs:42:24\n    |\n LL |     S::late_implicit::<'static>(S, &0, &0);\n    |                        ^^^^^^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/method-call-lifetime-args-fail.rs:5:31\n+  --> $DIR/method-call-lifetime-args-fail.rs:7:31\n    |\n LL |     fn late_implicit(self, _: &u8, _: &u8) {}\n    |                               ^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/method-call-lifetime-args-fail.rs:42:24\n+  --> $DIR/method-call-lifetime-args-fail.rs:44:24\n    |\n LL |     S::late_implicit::<'static, 'static>(S, &0, &0);\n    |                        ^^^^^^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/method-call-lifetime-args-fail.rs:5:31\n+  --> $DIR/method-call-lifetime-args-fail.rs:7:31\n    |\n LL |     fn late_implicit(self, _: &u8, _: &u8) {}\n    |                               ^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/method-call-lifetime-args-fail.rs:44:24\n+  --> $DIR/method-call-lifetime-args-fail.rs:46:24\n    |\n LL |     S::late_implicit::<'static, 'static, 'static>(S, &0, &0);\n    |                        ^^^^^^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/method-call-lifetime-args-fail.rs:5:31\n+  --> $DIR/method-call-lifetime-args-fail.rs:7:31\n    |\n LL |     fn late_implicit(self, _: &u8, _: &u8) {}\n    |                               ^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/method-call-lifetime-args-fail.rs:47:30\n+  --> $DIR/method-call-lifetime-args-fail.rs:49:30\n    |\n LL |     S::late_implicit_early::<'static, 'static>(S, &0);\n    |                              ^^^^^^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/method-call-lifetime-args-fail.rs:8:41\n+  --> $DIR/method-call-lifetime-args-fail.rs:10:41\n    |\n LL |     fn late_implicit_early<'b>(self, _: &u8) -> &'b u8 { loop {} }\n    |                                         ^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/method-call-lifetime-args-fail.rs:49:30\n+  --> $DIR/method-call-lifetime-args-fail.rs:51:30\n    |\n LL |     S::late_implicit_early::<'static, 'static, 'static>(S, &0);\n    |                              ^^^^^^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/method-call-lifetime-args-fail.rs:8:41\n+  --> $DIR/method-call-lifetime-args-fail.rs:10:41\n    |\n LL |     fn late_implicit_early<'b>(self, _: &u8) -> &'b u8 { loop {} }\n    |                                         ^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/method-call-lifetime-args-fail.rs:52:35\n+  --> $DIR/method-call-lifetime-args-fail.rs:54:35\n    |\n LL |     S::late_implicit_self_early::<'static, 'static>(&S);\n    |                                   ^^^^^^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/method-call-lifetime-args-fail.rs:9:37\n+  --> $DIR/method-call-lifetime-args-fail.rs:11:37\n    |\n LL |     fn late_implicit_self_early<'b>(&self) -> &'b u8 { loop {} }\n    |                                     ^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/method-call-lifetime-args-fail.rs:54:35\n+  --> $DIR/method-call-lifetime-args-fail.rs:56:35\n    |\n LL |     S::late_implicit_self_early::<'static, 'static, 'static>(&S);\n    |                                   ^^^^^^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/method-call-lifetime-args-fail.rs:9:37\n+  --> $DIR/method-call-lifetime-args-fail.rs:11:37\n    |\n LL |     fn late_implicit_self_early<'b>(&self) -> &'b u8 { loop {} }\n    |                                     ^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/method-call-lifetime-args-fail.rs:57:28\n+  --> $DIR/method-call-lifetime-args-fail.rs:59:28\n    |\n LL |     S::late_unused_early::<'static, 'static>(S);\n    |                            ^^^^^^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/method-call-lifetime-args-fail.rs:10:26\n+  --> $DIR/method-call-lifetime-args-fail.rs:12:26\n    |\n LL |     fn late_unused_early<'a, 'b>(self) -> &'b u8 { loop {} }\n    |                          ^^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/method-call-lifetime-args-fail.rs:59:28\n+  --> $DIR/method-call-lifetime-args-fail.rs:61:28\n    |\n LL |     S::late_unused_early::<'static, 'static, 'static>(S);\n    |                            ^^^^^^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/method-call-lifetime-args-fail.rs:10:26\n+  --> $DIR/method-call-lifetime-args-fail.rs:12:26\n    |\n LL |     fn late_unused_early<'a, 'b>(self) -> &'b u8 { loop {} }\n    |                          ^^\n \n-error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n-  --> $DIR/method-call-lifetime-args-fail.rs:63:5\n+error[E0107]: this associated function takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+  --> $DIR/method-call-lifetime-args-fail.rs:65:8\n    |\n LL |     S::early::<'static>(S);\n-   |     ^^^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+   |        ^^^^^   ------- supplied 1 lifetime argument\n+   |        |\n+   |        expected 2 lifetime arguments\n+   |\n+note: associated function defined here, with 2 lifetime parameters: `'a`, `'b`\n+  --> $DIR/method-call-lifetime-args-fail.rs:8:8\n+   |\n+LL |     fn early<'a, 'b>(self) -> (&'a u8, &'b u8) { loop {} }\n+   |        ^^^^^ --  --\n+help: add missing lifetime argument\n+   |\n+LL |     S::early::<'static, 'b>(S);\n+   |                       ^^^^\n \n-error[E0107]: wrong number of lifetime arguments: expected 2, found 3\n-  --> $DIR/method-call-lifetime-args-fail.rs:65:34\n+error[E0107]: this associated function takes 2 lifetime arguments but 3 lifetime arguments were supplied\n+  --> $DIR/method-call-lifetime-args-fail.rs:67:8\n    |\n LL |     S::early::<'static, 'static, 'static>(S);\n-   |                                  ^^^^^^^ unexpected lifetime argument\n+   |        ^^^^^                   --------- help: remove this lifetime argument\n+   |        |\n+   |        expected 2 lifetime arguments\n+   |\n+note: associated function defined here, with 2 lifetime parameters: `'a`, `'b`\n+  --> $DIR/method-call-lifetime-args-fail.rs:8:8\n+   |\n+LL |     fn early<'a, 'b>(self) -> (&'a u8, &'b u8) { loop {} }\n+   |        ^^^^^ --  --\n \n error: aborting due to 18 previous errors\n "}, {"sha": "264d7cbb9b1cb9c2fa7b1765ebf353751479a98e", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -11,6 +11,12 @@ LL |     let ans = s();\n    |               ^-- supplied 0 arguments\n    |               |\n    |               expected 1 argument\n+   |\n+note: associated function defined here\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL |     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n+   |                           ^^^^^^^^\n \n error[E0057]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/overloaded-calls-bad.rs:31:15\n@@ -19,6 +25,12 @@ LL |     let ans = s(\"burma\", \"shave\");\n    |               ^ -------  ------- supplied 2 arguments\n    |               |\n    |               expected 1 argument\n+   |\n+note: associated function defined here\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL |     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n+   |                           ^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5af0aefe22b8c8e4766a5a1a82354b4587524e9f", "filename": "src/test/ui/resolve/resolve-primitive-fallback.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -22,6 +22,12 @@ LL |     std::mem::size_of(u16);\n    |     ^^^^^^^^^^^^^^^^^ --- supplied 1 argument\n    |     |\n    |     expected 0 arguments\n+   |\n+note: function defined here\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |\n+LL | pub const fn size_of<T>() -> usize {\n+   |              ^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9a3c495602a69b968345d56a157d079ae7e85e15", "filename": "src/test/ui/seq-args.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fseq-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fseq-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fseq-args.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,11 +1,13 @@\n fn main() {\n-trait Seq { }\n+    trait Seq { }\n \n-impl<T> Seq<T> for Vec<T> { //~ ERROR wrong number of type arguments\n-    /* ... */\n-}\n-impl Seq<bool> for u32 { //~ ERROR wrong number of type arguments\n-   /* Treat the integer as a sequence of bits */\n-}\n+    impl<T> Seq<T> for Vec<T> {\n+        //~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n+        /* ... */\n+    }\n \n+    impl Seq<bool> for u32 {\n+        //~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n+        /* Treat the integer as a sequence of bits */\n+    }\n }"}, {"sha": "0e89fefc69ddc060851be94222625363639f26fa", "filename": "src/test/ui/seq-args.stderr", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fseq-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fseq-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fseq-args.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,14 +1,30 @@\n-error[E0107]: wrong number of type arguments: expected 0, found 1\n+error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n   --> $DIR/seq-args.rs:4:13\n    |\n-LL | impl<T> Seq<T> for Vec<T> {\n-   |             ^ unexpected type argument\n+LL |     impl<T> Seq<T> for Vec<T> {\n+   |             ^^^--- help: remove these generics\n+   |             |\n+   |             expected 0 type arguments\n+   |\n+note: trait defined here, with 0 type parameters\n+  --> $DIR/seq-args.rs:2:11\n+   |\n+LL |     trait Seq { }\n+   |           ^^^\n \n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/seq-args.rs:7:10\n+error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/seq-args.rs:9:10\n+   |\n+LL |     impl Seq<bool> for u32 {\n+   |          ^^^------ help: remove these generics\n+   |          |\n+   |          expected 0 type arguments\n+   |\n+note: trait defined here, with 0 type parameters\n+  --> $DIR/seq-args.rs:2:11\n    |\n-LL | impl Seq<bool> for u32 {\n-   |          ^^^^ unexpected type argument\n+LL |     trait Seq { }\n+   |           ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "56c8ffb3e65b76a5fe2e674aeb21b266e889254d", "filename": "src/test/ui/structs/structure-constructor-type-mismatch.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-linelength\n+\n struct Point<T> {\n     x: T,\n     y: T,\n@@ -45,13 +47,13 @@ fn main() {\n         y: 8,\n     };\n \n-    let pt3 = PointF::<i32> { //~ ERROR wrong number of type arguments\n+    let pt3 = PointF::<i32> { //~ ERROR this type alias takes 0 type arguments but 1 type argument was supplied\n         x: 9,  //~ ERROR mismatched types\n         y: 10, //~ ERROR mismatched types\n     };\n \n     match (Point { x: 1, y: 2 }) {\n-        PointF::<u32> { .. } => {} //~ ERROR wrong number of type arguments\n+        PointF::<u32> { .. } => {} //~ ERROR this type alias takes 0 type arguments but 1 type argument was supplied\n         //~^ ERROR mismatched types\n     }\n "}, {"sha": "461141496729054196e68aac190a55e886374b3d", "filename": "src/test/ui/structs/structure-constructor-type-mismatch.stderr", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/structure-constructor-type-mismatch.rs:17:12\n+  --> $DIR/structure-constructor-type-mismatch.rs:19:12\n    |\n LL |         x: 1,\n    |            ^\n@@ -8,7 +8,7 @@ LL |         x: 1,\n    |            help: use a float literal: `1.0`\n \n error[E0308]: mismatched types\n-  --> $DIR/structure-constructor-type-mismatch.rs:20:12\n+  --> $DIR/structure-constructor-type-mismatch.rs:22:12\n    |\n LL |         y: 2,\n    |            ^\n@@ -17,7 +17,7 @@ LL |         y: 2,\n    |            help: use a float literal: `2.0`\n \n error[E0308]: mismatched types\n-  --> $DIR/structure-constructor-type-mismatch.rs:26:12\n+  --> $DIR/structure-constructor-type-mismatch.rs:28:12\n    |\n LL |         x: 3,\n    |            ^\n@@ -26,7 +26,7 @@ LL |         x: 3,\n    |            help: use a float literal: `3.0`\n \n error[E0308]: mismatched types\n-  --> $DIR/structure-constructor-type-mismatch.rs:29:12\n+  --> $DIR/structure-constructor-type-mismatch.rs:31:12\n    |\n LL |         y: 4,\n    |            ^\n@@ -35,7 +35,7 @@ LL |         y: 4,\n    |            help: use a float literal: `4.0`\n \n error[E0308]: mismatched types\n-  --> $DIR/structure-constructor-type-mismatch.rs:35:12\n+  --> $DIR/structure-constructor-type-mismatch.rs:37:12\n    |\n LL |         x: 5,\n    |            ^\n@@ -44,22 +44,30 @@ LL |         x: 5,\n    |            help: use a float literal: `5.0`\n \n error[E0308]: mismatched types\n-  --> $DIR/structure-constructor-type-mismatch.rs:42:12\n+  --> $DIR/structure-constructor-type-mismatch.rs:44:12\n    |\n LL |         x: 7,\n    |            ^\n    |            |\n    |            expected `f32`, found integer\n    |            help: use a float literal: `7.0`\n \n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/structure-constructor-type-mismatch.rs:48:24\n+error[E0107]: this type alias takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/structure-constructor-type-mismatch.rs:50:15\n    |\n LL |     let pt3 = PointF::<i32> {\n-   |                        ^^^ unexpected type argument\n+   |               ^^^^^^------- help: remove these generics\n+   |               |\n+   |               expected 0 type arguments\n+   |\n+note: type alias defined here, with 0 type parameters\n+  --> $DIR/structure-constructor-type-mismatch.rs:8:6\n+   |\n+LL | type PointF = Point<f32>;\n+   |      ^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/structure-constructor-type-mismatch.rs:49:12\n+  --> $DIR/structure-constructor-type-mismatch.rs:51:12\n    |\n LL |         x: 9,\n    |            ^\n@@ -68,22 +76,30 @@ LL |         x: 9,\n    |            help: use a float literal: `9.0`\n \n error[E0308]: mismatched types\n-  --> $DIR/structure-constructor-type-mismatch.rs:50:12\n+  --> $DIR/structure-constructor-type-mismatch.rs:52:12\n    |\n LL |         y: 10,\n    |            ^^\n    |            |\n    |            expected `f32`, found integer\n    |            help: use a float literal: `10.0`\n \n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/structure-constructor-type-mismatch.rs:54:18\n+error[E0107]: this type alias takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/structure-constructor-type-mismatch.rs:56:9\n    |\n LL |         PointF::<u32> { .. } => {}\n-   |                  ^^^ unexpected type argument\n+   |         ^^^^^^------- help: remove these generics\n+   |         |\n+   |         expected 0 type arguments\n+   |\n+note: type alias defined here, with 0 type parameters\n+  --> $DIR/structure-constructor-type-mismatch.rs:8:6\n+   |\n+LL | type PointF = Point<f32>;\n+   |      ^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/structure-constructor-type-mismatch.rs:54:9\n+  --> $DIR/structure-constructor-type-mismatch.rs:56:9\n    |\n LL |     match (Point { x: 1, y: 2 }) {\n    |           ---------------------- this expression has type `Point<{integer}>`\n@@ -94,7 +110,7 @@ LL |         PointF::<u32> { .. } => {}\n               found struct `Point<f32>`\n \n error[E0308]: mismatched types\n-  --> $DIR/structure-constructor-type-mismatch.rs:59:9\n+  --> $DIR/structure-constructor-type-mismatch.rs:61:9\n    |\n LL |     match (Point { x: 1, y: 2 }) {\n    |           ---------------------- this expression has type `Point<{integer}>`\n@@ -105,7 +121,7 @@ LL |         PointF { .. } => {}\n               found struct `Point<f32>`\n \n error[E0308]: mismatched types\n-  --> $DIR/structure-constructor-type-mismatch.rs:67:9\n+  --> $DIR/structure-constructor-type-mismatch.rs:69:9\n    |\n LL |     match (Pair { x: 1, y: 2 }) {\n    |           --------------------- this expression has type `Pair<{integer}, {integer}>`"}, {"sha": "761922beb17d580353f393afc9d52ba1e6ad8aac", "filename": "src/test/ui/suggestions/missing-lifetime-specifier.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -41,17 +41,17 @@ thread_local! {\n \n thread_local! {\n     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n-    //~^ ERROR wrong number of lifetime arguments: expected 2, found 1\n-    //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n-    //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n-    //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n+    //~^ ERROR this union takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+    //~| ERROR this union takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+    //~| ERROR this union takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+    //~| ERROR this union takes 2 lifetime arguments but only 1 lifetime argument was supplied\n }\n thread_local! {\n     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n-    //~^ ERROR wrong number of lifetime arguments: expected 2, found 1\n-    //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n-    //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n-    //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n+    //~^ ERROR this trait takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+    //~| ERROR this trait takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+    //~| ERROR this trait takes 2 lifetime arguments but only 1 lifetime argument was supplied\n+    //~| ERROR this trait takes 2 lifetime arguments but only 1 lifetime argument was supplied\n     //~| ERROR missing lifetime specifier\n     //~| ERROR missing lifetime specifier\n }"}, {"sha": "e6cec5cbd45b9ed8d98f83529d3658292e328031", "filename": "src/test/ui/suggestions/missing-lifetime-specifier.stderr", "status": "modified", "additions": 112, "deletions": 16, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -166,53 +166,149 @@ help: consider using the `'static` lifetime\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&'static Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                            ^^^^^^^^\n \n-error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+error[E0107]: this union takes 2 lifetime arguments but only 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:43:44\n    |\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                            ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+   |                                            ^^^ ------- supplied 1 lifetime argument\n+   |                                            |\n+   |                                            expected 2 lifetime arguments\n+   |\n+note: union defined here, with 2 lifetime parameters: `'t`, `'k`\n+  --> $DIR/missing-lifetime-specifier.rs:11:11\n+   |\n+LL | pub union Qux<'t, 'k, I> {\n+   |           ^^^ --  --\n+help: add missing lifetime argument\n+   |\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                       ^^^^\n \n-error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+error[E0107]: this union takes 2 lifetime arguments but only 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:43:44\n    |\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                            ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+   |                                            ^^^ ------- supplied 1 lifetime argument\n+   |                                            |\n+   |                                            expected 2 lifetime arguments\n+   |\n+note: union defined here, with 2 lifetime parameters: `'t`, `'k`\n+  --> $DIR/missing-lifetime-specifier.rs:11:11\n+   |\n+LL | pub union Qux<'t, 'k, I> {\n+   |           ^^^ --  --\n+help: add missing lifetime argument\n+   |\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                       ^^^^\n \n-error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+error[E0107]: this union takes 2 lifetime arguments but only 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:43:44\n    |\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                            ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+   |                                            ^^^ ------- supplied 1 lifetime argument\n+   |                                            |\n+   |                                            expected 2 lifetime arguments\n+   |\n+note: union defined here, with 2 lifetime parameters: `'t`, `'k`\n+  --> $DIR/missing-lifetime-specifier.rs:11:11\n+   |\n+LL | pub union Qux<'t, 'k, I> {\n+   |           ^^^ --  --\n+help: add missing lifetime argument\n+   |\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                       ^^^^\n \n-error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+error[E0107]: this union takes 2 lifetime arguments but only 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:43:44\n    |\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                            ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+   |                                            ^^^ ------- supplied 1 lifetime argument\n+   |                                            |\n+   |                                            expected 2 lifetime arguments\n+   |\n+note: union defined here, with 2 lifetime parameters: `'t`, `'k`\n+  --> $DIR/missing-lifetime-specifier.rs:11:11\n+   |\n+LL | pub union Qux<'t, 'k, I> {\n+   |           ^^^ --  --\n+help: add missing lifetime argument\n+   |\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                       ^^^^\n \n-error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+error[E0107]: this trait takes 2 lifetime arguments but only 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:50:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                             ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+   |                                             ^^^ ------- supplied 1 lifetime argument\n+   |                                             |\n+   |                                             expected 2 lifetime arguments\n+   |\n+note: trait defined here, with 2 lifetime parameters: `'t`, `'k`\n+  --> $DIR/missing-lifetime-specifier.rs:15:7\n+   |\n+LL | trait Tar<'t, 'k, I> {}\n+   |       ^^^ --  --\n+help: add missing lifetime argument\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                        ^^^^\n \n-error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+error[E0107]: this trait takes 2 lifetime arguments but only 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:50:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                             ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+   |                                             ^^^ ------- supplied 1 lifetime argument\n+   |                                             |\n+   |                                             expected 2 lifetime arguments\n+   |\n+note: trait defined here, with 2 lifetime parameters: `'t`, `'k`\n+  --> $DIR/missing-lifetime-specifier.rs:15:7\n+   |\n+LL | trait Tar<'t, 'k, I> {}\n+   |       ^^^ --  --\n+help: add missing lifetime argument\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                        ^^^^\n \n-error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+error[E0107]: this trait takes 2 lifetime arguments but only 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:50:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                             ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+   |                                             ^^^ ------- supplied 1 lifetime argument\n+   |                                             |\n+   |                                             expected 2 lifetime arguments\n+   |\n+note: trait defined here, with 2 lifetime parameters: `'t`, `'k`\n+  --> $DIR/missing-lifetime-specifier.rs:15:7\n+   |\n+LL | trait Tar<'t, 'k, I> {}\n+   |       ^^^ --  --\n+help: add missing lifetime argument\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                        ^^^^\n \n-error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n+error[E0107]: this trait takes 2 lifetime arguments but only 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:50:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                             ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n+   |                                             ^^^ ------- supplied 1 lifetime argument\n+   |                                             |\n+   |                                             expected 2 lifetime arguments\n+   |\n+note: trait defined here, with 2 lifetime parameters: `'t`, `'k`\n+  --> $DIR/missing-lifetime-specifier.rs:15:7\n+   |\n+LL | trait Tar<'t, 'k, I> {}\n+   |       ^^^ --  --\n+help: add missing lifetime argument\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                        ^^^^\n \n error: aborting due to 22 previous errors\n "}, {"sha": "05e2d38c43b53c94026f03140dba8a4db075cae9", "filename": "src/test/ui/suggestions/use-type-argument-instead-of-assoc-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -6,7 +6,7 @@ pub trait T<X, Y> {\n pub struct Foo {\n     i: Box<dyn T<usize, usize, usize, usize, B=usize>>,\n     //~^ ERROR must be specified\n-    //~| ERROR wrong number of type arguments\n+    //~| ERROR this trait takes 2 type arguments but 4 type arguments were supplied\n }\n \n "}, {"sha": "2d06591f4c7bd6e44a71b4034c5d03054c66d764", "filename": "src/test/ui/suggestions/use-type-argument-instead-of-assoc-type.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,10 +1,16 @@\n-error[E0107]: wrong number of type arguments: expected 2, found 4\n-  --> $DIR/use-type-argument-instead-of-assoc-type.rs:7:32\n+error[E0107]: this trait takes 2 type arguments but 4 type arguments were supplied\n+  --> $DIR/use-type-argument-instead-of-assoc-type.rs:7:16\n    |\n LL |     i: Box<dyn T<usize, usize, usize, usize, B=usize>>,\n-   |                                ^^^^^  ^^^^^ unexpected type argument\n-   |                                |\n-   |                                unexpected type argument\n+   |                ^             -------------- help: remove these type arguments\n+   |                |\n+   |                expected 2 type arguments\n+   |\n+note: trait defined here, with 2 type parameters: `X`, `Y`\n+  --> $DIR/use-type-argument-instead-of-assoc-type.rs:1:11\n+   |\n+LL | pub trait T<X, Y> {\n+   |           ^ -  -\n \n error[E0191]: the value of the associated types `A` (from trait `T`), `C` (from trait `T`) must be specified\n   --> $DIR/use-type-argument-instead-of-assoc-type.rs:7:16"}, {"sha": "660d860ba77253b6af60080e4c7dac3388e5c075", "filename": "src/test/ui/tag-type-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftag-type-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftag-type-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftag-type-args.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,5 +1,5 @@\n enum Quux<T> { Bar }\n \n-fn foo(c: Quux) { assert!((false)); } //~ ERROR wrong number of type arguments\n+fn foo(c: Quux) { assert!((false)); } //~ ERROR missing generics for enum `Quux`\n \n fn main() { panic!(); }"}, {"sha": "c9888dc54dc52a3b6d678751e679fade68dde16f", "filename": "src/test/ui/tag-type-args.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftag-type-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftag-type-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftag-type-args.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,8 +1,18 @@\n-error[E0107]: wrong number of type arguments: expected 1, found 0\n+error[E0107]: missing generics for enum `Quux`\n   --> $DIR/tag-type-args.rs:3:11\n    |\n LL | fn foo(c: Quux) { assert!((false)); }\n    |           ^^^^ expected 1 type argument\n+   |\n+note: enum defined here, with 1 type parameter: `T`\n+  --> $DIR/tag-type-args.rs:1:6\n+   |\n+LL | enum Quux<T> { Bar }\n+   |      ^^^^ -\n+help: use angle brackets to add missing type argument\n+   |\n+LL | fn foo(c: Quux<T>) { assert!((false)); }\n+   |               ^^^\n \n error: aborting due to previous error\n "}, {"sha": "e49d276a55a92b5bd3e092994be6201f11776016", "filename": "src/test/ui/traits/trait-object-vs-lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -9,8 +9,8 @@ fn main() {\n     let _: S<'static, dyn 'static +>;\n     //~^ at least one trait is required for an object type\n     let _: S<'static, 'static>;\n-    //~^ ERROR wrong number of lifetime arguments: expected 1, found 2\n-    //~| ERROR wrong number of type arguments: expected 1, found 0\n+    //~^ ERROR this struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n+    //~| ERROR this struct takes 1 type argument but 0 type arguments were supplied\n     let _: S<dyn 'static +, 'static>;\n     //~^ ERROR type provided when a lifetime was expected\n     //~| ERROR at least one trait is required for an object type"}, {"sha": "620c816d6d9842d0f9d8724e526d732a08afb99a", "filename": "src/test/ui/traits/trait-object-vs-lifetime.stderr", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -4,17 +4,35 @@ error[E0224]: at least one trait is required for an object type\n LL |     let _: S<'static, dyn 'static +>;\n    |                       ^^^^^^^^^^^^^\n \n-error[E0107]: wrong number of lifetime arguments: expected 1, found 2\n-  --> $DIR/trait-object-vs-lifetime.rs:11:23\n+error[E0107]: this struct takes 1 lifetime argument but 2 lifetime arguments were supplied\n+  --> $DIR/trait-object-vs-lifetime.rs:11:12\n    |\n LL |     let _: S<'static, 'static>;\n-   |                       ^^^^^^^ unexpected lifetime argument\n+   |            ^        --------- help: remove this lifetime argument\n+   |            |\n+   |            expected 1 lifetime argument\n+   |\n+note: struct defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/trait-object-vs-lifetime.rs:4:8\n+   |\n+LL | struct S<'a, T>(&'a u8, T);\n+   |        ^ --\n \n-error[E0107]: wrong number of type arguments: expected 1, found 0\n+error[E0107]: this struct takes 1 type argument but 0 type arguments were supplied\n   --> $DIR/trait-object-vs-lifetime.rs:11:12\n    |\n LL |     let _: S<'static, 'static>;\n-   |            ^^^^^^^^^^^^^^^^^^^ expected 1 type argument\n+   |            ^ expected 1 type argument\n+   |\n+note: struct defined here, with 1 type parameter: `T`\n+  --> $DIR/trait-object-vs-lifetime.rs:4:8\n+   |\n+LL | struct S<'a, T>(&'a u8, T);\n+   |        ^     -\n+help: add missing type argument\n+   |\n+LL |     let _: S<'static, 'static, T>;\n+   |                              ^^^\n \n error[E0224]: at least one trait is required for an object type\n   --> $DIR/trait-object-vs-lifetime.rs:14:14"}, {"sha": "a33773144c21b8d2088fd2dba45153750f0cb742", "filename": "src/test/ui/traits/trait-test-2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -6,8 +6,10 @@ impl bar for i32 { fn dup(&self) -> i32 { *self } fn blah<X>(&self) {} }\n impl bar for u32 { fn dup(&self) -> u32 { *self } fn blah<X>(&self) {} }\n \n fn main() {\n-    10.dup::<i32>(); //~ ERROR wrong number of type arguments: expected 0, found 1\n-    10.blah::<i32, i32>(); //~ ERROR wrong number of type arguments: expected 1, found 2\n+    10.dup::<i32>();\n+    //~^ ERROR this associated function takes 0 type arguments but 1 type argument was supplied\n+    10.blah::<i32, i32>();\n+    //~^ ERROR this associated function takes 1 type argument but 2 type arguments were supplied\n     (box 10 as Box<dyn bar>).dup();\n     //~^ ERROR E0038\n     //~| ERROR E0038"}, {"sha": "a38d3387c8d7bc0d994d836461214f8dbb23690a", "filename": "src/test/ui/traits/trait-test-2.stderr", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,17 +1,33 @@\n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/trait-test-2.rs:9:14\n+error[E0107]: this associated function takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/trait-test-2.rs:9:8\n    |\n LL |     10.dup::<i32>();\n-   |              ^^^ unexpected type argument\n+   |        ^^^------- help: remove these generics\n+   |        |\n+   |        expected 0 type arguments\n+   |\n+note: associated function defined here, with 0 type parameters\n+  --> $DIR/trait-test-2.rs:4:16\n+   |\n+LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n+   |                ^^^\n \n-error[E0107]: wrong number of type arguments: expected 1, found 2\n-  --> $DIR/trait-test-2.rs:10:20\n+error[E0107]: this associated function takes 1 type argument but 2 type arguments were supplied\n+  --> $DIR/trait-test-2.rs:11:8\n    |\n LL |     10.blah::<i32, i32>();\n-   |                    ^^^ unexpected type argument\n+   |        ^^^^      ----- help: remove this type argument\n+   |        |\n+   |        expected 1 type argument\n+   |\n+note: associated function defined here, with 1 type parameter: `X`\n+  --> $DIR/trait-test-2.rs:4:39\n+   |\n+LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n+   |                                       ^^^^ -\n \n error[E0038]: the trait `bar` cannot be made into an object\n-  --> $DIR/trait-test-2.rs:11:16\n+  --> $DIR/trait-test-2.rs:13:16\n    |\n LL |     (box 10 as Box<dyn bar>).dup();\n    |                ^^^^^^^^^^^^ `bar` cannot be made into an object\n@@ -28,7 +44,7 @@ LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    |       this trait cannot be made into an object...\n \n error[E0038]: the trait `bar` cannot be made into an object\n-  --> $DIR/trait-test-2.rs:11:6\n+  --> $DIR/trait-test-2.rs:13:6\n    |\n LL |     (box 10 as Box<dyn bar>).dup();\n    |      ^^^^^^ `bar` cannot be made into an object"}, {"sha": "f204035248a6f16e178926bf53bad98190cbf701", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -16,25 +16,25 @@ impl<T> Enum<T> {\n         //~^ ERROR type arguments are not allowed for this type [E0109]\n         Self::<()>::TSVariant(());\n         //~^ ERROR type arguments are not allowed for this type [E0109]\n-        //~^^ ERROR mismatched types [E0308]\n+        //~| ERROR mismatched types [E0308]\n         Self::<()>::TSVariant::<()>(());\n         //~^ ERROR type arguments are not allowed for this type [E0109]\n-        //~^^ ERROR type arguments are not allowed for this type [E0109]\n+        //~| ERROR type arguments are not allowed for this type [E0109]\n     }\n \n     fn s_variant() {\n         Self::SVariant { v: () };\n         //~^ ERROR mismatched types [E0308]\n         Self::SVariant::<()> { v: () };\n         //~^ ERROR type arguments are not allowed for this type [E0109]\n-        //~^^ ERROR mismatched types [E0308]\n+        //~| ERROR mismatched types [E0308]\n         Self::<()>::SVariant { v: () };\n         //~^ ERROR type arguments are not allowed for this type [E0109]\n-        //~^^ ERROR mismatched types [E0308]\n+        //~| ERROR mismatched types [E0308]\n         Self::<()>::SVariant::<()> { v: () };\n         //~^ ERROR type arguments are not allowed for this type [E0109]\n-        //~^^ ERROR type arguments are not allowed for this type [E0109]\n-        //~^^^ ERROR mismatched types [E0308]\n+        //~| ERROR type arguments are not allowed for this type [E0109]\n+        //~| ERROR mismatched types [E0308]\n     }\n \n     fn u_variant() {\n@@ -44,7 +44,7 @@ impl<T> Enum<T> {\n         //~^ ERROR type arguments are not allowed for this type [E0109]\n         Self::<()>::UVariant::<()>;\n         //~^ ERROR type arguments are not allowed for this type [E0109]\n-        //~^^ ERROR type arguments are not allowed for this type [E0109]\n+        //~| ERROR type arguments are not allowed for this type [E0109]\n     }\n }\n \n@@ -62,10 +62,10 @@ fn main() {\n     AliasFixed::TSVariant::<()>(());\n     //~^ ERROR type arguments are not allowed for this type [E0109]\n     AliasFixed::<()>::TSVariant(());\n-    //~^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n+    //~^ ERROR this type alias takes 0 type arguments but 1 type argument was supplied [E0107]\n     AliasFixed::<()>::TSVariant::<()>(());\n     //~^ ERROR type arguments are not allowed for this type [E0109]\n-    //~^^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n+    //~| ERROR this type alias takes 0 type arguments but 1 type argument was supplied [E0107]\n \n     // Struct variant\n \n@@ -80,10 +80,10 @@ fn main() {\n     AliasFixed::SVariant::<()> { v: () };\n     //~^ ERROR type arguments are not allowed for this type [E0109]\n     AliasFixed::<()>::SVariant { v: () };\n-    //~^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n+    //~^ ERROR this type alias takes 0 type arguments but 1 type argument was supplied [E0107]\n     AliasFixed::<()>::SVariant::<()> { v: () };\n     //~^ ERROR type arguments are not allowed for this type [E0109]\n-    //~^^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n+    //~| ERROR this type alias takes 0 type arguments but 1 type argument was supplied [E0107]\n \n     // Unit variant\n \n@@ -98,8 +98,8 @@ fn main() {\n     AliasFixed::UVariant::<()>;\n     //~^ ERROR type arguments are not allowed for this type [E0109]\n     AliasFixed::<()>::UVariant;\n-    //~^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n+    //~^ ERROR this type alias takes 0 type arguments but 1 type argument was supplied [E0107]\n     AliasFixed::<()>::UVariant::<()>;\n     //~^ ERROR type arguments are not allowed for this type [E0109]\n-    //~^^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n+    //~| ERROR this type alias takes 0 type arguments but 1 type argument was supplied [E0107]\n }"}, {"sha": "e83db3b0d512ba99c6897e2a7735f555fb4f7504", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.stderr", "status": "modified", "additions": 66, "deletions": 18, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -166,17 +166,33 @@ error[E0109]: type arguments are not allowed for this type\n LL |     AliasFixed::TSVariant::<()>(());\n    |                             ^^ type argument not allowed\n \n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/enum-variant-generic-args.rs:64:18\n+error[E0107]: this type alias takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/enum-variant-generic-args.rs:64:5\n    |\n LL |     AliasFixed::<()>::TSVariant(());\n-   |                  ^^ unexpected type argument\n+   |     ^^^^^^^^^^------ help: remove these generics\n+   |     |\n+   |     expected 0 type arguments\n+   |\n+note: type alias defined here, with 0 type parameters\n+  --> $DIR/enum-variant-generic-args.rs:9:6\n+   |\n+LL | type AliasFixed = Enum<()>;\n+   |      ^^^^^^^^^^\n \n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/enum-variant-generic-args.rs:66:18\n+error[E0107]: this type alias takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/enum-variant-generic-args.rs:66:5\n    |\n LL |     AliasFixed::<()>::TSVariant::<()>(());\n-   |                  ^^ unexpected type argument\n+   |     ^^^^^^^^^^------ help: remove these generics\n+   |     |\n+   |     expected 0 type arguments\n+   |\n+note: type alias defined here, with 0 type parameters\n+  --> $DIR/enum-variant-generic-args.rs:9:6\n+   |\n+LL | type AliasFixed = Enum<()>;\n+   |      ^^^^^^^^^^\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:66:35\n@@ -208,17 +224,33 @@ error[E0109]: type arguments are not allowed for this type\n LL |     AliasFixed::SVariant::<()> { v: () };\n    |                            ^^ type argument not allowed\n \n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/enum-variant-generic-args.rs:82:18\n+error[E0107]: this type alias takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/enum-variant-generic-args.rs:82:5\n    |\n LL |     AliasFixed::<()>::SVariant { v: () };\n-   |                  ^^ unexpected type argument\n+   |     ^^^^^^^^^^------ help: remove these generics\n+   |     |\n+   |     expected 0 type arguments\n+   |\n+note: type alias defined here, with 0 type parameters\n+  --> $DIR/enum-variant-generic-args.rs:9:6\n+   |\n+LL | type AliasFixed = Enum<()>;\n+   |      ^^^^^^^^^^\n \n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/enum-variant-generic-args.rs:84:18\n+error[E0107]: this type alias takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/enum-variant-generic-args.rs:84:5\n    |\n LL |     AliasFixed::<()>::SVariant::<()> { v: () };\n-   |                  ^^ unexpected type argument\n+   |     ^^^^^^^^^^------ help: remove these generics\n+   |     |\n+   |     expected 0 type arguments\n+   |\n+note: type alias defined here, with 0 type parameters\n+  --> $DIR/enum-variant-generic-args.rs:9:6\n+   |\n+LL | type AliasFixed = Enum<()>;\n+   |      ^^^^^^^^^^\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:84:34\n@@ -250,17 +282,33 @@ error[E0109]: type arguments are not allowed for this type\n LL |     AliasFixed::UVariant::<()>;\n    |                            ^^ type argument not allowed\n \n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/enum-variant-generic-args.rs:100:18\n+error[E0107]: this type alias takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/enum-variant-generic-args.rs:100:5\n    |\n LL |     AliasFixed::<()>::UVariant;\n-   |                  ^^ unexpected type argument\n+   |     ^^^^^^^^^^------ help: remove these generics\n+   |     |\n+   |     expected 0 type arguments\n+   |\n+note: type alias defined here, with 0 type parameters\n+  --> $DIR/enum-variant-generic-args.rs:9:6\n+   |\n+LL | type AliasFixed = Enum<()>;\n+   |      ^^^^^^^^^^\n \n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/enum-variant-generic-args.rs:102:18\n+error[E0107]: this type alias takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/enum-variant-generic-args.rs:102:5\n    |\n LL |     AliasFixed::<()>::UVariant::<()>;\n-   |                  ^^ unexpected type argument\n+   |     ^^^^^^^^^^------ help: remove these generics\n+   |     |\n+   |     expected 0 type arguments\n+   |\n+note: type alias defined here, with 0 type parameters\n+  --> $DIR/enum-variant-generic-args.rs:9:6\n+   |\n+LL | type AliasFixed = Enum<()>;\n+   |      ^^^^^^^^^^\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/enum-variant-generic-args.rs:102:34"}, {"sha": "1d520613a288f29d52a490e1335a51e9787f3486", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-priority-higher-than-other-inherent.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -5,12 +5,6 @@ LL |     <E>::V();\n    |     ^^^^^^-- supplied 0 arguments\n    |     |\n    |     expected 1 argument\n-   |\n-note: tuple variant defined here\n-  --> $DIR/enum-variant-priority-higher-than-other-inherent.rs:5:5\n-   |\n-LL |     V(u8)\n-   |     ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/enum-variant-priority-higher-than-other-inherent.rs:22:17"}, {"sha": "44b47cc4eb2a267ca56292377c03071a65efdae4", "filename": "src/test/ui/type/ascription/issue-34255-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -7,7 +7,7 @@ impl Reactor {\n         input_cells: Vec::new()\n         //~^ ERROR cannot find value `input_cells` in this scope\n         //~| ERROR parenthesized type parameters may only be used with a `Fn` trait\n-        //~| ERROR wrong number of type arguments: expected at least 1, found 0\n+        //~| ERROR missing generics for struct `Vec`\n     }\n }\n "}, {"sha": "fc474e1ec3b7593e7101f23725a5d22bb4b26a04", "filename": "src/test/ui/type/ascription/issue-34255-1.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -10,11 +10,21 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n LL |         input_cells: Vec::new()\n    |                           ^^^^^ only `Fn` traits may use parentheses\n \n-error[E0107]: wrong number of type arguments: expected at least 1, found 0\n+error[E0107]: missing generics for struct `Vec`\n   --> $DIR/issue-34255-1.rs:7:22\n    |\n LL |         input_cells: Vec::new()\n-   |                      ^^^^^^^^^^ expected at least 1 type argument\n+   |                      ^^^ expected at least 1 type argument\n+   |\n+note: struct defined here, with at least 1 type parameter: `T`\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   |\n+LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n+   |            ^^^ -\n+help: use angle brackets to add missing type argument\n+   |\n+LL |         input_cells: Vec<T>::new()\n+   |                         ^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e5666d4fe4f4b3eb3d18674f01ac8119627274cb", "filename": "src/test/ui/type/type-ascription-instead-of-initializer.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -14,6 +14,12 @@ LL |     let x: Vec::with_capacity(10, 20);\n    |            ^^^^^^^^^^^^^^^^^^ --  -- supplied 2 arguments\n    |            |\n    |            expected 1 argument\n+   |\n+note: associated function defined here\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   |\n+LL |     pub fn with_capacity(capacity: usize) -> Self {\n+   |            ^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f1659d086702e8dddae5d6a57c353c04d91ec0c1", "filename": "src/test/ui/typeck/typeck-builtin-bound-type-parameters.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,19 +1,17 @@\n fn foo1<T:Copy<U>, U>(x: T) {}\n-//~^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n+//~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n \n trait Trait: Copy<dyn Send> {}\n-//~^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n+//~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n \n struct MyStruct1<T: Copy<T>>;\n-//~^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n+//~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n \n struct MyStruct2<'a, T: Copy<'a>>;\n-//~^ ERROR: wrong number of lifetime arguments: expected 0, found 1 [E0107]\n-\n+//~^ ERROR this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n \n fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n-//~^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n-//~| ERROR: wrong number of lifetime arguments: expected 0, found 1\n+//~^ ERROR this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n+//~| ERROR this trait takes 0 type arguments but 1 type argument was supplied\n \n-fn main() {\n-}\n+fn main() { }"}, {"sha": "777bc1c95b0b3e765ed6402a4b47a9599d50d6ba", "filename": "src/test/ui/typeck/typeck-builtin-bound-type-parameters.stderr", "status": "modified", "additions": 66, "deletions": 18, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-builtin-bound-type-parameters.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,38 +1,86 @@\n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:1:16\n+error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:1:11\n    |\n LL | fn foo1<T:Copy<U>, U>(x: T) {}\n-   |                ^ unexpected type argument\n+   |           ^^^^--- help: remove these generics\n+   |           |\n+   |           expected 0 type arguments\n+   |\n+note: trait defined here, with 0 type parameters\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n+   |\n+LL | pub trait Copy: Clone {\n+   |           ^^^^\n \n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:4:19\n+error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:4:14\n    |\n LL | trait Trait: Copy<dyn Send> {}\n-   |                   ^^^^^^^^ unexpected type argument\n+   |              ^^^^---------- help: remove these generics\n+   |              |\n+   |              expected 0 type arguments\n+   |\n+note: trait defined here, with 0 type parameters\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n+   |\n+LL | pub trait Copy: Clone {\n+   |           ^^^^\n \n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:7:26\n+error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:7:21\n    |\n LL | struct MyStruct1<T: Copy<T>>;\n-   |                          ^ unexpected type argument\n+   |                     ^^^^--- help: remove these generics\n+   |                     |\n+   |                     expected 0 type arguments\n+   |\n+note: trait defined here, with 0 type parameters\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n+   |\n+LL | pub trait Copy: Clone {\n+   |           ^^^^\n \n-error[E0107]: wrong number of lifetime arguments: expected 0, found 1\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:10:30\n+error[E0107]: this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:10:25\n    |\n LL | struct MyStruct2<'a, T: Copy<'a>>;\n-   |                              ^^ unexpected lifetime argument\n+   |                         ^^^^---- help: remove these generics\n+   |                         |\n+   |                         expected 0 lifetime arguments\n+   |\n+note: trait defined here, with 0 lifetime parameters\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n+   |\n+LL | pub trait Copy: Clone {\n+   |           ^^^^\n \n-error[E0107]: wrong number of lifetime arguments: expected 0, found 1\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:14:20\n+error[E0107]: this trait takes 0 lifetime arguments but 1 lifetime argument was supplied\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:13:15\n    |\n LL | fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n-   |                    ^^ unexpected lifetime argument\n+   |               ^^^^ ---- help: remove this lifetime argument\n+   |               |\n+   |               expected 0 lifetime arguments\n+   |\n+note: trait defined here, with 0 lifetime parameters\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n+   |\n+LL | pub trait Copy: Clone {\n+   |           ^^^^\n \n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/typeck-builtin-bound-type-parameters.rs:14:24\n+error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/typeck-builtin-bound-type-parameters.rs:13:15\n    |\n LL | fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n-   |                        ^ unexpected type argument\n+   |               ^^^^   --- help: remove this type argument\n+   |               |\n+   |               expected 0 type arguments\n+   |\n+note: trait defined here, with 0 type parameters\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n+   |\n+LL | pub trait Copy: Clone {\n+   |           ^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "8f8917e16afdafff87ddd53de145597cedc91969", "filename": "src/test/ui/typeck/typeck_type_placeholder_lifetime_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -7,5 +7,5 @@ struct Foo<'a, T:'a> {\n \n pub fn main() {\n     let c: Foo<_, _> = Foo { r: &5 };\n-    //~^ ERROR wrong number of type arguments: expected 1, found 2 [E0107]\n+    //~^ ERROR this struct takes 1 type argument but 2 type arguments were supplied\n }"}, {"sha": "01ab8e78d7ca3fda7791ac851371c626f0a7504b", "filename": "src/test/ui/typeck/typeck_type_placeholder_lifetime_1.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_1.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,8 +1,16 @@\n-error[E0107]: wrong number of type arguments: expected 1, found 2\n-  --> $DIR/typeck_type_placeholder_lifetime_1.rs:9:19\n+error[E0107]: this struct takes 1 type argument but 2 type arguments were supplied\n+  --> $DIR/typeck_type_placeholder_lifetime_1.rs:9:12\n    |\n LL |     let c: Foo<_, _> = Foo { r: &5 };\n-   |                   ^ unexpected type argument\n+   |            ^^^  --- help: remove this type argument\n+   |            |\n+   |            expected 1 type argument\n+   |\n+note: struct defined here, with 1 type parameter: `T`\n+  --> $DIR/typeck_type_placeholder_lifetime_1.rs:4:8\n+   |\n+LL | struct Foo<'a, T:'a> {\n+   |        ^^^     -\n \n error: aborting due to previous error\n "}, {"sha": "b491a7e1a9caa20044e827c37e864be00ef81c12", "filename": "src/test/ui/typeck/typeck_type_placeholder_lifetime_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -7,5 +7,5 @@ struct Foo<'a, T:'a> {\n \n pub fn main() {\n     let c: Foo<_, usize> = Foo { r: &5 };\n-    //~^ ERROR wrong number of type arguments: expected 1, found 2 [E0107]\n+    //~^ ERROR this struct takes 1 type argument but 2 type arguments were supplied\n }"}, {"sha": "6d03b833c0f151413ba5247d0a8c2145a021a56a", "filename": "src/test/ui/typeck/typeck_type_placeholder_lifetime_2.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_lifetime_2.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,8 +1,16 @@\n-error[E0107]: wrong number of type arguments: expected 1, found 2\n-  --> $DIR/typeck_type_placeholder_lifetime_2.rs:9:19\n+error[E0107]: this struct takes 1 type argument but 2 type arguments were supplied\n+  --> $DIR/typeck_type_placeholder_lifetime_2.rs:9:12\n    |\n LL |     let c: Foo<_, usize> = Foo { r: &5 };\n-   |                   ^^^^^ unexpected type argument\n+   |            ^^^  ------- help: remove this type argument\n+   |            |\n+   |            expected 1 type argument\n+   |\n+note: struct defined here, with 1 type parameter: `T`\n+  --> $DIR/typeck_type_placeholder_lifetime_2.rs:4:8\n+   |\n+LL | struct Foo<'a, T:'a> {\n+   |        ^^^     -\n \n error: aborting due to previous error\n "}, {"sha": "7d2fbdae6a2b2729a59b35e1cb8a1cacc922815e", "filename": "src/test/ui/ufcs/ufcs-qpath-missing-params.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-missing-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-missing-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-missing-params.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -12,5 +12,9 @@ impl<'a> IntoCow<'a, str> for String {\n \n fn main() {\n     <String as IntoCow>::into_cow(\"foo\".to_string());\n-    //~^ ERROR wrong number of type arguments: expected 1, found 0\n+    //~^ ERROR missing generics for trait `IntoCow`\n+\n+    <String as IntoCow>::into_cow::<str>(\"foo\".to_string());\n+    //~^ ERROR missing generics for trait `IntoCow`\n+    //~| ERROR this associated function takes 0 type arguments but 1 type argument was supplied\n }"}, {"sha": "e3fcef3dc1bb202a092ba5332faf87f7ddafad14", "filename": "src/test/ui/ufcs/ufcs-qpath-missing-params.stderr", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-missing-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-missing-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-missing-params.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,9 +1,49 @@\n-error[E0107]: wrong number of type arguments: expected 1, found 0\n-  --> $DIR/ufcs-qpath-missing-params.rs:14:5\n+error[E0107]: missing generics for trait `IntoCow`\n+  --> $DIR/ufcs-qpath-missing-params.rs:14:16\n    |\n LL |     <String as IntoCow>::into_cow(\"foo\".to_string());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 type argument\n+   |                ^^^^^^^ expected 1 type argument\n+   |\n+note: trait defined here, with 1 type parameter: `B`\n+  --> $DIR/ufcs-qpath-missing-params.rs:3:11\n+   |\n+LL | pub trait IntoCow<'a, B: ?Sized> where B: ToOwned {\n+   |           ^^^^^^^     -\n+help: use angle brackets to add missing type argument\n+   |\n+LL |     <String as IntoCow<B>>::into_cow(\"foo\".to_string());\n+   |                       ^^^\n+\n+error[E0107]: missing generics for trait `IntoCow`\n+  --> $DIR/ufcs-qpath-missing-params.rs:17:16\n+   |\n+LL |     <String as IntoCow>::into_cow::<str>(\"foo\".to_string());\n+   |                ^^^^^^^ expected 1 type argument\n+   |\n+note: trait defined here, with 1 type parameter: `B`\n+  --> $DIR/ufcs-qpath-missing-params.rs:3:11\n+   |\n+LL | pub trait IntoCow<'a, B: ?Sized> where B: ToOwned {\n+   |           ^^^^^^^     -\n+help: use angle brackets to add missing type argument\n+   |\n+LL |     <String as IntoCow<B>>::into_cow::<str>(\"foo\".to_string());\n+   |                       ^^^\n+\n+error[E0107]: this associated function takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/ufcs-qpath-missing-params.rs:17:26\n+   |\n+LL |     <String as IntoCow>::into_cow::<str>(\"foo\".to_string());\n+   |                          ^^^^^^^^------- help: remove these generics\n+   |                          |\n+   |                          expected 0 type arguments\n+   |\n+note: associated function defined here, with 0 type parameters\n+  --> $DIR/ufcs-qpath-missing-params.rs:4:8\n+   |\n+LL |     fn into_cow(self) -> Cow<'a, B>;\n+   |        ^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0107`."}, {"sha": "65f40075bd8ebb89adb9f551ffae276d39b758a9", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-region.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -28,7 +28,7 @@ fn test<'a,'b>() {\n }\n \n fn test2(x: &dyn Foo<(isize,),Output=()>, y: &dyn Foo(isize)) {\n-//~^ ERROR wrong number of lifetime arguments: expected 1, found 0\n+    //~^ ERROR this trait takes 1 lifetime argument but 0 lifetime arguments were supplied\n     // Here, the omitted lifetimes are expanded to distinct things.\n     same_type(x, y)\n }"}, {"sha": "016fc4dfb24048a5a724368d6b1025e2604ef8a9", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-region.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-region.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,8 +1,14 @@\n-error[E0107]: wrong number of lifetime arguments: expected 1, found 0\n+error[E0107]: this trait takes 1 lifetime argument but 0 lifetime arguments were supplied\n   --> $DIR/unboxed-closure-sugar-region.rs:30:51\n    |\n LL | fn test2(x: &dyn Foo<(isize,),Output=()>, y: &dyn Foo(isize)) {\n-   |                                                   ^^^^^^^^^^ expected 1 lifetime argument\n+   |                                                   ^^^ expected 1 lifetime argument\n+   |\n+note: trait defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/unboxed-closure-sugar-region.rs:10:7\n+   |\n+LL | trait Foo<'a,T> {\n+   |       ^^^ --\n \n error: aborting due to previous error\n "}, {"sha": "a82856add59425b62955b7998eaf7734445932c8", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -7,7 +7,7 @@ struct Bar<A> {\n fn bar() {\n     let x: Box<Bar()> = panic!();\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| ERROR wrong number of type arguments: expected 1, found 0\n+    //~| ERROR missing generics for struct `Bar`\n }\n \n fn main() { }"}, {"sha": "d81975abbe9929df154796119d05079b5ee6dfd8", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-1.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-1.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -4,11 +4,21 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n LL |     let x: Box<Bar()> = panic!();\n    |                ^^^^^ only `Fn` traits may use parentheses\n \n-error[E0107]: wrong number of type arguments: expected 1, found 0\n+error[E0107]: missing generics for struct `Bar`\n   --> $DIR/unboxed-closure-sugar-used-on-struct-1.rs:8:16\n    |\n LL |     let x: Box<Bar()> = panic!();\n-   |                ^^^^^ expected 1 type argument\n+   |                ^^^ expected 1 type argument\n+   |\n+note: struct defined here, with 1 type parameter: `A`\n+  --> $DIR/unboxed-closure-sugar-used-on-struct-1.rs:3:8\n+   |\n+LL | struct Bar<A> {\n+   |        ^^^ -\n+help: use angle brackets to add missing type argument\n+   |\n+LL |     let x: Box<Bar<A>()> = panic!();\n+   |                   ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b44505f8a4133bdc2571a72eab6ac8b0cf31c88e", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -6,7 +6,7 @@ struct Bar<A> {\n \n fn foo(b: Box<Bar()>) {\n     //~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n-    //~| ERROR wrong number of type arguments: expected 1, found 0\n+    //~| ERROR missing generics for struct `Bar`\n }\n \n fn main() { }"}, {"sha": "80d7c2402b6cf5e0389fea56fd57ad97accaa8f2", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -4,11 +4,21 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n LL | fn foo(b: Box<Bar()>) {\n    |               ^^^^^ only `Fn` traits may use parentheses\n \n-error[E0107]: wrong number of type arguments: expected 1, found 0\n+error[E0107]: missing generics for struct `Bar`\n   --> $DIR/unboxed-closure-sugar-used-on-struct.rs:7:15\n    |\n LL | fn foo(b: Box<Bar()>) {\n-   |               ^^^^^ expected 1 type argument\n+   |               ^^^ expected 1 type argument\n+   |\n+note: struct defined here, with 1 type parameter: `A`\n+  --> $DIR/unboxed-closure-sugar-used-on-struct.rs:3:8\n+   |\n+LL | struct Bar<A> {\n+   |        ^^^ -\n+help: use angle brackets to add missing type argument\n+   |\n+LL | fn foo(b: Box<Bar<A>()>) {\n+   |                  ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a496b7da2f10a4becf4687350fbd87386d045cd0", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -3,7 +3,7 @@\n trait Three<A,B,C> { fn dummy(&self) -> (A,B,C); }\n \n fn foo(_: &dyn Three())\n-//~^ ERROR wrong number of type arguments\n+//~^ ERROR this trait takes 3 type arguments but only 1 type argument was supplied\n //~| ERROR associated type `Output` not found\n {}\n "}, {"sha": "ef5e7d222b4b77d60df707db3e32715e70343bbc", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,8 +1,16 @@\n-error[E0107]: wrong number of type arguments: expected 3, found 1\n+error[E0107]: this trait takes 3 type arguments but only 1 type argument was supplied\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs:5:16\n    |\n LL | fn foo(_: &dyn Three())\n-   |                ^^^^^^^ expected 3 type arguments\n+   |                ^^^^^-- supplied 1 type argument\n+   |                |\n+   |                expected 3 type arguments\n+   |\n+note: trait defined here, with 3 type parameters: `A`, `B`, `C`\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs:3:7\n+   |\n+LL | trait Three<A,B,C> { fn dummy(&self) -> (A,B,C); }\n+   |       ^^^^^ - - -\n \n error[E0220]: associated type `Output` not found for `Three<(), [type error], [type error]>`\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs:5:16"}, {"sha": "d0c85150efe2b87cdd4499b01e98eef3020a9898", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -2,9 +2,27 @@\n \n trait Zero { fn dummy(&self); }\n \n-fn foo(_: dyn Zero())\n-    //~^ ERROR wrong number of type arguments\n+fn foo1(_: dyn Zero()) {\n+    //~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n     //~| ERROR associated type `Output` not found for `Zero`\n-{}\n+}\n+\n+fn foo2(_: dyn Zero<usize>) {\n+    //~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n+}\n+\n+fn foo3(_: dyn Zero <   usize   >) {\n+    //~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n+}\n+\n+fn foo4(_: dyn Zero(usize)) {\n+    //~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n+    //~| ERROR associated type `Output` not found for `Zero`\n+}\n+\n+fn foo5(_: dyn Zero (   usize   )) {\n+    //~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n+    //~| ERROR associated type `Output` not found for `Zero`\n+}\n \n fn main() { }"}, {"sha": "2e620a5563f551f27655c5b304d35b95e432a2ec", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters.stderr", "status": "modified", "additions": 84, "deletions": 8, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,16 +1,92 @@\n-error[E0107]: wrong number of type arguments: expected 0, found 1\n-  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:5:15\n+error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:5:16\n    |\n-LL | fn foo(_: dyn Zero())\n-   |               ^^^^^^ unexpected type argument\n+LL | fn foo1(_: dyn Zero()) {\n+   |                ^^^^-- help: remove these parenthetical generics\n+   |                |\n+   |                expected 0 type arguments\n+   |\n+note: trait defined here, with 0 type parameters\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:3:7\n+   |\n+LL | trait Zero { fn dummy(&self); }\n+   |       ^^^^\n+\n+error[E0220]: associated type `Output` not found for `Zero`\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:5:16\n+   |\n+LL | fn foo1(_: dyn Zero()) {\n+   |                ^^^^^^ associated type `Output` not found\n+\n+error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:10:16\n+   |\n+LL | fn foo2(_: dyn Zero<usize>) {\n+   |                ^^^^------- help: remove these generics\n+   |                |\n+   |                expected 0 type arguments\n+   |\n+note: trait defined here, with 0 type parameters\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:3:7\n+   |\n+LL | trait Zero { fn dummy(&self); }\n+   |       ^^^^\n+\n+error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:14:16\n+   |\n+LL | fn foo3(_: dyn Zero <   usize   >) {\n+   |                ^^^^-------------- help: remove these generics\n+   |                |\n+   |                expected 0 type arguments\n+   |\n+note: trait defined here, with 0 type parameters\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:3:7\n+   |\n+LL | trait Zero { fn dummy(&self); }\n+   |       ^^^^\n+\n+error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:18:16\n+   |\n+LL | fn foo4(_: dyn Zero(usize)) {\n+   |                ^^^^------- help: remove these parenthetical generics\n+   |                |\n+   |                expected 0 type arguments\n+   |\n+note: trait defined here, with 0 type parameters\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:3:7\n+   |\n+LL | trait Zero { fn dummy(&self); }\n+   |       ^^^^\n+\n+error[E0220]: associated type `Output` not found for `Zero`\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:18:16\n+   |\n+LL | fn foo4(_: dyn Zero(usize)) {\n+   |                ^^^^^^^^^^^ associated type `Output` not found\n+\n+error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:23:16\n+   |\n+LL | fn foo5(_: dyn Zero (   usize   )) {\n+   |                ^^^^-------------- help: remove these parenthetical generics\n+   |                |\n+   |                expected 0 type arguments\n+   |\n+note: trait defined here, with 0 type parameters\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:3:7\n+   |\n+LL | trait Zero { fn dummy(&self); }\n+   |       ^^^^\n \n error[E0220]: associated type `Output` not found for `Zero`\n-  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:5:15\n+  --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters.rs:23:16\n    |\n-LL | fn foo(_: dyn Zero())\n-   |               ^^^^^^ associated type `Output` not found\n+LL | fn foo5(_: dyn Zero (   usize   )) {\n+   |                ^^^^^^^^^^^^^^^^^^ associated type `Output` not found\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0107, E0220.\n For more information about an error, try `rustc --explain E0107`."}, {"sha": "5a47942e5afc68f568c63cee384ee3ba5de3940f", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -3,7 +3,7 @@\n trait Trait {}\n \n fn f<F:Trait(isize) -> isize>(x: F) {}\n-//~^ ERROR wrong number of type arguments: expected 0, found 1 [E0107]\n-//~| ERROR E0220\n+//~^ ERROR this trait takes 0 type arguments but 1 type argument was supplied\n+//~| ERROR associated type `Output` not found for `Trait`\n \n fn main() {}"}, {"sha": "b88a316c0c9dc529e1b7a0e2929dd85c6b04b784", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-wrong-trait.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-trait.stderr?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -1,8 +1,16 @@\n-error[E0107]: wrong number of type arguments: expected 0, found 1\n+error[E0107]: this trait takes 0 type arguments but 1 type argument was supplied\n   --> $DIR/unboxed-closure-sugar-wrong-trait.rs:5:8\n    |\n LL | fn f<F:Trait(isize) -> isize>(x: F) {}\n-   |        ^^^^^^^^^^^^ unexpected type argument\n+   |        ^^^^^------- help: remove these parenthetical generics\n+   |        |\n+   |        expected 0 type arguments\n+   |\n+note: trait defined here, with 0 type parameters\n+  --> $DIR/unboxed-closure-sugar-wrong-trait.rs:3:7\n+   |\n+LL | trait Trait {}\n+   |       ^^^^^\n \n error[E0220]: associated type `Output` not found for `Trait`\n   --> $DIR/unboxed-closure-sugar-wrong-trait.rs:5:24"}, {"sha": "1ec92500ce8277e1f8b0d244fbf9bb06a88ca192", "filename": "src/tools/clippy/clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62a76047ea24aad7639f14eb3ce0e620b77bdb7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=a62a76047ea24aad7639f14eb3ce0e620b77bdb7", "patch": "@@ -744,7 +744,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     }\n                     for segment in path.segments {\n                         segment.ident.name.hash(&mut self.s);\n-                        self.hash_generic_args(segment.generic_args().args);\n+                        self.hash_generic_args(segment.args().args);\n                     }\n                 },\n                 QPath::TypeRelative(ref ty, ref segment) => {"}]}