{"sha": "26196715e8e8fb3a578cc89a54c13773dc1a3772", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MTk2NzE1ZThlOGZiM2E1NzhjYzg5YTU0YzEzNzczZGMxYTM3NzI=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-10T00:30:52Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-12T15:04:31Z"}, "message": "Deprecate Num, Unsigned and Primitive", "tree": {"sha": "dacc46c9de707a55d2520bfd9eb7f54320194be5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dacc46c9de707a55d2520bfd9eb7f54320194be5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26196715e8e8fb3a578cc89a54c13773dc1a3772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26196715e8e8fb3a578cc89a54c13773dc1a3772", "html_url": "https://github.com/rust-lang/rust/commit/26196715e8e8fb3a578cc89a54c13773dc1a3772", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26196715e8e8fb3a578cc89a54c13773dc1a3772/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46333d527b138e8e202380a5ce4409dfe1414148", "url": "https://api.github.com/repos/rust-lang/rust/commits/46333d527b138e8e202380a5ce4409dfe1414148", "html_url": "https://github.com/rust-lang/rust/commit/46333d527b138e8e202380a5ce4409dfe1414148"}], "stats": {"total": 151, "additions": 83, "deletions": 68}, "files": [{"sha": "a96e622e7601162986c22cc420decf2b8d38b9cf", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=26196715e8e8fb3a578cc89a54c13773dc1a3772", "patch": "@@ -97,8 +97,7 @@ syn keyword rustTrait FromIterator IntoIterator Extend ExactSize\n syn keyword rustTrait Iterator DoubleEndedIterator\n syn keyword rustTrait RandomAccessIterator CloneableIterator\n syn keyword rustTrait OrdIterator MutableDoubleEndedIterator\n-syn keyword rustTrait Num NumCast\n-syn keyword rustTrait Signed Unsigned Primitive Int Float\n+syn keyword rustTrait NumCast Signed Int UnsignedInt Float\n syn keyword rustTrait FloatMath ToPrimitive FromPrimitive\n syn keyword rustTrait Box\n syn keyword rustTrait GenericPath Path PosixPath WindowsPath"}, {"sha": "ec920ddc6dbc584407c4d1e18b47a351da97fcb8", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=26196715e8e8fb3a578cc89a54c13773dc1a3772", "patch": "@@ -13,7 +13,7 @@\n use char;\n use fmt;\n use iter::{range, DoubleEndedIterator};\n-use num::{Float, FPNaN, FPInfinite, ToPrimitive, Primitive};\n+use num::{Float, FPNaN, FPInfinite, ToPrimitive};\n use num::cast;\n use result::Ok;\n use slice::{mod, SlicePrelude};\n@@ -79,7 +79,7 @@ static DIGIT_E_RADIX: uint = ('e' as uint) - ('a' as uint) + 11u;\n  * - Fails if `radix` > 25 and `exp_format` is `ExpBin` due to conflict\n  *   between digit and exponent sign `'p'`.\n  */\n-pub fn float_to_str_bytes_common<T: Primitive + Float, U>(\n+pub fn float_to_str_bytes_common<T: Float, U>(\n     num: T,\n     radix: uint,\n     negative_zero: bool,"}, {"sha": "0a5af56217c8ddbab8e8297bd15fd0bf6e6348a7", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=26196715e8e8fb3a578cc89a54c13773dc1a3772", "patch": "@@ -35,10 +35,11 @@ trait GenericRadix {\n     fn fmt_int<T: Int>(&self, mut x: T, f: &mut fmt::Formatter) -> fmt::Result {\n         // The radix can be as low as 2, so we need a buffer of at least 64\n         // characters for a base 2 number.\n+        let zero = Int::zero();\n+        let is_positive = x >= zero;\n         let mut buf = [0u8, ..64];\n-        let base = cast(self.base()).unwrap();\n         let mut curr = buf.len();\n-        let is_positive = x >= Int::zero();\n+        let base = cast(self.base()).unwrap();\n         if is_positive {\n             // Accumulate each digit of the number from the least significant\n             // to the most significant figure.\n@@ -47,16 +48,16 @@ trait GenericRadix {\n                 x = x / base;                             // Deaccumulate the number.\n                 *byte = self.digit(cast(n).unwrap());     // Store the digit in the buffer.\n                 curr -= 1;\n-                if x == Int::zero() { break; }                 // No more digits left to accumulate.\n+                if x == zero { break };                   // No more digits left to accumulate.\n             }\n         } else {\n             // Do the same as above, but accounting for two's complement.\n             for byte in buf.iter_mut().rev() {\n-                let n = -(x % base);                      // Get the current place value.\n+                let n = zero - (x % base);                // Get the current place value.\n                 x = x / base;                             // Deaccumulate the number.\n                 *byte = self.digit(cast(n).unwrap());     // Store the digit in the buffer.\n                 curr -= 1;\n-                if x == Int::zero() { break; }                 // No more digits left to accumulate.\n+                if x == zero { break };                   // No more digits left to accumulate.\n             }\n         }\n         f.pad_integral(is_positive, self.prefix(), buf[curr..])"}, {"sha": "ef218c1ce5a6c984f158903017ce3713f1fdce72", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 60, "deletions": 46, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=26196715e8e8fb3a578cc89a54c13773dc1a3772", "patch": "@@ -19,39 +19,22 @@ use {int, i8, i16, i32, i64};\n use {uint, u8, u16, u32, u64};\n use {f32, f64};\n use clone::Clone;\n-use cmp::{Ord, PartialEq, PartialOrd};\n+use cmp::{PartialEq, Eq};\n+use cmp::{PartialOrd, Ord};\n use kinds::Copy;\n use mem::size_of;\n use ops::{Add, Sub, Mul, Div, Rem, Neg};\n use ops::{Not, BitAnd, BitOr, BitXor, Shl, Shr};\n use option::{Option, Some, None};\n \n-/// The base trait for numeric types\n-#[allow(deprecated)]\n-pub trait Num: PartialEq + Zero + One\n-             + Neg<Self>\n-             + Add<Self,Self>\n-             + Sub<Self,Self>\n-             + Mul<Self,Self>\n-             + Div<Self,Self>\n-             + Rem<Self,Self> {}\n-\n-macro_rules! trait_impl(\n-    ($name:ident for $($t:ty)*) => ($(\n-        impl $name for $t {}\n-    )*)\n-)\n-\n-trait_impl!(Num for uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64)\n-\n /// Simultaneous division and remainder\n #[inline]\n pub fn div_rem<T: Div<T, T> + Rem<T, T>>(x: T, y: T) -> (T, T) {\n     (x / y, x % y)\n }\n \n /// Useful functions for signed numbers (i.e. numbers that can be negative).\n-pub trait Signed: Num + Neg<Self> {\n+pub trait Signed: Neg<Self> {\n     /// Computes the absolute value.\n     ///\n     /// For `f32` and `f64`, `NaN` will be returned if the number is `NaN`.\n@@ -161,11 +144,6 @@ signed_float_impl!(f64, f64::NAN, f64::INFINITY, f64::NEG_INFINITY,\n /// * `-1` if the number is negative\n #[inline(always)] pub fn signum<T: Signed>(value: T) -> T { value.signum() }\n \n-/// A trait for values which cannot be negative\n-pub trait Unsigned: Num {}\n-\n-trait_impl!(Unsigned for uint u8 u16 u32 u64)\n-\n /// Raises a value to the power of exp, using exponentiation by squaring.\n ///\n /// # Example\n@@ -191,27 +169,25 @@ pub fn pow<T: Int>(mut base: T, mut exp: uint) -> T {\n     }\n }\n \n-/// Specifies the available operations common to all of Rust's core numeric primitives.\n-/// These may not always make sense from a purely mathematical point of view, but\n-/// may be useful for systems programming.\n-pub trait Primitive: Copy\n-                   + Clone\n-                   + Num\n-                   + NumCast\n-                   + PartialOrd {}\n-\n-trait_impl!(Primitive for uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64)\n-\n /// A primitive signed or unsigned integer equipped with various bitwise\n /// operators, bit counting methods, and endian conversion functions.\n-pub trait Int: Primitive\n-             + Ord\n-             + Not<Self>\n-             + BitAnd<Self,Self>\n-             + BitOr<Self,Self>\n-             + BitXor<Self,Self>\n-             + Shl<uint,Self>\n-             + Shr<uint,Self> {\n+pub trait Int\n+    : Copy + Clone\n+    + NumCast\n+    + PartialOrd + Ord\n+    + PartialEq + Eq\n+    + Add<Self,Self>\n+    + Sub<Self,Self>\n+    + Mul<Self,Self>\n+    + Div<Self,Self>\n+    + Rem<Self,Self>\n+    + Not<Self>\n+    + BitAnd<Self,Self>\n+    + BitOr<Self,Self>\n+    + BitXor<Self,Self>\n+    + Shl<uint,Self>\n+    + Shr<uint,Self>\n+{\n     /// Returns the `0` value of this integer.\n     // FIXME (#5527): Should be an associated constant\n     fn zero() -> Self;\n@@ -1253,13 +1229,24 @@ pub enum FPCategory {\n     FPNormal,\n }\n \n-/// Operations on primitive floating point numbers.\n+/// Operations on the built-in floating point numbers.\n // FIXME(#5527): In a future version of Rust, many of these functions will\n //               become constants.\n //\n // FIXME(#8888): Several of these functions have a parameter named\n //               `unused_self`. Removing it requires #8888 to be fixed.\n-pub trait Float: Signed + Primitive {\n+pub trait Float\n+    : Copy + Clone\n+    + NumCast\n+    + PartialOrd\n+    + PartialEq\n+    + Signed\n+    + Add<Self,Self>\n+    + Sub<Self,Self>\n+    + Mul<Self,Self>\n+    + Div<Self,Self>\n+    + Rem<Self,Self>\n+{\n     /// Returns the NaN value.\n     fn nan() -> Self;\n     /// Returns the infinite value.\n@@ -1404,6 +1391,33 @@ pub trait Float: Signed + Primitive {\n \n // DEPRECATED\n \n+macro_rules! trait_impl {\n+    ($name:ident for $($t:ty)*) => {\n+        $(#[allow(deprecated)] impl $name for $t {})*\n+    };\n+}\n+\n+#[deprecated = \"Generalised numbers are no longer supported\"]\n+#[allow(deprecated)]\n+pub trait Num: PartialEq + Zero + One\n+             + Neg<Self>\n+             + Add<Self,Self>\n+             + Sub<Self,Self>\n+             + Mul<Self,Self>\n+             + Div<Self,Self>\n+             + Rem<Self,Self> {}\n+trait_impl!(Num for uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64)\n+\n+#[deprecated = \"Generalised unsigned numbers are no longer supported\"]\n+#[allow(deprecated)]\n+pub trait Unsigned: Num {}\n+trait_impl!(Unsigned for uint u8 u16 u32 u64)\n+\n+#[deprecated = \"Use `Float` or `Int`\"]\n+#[allow(deprecated)]\n+pub trait Primitive: Copy + Clone + Num + NumCast + PartialOrd {}\n+trait_impl!(Primitive for uint u8 u16 u32 u64 int i8 i16 i32 i64 f32 f64)\n+\n #[deprecated = \"The generic `Zero` trait will be removed soon.\"]\n pub trait Zero: Add<Self, Self> {\n     #[deprecated = \"Use `Int::zero()` or `Float::zero()`.\"]"}, {"sha": "51a44ef4d59695f9a205cd5f3e3fe3c2807a3a3d", "filename": "src/libcoretest/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Flibcoretest%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Flibcoretest%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fmod.rs?ref=26196715e8e8fb3a578cc89a54c13773dc1a3772", "patch": "@@ -24,7 +24,7 @@ mod u64;\n mod uint;\n \n /// Helper function for testing numeric operations\n-pub fn test_num<T:Num + NumCast + ::std::fmt::Show>(ten: T, two: T) {\n+pub fn test_num<T: Int + ::std::fmt::Show>(ten: T, two: T) {\n     assert_eq!(ten.add(&two),  cast(12i).unwrap());\n     assert_eq!(ten.sub(&two),  cast(8i).unwrap());\n     assert_eq!(ten.mul(&two),  cast(20i).unwrap());"}, {"sha": "28fe7538ca54c84cba8a826b851d8bd4337c1388", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=26196715e8e8fb3a578cc89a54c13773dc1a3772", "patch": "@@ -135,7 +135,7 @@ pub fn abs_sub<T: FloatMath>(x: T, y: T) -> T {\n \n /// Helper function for testing numeric operations\n #[cfg(test)]\n-pub fn test_num<T:Num + NumCast + Show>(ten: T, two: T) {\n+pub fn test_num<T: Int + Show>(ten: T, two: T) {\n     assert_eq!(ten.add(&two),  cast(12i).unwrap());\n     assert_eq!(ten.sub(&two),  cast(8i).unwrap());\n     assert_eq!(ten.mul(&two),  cast(20i).unwrap());"}, {"sha": "06d2f0ef028e1b2013b94d0f8ada1b0195c5644a", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=26196715e8e8fb3a578cc89a54c13773dc1a3772", "patch": "@@ -116,7 +116,7 @@ fn int_to_str_bytes_common<T: Int>(num: T, radix: uint, sign: SignFormat, f: |u8\n         // numbers [-35 .. 0] we always have [0 .. 35].\n         let current_digit_signed = deccum % radix_gen;\n         let current_digit = if current_digit_signed < _0 {\n-            -current_digit_signed\n+            _0 - current_digit_signed\n         } else {\n             current_digit_signed\n         };"}, {"sha": "66479202e1253e6172fdbcd814b2727d966a7098", "filename": "src/test/compile-fail/type-params-in-different-spaces-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-1.rs?ref=26196715e8e8fb3a578cc89a54c13773dc1a3772", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::num::Num;\n+use std::num::Int;\n \n-trait BrokenAdd: Num {\n+trait BrokenAdd: Int {\n     fn broken_add<T>(&self, rhs: T) -> Self {\n         *self + rhs //~ ERROR expected `Self`, found `T`\n     }\n }\n \n-impl<T: Num> BrokenAdd for T {}\n+impl<T: Int> BrokenAdd for T {}\n \n pub fn main() {\n     let foo: u8 = 0u8;"}, {"sha": "e606018feb9c32e5d6107f38d25fafe388377e1e", "filename": "src/test/run-pass/trait-inheritance-num.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs?ref=26196715e8e8fb3a578cc89a54c13773dc1a3772", "patch": "@@ -12,11 +12,11 @@\n use std::cmp::{PartialEq, PartialOrd};\n use std::num::NumCast;\n \n-pub trait NumExt: Num + NumCast + PartialEq + PartialOrd {}\n+pub trait NumExt: NumCast + PartialEq + PartialOrd {}\n \n pub trait FloatExt: NumExt {}\n \n-fn greater_than_one<T:NumExt>(n: &T) -> bool { *n > NumCast::from(1i).unwrap() }\n-fn greater_than_one_float<T:FloatExt>(n: &T) -> bool { *n > NumCast::from(1i).unwrap() }\n+fn greater_than_one<T: NumExt>(n: &T) -> bool { *n > NumCast::from(1i).unwrap() }\n+fn greater_than_one_float<T: FloatExt>(n: &T) -> bool { *n > NumCast::from(1i).unwrap() }\n \n pub fn main() {}"}, {"sha": "42eaaa09fcdccc3bf1ad611e59c909993989c50d", "filename": "src/test/run-pass/trait-inheritance-num0.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs?ref=26196715e8e8fb3a578cc89a54c13773dc1a3772", "patch": "@@ -11,14 +11,15 @@\n \n // Extending Num and using inherited static methods\n \n+use std::cmp::PartialOrd;\n use std::num::NumCast;\n \n pub trait Num {\n     fn from_int(i: int) -> Self;\n     fn gt(&self, other: &Self) -> bool;\n }\n \n-pub trait NumExt: Num + NumCast { }\n+pub trait NumExt: NumCast + PartialOrd { }\n \n fn greater_than_one<T:NumExt>(n: &T) -> bool {\n     n.gt(&NumCast::from(1i).unwrap())"}, {"sha": "9407afbdd6b9c8af52be0891be9c3e2b4f16f9e6", "filename": "src/test/run-pass/trait-inheritance-num1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs?ref=26196715e8e8fb3a578cc89a54c13773dc1a3772", "patch": "@@ -11,7 +11,7 @@\n use std::cmp::PartialOrd;\n use std::num::NumCast;\n \n-pub trait NumExt: Num + NumCast + PartialOrd { }\n+pub trait NumExt: NumCast + PartialOrd { }\n \n fn greater_than_one<T:NumExt>(n: &T) -> bool {\n     *n > NumCast::from(1i).unwrap()"}, {"sha": "aa35f2cd70f1a8ad1d9989036e34cb53c47f53f4", "filename": "src/test/run-pass/trait-inheritance-num2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs?ref=26196715e8e8fb3a578cc89a54c13773dc1a3772", "patch": "@@ -32,7 +32,7 @@ impl TypeExt for f32 {}\n impl TypeExt for f64 {}\n \n \n-pub trait NumExt: TypeExt + PartialEq + PartialOrd + Num + NumCast {}\n+pub trait NumExt: TypeExt + PartialEq + PartialOrd + NumCast {}\n \n impl NumExt for u8 {}\n impl NumExt for u16 {}"}, {"sha": "4c79600e2e9bae33b1c20e02d43d7045609b6f08", "filename": "src/test/run-pass/trait-inheritance-num5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26196715e8e8fb3a578cc89a54c13773dc1a3772/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs?ref=26196715e8e8fb3a578cc89a54c13773dc1a3772", "patch": "@@ -11,7 +11,7 @@\n use std::cmp::PartialEq;\n use std::num::NumCast;\n \n-pub trait NumExt: PartialEq + Num + NumCast {}\n+pub trait NumExt: PartialEq + NumCast {}\n \n impl NumExt for f32 {}\n impl NumExt for int {}"}]}