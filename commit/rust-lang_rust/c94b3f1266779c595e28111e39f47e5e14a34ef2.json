{"sha": "c94b3f1266779c595e28111e39f47e5e14a34ef2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NGIzZjEyNjY3NzljNTk1ZTI4MTExZTM5ZjQ3ZTVlMTRhMzRlZjI=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-04-02T08:13:31Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-04-09T15:55:49Z"}, "message": " Replace the `forget` intrinsic with ManuallyDrop\n\nless intrinsics = better life", "tree": {"sha": "d763c73d796645b81c7e0dcbb3c58c78a6c2cd84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d763c73d796645b81c7e0dcbb3c58c78a6c2cd84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c94b3f1266779c595e28111e39f47e5e14a34ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c94b3f1266779c595e28111e39f47e5e14a34ef2", "html_url": "https://github.com/rust-lang/rust/commit/c94b3f1266779c595e28111e39f47e5e14a34ef2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c94b3f1266779c595e28111e39f47e5e14a34ef2/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38713126dd8502e283aa8ec7c6b678a4c43f8c3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/38713126dd8502e283aa8ec7c6b678a4c43f8c3b", "html_url": "https://github.com/rust-lang/rust/commit/38713126dd8502e283aa8ec7c6b678a4c43f8c3b"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "b0287631585125a9febd3fb903e5d51e2358ae8e", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c94b3f1266779c595e28111e39f47e5e14a34ef2/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94b3f1266779c595e28111e39f47e5e14a34ef2/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=c94b3f1266779c595e28111e39f47e5e14a34ef2", "patch": "@@ -691,9 +691,6 @@ extern \"rust-intrinsic\" {\n     /// initialize memory previous set to the result of `uninit`.\n     pub fn uninit<T>() -> T;\n \n-    /// Moves a value out of scope without running drop glue.\n-    pub fn forget<T>(_: T) -> ();\n-\n     /// Reinterprets the bits of a value of one type as another type.\n     ///\n     /// Both types must have the same size. Neither the original, nor the result,"}, {"sha": "52ccaa417bc5f69a0cbcf54bda8805c04f56d969", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c94b3f1266779c595e28111e39f47e5e14a34ef2/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94b3f1266779c595e28111e39f47e5e14a34ef2/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=c94b3f1266779c595e28111e39f47e5e14a34ef2", "patch": "@@ -171,7 +171,7 @@ pub use intrinsics::transmute;\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn forget<T>(t: T) {\n-    unsafe { intrinsics::forget(t) }\n+    ManuallyDrop::new(t);\n }\n \n /// Returns the size of a type in bytes.\n@@ -780,12 +780,14 @@ pub union ManuallyDrop<T>{ value: T }\n impl<T> ManuallyDrop<T> {\n     /// Wrap a value to be manually dropped.\n     #[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+    #[inline]\n     pub fn new(value: T) -> ManuallyDrop<T> {\n         ManuallyDrop { value: value }\n     }\n \n     /// Extract the value from the ManuallyDrop container.\n     #[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+    #[inline]\n     pub fn into_inner(self) -> T {\n         unsafe {\n             self.value\n@@ -800,6 +802,7 @@ impl<T> ManuallyDrop<T> {\n     /// now represents uninitialized data. It is up to the user of this method to ensure the\n     /// uninitialized data is not actually used.\n     #[unstable(feature = \"manually_drop\", issue = \"40673\")]\n+    #[inline]\n     pub unsafe fn drop(slot: &mut ManuallyDrop<T>) {\n         ptr::drop_in_place(&mut slot.value)\n     }\n@@ -808,6 +811,7 @@ impl<T> ManuallyDrop<T> {\n #[unstable(feature = \"manually_drop\", issue = \"40673\")]\n impl<T> ::ops::Deref for ManuallyDrop<T> {\n     type Target = T;\n+    #[inline]\n     fn deref(&self) -> &Self::Target {\n         unsafe {\n             &self.value\n@@ -817,6 +821,7 @@ impl<T> ::ops::Deref for ManuallyDrop<T> {\n \n #[unstable(feature = \"manually_drop\", issue = \"40673\")]\n impl<T> ::ops::DerefMut for ManuallyDrop<T> {\n+    #[inline]\n     fn deref_mut(&mut self) -> &mut Self::Target {\n         unsafe {\n             &mut self.value"}, {"sha": "0cbc103994ad93ca326fa8d90be6ebd7c169b757", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c94b3f1266779c595e28111e39f47e5e14a34ef2/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94b3f1266779c595e28111e39f47e5e14a34ef2/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=c94b3f1266779c595e28111e39f47e5e14a34ef2", "patch": "@@ -188,7 +188,7 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n             C_nil(ccx)\n         }\n         // Effectively no-ops\n-        \"uninit\" | \"forget\" => {\n+        \"uninit\" => {\n             C_nil(ccx)\n         }\n         \"needs_drop\" => {"}, {"sha": "cd58fcd4806da62d104e61679c7a9527ae71bad6", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c94b3f1266779c595e28111e39f47e5e14a34ef2/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94b3f1266779c595e28111e39f47e5e14a34ef2/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=c94b3f1266779c595e28111e39f47e5e14a34ef2", "patch": "@@ -124,7 +124,6 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             \"rustc_peek\" => (1, vec![param(0)], param(0)),\n             \"init\" => (1, Vec::new(), param(0)),\n             \"uninit\" => (1, Vec::new(), param(0)),\n-            \"forget\" => (1, vec![ param(0) ], tcx.mk_nil()),\n             \"transmute\" => (2, vec![ param(0) ], param(1)),\n             \"move_val_init\" => {\n                 (1,"}]}