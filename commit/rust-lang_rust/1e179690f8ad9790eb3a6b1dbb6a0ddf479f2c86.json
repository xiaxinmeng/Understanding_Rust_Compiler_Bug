{"sha": "1e179690f8ad9790eb3a6b1dbb6a0ddf479f2c86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMTc5NjkwZjhhZDk3OTBlYjNhNmIxZGJiNmEwZGRmNDc5ZjJjODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-05T03:44:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-05T03:44:53Z"}, "message": "Auto merge of #69717 - estebank:correctly-probe, r=varkor\n\nCorrectly reject `TraitCandidate` in all cases\n\nFollow up to #69255, addresses #69629.\n\nWhen `self.select_trait_candidate(trait_ref)` returned `Err(_)`, `result` wasn't being set to `NoMatch`, causing invalid methods to be selected.", "tree": {"sha": "c7dbdd565880b4348b7068336b3440c212cca25c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7dbdd565880b4348b7068336b3440c212cca25c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e179690f8ad9790eb3a6b1dbb6a0ddf479f2c86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e179690f8ad9790eb3a6b1dbb6a0ddf479f2c86", "html_url": "https://github.com/rust-lang/rust/commit/1e179690f8ad9790eb3a6b1dbb6a0ddf479f2c86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e179690f8ad9790eb3a6b1dbb6a0ddf479f2c86/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75cf41afb468152611212271bae026948cd3ba46", "url": "https://api.github.com/repos/rust-lang/rust/commits/75cf41afb468152611212271bae026948cd3ba46", "html_url": "https://github.com/rust-lang/rust/commit/75cf41afb468152611212271bae026948cd3ba46"}, {"sha": "8a3272985b2c9bcd764d72ecf78e9c321b710e63", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a3272985b2c9bcd764d72ecf78e9c321b710e63", "html_url": "https://github.com/rust-lang/rust/commit/8a3272985b2c9bcd764d72ecf78e9c321b710e63"}], "stats": {"total": 3, "additions": 1, "deletions": 2}, "files": [{"sha": "4f65b0e87a18cc97238c21776811245efae25f3b", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e179690f8ad9790eb3a6b1dbb6a0ddf479f2c86/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e179690f8ad9790eb3a6b1dbb6a0ddf479f2c86/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=1e179690f8ad9790eb3a6b1dbb6a0ddf479f2c86", "patch": "@@ -1403,6 +1403,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     let predicate = trait_ref.without_const().to_predicate();\n                     let obligation = traits::Obligation::new(cause, self.param_env, predicate);\n                     if !self.predicate_may_hold(&obligation) {\n+                        result = ProbeResult::NoMatch;\n                         if self.probe(|_| {\n                             match self.select_trait_candidate(trait_ref) {\n                                 Err(_) => return true,\n@@ -1413,7 +1414,6 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                                         // Determine exactly which obligation wasn't met, so\n                                         // that we can give more context in the error.\n                                         if !self.predicate_may_hold(&obligation) {\n-                                            result = ProbeResult::NoMatch;\n                                             let o = self.resolve_vars_if_possible(obligation);\n                                             let predicate =\n                                                 self.resolve_vars_if_possible(&predicate);\n@@ -1431,7 +1431,6 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                                 _ => {\n                                     // Some nested subobligation of this predicate\n                                     // failed.\n-                                    result = ProbeResult::NoMatch;\n                                     let predicate = self.resolve_vars_if_possible(&predicate);\n                                     possibly_unsatisfied_predicates.push((predicate, None));\n                                 }"}]}