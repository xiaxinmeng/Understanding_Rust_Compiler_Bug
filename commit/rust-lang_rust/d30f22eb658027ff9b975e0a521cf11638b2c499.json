{"sha": "d30f22eb658027ff9b975e0a521cf11638b2c499", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMGYyMmViNjU4MDI3ZmY5Yjk3NWUwYTUyMWNmMTE2MzhiMmM0OTk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-10T08:20:18Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-10T08:20:18Z"}, "message": "rt: Remove the _2 prefix from intrinsics; all rust-intrinsics now use explicit return pointers", "tree": {"sha": "69e2a1dacebc2045a2fe1d373434a9b157cb184d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69e2a1dacebc2045a2fe1d373434a9b157cb184d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d30f22eb658027ff9b975e0a521cf11638b2c499", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d30f22eb658027ff9b975e0a521cf11638b2c499", "html_url": "https://github.com/rust-lang/rust/commit/d30f22eb658027ff9b975e0a521cf11638b2c499", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d30f22eb658027ff9b975e0a521cf11638b2c499/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f02c998a8d43b66b8fcf7b89db283c837971c250", "url": "https://api.github.com/repos/rust-lang/rust/commits/f02c998a8d43b66b8fcf7b89db283c837971c250", "html_url": "https://github.com/rust-lang/rust/commit/f02c998a8d43b66b8fcf7b89db283c837971c250"}], "stats": {"total": 95, "additions": 20, "deletions": 75}, "files": [{"sha": "d34b54d68e4c40f649cded880fbf13620655c342", "filename": "src/lib/ivec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d30f22eb658027ff9b975e0a521cf11638b2c499/src%2Flib%2Fivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d30f22eb658027ff9b975e0a521cf11638b2c499/src%2Flib%2Fivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fivec.rs?ref=d30f22eb658027ff9b975e0a521cf11638b2c499", "patch": "@@ -7,7 +7,7 @@ import uint::next_power_of_two;\n type operator2[T,U,V] = fn(&T, &U) -> V;\n \n native \"rust-intrinsic\" mod rusti {\n-    fn ivec_len_2[T](&T[] v) -> uint;\n+    fn ivec_len[T](&T[] v) -> uint;\n }\n \n native \"rust\" mod rustrt {\n@@ -32,7 +32,7 @@ fn to_ptr[T](&T[] v) -> *T {\n }\n \n fn len[T](&T[mutable?] v) -> uint {\n-    ret rusti::ivec_len_2(v);\n+    ret rusti::ivec_len(v);\n }\n \n type init_op[T] = fn(uint) -> T;"}, {"sha": "02a3101ec02b6cbd786ce94d83939365afd7df18", "filename": "src/rt/intrinsics/intrinsics.cpp", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d30f22eb658027ff9b975e0a521cf11638b2c499/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d30f22eb658027ff9b975e0a521cf11638b2c499/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.cpp?ref=d30f22eb658027ff9b975e0a521cf11638b2c499", "patch": "@@ -8,35 +8,16 @@\n extern \"C\" CDECL void\n upcall_fail(rust_task *task, char const *expr, char const *file, size_t line);\n \n-extern \"C\" size_t\n-rust_intrinsic_vec_len(rust_task *task, type_desc *ty, rust_vec *v)\n-{\n-    return v->fill / ty->size;\n-}\n-\n-extern \"C\" size_t\n-rust_intrinsic_ivec_len(rust_task *task, type_desc *ty, rust_ivec *v)\n-{\n-    size_t fill;\n-    if (v->fill)\n-        fill = v->fill;\n-    else if (v->payload.ptr)\n-        fill = v->payload.ptr->fill;\n-    else\n-        fill = 0;\n-    return fill / ty->size;\n-}\n-\n extern \"C\" void\n-rust_intrinsic_vec_len_2(rust_task *task, size_t *retptr, type_desc *ty,\n-                         rust_vec *v)\n+rust_intrinsic_vec_len(rust_task *task, size_t *retptr, type_desc *ty,\n+                       rust_vec *v)\n {\n     *retptr = v->fill / ty->size;\n }\n \n extern \"C\" void\n-rust_intrinsic_ivec_len_2(rust_task *task, size_t *retptr, type_desc *ty,\n-                          rust_ivec *v)\n+rust_intrinsic_ivec_len(rust_task *task, size_t *retptr, type_desc *ty,\n+                        rust_ivec *v)\n {\n     size_t fill;\n     if (v->fill)"}, {"sha": "64f3838479a1c79a15075436617d06f5a94375da", "filename": "src/rt/intrinsics/intrinsics.ll.in", "status": "modified", "additions": 3, "deletions": 39, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d30f22eb658027ff9b975e0a521cf11638b2c499/src%2Frt%2Fintrinsics%2Fintrinsics.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/d30f22eb658027ff9b975e0a521cf11638b2c499/src%2Frt%2Fintrinsics%2Fintrinsics.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.ll.in?ref=d30f22eb658027ff9b975e0a521cf11638b2c499", "patch": "@@ -64,43 +64,7 @@ target triple = \"@CFG_LLVM_TRIPLE@\"\n @.str = private unnamed_addr constant [42 x i8] c\"attempt to cast values of differing sizes\\00\", align 1\n @.str1 = private unnamed_addr constant [15 x i8] c\"intrinsics.cpp\\00\", align 1\n \n-define linkonce_odr i32 @rust_intrinsic_vec_len(%struct.rust_task* nocapture %task, %struct.type_desc* nocapture %ty, %struct.rust_vec* nocapture %v) nounwind readonly {\n-entry:\n-  %fill = getelementptr inbounds %struct.rust_vec* %v, i32 0, i32 2\n-  %tmp1 = load i32* %fill, align 4, !tbaa !0\n-  %size = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1\n-  %tmp3 = load i32* %size, align 4, !tbaa !0\n-  %div = udiv i32 %tmp1, %tmp3\n-  ret i32 %div\n-}\n-\n-define linkonce_odr i32 @rust_intrinsic_ivec_len(%struct.rust_task* nocapture %task, %struct.type_desc* nocapture %ty, %struct.rust_ivec* nocapture %v) nounwind readonly {\n-entry:\n-  %fill1 = getelementptr inbounds %struct.rust_ivec* %v, i32 0, i32 0\n-  %tmp2 = load i32* %fill1, align 4, !tbaa !0\n-  %tobool = icmp eq i32 %tmp2, 0\n-  br i1 %tobool, label %if.else, label %if.end17\n-\n-if.else:                                          ; preds = %entry\n-  %ptr = getelementptr inbounds %struct.rust_ivec* %v, i32 0, i32 2, i32 0\n-  %tmp7 = load %struct.rust_ivec_heap** %ptr, align 4, !tbaa !3\n-  %tobool8 = icmp eq %struct.rust_ivec_heap* %tmp7, null\n-  br i1 %tobool8, label %if.end17, label %if.then9\n-\n-if.then9:                                         ; preds = %if.else\n-  %fill14 = getelementptr inbounds %struct.rust_ivec_heap* %tmp7, i32 0, i32 0\n-  %tmp15 = load i32* %fill14, align 4, !tbaa !0\n-  br label %if.end17\n-\n-if.end17:                                         ; preds = %if.else, %entry, %if.then9\n-  %fill.0 = phi i32 [ %tmp15, %if.then9 ], [ %tmp2, %entry ], [ 0, %if.else ]\n-  %size = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1\n-  %tmp20 = load i32* %size, align 4, !tbaa !0\n-  %div = udiv i32 %fill.0, %tmp20\n-  ret i32 %div\n-}\n-\n-define linkonce_odr void @rust_intrinsic_vec_len_2(%struct.rust_task* nocapture %task, i32* nocapture %retptr, %struct.type_desc* nocapture %ty, %struct.rust_vec* nocapture %v) nounwind {\n+define linkonce_odr void @rust_intrinsic_vec_len(%struct.rust_task* nocapture %task, i32* nocapture %retptr, %struct.type_desc* nocapture %ty, %struct.rust_vec* nocapture %v) nounwind {\n entry:\n   %fill = getelementptr inbounds %struct.rust_vec* %v, i32 0, i32 2\n   %tmp1 = load i32* %fill, align 4, !tbaa !0\n@@ -111,7 +75,7 @@ entry:\n   ret void\n }\n \n-define linkonce_odr void @rust_intrinsic_ivec_len_2(%struct.rust_task* nocapture %task, i32* nocapture %retptr, %struct.type_desc* nocapture %ty, %struct.rust_ivec* nocapture %v) nounwind {\n+define linkonce_odr void @rust_intrinsic_ivec_len(%struct.rust_task* nocapture %task, i32* nocapture %retptr, %struct.type_desc* nocapture %ty, %struct.rust_ivec* nocapture %v) nounwind {\n entry:\n   %fill1 = getelementptr inbounds %struct.rust_ivec* %v, i32 0, i32 0\n   %tmp2 = load i32* %fill1, align 4, !tbaa !0\n@@ -158,7 +122,7 @@ entry:\n   br i1 %cmp, label %if.end, label %if.then\n \n if.then:                                          ; preds = %entry\n-  tail call void @upcall_fail(%struct.rust_task* %task, i8* getelementptr inbounds ([42 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str1, i32 0, i32 0), i32 64)\n+  tail call void @upcall_fail(%struct.rust_task* %task, i8* getelementptr inbounds ([42 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str1, i32 0, i32 0), i32 45)\n   br label %return\n \n if.end:                                           ; preds = %entry"}, {"sha": "7788b7aa6ed592c02fef61099073d705641d72f6", "filename": "src/test/run-pass/interior-vec.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d30f22eb658027ff9b975e0a521cf11638b2c499/src%2Ftest%2Frun-pass%2Finterior-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d30f22eb658027ff9b975e0a521cf11638b2c499/src%2Ftest%2Frun-pass%2Finterior-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finterior-vec.rs?ref=d30f22eb658027ff9b975e0a521cf11638b2c499", "patch": "@@ -1,31 +1,31 @@\n // xfail-stage0\n \n-import rusti::ivec_len_2;\n+import rusti::ivec_len;\n \n native \"rust-intrinsic\" mod rusti {\n-    fn ivec_len_2[T](&T[] v) -> uint;\n+    fn ivec_len[T](&T[] v) -> uint;\n }\n \n fn main() {\n     let int[] v = ~[];\n-    assert (ivec_len_2(v) == 0u);     // zero-length\n+    assert (ivec_len(v) == 0u);     // zero-length\n     auto x = ~[ 1, 2 ];\n-    assert (ivec_len_2(x) == 2u);     // on stack\n+    assert (ivec_len(x) == 2u);     // on stack\n     auto y = ~[ 1, 2, 3, 4, 5 ];\n-    assert (ivec_len_2(y) == 5u);     // on heap\n+    assert (ivec_len(y) == 5u);     // on heap\n \n     v += ~[];\n-    assert (ivec_len_2(v) == 0u);     // zero-length append\n+    assert (ivec_len(v) == 0u);     // zero-length append\n     x += ~[ 3 ];\n-    assert (ivec_len_2(x) == 3u);     // on-stack append\n+    assert (ivec_len(x) == 3u);     // on-stack append\n     y += ~[ 6, 7, 8, 9 ];\n-    assert (ivec_len_2(y) == 9u);     // on-heap append\n+    assert (ivec_len(y) == 9u);     // on-heap append\n \n     auto vv = v + v;\n-    assert (ivec_len_2(vv) == 0u);     // zero-length add\n+    assert (ivec_len(vv) == 0u);     // zero-length add\n     auto xx = x + ~[ 4 ];\n-    assert (ivec_len_2(xx) == 4u);     // on-stack add\n+    assert (ivec_len(xx) == 4u);     // on-stack add\n     auto yy = y + ~[ 10, 11 ];\n-    assert (ivec_len_2(yy) == 11u);    // on-heap add\n+    assert (ivec_len(yy) == 11u);    // on-heap add\n }\n "}]}