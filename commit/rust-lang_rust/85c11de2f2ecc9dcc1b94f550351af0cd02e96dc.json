{"sha": "85c11de2f2ecc9dcc1b94f550351af0cd02e96dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YzExZGUyZjJlY2M5ZGNjMWI5NGY1NTAzNTFhZjBjZDAyZTk2ZGM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-26T12:39:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-26T12:39:07Z"}, "message": "Rollup merge of #79362 - cjgillot:relou, r=oli-obk\n\nLower patterns before using the bound variable\n\nSo as to avoid having to lower patterns twice.", "tree": {"sha": "969156790a25da7644cf9a6f9f8541f0cb294050", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/969156790a25da7644cf9a6f9f8541f0cb294050"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85c11de2f2ecc9dcc1b94f550351af0cd02e96dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfv6HrCRBK7hj4Ov3rIwAAdHIIAHu5csgAP2ijx/GVLWhpLDCW\nMsjM7nClBEjLRoYZ43LKHkel9jlQJN73x6tsWtMWeeszJr3FXxYACjisu4vLIDUi\nfOvMjGx+ENYa7h91/kRuyiXJE5Tl1kTpc9RYLjVLpRhqaxpGZpmVeNDPSNfGAnKp\nlhvMZsgW+ZfbYb+tFPS5vzPbC3ikG7ygq+9m2cy8LjE1S0eARwMZSx1lWIAzZIkB\ndLvijttTBzgM0W9bVZ9yzPIHAXNZcEFnHAD42A6uGKYYotN288ndEWUtgsj7mBfq\n6YieUKEy+vmhOOziiLVuMu9UNXLaJWa9ibxOwRjmUA4YHNalVygQm97Zkib1JWg=\n=F9Rq\n-----END PGP SIGNATURE-----\n", "payload": "tree 969156790a25da7644cf9a6f9f8541f0cb294050\nparent 6fcd589025366e8ae548e039d77a960c337a68c9\nparent 27c60bad8a9c9600a8bcd5462fa6341bc717d5fc\nauthor Jonas Schievink <jonasschievink@gmail.com> 1606394347 +0100\ncommitter GitHub <noreply@github.com> 1606394347 +0100\n\nRollup merge of #79362 - cjgillot:relou, r=oli-obk\n\nLower patterns before using the bound variable\n\nSo as to avoid having to lower patterns twice.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85c11de2f2ecc9dcc1b94f550351af0cd02e96dc", "html_url": "https://github.com/rust-lang/rust/commit/85c11de2f2ecc9dcc1b94f550351af0cd02e96dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85c11de2f2ecc9dcc1b94f550351af0cd02e96dc/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fcd589025366e8ae548e039d77a960c337a68c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fcd589025366e8ae548e039d77a960c337a68c9", "html_url": "https://github.com/rust-lang/rust/commit/6fcd589025366e8ae548e039d77a960c337a68c9"}, {"sha": "27c60bad8a9c9600a8bcd5462fa6341bc717d5fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/27c60bad8a9c9600a8bcd5462fa6341bc717d5fc", "html_url": "https://github.com/rust-lang/rust/commit/27c60bad8a9c9600a8bcd5462fa6341bc717d5fc"}], "stats": {"total": 52, "additions": 7, "deletions": 45}, "files": [{"sha": "314e5103cc2de3f5ac42868c69d76a626806d9f3", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c11de2f2ecc9dcc1b94f550351af0cd02e96dc/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c11de2f2ecc9dcc1b94f550351af0cd02e96dc/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=85c11de2f2ecc9dcc1b94f550351af0cd02e96dc", "patch": "@@ -353,7 +353,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let else_arm = self.arm(else_pat, else_expr);\n \n         // Handle then + scrutinee:\n-        let then_expr = self.lower_block_expr(then);\n         let (then_pat, scrutinee, desugar) = match cond.kind {\n             // `<pat> => <then>`:\n             ExprKind::Let(ref pat, ref scrutinee) => {\n@@ -375,6 +374,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 (pat, cond, hir::MatchSource::IfDesugar { contains_else_clause })\n             }\n         };\n+        let then_expr = self.lower_block_expr(then);\n         let then_arm = self.arm(then_pat, self.arena.alloc(then_expr));\n \n         hir::ExprKind::Match(scrutinee, arena_vec![self; then_arm, else_arm], desugar)\n@@ -400,7 +400,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         };\n \n         // Handle then + scrutinee:\n-        let then_expr = self.lower_block_expr(body);\n         let (then_pat, scrutinee, desugar, source) = match cond.kind {\n             ExprKind::Let(ref pat, ref scrutinee) => {\n                 // to:\n@@ -440,6 +439,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 (pat, cond, hir::MatchSource::WhileDesugar, hir::LoopSource::While)\n             }\n         };\n+        let then_expr = self.lower_block_expr(body);\n         let then_arm = self.arm(then_pat, self.arena.alloc(then_expr));\n \n         // `match <scrutinee> { ... }`"}, {"sha": "f7c693cc94d1fdd9efc9e877046461f3c0217a73", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 5, "deletions": 43, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/85c11de2f2ecc9dcc1b94f550351af0cd02e96dc/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c11de2f2ecc9dcc1b94f550351af0cd02e96dc/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=85c11de2f2ecc9dcc1b94f550351af0cd02e96dc", "patch": "@@ -425,7 +425,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         /// declared for every type and trait definition.\n         struct MiscCollector<'tcx, 'lowering, 'hir> {\n             lctx: &'tcx mut LoweringContext<'lowering, 'hir>,\n-            hir_id_owner: Option<NodeId>,\n         }\n \n         impl MiscCollector<'_, '_, '_> {\n@@ -452,30 +451,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     }\n                 }\n             }\n-\n-            fn with_hir_id_owner<T>(\n-                &mut self,\n-                owner: Option<NodeId>,\n-                f: impl FnOnce(&mut Self) -> T,\n-            ) -> T {\n-                let old = mem::replace(&mut self.hir_id_owner, owner);\n-                let r = f(self);\n-                self.hir_id_owner = old;\n-                r\n-            }\n         }\n \n         impl<'tcx> Visitor<'tcx> for MiscCollector<'tcx, '_, '_> {\n-            fn visit_pat(&mut self, p: &'tcx Pat) {\n-                if let PatKind::Paren(..) | PatKind::Rest = p.kind {\n-                    // Doesn't generate a HIR node\n-                } else if let Some(owner) = self.hir_id_owner {\n-                    self.lctx.lower_node_id_with_owner(p.id, owner);\n-                }\n-\n-                visit::walk_pat(self, p)\n-            }\n-\n             fn visit_item(&mut self, item: &'tcx Item) {\n                 let hir_id = self.lctx.allocate_hir_id_counter(item.id);\n \n@@ -499,24 +477,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     _ => {}\n                 }\n \n-                self.with_hir_id_owner(Some(item.id), |this| {\n-                    visit::walk_item(this, item);\n-                });\n+                visit::walk_item(self, item);\n             }\n \n             fn visit_assoc_item(&mut self, item: &'tcx AssocItem, ctxt: AssocCtxt) {\n                 self.lctx.allocate_hir_id_counter(item.id);\n-                let owner = match (&item.kind, ctxt) {\n-                    // Ignore patterns in trait methods without bodies.\n-                    (AssocItemKind::Fn(_, _, _, None), AssocCtxt::Trait) => None,\n-                    _ => Some(item.id),\n-                };\n-                self.with_hir_id_owner(owner, |this| visit::walk_assoc_item(this, item, ctxt));\n-            }\n-\n-            fn visit_foreign_item(&mut self, i: &'tcx ForeignItem) {\n-                // Ignore patterns in foreign items\n-                self.with_hir_id_owner(None, |this| visit::walk_foreign_item(this, i));\n+                visit::walk_assoc_item(self, item, ctxt);\n             }\n \n             fn visit_ty(&mut self, t: &'tcx Ty) {\n@@ -527,18 +493,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         // Mirrors visit::walk_fn_decl\n                         for parameter in &f.decl.inputs {\n                             // We don't lower the ids of argument patterns\n-                            self.with_hir_id_owner(None, |this| {\n-                                this.visit_pat(&parameter.pat);\n-                            });\n+                            self.visit_pat(&parameter.pat);\n                             self.visit_ty(&parameter.ty)\n                         }\n                         self.visit_fn_ret_ty(&f.decl.output)\n                     }\n                     TyKind::ImplTrait(def_node_id, _) => {\n                         self.lctx.allocate_hir_id_counter(def_node_id);\n-                        self.with_hir_id_owner(Some(def_node_id), |this| {\n-                            visit::walk_ty(this, t);\n-                        });\n+                        visit::walk_ty(self, t);\n                     }\n                     _ => visit::walk_ty(self, t),\n                 }\n@@ -548,7 +510,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.lower_node_id(CRATE_NODE_ID);\n         debug_assert!(self.node_id_to_hir_id[CRATE_NODE_ID] == Some(hir::CRATE_HIR_ID));\n \n-        visit::walk_crate(&mut MiscCollector { lctx: &mut self, hir_id_owner: None }, c);\n+        visit::walk_crate(&mut MiscCollector { lctx: &mut self }, c);\n         visit::walk_crate(&mut item::ItemLowerer { lctx: &mut self }, c);\n \n         let module = self.lower_mod(&c.module);"}]}