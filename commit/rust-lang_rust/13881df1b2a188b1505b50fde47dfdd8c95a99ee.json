{"sha": "13881df1b2a188b1505b50fde47dfdd8c95a99ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzODgxZGYxYjJhMTg4YjE1MDViNTBmZGU0N2RmZGQ4Yzk1YTk5ZWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-17T12:12:20Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-18T12:24:57Z"}, "message": "Clarify Expr", "tree": {"sha": "618ff833517a8d0a10df23a0d4e4123e6eeac0ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/618ff833517a8d0a10df23a0d4e4123e6eeac0ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13881df1b2a188b1505b50fde47dfdd8c95a99ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13881df1b2a188b1505b50fde47dfdd8c95a99ee", "html_url": "https://github.com/rust-lang/rust/commit/13881df1b2a188b1505b50fde47dfdd8c95a99ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13881df1b2a188b1505b50fde47dfdd8c95a99ee/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edf65c43f64861bc7fb660db32f9a10c38105957", "url": "https://api.github.com/repos/rust-lang/rust/commits/edf65c43f64861bc7fb660db32f9a10c38105957", "html_url": "https://github.com/rust-lang/rust/commit/edf65c43f64861bc7fb660db32f9a10c38105957"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "26e10a351504d2de12c5a0f5c28906e84648228d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/13881df1b2a188b1505b50fde47dfdd8c95a99ee/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13881df1b2a188b1505b50fde47dfdd8c95a99ee/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=13881df1b2a188b1505b50fde47dfdd8c95a99ee", "patch": "@@ -784,15 +784,19 @@ pub enum Expr_ {\n     ExprBox(Option<P<Expr>>, P<Expr>),\n     /// An array (`[a, b, c, d]`)\n     ExprVec(Vec<P<Expr>>),\n-    /// A function cal\n+    /// A function call\n+    /// The first field resolves to the function itself,\n+    /// and the second field is the list of arguments\n     ExprCall(P<Expr>, Vec<P<Expr>>),\n     /// A method call (`x.foo::<Bar, Baz>(a, b, c, d)`)\n     /// The `SpannedIdent` is the identifier for the method name\n     /// The vector of `Ty`s are the ascripted type parameters for the method\n     /// (within the angle brackets)\n     /// The first element of the vector of `Expr`s is the expression that evaluates\n-    /// to the object on which the method is being called on, and the remaining elements\n-    /// are the arguments\n+    /// to the object on which the method is being called on (the receiver),\n+    /// and the remaining elements are the rest of the arguments.\n+    /// Thus, `x.foo::<Bar, Baz>(a, b, c, d)` is represented as\n+    /// `ExprMethodCall(foo, [Bar, Baz], [x, a, b, c, d])`\n     ExprMethodCall(SpannedIdent, Vec<P<Ty>>, Vec<P<Expr>>),\n     /// A tuple (`(a, b, c ,d)`)\n     ExprTup(Vec<P<Expr>>),\n@@ -829,7 +833,8 @@ pub enum Expr_ {\n     /// `'label loop { block }`\n     // FIXME #6993: change to Option<Name> ... or not, if these are hygienic.\n     ExprLoop(P<Block>, Option<Ident>),\n-    /// A `match` block, with a desugar source\n+    /// A `match` block, with a source that indicates whether or not it is\n+    /// the result of a desugaring, and if so, which kind\n     ExprMatch(P<Expr>, Vec<Arm>, MatchSource),\n     /// A closure (for example, `move |a, b, c| {a + b + c}`)\n     ExprClosure(CaptureClause, P<FnDecl>, P<Block>),\n@@ -1094,7 +1099,7 @@ pub enum Mac_ {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum StrStyle {\n-    /// A regular string, like `\"fooo\"`\n+    /// A regular string, like `\"foo\"`\n     CookedStr,\n     /// A raw string, like `r##\"foo\"##`\n     /// The uint is the number of `#` symbols used"}]}