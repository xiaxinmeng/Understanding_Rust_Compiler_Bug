{"sha": "4c2e3144a98f7a636fd6a33fce122121431ad9b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMmUzMTQ0YTk4ZjdhNjM2ZmQ2YTMzZmNlMTIyMTIxNDMxYWQ5YjQ=", "commit": {"author": {"name": "Brad Gibson", "email": "b2b@humanenginuity.com", "date": "2018-04-26T23:29:22Z"}, "committer": {"name": "Brad Gibson", "email": "b2b@humanenginuity.com", "date": "2018-04-27T01:14:23Z"}, "message": "added DerefOption and DerefResult + tests to std", "tree": {"sha": "9242161e9d0f6ee69edbfb97f335cc029c561b99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9242161e9d0f6ee69edbfb97f335cc029c561b99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c2e3144a98f7a636fd6a33fce122121431ad9b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c2e3144a98f7a636fd6a33fce122121431ad9b4", "html_url": "https://github.com/rust-lang/rust/commit/4c2e3144a98f7a636fd6a33fce122121431ad9b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c2e3144a98f7a636fd6a33fce122121431ad9b4/comments", "author": {"login": "Xandkeeper", "id": 124085026, "node_id": "U_kgDOB2VjIg", "avatar_url": "https://avatars.githubusercontent.com/u/124085026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xandkeeper", "html_url": "https://github.com/Xandkeeper", "followers_url": "https://api.github.com/users/Xandkeeper/followers", "following_url": "https://api.github.com/users/Xandkeeper/following{/other_user}", "gists_url": "https://api.github.com/users/Xandkeeper/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xandkeeper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xandkeeper/subscriptions", "organizations_url": "https://api.github.com/users/Xandkeeper/orgs", "repos_url": "https://api.github.com/users/Xandkeeper/repos", "events_url": "https://api.github.com/users/Xandkeeper/events{/privacy}", "received_events_url": "https://api.github.com/users/Xandkeeper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xandkeeper", "id": 124085026, "node_id": "U_kgDOB2VjIg", "avatar_url": "https://avatars.githubusercontent.com/u/124085026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xandkeeper", "html_url": "https://github.com/Xandkeeper", "followers_url": "https://api.github.com/users/Xandkeeper/followers", "following_url": "https://api.github.com/users/Xandkeeper/following{/other_user}", "gists_url": "https://api.github.com/users/Xandkeeper/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xandkeeper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xandkeeper/subscriptions", "organizations_url": "https://api.github.com/users/Xandkeeper/orgs", "repos_url": "https://api.github.com/users/Xandkeeper/repos", "events_url": "https://api.github.com/users/Xandkeeper/events{/privacy}", "received_events_url": "https://api.github.com/users/Xandkeeper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f3444e1baf0d335b4bf379f845dbc28cdd0509c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3444e1baf0d335b4bf379f845dbc28cdd0509c", "html_url": "https://github.com/rust-lang/rust/commit/7f3444e1baf0d335b4bf379f845dbc28cdd0509c"}], "stats": {"total": 112, "additions": 109, "deletions": 3}, "files": [{"sha": "c3ef619d739c032eb00eed68c4a98f32e2eb0ae3", "filename": "src/libcore/option.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e3144a98f7a636fd6a33fce122121431ad9b4/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e3144a98f7a636fd6a33fce122121431ad9b4/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=4c2e3144a98f7a636fd6a33fce122121431ad9b4", "patch": "@@ -146,7 +146,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use iter::{FromIterator, FusedIterator, TrustedLen};\n-use {mem, ops};\n+use {mem, ops::{self, Deref}};\n \n // Note that this is not a lang item per se, but it has a hidden dependency on\n // `Iterator`, which is one. The compiler assumes that the `next` method of\n@@ -914,7 +914,6 @@ fn expect_failed(msg: &str) -> ! {\n     panic!(\"{}\", msg)\n }\n \n-\n /////////////////////////////////////////////////////////////////////////////\n // Trait implementations\n /////////////////////////////////////////////////////////////////////////////\n@@ -979,6 +978,24 @@ impl<T> From<T> for Option<T> {\n     }\n }\n \n+#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+/// Extension trait to get a reference of an Option via the Deref trait.\n+pub trait OptionDeref<T: Deref> {\n+    /// Converts from `&Option<T>` to `Option<&T::Target>`.\n+    ///\n+    /// Leaves the original Option in-place, creating a new one with a reference\n+    /// to the original one, additionally coercing the contents via `Deref`.\n+    fn deref(&self) -> Option<&T::Target>;\n+}\n+\n+#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+impl<T: Deref> OptionDeref<T> for Option<T>\n+{\n+    fn deref(&self) -> Option<&T::Target> {\n+        self.as_ref().map(|t| t.deref())\n+    }\n+}\n+\n /////////////////////////////////////////////////////////////////////////////\n // The Option Iterators\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "9877a2001a0ff2ad8267a239c69d79a3aae6b95a", "filename": "src/libcore/result.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e3144a98f7a636fd6a33fce122121431ad9b4/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e3144a98f7a636fd6a33fce122121431ad9b4/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=4c2e3144a98f7a636fd6a33fce122121431ad9b4", "patch": "@@ -242,7 +242,7 @@\n \n use fmt;\n use iter::{FromIterator, FusedIterator, TrustedLen};\n-use ops;\n+use ops::{self, Deref};\n \n /// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).\n ///\n@@ -999,6 +999,63 @@ impl<'a, T, E> IntoIterator for &'a mut Result<T, E> {\n     }\n }\n \n+#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+/// Extension trait to get a reference to a Result via the Deref trait.\n+pub trait ResultDeref<T, E> {\n+    /// Converts from `&Result<T, E>` to `Result<&T::Target, &E>`.\n+    ///\n+    /// Leaves the original Result in-place, creating a new one with a reference\n+    /// to the original one, additionally coercing the `Ok` arm of the Result via\n+    /// `Deref`.\n+    fn deref_ok(&self) -> Result<&T::Target, &E>\n+                where\n+                       T: Deref;\n+\n+    /// Converts from `&Result<T, E>` to `Result<&T, &E::Target>`.\n+    ///\n+    /// Leaves the original Result in-place, creating a new one with a reference\n+    /// to the original one, additionally coercing the `Err` arm of the Result via\n+    /// `Deref`.\n+    fn deref_err(&self) -> Result<&T, &E::Target>\n+                 where\n+                        E: Deref;\n+\n+    /// Converts from `&Result<T, E>` to `Result<&T::Target, &E::Target>`.\n+    ///\n+    /// Leaves the original Result in-place, creating a new one with a reference\n+    /// to the original one, additionally coercing both the `Ok` and `Err` arms\n+    /// of the Result via `Deref`.\n+    fn deref(&self) -> Result<&T::Target, &E::Target>\n+             where\n+                    T: Deref,\n+                    E: Deref;\n+}\n+\n+#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+impl<T, E> ResultDeref<T, E> for Result<T, E> {\n+    fn deref_ok(&self) -> Result<&T::Target, &E>\n+                where\n+                       T: Deref,\n+    {\n+        self.as_ref().map(|t| t.deref())\n+    }\n+\n+    fn deref_err(&self) -> Result<&T, &E::Target>\n+                 where\n+                        E: Deref,\n+    {\n+        self.as_ref().map_err(|e| e.deref())\n+    }\n+\n+    fn deref(&self) -> Result<&T::Target, &E::Target>\n+             where\n+                    T: Deref,\n+                    E: Deref,\n+    {\n+        self.as_ref().map(|t| t.deref()).map_err(|e| e.deref())\n+    }\n+}\n+\n /////////////////////////////////////////////////////////////////////////////\n // The Result Iterators\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "77d550c532a349b0393696753a6352e2fbe997a7", "filename": "src/libcore/tests/option.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e3144a98f7a636fd6a33fce122121431ad9b4/src%2Flibcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e3144a98f7a636fd6a33fce122121431ad9b4/src%2Flibcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Foption.rs?ref=4c2e3144a98f7a636fd6a33fce122121431ad9b4", "patch": "@@ -297,3 +297,14 @@ fn test_try() {\n     }\n     assert_eq!(try_option_err(), Err(NoneError));\n }\n+\n+#[test]\n+fn test_option_deref() {\n+    // Some: &Option<T: Deref>::Some(T) -> Option<&T::Deref::Target>::Some(&*T)\n+    let ref_option = &Some(&42);\n+    assert_eq!(ref_option.deref(), Some(&42));\n+\n+    // None: &Option<T: Deref>>::None -> None\n+    let ref_option = &None;\n+    assert_eq!(ref_option.deref(), None);\n+}"}, {"sha": "dd23467322dc95015fb441aa26d0ba5938d98fdd", "filename": "src/libcore/tests/result.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e3144a98f7a636fd6a33fce122121431ad9b4/src%2Flibcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e3144a98f7a636fd6a33fce122121431ad9b4/src%2Flibcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fresult.rs?ref=4c2e3144a98f7a636fd6a33fce122121431ad9b4", "patch": "@@ -231,3 +231,24 @@ fn test_try() {\n     }\n     assert_eq!(try_result_err(), Err(1));\n }\n+\n+#[test]\n+fn test_result_deref() {\n+    // Ok(T).deref_ok() -> Result<&T, &E::Deref::Target>::Ok(&T)\n+    let ref_ok: &Result<&i32, &u8> = &Ok(&42);\n+    assert_eq!(ref_ok.deref_ok(), Ok(&42));\n+    assert_eq!(ref_ok.deref_ok(), Ok(&42));\n+    assert_eq!(ref_ok.deref(), Ok(&42));\n+\n+    // Err(E) -> Result<&T, &E::Deref::Target>::Err(&*E)\n+    let ref_err: &Result<&i32, &u8> = &Err(&41);\n+    assert_eq!(ref_err.deref_err(), Err(&41));\n+    assert_eq!(ref_err.deref_err(), Err(&41));\n+    assert_eq!(ref_err.deref(), Err(&41));\n+\n+    // &Ok(T).deref_err() -> Result<&T, &E::Deref::Target>::Ok(&T)\n+    assert_eq!(ref_ok.deref_err(), Ok(&&42));\n+\n+    // &Err(E) -> Result<&T::Deref::Target, &E>::Err(&E)\n+    assert_eq!(ref_err.deref_ok(), Err(&&41));\n+}"}]}