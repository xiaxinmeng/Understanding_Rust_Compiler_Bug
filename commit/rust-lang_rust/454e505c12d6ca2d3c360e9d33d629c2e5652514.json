{"sha": "454e505c12d6ca2d3c360e9d33d629c2e5652514", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NGU1MDVjMTJkNmNhMmQzYzM2MGU5ZDMzZDYyOWMyZTU2NTI1MTQ=", "commit": {"author": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-23T04:32:13Z"}, "committer": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-24T06:20:34Z"}, "message": "Run rust-fix on tests", "tree": {"sha": "f2d04a701ffdf97827adedd1d240680827d9a0cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2d04a701ffdf97827adedd1d240680827d9a0cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/454e505c12d6ca2d3c360e9d33d629c2e5652514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/454e505c12d6ca2d3c360e9d33d629c2e5652514", "html_url": "https://github.com/rust-lang/rust/commit/454e505c12d6ca2d3c360e9d33d629c2e5652514", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/454e505c12d6ca2d3c360e9d33d629c2e5652514/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc706e3ba93be678852950fdef8cd10790aadfc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc706e3ba93be678852950fdef8cd10790aadfc4", "html_url": "https://github.com/rust-lang/rust/commit/bc706e3ba93be678852950fdef8cd10790aadfc4"}], "stats": {"total": 259, "additions": 205, "deletions": 54}, "files": [{"sha": "1f534e3705d838ebcd4200dd9bd0fc1fb3011347", "filename": "tests/ui/floating_point_exp.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Ffloating_point_exp.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Ffloating_point_exp.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_exp.fixed?ref=454e505c12d6ca2d3c360e9d33d629c2e5652514", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops)]\n+\n+fn main() {\n+    let x = 2f32;\n+    let _ = x.exp_m1();\n+    let _ = x.exp_m1() + 2.0;\n+    // Cases where the lint shouldn't be applied\n+    let _ = x.exp() - 2.0;\n+    let _ = x.exp() - 1.0 * 2.0;\n+\n+    let x = 2f64;\n+    let _ = x.exp_m1();\n+    let _ = x.exp_m1() + 2.0;\n+    // Cases where the lint shouldn't be applied\n+    let _ = x.exp() - 2.0;\n+    let _ = x.exp() - 1.0 * 2.0;\n+}"}, {"sha": "bed8d31214085110f57ffef1cb6a1fb0baa3e896", "filename": "tests/ui/floating_point_exp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Ffloating_point_exp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Ffloating_point_exp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_exp.rs?ref=454e505c12d6ca2d3c360e9d33d629c2e5652514", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n #![warn(clippy::suboptimal_flops)]\n \n fn main() {"}, {"sha": "7882b2c24e3aa87b3ff589d16db1e84b4a738d71", "filename": "tests/ui/floating_point_exp.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Ffloating_point_exp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Ffloating_point_exp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_exp.stderr?ref=454e505c12d6ca2d3c360e9d33d629c2e5652514", "patch": "@@ -1,25 +1,25 @@\n error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_exp.rs:5:13\n+  --> $DIR/floating_point_exp.rs:6:13\n    |\n LL |     let _ = x.exp() - 1.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n    |\n    = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n \n error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_exp.rs:6:13\n+  --> $DIR/floating_point_exp.rs:7:13\n    |\n LL |     let _ = x.exp() - 1.0 + 2.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n \n error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_exp.rs:12:13\n+  --> $DIR/floating_point_exp.rs:13:13\n    |\n LL |     let _ = x.exp() - 1.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n \n error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_exp.rs:13:13\n+  --> $DIR/floating_point_exp.rs:14:13\n    |\n LL |     let _ = x.exp() - 1.0 + 2.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`"}, {"sha": "ead45fc4a9f21f74d45e7f6fee0323dfd121ca06", "filename": "tests/ui/floating_point_log.fixed", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Ffloating_point_log.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Ffloating_point_log.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.fixed?ref=454e505c12d6ca2d3c360e9d33d629c2e5652514", "patch": "@@ -0,0 +1,58 @@\n+// run-rustfix\n+#![allow(dead_code, clippy::double_parens)]\n+#![warn(clippy::suboptimal_flops)]\n+\n+const TWO: f32 = 2.0;\n+const E: f32 = std::f32::consts::E;\n+\n+fn check_log_base() {\n+    let x = 1f32;\n+    let _ = x.log2();\n+    let _ = x.log10();\n+    let _ = x.ln();\n+    let _ = x.log2();\n+    let _ = x.ln();\n+\n+    let x = 1f64;\n+    let _ = x.log2();\n+    let _ = x.log10();\n+    let _ = x.ln();\n+}\n+\n+fn check_ln1p() {\n+    let x = 1f32;\n+    let _ = 2.0f32.ln_1p();\n+    let _ = 2.0f32.ln_1p();\n+    let _ = x.ln_1p();\n+    let _ = (x * 2.0).ln_1p();\n+    let _ = x.powi(2).ln_1p();\n+    let _ = (x.powi(2) * 2.0).ln_1p();\n+    let _ = ((std::f32::consts::E - 1.0)).ln_1p();\n+    let _ = x.ln_1p();\n+    let _ = x.powi(2).ln_1p();\n+    let _ = (x + 2.0).ln_1p();\n+    let _ = (x * 2.0).ln_1p();\n+    // Cases where the lint shouldn't be applied\n+    let _ = (1.0 + x + 2.0).ln();\n+    let _ = (x + 1.0 + 2.0).ln();\n+    let _ = (x + 1.0 * 2.0).ln();\n+    let _ = (1.0 + x - 2.0).ln();\n+\n+    let x = 1f64;\n+    let _ = 2.0f64.ln_1p();\n+    let _ = 2.0f64.ln_1p();\n+    let _ = x.ln_1p();\n+    let _ = (x * 2.0).ln_1p();\n+    let _ = x.powi(2).ln_1p();\n+    let _ = x.ln_1p();\n+    let _ = x.powi(2).ln_1p();\n+    let _ = (x + 2.0).ln_1p();\n+    let _ = (x * 2.0).ln_1p();\n+    // Cases where the lint shouldn't be applied\n+    let _ = (1.0 + x + 2.0).ln();\n+    let _ = (x + 1.0 + 2.0).ln();\n+    let _ = (x + 1.0 * 2.0).ln();\n+    let _ = (1.0 + x - 2.0).ln();\n+}\n+\n+fn main() {}"}, {"sha": "f888e1375dcf40cd9a37cd8c7b264e45b28dc16a", "filename": "tests/ui/floating_point_log.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Ffloating_point_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Ffloating_point_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.rs?ref=454e505c12d6ca2d3c360e9d33d629c2e5652514", "patch": "@@ -1,4 +1,5 @@\n-#![allow(dead_code)]\n+// run-rustfix\n+#![allow(dead_code, clippy::double_parens)]\n #![warn(clippy::suboptimal_flops)]\n \n const TWO: f32 = 2.0;"}, {"sha": "c8c32b61ca36fa2ccc32c77d59198ee4ad2b76f6", "filename": "tests/ui/floating_point_log.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Ffloating_point_log.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Ffloating_point_log.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.stderr?ref=454e505c12d6ca2d3c360e9d33d629c2e5652514", "patch": "@@ -1,169 +1,169 @@\n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_log.rs:9:13\n+  --> $DIR/floating_point_log.rs:10:13\n    |\n LL |     let _ = x.log(2f32);\n    |             ^^^^^^^^^^^ help: consider using: `x.log2()`\n    |\n    = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_log.rs:10:13\n+  --> $DIR/floating_point_log.rs:11:13\n    |\n LL |     let _ = x.log(10f32);\n    |             ^^^^^^^^^^^^ help: consider using: `x.log10()`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_log.rs:11:13\n+  --> $DIR/floating_point_log.rs:12:13\n    |\n LL |     let _ = x.log(std::f32::consts::E);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.ln()`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_log.rs:12:13\n+  --> $DIR/floating_point_log.rs:13:13\n    |\n LL |     let _ = x.log(TWO);\n    |             ^^^^^^^^^^ help: consider using: `x.log2()`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_log.rs:13:13\n+  --> $DIR/floating_point_log.rs:14:13\n    |\n LL |     let _ = x.log(E);\n    |             ^^^^^^^^ help: consider using: `x.ln()`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_log.rs:16:13\n+  --> $DIR/floating_point_log.rs:17:13\n    |\n LL |     let _ = x.log(2f64);\n    |             ^^^^^^^^^^^ help: consider using: `x.log2()`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_log.rs:17:13\n+  --> $DIR/floating_point_log.rs:18:13\n    |\n LL |     let _ = x.log(10f64);\n    |             ^^^^^^^^^^^^ help: consider using: `x.log10()`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_log.rs:18:13\n+  --> $DIR/floating_point_log.rs:19:13\n    |\n LL |     let _ = x.log(std::f64::consts::E);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.ln()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:23:13\n+  --> $DIR/floating_point_log.rs:24:13\n    |\n LL |     let _ = (1f32 + 2.).ln();\n    |             ^^^^^^^^^^^^^^^^ help: consider using: `2.0f32.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:24:13\n+  --> $DIR/floating_point_log.rs:25:13\n    |\n LL |     let _ = (1f32 + 2.0).ln();\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `2.0f32.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:25:13\n+  --> $DIR/floating_point_log.rs:26:13\n    |\n LL |     let _ = (1.0 + x).ln();\n    |             ^^^^^^^^^^^^^^ help: consider using: `x.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:26:13\n+  --> $DIR/floating_point_log.rs:27:13\n    |\n LL |     let _ = (1.0 + x * 2.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x * 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:27:13\n+  --> $DIR/floating_point_log.rs:28:13\n    |\n LL |     let _ = (1.0 + x.powi(2)).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:28:13\n+  --> $DIR/floating_point_log.rs:29:13\n    |\n LL |     let _ = (1.0 + x.powi(2) * 2.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x.powi(2) * 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:29:13\n+  --> $DIR/floating_point_log.rs:30:13\n    |\n LL |     let _ = (1.0 + (std::f32::consts::E - 1.0)).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `((std::f32::consts::E - 1.0)).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:30:13\n+  --> $DIR/floating_point_log.rs:31:13\n    |\n LL |     let _ = (x + 1.0).ln();\n    |             ^^^^^^^^^^^^^^ help: consider using: `x.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:31:13\n+  --> $DIR/floating_point_log.rs:32:13\n    |\n LL |     let _ = (x.powi(2) + 1.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:32:13\n+  --> $DIR/floating_point_log.rs:33:13\n    |\n LL |     let _ = (x + 2.0 + 1.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x + 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:33:13\n+  --> $DIR/floating_point_log.rs:34:13\n    |\n LL |     let _ = (x * 2.0 + 1.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x * 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:41:13\n+  --> $DIR/floating_point_log.rs:42:13\n    |\n LL |     let _ = (1f64 + 2.).ln();\n    |             ^^^^^^^^^^^^^^^^ help: consider using: `2.0f64.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:42:13\n+  --> $DIR/floating_point_log.rs:43:13\n    |\n LL |     let _ = (1f64 + 2.0).ln();\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `2.0f64.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:43:13\n+  --> $DIR/floating_point_log.rs:44:13\n    |\n LL |     let _ = (1.0 + x).ln();\n    |             ^^^^^^^^^^^^^^ help: consider using: `x.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:44:13\n+  --> $DIR/floating_point_log.rs:45:13\n    |\n LL |     let _ = (1.0 + x * 2.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x * 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:45:13\n+  --> $DIR/floating_point_log.rs:46:13\n    |\n LL |     let _ = (1.0 + x.powi(2)).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:46:13\n+  --> $DIR/floating_point_log.rs:47:13\n    |\n LL |     let _ = (x + 1.0).ln();\n    |             ^^^^^^^^^^^^^^ help: consider using: `x.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:47:13\n+  --> $DIR/floating_point_log.rs:48:13\n    |\n LL |     let _ = (x.powi(2) + 1.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:48:13\n+  --> $DIR/floating_point_log.rs:49:13\n    |\n LL |     let _ = (x + 2.0 + 1.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x + 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:49:13\n+  --> $DIR/floating_point_log.rs:50:13\n    |\n LL |     let _ = (x * 2.0 + 1.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x * 2.0).ln_1p()`"}, {"sha": "54d130a22beb37e609cb6ee9c2b6ba3bdf89fff7", "filename": "tests/ui/floating_point_powf.fixed", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Ffloating_point_powf.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Ffloating_point_powf.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.fixed?ref=454e505c12d6ca2d3c360e9d33d629c2e5652514", "patch": "@@ -0,0 +1,40 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops)]\n+\n+fn main() {\n+    let x = 3f32;\n+    let _ = x.exp2();\n+    let _ = 3.1f32.exp2();\n+    let _ = (-3.1f32).exp2();\n+    let _ = x.exp();\n+    let _ = 3.1f32.exp();\n+    let _ = (-3.1f32).exp();\n+    let _ = x.sqrt();\n+    let _ = x.cbrt();\n+    let _ = x.powi(2);\n+    let _ = x.powi(-2);\n+    let _ = x.powi(16_777_215);\n+    let _ = x.powi(-16_777_215);\n+    let _ = x.powf(2.1);\n+    let _ = x.powf(-2.1);\n+    let _ = x.powf(16_777_216.0);\n+    let _ = x.powf(-16_777_216.0);\n+\n+    let x = 3f64;\n+    let _ = x.exp2();\n+    let _ = 3.1f64.exp2();\n+    let _ = (-3.1f64).exp2();\n+    let _ = x.exp();\n+    let _ = 3.1f64.exp();\n+    let _ = (-3.1f64).exp();\n+    let _ = x.sqrt();\n+    let _ = x.cbrt();\n+    let _ = x.powi(2);\n+    let _ = x.powi(-2);\n+    let _ = x.powi(-2_147_483_648);\n+    let _ = x.powi(2_147_483_647);\n+    let _ = x.powf(2.1);\n+    let _ = x.powf(-2.1);\n+    let _ = x.powf(-2_147_483_649.0);\n+    let _ = x.powf(2_147_483_648.0);\n+}"}, {"sha": "c1b64d704cd61a45f9688d56e518dd6b297f70cf", "filename": "tests/ui/floating_point_powf.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Ffloating_point_powf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Ffloating_point_powf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.rs?ref=454e505c12d6ca2d3c360e9d33d629c2e5652514", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n #![warn(clippy::suboptimal_flops)]\n \n fn main() {\n@@ -12,8 +13,12 @@ fn main() {\n     let _ = x.powf(1.0 / 3.0);\n     let _ = x.powf(2.0);\n     let _ = x.powf(-2.0);\n+    let _ = x.powf(16_777_215.0);\n+    let _ = x.powf(-16_777_215.0);\n     let _ = x.powf(2.1);\n     let _ = x.powf(-2.1);\n+    let _ = x.powf(16_777_216.0);\n+    let _ = x.powf(-16_777_216.0);\n \n     let x = 3f64;\n     let _ = 2f64.powf(x);\n@@ -26,6 +31,10 @@ fn main() {\n     let _ = x.powf(1.0 / 3.0);\n     let _ = x.powf(2.0);\n     let _ = x.powf(-2.0);\n+    let _ = x.powf(-2_147_483_648.0);\n+    let _ = x.powf(2_147_483_647.0);\n     let _ = x.powf(2.1);\n     let _ = x.powf(-2.1);\n+    let _ = x.powf(-2_147_483_649.0);\n+    let _ = x.powf(2_147_483_648.0);\n }"}, {"sha": "2b912c5940ede2abf4c9961a6f62e7403f41e770", "filename": "tests/ui/floating_point_powf.stderr", "status": "modified", "additions": 45, "deletions": 21, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Ffloating_point_powf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Ffloating_point_powf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.stderr?ref=454e505c12d6ca2d3c360e9d33d629c2e5652514", "patch": "@@ -1,124 +1,148 @@\n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:5:13\n+  --> $DIR/floating_point_powf.rs:6:13\n    |\n LL |     let _ = 2f32.powf(x);\n    |             ^^^^^^^^^^^^ help: consider using: `x.exp2()`\n    |\n    = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:6:13\n+  --> $DIR/floating_point_powf.rs:7:13\n    |\n LL |     let _ = 2f32.powf(3.1);\n    |             ^^^^^^^^^^^^^^ help: consider using: `3.1f32.exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:7:13\n+  --> $DIR/floating_point_powf.rs:8:13\n    |\n LL |     let _ = 2f32.powf(-3.1);\n    |             ^^^^^^^^^^^^^^^ help: consider using: `(-3.1f32).exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:8:13\n+  --> $DIR/floating_point_powf.rs:9:13\n    |\n LL |     let _ = std::f32::consts::E.powf(x);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.exp()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:9:13\n+  --> $DIR/floating_point_powf.rs:10:13\n    |\n LL |     let _ = std::f32::consts::E.powf(3.1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `3.1f32.exp()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:10:13\n+  --> $DIR/floating_point_powf.rs:11:13\n    |\n LL |     let _ = std::f32::consts::E.powf(-3.1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(-3.1f32).exp()`\n \n error: square-root of a number can be computed more efficiently and accurately\n-  --> $DIR/floating_point_powf.rs:11:13\n+  --> $DIR/floating_point_powf.rs:12:13\n    |\n LL |     let _ = x.powf(1.0 / 2.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.sqrt()`\n \n error: cube-root of a number can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:12:13\n+  --> $DIR/floating_point_powf.rs:13:13\n    |\n LL |     let _ = x.powf(1.0 / 3.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.cbrt()`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:13:13\n+  --> $DIR/floating_point_powf.rs:14:13\n    |\n LL |     let _ = x.powf(2.0);\n    |             ^^^^^^^^^^^ help: consider using: `x.powi(2)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:14:13\n+  --> $DIR/floating_point_powf.rs:15:13\n    |\n LL |     let _ = x.powf(-2.0);\n    |             ^^^^^^^^^^^^ help: consider using: `x.powi(-2)`\n \n+error: exponentiation with integer powers can be computed more efficiently\n+  --> $DIR/floating_point_powf.rs:16:13\n+   |\n+LL |     let _ = x.powf(16_777_215.0);\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(16_777_215)`\n+\n+error: exponentiation with integer powers can be computed more efficiently\n+  --> $DIR/floating_point_powf.rs:17:13\n+   |\n+LL |     let _ = x.powf(-16_777_215.0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(-16_777_215)`\n+\n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:19:13\n+  --> $DIR/floating_point_powf.rs:24:13\n    |\n LL |     let _ = 2f64.powf(x);\n    |             ^^^^^^^^^^^^ help: consider using: `x.exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:20:13\n+  --> $DIR/floating_point_powf.rs:25:13\n    |\n LL |     let _ = 2f64.powf(3.1);\n    |             ^^^^^^^^^^^^^^ help: consider using: `3.1f64.exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:21:13\n+  --> $DIR/floating_point_powf.rs:26:13\n    |\n LL |     let _ = 2f64.powf(-3.1);\n    |             ^^^^^^^^^^^^^^^ help: consider using: `(-3.1f64).exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:22:13\n+  --> $DIR/floating_point_powf.rs:27:13\n    |\n LL |     let _ = std::f64::consts::E.powf(x);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.exp()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:23:13\n+  --> $DIR/floating_point_powf.rs:28:13\n    |\n LL |     let _ = std::f64::consts::E.powf(3.1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `3.1f64.exp()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:24:13\n+  --> $DIR/floating_point_powf.rs:29:13\n    |\n LL |     let _ = std::f64::consts::E.powf(-3.1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(-3.1f64).exp()`\n \n error: square-root of a number can be computed more efficiently and accurately\n-  --> $DIR/floating_point_powf.rs:25:13\n+  --> $DIR/floating_point_powf.rs:30:13\n    |\n LL |     let _ = x.powf(1.0 / 2.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.sqrt()`\n \n error: cube-root of a number can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:26:13\n+  --> $DIR/floating_point_powf.rs:31:13\n    |\n LL |     let _ = x.powf(1.0 / 3.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.cbrt()`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:27:13\n+  --> $DIR/floating_point_powf.rs:32:13\n    |\n LL |     let _ = x.powf(2.0);\n    |             ^^^^^^^^^^^ help: consider using: `x.powi(2)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:28:13\n+  --> $DIR/floating_point_powf.rs:33:13\n    |\n LL |     let _ = x.powf(-2.0);\n    |             ^^^^^^^^^^^^ help: consider using: `x.powi(-2)`\n \n-error: aborting due to 20 previous errors\n+error: exponentiation with integer powers can be computed more efficiently\n+  --> $DIR/floating_point_powf.rs:34:13\n+   |\n+LL |     let _ = x.powf(-2_147_483_648.0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(-2_147_483_648)`\n+\n+error: exponentiation with integer powers can be computed more efficiently\n+  --> $DIR/floating_point_powf.rs:35:13\n+   |\n+LL |     let _ = x.powf(2_147_483_647.0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2_147_483_647)`\n+\n+error: aborting due to 24 previous errors\n "}]}