{"sha": "9614238314821eff041a2fb38f1bf5acca5b24c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MTQyMzgzMTQ4MjFlZmYwNDFhMmZiMzhmMWJmNWFjY2E1YjI0YzM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-11T15:53:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-11T15:53:18Z"}, "message": "Rollup merge of #74116 - arlosi:aarch64build, r=pietroalbini\n\nFix cross compilation of LLVM to aarch64 Windows targets\n\nWhen cross-compiling, the LLVM build system recurses to build tools that need to run on the host system. However, since we pass cmake defines to set the compiler and target, LLVM still compiles these tools for the target system, rather than the host. The tools then fail to execute during the LLVM build.\n\nThis change sets defines for the tools that need to run on the host (llvm-nm, llvm-tablegen, and llvm-config), so that the LLVM build does not attempt to build them, and instead relies on the tools already built.\n\nIf compiling with clang-cl, adds the `--target` option to specify the target triple. MSVC compilers do not require this, since there is a separate compiler binary for each cross-compilation target.\n\nRelated issue: #72881\nRequires LLVM change: rust-lang/llvm-project#67", "tree": {"sha": "b6735d38f522573fe64c1f98f906833680d3c901", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6735d38f522573fe64c1f98f906833680d3c901"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9614238314821eff041a2fb38f1bf5acca5b24c3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfCeBuCRBK7hj4Ov3rIwAAdHIIAFrWzglpBIoWkGVeogSIuMJU\nROuvnMy/Getb66ripYkCLx8NwVCj2VXcFiSBw2/MdBGqiQHPhGh36yFACUfGzohw\nS/izMwZUZ36pJmv57x93YfbPSyDnLh5TprnP+mjmw6PxMfKV9zx/Nv/+TrIuPfu0\n5S9UxZzL2lR2/c5FYy4fUjLsfdARm47wuTB2S2aGQ6Dq3IGzSEPq2fS1CBoOZ4iV\nLXTae+fzcx/8SZa4Ujxx3BamcsDmJ3eR/Mkd0zWhGKAlqR8FO4B1/pihZdxpHcrc\nuH29bQNpTyaGPoYrsLfEqGJar5k7wHDSI0JN9y1VOPNeZPZWVgdo1E7dXPjtIXY=\n=p4eE\n-----END PGP SIGNATURE-----\n", "payload": "tree b6735d38f522573fe64c1f98f906833680d3c901\nparent 1979fa86f9fd8cc53384d2dabe775bcbf012a5ad\nparent 59f979fa06fed49e02606d4891b5b5e4fc545725\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594482798 -0700\ncommitter GitHub <noreply@github.com> 1594482798 -0700\n\nRollup merge of #74116 - arlosi:aarch64build, r=pietroalbini\n\nFix cross compilation of LLVM to aarch64 Windows targets\n\nWhen cross-compiling, the LLVM build system recurses to build tools that need to run on the host system. However, since we pass cmake defines to set the compiler and target, LLVM still compiles these tools for the target system, rather than the host. The tools then fail to execute during the LLVM build.\n\nThis change sets defines for the tools that need to run on the host (llvm-nm, llvm-tablegen, and llvm-config), so that the LLVM build does not attempt to build them, and instead relies on the tools already built.\n\nIf compiling with clang-cl, adds the `--target` option to specify the target triple. MSVC compilers do not require this, since there is a separate compiler binary for each cross-compilation target.\n\nRelated issue: #72881\nRequires LLVM change: rust-lang/llvm-project#67\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9614238314821eff041a2fb38f1bf5acca5b24c3", "html_url": "https://github.com/rust-lang/rust/commit/9614238314821eff041a2fb38f1bf5acca5b24c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9614238314821eff041a2fb38f1bf5acca5b24c3/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1979fa86f9fd8cc53384d2dabe775bcbf012a5ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/1979fa86f9fd8cc53384d2dabe775bcbf012a5ad", "html_url": "https://github.com/rust-lang/rust/commit/1979fa86f9fd8cc53384d2dabe775bcbf012a5ad"}, {"sha": "59f979fa06fed49e02606d4891b5b5e4fc545725", "url": "https://api.github.com/repos/rust-lang/rust/commits/59f979fa06fed49e02606d4891b5b5e4fc545725", "html_url": "https://github.com/rust-lang/rust/commit/59f979fa06fed49e02606d4891b5b5e4fc545725"}], "stats": {"total": 37, "additions": 26, "deletions": 11}, "files": [{"sha": "905f523aa53d666f67571b835d419e68ba8991bb", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9614238314821eff041a2fb38f1bf5acca5b24c3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9614238314821eff041a2fb38f1bf5acca5b24c3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9614238314821eff041a2fb38f1bf5acca5b24c3", "patch": "@@ -404,9 +404,9 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"cc\"\n-version = \"1.0.54\"\n+version = \"1.0.57\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7bbb73db36c1246e9034e307d0fba23f9a2e251faa47ade70c1bd252220c8311\"\n+checksum = \"0fde55d2a2bfaa4c9668bbc63f531fbdeee3ffe188f4662511ce2c22b3eedebe\"\n dependencies = [\n  \"jobserver\",\n ]"}, {"sha": "e8ec575ea37466379f6ab1e75ccc3134f5c22ddd", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9614238314821eff041a2fb38f1bf5acca5b24c3/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9614238314821eff041a2fb38f1bf5acca5b24c3/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=9614238314821eff041a2fb38f1bf5acca5b24c3", "patch": "@@ -9,6 +9,7 @@\n //! ensure that they're always in place if needed.\n \n use std::env;\n+use std::env::consts::EXE_EXTENSION;\n use std::ffi::OsString;\n use std::fs::{self, File};\n use std::io;\n@@ -252,8 +253,14 @@ impl Step for Llvm {\n             // FIXME: if the llvm root for the build triple is overridden then we\n             //        should use llvm-tblgen from there, also should verify that it\n             //        actually exists most of the time in normal installs of LLVM.\n-            let host = builder.llvm_out(builder.config.build).join(\"bin/llvm-tblgen\");\n-            cfg.define(\"CMAKE_CROSSCOMPILING\", \"True\").define(\"LLVM_TABLEGEN\", &host);\n+            let host_bin = builder.llvm_out(builder.config.build).join(\"bin\");\n+            cfg.define(\"CMAKE_CROSSCOMPILING\", \"True\");\n+            cfg.define(\"LLVM_TABLEGEN\", host_bin.join(\"llvm-tblgen\").with_extension(EXE_EXTENSION));\n+            cfg.define(\"LLVM_NM\", host_bin.join(\"llvm-nm\").with_extension(EXE_EXTENSION));\n+            cfg.define(\n+                \"LLVM_CONFIG_PATH\",\n+                host_bin.join(\"llvm-config\").with_extension(EXE_EXTENSION),\n+            );\n \n             if target.contains(\"netbsd\") {\n                 cfg.define(\"CMAKE_SYSTEM_NAME\", \"NetBSD\");\n@@ -262,8 +269,6 @@ impl Step for Llvm {\n             } else if target.contains(\"windows\") {\n                 cfg.define(\"CMAKE_SYSTEM_NAME\", \"Windows\");\n             }\n-\n-            cfg.define(\"LLVM_NATIVE_BUILD\", builder.llvm_out(builder.config.build).join(\"build\"));\n         }\n \n         if let Some(ref suffix) = builder.config.llvm_version_suffix {\n@@ -431,6 +436,9 @@ fn configure_cmake(\n             cflags.push_str(\" -miphoneos-version-min=10.0\");\n         }\n     }\n+    if builder.config.llvm_clang_cl.is_some() {\n+        cflags.push_str(&format!(\" --target={}\", target))\n+    }\n     cfg.define(\"CMAKE_C_FLAGS\", cflags);\n     let mut cxxflags = builder.cflags(target, GitRepo::Llvm).join(\" \");\n     if builder.config.llvm_static_stdcpp && !target.contains(\"msvc\") && !target.contains(\"netbsd\") {\n@@ -439,6 +447,9 @@ fn configure_cmake(\n     if let Some(ref s) = builder.config.llvm_cxxflags {\n         cxxflags.push_str(&format!(\" {}\", s));\n     }\n+    if builder.config.llvm_clang_cl.is_some() {\n+        cxxflags.push_str(&format!(\" --target={}\", target))\n+    }\n     cfg.define(\"CMAKE_CXX_FLAGS\", cxxflags);\n     if let Some(ar) = builder.ar(target) {\n         if ar.is_absolute() {\n@@ -484,7 +495,7 @@ impl Step for Lld {\n         run.builder.ensure(Lld { target: run.target });\n     }\n \n-    /// Compile LLVM for `target`.\n+    /// Compile LLD for `target`.\n     fn run(self, builder: &Builder<'_>) -> PathBuf {\n         if builder.config.dry_run {\n             return PathBuf::from(\"lld-out-dir-test-gen\");\n@@ -521,6 +532,7 @@ impl Step for Lld {\n         // can't build on a system where your paths require `\\` on Windows, but\n         // there's probably a lot of reasons you can't do that other than this.\n         let llvm_config_shim = env::current_exe().unwrap().with_file_name(\"llvm-config-wrapper\");\n+\n         cfg.out_dir(&out_dir)\n             .profile(\"Release\")\n             .env(\"LLVM_CONFIG_REAL\", &llvm_config)\n@@ -543,7 +555,10 @@ impl Step for Lld {\n         if target != builder.config.build {\n             cfg.env(\"LLVM_CONFIG_SHIM_REPLACE\", &builder.config.build)\n                 .env(\"LLVM_CONFIG_SHIM_REPLACE_WITH\", &target)\n-                .define(\"LLVM_TABLEGEN_EXE\", llvm_config.with_file_name(\"llvm-tblgen\"));\n+                .define(\n+                    \"LLVM_TABLEGEN_EXE\",\n+                    llvm_config.with_file_name(\"llvm-tblgen\").with_extension(EXE_EXTENSION),\n+                );\n         }\n \n         // Explicitly set C++ standard, because upstream doesn't do so\n@@ -595,8 +610,8 @@ impl Step for TestHelpers {\n         }\n \n         // We may have found various cross-compilers a little differently due to our\n-        // extra configuration, so inform gcc of these compilers. Note, though, that\n-        // on MSVC we still need gcc's detection of env vars (ugh).\n+        // extra configuration, so inform cc of these compilers. Note, though, that\n+        // on MSVC we still need cc's detection of env vars (ugh).\n         if !target.contains(\"msvc\") {\n             if let Some(ar) = builder.ar(target) {\n                 cfg.archiver(ar);"}, {"sha": "d134a53927fa033ae7e0f3e8ee872ff2dc71468d", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=9614238314821eff041a2fb38f1bf5acca5b24c3", "patch": "@@ -1 +1 @@\n-Subproject commit 6c040dd86ed62d38e585279027486e6efc42fb36\n+Subproject commit d134a53927fa033ae7e0f3e8ee872ff2dc71468d"}]}