{"sha": "06acf16cdb23dad19b9cf816a55df24d4084823c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YWNmMTZjZGIyM2RhZDE5YjljZjgxNmE1NWRmMjRkNDA4NDgyM2M=", "commit": {"author": {"name": "Scott A Carr", "email": "s.carr1024@gmail.com", "date": "2016-08-03T18:10:38Z"}, "committer": {"name": "Scott A Carr", "email": "s.carr1024@gmail.com", "date": "2016-08-03T18:10:38Z"}, "message": "reduce rightward drift, add precondition comment", "tree": {"sha": "c1a8fa5a637a3c011d0144e67073ca582d2c86f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1a8fa5a637a3c011d0144e67073ca582d2c86f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06acf16cdb23dad19b9cf816a55df24d4084823c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06acf16cdb23dad19b9cf816a55df24d4084823c", "html_url": "https://github.com/rust-lang/rust/commit/06acf16cdb23dad19b9cf816a55df24d4084823c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06acf16cdb23dad19b9cf816a55df24d4084823c/comments", "author": {"login": "scottcarr", "id": 472477, "node_id": "MDQ6VXNlcjQ3MjQ3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/472477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottcarr", "html_url": "https://github.com/scottcarr", "followers_url": "https://api.github.com/users/scottcarr/followers", "following_url": "https://api.github.com/users/scottcarr/following{/other_user}", "gists_url": "https://api.github.com/users/scottcarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottcarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottcarr/subscriptions", "organizations_url": "https://api.github.com/users/scottcarr/orgs", "repos_url": "https://api.github.com/users/scottcarr/repos", "events_url": "https://api.github.com/users/scottcarr/events{/privacy}", "received_events_url": "https://api.github.com/users/scottcarr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottcarr", "id": 472477, "node_id": "MDQ6VXNlcjQ3MjQ3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/472477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottcarr", "html_url": "https://github.com/scottcarr", "followers_url": "https://api.github.com/users/scottcarr/followers", "following_url": "https://api.github.com/users/scottcarr/following{/other_user}", "gists_url": "https://api.github.com/users/scottcarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottcarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottcarr/subscriptions", "organizations_url": "https://api.github.com/users/scottcarr/orgs", "repos_url": "https://api.github.com/users/scottcarr/repos", "events_url": "https://api.github.com/users/scottcarr/events{/privacy}", "received_events_url": "https://api.github.com/users/scottcarr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5908a32509ccbbc552179cd75d22c8ea20d4092", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5908a32509ccbbc552179cd75d22c8ea20d4092", "html_url": "https://github.com/rust-lang/rust/commit/d5908a32509ccbbc552179cd75d22c8ea20d4092"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "fccd4a607fdcf1cd2e9a520b7ee0efe7b2d5cecb", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/06acf16cdb23dad19b9cf816a55df24d4084823c/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06acf16cdb23dad19b9cf816a55df24d4084823c/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=06acf16cdb23dad19b9cf816a55df24d4084823c", "patch": "@@ -34,6 +34,8 @@ impl<'tcx> MirPass<'tcx> for Deaggregator {\n \n         // Do not trigger on constants.  Could be revised in future\n         if let MirSource::Fn(_) = source {} else { return; }\n+        // In fact, we might not want to trigger in other cases.\n+        // Ex: when we could use SROA.  See issue #35259\n \n         let mut curr: usize = 0;\n         for bb in mir.basic_blocks_mut() {\n@@ -90,21 +92,24 @@ fn get_aggregate_statement<'a, 'tcx, 'b>(curr: usize,\n     for i in curr..statements.len() {\n         let ref statement = statements[i];\n         let StatementKind::Assign(_, ref rhs) = statement.kind;\n-        if let &Rvalue::Aggregate(ref kind, ref operands) = rhs {\n-            if let &AggregateKind::Adt(adt_def, variant, _) = kind {\n-                if operands.len() > 0 { // don't deaggregate ()\n-                    if adt_def.variants.len() > 1 {\n-                        // only deaggrate structs for now\n-                        continue;\n-                    }\n-                    debug!(\"getting variant {:?}\", variant);\n-                    debug!(\"for adt_def {:?}\", adt_def);\n-                    let variant_def = &adt_def.variants[variant];\n-                    if variant_def.kind == VariantKind::Struct {\n-                        return Some(i);\n-                    }\n-                }\n-            }\n+        let (kind, operands) = match rhs {\n+            &Rvalue::Aggregate(ref kind, ref operands) => (kind, operands),\n+            _ => continue,\n+        };\n+        let (adt_def, variant) = match kind {\n+            &AggregateKind::Adt(adt_def, variant, _) => (adt_def, variant),\n+            _ => continue,\n+        };\n+        if operands.len() == 0 || adt_def.variants.len() > 1 {\n+            // don't deaggregate ()\n+            // don't deaggregate enums ... for now\n+            continue;\n+        }\n+        debug!(\"getting variant {:?}\", variant);\n+        debug!(\"for adt_def {:?}\", adt_def);\n+        let variant_def = &adt_def.variants[variant];\n+        if variant_def.kind == VariantKind::Struct {\n+            return Some(i);\n         }\n     };\n     None"}]}