{"sha": "cfb2e2acd72c651f97f285a86956f3f01a461a2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYjJlMmFjZDcyYzY1MWY5N2YyODVhODY5NTZmM2YwMWE0NjFhMmQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-02T11:33:07Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-06T12:21:01Z"}, "message": "num: remove deprecated functionality.", "tree": {"sha": "ccfdc9cf2f2f2baefb6d96a56b60186c38d56a1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccfdc9cf2f2f2baefb6d96a56b60186c38d56a1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfb2e2acd72c651f97f285a86956f3f01a461a2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb2e2acd72c651f97f285a86956f3f01a461a2d", "html_url": "https://github.com/rust-lang/rust/commit/cfb2e2acd72c651f97f285a86956f3f01a461a2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfb2e2acd72c651f97f285a86956f3f01a461a2d/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "340ac040f7603e169a3739c65956ed2213622be5", "url": "https://api.github.com/repos/rust-lang/rust/commits/340ac040f7603e169a3739c65956ed2213622be5", "html_url": "https://github.com/rust-lang/rust/commit/340ac040f7603e169a3739c65956ed2213622be5"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "87973eacc665b9e1423835b2d773cfdaf382d7c3", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cfb2e2acd72c651f97f285a86956f3f01a461a2d/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb2e2acd72c651f97f285a86956f3f01a461a2d/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=cfb2e2acd72c651f97f285a86956f3f01a461a2d", "patch": "@@ -1248,18 +1248,6 @@ pub trait Float\n     /// Returns the `1` value.\n     fn one() -> Self;\n \n-    /// Returns true if this value is NaN and false otherwise.\n-    fn is_nan(self) -> bool;\n-    /// Returns true if this value is positive infinity or negative infinity and\n-    /// false otherwise.\n-    fn is_infinite(self) -> bool;\n-    /// Returns true if this number is neither infinite nor NaN.\n-    fn is_finite(self) -> bool;\n-    /// Returns true if this number is neither zero, infinite, denormal, or NaN.\n-    fn is_normal(self) -> bool;\n-    /// Returns the category that this number falls into.\n-    fn classify(self) -> FpCategory;\n-\n     // FIXME (#5527): These should be associated constants\n \n     /// Returns the number of binary digits of mantissa that this type supports.\n@@ -1283,6 +1271,18 @@ pub trait Float\n     /// Returns the largest finite value that this type can represent.\n     fn max_value() -> Self;\n \n+    /// Returns true if this value is NaN and false otherwise.\n+    fn is_nan(self) -> bool;\n+    /// Returns true if this value is positive infinity or negative infinity and\n+    /// false otherwise.\n+    fn is_infinite(self) -> bool;\n+    /// Returns true if this number is neither infinite nor NaN.\n+    fn is_finite(self) -> bool;\n+    /// Returns true if this number is neither zero, infinite, denormal, or NaN.\n+    fn is_normal(self) -> bool;\n+    /// Returns the category that this number falls into.\n+    fn classify(self) -> FpCategory;\n+\n     /// Returns the mantissa, exponent and sign as integers, respectively.\n     fn integer_decode(self) -> (u64, i16, i8);\n "}, {"sha": "98e3bf2f6ba91db36c3d13a910912480c18bbe30", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfb2e2acd72c651f97f285a86956f3f01a461a2d/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb2e2acd72c651f97f285a86956f3f01a461a2d/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=cfb2e2acd72c651f97f285a86956f3f01a461a2d", "patch": "@@ -112,8 +112,6 @@ pub trait FloatMath: Float {\n     fn atanh(self) -> Self;\n }\n \n-// DEPRECATED\n-\n /// Helper function for testing numeric operations\n #[cfg(test)]\n pub fn test_num<T>(ten: T, two: T) where"}, {"sha": "4ce15491a0e539dd6bb7be481f171b994083521c", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfb2e2acd72c651f97f285a86956f3f01a461a2d/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb2e2acd72c651f97f285a86956f3f01a461a2d/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=cfb2e2acd72c651f97f285a86956f3f01a461a2d", "patch": "@@ -14,8 +14,6 @@\n \n macro_rules! uint_module { ($T:ty) => (\n \n-// String conversion functions and impl num -> str\n-\n #[cfg(test)]\n mod tests {\n     use prelude::v1::*;"}]}