{"sha": "de73e52f5701e754a4e9a5b2c2377d2b4ba834eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNzNlNTJmNTcwMWU3NTRhNGU5YTViMmMyMzc3ZDJiNGJhODM0ZWI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-01-14T17:40:40Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-01-15T03:35:40Z"}, "message": "Add doc examples & description in `std::os::unix::ffi`.", "tree": {"sha": "29c7eba8382e43c7a74227e488fcb780a66f69bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29c7eba8382e43c7a74227e488fcb780a66f69bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de73e52f5701e754a4e9a5b2c2377d2b4ba834eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de73e52f5701e754a4e9a5b2c2377d2b4ba834eb", "html_url": "https://github.com/rust-lang/rust/commit/de73e52f5701e754a4e9a5b2c2377d2b4ba834eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de73e52f5701e754a4e9a5b2c2377d2b4ba834eb/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef04fc82b198487b0ffb1832304714519f9f1a35", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef04fc82b198487b0ffb1832304714519f9f1a35", "html_url": "https://github.com/rust-lang/rust/commit/ef04fc82b198487b0ffb1832304714519f9f1a35"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "fb9984ccbdda5f63444ead83602afbe6e3f384a3", "filename": "src/libstd/sys/unix/ext/ffi.rs", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/de73e52f5701e754a4e9a5b2c2377d2b4ba834eb/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de73e52f5701e754a4e9a5b2c2377d2b4ba834eb/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs?ref=de73e52f5701e754a4e9a5b2c2377d2b4ba834eb", "patch": "@@ -20,11 +20,38 @@ use sys_common::{FromInner, IntoInner, AsInner};\n /// Unix-specific extensions to `OsString`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStringExt {\n-    /// Creates an `OsString` from a byte vector.\n+    /// Creates an [`OsString`] from a byte vector.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    /// use std::os::unix::ffi::OsStringExt;\n+    ///\n+    /// let bytes = b\"foo\".to_vec();\n+    /// let os_string = OsString::from_vec(bytes);\n+    /// assert_eq!(os_string.to_str(), Some(\"foo\"));\n+    /// ```\n+    ///\n+    /// [`OsString`]: ../../../ffi/struct.OsString.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn from_vec(vec: Vec<u8>) -> Self;\n \n-    /// Yields the underlying byte vector of this `OsString`.\n+    /// Yields the underlying byte vector of this [`OsString`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    /// use std::os::unix::ffi::OsStringExt;\n+    ///\n+    /// let mut os_string = OsString::new();\n+    /// os_string.push(\"foo\");\n+    /// let bytes = os_string.into_vec();\n+    /// assert_eq!(bytes, b\"foo\");\n+    /// ```\n+    ///\n+    /// [`OsString`]: ../../../ffi/struct.OsString.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn into_vec(self) -> Vec<u8>;\n }\n@@ -43,9 +70,36 @@ impl OsStringExt for OsString {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStrExt {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    /// Creates an [`OsStr`] from a byte slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsStr;\n+    /// use std::os::unix::ffi::OsStrExt;\n+    ///\n+    /// let bytes = b\"foo\";\n+    /// let os_str = OsStr::from_bytes(bytes);\n+    /// assert_eq!(os_str.to_str(), Some(\"foo\"));\n+    /// ```\n+    ///\n+    /// [`OsStr`]: ../../../ffi/struct.OsStr.html\n     fn from_bytes(slice: &[u8]) -> &Self;\n \n-    /// Gets the underlying byte view of the `OsStr` slice.\n+    /// Gets the underlying byte view of the [`OsStr`] slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsStr;\n+    /// use std::os::unix::ffi::OsStrExt;\n+    ///\n+    /// let mut os_str = OsStr::new(\"foo\");\n+    /// let bytes = os_str.as_bytes();\n+    /// assert_eq!(bytes, b\"foo\");\n+    /// ```\n+    ///\n+    /// [`OsStr`]: ../../../ffi/struct.OsStr.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn as_bytes(&self) -> &[u8];\n }"}]}