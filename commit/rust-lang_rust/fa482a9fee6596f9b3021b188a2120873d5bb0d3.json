{"sha": "fa482a9fee6596f9b3021b188a2120873d5bb0d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNDgyYTlmZWU2NTk2ZjliMzAyMWIxODhhMjEyMDg3M2Q1YmIwZDM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-17T17:03:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-17T17:03:48Z"}, "message": "Move interesting stuff to main", "tree": {"sha": "92296cf90c8519a245d0bbc61b021a790390d7f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92296cf90c8519a245d0bbc61b021a790390d7f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa482a9fee6596f9b3021b188a2120873d5bb0d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa482a9fee6596f9b3021b188a2120873d5bb0d3", "html_url": "https://github.com/rust-lang/rust/commit/fa482a9fee6596f9b3021b188a2120873d5bb0d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa482a9fee6596f9b3021b188a2120873d5bb0d3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a51b2603f993dd02275d275d37bbd0a0f24dbe33", "url": "https://api.github.com/repos/rust-lang/rust/commits/a51b2603f993dd02275d275d37bbd0a0f24dbe33", "html_url": "https://github.com/rust-lang/rust/commit/a51b2603f993dd02275d275d37bbd0a0f24dbe33"}], "stats": {"total": 75, "additions": 35, "deletions": 40}, "files": [{"sha": "f952d0f6cecf5c0282e9b8ef58b09652b3d2a718", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 35, "deletions": 40, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/fa482a9fee6596f9b3021b188a2120873d5bb0d3/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa482a9fee6596f9b3021b188a2120873d5bb0d3/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=fa482a9fee6596f9b3021b188a2120873d5bb0d3", "patch": "@@ -18,7 +18,41 @@ fn main() -> Result<()> {\n     env_logger::try_init()?;\n \n     let command = Command::from_args()?;\n-    command.run()?;\n+    match command {\n+        Command::Parse { no_dump } => {\n+            let _p = profile(\"parsing\");\n+            let file = file()?;\n+            if !no_dump {\n+                println!(\"{:#?}\", file.syntax());\n+            }\n+            std::mem::forget(file);\n+        }\n+        Command::Symbols => {\n+            let file = file()?;\n+            for s in file_structure(&file) {\n+                println!(\"{:?}\", s);\n+            }\n+        }\n+        Command::Highlight { rainbow } => {\n+            let (analysis, file_id) = Analysis::from_single_file(read_stdin()?);\n+            let html = analysis.highlight_as_html(file_id, rainbow).unwrap();\n+            println!(\"{}\", html);\n+        }\n+        Command::Stats { verbosity, randomize, memory_usage, only, with_deps, path } => {\n+            analysis_stats::run(\n+                verbosity,\n+                memory_usage,\n+                path.as_ref(),\n+                only.as_ref().map(String::as_ref),\n+                with_deps,\n+                randomize,\n+            )?;\n+        }\n+        Command::Bench { verbose, path, op } => {\n+            analysis_bench::run(verbose, path.as_ref(), op)?;\n+        }\n+        Command::HelpPrinted => (),\n+    }\n \n     Ok(())\n }\n@@ -246,45 +280,6 @@ SUBCOMMANDS:\n         };\n         Ok(command)\n     }\n-\n-    fn run(self) -> Result<()> {\n-        match self {\n-            Command::Parse { no_dump } => {\n-                let _p = profile(\"parsing\");\n-                let file = file()?;\n-                if !no_dump {\n-                    println!(\"{:#?}\", file.syntax());\n-                }\n-                std::mem::forget(file);\n-            }\n-            Command::Symbols => {\n-                let file = file()?;\n-                for s in file_structure(&file) {\n-                    println!(\"{:?}\", s);\n-                }\n-            }\n-            Command::Highlight { rainbow } => {\n-                let (analysis, file_id) = Analysis::from_single_file(read_stdin()?);\n-                let html = analysis.highlight_as_html(file_id, rainbow).unwrap();\n-                println!(\"{}\", html);\n-            }\n-            Command::Stats { verbosity, randomize, memory_usage, only, with_deps, path } => {\n-                analysis_stats::run(\n-                    verbosity,\n-                    memory_usage,\n-                    path.as_ref(),\n-                    only.as_ref().map(String::as_ref),\n-                    with_deps,\n-                    randomize,\n-                )?;\n-            }\n-            Command::Bench { verbose, path, op } => {\n-                analysis_bench::run(verbose, path.as_ref(), op)?;\n-            }\n-            Command::HelpPrinted => (),\n-        }\n-        Ok(())\n-    }\n }\n \n fn handle_extra_flags(e: pico_args::Error) -> Result<()> {"}]}