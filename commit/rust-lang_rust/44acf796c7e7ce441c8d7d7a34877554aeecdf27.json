{"sha": "44acf796c7e7ce441c8d7d7a34877554aeecdf27", "node_id": "C_kwDOAAsO6NoAKDQ0YWNmNzk2YzdlN2NlNDQxYzhkN2Q3YTM0ODc3NTU0YWVlY2RmMjc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-05T21:48:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-05T21:48:00Z"}, "message": "Rollup merge of #112318 - oli-obk:assoc_ty_sized_bound_for_object_safety, r=compiler-errors\n\nMerge method, type and const object safety checks\n\ncc `@spastorino` and `@compiler-errors` on the first commit. I believe it to be correct, as the field is only `Some` for assoc types, so just checking the field without checking the assoc kind to be `Type` is fine.\n\nThe second commit avoids going through all associated items thrice and just goes over all of them once, running the object safety checks per assoc item kind.", "tree": {"sha": "2847a37c3c19cd80ff49d260fdf2cf0e958e9b04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2847a37c3c19cd80ff49d260fdf2cf0e958e9b04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44acf796c7e7ce441c8d7d7a34877554aeecdf27", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkflgQCRBK7hj4Ov3rIwAAFeAIAJlibuvFbZjVrqI96grofMc+\no13XWtznABQXQQOasn6ZxWnWzN6eRTlD5Iv+8Z+0vCabNduHILMnX2/FUeyTvDAX\nwmqmJbdcC9Ee66F2stipktpcwUvLLkvSZ6shpkO2EaQ1a6IXTL29uHpYaZ8C/dtC\nLAUHKW7DWeToH7dFNLNevHtQ0IiugJPThiJKbiKYEurEzGXKoApORNCQOF5j74nD\nkFTZgSyqw7pbu6qnIS3k46dlINc21St/YbVDCpeE6EhTD+9AkDO1GXjoS2YAnGrc\n9fVw868Z2z2Wbg/E/1oy5vmnKAROEo7YkrnUfZQJpW2yE6zLLFh66AYEQuu2a3M=\n=TyCK\n-----END PGP SIGNATURE-----\n", "payload": "tree 2847a37c3c19cd80ff49d260fdf2cf0e958e9b04\nparent 0ff5a6ee57d866c005b4ab8ba13c904e4211c5be\nparent 58972d19e7ba591321d6e67d32080a5e5a78e19a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686001680 +0200\ncommitter GitHub <noreply@github.com> 1686001680 +0200\n\nRollup merge of #112318 - oli-obk:assoc_ty_sized_bound_for_object_safety, r=compiler-errors\n\nMerge method, type and const object safety checks\n\ncc `@spastorino` and `@compiler-errors` on the first commit. I believe it to be correct, as the field is only `Some` for assoc types, so just checking the field without checking the assoc kind to be `Type` is fine.\n\nThe second commit avoids going through all associated items thrice and just goes over all of them once, running the object safety checks per assoc item kind.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44acf796c7e7ce441c8d7d7a34877554aeecdf27", "html_url": "https://github.com/rust-lang/rust/commit/44acf796c7e7ce441c8d7d7a34877554aeecdf27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44acf796c7e7ce441c8d7d7a34877554aeecdf27/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ff5a6ee57d866c005b4ab8ba13c904e4211c5be", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff5a6ee57d866c005b4ab8ba13c904e4211c5be", "html_url": "https://github.com/rust-lang/rust/commit/0ff5a6ee57d866c005b4ab8ba13c904e4211c5be"}, {"sha": "58972d19e7ba591321d6e67d32080a5e5a78e19a", "url": "https://api.github.com/repos/rust-lang/rust/commits/58972d19e7ba591321d6e67d32080a5e5a78e19a", "html_url": "https://github.com/rust-lang/rust/commit/58972d19e7ba591321d6e67d32080a5e5a78e19a"}], "stats": {"total": 106, "additions": 51, "deletions": 55}, "files": [{"sha": "95517f01414751db734c963b4c162121b9e993d3", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44acf796c7e7ce441c8d7d7a34877554aeecdf27/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44acf796c7e7ce441c8d7d7a34877554aeecdf27/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=44acf796c7e7ce441c8d7d7a34877554aeecdf27", "patch": "@@ -1601,7 +1601,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             tcx.associated_items(pred.def_id())\n                                 .in_definition_order()\n                                 .filter(|item| item.kind == ty::AssocKind::Type)\n-                                .filter(|item| tcx.opt_rpitit_info(item.def_id).is_none())\n+                                .filter(|item| item.opt_rpitit_info.is_none())\n                                 .map(|item| item.def_id),\n                         );\n                     }\n@@ -1643,6 +1643,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n         }\n \n+        // `dyn Trait<Assoc = Foo>` desugars to (not Rust syntax) `dyn Trait where <Self as Trait>::Assoc = Foo`.\n+        // So every `Projection` clause is an `Assoc = Foo` bound. `associated_types` contains all associated\n+        // types's `DefId`, so the following loop removes all the `DefIds` of the associated types that have a\n+        // corresponding `Projection` clause\n         for (projection_bound, _) in &projection_bounds {\n             for def_ids in associated_types.values_mut() {\n                 def_ids.remove(&projection_bound.projection_def_id());"}, {"sha": "d95862420da11c717552b403fd233f80d2122b00", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44acf796c7e7ce441c8d7d7a34877554aeecdf27/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44acf796c7e7ce441c8d7d7a34877554aeecdf27/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=44acf796c7e7ce441c8d7d7a34877554aeecdf27", "patch": "@@ -1216,7 +1216,7 @@ fn compare_number_of_generics<'tcx>(\n     // has mismatched type or const generic arguments, then the method that it's\n     // inheriting the generics from will also have mismatched arguments, and\n     // we'll report an error for that instead. Delay a bug for safety, though.\n-    if tcx.opt_rpitit_info(trait_.def_id).is_some() {\n+    if trait_.opt_rpitit_info.is_some() {\n         return Err(tcx.sess.delay_span_bug(\n             rustc_span::DUMMY_SP,\n             \"errors comparing numbers of generics of trait/impl functions were not emitted\",\n@@ -2006,7 +2006,7 @@ pub(super) fn check_type_bounds<'tcx>(\n     // A synthetic impl Trait for RPITIT desugaring has no HIR, which we currently use to get the\n     // span for an impl's associated type. Instead, for these, use the def_span for the synthesized\n     // associated type.\n-    let impl_ty_span = if tcx.opt_rpitit_info(impl_ty.def_id).is_some() {\n+    let impl_ty_span = if impl_ty.opt_rpitit_info.is_some() {\n         tcx.def_span(impl_ty_def_id)\n     } else {\n         match tcx.hir().get_by_def_id(impl_ty_def_id) {"}, {"sha": "c9e74896ac08e252987770393a75b8e78d33e2b0", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44acf796c7e7ce441c8d7d7a34877554aeecdf27/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44acf796c7e7ce441c8d7d7a34877554aeecdf27/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=44acf796c7e7ce441c8d7d7a34877554aeecdf27", "patch": "@@ -188,7 +188,7 @@ fn missing_items_err(\n     full_impl_span: Span,\n ) {\n     let missing_items =\n-        missing_items.iter().filter(|trait_item| tcx.opt_rpitit_info(trait_item.def_id).is_none());\n+        missing_items.iter().filter(|trait_item| trait_item.opt_rpitit_info.is_none());\n \n     let missing_items_msg = missing_items\n         .clone()"}, {"sha": "b2771915eef8e1a7068a1439c60e99832131f392", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 43, "deletions": 51, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/44acf796c7e7ce441c8d7d7a34877554aeecdf27/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44acf796c7e7ce441c8d7d7a34877554aeecdf27/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=44acf796c7e7ce441c8d7d7a34877554aeecdf27", "patch": "@@ -115,15 +115,11 @@ fn object_safety_violations_for_trait(\n     tcx: TyCtxt<'_>,\n     trait_def_id: DefId,\n ) -> Vec<ObjectSafetyViolation> {\n-    // Check methods for violations.\n+    // Check assoc items for violations.\n     let mut violations: Vec<_> = tcx\n         .associated_items(trait_def_id)\n         .in_definition_order()\n-        .filter(|item| item.kind == ty::AssocKind::Fn)\n-        .filter_map(|&item| {\n-            object_safety_violation_for_method(tcx, trait_def_id, item)\n-                .map(|(code, span)| ObjectSafetyViolation::Method(item.name, code, span))\n-        })\n+        .filter_map(|&item| object_safety_violation_for_assoc_item(tcx, trait_def_id, item))\n         .collect();\n \n     // Check the trait itself.\n@@ -145,30 +141,6 @@ fn object_safety_violations_for_trait(\n         violations.push(ObjectSafetyViolation::SupertraitNonLifetimeBinder(spans));\n     }\n \n-    violations.extend(\n-        tcx.associated_items(trait_def_id)\n-            .in_definition_order()\n-            .filter(|item| item.kind == ty::AssocKind::Const)\n-            .map(|item| {\n-                let ident = item.ident(tcx);\n-                ObjectSafetyViolation::AssocConst(ident.name, ident.span)\n-            }),\n-    );\n-\n-    if !tcx.features().generic_associated_types_extended {\n-        violations.extend(\n-            tcx.associated_items(trait_def_id)\n-                .in_definition_order()\n-                .filter(|item| item.kind == ty::AssocKind::Type)\n-                .filter(|item| !tcx.generics_of(item.def_id).params.is_empty())\n-                .filter(|item| tcx.opt_rpitit_info(item.def_id).is_none())\n-                .map(|item| {\n-                    let ident = item.ident(tcx);\n-                    ObjectSafetyViolation::GAT(ident.name, ident.span)\n-                }),\n-        );\n-    }\n-\n     debug!(\n         \"object_safety_violations_for_trait(trait_def_id={:?}) = {:?}\",\n         trait_def_id, violations\n@@ -401,34 +373,54 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     })\n }\n \n-/// Returns `Some(_)` if this method makes the containing trait not object safe.\n-fn object_safety_violation_for_method(\n+/// Returns `Some(_)` if this item makes the containing trait not object safe.\n+#[instrument(level = \"debug\", skip(tcx), ret)]\n+fn object_safety_violation_for_assoc_item(\n     tcx: TyCtxt<'_>,\n     trait_def_id: DefId,\n-    method: ty::AssocItem,\n-) -> Option<(MethodViolationCode, Span)> {\n-    debug!(\"object_safety_violation_for_method({:?}, {:?})\", trait_def_id, method);\n-    // Any method that has a `Self : Sized` requisite is otherwise\n+    item: ty::AssocItem,\n+) -> Option<ObjectSafetyViolation> {\n+    // Any item that has a `Self : Sized` requisite is otherwise\n     // exempt from the regulations.\n-    if generics_require_sized_self(tcx, method.def_id) {\n+    if generics_require_sized_self(tcx, item.def_id) {\n         return None;\n     }\n \n-    let violation = virtual_call_violation_for_method(tcx, trait_def_id, method);\n-    // Get an accurate span depending on the violation.\n-    violation.map(|v| {\n-        let node = tcx.hir().get_if_local(method.def_id);\n-        let span = match (&v, node) {\n-            (MethodViolationCode::ReferencesSelfInput(Some(span)), _) => *span,\n-            (MethodViolationCode::UndispatchableReceiver(Some(span)), _) => *span,\n-            (MethodViolationCode::ReferencesImplTraitInTrait(span), _) => *span,\n-            (MethodViolationCode::ReferencesSelfOutput, Some(node)) => {\n-                node.fn_decl().map_or(method.ident(tcx).span, |decl| decl.output.span())\n+    match item.kind {\n+        // Associated consts are never object safe, as they can't have `where` bounds yet at all,\n+        // and associated const bounds in trait objects aren't a thing yet either.\n+        ty::AssocKind::Const => {\n+            Some(ObjectSafetyViolation::AssocConst(item.name, item.ident(tcx).span))\n+        }\n+        ty::AssocKind::Fn => virtual_call_violation_for_method(tcx, trait_def_id, item).map(|v| {\n+            let node = tcx.hir().get_if_local(item.def_id);\n+            // Get an accurate span depending on the violation.\n+            let span = match (&v, node) {\n+                (MethodViolationCode::ReferencesSelfInput(Some(span)), _) => *span,\n+                (MethodViolationCode::UndispatchableReceiver(Some(span)), _) => *span,\n+                (MethodViolationCode::ReferencesImplTraitInTrait(span), _) => *span,\n+                (MethodViolationCode::ReferencesSelfOutput, Some(node)) => {\n+                    node.fn_decl().map_or(item.ident(tcx).span, |decl| decl.output.span())\n+                }\n+                _ => item.ident(tcx).span,\n+            };\n+\n+            ObjectSafetyViolation::Method(item.name, v, span)\n+        }),\n+        // Associated types can only be object safe if they have `Self: Sized` bounds.\n+        ty::AssocKind::Type => {\n+            if !tcx.features().generic_associated_types_extended\n+                && !tcx.generics_of(item.def_id).params.is_empty()\n+                && item.opt_rpitit_info.is_none()\n+            {\n+                Some(ObjectSafetyViolation::GAT(item.name, item.ident(tcx).span))\n+            } else {\n+                // We will permit associated types if they are explicitly mentioned in the trait object.\n+                // We can't check this here, as here we only check if it is guaranteed to not be possible.\n+                None\n             }\n-            _ => method.ident(tcx).span,\n-        };\n-        (v, span)\n-    })\n+        }\n+    }\n }\n \n /// Returns `Some(_)` if this method cannot be called on a trait"}]}