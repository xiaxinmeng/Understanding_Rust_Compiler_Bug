{"sha": "9c15a6606eff9c5821921f5cb6be305ccf8005de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMTVhNjYwNmVmZjljNTgyMTkyMWY1Y2I2YmUzMDVjY2Y4MDA1ZGU=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-07-04T01:09:00Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-07-12T17:13:41Z"}, "message": "Ensure StorageDead is created even if variable initialization fails", "tree": {"sha": "4ec4bece204a423f4f5b668116c8070abc226ca8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ec4bece204a423f4f5b668116c8070abc226ca8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c15a6606eff9c5821921f5cb6be305ccf8005de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c15a6606eff9c5821921f5cb6be305ccf8005de", "html_url": "https://github.com/rust-lang/rust/commit/9c15a6606eff9c5821921f5cb6be305ccf8005de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c15a6606eff9c5821921f5cb6be305ccf8005de/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb97bb50d1da7b7cafdaf83797f3514279f80421", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb97bb50d1da7b7cafdaf83797f3514279f80421", "html_url": "https://github.com/rust-lang/rust/commit/fb97bb50d1da7b7cafdaf83797f3514279f80421"}], "stats": {"total": 290, "additions": 246, "deletions": 44}, "files": [{"sha": "a1cea9259f698da7d3b9b56c245820582a3c4c8f", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c15a6606eff9c5821921f5cb6be305ccf8005de/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c15a6606eff9c5821921f5cb6be305ccf8005de/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=9c15a6606eff9c5821921f5cb6be305ccf8005de", "patch": "@@ -102,7 +102,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 });\n                 if let Some(scope) = scope {\n                     // schedule a shallow free of that memory, lest we unwind:\n-                    this.schedule_drop(expr_span, scope, &Place::Local(result), value.ty);\n+                    this.schedule_drop_storage_and_value(\n+                        expr_span, scope, &Place::Local(result), value.ty,\n+                    );\n                 }\n \n                 // malloc some memory of suitable type (thus far, uninitialized):"}, {"sha": "f66fe763b759d621147579bf7f8fecb27462382f", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c15a6606eff9c5821921f5cb6be305ccf8005de/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c15a6606eff9c5821921f5cb6be305ccf8005de/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=9c15a6606eff9c5821921f5cb6be305ccf8005de", "patch": "@@ -62,7 +62,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         // anything because no values with a destructor can be created in\n         // a constant at this time, even if the type may need dropping.\n         if let Some(temp_lifetime) = temp_lifetime {\n-            this.schedule_drop(expr_span, temp_lifetime, &Place::Local(temp), expr_ty);\n+            this.schedule_drop_storage_and_value(\n+                expr_span, temp_lifetime, &Place::Local(temp), expr_ty,\n+            );\n         }\n \n         block.and(temp)"}, {"sha": "3a6c7dc9754a751c0603b8625ef41b2d717c96f1", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9c15a6606eff9c5821921f5cb6be305ccf8005de/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c15a6606eff9c5821921f5cb6be305ccf8005de/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=9c15a6606eff9c5821921f5cb6be305ccf8005de", "patch": "@@ -16,6 +16,7 @@\n use build::{BlockAnd, BlockAndExtension, Builder};\n use build::{GuardFrame, GuardFrameLocal, LocalsForNode};\n use build::ForGuard::{self, OutsideGuard, RefWithinGuard, ValWithinGuard};\n+use build::scope::{CachedBlock, DropKind};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::bitvec::BitVector;\n use rustc::ty::{self, Ty};\n@@ -367,7 +368,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             source_info,\n             kind: StatementKind::StorageLive(local_id)\n         });\n-        Place::Local(local_id)\n+        let place = Place::Local(local_id);\n+        let var_ty = self.local_decls[local_id].ty;\n+        let hir_id = self.hir.tcx().hir.node_to_hir_id(var);\n+        let region_scope = self.hir.region_scope_tree.var_scope(hir_id.local_id);\n+        self.schedule_drop(\n+            span, region_scope, &place, var_ty,\n+            DropKind::Storage,\n+        );\n+        place\n     }\n \n     pub fn schedule_drop_for_binding(&mut self,\n@@ -378,7 +387,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let var_ty = self.local_decls[local_id].ty;\n         let hir_id = self.hir.tcx().hir.node_to_hir_id(var);\n         let region_scope = self.hir.region_scope_tree.var_scope(hir_id.local_id);\n-        self.schedule_drop(span, region_scope, &Place::Local(local_id), var_ty);\n+        self.schedule_drop(\n+            span, region_scope, &Place::Local(local_id), var_ty,\n+            DropKind::Value {\n+                cached_block: CachedBlock::default(),\n+            },\n+        );\n     }\n \n     pub fn visit_bindings<F>(&mut self, pattern: &Pattern<'tcx>, f: &mut F)"}, {"sha": "0a53511a4f95d8c32e9e27293fe476fde5893574", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c15a6606eff9c5821921f5cb6be305ccf8005de/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c15a6606eff9c5821921f5cb6be305ccf8005de/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=9c15a6606eff9c5821921f5cb6be305ccf8005de", "patch": "@@ -10,6 +10,7 @@\n \n \n use build;\n+use build::scope::{CachedBlock, DropKind};\n use hair::cx::Cx;\n use hair::{LintLevel, BindingMode, PatternKind};\n use rustc::hir;\n@@ -735,9 +736,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n \n             // Make sure we drop (parts of) the argument even when not matched on.\n-            self.schedule_drop(pattern.as_ref().map_or(ast_body.span, |pat| pat.span),\n-                               argument_scope, &place, ty);\n-\n+            self.schedule_drop(\n+                pattern.as_ref().map_or(ast_body.span, |pat| pat.span),\n+                argument_scope, &place, ty,\n+                DropKind::Value { cached_block: CachedBlock::default() },\n+            );\n         }\n \n         // Enter the argument pattern bindings source scope, if it exists."}, {"sha": "e99c6f4f987a398ea86f7375c0f8221aedeb9c5a", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 66, "deletions": 33, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/9c15a6606eff9c5821921f5cb6be305ccf8005de/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c15a6606eff9c5821921f5cb6be305ccf8005de/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=9c15a6606eff9c5821921f5cb6be305ccf8005de", "patch": "@@ -144,12 +144,12 @@ struct DropData<'tcx> {\n     /// place to drop\n     location: Place<'tcx>,\n \n-    /// Whether this is a full value Drop, or just a StorageDead.\n-    kind: DropKind\n+    /// Whether this is a value Drop or a StorageDead.\n+    kind: DropKind,\n }\n \n #[derive(Debug, Default, Clone, Copy)]\n-struct CachedBlock {\n+pub(crate) struct CachedBlock {\n     /// The cached block for the cleanups-on-diverge path. This block\n     /// contains code to run the current drop and all the preceding\n     /// drops (i.e. those having lower index in Drop\u2019s Scope drop\n@@ -166,7 +166,7 @@ struct CachedBlock {\n }\n \n #[derive(Debug)]\n-enum DropKind {\n+pub(crate) enum DropKind {\n     Value {\n         cached_block: CachedBlock,\n     },\n@@ -622,25 +622,58 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         abortblk\n     }\n \n+    pub fn schedule_drop_storage_and_value(\n+        &mut self,\n+        span: Span,\n+        region_scope: region::Scope,\n+        place: &Place<'tcx>,\n+        place_ty: Ty<'tcx>,\n+    ) {\n+        self.schedule_drop(\n+            span, region_scope, place, place_ty,\n+            DropKind::Storage,\n+        );\n+        self.schedule_drop(\n+            span, region_scope, place, place_ty,\n+            DropKind::Value {\n+                cached_block: CachedBlock::default(),\n+            },\n+        );\n+    }\n+\n     // Scheduling drops\n     // ================\n     /// Indicates that `place` should be dropped on exit from\n     /// `region_scope`.\n-    pub fn schedule_drop(&mut self,\n-                         span: Span,\n-                         region_scope: region::Scope,\n-                         place: &Place<'tcx>,\n-                         place_ty: Ty<'tcx>) {\n+    ///\n+    /// When called with `DropKind::Storage`, `place` should be a local\n+    /// with an index higher than the current `self.arg_count`.\n+    pub fn schedule_drop(\n+        &mut self,\n+        span: Span,\n+        region_scope: region::Scope,\n+        place: &Place<'tcx>,\n+        place_ty: Ty<'tcx>,\n+        drop_kind: DropKind,\n+    ) {\n         let needs_drop = self.hir.needs_drop(place_ty);\n-        let drop_kind = if needs_drop {\n-            DropKind::Value { cached_block: CachedBlock::default() }\n-        } else {\n-            // Only temps and vars need their storage dead.\n-            match *place {\n-                Place::Local(index) if index.index() > self.arg_count => DropKind::Storage,\n-                _ => return\n+        match drop_kind {\n+            DropKind::Value { .. } => if !needs_drop { return },\n+            DropKind::Storage => {\n+                match *place {\n+                    Place::Local(index) => if index.index() <= self.arg_count {\n+                        span_bug!(\n+                            span, \"`schedule_drop` called with index {} and arg_count {}\",\n+                            index.index(),\n+                            self.arg_count,\n+                        )\n+                    },\n+                    _ => span_bug!(\n+                        span, \"`schedule_drop` called with non-`Local` place {:?}\", place\n+                    ),\n+                }\n             }\n-        };\n+        }\n \n         for scope in self.scopes.iter_mut().rev() {\n             let this_scope = scope.region_scope == region_scope;\n@@ -895,24 +928,24 @@ fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,\n                 });\n                 block = next;\n             }\n-            DropKind::Storage => {}\n-        }\n-\n-        // We do not need to emit StorageDead for generator drops\n-        if generator_drop {\n-            continue\n-        }\n+            DropKind::Storage => {\n+                // We do not need to emit StorageDead for generator drops\n+                if generator_drop {\n+                    continue\n+                }\n \n-        // Drop the storage for both value and storage drops.\n-        // Only temps and vars need their storage dead.\n-        match drop_data.location {\n-            Place::Local(index) if index.index() > arg_count => {\n-                cfg.push(block, Statement {\n-                    source_info,\n-                    kind: StatementKind::StorageDead(index)\n-                });\n+                // Drop the storage for both value and storage drops.\n+                // Only temps and vars need their storage dead.\n+                match drop_data.location {\n+                    Place::Local(index) if index.index() > arg_count => {\n+                        cfg.push(block, Statement {\n+                            source_info,\n+                            kind: StatementKind::StorageDead(index)\n+                        });\n+                    }\n+                    _ => unreachable!(),\n+                }\n             }\n-            _ => continue\n         }\n     }\n     block.unit()"}, {"sha": "9f5170cc89ee422436abe5a2a8c3ff0b6b3fd146", "filename": "src/test/codegen/lifetime_start_end.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c15a6606eff9c5821921f5cb6be305ccf8005de/src%2Ftest%2Fcodegen%2Flifetime_start_end.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c15a6606eff9c5821921f5cb6be305ccf8005de/src%2Ftest%2Fcodegen%2Flifetime_start_end.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Flifetime_start_end.rs?ref=9c15a6606eff9c5821921f5cb6be305ccf8005de", "patch": "@@ -31,11 +31,11 @@ pub fn test() {\n // CHECK: [[S__4:%[0-9]+]] = bitcast { i32, i32 }* %_4 to i8*\n // CHECK: call void @llvm.lifetime.start{{.*}}(i{{[0-9 ]+}}, i8* [[S__4]])\n \n-// CHECK: [[E_b:%[0-9]+]] = bitcast { i32, i32 }** %b to i8*\n-// CHECK: call void @llvm.lifetime.end{{.*}}(i{{[0-9 ]+}}, i8* [[E_b]])\n-\n // CHECK: [[E__4:%[0-9]+]] = bitcast { i32, i32 }* %_4 to i8*\n // CHECK: call void @llvm.lifetime.end{{.*}}(i{{[0-9 ]+}}, i8* [[E__4]])\n+\n+// CHECK: [[E_b:%[0-9]+]] = bitcast { i32, i32 }** %b to i8*\n+// CHECK: call void @llvm.lifetime.end{{.*}}(i{{[0-9 ]+}}, i8* [[E_b]])\n     }\n \n     let c = 1;"}, {"sha": "8e5a94abeed78bd210e52443481613c373583b75", "filename": "src/test/mir-opt/issue-49232.rs", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/9c15a6606eff9c5821921f5cb6be305ccf8005de/src%2Ftest%2Fmir-opt%2Fissue-49232.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c15a6606eff9c5821921f5cb6be305ccf8005de/src%2Ftest%2Fmir-opt%2Fissue-49232.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-49232.rs?ref=9c15a6606eff9c5821921f5cb6be305ccf8005de", "patch": "@@ -0,0 +1,148 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// We must mark a variable whose initialization fails due to an\n+// abort statement as StorageDead.\n+\n+fn main() {\n+    loop {\n+        let beacon = {\n+            match true {\n+                false => 4,\n+                true => break,\n+            }\n+        };\n+        drop(&beacon);\n+    }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.mir_map.0.mir\n+// fn main() -> (){\n+//     let mut _0: ();\n+//     scope 1 {\n+//     }\n+//     scope 2 {\n+//         let _2: i32;\n+//     }\n+//     let mut _1: ();\n+//     let mut _3: bool;\n+//     let mut _4: u8;\n+//     let mut _5: !;\n+//     let mut _6: ();\n+//     let mut _7: &i32;\n+//     bb0: {\n+//         goto -> bb1;\n+//     }\n+//     bb1: {\n+//         falseUnwind -> [real: bb3, cleanup: bb4];\n+//     }\n+//     bb2: {\n+//         goto -> bb29;\n+//     }\n+//     bb3: {\n+//         StorageLive(_2);\n+//         StorageLive(_3);\n+//         _3 = const true;\n+//         _4 = discriminant(_3);\n+//         switchInt(_3) -> [false: bb11, otherwise: bb10];\n+//     }\n+//     bb4: {\n+//         resume;\n+//     }\n+//     bb5: {\n+//         _2 = const 4i32;\n+//         goto -> bb14;\n+//     }\n+//     bb6: {\n+//         _0 = ();\n+//         goto -> bb15;\n+//     }\n+//     bb7: {\n+//         falseEdges -> [real: bb12, imaginary: bb8];\n+//     }\n+//     bb8: {\n+//         falseEdges -> [real: bb13, imaginary: bb9];\n+//     }\n+//     bb9: {\n+//         unreachable;\n+//     }\n+//     bb10: {\n+//         goto -> bb8;\n+//     }\n+//     bb11: {\n+//         goto -> bb7;\n+//     }\n+//     bb12: {\n+//         goto -> bb5;\n+//     }\n+//     bb13: {\n+//         goto -> bb6;\n+//     }\n+//     bb14: {\n+//         StorageDead(_3);\n+//         StorageLive(_7);\n+//         _7 = &_2;\n+//         _6 = const std::mem::drop(move _7) -> [return: bb28, unwind: bb4];\n+//     }\n+//     bb15: {\n+//         goto -> bb16;\n+//     }\n+//     bb16: {\n+//         goto -> bb17;\n+//     }\n+//     bb17: {\n+//         goto -> bb18;\n+//     }\n+//     bb18: {\n+//         goto -> bb19;\n+//     }\n+//     bb19: {\n+//         goto -> bb20;\n+//     }\n+//     bb20: {\n+//         StorageDead(_3);\n+//         goto -> bb21;\n+//     }\n+//     bb21: {\n+//         goto -> bb22;\n+//     }\n+//     bb22: {\n+//         StorageDead(_2);\n+//         goto -> bb23;\n+//     }\n+//     bb23: {\n+//         goto -> bb24;\n+//     }\n+//     bb24: {\n+//         goto -> bb25;\n+//     }\n+//     bb25: {\n+//         goto -> bb2;\n+//     }\n+//     bb26: {\n+//         _5 = ();\n+//         unreachable;\n+//     }\n+//     bb27: {\n+//         StorageDead(_5);\n+//         goto -> bb14;\n+//     }\n+//     bb28: {\n+//         StorageDead(_7);\n+//         _1 = ();\n+//         StorageDead(_2);\n+//         goto -> bb1;\n+//     }\n+//     bb29: {\n+//         return;\n+//     }\n+// }\n+// END rustc.main.mir_map.0.mir"}, {"sha": "16e30f84d17565788afca1912eb879a402d5132b", "filename": "src/test/mir-opt/storage_ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c15a6606eff9c5821921f5cb6be305ccf8005de/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c15a6606eff9c5821921f5cb6be305ccf8005de/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs?ref=9c15a6606eff9c5821921f5cb6be305ccf8005de", "patch": "@@ -31,8 +31,8 @@ fn main() {\n //         StorageDead(_5);\n //         _3 = &_4;\n //         _2 = ();\n-//         StorageDead(_3);\n //         StorageDead(_4);\n+//         StorageDead(_3);\n //         StorageLive(_6);\n //         _6 = const 1i32;\n //         _0 = ();"}]}