{"sha": "02f9e04ee926241389f8c9e41fec9281de1e0af9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZjllMDRlZTkyNjI0MTM4OWY4YzllNDFmZWM5MjgxZGUxZTBhZjk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-20T18:16:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-20T18:16:16Z"}, "message": "Merge #2617\n\n2617: Remove index resolving from hover r=matklad a=kjeremy\n\nI have left in `HoverResult`'s support for multiple entries because we may still want that at some point.\r\n\r\nPer https://github.com/rust-analyzer/rust-analyzer/issues/2542#issuecomment-565238142\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>", "tree": {"sha": "05d504e0eb5cee45f403cf23d1b2a03c4df760c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05d504e0eb5cee45f403cf23d1b2a03c4df760c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02f9e04ee926241389f8c9e41fec9281de1e0af9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/Q/wCRBK7hj4Ov3rIwAAdHIIAKp4ZG5lqP2gh/HcMELRqEdD\ndmw7OfZJ7qz/lNM1AtxDqFeiR+1bkWKDdEcXLs+Aav5ulV6To95tz0COo2DpY1Mw\nMNjPdnfMAci6H06m3TftYudFn5Bg7ISuL9hVSrx2i6BAm9tB9GO/bpSmERZuXtLG\nI7NnDxwIOie1rOa8AvLNpyDoJ+zUPq13xm3sxv+F12rGldk7LkBxLWMVjyy6JB/G\nkKvYbwN82Zw52zS62pAI2tbSSE0JG9O1zwMmfXawpJF3Vsf6cqx/d9DgHqUDbawa\nKeZDLxWmKmPVs7aLLOE+RLfrymT6B5j3QTmhuG5nmsGFeoKgJqpP5YwiEX/tACg=\n=F0Sq\n-----END PGP SIGNATURE-----\n", "payload": "tree 05d504e0eb5cee45f403cf23d1b2a03c4df760c3\nparent 979cbb496e88f91d21a1f12cbf959fc0032bd0cd\nparent 77626d7bdafa26ca539276b975d74348aabe175e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576865776 +0000\ncommitter GitHub <noreply@github.com> 1576865776 +0000\n\nMerge #2617\n\n2617: Remove index resolving from hover r=matklad a=kjeremy\n\nI have left in `HoverResult`'s support for multiple entries because we may still want that at some point.\r\n\r\nPer https://github.com/rust-analyzer/rust-analyzer/issues/2542#issuecomment-565238142\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02f9e04ee926241389f8c9e41fec9281de1e0af9", "html_url": "https://github.com/rust-lang/rust/commit/02f9e04ee926241389f8c9e41fec9281de1e0af9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02f9e04ee926241389f8c9e41fec9281de1e0af9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "979cbb496e88f91d21a1f12cbf959fc0032bd0cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/979cbb496e88f91d21a1f12cbf959fc0032bd0cd", "html_url": "https://github.com/rust-lang/rust/commit/979cbb496e88f91d21a1f12cbf959fc0032bd0cd"}, {"sha": "77626d7bdafa26ca539276b975d74348aabe175e", "url": "https://api.github.com/repos/rust-lang/rust/commits/77626d7bdafa26ca539276b975d74348aabe175e", "html_url": "https://github.com/rust-lang/rust/commit/77626d7bdafa26ca539276b975d74348aabe175e"}], "stats": {"total": 82, "additions": 23, "deletions": 59}, "files": [{"sha": "fbe89841b02111ae8ec3b0680c33cf4a527a5c2a", "filename": "crates/ra_ide/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02f9e04ee926241389f8c9e41fec9281de1e0af9/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f9e04ee926241389f8c9e41fec9281de1e0af9/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay.rs?ref=02f9e04ee926241389f8c9e41fec9281de1e0af9", "patch": "@@ -15,7 +15,7 @@ pub use function_signature::FunctionSignature;\n pub use navigation_target::NavigationTarget;\n pub use structure::{file_structure, StructureNode};\n \n-pub(crate) use navigation_target::{description_from_symbol, docs_from_symbol, ToNav};\n+pub(crate) use navigation_target::ToNav;\n pub(crate) use short_label::ShortLabel;\n \n pub(crate) fn function_label(node: &ast::FnDef) -> String {"}, {"sha": "35e39f965241f5c24b56c0d20083d9ec6d1ad97b", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 22, "deletions": 58, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/02f9e04ee926241389f8c9e41fec9281de1e0af9/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f9e04ee926241389f8c9e41fec9281de1e0af9/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=02f9e04ee926241389f8c9e41fec9281de1e0af9", "patch": "@@ -12,10 +12,7 @@ use ra_syntax::{\n \n use crate::{\n     db::RootDatabase,\n-    display::{\n-        description_from_symbol, docs_from_symbol, macro_label, rust_code_markup,\n-        rust_code_markup_with_doc, ShortLabel,\n-    },\n+    display::{macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel},\n     expand::descend_into_macros,\n     references::{classify_name, classify_name_ref, NameKind, NameKind::*},\n     FilePosition, FileRange, RangeInfo,\n@@ -95,11 +92,7 @@ fn hover_text(docs: Option<String>, desc: Option<String>) -> Option<String> {\n     }\n }\n \n-fn hover_text_from_name_kind(\n-    db: &RootDatabase,\n-    name_kind: NameKind,\n-    no_fallback: &mut bool,\n-) -> Option<String> {\n+fn hover_text_from_name_kind(db: &RootDatabase, name_kind: NameKind) -> Option<String> {\n     return match name_kind {\n         Macro(it) => {\n             let src = it.source(db);\n@@ -135,11 +128,7 @@ fn hover_text_from_name_kind(\n             hir::ModuleDef::TypeAlias(it) => from_def_source(db, it),\n             hir::ModuleDef::BuiltinType(it) => Some(it.to_string()),\n         },\n-        Local(_) => {\n-            // Hover for these shows type names\n-            *no_fallback = true;\n-            None\n-        }\n+        Local(_) => None,\n         TypeParam(_) | SelfType(_) => {\n             // FIXME: Hover for generic param\n             None\n@@ -163,60 +152,35 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n \n     let mut res = HoverResult::new();\n \n-    let mut range = match_ast! {\n+    if let Some((range, name_kind)) = match_ast! {\n         match (token.value.parent()) {\n             ast::NameRef(name_ref) => {\n-                let mut no_fallback = false;\n-                if let Some(name_kind) =\n-                    classify_name_ref(db, token.with_value(&name_ref)).map(|d| d.kind)\n-                {\n-                    res.extend(hover_text_from_name_kind(db, name_kind, &mut no_fallback))\n-                }\n-\n-                if res.is_empty() && !no_fallback {\n-                    // Fallback index based approach:\n-                    let symbols = crate::symbol_index::index_resolve(db, &name_ref);\n-                    for sym in symbols {\n-                        let docs = docs_from_symbol(db, &sym);\n-                        let desc = description_from_symbol(db, &sym);\n-                        res.extend(hover_text(docs, desc));\n-                    }\n-                }\n-\n-                if !res.is_empty() {\n-                    Some(name_ref.syntax().text_range())\n-                } else {\n-                    None\n-                }\n+                classify_name_ref(db, token.with_value(&name_ref)).map(|d| (name_ref.syntax().text_range(), d.kind))\n             },\n             ast::Name(name) => {\n-                if let Some(name_kind) = classify_name(db, token.with_value(&name)).map(|d| d.kind) {\n-                    res.extend(hover_text_from_name_kind(db, name_kind, &mut true));\n-                }\n-\n-                if !res.is_empty() {\n-                    Some(name.syntax().text_range())\n-                } else {\n-                    None\n-                }\n+                classify_name(db, token.with_value(&name)).map(|d| (name.syntax().text_range(), d.kind))\n             },\n             _ => None,\n         }\n-    };\n+    } {\n+        res.extend(hover_text_from_name_kind(db, name_kind));\n \n-    if range.is_none() {\n-        let node = token.value.ancestors().find(|n| {\n-            ast::Expr::cast(n.clone()).is_some() || ast::Pat::cast(n.clone()).is_some()\n-        })?;\n-        let frange = FileRange { file_id: position.file_id, range: node.text_range() };\n-        res.extend(type_of(db, frange).map(rust_code_markup));\n-        range = Some(node.text_range());\n-    };\n+        if !res.is_empty() {\n+            return Some(RangeInfo::new(range, res));\n+        }\n+    }\n \n-    let range = range?;\n+    let node = token\n+        .value\n+        .ancestors()\n+        .find(|n| ast::Expr::cast(n.clone()).is_some() || ast::Pat::cast(n.clone()).is_some())?;\n+    let frange = FileRange { file_id: position.file_id, range: node.text_range() };\n+    res.extend(type_of(db, frange).map(rust_code_markup));\n     if res.is_empty() {\n         return None;\n     }\n+    let range = node.text_range();\n+\n     Some(RangeInfo::new(range, res))\n }\n \n@@ -314,7 +278,7 @@ mod tests {\n             &[\"pub fn foo() -> u32\"],\n         );\n \n-        // Multiple results\n+        // Multiple candidates but results are ambiguous.\n         check_hover_result(\n             r#\"\n             //- /a.rs\n@@ -335,7 +299,7 @@ mod tests {\n                 let foo_test = fo<|>o();\n             }\n         \"#,\n-            &[\"pub fn foo() -> &str\", \"pub fn foo() -> u32\", \"pub fn foo(a: u32, b: u32)\"],\n+            &[\"{unknown}\"],\n         );\n     }\n "}]}