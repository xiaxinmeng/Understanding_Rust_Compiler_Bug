{"sha": "837f3e3e67007d748e993a080c3ea4b07ee465a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzN2YzZTNlNjcwMDdkNzQ4ZTk5M2EwODBjM2VhNGIwN2VlNDY1YTA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-11T11:39:19Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-12T11:58:44Z"}, "message": "Use () for inherent_impls.", "tree": {"sha": "91c31527b229ab32be6d55d7717ad66b19c049bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91c31527b229ab32be6d55d7717ad66b19c049bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/837f3e3e67007d748e993a080c3ea4b07ee465a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/837f3e3e67007d748e993a080c3ea4b07ee465a0", "html_url": "https://github.com/rust-lang/rust/commit/837f3e3e67007d748e993a080c3ea4b07ee465a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/837f3e3e67007d748e993a080c3ea4b07ee465a0/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aa6f3e8f52e72599d8588025adfe55a9a934c49", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aa6f3e8f52e72599d8588025adfe55a9a934c49", "html_url": "https://github.com/rust-lang/rust/commit/3aa6f3e8f52e72599d8588025adfe55a9a934c49"}], "stats": {"total": 45, "additions": 19, "deletions": 26}, "files": [{"sha": "99b8ff5abd3cf7dc24a4ba65d0d18ada1e86d773", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/837f3e3e67007d748e993a080c3ea4b07ee465a0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837f3e3e67007d748e993a080c3ea4b07ee465a0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=837f3e3e67007d748e993a080c3ea4b07ee465a0", "patch": "@@ -944,13 +944,12 @@ impl EncodeContext<'a, 'tcx> {\n                 record!(self.tables.super_predicates[def_id] <- self.tcx.super_predicates_of(def_id));\n             }\n         }\n-        let inherent_impls = tcx.crate_inherent_impls(LOCAL_CRATE);\n+        let inherent_impls = tcx.crate_inherent_impls(());\n         for (def_id, implementations) in inherent_impls.inherent_impls.iter() {\n-            assert!(def_id.is_local());\n             if implementations.is_empty() {\n                 continue;\n             }\n-            record!(self.tables.inherent_impls[def_id] <- implementations.iter().map(|&def_id| {\n+            record!(self.tables.inherent_impls[def_id.to_def_id()] <- implementations.iter().map(|&def_id| {\n                 assert!(def_id.is_local());\n                 def_id.index\n             }));"}, {"sha": "22c617d264e9d053dc9248c9789efa332e74454e", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/837f3e3e67007d748e993a080c3ea4b07ee465a0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837f3e3e67007d748e993a080c3ea4b07ee465a0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=837f3e3e67007d748e993a080c3ea4b07ee465a0", "patch": "@@ -740,18 +740,15 @@ rustc_queries! {\n \n     /// Gets a complete map from all types to their inherent impls.\n     /// Not meant to be used directly outside of coherence.\n-    /// (Defined only for `LOCAL_CRATE`.)\n-    query crate_inherent_impls(k: CrateNum)\n-        -> CrateInherentImpls {\n+    query crate_inherent_impls(k: ()) -> CrateInherentImpls {\n         storage(ArenaCacheSelector<'tcx>)\n         eval_always\n-        desc { \"all inherent impls defined in crate `{:?}`\", k }\n+        desc { \"all inherent impls defined in crate\" }\n     }\n \n     /// Checks all types in the crate for overlap in their inherent impls. Reports errors.\n     /// Not meant to be used directly outside of coherence.\n-    /// (Defined only for `LOCAL_CRATE`.)\n-    query crate_inherent_impls_overlap_check(_: CrateNum)\n+    query crate_inherent_impls_overlap_check(_: ())\n         -> () {\n         eval_always\n         desc { \"check for overlap between inherent impls defined in this crate\" }"}, {"sha": "94e325e9e8784fcf38ae38ce1a962a72ca87d122", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/837f3e3e67007d748e993a080c3ea4b07ee465a0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837f3e3e67007d748e993a080c3ea4b07ee465a0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=837f3e3e67007d748e993a080c3ea4b07ee465a0", "patch": "@@ -36,7 +36,7 @@ use rustc_data_structures::sync::{self, par_iter, ParallelIterator};\n use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LocalDefIdMap, CRATE_DEF_INDEX};\n use rustc_hir::{Constness, Node};\n use rustc_macros::HashStable;\n use rustc_span::hygiene::ExpnId;\n@@ -1983,7 +1983,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n /// (constructing this map requires touching the entire crate).\n #[derive(Clone, Debug, Default, HashStable)]\n pub struct CrateInherentImpls {\n-    pub inherent_impls: DefIdMap<Vec<DefId>>,\n+    pub inherent_impls: LocalDefIdMap<Vec<DefId>>,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, HashStable)]"}, {"sha": "51698437a305b8916ff185846812f5d0f3bcb036", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/837f3e3e67007d748e993a080c3ea4b07ee465a0/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837f3e3e67007d748e993a080c3ea4b07ee465a0/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=837f3e3e67007d748e993a080c3ea4b07ee465a0", "patch": "@@ -9,16 +9,14 @@\n \n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::{self, CrateInherentImpls, TyCtxt};\n \n use rustc_span::Span;\n \n /// On-demand query: yields a map containing all types mapped to their inherent impls.\n-pub fn crate_inherent_impls(tcx: TyCtxt<'_>, crate_num: CrateNum) -> CrateInherentImpls {\n-    assert_eq!(crate_num, LOCAL_CRATE);\n-\n+pub fn crate_inherent_impls(tcx: TyCtxt<'_>, (): ()) -> CrateInherentImpls {\n     let krate = tcx.hir().krate();\n     let mut collect = InherentCollect { tcx, impls_map: Default::default() };\n     krate.visit_all_item_likes(&mut collect);\n@@ -27,9 +25,9 @@ pub fn crate_inherent_impls(tcx: TyCtxt<'_>, crate_num: CrateNum) -> CrateInhere\n \n /// On-demand query: yields a vector of the inherent impls for a specific type.\n pub fn inherent_impls(tcx: TyCtxt<'_>, ty_def_id: DefId) -> &[DefId] {\n-    assert!(ty_def_id.is_local());\n+    let ty_def_id = ty_def_id.expect_local();\n \n-    let crate_map = tcx.crate_inherent_impls(ty_def_id.krate);\n+    let crate_map = tcx.crate_inherent_impls(());\n     match crate_map.inherent_impls.get(&ty_def_id) {\n         Some(v) => &v[..],\n         None => &[],\n@@ -364,7 +362,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n \n impl InherentCollect<'tcx> {\n     fn check_def_id(&mut self, item: &hir::Item<'_>, def_id: DefId) {\n-        if def_id.is_local() {\n+        if let Some(def_id) = def_id.as_local() {\n             // Add the implementation to the mapping from implementation to base\n             // type def ID, if there is a base type for this implementation and\n             // the implementation does not have any associated traits."}, {"sha": "f039790eca118a5dd1d0b4afd9145b55198ff7b2", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/837f3e3e67007d748e993a080c3ea4b07ee465a0/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837f3e3e67007d748e993a080c3ea4b07ee465a0/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs?ref=837f3e3e67007d748e993a080c3ea4b07ee465a0", "patch": "@@ -1,16 +1,15 @@\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::Symbol;\n use rustc_trait_selection::traits::{self, SkipLeakCheck};\n use smallvec::SmallVec;\n use std::collections::hash_map::Entry;\n \n-pub fn crate_inherent_impls_overlap_check(tcx: TyCtxt<'_>, crate_num: CrateNum) {\n-    assert_eq!(crate_num, LOCAL_CRATE);\n+pub fn crate_inherent_impls_overlap_check(tcx: TyCtxt<'_>, (): ()) {\n     let krate = tcx.hir().krate();\n     krate.visit_all_item_likes(&mut InherentOverlapChecker { tcx });\n }"}, {"sha": "03a9fe01795f5c70a76735257e4993d106b6effc", "filename": "compiler/rustc_typeck/src/coherence/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/837f3e3e67007d748e993a080c3ea4b07ee465a0/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837f3e3e67007d748e993a080c3ea4b07ee465a0/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs?ref=837f3e3e67007d748e993a080c3ea4b07ee465a0", "patch": "@@ -6,7 +6,7 @@\n // mappings. That mapping code resides here.\n \n use rustc_errors::struct_span_err;\n-use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n@@ -203,8 +203,8 @@ pub fn check_coherence(tcx: TyCtxt<'_>) {\n     tcx.sess.time(\"orphan_checking\", || orphan::check(tcx));\n \n     // these queries are executed for side-effects (error reporting):\n-    tcx.ensure().crate_inherent_impls(LOCAL_CRATE);\n-    tcx.ensure().crate_inherent_impls_overlap_check(LOCAL_CRATE);\n+    tcx.ensure().crate_inherent_impls(());\n+    tcx.ensure().crate_inherent_impls_overlap_check(());\n }\n \n /// Checks whether an impl overlaps with the automatic `impl Trait for dyn Trait`."}, {"sha": "4e0b1ae78dfe39886b6c7ce2f36e8da726619569", "filename": "src/tools/clippy/clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/837f3e3e67007d748e993a080c3ea4b07ee465a0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837f3e3e67007d748e993a080c3ea4b07ee465a0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_impl.rs?ref=837f3e3e67007d748e993a080c3ea4b07ee465a0", "patch": "@@ -3,7 +3,7 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::in_macro;\n use rustc_hir::def_id::DefIdMap;\n-use rustc_hir::{def_id, Crate, Impl, Item, ItemKind};\n+use rustc_hir::{Crate, Impl, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -68,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n     fn check_crate_post(&mut self, cx: &LateContext<'tcx>, krate: &'tcx Crate<'_>) {\n         if !krate.items.is_empty() {\n             // Retrieve all inherent implementations from the crate, grouped by type\n-            for impls in cx.tcx.crate_inherent_impls(def_id::LOCAL_CRATE).inherent_impls.values() {\n+            for impls in cx.tcx.crate_inherent_impls(()).inherent_impls.values() {\n                 // Filter out implementations that have generic params (type or lifetime)\n                 let mut impl_spans = impls.iter().filter_map(|impl_def| self.impls.get(impl_def));\n                 if let Some(initial_span) = impl_spans.next() {"}]}