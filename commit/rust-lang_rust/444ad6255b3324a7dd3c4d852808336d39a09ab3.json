{"sha": "444ad6255b3324a7dd3c4d852808336d39a09ab3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NGFkNjI1NWIzMzI0YTdkZDNjNGQ4NTI4MDgzMzZkMzlhMDlhYjM=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-03-29T21:15:41Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-04-09T19:45:45Z"}, "message": "Add utility to find locals that don't use `Storage*` annotations", "tree": {"sha": "fdc7375ebb524b45877d1808bc3751dfac051046", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdc7375ebb524b45877d1808bc3751dfac051046"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/444ad6255b3324a7dd3c4d852808336d39a09ab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/444ad6255b3324a7dd3c4d852808336d39a09ab3", "html_url": "https://github.com/rust-lang/rust/commit/444ad6255b3324a7dd3c4d852808336d39a09ab3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/444ad6255b3324a7dd3c4d852808336d39a09ab3/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93dc97a85381cc52eb872d27e50e4d518926a27c", "url": "https://api.github.com/repos/rust-lang/rust/commits/93dc97a85381cc52eb872d27e50e4d518926a27c", "html_url": "https://github.com/rust-lang/rust/commit/93dc97a85381cc52eb872d27e50e4d518926a27c"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "3e501193e8dc4b97d8c80279d3059c27eab7eec1", "filename": "src/librustc_mir/util/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/444ad6255b3324a7dd3c4d852808336d39a09ab3/src%2Flibrustc_mir%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444ad6255b3324a7dd3c4d852808336d39a09ab3/src%2Flibrustc_mir%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fmod.rs?ref=444ad6255b3324a7dd3c4d852808336d39a09ab3", "patch": "@@ -3,6 +3,7 @@ pub mod borrowck_errors;\n pub mod def_use;\n pub mod elaborate_drops;\n pub mod patch;\n+pub mod storage;\n \n mod alignment;\n pub mod collect_writes;"}, {"sha": "2ce9bed794d96580f31fcca08436805f93e5931d", "filename": "src/librustc_mir/util/storage.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/444ad6255b3324a7dd3c4d852808336d39a09ab3/src%2Flibrustc_mir%2Futil%2Fstorage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444ad6255b3324a7dd3c4d852808336d39a09ab3/src%2Flibrustc_mir%2Futil%2Fstorage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fstorage.rs?ref=444ad6255b3324a7dd3c4d852808336d39a09ab3", "patch": "@@ -0,0 +1,42 @@\n+use rustc_index::bit_set::BitSet;\n+use rustc_middle::mir::{self, Local};\n+\n+/// The set of locals in a MIR body that do not have `StorageLive`/`StorageDead` annotations.\n+///\n+/// These locals have fixed storage for the duration of the body.\n+//\n+// FIXME: Currently, we need to traverse the entire MIR to compute this. We should instead store it\n+// as a field in the `LocalDecl` for each `Local`.\n+#[derive(Debug, Clone)]\n+pub struct AlwaysLiveLocals(BitSet<Local>);\n+\n+impl AlwaysLiveLocals {\n+    pub fn new(body: &mir::Body<'tcx>) -> Self {\n+        let mut locals = BitSet::new_filled(body.local_decls.len());\n+\n+        // FIXME: Use a visitor for this when `visit_body` can take a plain `Body`.\n+        for block in body.basic_blocks().iter() {\n+            for stmt in &block.statements {\n+                if let mir::StatementKind::StorageLive(l) | mir::StatementKind::StorageDead(l) =\n+                    stmt.kind\n+                {\n+                    locals.remove(l);\n+                }\n+            }\n+        }\n+\n+        AlwaysLiveLocals(locals)\n+    }\n+\n+    pub fn into_inner(self) -> BitSet<Local> {\n+        self.0\n+    }\n+}\n+\n+impl std::ops::Deref for AlwaysLiveLocals {\n+    type Target = BitSet<Local>;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}"}]}