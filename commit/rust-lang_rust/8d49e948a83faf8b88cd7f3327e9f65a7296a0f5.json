{"sha": "8d49e948a83faf8b88cd7f3327e9f65a7296a0f5", "node_id": "C_kwDOAAsO6NoAKDhkNDllOTQ4YTgzZmFmOGI4OGNkN2YzMzI3ZTlmNjVhNzI5NmEwZjU", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-14T11:04:20Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-14T11:24:22Z"}, "message": "Doc fixes from review", "tree": {"sha": "5caa99e37e7e6c9b5bcb1a57eec38a36e7fe82b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5caa99e37e7e6c9b5bcb1a57eec38a36e7fe82b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d49e948a83faf8b88cd7f3327e9f65a7296a0f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d49e948a83faf8b88cd7f3327e9f65a7296a0f5", "html_url": "https://github.com/rust-lang/rust/commit/8d49e948a83faf8b88cd7f3327e9f65a7296a0f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d49e948a83faf8b88cd7f3327e9f65a7296a0f5/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c155d5149fe49736cfb5b24eaa1c854b836019f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c155d5149fe49736cfb5b24eaa1c854b836019f3", "html_url": "https://github.com/rust-lang/rust/commit/c155d5149fe49736cfb5b24eaa1c854b836019f3"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "750affa468b56124a52cbefa8356b71689ee2ac0", "filename": "compiler/rustc_data_structures/src/tagged_ptr.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8d49e948a83faf8b88cd7f3327e9f65a7296a0f5/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d49e948a83faf8b88cd7f3327e9f65a7296a0f5/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs?ref=8d49e948a83faf8b88cd7f3327e9f65a7296a0f5", "patch": "@@ -40,8 +40,8 @@ pub use drop::TaggedPtr;\n /// [`into_ptr`] must be valid for writes (and thus calling [`NonNull::as_mut`]\n /// on it must be safe).\n ///\n-/// The [`BITS`] constant must be correct. At least [`BITS`] least significant\n-/// bits, must be zero on all pointers returned from [`into_ptr`].\n+/// The [`BITS`] constant must be correct. [`BITS`] least-significant bits,\n+/// must be zero on all pointers returned from [`into_ptr`].\n ///\n /// For example, if the alignment of [`Self::Target`] is 2, then `BITS` should be 1.\n ///\n@@ -52,9 +52,12 @@ pub use drop::TaggedPtr;\n /// [`Self::Target`]: Deref::Target\n /// [`DerefMut`]: std::ops::DerefMut\n pub unsafe trait Pointer: Deref {\n-    /// Number of unused (always zero) **least significant bits** in this\n+    /// Number of unused (always zero) **least-significant bits** in this\n     /// pointer, usually related to the pointees alignment.\n     ///\n+    /// For example if [`BITS`] = `2`, then given `ptr = Self::into_ptr(..)`,\n+    /// `ptr.addr() & 0b11 == 0` must be true.\n+    ///\n     /// Most likely the value you want to use here is the following, unless\n     /// your [`Self::Target`] type is unsized (e.g., `ty::List<T>` in rustc)\n     /// or your pointer is over/under aligned, in which case you'll need to\n@@ -71,6 +74,7 @@ pub unsafe trait Pointer: Deref {\n     /// # }\n     /// ```\n     ///\n+    /// [`BITS`]: Pointer::BITS\n     /// [`Self::Target`]: Deref::Target\n     const BITS: usize;\n \n@@ -105,7 +109,7 @@ pub unsafe trait Pointer: Deref {\n ///\n /// The [`BITS`] constant must be correct.\n ///\n-/// No more than [`BITS`] least significant bits may be set in the returned usize.\n+/// No more than [`BITS`] least-significant bits may be set in the returned usize.\n ///\n /// [`BITS`]: Tag::BITS\n pub unsafe trait Tag: Copy {"}, {"sha": "83dfdb0bd876dca06d8a938a4767e1a81b19e449", "filename": "compiler/rustc_data_structures/src/tagged_ptr/copy.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8d49e948a83faf8b88cd7f3327e9f65a7296a0f5/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d49e948a83faf8b88cd7f3327e9f65a7296a0f5/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fcopy.rs?ref=8d49e948a83faf8b88cd7f3327e9f65a7296a0f5", "patch": "@@ -33,7 +33,7 @@ where\n     /// those are embeddable in instruction encoding, for example:\n     ///\n     /// ```asm\n-    /// // (https://godbolt.org/z/jqcYPWEr3)\n+    /// // (<https://godbolt.org/z/jqcYPWEr3>)\n     /// example::shift_read3:\n     ///     mov     eax, dword ptr [8*rdi]\n     ///     ret\n@@ -49,7 +49,8 @@ where\n     /// - `shift_read3` uses `<< 3` (the tag is in the most-significant bits)\n     /// - `mask_read3` uses `& !0b111` (the tag is in the least-significant bits)\n     ///\n-    /// The shift approach thus produces less instructions and is likely faster.\n+    /// The shift approach thus produces less instructions and is likely faster\n+    /// (see <https://godbolt.org/z/Y913sMdWb>).\n     ///\n     /// Encoding diagram:\n     /// ```text\n@@ -66,12 +67,21 @@ where\n     tag_ghost: PhantomData<T>,\n }\n \n+// Note that even though `CopyTaggedPtr` is only really expected to work with\n+// `P: Copy`, can't add `P: Copy` bound, because `CopyTaggedPtr` is used in the\n+// `TaggedPtr`'s implementation.\n impl<P, T, const CP: bool> CopyTaggedPtr<P, T, CP>\n where\n     P: Pointer,\n     T: Tag,\n {\n     /// Tags `pointer` with `tag`.\n+    ///\n+    /// Note that this leaks `pointer`: it won't be dropped when\n+    /// `CopyTaggedPtr` is dropped. If you have a pointer with a significant\n+    /// drop, use [`TaggedPtr`] instead.\n+    ///\n+    /// [`TaggedPtr`]: crate::tagged_ptr::TaggedPtr\n     pub fn new(pointer: P, tag: T) -> Self {\n         Self { packed: Self::pack(P::into_ptr(pointer), tag), tag_ghost: PhantomData }\n     }\n@@ -95,7 +105,8 @@ where\n         let tag = self.packed.addr().get() >> Self::TAG_BIT_SHIFT;\n \n         // Safety:\n-        //\n+        // The shift retrieves the original value from `T::into_usize`,\n+        // satisfying `T::from_usize`'s preconditions.\n         unsafe { T::from_usize(tag) }\n     }\n \n@@ -152,6 +163,10 @@ where\n         //\n         // Semantically this is just `f(&self.pointer)` (where `self.pointer`\n         // is non-packed original pointer).\n+        //\n+        // Note that even though `CopyTaggedPtr` is only really expected to\n+        // work with `P: Copy`, we have to assume `P: ?Copy`, because\n+        // `CopyTaggedPtr` is used in the `TaggedPtr`'s implementation.\n         let ptr = unsafe { ManuallyDrop::new(P::from_ptr(self.pointer_raw())) };\n         f(&ptr)\n     }"}]}