{"sha": "894cd3961ab0f63366db40dccaed09f2b7525ead", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NGNkMzk2MWFiMGY2MzM2NmRiNDBkY2NhZWQwOWYyYjc1MjVlYWQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-09T11:00:51Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-09T12:29:21Z"}, "message": "Rollup merge of #23202 - shepmaster:intro-threads-not-concurrent, r=steveklabnik\n\n If we end the `scoped` call with a semicolon, the `JoinGuard` will be\ndropped and not returned from the `map`. The thread will start up and\nwe immediately block, making for a very expensive sequential loop.", "tree": {"sha": "367d510c786ae8591ac9de2f234343591ad77e82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/367d510c786ae8591ac9de2f234343591ad77e82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/894cd3961ab0f63366db40dccaed09f2b7525ead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/894cd3961ab0f63366db40dccaed09f2b7525ead", "html_url": "https://github.com/rust-lang/rust/commit/894cd3961ab0f63366db40dccaed09f2b7525ead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/894cd3961ab0f63366db40dccaed09f2b7525ead/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "094b6bc8316a9e1aacd8b777fdbe8c9f16448d9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/094b6bc8316a9e1aacd8b777fdbe8c9f16448d9f", "html_url": "https://github.com/rust-lang/rust/commit/094b6bc8316a9e1aacd8b777fdbe8c9f16448d9f"}, {"sha": "b426a242e3da27e9a407f9f896bcb86d347f76d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b426a242e3da27e9a407f9f896bcb86d347f76d1", "html_url": "https://github.com/rust-lang/rust/commit/b426a242e3da27e9a407f9f896bcb86d347f76d1"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "9e575abeee2173d415e7064599c89f30c86614d6", "filename": "src/doc/intro.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/894cd3961ab0f63366db40dccaed09f2b7525ead/src%2Fdoc%2Fintro.md", "raw_url": "https://github.com/rust-lang/rust/raw/894cd3961ab0f63366db40dccaed09f2b7525ead/src%2Fdoc%2Fintro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fintro.md?ref=894cd3961ab0f63366db40dccaed09f2b7525ead", "patch": "@@ -389,11 +389,11 @@ safe concurrent programs.\n Here's an example of a concurrent Rust program:\n \n ```{rust}\n-use std::thread::Thread;\n+use std::thread;\n \n fn main() {\n     let guards: Vec<_> = (0..10).map(|_| {\n-        Thread::scoped(|| {\n+        thread::scoped(|| {\n             println!(\"Hello, world!\");\n         })\n     }).collect();\n@@ -421,16 +421,16 @@ problem.\n Let's see an example. This Rust code will not compile:\n \n ```{rust,ignore}\n-use std::thread::Thread;\n+use std::thread;\n \n fn main() {\n     let mut numbers = vec![1, 2, 3];\n \n     let guards: Vec<_> = (0..3).map(|i| {\n-        Thread::scoped(move || {\n+        thread::scoped(move || {\n             numbers[i] += 1;\n             println!(\"numbers[{}] is {}\", i, numbers[i]);\n-        });\n+        })\n     }).collect();\n }\n ```\n@@ -439,10 +439,10 @@ It gives us this error:\n \n ```text\n 7:25: 10:6 error: cannot move out of captured outer variable in an `FnMut` closure\n-7     Thread::scoped(move || {\n+7     thread::scoped(move || {\n 8       numbers[i] += 1;\n 9       println!(\"numbers[{}] is {}\", i, numbers[i]);\n-10     });\n+10     })\n error: aborting due to previous error\n ```\n \n@@ -471,19 +471,19 @@ mutation doesn't cause a data race.\n Here's what using an Arc with a Mutex looks like:\n \n ```{rust}\n-use std::thread::Thread;\n+use std::thread;\n use std::sync::{Arc,Mutex};\n \n fn main() {\n     let numbers = Arc::new(Mutex::new(vec![1, 2, 3]));\n \n     let guards: Vec<_> = (0..3).map(|i| {\n         let number = numbers.clone();\n-        Thread::scoped(move || {\n+        thread::scoped(move || {\n             let mut array = number.lock().unwrap();\n             array[i] += 1;\n             println!(\"numbers[{}] is {}\", i, array[i]);\n-        });\n+        })\n     }).collect();\n }\n ```\n@@ -535,15 +535,15 @@ As an example, Rust's ownership system is _entirely_ at compile time. The\n safety check that makes this an error about moved values:\n \n ```{rust,ignore}\n-use std::thread::Thread;\n+use std::thread;\n \n fn main() {\n     let numbers = vec![1, 2, 3];\n \n     let guards: Vec<_> = (0..3).map(|i| {\n-        Thread::scoped(move || {\n+        thread::scoped(move || {\n             println!(\"{}\", numbers[i]);\n-        });\n+        })\n     }).collect();\n }\n ```"}]}