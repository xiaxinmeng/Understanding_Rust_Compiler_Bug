{"sha": "d5803e67eecda097932424a6c7b52cd1addd76b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ODAzZTY3ZWVjZGEwOTc5MzI0MjRhNmM3YjUyY2QxYWRkZDc2Yjk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-17T23:18:43Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-23T22:16:14Z"}, "message": "extra: access workcache db via RWARC.", "tree": {"sha": "c04513d30eb6220fe29e1d5be9ea09122c69e89e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c04513d30eb6220fe29e1d5be9ea09122c69e89e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5803e67eecda097932424a6c7b52cd1addd76b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5803e67eecda097932424a6c7b52cd1addd76b9", "html_url": "https://github.com/rust-lang/rust/commit/d5803e67eecda097932424a6c7b52cd1addd76b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5803e67eecda097932424a6c7b52cd1addd76b9/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48dd72888c67e4afa193565ed288e6351253bf29", "url": "https://api.github.com/repos/rust-lang/rust/commits/48dd72888c67e4afa193565ed288e6351253bf29", "html_url": "https://github.com/rust-lang/rust/commit/48dd72888c67e4afa193565ed288e6351253bf29"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "9825a20e86c9f0bb6f7c10871e60fb4587517533", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d5803e67eecda097932424a6c7b52cd1addd76b9/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5803e67eecda097932424a6c7b52cd1addd76b9/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=d5803e67eecda097932424a6c7b52cd1addd76b9", "patch": "@@ -15,6 +15,7 @@ use digest::DigestUtil;\n use json;\n use sha1::Sha1;\n use serialize::{Encoder, Encodable, Decoder, Decodable};\n+use arc::RWARC;\n use treemap::TreeMap;\n \n use std::cell::Cell;\n@@ -123,7 +124,7 @@ struct Database {\n }\n \n impl Database {\n-    pub fn prepare(&mut self,\n+    pub fn prepare(&self,\n                    fn_name: &str,\n                    declared_inputs: &WorkMap)\n                    -> Option<(WorkMap, WorkMap, ~str)> {\n@@ -161,7 +162,7 @@ impl Logger {\n }\n \n struct Context {\n-    db: @mut Database,\n+    db: RWARC<Database>,\n     logger: @mut Logger,\n     cfg: @json::Object,\n     freshness: TreeMap<~str,@fn(&str,&str)->bool>\n@@ -214,7 +215,7 @@ fn digest_file(path: &Path) -> ~str {\n }\n \n impl Context {\n-    pub fn new(db: @mut Database, lg: @mut Logger, cfg: @json::Object)\n+    pub fn new(db: RWARC<Database>, lg: @mut Logger, cfg: @json::Object)\n                -> Context {\n         Context {\n             db: db,\n@@ -290,7 +291,9 @@ impl TPrep for Prep {\n             &self, blk: ~fn(&Exec) -> T) -> Work<T> {\n         let mut bo = Some(blk);\n \n-        let cached = self.ctxt.db.prepare(self.fn_name, &self.declared_inputs);\n+        let cached = do self.ctxt.db.read |db| {\n+            db.prepare(self.fn_name, &self.declared_inputs)\n+        };\n \n         match cached {\n             Some((ref disc_in, ref disc_out, ref res))\n@@ -346,12 +349,13 @@ fn unwrap<T:Send +\n             let s = json_encode(&v);\n \n             let p = &*ww.prep;\n-            let db = p.ctxt.db;\n-            db.cache(p.fn_name,\n-                 &p.declared_inputs,\n-                 &exe.discovered_inputs,\n-                 &exe.discovered_outputs,\n-                 s);\n+            do p.ctxt.db.write |db| {\n+                db.cache(p.fn_name,\n+                         &p.declared_inputs,\n+                         &exe.discovered_inputs,\n+                         &exe.discovered_outputs,\n+                         s);\n+            }\n             v\n         }\n     }\n@@ -361,9 +365,9 @@ fn unwrap<T:Send +\n fn test() {\n     use std::io::WriterUtil;\n \n-    let db = @mut Database { db_filename: Path(\"db.json\"),\n-                             db_cache: TreeMap::new(),\n-                             db_dirty: false };\n+    let db = RWARC(Database { db_filename: Path(\"db.json\"),\n+                              db_cache: TreeMap::new(),\n+                              db_dirty: false });\n     let lg = @mut Logger { a: () };\n     let cfg = @HashMap::new();\n     let cx = @Context::new(db, lg, cfg);"}]}