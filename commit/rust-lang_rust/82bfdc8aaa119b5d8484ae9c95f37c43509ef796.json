{"sha": "82bfdc8aaa119b5d8484ae9c95f37c43509ef796", "node_id": "C_kwDOAAsO6NoAKDgyYmZkYzhhYWExMTliNWQ4NDg0YWU5Yzk1ZjM3YzQzNTA5ZWY3OTY", "commit": {"author": {"name": "Kai Luo", "email": "lkail@cn.ibm.com", "date": "2023-03-28T02:50:23Z"}, "committer": {"name": "Kai Luo", "email": "lkail@cn.ibm.com", "date": "2023-03-28T02:50:23Z"}, "message": "Address comment", "tree": {"sha": "7c1281085993acc3d3aa1f69423d51b5bda81b7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c1281085993acc3d3aa1f69423d51b5bda81b7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82bfdc8aaa119b5d8484ae9c95f37c43509ef796", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82bfdc8aaa119b5d8484ae9c95f37c43509ef796", "html_url": "https://github.com/rust-lang/rust/commit/82bfdc8aaa119b5d8484ae9c95f37c43509ef796", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82bfdc8aaa119b5d8484ae9c95f37c43509ef796/comments", "author": {"login": "bzEq", "id": 3006405, "node_id": "MDQ6VXNlcjMwMDY0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/3006405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bzEq", "html_url": "https://github.com/bzEq", "followers_url": "https://api.github.com/users/bzEq/followers", "following_url": "https://api.github.com/users/bzEq/following{/other_user}", "gists_url": "https://api.github.com/users/bzEq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bzEq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bzEq/subscriptions", "organizations_url": "https://api.github.com/users/bzEq/orgs", "repos_url": "https://api.github.com/users/bzEq/repos", "events_url": "https://api.github.com/users/bzEq/events{/privacy}", "received_events_url": "https://api.github.com/users/bzEq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bzEq", "id": 3006405, "node_id": "MDQ6VXNlcjMwMDY0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/3006405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bzEq", "html_url": "https://github.com/bzEq", "followers_url": "https://api.github.com/users/bzEq/followers", "following_url": "https://api.github.com/users/bzEq/following{/other_user}", "gists_url": "https://api.github.com/users/bzEq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bzEq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bzEq/subscriptions", "organizations_url": "https://api.github.com/users/bzEq/orgs", "repos_url": "https://api.github.com/users/bzEq/repos", "events_url": "https://api.github.com/users/bzEq/events{/privacy}", "received_events_url": "https://api.github.com/users/bzEq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aad51098d4bae73220aa58180cf562bccc4a213", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aad51098d4bae73220aa58180cf562bccc4a213", "html_url": "https://github.com/rust-lang/rust/commit/5aad51098d4bae73220aa58180cf562bccc4a213"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "5d8002b493e6b61bb2c348bfec4df7b16454f438", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82bfdc8aaa119b5d8484ae9c95f37c43509ef796/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82bfdc8aaa119b5d8484ae9c95f37c43509ef796/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=82bfdc8aaa119b5d8484ae9c95f37c43509ef796", "patch": "@@ -84,7 +84,14 @@ fn current_dll_path() -> Result<PathBuf, String> {\n \n     #[cfg(target_os = \"aix\")]\n     unsafe {\n-        let addr = current_dll_path as u64;\n+        // On AIX, the symbol `current_dll_path` references a function descriptor.\n+        // A function descriptor is consisted of (See https://reviews.llvm.org/D62532)\n+        // * The address of the entry point of the function.\n+        // * The TOC base address for the function.\n+        // * The environment pointer.\n+        // Deref `current_dll_path` directly so that we can get the address of `current_dll_path`'s\n+        // entry point in text section.\n+        let addr = *(current_dll_path as *const u64);\n         let mut buffer = vec![std::mem::zeroed::<libc::ld_info>(); 64];\n         loop {\n             if libc::loadquery(\n@@ -103,19 +110,18 @@ fn current_dll_path() -> Result<PathBuf, String> {\n         }\n         let mut current = buffer.as_mut_ptr() as *mut libc::ld_info;\n         loop {\n-            let data_base = (*current).ldinfo_dataorg as u64;\n-            let data_end = data_base + (*current).ldinfo_datasize;\n             let text_base = (*current).ldinfo_textorg as u64;\n             let text_end = text_base + (*current).ldinfo_textsize;\n-            if (data_base <= addr && addr < data_end) || (text_base <= addr && addr < text_end) {\n+            if (text_base..text_end).contains(&addr) {\n                 let bytes = CStr::from_ptr(&(*current).ldinfo_filename[0]).to_bytes();\n                 let os = OsStr::from_bytes(bytes);\n                 return Ok(PathBuf::from(os));\n             }\n             if (*current).ldinfo_next == 0 {\n                 break;\n             }\n-            current = ((current as u64) + ((*current).ldinfo_next) as u64) as *mut libc::ld_info;\n+            current =\n+                (current as *mut i8).offset((*current).ldinfo_next as isize) as *mut libc::ld_info;\n         }\n         return Err(format!(\"current dll's address {} is not in the load map\", addr));\n     }"}]}