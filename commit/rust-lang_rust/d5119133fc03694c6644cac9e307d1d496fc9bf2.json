{"sha": "d5119133fc03694c6644cac9e307d1d496fc9bf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MTE5MTMzZmMwMzY5NGM2NjQ0Y2FjOWUzMDdkMWQ0OTZmYzliZjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-11T08:03:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-11T08:03:22Z"}, "message": "heck", "tree": {"sha": "c8498441aa91abc5af44ed9f978c98dd419495ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8498441aa91abc5af44ed9f978c98dd419495ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5119133fc03694c6644cac9e307d1d496fc9bf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5119133fc03694c6644cac9e307d1d496fc9bf2", "html_url": "https://github.com/rust-lang/rust/commit/d5119133fc03694c6644cac9e307d1d496fc9bf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5119133fc03694c6644cac9e307d1d496fc9bf2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78f41ea707cc8aeaa8d1ba8a7216cb8712f13e98", "url": "https://api.github.com/repos/rust-lang/rust/commits/78f41ea707cc8aeaa8d1ba8a7216cb8712f13e98", "html_url": "https://github.com/rust-lang/rust/commit/78f41ea707cc8aeaa8d1ba8a7216cb8712f13e98"}], "stats": {"total": 137, "additions": 124, "deletions": 13}, "files": [{"sha": "7a2a9c7d4646057f8ace9a00eefc598fcbb0f127", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/d5119133fc03694c6644cac9e307d1d496fc9bf2/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5119133fc03694c6644cac9e307d1d496fc9bf2/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=d5119133fc03694c6644cac9e307d1d496fc9bf2", "patch": "@@ -4,6 +4,30 @@ use {\n     SyntaxKind::*,\n };\n \n+#[derive(Debug, Clone, Copy)]\n+pub struct ConstItem<R: TreeRoot = Arc<SyntaxRoot>> {\n+    syntax: SyntaxNode<R>,\n+}\n+\n+impl<R: TreeRoot> AstNode<R> for ConstItem<R> {\n+    fn cast(syntax: SyntaxNode<R>) -> Option<Self> {\n+        match syntax.kind() {\n+            CONST_ITEM => Some(ConstItem { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n+}\n+\n+impl<R: TreeRoot> ConstItem<R> {\n+    pub fn name(&self) -> Option<Name<R>> {\n+        self.syntax()\n+            .children()\n+            .filter_map(Name::cast)\n+            .next()\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy)]\n pub struct Enum<R: TreeRoot = Arc<SyntaxRoot>> {\n     syntax: SyntaxNode<R>,\n@@ -75,6 +99,30 @@ impl<R: TreeRoot> Function<R> {\n     }\n }\n \n+#[derive(Debug, Clone, Copy)]\n+pub struct Module<R: TreeRoot = Arc<SyntaxRoot>> {\n+    syntax: SyntaxNode<R>,\n+}\n+\n+impl<R: TreeRoot> AstNode<R> for Module<R> {\n+    fn cast(syntax: SyntaxNode<R>) -> Option<Self> {\n+        match syntax.kind() {\n+            MODULE => Some(Module { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n+}\n+\n+impl<R: TreeRoot> Module<R> {\n+    pub fn name(&self) -> Option<Name<R>> {\n+        self.syntax()\n+            .children()\n+            .filter_map(Name::cast)\n+            .next()\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy)]\n pub struct Name<R: TreeRoot = Arc<SyntaxRoot>> {\n     syntax: SyntaxNode<R>,\n@@ -92,6 +140,30 @@ impl<R: TreeRoot> AstNode<R> for Name<R> {\n \n impl<R: TreeRoot> Name<R> {}\n \n+#[derive(Debug, Clone, Copy)]\n+pub struct StaticItem<R: TreeRoot = Arc<SyntaxRoot>> {\n+    syntax: SyntaxNode<R>,\n+}\n+\n+impl<R: TreeRoot> AstNode<R> for StaticItem<R> {\n+    fn cast(syntax: SyntaxNode<R>) -> Option<Self> {\n+        match syntax.kind() {\n+            STATIC_ITEM => Some(StaticItem { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n+}\n+\n+impl<R: TreeRoot> StaticItem<R> {\n+    pub fn name(&self) -> Option<Name<R>> {\n+        self.syntax()\n+            .children()\n+            .filter_map(Name::cast)\n+            .next()\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy)]\n pub struct Struct<R: TreeRoot = Arc<SyntaxRoot>> {\n     syntax: SyntaxNode<R>,\n@@ -116,3 +188,27 @@ impl<R: TreeRoot> Struct<R> {\n     }\n }\n \n+#[derive(Debug, Clone, Copy)]\n+pub struct Trait<R: TreeRoot = Arc<SyntaxRoot>> {\n+    syntax: SyntaxNode<R>,\n+}\n+\n+impl<R: TreeRoot> AstNode<R> for Trait<R> {\n+    fn cast(syntax: SyntaxNode<R>) -> Option<Self> {\n+        match syntax.kind() {\n+            TRAIT => Some(Trait { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n+}\n+\n+impl<R: TreeRoot> Trait<R> {\n+    pub fn name(&self) -> Option<Name<R>> {\n+        self.syntax()\n+            .children()\n+            .filter_map(Name::cast)\n+            .next()\n+    }\n+}\n+"}, {"sha": "86b8b05d1a6ad4073bb4a34f159fddbfd00c7aa8", "filename": "crates/libsyntax2/src/ast/generated.rs.tera", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5119133fc03694c6644cac9e307d1d496fc9bf2/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/d5119133fc03694c6644cac9e307d1d496fc9bf2/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs.tera?ref=d5119133fc03694c6644cac9e307d1d496fc9bf2", "patch": "@@ -12,7 +12,7 @@ pub struct {{ node }}<R: TreeRoot = Arc<SyntaxRoot>> {\n impl<R: TreeRoot> AstNode<R> for {{ node }}<R> {\n     fn cast(syntax: SyntaxNode<R>) -> Option<Self> {\n         match syntax.kind() {\n-            {{ node | upper }} => Some({{ node }} { syntax }),\n+            {{ node | SCREAM }} => Some({{ node }} { syntax }),\n             _ => None,\n         }\n     }"}, {"sha": "c9470d4fad361bf827df3fb9e126a70a09999d81", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d5119133fc03694c6644cac9e307d1d496fc9bf2/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/d5119133fc03694c6644cac9e307d1d496fc9bf2/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=d5119133fc03694c6644cac9e307d1d496fc9bf2", "patch": "@@ -234,6 +234,26 @@ Grammar(\n                 [\"name\", \"Name\"]\n             ]\n         ),\n+        \"Trait\": (\n+            options: [\n+                [\"name\", \"Name\"]\n+            ]\n+        ),\n+        \"Module\": (\n+            options: [\n+                [\"name\", \"Name\"]\n+            ]\n+        ),\n+        \"ConstItem\": (\n+            options: [\n+                [\"name\", \"Name\"]\n+            ]\n+        ),\n+        \"StaticItem\": (\n+            options: [\n+                [\"name\", \"Name\"]\n+            ]\n+        ),\n         \"Name\": (),\n     },\n )"}, {"sha": "32a6fbc9164c07b3e0853da3be5769eb52b84a91", "filename": "crates/tools/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5119133fc03694c6644cac9e307d1d496fc9bf2/crates%2Ftools%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d5119133fc03694c6644cac9e307d1d496fc9bf2/crates%2Ftools%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2FCargo.toml?ref=d5119133fc03694c6644cac9e307d1d496fc9bf2", "patch": "@@ -12,3 +12,4 @@ tera = \"0.11\"\n clap = \"2.32.0\"\n failure = \"0.1.1\"\n commandspec = \"0.10\"\n+heck = \"0.3.0\""}, {"sha": "b56be141abfeeaae4fcf430178a0d93db39affa2", "filename": "crates/tools/src/main.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d5119133fc03694c6644cac9e307d1d496fc9bf2/crates%2Ftools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5119133fc03694c6644cac9e307d1d496fc9bf2/crates%2Ftools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Fmain.rs?ref=d5119133fc03694c6644cac9e307d1d496fc9bf2", "patch": "@@ -7,8 +7,10 @@ extern crate tools;\n extern crate walkdir;\n #[macro_use]\n extern crate commandspec;\n+extern crate heck;\n \n use clap::{App, Arg, SubCommand};\n+use heck::{CamelCase, ShoutySnakeCase};\n use std::{\n     collections::HashMap,\n     fs,\n@@ -87,18 +89,10 @@ fn render_template(template: &str) -> Result<String> {\n         .map_err(|e| format_err!(\"template error: {:?}\", e))?;\n     tera.register_global_function(\"concat\", Box::new(concat));\n     tera.register_filter(\"camel\", |arg, _| {\n-        Ok(arg.as_str().unwrap()\n-            .split(\"_\")\n-            .flat_map(|word| {\n-                word.chars()\n-                    .next().unwrap()\n-                    .to_uppercase()\n-                    .chain(\n-                        word.chars().skip(1).flat_map(|c| c.to_lowercase())\n-                    )\n-            })\n-            .collect::<String>()\n-            .into())\n+        Ok(arg.as_str().unwrap().to_camel_case().into())\n+    });\n+    tera.register_filter(\"SCREAM\", |arg, _| {\n+        Ok(arg.as_str().unwrap().to_shouty_snake_case().into())\n     });\n     let ret = tera\n         .render(\"grammar\", &grammar)"}]}