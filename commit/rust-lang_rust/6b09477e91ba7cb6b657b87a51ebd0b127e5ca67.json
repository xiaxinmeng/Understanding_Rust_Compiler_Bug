{"sha": "6b09477e91ba7cb6b657b87a51ebd0b127e5ca67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMDk0NzdlOTFiYTdjYjZiNjU3Yjg3YTUxZWJkMGIxMjdlNWNhNjc=", "commit": {"author": {"name": "Albin Stjerna", "email": "albin.stjerna@gmail.com", "date": "2019-07-19T13:38:54Z"}, "committer": {"name": "Albin Stjerna", "email": "albin.stjerna@gmail.com", "date": "2019-09-04T07:46:44Z"}, "message": "Polonius: emit initialization/move tracking facts\n\n- var_starts_path\n- parent\n- initialized_at\n- moved_out_at\n\nThis also switches to the intended emission of `var_drop_used` fact emission,\nwhere that fact is always emitted on a drop-use of a variable, regardless of its\ninitialization status, as Polonius now handles that.", "tree": {"sha": "cd447aa0e3ed54e42bf6604ec129ed8f41d46a73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd447aa0e3ed54e42bf6604ec129ed8f41d46a73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b09477e91ba7cb6b657b87a51ebd0b127e5ca67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b09477e91ba7cb6b657b87a51ebd0b127e5ca67", "html_url": "https://github.com/rust-lang/rust/commit/6b09477e91ba7cb6b657b87a51ebd0b127e5ca67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b09477e91ba7cb6b657b87a51ebd0b127e5ca67/comments", "author": null, "committer": null, "parents": [{"sha": "996ba932ccd03f2372c5c25eaf5f5025d397a73c", "url": "https://api.github.com/repos/rust-lang/rust/commits/996ba932ccd03f2372c5c25eaf5f5025d397a73c", "html_url": "https://github.com/rust-lang/rust/commit/996ba932ccd03f2372c5c25eaf5f5025d397a73c"}], "stats": {"total": 83, "additions": 74, "deletions": 9}, "files": [{"sha": "9b920eb15599dd968789884afc18d05e465b7f01", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6b09477e91ba7cb6b657b87a51ebd0b127e5ca67/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b09477e91ba7cb6b657b87a51ebd0b127e5ca67/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=6b09477e91ba7cb6b657b87a51ebd0b127e5ca67", "patch": "@@ -4,14 +4,14 @@ use crate::borrow_check::nll::facts::AllFactsExt;\n use crate::borrow_check::nll::type_check::{MirTypeckResults, MirTypeckRegionConstraints};\n use crate::borrow_check::nll::region_infer::values::RegionValueElements;\n use crate::dataflow::indexes::BorrowIndex;\n-use crate::dataflow::move_paths::{MoveData, MovePathIndex};\n+use crate::dataflow::move_paths::{InitLocation, MoveData, MovePathIndex, InitKind};\n use crate::dataflow::FlowAtLocation;\n use crate::dataflow::MaybeInitializedPlaces;\n use crate::transform::MirSource;\n use crate::borrow_check::Upvar;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n-use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements, Local, Body, Promoted};\n+use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements, Local, Location, Body, LocalKind, BasicBlock, Promoted};\n use rustc::ty::{self, RegionKind, RegionVid};\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_errors::Diagnostic;\n@@ -69,6 +69,61 @@ pub(in crate::borrow_check) fn replace_regions_in_mir<'cx, 'tcx>(\n     universal_regions\n }\n \n+\n+// This function populates an AllFacts instance with base facts related to\n+// MovePaths and needed for the move analysis.\n+fn populate_polonius_move_facts(all_facts: &mut AllFacts, move_data: &MoveData<'_>, location_table: &LocationTable, body: &Body<'_>) {\n+    all_facts.var_starts_path.extend(move_data.rev_lookup.iter_locals_enumerated().map(|(v, &m)| (v, m)));\n+\n+    for (idx, move_path) in move_data.move_paths.iter_enumerated() {\n+        all_facts.parent.extend(move_path.parents(&move_data.move_paths).iter().map(|&parent| (parent, idx)));\n+    }\n+\n+    // initialized_at\n+    for init in move_data.inits.iter() {\n+\n+        match init.location {\n+            InitLocation::Statement(location) => {\n+                let block_data = &body[location.block];\n+                let is_terminator = location.statement_index == block_data.statements.len();\n+\n+                if is_terminator && init.kind == InitKind::NonPanicPathOnly {\n+                    // We are at the terminator of an init that has a panic path,\n+                    // and where the init should not happen on panic\n+\n+                    for &successor in block_data.terminator().successors() {\n+                        if body[successor].is_cleanup {\n+                            continue;\n+                        }\n+\n+                        // The initialization happened in (or rather, when arriving at)\n+                        // the successors, but not in the unwind block.\n+                        let first_statement = Location { block: successor, statement_index: 0};\n+                        all_facts.initialized_at.push((init.path, location_table.start_index(first_statement)));\n+                    }\n+\n+                } else {\n+                    // In all other cases, the initialization just happens at the\n+                    // midpoint, like any other effect.\n+                    all_facts.initialized_at.push((init.path, location_table.mid_index(location)));\n+                }\n+            },\n+            // Arguments are initialized on function entry\n+            InitLocation::Argument(local) => {\n+                assert!(body.local_kind(local) == LocalKind::Arg);\n+                let fn_entry = Location {block: BasicBlock::from_u32(0u32), statement_index: 0 };\n+                all_facts.initialized_at.push((init.path, location_table.start_index(fn_entry)));\n+\n+            }\n+        }\n+    }\n+\n+\n+    // moved_out_at\n+    // deinitialisation is assumed to always happen!\n+    all_facts.moved_out_at.extend(move_data.moves.iter().map(|mo| (mo.path, location_table.mid_index(mo.source))));\n+}\n+\n /// Computes the (non-lexical) regions from the input MIR.\n ///\n /// This may result in errors being reported.\n@@ -123,6 +178,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n         all_facts\n             .universal_region\n             .extend(universal_regions.universal_regions());\n+        populate_polonius_move_facts(all_facts, move_data, location_table, body);\n     }\n \n     // Create the region inference context, taking ownership of the"}, {"sha": "dcdacbbe5be06b5a7b07d86ac737ffe1191b375b", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/polonius.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b09477e91ba7cb6b657b87a51ebd0b127e5ca67/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b09477e91ba7cb6b657b87a51ebd0b127e5ca67/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=6b09477e91ba7cb6b657b87a51ebd0b127e5ca67", "patch": "@@ -13,6 +13,7 @@ struct LivenessPointFactsExtractor<'me> {\n     var_defined: &'me mut VarPointRelations,\n     var_used: &'me mut VarPointRelations,\n     location_table: &'me LocationTable,\n+    var_drop_used: &'me mut VarPointRelations,\n }\n \n // A Visitor to walk through the MIR and extract point-wise facts\n@@ -30,15 +31,20 @@ impl LivenessPointFactsExtractor<'_> {\n         debug!(\"LivenessFactsExtractor::insert_use()\");\n         self.var_used.push((local, self.location_to_index(location)));\n     }\n+\n+    fn insert_drop_use(&mut self, local: Local, location: Location) {\n+        debug!(\"LivenessFactsExtractor::insert_drop_use()\");\n+        self.var_drop_used.push((local, self.location_to_index(location)));\n+    }\n }\n \n impl Visitor<'tcx> for LivenessPointFactsExtractor<'_> {\n     fn visit_local(&mut self, &local: &Local, context: PlaceContext, location: Location) {\n         match categorize(context) {\n             Some(DefUse::Def) => self.insert_def(local, location),\n             Some(DefUse::Use) => self.insert_use(local, location),\n+            Some(DefUse::Drop) => self.insert_drop_use(local, location),\n             _ => (),\n-            // NOTE: Drop handling is now done in trace()\n         }\n     }\n }\n@@ -65,6 +71,7 @@ pub(super) fn populate_var_liveness_facts(\n         LivenessPointFactsExtractor {\n             var_defined: &mut facts.var_defined,\n             var_used: &mut facts.var_used,\n+            var_drop_used: &mut facts.var_drop_used,\n             location_table,\n         }\n         .visit_body(mir);"}, {"sha": "1e1768a8e460177925a227505b2c79bcdd08f8bf", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b09477e91ba7cb6b657b87a51ebd0b127e5ca67/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b09477e91ba7cb6b657b87a51ebd0b127e5ca67/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=6b09477e91ba7cb6b657b87a51ebd0b127e5ca67", "patch": "@@ -273,11 +273,6 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n             debug_assert_eq!(self.cx.body.terminator_loc(location.block), location,);\n \n             if self.cx.initialized_at_terminator(location.block, mpi) {\n-                // FIXME: this analysis (the initialization tracking) should be\n-                // done in Polonius, but isn't yet.\n-                if let Some(facts) = self.cx.typeck.borrowck_context.all_facts {\n-                    facts.var_drop_used.push((local, self.cx.location_table.mid_index(location)));\n-                }\n                 if self.drop_live_at.insert(drop_point) {\n                     self.drop_locations.push(location);\n                     self.stack.push(drop_point);"}, {"sha": "07b9b662a07aa89db9b10a451796aedb0e8056b0", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b09477e91ba7cb6b657b87a51ebd0b127e5ca67/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b09477e91ba7cb6b657b87a51ebd0b127e5ca67/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=6b09477e91ba7cb6b657b87a51ebd0b127e5ca67", "patch": "@@ -1,9 +1,10 @@\n use rustc::ty::{Ty, TyCtxt};\n use rustc::mir::*;\n use rustc::util::nodemap::FxHashMap;\n-use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n+use rustc_data_structures::indexed_vec::{Idx, IndexVec, Enumerated};\n use smallvec::SmallVec;\n use syntax_pos::{Span};\n+use core::slice::Iter;\n \n use std::fmt;\n use std::ops::{Index, IndexMut};\n@@ -262,6 +263,12 @@ impl MovePathLookup {\n     pub fn find_local(&self, local: Local) -> MovePathIndex {\n         self.locals[local]\n     }\n+\n+    /// An enumerated iterator of `local`s and their associated\n+    /// `MovePathIndex`es.\n+    pub fn iter_locals_enumerated(&self) -> Enumerated<Local, Iter<'_, MovePathIndex>> {\n+        self.locals.iter_enumerated()\n+    }\n }\n \n #[derive(Debug)]"}]}