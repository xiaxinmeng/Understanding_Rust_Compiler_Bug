{"sha": "e1cf38fa8932b8961c03338b585138c610c4cec4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxY2YzOGZhODkzMmI4OTYxYzAzMzM4YjU4NTEzOGM2MTBjNGNlYzQ=", "commit": {"author": {"name": "Max Wase", "email": "max.vvase@gmail.com", "date": "2021-05-27T12:20:36Z"}, "committer": {"name": "Max Wase", "email": "max.vvase@gmail.com", "date": "2021-05-27T12:20:36Z"}, "message": "Add `is_symlink()` method for `Path`.", "tree": {"sha": "668797a553e2b5d7108d6af0e2524ee8dee00cfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/668797a553e2b5d7108d6af0e2524ee8dee00cfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1cf38fa8932b8961c03338b585138c610c4cec4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1cf38fa8932b8961c03338b585138c610c4cec4", "html_url": "https://github.com/rust-lang/rust/commit/e1cf38fa8932b8961c03338b585138c610c4cec4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1cf38fa8932b8961c03338b585138c610c4cec4/comments", "author": {"login": "maxwase", "id": 23321756, "node_id": "MDQ6VXNlcjIzMzIxNzU2", "avatar_url": "https://avatars.githubusercontent.com/u/23321756?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxwase", "html_url": "https://github.com/maxwase", "followers_url": "https://api.github.com/users/maxwase/followers", "following_url": "https://api.github.com/users/maxwase/following{/other_user}", "gists_url": "https://api.github.com/users/maxwase/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxwase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxwase/subscriptions", "organizations_url": "https://api.github.com/users/maxwase/orgs", "repos_url": "https://api.github.com/users/maxwase/repos", "events_url": "https://api.github.com/users/maxwase/events{/privacy}", "received_events_url": "https://api.github.com/users/maxwase/received_events", "type": "User", "site_admin": false}, "committer": {"login": "maxwase", "id": 23321756, "node_id": "MDQ6VXNlcjIzMzIxNzU2", "avatar_url": "https://avatars.githubusercontent.com/u/23321756?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxwase", "html_url": "https://github.com/maxwase", "followers_url": "https://api.github.com/users/maxwase/followers", "following_url": "https://api.github.com/users/maxwase/following{/other_user}", "gists_url": "https://api.github.com/users/maxwase/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxwase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxwase/subscriptions", "organizations_url": "https://api.github.com/users/maxwase/orgs", "repos_url": "https://api.github.com/users/maxwase/repos", "events_url": "https://api.github.com/users/maxwase/events{/privacy}", "received_events_url": "https://api.github.com/users/maxwase/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9814e830942dcc65e69a0d077cb2e013b5948795", "url": "https://api.github.com/repos/rust-lang/rust/commits/9814e830942dcc65e69a0d077cb2e013b5948795", "html_url": "https://github.com/rust-lang/rust/commit/9814e830942dcc65e69a0d077cb2e013b5948795"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "efee31f99158b6325aa677c1b3a680e9248e24ee", "filename": "library/std/src/path.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e1cf38fa8932b8961c03338b585138c610c4cec4/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1cf38fa8932b8961c03338b585138c610c4cec4/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=e1cf38fa8932b8961c03338b585138c610c4cec4", "patch": "@@ -2568,6 +2568,32 @@ impl Path {\n         fs::metadata(self).map(|m| m.is_dir()).unwrap_or(false)\n     }\n \n+    /// Returns true if the path exists on disk and is pointing at a symbolic link file.\n+    /// This method can alse be used to check whether symlink exists.\n+    ///\n+    /// This function will not traverse symbolic links.\n+    /// In case of broken symbolic links this will also return true.\n+    ///\n+    /// If you cannot access the directory containing the file, e.g., because of a\n+    /// permission error, this will return false.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::path::Path;\n+    /// use std::os::unix::fs::symlink;\n+    ///\n+    /// let link_path = Path::new(\"/link\");\n+    /// symlink(\"/origin_does_not_exists/\", link_path)?;\n+    /// assert_eq!(link_path.is_symlink(), true);\n+    /// assert_eq!(link_path.exists(), false);\n+    /// ```\n+    #[unstable(feature = \"path_ext\", issue = \"none\")]\n+    #[inline]\n+    pub fn is_symlink(&self) -> bool {\n+        fs::symlink_metadata(self).is_ok()\n+    }\n+\n     /// Converts a [`Box<Path>`](Box) into a [`PathBuf`] without copying or\n     /// allocating.\n     #[stable(feature = \"into_boxed_path\", since = \"1.20.0\")]"}]}