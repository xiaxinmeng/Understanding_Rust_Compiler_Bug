{"sha": "2c028452b5837a8d35485f24c4b18ede8da6b191", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMDI4NDUyYjU4MzdhOGQzNTQ4NWYyNGM0YjE4ZWRlOGRhNmIxOTE=", "commit": {"author": {"name": "Murarth", "email": "murarth@gmail.com", "date": "2014-11-24T18:55:14Z"}, "committer": {"name": "Murarth", "email": "murarth@gmail.com", "date": "2014-12-11T22:33:27Z"}, "message": "Add LLVM ExecutionEngine API", "tree": {"sha": "a074e96142888eae78e6c84d9357a3ba3a722c1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a074e96142888eae78e6c84d9357a3ba3a722c1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c028452b5837a8d35485f24c4b18ede8da6b191", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c028452b5837a8d35485f24c4b18ede8da6b191", "html_url": "https://github.com/rust-lang/rust/commit/2c028452b5837a8d35485f24c4b18ede8da6b191", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c028452b5837a8d35485f24c4b18ede8da6b191/comments", "author": {"login": "murarth", "id": 1332722, "node_id": "MDQ6VXNlcjEzMzI3MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1332722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/murarth", "html_url": "https://github.com/murarth", "followers_url": "https://api.github.com/users/murarth/followers", "following_url": "https://api.github.com/users/murarth/following{/other_user}", "gists_url": "https://api.github.com/users/murarth/gists{/gist_id}", "starred_url": "https://api.github.com/users/murarth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/murarth/subscriptions", "organizations_url": "https://api.github.com/users/murarth/orgs", "repos_url": "https://api.github.com/users/murarth/repos", "events_url": "https://api.github.com/users/murarth/events{/privacy}", "received_events_url": "https://api.github.com/users/murarth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "murarth", "id": 1332722, "node_id": "MDQ6VXNlcjEzMzI3MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1332722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/murarth", "html_url": "https://github.com/murarth", "followers_url": "https://api.github.com/users/murarth/followers", "following_url": "https://api.github.com/users/murarth/following{/other_user}", "gists_url": "https://api.github.com/users/murarth/gists{/gist_id}", "starred_url": "https://api.github.com/users/murarth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/murarth/subscriptions", "organizations_url": "https://api.github.com/users/murarth/orgs", "repos_url": "https://api.github.com/users/murarth/repos", "events_url": "https://api.github.com/users/murarth/events{/privacy}", "received_events_url": "https://api.github.com/users/murarth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c38e73fef53e8520e5170c40713e32ab965a8abe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c38e73fef53e8520e5170c40713e32ab965a8abe", "html_url": "https://github.com/rust-lang/rust/commit/c38e73fef53e8520e5170c40713e32ab965a8abe"}], "stats": {"total": 130, "additions": 129, "deletions": 1}, "files": [{"sha": "44225020811c0470848bb5130b4f022e970b6142", "filename": "mk/rustllvm.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c028452b5837a8d35485f24c4b18ede8da6b191/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2c028452b5837a8d35485f24c4b18ede8da6b191/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=2c028452b5837a8d35485f24c4b18ede8da6b191", "patch": "@@ -22,7 +22,8 @@ LLVM_EXTRA_INCDIRS_$(1)= -iquote $(S)src/llvm/include \\\n                          -iquote $$(CFG_LLVM_BUILD_DIR_$(1))/include\n endif\n \n-RUSTLLVM_OBJS_CS_$(1) := $$(addprefix rustllvm/, RustWrapper.cpp PassWrapper.cpp)\n+RUSTLLVM_OBJS_CS_$(1) := $$(addprefix rustllvm/, \\\n+\tExecutionEngineWrapper.cpp RustWrapper.cpp PassWrapper.cpp)\n \n RUSTLLVM_DEF_$(1) := $(1)/rustllvm/rustllvm$(CFG_DEF_SUFFIX_$(1))\n "}, {"sha": "46640ebccce4a51361d62b336d70070356de195f", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2c028452b5837a8d35485f24c4b18ede8da6b191/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c028452b5837a8d35485f24c4b18ede8da6b191/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=2c028452b5837a8d35485f24c4b18ede8da6b191", "patch": "@@ -466,6 +466,9 @@ pub type BuilderRef = *mut Builder_opaque;\n pub enum ExecutionEngine_opaque {}\n pub type ExecutionEngineRef = *mut ExecutionEngine_opaque;\n #[allow(missing_copy_implementations)]\n+pub enum RustJITMemoryManager_opaque {}\n+pub type RustJITMemoryManagerRef = *mut RustJITMemoryManager_opaque;\n+#[allow(missing_copy_implementations)]\n pub enum MemoryBuffer_opaque {}\n pub type MemoryBufferRef = *mut MemoryBuffer_opaque;\n #[allow(missing_copy_implementations)]\n@@ -1064,7 +1067,18 @@ extern {\n                                          Instr: ValueRef,\n                                          Name: *const c_char);\n     pub fn LLVMDisposeBuilder(Builder: BuilderRef);\n+\n+    /* Execution engine */\n+    pub fn LLVMRustCreateJITMemoryManager(morestack: *const ())\n+                                          -> RustJITMemoryManagerRef;\n+    pub fn LLVMBuildExecutionEngine(Mod: ModuleRef,\n+                                    MM: RustJITMemoryManagerRef) -> ExecutionEngineRef;\n     pub fn LLVMDisposeExecutionEngine(EE: ExecutionEngineRef);\n+    pub fn LLVMExecutionEngineFinalizeObject(EE: ExecutionEngineRef);\n+    pub fn LLVMRustLoadDynamicLibrary(path: *const c_char) -> Bool;\n+    pub fn LLVMExecutionEngineAddModule(EE: ExecutionEngineRef, M: ModuleRef);\n+    pub fn LLVMExecutionEngineRemoveModule(EE: ExecutionEngineRef, M: ModuleRef)\n+                                           -> Bool;\n \n     /* Metadata */\n     pub fn LLVMSetCurrentDebugLocation(Builder: BuilderRef, L: ValueRef);"}, {"sha": "d37cf9d12a5e0b063e7e54c3153fc8c99247abd9", "filename": "src/rustllvm/ExecutionEngineWrapper.cpp", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/2c028452b5837a8d35485f24c4b18ede8da6b191/src%2Frustllvm%2FExecutionEngineWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2c028452b5837a8d35485f24c4b18ede8da6b191/src%2Frustllvm%2FExecutionEngineWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FExecutionEngineWrapper.cpp?ref=2c028452b5837a8d35485f24c4b18ede8da6b191", "patch": "@@ -0,0 +1,112 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#include \"rustllvm.h\"\n+\n+#include \"llvm/ExecutionEngine/SectionMemoryManager.h\"\n+\n+using namespace llvm;\n+using namespace llvm::sys;\n+using namespace llvm::object;\n+\n+class RustJITMemoryManager : public SectionMemoryManager\n+{\n+    typedef SectionMemoryManager Base;\n+\n+    const void *morestack;\n+\n+    public:\n+\n+    RustJITMemoryManager(const void *morestack_ptr)\n+        : morestack(morestack_ptr)\n+        {}\n+\n+    uint64_t getSymbolAddress(const std::string &Name) override\n+    {\n+        if (Name == \"__morestack\" || Name == \"___morestack\")\n+            return reinterpret_cast<uint64_t>(morestack);\n+\n+        return Base::getSymbolAddress(Name);\n+    }\n+};\n+\n+DEFINE_SIMPLE_CONVERSION_FUNCTIONS(RustJITMemoryManager, LLVMRustJITMemoryManagerRef)\n+\n+extern \"C\" LLVMRustJITMemoryManagerRef LLVMRustCreateJITMemoryManager(void *morestack)\n+{\n+    return wrap(new RustJITMemoryManager(morestack));\n+}\n+\n+extern \"C\" LLVMBool LLVMRustLoadDynamicLibrary(const char *path)\n+{\n+    std::string err;\n+    DynamicLibrary lib = DynamicLibrary::getPermanentLibrary(path, &err);\n+\n+    if (!lib.isValid())\n+        LLVMRustSetLastError(err.c_str());\n+\n+    return lib.isValid();\n+}\n+\n+// Calls LLVMAddModule;\n+// exists for consistency with LLVMExecutionEngineRemoveModule\n+extern \"C\" void LLVMExecutionEngineAddModule(\n+    LLVMExecutionEngineRef eeref, LLVMModuleRef mref)\n+{\n+    LLVMAddModule(eeref, mref);\n+}\n+\n+// LLVMRemoveModule exists in LLVM's C bindings,\n+// but it requires pointless parameters\n+extern \"C\" LLVMBool LLVMExecutionEngineRemoveModule(\n+    LLVMExecutionEngineRef eeref, LLVMModuleRef mref)\n+{\n+    ExecutionEngine *ee = unwrap(eeref);\n+    Module *m = unwrap(mref);\n+\n+    return ee->removeModule(m);\n+}\n+\n+extern \"C\" LLVMExecutionEngineRef LLVMBuildExecutionEngine(\n+    LLVMModuleRef mod, LLVMRustJITMemoryManagerRef mref)\n+{\n+    // These are necessary for code generation to work properly.\n+    InitializeNativeTarget();\n+    InitializeNativeTargetAsmPrinter();\n+    InitializeNativeTargetAsmParser();\n+\n+    std::unique_ptr<Module> m(unwrap(mod));\n+    RustJITMemoryManager *mm = unwrap(mref);\n+\n+    std::string error_str;\n+    TargetOptions options;\n+\n+    options.JITEmitDebugInfo = true;\n+    options.NoFramePointerElim = true;\n+\n+    ExecutionEngine *ee = EngineBuilder(std::move(m))\n+        .setEngineKind(EngineKind::JIT)\n+        .setErrorStr(&error_str)\n+        .setMCJITMemoryManager(mm)\n+        .setTargetOptions(options)\n+        .create();\n+\n+    if (!ee)\n+        LLVMRustSetLastError(error_str.c_str());\n+\n+    return wrap(ee);\n+}\n+\n+extern \"C\" void LLVMExecutionEngineFinalizeObject(LLVMExecutionEngineRef eeref)\n+{\n+    ExecutionEngine *ee = unwrap(eeref);\n+\n+    ee->finalizeObject();\n+}"}, {"sha": "33dec63a728e1d874df2f75efbd18cf10571a5c8", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c028452b5837a8d35485f24c4b18ede8da6b191/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/2c028452b5837a8d35485f24c4b18ede8da6b191/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=2c028452b5837a8d35485f24c4b18ede8da6b191", "patch": "@@ -72,6 +72,7 @@ typedef struct OpaqueRustString *RustStringRef;\n typedef struct LLVMOpaqueTwine *LLVMTwineRef;\n typedef struct LLVMOpaqueDebugLoc *LLVMDebugLocRef;\n typedef struct LLVMOpaqueSMDiagnostic *LLVMSMDiagnosticRef;\n+typedef struct LLVMOpaqueRustJITMemoryManager *LLVMRustJITMemoryManagerRef;\n \n extern \"C\" void\n rust_llvm_string_write_impl(RustStringRef str, const char *ptr, size_t size);"}]}