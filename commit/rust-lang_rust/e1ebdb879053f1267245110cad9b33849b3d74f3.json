{"sha": "e1ebdb879053f1267245110cad9b33849b3d74f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZWJkYjg3OTA1M2YxMjY3MjQ1MTEwY2FkOWIzMzg0OWIzZDc0ZjM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-15T00:58:02Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-15T01:03:21Z"}, "message": "std::trie: optimise insert slightly.\n\nThis reduces the number of moves/memcpy's we do, which makes insert\nfaster, especially in cases of keys with long equal prefixes (the\n_low_bits tests):\n\nBefore:\n\n    bench_insert_large                ... bench:    553966 ns/iter (+/- 64050)\n    bench_insert_large_low_bits       ... bench:   1048151 ns/iter (+/- 92484)\n    bench_insert_small                ... bench:    168840 ns/iter (+/- 22410)\n    bench_insert_small_low_bits       ... bench:    185069 ns/iter (+/- 38332)\n\nAfter:\n\n    bench_insert_large                ... bench:    422132 ns/iter (+/- 35112)\n    bench_insert_large_low_bits       ... bench:    339083 ns/iter (+/- 34421)\n    bench_insert_small                ... bench:    134539 ns/iter (+/- 15254)\n    bench_insert_small_low_bits       ... bench:     88775 ns/iter (+/- 5746)", "tree": {"sha": "684cdeb55f5350e4d2dec257800cbd6d80a956d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/684cdeb55f5350e4d2dec257800cbd6d80a956d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1ebdb879053f1267245110cad9b33849b3d74f3", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1ebdb879053f1267245110cad9b33849b3d74f3", "html_url": "https://github.com/rust-lang/rust/commit/e1ebdb879053f1267245110cad9b33849b3d74f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1ebdb879053f1267245110cad9b33849b3d74f3/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b5e63ff2d0af07aae5a5c99ce9b1595e74fbc1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b5e63ff2d0af07aae5a5c99ce9b1595e74fbc1f", "html_url": "https://github.com/rust-lang/rust/commit/6b5e63ff2d0af07aae5a5c99ce9b1595e74fbc1f"}], "stats": {"total": 70, "additions": 36, "deletions": 34}, "files": [{"sha": "d8df84bbba8d1b88a90deabbdd5889758f60e7ce", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 36, "deletions": 34, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e1ebdb879053f1267245110cad9b33849b3d74f3/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1ebdb879053f1267245110cad9b33849b3d74f3/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=e1ebdb879053f1267245110cad9b33849b3d74f3", "patch": "@@ -12,7 +12,7 @@\n \n use prelude::*;\n use uint;\n-use util::{swap, replace};\n+use util::replace;\n use vec;\n \n // FIXME: #5244: need to manually update the TrieNode constructor\n@@ -415,39 +415,41 @@ fn find_mut<'r, T>(child: &'r mut Child<T>, key: uint, idx: uint) -> Option<&'r\n \n fn insert<T>(count: &mut uint, child: &mut Child<T>, key: uint, value: T,\n              idx: uint) -> Option<T> {\n-    let mut tmp = Nothing;\n-    let ret;\n-    swap(&mut tmp, child);\n-\n-    *child = match tmp {\n-      External(stored_key, stored_value) => {\n-          if stored_key == key {\n-              ret = Some(stored_value);\n-              External(stored_key, value)\n-          } else {\n-              // conflict - split the node\n-              let mut new = ~TrieNode::new();\n-              insert(&mut new.count,\n-                     &mut new.children[chunk(stored_key, idx)],\n-                     stored_key, stored_value, idx + 1);\n-              ret = insert(&mut new.count, &mut new.children[chunk(key, idx)],\n-                           key, value, idx + 1);\n-              Internal(new)\n-          }\n-      }\n-      Internal(x) => {\n-        let mut x = x;\n-        ret = insert(&mut x.count, &mut x.children[chunk(key, idx)], key,\n-                     value, idx + 1);\n-        Internal(x)\n-      }\n-      Nothing => {\n-        *count += 1;\n-        ret = None;\n-        External(key, value)\n-      }\n-    };\n-    return ret;\n+    // we branch twice to avoid having to do the `replace` when we\n+    // don't need to; this is much faster, especially for keys that\n+    // have long shared prefixes.\n+    match *child {\n+        Nothing => {\n+            *count += 1;\n+            *child = External(key, value);\n+            return None;\n+        }\n+        Internal(ref mut x) => {\n+            return insert(&mut x.count, &mut x.children[chunk(key, idx)], key, value, idx + 1);\n+        }\n+        External(stored_key, ref mut stored_value) if stored_key == key => {\n+            // swap in the new value and return the old.\n+            return Some(replace(stored_value, value));\n+        }\n+        _ => {}\n+    }\n+\n+    // conflict, an external node with differing keys: we have to\n+    // split the node, so we need the old value by value; hence we\n+    // have to move out of `child`.\n+    match replace(child, Nothing) {\n+        External(stored_key, stored_value) => {\n+            let mut new = ~TrieNode::new();\n+            insert(&mut new.count,\n+                   &mut new.children[chunk(stored_key, idx)],\n+                   stored_key, stored_value, idx + 1);\n+            let ret = insert(&mut new.count, &mut new.children[chunk(key, idx)],\n+                         key, value, idx + 1);\n+            *child = Internal(new);\n+            return ret;\n+        }\n+        _ => unreachable!()\n+    }\n }\n \n fn remove<T>(count: &mut uint, child: &mut Child<T>, key: uint,"}]}