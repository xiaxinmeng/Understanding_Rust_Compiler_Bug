{"sha": "de87e83d88876d810b475559d95c1741e54ffd9d", "node_id": "C_kwDOAAsO6NoAKGRlODdlODNkODg4NzZkODEwYjQ3NTU1OWQ5NWMxNzQxZTU0ZmZkOWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-25T07:45:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-25T07:45:32Z"}, "message": "Auto merge of #9700 - andreubotella:from-raw-with-void-non-box, r=flip1995\n\nUpdate `from_raw_with_void_ptr` to support types other than `Box`\n\nThis PR updates the `from_raw_with_void_ptr` lint, which covered\n`Box::from_raw`, to also cover the `from_raw` static method of the\n`Rc`, `Arc`, `alloc::rc::Weak` and `alloc::sync::Weak` types.\n\nIt also improves the description and error messages of this lint.\n\n---\n\nchangelog: [`from_raw_with_void_ptr`]: Now works with the `Rc`, `Arc`, `alloc::rc::Weak` and `alloc::sync::Weak` types.", "tree": {"sha": "6429309512a6029f7ac35f7c5fce5c867ad06d6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6429309512a6029f7ac35f7c5fce5c867ad06d6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de87e83d88876d810b475559d95c1741e54ffd9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de87e83d88876d810b475559d95c1741e54ffd9d", "html_url": "https://github.com/rust-lang/rust/commit/de87e83d88876d810b475559d95c1741e54ffd9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de87e83d88876d810b475559d95c1741e54ffd9d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f16596b6a8fa00395c0fef529225a2093a5a6ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f16596b6a8fa00395c0fef529225a2093a5a6ac", "html_url": "https://github.com/rust-lang/rust/commit/6f16596b6a8fa00395c0fef529225a2093a5a6ac"}, {"sha": "e49cde7500de100b4e30e86bff653d4f4660a496", "url": "https://api.github.com/repos/rust-lang/rust/commits/e49cde7500de100b4e30e86bff653d4f4660a496", "html_url": "https://github.com/rust-lang/rust/commit/e49cde7500de100b4e30e86bff653d4f4660a496"}], "stats": {"total": 124, "additions": 105, "deletions": 19}, "files": [{"sha": "00f5ba56496ecd5486a2c395f3d28a4fdcf2e6a6", "filename": "clippy_lints/src/from_raw_with_void_ptr.rs", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/de87e83d88876d810b475559d95c1741e54ffd9d/clippy_lints%2Fsrc%2Ffrom_raw_with_void_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de87e83d88876d810b475559d95c1741e54ffd9d/clippy_lints%2Fsrc%2Ffrom_raw_with_void_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_raw_with_void_ptr.rs?ref=de87e83d88876d810b475559d95c1741e54ffd9d", "patch": "@@ -1,25 +1,22 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::path_def_id;\n use clippy_utils::ty::is_c_void;\n+use clippy_utils::{match_def_path, path_def_id, paths};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::{Expr, ExprKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::RawPtr;\n use rustc_middle::ty::TypeAndMut;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks if we're passing a `c_void` raw pointer to `Box::from_raw(_)`\n+    /// Checks if we're passing a `c_void` raw pointer to `{Box,Rc,Arc,Weak}::from_raw(_)`\n     ///\n     /// ### Why is this bad?\n-    /// However, it is easy to run into the pitfall of calling from_raw with the c_void pointer.\n-    /// Note that the definition of, say, Box::from_raw is:\n-    ///\n-    /// `pub unsafe fn from_raw(raw: *mut T) -> Box<T>`\n-    ///\n-    /// meaning that if you pass a *mut c_void you will get a Box<c_void>.\n-    /// Per the safety requirements in the documentation, for this to be safe,\n-    /// c_void would need to have the same memory layout as the original type, which is often not the case.\n+    /// When dealing with `c_void` raw pointers in FFI, it is easy to run into the pitfall of calling `from_raw` with the `c_void` pointer.\n+    /// The type signature of `Box::from_raw` is `fn from_raw(raw: *mut T) -> Box<T>`, so if you pass a `*mut c_void` you will get a `Box<c_void>` (and similarly for `Rc`, `Arc` and `Weak`).\n+    /// For this to be safe, `c_void` would need to have the same memory layout as the original type, which is often not the case.\n     ///\n     /// ### Example\n     /// ```rust\n@@ -37,7 +34,7 @@ declare_clippy_lint! {\n     #[clippy::version = \"1.66.0\"]\n     pub FROM_RAW_WITH_VOID_PTR,\n     suspicious,\n-    \"creating a `Box` from a raw void pointer\"\n+    \"creating a `Box` from a void raw pointer\"\n }\n declare_lint_pass!(FromRawWithVoidPtr => [FROM_RAW_WITH_VOID_PTR]);\n \n@@ -46,12 +43,35 @@ impl LateLintPass<'_> for FromRawWithVoidPtr {\n         if let ExprKind::Call(box_from_raw, [arg]) = expr.kind\n         && let ExprKind::Path(QPath::TypeRelative(ty, seg)) = box_from_raw.kind\n         && seg.ident.name == sym!(from_raw)\n-        // FIXME: This lint is also applicable to other types, like `Rc`, `Arc` and `Weak`.\n-        && path_def_id(cx, ty).map_or(false, |id| Some(id) == cx.tcx.lang_items().owned_box())\n+        && let Some(type_str) = path_def_id(cx, ty).and_then(|id| def_id_matches_type(cx, id))\n         && let arg_kind = cx.typeck_results().expr_ty(arg).kind()\n         && let RawPtr(TypeAndMut { ty, .. }) = arg_kind\n         && is_c_void(cx, *ty) {\n-            span_lint_and_help(cx, FROM_RAW_WITH_VOID_PTR, expr.span, \"creating a `Box` from a raw void pointer\", Some(arg.span), \"cast this to a pointer of the actual type\");\n+            let msg = format!(\"creating a `{type_str}` from a void raw pointer\");\n+            span_lint_and_help(cx, FROM_RAW_WITH_VOID_PTR, expr.span, &msg, Some(arg.span), \"cast this to a pointer of the appropriate type\");\n+        }\n+    }\n+}\n+\n+/// Checks whether a `DefId` matches `Box`, `Rc`, `Arc`, or one of the `Weak` types.\n+/// Returns a static string slice with the name of the type, if one was found.\n+fn def_id_matches_type(cx: &LateContext<'_>, def_id: DefId) -> Option<&'static str> {\n+    // Box\n+    if Some(def_id) == cx.tcx.lang_items().owned_box() {\n+        return Some(\"Box\");\n+    }\n+\n+    if let Some(symbol) = cx.tcx.get_diagnostic_name(def_id) {\n+        if symbol == sym::Arc {\n+            return Some(\"Arc\");\n+        } else if symbol == sym::Rc {\n+            return Some(\"Rc\");\n         }\n     }\n+\n+    if match_def_path(cx, def_id, &paths::WEAK_RC) || match_def_path(cx, def_id, &paths::WEAK_ARC) {\n+        Some(\"Weak\")\n+    } else {\n+        None\n+    }\n }"}, {"sha": "8484da2415ab3af0a1278529ceeff26c58e2f31a", "filename": "tests/ui/from_raw_with_void_ptr.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/de87e83d88876d810b475559d95c1741e54ffd9d/tests%2Fui%2Ffrom_raw_with_void_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de87e83d88876d810b475559d95c1741e54ffd9d/tests%2Fui%2Ffrom_raw_with_void_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_raw_with_void_ptr.rs?ref=de87e83d88876d810b475559d95c1741e54ffd9d", "patch": "@@ -1,6 +1,8 @@\n #![warn(clippy::from_raw_with_void_ptr)]\n \n use std::ffi::c_void;\n+use std::rc::Rc;\n+use std::sync::Arc;\n \n fn main() {\n     // must lint\n@@ -13,4 +15,20 @@ fn main() {\n     // shouldn't be linted\n     let should_not_lint_ptr = Box::into_raw(Box::new(12u8)) as *mut u8;\n     let _ = unsafe { Box::from_raw(should_not_lint_ptr as *mut u8) };\n+\n+    // must lint\n+    let ptr = Rc::into_raw(Rc::new(42usize)) as *mut c_void;\n+    let _ = unsafe { Rc::from_raw(ptr) };\n+\n+    // must lint\n+    let ptr = Arc::into_raw(Arc::new(42usize)) as *mut c_void;\n+    let _ = unsafe { Arc::from_raw(ptr) };\n+\n+    // must lint\n+    let ptr = std::rc::Weak::into_raw(Rc::downgrade(&Rc::new(42usize))) as *mut c_void;\n+    let _ = unsafe { std::rc::Weak::from_raw(ptr) };\n+\n+    // must lint\n+    let ptr = std::sync::Weak::into_raw(Arc::downgrade(&Arc::new(42usize))) as *mut c_void;\n+    let _ = unsafe { std::sync::Weak::from_raw(ptr) };\n }"}, {"sha": "96e4af12ba386ccc4878fb572bea7be2dffcde5f", "filename": "tests/ui/from_raw_with_void_ptr.stderr", "status": "modified", "additions": 53, "deletions": 5, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/de87e83d88876d810b475559d95c1741e54ffd9d/tests%2Fui%2Ffrom_raw_with_void_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de87e83d88876d810b475559d95c1741e54ffd9d/tests%2Fui%2Ffrom_raw_with_void_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_raw_with_void_ptr.stderr?ref=de87e83d88876d810b475559d95c1741e54ffd9d", "patch": "@@ -1,15 +1,63 @@\n-error: creating a `Box` from a raw void pointer\n-  --> $DIR/from_raw_with_void_ptr.rs:8:22\n+error: creating a `Box` from a void raw pointer\n+  --> $DIR/from_raw_with_void_ptr.rs:10:22\n    |\n LL |     let _ = unsafe { Box::from_raw(ptr) };\n    |                      ^^^^^^^^^^^^^^^^^^\n    |\n-help: cast this to a pointer of the actual type\n-  --> $DIR/from_raw_with_void_ptr.rs:8:36\n+help: cast this to a pointer of the appropriate type\n+  --> $DIR/from_raw_with_void_ptr.rs:10:36\n    |\n LL |     let _ = unsafe { Box::from_raw(ptr) };\n    |                                    ^^^\n    = note: `-D clippy::from-raw-with-void-ptr` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: creating a `Rc` from a void raw pointer\n+  --> $DIR/from_raw_with_void_ptr.rs:21:22\n+   |\n+LL |     let _ = unsafe { Rc::from_raw(ptr) };\n+   |                      ^^^^^^^^^^^^^^^^^\n+   |\n+help: cast this to a pointer of the appropriate type\n+  --> $DIR/from_raw_with_void_ptr.rs:21:35\n+   |\n+LL |     let _ = unsafe { Rc::from_raw(ptr) };\n+   |                                   ^^^\n+\n+error: creating a `Arc` from a void raw pointer\n+  --> $DIR/from_raw_with_void_ptr.rs:25:22\n+   |\n+LL |     let _ = unsafe { Arc::from_raw(ptr) };\n+   |                      ^^^^^^^^^^^^^^^^^^\n+   |\n+help: cast this to a pointer of the appropriate type\n+  --> $DIR/from_raw_with_void_ptr.rs:25:36\n+   |\n+LL |     let _ = unsafe { Arc::from_raw(ptr) };\n+   |                                    ^^^\n+\n+error: creating a `Weak` from a void raw pointer\n+  --> $DIR/from_raw_with_void_ptr.rs:29:22\n+   |\n+LL |     let _ = unsafe { std::rc::Weak::from_raw(ptr) };\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: cast this to a pointer of the appropriate type\n+  --> $DIR/from_raw_with_void_ptr.rs:29:46\n+   |\n+LL |     let _ = unsafe { std::rc::Weak::from_raw(ptr) };\n+   |                                              ^^^\n+\n+error: creating a `Weak` from a void raw pointer\n+  --> $DIR/from_raw_with_void_ptr.rs:33:22\n+   |\n+LL |     let _ = unsafe { std::sync::Weak::from_raw(ptr) };\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: cast this to a pointer of the appropriate type\n+  --> $DIR/from_raw_with_void_ptr.rs:33:48\n+   |\n+LL |     let _ = unsafe { std::sync::Weak::from_raw(ptr) };\n+   |                                                ^^^\n+\n+error: aborting due to 5 previous errors\n "}]}