{"sha": "aabbc84957bf79244953a34d3a8335f76b833b3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYmJjODQ5NTdiZjc5MjQ0OTUzYTM0ZDNhODMzNWY3NmI4MzNiM2E=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-05-27T16:30:28Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-05-27T16:30:28Z"}, "message": "Display unknown types in analysis-stats", "tree": {"sha": "37b4ad72410b2cd650ea7e2cca148b0e7dff4101", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37b4ad72410b2cd650ea7e2cca148b0e7dff4101"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aabbc84957bf79244953a34d3a8335f76b833b3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aabbc84957bf79244953a34d3a8335f76b833b3a", "html_url": "https://github.com/rust-lang/rust/commit/aabbc84957bf79244953a34d3a8335f76b833b3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aabbc84957bf79244953a34d3a8335f76b833b3a/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc5d8069219a0a52f9c98b6766d2421eaf4664d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc5d8069219a0a52f9c98b6766d2421eaf4664d8", "html_url": "https://github.com/rust-lang/rust/commit/cc5d8069219a0a52f9c98b6766d2421eaf4664d8"}], "stats": {"total": 87, "additions": 53, "deletions": 34}, "files": [{"sha": "14dbbb20de11d3de24cbb2986004004674817394", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 53, "deletions": 34, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/aabbc84957bf79244953a34d3a8335f76b833b3a/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aabbc84957bf79244953a34d3a8335f76b833b3a/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=aabbc84957bf79244953a34d3a8335f76b833b3a", "patch": "@@ -11,9 +11,9 @@ use hir::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     AssocItem, Crate, Function, HasSource, HirDisplay, ModuleDef,\n };\n-use hir_def::FunctionId;\n+use hir_def::{body::BodySourceMap, expr::ExprId, FunctionId};\n use hir_ty::{TyExt, TypeWalk};\n-use ide::{AnalysisHost, RootDatabase};\n+use ide::{Analysis, AnalysisHost, LineCol, RootDatabase};\n use ide_db::base_db::{\n     salsa::{self, ParallelDatabase},\n     SourceDatabaseExt,\n@@ -25,7 +25,7 @@ use rayon::prelude::*;\n use rustc_hash::FxHashSet;\n use stdx::format_to;\n use syntax::AstNode;\n-use vfs::Vfs;\n+use vfs::{Vfs, VfsPath};\n \n use crate::cli::{\n     load_cargo::{load_workspace_at, LoadCargoConfig},\n@@ -191,6 +191,7 @@ impl AnalysisStatsCmd {\n         let mut num_exprs_unknown = 0;\n         let mut num_exprs_partially_unknown = 0;\n         let mut num_type_mismatches = 0;\n+        let analysis = host.analysis();\n         for f in funcs.iter().copied() {\n             let name = f.name(db);\n             let full_name = f\n@@ -220,7 +221,7 @@ impl AnalysisStatsCmd {\n             }\n             bar.set_message(&msg);\n             let f_id = FunctionId::from(f);\n-            let body = db.body(f_id.into());\n+            let (body, sm) = db.body_with_source_map(f_id.into());\n             let inference_result = db.infer(f_id.into());\n             let (previous_exprs, previous_unknown, previous_partially_unknown) =\n                 (num_exprs, num_exprs_unknown, num_exprs_partially_unknown);\n@@ -229,6 +230,22 @@ impl AnalysisStatsCmd {\n                 num_exprs += 1;\n                 if ty.is_unknown() {\n                     num_exprs_unknown += 1;\n+                    if verbosity.is_spammy() {\n+                        if let Some((path, start, end)) =\n+                            expr_syntax_range(db, &analysis, vfs, &sm, expr_id)\n+                        {\n+                            bar.println(format!(\n+                                \"{} {}:{}-{}:{}: Unknown type\",\n+                                path,\n+                                start.line + 1,\n+                                start.col,\n+                                end.line + 1,\n+                                end.col,\n+                            ));\n+                        } else {\n+                            bar.println(format!(\"{}: Unknown type\", name,));\n+                        }\n+                    }\n                 } else {\n                     let mut is_partially_unknown = false;\n                     ty.walk(&mut |ty| {\n@@ -242,20 +259,9 @@ impl AnalysisStatsCmd {\n                 }\n                 if self.only.is_some() && verbosity.is_spammy() {\n                     // in super-verbose mode for just one function, we print every single expression\n-                    let (_, sm) = db.body_with_source_map(f_id.into());\n-                    let src = sm.expr_syntax(expr_id);\n-                    if let Ok(src) = src {\n-                        let node = {\n-                            let root = db.parse_or_expand(src.file_id).unwrap();\n-                            src.value.to_node(&root)\n-                        };\n-                        let original_file = src.file_id.original_file(db);\n-                        let line_index = host.analysis().file_line_index(original_file).unwrap();\n-                        let text_range = node.syntax().text_range();\n-                        let (start, end) = (\n-                            line_index.line_col(text_range.start()),\n-                            line_index.line_col(text_range.end()),\n-                        );\n+                    if let Some((_, start, end)) =\n+                        expr_syntax_range(db, &analysis, vfs, &sm, expr_id)\n+                    {\n                         bar.println(format!(\n                             \"{}:{}-{}:{}: {}\",\n                             start.line + 1,\n@@ -271,22 +277,9 @@ impl AnalysisStatsCmd {\n                 if let Some(mismatch) = inference_result.type_mismatch_for_expr(expr_id) {\n                     num_type_mismatches += 1;\n                     if verbosity.is_verbose() {\n-                        let (_, sm) = db.body_with_source_map(f_id.into());\n-                        let src = sm.expr_syntax(expr_id);\n-                        if let Ok(src) = src {\n-                            // FIXME: it might be nice to have a function (on Analysis?) that goes from Source<T> -> (LineCol, LineCol) directly\n-                            // But also, we should just turn the type mismatches into diagnostics and provide these\n-                            let root = db.parse_or_expand(src.file_id).unwrap();\n-                            let node = src.map(|e| e.to_node(&root).syntax().clone());\n-                            let original_range = node.as_ref().original_file_range(db);\n-                            let path = vfs.file_path(original_range.file_id);\n-                            let line_index =\n-                                host.analysis().file_line_index(original_range.file_id).unwrap();\n-                            let text_range = original_range.range;\n-                            let (start, end) = (\n-                                line_index.line_col(text_range.start()),\n-                                line_index.line_col(text_range.end()),\n-                            );\n+                        if let Some((path, start, end)) =\n+                            expr_syntax_range(db, &analysis, vfs, &sm, expr_id)\n+                        {\n                             bar.println(format!(\n                                 \"{} {}:{}-{}:{}: Expected {}, got {}\",\n                                 path,\n@@ -319,6 +312,7 @@ impl AnalysisStatsCmd {\n             }\n             bar.inc(1);\n         }\n+\n         bar.finish_and_clear();\n         eprintln!(\n             \"  exprs: {}, ??ty: {} ({}%), ?ty: {} ({}%), !ty: {}\",\n@@ -340,6 +334,31 @@ impl AnalysisStatsCmd {\n     }\n }\n \n+fn expr_syntax_range(\n+    db: &RootDatabase,\n+    analysis: &Analysis,\n+    vfs: &Vfs,\n+    sm: &BodySourceMap,\n+    expr_id: ExprId,\n+) -> Option<(VfsPath, LineCol, LineCol)> {\n+    let src = sm.expr_syntax(expr_id);\n+    if let Ok(src) = src {\n+        // FIXME: it might be nice to have a function (on Analysis?) that goes from Source<T> -> (LineCol, LineCol) directly\n+        // But also, we should just turn the type mismatches into diagnostics and provide these\n+        let root = db.parse_or_expand(src.file_id).unwrap();\n+        let node = src.map(|e| e.to_node(&root).syntax().clone());\n+        let original_range = node.as_ref().original_file_range(db);\n+        let path = vfs.file_path(original_range.file_id);\n+        let line_index = analysis.file_line_index(original_range.file_id).unwrap();\n+        let text_range = original_range.range;\n+        let (start, end) =\n+            (line_index.line_col(text_range.start()), line_index.line_col(text_range.end()));\n+        Some((path, start, end))\n+    } else {\n+        None\n+    }\n+}\n+\n fn shuffle<T>(rng: &mut Rand32, slice: &mut [T]) {\n     for i in 0..slice.len() {\n         randomize_first(rng, &mut slice[i..]);"}]}