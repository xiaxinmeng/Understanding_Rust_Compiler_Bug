{"sha": "d692a91fa69a057d82cf6cb71aa3d50260f9de4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2OTJhOTFmYTY5YTA1N2Q4MmNmNmNiNzFhYTNkNTAyNjBmOWRlNGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-04T20:06:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-04T20:06:09Z"}, "message": "Auto merge of #43590 - michaelwoerister:no-reopening-1, r=nikomatsakis\n\nincr.comp.: Assert that no DepNode is re-opened (see issue #42298).\n\nThis PR removes the last occurrence of DepNode re-opening and adds an assertion that prevents our doing so in the future too. The DepGraph should no be guaranteed to be cycle free.\n\nr? @nikomatsakis\n\nEDIT: Closes https://github.com/rust-lang/rust/issues/42298", "tree": {"sha": "48c6be58e90989089620f5a658b860d4953fc8b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48c6be58e90989089620f5a658b860d4953fc8b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d692a91fa69a057d82cf6cb71aa3d50260f9de4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d692a91fa69a057d82cf6cb71aa3d50260f9de4a", "html_url": "https://github.com/rust-lang/rust/commit/d692a91fa69a057d82cf6cb71aa3d50260f9de4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d692a91fa69a057d82cf6cb71aa3d50260f9de4a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff1135b224baac6bfc14970cb5d74dd66680e5e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff1135b224baac6bfc14970cb5d74dd66680e5e2", "html_url": "https://github.com/rust-lang/rust/commit/ff1135b224baac6bfc14970cb5d74dd66680e5e2"}, {"sha": "b34c5a23ab0996321a414d47729a9076364a79c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b34c5a23ab0996321a414d47729a9076364a79c6", "html_url": "https://github.com/rust-lang/rust/commit/b34c5a23ab0996321a414d47729a9076364a79c6"}], "stats": {"total": 70, "additions": 38, "deletions": 32}, "files": [{"sha": "c6f9cb2fceadd3f454121d8aecaa0fa56739cfcd", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d692a91fa69a057d82cf6cb71aa3d50260f9de4a/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d692a91fa69a057d82cf6cb71aa3d50260f9de4a/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=d692a91fa69a057d82cf6cb71aa3d50260f9de4a", "patch": "@@ -66,7 +66,6 @@ use hir::map::DefPathHash;\n use ich::Fingerprint;\n use ty::{TyCtxt, Instance, InstanceDef};\n use ty::fast_reject::SimplifiedType;\n-use ty::subst::Substs;\n use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n use ich::StableHashingContext;\n use std::fmt;\n@@ -104,6 +103,8 @@ macro_rules! define_dep_nodes {\n                 match *self {\n                     $(\n                         DepKind :: $variant => {\n+                            $(return !anon_attr_to_bool!($anon);)*\n+\n                             // tuple args\n                             $({\n                                 return <( $($tuple_arg,)* ) as DepNodeParams>\n@@ -112,6 +113,7 @@ macro_rules! define_dep_nodes {\n \n                             // struct args\n                             $({\n+\n                                 return <( $($struct_arg_ty,)* ) as DepNodeParams>\n                                     ::CAN_RECONSTRUCT_QUERY_KEY;\n                             })*\n@@ -394,6 +396,7 @@ define_dep_nodes!( <'tcx>\n     // Represents different phases in the compiler.\n     [] RegionMaps(DefId),\n     [] Coherence,\n+    [] CoherenceInherentImplOverlapCheck,\n     [] Resolve,\n     [] CoherenceCheckTrait(DefId),\n     [] PrivacyAccessLevels(CrateNum),\n@@ -444,17 +447,17 @@ define_dep_nodes!( <'tcx>\n     [] TypeckBodiesKrate,\n     [] TypeckTables(DefId),\n     [] HasTypeckTables(DefId),\n-    [] ConstEval { def_id: DefId, substs: &'tcx Substs<'tcx> },\n+    [anon] ConstEval,\n     [] SymbolName(DefId),\n     [] InstanceSymbolName { instance: Instance<'tcx> },\n     [] SpecializationGraph(DefId),\n     [] ObjectSafety(DefId),\n \n-    [anon] IsCopy(DefId),\n-    [anon] IsSized(DefId),\n-    [anon] IsFreeze(DefId),\n-    [anon] NeedsDrop(DefId),\n-    [anon] Layout(DefId),\n+    [anon] IsCopy,\n+    [anon] IsSized,\n+    [anon] IsFreeze,\n+    [anon] NeedsDrop,\n+    [anon] Layout,\n \n     // The set of impls for a given trait.\n     [] TraitImpls(DefId),"}, {"sha": "9aa634770df933ea8ae16f13cfd8644fb0f123a3", "filename": "src/librustc/dep_graph/edges.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d692a91fa69a057d82cf6cb71aa3d50260f9de4a/src%2Flibrustc%2Fdep_graph%2Fedges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d692a91fa69a057d82cf6cb71aa3d50260f9de4a/src%2Flibrustc%2Fdep_graph%2Fedges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fedges.rs?ref=d692a91fa69a057d82cf6cb71aa3d50260f9de4a", "patch": "@@ -23,6 +23,11 @@ pub struct DepGraphEdges {\n     edges: FxHashSet<(DepNodeIndex, DepNodeIndex)>,\n     task_stack: Vec<OpenTask>,\n     forbidden_edge: Option<EdgeFilter>,\n+\n+    // A set to help assert that no two tasks use the same DepNode. This is a\n+    // temporary measure. Once we load the previous dep-graph as readonly, this\n+    // check will fall out of the graph implementation naturally.\n+    opened_once: FxHashSet<DepNode>,\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n@@ -80,6 +85,7 @@ impl DepGraphEdges {\n             edges: FxHashSet(),\n             task_stack: Vec::new(),\n             forbidden_edge,\n+            opened_once: FxHashSet(),\n         }\n     }\n \n@@ -97,6 +103,10 @@ impl DepGraphEdges {\n     }\n \n     pub fn push_task(&mut self, key: DepNode) {\n+        if !self.opened_once.insert(key) {\n+            bug!(\"Re-opened node {:?}\", key)\n+        }\n+\n         self.task_stack.push(OpenTask::Regular {\n             node: key,\n             reads: Vec::new(),"}, {"sha": "a2e335c00b26ad22d475cd3b50bd651878b6905e", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d692a91fa69a057d82cf6cb71aa3d50260f9de4a/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d692a91fa69a057d82cf6cb71aa3d50260f9de4a/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=d692a91fa69a057d82cf6cb71aa3d50260f9de4a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use dep_graph::{DepConstructor, DepNode, DepNodeIndex};\n-use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n+use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use hir::def::Def;\n use hir;\n use middle::const_val;\n@@ -931,7 +931,7 @@ define_maps! { <'tcx>\n     /// Checks all types in the krate for overlap in their inherent impls. Reports errors.\n     /// Not meant to be used directly outside of coherence.\n     /// (Defined only for LOCAL_CRATE)\n-    [] crate_inherent_impls_overlap_check: crate_inherent_impls_dep_node(CrateNum) -> (),\n+    [] crate_inherent_impls_overlap_check: inherent_impls_overlap_check_dep_node(CrateNum) -> (),\n \n     /// Results of evaluating const items or constants embedded in\n     /// other items (such as enum variant explicit discriminants).\n@@ -1014,6 +1014,10 @@ fn crate_inherent_impls_dep_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::Coherence\n }\n \n+fn inherent_impls_overlap_check_dep_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n+    DepConstructor::CoherenceInherentImplOverlapCheck\n+}\n+\n fn reachability_dep_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::Reachability\n }\n@@ -1032,10 +1036,9 @@ fn typeck_item_bodies_dep_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::TypeckBodiesKrate\n }\n \n-fn const_eval_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)>)\n+fn const_eval_dep_node<'tcx>(_: ty::ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)>)\n                              -> DepConstructor<'tcx> {\n-    let (def_id, substs) = key.value;\n-    DepConstructor::ConstEval { def_id, substs }\n+    DepConstructor::ConstEval\n }\n \n fn mir_keys<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n@@ -1050,32 +1053,22 @@ fn relevant_trait_impls_for<'tcx>((def_id, t): (DefId, SimplifiedType)) -> DepCo\n     DepConstructor::RelevantTraitImpls(def_id, t)\n }\n \n-fn is_copy_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n-    let def_id = ty::item_path::characteristic_def_id_of_type(key.value)\n-        .unwrap_or(DefId::local(CRATE_DEF_INDEX));\n-    DepConstructor::IsCopy(def_id)\n+fn is_copy_dep_node<'tcx>(_: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n+    DepConstructor::IsCopy\n }\n \n-fn is_sized_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n-    let def_id = ty::item_path::characteristic_def_id_of_type(key.value)\n-        .unwrap_or(DefId::local(CRATE_DEF_INDEX));\n-    DepConstructor::IsSized(def_id)\n+fn is_sized_dep_node<'tcx>(_: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n+    DepConstructor::IsSized\n }\n \n-fn is_freeze_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n-    let def_id = ty::item_path::characteristic_def_id_of_type(key.value)\n-        .unwrap_or(DefId::local(CRATE_DEF_INDEX));\n-    DepConstructor::IsFreeze(def_id)\n+fn is_freeze_dep_node<'tcx>(_: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n+    DepConstructor::IsFreeze\n }\n \n-fn needs_drop_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n-    let def_id = ty::item_path::characteristic_def_id_of_type(key.value)\n-        .unwrap_or(DefId::local(CRATE_DEF_INDEX));\n-    DepConstructor::NeedsDrop(def_id)\n+fn needs_drop_dep_node<'tcx>(_: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n+    DepConstructor::NeedsDrop\n }\n \n-fn layout_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n-    let def_id = ty::item_path::characteristic_def_id_of_type(key.value)\n-        .unwrap_or(DefId::local(CRATE_DEF_INDEX));\n-    DepConstructor::Layout(def_id)\n+fn layout_dep_node<'tcx>(_: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n+    DepConstructor::Layout\n }"}]}