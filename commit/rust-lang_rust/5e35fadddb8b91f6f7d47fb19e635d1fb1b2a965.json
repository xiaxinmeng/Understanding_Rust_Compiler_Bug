{"sha": "5e35fadddb8b91f6f7d47fb19e635d1fb1b2a965", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMzVmYWRkZGI4YjkxZjZmN2Q0N2ZiMTllNjM1ZDFmYjFiMmE5NjU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-02T21:17:29Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-08-21T23:00:01Z"}, "message": "Move dep_graph checking into try_load_from_disk_and_cache_in_memory.", "tree": {"sha": "1a50538d4c435112951dfbd7126737def6170eb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a50538d4c435112951dfbd7126737def6170eb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e35fadddb8b91f6f7d47fb19e635d1fb1b2a965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e35fadddb8b91f6f7d47fb19e635d1fb1b2a965", "html_url": "https://github.com/rust-lang/rust/commit/5e35fadddb8b91f6f7d47fb19e635d1fb1b2a965", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e35fadddb8b91f6f7d47fb19e635d1fb1b2a965/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2451f42c1deb9379d5e8e5fa86b0bf857ae048ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/2451f42c1deb9379d5e8e5fa86b0bf857ae048ec", "html_url": "https://github.com/rust-lang/rust/commit/2451f42c1deb9379d5e8e5fa86b0bf857ae048ec"}], "stats": {"total": 35, "additions": 12, "deletions": 23}, "files": [{"sha": "c3627910341dd81ebd68cac34737fafa26519df0", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5e35fadddb8b91f6f7d47fb19e635d1fb1b2a965/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e35fadddb8b91f6f7d47fb19e635d1fb1b2a965/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=5e35fadddb8b91f6f7d47fb19e635d1fb1b2a965", "patch": "@@ -2,8 +2,7 @@\n //! generate the actual methods on tcx which find and execute the provider,\n //! manage the caches, and so forth.\n \n-use crate::dep_graph::{DepContext, DepKind, DepNode, DepNodeParams};\n-use crate::dep_graph::{DepNodeIndex, SerializedDepNodeIndex};\n+use crate::dep_graph::{DepContext, DepKind, DepNode, DepNodeIndex, DepNodeParams};\n use crate::query::caches::QueryCache;\n use crate::query::config::{QueryDescription, QueryVtable, QueryVtableExt};\n use crate::query::job::{\n@@ -496,21 +495,7 @@ where\n         // promoted to the current session during\n         // `try_mark_green()`, so we can ignore them here.\n         let loaded = tcx.start_query(job.id, None, || {\n-            let marked = dep_graph.try_mark_green_and_read(tcx, &dep_node);\n-            marked.map(|(prev_dep_node_index, dep_node_index)| {\n-                (\n-                    load_from_disk_and_cache_in_memory(\n-                        tcx,\n-                        key.clone(),\n-                        prev_dep_node_index,\n-                        dep_node_index,\n-                        &dep_node,\n-                        query,\n-                        compute,\n-                    ),\n-                    dep_node_index,\n-                )\n-            })\n+            try_load_from_disk_and_cache_in_memory(tcx, key.clone(), &dep_node, query, compute)\n         });\n         if let Some((result, dep_node_index)) = loaded {\n             return job.complete(result, dep_node_index);\n@@ -522,21 +507,23 @@ where\n     result\n }\n \n-fn load_from_disk_and_cache_in_memory<CTX, K, V: Debug>(\n+fn try_load_from_disk_and_cache_in_memory<CTX, K, V>(\n     tcx: CTX,\n     key: K,\n-    prev_dep_node_index: SerializedDepNodeIndex,\n-    dep_node_index: DepNodeIndex,\n     dep_node: &DepNode<CTX::DepKind>,\n     query: &QueryVtable<CTX, K, V>,\n     compute: fn(CTX::DepContext, K) -> V,\n-) -> V\n+) -> Option<(V, DepNodeIndex)>\n where\n     CTX: QueryContext,\n+    V: Debug,\n {\n     // Note this function can be called concurrently from the same query\n     // We must ensure that this is handled correctly.\n \n+    let (prev_dep_node_index, dep_node_index) =\n+        tcx.dep_context().dep_graph().try_mark_green_and_read(tcx, &dep_node)?;\n+\n     debug_assert!(tcx.dep_context().dep_graph().is_green(dep_node));\n \n     // First we try to load the result from the on-disk cache.\n@@ -558,7 +545,7 @@ where\n         None\n     };\n \n-    if let Some(result) = result {\n+    let result = if let Some(result) = result {\n         // If `-Zincremental-verify-ich` is specified, re-hash results from\n         // the cache and make sure that they have the expected fingerprint.\n         if unlikely!(tcx.dep_context().sess().opts.debugging_opts.incremental_verify_ich) {\n@@ -588,7 +575,9 @@ where\n         incremental_verify_ich(*tcx.dep_context(), &result, dep_node, query);\n \n         result\n-    }\n+    };\n+\n+    Some((result, dep_node_index))\n }\n \n fn incremental_verify_ich<CTX, K, V: Debug>("}]}