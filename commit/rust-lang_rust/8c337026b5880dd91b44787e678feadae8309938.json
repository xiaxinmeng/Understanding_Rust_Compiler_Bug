{"sha": "8c337026b5880dd91b44787e678feadae8309938", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMzM3MDI2YjU4ODBkZDkxYjQ0Nzg3ZTY3OGZlYWRhZTgzMDk5Mzg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-02-29T03:15:13Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-02-29T06:39:45Z"}, "message": "configure: correct submodule code, only reconfigure LLVM when changed.", "tree": {"sha": "87a7b3c93fdf2a0cc1b4461678be5e7a53657129", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87a7b3c93fdf2a0cc1b4461678be5e7a53657129"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c337026b5880dd91b44787e678feadae8309938", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c337026b5880dd91b44787e678feadae8309938", "html_url": "https://github.com/rust-lang/rust/commit/8c337026b5880dd91b44787e678feadae8309938", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c337026b5880dd91b44787e678feadae8309938/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "341f41422098eb8f2ea0efa0ebc82e1f09f5f48b", "url": "https://api.github.com/repos/rust-lang/rust/commits/341f41422098eb8f2ea0efa0ebc82e1f09f5f48b", "html_url": "https://github.com/rust-lang/rust/commit/341f41422098eb8f2ea0efa0ebc82e1f09f5f48b"}], "stats": {"total": 269, "additions": 149, "deletions": 120}, "files": [{"sha": "f6587cef3f8ac27fa50ec0965c7de888bb1c545e", "filename": "configure", "status": "modified", "additions": 149, "deletions": 120, "changes": 269, "blob_url": "https://github.com/rust-lang/rust/blob/8c337026b5880dd91b44787e678feadae8309938/configure", "raw_url": "https://github.com/rust-lang/rust/raw/8c337026b5880dd91b44787e678feadae8309938/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=8c337026b5880dd91b44787e678feadae8309938", "patch": "@@ -173,7 +173,6 @@ opt() {\n      fi\n }\n \n-\n msg \"looking for configure programs\"\n need_cmd cmp\n need_cmd mkdir\n@@ -482,138 +481,168 @@ then\n fi\n \n # Have to be in the top of src directory for this\n-cd ${CFG_SRC_DIR}\n-\n if [ -z $CFG_DISABLE_MANAGE_SUBMODULES ]\n then\n-msg \"git: submodule sync\"\n-\"${CFG_GIT}\" submodule sync --quiet\n-SUBMODULE_STATUS=$(\"${CFG_GIT}\" submodule status)\n-NEED_INIT_COUNT=$(echo \"$SUBMODULE_STATUS\" | grep -c \"^-\")\n-NEED_UPDATE_COUNT=$(echo \"$SUBMODULE_STATUS\" | grep -c \"^+\")\n-NEED_INIT=$(test $NEED_INIT_COUNT -gt 0)$?\n-NEED_UPDATE=$(test \"($NEED_INIT)\" -o \"$NEED_UPDATE_COUNT\" -gt 0)$?\n-else\n-NEED_INIT=\n-NEED_UPDATE=\n-fi\n-\n-if [ $NEED_INIT ]\n-then\n-    msg \"git: submodule init\"\n-    \"${CFG_GIT}\" submodule init --quiet\n-    need_ok \"git failed\"\n-fi\n-\n-if [ $NEED_UPDATE ]\n-then\n-    msg \"git: submodule update\"\n-    \"${CFG_GIT}\" submodule update --quiet\n-    need_ok \"git failed\"\n+    cd ${CFG_SRC_DIR}\n+    msg \"git: submodule sync\"\n+    \"${CFG_GIT}\" submodule sync --quiet\n+    SUBMODULES=$(\"${CFG_GIT}\" submodule status | awk '{print $2}')\n+    for s in $SUBMODULES\n+    do\n+        msg \"git: submodule status ${s}\"\n+        status=$(\"${CFG_GIT}\" submodule status ${s} | awk '{print $1}')\n+        case ${status} in\n+            -*)\n+                msg \"${s} is not initialized, initializing\"\n+                \"${CFG_GIT}\" submodule init --quiet ${s}\n+                need_ok \"git failed\"\n+                msg \"${s} updating\"\n+                \"${CFG_GIT}\" submodule update --quiet ${s}\n+                need_ok \"git failed\"\n+                ;;\n+            +*)\n+                msg \"${s} is not up to date, updating\"\n+                \"${CFG_GIT}\" submodule update --quiet ${s}\n+                need_ok \"git failed\"\n+                ;;\n+            *)\n+                msg \"${s} is clean\"\n+                ;;\n+        esac\n+    done\n+    cd ${CFG_BUILD_DIR}\n fi\n \n-cd ${CFG_BUILD_DIR}\n-\n-\n-# Configure llvm. Here we go...\n+# Configure llvm, only if necessary\n+step_msg \"looking at LLVM\"\n CFG_LLVM_SRC_DIR=${CFG_SRC_DIR}src/llvm\n-\n for t in $CFG_TARGET_TRIPLES\n do\n+    do_reconfigure=1\n+\n     if [ -z $CFG_LLVM_ROOT ]\n     then\n-\tstep_msg \"configuring LLVM for $t\"\n-\n-\tLLVM_BUILD_DIR=$CFG_BUILD_DIR/llvm/$t\n+        LLVM_BUILD_DIR=$CFG_BUILD_DIR/llvm/$t\n+        if [ ! -z \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]\n+        then\n+            LLVM_DBG_OPTS=\"\"\n+            # Just use LLVM straight from its build directory to\n+            # avoid 'make install' time\n+            LLVM_INST_DIR=$LLVM_BUILD_DIR/Debug+Asserts\n+        else\n+            LLVM_DBG_OPTS=\"--enable-optimized\"\n+            LLVM_INST_DIR=$LLVM_BUILD_DIR/Release+Asserts\n+        fi\n+    else\n+        msg \"not reconfiguring LLVM, external LLVM root\"\n+        # The user is using their own LLVM\n+        LLVM_BUILD_DIR=\n+        LLVM_INST_DIR=$CFG_LLVM_ROOT\n+        do_reconfigure=0\n+    fi\n \n-\tLLVM_TARGETS=\"--enable-targets=x86,x86_64\"\n-\tLLVM_BUILD=\"--build=$t\"\n-\tLLVM_HOST=\"--host=$t\"\n-\tLLVM_TARGET=\"--target=$t\"\n \n-    if [ ! -z \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]\n+    if [ ${do_reconfigure} -ne 0 ]\n     then\n-        LLVM_DBG_OPTS=\"\"\n-        # Just use LLVM straight from its build directory to\n-        # avoid 'make install' time\n-\t    LLVM_INST_DIR=$LLVM_BUILD_DIR/Debug+Asserts\n-    else\n-        LLVM_DBG_OPTS=\"--enable-optimized\"\n-\t    LLVM_INST_DIR=$LLVM_BUILD_DIR/Release+Asserts\n+    # because git is hilarious, it might have put the module index\n+    # in a couple places.\n+        index1=\"${CFG_SRC_DIR}.git/modules/src/llvm/index\"\n+        index2=\"${CFG_SRC_DIR}src/llvm/.git/index\"\n+        for index in ${index1} ${index2}\n+        do\n+            config_status=\"${CFG_BUILD_DIR}/llvm/$t/config.status\"\n+            if test -e ${index} -a \\\n+                    -e ${config_status} -a \\\n+                    ${config_status} -nt ${index}\n+            then\n+                msg \"not reconfiguring LLVM, config.status is fresh\"\n+                do_reconfigure=0\n+            fi\n+        done\n     fi\n-\t# Disable unused LLVM features\n-\tLLVM_OPTS=\"$LLVM_DBG_OPTS --disable-docs --disable-jit --enable-bindings=none --disable-threads --disable-pthreads\"\n-\n-\tif [ \"$CFG_C_COMPILER\" = \"clang\" ]\n-\tthen\n-\t    LLVM_CXX_32=\"clang++ -m32\"\n-\t    LLVM_CC_32=\"clang -m32\"\n-\n-\t    LLVM_CXX_64=\"clang++\"\n-\t    LLVM_CC_64=\"clang\"\n-\telse\n-\t    LLVM_CXX_32=\"g++ -m32\"\n-\t    LLVM_CC_32=\"gcc -m32\"\n-\n-\t    LLVM_CXX_64=\"g++\"\n-\t    LLVM_CC_64=\"gcc\"\n-\tfi\n-\n-\tLLVM_CFLAGS_32=\"-m32\"\n-\tLLVM_CXXFLAGS_32=\"-m32\"\n-\tLLVM_LDFLAGS_32=\"-m32\"\n-\n-\tLLVM_CFLAGS_64=\"\"\n-\tLLVM_CXXFLAGS_64=\"\"\n-\tLLVM_LDFLAGS_64=\"\"\n-\n-\tif echo $t | grep x86_64\n-\tthen\n-\t    LLVM_CXX=$LLVM_CXX_64\n-\t    LLVM_CC=$LLVM_CC_64\n-\t    LLVM_CFLAGS=$LLVM_CFLAGS_64\n-\t    LLVM_CXXFLAGS=$LLVM_CXXFLAGS_64\n-\t    LLVM_LDFLAGS=$LLVM_LDFLAGS_64\n-\telse\n-\t    LLVM_CXX=$LLVM_CXX_32\n-\t    LLVM_CC=$LLVM_CC_32\n-\t    LLVM_CFLAGS=$LLVM_CFLAGS_32\n-\t    LLVM_CXXFLAGS=$LLVM_CXXFLAGS_32\n-\t    LLVM_LDFLAGS=$LLVM_LDFLAGS_32\n-\tfi\n-\n-\tCXX=$LLVM_CXX\n-\tCC=$LLVM_CC\n-\tCFLAGS=$LLVM_CFLAGS\n-\tCXXFLAGS=$LLVM_CXXFLAGS\n-\tLDFLAGS=$LLVM_LDFLAGS\n-\n-\tLLVM_FLAGS=\"$LLVM_TARGETS $LLVM_OPTS $LLVM_BUILD $LLVM_HOST $LLVM_TARGET\"\n-\n-\tmsg \"configuring LLVM with:\"\n-\tmsg \"$LLVM_FLAGS\"\n-\n-\texport CXX\n-\texport CC\n-\texport CFLAGS\n-\texport CXXFLAGS\n-\texport LDFLAGS\n-\n-\tcd $LLVM_BUILD_DIR\n-\tcase $CFG_SRC_DIR in\n-\t    /* | [a-z]:* | [A-Z]:*)\n-\t\t${CFG_LLVM_SRC_DIR}/configure $LLVM_FLAGS\n-\t\t;;\n-\t    *)\n-\t\t${CFG_BUILD_DIR}/${CFG_LLVM_SRC_DIR}/configure $LLVM_FLAGS\n-\t\t;;\n-\tesac\n-    need_ok \"LLVM configure failed\"\n-\tcd $CFG_BUILD_DIR\n-    else\n-\tLLVM_BUILD_DIR=\n-        # The user is using their own LLVM\n-\tLLVM_INST_DIR=$CFG_LLVM_ROOT\n+\n+    if [ ${do_reconfigure} -ne 0 ]\n+    then\n+        msg \"configuring LLVM for $t\"\n+\n+        LLVM_TARGETS=\"--enable-targets=x86,x86_64\"\n+        LLVM_BUILD=\"--build=$t\"\n+        LLVM_HOST=\"--host=$t\"\n+        LLVM_TARGET=\"--target=$t\"\n+\n+        # Disable unused LLVM features\n+        LLVM_OPTS=\"$LLVM_DBG_OPTS --disable-docs --disable-jit \\\n+                   --enable-bindings=none --disable-threads \\\n+                   --disable-pthreads\"\n+\n+        if [ \"$CFG_C_COMPILER\" = \"clang\" ]\n+        then\n+            LLVM_CXX_32=\"clang++ -m32\"\n+            LLVM_CC_32=\"clang -m32\"\n+\n+            LLVM_CXX_64=\"clang++\"\n+            LLVM_CC_64=\"clang\"\n+        else\n+            LLVM_CXX_32=\"g++ -m32\"\n+            LLVM_CC_32=\"gcc -m32\"\n+\n+            LLVM_CXX_64=\"g++\"\n+            LLVM_CC_64=\"gcc\"\n+        fi\n+\n+        LLVM_CFLAGS_32=\"-m32\"\n+        LLVM_CXXFLAGS_32=\"-m32\"\n+        LLVM_LDFLAGS_32=\"-m32\"\n+\n+        LLVM_CFLAGS_64=\"\"\n+        LLVM_CXXFLAGS_64=\"\"\n+        LLVM_LDFLAGS_64=\"\"\n+\n+        if echo $t | grep -q x86_64\n+        then\n+            LLVM_CXX=$LLVM_CXX_64\n+            LLVM_CC=$LLVM_CC_64\n+            LLVM_CFLAGS=$LLVM_CFLAGS_64\n+            LLVM_CXXFLAGS=$LLVM_CXXFLAGS_64\n+            LLVM_LDFLAGS=$LLVM_LDFLAGS_64\n+        else\n+            LLVM_CXX=$LLVM_CXX_32\n+            LLVM_CC=$LLVM_CC_32\n+            LLVM_CFLAGS=$LLVM_CFLAGS_32\n+            LLVM_CXXFLAGS=$LLVM_CXXFLAGS_32\n+            LLVM_LDFLAGS=$LLVM_LDFLAGS_32\n+        fi\n+\n+        CXX=$LLVM_CXX\n+        CC=$LLVM_CC\n+        CFLAGS=$LLVM_CFLAGS\n+        CXXFLAGS=$LLVM_CXXFLAGS\n+        LDFLAGS=$LLVM_LDFLAGS\n+\n+        LLVM_FLAGS=\"$LLVM_TARGETS $LLVM_OPTS $LLVM_BUILD \\\n+                        $LLVM_HOST $LLVM_TARGET\"\n+\n+        msg \"configuring LLVM with:\"\n+        msg \"$LLVM_FLAGS\"\n+\n+        export CXX\n+        export CC\n+        export CFLAGS\n+        export CXXFLAGS\n+        export LDFLAGS\n+\n+        cd $LLVM_BUILD_DIR\n+        case $CFG_SRC_DIR in\n+            /* | [a-z]:* | [A-Z]:*)\n+                ${CFG_LLVM_SRC_DIR}/configure $LLVM_FLAGS\n+                ;;\n+            *)\n+                ${CFG_BUILD_DIR}/${CFG_LLVM_SRC_DIR}/configure \\\n+                    $LLVM_FLAGS\n+                ;;\n+        esac\n+        need_ok \"LLVM configure failed\"\n+        cd $CFG_BUILD_DIR\n     fi\n \n     # Construct variables for LLVM build and install directories for"}]}