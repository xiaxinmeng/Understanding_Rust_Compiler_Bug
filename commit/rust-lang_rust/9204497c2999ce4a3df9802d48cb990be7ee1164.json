{"sha": "9204497c2999ce4a3df9802d48cb990be7ee1164", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMDQ0OTdjMjk5OWNlNGEzZGY5ODAyZDQ4Y2I5OTBiZTdlZTExNjQ=", "commit": {"author": {"name": "Patrick McCarter", "email": "p.mccarter@gmail.com", "date": "2019-02-05T20:36:31Z"}, "committer": {"name": "Patrick McCarter", "email": "p.mccarter@gmail.com", "date": "2019-02-05T20:36:31Z"}, "message": "Allow const assignment for int saturating_add() calls for #58030", "tree": {"sha": "8874b6c26e45da907d65bcf79b4e14457d1db1d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8874b6c26e45da907d65bcf79b4e14457d1db1d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9204497c2999ce4a3df9802d48cb990be7ee1164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9204497c2999ce4a3df9802d48cb990be7ee1164", "html_url": "https://github.com/rust-lang/rust/commit/9204497c2999ce4a3df9802d48cb990be7ee1164", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9204497c2999ce4a3df9802d48cb990be7ee1164/comments", "author": {"login": "pmccarter", "id": 1185163, "node_id": "MDQ6VXNlcjExODUxNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1185163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmccarter", "html_url": "https://github.com/pmccarter", "followers_url": "https://api.github.com/users/pmccarter/followers", "following_url": "https://api.github.com/users/pmccarter/following{/other_user}", "gists_url": "https://api.github.com/users/pmccarter/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmccarter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmccarter/subscriptions", "organizations_url": "https://api.github.com/users/pmccarter/orgs", "repos_url": "https://api.github.com/users/pmccarter/repos", "events_url": "https://api.github.com/users/pmccarter/events{/privacy}", "received_events_url": "https://api.github.com/users/pmccarter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmccarter", "id": 1185163, "node_id": "MDQ6VXNlcjExODUxNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1185163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmccarter", "html_url": "https://github.com/pmccarter", "followers_url": "https://api.github.com/users/pmccarter/followers", "following_url": "https://api.github.com/users/pmccarter/following{/other_user}", "gists_url": "https://api.github.com/users/pmccarter/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmccarter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmccarter/subscriptions", "organizations_url": "https://api.github.com/users/pmccarter/orgs", "repos_url": "https://api.github.com/users/pmccarter/repos", "events_url": "https://api.github.com/users/pmccarter/events{/privacy}", "received_events_url": "https://api.github.com/users/pmccarter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e58dabc16b1678da8702c71f70c72644764226c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e58dabc16b1678da8702c71f70c72644764226c", "html_url": "https://github.com/rust-lang/rust/commit/3e58dabc16b1678da8702c71f70c72644764226c"}], "stats": {"total": 103, "additions": 91, "deletions": 12}, "files": [{"sha": "55de04db028e13b5f3b611a550db78d1b8e2dc59", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 47, "deletions": 10, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/9204497c2999ce4a3df9802d48cb990be7ee1164/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9204497c2999ce4a3df9802d48cb990be7ee1164/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=9204497c2999ce4a3df9802d48cb990be7ee1164", "patch": "@@ -882,17 +882,37 @@ $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline]\n+            #[cfg(stage0)]\n             pub fn saturating_add(self, rhs: Self) -> Self {\n-                #[cfg(stage0)]\n                 match self.checked_add(rhs) {\n                     Some(x) => x,\n                     None if rhs >= 0 => Self::max_value(),\n                     None => Self::min_value(),\n                 }\n-                #[cfg(not(stage0))]\n-                {\n-                    intrinsics::saturating_add(self, rhs)\n-                }\n+            }\n+\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Saturating integer addition. Computes `self + rhs`, saturating at the numeric\n+bounds instead of overflowing.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_add(1), 101);\n+assert_eq!(\", stringify!($SelfT), \"::max_value().saturating_add(100), \", stringify!($SelfT),\n+\"::max_value());\",\n+$EndFeature, \"\n+```\"),\n+\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[inline]\n+            #[cfg(not(stage0))]\n+            pub const fn saturating_add(self, rhs: Self) -> Self {\n+                intrinsics::saturating_add(self, rhs)\n             }\n         }\n \n@@ -2753,16 +2773,33 @@ assert_eq!(200u8.saturating_add(127), 255);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline]\n+            #[cfg(stage0)]\n             pub fn saturating_add(self, rhs: Self) -> Self {\n-                #[cfg(stage0)]\n                 match self.checked_add(rhs) {\n                     Some(x) => x,\n                     None => Self::max_value(),\n                 }\n-                #[cfg(not(stage0))]\n-                {\n-                    intrinsics::saturating_add(self, rhs)\n-                }\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Saturating integer addition. Computes `self + rhs`, saturating at\n+the numeric bounds instead of overflowing.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_add(1), 101);\n+assert_eq!(200u8.saturating_add(127), 255);\", $EndFeature, \"\n+```\"),\n+\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[inline]\n+            #[cfg(not(stage0))]\n+            pub const fn saturating_add(self, rhs: Self) -> Self {\n+                intrinsics::saturating_add(self, rhs)\n             }\n         }\n "}, {"sha": "4013cfb9558e14f55671c2bfe1ebf4b1ea72fb03", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9204497c2999ce4a3df9802d48cb990be7ee1164/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9204497c2999ce4a3df9802d48cb990be7ee1164/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=9204497c2999ce4a3df9802d48cb990be7ee1164", "patch": "@@ -418,4 +418,4 @@ pub fn truncate(value: u128, size: Size) -> u128 {\n     let shift = 128 - size;\n     // truncate (shift left to drop out leftover values, shift right to fill with zeroes)\n     (value << shift) >> shift\n-}\n+}\n\\ No newline at end of file"}, {"sha": "64be3969640e5b817d471a5730c8643281fa92db", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9204497c2999ce4a3df9802d48cb990be7ee1164/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9204497c2999ce4a3df9802d48cb990be7ee1164/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=9204497c2999ce4a3df9802d48cb990be7ee1164", "patch": "@@ -4,7 +4,7 @@\n \n use syntax::symbol::Symbol;\n use rustc::ty;\n-use rustc::ty::layout::{LayoutOf, Primitive};\n+use rustc::ty::layout::{LayoutOf, Primitive, Size};\n use rustc::mir::BinOp;\n use rustc::mir::interpret::{\n     EvalResult, EvalErrorKind, Scalar,\n@@ -122,6 +122,33 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     self.binop_with_overflow(bin_op, lhs, rhs, dest)?;\n                 }\n             }\n+            \"saturating_add\" => {\n+                let l = self.read_immediate(args[0])?;\n+                let r = self.read_immediate(args[1])?;\n+                let (val, overflowed) = self.binary_op_imm(BinOp::Add, l, r)?;\n+                if overflowed {\n+                    let first_term: u128 = l.to_scalar()?.to_bits(l.layout.size)?;\n+                    let num_bits = l.layout.size.bits();\n+                    let val = if l.layout.abi.is_signed() {\n+                        // For signed addition the saturated value depends on the sign of either term\n+                        if first_term & (1 << (num_bits-1)) == 0 {  // signed term is positive\n+                            Scalar::from_uint((1u128 << (num_bits - 1)) - 1, Size::from_bits(num_bits))  // max signed val\n+                        } else {  // signed term is negative\n+                            Scalar::from_uint(1u128 << (num_bits - 1), Size::from_bits(num_bits))  // min signed val\n+                        }\n+                    } else {\n+                        if num_bits == 128 {  // General bit shift method causes overflow for u128 terms\n+                            Scalar::from_uint(u128::max_value(), Size::from_bits(128))\n+                        } else {\n+                            Scalar::from_uint(u128::max_value() & ((1 << num_bits) - 1),\n+                                Size::from_bits(num_bits))\n+                        }\n+                    };\n+                    self.write_scalar(val, dest)?;\n+                } else {\n+                    self.write_scalar(val, dest)?;\n+                }\n+            }\n             \"unchecked_shl\" | \"unchecked_shr\" => {\n                 let l = self.read_immediate(args[0])?;\n                 let r = self.read_immediate(args[1])?;"}, {"sha": "ac75a95dbe0fab616753fb3eaeb667a205957484", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9204497c2999ce4a3df9802d48cb990be7ee1164/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9204497c2999ce4a3df9802d48cb990be7ee1164/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=9204497c2999ce4a3df9802d48cb990be7ee1164", "patch": "@@ -820,6 +820,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                 | \"add_with_overflow\"\n                                 | \"sub_with_overflow\"\n                                 | \"mul_with_overflow\"\n+                                | \"saturating_add\"\n                                 // no need to check feature gates, intrinsics are only callable\n                                 // from the libstd or with forever unstable feature gates\n                                 => is_const_fn = true,"}, {"sha": "bb7fe0dab548ac6eb5c8675ed47acab2a2d95195", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9204497c2999ce4a3df9802d48cb990be7ee1164/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9204497c2999ce4a3df9802d48cb990be7ee1164/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=9204497c2999ce4a3df9802d48cb990be7ee1164", "patch": "@@ -374,6 +374,7 @@ fn is_intrinsic_whitelisted(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool\n         | \"overflowing_add\" // ~> .wrapping_add\n         | \"overflowing_sub\" // ~> .wrapping_sub\n         | \"overflowing_mul\" // ~> .wrapping_mul\n+        | \"saturating_add\" // ~> .saturating_add\n         | \"unchecked_shl\" // ~> .wrapping_shl\n         | \"unchecked_shr\" // ~> .wrapping_shr\n         | \"rotate_left\" // ~> .rotate_left"}, {"sha": "3ff6a1fc08aa2bfa2df2b4df28912f857c75d66f", "filename": "src/test/run-pass/const-int-saturating-arith.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9204497c2999ce4a3df9802d48cb990be7ee1164/src%2Ftest%2Frun-pass%2Fconst-int-saturating-arith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9204497c2999ce4a3df9802d48cb990be7ee1164/src%2Ftest%2Frun-pass%2Fconst-int-saturating-arith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-saturating-arith.rs?ref=9204497c2999ce4a3df9802d48cb990be7ee1164", "patch": "@@ -0,0 +1,13 @@\n+const INT_U32_NO: u32 = (42 as u32).saturating_add(2);\n+const INT_U32: u32 = u32::max_value().saturating_add(1);\n+const INT_U128: u128 = u128::max_value().saturating_add(1);\n+const INT_I128: i128 = i128::max_value().saturating_add(1);\n+const INT_I128_NEG: i128 = i128::min_value().saturating_add(-1);\n+\n+fn main() {\n+    assert_eq!(INT_U32_NO, 44);\n+    assert_eq!(INT_U32, u32::max_value());\n+    assert_eq!(INT_U128, u128::max_value());\n+    assert_eq!(INT_I128, i128::max_value());\n+    assert_eq!(INT_I128_NEG, i128::min_value());\n+}\n\\ No newline at end of file"}]}