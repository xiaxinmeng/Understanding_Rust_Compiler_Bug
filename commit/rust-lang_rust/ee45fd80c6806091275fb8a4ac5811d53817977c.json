{"sha": "ee45fd80c6806091275fb8a4ac5811d53817977c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNDVmZDgwYzY4MDYwOTEyNzVmYjhhNGFjNTgxMWQ1MzgxNzk3N2M=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-05-14T10:54:31Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-05-14T10:57:42Z"}, "message": "Mark IDENT tokens that are followed by ::\n\nSo that the type parser won't go off and try to parse a vec\ntype when it sees vec::init_op.", "tree": {"sha": "f090687a6111f8d5debf5622ffc0b324bfacb3e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f090687a6111f8d5debf5622ffc0b324bfacb3e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee45fd80c6806091275fb8a4ac5811d53817977c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee45fd80c6806091275fb8a4ac5811d53817977c", "html_url": "https://github.com/rust-lang/rust/commit/ee45fd80c6806091275fb8a4ac5811d53817977c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee45fd80c6806091275fb8a4ac5811d53817977c/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ad58d4dd6fb40e0833a094799717cc2b17fefc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad58d4dd6fb40e0833a094799717cc2b17fefc6", "html_url": "https://github.com/rust-lang/rust/commit/1ad58d4dd6fb40e0833a094799717cc2b17fefc6"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "18d211d94e8af67b81d8318c5bdd0f6cd78b66ff", "filename": "src/comp/front/lexer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee45fd80c6806091275fb8a4ac5811d53817977c/src%2Fcomp%2Ffront%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee45fd80c6806091275fb8a4ac5811d53817977c/src%2Fcomp%2Ffront%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Flexer.rs?ref=ee45fd80c6806091275fb8a4ac5811d53817977c", "patch": "@@ -470,7 +470,8 @@ fn next_token(reader rdr) -> token::token {\n             ret token::UNDERSCORE;\n         }\n \n-        ret token::IDENT(rdr.add_str(accum_str));\n+        auto is_mod_name = c == ':' && rdr.next() == ':';\n+        ret token::IDENT(rdr.add_str(accum_str), is_mod_name);\n     }\n \n     if (is_dec_digit(c)) {"}, {"sha": "f7eb675be75eca34f01c05b933bb30e86903bc7f", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ee45fd80c6806091275fb8a4ac5811d53817977c/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee45fd80c6806091275fb8a4ac5811d53817977c/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=ee45fd80c6806091275fb8a4ac5811d53817977c", "patch": "@@ -232,7 +232,7 @@ fn spanned[T](uint lo, uint hi, &T node) -> ast::spanned[T] {\n \n fn parse_ident(parser p) -> ast::ident {\n     alt (p.peek()) {\n-        case (token::IDENT(?i)) { p.bump(); ret p.get_str(i); }\n+        case (token::IDENT(?i, _)) { p.bump(); ret p.get_str(i); }\n         case (_) {\n             p.err(\"expecting ident\");\n             fail;\n@@ -253,7 +253,7 @@ fn parse_value_ident(parser p) -> ast::ident {\n fn parse_str_lit_or_env_ident(parser p) -> ast::ident {\n     alt (p.peek()) {\n         case (token::LIT_STR(?s)) { p.bump(); ret p.get_str(s); }\n-        case (token::IDENT(?i)) {\n+        case (token::IDENT(?i, _)) {\n             auto v = eval::lookup(p.get_session(), p.get_env(),\n                                  p.get_span(), p.get_str(i));\n             if (!eval::val_is_str(v)) {\n@@ -271,13 +271,13 @@ fn parse_str_lit_or_env_ident(parser p) -> ast::ident {\n \n fn is_word(&parser p, &str word) -> bool {\n     ret alt (p.peek()) {\n-        case (token::IDENT(?sid)) { _str::eq(word, p.get_str(sid)) }\n+        case (token::IDENT(?sid, false)) { _str::eq(word, p.get_str(sid)) }\n         case (_) { false }\n     };\n }\n fn eat_word(&parser p, &str word) -> bool {\n     alt (p.peek()) {\n-        case (token::IDENT(?sid)) {\n+        case (token::IDENT(?sid, false)) {\n             if (_str::eq(word, p.get_str(sid))) {\n                 p.bump();\n                 ret true;\n@@ -295,7 +295,7 @@ fn expect_word(&parser p, &str word) {\n }\n fn check_bad_word(&parser p) {\n     alt (p.peek()) {\n-        case (token::IDENT(?sid)) {\n+        case (token::IDENT(?sid, false)) {\n             auto w = p.get_str(sid);\n             if (p.get_bad_expr_words().contains_key(w)) {\n                 p.err(\"found \" + w + \" in expression position\");\n@@ -323,7 +323,7 @@ fn parse_ty_fn(ast::proto proto, parser p, uint lo)\n         auto t = parse_ty(p);\n \n         alt (p.peek()) {\n-            case (token::IDENT(_)) { p.bump(); /* ignore the param name */ }\n+            case (token::IDENT(_, _)) { p.bump(); /* ignore the param name */ }\n             case (_) { /* no param name present */ }\n         }\n \n@@ -659,7 +659,7 @@ fn parse_lit(parser p) -> ast::lit {\n \n fn is_ident(token::token t) -> bool {\n     alt (t) {\n-        case (token::IDENT(_)) { ret true; }\n+        case (token::IDENT(_, _)) { ret true; }\n         case (_) {}\n     }\n     ret false;\n@@ -688,7 +688,7 @@ fn parse_path(parser p) -> ast::path {\n     let vec[ast::ident] ids = vec();\n     while (true) {\n         alt (p.peek()) {\n-            case (token::IDENT(?i)) {\n+            case (token::IDENT(?i, _)) {\n                 hi = p.get_hi_pos();\n                 ids += vec(p.get_str(i));\n                 p.bump();\n@@ -1047,7 +1047,7 @@ fn parse_dot_or_call_expr(parser p) -> @ast::expr {\n                 p.bump();\n                 alt (p.peek()) {\n \n-                    case (token::IDENT(?i)) {\n+                    case (token::IDENT(?i, _)) {\n                         hi = p.get_hi_pos();\n                         p.bump();\n                         auto e_ = ast::expr_field(e, p.get_str(i),\n@@ -1446,7 +1446,7 @@ fn parse_pat(parser p) -> @ast::pat {\n         case (token::QUES) {\n             p.bump();\n             alt (p.peek()) {\n-                case (token::IDENT(?id)) {\n+                case (token::IDENT(?id, _)) {\n                     hi = p.get_hi_pos();\n                     p.bump();\n                     pat = ast::pat_bind(p.get_str(id), p.next_def_id(),\n@@ -1985,7 +1985,7 @@ fn parse_item_tag(parser p) -> @ast::item {\n     while (p.peek() != token::RBRACE) {\n         auto tok = p.peek();\n         alt (tok) {\n-            case (token::IDENT(?name)) {\n+            case (token::IDENT(?name, _)) {\n                 check_bad_word(p);\n                 auto vlo = p.get_lo_pos();\n                 p.bump();\n@@ -2052,7 +2052,7 @@ fn parse_auth(parser p) -> ast::_auth {\n \n fn peeking_at_item(parser p) -> bool {\n     alt (p.peek()) {\n-        case (token::IDENT(?sid)) {\n+        case (token::IDENT(?sid, false)) {\n             auto st = p.get_str(sid);\n             ret _str::eq(st, \"state\") ||\n                 _str::eq(st, \"gc\") ||\n@@ -2180,7 +2180,7 @@ fn parse_rest_import_name(parser p, ast::ident first,\n fn parse_full_import_name(parser p, ast::ident def_ident)\n        -> @ast::view_item {\n     alt (p.peek()) {\n-        case (token::IDENT(?i)) {\n+        case (token::IDENT(?i, _)) {\n             p.bump();\n             ret parse_rest_import_name(p, p.get_str(i), some(def_ident));\n         }\n@@ -2193,7 +2193,7 @@ fn parse_full_import_name(parser p, ast::ident def_ident)\n \n fn parse_import(parser p) -> @ast::view_item {\n     alt (p.peek()) {\n-        case (token::IDENT(?i)) {\n+        case (token::IDENT(?i, _)) {\n             p.bump();\n             alt (p.peek()) {\n                 case (token::EQ) {\n@@ -2235,7 +2235,7 @@ fn parse_view_item(parser p) -> @ast::view_item {\n \n fn is_view_item(&parser p) -> bool {\n     alt (p.peek()) {\n-        case (token::IDENT(?sid)) {\n+        case (token::IDENT(?sid, false)) {\n             auto st = p.get_str(sid);\n             ret _str::eq(st, \"use\") || _str::eq(st, \"import\") ||\n                 _str::eq(st, \"export\");"}, {"sha": "38f66a16dc5c74cdbe1442f6d150a0cb6422d11b", "filename": "src/comp/front/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee45fd80c6806091275fb8a4ac5811d53817977c/src%2Fcomp%2Ffront%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee45fd80c6806091275fb8a4ac5811d53817977c/src%2Fcomp%2Ffront%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftoken.rs?ref=ee45fd80c6806091275fb8a4ac5811d53817977c", "patch": "@@ -69,7 +69,7 @@ tag token {\n     LIT_BOOL(bool);\n \n     /* Name components */\n-    IDENT(str_num);\n+    IDENT(str_num, bool);\n     IDX(int);\n     UNDERSCORE;\n \n@@ -160,7 +160,7 @@ fn to_str(lexer::reader r, token t) -> str {\n         }\n \n         /* Name components */\n-        case (IDENT(?s)) {\n+        case (IDENT(?s, _)) {\n             ret r.get_str(s);\n         }\n         case (IDX(?i)) { ret \"_\" + _int::to_str(i, 10u); }"}]}