{"sha": "208bb933e7a6d8820646e3e367e2bf188d85e485", "node_id": "C_kwDOAAsO6NoAKDIwOGJiOTMzZTdhNmQ4ODIwNjQ2ZTNlMzY3ZTJiZjE4OGQ4NWU0ODU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-07T10:52:48Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-25T08:40:27Z"}, "message": "Use \"must be init\" instead of \"must not be uninit\" everywhere", "tree": {"sha": "1f9481d85de4fe48e4dbc894b6e14ef1b6b2159d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f9481d85de4fe48e4dbc894b6e14ef1b6b2159d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/208bb933e7a6d8820646e3e367e2bf188d85e485", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/208bb933e7a6d8820646e3e367e2bf188d85e485", "html_url": "https://github.com/rust-lang/rust/commit/208bb933e7a6d8820646e3e367e2bf188d85e485", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/208bb933e7a6d8820646e3e367e2bf188d85e485/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5446a52b4bcdca0938f6393732de6e0c13305d9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5446a52b4bcdca0938f6393732de6e0c13305d9b", "html_url": "https://github.com/rust-lang/rust/commit/5446a52b4bcdca0938f6393732de6e0c13305d9b"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "5c9ea1234f1c0201c315cdbdda95a7f23fc39efa", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/208bb933e7a6d8820646e3e367e2bf188d85e485/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/208bb933e7a6d8820646e3e367e2bf188d85e485/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=208bb933e7a6d8820646e3e367e2bf188d85e485", "patch": "@@ -2568,13 +2568,11 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n                     Some(\"characters must be a valid Unicode codepoint\".into())\n                 }\n                 Int(_) | Uint(_) if init == InitKind::Uninit => {\n-                    Some(\"integers must not be uninitialized\".into())\n-                }\n-                Float(_) if init == InitKind::Uninit => {\n-                    Some(\"floats must not be uninitialized\".into())\n+                    Some(\"integers must be initialized\".into())\n                 }\n+                Float(_) if init == InitKind::Uninit => Some(\"floats must be initialized\".into()),\n                 RawPtr(_) if init == InitKind::Uninit => {\n-                    Some(\"raw pointers must not be uninitialized\".into())\n+                    Some(\"raw pointers must be initialized\".into())\n                 }\n                 // Recurse and checks for some compound types. (but not unions)\n                 Adt(adt_def, substs) if !adt_def.is_union() => {"}, {"sha": "5370660d6c185ecc51db76349bce46394cd410a4", "filename": "src/test/ui/lint/invalid_value.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/208bb933e7a6d8820646e3e367e2bf188d85e485/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/208bb933e7a6d8820646e3e367e2bf188d85e485/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr?ref=208bb933e7a6d8820646e3e367e2bf188d85e485", "patch": "@@ -99,7 +99,7 @@ LL |         let _val: (i32, !) = mem::uninitialized();\n    |                              this code causes undefined behavior when executed\n    |                              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: integers must not be uninitialized\n+   = note: integers must be initialized\n \n error: the type `Void` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:71:26\n@@ -332,7 +332,7 @@ LL |         let _val: NonNull<i32> = mem::uninitialized();\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `std::ptr::NonNull<i32>` must be non-null\n-   = note: raw pointers must not be uninitialized\n+   = note: raw pointers must be initialized\n \n error: the type `(NonZeroU32, i32)` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:95:39\n@@ -355,7 +355,7 @@ LL |         let _val: (NonZeroU32, i32) = mem::uninitialized();\n    |                                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `std::num::NonZeroU32` must be non-null\n-   = note: integers must not be uninitialized\n+   = note: integers must be initialized\n \n error: the type `*const dyn Send` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:98:37\n@@ -462,7 +462,7 @@ note: because `std::num::NonZeroU32` must be non-null (in this field of the only\n    |\n LL |     Banana(NonZeroU32),\n    |            ^^^^^^^^^^\n-   = note: integers must not be uninitialized\n+   = note: integers must be initialized\n \n error: the type `bool` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:112:26\n@@ -501,7 +501,7 @@ LL |         let _val: NonBig = mem::uninitialized();\n    |                            help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `NonBig` must be initialized inside its custom valid range\n-note: integers must not be uninitialized (in this struct field)\n+note: integers must be initialized (in this struct field)\n   --> $DIR/invalid_value.rs:23:26\n    |\n LL | pub(crate) struct NonBig(u64);\n@@ -542,7 +542,7 @@ LL |         let _val: i32 = mem::uninitialized();\n    |                         this code causes undefined behavior when executed\n    |                         help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: integers must not be uninitialized\n+   = note: integers must be initialized\n \n error: the type `f32` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:130:25\n@@ -553,7 +553,7 @@ LL |         let _val: f32 = mem::uninitialized();\n    |                         this code causes undefined behavior when executed\n    |                         help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: floats must not be uninitialized\n+   = note: floats must be initialized\n \n error: the type `*const ()` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:133:31\n@@ -564,7 +564,7 @@ LL |         let _val: *const () = mem::uninitialized();\n    |                               this code causes undefined behavior when executed\n    |                               help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: raw pointers must not be uninitialized\n+   = note: raw pointers must be initialized\n \n error: the type `*const [()]` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:136:33\n@@ -575,7 +575,7 @@ LL |         let _val: *const [()] = mem::uninitialized();\n    |                                 this code causes undefined behavior when executed\n    |                                 help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: raw pointers must not be uninitialized\n+   = note: raw pointers must be initialized\n \n error: the type `WrapAroundRange` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:139:37\n@@ -587,7 +587,7 @@ LL |         let _val: WrapAroundRange = mem::uninitialized();\n    |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `WrapAroundRange` must be initialized inside its custom valid range\n-note: integers must not be uninitialized (in this struct field)\n+note: integers must be initialized (in this struct field)\n   --> $DIR/invalid_value.rs:49:35\n    |\n LL | pub(crate) struct WrapAroundRange(u8);\n@@ -662,7 +662,7 @@ LL |         let _val: NonNull<i32> = MaybeUninit::uninit().assume_init();\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `std::ptr::NonNull<i32>` must be non-null\n-   = note: raw pointers must not be uninitialized\n+   = note: raw pointers must be initialized\n \n error: the type `bool` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:159:26"}]}