{"sha": "b032a15fa8fae9d101d7dd37d6627d7d677f8d1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMzJhMTVmYThmYWU5ZDEwMWQ3ZGQzN2Q2NjI3ZDdkNjc3ZjhkMWU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-08T02:36:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-08T02:36:05Z"}, "message": "Rollup merge of #75250 - RalfJung:uninit-const-ptr, r=oli-obk\n\nmake MaybeUninit::as_(mut_)ptr const\n\nI think it was just an oversight that they are not const yet.\n\nI also changed their implementation as the old one created references to uninitialized memory.^^", "tree": {"sha": "641dafd5dde2c390ae49f8be12156bfb1d7a32a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/641dafd5dde2c390ae49f8be12156bfb1d7a32a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b032a15fa8fae9d101d7dd37d6627d7d677f8d1e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfLg+VCRBK7hj4Ov3rIwAAdHIIAD153aysVQFScFsbSdLJcC+8\n5w2s1kPfFkPx08rtbFOFJ4Uf83Rb/2uch4ZKOxC4MEPxOC3grdoPFy84VNiiePP4\nFRrp5P5lhmh/43RjZF4pjSZbgBkro5zGLkeiqw39C0NsNXA2f6/oi7LSPLCTCtzZ\nvps9FHkO5jufyawvhQExumH18eWMk/F2EbTWS6nr8RzssKmPNbEVMyMLN7turQ2T\nMvqguGuYWgXyJeGymPPIVQtiBPJJ1z5ZM/kmRSuKexoRIiXqTiWXH10/kblcTPXL\nT85yo7Ka3Y+2h/tVRe7qhWucf9YB8CIC6cu0akTcHXLF7J+G7n+pdvxym6EfwNQ=\n=rs5m\n-----END PGP SIGNATURE-----\n", "payload": "tree 641dafd5dde2c390ae49f8be12156bfb1d7a32a3\nparent 255434d83cab2dab5ab5c7d942a5dbfcda3db894\nparent ec5d78d35004846f1d0c344e968eaf0068a68357\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1596854165 +0900\ncommitter GitHub <noreply@github.com> 1596854165 +0900\n\nRollup merge of #75250 - RalfJung:uninit-const-ptr, r=oli-obk\n\nmake MaybeUninit::as_(mut_)ptr const\n\nI think it was just an oversight that they are not const yet.\n\nI also changed their implementation as the old one created references to uninitialized memory.^^\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b032a15fa8fae9d101d7dd37d6627d7d677f8d1e", "html_url": "https://github.com/rust-lang/rust/commit/b032a15fa8fae9d101d7dd37d6627d7d677f8d1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b032a15fa8fae9d101d7dd37d6627d7d677f8d1e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "255434d83cab2dab5ab5c7d942a5dbfcda3db894", "url": "https://api.github.com/repos/rust-lang/rust/commits/255434d83cab2dab5ab5c7d942a5dbfcda3db894", "html_url": "https://github.com/rust-lang/rust/commit/255434d83cab2dab5ab5c7d942a5dbfcda3db894"}, {"sha": "ec5d78d35004846f1d0c344e968eaf0068a68357", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec5d78d35004846f1d0c344e968eaf0068a68357", "html_url": "https://github.com/rust-lang/rust/commit/ec5d78d35004846f1d0c344e968eaf0068a68357"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "027498d3911c8fcac38383ee5df5cb0add760480", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b032a15fa8fae9d101d7dd37d6627d7d677f8d1e/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b032a15fa8fae9d101d7dd37d6627d7d677f8d1e/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=b032a15fa8fae9d101d7dd37d6627d7d677f8d1e", "patch": "@@ -405,9 +405,11 @@ impl<T> MaybeUninit<T> {\n     /// (Notice that the rules around references to uninitialized data are not finalized yet, but\n     /// until they are, it is advisable to avoid them.)\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_uninit_as_ptr\", issue = \"75251\")]\n     #[inline(always)]\n-    pub fn as_ptr(&self) -> *const T {\n-        unsafe { &*self.value as *const T }\n+    pub const fn as_ptr(&self) -> *const T {\n+        // `MaybeUninit` and `ManuallyDrop` are both `repr(transparent)` so we can cast the pointer.\n+        self as *const _ as *const T\n     }\n \n     /// Gets a mutable pointer to the contained value. Reading from this pointer or turning it\n@@ -442,9 +444,11 @@ impl<T> MaybeUninit<T> {\n     /// (Notice that the rules around references to uninitialized data are not finalized yet, but\n     /// until they are, it is advisable to avoid them.)\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_uninit_as_ptr\", issue = \"75251\")]\n     #[inline(always)]\n-    pub fn as_mut_ptr(&mut self) -> *mut T {\n-        unsafe { &mut *self.value as *mut T }\n+    pub const fn as_mut_ptr(&mut self) -> *mut T {\n+        // `MaybeUninit` and `ManuallyDrop` are both `repr(transparent)` so we can cast the pointer.\n+        self as *mut _ as *mut T\n     }\n \n     /// Extracts the value from the `MaybeUninit<T>` container. This is a great way"}]}