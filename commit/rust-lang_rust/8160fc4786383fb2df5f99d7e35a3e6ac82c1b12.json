{"sha": "8160fc4786383fb2df5f99d7e35a3e6ac82c1b12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNjBmYzQ3ODYzODNmYjJkZjVmOTlkN2UzNWEzZTZhYzgyYzFiMTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-22T16:50:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-22T16:50:17Z"}, "message": "Auto merge of #21078 - js-ojus:master, r=steveklabnik\n\n* Include an illustration of a function that accepts two closures.", "tree": {"sha": "56c0daa4f27339593151377c1878844793345b0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56c0daa4f27339593151377c1878844793345b0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8160fc4786383fb2df5f99d7e35a3e6ac82c1b12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8160fc4786383fb2df5f99d7e35a3e6ac82c1b12", "html_url": "https://github.com/rust-lang/rust/commit/8160fc4786383fb2df5f99d7e35a3e6ac82c1b12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8160fc4786383fb2df5f99d7e35a3e6ac82c1b12/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7930d93d9b57beaeabfeb43cf78fc8161ecd46c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7930d93d9b57beaeabfeb43cf78fc8161ecd46c", "html_url": "https://github.com/rust-lang/rust/commit/b7930d93d9b57beaeabfeb43cf78fc8161ecd46c"}, {"sha": "ac110df0ff52c3ae93d98bc75ec08b99d7d205b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac110df0ff52c3ae93d98bc75ec08b99d7d205b5", "html_url": "https://github.com/rust-lang/rust/commit/ac110df0ff52c3ae93d98bc75ec08b99d7d205b5"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "bfb1494efc785526c312a7c9635c1ad08f3cbcac", "filename": "src/doc/trpl/closures.md", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8160fc4786383fb2df5f99d7e35a3e6ac82c1b12/src%2Fdoc%2Ftrpl%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/8160fc4786383fb2df5f99d7e35a3e6ac82c1b12/src%2Fdoc%2Ftrpl%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fclosures.md?ref=8160fc4786383fb2df5f99d7e35a3e6ac82c1b12", "patch": "@@ -117,14 +117,7 @@ fn twice<F: Fn(i32) -> i32>(x: i32, f: F) -> i32 {\n arguments. `x` is an `i32`, we've done that a ton of times. `f` is a function,\n though, and that function takes an `i32` and returns an `i32`. This is\n what the requirement `Fn(i32) -> i32` for the type parameter `F` says.\n-You might ask yourself: why do we need to introduce a type parameter here?\n-That is because in Rust each closure has its own unique type.\n-So, not only do closures with different signatures have different types,\n-but different closures with the *same* signature have *different* types!\n-You can think of it this way: the behaviour of a closure is part of its type.\n-And since we want to support many different closures that all take\n-an `i32` and return an `i32` we introduced a type parameter that is able\n-to represent all these closures. \n+Now `F` represents *any* function that takes an `i32` and returns an `i32`.\n \n This is the most complicated function signature we've seen yet! Give it a read\n a few times until you can see how it works. It takes a teeny bit of practice, and\n@@ -181,6 +174,40 @@ fn main() {\n \n Doing this is not particularly common, but it's useful every once in a while.\n \n+Before we move on, let us look at a function that accepts two closures.\n+\n+```{rust}\n+fn compose<F, G>(x: i32, f: F, g: G) -> i32\n+    where F: Fn(i32) -> i32, G: Fn(i32) -> i32 {\n+    g(f(x))\n+}\n+\n+fn main() {\n+    compose(5,\n+            |&: n: i32| { n + 42 },\n+            |&: n: i32| { n * 2 }); // evaluates to 94\n+}\n+```\n+\n+You might ask yourself: why do we need to introduce two type\n+parameters `F` and `G` here?  Evidently, both `f` and `g` have the\n+same signature: `Fn(i32) -> i32`.\n+\n+That is because in Rust each closure has its own unique type.\n+So, not only do closures with different signatures have different types,\n+but different closures with the *same* signature have *different*\n+types, as well!\n+\n+You can think of it this way: the behavior of a closure is part of its\n+type.  Therefore, using a single type parameter for both closures\n+will accept the first of them, rejecting the second. The distinct\n+type of the second closure does not allow it to be represented by the\n+same type parameter as that of the first.  We acknowledge this, and\n+use two different type parameters `F` and `G`.\n+\n+This also introduces the `where` clause, which lets us describe type\n+parameters in a more flexible manner.\n+\n That's all you need to get the hang of closures! Closures are a little bit\n strange at first, but once you're used to them, you'll miss them\n in other languages. Passing functions to other functions is"}]}