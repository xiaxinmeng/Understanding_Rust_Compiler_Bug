{"sha": "c2eafd268b982cd9a494dad783f8e3c68b9b4826", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZWFmZDI2OGI5ODJjZDlhNDk0ZGFkNzgzZjhlM2M2OGI5YjQ4MjY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-24T23:00:26Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-27T22:53:09Z"}, "message": "Convert std::fs to istrs. Issue #855", "tree": {"sha": "703ef32cf4e57702647f25d086714fe58b5d49b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/703ef32cf4e57702647f25d086714fe58b5d49b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2eafd268b982cd9a494dad783f8e3c68b9b4826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2eafd268b982cd9a494dad783f8e3c68b9b4826", "html_url": "https://github.com/rust-lang/rust/commit/c2eafd268b982cd9a494dad783f8e3c68b9b4826", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2eafd268b982cd9a494dad783f8e3c68b9b4826/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "051f1ff562ad1d88fd815f2b8b9905cd10dd2764", "url": "https://api.github.com/repos/rust-lang/rust/commits/051f1ff562ad1d88fd815f2b8b9905cd10dd2764", "html_url": "https://github.com/rust-lang/rust/commit/051f1ff562ad1d88fd815f2b8b9905cd10dd2764"}], "stats": {"total": 201, "additions": 121, "deletions": 80}, "files": [{"sha": "29eb74e41ebd5ad2666a909beb6f713122e45053", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=c2eafd268b982cd9a494dad783f8e3c68b9b4826", "patch": "@@ -40,7 +40,9 @@ fn llvm_err(sess: session::session, msg: str) {\n }\n \n fn link_intrinsics(sess: session::session, llmod: ModuleRef) {\n-    let path = fs::connect(sess.get_opts().sysroot, \"lib/intrinsics.bc\");\n+    let path = istr::to_estr(\n+        fs::connect(istr::from_estr(sess.get_opts().sysroot),\n+                    ~\"lib/intrinsics.bc\"));\n     let membuf =\n         llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(str::buf(path));\n     if membuf as uint == 0u {\n@@ -360,10 +362,12 @@ fn build_link_meta(sess: &session::session, c: &ast::crate, output: &str,\n               none. {\n                 let name =\n                     {\n-                        let os = str::split(fs::basename(output), '.' as u8);\n+                        let os = istr::split(\n+                            fs::basename(istr::from_estr(output)),\n+                            '.' as u8);\n                         assert (vec::len(os) >= 2u);\n                         vec::pop(os);\n-                        str::connect(os, \".\")\n+                        istr::to_estr(istr::connect(os, ~\".\"))\n                     };\n                 warn_missing(sess, \"name\", name);\n                 name"}, {"sha": "c65ecfaaf2a470e47aa3ac965dd3a01a202ea82c", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=c2eafd268b982cd9a494dad783f8e3c68b9b4826", "patch": "@@ -312,7 +312,8 @@ fn get_arch(triple: str) -> session::arch {\n }\n \n fn get_default_sysroot(binary: str) -> str {\n-    let dirname = fs::dirname(binary);\n+    let dirname = istr::to_estr(\n+        fs::dirname(istr::from_estr(binary)));\n     if str::eq(dirname, binary) { ret \".\"; }\n     ret dirname;\n }\n@@ -443,7 +444,8 @@ fn opts() -> [getopts::opt] {\n \n fn main(args: [str]) {\n     let binary = vec::shift(args);\n-    let binary_dir = fs::dirname(binary);\n+    let binary_dir = istr::to_estr(\n+        fs::dirname(istr::from_estr(binary)));\n     let match =\n         alt getopts::getopts(args, opts()) {\n           getopts::success(m) { m }\n@@ -557,20 +559,20 @@ fn main(args: [str]) {\n     } else { lib_cmd = \"-shared\"; }\n \n     // Converts a library file name into a gcc -l argument\n-    fn unlib(config: @session::config, filename: str) -> str {\n+    fn unlib(config: @session::config, filename: &istr) -> istr {\n         let rmlib =\n-            bind fn (config: @session::config, filename: str) -> str {\n-                     if config.os == session::os_macos ||\n-                            config.os == session::os_linux &&\n-                                str::find(filename, \"lib\") == 0 {\n-                         ret str::slice(filename, 3u,\n-                                        str::byte_len(filename));\n-                     } else { ret filename; }\n-                 }(config, _);\n-        fn rmext(filename: str) -> str {\n-            let parts = str::split(filename, '.' as u8);\n+            bind fn (config: @session::config, filename: &istr) -> istr {\n+            if config.os == session::os_macos ||\n+                config.os == session::os_linux &&\n+                istr::find(filename, ~\"lib\") == 0 {\n+                ret istr::slice(filename, 3u,\n+                                istr::byte_len(filename));\n+            } else { ret filename; }\n+        }(config, _);\n+        fn rmext(filename: &istr) -> istr {\n+            let parts = istr::split(filename, '.' as u8);\n             vec::pop(parts);\n-            ret str::connect(parts, \".\");\n+            ret istr::connect(parts, ~\".\");\n         }\n         ret alt config.os {\n               session::os_macos. { rmext(rmlib(filename)) }\n@@ -585,10 +587,11 @@ fn main(args: [str]) {\n             gcc_args += [cratepath];\n             cont;\n         }\n+        let cratepath = istr::from_estr(cratepath);\n         let dir = fs::dirname(cratepath);\n-        if dir != \"\" { gcc_args += [\"-L\" + dir]; }\n+        if dir != ~\"\" { gcc_args += [\"-L\" + istr::to_estr(dir)]; }\n         let libarg = unlib(sess.get_targ_cfg(), fs::basename(cratepath));\n-        gcc_args += [\"-l\" + libarg];\n+        gcc_args += [\"-l\" + istr::to_estr(libarg)];\n     }\n \n     let ula = cstore::get_used_link_args(cstore);"}, {"sha": "c13de2d6f9d0b16322b4f27f54a463907d90b88f", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=c2eafd268b982cd9a494dad783f8e3c68b9b4826", "patch": "@@ -15,6 +15,7 @@ import back::x86;\n import util::common;\n import std::vec;\n import std::str;\n+import std::istr;\n import std::fs;\n import std::io;\n import std::option;\n@@ -150,7 +151,8 @@ fn find_library_crate_aux(nn: &{prefix: str, suffix: str}, crate_name: str,\n                           metas: &[@ast::meta_item],\n                           library_search_paths: &[str]) ->\n    option::t<{ident: str, data: @[u8]}> {\n-    let prefix: str = nn.prefix + crate_name;\n+    let prefix: istr = istr::from_estr(nn.prefix + crate_name);\n+    let suffix: istr = istr::from_estr(nn.suffix);\n     // FIXME: we could probably use a 'glob' function in std::fs but it will\n     // be much easier to write once the unsafe module knows more about FFI\n     // tricks. Currently the glob(3) interface is a bit more than we can\n@@ -159,13 +161,17 @@ fn find_library_crate_aux(nn: &{prefix: str, suffix: str}, crate_name: str,\n \n     for library_search_path: str in library_search_paths {\n         log #fmt[\"searching %s\", library_search_path];\n-        for path: str in fs::list_dir(library_search_path) {\n-            log #fmt[\"searching %s\", path];\n-            let f: str = fs::basename(path);\n-            if !(str::starts_with(f, prefix) && str::ends_with(f, nn.suffix))\n+        let library_search_path = istr::from_estr(library_search_path);\n+        for path: istr in fs::list_dir(library_search_path) {\n+            log #fmt[\"searching %s\", istr::to_estr(path)];\n+            let f: istr = fs::basename(path);\n+            let path = istr::to_estr(path);\n+            if !(istr::starts_with(f, prefix) && istr::ends_with(f, suffix))\n                {\n-                log #fmt[\"skipping %s, doesn't look like %s*%s\", path, prefix,\n-                         nn.suffix];\n+                log #fmt[\"skipping %s, doesn't look like %s*%s\",\n+                         path,\n+                         istr::to_estr(prefix),\n+                         istr::to_estr(suffix)];\n                 cont;\n             }\n             alt get_metadata_section(path) {"}, {"sha": "18d9a04ebbf86ee060f2778ca4c12fa35e75f2e0", "filename": "src/comp/syntax/parse/eval.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs?ref=c2eafd268b982cd9a494dad783f8e3c68b9b4826", "patch": "@@ -1,5 +1,6 @@\n \n import std::str;\n+import std::istr;\n import std::option;\n import std::option::some;\n import std::option::none;\n@@ -48,10 +49,12 @@ fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: str,\n       ast::cdir_src_mod(id, file_opt, attrs) {\n         let file_path = id + \".rs\";\n         alt file_opt { some(f) { file_path = f; } none. { } }\n-        let full_path =\n-            if std::fs::path_is_absolute(file_path) {\n-                file_path\n-            } else { prefix + std::fs::path_sep() + file_path };\n+        let full_path = if std::fs::path_is_absolute(\n+            istr::from_estr(file_path)) {\n+            file_path\n+        } else {\n+            prefix + istr::to_estr(std::fs::path_sep()) + file_path\n+        };\n         if cx.mode == mode_depend { cx.deps += [full_path]; ret; }\n         let p0 =\n             new_parser_from_file(cx.sess, cx.cfg, full_path, cx.chpos,\n@@ -73,9 +76,9 @@ fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: str,\n         let path = id;\n         alt dir_opt { some(d) { path = d; } none. { } }\n         let full_path =\n-            if std::fs::path_is_absolute(path) {\n+            if std::fs::path_is_absolute(istr::from_estr(path)) {\n                 path\n-            } else { prefix + std::fs::path_sep() + path };\n+            } else { prefix + istr::to_estr(std::fs::path_sep()) + path };\n         let m0 = eval_crate_directives_to_mod(cx, cdirs, full_path);\n         let i =\n             @{ident: id,"}, {"sha": "59cea6e131deb565211e40b82724aec7dc7be9cb", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=c2eafd268b982cd9a494dad783f8e3c68b9b4826", "patch": "@@ -2,6 +2,7 @@\n import std::io;\n import std::vec;\n import std::str;\n+import std::istr;\n import std::option;\n import std::option::some;\n import std::option::none;\n@@ -2525,7 +2526,8 @@ fn parse_crate_from_crate_file(input: &str, cfg: &ast::crate_cfg,\n                                sess: &parse_sess) -> @ast::crate {\n     let p = new_parser_from_file(sess, cfg, input, 0u, 0u, CRATE_FILE);\n     let lo = p.get_lo_pos();\n-    let prefix = std::fs::dirname(p.get_filemap().name);\n+    let prefix = istr::to_estr(\n+        std::fs::dirname(istr::from_estr(p.get_filemap().name)));\n     let leading_attrs = parse_inner_attrs_and_next(p);\n     let crate_attrs = leading_attrs.inner;\n     let first_cdir_attr = leading_attrs.next;"}, {"sha": "3f88f26bdcd41518daa3ed079aa4b106511bde6a", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=c2eafd268b982cd9a494dad783f8e3c68b9b4826", "patch": "@@ -10,6 +10,7 @@ import std::io;\n import std::io::stdout;\n import std::vec;\n import std::str;\n+import std::istr;\n import std::uint;\n import std::option;\n \n@@ -40,8 +41,11 @@ fn find_rust_files(files: &mutable [str], path: str) {\n         if file_contains(path, \"xfail-stage1\") {\n             //log_err \"Skipping \" + path + \" because it is marked as xfail-stage1\";\n         } else { files += [path]; }\n-    } else if fs::file_is_dir(path) && str::find(path, \"compile-fail\") == -1 {\n-        for p in fs::list_dir(path) { find_rust_files(files, p); }\n+    } else if fs::file_is_dir(istr::from_estr(path))\n+        && str::find(path, \"compile-fail\") == -1 {\n+        for p in fs::list_dir(istr::from_estr(path)) {\n+            find_rust_files(files, istr::to_estr(p));\n+        }\n     }\n }\n "}, {"sha": "9bf6d40323fb01e98fbfad467fb45391c13d4767", "filename": "src/lib/fs.rs", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Flib%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Flib%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ffs.rs?ref=c2eafd268b982cd9a494dad783f8e3c68b9b4826", "patch": "@@ -7,61 +7,71 @@ native \"rust\" mod rustrt {\n     fn rust_file_is_dir(path: str) -> int;\n }\n \n-fn path_sep() -> str { ret str::from_char(os_fs::path_sep); }\n+fn path_sep() -> istr { ret istr::from_char(os_fs::path_sep); }\n \n-type path = str;\n+type path = istr;\n \n-fn dirname(p: path) -> path {\n-    let i: int = str::rindex(p, os_fs::path_sep as u8);\n+fn dirname(p: &path) -> path {\n+    let i: int = istr::rindex(p, os_fs::path_sep as u8);\n     if i == -1 {\n-        i = str::rindex(p, os_fs::alt_path_sep as u8);\n-        if i == -1 { ret \".\"; }\n+        i = istr::rindex(p, os_fs::alt_path_sep as u8);\n+        if i == -1 { ret ~\".\"; }\n     }\n-    ret str::substr(p, 0u, i as uint);\n+    ret istr::substr(p, 0u, i as uint);\n }\n \n-fn basename(p: path) -> path {\n-    let i: int = str::rindex(p, os_fs::path_sep as u8);\n+fn basename(p: &path) -> path {\n+    let i: int = istr::rindex(p, os_fs::path_sep as u8);\n     if i == -1 {\n-        i = str::rindex(p, os_fs::alt_path_sep as u8);\n+        i = istr::rindex(p, os_fs::alt_path_sep as u8);\n         if i == -1 { ret p; }\n     }\n-    let len = str::byte_len(p);\n+    let len = istr::byte_len(p);\n     if i + 1 as uint >= len { ret p; }\n-    ret str::slice(p, i + 1 as uint, len);\n+    ret istr::slice(p, i + 1 as uint, len);\n }\n \n \n // FIXME: Need some typestate to avoid bounds check when len(pre) == 0\n-fn connect(pre: path, post: path) -> path {\n-    let len = str::byte_len(pre);\n+fn connect(pre: &path, post: &path) -> path {\n+    let len = istr::byte_len(pre);\n     ret if pre[len - 1u] == os_fs::path_sep as u8 {\n \n             // Trailing '/'?\n             pre + post\n         } else { pre + path_sep() + post };\n }\n \n-fn file_is_dir(p: path) -> bool { ret rustrt::rust_file_is_dir(p) != 0; }\n+fn file_is_dir(p: &path) -> bool {\n+    ret rustrt::rust_file_is_dir(istr::to_estr(p)) != 0;\n+}\n \n-fn list_dir(p: path) -> [str] {\n-    let pl = str::byte_len(p);\n+fn list_dir(p: &path) -> [istr] {\n+    let p = p;\n+    let pl = istr::byte_len(p);\n     if pl == 0u || p[pl - 1u] as char != os_fs::path_sep { p += path_sep(); }\n-    let full_paths: [str] = [];\n-    for filename: str in os_fs::list_dir(p) {\n-        if !str::eq(filename, \".\") {\n-            if !str::eq(filename, \"..\") { full_paths += [p + filename]; }\n+    let full_paths: [istr] = [];\n+    for filename: str in os_fs::list_dir(istr::to_estr(p)) {\n+        let filename = istr::from_estr(filename);\n+        if !istr::eq(filename, ~\".\") {\n+            if !istr::eq(filename, ~\"..\") { full_paths += [p + filename]; }\n         }\n     }\n     ret full_paths;\n }\n \n-fn path_is_absolute(p: path) -> bool { ret os_fs::path_is_absolute(p); }\n+fn path_is_absolute(p: &path) -> bool {\n+    ret os_fs::path_is_absolute(istr::to_estr(p));\n+}\n \n // FIXME: under Windows, we should prepend the current drive letter to paths\n // that start with a slash.\n-fn make_absolute(p: path) -> path {\n-    if path_is_absolute(p) { ret p; } else { ret connect(getcwd(), p); }\n+fn make_absolute(p: &path) -> path {\n+    if path_is_absolute(p) {\n+        ret p;\n+    } else {\n+        ret connect(istr::from_estr(getcwd()), p);\n+    }\n }\n \n // Local Variables:"}, {"sha": "9e1fa37693d15d6e8e8cd7020a152364fedcf1c6", "filename": "src/lib/istr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Flib%2Fistr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Flib%2Fistr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fistr.rs?ref=c2eafd268b982cd9a494dad783f8e3c68b9b4826", "patch": "@@ -3,7 +3,7 @@ index, rindex, find, starts_with, ends_with, substr, slice, split,\n concat, connect, to_upper, replace, char_slice, trim_left, trim_right, trim,\n unshift_char, shift_char, pop_char, push_char, is_utf8, from_chars, to_chars,\n char_len, char_at, bytes, is_ascii, shift_byte, pop_byte, unsafe_from_byte,\n-unsafe_from_bytes;\n+unsafe_from_bytes, from_char;\n \n export from_estr, to_estr;\n "}, {"sha": "af4ae5c85cd04c1cd851f300724ae3de46be5967", "filename": "src/test/compiletest/compiletest.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fcompiletest.rs?ref=c2eafd268b982cd9a494dad783f8e3c68b9b4826", "patch": "@@ -3,6 +3,7 @@ import std::getopts;\n import std::test;\n import std::fs;\n import std::str;\n+import std::istr;\n import std::vec;\n import std::task;\n \n@@ -126,7 +127,8 @@ fn make_tests(cx: &cx) -> tests_and_conv_fn {\n     log #fmt[\"making tests from %s\", cx.config.src_base];\n     let configport = port::<[u8]>();\n     let tests = [];\n-    for file: str in fs::list_dir(cx.config.src_base) {\n+    for file: istr in fs::list_dir(istr::from_estr(cx.config.src_base)) {\n+        let file = istr::to_estr(file);\n         log #fmt[\"inspecting file %s\", file];\n         if is_test(cx.config, file) {\n             tests += [make_test(cx, file, configport)];\n@@ -137,19 +139,21 @@ fn make_tests(cx: &cx) -> tests_and_conv_fn {\n \n fn is_test(config: &config, testfile: &str) -> bool {\n     // Pretty-printer does not work with .rc files yet\n-    let valid_extensions =\n-        alt config.mode { mode_pretty. { [\".rs\"] } _ { [\".rc\", \".rs\"] } };\n-    let invalid_prefixes = [\".\", \"#\", \"~\"];\n-    let name = fs::basename(testfile);\n+    let valid_extensions = alt config.mode {\n+      mode_pretty. { [~\".rs\"] }\n+      _ { [~\".rc\", ~\".rs\"] }\n+    };\n+    let invalid_prefixes = [~\".\", ~\"#\", ~\"~\"];\n+    let name = fs::basename(istr::from_estr(testfile));\n \n     let valid = false;\n \n     for ext in valid_extensions {\n-        if str::ends_with(name, ext) { valid = true }\n+        if istr::ends_with(name, ext) { valid = true }\n     }\n \n     for pre in invalid_prefixes {\n-        if str::starts_with(name, pre) { valid = false }\n+        if istr::starts_with(name, pre) { valid = false }\n     }\n \n     ret valid;"}, {"sha": "209787c78f47868f0dd734a94399cc28751a9324", "filename": "src/test/compiletest/header.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Ftest%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Ftest%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fheader.rs?ref=c2eafd268b982cd9a494dad783f8e3c68b9b4826", "patch": "@@ -1,5 +1,6 @@\n import std::option;\n import std::str;\n+import std::istr;\n import std::io;\n import std::fs;\n \n@@ -95,7 +96,8 @@ fn parse_pp_exact(line: &str, testfile: &str) -> option::t<str> {\n       option::some(s) { option::some(s) }\n       option::none. {\n         if parse_name_directive(line, \"pp-exact\") {\n-            option::some(fs::basename(testfile))\n+            option::some(istr::to_estr(\n+                fs::basename(istr::from_estr(testfile))))\n         } else {\n             option::none\n         }"}, {"sha": "ca9c02fb1bee9c5262f797514e837ec6f0dd4a1c", "filename": "src/test/compiletest/runtest.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Ftest%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Ftest%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fruntest.rs?ref=c2eafd268b982cd9a494dad783f8e3c68b9b4826", "patch": "@@ -1,5 +1,6 @@\n import std::io;\n import std::str;\n+import std::istr;\n import std::option;\n import std::fs;\n import std::os;\n@@ -105,8 +106,9 @@ fn run_pretty_test(cx: &cx, props: &test_props, testfile: &str) {\n     let expected =\n         alt props.pp_exact {\n           option::some(file) {\n-            let filepath = fs::connect(fs::dirname(testfile), file);\n-            io::read_whole_file_str(filepath)\n+            let filepath = fs::connect(fs::dirname(\n+                istr::from_estr(testfile)), istr::from_estr(file));\n+            io::read_whole_file_str(istr::to_estr(filepath))\n           }\n           option::none. { srcs[vec::len(srcs) - 2u] }\n         };\n@@ -338,11 +340,12 @@ fn output_base_name(config: &config, testfile: &str) -> str {\n     let base = config.build_base;\n     let filename =\n         {\n-            let parts = str::split(fs::basename(testfile), '.' as u8);\n+            let parts = istr::split(fs::basename(istr::from_estr(testfile)),\n+                                    '.' as u8);\n             parts = vec::slice(parts, 0u, vec::len(parts) - 1u);\n-            str::connect(parts, \".\")\n+            istr::connect(parts, ~\".\")\n         };\n-    #fmt[\"%s%s.%s\", base, filename, config.stage_id]\n+    #fmt[\"%s%s.%s\", base, istr::to_estr(filename), config.stage_id]\n }\n \n fn maybe_dump_to_stdout(config: &config, out: &str, err: &str) {"}, {"sha": "be920418e16a5a91365de79cc612b821f49b34d0", "filename": "src/test/stdtest/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Ftest%2Fstdtest%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Ftest%2Fstdtest%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ffs.rs?ref=c2eafd268b982cd9a494dad783f8e3c68b9b4826", "patch": "@@ -5,12 +5,12 @@ import std::fs;\n #[test]\n fn test_connect() {\n     let slash = fs::path_sep();\n-    log_err fs::connect(\"a\", \"b\");\n-    assert (fs::connect(\"a\", \"b\") == \"a\" + slash + \"b\");\n-    assert (fs::connect(\"a\" + slash, \"b\") == \"a\" + slash + \"b\");\n+    log_err fs::connect(~\"a\", ~\"b\");\n+    assert (fs::connect(~\"a\", ~\"b\") == ~\"a\" + slash + ~\"b\");\n+    assert (fs::connect(~\"a\" + slash, ~\"b\") == ~\"a\" + slash + ~\"b\");\n }\n \n // Issue #712\n #[test]\n-fn test_list_dir_no_invalid_memory_access() { fs::list_dir(\".\"); }\n+fn test_list_dir_no_invalid_memory_access() { fs::list_dir(~\".\"); }\n "}, {"sha": "147e9b29eec99f638a3102f03c04605c71ffac1d", "filename": "src/test/stdtest/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Ftest%2Fstdtest%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2eafd268b982cd9a494dad783f8e3c68b9b4826/src%2Ftest%2Fstdtest%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fpath.rs?ref=c2eafd268b982cd9a494dad783f8e3c68b9b4826", "patch": "@@ -8,10 +8,10 @@ import std::os;\n \n #[test]\n fn test() {\n-    assert (!fs::path_is_absolute(\"test-path\"));\n+    assert (!fs::path_is_absolute(~\"test-path\"));\n \n     log \"Current working directory: \" + os::getcwd();\n \n-    log fs::make_absolute(\"test-path\");\n-    log fs::make_absolute(\"/usr/bin\");\n+    log fs::make_absolute(~\"test-path\");\n+    log fs::make_absolute(~\"/usr/bin\");\n }"}]}