{"sha": "a9ec61db17b68c07816ef1be90e5d138597899e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZWM2MWRiMTdiNjhjMDc4MTZlZjFiZTkwZTVkMTM4NTk3ODk5ZTQ=", "commit": {"author": {"name": "Joe Ellis", "email": "joe.ellis@arm.com", "date": "2020-08-05T11:18:32Z"}, "committer": {"name": "Joe Ellis", "email": "joe.ellis@arm.com", "date": "2020-09-14T09:31:56Z"}, "message": "Remove use of `MaybeUninit` in `ucred.rs`\n\nWe can simply init the struct directly. There is no real need to use\nuninit memory here.", "tree": {"sha": "4926df472e5046fb71f6c37889486e0d0a5d332e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4926df472e5046fb71f6c37889486e0d0a5d332e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9ec61db17b68c07816ef1be90e5d138597899e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ec61db17b68c07816ef1be90e5d138597899e4", "html_url": "https://github.com/rust-lang/rust/commit/a9ec61db17b68c07816ef1be90e5d138597899e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9ec61db17b68c07816ef1be90e5d138597899e4/comments", "author": {"login": "joechrisellis", "id": 6762885, "node_id": "MDQ6VXNlcjY3NjI4ODU=", "avatar_url": "https://avatars.githubusercontent.com/u/6762885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joechrisellis", "html_url": "https://github.com/joechrisellis", "followers_url": "https://api.github.com/users/joechrisellis/followers", "following_url": "https://api.github.com/users/joechrisellis/following{/other_user}", "gists_url": "https://api.github.com/users/joechrisellis/gists{/gist_id}", "starred_url": "https://api.github.com/users/joechrisellis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joechrisellis/subscriptions", "organizations_url": "https://api.github.com/users/joechrisellis/orgs", "repos_url": "https://api.github.com/users/joechrisellis/repos", "events_url": "https://api.github.com/users/joechrisellis/events{/privacy}", "received_events_url": "https://api.github.com/users/joechrisellis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joechrisellis", "id": 6762885, "node_id": "MDQ6VXNlcjY3NjI4ODU=", "avatar_url": "https://avatars.githubusercontent.com/u/6762885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joechrisellis", "html_url": "https://github.com/joechrisellis", "followers_url": "https://api.github.com/users/joechrisellis/followers", "following_url": "https://api.github.com/users/joechrisellis/following{/other_user}", "gists_url": "https://api.github.com/users/joechrisellis/gists{/gist_id}", "starred_url": "https://api.github.com/users/joechrisellis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joechrisellis/subscriptions", "organizations_url": "https://api.github.com/users/joechrisellis/orgs", "repos_url": "https://api.github.com/users/joechrisellis/repos", "events_url": "https://api.github.com/users/joechrisellis/events{/privacy}", "received_events_url": "https://api.github.com/users/joechrisellis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed20eff92be7bcd29ddc74f6bfa603f6698c9504", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed20eff92be7bcd29ddc74f6bfa603f6698c9504", "html_url": "https://github.com/rust-lang/rust/commit/ed20eff92be7bcd29ddc74f6bfa603f6698c9504"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "ac8d6cf53ff8cda250b5d19c1b4dca8e7976f41a", "filename": "library/std/src/sys/unix/ext/net.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9ec61db17b68c07816ef1be90e5d138597899e4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ec61db17b68c07816ef1be90e5d138597899e4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet.rs?ref=a9ec61db17b68c07816ef1be90e5d138597899e4", "patch": "@@ -433,6 +433,7 @@ impl UnixStream {\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// #![feature(peer_credentials_unix_socket)]\n     /// use std::os::unix::net::UnixStream;\n     ///\n     /// fn main() -> std::io::Result<()> {"}, {"sha": "efaa4d94437f9f102cced8feb4fae07f60708634", "filename": "library/std/src/sys/unix/ext/ucred.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a9ec61db17b68c07816ef1be90e5d138597899e4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fucred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ec61db17b68c07816ef1be90e5d138597899e4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fucred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fucred.rs?ref=a9ec61db17b68c07816ef1be90e5d138597899e4", "patch": "@@ -31,7 +31,6 @@ pub use self::impl_bsd::peer_cred;\n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub mod impl_linux {\n     use super::UCred;\n-    use crate::mem::MaybeUninit;\n     use crate::os::unix::io::AsRawFd;\n     use crate::os::unix::net::UnixStream;\n     use crate::{io, mem};\n@@ -46,9 +45,9 @@ pub mod impl_linux {\n         assert!(ucred_size <= u32::max_value() as usize);\n \n         let mut ucred_size = ucred_size as u32;\n+        let mut ucred: ucred = ucred { pid: 1, uid: 1, gid: 1 };\n \n         unsafe {\n-            let mut ucred: ucred = MaybeUninit::uninit().assume_init();\n             let ret = libc::getsockopt(\n                 socket.as_raw_fd(),\n                 libc::SOL_SOCKET,\n@@ -76,14 +75,12 @@ pub mod impl_linux {\n pub mod impl_bsd {\n     use super::UCred;\n     use crate::io;\n-    use crate::mem::MaybeUninit;\n     use crate::os::unix::io::AsRawFd;\n     use crate::os::unix::net::UnixStream;\n \n     pub fn peer_cred(socket: &UnixStream) -> io::Result<UCred> {\n+        let mut cred = UCred { uid: 1, gid: 1 };\n         unsafe {\n-            // Create `cred` and attempt to populate it.\n-            let mut cred: UCred = MaybeUninit::uninit().assume_init();\n             let ret = libc::getpeereid(socket.as_raw_fd(), &mut cred.uid, &mut cred.gid);\n \n             if ret == 0 { Ok(cred) } else { Err(io::Error::last_os_error()) }"}]}