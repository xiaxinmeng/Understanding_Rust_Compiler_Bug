{"sha": "855f6d1483e023cea3b7988db294ed9767e15359", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NWY2ZDE0ODNlMDIzY2VhM2I3OTg4ZGIyOTRlZDk3NjdlMTUzNTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-11-25T19:13:58Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-11-30T15:17:53Z"}, "message": "rustc: Prepare to enable ThinLTO by default\n\nThis commit prepares to enable ThinLTO and multiple codegen units in release\nmode by default. We've still got a debuginfo bug or two to sort out before\nactually turning it on by default.", "tree": {"sha": "1677a936b547ab7201cc9a7c6b3f45feeca37483", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1677a936b547ab7201cc9a7c6b3f45feeca37483"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/855f6d1483e023cea3b7988db294ed9767e15359", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/855f6d1483e023cea3b7988db294ed9767e15359", "html_url": "https://github.com/rust-lang/rust/commit/855f6d1483e023cea3b7988db294ed9767e15359", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/855f6d1483e023cea3b7988db294ed9767e15359/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7df4683cc06acac3b0081eed23128a05c0b83f44", "url": "https://api.github.com/repos/rust-lang/rust/commits/7df4683cc06acac3b0081eed23128a05c0b83f44", "html_url": "https://github.com/rust-lang/rust/commit/7df4683cc06acac3b0081eed23128a05c0b83f44"}], "stats": {"total": 156, "additions": 124, "deletions": 32}, "files": [{"sha": "0efd24ae132f0626ca68b74ade7688b4df2345db", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/855f6d1483e023cea3b7988db294ed9767e15359/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855f6d1483e023cea3b7988db294ed9767e15359/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=855f6d1483e023cea3b7988db294ed9767e15359", "patch": "@@ -383,8 +383,13 @@ top_level_options!(\n         // try to not rely on this too much.\n         actually_rustdoc: bool [TRACKED],\n \n-        // Number of object files/codegen units to produce on the backend\n+        // Specifications of codegen units / ThinLTO which are forced as a\n+        // result of parsing command line options. These are not necessarily\n+        // what rustc was invoked with, but massaged a bit to agree with\n+        // commands like `--emit llvm-ir` which they're often incompatible with\n+        // if we otherwise use the defaults of rustc.\n         cli_forced_codegen_units: Option<usize> [UNTRACKED],\n+        cli_forced_thinlto: Option<bool> [UNTRACKED],\n     }\n );\n \n@@ -566,6 +571,7 @@ pub fn basic_options() -> Options {\n         debug_assertions: true,\n         actually_rustdoc: false,\n         cli_forced_codegen_units: None,\n+        cli_forced_thinlto: None,\n     }\n }\n \n@@ -1165,7 +1171,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n                  \"run the non-lexical lifetimes MIR pass\"),\n     trans_time_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"generate a graphical HTML report of time spent in trans and LLVM\"),\n-    thinlto: bool = (false, parse_bool, [TRACKED],\n+    thinlto: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"enable ThinLTO when possible\"),\n     inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"control whether #[inline] functions are in all cgus\"),\n@@ -1601,6 +1607,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n \n     let mut cg = build_codegen_options(matches, error_format);\n     let mut codegen_units = cg.codegen_units;\n+    let mut thinlto = None;\n \n     // Issue #30063: if user requests llvm-related output to one\n     // particular path, disable codegen-units.\n@@ -1622,9 +1629,13 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n                     }\n                     early_warn(error_format, \"resetting to default -C codegen-units=1\");\n                     codegen_units = Some(1);\n+                    thinlto = Some(false);\n                 }\n             }\n-            _ => codegen_units = Some(1),\n+            _ => {\n+                codegen_units = Some(1);\n+                thinlto = Some(false);\n+            }\n         }\n     }\n \n@@ -1834,6 +1845,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n         debug_assertions,\n         actually_rustdoc: false,\n         cli_forced_codegen_units: codegen_units,\n+        cli_forced_thinlto: thinlto,\n     },\n     cfg)\n }"}, {"sha": "df5805bacd41ae8a1248c59a0195c4a60a1fbb55", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 82, "deletions": 21, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/855f6d1483e023cea3b7988db294ed9767e15359/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855f6d1483e023cea3b7988db294ed9767e15359/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=855f6d1483e023cea3b7988db294ed9767e15359", "patch": "@@ -656,30 +656,91 @@ impl Session {\n             return n as usize\n         }\n \n+        // Why is 16 codegen units the default all the time?\n+        //\n+        // The main reason for enabling multiple codegen units by default is to\n+        // leverage the ability for the trans backend to do translation and\n+        // codegen in parallel. This allows us, especially for large crates, to\n+        // make good use of all available resources on the machine once we've\n+        // hit that stage of compilation. Large crates especially then often\n+        // take a long time in trans/codegen and this helps us amortize that\n+        // cost.\n+        //\n+        // Note that a high number here doesn't mean that we'll be spawning a\n+        // large number of threads in parallel. The backend of rustc contains\n+        // global rate limiting through the `jobserver` crate so we'll never\n+        // overload the system with too much work, but rather we'll only be\n+        // optimizing when we're otherwise cooperating with other instances of\n+        // rustc.\n+        //\n+        // Rather a high number here means that we should be able to keep a lot\n+        // of idle cpus busy. By ensuring that no codegen unit takes *too* long\n+        // to build we'll be guaranteed that all cpus will finish pretty closely\n+        // to one another and we should make relatively optimal use of system\n+        // resources\n+        //\n+        // Note that the main cost of codegen units is that it prevents LLVM\n+        // from inlining across codegen units. Users in general don't have a lot\n+        // of control over how codegen units are split up so it's our job in the\n+        // compiler to ensure that undue performance isn't lost when using\n+        // codegen units (aka we can't require everyone to slap `#[inline]` on\n+        // everything).\n+        //\n+        // If we're compiling at `-O0` then the number doesn't really matter too\n+        // much because performance doesn't matter and inlining is ok to lose.\n+        // In debug mode we just want to try to guarantee that no cpu is stuck\n+        // doing work that could otherwise be farmed to others.\n+        //\n+        // In release mode, however (O1 and above) performance does indeed\n+        // matter! To recover the loss in performance due to inlining we'll be\n+        // enabling ThinLTO by default (the function for which is just below).\n+        // This will ensure that we recover any inlining wins we otherwise lost\n+        // through codegen unit partitioning.\n+        //\n+        // ---\n+        //\n+        // Ok that's a lot of words but the basic tl;dr; is that we want a high\n+        // number here -- but not too high. Additionally we're \"safe\" to have it\n+        // always at the same number at all optimization levels.\n+        //\n+        // As a result 16 was chosen here! Mostly because it was a power of 2\n+        // and most benchmarks agreed it was roughly a local optimum. Not very\n+        // scientific.\n         match self.opts.optimize {\n-            // If we're compiling at `-O0` then default to 16 codegen units.\n-            // The number here shouldn't matter too too much as debug mode\n-            // builds don't rely on performance at all, meaning that lost\n-            // opportunities for inlining through multiple codegen units is\n-            // a non-issue.\n-            //\n-            // Note that the high number here doesn't mean that we'll be\n-            // spawning a large number of threads in parallel. The backend\n-            // of rustc contains global rate limiting through the\n-            // `jobserver` crate so we'll never overload the system with too\n-            // much work, but rather we'll only be optimizing when we're\n-            // otherwise cooperating with other instances of rustc.\n-            //\n-            // Rather the high number here means that we should be able to\n-            // keep a lot of idle cpus busy. By ensuring that no codegen\n-            // unit takes *too* long to build we'll be guaranteed that all\n-            // cpus will finish pretty closely to one another and we should\n-            // make relatively optimal use of system resources\n             config::OptLevel::No => 16,\n+            _ => 1, // FIXME(#46346) this should be 16\n+        }\n+    }\n \n-            // All other optimization levels default use one codegen unit,\n-            // the historical default in Rust for a Long Time.\n-            _ => 1,\n+    /// Returns whether ThinLTO is enabled for this compilation\n+    pub fn thinlto(&self) -> bool {\n+        // If processing command line options determined that we're incompatible\n+        // with ThinLTO (e.g. `-C lto --emit llvm-ir`) then return that option.\n+        if let Some(enabled) = self.opts.cli_forced_thinlto {\n+            return enabled\n+        }\n+\n+        // If explicitly specified, use that with the next highest priority\n+        if let Some(enabled) = self.opts.debugging_opts.thinlto {\n+            return enabled\n+        }\n+\n+        // If there's only one codegen unit and LTO isn't enabled then there's\n+        // no need for ThinLTO so just return false.\n+        if self.codegen_units() == 1 && !self.lto() {\n+            return false\n+        }\n+\n+        // Right now ThinLTO isn't compatible with incremental compilation.\n+        if self.opts.incremental.is_some() {\n+            return false\n+        }\n+\n+        // Now we're in \"defaults\" territory. By default we enable ThinLTO for\n+        // optimized compiles (anything greater than O0).\n+        match self.opts.optimize {\n+            config::OptLevel::No => false,\n+            _ => true,\n         }\n     }\n }"}, {"sha": "cb883e0349f31cb16c8038f48d906c1d9f775e7e", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/855f6d1483e023cea3b7988db294ed9767e15359/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855f6d1483e023cea3b7988db294ed9767e15359/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=855f6d1483e023cea3b7988db294ed9767e15359", "patch": "@@ -1402,8 +1402,9 @@ fn start_executing_work(tcx: TyCtxt,\n         // for doesn't require full LTO. Some targets require one LLVM module\n         // (they effectively don't have a linker) so it's up to us to use LTO to\n         // link everything together.\n-        thinlto: sess.opts.debugging_opts.thinlto &&\n-            !sess.target.target.options.requires_lto,\n+        thinlto: sess.thinlto() &&\n+            !sess.target.target.options.requires_lto &&\n+            unsafe { llvm::LLVMRustThinLTOAvailable() },\n \n         no_landing_pads: sess.no_landing_pads(),\n         save_temps: sess.opts.cg.save_temps,"}, {"sha": "03c1e4368c9a37a72ac430876098e17516efddbc", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/855f6d1483e023cea3b7988db294ed9767e15359/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855f6d1483e023cea3b7988db294ed9767e15359/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=855f6d1483e023cea3b7988db294ed9767e15359", "patch": "@@ -706,7 +706,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     check_for_rustc_errors_attr(tcx);\n \n-    if tcx.sess.opts.debugging_opts.thinlto {\n+    if let Some(true) = tcx.sess.opts.debugging_opts.thinlto {\n         if unsafe { !llvm::LLVMRustThinLTOAvailable() } {\n             tcx.sess.fatal(\"this compiler's LLVM does not support ThinLTO\");\n         }"}, {"sha": "b5cf6d7d34fcc61bc78ec3ef3f842ce4c73aed91", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/855f6d1483e023cea3b7988db294ed9767e15359/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855f6d1483e023cea3b7988db294ed9767e15359/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=855f6d1483e023cea3b7988db294ed9767e15359", "patch": "@@ -252,8 +252,26 @@ fn output_fileline(w: &mut Write,\n // Note that this demangler isn't quite as fancy as it could be. We have lots\n // of other information in our symbols like hashes, version, type information,\n // etc. Additionally, this doesn't handle glue symbols at all.\n-pub fn demangle(writer: &mut Write, s: &str, format: PrintFormat) -> io::Result<()> {\n-    // First validate the symbol. If it doesn't look like anything we're\n+pub fn demangle(writer: &mut Write, mut s: &str, format: PrintFormat) -> io::Result<()> {\n+    // During ThinLTO LLVM may import and rename internal symbols, so strip out\n+    // those endings first as they're one of the last manglings applied to\n+    // symbol names.\n+    let llvm = \".llvm.\";\n+    if let Some(i) = s.find(llvm) {\n+        let candidate = &s[i + llvm.len()..];\n+        let all_hex = candidate.chars().all(|c| {\n+            match c {\n+                'A' ... 'F' | '0' ... '9' => true,\n+                _ => false,\n+            }\n+        });\n+\n+        if all_hex {\n+            s = &s[..i];\n+        }\n+    }\n+\n+    // Validate the symbol. If it doesn't look like anything we're\n     // expecting, we just print it literally. Note that we must handle non-rust\n     // symbols because we could have any function in the backtrace.\n     let mut valid = true;"}, {"sha": "bafb78fc213e39192585d2b91f0cd3c4343928a5", "filename": "src/test/run-fail/mir_trans_no_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/855f6d1483e023cea3b7988db294ed9767e15359/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855f6d1483e023cea3b7988db294ed9767e15359/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads.rs?ref=855f6d1483e023cea3b7988db294ed9767e15359", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z no-landing-pads\n+// compile-flags: -Z no-landing-pads -C codegen-units=1\n // error-pattern:converging_fn called\n use std::io::{self, Write};\n "}, {"sha": "998ee7470bbe9d53ed0ab5a1075d0ae9e7c629d4", "filename": "src/test/run-fail/mir_trans_no_landing_pads_diverging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/855f6d1483e023cea3b7988db294ed9767e15359/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads_diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855f6d1483e023cea3b7988db294ed9767e15359/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads_diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_no_landing_pads_diverging.rs?ref=855f6d1483e023cea3b7988db294ed9767e15359", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z no-landing-pads\n+// compile-flags: -Z no-landing-pads -C codegen-units=1\n // error-pattern:diverging_fn called\n use std::io::{self, Write};\n "}, {"sha": "73f123045d2494181ae515026a36d53c9fad4185", "filename": "src/test/run-pass/no-landing-pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/855f6d1483e023cea3b7988db294ed9767e15359/src%2Ftest%2Frun-pass%2Fno-landing-pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855f6d1483e023cea3b7988db294ed9767e15359/src%2Ftest%2Frun-pass%2Fno-landing-pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-landing-pads.rs?ref=855f6d1483e023cea3b7988db294ed9767e15359", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z no-landing-pads\n+// compile-flags: -Z no-landing-pads -C codegen-units=1\n // ignore-emscripten no threads support\n \n use std::thread;"}]}