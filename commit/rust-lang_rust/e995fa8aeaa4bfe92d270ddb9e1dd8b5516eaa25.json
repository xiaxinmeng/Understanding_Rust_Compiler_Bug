{"sha": "e995fa8aeaa4bfe92d270ddb9e1dd8b5516eaa25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5OTVmYThhZWFhNGJmZTkyZDI3MGRkYjllMWRkOGI1NTE2ZWFhMjU=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-03-29T00:45:40Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-03-29T04:07:09Z"}, "message": "implement `AsRawFd` for stdio locks", "tree": {"sha": "7ab16d2670bf3a46eb5d82883c3a376495e73b2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ab16d2670bf3a46eb5d82883c3a376495e73b2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e995fa8aeaa4bfe92d270ddb9e1dd8b5516eaa25", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAlydmfsWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdNrFB/9wOatd/PBDospZIdN10sAa9o3B\ntKtyoOSRaCJ1DCYIxYeK898nhxdj3pYWj+U4CSPyfLDMxzRVEV8bKfX3o6DAT4XY\nTydAVAaxUCgQi3Wob5AiHWSPSrfdwnh7tEa2ZFpOVDJsKtTTt5u9GBF6+1xnlPTJ\nf2PTqSkl3Fg43y6cHc76SNcmBY+54/UqmpZRGS6PaQJn8aUM960o+LvxHMJNY1pq\nRp9tRhlzMim/1/rYVDEm5Uy7L5yTTkr3u72LtQj3Z4lsPVh9ROvLMj299xU5urgx\nwsRN8OS3zx2MN1WI+82Woo1IVBzccWWw7gqxOzpkWDxdiO96YuyV1chQdmXk\n=RQOA\n-----END PGP SIGNATURE-----", "payload": "tree 7ab16d2670bf3a46eb5d82883c3a376495e73b2b\nparent 237bf3244fffef501cf37d4bda00e1fce3fcfb46\nauthor Andy Russell <arussell123@gmail.com> 1553820340 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1553832429 -0400\n\nimplement `AsRawFd` for stdio locks\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e995fa8aeaa4bfe92d270ddb9e1dd8b5516eaa25", "html_url": "https://github.com/rust-lang/rust/commit/e995fa8aeaa4bfe92d270ddb9e1dd8b5516eaa25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e995fa8aeaa4bfe92d270ddb9e1dd8b5516eaa25/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237bf3244fffef501cf37d4bda00e1fce3fcfb46", "url": "https://api.github.com/repos/rust-lang/rust/commits/237bf3244fffef501cf37d4bda00e1fce3fcfb46", "html_url": "https://github.com/rust-lang/rust/commit/237bf3244fffef501cf37d4bda00e1fce3fcfb46"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "c21d216478fb7a2c8e3d8482fb2d2556cc742725", "filename": "src/libstd/sys/redox/ext/io.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e995fa8aeaa4bfe92d270ddb9e1dd8b5516eaa25/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e995fa8aeaa4bfe92d270ddb9e1dd8b5516eaa25/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fio.rs?ref=e995fa8aeaa4bfe92d270ddb9e1dd8b5516eaa25", "patch": "@@ -115,6 +115,21 @@ impl AsRawFd for io::Stderr {\n     fn as_raw_fd(&self) -> RawFd { 2 }\n }\n \n+#[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n+impl<'a> AsRawFd for io::StdinLock<'a> {\n+    fn as_raw_fd(&self) -> RawFd { 0 }\n+}\n+\n+#[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n+impl<'a> AsRawFd for io::StdoutLock<'a> {\n+    fn as_raw_fd(&self) -> RawFd { 1 }\n+}\n+\n+#[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n+impl<'a> AsRawFd for io::StderrLock<'a> {\n+    fn as_raw_fd(&self) -> RawFd { 2 }\n+}\n+\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawFd for net::TcpStream {\n     unsafe fn from_raw_fd(fd: RawFd) -> net::TcpStream {"}, {"sha": "6bcc59495e3635511bd7d63bbf807d8ec44e8a33", "filename": "src/libstd/sys/unix/ext/io.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e995fa8aeaa4bfe92d270ddb9e1dd8b5516eaa25/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e995fa8aeaa4bfe92d270ddb9e1dd8b5516eaa25/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs?ref=e995fa8aeaa4bfe92d270ddb9e1dd8b5516eaa25", "patch": "@@ -95,3 +95,18 @@ impl AsRawFd for io::Stdout {\n impl AsRawFd for io::Stderr {\n     fn as_raw_fd(&self) -> RawFd { libc::STDERR_FILENO }\n }\n+\n+#[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n+impl<'a> AsRawFd for io::StdinLock<'a> {\n+    fn as_raw_fd(&self) -> RawFd { libc::STDIN_FILENO }\n+}\n+\n+#[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n+impl<'a> AsRawFd for io::StdoutLock<'a> {\n+    fn as_raw_fd(&self) -> RawFd { libc::STDOUT_FILENO }\n+}\n+\n+#[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n+impl<'a> AsRawFd for io::StderrLock<'a> {\n+    fn as_raw_fd(&self) -> RawFd { libc::STDERR_FILENO }\n+}"}, {"sha": "ec47c2e9d5afd0153fbbc8bbfc777eb5f875b821", "filename": "src/libstd/sys/windows/ext/io.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e995fa8aeaa4bfe92d270ddb9e1dd8b5516eaa25/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e995fa8aeaa4bfe92d270ddb9e1dd8b5516eaa25/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs?ref=e995fa8aeaa4bfe92d270ddb9e1dd8b5516eaa25", "patch": "@@ -83,6 +83,27 @@ impl AsRawHandle for io::Stderr {\n     }\n }\n \n+#[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n+impl<'a> AsRawHandle for io::StdinLock<'a> {\n+    fn as_raw_handle(&self) -> RawHandle {\n+        unsafe { c::GetStdHandle(c::STD_INPUT_HANDLE) as RawHandle }\n+    }\n+}\n+\n+#[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n+impl<'a> AsRawHandle for io::StdoutLock<'a> {\n+    fn as_raw_handle(&self) -> RawHandle {\n+        unsafe { c::GetStdHandle(c::STD_OUTPUT_HANDLE) as RawHandle }\n+    }\n+}\n+\n+#[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n+impl<'a> AsRawHandle for io::StderrLock<'a> {\n+    fn as_raw_handle(&self) -> RawHandle {\n+        unsafe { c::GetStdHandle(c::STD_ERROR_HANDLE) as RawHandle }\n+    }\n+}\n+\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawHandle for fs::File {\n     unsafe fn from_raw_handle(handle: RawHandle) -> fs::File {"}]}