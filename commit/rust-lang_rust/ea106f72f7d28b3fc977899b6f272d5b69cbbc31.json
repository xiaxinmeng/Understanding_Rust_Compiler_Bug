{"sha": "ea106f72f7d28b3fc977899b6f272d5b69cbbc31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMTA2ZjcyZjdkMjhiM2ZjOTc3ODk5YjZmMjcyZDViNjljYmJjMzE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-25T03:41:13Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-28T06:42:53Z"}, "message": "core: correct the casing of result::{Ok,Err} in the docs", "tree": {"sha": "934466106131ab6f428f3b8f0cb07a2eeb0b49b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/934466106131ab6f428f3b8f0cb07a2eeb0b49b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea106f72f7d28b3fc977899b6f272d5b69cbbc31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea106f72f7d28b3fc977899b6f272d5b69cbbc31", "html_url": "https://github.com/rust-lang/rust/commit/ea106f72f7d28b3fc977899b6f272d5b69cbbc31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea106f72f7d28b3fc977899b6f272d5b69cbbc31/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "796b3371f9bbb6f6ed189219d1b055d7ed737e78", "url": "https://api.github.com/repos/rust-lang/rust/commits/796b3371f9bbb6f6ed189219d1b055d7ed737e78", "html_url": "https://github.com/rust-lang/rust/commit/796b3371f9bbb6f6ed189219d1b055d7ed737e78"}], "stats": {"total": 118, "additions": 58, "deletions": 60}, "files": [{"sha": "5919acc1125f975ccf4dcf8ea2cb82770b64c102", "filename": "src/libstd/result.rs", "status": "modified", "additions": 57, "deletions": 59, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/ea106f72f7d28b3fc977899b6f272d5b69cbbc31/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea106f72f7d28b3fc977899b6f272d5b69cbbc31/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=ea106f72f7d28b3fc977899b6f272d5b69cbbc31", "patch": "@@ -35,8 +35,8 @@ impl<T, E> Result<T, E> {\n     /**\n      * Convert to the `either` type\n      *\n-     * `ok` result variants are converted to `either::right` variants, `err`\n-     * result variants are converted to `either::left`.\n+     * `Ok` result variants are converted to `either::Right` variants, `Err`\n+     * result variants are converted to `either::Left`.\n      */\n     #[inline]\n     pub fn to_either(self)-> Either<E, T>{\n@@ -56,13 +56,12 @@ impl<T, E> Result<T, E> {\n     #[inline]\n     pub fn get_ref<'a>(&'a self) -> &'a T {\n         match *self {\n-        Ok(ref t) => t,\n-        Err(ref the_err) =>\n-            fail!(\"get_ref called on error result: %?\", *the_err)\n+            Ok(ref t) => t,\n+            Err(ref e) => fail!(\"get_ref called on `Err` result: %?\", *e),\n         }\n     }\n \n-    /// Returns true if the result is `ok`\n+    /// Returns true if the result is `Ok`\n     #[inline]\n     pub fn is_ok(&self) -> bool {\n         match *self {\n@@ -71,7 +70,7 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Returns true if the result is `err`\n+    /// Returns true if the result is `Err`\n     #[inline]\n     pub fn is_err(&self) -> bool {\n         !self.is_ok()\n@@ -80,99 +79,99 @@ impl<T, E> Result<T, E> {\n     /**\n      * Call a method based on a previous result\n      *\n-     * If `*self` is `ok` then the value is extracted and passed to `op` whereupon\n-     * `op`s result is returned. if `*self` is `err` then it is immediately\n-     * returned. This function can be used to compose the results of two\n-     * functions.\n+     * If `self` is `Ok` then the value is extracted and passed to `op`\n+     * whereupon `op`s result is returned. if `self` is `Err` then it is\n+     * immediately returned. This function can be used to compose the results\n+     * of two functions.\n      *\n      * Example:\n      *\n-     *     read_file(file).iter() { |buf|\n+     *     do read_file(file).iter |buf| {\n      *         print_buf(buf)\n      *     }\n      */\n     #[inline]\n     pub fn iter(&self, f: &fn(&T)) {\n         match *self {\n             Ok(ref t) => f(t),\n-            Err(_) => ()\n+            Err(_) => (),\n         }\n     }\n \n     /**\n      * Call a method based on a previous result\n      *\n-     * If `*self` is `err` then the value is extracted and passed to `op` whereupon\n-     * `op`s result is returned. if `*self` is `ok` then it is immediately returned.\n-     * This function can be used to pass through a successful result while\n-     * handling an error.\n+     * If `self` is `Err` then the value is extracted and passed to `op`\n+     * whereupon `op`s result is returned. if `self` is `Ok` then it is\n+     * immediately returned.  This function can be used to pass through a\n+     * successful result while handling an error.\n      */\n     #[inline]\n     pub fn iter_err(&self, f: &fn(&E)) {\n         match *self {\n             Ok(_) => (),\n-            Err(ref e) => f(e)\n+            Err(ref e) => f(e),\n         }\n     }\n \n-    /// Unwraps a result, assuming it is an `ok(T)`\n+    /// Unwraps a result, assuming it is an `Ok(T)`\n     #[inline]\n     pub fn unwrap(self) -> T {\n         match self {\n             Ok(t) => t,\n-            Err(_) => fail!(\"unwrap called on an err result\")\n+            Err(_) => fail!(\"unwrap called on an `Err` result\"),\n         }\n     }\n \n-    /// Unwraps a result, assuming it is an `err(U)`\n+    /// Unwraps a result, assuming it is an `Err(U)`\n     #[inline]\n     pub fn unwrap_err(self) -> E {\n         match self {\n-            Err(u) => u,\n-            Ok(_) => fail!(\"unwrap called on an ok result\")\n+            Err(e) => e,\n+            Ok(_) => fail!(\"unwrap called on an `Ok` result\"),\n         }\n     }\n \n     /**\n      * Call a method based on a previous result\n      *\n-     * If `self` is `ok` then the value is extracted and passed to `op` whereupon\n-     * `op`s result is returned. if `self` is `err` then it is immediately\n-     * returned. This function can be used to compose the results of two\n-     * functions.\n+     * If `self` is `Ok` then the value is extracted and passed to `op`\n+     * whereupon `op`s result is returned. if `self` is `Err` then it is\n+     * immediately returned. This function can be used to compose the results\n+     * of two functions.\n      *\n      * Example:\n      *\n-     *     let res = do read_file(file).chain |buf| {\n-     *         ok(parse_bytes(buf))\n+     *     let res = do read_file(file) |buf| {\n+     *         Ok(parse_bytes(buf))\n      *     };\n      */\n     #[inline]\n-    pub fn chain<U>(self, op: &fn(T) -> Result<U,E>) -> Result<U,E> {\n+    pub fn chain<U>(self, op: &fn(T) -> Result<U, E>) -> Result<U, E> {\n         match self {\n             Ok(t) => op(t),\n-            Err(e) => Err(e)\n+            Err(e) => Err(e),\n         }\n     }\n \n     /**\n-    * Call a method based on a previous result\n-    *\n-    * If `self` is `err` then the value is extracted and passed to `op`\n-    * whereupon `op`s result is returned. if `self` is `ok` then it is\n-    * immediately returned.  This function can be used to pass through a\n-    * successful result while handling an error.\n-    */\n+     * Call a function based on a previous result\n+     *\n+     * If `self` is `Err` then the value is extracted and passed to `op`\n+     * whereupon `op`s result is returned. if `self` is `Ok` then it is\n+     * immediately returned.  This function can be used to pass through a\n+     * successful result while handling an error.\n+     */\n     #[inline]\n-    pub fn chain_err<F>(self, op: &fn(E) -> Result<T,F>) -> Result<T,F> {\n+    pub fn chain_err<F>(self, op: &fn(E) -> Result<T, F>) -> Result<T, F> {\n         match self {\n             Ok(t) => Ok(t),\n-            Err(v) => op(v)\n+            Err(e) => op(e),\n         }\n     }\n }\n \n-impl<T:Clone,E> Result<T, E> {\n+impl<T: Clone, E> Result<T, E> {\n     /**\n      * Get the value out of a successful result\n      *\n@@ -183,18 +182,18 @@ impl<T:Clone,E> Result<T, E> {\n     #[inline]\n     pub fn get(&self) -> T {\n         match *self {\n-            Ok(ref t) => (*t).clone(),\n-            Err(ref e) => fail!(\"get called on error result: %?\", *e),\n+            Ok(ref t) => t.clone(),\n+            Err(ref e) => fail!(\"get called on `Err` result: %?\", *e),\n         }\n     }\n \n     /**\n      * Call a method based on a previous result\n      *\n-     * If `*self` is `err` then the value is extracted and passed to `op` whereupon\n-     * `op`s result is wrapped in an `err` and returned. if `*self` is `ok` then it\n-     * is immediately returned.  This function can be used to pass through a\n-     * successful result while handling an error.\n+     * If `self` is `Err` then the value is extracted and passed to `op`\n+     * whereupon `op`s result is wrapped in an `Err` and returned. if `self` is\n+     * `Ok` then it is immediately returned.  This function can be used to pass\n+     * through a successful result while handling an error.\n      */\n     #[inline]\n     pub fn map_err<F:Clone>(&self, op: &fn(&E) -> F) -> Result<T,F> {\n@@ -205,7 +204,7 @@ impl<T:Clone,E> Result<T, E> {\n     }\n }\n \n-impl<T, E:Clone> Result<T, E> {\n+impl<T, E: Clone> Result<T, E> {\n     /**\n      * Get the value out of an error result\n      *\n@@ -216,24 +215,24 @@ impl<T, E:Clone> Result<T, E> {\n     #[inline]\n     pub fn get_err(&self) -> E {\n         match *self {\n-            Err(ref u) => (*u).clone(),\n-            Ok(_) => fail!(\"get_err called on ok result\"),\n+            Err(ref e) => e.clone(),\n+            Ok(_) => fail!(\"get_err called on `Ok` result\")\n         }\n     }\n \n     /**\n      * Call a method based on a previous result\n      *\n-     * If `res` is `ok` then the value is extracted and passed to `op` whereupon\n-     * `op`s result is wrapped in `ok` and returned. if `res` is `err` then it is\n-     * immediately returned.  This function can be used to compose the results of\n-     * two functions.\n+     * If `self` is `Ok` then the value is extracted and passed to `op`\n+     * whereupon `op`s result is wrapped in `Ok` and returned. if `self` is\n+     * `Err` then it is immediately returned.  This function can be used to\n+     * compose the results of two functions.\n      *\n      * Example:\n      *\n-     *     let res = read_file(file).map() { |buf|\n+     *     let res = do read_file(file).map |buf| {\n      *         parse_bytes(buf)\n-     *     });\n+     *     };\n      */\n     #[inline]\n     pub fn map<U:Clone>(&self, op: &fn(&T) -> U) -> Result<U,E> {\n@@ -254,8 +253,8 @@ impl<T, E:Clone> Result<T, E> {\n  * checking for overflow:\n  *\n  *     fn inc_conditionally(x: uint) -> result<uint,str> {\n- *         if x == uint::max_value { return err(\"overflow\"); }\n- *         else { return ok(x+1u); }\n+ *         if x == uint::max_value { return Err(\"overflow\"); }\n+ *         else { return Ok(x+1u); }\n  *     }\n  *     map(~[1u, 2u, 3u], inc_conditionally).chain {|incd|\n  *         assert!(incd == ~[2u, 3u, 4u]);\n@@ -340,7 +339,6 @@ pub fn iter_vec2<S,T,U>(ss: &[S], ts: &[T],\n     return Ok(());\n }\n \n-\n #[cfg(test)]\n mod tests {\n     use result::{Err, Ok, Result};"}, {"sha": "782ce61cab253647286fad6fdbe021d2d6593f12", "filename": "src/test/run-fail/result-get-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea106f72f7d28b3fc977899b6f272d5b69cbbc31/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea106f72f7d28b3fc977899b6f272d5b69cbbc31/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs?ref=ea106f72f7d28b3fc977899b6f272d5b69cbbc31", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:get called on error result: ~\"kitty\"\n+// error-pattern:get called on `Err` result: ~\"kitty\"\n \n use std::result;\n "}]}