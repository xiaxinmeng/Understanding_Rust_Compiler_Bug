{"sha": "6c5212ffa06d329bc9ca699e8687b6e45949b88a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNTIxMmZmYTA2ZDMyOWJjOWNhNjk5ZTg2ODdiNmU0NTk0OWI4OGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-10T22:32:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-10T22:32:51Z"}, "message": "Auto merge of #43589 - aidanhs:aphs-fix-system-malloc, r=alexcrichton\n\nMake a disable-jemalloc build work\n\nFixes #43510. I've tested this up to building a stage1 compiler.\n\nr? @alexcrichton\n\ncc @cuviper @vorner\n\n@cuviper your fix was almost correct, you just had a stray `!` in there which caused the second error you saw.", "tree": {"sha": "9a52e55cd9b7da7d78fb06b5eb74254b65aa488d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a52e55cd9b7da7d78fb06b5eb74254b65aa488d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c5212ffa06d329bc9ca699e8687b6e45949b88a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c5212ffa06d329bc9ca699e8687b6e45949b88a", "html_url": "https://github.com/rust-lang/rust/commit/6c5212ffa06d329bc9ca699e8687b6e45949b88a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c5212ffa06d329bc9ca699e8687b6e45949b88a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13d94d5fa8129a34f5c77a1bcd76983f5aed2434", "url": "https://api.github.com/repos/rust-lang/rust/commits/13d94d5fa8129a34f5c77a1bcd76983f5aed2434", "html_url": "https://github.com/rust-lang/rust/commit/13d94d5fa8129a34f5c77a1bcd76983f5aed2434"}, {"sha": "56a07539c0efd865b33dd07cd14b97d8ba23c584", "url": "https://api.github.com/repos/rust-lang/rust/commits/56a07539c0efd865b33dd07cd14b97d8ba23c584", "html_url": "https://github.com/rust-lang/rust/commit/56a07539c0efd865b33dd07cd14b97d8ba23c584"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "971483e91b6f341d13743ffd901e87385775d549", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6c5212ffa06d329bc9ca699e8687b6e45949b88a/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5212ffa06d329bc9ca699e8687b6e45949b88a/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=6c5212ffa06d329bc9ca699e8687b6e45949b88a", "patch": "@@ -13,6 +13,7 @@ use rustc::util::nodemap::{FxHashMap, NodeSet};\n use rustc::hir::def_id::{DefId, CrateNum, LOCAL_CRATE, INVALID_CRATE, CRATE_DEF_INDEX};\n use rustc::session::config;\n use rustc::ty::TyCtxt;\n+use rustc_allocator::ALLOCATOR_METHODS;\n use syntax::attr;\n \n /// The SymbolExportLevel of a symbols specifies from which kinds of crates\n@@ -83,6 +84,14 @@ impl ExportedSymbols {\n                               SymbolExportLevel::C));\n         }\n \n+        if tcx.sess.allocator_kind.get().is_some() {\n+            for method in ALLOCATOR_METHODS {\n+                local_crate.push((format!(\"__rust_{}\", method.name),\n+                                  INVALID_DEF_ID,\n+                                  SymbolExportLevel::Rust));\n+            }\n+        }\n+\n         if let Some(id) = tcx.sess.derive_registrar_fn.get() {\n             let def_id = tcx.hir.local_def_id(id);\n             let idx = def_id.index;"}, {"sha": "f7748aa3f041f43a51a0f20002e331b00626b71e", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6c5212ffa06d329bc9ca699e8687b6e45949b88a/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5212ffa06d329bc9ca699e8687b6e45949b88a/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=6c5212ffa06d329bc9ca699e8687b6e45949b88a", "patch": "@@ -318,6 +318,22 @@\n \n #![default_lib_allocator]\n \n+// Always use alloc_system during stage0 since we don't know if the alloc_*\n+// crate the stage0 compiler will pick by default is enabled (e.g.\n+// if the user has disabled jemalloc in `./configure`).\n+// `force_alloc_system` is *only* intended as a workaround for local rebuilds\n+// with a rustc without jemalloc.\n+// The not(stage0+msvc) gates will only last until the next stage0 bump\n+#![cfg_attr(all(\n+        not(all(stage0, target_env = \"msvc\")),\n+        any(stage0, feature = \"force_alloc_system\")),\n+    feature(global_allocator))]\n+#[cfg(all(\n+    not(all(stage0, target_env = \"msvc\")),\n+    any(stage0, feature = \"force_alloc_system\")))]\n+#[global_allocator]\n+static ALLOC: alloc_system::System = alloc_system::System;\n+\n // Explicitly import the prelude. The compiler uses this same unstable attribute\n // to import the prelude implicitly when building crates that depend on std.\n #[prelude_import]"}, {"sha": "10c99713820460eb869c88688b6ee7196849e3e4", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c5212ffa06d329bc9ca699e8687b6e45949b88a/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5212ffa06d329bc9ca699e8687b6e45949b88a/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=6c5212ffa06d329bc9ca699e8687b6e45949b88a", "patch": "@@ -69,6 +69,7 @@ const EXCEPTION_PATHS: &'static [&'static str] = &[\n     \"src/libstd/path.rs\",\n     \"src/libstd/f32.rs\",\n     \"src/libstd/f64.rs\",\n+    \"src/libstd/lib.rs\", // Until next stage0 snapshot bump\n     \"src/libstd/sys_common/mod.rs\",\n     \"src/libstd/sys_common/net.rs\",\n     \"src/libterm\", // Not sure how to make this crate portable, but test needs it"}]}