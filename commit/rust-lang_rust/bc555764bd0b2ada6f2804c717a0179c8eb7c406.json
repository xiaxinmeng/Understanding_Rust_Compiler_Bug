{"sha": "bc555764bd0b2ada6f2804c717a0179c8eb7c406", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNTU1NzY0YmQwYjJhZGE2ZjI4MDRjNzE3YTAxNzljOGViN2M0MDY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-05T10:40:33Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-05T10:40:33Z"}, "message": "Update Cranelift", "tree": {"sha": "9f46a1c4965a819d487fdf9c1933cc830b16a8e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f46a1c4965a819d487fdf9c1933cc830b16a8e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc555764bd0b2ada6f2804c717a0179c8eb7c406", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc555764bd0b2ada6f2804c717a0179c8eb7c406", "html_url": "https://github.com/rust-lang/rust/commit/bc555764bd0b2ada6f2804c717a0179c8eb7c406", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc555764bd0b2ada6f2804c717a0179c8eb7c406/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b54b7c9f44713e565743aff3d07ad475c553131", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b54b7c9f44713e565743aff3d07ad475c553131", "html_url": "https://github.com/rust-lang/rust/commit/6b54b7c9f44713e565743aff3d07ad475c553131"}], "stats": {"total": 106, "additions": 49, "deletions": 57}, "files": [{"sha": "52c0d62ebd947e527000c52ddd83ca76a89d7261", "filename": "Cargo.lock", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/bc555764bd0b2ada6f2804c717a0179c8eb7c406/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bc555764bd0b2ada6f2804c717a0179c8eb7c406/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=bc555764bd0b2ada6f2804c717a0179c8eb7c406", "patch": "@@ -44,16 +44,16 @@ checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n \n [[package]]\n name = \"cranelift-bforest\"\n-version = \"0.63.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/#51f9ac2150bd880dc7b92952ba92e72ea3ab60b7\"\n+version = \"0.64.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/#00abfcd943fdef8af5c8b2afed09e7ecef512b02\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n-version = \"0.63.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/#51f9ac2150bd880dc7b92952ba92e72ea3ab60b7\"\n+version = \"0.64.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/#00abfcd943fdef8af5c8b2afed09e7ecef512b02\"\n dependencies = [\n  \"byteorder\",\n  \"cranelift-bforest\",\n@@ -70,27 +70,27 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-codegen-meta\"\n-version = \"0.63.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/#51f9ac2150bd880dc7b92952ba92e72ea3ab60b7\"\n+version = \"0.64.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/#00abfcd943fdef8af5c8b2afed09e7ecef512b02\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen-shared\"\n-version = \"0.63.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/#51f9ac2150bd880dc7b92952ba92e72ea3ab60b7\"\n+version = \"0.64.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/#00abfcd943fdef8af5c8b2afed09e7ecef512b02\"\n \n [[package]]\n name = \"cranelift-entity\"\n-version = \"0.63.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/#51f9ac2150bd880dc7b92952ba92e72ea3ab60b7\"\n+version = \"0.64.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/#00abfcd943fdef8af5c8b2afed09e7ecef512b02\"\n \n [[package]]\n name = \"cranelift-frontend\"\n-version = \"0.63.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/#51f9ac2150bd880dc7b92952ba92e72ea3ab60b7\"\n+version = \"0.64.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/#00abfcd943fdef8af5c8b2afed09e7ecef512b02\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -100,8 +100,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-module\"\n-version = \"0.63.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/#51f9ac2150bd880dc7b92952ba92e72ea3ab60b7\"\n+version = \"0.64.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/#00abfcd943fdef8af5c8b2afed09e7ecef512b02\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -112,8 +112,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-native\"\n-version = \"0.63.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/#51f9ac2150bd880dc7b92952ba92e72ea3ab60b7\"\n+version = \"0.64.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/#00abfcd943fdef8af5c8b2afed09e7ecef512b02\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"raw-cpuid\",\n@@ -122,8 +122,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-object\"\n-version = \"0.63.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/#51f9ac2150bd880dc7b92952ba92e72ea3ab60b7\"\n+version = \"0.64.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/#00abfcd943fdef8af5c8b2afed09e7ecef512b02\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"cranelift-module\",\n@@ -133,8 +133,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-simplejit\"\n-version = \"0.63.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/#51f9ac2150bd880dc7b92952ba92e72ea3ab60b7\"\n+version = \"0.64.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/#00abfcd943fdef8af5c8b2afed09e7ecef512b02\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"cranelift-module\",\n@@ -184,11 +184,10 @@ checksum = \"8f5f3913fa0bfe7ee1fd8248b6b9f42a5af4b9d65ec2dd2c3c26132b950ecfc2\"\n \n [[package]]\n name = \"gimli\"\n-version = \"0.20.0\"\n+version = \"0.21.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"81dd6190aad0f05ddbbf3245c54ed14ca4aa6dd32f22312b70d8f168c3e3e633\"\n+checksum = \"bcc8e0c9bce37868955864dbecd2b1ab2bdf967e6f28066d65aaac620444b65c\"\n dependencies = [\n- \"byteorder\",\n  \"indexmap\",\n ]\n \n@@ -227,9 +226,9 @@ dependencies = [\n \n [[package]]\n name = \"mach\"\n-version = \"0.2.3\"\n+version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"86dd2487cdfea56def77b88438a2c915fb45113c5319bfe7e14306ca4cd0b0e1\"\n+checksum = \"b823e83b2affd8f40a9ee8c29dbc56404c1e34cd2710921f2801e2cf29527afa\"\n dependencies = [\n  \"libc\",\n ]\n@@ -277,9 +276,9 @@ dependencies = [\n \n [[package]]\n name = \"regalloc\"\n-version = \"0.0.24\"\n+version = \"0.0.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5842bece8a4b1690ffa6d9d959081c1d5d851ee4337a36c0a121fafe8c16add2\"\n+checksum = \"cca5b48c9db66c5ba084e4660b4c0cfe8b551a96074bc04b7c11de86ad0bf1f9\"\n dependencies = [\n  \"log\",\n  \"rustc-hash\",\n@@ -288,9 +287,9 @@ dependencies = [\n \n [[package]]\n name = \"region\"\n-version = \"2.1.2\"\n+version = \"2.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"448e868c6e4cfddfa49b6a72c95906c04e8547465e9536575b95c70a4044f856\"\n+checksum = \"877e54ea2adcd70d80e9179344c97f93ef0dffd6b03e1f4529e6e83ab2fa9ae0\"\n dependencies = [\n  \"bitflags\",\n  \"libc\","}, {"sha": "2c8de8a107866361b635d56c160ade7e8aa156c0", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc555764bd0b2ada6f2804c717a0179c8eb7c406/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bc555764bd0b2ada6f2804c717a0179c8eb7c406/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=bc555764bd0b2ada6f2804c717a0179c8eb7c406", "patch": "@@ -26,7 +26,7 @@ default-features = false\n features = [\"read\", \"std\", \"write\"] # We don't need WASM support\n \n [dependencies.gimli]\n-version = \"0.20.0\"\n+version = \"0.21.0\"\n default-features = false\n features = [\"write\"] # We don't need read support\n "}, {"sha": "e48694cb8b95b0177c9af3069dcdcaf1594c6acf", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 20, "deletions": 27, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bc555764bd0b2ada6f2804c717a0179c8eb7c406/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc555764bd0b2ada6f2804c717a0179c8eb7c406/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=bc555764bd0b2ada6f2804c717a0179c8eb7c406", "patch": "@@ -9,8 +9,8 @@ use cranelift_codegen::isa::TargetIsa;\n use cranelift_codegen::ValueLocRange;\n \n use gimli::write::{\n-    self, Address, AttributeValue, DwarfUnit, Expression, LineProgram,\n-    LineString, Location, LocationList, Range, RangeList, UnitEntryId, Writer,\n+    Address, AttributeValue, DwarfUnit, Expression, LineProgram,\n+    LineString, Location, LocationList, Range, RangeList, UnitEntryId,\n };\n use gimli::{Encoding, Format, LineEncoding, RunTimeEndian, X86_64};\n \n@@ -187,7 +187,7 @@ impl<'tcx> DebugContext<'tcx> {\n                 let type_entry = self.dwarf.unit.get_mut(type_id);\n \n                 //type_entry.set(gimli::DW_AT_mutable, AttributeValue::Flag(mutbl == rustc_hir::Mutability::Mut));\n-                type_entry.set(gimli::DW_AT_type, AttributeValue::ThisUnitEntryRef(pointee));\n+                type_entry.set(gimli::DW_AT_type, AttributeValue::UnitRef(pointee));\n \n                 type_id\n             }\n@@ -213,7 +213,7 @@ impl<'tcx> DebugContext<'tcx> {\n \n                     field_entry.set(gimli::DW_AT_name, AttributeValue::String(field_def.ident.as_str().to_string().into_bytes()));\n                     field_entry.set(gimli::DW_AT_data_member_location, AttributeValue::Udata(field_offset.bytes()));\n-                    field_entry.set(gimli::DW_AT_type, AttributeValue::ThisUnitEntryRef(field_type));\n+                    field_entry.set(gimli::DW_AT_type, AttributeValue::UnitRef(field_type));\n                 }\n \n                 type_id\n@@ -291,7 +291,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         let var_entry = self.debug_context.dwarf.unit.get_mut(var_id);\n \n         var_entry.set(gimli::DW_AT_name, AttributeValue::String(name.into_bytes()));\n-        var_entry.set(gimli::DW_AT_type, AttributeValue::ThisUnitEntryRef(dw_ty));\n+        var_entry.set(gimli::DW_AT_type, AttributeValue::UnitRef(dw_ty));\n \n         var_id\n     }\n@@ -341,15 +341,13 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n             let name = format!(\"{}{}\", base_name, i);\n \n             let dw_ty = self.debug_context.dwarf_ty_for_clif_ty(param.value_type);\n-            let loc = Expression(\n-                translate_loc(isa, context.func.locations[val], &context.func.stack_slots).unwrap(),\n-            );\n+            let loc = translate_loc(isa, context.func.locations[val], &context.func.stack_slots).unwrap();\n \n             let arg_id = self.debug_context.dwarf.unit.add(self.entry_id, gimli::DW_TAG_formal_parameter);\n             let var_entry = self.debug_context.dwarf.unit.get_mut(arg_id);\n \n             var_entry.set(gimli::DW_AT_name, AttributeValue::String(name.into_bytes()));\n-            var_entry.set(gimli::DW_AT_type, AttributeValue::ThisUnitEntryRef(dw_ty));\n+            var_entry.set(gimli::DW_AT_type, AttributeValue::UnitRef(dw_ty));\n             var_entry.set(gimli::DW_AT_location, AttributeValue::Exprloc(loc));\n         }\n \n@@ -413,9 +411,7 @@ fn place_location<'a, 'tcx>(\n                                 symbol: func_debug_ctx.symbol,\n                                 addend: i64::from(value_loc_range.end),\n                             },\n-                            data: Expression(\n-                                translate_loc(isa, value_loc_range.loc, &context.func.stack_slots).unwrap(),\n-                            ),\n+                            data: translate_loc(isa, value_loc_range.loc, &context.func.stack_slots).unwrap(),\n                         })\n                         .collect(),\n                 );\n@@ -425,40 +421,37 @@ fn place_location<'a, 'tcx>(\n             } else {\n                 // FIXME set value labels for unused locals\n \n-                AttributeValue::Exprloc(Expression(vec![]))\n+                AttributeValue::Exprloc(Expression::new())\n             }\n         }\n         CPlaceInner::Addr(_, _) => {\n             // FIXME implement this (used by arguments and returns)\n \n-            AttributeValue::Exprloc(Expression(vec![]))\n+            AttributeValue::Exprloc(Expression::new())\n \n             // For PointerBase::Stack:\n-            //AttributeValue::Exprloc(Expression(translate_loc(ValueLoc::Stack(*stack_slot), &context.func.stack_slots).unwrap()))\n+            //AttributeValue::Exprloc(translate_loc(ValueLoc::Stack(*stack_slot), &context.func.stack_slots).unwrap())\n         }\n     }\n }\n \n // Adapted from https://github.com/CraneStation/wasmtime/blob/5a1845b4caf7a5dba8eda1fef05213a532ed4259/crates/debug/src/transform/expression.rs#L59-L137\n-fn translate_loc(isa: &dyn TargetIsa, loc: ValueLoc, stack_slots: &StackSlots) -> Option<Vec<u8>> {\n+fn translate_loc(isa: &dyn TargetIsa, loc: ValueLoc, stack_slots: &StackSlots) -> Option<Expression> {\n     match loc {\n         ValueLoc::Reg(reg) => {\n             let machine_reg = isa.map_dwarf_register(reg).unwrap();\n-            assert!(machine_reg <= 32); // FIXME\n-            Some(vec![gimli::constants::DW_OP_reg0.0 + machine_reg as u8])\n+            let mut expr = Expression::new();\n+            expr.op_reg(gimli::Register(machine_reg));\n+            Some(expr)\n         }\n         ValueLoc::Stack(ss) => {\n             if let Some(ss_offset) = stack_slots[ss].offset {\n-                let endian = gimli::RunTimeEndian::Little;\n-                let mut writer = write::EndianVec::new(endian);\n-                writer\n-                    .write_u8(gimli::constants::DW_OP_breg0.0 + X86_64::RBP.0 as u8)\n-                    .expect(\"bp wr\");\n-                writer.write_sleb128(ss_offset as i64 + 16).expect(\"ss wr\");\n-                let buf = writer.into_vec();\n-                return Some(buf);\n+                let mut expr = Expression::new();\n+                expr.op_breg(X86_64::RBP, ss_offset as i64 + 16);\n+                Some(expr)\n+            } else {\n+                None\n             }\n-            None\n         }\n         _ => None,\n     }"}]}