{"sha": "09348b247465864c6462a39055803bcbb0156cfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MzQ4YjI0NzQ2NTg2NGM2NDYyYTM5MDU1ODAzYmNiYjAxNTZjZmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-02T14:13:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-02T15:31:20Z"}, "message": "Get rid of MockAnalysis", "tree": {"sha": "d57122ddcaa21d6f4ea50204afc3e3bc341583fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d57122ddcaa21d6f4ea50204afc3e3bc341583fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09348b247465864c6462a39055803bcbb0156cfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09348b247465864c6462a39055803bcbb0156cfe", "html_url": "https://github.com/rust-lang/rust/commit/09348b247465864c6462a39055803bcbb0156cfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09348b247465864c6462a39055803bcbb0156cfe/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeb27f95f1025128f8a1d24a515eb009498a1d44", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb27f95f1025128f8a1d24a515eb009498a1d44", "html_url": "https://github.com/rust-lang/rust/commit/eeb27f95f1025128f8a1d24a515eb009498a1d44"}], "stats": {"total": 708, "additions": 288, "deletions": 420}, "files": [{"sha": "b7286fc7d03d4e52a0a46e25937f192240b57ba5", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=09348b247465864c6462a39055803bcbb0156cfe", "patch": "@@ -117,13 +117,13 @@ pub trait WithFixture: Default + SourceDatabaseExt + 'static {\n impl<DB: SourceDatabaseExt + Default + 'static> WithFixture for DB {}\n \n pub struct ChangeFixture {\n-    file_position: Option<(FileId, RangeOrOffset)>,\n-    files: Vec<FileId>,\n-    change: Change,\n+    pub file_position: Option<(FileId, RangeOrOffset)>,\n+    pub files: Vec<FileId>,\n+    pub change: Change,\n }\n \n impl ChangeFixture {\n-    fn parse(ra_fixture: &str) -> ChangeFixture {\n+    pub fn parse(ra_fixture: &str) -> ChangeFixture {\n         let fixture = Fixture::parse(ra_fixture);\n         let mut change = Change::new();\n \n@@ -132,6 +132,7 @@ impl ChangeFixture {\n         let mut crates = FxHashMap::default();\n         let mut crate_deps = Vec::new();\n         let mut default_crate_root: Option<FileId> = None;\n+        let mut default_cfg = CfgOptions::default();\n \n         let mut file_set = FileSet::default();\n         let source_root_prefix = \"/\".to_string();\n@@ -171,6 +172,7 @@ impl ChangeFixture {\n             } else if meta.path == \"/main.rs\" || meta.path == \"/lib.rs\" {\n                 assert!(default_crate_root.is_none());\n                 default_crate_root = Some(file_id);\n+                default_cfg = meta.cfg;\n             }\n \n             change.change_file(file_id, Some(Arc::new(text)));\n@@ -185,8 +187,8 @@ impl ChangeFixture {\n             crate_graph.add_crate_root(\n                 crate_root,\n                 Edition::Edition2018,\n-                None,\n-                CfgOptions::default(),\n+                Some(\"test\".to_string()),\n+                default_cfg,\n                 Env::default(),\n                 Default::default(),\n             );"}, {"sha": "0fb49de712e5c739d762f836a3b4641ea6e8f6e6", "filename": "crates/ide/src/call_hierarchy.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs?ref=09348b247465864c6462a39055803bcbb0156cfe", "patch": "@@ -181,8 +181,8 @@ fn caller() {\n     call<|>ee();\n }\n \"#,\n-            \"callee FN FileId(1) 0..14 3..9\",\n-            &[\"caller FN FileId(1) 15..44 18..24 : [33..39]\"],\n+            \"callee FN FileId(0) 0..14 3..9\",\n+            &[\"caller FN FileId(0) 15..44 18..24 : [33..39]\"],\n             &[],\n         );\n     }\n@@ -197,8 +197,8 @@ fn caller() {\n     callee();\n }\n \"#,\n-            \"callee FN FileId(1) 0..14 3..9\",\n-            &[\"caller FN FileId(1) 15..44 18..24 : [33..39]\"],\n+            \"callee FN FileId(0) 0..14 3..9\",\n+            &[\"caller FN FileId(0) 15..44 18..24 : [33..39]\"],\n             &[],\n         );\n     }\n@@ -214,8 +214,8 @@ fn caller() {\n     callee();\n }\n \"#,\n-            \"callee FN FileId(1) 0..14 3..9\",\n-            &[\"caller FN FileId(1) 15..58 18..24 : [33..39, 47..53]\"],\n+            \"callee FN FileId(0) 0..14 3..9\",\n+            &[\"caller FN FileId(0) 15..58 18..24 : [33..39, 47..53]\"],\n             &[],\n         );\n     }\n@@ -234,10 +234,10 @@ fn caller2() {\n     callee();\n }\n \"#,\n-            \"callee FN FileId(1) 0..14 3..9\",\n+            \"callee FN FileId(0) 0..14 3..9\",\n             &[\n-                \"caller1 FN FileId(1) 15..45 18..25 : [34..40]\",\n-                \"caller2 FN FileId(1) 47..77 50..57 : [66..72]\",\n+                \"caller1 FN FileId(0) 15..45 18..25 : [34..40]\",\n+                \"caller2 FN FileId(0) 47..77 50..57 : [66..72]\",\n             ],\n             &[],\n         );\n@@ -263,10 +263,10 @@ mod tests {\n     }\n }\n \"#,\n-            \"callee FN FileId(1) 0..14 3..9\",\n+            \"callee FN FileId(0) 0..14 3..9\",\n             &[\n-                \"caller1 FN FileId(1) 15..45 18..25 : [34..40]\",\n-                \"test_caller FN FileId(1) 95..149 110..121 : [134..140]\",\n+                \"caller1 FN FileId(0) 15..45 18..25 : [34..40]\",\n+                \"test_caller FN FileId(0) 95..149 110..121 : [134..140]\",\n             ],\n             &[],\n         );\n@@ -287,8 +287,8 @@ fn caller() {\n //- /foo/mod.rs\n pub fn callee() {}\n \"#,\n-            \"callee FN FileId(2) 0..18 7..13\",\n-            &[\"caller FN FileId(1) 27..56 30..36 : [45..51]\"],\n+            \"callee FN FileId(1) 0..18 7..13\",\n+            &[\"caller FN FileId(0) 27..56 30..36 : [45..51]\"],\n             &[],\n         );\n     }\n@@ -304,9 +304,9 @@ fn call<|>er() {\n     callee();\n }\n \"#,\n-            \"caller FN FileId(1) 15..58 18..24\",\n+            \"caller FN FileId(0) 15..58 18..24\",\n             &[],\n-            &[\"callee FN FileId(1) 0..14 3..9 : [33..39, 47..53]\"],\n+            &[\"callee FN FileId(0) 0..14 3..9 : [33..39, 47..53]\"],\n         );\n     }\n \n@@ -325,9 +325,9 @@ fn call<|>er() {\n //- /foo/mod.rs\n pub fn callee() {}\n \"#,\n-            \"caller FN FileId(1) 27..56 30..36\",\n+            \"caller FN FileId(0) 27..56 30..36\",\n             &[],\n-            &[\"callee FN FileId(2) 0..18 7..13 : [45..51]\"],\n+            &[\"callee FN FileId(1) 0..18 7..13 : [45..51]\"],\n         );\n     }\n \n@@ -348,9 +348,9 @@ fn caller3() {\n \n }\n \"#,\n-            \"caller2 FN FileId(1) 33..64 36..43\",\n-            &[\"caller1 FN FileId(1) 0..31 3..10 : [19..26]\"],\n-            &[\"caller3 FN FileId(1) 66..83 69..76 : [52..59]\"],\n+            \"caller2 FN FileId(0) 33..64 36..43\",\n+            &[\"caller1 FN FileId(0) 0..31 3..10 : [19..26]\"],\n+            &[\"caller3 FN FileId(0) 66..83 69..76 : [52..59]\"],\n         );\n     }\n \n@@ -368,9 +368,9 @@ fn main() {\n     a<|>()\n }\n \"#,\n-            \"a FN FileId(1) 0..18 3..4\",\n-            &[\"main FN FileId(1) 31..52 34..38 : [47..48]\"],\n-            &[\"b FN FileId(1) 20..29 23..24 : [13..14]\"],\n+            \"a FN FileId(0) 0..18 3..4\",\n+            &[\"main FN FileId(0) 31..52 34..38 : [47..48]\"],\n+            &[\"b FN FileId(0) 20..29 23..24 : [13..14]\"],\n         );\n \n         check_hierarchy(\n@@ -385,8 +385,8 @@ fn main() {\n     a()\n }\n \"#,\n-            \"b FN FileId(1) 20..29 23..24\",\n-            &[\"a FN FileId(1) 0..18 3..4 : [13..14]\"],\n+            \"b FN FileId(0) 20..29 23..24\",\n+            &[\"a FN FileId(0) 0..18 3..4 : [13..14]\"],\n             &[],\n         );\n     }"}, {"sha": "e597470958e304bb9e54e047385701f7e398c124", "filename": "crates/ide/src/completion/complete_keyword.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=09348b247465864c6462a39055803bcbb0156cfe", "patch": "@@ -495,13 +495,13 @@ Some multi-line comment<|>\n     fn test_completion_await_impls_future() {\n         check(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:std\n use std::future::*;\n struct A {}\n impl Future for A {}\n fn foo(a: A) { a.<|> }\n \n-//- /std/lib.rs\n+//- /std/lib.rs crate:std\n pub mod future {\n     #[lang = \"future_trait\"]\n     pub trait Future {}\n@@ -514,14 +514,14 @@ pub mod future {\n \n         check(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:std\n use std::future::*;\n fn foo() {\n     let a = async {};\n     a.<|>\n }\n \n-//- /std/lib.rs\n+//- /std/lib.rs crate:std\n pub mod future {\n     #[lang = \"future_trait\"]\n     pub trait Future {"}, {"sha": "c7a99bdc33df41570d4d1ab6dff6d2032f47eb0c", "filename": "crates/ide/src/completion/complete_mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_mod.rs?ref=09348b247465864c6462a39055803bcbb0156cfe", "patch": "@@ -300,15 +300,15 @@ mod tests {\n     //     \"#,\n     //         expect![[r#\"\n     //             md bar;\n-    //         \"#]],\n+    //         \"#]],foo\n     //     );\n     // }\n \n     #[test]\n     fn already_declared_bin_module_completion_omitted() {\n         check(\n             r#\"\n-            //- /src/bin.rs\n+            //- /src/bin.rs crate:main\n             fn main() {}\n             //- /src/bin/foo.rs\n             mod <|>"}, {"sha": "2fafedd47c83f1ca4d4d17e0d1cbe11365c20f2d", "filename": "crates/ide/src/completion/complete_qualified_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs?ref=09348b247465864c6462a39055803bcbb0156cfe", "patch": "@@ -422,10 +422,10 @@ fn foo() { let _ = U::<|> }\n     fn completes_use_paths_across_crates() {\n         check(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:foo\n use foo::<|>;\n \n-//- /foo/lib.rs\n+//- /foo/lib.rs crate:foo\n pub mod bar { pub struct S; }\n \"#,\n             expect![[r#\""}, {"sha": "2010d9a2fdb0e45bf6a01953ee2c03278bab1dbd", "filename": "crates/ide/src/completion/complete_unqualified_path.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs?ref=09348b247465864c6462a39055803bcbb0156cfe", "patch": "@@ -271,10 +271,10 @@ fn quux() { <|> }\n     fn completes_extern_prelude() {\n         check(\n             r#\"\n-//- /lib.rs\n+//- /lib.rs crate:main deps:other_crate\n use <|>;\n \n-//- /other_crate/lib.rs\n+//- /other_crate/lib.rs crate:other_crate\n // nothing here\n \"#,\n             expect![[r#\"\n@@ -350,10 +350,10 @@ fn foo() {\n     fn completes_prelude() {\n         check(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:std\n fn foo() { let x: <|> }\n \n-//- /std/lib.rs\n+//- /std/lib.rs crate:std\n #[prelude_import]\n use prelude::*;\n \n@@ -371,16 +371,16 @@ mod prelude { struct Option; }\n     fn completes_std_prelude_if_core_is_defined() {\n         check(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:core,std\n fn foo() { let x: <|> }\n \n-//- /core/lib.rs\n+//- /core/lib.rs crate:core\n #[prelude_import]\n use prelude::*;\n \n mod prelude { struct Option; }\n \n-//- /std/lib.rs\n+//- /std/lib.rs crate:std deps:core\n #[prelude_import]\n use prelude::*;\n "}, {"sha": "a5172b87ece5d5b38c85b6ea467b3faae14835b3", "filename": "crates/ide/src/completion/presentation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=09348b247465864c6462a39055803bcbb0156cfe", "patch": "@@ -1172,9 +1172,9 @@ fn foo(xs: Vec<i128>)\n         check_edit(\n             \"frobnicate!\",\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:foo\n use foo::<|>;\n-//- /foo/lib.rs\n+//- /foo/lib.rs crate:foo\n #[macro_export]\n macro_rules frobnicate { () => () }\n \"#,"}, {"sha": "906f72a42abae64477aa65f43926a6f950a9a4d2", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=09348b247465864c6462a39055803bcbb0156cfe", "patch": "@@ -219,7 +219,7 @@ mod tests {\n     use test_utils::assert_eq_text;\n \n     use crate::{\n-        mock_analysis::{analysis_and_position, single_file, MockAnalysis},\n+        mock_analysis::{analysis_and_position, many_files, single_file},\n         DiagnosticsConfig,\n     };\n \n@@ -282,9 +282,7 @@ mod tests {\n     /// Takes a multi-file input fixture with annotated cursor position and checks that no diagnostics\n     /// apply to the file containing the cursor.\n     fn check_no_diagnostics(ra_fixture: &str) {\n-        let mock = MockAnalysis::with_files(ra_fixture);\n-        let files = mock.files().map(|(it, _)| it).collect::<Vec<_>>();\n-        let analysis = mock.analysis();\n+        let (analysis, files) = many_files(ra_fixture);\n         let diagnostics = files\n             .into_iter()\n             .flat_map(|file_id| {\n@@ -304,7 +302,7 @@ mod tests {\n     fn test_wrap_return_type() {\n         check_fix(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:core\n use core::result::Result::{self, Ok, Err};\n \n fn div(x: i32, y: i32) -> Result<i32, ()> {\n@@ -313,7 +311,7 @@ fn div(x: i32, y: i32) -> Result<i32, ()> {\n     }\n     x / y<|>\n }\n-//- /core/lib.rs\n+//- /core/lib.rs crate:core\n pub mod result {\n     pub enum Result<T, E> { Ok(T), Err(E) }\n }\n@@ -335,7 +333,7 @@ fn div(x: i32, y: i32) -> Result<i32, ()> {\n     fn test_wrap_return_type_handles_generic_functions() {\n         check_fix(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:core\n use core::result::Result::{self, Ok, Err};\n \n fn div<T>(x: T) -> Result<T, i32> {\n@@ -344,7 +342,7 @@ fn div<T>(x: T) -> Result<T, i32> {\n     }\n     <|>x\n }\n-//- /core/lib.rs\n+//- /core/lib.rs crate:core\n pub mod result {\n     pub enum Result<T, E> { Ok(T), Err(E) }\n }\n@@ -366,7 +364,7 @@ fn div<T>(x: T) -> Result<T, i32> {\n     fn test_wrap_return_type_handles_type_aliases() {\n         check_fix(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:core\n use core::result::Result::{self, Ok, Err};\n \n type MyResult<T> = Result<T, ()>;\n@@ -377,7 +375,7 @@ fn div(x: i32, y: i32) -> MyResult<i32> {\n     }\n     x <|>/ y\n }\n-//- /core/lib.rs\n+//- /core/lib.rs crate:core\n pub mod result {\n     pub enum Result<T, E> { Ok(T), Err(E) }\n }\n@@ -401,12 +399,12 @@ fn div(x: i32, y: i32) -> MyResult<i32> {\n     fn test_wrap_return_type_not_applicable_when_expr_type_does_not_match_ok_type() {\n         check_no_diagnostics(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:core\n use core::result::Result::{self, Ok, Err};\n \n fn foo() -> Result<(), i32> { 0 }\n \n-//- /core/lib.rs\n+//- /core/lib.rs crate:core\n pub mod result {\n     pub enum Result<T, E> { Ok(T), Err(E) }\n }\n@@ -418,14 +416,14 @@ pub mod result {\n     fn test_wrap_return_type_not_applicable_when_return_type_is_not_result() {\n         check_no_diagnostics(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:core\n use core::result::Result::{self, Ok, Err};\n \n enum SomeOtherEnum { Ok(i32), Err(String) }\n \n fn foo() -> SomeOtherEnum { 0 }\n \n-//- /core/lib.rs\n+//- /core/lib.rs crate:core\n pub mod result {\n     pub enum Result<T, E> { Ok(T), Err(E) }\n }\n@@ -567,7 +565,7 @@ fn test_fn() {\n                                     file_system_edits: [\n                                         CreateFile {\n                                             anchor: FileId(\n-                                                1,\n+                                                0,\n                                             ),\n                                             dst: \"foo.rs\",\n                                         },"}, {"sha": "bace2f3a370d59b46cf7a70b7cc0fa060601b079", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=09348b247465864c6462a39055803bcbb0156cfe", "patch": "@@ -439,7 +439,7 @@ fn foo() { enum FooInner { } }\n             [\n                 NavigationTarget {\n                     file_id: FileId(\n-                        1,\n+                        0,\n                     ),\n                     full_range: 0..17,\n                     focus_range: Some(\n@@ -455,7 +455,7 @@ fn foo() { enum FooInner { } }\n                 },\n                 NavigationTarget {\n                     file_id: FileId(\n-                        1,\n+                        0,\n                     ),\n                     full_range: 29..46,\n                     focus_range: Some("}, {"sha": "5fd2d1e9acab5d750d099b7bfd3e61df6ffd592b", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=09348b247465864c6462a39055803bcbb0156cfe", "patch": "@@ -103,12 +103,11 @@ mod tests {\n     use base_db::FileRange;\n     use syntax::{TextRange, TextSize};\n \n-    use crate::mock_analysis::MockAnalysis;\n+    use crate::mock_analysis::analysis_and_annotations;\n \n     fn check(ra_fixture: &str) {\n-        let (mock, position) = MockAnalysis::with_files_and_position(ra_fixture);\n-        let (mut expected, data) = mock.annotation();\n-        let analysis = mock.analysis();\n+        let (analysis, position, mut annotations) = analysis_and_annotations(ra_fixture);\n+        let (mut expected, data) = annotations.pop().unwrap();\n         match data.as_str() {\n             \"\" => (),\n             \"file\" => {\n@@ -133,9 +132,9 @@ mod tests {\n     fn goto_def_for_extern_crate() {\n         check(\n             r#\"\n-            //- /main.rs\n+            //- /main.rs crate:main deps:std\n             extern crate std<|>;\n-            //- /std/lib.rs\n+            //- /std/lib.rs crate:std\n             // empty\n             //^ file\n             \"#,\n@@ -146,9 +145,9 @@ mod tests {\n     fn goto_def_for_renamed_extern_crate() {\n         check(\n             r#\"\n-            //- /main.rs\n+            //- /main.rs crate:main deps:std\n             extern crate std as abc<|>;\n-            //- /std/lib.rs\n+            //- /std/lib.rs crate:std\n             // empty\n             //^ file\n             \"#,\n@@ -342,10 +341,10 @@ fn bar() {\n     fn goto_def_for_use_alias() {\n         check(\n             r#\"\n-//- /lib.rs\n+//- /lib.rs crate:main deps:foo\n use foo as bar<|>;\n \n-//- /foo/lib.rs\n+//- /foo/lib.rs crate:foo\n // empty\n //^ file\n \"#,\n@@ -356,10 +355,10 @@ use foo as bar<|>;\n     fn goto_def_for_use_alias_foo_macro() {\n         check(\n             r#\"\n-//- /lib.rs\n+//- /lib.rs crate:main deps:foo\n use foo::foo as bar<|>;\n \n-//- /foo/lib.rs\n+//- /foo/lib.rs crate:foo\n #[macro_export]\n macro_rules! foo { () => { () } }\n            //^^^\n@@ -371,7 +370,6 @@ macro_rules! foo { () => { () } }\n     fn goto_def_for_methods() {\n         check(\n             r#\"\n-//- /lib.rs\n struct Foo;\n impl Foo {\n     fn frobnicate(&self) { }"}, {"sha": "a88854d05c44fe9e35ada5d0839b52e22c6606b8", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=09348b247465864c6462a39055803bcbb0156cfe", "patch": "@@ -76,12 +76,10 @@ fn impls_for_trait(\n mod tests {\n     use base_db::FileRange;\n \n-    use crate::mock_analysis::MockAnalysis;\n+    use crate::mock_analysis::analysis_and_annotations;\n \n     fn check(ra_fixture: &str) {\n-        let (mock, position) = MockAnalysis::with_files_and_position(ra_fixture);\n-        let annotations = mock.annotations();\n-        let analysis = mock.analysis();\n+        let (analysis, position, annotations) = analysis_and_annotations(ra_fixture);\n \n         let navs = analysis.goto_implementation(position).unwrap().unwrap().info;\n "}, {"sha": "b55a2dbb1a5afb5b6789b556cb76199504afbb2d", "filename": "crates/ide/src/goto_type_definition.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs?ref=09348b247465864c6462a39055803bcbb0156cfe", "patch": "@@ -56,13 +56,12 @@ fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n mod tests {\n     use base_db::FileRange;\n \n-    use crate::mock_analysis::MockAnalysis;\n+    use crate::mock_analysis::analysis_and_annotations;\n \n     fn check(ra_fixture: &str) {\n-        let (mock, position) = MockAnalysis::with_files_and_position(ra_fixture);\n-        let (expected, data) = mock.annotation();\n+        let (analysis, position, mut annotations) = analysis_and_annotations(ra_fixture);\n+        let (expected, data) = annotations.pop().unwrap();\n         assert!(data.is_empty());\n-        let analysis = mock.analysis();\n \n         let mut navs = analysis.goto_type_definition(position).unwrap().unwrap().info;\n         assert_eq!(navs.len(), 1);"}, {"sha": "008061a3975a51efbc804f927447ce11b75dac99", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=09348b247465864c6462a39055803bcbb0156cfe", "patch": "@@ -1275,7 +1275,7 @@ fn bar() { fo<|>o(); }\n                     Implementaion(\n                         FilePosition {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             offset: 13,\n                         },\n@@ -1289,9 +1289,9 @@ fn bar() { fo<|>o(); }\n     fn test_hover_extern_crate() {\n         check(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:std\n extern crate st<|>d;\n-//- /std/lib.rs\n+//- /std/lib.rs crate:std\n //! Standard library for this test\n //!\n //! Printed?\n@@ -1307,9 +1307,9 @@ extern crate st<|>d;\n         );\n         check(\n             r#\"\n-//- /main.rs\n+//- /main.rs crate:main deps:std\n extern crate std as ab<|>c;\n-//- /std/lib.rs\n+//- /std/lib.rs crate:std\n //! Standard library for this test\n //!\n //! Printed?\n@@ -1989,7 +1989,7 @@ fn foo() { let bar = Bar; bar.fo<|>o(); }\n                     Implementaion(\n                         FilePosition {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             offset: 6,\n                         },\n@@ -2008,7 +2008,7 @@ fn foo() { let bar = Bar; bar.fo<|>o(); }\n                     Implementaion(\n                         FilePosition {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             offset: 7,\n                         },\n@@ -2027,7 +2027,7 @@ fn foo() { let bar = Bar; bar.fo<|>o(); }\n                     Implementaion(\n                         FilePosition {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             offset: 6,\n                         },\n@@ -2046,7 +2046,7 @@ fn foo() { let bar = Bar; bar.fo<|>o(); }\n                     Implementaion(\n                         FilePosition {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             offset: 5,\n                         },\n@@ -2069,7 +2069,7 @@ fn foo_<|>test() {}\n                         Runnable {\n                             nav: NavigationTarget {\n                                 file_id: FileId(\n-                                    1,\n+                                    0,\n                                 ),\n                                 full_range: 0..24,\n                                 focus_range: Some(\n@@ -2112,7 +2112,7 @@ mod tests<|> {\n                         Runnable {\n                             nav: NavigationTarget {\n                                 file_id: FileId(\n-                                    1,\n+                                    0,\n                                 ),\n                                 full_range: 0..46,\n                                 focus_range: Some(\n@@ -2151,7 +2151,7 @@ fn main() { let s<|>t = S{ f1:0 }; }\n                                 mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..19,\n                                     focus_range: Some(\n@@ -2190,7 +2190,7 @@ fn main() { let s<|>t = S{ f1:Arg(0) }; }\n                                 mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 17..37,\n                                     focus_range: Some(\n@@ -2209,7 +2209,7 @@ fn main() { let s<|>t = S{ f1:Arg(0) }; }\n                                 mod_path: \"test::Arg\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..16,\n                                     focus_range: Some(\n@@ -2248,7 +2248,7 @@ fn main() { let s<|>t = S{ f1: S{ f1: Arg(0) } }; }\n                                 mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 17..37,\n                                     focus_range: Some(\n@@ -2267,7 +2267,7 @@ fn main() { let s<|>t = S{ f1: S{ f1: Arg(0) } }; }\n                                 mod_path: \"test::Arg\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..16,\n                                     focus_range: Some(\n@@ -2309,7 +2309,7 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n                                 mod_path: \"test::A\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..14,\n                                     focus_range: Some(\n@@ -2328,7 +2328,7 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n                                 mod_path: \"test::B\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 15..29,\n                                     focus_range: Some(\n@@ -2347,7 +2347,7 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n                                 mod_path: \"test::M::C\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 42..60,\n                                     focus_range: Some(\n@@ -2386,7 +2386,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..12,\n                                     focus_range: Some(\n@@ -2426,7 +2426,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..15,\n                                     focus_range: Some(\n@@ -2445,7 +2445,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 16..25,\n                                     focus_range: Some(\n@@ -2485,7 +2485,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..12,\n                                     focus_range: Some(\n@@ -2504,7 +2504,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::Bar\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 13..25,\n                                     focus_range: Some(\n@@ -2547,7 +2547,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..15,\n                                     focus_range: Some(\n@@ -2566,7 +2566,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::Bar\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 16..31,\n                                     focus_range: Some(\n@@ -2585,7 +2585,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::S1\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 32..44,\n                                     focus_range: Some(\n@@ -2604,7 +2604,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::S2\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 45..57,\n                                     focus_range: Some(\n@@ -2641,7 +2641,7 @@ fn foo(ar<|>g: &impl Foo) {}\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..12,\n                                     focus_range: Some(\n@@ -2681,7 +2681,7 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..12,\n                                     focus_range: Some(\n@@ -2700,7 +2700,7 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n                                 mod_path: \"test::Bar\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 13..28,\n                                     focus_range: Some(\n@@ -2719,7 +2719,7 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n                                 mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 29..39,\n                                     focus_range: Some(\n@@ -2764,7 +2764,7 @@ mod future {\n                                 mod_path: \"test::future::Future\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 101..163,\n                                     focus_range: Some(\n@@ -2783,7 +2783,7 @@ mod future {\n                                 mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..9,\n                                     focus_range: Some(\n@@ -2821,7 +2821,7 @@ fn foo(ar<|>g: &impl Foo<S>) {}\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..15,\n                                     focus_range: Some(\n@@ -2840,7 +2840,7 @@ fn foo(ar<|>g: &impl Foo<S>) {}\n                                 mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 16..27,\n                                     focus_range: Some(\n@@ -2883,7 +2883,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::B\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 42..55,\n                                     focus_range: Some(\n@@ -2902,7 +2902,7 @@ fn main() { let s<|>t = foo(); }\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..12,\n                                     focus_range: Some(\n@@ -2939,7 +2939,7 @@ fn foo(ar<|>g: &dyn Foo) {}\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..12,\n                                     focus_range: Some(\n@@ -2977,7 +2977,7 @@ fn foo(ar<|>g: &dyn Foo<S>) {}\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..15,\n                                     focus_range: Some(\n@@ -2996,7 +2996,7 @@ fn foo(ar<|>g: &dyn Foo<S>) {}\n                                 mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 16..27,\n                                     focus_range: Some(\n@@ -3037,7 +3037,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                 mod_path: \"test::ImplTrait\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..21,\n                                     focus_range: Some(\n@@ -3056,7 +3056,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                 mod_path: \"test::B\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 43..57,\n                                     focus_range: Some(\n@@ -3075,7 +3075,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                 mod_path: \"test::DynTrait\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 22..42,\n                                     focus_range: Some(\n@@ -3094,7 +3094,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                 mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 58..69,\n                                     focus_range: Some(\n@@ -3142,7 +3142,7 @@ fn main() { let s<|>t = test().get(); }\n                                 mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n-                                        1,\n+                                        0,\n                                     ),\n                                     full_range: 0..62,\n                                     focus_range: Some("}, {"sha": "8385475993e6fe6180e8b75b3d94767afe8723eb", "filename": "crates/ide/src/mock_analysis.rs", "status": "modified", "additions": 54, "deletions": 155, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmock_analysis.rs?ref=09348b247465864c6462a39055803bcbb0156cfe", "patch": "@@ -1,174 +1,73 @@\n //! FIXME: write short doc here\n-use std::sync::Arc;\n \n-use base_db::{CrateName, FileSet, SourceRoot, VfsPath};\n-use cfg::CfgOptions;\n-use test_utils::{\n-    extract_annotations, extract_range_or_offset, Fixture, RangeOrOffset, CURSOR_MARKER,\n-};\n+use base_db::fixture::ChangeFixture;\n+use test_utils::{extract_annotations, RangeOrOffset};\n \n-use crate::{Analysis, AnalysisHost, Change, CrateGraph, Edition, FileId, FilePosition, FileRange};\n-\n-/// Mock analysis is used in test to bootstrap an AnalysisHost/Analysis\n-/// from a set of in-memory files.\n-#[derive(Debug, Default)]\n-pub(crate) struct MockAnalysis {\n-    files: Vec<Fixture>,\n-}\n-\n-impl MockAnalysis {\n-    /// Creates `MockAnalysis` using a fixture data in the following format:\n-    ///\n-    /// ```not_rust\n-    /// //- /main.rs\n-    /// mod foo;\n-    /// fn main() {}\n-    ///\n-    /// //- /foo.rs\n-    /// struct Baz;\n-    /// ```\n-    pub(crate) fn with_files(ra_fixture: &str) -> MockAnalysis {\n-        let (res, pos) = MockAnalysis::with_fixture(ra_fixture);\n-        assert!(pos.is_none());\n-        res\n-    }\n-\n-    /// Same as `with_files`, but requires that a single file contains a `<|>` marker,\n-    /// whose position is also returned.\n-    pub(crate) fn with_files_and_position(fixture: &str) -> (MockAnalysis, FilePosition) {\n-        let (res, position) = MockAnalysis::with_fixture(fixture);\n-        let (file_id, range_or_offset) = position.expect(\"expected a marker (<|>)\");\n-        let offset = match range_or_offset {\n-            RangeOrOffset::Range(_) => panic!(),\n-            RangeOrOffset::Offset(it) => it,\n-        };\n-        (res, FilePosition { file_id, offset })\n-    }\n-\n-    fn with_fixture(fixture: &str) -> (MockAnalysis, Option<(FileId, RangeOrOffset)>) {\n-        let mut position = None;\n-        let mut res = MockAnalysis::default();\n-        for mut entry in Fixture::parse(fixture) {\n-            if entry.text.contains(CURSOR_MARKER) {\n-                assert!(position.is_none(), \"only one marker (<|>) per fixture is allowed\");\n-                let (range_or_offset, text) = extract_range_or_offset(&entry.text);\n-                entry.text = text;\n-                let file_id = res.add_file_fixture(entry);\n-                position = Some((file_id, range_or_offset));\n-            } else {\n-                res.add_file_fixture(entry);\n-            }\n-        }\n-        (res, position)\n-    }\n-\n-    fn add_file_fixture(&mut self, fixture: Fixture) -> FileId {\n-        let file_id = FileId((self.files.len() + 1) as u32);\n-        self.files.push(fixture);\n-        file_id\n-    }\n-\n-    pub(crate) fn id_of(&self, path: &str) -> FileId {\n-        let (file_id, _) =\n-            self.files().find(|(_, data)| path == data.path).expect(\"no file in this mock\");\n-        file_id\n-    }\n-    pub(crate) fn annotations(&self) -> Vec<(FileRange, String)> {\n-        self.files()\n-            .flat_map(|(file_id, fixture)| {\n-                let annotations = extract_annotations(&fixture.text);\n-                annotations\n-                    .into_iter()\n-                    .map(move |(range, data)| (FileRange { file_id, range }, data))\n-            })\n-            .collect()\n-    }\n-    pub(crate) fn files(&self) -> impl Iterator<Item = (FileId, &Fixture)> + '_ {\n-        self.files.iter().enumerate().map(|(idx, fixture)| (FileId(idx as u32 + 1), fixture))\n-    }\n-    pub(crate) fn annotation(&self) -> (FileRange, String) {\n-        let mut all = self.annotations();\n-        assert_eq!(all.len(), 1);\n-        all.pop().unwrap()\n-    }\n-    pub(crate) fn analysis_host(self) -> AnalysisHost {\n-        let mut host = AnalysisHost::default();\n-        let mut change = Change::new();\n-        let mut file_set = FileSet::default();\n-        let mut crate_graph = CrateGraph::default();\n-        let mut root_crate = None;\n-        for (i, data) in self.files.into_iter().enumerate() {\n-            let path = data.path;\n-            assert!(path.starts_with('/'));\n-\n-            let mut cfg = CfgOptions::default();\n-            data.cfg_atoms.iter().for_each(|it| cfg.insert_atom(it.into()));\n-            data.cfg_key_values.iter().for_each(|(k, v)| cfg.insert_key_value(k.into(), v.into()));\n-            let edition: Edition =\n-                data.edition.and_then(|it| it.parse().ok()).unwrap_or(Edition::Edition2018);\n-\n-            let file_id = FileId(i as u32 + 1);\n-            let env = data.env.into_iter().collect();\n-            if path == \"/lib.rs\" || path == \"/main.rs\" {\n-                root_crate = Some(crate_graph.add_crate_root(\n-                    file_id,\n-                    edition,\n-                    Some(\"test\".to_string()),\n-                    cfg,\n-                    env,\n-                    Default::default(),\n-                ));\n-            } else if path.ends_with(\"/lib.rs\") {\n-                let base = &path[..path.len() - \"/lib.rs\".len()];\n-                let crate_name = &base[base.rfind('/').unwrap() + '/'.len_utf8()..];\n-                let other_crate = crate_graph.add_crate_root(\n-                    file_id,\n-                    edition,\n-                    Some(crate_name.to_string()),\n-                    cfg,\n-                    env,\n-                    Default::default(),\n-                );\n-                if let Some(root_crate) = root_crate {\n-                    crate_graph\n-                        .add_dep(root_crate, CrateName::new(crate_name).unwrap(), other_crate)\n-                        .unwrap();\n-                }\n-            }\n-            let path = VfsPath::new_virtual_path(path.to_string());\n-            file_set.insert(file_id, path);\n-            change.change_file(file_id, Some(Arc::new(data.text).to_owned()));\n-        }\n-        change.set_crate_graph(crate_graph);\n-        change.set_roots(vec![SourceRoot::new_local(file_set)]);\n-        host.apply_change(change);\n-        host\n-    }\n-    pub(crate) fn analysis(self) -> Analysis {\n-        self.analysis_host().analysis()\n-    }\n-}\n+use crate::{Analysis, AnalysisHost, FileId, FilePosition, FileRange};\n \n /// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n pub(crate) fn analysis_and_position(ra_fixture: &str) -> (Analysis, FilePosition) {\n-    let (mock, position) = MockAnalysis::with_files_and_position(ra_fixture);\n-    (mock.analysis(), position)\n+    let mut host = AnalysisHost::default();\n+    let change_fixture = ChangeFixture::parse(ra_fixture);\n+    host.db.apply_change(change_fixture.change);\n+    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker (<|>)\");\n+    let offset = match range_or_offset {\n+        RangeOrOffset::Range(_) => panic!(),\n+        RangeOrOffset::Offset(it) => it,\n+    };\n+    (host.analysis(), FilePosition { file_id, offset })\n }\n \n /// Creates analysis for a single file.\n pub(crate) fn single_file(ra_fixture: &str) -> (Analysis, FileId) {\n-    let mock = MockAnalysis::with_files(ra_fixture);\n-    let file_id = mock.id_of(\"/main.rs\");\n-    (mock.analysis(), file_id)\n+    let mut host = AnalysisHost::default();\n+    let change_fixture = ChangeFixture::parse(ra_fixture);\n+    host.db.apply_change(change_fixture.change);\n+    (host.analysis(), change_fixture.files[0])\n+}\n+\n+/// Creates analysis for a single file.\n+pub(crate) fn many_files(ra_fixture: &str) -> (Analysis, Vec<FileId>) {\n+    let mut host = AnalysisHost::default();\n+    let change_fixture = ChangeFixture::parse(ra_fixture);\n+    host.db.apply_change(change_fixture.change);\n+    (host.analysis(), change_fixture.files)\n }\n \n /// Creates analysis for a single file, returns range marked with a pair of <|>.\n pub(crate) fn analysis_and_range(ra_fixture: &str) -> (Analysis, FileRange) {\n-    let (res, position) = MockAnalysis::with_fixture(ra_fixture);\n-    let (file_id, range_or_offset) = position.expect(\"expected a marker (<|>)\");\n+    let mut host = AnalysisHost::default();\n+    let change_fixture = ChangeFixture::parse(ra_fixture);\n+    host.db.apply_change(change_fixture.change);\n+    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker (<|>)\");\n     let range = match range_or_offset {\n         RangeOrOffset::Range(it) => it,\n         RangeOrOffset::Offset(_) => panic!(),\n     };\n-    (res.analysis(), FileRange { file_id, range })\n+    (host.analysis(), FileRange { file_id, range })\n+}\n+\n+/// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n+pub(crate) fn analysis_and_annotations(\n+    ra_fixture: &str,\n+) -> (Analysis, FilePosition, Vec<(FileRange, String)>) {\n+    let mut host = AnalysisHost::default();\n+    let change_fixture = ChangeFixture::parse(ra_fixture);\n+    host.db.apply_change(change_fixture.change);\n+    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker (<|>)\");\n+    let offset = match range_or_offset {\n+        RangeOrOffset::Range(_) => panic!(),\n+        RangeOrOffset::Offset(it) => it,\n+    };\n+\n+    let annotations = change_fixture\n+        .files\n+        .iter()\n+        .flat_map(|&file_id| {\n+            let file_text = host.analysis().file_text(file_id).unwrap();\n+            let annotations = extract_annotations(&file_text);\n+            annotations.into_iter().map(move |(range, data)| (FileRange { file_id, range }, data))\n+        })\n+        .collect();\n+    (host.analysis(), FilePosition { file_id, offset }, annotations)\n }"}, {"sha": "25345447642f3a1f2aa6c12694ce0cda168d859f", "filename": "crates/ide/src/parent_module.rs", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fparent_module.rs?ref=09348b247465864c6462a39055803bcbb0156cfe", "patch": "@@ -63,15 +63,9 @@ pub(crate) fn crate_for(db: &RootDatabase, file_id: FileId) -> Vec<CrateId> {\n \n #[cfg(test)]\n mod tests {\n-    use base_db::Env;\n-    use cfg::CfgOptions;\n     use test_utils::mark;\n \n-    use crate::{\n-        mock_analysis::{analysis_and_position, MockAnalysis},\n-        Change, CrateGraph,\n-        Edition::Edition2018,\n-    };\n+    use crate::mock_analysis::{analysis_and_position, single_file};\n \n     #[test]\n     fn test_resolve_parent_module() {\n@@ -84,7 +78,7 @@ mod tests {\n             \",\n         );\n         let nav = analysis.parent_module(pos).unwrap().pop().unwrap();\n-        nav.assert_match(\"foo MODULE FileId(1) 0..8\");\n+        nav.assert_match(\"foo MODULE FileId(0) 0..8\");\n     }\n \n     #[test]\n@@ -103,7 +97,7 @@ mod tests {\n             \",\n         );\n         let nav = analysis.parent_module(pos).unwrap().pop().unwrap();\n-        nav.assert_match(\"foo MODULE FileId(1) 0..8\");\n+        nav.assert_match(\"foo MODULE FileId(0) 0..8\");\n     }\n \n     #[test]\n@@ -119,37 +113,19 @@ mod tests {\n             \",\n         );\n         let nav = analysis.parent_module(pos).unwrap().pop().unwrap();\n-        nav.assert_match(\"baz MODULE FileId(1) 32..44\");\n+        nav.assert_match(\"baz MODULE FileId(0) 32..44\");\n     }\n \n     #[test]\n     fn test_resolve_crate_root() {\n-        let mock = MockAnalysis::with_files(\n+        let (analysis, file_id) = single_file(\n             r#\"\n-//- /bar.rs\n+//- /main.rs\n mod foo;\n //- /foo.rs\n-// empty\n+<|>\n \"#,\n         );\n-        let root_file = mock.id_of(\"/bar.rs\");\n-        let mod_file = mock.id_of(\"/foo.rs\");\n-        let mut host = mock.analysis_host();\n-        assert!(host.analysis().crate_for(mod_file).unwrap().is_empty());\n-\n-        let mut crate_graph = CrateGraph::default();\n-        let crate_id = crate_graph.add_crate_root(\n-            root_file,\n-            Edition2018,\n-            None,\n-            CfgOptions::default(),\n-            Env::default(),\n-            Default::default(),\n-        );\n-        let mut change = Change::new();\n-        change.set_crate_graph(crate_graph);\n-        host.apply_change(change);\n-\n-        assert_eq!(host.analysis().crate_for(mod_file).unwrap(), vec![crate_id]);\n+        assert_eq!(analysis.crate_for(file_id).unwrap().len(), 1);\n     }\n }"}, {"sha": "157e0dc949b9572a379d5cf45e96b95abb22492e", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 58, "deletions": 60, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=09348b247465864c6462a39055803bcbb0156cfe", "patch": "@@ -190,10 +190,11 @@ fn get_struct_def_name_for_struct_literal_search(\n \n #[cfg(test)]\n mod tests {\n+    use base_db::FileId;\n     use expect_test::{expect, Expect};\n     use stdx::format_to;\n \n-    use crate::{mock_analysis::MockAnalysis, SearchScope};\n+    use crate::{mock_analysis::analysis_and_position, SearchScope};\n \n     #[test]\n     fn test_struct_literal_after_space() {\n@@ -211,9 +212,9 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                Foo STRUCT FileId(1) 0..26 7..10 Other\n+                Foo STRUCT FileId(0) 0..26 7..10 Other\n \n-                FileId(1) 101..104 StructLiteral\n+                FileId(0) 101..104 StructLiteral\n             \"#]],\n         );\n     }\n@@ -229,10 +230,10 @@ struct Foo<|> {}\n }\n \"#,\n             expect![[r#\"\n-                Foo STRUCT FileId(1) 0..13 7..10 Other\n+                Foo STRUCT FileId(0) 0..13 7..10 Other\n \n-                FileId(1) 41..44 Other\n-                FileId(1) 54..57 StructLiteral\n+                FileId(0) 41..44 Other\n+                FileId(0) 54..57 StructLiteral\n             \"#]],\n         );\n     }\n@@ -248,9 +249,9 @@ struct Foo<T> <|>{}\n }\n \"#,\n             expect![[r#\"\n-                Foo STRUCT FileId(1) 0..16 7..10 Other\n+                Foo STRUCT FileId(0) 0..16 7..10 Other\n \n-                FileId(1) 64..67 StructLiteral\n+                FileId(0) 64..67 StructLiteral\n             \"#]],\n         );\n     }\n@@ -267,9 +268,9 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                Foo STRUCT FileId(1) 0..16 7..10 Other\n+                Foo STRUCT FileId(0) 0..16 7..10 Other\n \n-                FileId(1) 54..57 StructLiteral\n+                FileId(0) 54..57 StructLiteral\n             \"#]],\n         );\n     }\n@@ -290,12 +291,12 @@ fn main() {\n     i = 5;\n }\"#,\n             expect![[r#\"\n-                i IDENT_PAT FileId(1) 24..25 Other Write\n+                i IDENT_PAT FileId(0) 24..25 Other Write\n \n-                FileId(1) 50..51 Other Write\n-                FileId(1) 54..55 Other Read\n-                FileId(1) 76..77 Other Write\n-                FileId(1) 94..95 Other Write\n+                FileId(0) 50..51 Other Write\n+                FileId(0) 54..55 Other Read\n+                FileId(0) 76..77 Other Write\n+                FileId(0) 94..95 Other Write\n             \"#]],\n         );\n     }\n@@ -314,10 +315,10 @@ fn bar() {\n }\n \"#,\n             expect![[r#\"\n-                spam IDENT_PAT FileId(1) 19..23 Other\n+                spam IDENT_PAT FileId(0) 19..23 Other\n \n-                FileId(1) 34..38 Other Read\n-                FileId(1) 41..45 Other Read\n+                FileId(0) 34..38 Other Read\n+                FileId(0) 41..45 Other Read\n             \"#]],\n         );\n     }\n@@ -329,9 +330,9 @@ fn bar() {\n fn foo(i : u32) -> u32 { i<|> }\n \"#,\n             expect![[r#\"\n-                i IDENT_PAT FileId(1) 7..8 Other\n+                i IDENT_PAT FileId(0) 7..8 Other\n \n-                FileId(1) 25..26 Other Read\n+                FileId(0) 25..26 Other Read\n             \"#]],\n         );\n     }\n@@ -343,9 +344,9 @@ fn foo(i : u32) -> u32 { i<|> }\n fn foo(i<|> : u32) -> u32 { i }\n \"#,\n             expect![[r#\"\n-                i IDENT_PAT FileId(1) 7..8 Other\n+                i IDENT_PAT FileId(0) 7..8 Other\n \n-                FileId(1) 25..26 Other Read\n+                FileId(0) 25..26 Other Read\n             \"#]],\n         );\n     }\n@@ -364,9 +365,9 @@ fn main(s: Foo) {\n }\n \"#,\n             expect![[r#\"\n-                spam RECORD_FIELD FileId(1) 17..30 21..25 Other\n+                spam RECORD_FIELD FileId(0) 17..30 21..25 Other\n \n-                FileId(1) 67..71 Other Read\n+                FileId(0) 67..71 Other Read\n             \"#]],\n         );\n     }\n@@ -381,7 +382,7 @@ impl Foo {\n }\n \"#,\n             expect![[r#\"\n-                f FN FileId(1) 27..43 30..31 Other\n+                f FN FileId(0) 27..43 30..31 Other\n \n             \"#]],\n         );\n@@ -398,7 +399,7 @@ enum Foo {\n }\n \"#,\n             expect![[r#\"\n-                B VARIANT FileId(1) 22..23 22..23 Other\n+                B VARIANT FileId(0) 22..23 22..23 Other\n \n             \"#]],\n         );\n@@ -439,10 +440,10 @@ fn f() {\n }\n \"#,\n             expect![[r#\"\n-                Foo STRUCT FileId(2) 17..51 28..31 Other\n+                Foo STRUCT FileId(1) 17..51 28..31 Other\n \n-                FileId(1) 53..56 StructLiteral\n-                FileId(3) 79..82 StructLiteral\n+                FileId(0) 53..56 StructLiteral\n+                FileId(2) 79..82 StructLiteral\n             \"#]],\n         );\n     }\n@@ -469,9 +470,9 @@ pub struct Foo {\n }\n \"#,\n             expect![[r#\"\n-                foo SOURCE_FILE FileId(2) 0..35 Other\n+                foo SOURCE_FILE FileId(1) 0..35 Other\n \n-                FileId(1) 14..17 Other\n+                FileId(0) 14..17 Other\n             \"#]],\n         );\n     }\n@@ -497,10 +498,10 @@ pub(super) struct Foo<|> {\n }\n \"#,\n             expect![[r#\"\n-                Foo STRUCT FileId(3) 0..41 18..21 Other\n+                Foo STRUCT FileId(2) 0..41 18..21 Other\n \n-                FileId(2) 20..23 Other\n-                FileId(2) 47..50 StructLiteral\n+                FileId(1) 20..23 Other\n+                FileId(1) 47..50 StructLiteral\n             \"#]],\n         );\n     }\n@@ -525,20 +526,20 @@ pub(super) struct Foo<|> {\n             code,\n             None,\n             expect![[r#\"\n-                quux FN FileId(1) 19..35 26..30 Other\n+                quux FN FileId(0) 19..35 26..30 Other\n \n+                FileId(1) 16..20 StructLiteral\n                 FileId(2) 16..20 StructLiteral\n-                FileId(3) 16..20 StructLiteral\n             \"#]],\n         );\n \n         check_with_scope(\n             code,\n-            Some(\"/bar.rs\"),\n+            Some(SearchScope::single_file(FileId(2))),\n             expect![[r#\"\n-                quux FN FileId(1) 19..35 26..30 Other\n+                quux FN FileId(0) 19..35 26..30 Other\n \n-                FileId(3) 16..20 StructLiteral\n+                FileId(2) 16..20 StructLiteral\n             \"#]],\n         );\n     }\n@@ -556,10 +557,10 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                m1 MACRO_CALL FileId(1) 0..46 29..31 Other\n+                m1 MACRO_CALL FileId(0) 0..46 29..31 Other\n \n-                FileId(1) 63..65 StructLiteral\n-                FileId(1) 73..75 StructLiteral\n+                FileId(0) 63..65 StructLiteral\n+                FileId(0) 73..75 StructLiteral\n             \"#]],\n         );\n     }\n@@ -574,10 +575,10 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                i IDENT_PAT FileId(1) 23..24 Other Write\n+                i IDENT_PAT FileId(0) 23..24 Other Write\n \n-                FileId(1) 34..35 Other Write\n-                FileId(1) 38..39 Other Read\n+                FileId(0) 34..35 Other Write\n+                FileId(0) 38..39 Other Read\n             \"#]],\n         );\n     }\n@@ -596,10 +597,10 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                f RECORD_FIELD FileId(1) 15..21 15..16 Other\n+                f RECORD_FIELD FileId(0) 15..21 15..16 Other\n \n-                FileId(1) 55..56 Other Read\n-                FileId(1) 68..69 Other Write\n+                FileId(0) 55..56 Other Read\n+                FileId(0) 68..69 Other Write\n             \"#]],\n         );\n     }\n@@ -614,9 +615,9 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                i IDENT_PAT FileId(1) 19..20 Other\n+                i IDENT_PAT FileId(0) 19..20 Other\n \n-                FileId(1) 26..27 Other Write\n+                FileId(0) 26..27 Other Write\n             \"#]],\n         );\n     }\n@@ -638,9 +639,9 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                new FN FileId(1) 54..81 61..64 Other\n+                new FN FileId(0) 54..81 61..64 Other\n \n-                FileId(1) 126..129 StructLiteral\n+                FileId(0) 126..129 StructLiteral\n             \"#]],\n         );\n     }\n@@ -660,10 +661,10 @@ use crate::f;\n fn g() { f(); }\n \"#,\n             expect![[r#\"\n-                f FN FileId(1) 22..31 25..26 Other\n+                f FN FileId(0) 22..31 25..26 Other\n \n-                FileId(2) 11..12 Other\n-                FileId(2) 24..25 StructLiteral\n+                FileId(1) 11..12 Other\n+                FileId(1) 24..25 StructLiteral\n             \"#]],\n         );\n     }\n@@ -672,11 +673,8 @@ fn g() { f(); }\n         check_with_scope(ra_fixture, None, expect)\n     }\n \n-    fn check_with_scope(ra_fixture: &str, search_scope: Option<&str>, expect: Expect) {\n-        let (mock_analysis, pos) = MockAnalysis::with_files_and_position(ra_fixture);\n-        let search_scope =\n-            search_scope.map(|path| SearchScope::single_file(mock_analysis.id_of(path)));\n-        let analysis = mock_analysis.analysis();\n+    fn check_with_scope(ra_fixture: &str, search_scope: Option<SearchScope>, expect: Expect) {\n+        let (analysis, pos) = analysis_and_position(ra_fixture);\n         let refs = analysis.find_all_refs(pos, search_scope).unwrap().unwrap();\n \n         let mut actual = String::new();"}, {"sha": "36652707042b5cb52569c12cbe1d3e548f0f7aa3", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=09348b247465864c6462a39055803bcbb0156cfe", "patch": "@@ -602,7 +602,7 @@ mod foo<|>;\n                         source_file_edits: [\n                             SourceFileEdit {\n                                 file_id: FileId(\n-                                    2,\n+                                    1,\n                                 ),\n                                 edit: TextEdit {\n                                     indels: [\n@@ -617,10 +617,10 @@ mod foo<|>;\n                         file_system_edits: [\n                             MoveFile {\n                                 src: FileId(\n-                                    3,\n+                                    2,\n                                 ),\n                                 anchor: FileId(\n-                                    3,\n+                                    2,\n                                 ),\n                                 dst: \"foo2.rs\",\n                             },\n@@ -655,7 +655,7 @@ use crate::foo<|>::FooContent;\n                         source_file_edits: [\n                             SourceFileEdit {\n                                 file_id: FileId(\n-                                    1,\n+                                    0,\n                                 ),\n                                 edit: TextEdit {\n                                     indels: [\n@@ -668,7 +668,7 @@ use crate::foo<|>::FooContent;\n                             },\n                             SourceFileEdit {\n                                 file_id: FileId(\n-                                    3,\n+                                    2,\n                                 ),\n                                 edit: TextEdit {\n                                     indels: [\n@@ -683,10 +683,10 @@ use crate::foo<|>::FooContent;\n                         file_system_edits: [\n                             MoveFile {\n                                 src: FileId(\n-                                    2,\n+                                    1,\n                                 ),\n                                 anchor: FileId(\n-                                    2,\n+                                    1,\n                                 ),\n                                 dst: \"quux.rs\",\n                             },\n@@ -715,7 +715,7 @@ mod fo<|>o;\n                         source_file_edits: [\n                             SourceFileEdit {\n                                 file_id: FileId(\n-                                    1,\n+                                    0,\n                                 ),\n                                 edit: TextEdit {\n                                     indels: [\n@@ -730,10 +730,10 @@ mod fo<|>o;\n                         file_system_edits: [\n                             MoveFile {\n                                 src: FileId(\n-                                    2,\n+                                    1,\n                                 ),\n                                 anchor: FileId(\n-                                    2,\n+                                    1,\n                                 ),\n                                 dst: \"../foo2/mod.rs\",\n                             },\n@@ -763,7 +763,7 @@ mod outer { mod fo<|>o; }\n                         source_file_edits: [\n                             SourceFileEdit {\n                                 file_id: FileId(\n-                                    1,\n+                                    0,\n                                 ),\n                                 edit: TextEdit {\n                                     indels: [\n@@ -778,10 +778,10 @@ mod outer { mod fo<|>o; }\n                         file_system_edits: [\n                             MoveFile {\n                                 src: FileId(\n-                                    2,\n+                                    1,\n                                 ),\n                                 anchor: FileId(\n-                                    2,\n+                                    1,\n                                 ),\n                                 dst: \"bar.rs\",\n                             },\n@@ -834,7 +834,7 @@ pub mod foo<|>;\n                         source_file_edits: [\n                             SourceFileEdit {\n                                 file_id: FileId(\n-                                    2,\n+                                    1,\n                                 ),\n                                 edit: TextEdit {\n                                     indels: [\n@@ -847,7 +847,7 @@ pub mod foo<|>;\n                             },\n                             SourceFileEdit {\n                                 file_id: FileId(\n-                                    1,\n+                                    0,\n                                 ),\n                                 edit: TextEdit {\n                                     indels: [\n@@ -862,10 +862,10 @@ pub mod foo<|>;\n                         file_system_edits: [\n                             MoveFile {\n                                 src: FileId(\n-                                    3,\n+                                    2,\n                                 ),\n                                 anchor: FileId(\n-                                    3,\n+                                    2,\n                                 ),\n                                 dst: \"foo2.rs\",\n                             },"}, {"sha": "961066277fb9ca4a5de84294e7dea15a813fc53a", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=09348b247465864c6462a39055803bcbb0156cfe", "patch": "@@ -335,7 +335,7 @@ fn bench() {}\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 1..13,\n                             focus_range: Some(\n@@ -353,7 +353,7 @@ fn bench() {}\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 15..39,\n                             focus_range: Some(\n@@ -378,7 +378,7 @@ fn bench() {}\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 41..75,\n                             focus_range: Some(\n@@ -403,7 +403,7 @@ fn bench() {}\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 77..99,\n                             focus_range: Some(\n@@ -494,7 +494,7 @@ fn should_have_no_runnable_6() {}\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 1..13,\n                             focus_range: Some(\n@@ -512,7 +512,7 @@ fn should_have_no_runnable_6() {}\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 15..74,\n                             focus_range: None,\n@@ -532,7 +532,7 @@ fn should_have_no_runnable_6() {}\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 76..148,\n                             focus_range: None,\n@@ -552,7 +552,7 @@ fn should_have_no_runnable_6() {}\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 150..254,\n                             focus_range: None,\n@@ -596,7 +596,7 @@ impl Data {\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 1..13,\n                             focus_range: Some(\n@@ -614,7 +614,7 @@ impl Data {\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 44..98,\n                             focus_range: None,\n@@ -653,7 +653,7 @@ mod test_mod {\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 1..51,\n                             focus_range: Some(\n@@ -673,7 +673,7 @@ mod test_mod {\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 20..49,\n                             focus_range: Some(\n@@ -733,7 +733,7 @@ mod root_tests {\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 22..323,\n                             focus_range: Some(\n@@ -753,7 +753,7 @@ mod root_tests {\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 51..192,\n                             focus_range: Some(\n@@ -773,7 +773,7 @@ mod root_tests {\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 84..126,\n                             focus_range: Some(\n@@ -798,7 +798,7 @@ mod root_tests {\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 140..182,\n                             focus_range: Some(\n@@ -823,7 +823,7 @@ mod root_tests {\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 202..286,\n                             focus_range: Some(\n@@ -843,7 +843,7 @@ mod root_tests {\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 235..276,\n                             focus_range: Some(\n@@ -886,7 +886,7 @@ fn test_foo1() {}\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 1..50,\n                             focus_range: Some(\n@@ -934,7 +934,7 @@ fn test_foo1() {}\n                     Runnable {\n                         nav: NavigationTarget {\n                             file_id: FileId(\n-                                1,\n+                                0,\n                             ),\n                             full_range: 1..72,\n                             focus_range: Some("}, {"sha": "eaa4e163ea2bbf4c0233a43adfc0071aaacbb183", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09348b247465864c6462a39055803bcbb0156cfe/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=09348b247465864c6462a39055803bcbb0156cfe", "patch": "@@ -462,12 +462,12 @@ macro_rules! noop {\n fn test_extern_crate() {\n     check_highlighting(\n         r#\"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:std,alloc\n         extern crate std;\n         extern crate alloc as abc;\n-        //- /std/lib.rs\n+        //- /std/lib.rs crate:std\n         pub struct S;\n-        //- /alloc/lib.rs\n+        //- /alloc/lib.rs crate:alloc\n         pub struct A\n         \"#,\n         expect_file![\"./test_data/highlight_extern_crate.html\"],"}]}