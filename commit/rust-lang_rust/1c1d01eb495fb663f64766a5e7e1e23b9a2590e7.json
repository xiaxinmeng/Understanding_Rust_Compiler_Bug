{"sha": "1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "node_id": "C_kwDOAAsO6NoAKDFjMWQwMWViNDk1ZmI2NjNmNjQ3NjZhNWU3ZTFlMjNiOWEyNTkwZTc", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-04-02T02:12:17Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-04-05T15:42:44Z"}, "message": "More nll revisions", "tree": {"sha": "cb3ca5e7f17ded8fffccfdeea3707d86d1f51281", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb3ca5e7f17ded8fffccfdeea3707d86d1f51281"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "html_url": "https://github.com/rust-lang/rust/commit/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72e3e0e6f5fb72d5f947e07ef89455d71a6ff3ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/72e3e0e6f5fb72d5f947e07ef89455d71a6ff3ff", "html_url": "https://github.com/rust-lang/rust/commit/72e3e0e6f5fb72d5f947e07ef89455d71a6ff3ff"}], "stats": {"total": 603, "additions": 380, "deletions": 223}, "files": [{"sha": "c8ace0848719ba737332b04bcb98ba95c21ee503", "filename": "src/test/ui/variance/variance-associated-types2.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.base.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-associated-types2.rs:13:42\n+  --> $DIR/variance-associated-types2.rs:17:42\n    |\n LL |     let _: Box<dyn Foo<Bar = &'a u32>> = make();\n    |                                          ^^^^^^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Foo<Bar = &'a u32>`\n               found trait object `dyn Foo<Bar = &'static u32>`\n note: the lifetime `'a` as defined here...\n-  --> $DIR/variance-associated-types2.rs:12:9\n+  --> $DIR/variance-associated-types2.rs:16:9\n    |\n LL | fn take<'a>(_: &'a u32) {\n    |         ^^", "previous_filename": "src/test/ui/variance/variance-associated-types2.stderr"}, {"sha": "b74c400969237f570c1d9c95662af321f2284856", "filename": "src/test/ui/variance/variance-associated-types2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.nll.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-associated-types2.rs:13:12\n+  --> $DIR/variance-associated-types2.rs:17:12\n    |\n LL | fn take<'a>(_: &'a u32) {\n    |         -- lifetime `'a` defined here"}, {"sha": "e3c8e6d7ca242bd6ca9b0ae96bf1d2d93a5c949e", "filename": "src/test/ui/variance/variance-associated-types2.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-types2.rs?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,6 +1,10 @@\n // Test that dyn Foo<Bar = T> is invariant with respect to T.\n // Failure to enforce invariance here can be weaponized, see #71550 for details.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo {\n     type Bar;\n }\n@@ -11,7 +15,8 @@ fn make() -> Box<dyn Foo<Bar = &'static u32>> {\n \n fn take<'a>(_: &'a u32) {\n     let _: Box<dyn Foo<Bar = &'a u32>> = make();\n-    //~^ ERROR mismatched types [E0308]\n+    //[base]~^ ERROR mismatched types [E0308]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "5b78f4252b3ddc914ef46ec5714e050cdc0d7c60", "filename": "src/test/ui/variance/variance-btree-invariant-types.base.stderr", "status": "renamed", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.base.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,238 +1,238 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:4:5\n+  --> $DIR/variance-btree-invariant-types.rs:8:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::IterMut<'_, &'new (), _>`\n               found struct `std::collections::btree_map::IterMut<'_, &'static (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:3:21\n+  --> $DIR/variance-btree-invariant-types.rs:7:21\n    |\n LL | fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &'new (), ()> {\n    |                     ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:7:5\n+  --> $DIR/variance-btree-invariant-types.rs:13:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::IterMut<'_, _, &'new ()>`\n               found struct `std::collections::btree_map::IterMut<'_, _, &'static ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:6:21\n+  --> $DIR/variance-btree-invariant-types.rs:12:21\n    |\n LL | fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (), &'new ()> {\n    |                     ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:10:5\n+  --> $DIR/variance-btree-invariant-types.rs:18:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::IterMut<'_, &'static (), _>`\n               found struct `std::collections::btree_map::IterMut<'_, &'new (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:9:24\n+  --> $DIR/variance-btree-invariant-types.rs:17:24\n    |\n LL | fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &'static (), ()> {\n    |                        ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:13:5\n+  --> $DIR/variance-btree-invariant-types.rs:23:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::IterMut<'_, _, &'static ()>`\n               found struct `std::collections::btree_map::IterMut<'_, _, &'new ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:12:24\n+  --> $DIR/variance-btree-invariant-types.rs:22:24\n    |\n LL | fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (), &'static ()> {\n    |                        ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:17:5\n+  --> $DIR/variance-btree-invariant-types.rs:29:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `RangeMut<'_, &'new (), _>`\n               found struct `RangeMut<'_, &'static (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:16:22\n+  --> $DIR/variance-btree-invariant-types.rs:28:22\n    |\n LL | fn range_cov_key<'a, 'new>(v: RangeMut<'a, &'static (), ()>) -> RangeMut<'a, &'new (), ()> {\n    |                      ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:20:5\n+  --> $DIR/variance-btree-invariant-types.rs:34:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `RangeMut<'_, _, &'new ()>`\n               found struct `RangeMut<'_, _, &'static ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:19:22\n+  --> $DIR/variance-btree-invariant-types.rs:33:22\n    |\n LL | fn range_cov_val<'a, 'new>(v: RangeMut<'a, (), &'static ()>) -> RangeMut<'a, (), &'new ()> {\n    |                      ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:23:5\n+  --> $DIR/variance-btree-invariant-types.rs:39:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `RangeMut<'_, &'static (), _>`\n               found struct `RangeMut<'_, &'new (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:22:25\n+  --> $DIR/variance-btree-invariant-types.rs:38:25\n    |\n LL | fn range_contra_key<'a, 'new>(v: RangeMut<'a, &'new (), ()>) -> RangeMut<'a, &'static (), ()> {\n    |                         ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:26:5\n+  --> $DIR/variance-btree-invariant-types.rs:44:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `RangeMut<'_, _, &'static ()>`\n               found struct `RangeMut<'_, _, &'new ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:25:25\n+  --> $DIR/variance-btree-invariant-types.rs:43:25\n    |\n LL | fn range_contra_val<'a, 'new>(v: RangeMut<'a, (), &'new ()>) -> RangeMut<'a, (), &'static ()> {\n    |                         ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:31:5\n+  --> $DIR/variance-btree-invariant-types.rs:51:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::OccupiedEntry<'_, &'new (), _>`\n               found struct `std::collections::btree_map::OccupiedEntry<'_, &'static (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:29:20\n+  --> $DIR/variance-btree-invariant-types.rs:49:20\n    |\n LL | fn occ_cov_key<'a, 'new>(v: OccupiedEntry<'a, &'static (), ()>)\n    |                    ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:35:5\n+  --> $DIR/variance-btree-invariant-types.rs:57:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::OccupiedEntry<'_, _, &'new ()>`\n               found struct `std::collections::btree_map::OccupiedEntry<'_, _, &'static ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:33:20\n+  --> $DIR/variance-btree-invariant-types.rs:55:20\n    |\n LL | fn occ_cov_val<'a, 'new>(v: OccupiedEntry<'a, (), &'static ()>)\n    |                    ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:39:5\n+  --> $DIR/variance-btree-invariant-types.rs:63:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::OccupiedEntry<'_, &'static (), _>`\n               found struct `std::collections::btree_map::OccupiedEntry<'_, &'new (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:37:23\n+  --> $DIR/variance-btree-invariant-types.rs:61:23\n    |\n LL | fn occ_contra_key<'a, 'new>(v: OccupiedEntry<'a, &'new (), ()>)\n    |                       ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:43:5\n+  --> $DIR/variance-btree-invariant-types.rs:69:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::OccupiedEntry<'_, _, &'static ()>`\n               found struct `std::collections::btree_map::OccupiedEntry<'_, _, &'new ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:41:23\n+  --> $DIR/variance-btree-invariant-types.rs:67:23\n    |\n LL | fn occ_contra_val<'a, 'new>(v: OccupiedEntry<'a, (), &'new ()>)\n    |                       ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:48:5\n+  --> $DIR/variance-btree-invariant-types.rs:76:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::VacantEntry<'_, &'new (), _>`\n               found struct `std::collections::btree_map::VacantEntry<'_, &'static (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:46:20\n+  --> $DIR/variance-btree-invariant-types.rs:74:20\n    |\n LL | fn vac_cov_key<'a, 'new>(v: VacantEntry<'a, &'static (), ()>)\n    |                    ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:52:5\n+  --> $DIR/variance-btree-invariant-types.rs:82:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::VacantEntry<'_, _, &'new ()>`\n               found struct `std::collections::btree_map::VacantEntry<'_, _, &'static ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:50:20\n+  --> $DIR/variance-btree-invariant-types.rs:80:20\n    |\n LL | fn vac_cov_val<'a, 'new>(v: VacantEntry<'a, (), &'static ()>)\n    |                    ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:56:5\n+  --> $DIR/variance-btree-invariant-types.rs:88:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::VacantEntry<'_, &'static (), _>`\n               found struct `std::collections::btree_map::VacantEntry<'_, &'new (), _>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:54:23\n+  --> $DIR/variance-btree-invariant-types.rs:86:23\n    |\n LL | fn vac_contra_key<'a, 'new>(v: VacantEntry<'a, &'new (), ()>)\n    |                       ^^^^\n    = note: ...does not necessarily outlive the static lifetime\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-btree-invariant-types.rs:60:5\n+  --> $DIR/variance-btree-invariant-types.rs:94:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `std::collections::btree_map::VacantEntry<'_, _, &'static ()>`\n               found struct `std::collections::btree_map::VacantEntry<'_, _, &'new ()>`\n note: the lifetime `'new` as defined here...\n-  --> $DIR/variance-btree-invariant-types.rs:58:23\n+  --> $DIR/variance-btree-invariant-types.rs:92:23\n    |\n LL | fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)\n    |                       ^^^^", "previous_filename": "src/test/ui/variance/variance-btree-invariant-types.stderr"}, {"sha": "f24c2a8f7cdc57ca88ac08593ead02200801a790", "filename": "src/test/ui/variance/variance-btree-invariant-types.nll.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:4:5\n+  --> $DIR/variance-btree-invariant-types.rs:8:5\n    |\n LL | fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &'new (), ()> {\n    |                     ---- lifetime `'new` defined here\n@@ -11,7 +11,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:7:5\n+  --> $DIR/variance-btree-invariant-types.rs:13:5\n    |\n LL | fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (), &'new ()> {\n    |                     ---- lifetime `'new` defined here\n@@ -23,7 +23,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:10:5\n+  --> $DIR/variance-btree-invariant-types.rs:18:5\n    |\n LL | fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &'static (), ()> {\n    |                        ---- lifetime `'new` defined here\n@@ -35,7 +35,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:13:5\n+  --> $DIR/variance-btree-invariant-types.rs:23:5\n    |\n LL | fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (), &'static ()> {\n    |                        ---- lifetime `'new` defined here\n@@ -47,7 +47,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:17:5\n+  --> $DIR/variance-btree-invariant-types.rs:29:5\n    |\n LL | fn range_cov_key<'a, 'new>(v: RangeMut<'a, &'static (), ()>) -> RangeMut<'a, &'new (), ()> {\n    |                      ---- lifetime `'new` defined here\n@@ -59,7 +59,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:20:5\n+  --> $DIR/variance-btree-invariant-types.rs:34:5\n    |\n LL | fn range_cov_val<'a, 'new>(v: RangeMut<'a, (), &'static ()>) -> RangeMut<'a, (), &'new ()> {\n    |                      ---- lifetime `'new` defined here\n@@ -71,7 +71,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:23:5\n+  --> $DIR/variance-btree-invariant-types.rs:39:5\n    |\n LL | fn range_contra_key<'a, 'new>(v: RangeMut<'a, &'new (), ()>) -> RangeMut<'a, &'static (), ()> {\n    |                         ---- lifetime `'new` defined here\n@@ -83,7 +83,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:26:5\n+  --> $DIR/variance-btree-invariant-types.rs:44:5\n    |\n LL | fn range_contra_val<'a, 'new>(v: RangeMut<'a, (), &'new ()>) -> RangeMut<'a, (), &'static ()> {\n    |                         ---- lifetime `'new` defined here\n@@ -95,7 +95,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:31:5\n+  --> $DIR/variance-btree-invariant-types.rs:51:5\n    |\n LL | fn occ_cov_key<'a, 'new>(v: OccupiedEntry<'a, &'static (), ()>)\n    |                    ---- lifetime `'new` defined here\n@@ -108,7 +108,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:35:5\n+  --> $DIR/variance-btree-invariant-types.rs:57:5\n    |\n LL | fn occ_cov_val<'a, 'new>(v: OccupiedEntry<'a, (), &'static ()>)\n    |                    ---- lifetime `'new` defined here\n@@ -121,7 +121,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:39:5\n+  --> $DIR/variance-btree-invariant-types.rs:63:5\n    |\n LL | fn occ_contra_key<'a, 'new>(v: OccupiedEntry<'a, &'new (), ()>)\n    |                       ---- lifetime `'new` defined here\n@@ -134,7 +134,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:43:5\n+  --> $DIR/variance-btree-invariant-types.rs:69:5\n    |\n LL | fn occ_contra_val<'a, 'new>(v: OccupiedEntry<'a, (), &'new ()>)\n    |                       ---- lifetime `'new` defined here\n@@ -147,7 +147,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:48:5\n+  --> $DIR/variance-btree-invariant-types.rs:76:5\n    |\n LL | fn vac_cov_key<'a, 'new>(v: VacantEntry<'a, &'static (), ()>)\n    |                    ---- lifetime `'new` defined here\n@@ -160,7 +160,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:52:5\n+  --> $DIR/variance-btree-invariant-types.rs:82:5\n    |\n LL | fn vac_cov_val<'a, 'new>(v: VacantEntry<'a, (), &'static ()>)\n    |                    ---- lifetime `'new` defined here\n@@ -173,7 +173,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:56:5\n+  --> $DIR/variance-btree-invariant-types.rs:88:5\n    |\n LL | fn vac_contra_key<'a, 'new>(v: VacantEntry<'a, &'new (), ()>)\n    |                       ---- lifetime `'new` defined here\n@@ -186,7 +186,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-btree-invariant-types.rs:60:5\n+  --> $DIR/variance-btree-invariant-types.rs:94:5\n    |\n LL | fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)\n    |                       ---- lifetime `'new` defined here"}, {"sha": "7ddf6b294a5a19221c1c6f8d04f4b717ec677316", "filename": "src/test/ui/variance/variance-btree-invariant-types.rs", "status": "modified", "additions": 52, "deletions": 16, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.rs?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,63 +1,99 @@\n use std::collections::btree_map::{IterMut, OccupiedEntry, RangeMut, VacantEntry};\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &'new (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (), &'new ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &'static (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (), &'static ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n \n fn range_cov_key<'a, 'new>(v: RangeMut<'a, &'static (), ()>) -> RangeMut<'a, &'new (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn range_cov_val<'a, 'new>(v: RangeMut<'a, (), &'static ()>) -> RangeMut<'a, (), &'new ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn range_contra_key<'a, 'new>(v: RangeMut<'a, &'new (), ()>) -> RangeMut<'a, &'static (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn range_contra_val<'a, 'new>(v: RangeMut<'a, (), &'new ()>) -> RangeMut<'a, (), &'static ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n \n fn occ_cov_key<'a, 'new>(v: OccupiedEntry<'a, &'static (), ()>)\n                          -> OccupiedEntry<'a, &'new (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn occ_cov_val<'a, 'new>(v: OccupiedEntry<'a, (), &'static ()>)\n                          -> OccupiedEntry<'a, (), &'new ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn occ_contra_key<'a, 'new>(v: OccupiedEntry<'a, &'new (), ()>)\n                             -> OccupiedEntry<'a, &'static (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn occ_contra_val<'a, 'new>(v: OccupiedEntry<'a, (), &'new ()>)\n                             -> OccupiedEntry<'a, (), &'static ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n \n fn vac_cov_key<'a, 'new>(v: VacantEntry<'a, &'static (), ()>)\n                          -> VacantEntry<'a, &'new (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn vac_cov_val<'a, 'new>(v: VacantEntry<'a, (), &'static ()>)\n                          -> VacantEntry<'a, (), &'new ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn vac_contra_key<'a, 'new>(v: VacantEntry<'a, &'new (), ()>)\n                             -> VacantEntry<'a, &'static (), ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)\n                             -> VacantEntry<'a, (), &'static ()> {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ lifetime may not live long enough\n }\n \n "}, {"sha": "e3180b6d984765246735070b4a71b4fb7a58e05b", "filename": "src/test/ui/variance/variance-cell-is-invariant.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.base.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/variance-cell-is-invariant.rs:14:25\n+  --> $DIR/variance-cell-is-invariant.rs:18:25\n    |\n LL | fn use_<'short,'long>(c: Foo<'short>,\n    |                          ----------- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/variance/variance-cell-is-invariant.stderr"}, {"sha": "82ef94a19b23f50885fd9cbe14c857a1ff876f2d", "filename": "src/test/ui/variance/variance-cell-is-invariant.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-cell-is-invariant.rs:14:12\n+  --> $DIR/variance-cell-is-invariant.rs:18:12\n    |\n LL | fn use_<'short,'long>(c: Foo<'short>,\n    |         ------ ----- lifetime `'long` defined here"}, {"sha": "b8b73147d0eea58d5fa06e70b363acbbf75d01ae", "filename": "src/test/ui/variance/variance-cell-is-invariant.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.rs?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,6 +1,10 @@\n // Test that Cell is considered invariant with respect to its\n // type.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n use std::cell::Cell;\n \n struct Foo<'a> {\n@@ -11,7 +15,9 @@ fn use_<'short,'long>(c: Foo<'short>,\n                       s: &'short isize,\n                       l: &'long isize,\n                       _where:Option<&'short &'long ()>) {\n-    let _: Foo<'long> = c; //~ ERROR E0623\n+    let _: Foo<'long> = c;\n+    //[base]~^ ERROR E0623\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "19b8b9d5aa05cf586329f275587a90b170bfc6ea", "filename": "src/test/ui/variance/variance-contravariant-arg-object.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.base.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-arg-object.rs:14:5\n+  --> $DIR/variance-contravariant-arg-object.rs:18:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'min i32>`\n               found trait object `dyn Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-arg-object.rs:10:21\n+  --> $DIR/variance-contravariant-arg-object.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-arg-object.rs:10:27\n+  --> $DIR/variance-contravariant-arg-object.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-arg-object.rs:22:5\n+  --> $DIR/variance-contravariant-arg-object.rs:28:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'max i32>`\n               found trait object `dyn Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-arg-object.rs:17:21\n+  --> $DIR/variance-contravariant-arg-object.rs:23:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-arg-object.rs:17:27\n+  --> $DIR/variance-contravariant-arg-object.rs:23:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-contravariant-arg-object.stderr"}, {"sha": "4071a41703e2820f97a0f1ba0d3af33adbd2980c", "filename": "src/test/ui/variance/variance-contravariant-arg-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-arg-object.rs:14:5\n+  --> $DIR/variance-contravariant-arg-object.rs:18:5\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     v\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-arg-object.rs:22:5\n+  --> $DIR/variance-contravariant-arg-object.rs:28:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "dab42c35218bf6168392d888261404620eb01e9f", "filename": "src/test/ui/variance/variance-contravariant-arg-object.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.rs?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -3,6 +3,10 @@\n // Test that even when `T` is only used in contravariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> : 'static {\n     fn get(&self, t: T);\n }\n@@ -11,15 +15,19 @@ fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n                                 -> Box<dyn Get<&'min i32>>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n                                    -> Box<dyn Get<&'max i32>>\n     where 'max : 'min\n {\n     // Previously OK:\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "56cf84590107c60a876fc76146ae639002369d8b", "filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.base.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:13:5\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:17:5\n    |\n LL |     impls_get::<G,&'min i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:10:21\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:10:27\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:21:5\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:27:5\n    |\n LL |     impls_get::<G,&'max i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:16:21\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:22:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:16:27\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:22:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.stderr"}, {"sha": "6ca8f5ed4cce6581f2863e93628fa651fe8d9f80", "filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:13:5\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:17:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<G,&'min i32>()\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:21:5\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:27:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "11513d5411cfba8f8d269fe9ae16239725d33356", "filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.rs?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -3,22 +3,30 @@\n // Test that even when `T` is only used in contravariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> {\n     fn get(&self, t: T);\n }\n \n fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'max i32>\n {\n-    impls_get::<G,&'min i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'min i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'min i32>\n {\n     // Previously OK, but now an error because traits are invariant:\n \n-    impls_get::<G,&'max i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'max i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G,T>() where G : Get<T> { }"}, {"sha": "2ccab2ee5f089df76f129514d52b62b0e078ea33", "filename": "src/test/ui/variance/variance-contravariant-self-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.base.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-self-trait-match.rs:13:5\n+  --> $DIR/variance-contravariant-self-trait-match.rs:17:5\n    |\n LL |     impls_get::<&'min G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'min G as Get>`\n               found type `<&'max G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-self-trait-match.rs:10:21\n+  --> $DIR/variance-contravariant-self-trait-match.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-self-trait-match.rs:10:27\n+  --> $DIR/variance-contravariant-self-trait-match.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-self-trait-match.rs:22:5\n+  --> $DIR/variance-contravariant-self-trait-match.rs:28:5\n    |\n LL |     impls_get::<&'max G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'max G as Get>`\n               found type `<&'min G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-contravariant-self-trait-match.rs:16:21\n+  --> $DIR/variance-contravariant-self-trait-match.rs:22:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-contravariant-self-trait-match.rs:16:27\n+  --> $DIR/variance-contravariant-self-trait-match.rs:22:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-contravariant-self-trait-match.stderr"}, {"sha": "d2c549b1f715daa85c5c18657f188f32597836a7", "filename": "src/test/ui/variance/variance-contravariant-self-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-self-trait-match.rs:13:5\n+  --> $DIR/variance-contravariant-self-trait-match.rs:17:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<&'min G>();\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-contravariant-self-trait-match.rs:22:5\n+  --> $DIR/variance-contravariant-self-trait-match.rs:28:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "f8d7c68fafe73a13d8418940b59abfce4c7d3807", "filename": "src/test/ui/variance/variance-contravariant-self-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.rs?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -3,14 +3,20 @@\n // Test that even when `Self` is only used in contravariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get {\n     fn get(&self);\n }\n \n fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : 'max, &'max G : Get\n {\n-    impls_get::<&'min G>(); //~ ERROR mismatched types\n+    impls_get::<&'min G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n@@ -19,7 +25,9 @@ fn get_max_from_min<'min, 'max, G>()\n     // Previously OK, but now error because traits are invariant with\n     // respect to all inputs.\n \n-    impls_get::<&'max G>(); //~ ERROR mismatched types\n+    impls_get::<&'max G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G>() where G : Get { }"}, {"sha": "3a97875fe0ec07433301a0256c40e69bc8bf0d31", "filename": "src/test/ui/variance/variance-covariant-arg-object.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.base.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-arg-object.rs:11:5\n+  --> $DIR/variance-covariant-arg-object.rs:19:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'min i32>`\n               found trait object `dyn Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-arg-object.rs:7:21\n+  --> $DIR/variance-covariant-arg-object.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-arg-object.rs:7:27\n+  --> $DIR/variance-covariant-arg-object.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-arg-object.rs:18:5\n+  --> $DIR/variance-covariant-arg-object.rs:28:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'max i32>`\n               found trait object `dyn Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-arg-object.rs:14:21\n+  --> $DIR/variance-covariant-arg-object.rs:24:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-arg-object.rs:14:27\n+  --> $DIR/variance-covariant-arg-object.rs:24:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-invariant-arg-object.stderr"}, {"sha": "1b2ec61825f8f75001f799c946996464bd1d3c13", "filename": "src/test/ui/variance/variance-covariant-arg-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-arg-object.rs:15:5\n+  --> $DIR/variance-covariant-arg-object.rs:19:5\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     v\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-arg-object.rs:22:5\n+  --> $DIR/variance-covariant-arg-object.rs:28:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "20f74a3987e126c3ae36c22f66792f817367f532", "filename": "src/test/ui/variance/variance-covariant-arg-object.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.rs?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -3,6 +3,10 @@\n // Test that even when `T` is only used in covariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> : 'static {\n     fn get(&self) -> T;\n }\n@@ -12,14 +16,18 @@ fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n     where 'max : 'min\n {\n     // Previously OK, now an error as traits are invariant.\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n                                    -> Box<dyn Get<&'max i32>>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "1749a871230cffca3e49b01e8f9883f3815d6b93", "filename": "src/test/ui/variance/variance-covariant-arg-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.base.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-arg-trait-match.rs:10:5\n+  --> $DIR/variance-covariant-arg-trait-match.rs:18:5\n    |\n LL |     impls_get::<G,&'min i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-arg-trait-match.rs:7:21\n+  --> $DIR/variance-covariant-arg-trait-match.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-arg-trait-match.rs:7:27\n+  --> $DIR/variance-covariant-arg-trait-match.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-arg-trait-match.rs:16:5\n+  --> $DIR/variance-covariant-arg-trait-match.rs:26:5\n    |\n LL |     impls_get::<G,&'max i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-arg-trait-match.rs:13:21\n+  --> $DIR/variance-covariant-arg-trait-match.rs:23:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-arg-trait-match.rs:13:27\n+  --> $DIR/variance-covariant-arg-trait-match.rs:23:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-invariant-arg-trait-match.stderr"}, {"sha": "870af48b3e92ac8961af73950d3ffb5b84ac4870", "filename": "src/test/ui/variance/variance-covariant-arg-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-arg-trait-match.rs:14:5\n+  --> $DIR/variance-covariant-arg-trait-match.rs:18:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<G,&'min i32>()\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-arg-trait-match.rs:20:5\n+  --> $DIR/variance-covariant-arg-trait-match.rs:26:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "d3d66d3fc4ba13820d203628bcacd6ddf23f7102", "filename": "src/test/ui/variance/variance-covariant-arg-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.rs?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -3,6 +3,10 @@\n // Test that even when `T` is only used in covariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> {\n     fn get(&self) -> T;\n }\n@@ -11,13 +15,17 @@ fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'max i32>\n {\n     // Previously OK, now an error as traits are invariant.\n-    impls_get::<G,&'min i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'min i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'min i32>\n {\n-    impls_get::<G,&'max i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'max i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G,T>() where G : Get<T> { }"}, {"sha": "94afc010e2134d9fe1440726162866bbc5b361bb", "filename": "src/test/ui/variance/variance-covariant-self-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.base.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-self-trait-match.rs:10:5\n+  --> $DIR/variance-covariant-self-trait-match.rs:18:5\n    |\n LL |     impls_get::<&'min G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'min G as Get>`\n               found type `<&'max G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-self-trait-match.rs:7:21\n+  --> $DIR/variance-covariant-self-trait-match.rs:14:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-self-trait-match.rs:7:27\n+  --> $DIR/variance-covariant-self-trait-match.rs:14:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-self-trait-match.rs:16:5\n+  --> $DIR/variance-covariant-self-trait-match.rs:26:5\n    |\n LL |     impls_get::<&'max G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'max G as Get>`\n               found type `<&'min G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-invariant-self-trait-match.rs:13:21\n+  --> $DIR/variance-covariant-self-trait-match.rs:23:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-invariant-self-trait-match.rs:13:27\n+  --> $DIR/variance-covariant-self-trait-match.rs:23:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-invariant-self-trait-match.stderr"}, {"sha": "14da2d2a552dbdce957cd08a21a5ca68f09d0d60", "filename": "src/test/ui/variance/variance-covariant-self-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-self-trait-match.rs:14:5\n+  --> $DIR/variance-covariant-self-trait-match.rs:18:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<&'min G>();\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-covariant-self-trait-match.rs:20:5\n+  --> $DIR/variance-covariant-self-trait-match.rs:26:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "ece450173ca8d553750608cdf4171124db494ec8", "filename": "src/test/ui/variance/variance-covariant-self-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.rs?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -3,6 +3,10 @@\n // Test that even when `Self` is only used in covariant position, it\n // is treated as invariant.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get {\n     fn get() -> Self;\n }\n@@ -11,13 +15,17 @@ fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : 'max, &'max G : Get\n {\n     // Previously OK, now an error as traits are invariant.\n-    impls_get::<&'min G>(); //~ ERROR mismatched types\n+    impls_get::<&'min G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, G : 'max, &'min G : Get\n {\n-    impls_get::<&'max G>(); //~ ERROR mismatched types\n+    impls_get::<&'max G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G>() where G : Get { }"}, {"sha": "ec9271e902fed39a490aaba39673b230a5cbc531", "filename": "src/test/ui/variance/variance-invariant-arg-object.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.base.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-arg-object.rs:15:5\n+  --> $DIR/variance-invariant-arg-object.rs:15:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'min i32>`\n               found trait object `dyn Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-arg-object.rs:10:21\n+  --> $DIR/variance-invariant-arg-object.rs:11:21\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-arg-object.rs:10:27\n+  --> $DIR/variance-invariant-arg-object.rs:11:27\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-arg-object.rs:22:5\n+  --> $DIR/variance-invariant-arg-object.rs:24:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected trait object `dyn Get<&'max i32>`\n               found trait object `dyn Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-arg-object.rs:18:21\n+  --> $DIR/variance-invariant-arg-object.rs:20:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-arg-object.rs:18:27\n+  --> $DIR/variance-invariant-arg-object.rs:20:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-covariant-arg-object.stderr"}, {"sha": "47364f426566346eac6e67feb313e83da291616d", "filename": "src/test/ui/variance/variance-invariant-arg-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-arg-object.rs:11:5\n+  --> $DIR/variance-invariant-arg-object.rs:15:5\n    |\n LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     v\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-arg-object.rs:18:5\n+  --> $DIR/variance-invariant-arg-object.rs:24:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "cc8820fbac69e97b79edda9118611cb8e36a638f", "filename": "src/test/ui/variance/variance-invariant-arg-object.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.rs?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,9 @@\n #![allow(dead_code)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> : 'static {\n     fn get(&self, t: T) -> T;\n }\n@@ -8,14 +12,18 @@ fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n                                 -> Box<dyn Get<&'min i32>>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n                                    -> Box<dyn Get<&'max i32>>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "fe284682153992c19a35c7f2f82f52e288e62877", "filename": "src/test/ui/variance/variance-invariant-arg-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.base.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-arg-trait-match.rs:14:5\n+  --> $DIR/variance-invariant-arg-trait-match.rs:14:5\n    |\n LL |     impls_get::<G,&'min i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-arg-trait-match.rs:10:21\n+  --> $DIR/variance-invariant-arg-trait-match.rs:11:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-arg-trait-match.rs:10:27\n+  --> $DIR/variance-invariant-arg-trait-match.rs:11:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-arg-trait-match.rs:20:5\n+  --> $DIR/variance-invariant-arg-trait-match.rs:22:5\n    |\n LL |     impls_get::<G,&'max i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-arg-trait-match.rs:17:21\n+  --> $DIR/variance-invariant-arg-trait-match.rs:19:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-arg-trait-match.rs:17:27\n+  --> $DIR/variance-invariant-arg-trait-match.rs:19:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-covariant-arg-trait-match.stderr"}, {"sha": "74d2745cbbea8916179030ba2b67e77d57a0f311", "filename": "src/test/ui/variance/variance-invariant-arg-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-arg-trait-match.rs:10:5\n+  --> $DIR/variance-invariant-arg-trait-match.rs:14:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<G,&'min i32>()\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-arg-trait-match.rs:16:5\n+  --> $DIR/variance-invariant-arg-trait-match.rs:22:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "498dd574bb38148374711d60a846440372fdac2e", "filename": "src/test/ui/variance/variance-invariant-arg-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.rs?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,19 +1,27 @@\n #![allow(dead_code)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get<T> {\n     fn get(&self, t: T) -> T;\n }\n \n fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'max i32>\n {\n-    impls_get::<G,&'min i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'min i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'min i32>\n {\n-    impls_get::<G,&'max i32>() //~ ERROR mismatched types\n+    impls_get::<G,&'max i32>()\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G,T>() where G : Get<T> { }"}, {"sha": "a2589f0ceee9b0b99ae1c9f5c2d139d8857bb7fa", "filename": "src/test/ui/variance/variance-invariant-self-trait-match.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.base.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-self-trait-match.rs:14:5\n+  --> $DIR/variance-invariant-self-trait-match.rs:14:5\n    |\n LL |     impls_get::<&'min G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'min G as Get>`\n               found type `<&'max G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-self-trait-match.rs:10:21\n+  --> $DIR/variance-invariant-self-trait-match.rs:11:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-self-trait-match.rs:10:27\n+  --> $DIR/variance-invariant-self-trait-match.rs:11:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-self-trait-match.rs:20:5\n+  --> $DIR/variance-invariant-self-trait-match.rs:22:5\n    |\n LL |     impls_get::<&'max G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `<&'max G as Get>`\n               found type `<&'min G as Get>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-covariant-self-trait-match.rs:17:21\n+  --> $DIR/variance-invariant-self-trait-match.rs:19:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-covariant-self-trait-match.rs:17:27\n+  --> $DIR/variance-invariant-self-trait-match.rs:19:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^", "previous_filename": "src/test/ui/variance/variance-covariant-self-trait-match.stderr"}, {"sha": "9d16e89450d786ff7189e40e5f443ad9a8ded6c9", "filename": "src/test/ui/variance/variance-invariant-self-trait-match.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-self-trait-match.rs:10:5\n+  --> $DIR/variance-invariant-self-trait-match.rs:14:5\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here\n@@ -12,7 +12,7 @@ LL |     impls_get::<&'min G>();\n    = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-invariant-self-trait-match.rs:16:5\n+  --> $DIR/variance-invariant-self-trait-match.rs:22:5\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ----  ---- lifetime `'max` defined here"}, {"sha": "0f3176b14b44d1f3fae2cdf1ca4d84a859bbafef", "filename": "src/test/ui/variance/variance-invariant-self-trait-match.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.rs?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,19 +1,27 @@\n #![allow(dead_code)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Get {\n     fn get(&self) -> Self;\n }\n \n fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, &'max G : Get, G : 'max\n {\n-    impls_get::<&'min G>(); //~ ERROR mismatched types\n+    impls_get::<&'min G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, &'min G : Get, G : 'min\n {\n-    impls_get::<&'max G>(); //~ ERROR mismatched types\n+    impls_get::<&'max G>();\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn impls_get<G>() where G : Get { }"}, {"sha": "8872620e38aef5eabca37363bce90ba13446c45c", "filename": "src/test/ui/variance/variance-trait-matching.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.base.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `get`\n-  --> $DIR/variance-trait-matching.rs:24:5\n+  --> $DIR/variance-trait-matching.rs:28:5\n    |\n LL | fn get<'a, G>(get: &G) -> i32\n    |                    -- help: add explicit lifetime `'a` to the type of `get`: `&'a G`", "previous_filename": "src/test/ui/variance/variance-trait-matching.stderr"}, {"sha": "52c5eed3167cd31aa46eb06f5bdec680700e9b4d", "filename": "src/test/ui/variance/variance-trait-matching.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.nll.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `get`\n-  --> $DIR/variance-trait-matching.rs:24:5\n+  --> $DIR/variance-trait-matching.rs:28:5\n    |\n LL | fn get<'a, G>(get: &G) -> i32\n    |                    -- help: add explicit lifetime `'a` to the type of `get`: `&'a G`"}, {"sha": "993db93533e2746eefc83b41475b8b92703e6c27", "filename": "src/test/ui/variance/variance-trait-matching.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.rs?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,9 @@\n #![allow(dead_code)]\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Get<T> is covariant in T\n trait Get<T> {\n     fn get(&self) -> T;"}, {"sha": "a354aa52b5c7e36786a31d1f45474f71f7226e60", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.base.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,18 +1,18 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-use-contravariant-struct-1.rs:12:5\n+  --> $DIR/variance-use-contravariant-struct-1.rs:14:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `SomeStruct<&'min ()>`\n               found struct `SomeStruct<&'max ()>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-use-contravariant-struct-1.rs:8:8\n+  --> $DIR/variance-use-contravariant-struct-1.rs:10:8\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-use-contravariant-struct-1.rs:8:13\n+  --> $DIR/variance-use-contravariant-struct-1.rs:10:13\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |             ^^^^", "previous_filename": "src/test/ui/variance/variance-use-contravariant-struct-1.stderr"}, {"sha": "9549a8c08af615cac99b894268b123cb671d9dff", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-use-contravariant-struct-1.rs:12:5\n+  --> $DIR/variance-use-contravariant-struct-1.rs:14:5\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        ---- ---- lifetime `'max` defined here"}, {"sha": "b55f5e76775ef4330c8ea8bec1ef4aaf8e193477", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.rs?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,15 +1,19 @@\n // Test various uses of structs with distint variances to make sure\n // they permit lifetimes to be approximated as expected.\n \n-\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n \n struct SomeStruct<T>(fn(T));\n \n fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n                   -> SomeStruct<&'min ()>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n "}, {"sha": "542d44c27093db4236f67d3bd960dc883a786820", "filename": "src/test/ui/variance/variance-use-covariant-struct-1.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.base.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,18 +1,18 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-use-covariant-struct-1.rs:10:5\n+  --> $DIR/variance-use-covariant-struct-1.rs:14:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `SomeStruct<&'max ()>`\n               found struct `SomeStruct<&'min ()>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-use-covariant-struct-1.rs:6:8\n+  --> $DIR/variance-use-covariant-struct-1.rs:10:8\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n    |        ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-use-covariant-struct-1.rs:6:13\n+  --> $DIR/variance-use-covariant-struct-1.rs:10:13\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n    |             ^^^^", "previous_filename": "src/test/ui/variance/variance-use-covariant-struct-1.stderr"}, {"sha": "2fac827a0fb1f68ea00a52712dac982c989c1e97", "filename": "src/test/ui/variance/variance-use-covariant-struct-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-use-covariant-struct-1.rs:10:5\n+  --> $DIR/variance-use-covariant-struct-1.rs:14:5\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n    |        ---- ---- lifetime `'max` defined here"}, {"sha": "3e3e76d9792c29f88ab2ab06ff5d3134eba934a8", "filename": "src/test/ui/variance/variance-use-covariant-struct-1.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.rs?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,13 +1,19 @@\n // Test that a covariant struct does not permit the lifetime of a\n // reference to be enlarged.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n struct SomeStruct<T>(T);\n \n fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n                   -> SomeStruct<&'max ()>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "02b4e91f781e5cbf579e24e06cedbd4ed4eec8ab", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.base.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-use-invariant-struct-1.rs:12:5\n+  --> $DIR/variance-use-invariant-struct-1.rs:14:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `SomeStruct<&'min ()>`\n               found struct `SomeStruct<&'max ()>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-use-invariant-struct-1.rs:8:8\n+  --> $DIR/variance-use-invariant-struct-1.rs:10:8\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-use-invariant-struct-1.rs:8:13\n+  --> $DIR/variance-use-invariant-struct-1.rs:10:13\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |             ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-use-invariant-struct-1.rs:19:5\n+  --> $DIR/variance-use-invariant-struct-1.rs:23:5\n    |\n LL |     v\n    |     ^ lifetime mismatch\n    |\n    = note: expected struct `SomeStruct<&'max ()>`\n               found struct `SomeStruct<&'min ()>`\n note: the lifetime `'min` as defined here...\n-  --> $DIR/variance-use-invariant-struct-1.rs:15:8\n+  --> $DIR/variance-use-invariant-struct-1.rs:19:8\n    |\n LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n    |        ^^^^\n note: ...does not necessarily outlive the lifetime `'max` as defined here\n-  --> $DIR/variance-use-invariant-struct-1.rs:15:13\n+  --> $DIR/variance-use-invariant-struct-1.rs:19:13\n    |\n LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n    |             ^^^^", "previous_filename": "src/test/ui/variance/variance-use-invariant-struct-1.stderr"}, {"sha": "429919c8de1bca67c08c2e7b0c124b5af26219e0", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/variance-use-invariant-struct-1.rs:12:5\n+  --> $DIR/variance-use-invariant-struct-1.rs:14:5\n    |\n LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n    |        ---- ---- lifetime `'max` defined here\n@@ -15,7 +15,7 @@ LL |     v\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/variance-use-invariant-struct-1.rs:19:5\n+  --> $DIR/variance-use-invariant-struct-1.rs:23:5\n    |\n LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n    |        ---- ---- lifetime `'max` defined here"}, {"sha": "7be03514e01a9bbb20ae3dfb88bb476a7b3a0ba6", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.rs?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,22 +1,28 @@\n // Test various uses of structs with distint variances to make sure\n // they permit lifetimes to be approximated as expected.\n \n-\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n \n struct SomeStruct<T>(*mut T);\n \n fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n                   -> SomeStruct<&'min ()>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n                   -> SomeStruct<&'max ()>\n     where 'max : 'min\n {\n-    v //~ ERROR mismatched types\n+    v\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n "}, {"sha": "186ab2790a3983a887390c1f251f67734ce426c1", "filename": "src/test/ui/wf/wf-static-method.base.stderr", "status": "renamed", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.base.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,131 +1,131 @@\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/wf-static-method.rs:17:9\n+  --> $DIR/wf-static-method.rs:21:9\n    |\n LL |         u\n    |         ^\n    |\n note: ...the reference is valid for the lifetime `'a` as defined here...\n-  --> $DIR/wf-static-method.rs:14:6\n+  --> $DIR/wf-static-method.rs:18:6\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n    |      ^^\n note: ...but the borrowed content is only valid for the lifetime `'b` as defined here\n-  --> $DIR/wf-static-method.rs:14:10\n+  --> $DIR/wf-static-method.rs:18:10\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n    |          ^^\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/wf-static-method.rs:26:18\n+  --> $DIR/wf-static-method.rs:32:18\n    |\n LL |         let me = Self::make_me();\n    |                  ^^^^\n    |\n note: lifetime parameter instantiated with the lifetime `'b` as defined here\n-  --> $DIR/wf-static-method.rs:23:10\n+  --> $DIR/wf-static-method.rs:29:10\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n    |          ^^\n note: but lifetime parameter must outlive the lifetime `'a` as defined here\n-  --> $DIR/wf-static-method.rs:23:6\n+  --> $DIR/wf-static-method.rs:29:6\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n    |      ^^\n \n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/wf-static-method.rs:33:9\n+  --> $DIR/wf-static-method.rs:41:9\n    |\n LL |         u\n    |         ^\n    |\n note: ...the reference is valid for the lifetime `'a` as defined here...\n-  --> $DIR/wf-static-method.rs:31:6\n+  --> $DIR/wf-static-method.rs:39:6\n    |\n LL | impl<'a, 'b> Evil<'a, 'b> {\n    |      ^^\n note: ...but the borrowed content is only valid for the lifetime `'b` as defined here\n-  --> $DIR/wf-static-method.rs:31:10\n+  --> $DIR/wf-static-method.rs:39:10\n    |\n LL | impl<'a, 'b> Evil<'a, 'b> {\n    |          ^^\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n-  --> $DIR/wf-static-method.rs:41:5\n+  --> $DIR/wf-static-method.rs:51:5\n    |\n LL |     <()>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n-  --> $DIR/wf-static-method.rs:40:13\n+  --> $DIR/wf-static-method.rs:50:13\n    |\n LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |             ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:41:23\n+  --> $DIR/wf-static-method.rs:51:23\n    |\n LL |     <()>::static_evil(b)\n    |                       ^\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/wf-static-method.rs:40:9\n+  --> $DIR/wf-static-method.rs:50:9\n    |\n LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |         ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:41:5\n+  --> $DIR/wf-static-method.rs:51:5\n    |\n LL |     <()>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n-  --> $DIR/wf-static-method.rs:45:5\n+  --> $DIR/wf-static-method.rs:57:5\n    |\n LL |     <IndirectEvil>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n-  --> $DIR/wf-static-method.rs:44:22\n+  --> $DIR/wf-static-method.rs:56:22\n    |\n LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                      ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:45:33\n+  --> $DIR/wf-static-method.rs:57:33\n    |\n LL |     <IndirectEvil>::static_evil(b)\n    |                                 ^\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/wf-static-method.rs:44:18\n+  --> $DIR/wf-static-method.rs:56:18\n    |\n LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:45:5\n+  --> $DIR/wf-static-method.rs:57:5\n    |\n LL |     <IndirectEvil>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n-  --> $DIR/wf-static-method.rs:50:5\n+  --> $DIR/wf-static-method.rs:63:5\n    |\n LL |     <Evil>::inherent_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n-  --> $DIR/wf-static-method.rs:49:22\n+  --> $DIR/wf-static-method.rs:62:22\n    |\n LL | fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                      ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:50:27\n+  --> $DIR/wf-static-method.rs:63:27\n    |\n LL |     <Evil>::inherent_evil(b)\n    |                           ^\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/wf-static-method.rs:49:18\n+  --> $DIR/wf-static-method.rs:62:18\n    |\n LL | fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/wf-static-method.rs:50:5\n+  --> $DIR/wf-static-method.rs:63:5\n    |\n LL |     <Evil>::inherent_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/wf/wf-static-method.stderr"}, {"sha": "7556d8e694d5a26ae981bc86956dff4e32719e44", "filename": "src/test/ui/wf/wf-static-method.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:17:9\n+  --> $DIR/wf-static-method.rs:21:9\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n    |      --  -- lifetime `'b` defined here\n@@ -12,7 +12,7 @@ LL |         u\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:26:18\n+  --> $DIR/wf-static-method.rs:32:18\n    |\n LL | impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n    |      --  -- lifetime `'b` defined here\n@@ -25,7 +25,7 @@ LL |         let me = Self::make_me();\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:33:9\n+  --> $DIR/wf-static-method.rs:41:9\n    |\n LL | impl<'a, 'b> Evil<'a, 'b> {\n    |      --  -- lifetime `'b` defined here\n@@ -38,7 +38,7 @@ LL |         u\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:41:5\n+  --> $DIR/wf-static-method.rs:51:5\n    |\n LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |         --  -- lifetime `'b` defined here\n@@ -50,7 +50,7 @@ LL |     <()>::static_evil(b)\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:45:5\n+  --> $DIR/wf-static-method.rs:57:5\n    |\n LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  --  -- lifetime `'b` defined here\n@@ -62,7 +62,7 @@ LL |     <IndirectEvil>::static_evil(b)\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/wf-static-method.rs:50:5\n+  --> $DIR/wf-static-method.rs:63:5\n    |\n LL | fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  --  -- lifetime `'b` defined here"}, {"sha": "83557ce667bf6964bee0f7155d75700c107164af", "filename": "src/test/ui/wf/wf-static-method.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.rs?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -4,6 +4,10 @@\n // static inherent methods isn't quite working - need to\n // fix that before removing the check.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo<'a, 'b, T>: Sized {\n     fn make_me() -> Self { loop {} }\n     fn static_evil(u: &'b u32) -> &'a u32;\n@@ -14,7 +18,9 @@ struct Evil<'a, 'b: 'a>(Option<&'a &'b ()>);\n impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n     fn make_me() -> Self { }\n     fn static_evil(u: &'b u32) -> &'a u32 {\n-        u //~ ERROR E0312\n+        u\n+        //[base]~^ ERROR E0312\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n \n@@ -23,32 +29,40 @@ struct IndirectEvil<'a, 'b: 'a>(Option<&'a &'b ()>);\n impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n     fn make_me() -> Self { IndirectEvil(None) }\n     fn static_evil(u: &'b u32) -> &'a u32 {\n-        let me = Self::make_me(); //~ ERROR lifetime bound not satisfied\n+        let me = Self::make_me();\n+        //[base]~^ ERROR lifetime bound not satisfied\n+        //[nll]~^^ ERROR lifetime may not live long enough\n         loop {} // (`me` could be used for the lifetime transmute).\n     }\n }\n \n impl<'a, 'b> Evil<'a, 'b> {\n     fn inherent_evil(u: &'b u32) -> &'a u32 {\n-        u //~ ERROR E0312\n+        u\n+        //[base]~^ ERROR E0312\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n \n // while static methods don't get to *assume* this, we still\n // *check* that they hold.\n \n fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n-    <()>::static_evil(b) //~ ERROR cannot infer an appropriate lifetime\n+    <()>::static_evil(b)\n+    //[base]~^ ERROR cannot infer an appropriate lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n     <IndirectEvil>::static_evil(b)\n-    //~^ ERROR cannot infer an appropriate lifetime\n+    //[base]~^ ERROR cannot infer an appropriate lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n     <Evil>::inherent_evil(b)\n-    //~^ ERROR cannot infer an appropriate lifetime\n+    //[base]~^ ERROR cannot infer an appropriate lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n "}, {"sha": "c09610cd696828892fe77b282da75a457dab73e1", "filename": "src/test/ui/where-clauses/where-for-self-2.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.base.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Bar` is not general enough\n-  --> $DIR/where-for-self-2.rs:23:5\n+  --> $DIR/where-for-self-2.rs:27:5\n    |\n LL |     foo(&X);\n    |     ^^^ implementation of `Bar` is not general enough", "previous_filename": "src/test/ui/where-clauses/where-for-self-2.stderr"}, {"sha": "92d1b2121a6b254c90a535efdf8cecc269deaeed", "filename": "src/test/ui/where-clauses/where-for-self-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.nll.stderr?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Bar` is not general enough\n-  --> $DIR/where-for-self-2.rs:23:5\n+  --> $DIR/where-for-self-2.rs:27:5\n    |\n LL |     foo(&X);\n    |     ^^^^^^^ implementation of `Bar` is not general enough"}, {"sha": "4e4e0ec912ea1f43f350011d97093c7a16daa58c", "filename": "src/test/ui/where-clauses/where-for-self-2.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1d01eb495fb663f64766a5e7e1e23b9a2590e7/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.rs?ref=1c1d01eb495fb663f64766a5e7e1e23b9a2590e7", "patch": "@@ -3,6 +3,10 @@\n // specific lifetime is not enough to satisfy the `for<'a> ...` constraint, which\n // should require *all* lifetimes.\n \n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n static X: &'static u32 = &42;\n \n trait Bar {"}]}