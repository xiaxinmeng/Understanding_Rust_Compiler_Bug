{"sha": "96de2b0273e828edf45d4b3e6c4dc5c3cf665fd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZGUyYjAyNzNlODI4ZWRmNDVkNGIzZTZjNGRjNWMzY2Y2NjVmZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-11T17:52:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-11T17:52:52Z"}, "message": "auto merge of #6383 : huonw/rust/rustc-expand-then-strip, r=thestinger\n\nThis allows macros to create tests and benchmarks.\r\n\r\nThis is possibly unsound (I've got no idea, but it seemed to work), and being able to programmatically generate benchmarks to compare several implementations of similar algorithms is nice.", "tree": {"sha": "c8003f6d4e5f512d142ae22ae04a6cc9575c05ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8003f6d4e5f512d142ae22ae04a6cc9575c05ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96de2b0273e828edf45d4b3e6c4dc5c3cf665fd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96de2b0273e828edf45d4b3e6c4dc5c3cf665fd5", "html_url": "https://github.com/rust-lang/rust/commit/96de2b0273e828edf45d4b3e6c4dc5c3cf665fd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96de2b0273e828edf45d4b3e6c4dc5c3cf665fd5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18a47f9580c0757f76d6b56081931d10a7859b18", "url": "https://api.github.com/repos/rust-lang/rust/commits/18a47f9580c0757f76d6b56081931d10a7859b18", "html_url": "https://github.com/rust-lang/rust/commit/18a47f9580c0757f76d6b56081931d10a7859b18"}, {"sha": "9b30fa31168c9337da36a95484b2550954528216", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b30fa31168c9337da36a95484b2550954528216", "html_url": "https://github.com/rust-lang/rust/commit/9b30fa31168c9337da36a95484b2550954528216"}], "stats": {"total": 23, "additions": 7, "deletions": 16}, "files": [{"sha": "b4c2763497cf009a57af764299d92169fee574d1", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/96de2b0273e828edf45d4b3e6c4dc5c3cf665fd5/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96de2b0273e828edf45d4b3e6c4dc5c3cf665fd5/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=96de2b0273e828edf45d4b3e6c4dc5c3cf665fd5", "patch": "@@ -182,16 +182,16 @@ pub fn compile_rest(sess: Session,\n     *sess.building_library = session::building_library(\n         sess.opts.crate_type, crate, sess.opts.test);\n \n+    crate = time(time_passes, ~\"expansion\", ||\n+        syntax::ext::expand::expand_crate(sess.parse_sess, copy cfg,\n+                                          crate));\n+\n     crate = time(time_passes, ~\"configuration\", ||\n         front::config::strip_unconfigured_items(crate));\n \n     crate = time(time_passes, ~\"maybe building test harness\", ||\n         front::test::modify_for_testing(sess, crate));\n \n-    crate = time(time_passes, ~\"expansion\", ||\n-        syntax::ext::expand::expand_crate(sess.parse_sess, copy cfg,\n-                                          crate));\n-\n     if upto == cu_expand { return (crate, None); }\n \n     crate = time(time_passes, ~\"intrinsic injection\", ||"}, {"sha": "9ea8caef7bc214e0d2c5191cfb0da0881001c9a9", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96de2b0273e828edf45d4b3e6c4dc5c3cf665fd5/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96de2b0273e828edf45d4b3e6c4dc5c3cf665fd5/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=96de2b0273e828edf45d4b3e6c4dc5c3cf665fd5", "patch": "@@ -79,12 +79,6 @@ mod test {\n     pub fn trivial_to_str() {\n         assert!(lambda.to_str() == \"\\\\\")\n     }\n-\n-    #[test]\n-    pub fn read_simple_board() {\n-        let s = include_str!(\"./maps/contest1.map\");\n-        io::with_str_reader(s, read_board_grid)\n-    }\n }\n \n pub fn main() {}"}, {"sha": "70a01f8cf02d2ab3604554f5f552c60d95783b89", "filename": "src/test/run-pass/issue-3424.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96de2b0273e828edf45d4b3e6c4dc5c3cf665fd5/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96de2b0273e828edf45d4b3e6c4dc5c3cf665fd5/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3424.rs?ref=96de2b0273e828edf45d4b3e6c4dc5c3cf665fd5", "patch": "@@ -16,12 +16,11 @@ use core::path::{Path};\n \n type rsrc_loader = ~fn(path: &Path) -> result::Result<~str, ~str>;\n \n-#[test]\n fn tester()\n {\n     let loader: rsrc_loader = |_path| {result::Ok(~\"more blah\")};\n \n-    let path = path::from_str(\"blah\");\n+    let path = path::Path(\"blah\");\n     assert!(loader(&path).is_ok());\n }\n "}, {"sha": "b3f3aed9ea1f9f9bb2bd58b338aecc7fe2a3871d", "filename": "src/test/run-pass/issue-3559.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96de2b0273e828edf45d4b3e6c4dc5c3cf665fd5/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96de2b0273e828edf45d4b3e6c4dc5c3cf665fd5/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3559.rs?ref=96de2b0273e828edf45d4b3e6c4dc5c3cf665fd5", "patch": "@@ -1,4 +1,4 @@\n-// xfail-fast\n+// xfail-test #4276\n \n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n@@ -15,7 +15,6 @@ extern mod std;\n \n use core::io::{WriterUtil};\n \n-#[cfg(test)]\n fn check_strs(actual: &str, expected: &str) -> bool\n {\n     if actual != expected\n@@ -26,10 +25,9 @@ fn check_strs(actual: &str, expected: &str) -> bool\n     return true;\n }\n \n-#[test]\n fn tester()\n {\n-    let mut table = core::hashmap::HashMap();\n+    let mut table = core::hashmap::HashMap::new();\n     table.insert(@~\"one\", 1);\n     table.insert(@~\"two\", 2);\n     assert!(check_strs(table.to_str(), ~\"xxx\"));   // not sure what expected should be"}]}