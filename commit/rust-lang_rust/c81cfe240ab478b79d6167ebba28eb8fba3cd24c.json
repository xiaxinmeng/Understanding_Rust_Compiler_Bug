{"sha": "c81cfe240ab478b79d6167ebba28eb8fba3cd24c", "node_id": "C_kwDOAAsO6NoAKGM4MWNmZTI0MGFiNDc4Yjc5ZDYxNjdlYmJhMjhlYjhmYmEzY2QyNGM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T19:47:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T19:47:09Z"}, "message": "cargo-miri: reorder --target to after the user-defined commands", "tree": {"sha": "2a5de0be3e945f990229c6cd877d7efd0c67e458", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a5de0be3e945f990229c6cd877d7efd0c67e458"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c81cfe240ab478b79d6167ebba28eb8fba3cd24c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c81cfe240ab478b79d6167ebba28eb8fba3cd24c", "html_url": "https://github.com/rust-lang/rust/commit/c81cfe240ab478b79d6167ebba28eb8fba3cd24c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c81cfe240ab478b79d6167ebba28eb8fba3cd24c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9c677112a982fa91f8ff00d831e46fe613e715e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c677112a982fa91f8ff00d831e46fe613e715e", "html_url": "https://github.com/rust-lang/rust/commit/b9c677112a982fa91f8ff00d831e46fe613e715e"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "d294bc5b127a3ce27e096a553a58a1fc219becf3", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c81cfe240ab478b79d6167ebba28eb8fba3cd24c/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81cfe240ab478b79d6167ebba28eb8fba3cd24c/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=c81cfe240ab478b79d6167ebba28eb8fba3cd24c", "patch": "@@ -584,27 +584,12 @@ fn phase_cargo_miri(mut args: env::Args) {\n         MiriCommand::Run => \"run\",\n         MiriCommand::Setup => return, // `cargo miri setup` stops here.\n     };\n+    let metadata = get_cargo_metadata();\n     let mut cmd = cargo();\n     cmd.arg(cargo_cmd);\n \n-    // Make sure we know the build target, and cargo does, too.\n-    // This is needed to make the `CARGO_TARGET_*_RUNNER` env var do something,\n-    // and it later helps us detect which crates are proc-macro/build-script\n-    // (host crates) and which crates are needed for the program itself.\n-    let host = version_info().host;\n-    let target = get_arg_flag_value(\"--target\");\n-    let target = if let Some(ref target) = target {\n-        target\n-    } else {\n-        // No target given. Pick default and tell cargo about it.\n-        cmd.arg(\"--target\");\n-        cmd.arg(&host);\n-        &host\n-    };\n-\n-    let mut target_dir = None;\n-\n     // Forward all arguments before `--` other than `--target-dir` and its value to Cargo.\n+    let mut target_dir = None;\n     for arg in ArgSplitFlagValue::new(&mut args, \"--target-dir\") {\n         match arg {\n             Ok(value) => {\n@@ -618,16 +603,27 @@ fn phase_cargo_miri(mut args: env::Args) {\n             }\n         }\n     }\n-\n-    let metadata = get_cargo_metadata();\n-\n     // Detect the target directory if it's not specified via `--target-dir`.\n     let target_dir = target_dir.get_or_insert_with(|| metadata.target_directory.clone());\n-\n     // Set `--target-dir` to `miri` inside the original target directory.\n     target_dir.push(\"miri\");\n     cmd.arg(\"--target-dir\").arg(target_dir);\n \n+    // Make sure we know the build target, and cargo does, too.\n+    // This is needed to make the `CARGO_TARGET_*_RUNNER` env var do something,\n+    // and it later helps us detect which crates are proc-macro/build-script\n+    // (host crates) and which crates are needed for the program itself.\n+    let host = version_info().host;\n+    let target = get_arg_flag_value(\"--target\");\n+    let target = if let Some(ref target) = target {\n+        target\n+    } else {\n+        // No target given. Pick default and tell cargo about it.\n+        cmd.arg(\"--target\");\n+        cmd.arg(&host);\n+        &host\n+    };\n+\n     // Forward all further arguments after `--` to cargo.\n     cmd.arg(\"--\").args(args);\n "}]}