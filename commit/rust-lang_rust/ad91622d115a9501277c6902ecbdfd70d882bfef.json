{"sha": "ad91622d115a9501277c6902ecbdfd70d882bfef", "node_id": "C_kwDOAAsO6NoAKGFkOTE2MjJkMTE1YTk1MDEyNzdjNjkwMmVjYmRmZDcwZDg4MmJmZWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-14T14:16:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-14T14:16:51Z"}, "message": "Auto merge of #14338 - Veykril:inlay-adjust, r=Veykril\n\nfix: Only skip adjustment hints for block, if and match expressions for reborrows\n\ncc https://github.com/rust-lang/rust-analyzer/pull/13749", "tree": {"sha": "5e64adfd5cb976db25b9d8983523f01143794231", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e64adfd5cb976db25b9d8983523f01143794231"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad91622d115a9501277c6902ecbdfd70d882bfef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad91622d115a9501277c6902ecbdfd70d882bfef", "html_url": "https://github.com/rust-lang/rust/commit/ad91622d115a9501277c6902ecbdfd70d882bfef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad91622d115a9501277c6902ecbdfd70d882bfef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74303a37745a5dc476bca4ee68a64265ee4ca74e", "url": "https://api.github.com/repos/rust-lang/rust/commits/74303a37745a5dc476bca4ee68a64265ee4ca74e", "html_url": "https://github.com/rust-lang/rust/commit/74303a37745a5dc476bca4ee68a64265ee4ca74e"}, {"sha": "228b44cb18740da416e90f6e4985a00e8679b085", "url": "https://api.github.com/repos/rust-lang/rust/commits/228b44cb18740da416e90f6e4985a00e8679b085", "html_url": "https://github.com/rust-lang/rust/commit/228b44cb18740da416e90f6e4985a00e8679b085"}], "stats": {"total": 56, "additions": 45, "deletions": 11}, "files": [{"sha": "46505b30441090bff30d9bbd36865209c482a1f5", "filename": "crates/ide/src/inlay_hints/adjustment.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ad91622d115a9501277c6902ecbdfd70d882bfef/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad91622d115a9501277c6902ecbdfd70d882bfef/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs?ref=ad91622d115a9501277c6902ecbdfd70d882bfef", "patch": "@@ -31,19 +31,31 @@ pub(super) fn hints(\n         return None;\n     }\n \n-    // These inherit from the inner expression which would result in duplicate hints\n-    if let ast::Expr::ParenExpr(_)\n-    | ast::Expr::IfExpr(_)\n-    | ast::Expr::BlockExpr(_)\n-    | ast::Expr::MatchExpr(_) = expr\n-    {\n+    // ParenExpr resolve to their contained expressions HIR so they will dupe these hints\n+    if let ast::Expr::ParenExpr(_) = expr {\n         return None;\n     }\n+    if let ast::Expr::BlockExpr(b) = expr {\n+        if !b.is_standalone() {\n+            return None;\n+        }\n+    }\n \n     let descended = sema.descend_node_into_attributes(expr.clone()).pop();\n     let desc_expr = descended.as_ref().unwrap_or(expr);\n     let adjustments = sema.expr_adjustments(desc_expr).filter(|it| !it.is_empty())?;\n \n+    if let ast::Expr::BlockExpr(_) | ast::Expr::IfExpr(_) | ast::Expr::MatchExpr(_) = desc_expr {\n+        if let [Adjustment { kind: Adjust::Deref(_), source, .. }, Adjustment { kind: Adjust::Borrow(_), source: _, target }] =\n+            &*adjustments\n+        {\n+            // Don't show unnecessary reborrows for these, they will just repeat the inner ones again\n+            if source == target {\n+                return None;\n+            }\n+        }\n+    }\n+\n     let (postfix, needs_outer_parens, needs_inner_parens) =\n         mode_and_needs_parens_for_adjustment_hints(expr, config.adjustment_hints_mode);\n \n@@ -67,6 +79,7 @@ pub(super) fn hints(\n \n     for Adjustment { source, target, kind } in iter {\n         if source == target {\n+            cov_mark::hit!(same_type_adjustment);\n             continue;\n         }\n \n@@ -251,7 +264,7 @@ mod tests {\n         check_with_config(\n             InlayHintsConfig { adjustment_hints: AdjustmentHints::Always, ..DISABLED_CONFIG },\n             r#\"\n-//- minicore: coerce_unsized, fn\n+//- minicore: coerce_unsized, fn, eq\n fn main() {\n     let _: u32         = loop {};\n                        //^^^^^^^<never-to-any>\n@@ -332,7 +345,7 @@ fn main() {\n         loop {}\n       //^^^^^^^<never-to-any>\n     };\n-    let _: &mut [u32] = match () { () => &mut [] }\n+    let _: &mut [u32] = match () { () => &mut [] };\n                                        //^^^^^^^<unsize>\n                                        //^^^^^^^&mut $\n                                        //^^^^^^^*\n@@ -341,6 +354,12 @@ fn main() {\n                          //^^^^^^^^^^<unsize>\n                          //^^^^^^^^^^&mut $\n                          //^^^^^^^^^^*\n+    () == ();\n+ // ^^&\n+       // ^^&\n+    (()) == {()};\n+  // ^^&\n+         // ^^^^&\n }\n \n #[derive(Copy, Clone)]\n@@ -363,7 +382,7 @@ impl Struct {\n                 ..DISABLED_CONFIG\n             },\n             r#\"\n-//- minicore: coerce_unsized, fn\n+//- minicore: coerce_unsized, fn, eq\n fn main() {\n \n     Struct.consume();\n@@ -419,7 +438,7 @@ fn main() {\n         loop {}\n       //^^^^^^^.<never-to-any>\n     };\n-    let _: &mut [u32] = match () { () => &mut [] }\n+    let _: &mut [u32] = match () { () => &mut [] };\n                                        //^^^^^^^(\n                                        //^^^^^^^)\n                                        //^^^^^^^.*\n@@ -432,6 +451,12 @@ fn main() {\n                          //^^^^^^^^^^.*\n                          //^^^^^^^^^^.&mut\n                          //^^^^^^^^^^.<unsize>\n+    () == ();\n+ // ^^.&\n+       // ^^.&\n+    (()) == {()};\n+  // ^^.&\n+         // ^^^^.&\n }\n \n #[derive(Copy, Clone)]\n@@ -499,6 +524,7 @@ fn main() {\n \n     #[test]\n     fn never_to_never_is_never_shown() {\n+        cov_mark::check!(same_type_adjustment);\n         check_with_config(\n             InlayHintsConfig { adjustment_hints: AdjustmentHints::Always, ..DISABLED_CONFIG },\n             r#\""}, {"sha": "699c68aeecec77362c43822a388b109630e97d7c", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad91622d115a9501277c6902ecbdfd70d882bfef/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad91622d115a9501277c6902ecbdfd70d882bfef/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=ad91622d115a9501277c6902ecbdfd70d882bfef", "patch": "@@ -356,7 +356,15 @@ impl ast::BlockExpr {\n             Some(it) => it,\n             None => return true,\n         };\n-        !matches!(parent.kind(), FN | IF_EXPR | WHILE_EXPR | LOOP_EXPR)\n+        match parent.kind() {\n+            FOR_EXPR | IF_EXPR => parent\n+                .children()\n+                .filter(|it| ast::Expr::can_cast(it.kind()))\n+                .next()\n+                .map_or(true, |it| it == *self.syntax()),\n+            LET_ELSE | FN | WHILE_EXPR | LOOP_EXPR | CONST_BLOCK_PAT => false,\n+            _ => true,\n+        }\n     }\n }\n "}]}