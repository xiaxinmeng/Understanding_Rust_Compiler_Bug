{"sha": "7964942515bcfbc2de6d0d755f419ec551ab6ad3", "node_id": "C_kwDOAAsO6NoAKDc5NjQ5NDI1MTViY2ZiYzJkZTZkMGQ3NTVmNDE5ZWM1NTFhYjZhZDM", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-09-11T18:00:48Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-11-06T02:08:09Z"}, "message": "Allow simd_bitmask to return byte arrays", "tree": {"sha": "ad15c73372431e5e1dcabf78f891d2bd2464367a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad15c73372431e5e1dcabf78f891d2bd2464367a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7964942515bcfbc2de6d0d755f419ec551ab6ad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7964942515bcfbc2de6d0d755f419ec551ab6ad3", "html_url": "https://github.com/rust-lang/rust/commit/7964942515bcfbc2de6d0d755f419ec551ab6ad3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7964942515bcfbc2de6d0d755f419ec551ab6ad3/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d1754e8bf6942b4c1d24d7c923438782129ba5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d1754e8bf6942b4c1d24d7c923438782129ba5a", "html_url": "https://github.com/rust-lang/rust/commit/0d1754e8bf6942b4c1d24d7c923438782129ba5a"}], "stats": {"total": 95, "additions": 73, "deletions": 22}, "files": [{"sha": "246c94968a39ba1d1ea5c3e454bfacb7bc3150e8", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7964942515bcfbc2de6d0d755f419ec551ab6ad3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7964942515bcfbc2de6d0d755f419ec551ab6ad3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=7964942515bcfbc2de6d0d755f419ec551ab6ad3", "patch": "@@ -19,7 +19,7 @@ use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt, LayoutOf};\n use rustc_middle::ty::{self, Ty};\n use rustc_middle::{bug, span_bug};\n use rustc_span::{sym, symbol::kw, Span, Symbol};\n-use rustc_target::abi::{self, HasDataLayout, Primitive};\n+use rustc_target::abi::{self, Align, HasDataLayout, Primitive};\n use rustc_target::spec::{HasTargetSpec, PanicStrategy};\n \n use std::cmp::Ordering;\n@@ -1056,16 +1056,13 @@ fn generic_simd_intrinsic(\n \n     if name == sym::simd_bitmask {\n         // The `fn simd_bitmask(vector) -> unsigned integer` intrinsic takes a\n-        // vector mask and returns an unsigned integer containing the most\n-        // significant bit (MSB) of each lane.\n-\n-        // If the vector has less than 8 lanes, a u8 is returned with zeroed\n-        // trailing bits.\n+        // vector mask and returns the most significant bit (MSB) of each lane in the form\n+        // of either:\n+        // * an unsigned integer\n+        // * an array of `u8`\n+        // If the vector has less than 8 lanes, a u8 is returned with zeroed trailing bits.\n         let expected_int_bits = in_len.max(8);\n-        match ret_ty.kind() {\n-            ty::Uint(i) if i.bit_width() == Some(expected_int_bits) => (),\n-            _ => return_error!(\"bitmask `{}`, expected `u{}`\", ret_ty, expected_int_bits),\n-        }\n+        let expected_bytes = expected_int_bits / 8 + ((expected_int_bits % 8 > 1) as u64);\n \n         // Integer vector <i{in_bitwidth} x in_len>:\n         let (i_xn, in_elem_bitwidth) = match in_elem.kind() {\n@@ -1095,8 +1092,34 @@ fn generic_simd_intrinsic(\n         let i1xn = bx.trunc(i_xn_msb, bx.type_vector(bx.type_i1(), in_len));\n         // Bitcast <i1 x N> to iN:\n         let i_ = bx.bitcast(i1xn, bx.type_ix(in_len));\n-        // Zero-extend iN to the bitmask type:\n-        return Ok(bx.zext(i_, bx.type_ix(expected_int_bits)));\n+\n+        match ret_ty.kind() {\n+            ty::Uint(i) if i.bit_width() == Some(expected_int_bits) => {\n+                // Zero-extend iN to the bitmask type:\n+                return Ok(bx.zext(i_, bx.type_ix(expected_int_bits)));\n+            }\n+            ty::Array(elem, len)\n+                if matches!(elem.kind(), ty::Uint(ty::UintTy::U8))\n+                    && len.try_eval_usize(bx.tcx, ty::ParamEnv::reveal_all())\n+                        == Some(expected_bytes) =>\n+            {\n+                // Zero-extend iN to the array lengh:\n+                let ze = bx.zext(i_, bx.type_ix(expected_bytes * 8));\n+\n+                // Convert the integer to a byte array\n+                let ptr = bx.alloca(bx.type_ix(expected_bytes * 8), Align::ONE);\n+                bx.store(ze, ptr, Align::ONE);\n+                let array_ty = bx.type_array(bx.type_i8(), expected_bytes);\n+                let ptr = bx.pointercast(ptr, bx.cx.type_ptr_to(array_ty));\n+                return Ok(bx.load(array_ty, ptr, Align::ONE));\n+            }\n+            _ => return_error!(\n+                \"cannot return `{}`, expected `u{}` or `[u8; {}]`\",\n+                ret_ty,\n+                expected_int_bits,\n+                expected_bytes\n+            ),\n+        }\n     }\n \n     fn simd_simple_float_intrinsic("}, {"sha": "9a23dae77b96e572084b590f04cb27b943dbc9f7", "filename": "src/test/ui/simd/intrinsic/generic-bitmask.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7964942515bcfbc2de6d0d755f419ec551ab6ad3/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7964942515bcfbc2de6d0d755f419ec551ab6ad3/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask.rs?ref=7964942515bcfbc2de6d0d755f419ec551ab6ad3", "patch": "@@ -51,19 +51,19 @@ fn main() {\n         let _: u64 = simd_bitmask(m64);\n \n         let _: u16 = simd_bitmask(m2);\n-        //~^ ERROR bitmask `u16`, expected `u8`\n+        //~^ ERROR invalid monomorphization of `simd_bitmask` intrinsic\n \n         let _: u16 = simd_bitmask(m8);\n-        //~^ ERROR bitmask `u16`, expected `u8`\n+        //~^ ERROR invalid monomorphization of `simd_bitmask` intrinsic\n \n         let _: u32 = simd_bitmask(m16);\n-        //~^ ERROR bitmask `u32`, expected `u16`\n+        //~^ ERROR invalid monomorphization of `simd_bitmask` intrinsic\n \n         let _: u64 = simd_bitmask(m32);\n-        //~^ ERROR bitmask `u64`, expected `u32`\n+        //~^ ERROR invalid monomorphization of `simd_bitmask` intrinsic\n \n         let _: u128 = simd_bitmask(m64);\n-        //~^ ERROR bitmask `u128`, expected `u64`\n+        //~^ ERROR invalid monomorphization of `simd_bitmask` intrinsic\n \n    }\n }"}, {"sha": "0de3f8eead86d12bf3fdb18e3e8e1d9ad1a70d4b", "filename": "src/test/ui/simd/intrinsic/generic-bitmask.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7964942515bcfbc2de6d0d755f419ec551ab6ad3/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7964942515bcfbc2de6d0d755f419ec551ab6ad3/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fgeneric-bitmask.stderr?ref=7964942515bcfbc2de6d0d755f419ec551ab6ad3", "patch": "@@ -1,28 +1,28 @@\n-error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u16`, expected `u8`\n+error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: cannot return `u16`, expected `u8` or `[u8; 1]`\n   --> $DIR/generic-bitmask.rs:53:22\n    |\n LL |         let _: u16 = simd_bitmask(m2);\n    |                      ^^^^^^^^^^^^^^^^\n \n-error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u16`, expected `u8`\n+error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: cannot return `u16`, expected `u8` or `[u8; 1]`\n   --> $DIR/generic-bitmask.rs:56:22\n    |\n LL |         let _: u16 = simd_bitmask(m8);\n    |                      ^^^^^^^^^^^^^^^^\n \n-error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u32`, expected `u16`\n+error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: cannot return `u32`, expected `u16` or `[u8; 2]`\n   --> $DIR/generic-bitmask.rs:59:22\n    |\n LL |         let _: u32 = simd_bitmask(m16);\n    |                      ^^^^^^^^^^^^^^^^^\n \n-error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u64`, expected `u32`\n+error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: cannot return `u64`, expected `u32` or `[u8; 4]`\n   --> $DIR/generic-bitmask.rs:62:22\n    |\n LL |         let _: u64 = simd_bitmask(m32);\n    |                      ^^^^^^^^^^^^^^^^^\n \n-error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u128`, expected `u64`\n+error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: cannot return `u128`, expected `u64` or `[u8; 8]`\n   --> $DIR/generic-bitmask.rs:65:23\n    |\n LL |         let _: u128 = simd_bitmask(m64);"}, {"sha": "5ee539e5d8d9501b4ba370714ce16d2f73f67667", "filename": "src/test/ui/simd/simd-bitmask.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7964942515bcfbc2de6d0d755f419ec551ab6ad3/src%2Ftest%2Fui%2Fsimd%2Fsimd-bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7964942515bcfbc2de6d0d755f419ec551ab6ad3/src%2Ftest%2Fui%2Fsimd%2Fsimd-bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-bitmask.rs?ref=7964942515bcfbc2de6d0d755f419ec551ab6ad3", "patch": "@@ -0,0 +1,28 @@\n+//run-pass\n+#![feature(repr_simd, platform_intrinsics)]\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_bitmask<T, U>(v: T) -> U;\n+}\n+\n+#[derive(Copy, Clone)]\n+#[repr(simd)]\n+struct Simd<T, const N: usize>([T; N]);\n+\n+fn main() {\n+    unsafe {\n+        let v = Simd::<i8, 4>([-1, 0, -1, 0]);\n+        let i: u8 = simd_bitmask(v);\n+        let a: [u8; 1] = simd_bitmask(v);\n+\n+        assert_eq!(i, 0b0101);\n+        assert_eq!(a, [0b0101]);\n+\n+        let v = Simd::<i8, 16>([0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0]);\n+        let i: u16 = simd_bitmask(v);\n+        let a: [u8; 2] = simd_bitmask(v);\n+\n+        assert_eq!(i, 0b0101000000001100);\n+        assert_eq!(a, [0b1100, 0b01010000]);\n+    }\n+}"}]}