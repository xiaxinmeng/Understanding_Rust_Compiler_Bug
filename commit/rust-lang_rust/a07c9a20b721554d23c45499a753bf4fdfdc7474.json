{"sha": "a07c9a20b721554d23c45499a753bf4fdfdc7474", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwN2M5YTIwYjcyMTU1NGQyM2M0NTQ5OWE3NTNiZjRmZGZkYzc0NzQ=", "commit": {"author": {"name": "Jonas Bushart", "email": "jonas@bushart.org", "date": "2017-02-14T10:05:53Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-10T16:02:24Z"}, "message": "Export attributes in save-analysis data\n\nSome annotations like the \"test\" annotations might be of interest for\nother projects, especially rls. Export all attributes in a new\nattributes item.", "tree": {"sha": "878792e728694329000fd50cc01d1e0c59a689ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/878792e728694329000fd50cc01d1e0c59a689ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a07c9a20b721554d23c45499a753bf4fdfdc7474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a07c9a20b721554d23c45499a753bf4fdfdc7474", "html_url": "https://github.com/rust-lang/rust/commit/a07c9a20b721554d23c45499a753bf4fdfdc7474", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a07c9a20b721554d23c45499a753bf4fdfdc7474/comments", "author": {"login": "jonasbb", "id": 273459, "node_id": "MDQ6VXNlcjI3MzQ1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/273459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonasbb", "html_url": "https://github.com/jonasbb", "followers_url": "https://api.github.com/users/jonasbb/followers", "following_url": "https://api.github.com/users/jonasbb/following{/other_user}", "gists_url": "https://api.github.com/users/jonasbb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonasbb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonasbb/subscriptions", "organizations_url": "https://api.github.com/users/jonasbb/orgs", "repos_url": "https://api.github.com/users/jonasbb/repos", "events_url": "https://api.github.com/users/jonasbb/events{/privacy}", "received_events_url": "https://api.github.com/users/jonasbb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f573db4f80c75f156df8a743f456bf087ec81dc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f573db4f80c75f156df8a743f456bf087ec81dc2", "html_url": "https://github.com/rust-lang/rust/commit/f573db4f80c75f156df8a743f456bf087ec81dc2"}], "stats": {"total": 177, "additions": 171, "deletions": 6}, "files": [{"sha": "6caf81380e40dad51f8c33c1d90a51c7dd5f7065", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a07c9a20b721554d23c45499a753bf4fdfdc7474/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a07c9a20b721554d23c45499a753bf4fdfdc7474/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=a07c9a20b721554d23c45499a753bf4fdfdc7474", "patch": "@@ -15,7 +15,7 @@\n \n use rustc::hir;\n use rustc::hir::def_id::{CrateNum, DefId};\n-use syntax::ast::{self, NodeId};\n+use syntax::ast::{self, Attribute, NodeId};\n use syntax_pos::Span;\n \n pub struct CrateData {\n@@ -136,6 +136,7 @@ pub struct EnumData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n /// Data for extern crates.\n@@ -171,6 +172,7 @@ pub struct FunctionData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n /// Data about a function call.\n@@ -256,6 +258,7 @@ pub struct MethodData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n /// Data for modules.\n@@ -271,6 +274,7 @@ pub struct ModData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n /// Data for a reference to a module.\n@@ -295,6 +299,7 @@ pub struct StructData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -309,6 +314,7 @@ pub struct StructVariantData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -323,6 +329,7 @@ pub struct TraitData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -337,6 +344,7 @@ pub struct TupleVariantData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n /// Data for a typedef.\n@@ -351,6 +359,7 @@ pub struct TypeDefData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Option<Signature>,\n+    pub attributes: Vec<Attribute>,\n }\n \n /// Data for a reference to a type or trait.\n@@ -396,6 +405,7 @@ pub struct VariableData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Option<Signature>,\n+    pub attributes: Vec<Attribute>,\n }\n \n #[derive(Debug, RustcEncodable)]"}, {"sha": "54069775418ce558d9c7e9e234d9ab5573a88c95", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a07c9a20b721554d23c45499a753bf4fdfdc7474/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a07c9a20b721554d23c45499a753bf4fdfdc7474/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=a07c9a20b721554d23c45499a753bf4fdfdc7474", "patch": "@@ -47,7 +47,8 @@ use syntax::ptr::P;\n use syntax::codemap::Spanned;\n use syntax_pos::*;\n \n-use super::{escape, generated_code, SaveContext, PathCollector, docs_for_attrs};\n+use super::{escape, generated_code, SaveContext, PathCollector, docs_for_attrs,\n+            remove_docs_from_attrs};\n use super::data::*;\n use super::dump::Dump;\n use super::external_data::{Lower, make_def_id};\n@@ -373,6 +374,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                         visibility: Visibility::Inherited,\n                         docs: String::new(),\n                         sig: None,\n+                        attributes: vec![],\n                     }.lower(self.tcx));\n                 }\n             }\n@@ -448,6 +450,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     visibility: vis,\n                     docs: docs_for_attrs(attrs),\n                     sig: method_data.sig,\n+                    attributes: remove_docs_from_attrs(attrs),\n                 }.lower(self.tcx));\n             }\n \n@@ -519,6 +522,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     parent: None,\n                     docs: String::new(),\n                     sig: None,\n+                    attributes: vec![],\n                 }.lower(self.tcx));\n             }\n         }\n@@ -592,6 +596,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 visibility: vis,\n                 docs: docs_for_attrs(attrs),\n                 sig: None,\n+                attributes: remove_docs_from_attrs(attrs),\n             }.lower(self.tcx));\n         }\n \n@@ -636,6 +641,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 visibility: From::from(&item.vis),\n                 docs: docs_for_attrs(&item.attrs),\n                 sig: self.save_ctxt.sig_base(item),\n+                attributes: remove_docs_from_attrs(&item.attrs),\n             }.lower(self.tcx));\n         }\n \n@@ -701,6 +707,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             parent: Some(make_def_id(item.id, &self.tcx.hir)),\n                             docs: docs_for_attrs(&variant.node.attrs),\n                             sig: sig,\n+                            attributes: remove_docs_from_attrs(&variant.node.attrs),\n                         }.lower(self.tcx));\n                     }\n                 }\n@@ -727,6 +734,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             parent: Some(make_def_id(item.id, &self.tcx.hir)),\n                             docs: docs_for_attrs(&variant.node.attrs),\n                             sig: sig,\n+                            attributes: remove_docs_from_attrs(&variant.node.attrs),\n                         }.lower(self.tcx));\n                     }\n                 }\n@@ -798,6 +806,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 visibility: From::from(&item.vis),\n                 docs: docs_for_attrs(&item.attrs),\n                 sig: self.save_ctxt.sig_base(item),\n+                attributes: remove_docs_from_attrs(&item.attrs),\n             }.lower(self.tcx));\n         }\n \n@@ -1064,6 +1073,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     visibility: Visibility::Inherited,\n                     docs: String::new(),\n                     sig: None,\n+                    attributes: vec![],\n                 }.lower(self.tcx));\n             }\n         }\n@@ -1305,6 +1315,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n                         parent: None,\n                         docs: docs_for_attrs(&item.attrs),\n                         sig: Some(self.save_ctxt.sig_base(item)),\n+                        attributes: remove_docs_from_attrs(&item.attrs),\n                     }.lower(self.tcx));\n                 }\n \n@@ -1527,6 +1538,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n                             visibility: Visibility::Inherited,\n                             docs: String::new(),\n                             sig: None,\n+                            attributes: vec![],\n                         }.lower(self.tcx));\n                     }\n                 }"}, {"sha": "0cfa71a3499169199e42a1dc57dd39c8a8bd4bab", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 117, "deletions": 1, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/a07c9a20b721554d23c45499a753bf4fdfdc7474/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a07c9a20b721554d23c45499a753bf4fdfdc7474/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=a07c9a20b721554d23c45499a753bf4fdfdc7474", "patch": "@@ -11,7 +11,7 @@\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex};\n use rustc::hir::map::Map;\n use rustc::ty::TyCtxt;\n-use syntax::ast::NodeId;\n+use syntax::ast::{self, LitKind, NodeId, StrStyle};\n use syntax::codemap::CodeMap;\n use syntax_pos::Span;\n \n@@ -64,6 +64,102 @@ impl SpanData {\n     }\n }\n \n+/// Represent an arbitrary attribute on a code element\n+#[derive(Clone, Debug, RustcEncodable)]\n+pub struct Attribute {\n+    value: AttributeItem,\n+    span: SpanData,\n+}\n+\n+impl Lower for ast::Attribute {\n+    type Target = Attribute;\n+\n+    fn lower(self, tcx: TyCtxt) -> Attribute {\n+        Attribute {\n+            value: self.value.lower(tcx),\n+            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+        }\n+    }\n+}\n+\n+impl Lower for Vec<ast::Attribute> {\n+    type Target = Vec<Attribute>;\n+\n+    fn lower(self, tcx: TyCtxt) -> Vec<Attribute> {\n+        self.into_iter().map(|x| x.lower(tcx)).collect()\n+    }\n+}\n+\n+/// A single item as part of an attribute\n+#[derive(Clone, Debug, RustcEncodable)]\n+pub struct AttributeItem {\n+    name: LitKind,\n+    kind: AttributeItemKind,\n+    span: SpanData,\n+}\n+\n+impl Lower for ast::MetaItem {\n+    type Target = AttributeItem;\n+\n+    fn lower(self, tcx: TyCtxt) -> AttributeItem {\n+        AttributeItem {\n+            name: LitKind::Str(self.name, StrStyle::Cooked),\n+            kind: self.node.lower(tcx),\n+            span: SpanData::from_span(self.span, tcx.sess.codemap()),\n+        }\n+    }\n+}\n+\n+impl Lower for ast::NestedMetaItem {\n+    type Target = AttributeItem;\n+\n+    fn lower(self, tcx: TyCtxt) -> AttributeItem {\n+        match self.node {\n+            ast::NestedMetaItemKind::MetaItem(item) => item.lower(tcx),\n+            ast::NestedMetaItemKind::Literal(lit) => {\n+                AttributeItem {\n+                    name: lit.node,\n+                    kind: AttributeItemKind::Literal,\n+                    span: SpanData::from_span(lit.span, tcx.sess.codemap()),\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+#[derive(Clone, Debug, RustcEncodable)]\n+pub enum AttributeItemKind {\n+    /// Word meta item.\n+    ///\n+    /// E.g. `test` as in `#[test]`\n+    Literal,\n+    /// Name value meta item.\n+    ///\n+    /// E.g. `feature = \"foo\"` as in `#[feature = \"foo\"]`\n+    NameValue(LitKind, SpanData),\n+    /// List meta item.\n+    ///\n+    /// E.g. the `derive(..)` as in `#[derive(..)]`\n+    List(Vec<AttributeItem>),\n+}\n+\n+impl Lower for ast::MetaItemKind {\n+    type Target = AttributeItemKind;\n+\n+    fn lower(self, tcx: TyCtxt) -> AttributeItemKind {\n+        match self {\n+            ast::MetaItemKind::Word => AttributeItemKind::Literal,\n+            ast::MetaItemKind::List(items) => {\n+                AttributeItemKind::List(items.into_iter().map(|x| x.lower(tcx)).collect())\n+            }\n+            ast::MetaItemKind::NameValue(lit) => {\n+                let span = SpanData::from_span(lit.span, tcx.sess.codemap());\n+                AttributeItemKind::NameValue(lit.node, span)\n+            }\n+        }\n+    }\n+}\n+\n #[derive(Debug, RustcEncodable)]\n pub struct CratePreludeData {\n     pub crate_name: String,\n@@ -98,6 +194,7 @@ pub struct EnumData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::EnumData {\n@@ -115,6 +212,7 @@ impl Lower for data::EnumData {\n             visibility: self.visibility,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -179,6 +277,7 @@ pub struct FunctionData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::FunctionData {\n@@ -197,6 +296,7 @@ impl Lower for data::FunctionData {\n             parent: self.parent,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -346,6 +446,7 @@ pub struct MethodData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::MethodData {\n@@ -364,6 +465,7 @@ impl Lower for data::MethodData {\n             parent: self.parent,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -381,6 +483,7 @@ pub struct ModData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::ModData {\n@@ -398,6 +501,7 @@ impl Lower for data::ModData {\n             visibility: self.visibility,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -437,6 +541,7 @@ pub struct StructData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::StructData {\n@@ -455,6 +560,7 @@ impl Lower for data::StructData {\n             visibility: self.visibility,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -471,6 +577,7 @@ pub struct StructVariantData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::StructVariantData {\n@@ -488,6 +595,7 @@ impl Lower for data::StructVariantData {\n             parent: self.parent,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -504,6 +612,7 @@ pub struct TraitData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::TraitData {\n@@ -521,6 +630,7 @@ impl Lower for data::TraitData {\n             visibility: self.visibility,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -537,6 +647,7 @@ pub struct TupleVariantData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::TupleVariantData {\n@@ -554,6 +665,7 @@ impl Lower for data::TupleVariantData {\n             parent: self.parent,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -570,6 +682,7 @@ pub struct TypeDefData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Option<Signature>,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::TypeDefData {\n@@ -586,6 +699,7 @@ impl Lower for data::TypeDefData {\n             parent: self.parent,\n             docs: self.docs,\n             sig: self.sig.map(|s| s.lower(tcx)),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -675,6 +789,7 @@ pub struct VariableData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Option<Signature>,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::VariableData {\n@@ -694,6 +809,7 @@ impl Lower for data::VariableData {\n             visibility: self.visibility,\n             docs: self.docs,\n             sig: self.sig.map(|s| s.lower(tcx)),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }"}, {"sha": "1b72489f83c67da2d611710b757001966994c3f5", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a07c9a20b721554d23c45499a753bf4fdfdc7474/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a07c9a20b721554d23c45499a753bf4fdfdc7474/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=a07c9a20b721554d23c45499a753bf4fdfdc7474", "patch": "@@ -87,6 +87,7 @@ impl<'b, W: Write + 'b> Dump for JsonDumper<'b, W> {\n             decl_id: None,\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         };\n         if def.span.file_name != def.value {\n             // If the module is an out-of-line defintion, then we'll make the\n@@ -232,6 +233,7 @@ struct Def {\n     decl_id: Option<Id>,\n     docs: String,\n     sig: Option<JsonSignature>,\n+    attributes: Vec<Attribute>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -274,6 +276,7 @@ impl From<EnumData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -291,6 +294,7 @@ impl From<TupleVariantData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -307,6 +311,7 @@ impl From<StructVariantData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -323,6 +328,7 @@ impl From<StructData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -339,6 +345,7 @@ impl From<TraitData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -355,6 +362,7 @@ impl From<FunctionData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -371,6 +379,7 @@ impl From<MethodData> for Def {\n             decl_id: data.decl_id.map(|id| From::from(id)),\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -387,6 +396,7 @@ impl From<MacroData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: None,\n+            attributes: vec![],\n         }\n     }\n }\n@@ -403,6 +413,7 @@ impl From<TypeDefData> for Def {\n             decl_id: None,\n             docs: String::new(),\n             sig: data.sig.map(|s| From::from(s)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -424,6 +435,7 @@ impl From<VariableData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: None,\n+            attributes: data.attributes,\n         }\n     }\n }"}, {"sha": "b650fe1024b230629ad9fa2ff2072b6103edc3a3", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a07c9a20b721554d23c45499a753bf4fdfdc7474/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a07c9a20b721554d23c45499a753bf4fdfdc7474/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=a07c9a20b721554d23c45499a753bf4fdfdc7474", "patch": "@@ -136,6 +136,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     parent: None,\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: self.sig_base(item),\n+                    attributes: remove_docs_from_attrs(&item.attrs),\n                 }))\n             }\n             ast::ItemKind::Static(ref typ, mt, ref expr) => {\n@@ -164,6 +165,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: Some(self.sig_base(item)),\n+                    attributes: remove_docs_from_attrs(&item.attrs),\n                 }))\n             }\n             ast::ItemKind::Const(ref typ, ref expr) => {\n@@ -183,6 +185,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: Some(self.sig_base(item)),\n+                    attributes: remove_docs_from_attrs(&item.attrs),\n                 }))\n             }\n             ast::ItemKind::Mod(ref m) => {\n@@ -205,6 +208,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: self.sig_base(item),\n+                    attributes: remove_docs_from_attrs(&item.attrs),\n                 }))\n             }\n             ast::ItemKind::Enum(ref def, _) => {\n@@ -228,6 +232,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: self.sig_base(item),\n+                    attributes: remove_docs_from_attrs(&item.attrs),\n                 }))\n             }\n             ast::ItemKind::Impl(.., ref trait_ref, ref typ, _) => {\n@@ -315,6 +320,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 visibility: From::from(&field.vis),\n                 docs: docs_for_attrs(&field.attrs),\n                 sig: Some(sig),\n+                attributes: remove_docs_from_attrs(&field.attrs),\n             })\n         } else {\n             None\n@@ -327,7 +333,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                            name: ast::Name, span: Span) -> Option<FunctionData> {\n         // The qualname for a method is the trait name or name of the struct in an impl in\n         // which the method is declared in, followed by the method's name.\n-        let (qualname, parent_scope, decl_id, vis, docs) =\n+        let (qualname, parent_scope, decl_id, vis, docs, attributes) =\n           match self.tcx.impl_of_method(self.tcx.hir.local_def_id(id)) {\n             Some(impl_id) => match self.tcx.hir.get_if_local(impl_id) {\n                 Some(Node::NodeItem(item)) => {\n@@ -349,7 +355,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n \n                             (result, trait_id, decl_id,\n                              From::from(&item.vis),\n-                             docs_for_attrs(&item.attrs))\n+                             docs_for_attrs(&item.attrs),\n+                             remove_docs_from_attrs(&item.attrs))\n                         }\n                         _ => {\n                             span_bug!(span,\n@@ -374,7 +381,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                             (format!(\"::{}\", self.tcx.item_path_str(def_id)),\n                              Some(def_id), None,\n                              From::from(&item.vis),\n-                             docs_for_attrs(&item.attrs))\n+                             docs_for_attrs(&item.attrs),\n+                             remove_docs_from_attrs(&item.attrs))\n                         }\n                         r => {\n                             span_bug!(span,\n@@ -423,6 +431,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             parent: parent_scope,\n             docs: docs,\n             sig: sig,\n+            attributes: attributes,\n         })\n     }\n \n@@ -836,6 +845,12 @@ fn docs_for_attrs(attrs: &[Attribute]) -> String {\n     result\n }\n \n+/// Remove all attributes which are docs\n+fn remove_docs_from_attrs(attrs: &[Attribute]) -> Vec<Attribute> {\n+    let doc = Symbol::intern(\"doc\");\n+    attrs.iter().cloned().filter(|attr| attr.name() != doc).collect()\n+}\n+\n #[derive(Clone, Copy, Debug, RustcEncodable)]\n pub enum Format {\n     Csv,"}]}