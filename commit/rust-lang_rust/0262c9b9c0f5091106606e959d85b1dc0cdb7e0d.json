{"sha": "0262c9b9c0f5091106606e959d85b1dc0cdb7e0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNjJjOWI5YzBmNTA5MTEwNjYwNmU5NTlkODViMWRjMGNkYjdlMGQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-17T11:57:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-17T11:57:29Z"}, "message": "Merge #4010\n\n4010: Fix handling of ranges in diagnostics r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "82882f5ae58b65f9d866ca444a2c3b73f3f68661", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82882f5ae58b65f9d866ca444a2c3b73f3f68661"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0262c9b9c0f5091106606e959d85b1dc0cdb7e0d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJemZmpCRBK7hj4Ov3rIwAAdHIIAG+SlewzAmLR4RSAMWf7Kqr2\nmrBPJUm61YazCDzeUYq9OE9mGVR7Cjsv1ncDfuTXP37Tjha6l8hGmjSC4amjNOBO\nI9ndyJ1GxTfVFLsHyNSyWpOynA9s11XvWVf5phdATcVZQWxjr6zVogM3GcSXbXP3\nRKPmsGq/pkal7lKi/TfhW3DqXujmUQWT+9eaEq939HRRzNVpb78qkNRIj4t3uBQR\nnRTcgt0LaViMMVjsObF5B79yN0/0aHf0H1w8gLVzTD+OMqyMW54yzMnB0D8XJneK\nLvjhIrXuB8ovpPBFjeoM1Ye0YuafB1B7tSNWQSPY0Sut1ZZYAdSYCjaeIPiEwek=\n=eD3u\n-----END PGP SIGNATURE-----\n", "payload": "tree 82882f5ae58b65f9d866ca444a2c3b73f3f68661\nparent bd6b532224753c6e56e322158b12cd1079b03f67\nparent 146f6f5a45a4bfd98ab0eb54bb30610d784433c9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587124649 +0000\ncommitter GitHub <noreply@github.com> 1587124649 +0000\n\nMerge #4010\n\n4010: Fix handling of ranges in diagnostics r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0262c9b9c0f5091106606e959d85b1dc0cdb7e0d", "html_url": "https://github.com/rust-lang/rust/commit/0262c9b9c0f5091106606e959d85b1dc0cdb7e0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0262c9b9c0f5091106606e959d85b1dc0cdb7e0d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd6b532224753c6e56e322158b12cd1079b03f67", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd6b532224753c6e56e322158b12cd1079b03f67", "html_url": "https://github.com/rust-lang/rust/commit/bd6b532224753c6e56e322158b12cd1079b03f67"}, {"sha": "146f6f5a45a4bfd98ab0eb54bb30610d784433c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/146f6f5a45a4bfd98ab0eb54bb30610d784433c9", "html_url": "https://github.com/rust-lang/rust/commit/146f6f5a45a4bfd98ab0eb54bb30610d784433c9"}], "stats": {"total": 100, "additions": 83, "deletions": 17}, "files": [{"sha": "0b477f0e9ea73e8e86a80a64cf102b50fecf162d", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0262c9b9c0f5091106606e959d85b1dc0cdb7e0d/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262c9b9c0f5091106606e959d85b1dc0cdb7e0d/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=0262c9b9c0f5091106606e959d85b1dc0cdb7e0d", "patch": "@@ -20,6 +20,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::{\n     db::HirDatabase,\n+    diagnostics::Diagnostic,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, SourceAnalyzer},\n     AssocItem, Function, HirFileId, ImplDef, InFile, Local, MacroDef, Module, ModuleDef, Name,\n@@ -126,6 +127,13 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         original_range(self.db, node.as_ref())\n     }\n \n+    pub fn diagnostics_range(&self, diagnostics: &dyn Diagnostic) -> FileRange {\n+        let src = diagnostics.source();\n+        let root = self.db.parse_or_expand(src.file_id).unwrap();\n+        let node = src.value.to_node(&root);\n+        original_range(self.db, src.with_value(&node))\n+    }\n+\n     pub fn ancestors_with_macros(&self, node: SyntaxNode) -> impl Iterator<Item = SyntaxNode> + '_ {\n         let node = self.find_file(node);\n         node.ancestors_with_macros(self.db).map(|it| it.value)"}, {"sha": "3b169440ad85ecdb21cb3b91a0bf67c28062aad9", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0262c9b9c0f5091106606e959d85b1dc0cdb7e0d/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262c9b9c0f5091106606e959d85b1dc0cdb7e0d/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=0262c9b9c0f5091106606e959d85b1dc0cdb7e0d", "patch": "@@ -210,7 +210,7 @@ pub struct BodySourceMap {\n     expr_map_back: ArenaMap<ExprId, Result<ExprSource, SyntheticSyntax>>,\n     pat_map: FxHashMap<PatSource, PatId>,\n     pat_map_back: ArenaMap<PatId, Result<PatSource, SyntheticSyntax>>,\n-    field_map: FxHashMap<(ExprId, usize), AstPtr<ast::RecordField>>,\n+    field_map: FxHashMap<(ExprId, usize), InFile<AstPtr<ast::RecordField>>>,\n     expansions: FxHashMap<InFile<AstPtr<ast::MacroCall>>, HirFileId>,\n }\n \n@@ -303,7 +303,7 @@ impl BodySourceMap {\n         self.pat_map.get(&src).cloned()\n     }\n \n-    pub fn field_syntax(&self, expr: ExprId, field: usize) -> AstPtr<ast::RecordField> {\n+    pub fn field_syntax(&self, expr: ExprId, field: usize) -> InFile<AstPtr<ast::RecordField>> {\n         self.field_map[&(expr, field)].clone()\n     }\n }"}, {"sha": "10a1ba714b916751d497b4d9ea54ce667c0a4d74", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0262c9b9c0f5091106606e959d85b1dc0cdb7e0d/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262c9b9c0f5091106606e959d85b1dc0cdb7e0d/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=0262c9b9c0f5091106606e959d85b1dc0cdb7e0d", "patch": "@@ -320,7 +320,8 @@ impl ExprCollector<'_> {\n \n                 let res = self.alloc_expr(record_lit, syntax_ptr);\n                 for (i, ptr) in field_ptrs.into_iter().enumerate() {\n-                    self.source_map.field_map.insert((res, i), ptr);\n+                    let src = self.expander.to_source(ptr);\n+                    self.source_map.field_map.insert((res, i), src);\n                 }\n                 res\n             }"}, {"sha": "510c5e06483b6dcf3b493a957278d0d293a11876", "filename": "crates/ra_hir_def/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0262c9b9c0f5091106606e959d85b1dc0cdb7e0d/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262c9b9c0f5091106606e959d85b1dc0cdb7e0d/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs?ref=0262c9b9c0f5091106606e959d85b1dc0cdb7e0d", "patch": "@@ -20,7 +20,7 @@ impl Diagnostic for UnresolvedModule {\n         \"unresolved module\".to_string()\n     }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.decl.clone().into() }\n+        InFile::new(self.file, self.decl.clone().into())\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self"}, {"sha": "99209c6e8c7262af710a6dfdf81baaf08aadf1da", "filename": "crates/ra_hir_expand/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0262c9b9c0f5091106606e959d85b1dc0cdb7e0d/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262c9b9c0f5091106606e959d85b1dc0cdb7e0d/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs?ref=0262c9b9c0f5091106606e959d85b1dc0cdb7e0d", "patch": "@@ -16,16 +16,13 @@\n \n use std::{any::Any, fmt};\n \n-use ra_syntax::{SyntaxNode, SyntaxNodePtr, TextRange};\n+use ra_syntax::{SyntaxNode, SyntaxNodePtr};\n \n use crate::{db::AstDatabase, InFile};\n \n pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n     fn message(&self) -> String;\n     fn source(&self) -> InFile<SyntaxNodePtr>;\n-    fn highlight_range(&self) -> TextRange {\n-        self.source().value.range()\n-    }\n     fn as_any(&self) -> &(dyn Any + Send + 'static);\n }\n "}, {"sha": "c8fd5486159ad58505a9fd4cfac3efad2668d568", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0262c9b9c0f5091106606e959d85b1dc0cdb7e0d/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262c9b9c0f5091106606e959d85b1dc0cdb7e0d/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=0262c9b9c0f5091106606e959d85b1dc0cdb7e0d", "patch": "@@ -21,7 +21,7 @@ impl Diagnostic for NoSuchField {\n     }\n \n     fn source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.field.clone().into() }\n+        InFile::new(self.file, self.field.clone().into())\n     }\n \n     fn as_any(&self) -> &(dyn Any + Send + 'static) {"}, {"sha": "b6d9b3438e7dd391c1b0ea864664d06e9aeb4b24", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0262c9b9c0f5091106606e959d85b1dc0cdb7e0d/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262c9b9c0f5091106606e959d85b1dc0cdb7e0d/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=0262c9b9c0f5091106606e959d85b1dc0cdb7e0d", "patch": "@@ -682,10 +682,10 @@ mod diagnostics {\n         ) {\n             match self {\n                 InferenceDiagnostic::NoSuchField { expr, field } => {\n-                    let file = owner.lookup(db.upcast()).source(db.upcast()).file_id;\n+                    let source = owner.lookup(db.upcast()).source(db.upcast());\n                     let (_, source_map) = db.body_with_source_map(owner.into());\n                     let field = source_map.field_syntax(*expr, *field);\n-                    sink.push(NoSuchField { file, field })\n+                    sink.push(NoSuchField { file: source.file_id, field: field.value })\n                 }\n             }\n         }"}, {"sha": "e7e201709880c9c947bf0d6d5e2da7437f93cb6e", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 66, "deletions": 6, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0262c9b9c0f5091106606e959d85b1dc0cdb7e0d/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0262c9b9c0f5091106606e959d85b1dc0cdb7e0d/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=0262c9b9c0f5091106606e959d85b1dc0cdb7e0d", "patch": "@@ -1,4 +1,8 @@\n-//! FIXME: write short doc here\n+//! Collects diagnostics & fixits  for a single file.\n+//!\n+//! The tricky bit here is that diagnostics are produced by hir in terms of\n+//! macro-expanded files, but we need to present them to the users in terms of\n+//! original files. So we need to map the ranges.\n \n use std::cell::RefCell;\n \n@@ -46,7 +50,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n     let mut sink = DiagnosticSink::new(|d| {\n         res.borrow_mut().push(Diagnostic {\n             message: d.message(),\n-            range: d.highlight_range(),\n+            range: sema.diagnostics_range(d).range,\n             severity: Severity::Error,\n             fix: None,\n         })\n@@ -62,7 +66,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         let create_file = FileSystemEdit::CreateFile { source_root, path };\n         let fix = SourceChange::file_system_edit(\"create module\", create_file);\n         res.borrow_mut().push(Diagnostic {\n-            range: d.highlight_range(),\n+            range: sema.diagnostics_range(d).range,\n             message: d.message(),\n             severity: Severity::Error,\n             fix: Some(fix),\n@@ -95,15 +99,15 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         };\n \n         res.borrow_mut().push(Diagnostic {\n-            range: d.highlight_range(),\n+            range: sema.diagnostics_range(d).range,\n             message: d.message(),\n             severity: Severity::Error,\n             fix,\n         })\n     })\n     .on::<hir::diagnostics::MissingMatchArms, _>(|d| {\n         res.borrow_mut().push(Diagnostic {\n-            range: d.highlight_range(),\n+            range: sema.diagnostics_range(d).range,\n             message: d.message(),\n             severity: Severity::Error,\n             fix: None,\n@@ -115,7 +119,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         let edit = TextEdit::replace(node.syntax().text_range(), replacement);\n         let fix = SourceChange::source_file_edit_from(\"wrap with ok\", file_id, edit);\n         res.borrow_mut().push(Diagnostic {\n-            range: d.highlight_range(),\n+            range: sema.diagnostics_range(d).range,\n             message: d.message(),\n             severity: Severity::Error,\n             fix: Some(fix),\n@@ -621,6 +625,62 @@ mod tests {\n         \"###);\n     }\n \n+    #[test]\n+    fn range_mapping_out_of_macros() {\n+        let (analysis, file_id) = single_file(\n+            r\"\n+            fn some() {}\n+            fn items() {}\n+            fn here() {}\n+\n+            macro_rules! id {\n+                ($($tt:tt)*) => { $($tt)*};\n+            }\n+\n+            fn main() {\n+                let _x = id![Foo { a: 42 }];\n+            }\n+\n+            pub struct Foo {\n+                pub a: i32,\n+                pub b: i32,\n+            }\n+        \",\n+        );\n+        let diagnostics = analysis.diagnostics(file_id).unwrap();\n+        assert_debug_snapshot!(diagnostics, @r###\"\n+        [\n+            Diagnostic {\n+                message: \"Missing structure fields:\\n- b\",\n+                range: [224; 233),\n+                fix: Some(\n+                    SourceChange {\n+                        label: \"fill struct fields\",\n+                        source_file_edits: [\n+                            SourceFileEdit {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                edit: TextEdit {\n+                                    atoms: [\n+                                        AtomTextEdit {\n+                                            delete: [3; 9),\n+                                            insert: \"{a:42, b: ()}\",\n+                                        },\n+                                    ],\n+                                },\n+                            },\n+                        ],\n+                        file_system_edits: [],\n+                        cursor_position: None,\n+                    },\n+                ),\n+                severity: Error,\n+            },\n+        ]\n+        \"###);\n+    }\n+\n     #[test]\n     fn test_check_unnecessary_braces_in_use_statement() {\n         check_not_applicable("}]}