{"sha": "2ec769709f8bf334b115b1ecbcc0054b9ed351ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYzc2OTcwOWY4YmYzMzRiMTE1YjFlY2JjYzAwNTRiOWVkMzUxYWI=", "commit": {"author": {"name": "defuz", "email": "defuz.net@gmail.com", "date": "2015-10-16T08:08:47Z"}, "committer": {"name": "defuz", "email": "defuz.net@gmail.com", "date": "2015-10-23T23:14:12Z"}, "message": "Lookup rustfmt.toml file is relative from input file, not from current directory", "tree": {"sha": "1423a123ece123dda32fa8f75b2ec34cce42d22b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1423a123ece123dda32fa8f75b2ec34cce42d22b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ec769709f8bf334b115b1ecbcc0054b9ed351ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ec769709f8bf334b115b1ecbcc0054b9ed351ab", "html_url": "https://github.com/rust-lang/rust/commit/2ec769709f8bf334b115b1ecbcc0054b9ed351ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ec769709f8bf334b115b1ecbcc0054b9ed351ab/comments", "author": {"login": "defuz", "id": 276041, "node_id": "MDQ6VXNlcjI3NjA0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/276041?v=4", "gravatar_id": "", "url": "https://api.github.com/users/defuz", "html_url": "https://github.com/defuz", "followers_url": "https://api.github.com/users/defuz/followers", "following_url": "https://api.github.com/users/defuz/following{/other_user}", "gists_url": "https://api.github.com/users/defuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/defuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/defuz/subscriptions", "organizations_url": "https://api.github.com/users/defuz/orgs", "repos_url": "https://api.github.com/users/defuz/repos", "events_url": "https://api.github.com/users/defuz/events{/privacy}", "received_events_url": "https://api.github.com/users/defuz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "defuz", "id": 276041, "node_id": "MDQ6VXNlcjI3NjA0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/276041?v=4", "gravatar_id": "", "url": "https://api.github.com/users/defuz", "html_url": "https://github.com/defuz", "followers_url": "https://api.github.com/users/defuz/followers", "following_url": "https://api.github.com/users/defuz/following{/other_user}", "gists_url": "https://api.github.com/users/defuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/defuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/defuz/subscriptions", "organizations_url": "https://api.github.com/users/defuz/orgs", "repos_url": "https://api.github.com/users/defuz/repos", "events_url": "https://api.github.com/users/defuz/events{/privacy}", "received_events_url": "https://api.github.com/users/defuz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c1360a77c0f58bc54a898674a9495e25015f964", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c1360a77c0f58bc54a898674a9495e25015f964", "html_url": "https://github.com/rust-lang/rust/commit/0c1360a77c0f58bc54a898674a9495e25015f964"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "da8d7e7bf03fb87a3fc870106ed93bb7275fbb4b", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2ec769709f8bf334b115b1ecbcc0054b9ed351ab/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec769709f8bf334b115b1ecbcc0054b9ed351ab/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=2ec769709f8bf334b115b1ecbcc0054b9ed351ab", "patch": "@@ -23,30 +23,37 @@ use rustfmt::config::Config;\n use std::env;\n use std::fs::{self, File};\n use std::io::{self, Read};\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n \n use getopts::Options;\n \n-// Try to find a project file in the current directory and its parents.\n-fn lookup_project_file() -> io::Result<PathBuf> {\n-    let mut current = try!(env::current_dir());\n+// Try to find a project file in the input file directory and its parents.\n+fn lookup_project_file(input_file: &Path) -> io::Result<PathBuf> {\n+    let mut current = if input_file.is_relative() {\n+        try!(env::current_dir()).join(input_file)\n+    } else {\n+        input_file.to_path_buf()\n+    };\n+\n+    // TODO: We should canonize path to properly handle its parents,\n+    // but `canonicalize` function is unstable now (recently added API)\n+    // current = try!(fs::canonicalize(current));\n+\n     loop {\n+        // if the current directory has no parent, we're done searching\n+        if !current.pop() {\n+            return Err(io::Error::new(io::ErrorKind::NotFound, \"config not found\"));\n+        }\n         let config_file = current.join(\"rustfmt.toml\");\n         if fs::metadata(&config_file).is_ok() {\n             return Ok(config_file);\n-        } else {\n-            current = match current.parent() {\n-                // if the current directory has no parent, we're done searching\n-                None => return Err(io::Error::new(io::ErrorKind::NotFound, \"config not found\")),\n-                Some(path) => path.to_path_buf(),\n-            };\n         }\n     }\n }\n \n // Try to find a project file. If it's found, read it.\n-fn lookup_and_read_project_file() -> io::Result<(PathBuf, String)> {\n-    let path = try!(lookup_project_file());\n+fn lookup_and_read_project_file(input_file: &Path) -> io::Result<(PathBuf, String)> {\n+    let path = try!(lookup_project_file(input_file));\n     let mut file = try!(File::open(&path));\n     let mut toml = String::new();\n     try!(file.read_to_string(&mut toml));\n@@ -59,7 +66,7 @@ fn execute() -> i32 {\n         None => return 1,\n     };\n \n-    let config = match lookup_and_read_project_file() {\n+    let config = match lookup_and_read_project_file(&file) {\n         Ok((path, toml)) => {\n             println!(\"Project config file: {}\", path.display());\n             Config::from_toml(&toml)"}]}