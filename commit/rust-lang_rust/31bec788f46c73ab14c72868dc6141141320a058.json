{"sha": "31bec788f46c73ab14c72868dc6141141320a058", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYmVjNzg4ZjQ2YzczYWIxNGM3Mjg2OGRjNjE0MTE0MTMyMGEwNTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-08T16:12:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-08T16:12:33Z"}, "message": "avoid using the word 'initialized' to talk about that non-reentrant-capable state of the mutex", "tree": {"sha": "f51b52ff63cf9160f406ff019aabcec034b056e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f51b52ff63cf9160f406ff019aabcec034b056e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31bec788f46c73ab14c72868dc6141141320a058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31bec788f46c73ab14c72868dc6141141320a058", "html_url": "https://github.com/rust-lang/rust/commit/31bec788f46c73ab14c72868dc6141141320a058", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31bec788f46c73ab14c72868dc6141141320a058/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "645388583ca47357a6a2e5878a9cde84e2e579d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/645388583ca47357a6a2e5878a9cde84e2e579d3", "html_url": "https://github.com/rust-lang/rust/commit/645388583ca47357a6a2e5878a9cde84e2e579d3"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "4fb367fb6ba524147e9a1806d02eab4759a8d0b6", "filename": "src/libstd/io/lazy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31bec788f46c73ab14c72868dc6141141320a058/src%2Flibstd%2Fio%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31bec788f46c73ab14c72868dc6141141320a058/src%2Flibstd%2Fio%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Flazy.rs?ref=31bec788f46c73ab14c72868dc6141141320a058", "patch": "@@ -15,6 +15,7 @@ use sys_common;\n use sys_common::mutex::Mutex;\n \n pub struct Lazy<T> {\n+    // We never call `lock.init()`, so it is UB to attempt to acquire this mutex reentrantly!\n     lock: Mutex,\n     ptr: Cell<*mut Arc<T>>,\n     init: fn() -> Arc<T>,\n@@ -29,8 +30,6 @@ impl<T: Send + Sync + 'static> Lazy<T> {\n     /// Safety: `init` must not call `get` on the variable that is being\n     /// initialized.\n     pub const unsafe fn new(init: fn() -> Arc<T>) -> Lazy<T> {\n-        // `lock` is never initialized fully, so it is UB to attempt to\n-        // acquire this mutex reentrantly!\n         Lazy {\n             lock: Mutex::new(),\n             ptr: Cell::new(ptr::null_mut()),"}, {"sha": "c3c033dfbc739c4dcafcc57d153841d5739603da", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31bec788f46c73ab14c72868dc6141141320a058/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31bec788f46c73ab14c72868dc6141141320a058/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=31bec788f46c73ab14c72868dc6141141320a058", "patch": "@@ -80,7 +80,7 @@ mod imp {\n \n     static mut ARGC: isize = 0;\n     static mut ARGV: *const *const u8 = ptr::null();\n-    // `ENV_LOCK` is never initialized fully, so it is UB to attempt to\n+    // We never call `ENV_LOCK.init()`, so it is UB to attempt to\n     // acquire this mutex reentrantly!\n     static LOCK: Mutex = Mutex::new();\n "}, {"sha": "08c3e1549784395c59bd924267e26c78f0ea6b1f", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31bec788f46c73ab14c72868dc6141141320a058/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31bec788f46c73ab14c72868dc6141141320a058/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=31bec788f46c73ab14c72868dc6141141320a058", "patch": "@@ -33,7 +33,7 @@ use sys::fd;\n use vec;\n \n const TMPBUF_SZ: usize = 128;\n-// `ENV_LOCK` is never initialized fully, so it is UB to attempt to\n+// We never call `ENV_LOCK.init()`, so it is UB to attempt to\n // acquire this mutex reentrantly!\n static ENV_LOCK: Mutex = Mutex::new();\n "}, {"sha": "76e5df2c8654ae6d6ba91fce1abcf6e74829cd7f", "filename": "src/libstd/sys_common/at_exit_imp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31bec788f46c73ab14c72868dc6141141320a058/src%2Flibstd%2Fsys_common%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31bec788f46c73ab14c72868dc6141141320a058/src%2Flibstd%2Fsys_common%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fat_exit_imp.rs?ref=31bec788f46c73ab14c72868dc6141141320a058", "patch": "@@ -23,7 +23,7 @@ type Queue = Vec<Box<dyn FnBox()>>;\n // on poisoning and this module needs to operate at a lower level than requiring\n // the thread infrastructure to be in place (useful on the borders of\n // initialization/destruction).\n-// `LOCK` is never initialized fully, so it is UB to attempt to\n+// We never call `LOCK.init()`, so it is UB to attempt to\n // acquire this mutex reentrantly!\n static LOCK: Mutex = Mutex::new();\n static mut QUEUE: *mut Queue = ptr::null_mut();"}, {"sha": "c6d531c7a1ac59cbb3b641ea96fc645a3b2f6d2d", "filename": "src/libstd/sys_common/mutex.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31bec788f46c73ab14c72868dc6141141320a058/src%2Flibstd%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31bec788f46c73ab14c72868dc6141141320a058/src%2Flibstd%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmutex.rs?ref=31bec788f46c73ab14c72868dc6141141320a058", "patch": "@@ -32,7 +32,9 @@ impl Mutex {\n     /// Prepare the mutex for use.\n     ///\n     /// This should be called once the mutex is at a stable memory address.\n-    /// Behavior is undefined unless this is called before any other operation.\n+    /// If called, this must be the very first thing that happens to the mutex.\n+    /// Calling it in parallel with or after any operation (including another\n+    /// `init()`) is undefined behavior.\n     #[inline]\n     pub unsafe fn init(&mut self) { self.0.init() }\n "}, {"sha": "bb72cb0930a7f59508870aac5866e7cc4d85f2ca", "filename": "src/libstd/sys_common/thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31bec788f46c73ab14c72868dc6141141320a058/src%2Flibstd%2Fsys_common%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31bec788f46c73ab14c72868dc6141141320a058/src%2Flibstd%2Fsys_common%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread_local.rs?ref=31bec788f46c73ab14c72868dc6141141320a058", "patch": "@@ -161,7 +161,7 @@ impl StaticKey {\n         // Additionally a 0-index of a tls key hasn't been seen on windows, so\n         // we just simplify the whole branch.\n         if imp::requires_synchronized_create() {\n-            // `INIT_LOCK` is never initialized fully, so it is UB to attempt to\n+            // We never call `INIT_LOCK.init()`, so it is UB to attempt to\n             // acquire this mutex reentrantly!\n             static INIT_LOCK: Mutex = Mutex::new();\n             let _guard = INIT_LOCK.lock();"}, {"sha": "61c6084a25023897c4aa27fec6d6745cc4982e6c", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31bec788f46c73ab14c72868dc6141141320a058/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31bec788f46c73ab14c72868dc6141141320a058/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=31bec788f46c73ab14c72868dc6141141320a058", "patch": "@@ -940,7 +940,7 @@ pub struct ThreadId(u64);\n impl ThreadId {\n     // Generate a new unique thread ID.\n     fn new() -> ThreadId {\n-        // `GUARD` is never initialized fully, so it is UB to attempt to\n+        // We never call `GUARD.init()`, so it is UB to attempt to\n         // acquire this mutex reentrantly!\n         static GUARD: mutex::Mutex = mutex::Mutex::new();\n         static mut COUNTER: u64 = 0;"}]}