{"sha": "e0bb75ef69f847c849d35e49d0d172a8708211a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYmI3NWVmNjlmODQ3Yzg0OWQzNWU0OWQwZDE3MmE4NzA4MjExYTE=", "commit": {"author": {"name": "Ana-Maria Mihalache", "email": "mihalacheana.maria@yahoo.com", "date": "2020-04-04T20:25:54Z"}, "committer": {"name": "Ana-Maria Mihalache", "email": "mihalacheana.maria@yahoo.com", "date": "2020-04-07T17:49:14Z"}, "message": "Add EMIT_MIR_FOR_EACH_BIT_WIDTH to tests that need it.", "tree": {"sha": "c77bac12e760bb9bf2f85c13d4105c005ce58bd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c77bac12e760bb9bf2f85c13d4105c005ce58bd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0bb75ef69f847c849d35e49d0d172a8708211a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0bb75ef69f847c849d35e49d0d172a8708211a1", "html_url": "https://github.com/rust-lang/rust/commit/e0bb75ef69f847c849d35e49d0d172a8708211a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0bb75ef69f847c849d35e49d0d172a8708211a1/comments", "author": {"login": "anyska", "id": 13694484, "node_id": "MDQ6VXNlcjEzNjk0NDg0", "avatar_url": "https://avatars.githubusercontent.com/u/13694484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anyska", "html_url": "https://github.com/anyska", "followers_url": "https://api.github.com/users/anyska/followers", "following_url": "https://api.github.com/users/anyska/following{/other_user}", "gists_url": "https://api.github.com/users/anyska/gists{/gist_id}", "starred_url": "https://api.github.com/users/anyska/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anyska/subscriptions", "organizations_url": "https://api.github.com/users/anyska/orgs", "repos_url": "https://api.github.com/users/anyska/repos", "events_url": "https://api.github.com/users/anyska/events{/privacy}", "received_events_url": "https://api.github.com/users/anyska/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anyska", "id": 13694484, "node_id": "MDQ6VXNlcjEzNjk0NDg0", "avatar_url": "https://avatars.githubusercontent.com/u/13694484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anyska", "html_url": "https://github.com/anyska", "followers_url": "https://api.github.com/users/anyska/followers", "following_url": "https://api.github.com/users/anyska/following{/other_user}", "gists_url": "https://api.github.com/users/anyska/gists{/gist_id}", "starred_url": "https://api.github.com/users/anyska/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anyska/subscriptions", "organizations_url": "https://api.github.com/users/anyska/orgs", "repos_url": "https://api.github.com/users/anyska/repos", "events_url": "https://api.github.com/users/anyska/events{/privacy}", "received_events_url": "https://api.github.com/users/anyska/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3", "html_url": "https://github.com/rust-lang/rust/commit/688a4ddd20742f94155ec47fa2c1a96e1e3d78d3"}], "stats": {"total": 2343, "additions": 1855, "deletions": 488}, "files": [{"sha": "4667c4f66b296038570dadacb3af15f47c3a452d", "filename": "src/test/mir-opt/array-index-is-temporary.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -7,6 +7,7 @@ unsafe fn foo(z: *mut usize) -> u32 {\n     99\n }\n \n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR rustc.main.SimplifyCfg-elaborate-drops.after.mir\n fn main() {\n     let mut x = [42, 43, 44];"}, {"sha": "052a335d00be683305616313e4909243385d1870", "filename": "src/test/mir-opt/array-index-is-temporary/32bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -0,0 +1,91 @@\n+// MIR for `main` after SimplifyCfg-elaborate-drops\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/array-index-is-temporary.rs:12:11: 12:11\n+    let mut _1: [u32; 3];                // in scope 0 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n+    let mut _4: &mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n+    let mut _5: u32;                     // in scope 0 at $DIR/array-index-is-temporary.rs:16:12: 16:29\n+    let mut _6: *mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n+    let _7: usize;                       // in scope 0 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n+    let mut _8: usize;                   // in scope 0 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+    let mut _9: bool;                    // in scope 0 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+    scope 1 {\n+        debug x => _1;                   // in scope 1 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n+        let mut _2: usize;               // in scope 1 at $DIR/array-index-is-temporary.rs:14:9: 14:14\n+        scope 2 {\n+            debug y => _2;               // in scope 2 at $DIR/array-index-is-temporary.rs:14:9: 14:14\n+            let _3: *mut usize as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 2 at $DIR/array-index-is-temporary.rs:15:9: 15:10\n+            scope 3 {\n+                debug z => _3;           // in scope 3 at $DIR/array-index-is-temporary.rs:15:9: 15:10\n+                scope 4 {\n+                }\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n+        _1 = [const 42u32, const 43u32, const 44u32]; // bb0[1]: scope 0 at $DIR/array-index-is-temporary.rs:13:17: 13:29\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x0000002a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/array-index-is-temporary.rs:13:18: 13:20\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x0000002b))\n+                                         // mir::Constant\n+                                         // + span: $DIR/array-index-is-temporary.rs:13:22: 13:24\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000002b)) }\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x0000002c))\n+                                         // mir::Constant\n+                                         // + span: $DIR/array-index-is-temporary.rs:13:26: 13:28\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000002c)) }\n+        StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/array-index-is-temporary.rs:14:9: 14:14\n+        _2 = const 1usize;               // bb0[3]: scope 1 at $DIR/array-index-is-temporary.rs:14:17: 14:18\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/array-index-is-temporary.rs:14:17: 14:18\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n+        StorageLive(_3);                 // bb0[4]: scope 2 at $DIR/array-index-is-temporary.rs:15:9: 15:10\n+        StorageLive(_4);                 // bb0[5]: scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n+        _4 = &mut _2;                    // bb0[6]: scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n+        _3 = &raw mut (*_4);             // bb0[7]: scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n+        StorageDead(_4);                 // bb0[8]: scope 2 at $DIR/array-index-is-temporary.rs:15:31: 15:32\n+        StorageLive(_5);                 // bb0[9]: scope 3 at $DIR/array-index-is-temporary.rs:16:12: 16:29\n+        StorageLive(_6);                 // bb0[10]: scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n+        _6 = _3;                         // bb0[11]: scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n+        _5 = const foo(move _6) -> bb1;  // bb0[12]: scope 4 at $DIR/array-index-is-temporary.rs:16:21: 16:27\n+                                         // ty::Const\n+                                         // + ty: unsafe fn(*mut usize) -> u32 {foo}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/array-index-is-temporary.rs:16:21: 16:24\n+                                         // + literal: Const { ty: unsafe fn(*mut usize) -> u32 {foo}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_6);                 // bb1[0]: scope 4 at $DIR/array-index-is-temporary.rs:16:26: 16:27\n+        StorageLive(_7);                 // bb1[1]: scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n+        _7 = _2;                         // bb1[2]: scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n+        _8 = Len(_1);                    // bb1[3]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+        _9 = Lt(_7, _8);                 // bb1[4]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+        assert(move _9, \"index out of bounds: the len is move _8 but the index is _7\") -> bb2; // bb1[5]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+    }\n+\n+    bb2: {\n+        _1[_7] = move _5;                // bb2[0]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:29\n+        StorageDead(_5);                 // bb2[1]: scope 3 at $DIR/array-index-is-temporary.rs:16:28: 16:29\n+        StorageDead(_7);                 // bb2[2]: scope 3 at $DIR/array-index-is-temporary.rs:16:29: 16:30\n+        _0 = ();                         // bb2[3]: scope 0 at $DIR/array-index-is-temporary.rs:12:11: 17:2\n+        StorageDead(_3);                 // bb2[4]: scope 2 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n+        StorageDead(_2);                 // bb2[5]: scope 1 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n+        StorageDead(_1);                 // bb2[6]: scope 0 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n+        return;                          // bb2[7]: scope 0 at $DIR/array-index-is-temporary.rs:17:2: 17:2\n+    }\n+}"}, {"sha": "e180f4496954826796623f43dbb1ba3d697b9184", "filename": "src/test/mir-opt/array-index-is-temporary/64bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "renamed", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -1,91 +1,91 @@\n // MIR for `main` after SimplifyCfg-elaborate-drops\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/array-index-is-temporary.rs:11:11: 11:11\n-    let mut _1: [u32; 3];                // in scope 0 at $DIR/array-index-is-temporary.rs:12:9: 12:14\n-    let mut _4: &mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:14:25: 14:31\n-    let mut _5: u32;                     // in scope 0 at $DIR/array-index-is-temporary.rs:15:12: 15:29\n-    let mut _6: *mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:15:25: 15:26\n-    let _7: usize;                       // in scope 0 at $DIR/array-index-is-temporary.rs:15:7: 15:8\n-    let mut _8: usize;                   // in scope 0 at $DIR/array-index-is-temporary.rs:15:5: 15:9\n-    let mut _9: bool;                    // in scope 0 at $DIR/array-index-is-temporary.rs:15:5: 15:9\n+    let mut _0: ();                      // return place in scope 0 at $DIR/array-index-is-temporary.rs:12:11: 12:11\n+    let mut _1: [u32; 3];                // in scope 0 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n+    let mut _4: &mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n+    let mut _5: u32;                     // in scope 0 at $DIR/array-index-is-temporary.rs:16:12: 16:29\n+    let mut _6: *mut usize;              // in scope 0 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n+    let _7: usize;                       // in scope 0 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n+    let mut _8: usize;                   // in scope 0 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+    let mut _9: bool;                    // in scope 0 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/array-index-is-temporary.rs:12:9: 12:14\n-        let mut _2: usize;               // in scope 1 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n+        debug x => _1;                   // in scope 1 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n+        let mut _2: usize;               // in scope 1 at $DIR/array-index-is-temporary.rs:14:9: 14:14\n         scope 2 {\n-            debug y => _2;               // in scope 2 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n-            let _3: *mut usize as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 2 at $DIR/array-index-is-temporary.rs:14:9: 14:10\n+            debug y => _2;               // in scope 2 at $DIR/array-index-is-temporary.rs:14:9: 14:14\n+            let _3: *mut usize as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 2 at $DIR/array-index-is-temporary.rs:15:9: 15:10\n             scope 3 {\n-                debug z => _3;           // in scope 3 at $DIR/array-index-is-temporary.rs:14:9: 14:10\n+                debug z => _3;           // in scope 3 at $DIR/array-index-is-temporary.rs:15:9: 15:10\n                 scope 4 {\n                 }\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/array-index-is-temporary.rs:12:9: 12:14\n-        _1 = [const 42u32, const 43u32, const 44u32]; // bb0[1]: scope 0 at $DIR/array-index-is-temporary.rs:12:17: 12:29\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n+        _1 = [const 42u32, const 43u32, const 44u32]; // bb0[1]: scope 0 at $DIR/array-index-is-temporary.rs:13:17: 13:29\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x0000002a))\n                                          // mir::Constant\n-                                         // + span: $DIR/array-index-is-temporary.rs:12:18: 12:20\n+                                         // + span: $DIR/array-index-is-temporary.rs:13:18: 13:20\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x0000002b))\n                                          // mir::Constant\n-                                         // + span: $DIR/array-index-is-temporary.rs:12:22: 12:24\n+                                         // + span: $DIR/array-index-is-temporary.rs:13:22: 13:24\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002b)) }\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x0000002c))\n                                          // mir::Constant\n-                                         // + span: $DIR/array-index-is-temporary.rs:12:26: 12:28\n+                                         // + span: $DIR/array-index-is-temporary.rs:13:26: 13:28\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002c)) }\n-        StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/array-index-is-temporary.rs:13:9: 13:14\n-        _2 = const 1usize;               // bb0[3]: scope 1 at $DIR/array-index-is-temporary.rs:13:17: 13:18\n+        StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/array-index-is-temporary.rs:14:9: 14:14\n+        _2 = const 1usize;               // bb0[3]: scope 1 at $DIR/array-index-is-temporary.rs:14:17: 14:18\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000001))\n                                          // mir::Constant\n-                                         // + span: $DIR/array-index-is-temporary.rs:13:17: 13:18\n+                                         // + span: $DIR/array-index-is-temporary.rs:14:17: 14:18\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n-        StorageLive(_3);                 // bb0[4]: scope 2 at $DIR/array-index-is-temporary.rs:14:9: 14:10\n-        StorageLive(_4);                 // bb0[5]: scope 2 at $DIR/array-index-is-temporary.rs:14:25: 14:31\n-        _4 = &mut _2;                    // bb0[6]: scope 2 at $DIR/array-index-is-temporary.rs:14:25: 14:31\n-        _3 = &raw mut (*_4);             // bb0[7]: scope 2 at $DIR/array-index-is-temporary.rs:14:25: 14:31\n-        StorageDead(_4);                 // bb0[8]: scope 2 at $DIR/array-index-is-temporary.rs:14:31: 14:32\n-        StorageLive(_5);                 // bb0[9]: scope 3 at $DIR/array-index-is-temporary.rs:15:12: 15:29\n-        StorageLive(_6);                 // bb0[10]: scope 4 at $DIR/array-index-is-temporary.rs:15:25: 15:26\n-        _6 = _3;                         // bb0[11]: scope 4 at $DIR/array-index-is-temporary.rs:15:25: 15:26\n-        _5 = const foo(move _6) -> bb1;  // bb0[12]: scope 4 at $DIR/array-index-is-temporary.rs:15:21: 15:27\n+        StorageLive(_3);                 // bb0[4]: scope 2 at $DIR/array-index-is-temporary.rs:15:9: 15:10\n+        StorageLive(_4);                 // bb0[5]: scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n+        _4 = &mut _2;                    // bb0[6]: scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n+        _3 = &raw mut (*_4);             // bb0[7]: scope 2 at $DIR/array-index-is-temporary.rs:15:25: 15:31\n+        StorageDead(_4);                 // bb0[8]: scope 2 at $DIR/array-index-is-temporary.rs:15:31: 15:32\n+        StorageLive(_5);                 // bb0[9]: scope 3 at $DIR/array-index-is-temporary.rs:16:12: 16:29\n+        StorageLive(_6);                 // bb0[10]: scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n+        _6 = _3;                         // bb0[11]: scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n+        _5 = const foo(move _6) -> bb1;  // bb0[12]: scope 4 at $DIR/array-index-is-temporary.rs:16:21: 16:27\n                                          // ty::Const\n                                          // + ty: unsafe fn(*mut usize) -> u32 {foo}\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n-                                         // + span: $DIR/array-index-is-temporary.rs:15:21: 15:24\n+                                         // + span: $DIR/array-index-is-temporary.rs:16:21: 16:24\n                                          // + literal: Const { ty: unsafe fn(*mut usize) -> u32 {foo}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        StorageDead(_6);                 // bb1[0]: scope 4 at $DIR/array-index-is-temporary.rs:15:26: 15:27\n-        StorageLive(_7);                 // bb1[1]: scope 3 at $DIR/array-index-is-temporary.rs:15:7: 15:8\n-        _7 = _2;                         // bb1[2]: scope 3 at $DIR/array-index-is-temporary.rs:15:7: 15:8\n-        _8 = Len(_1);                    // bb1[3]: scope 3 at $DIR/array-index-is-temporary.rs:15:5: 15:9\n-        _9 = Lt(_7, _8);                 // bb1[4]: scope 3 at $DIR/array-index-is-temporary.rs:15:5: 15:9\n-        assert(move _9, \"index out of bounds: the len is move _8 but the index is _7\") -> bb2; // bb1[5]: scope 3 at $DIR/array-index-is-temporary.rs:15:5: 15:9\n+        StorageDead(_6);                 // bb1[0]: scope 4 at $DIR/array-index-is-temporary.rs:16:26: 16:27\n+        StorageLive(_7);                 // bb1[1]: scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n+        _7 = _2;                         // bb1[2]: scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n+        _8 = Len(_1);                    // bb1[3]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+        _9 = Lt(_7, _8);                 // bb1[4]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+        assert(move _9, \"index out of bounds: the len is move _8 but the index is _7\") -> bb2; // bb1[5]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n     }\n \n     bb2: {\n-        _1[_7] = move _5;                // bb2[0]: scope 3 at $DIR/array-index-is-temporary.rs:15:5: 15:29\n-        StorageDead(_5);                 // bb2[1]: scope 3 at $DIR/array-index-is-temporary.rs:15:28: 15:29\n-        StorageDead(_7);                 // bb2[2]: scope 3 at $DIR/array-index-is-temporary.rs:15:29: 15:30\n-        _0 = ();                         // bb2[3]: scope 0 at $DIR/array-index-is-temporary.rs:11:11: 16:2\n-        StorageDead(_3);                 // bb2[4]: scope 2 at $DIR/array-index-is-temporary.rs:16:1: 16:2\n-        StorageDead(_2);                 // bb2[5]: scope 1 at $DIR/array-index-is-temporary.rs:16:1: 16:2\n-        StorageDead(_1);                 // bb2[6]: scope 0 at $DIR/array-index-is-temporary.rs:16:1: 16:2\n-        return;                          // bb2[7]: scope 0 at $DIR/array-index-is-temporary.rs:16:2: 16:2\n+        _1[_7] = move _5;                // bb2[0]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:29\n+        StorageDead(_5);                 // bb2[1]: scope 3 at $DIR/array-index-is-temporary.rs:16:28: 16:29\n+        StorageDead(_7);                 // bb2[2]: scope 3 at $DIR/array-index-is-temporary.rs:16:29: 16:30\n+        _0 = ();                         // bb2[3]: scope 0 at $DIR/array-index-is-temporary.rs:12:11: 17:2\n+        StorageDead(_3);                 // bb2[4]: scope 2 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n+        StorageDead(_2);                 // bb2[5]: scope 1 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n+        StorageDead(_1);                 // bb2[6]: scope 0 at $DIR/array-index-is-temporary.rs:17:1: 17:2\n+        return;                          // bb2[7]: scope 0 at $DIR/array-index-is-temporary.rs:17:2: 17:2\n     }\n }", "previous_filename": "src/test/mir-opt/array-index-is-temporary/rustc.main.SimplifyCfg-elaborate-drops.after.mir"}, {"sha": "aa1c7459ea155f542fe8ba4a34dd2989eff762ed", "filename": "src/test/mir-opt/combine_array_len.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fcombine_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fcombine_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len.rs?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -1,3 +1,4 @@\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR rustc.norm2.InstCombine.diff\n \n fn norm2(x: [f32; 2]) -> f32 {"}, {"sha": "7ec1c9ac637b35c6d71ded5b565bfa41e5043002", "filename": "src/test/mir-opt/combine_array_len/32bit/rustc.norm2.InstCombine.diff", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F32bit%2Frustc.norm2.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F32bit%2Frustc.norm2.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F32bit%2Frustc.norm2.InstCombine.diff?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -0,0 +1,101 @@\n+- // MIR for `norm2` before InstCombine\n++ // MIR for `norm2` after InstCombine\n+  \n+  fn norm2(_1: [f32; 2]) -> f32 {\n+      debug x => _1;                       // in scope 0 at $DIR/combine_array_len.rs:4:10: 4:11\n+      let mut _0: f32;                     // return place in scope 0 at $DIR/combine_array_len.rs:4:26: 4:29\n+      let _2: f32;                         // in scope 0 at $DIR/combine_array_len.rs:5:9: 5:10\n+      let _3: usize;                       // in scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n+      let mut _4: usize;                   // in scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+      let mut _5: bool;                    // in scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+      let _7: usize;                       // in scope 0 at $DIR/combine_array_len.rs:6:15: 6:16\n+      let mut _8: usize;                   // in scope 0 at $DIR/combine_array_len.rs:6:13: 6:17\n+      let mut _9: bool;                    // in scope 0 at $DIR/combine_array_len.rs:6:13: 6:17\n+      let mut _10: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:5: 7:8\n+      let mut _11: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:5: 7:6\n+      let mut _12: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:7: 7:8\n+      let mut _13: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:11: 7:14\n+      let mut _14: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:11: 7:12\n+      let mut _15: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:13: 7:14\n+      scope 1 {\n+          debug a => _2;                   // in scope 1 at $DIR/combine_array_len.rs:5:9: 5:10\n+          let _6: f32;                     // in scope 1 at $DIR/combine_array_len.rs:6:9: 6:10\n+          scope 2 {\n+              debug b => _6;               // in scope 2 at $DIR/combine_array_len.rs:6:9: 6:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/combine_array_len.rs:5:9: 5:10\n+          StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n+          _3 = const 0usize;               // bb0[2]: scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x00000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/combine_array_len.rs:5:15: 5:16\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n+-         _4 = Len(_1);                    // bb0[3]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n++         _4 = const 2usize;               // bb0[3]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x00000002))\n++                                          // mir::Constant\n++                                          // + span: $DIR/combine_array_len.rs:5:13: 5:17\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n+          _5 = Lt(_3, _4);                 // bb0[4]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+          assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[5]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+      }\n+  \n+      bb1: {\n+          _2 = _1[_3];                     // bb1[0]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+          StorageDead(_3);                 // bb1[1]: scope 0 at $DIR/combine_array_len.rs:5:17: 5:18\n+          StorageLive(_6);                 // bb1[2]: scope 1 at $DIR/combine_array_len.rs:6:9: 6:10\n+          StorageLive(_7);                 // bb1[3]: scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n+          _7 = const 1usize;               // bb1[4]: scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/combine_array_len.rs:6:15: 6:16\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n+-         _8 = Len(_1);                    // bb1[5]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n++         _8 = const 2usize;               // bb1[5]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x00000002))\n++                                          // mir::Constant\n++                                          // + span: $DIR/combine_array_len.rs:6:13: 6:17\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n+          _9 = Lt(_7, _8);                 // bb1[6]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+          assert(move _9, \"index out of bounds: the len is move _8 but the index is _7\") -> bb2; // bb1[7]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+      }\n+  \n+      bb2: {\n+          _6 = _1[_7];                     // bb2[0]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+          StorageDead(_7);                 // bb2[1]: scope 1 at $DIR/combine_array_len.rs:6:17: 6:18\n+          StorageLive(_10);                // bb2[2]: scope 2 at $DIR/combine_array_len.rs:7:5: 7:8\n+          StorageLive(_11);                // bb2[3]: scope 2 at $DIR/combine_array_len.rs:7:5: 7:6\n+          _11 = _2;                        // bb2[4]: scope 2 at $DIR/combine_array_len.rs:7:5: 7:6\n+          StorageLive(_12);                // bb2[5]: scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n+          _12 = _2;                        // bb2[6]: scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n+          _10 = Mul(move _11, move _12);   // bb2[7]: scope 2 at $DIR/combine_array_len.rs:7:5: 7:8\n+          StorageDead(_12);                // bb2[8]: scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n+          StorageDead(_11);                // bb2[9]: scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n+          StorageLive(_13);                // bb2[10]: scope 2 at $DIR/combine_array_len.rs:7:11: 7:14\n+          StorageLive(_14);                // bb2[11]: scope 2 at $DIR/combine_array_len.rs:7:11: 7:12\n+          _14 = _6;                        // bb2[12]: scope 2 at $DIR/combine_array_len.rs:7:11: 7:12\n+          StorageLive(_15);                // bb2[13]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          _15 = _6;                        // bb2[14]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          _13 = Mul(move _14, move _15);   // bb2[15]: scope 2 at $DIR/combine_array_len.rs:7:11: 7:14\n+          StorageDead(_15);                // bb2[16]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          StorageDead(_14);                // bb2[17]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          _0 = Add(move _10, move _13);    // bb2[18]: scope 2 at $DIR/combine_array_len.rs:7:5: 7:14\n+          StorageDead(_13);                // bb2[19]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          StorageDead(_10);                // bb2[20]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          StorageDead(_6);                 // bb2[21]: scope 1 at $DIR/combine_array_len.rs:8:1: 8:2\n+          StorageDead(_2);                 // bb2[22]: scope 0 at $DIR/combine_array_len.rs:8:1: 8:2\n+          return;                          // bb2[23]: scope 0 at $DIR/combine_array_len.rs:8:2: 8:2\n+      }\n+  }\n+  "}, {"sha": "0bab28738d8acbc4acc0e9dde3aef9d92fba1510", "filename": "src/test/mir-opt/combine_array_len/64bit/rustc.norm2.InstCombine.diff", "status": "renamed", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F64bit%2Frustc.norm2.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F64bit%2Frustc.norm2.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F64bit%2Frustc.norm2.InstCombine.diff?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -2,100 +2,100 @@\n + // MIR for `norm2` after InstCombine\n   \n   fn norm2(_1: [f32; 2]) -> f32 {\n-      debug x => _1;                       // in scope 0 at $DIR/combine_array_len.rs:3:10: 3:11\n-      let mut _0: f32;                     // return place in scope 0 at $DIR/combine_array_len.rs:3:26: 3:29\n-      let _2: f32;                         // in scope 0 at $DIR/combine_array_len.rs:4:9: 4:10\n-      let _3: usize;                       // in scope 0 at $DIR/combine_array_len.rs:4:15: 4:16\n-      let mut _4: usize;                   // in scope 0 at $DIR/combine_array_len.rs:4:13: 4:17\n-      let mut _5: bool;                    // in scope 0 at $DIR/combine_array_len.rs:4:13: 4:17\n-      let _7: usize;                       // in scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n-      let mut _8: usize;                   // in scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-      let mut _9: bool;                    // in scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-      let mut _10: f32;                    // in scope 0 at $DIR/combine_array_len.rs:6:5: 6:8\n-      let mut _11: f32;                    // in scope 0 at $DIR/combine_array_len.rs:6:5: 6:6\n-      let mut _12: f32;                    // in scope 0 at $DIR/combine_array_len.rs:6:7: 6:8\n-      let mut _13: f32;                    // in scope 0 at $DIR/combine_array_len.rs:6:11: 6:14\n-      let mut _14: f32;                    // in scope 0 at $DIR/combine_array_len.rs:6:11: 6:12\n-      let mut _15: f32;                    // in scope 0 at $DIR/combine_array_len.rs:6:13: 6:14\n+      debug x => _1;                       // in scope 0 at $DIR/combine_array_len.rs:4:10: 4:11\n+      let mut _0: f32;                     // return place in scope 0 at $DIR/combine_array_len.rs:4:26: 4:29\n+      let _2: f32;                         // in scope 0 at $DIR/combine_array_len.rs:5:9: 5:10\n+      let _3: usize;                       // in scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n+      let mut _4: usize;                   // in scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+      let mut _5: bool;                    // in scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+      let _7: usize;                       // in scope 0 at $DIR/combine_array_len.rs:6:15: 6:16\n+      let mut _8: usize;                   // in scope 0 at $DIR/combine_array_len.rs:6:13: 6:17\n+      let mut _9: bool;                    // in scope 0 at $DIR/combine_array_len.rs:6:13: 6:17\n+      let mut _10: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:5: 7:8\n+      let mut _11: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:5: 7:6\n+      let mut _12: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:7: 7:8\n+      let mut _13: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:11: 7:14\n+      let mut _14: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:11: 7:12\n+      let mut _15: f32;                    // in scope 0 at $DIR/combine_array_len.rs:7:13: 7:14\n       scope 1 {\n-          debug a => _2;                   // in scope 1 at $DIR/combine_array_len.rs:4:9: 4:10\n-          let _6: f32;                     // in scope 1 at $DIR/combine_array_len.rs:5:9: 5:10\n+          debug a => _2;                   // in scope 1 at $DIR/combine_array_len.rs:5:9: 5:10\n+          let _6: f32;                     // in scope 1 at $DIR/combine_array_len.rs:6:9: 6:10\n           scope 2 {\n-              debug b => _6;               // in scope 2 at $DIR/combine_array_len.rs:5:9: 5:10\n+              debug b => _6;               // in scope 2 at $DIR/combine_array_len.rs:6:9: 6:10\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/combine_array_len.rs:4:9: 4:10\n-          StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/combine_array_len.rs:4:15: 4:16\n-          _3 = const 0usize;               // bb0[2]: scope 0 at $DIR/combine_array_len.rs:4:15: 4:16\n+          StorageLive(_2);                 // bb0[0]: scope 0 at $DIR/combine_array_len.rs:5:9: 5:10\n+          StorageLive(_3);                 // bb0[1]: scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n+          _3 = const 0usize;               // bb0[2]: scope 0 at $DIR/combine_array_len.rs:5:15: 5:16\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000000))\n                                            // mir::Constant\n-                                           // + span: $DIR/combine_array_len.rs:4:15: 4:16\n+                                           // + span: $DIR/combine_array_len.rs:5:15: 5:16\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n--         _4 = Len(_1);                    // bb0[3]: scope 0 at $DIR/combine_array_len.rs:4:13: 4:17\n-+         _4 = const 2usize;               // bb0[3]: scope 0 at $DIR/combine_array_len.rs:4:13: 4:17\n+-         _4 = Len(_1);                    // bb0[3]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n++         _4 = const 2usize;               // bb0[3]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n +                                          // ty::Const\n +                                          // + ty: usize\n +                                          // + val: Value(Scalar(0x0000000000000002))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/combine_array_len.rs:4:13: 4:17\n++                                          // + span: $DIR/combine_array_len.rs:5:13: 5:17\n +                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n-          _5 = Lt(_3, _4);                 // bb0[4]: scope 0 at $DIR/combine_array_len.rs:4:13: 4:17\n-          assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[5]: scope 0 at $DIR/combine_array_len.rs:4:13: 4:17\n+          _5 = Lt(_3, _4);                 // bb0[4]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+          assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[5]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n       }\n   \n       bb1: {\n-          _2 = _1[_3];                     // bb1[0]: scope 0 at $DIR/combine_array_len.rs:4:13: 4:17\n-          StorageDead(_3);                 // bb1[1]: scope 0 at $DIR/combine_array_len.rs:4:17: 4:18\n-          StorageLive(_6);                 // bb1[2]: scope 1 at $DIR/combine_array_len.rs:5:9: 5:10\n-          StorageLive(_7);                 // bb1[3]: scope 1 at $DIR/combine_array_len.rs:5:15: 5:16\n-          _7 = const 1usize;               // bb1[4]: scope 1 at $DIR/combine_array_len.rs:5:15: 5:16\n+          _2 = _1[_3];                     // bb1[0]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+          StorageDead(_3);                 // bb1[1]: scope 0 at $DIR/combine_array_len.rs:5:17: 5:18\n+          StorageLive(_6);                 // bb1[2]: scope 1 at $DIR/combine_array_len.rs:6:9: 6:10\n+          StorageLive(_7);                 // bb1[3]: scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n+          _7 = const 1usize;               // bb1[4]: scope 1 at $DIR/combine_array_len.rs:6:15: 6:16\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000001))\n                                            // mir::Constant\n-                                           // + span: $DIR/combine_array_len.rs:5:15: 5:16\n+                                           // + span: $DIR/combine_array_len.rs:6:15: 6:16\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n--         _8 = Len(_1);                    // bb1[5]: scope 1 at $DIR/combine_array_len.rs:5:13: 5:17\n-+         _8 = const 2usize;               // bb1[5]: scope 1 at $DIR/combine_array_len.rs:5:13: 5:17\n+-         _8 = Len(_1);                    // bb1[5]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n++         _8 = const 2usize;               // bb1[5]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n +                                          // ty::Const\n +                                          // + ty: usize\n +                                          // + val: Value(Scalar(0x0000000000000002))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/combine_array_len.rs:5:13: 5:17\n++                                          // + span: $DIR/combine_array_len.rs:6:13: 6:17\n +                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n-          _9 = Lt(_7, _8);                 // bb1[6]: scope 1 at $DIR/combine_array_len.rs:5:13: 5:17\n-          assert(move _9, \"index out of bounds: the len is move _8 but the index is _7\") -> bb2; // bb1[7]: scope 1 at $DIR/combine_array_len.rs:5:13: 5:17\n+          _9 = Lt(_7, _8);                 // bb1[6]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+          assert(move _9, \"index out of bounds: the len is move _8 but the index is _7\") -> bb2; // bb1[7]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n       }\n   \n       bb2: {\n-          _6 = _1[_7];                     // bb2[0]: scope 1 at $DIR/combine_array_len.rs:5:13: 5:17\n-          StorageDead(_7);                 // bb2[1]: scope 1 at $DIR/combine_array_len.rs:5:17: 5:18\n-          StorageLive(_10);                // bb2[2]: scope 2 at $DIR/combine_array_len.rs:6:5: 6:8\n-          StorageLive(_11);                // bb2[3]: scope 2 at $DIR/combine_array_len.rs:6:5: 6:6\n-          _11 = _2;                        // bb2[4]: scope 2 at $DIR/combine_array_len.rs:6:5: 6:6\n-          StorageLive(_12);                // bb2[5]: scope 2 at $DIR/combine_array_len.rs:6:7: 6:8\n-          _12 = _2;                        // bb2[6]: scope 2 at $DIR/combine_array_len.rs:6:7: 6:8\n-          _10 = Mul(move _11, move _12);   // bb2[7]: scope 2 at $DIR/combine_array_len.rs:6:5: 6:8\n-          StorageDead(_12);                // bb2[8]: scope 2 at $DIR/combine_array_len.rs:6:7: 6:8\n-          StorageDead(_11);                // bb2[9]: scope 2 at $DIR/combine_array_len.rs:6:7: 6:8\n-          StorageLive(_13);                // bb2[10]: scope 2 at $DIR/combine_array_len.rs:6:11: 6:14\n-          StorageLive(_14);                // bb2[11]: scope 2 at $DIR/combine_array_len.rs:6:11: 6:12\n-          _14 = _6;                        // bb2[12]: scope 2 at $DIR/combine_array_len.rs:6:11: 6:12\n-          StorageLive(_15);                // bb2[13]: scope 2 at $DIR/combine_array_len.rs:6:13: 6:14\n-          _15 = _6;                        // bb2[14]: scope 2 at $DIR/combine_array_len.rs:6:13: 6:14\n-          _13 = Mul(move _14, move _15);   // bb2[15]: scope 2 at $DIR/combine_array_len.rs:6:11: 6:14\n-          StorageDead(_15);                // bb2[16]: scope 2 at $DIR/combine_array_len.rs:6:13: 6:14\n-          StorageDead(_14);                // bb2[17]: scope 2 at $DIR/combine_array_len.rs:6:13: 6:14\n-          _0 = Add(move _10, move _13);    // bb2[18]: scope 2 at $DIR/combine_array_len.rs:6:5: 6:14\n-          StorageDead(_13);                // bb2[19]: scope 2 at $DIR/combine_array_len.rs:6:13: 6:14\n-          StorageDead(_10);                // bb2[20]: scope 2 at $DIR/combine_array_len.rs:6:13: 6:14\n-          StorageDead(_6);                 // bb2[21]: scope 1 at $DIR/combine_array_len.rs:7:1: 7:2\n-          StorageDead(_2);                 // bb2[22]: scope 0 at $DIR/combine_array_len.rs:7:1: 7:2\n-          return;                          // bb2[23]: scope 0 at $DIR/combine_array_len.rs:7:2: 7:2\n+          _6 = _1[_7];                     // bb2[0]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+          StorageDead(_7);                 // bb2[1]: scope 1 at $DIR/combine_array_len.rs:6:17: 6:18\n+          StorageLive(_10);                // bb2[2]: scope 2 at $DIR/combine_array_len.rs:7:5: 7:8\n+          StorageLive(_11);                // bb2[3]: scope 2 at $DIR/combine_array_len.rs:7:5: 7:6\n+          _11 = _2;                        // bb2[4]: scope 2 at $DIR/combine_array_len.rs:7:5: 7:6\n+          StorageLive(_12);                // bb2[5]: scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n+          _12 = _2;                        // bb2[6]: scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n+          _10 = Mul(move _11, move _12);   // bb2[7]: scope 2 at $DIR/combine_array_len.rs:7:5: 7:8\n+          StorageDead(_12);                // bb2[8]: scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n+          StorageDead(_11);                // bb2[9]: scope 2 at $DIR/combine_array_len.rs:7:7: 7:8\n+          StorageLive(_13);                // bb2[10]: scope 2 at $DIR/combine_array_len.rs:7:11: 7:14\n+          StorageLive(_14);                // bb2[11]: scope 2 at $DIR/combine_array_len.rs:7:11: 7:12\n+          _14 = _6;                        // bb2[12]: scope 2 at $DIR/combine_array_len.rs:7:11: 7:12\n+          StorageLive(_15);                // bb2[13]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          _15 = _6;                        // bb2[14]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          _13 = Mul(move _14, move _15);   // bb2[15]: scope 2 at $DIR/combine_array_len.rs:7:11: 7:14\n+          StorageDead(_15);                // bb2[16]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          StorageDead(_14);                // bb2[17]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          _0 = Add(move _10, move _13);    // bb2[18]: scope 2 at $DIR/combine_array_len.rs:7:5: 7:14\n+          StorageDead(_13);                // bb2[19]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          StorageDead(_10);                // bb2[20]: scope 2 at $DIR/combine_array_len.rs:7:13: 7:14\n+          StorageDead(_6);                 // bb2[21]: scope 1 at $DIR/combine_array_len.rs:8:1: 8:2\n+          StorageDead(_2);                 // bb2[22]: scope 0 at $DIR/combine_array_len.rs:8:1: 8:2\n+          return;                          // bb2[23]: scope 0 at $DIR/combine_array_len.rs:8:2: 8:2\n       }\n   }\n   ", "previous_filename": "src/test/mir-opt/combine_array_len/rustc.norm2.InstCombine.diff"}, {"sha": "9301e6f5d0393fad945865a503403a5bfcfe7793", "filename": "src/test/mir-opt/const_prop/array_index.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.rs?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -1,5 +1,6 @@\n-// EMIT_MIR rustc.main.ConstProp.diff\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n \n+// EMIT_MIR rustc.main.ConstProp.diff\n fn main() {\n     let x: u32 = [0, 1, 2, 3][2];\n }"}, {"sha": "f956ef82707bc0a776165769ba02158195d9e1f5", "filename": "src/test/mir-opt/const_prop/array_index/32bit/rustc.main.ConstProp.diff", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F32bit%2Frustc.main.ConstProp.diff?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -0,0 +1,92 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/array_index.rs:4:11: 4:11\n+      let _1: u32 as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/array_index.rs:5:9: 5:10\n+      let mut _2: [u32; 4];                // in scope 0 at $DIR/array_index.rs:5:18: 5:30\n+      let _3: usize;                       // in scope 0 at $DIR/array_index.rs:5:31: 5:32\n+      let mut _4: usize;                   // in scope 0 at $DIR/array_index.rs:5:18: 5:33\n+      let mut _5: bool;                    // in scope 0 at $DIR/array_index.rs:5:18: 5:33\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/array_index.rs:5:9: 5:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/array_index.rs:5:9: 5:10\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/array_index.rs:5:18: 5:30\n+          _2 = [const 0u32, const 1u32, const 2u32, const 3u32]; // bb0[2]: scope 0 at $DIR/array_index.rs:5:18: 5:30\n+                                           // ty::Const\n+                                           // + ty: u32\n+                                           // + val: Value(Scalar(0x00000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/array_index.rs:5:19: 5:20\n+                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n+                                           // ty::Const\n+                                           // + ty: u32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/array_index.rs:5:22: 5:23\n+                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n+                                           // ty::Const\n+                                           // + ty: u32\n+                                           // + val: Value(Scalar(0x00000002))\n+                                           // mir::Constant\n+                                           // + span: $DIR/array_index.rs:5:25: 5:26\n+                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+                                           // ty::Const\n+                                           // + ty: u32\n+                                           // + val: Value(Scalar(0x00000003))\n+                                           // mir::Constant\n+                                           // + span: $DIR/array_index.rs:5:28: 5:29\n+                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n+          StorageLive(_3);                 // bb0[3]: scope 0 at $DIR/array_index.rs:5:31: 5:32\n+          _3 = const 2usize;               // bb0[4]: scope 0 at $DIR/array_index.rs:5:31: 5:32\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x00000002))\n+                                           // mir::Constant\n+                                           // + span: $DIR/array_index.rs:5:31: 5:32\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n+          _4 = const 4usize;               // bb0[5]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x00000004))\n+                                           // mir::Constant\n+                                           // + span: $DIR/array_index.rs:5:18: 5:33\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000004)) }\n+-         _5 = Lt(_3, _4);                 // bb0[6]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n+-         assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n++         _5 = const true;                 // bb0[6]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/array_index.rs:5:18: 5:33\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++         assert(const true, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/array_index.rs:5:18: 5:33\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+      }\n+  \n+      bb1: {\n+-         _1 = _2[_3];                     // bb1[0]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n++         _1 = const 2u32;                 // bb1[0]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n++                                          // ty::Const\n++                                          // + ty: u32\n++                                          // + val: Value(Scalar(0x00000002))\n++                                          // mir::Constant\n++                                          // + span: $DIR/array_index.rs:5:18: 5:33\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+          StorageDead(_3);                 // bb1[1]: scope 0 at $DIR/array_index.rs:5:33: 5:34\n+          StorageDead(_2);                 // bb1[2]: scope 0 at $DIR/array_index.rs:5:33: 5:34\n+          _0 = ();                         // bb1[3]: scope 0 at $DIR/array_index.rs:4:11: 6:2\n+          StorageDead(_1);                 // bb1[4]: scope 0 at $DIR/array_index.rs:6:1: 6:2\n+          return;                          // bb1[5]: scope 0 at $DIR/array_index.rs:6:2: 6:2\n+      }\n+  }\n+  "}, {"sha": "c336d6e66ae4d80111da4d909339d79a8a8cbbb6", "filename": "src/test/mir-opt/const_prop/array_index/64bit/rustc.main.ConstProp.diff", "status": "renamed", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F64bit%2Frustc.main.ConstProp.diff?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -2,91 +2,91 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/array_index.rs:3:11: 3:11\n-      let _1: u32 as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/array_index.rs:4:9: 4:10\n-      let mut _2: [u32; 4];                // in scope 0 at $DIR/array_index.rs:4:18: 4:30\n-      let _3: usize;                       // in scope 0 at $DIR/array_index.rs:4:31: 4:32\n-      let mut _4: usize;                   // in scope 0 at $DIR/array_index.rs:4:18: 4:33\n-      let mut _5: bool;                    // in scope 0 at $DIR/array_index.rs:4:18: 4:33\n+      let mut _0: ();                      // return place in scope 0 at $DIR/array_index.rs:4:11: 4:11\n+      let _1: u32 as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/array_index.rs:5:9: 5:10\n+      let mut _2: [u32; 4];                // in scope 0 at $DIR/array_index.rs:5:18: 5:30\n+      let _3: usize;                       // in scope 0 at $DIR/array_index.rs:5:31: 5:32\n+      let mut _4: usize;                   // in scope 0 at $DIR/array_index.rs:5:18: 5:33\n+      let mut _5: bool;                    // in scope 0 at $DIR/array_index.rs:5:18: 5:33\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/array_index.rs:4:9: 4:10\n+          debug x => _1;                   // in scope 1 at $DIR/array_index.rs:5:9: 5:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/array_index.rs:4:9: 4:10\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/array_index.rs:4:18: 4:30\n-          _2 = [const 0u32, const 1u32, const 2u32, const 3u32]; // bb0[2]: scope 0 at $DIR/array_index.rs:4:18: 4:30\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/array_index.rs:5:9: 5:10\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/array_index.rs:5:18: 5:30\n+          _2 = [const 0u32, const 1u32, const 2u32, const 3u32]; // bb0[2]: scope 0 at $DIR/array_index.rs:5:18: 5:30\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x00000000))\n                                            // mir::Constant\n-                                           // + span: $DIR/array_index.rs:4:19: 4:20\n+                                           // + span: $DIR/array_index.rs:5:19: 5:20\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n-                                           // + span: $DIR/array_index.rs:4:22: 4:23\n+                                           // + span: $DIR/array_index.rs:5:22: 5:23\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x00000002))\n                                            // mir::Constant\n-                                           // + span: $DIR/array_index.rs:4:25: 4:26\n+                                           // + span: $DIR/array_index.rs:5:25: 5:26\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x00000003))\n                                            // mir::Constant\n-                                           // + span: $DIR/array_index.rs:4:28: 4:29\n+                                           // + span: $DIR/array_index.rs:5:28: 5:29\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x00000003)) }\n-          StorageLive(_3);                 // bb0[3]: scope 0 at $DIR/array_index.rs:4:31: 4:32\n-          _3 = const 2usize;               // bb0[4]: scope 0 at $DIR/array_index.rs:4:31: 4:32\n+          StorageLive(_3);                 // bb0[3]: scope 0 at $DIR/array_index.rs:5:31: 5:32\n+          _3 = const 2usize;               // bb0[4]: scope 0 at $DIR/array_index.rs:5:31: 5:32\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000002))\n                                            // mir::Constant\n-                                           // + span: $DIR/array_index.rs:4:31: 4:32\n+                                           // + span: $DIR/array_index.rs:5:31: 5:32\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n-          _4 = const 4usize;               // bb0[5]: scope 0 at $DIR/array_index.rs:4:18: 4:33\n+          _4 = const 4usize;               // bb0[5]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000004))\n                                            // mir::Constant\n-                                           // + span: $DIR/array_index.rs:4:18: 4:33\n+                                           // + span: $DIR/array_index.rs:5:18: 5:33\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000004)) }\n--         _5 = Lt(_3, _4);                 // bb0[6]: scope 0 at $DIR/array_index.rs:4:18: 4:33\n--         assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:4:18: 4:33\n-+         _5 = const true;                 // bb0[6]: scope 0 at $DIR/array_index.rs:4:18: 4:33\n+-         _5 = Lt(_3, _4);                 // bb0[6]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n+-         assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n++         _5 = const true;                 // bb0[6]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/array_index.rs:4:18: 4:33\n++                                          // + span: $DIR/array_index.rs:5:18: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:4:18: 4:33\n++         assert(const true, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/array_index.rs:4:18: 4:33\n++                                          // + span: $DIR/array_index.rs:5:18: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n       }\n   \n       bb1: {\n--         _1 = _2[_3];                     // bb1[0]: scope 0 at $DIR/array_index.rs:4:18: 4:33\n-+         _1 = const 2u32;                 // bb1[0]: scope 0 at $DIR/array_index.rs:4:18: 4:33\n+-         _1 = _2[_3];                     // bb1[0]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n++         _1 = const 2u32;                 // bb1[0]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x00000002))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/array_index.rs:4:18: 4:33\n++                                          // + span: $DIR/array_index.rs:5:18: 5:33\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-          StorageDead(_3);                 // bb1[1]: scope 0 at $DIR/array_index.rs:4:33: 4:34\n-          StorageDead(_2);                 // bb1[2]: scope 0 at $DIR/array_index.rs:4:33: 4:34\n-          _0 = ();                         // bb1[3]: scope 0 at $DIR/array_index.rs:3:11: 5:2\n-          StorageDead(_1);                 // bb1[4]: scope 0 at $DIR/array_index.rs:5:1: 5:2\n-          return;                          // bb1[5]: scope 0 at $DIR/array_index.rs:5:2: 5:2\n+          StorageDead(_3);                 // bb1[1]: scope 0 at $DIR/array_index.rs:5:33: 5:34\n+          StorageDead(_2);                 // bb1[2]: scope 0 at $DIR/array_index.rs:5:33: 5:34\n+          _0 = ();                         // bb1[3]: scope 0 at $DIR/array_index.rs:4:11: 6:2\n+          StorageDead(_1);                 // bb1[4]: scope 0 at $DIR/array_index.rs:6:1: 6:2\n+          return;                          // bb1[5]: scope 0 at $DIR/array_index.rs:6:2: 6:2\n       }\n   }\n   ", "previous_filename": "src/test/mir-opt/const_prop/array_index/rustc.main.ConstProp.diff"}, {"sha": "04541b94ad7801a0e5d466144da1388a84c0b05e", "filename": "src/test/mir-opt/const_prop/discriminant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.rs?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: -O\n \n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR rustc.main.ConstProp.diff\n fn main() {\n     let x = (if let Some(true) = Some(true) { 42 } else { 10 }) + 0;"}, {"sha": "7423a3cd38d35895fc3d54299df56f9853a18294", "filename": "src/test/mir-opt/const_prop/discriminant/32bit/rustc.main.ConstProp.diff", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -0,0 +1,95 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:5:11: 5:11\n+      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:6:9: 6:10\n+      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:6:13: 6:64\n+      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:6:34: 6:44\n+      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:6:21: 6:31\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:6:9: 6:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/discriminant.rs:6:9: 6:10\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/discriminant.rs:6:13: 6:64\n+          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n+-         _3 = std::option::Option::<bool>::Some(const true,); // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n++         _3 = const {transmute(0x01): std::option::Option<bool>}; // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n+                                           // ty::Const\n+-                                          // + ty: bool\n++                                          // + ty: std::option::Option<bool>\n+                                           // + val: Value(Scalar(0x01))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/discriminant.rs:6:39: 6:43\n+-                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+-         _4 = discriminant(_3);           // bb0[4]: scope 0 at $DIR/discriminant.rs:6:21: 6:31\n+-         switchInt(move _4) -> [1isize: bb2, otherwise: bb1]; // bb0[5]: scope 0 at $DIR/discriminant.rs:6:21: 6:31\n++                                          // + span: $DIR/discriminant.rs:6:34: 6:44\n++                                          // + literal: Const { ty: std::option::Option<bool>, val: Value(Scalar(0x01)) }\n++         _4 = const 1isize;               // bb0[4]: scope 0 at $DIR/discriminant.rs:6:21: 6:31\n++                                          // ty::Const\n++                                          // + ty: isize\n++                                          // + val: Value(Scalar(0x00000001))\n++                                          // mir::Constant\n++                                          // + span: $DIR/discriminant.rs:6:21: 6:31\n++                                          // + literal: Const { ty: isize, val: Value(Scalar(0x00000001)) }\n++         switchInt(const 1isize) -> [1isize: bb2, otherwise: bb1]; // bb0[5]: scope 0 at $DIR/discriminant.rs:6:21: 6:31\n++                                          // ty::Const\n++                                          // + ty: isize\n++                                          // + val: Value(Scalar(0x00000001))\n++                                          // mir::Constant\n++                                          // + span: $DIR/discriminant.rs:6:21: 6:31\n++                                          // + literal: Const { ty: isize, val: Value(Scalar(0x00000001)) }\n+      }\n+  \n+      bb1: {\n+          _2 = const 10i32;                // bb1[0]: scope 0 at $DIR/discriminant.rs:6:59: 6:61\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x0000000a))\n+                                           // mir::Constant\n+                                           // + span: $DIR/discriminant.rs:6:59: 6:61\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000000a)) }\n+          goto -> bb4;                     // bb1[1]: scope 0 at $DIR/discriminant.rs:6:13: 6:64\n+      }\n+  \n+      bb2: {\n+-         switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // bb2[0]: scope 0 at $DIR/discriminant.rs:6:26: 6:30\n++         switchInt(const true) -> [false: bb1, otherwise: bb3]; // bb2[0]: scope 0 at $DIR/discriminant.rs:6:26: 6:30\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/discriminant.rs:6:26: 6:30\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+      }\n+  \n+      bb3: {\n+          _2 = const 42i32;                // bb3[0]: scope 0 at $DIR/discriminant.rs:6:47: 6:49\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x0000002a))\n+                                           // mir::Constant\n+                                           // + span: $DIR/discriminant.rs:6:47: 6:49\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n+          goto -> bb4;                     // bb3[1]: scope 0 at $DIR/discriminant.rs:6:13: 6:64\n+      }\n+  \n+      bb4: {\n+          _1 = Add(move _2, const 0i32);   // bb4[0]: scope 0 at $DIR/discriminant.rs:6:13: 6:68\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/discriminant.rs:6:67: 6:68\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+          StorageDead(_2);                 // bb4[1]: scope 0 at $DIR/discriminant.rs:6:67: 6:68\n+          StorageDead(_3);                 // bb4[2]: scope 0 at $DIR/discriminant.rs:6:68: 6:69\n+          _0 = ();                         // bb4[3]: scope 0 at $DIR/discriminant.rs:5:11: 7:2\n+          StorageDead(_1);                 // bb4[4]: scope 0 at $DIR/discriminant.rs:7:1: 7:2\n+          return;                          // bb4[5]: scope 0 at $DIR/discriminant.rs:7:2: 7:2\n+      }\n+  }\n+  "}, {"sha": "60d18cdc9421f67651b658db36b7b8b0803787ea", "filename": "src/test/mir-opt/const_prop/discriminant/64bit/rustc.main.ConstProp.diff", "status": "renamed", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -2,94 +2,94 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:4:11: 4:11\n-      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:5:9: 5:10\n-      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:5:13: 5:64\n-      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:5:34: 5:44\n-      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:5:21: 5:31\n+      let mut _0: ();                      // return place in scope 0 at $DIR/discriminant.rs:5:11: 5:11\n+      let _1: i32;                         // in scope 0 at $DIR/discriminant.rs:6:9: 6:10\n+      let mut _2: i32;                     // in scope 0 at $DIR/discriminant.rs:6:13: 6:64\n+      let mut _3: std::option::Option<bool>; // in scope 0 at $DIR/discriminant.rs:6:34: 6:44\n+      let mut _4: isize;                   // in scope 0 at $DIR/discriminant.rs:6:21: 6:31\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:5:9: 5:10\n+          debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:6:9: 6:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/discriminant.rs:5:9: 5:10\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/discriminant.rs:5:13: 5:64\n-          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/discriminant.rs:5:34: 5:44\n--         _3 = std::option::Option::<bool>::Some(const true,); // bb0[3]: scope 0 at $DIR/discriminant.rs:5:34: 5:44\n-+         _3 = const {transmute(0x01): std::option::Option<bool>}; // bb0[3]: scope 0 at $DIR/discriminant.rs:5:34: 5:44\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/discriminant.rs:6:9: 6:10\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/discriminant.rs:6:13: 6:64\n+          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n+-         _3 = std::option::Option::<bool>::Some(const true,); // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n++         _3 = const {transmute(0x01): std::option::Option<bool>}; // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44\n                                            // ty::Const\n -                                          // + ty: bool\n +                                          // + ty: std::option::Option<bool>\n                                            // + val: Value(Scalar(0x01))\n                                            // mir::Constant\n--                                          // + span: $DIR/discriminant.rs:5:39: 5:43\n+-                                          // + span: $DIR/discriminant.rs:6:39: 6:43\n -                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n--         _4 = discriminant(_3);           // bb0[4]: scope 0 at $DIR/discriminant.rs:5:21: 5:31\n--         switchInt(move _4) -> [1isize: bb2, otherwise: bb1]; // bb0[5]: scope 0 at $DIR/discriminant.rs:5:21: 5:31\n-+                                          // + span: $DIR/discriminant.rs:5:34: 5:44\n+-         _4 = discriminant(_3);           // bb0[4]: scope 0 at $DIR/discriminant.rs:6:21: 6:31\n+-         switchInt(move _4) -> [1isize: bb2, otherwise: bb1]; // bb0[5]: scope 0 at $DIR/discriminant.rs:6:21: 6:31\n++                                          // + span: $DIR/discriminant.rs:6:34: 6:44\n +                                          // + literal: Const { ty: std::option::Option<bool>, val: Value(Scalar(0x01)) }\n-+         _4 = const 1isize;               // bb0[4]: scope 0 at $DIR/discriminant.rs:5:21: 5:31\n++         _4 = const 1isize;               // bb0[4]: scope 0 at $DIR/discriminant.rs:6:21: 6:31\n +                                          // ty::Const\n +                                          // + ty: isize\n +                                          // + val: Value(Scalar(0x0000000000000001))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:5:21: 5:31\n++                                          // + span: $DIR/discriminant.rs:6:21: 6:31\n +                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000001)) }\n-+         switchInt(const 1isize) -> [1isize: bb2, otherwise: bb1]; // bb0[5]: scope 0 at $DIR/discriminant.rs:5:21: 5:31\n++         switchInt(const 1isize) -> [1isize: bb2, otherwise: bb1]; // bb0[5]: scope 0 at $DIR/discriminant.rs:6:21: 6:31\n +                                          // ty::Const\n +                                          // + ty: isize\n +                                          // + val: Value(Scalar(0x0000000000000001))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:5:21: 5:31\n++                                          // + span: $DIR/discriminant.rs:6:21: 6:31\n +                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000001)) }\n       }\n   \n       bb1: {\n-          _2 = const 10i32;                // bb1[0]: scope 0 at $DIR/discriminant.rs:5:59: 5:61\n+          _2 = const 10i32;                // bb1[0]: scope 0 at $DIR/discriminant.rs:6:59: 6:61\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000000a))\n                                            // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:5:59: 5:61\n+                                           // + span: $DIR/discriminant.rs:6:59: 6:61\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000000a)) }\n-          goto -> bb4;                     // bb1[1]: scope 0 at $DIR/discriminant.rs:5:13: 5:64\n+          goto -> bb4;                     // bb1[1]: scope 0 at $DIR/discriminant.rs:6:13: 6:64\n       }\n   \n       bb2: {\n--         switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // bb2[0]: scope 0 at $DIR/discriminant.rs:5:26: 5:30\n-+         switchInt(const true) -> [false: bb1, otherwise: bb3]; // bb2[0]: scope 0 at $DIR/discriminant.rs:5:26: 5:30\n+-         switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // bb2[0]: scope 0 at $DIR/discriminant.rs:6:26: 6:30\n++         switchInt(const true) -> [false: bb1, otherwise: bb3]; // bb2[0]: scope 0 at $DIR/discriminant.rs:6:26: 6:30\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:5:26: 5:30\n++                                          // + span: $DIR/discriminant.rs:6:26: 6:30\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n       }\n   \n       bb3: {\n-          _2 = const 42i32;                // bb3[0]: scope 0 at $DIR/discriminant.rs:5:47: 5:49\n+          _2 = const 42i32;                // bb3[0]: scope 0 at $DIR/discriminant.rs:6:47: 6:49\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:5:47: 5:49\n+                                           // + span: $DIR/discriminant.rs:6:47: 6:49\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n-          goto -> bb4;                     // bb3[1]: scope 0 at $DIR/discriminant.rs:5:13: 5:64\n+          goto -> bb4;                     // bb3[1]: scope 0 at $DIR/discriminant.rs:6:13: 6:64\n       }\n   \n       bb4: {\n-          _1 = Add(move _2, const 0i32);   // bb4[0]: scope 0 at $DIR/discriminant.rs:5:13: 5:68\n+          _1 = Add(move _2, const 0i32);   // bb4[0]: scope 0 at $DIR/discriminant.rs:6:13: 6:68\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))\n                                            // mir::Constant\n-                                           // + span: $DIR/discriminant.rs:5:67: 5:68\n+                                           // + span: $DIR/discriminant.rs:6:67: 6:68\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-          StorageDead(_2);                 // bb4[1]: scope 0 at $DIR/discriminant.rs:5:67: 5:68\n-          StorageDead(_3);                 // bb4[2]: scope 0 at $DIR/discriminant.rs:5:68: 5:69\n-          _0 = ();                         // bb4[3]: scope 0 at $DIR/discriminant.rs:4:11: 6:2\n-          StorageDead(_1);                 // bb4[4]: scope 0 at $DIR/discriminant.rs:6:1: 6:2\n-          return;                          // bb4[5]: scope 0 at $DIR/discriminant.rs:6:2: 6:2\n+          StorageDead(_2);                 // bb4[1]: scope 0 at $DIR/discriminant.rs:6:67: 6:68\n+          StorageDead(_3);                 // bb4[2]: scope 0 at $DIR/discriminant.rs:6:68: 6:69\n+          _0 = ();                         // bb4[3]: scope 0 at $DIR/discriminant.rs:5:11: 7:2\n+          StorageDead(_1);                 // bb4[4]: scope 0 at $DIR/discriminant.rs:7:1: 7:2\n+          return;                          // bb4[5]: scope 0 at $DIR/discriminant.rs:7:2: 7:2\n       }\n   }\n   ", "previous_filename": "src/test/mir-opt/const_prop/discriminant/rustc.main.ConstProp.diff"}, {"sha": "0ae172e777b9b28129a8cc118c944c4283cef1a2", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.rs?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -5,6 +5,7 @@ struct Point {\n     y: u32,\n }\n \n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR rustc.main.ConstProp.diff\n // EMIT_MIR rustc.main.SimplifyLocals.after.mir\n fn main() {"}, {"sha": "d8bd397d74a6569665fe9b839451aa6ba9c644ce", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/32bit/rustc.main.ConstProp.diff", "status": "added", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.ConstProp.diff?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -0,0 +1,181 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:11:11: 11:11\n+      let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+      let mut _2: (i32, bool);             // in scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+      let mut _4: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n+      let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n+      let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+      let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+          let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+          scope 2 {\n+              debug y => _3;               // in scope 2 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+              let _8: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+              scope 3 {\n+                  debug z => _8;           // in scope 3 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+-         _2 = CheckedAdd(const 2i32, const 2i32); // bb0[1]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n++         _2 = (const 4i32, const false);  // bb0[1]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+                                           // ty::Const\n+                                           // + ty: i32\n+-                                          // + val: Value(Scalar(0x00000002))\n++                                          // + val: Value(Scalar(0x00000004))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:14\n+-                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n++                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n+                                           // ty::Const\n+-                                          // + ty: i32\n+-                                          // + val: Value(Scalar(0x00000002))\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/optimizes_into_variable.rs:12:17: 12:18\n+-                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n+-         assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1; // bb0[2]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n++                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n++         assert(!const false, \"attempt to add with overflow\") -> bb1; // bb0[2]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x00))\n++                                          // mir::Constant\n++                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+      }\n+  \n+      bb1: {\n+-         _1 = move (_2.0: i32);           // bb1[0]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n++         _1 = const 4i32;                 // bb1[0]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n++                                          // ty::Const\n++                                          // + ty: i32\n++                                          // + val: Value(Scalar(0x00000004))\n++                                          // mir::Constant\n++                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n+          StorageLive(_3);                 // bb1[1]: scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+          StorageLive(_4);                 // bb1[2]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n+          _4 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32]; // bb1[3]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:13:14: 13:15\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:13:17: 13:18\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000002))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:13:20: 13:21\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000003))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:13:23: 13:24\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000004))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:13:26: 13:27\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000005))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:13:29: 13:30\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n+          StorageLive(_5);                 // bb1[4]: scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n+          _5 = const 3usize;               // bb1[5]: scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x00000003))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:13:32: 13:33\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n+          _6 = const 6usize;               // bb1[6]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x00000006))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000006)) }\n+-         _7 = Lt(_5, _6);                 // bb1[7]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+-         assert(move _7, \"index out of bounds: the len is move _6 but the index is _5\") -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++         _7 = const true;                 // bb1[7]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++         assert(const true, \"index out of bounds: the len is move _6 but the index is _5\") -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+      }\n+  \n+      bb2: {\n+-         _3 = _4[_5];                     // bb2[0]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++         _3 = const 3i32;                 // bb2[0]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++                                          // ty::Const\n++                                          // + ty: i32\n++                                          // + val: Value(Scalar(0x00000003))\n++                                          // mir::Constant\n++                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n+          StorageDead(_5);                 // bb2[1]: scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n+          StorageDead(_4);                 // bb2[2]: scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n+          StorageLive(_8);                 // bb2[3]: scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+          StorageLive(_9);                 // bb2[4]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n+          _9 = Point { x: const 12u32, y: const 42u32 }; // bb2[5]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n+                                           // ty::Const\n+                                           // + ty: u32\n+                                           // + val: Value(Scalar(0x0000000c))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:14:25: 14:27\n+                                           // + literal: Const { ty: u32, val: Value(Scalar(0x0000000c)) }\n+                                           // ty::Const\n+                                           // + ty: u32\n+                                           // + val: Value(Scalar(0x0000002a))\n+                                           // mir::Constant\n+                                           // + span: $DIR/optimizes_into_variable.rs:14:32: 14:34\n+                                           // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n+-         _8 = (_9.1: u32);                // bb2[6]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n++         _8 = const 42u32;                // bb2[6]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n++                                          // ty::Const\n++                                          // + ty: u32\n++                                          // + val: Value(Scalar(0x0000002a))\n++                                          // mir::Constant\n++                                          // + span: $DIR/optimizes_into_variable.rs:14:13: 14:38\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n+          StorageDead(_9);                 // bb2[7]: scope 2 at $DIR/optimizes_into_variable.rs:14:38: 14:39\n+          _0 = ();                         // bb2[8]: scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n+          StorageDead(_8);                 // bb2[9]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+          StorageDead(_3);                 // bb2[10]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+          StorageDead(_1);                 // bb2[11]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+          return;                          // bb2[12]: scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n+      }\n+  }\n+  "}, {"sha": "db4d2d137927cb8c4426ee0a98180f23f3023c16", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/32bit/rustc.main.SimplifyLocals.after.mir", "status": "renamed", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.SimplifyLocals.after.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -1,88 +1,88 @@\n // MIR for `main` after SimplifyLocals\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:10:11: 10:11\n-    let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:11:9: 11:10\n-    let mut _3: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:31\n+    let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:11:11: 11:11\n+    let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+    let mut _3: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:11:9: 11:10\n-        let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+        debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+        let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n         scope 2 {\n-            debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-            let _4: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+            debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+            let _4: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n             scope 3 {\n-                debug z => _4;           // in scope 3 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+                debug z => _4;           // in scope 3 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/optimizes_into_variable.rs:11:9: 11:10\n-        _1 = const 4i32;                 // bb0[1]: scope 0 at $DIR/optimizes_into_variable.rs:11:13: 11:18\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+        _1 = const 4i32;                 // bb0[1]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000004))\n                                          // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:11:13: 11:18\n+                                         // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n-        StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-        StorageLive(_3);                 // bb0[3]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:31\n-        _3 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32]; // bb0[4]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:31\n+        StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+        StorageLive(_3);                 // bb0[3]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n+        _3 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32]; // bb0[4]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000000))\n                                          // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:12:14: 12:15\n+                                         // + span: $DIR/optimizes_into_variable.rs:13:14: 13:15\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000001))\n                                          // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:12:17: 12:18\n+                                         // + span: $DIR/optimizes_into_variable.rs:13:17: 13:18\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))\n                                          // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:12:20: 12:21\n+                                         // + span: $DIR/optimizes_into_variable.rs:13:20: 13:21\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n                                          // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:12:23: 12:24\n+                                         // + span: $DIR/optimizes_into_variable.rs:13:23: 13:24\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000004))\n                                          // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:12:26: 12:27\n+                                         // + span: $DIR/optimizes_into_variable.rs:13:26: 13:27\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000005))\n                                          // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:12:29: 12:30\n+                                         // + span: $DIR/optimizes_into_variable.rs:13:29: 13:30\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n-        _2 = const 3i32;                 // bb0[5]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:34\n+        _2 = const 3i32;                 // bb0[5]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n                                          // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:12:13: 12:34\n+                                         // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        StorageDead(_3);                 // bb0[6]: scope 1 at $DIR/optimizes_into_variable.rs:12:34: 12:35\n-        StorageLive(_4);                 // bb0[7]: scope 2 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-        _4 = const 42u32;                // bb0[8]: scope 2 at $DIR/optimizes_into_variable.rs:13:13: 13:38\n+        StorageDead(_3);                 // bb0[6]: scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n+        StorageLive(_4);                 // bb0[7]: scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+        _4 = const 42u32;                // bb0[8]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x0000002a))\n                                          // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:13: 13:38\n+                                         // + span: $DIR/optimizes_into_variable.rs:14:13: 14:38\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-        StorageDead(_4);                 // bb0[9]: scope 2 at $DIR/optimizes_into_variable.rs:14:1: 14:2\n-        StorageDead(_2);                 // bb0[10]: scope 1 at $DIR/optimizes_into_variable.rs:14:1: 14:2\n-        StorageDead(_1);                 // bb0[11]: scope 0 at $DIR/optimizes_into_variable.rs:14:1: 14:2\n-        return;                          // bb0[12]: scope 0 at $DIR/optimizes_into_variable.rs:14:2: 14:2\n+        StorageDead(_4);                 // bb0[9]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        StorageDead(_2);                 // bb0[10]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        StorageDead(_1);                 // bb0[11]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        return;                          // bb0[12]: scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n     }\n }", "previous_filename": "src/test/mir-opt/const_prop/optimizes_into_variable/rustc.main.SimplifyLocals.after.mir"}, {"sha": "9e646e7336d8014a7a6921a84f5bcf1b195b1592", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/64bit/rustc.main.ConstProp.diff", "status": "renamed", "additions": 65, "deletions": 65, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.ConstProp.diff?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -2,180 +2,180 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:10:11: 10:11\n-      let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:11:9: 11:10\n-      let mut _2: (i32, bool);             // in scope 0 at $DIR/optimizes_into_variable.rs:11:13: 11:18\n-      let mut _4: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:31\n-      let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:12:32: 12:33\n-      let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:34\n-      let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:34\n-      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:13:13: 13:36\n+      let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:11:11: 11:11\n+      let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+      let mut _2: (i32, bool);             // in scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+      let mut _4: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n+      let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n+      let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+      let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:11:9: 11:10\n-          let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+          debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+          let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n           scope 2 {\n-              debug y => _3;               // in scope 2 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-              let _8: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+              debug y => _3;               // in scope 2 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+              let _8: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n               scope 3 {\n-                  debug z => _8;           // in scope 3 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+                  debug z => _8;           // in scope 3 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/optimizes_into_variable.rs:11:9: 11:10\n--         _2 = CheckedAdd(const 2i32, const 2i32); // bb0[1]: scope 0 at $DIR/optimizes_into_variable.rs:11:13: 11:18\n-+         _2 = (const 4i32, const false);  // bb0[1]: scope 0 at $DIR/optimizes_into_variable.rs:11:13: 11:18\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+-         _2 = CheckedAdd(const 2i32, const 2i32); // bb0[1]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n++         _2 = (const 4i32, const false);  // bb0[1]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n                                            // ty::Const\n                                            // + ty: i32\n -                                          // + val: Value(Scalar(0x00000002))\n +                                          // + val: Value(Scalar(0x00000004))\n                                            // mir::Constant\n--                                          // + span: $DIR/optimizes_into_variable.rs:11:13: 11:14\n+-                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:14\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-+                                          // + span: $DIR/optimizes_into_variable.rs:11:13: 11:18\n++                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n                                            // ty::Const\n -                                          // + ty: i32\n -                                          // + val: Value(Scalar(0x00000002))\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n--                                          // + span: $DIR/optimizes_into_variable.rs:11:17: 11:18\n+-                                          // + span: $DIR/optimizes_into_variable.rs:12:17: 12:18\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n--         assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1; // bb0[2]: scope 0 at $DIR/optimizes_into_variable.rs:11:13: 11:18\n-+                                          // + span: $DIR/optimizes_into_variable.rs:11:13: 11:18\n+-         assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1; // bb0[2]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n++                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         assert(!const false, \"attempt to add with overflow\") -> bb1; // bb0[2]: scope 0 at $DIR/optimizes_into_variable.rs:11:13: 11:18\n++         assert(!const false, \"attempt to add with overflow\") -> bb1; // bb0[2]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x00))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:11:13: 11:18\n++                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n       }\n   \n       bb1: {\n--         _1 = move (_2.0: i32);           // bb1[0]: scope 0 at $DIR/optimizes_into_variable.rs:11:13: 11:18\n-+         _1 = const 4i32;                 // bb1[0]: scope 0 at $DIR/optimizes_into_variable.rs:11:13: 11:18\n+-         _1 = move (_2.0: i32);           // bb1[0]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n++         _1 = const 4i32;                 // bb1[0]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // ty::Const\n +                                          // + ty: i32\n +                                          // + val: Value(Scalar(0x00000004))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:11:13: 11:18\n++                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n-          StorageLive(_3);                 // bb1[1]: scope 1 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-          StorageLive(_4);                 // bb1[2]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:31\n-          _4 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32]; // bb1[3]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:31\n+          StorageLive(_3);                 // bb1[1]: scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+          StorageLive(_4);                 // bb1[2]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n+          _4 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32]; // bb1[3]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))\n                                            // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:12:14: 12:15\n+                                           // + span: $DIR/optimizes_into_variable.rs:13:14: 13:15\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:12:17: 12:18\n+                                           // + span: $DIR/optimizes_into_variable.rs:13:17: 13:18\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000002))\n                                            // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:12:20: 12:21\n+                                           // + span: $DIR/optimizes_into_variable.rs:13:20: 13:21\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000003))\n                                            // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:12:23: 12:24\n+                                           // + span: $DIR/optimizes_into_variable.rs:13:23: 13:24\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000004))\n                                            // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:12:26: 12:27\n+                                           // + span: $DIR/optimizes_into_variable.rs:13:26: 13:27\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000005))\n                                            // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:12:29: 12:30\n+                                           // + span: $DIR/optimizes_into_variable.rs:13:29: 13:30\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n-          StorageLive(_5);                 // bb1[4]: scope 1 at $DIR/optimizes_into_variable.rs:12:32: 12:33\n-          _5 = const 3usize;               // bb1[5]: scope 1 at $DIR/optimizes_into_variable.rs:12:32: 12:33\n+          StorageLive(_5);                 // bb1[4]: scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n+          _5 = const 3usize;               // bb1[5]: scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000003))\n                                            // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:12:32: 12:33\n+                                           // + span: $DIR/optimizes_into_variable.rs:13:32: 13:33\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n-          _6 = const 6usize;               // bb1[6]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:34\n+          _6 = const 6usize;               // bb1[6]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000006))\n                                            // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:12:13: 12:34\n+                                           // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000006)) }\n--         _7 = Lt(_5, _6);                 // bb1[7]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:34\n--         assert(move _7, \"index out of bounds: the len is move _6 but the index is _5\") -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:34\n-+         _7 = const true;                 // bb1[7]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:34\n+-         _7 = Lt(_5, _6);                 // bb1[7]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+-         assert(move _7, \"index out of bounds: the len is move _6 but the index is _5\") -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++         _7 = const true;                 // bb1[7]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:34\n++                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is move _6 but the index is _5\") -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:34\n++         assert(const true, \"index out of bounds: the len is move _6 but the index is _5\") -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:34\n++                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n       }\n   \n       bb2: {\n--         _3 = _4[_5];                     // bb2[0]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:34\n-+         _3 = const 3i32;                 // bb2[0]: scope 1 at $DIR/optimizes_into_variable.rs:12:13: 12:34\n+-         _3 = _4[_5];                     // bb2[0]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++         _3 = const 3i32;                 // bb2[0]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // ty::Const\n +                                          // + ty: i32\n +                                          // + val: Value(Scalar(0x00000003))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:34\n++                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-          StorageDead(_5);                 // bb2[1]: scope 1 at $DIR/optimizes_into_variable.rs:12:34: 12:35\n-          StorageDead(_4);                 // bb2[2]: scope 1 at $DIR/optimizes_into_variable.rs:12:34: 12:35\n-          StorageLive(_8);                 // bb2[3]: scope 2 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-          StorageLive(_9);                 // bb2[4]: scope 2 at $DIR/optimizes_into_variable.rs:13:13: 13:36\n-          _9 = Point { x: const 12u32, y: const 42u32 }; // bb2[5]: scope 2 at $DIR/optimizes_into_variable.rs:13:13: 13:36\n+          StorageDead(_5);                 // bb2[1]: scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n+          StorageDead(_4);                 // bb2[2]: scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n+          StorageLive(_8);                 // bb2[3]: scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+          StorageLive(_9);                 // bb2[4]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n+          _9 = Point { x: const 12u32, y: const 42u32 }; // bb2[5]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x0000000c))\n                                            // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:13:25: 13:27\n+                                           // + span: $DIR/optimizes_into_variable.rs:14:25: 14:27\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x0000000c)) }\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n-                                           // + span: $DIR/optimizes_into_variable.rs:13:32: 13:34\n+                                           // + span: $DIR/optimizes_into_variable.rs:14:32: 14:34\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n--         _8 = (_9.1: u32);                // bb2[6]: scope 2 at $DIR/optimizes_into_variable.rs:13:13: 13:38\n-+         _8 = const 42u32;                // bb2[6]: scope 2 at $DIR/optimizes_into_variable.rs:13:13: 13:38\n+-         _8 = (_9.1: u32);                // bb2[6]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n++         _8 = const 42u32;                // bb2[6]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x0000002a))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:38\n++                                          // + span: $DIR/optimizes_into_variable.rs:14:13: 14:38\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-          StorageDead(_9);                 // bb2[7]: scope 2 at $DIR/optimizes_into_variable.rs:13:38: 13:39\n-          _0 = ();                         // bb2[8]: scope 0 at $DIR/optimizes_into_variable.rs:10:11: 14:2\n-          StorageDead(_8);                 // bb2[9]: scope 2 at $DIR/optimizes_into_variable.rs:14:1: 14:2\n-          StorageDead(_3);                 // bb2[10]: scope 1 at $DIR/optimizes_into_variable.rs:14:1: 14:2\n-          StorageDead(_1);                 // bb2[11]: scope 0 at $DIR/optimizes_into_variable.rs:14:1: 14:2\n-          return;                          // bb2[12]: scope 0 at $DIR/optimizes_into_variable.rs:14:2: 14:2\n+          StorageDead(_9);                 // bb2[7]: scope 2 at $DIR/optimizes_into_variable.rs:14:38: 14:39\n+          _0 = ();                         // bb2[8]: scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n+          StorageDead(_8);                 // bb2[9]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+          StorageDead(_3);                 // bb2[10]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+          StorageDead(_1);                 // bb2[11]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+          return;                          // bb2[12]: scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n       }\n   }\n   ", "previous_filename": "src/test/mir-opt/const_prop/optimizes_into_variable/rustc.main.ConstProp.diff"}, {"sha": "db4d2d137927cb8c4426ee0a98180f23f3023c16", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/64bit/rustc.main.SimplifyLocals.after.mir", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.SimplifyLocals.after.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -0,0 +1,88 @@\n+// MIR for `main` after SimplifyLocals\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:11:11: 11:11\n+    let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+    let mut _3: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n+    scope 1 {\n+        debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+        let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+        scope 2 {\n+            debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+            let _4: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+            scope 3 {\n+                debug z => _4;           // in scope 3 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n+        _1 = const 4i32;                 // bb0[1]: scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000004))\n+                                         // mir::Constant\n+                                         // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n+        StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n+        StorageLive(_3);                 // bb0[3]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n+        _3 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32]; // bb0[4]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/optimizes_into_variable.rs:13:14: 13:15\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/optimizes_into_variable.rs:13:17: 13:18\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/optimizes_into_variable.rs:13:20: 13:21\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/optimizes_into_variable.rs:13:23: 13:24\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000004))\n+                                         // mir::Constant\n+                                         // + span: $DIR/optimizes_into_variable.rs:13:26: 13:27\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000005))\n+                                         // mir::Constant\n+                                         // + span: $DIR/optimizes_into_variable.rs:13:29: 13:30\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n+        _2 = const 3i32;                 // bb0[5]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n+        StorageDead(_3);                 // bb0[6]: scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n+        StorageLive(_4);                 // bb0[7]: scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+        _4 = const 42u32;                // bb0[8]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n+                                         // ty::Const\n+                                         // + ty: u32\n+                                         // + val: Value(Scalar(0x0000002a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/optimizes_into_variable.rs:14:13: 14:38\n+                                         // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n+        StorageDead(_4);                 // bb0[9]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        StorageDead(_2);                 // bb0[10]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        StorageDead(_1);                 // bb0[11]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        return;                          // bb0[12]: scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n+    }\n+}"}, {"sha": "cdbfc46d6ca0e35214a65af4868c4532ac17807d", "filename": "src/test/mir-opt/const_prop/repeat.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.rs?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: -O\n \n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR rustc.main.ConstProp.diff\n fn main() {\n     let x: u32 = [42; 8][2] + 0;"}, {"sha": "dce98d88e3d9211d542d1285d499d0e0aea4e9d5", "filename": "src/test/mir-opt/const_prop/repeat/32bit/rustc.main.ConstProp.diff", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F32bit%2Frustc.main.ConstProp.diff?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -0,0 +1,88 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/repeat.rs:5:11: 5:11\n+      let _1: u32 as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/repeat.rs:6:9: 6:10\n+      let mut _2: u32;                     // in scope 0 at $DIR/repeat.rs:6:18: 6:28\n+      let mut _3: [u32; 8];                // in scope 0 at $DIR/repeat.rs:6:18: 6:25\n+      let _4: usize;                       // in scope 0 at $DIR/repeat.rs:6:26: 6:27\n+      let mut _5: usize;                   // in scope 0 at $DIR/repeat.rs:6:18: 6:28\n+      let mut _6: bool;                    // in scope 0 at $DIR/repeat.rs:6:18: 6:28\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/repeat.rs:6:9: 6:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/repeat.rs:6:9: 6:10\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n+          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/repeat.rs:6:18: 6:25\n+          _3 = [const 42u32; 8];           // bb0[3]: scope 0 at $DIR/repeat.rs:6:18: 6:25\n+                                           // ty::Const\n+                                           // + ty: u32\n+                                           // + val: Value(Scalar(0x0000002a))\n+                                           // mir::Constant\n+                                           // + span: $DIR/repeat.rs:6:19: 6:21\n+                                           // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n+          StorageLive(_4);                 // bb0[4]: scope 0 at $DIR/repeat.rs:6:26: 6:27\n+          _4 = const 2usize;               // bb0[5]: scope 0 at $DIR/repeat.rs:6:26: 6:27\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x00000002))\n+                                           // mir::Constant\n+                                           // + span: $DIR/repeat.rs:6:26: 6:27\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n+          _5 = const 8usize;               // bb0[6]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x00000008))\n+                                           // mir::Constant\n+                                           // + span: $DIR/repeat.rs:6:18: 6:28\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000008)) }\n+-         _6 = Lt(_4, _5);                 // bb0[7]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n+-         assert(move _6, \"index out of bounds: the len is move _5 but the index is _4\") -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n++         _6 = const true;                 // bb0[7]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/repeat.rs:6:18: 6:28\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++         assert(const true, \"index out of bounds: the len is move _5 but the index is _4\") -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/repeat.rs:6:18: 6:28\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+      }\n+  \n+      bb1: {\n+-         _2 = _3[_4];                     // bb1[0]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n+-         _1 = Add(move _2, const 0u32);   // bb1[1]: scope 0 at $DIR/repeat.rs:6:18: 6:32\n++         _2 = const 42u32;                // bb1[0]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n+                                           // ty::Const\n+                                           // + ty: u32\n+-                                          // + val: Value(Scalar(0x00000000))\n++                                          // + val: Value(Scalar(0x0000002a))\n+                                           // mir::Constant\n+-                                          // + span: $DIR/repeat.rs:6:31: 6:32\n+-                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n++                                          // + span: $DIR/repeat.rs:6:18: 6:28\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n++         _1 = const 42u32;                // bb1[1]: scope 0 at $DIR/repeat.rs:6:18: 6:32\n++                                          // ty::Const\n++                                          // + ty: u32\n++                                          // + val: Value(Scalar(0x0000002a))\n++                                          // mir::Constant\n++                                          // + span: $DIR/repeat.rs:6:18: 6:32\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n+          StorageDead(_2);                 // bb1[2]: scope 0 at $DIR/repeat.rs:6:31: 6:32\n+          StorageDead(_4);                 // bb1[3]: scope 0 at $DIR/repeat.rs:6:32: 6:33\n+          StorageDead(_3);                 // bb1[4]: scope 0 at $DIR/repeat.rs:6:32: 6:33\n+          _0 = ();                         // bb1[5]: scope 0 at $DIR/repeat.rs:5:11: 7:2\n+          StorageDead(_1);                 // bb1[6]: scope 0 at $DIR/repeat.rs:7:1: 7:2\n+          return;                          // bb1[7]: scope 0 at $DIR/repeat.rs:7:2: 7:2\n+      }\n+  }\n+  "}, {"sha": "c9e640291f2f5c85fc60c2bba03a9d1ac503c0bf", "filename": "src/test/mir-opt/const_prop/repeat/64bit/rustc.main.ConstProp.diff", "status": "renamed", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F64bit%2Frustc.main.ConstProp.diff?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -2,87 +2,87 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/repeat.rs:4:11: 4:11\n-      let _1: u32 as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/repeat.rs:5:9: 5:10\n-      let mut _2: u32;                     // in scope 0 at $DIR/repeat.rs:5:18: 5:28\n-      let mut _3: [u32; 8];                // in scope 0 at $DIR/repeat.rs:5:18: 5:25\n-      let _4: usize;                       // in scope 0 at $DIR/repeat.rs:5:26: 5:27\n-      let mut _5: usize;                   // in scope 0 at $DIR/repeat.rs:5:18: 5:28\n-      let mut _6: bool;                    // in scope 0 at $DIR/repeat.rs:5:18: 5:28\n+      let mut _0: ();                      // return place in scope 0 at $DIR/repeat.rs:5:11: 5:11\n+      let _1: u32 as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/repeat.rs:6:9: 6:10\n+      let mut _2: u32;                     // in scope 0 at $DIR/repeat.rs:6:18: 6:28\n+      let mut _3: [u32; 8];                // in scope 0 at $DIR/repeat.rs:6:18: 6:25\n+      let _4: usize;                       // in scope 0 at $DIR/repeat.rs:6:26: 6:27\n+      let mut _5: usize;                   // in scope 0 at $DIR/repeat.rs:6:18: 6:28\n+      let mut _6: bool;                    // in scope 0 at $DIR/repeat.rs:6:18: 6:28\n       scope 1 {\n-          debug x => _1;                   // in scope 1 at $DIR/repeat.rs:5:9: 5:10\n+          debug x => _1;                   // in scope 1 at $DIR/repeat.rs:6:9: 6:10\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/repeat.rs:5:9: 5:10\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/repeat.rs:5:18: 5:28\n-          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/repeat.rs:5:18: 5:25\n-          _3 = [const 42u32; 8];           // bb0[3]: scope 0 at $DIR/repeat.rs:5:18: 5:25\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/repeat.rs:6:9: 6:10\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n+          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/repeat.rs:6:18: 6:25\n+          _3 = [const 42u32; 8];           // bb0[3]: scope 0 at $DIR/repeat.rs:6:18: 6:25\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n-                                           // + span: $DIR/repeat.rs:5:19: 5:21\n+                                           // + span: $DIR/repeat.rs:6:19: 6:21\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-          StorageLive(_4);                 // bb0[4]: scope 0 at $DIR/repeat.rs:5:26: 5:27\n-          _4 = const 2usize;               // bb0[5]: scope 0 at $DIR/repeat.rs:5:26: 5:27\n+          StorageLive(_4);                 // bb0[4]: scope 0 at $DIR/repeat.rs:6:26: 6:27\n+          _4 = const 2usize;               // bb0[5]: scope 0 at $DIR/repeat.rs:6:26: 6:27\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000002))\n                                            // mir::Constant\n-                                           // + span: $DIR/repeat.rs:5:26: 5:27\n+                                           // + span: $DIR/repeat.rs:6:26: 6:27\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n-          _5 = const 8usize;               // bb0[6]: scope 0 at $DIR/repeat.rs:5:18: 5:28\n+          _5 = const 8usize;               // bb0[6]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000008))\n                                            // mir::Constant\n-                                           // + span: $DIR/repeat.rs:5:18: 5:28\n+                                           // + span: $DIR/repeat.rs:6:18: 6:28\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000008)) }\n--         _6 = Lt(_4, _5);                 // bb0[7]: scope 0 at $DIR/repeat.rs:5:18: 5:28\n--         assert(move _6, \"index out of bounds: the len is move _5 but the index is _4\") -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:5:18: 5:28\n-+         _6 = const true;                 // bb0[7]: scope 0 at $DIR/repeat.rs:5:18: 5:28\n+-         _6 = Lt(_4, _5);                 // bb0[7]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n+-         assert(move _6, \"index out of bounds: the len is move _5 but the index is _4\") -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n++         _6 = const true;                 // bb0[7]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/repeat.rs:5:18: 5:28\n++                                          // + span: $DIR/repeat.rs:6:18: 6:28\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is move _5 but the index is _4\") -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:5:18: 5:28\n++         assert(const true, \"index out of bounds: the len is move _5 but the index is _4\") -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/repeat.rs:5:18: 5:28\n++                                          // + span: $DIR/repeat.rs:6:18: 6:28\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n       }\n   \n       bb1: {\n--         _2 = _3[_4];                     // bb1[0]: scope 0 at $DIR/repeat.rs:5:18: 5:28\n--         _1 = Add(move _2, const 0u32);   // bb1[1]: scope 0 at $DIR/repeat.rs:5:18: 5:32\n-+         _2 = const 42u32;                // bb1[0]: scope 0 at $DIR/repeat.rs:5:18: 5:28\n+-         _2 = _3[_4];                     // bb1[0]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n+-         _1 = Add(move _2, const 0u32);   // bb1[1]: scope 0 at $DIR/repeat.rs:6:18: 6:32\n++         _2 = const 42u32;                // bb1[0]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n                                            // ty::Const\n                                            // + ty: u32\n -                                          // + val: Value(Scalar(0x00000000))\n +                                          // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n--                                          // + span: $DIR/repeat.rs:5:31: 5:32\n+-                                          // + span: $DIR/repeat.rs:6:31: 6:32\n -                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n-+                                          // + span: $DIR/repeat.rs:5:18: 5:28\n++                                          // + span: $DIR/repeat.rs:6:18: 6:28\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-+         _1 = const 42u32;                // bb1[1]: scope 0 at $DIR/repeat.rs:5:18: 5:32\n++         _1 = const 42u32;                // bb1[1]: scope 0 at $DIR/repeat.rs:6:18: 6:32\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x0000002a))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/repeat.rs:5:18: 5:32\n++                                          // + span: $DIR/repeat.rs:6:18: 6:32\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-          StorageDead(_2);                 // bb1[2]: scope 0 at $DIR/repeat.rs:5:31: 5:32\n-          StorageDead(_4);                 // bb1[3]: scope 0 at $DIR/repeat.rs:5:32: 5:33\n-          StorageDead(_3);                 // bb1[4]: scope 0 at $DIR/repeat.rs:5:32: 5:33\n-          _0 = ();                         // bb1[5]: scope 0 at $DIR/repeat.rs:4:11: 6:2\n-          StorageDead(_1);                 // bb1[6]: scope 0 at $DIR/repeat.rs:6:1: 6:2\n-          return;                          // bb1[7]: scope 0 at $DIR/repeat.rs:6:2: 6:2\n+          StorageDead(_2);                 // bb1[2]: scope 0 at $DIR/repeat.rs:6:31: 6:32\n+          StorageDead(_4);                 // bb1[3]: scope 0 at $DIR/repeat.rs:6:32: 6:33\n+          StorageDead(_3);                 // bb1[4]: scope 0 at $DIR/repeat.rs:6:32: 6:33\n+          _0 = ();                         // bb1[5]: scope 0 at $DIR/repeat.rs:5:11: 7:2\n+          StorageDead(_1);                 // bb1[6]: scope 0 at $DIR/repeat.rs:7:1: 7:2\n+          return;                          // bb1[7]: scope 0 at $DIR/repeat.rs:7:2: 7:2\n       }\n   }\n   ", "previous_filename": "src/test/mir-opt/const_prop/repeat/rustc.main.ConstProp.diff"}, {"sha": "0312f5e8e3a3ab2b06925135689081f5b3fe3fa0", "filename": "src/test/mir-opt/const_prop/slice_len.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -1,5 +1,6 @@\n-// EMIT_MIR rustc.main.ConstProp.diff\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n \n+// EMIT_MIR rustc.main.ConstProp.diff\n fn main() {\n     (&[1u32, 2, 3] as &[u32])[1];\n }"}, {"sha": "5f821078b75fdd72d15cfd4384712a0702980faf", "filename": "src/test/mir-opt/const_prop/slice_len/32bit/rustc.main.ConstProp.diff", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -0,0 +1,83 @@\n+- // MIR for `main` before ConstProp\n++ // MIR for `main` after ConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/slice_len.rs:4:11: 4:11\n+      let _1: u32;                         // in scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+      let mut _2: &[u32];                  // in scope 0 at $DIR/slice_len.rs:5:5: 5:30\n+      let mut _3: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+      let _4: &[u32; 3];                   // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+      let _5: [u32; 3];                    // in scope 0 at $DIR/slice_len.rs:5:7: 5:19\n+      let _6: usize;                       // in scope 0 at $DIR/slice_len.rs:5:31: 5:32\n+      let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+      let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+      let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/slice_len.rs:5:5: 5:30\n+          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          StorageLive(_4);                 // bb0[3]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          _9 = const main::promoted[0];    // bb0[4]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+                                           // ty::Const\n+                                           // + ty: &[u32; 3]\n+                                           // + val: Unevaluated(DefId(0:3 ~ slice_len[317d]::main[0]), [], Some(promoted[0]))\n+                                           // mir::Constant\n+                                           // + span: $DIR/slice_len.rs:5:6: 5:19\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(DefId(0:3 ~ slice_len[317d]::main[0]), [], Some(promoted[0])) }\n+          _4 = _9;                         // bb0[5]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          _3 = _4;                         // bb0[6]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          _2 = move _3 as &[u32] (Pointer(Unsize)); // bb0[7]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          StorageDead(_3);                 // bb0[8]: scope 0 at $DIR/slice_len.rs:5:18: 5:19\n+          StorageLive(_6);                 // bb0[9]: scope 0 at $DIR/slice_len.rs:5:31: 5:32\n+          _6 = const 1usize;               // bb0[10]: scope 0 at $DIR/slice_len.rs:5:31: 5:32\n+                                           // ty::Const\n+                                           // + ty: usize\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/slice_len.rs:5:31: 5:32\n+                                           // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n+-         _7 = Len((*_2));                 // bb0[11]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+-         _8 = Lt(_6, _7);                 // bb0[12]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+-         assert(move _8, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         _7 = const 3usize;               // bb0[11]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x00000003))\n++                                          // mir::Constant\n++                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n++         _8 = const true;                 // bb0[12]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++         assert(const true, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+      }\n+  \n+      bb1: {\n+-         _1 = (*_2)[_6];                  // bb1[0]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         _1 = const 2u32;                 // bb1[0]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++                                          // ty::Const\n++                                          // + ty: u32\n++                                          // + val: Value(Scalar(0x00000002))\n++                                          // mir::Constant\n++                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n++                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n+          StorageDead(_6);                 // bb1[1]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n+          StorageDead(_4);                 // bb1[2]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n+          StorageDead(_2);                 // bb1[3]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n+          StorageDead(_1);                 // bb1[4]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n+          _0 = ();                         // bb1[5]: scope 0 at $DIR/slice_len.rs:4:11: 6:2\n+          return;                          // bb1[6]: scope 0 at $DIR/slice_len.rs:6:2: 6:2\n+      }\n+  }\n+  "}, {"sha": "46f98b7f0aef836912adf95f1e81157dd98254a6", "filename": "src/test/mir-opt/const_prop/slice_len/64bit/rustc.main.ConstProp.diff", "status": "renamed", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -2,82 +2,82 @@\n + // MIR for `main` after ConstProp\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/slice_len.rs:3:11: 3:11\n-      let _1: u32;                         // in scope 0 at $DIR/slice_len.rs:4:5: 4:33\n-      let mut _2: &[u32];                  // in scope 0 at $DIR/slice_len.rs:4:5: 4:30\n-      let mut _3: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:4:6: 4:19\n-      let _4: &[u32; 3];                   // in scope 0 at $DIR/slice_len.rs:4:6: 4:19\n-      let _5: [u32; 3];                    // in scope 0 at $DIR/slice_len.rs:4:7: 4:19\n-      let _6: usize;                       // in scope 0 at $DIR/slice_len.rs:4:31: 4:32\n-      let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:4:5: 4:33\n-      let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:4:5: 4:33\n-      let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:4:6: 4:19\n+      let mut _0: ();                      // return place in scope 0 at $DIR/slice_len.rs:4:11: 4:11\n+      let _1: u32;                         // in scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+      let mut _2: &[u32];                  // in scope 0 at $DIR/slice_len.rs:5:5: 5:30\n+      let mut _3: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+      let _4: &[u32; 3];                   // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+      let _5: [u32; 3];                    // in scope 0 at $DIR/slice_len.rs:5:7: 5:19\n+      let _6: usize;                       // in scope 0 at $DIR/slice_len.rs:5:31: 5:32\n+      let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+      let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+      let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:5:6: 5:19\n   \n       bb0: {\n-          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/slice_len.rs:4:5: 4:33\n-          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/slice_len.rs:4:5: 4:30\n-          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/slice_len.rs:4:6: 4:19\n-          StorageLive(_4);                 // bb0[3]: scope 0 at $DIR/slice_len.rs:4:6: 4:19\n-          _9 = const main::promoted[0];    // bb0[4]: scope 0 at $DIR/slice_len.rs:4:6: 4:19\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/slice_len.rs:5:5: 5:30\n+          StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          StorageLive(_4);                 // bb0[3]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          _9 = const main::promoted[0];    // bb0[4]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n                                            // ty::Const\n                                            // + ty: &[u32; 3]\n                                            // + val: Unevaluated(DefId(0:3 ~ slice_len[317d]::main[0]), [], Some(promoted[0]))\n                                            // mir::Constant\n-                                           // + span: $DIR/slice_len.rs:4:6: 4:19\n+                                           // + span: $DIR/slice_len.rs:5:6: 5:19\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(DefId(0:3 ~ slice_len[317d]::main[0]), [], Some(promoted[0])) }\n-          _4 = _9;                         // bb0[5]: scope 0 at $DIR/slice_len.rs:4:6: 4:19\n-          _3 = _4;                         // bb0[6]: scope 0 at $DIR/slice_len.rs:4:6: 4:19\n-          _2 = move _3 as &[u32] (Pointer(Unsize)); // bb0[7]: scope 0 at $DIR/slice_len.rs:4:6: 4:19\n-          StorageDead(_3);                 // bb0[8]: scope 0 at $DIR/slice_len.rs:4:18: 4:19\n-          StorageLive(_6);                 // bb0[9]: scope 0 at $DIR/slice_len.rs:4:31: 4:32\n-          _6 = const 1usize;               // bb0[10]: scope 0 at $DIR/slice_len.rs:4:31: 4:32\n+          _4 = _9;                         // bb0[5]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          _3 = _4;                         // bb0[6]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          _2 = move _3 as &[u32] (Pointer(Unsize)); // bb0[7]: scope 0 at $DIR/slice_len.rs:5:6: 5:19\n+          StorageDead(_3);                 // bb0[8]: scope 0 at $DIR/slice_len.rs:5:18: 5:19\n+          StorageLive(_6);                 // bb0[9]: scope 0 at $DIR/slice_len.rs:5:31: 5:32\n+          _6 = const 1usize;               // bb0[10]: scope 0 at $DIR/slice_len.rs:5:31: 5:32\n                                            // ty::Const\n                                            // + ty: usize\n                                            // + val: Value(Scalar(0x0000000000000001))\n                                            // mir::Constant\n-                                           // + span: $DIR/slice_len.rs:4:31: 4:32\n+                                           // + span: $DIR/slice_len.rs:5:31: 5:32\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n--         _7 = Len((*_2));                 // bb0[11]: scope 0 at $DIR/slice_len.rs:4:5: 4:33\n--         _8 = Lt(_6, _7);                 // bb0[12]: scope 0 at $DIR/slice_len.rs:4:5: 4:33\n--         assert(move _8, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:4:5: 4:33\n-+         _7 = const 3usize;               // bb0[11]: scope 0 at $DIR/slice_len.rs:4:5: 4:33\n+-         _7 = Len((*_2));                 // bb0[11]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+-         _8 = Lt(_6, _7);                 // bb0[12]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+-         assert(move _8, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         _7 = const 3usize;               // bb0[11]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: usize\n +                                          // + val: Value(Scalar(0x0000000000000003))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/slice_len.rs:4:5: 4:33\n++                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n +                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n-+         _8 = const true;                 // bb0[12]: scope 0 at $DIR/slice_len.rs:4:5: 4:33\n++         _8 = const true;                 // bb0[12]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/slice_len.rs:4:5: 4:33\n++                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:4:5: 4:33\n++         assert(const true, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/slice_len.rs:4:5: 4:33\n++                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n       }\n   \n       bb1: {\n--         _1 = (*_2)[_6];                  // bb1[0]: scope 0 at $DIR/slice_len.rs:4:5: 4:33\n-+         _1 = const 2u32;                 // bb1[0]: scope 0 at $DIR/slice_len.rs:4:5: 4:33\n+-         _1 = (*_2)[_6];                  // bb1[0]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         _1 = const 2u32;                 // bb1[0]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x00000002))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/slice_len.rs:4:5: 4:33\n++                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n-          StorageDead(_6);                 // bb1[1]: scope 0 at $DIR/slice_len.rs:4:33: 4:34\n-          StorageDead(_4);                 // bb1[2]: scope 0 at $DIR/slice_len.rs:4:33: 4:34\n-          StorageDead(_2);                 // bb1[3]: scope 0 at $DIR/slice_len.rs:4:33: 4:34\n-          StorageDead(_1);                 // bb1[4]: scope 0 at $DIR/slice_len.rs:4:33: 4:34\n-          _0 = ();                         // bb1[5]: scope 0 at $DIR/slice_len.rs:3:11: 5:2\n-          return;                          // bb1[6]: scope 0 at $DIR/slice_len.rs:5:2: 5:2\n+          StorageDead(_6);                 // bb1[1]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n+          StorageDead(_4);                 // bb1[2]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n+          StorageDead(_2);                 // bb1[3]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n+          StorageDead(_1);                 // bb1[4]: scope 0 at $DIR/slice_len.rs:5:33: 5:34\n+          _0 = ();                         // bb1[5]: scope 0 at $DIR/slice_len.rs:4:11: 6:2\n+          return;                          // bb1[6]: scope 0 at $DIR/slice_len.rs:6:2: 6:2\n       }\n   }\n   ", "previous_filename": "src/test/mir-opt/const_prop/slice_len/rustc.main.ConstProp.diff"}, {"sha": "07b9d175677caefe6e44588c95cfaeb499473c5d", "filename": "src/test/mir-opt/issue-41697.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fissue-41697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fissue-41697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41697.rs?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -13,6 +13,7 @@ trait Foo {\n     fn get(&self) -> [u8; 2];\n }\n \n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR rustc.{{impl}}-{{constant}}.SimplifyCfg-qualify-consts.after.mir\n impl Foo for [u8; 1+1] {\n     fn get(&self) -> [u8; 2] {"}, {"sha": "072ca4cfe4737131732339452f87a5d44e7d84f1", "filename": "src/test/mir-opt/issue-41697/32bit/rustc.{{impl}}-{{constant}}.SimplifyCfg-qualify-consts.after.mir", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fissue-41697%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fissue-41697%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41697%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -0,0 +1,32 @@\n+// MIR for `<impl at $DIR/issue-41697.rs:18:1: 22:2>::{{constant}}#0` after SimplifyCfg-qualify-consts\n+\n+<impl at $DIR/issue-41697.rs:18:1: 22:2>::{{constant}}#0: usize = {\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+    let mut _1: (usize, bool);           // in scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+\n+    bb0: {\n+        _1 = CheckedAdd(const 1usize, const 1usize); // bb0[0]: scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41697.rs:18:19: 18:20\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-41697.rs:18:21: 18:22\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n+        assert(!move (_1.1: bool), \"attempt to add with overflow\") -> [success: bb2, unwind: bb1]; // bb0[1]: scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+    }\n+\n+    bb2: {\n+        _0 = move (_1.0: usize);         // bb2[0]: scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        return;                          // bb2[1]: scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+    }\n+}"}, {"sha": "5a9d1570b80dc0e2ab35668981d35351ce73f80b", "filename": "src/test/mir-opt/issue-41697/64bit/rustc.{{impl}}-{{constant}}.SimplifyCfg-qualify-consts.after.mir", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fissue-41697%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fissue-41697%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41697%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-%7B%7Bconstant%7D%7D.SimplifyCfg-qualify-consts.after.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -1,32 +1,32 @@\n-// MIR for `<impl at $DIR/issue-41697.rs:17:1: 21:2>::{{constant}}#0` after SimplifyCfg-qualify-consts\n+// MIR for `<impl at $DIR/issue-41697.rs:18:1: 22:2>::{{constant}}#0` after SimplifyCfg-qualify-consts\n \n-<impl at $DIR/issue-41697.rs:17:1: 21:2>::{{constant}}#0: usize = {\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/issue-41697.rs:17:19: 17:22\n-    let mut _1: (usize, bool);           // in scope 0 at $DIR/issue-41697.rs:17:19: 17:22\n+<impl at $DIR/issue-41697.rs:18:1: 22:2>::{{constant}}#0: usize = {\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+    let mut _1: (usize, bool);           // in scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n \n     bb0: {\n-        _1 = CheckedAdd(const 1usize, const 1usize); // bb0[0]: scope 0 at $DIR/issue-41697.rs:17:19: 17:22\n+        _1 = CheckedAdd(const 1usize, const 1usize); // bb0[0]: scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000001))\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-41697.rs:17:19: 17:20\n+                                         // + span: $DIR/issue-41697.rs:18:19: 18:20\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000001))\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-41697.rs:17:21: 17:22\n+                                         // + span: $DIR/issue-41697.rs:18:21: 18:22\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n-        assert(!move (_1.1: bool), \"attempt to add with overflow\") -> [success: bb2, unwind: bb1]; // bb0[1]: scope 0 at $DIR/issue-41697.rs:17:19: 17:22\n+        assert(!move (_1.1: bool), \"attempt to add with overflow\") -> [success: bb2, unwind: bb1]; // bb0[1]: scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/issue-41697.rs:17:19: 17:22\n+        resume;                          // bb1[0]: scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n     bb2: {\n-        _0 = move (_1.0: usize);         // bb2[0]: scope 0 at $DIR/issue-41697.rs:17:19: 17:22\n-        return;                          // bb2[1]: scope 0 at $DIR/issue-41697.rs:17:19: 17:22\n+        _0 = move (_1.0: usize);         // bb2[0]: scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        return;                          // bb2[1]: scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n }", "previous_filename": "src/test/mir-opt/issue-41697/rustc.{{impl}}-{{constant}}.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "740cb1c5e969a2d4bf2f0635067f12e3c21567e9", "filename": "src/test/mir-opt/nll/region-subtyping-basic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -9,6 +9,7 @@\n \n fn use_x(_: usize) -> bool { true }\n \n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR rustc.main.nll.0.mir\n fn main() {\n     let mut v = [1, 2, 3];"}, {"sha": "f6ec2d925021e4f289a4d5ee51187af17dde898d", "filename": "src/test/mir-opt/nll/region-subtyping-basic/32bit/rustc.main.nll.0.mir", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F32bit%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F32bit%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F32bit%2Frustc.main.nll.0.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -0,0 +1,158 @@\n+// MIR for `main` 0 nll\n+\n+| Free Region Mapping\n+| '_#0r | Global | ['_#0r, '_#1r]\n+| '_#1r | Local | ['_#1r]\n+|\n+| Inferred Region Values\n+| '_#0r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#0r, '_#1r}\n+| '_#1r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#1r}\n+| '_#2r | U0 | {bb2[0..=8], bb3[0], bb5[0..=2]}\n+| '_#3r | U0 | {bb2[1..=8], bb3[0], bb5[0..=2]}\n+| '_#4r | U0 | {bb2[4..=8], bb3[0], bb5[0..=2]}\n+|\n+| Inference Constraints\n+| '_#0r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n+| '_#1r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n+| '_#2r live at {bb2[0]}\n+| '_#3r live at {bb2[1..=3]}\n+| '_#4r live at {bb2[4..=8], bb3[0], bb5[0..=2]}\n+| '_#2r: '_#3r due to Assignment at Single(bb2[0])\n+| '_#3r: '_#4r due to Assignment at Single(bb2[3])\n+|\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:14:11: 14:11\n+    let mut _1: [usize; Const { ty: usize, val: Value(Scalar(0x00000003)) }]; // in scope 0 at $DIR/region-subtyping-basic.rs:15:9: 15:14\n+    let _3: usize;                       // in scope 0 at $DIR/region-subtyping-basic.rs:16:16: 16:17\n+    let mut _4: usize;                   // in scope 0 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n+    let mut _5: bool;                    // in scope 0 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n+    let mut _7: bool;                    // in scope 0 at $DIR/region-subtyping-basic.rs:18:8: 18:12\n+    let _8: bool;                        // in scope 0 at $DIR/region-subtyping-basic.rs:19:9: 19:18\n+    let mut _9: usize;                   // in scope 0 at $DIR/region-subtyping-basic.rs:19:15: 19:17\n+    let _10: bool;                       // in scope 0 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+    scope 1 {\n+        debug v => _1;                   // in scope 1 at $DIR/region-subtyping-basic.rs:15:9: 15:14\n+        let _2: &'_#3r usize;            // in scope 1 at $DIR/region-subtyping-basic.rs:16:9: 16:10\n+        scope 2 {\n+            debug p => _2;               // in scope 2 at $DIR/region-subtyping-basic.rs:16:9: 16:10\n+            let _6: &'_#4r usize;        // in scope 2 at $DIR/region-subtyping-basic.rs:17:9: 17:10\n+            scope 3 {\n+                debug q => _6;           // in scope 3 at $DIR/region-subtyping-basic.rs:17:9: 17:10\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/region-subtyping-basic.rs:15:9: 15:14\n+        _1 = [const Const(Value(Scalar(0x00000001)): usize), const Const(Value(Scalar(0x00000002)): usize), const Const(Value(Scalar(0x00000003)): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:15:17: 15:26\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:15:18: 15:19\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:15:21: 15:22\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000003))\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:15:24: 15:25\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n+        FakeRead(ForLet, _1);            // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:15:9: 15:14\n+        StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/region-subtyping-basic.rs:16:9: 16:10\n+        StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/region-subtyping-basic.rs:16:16: 16:17\n+        _3 = const Const(Value(Scalar(0x00000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:16:16: 16:17\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:16:16: 16:17\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n+        _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n+        _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n+        assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/region-subtyping-basic.rs:14:1: 23:2\n+    }\n+\n+    bb2: {\n+        _2 = &'_#2r _1[_3];              // bb2[0]: scope 1 at $DIR/region-subtyping-basic.rs:16:13: 16:18\n+        FakeRead(ForLet, _2);            // bb2[1]: scope 1 at $DIR/region-subtyping-basic.rs:16:9: 16:10\n+        StorageLive(_6);                 // bb2[2]: scope 2 at $DIR/region-subtyping-basic.rs:17:9: 17:10\n+        _6 = _2;                         // bb2[3]: scope 2 at $DIR/region-subtyping-basic.rs:17:13: 17:14\n+        FakeRead(ForLet, _6);            // bb2[4]: scope 2 at $DIR/region-subtyping-basic.rs:17:9: 17:10\n+        StorageLive(_7);                 // bb2[5]: scope 3 at $DIR/region-subtyping-basic.rs:18:8: 18:12\n+        _7 = const Const(Value(Scalar(0x01)): bool); // bb2[6]: scope 3 at $DIR/region-subtyping-basic.rs:18:8: 18:12\n+                                         // ty::Const\n+                                         // + ty: bool\n+                                         // + val: Value(Scalar(0x01))\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:18:8: 18:12\n+                                         // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+        FakeRead(ForMatchedPlace, _7);   // bb2[7]: scope 3 at $DIR/region-subtyping-basic.rs:18:8: 18:12\n+        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb3]; // bb2[8]: scope 3 at $DIR/region-subtyping-basic.rs:18:5: 22:6\n+    }\n+\n+    bb3: {\n+        falseEdges -> [real: bb5, imaginary: bb4]; // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:18:5: 22:6\n+    }\n+\n+    bb4: {\n+        StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        _10 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x00000016)): usize)) -> [return: bb7, unwind: bb1]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+                                         // ty::Const\n+                                         // + ty: fn(usize) -> bool {use_x}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n+                                         // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000016))\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:21:15: 21:17\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000016)) }\n+    }\n+\n+    bb5: {\n+        StorageLive(_8);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:19:9: 19:18\n+        StorageLive(_9);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:19:15: 19:17\n+        _9 = (*_6);                      // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:19:15: 19:17\n+        _8 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb6, unwind: bb1]; // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:19:9: 19:18\n+                                         // ty::Const\n+                                         // + ty: fn(usize) -> bool {use_x}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/region-subtyping-basic.rs:19:9: 19:14\n+                                         // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n+    }\n+\n+    bb6: {\n+        StorageDead(_9);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:19:17: 19:18\n+        StorageDead(_8);                 // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:19:18: 19:19\n+        _0 = ();                         // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:18:13: 20:6\n+        goto -> bb8;                     // bb6[3]: scope 3 at $DIR/region-subtyping-basic.rs:18:5: 22:6\n+    }\n+\n+    bb7: {\n+        StorageDead(_10);                // bb7[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n+        _0 = ();                         // bb7[1]: scope 3 at $DIR/region-subtyping-basic.rs:20:12: 22:6\n+        goto -> bb8;                     // bb7[2]: scope 3 at $DIR/region-subtyping-basic.rs:18:5: 22:6\n+    }\n+\n+    bb8: {\n+        StorageDead(_6);                 // bb8[0]: scope 2 at $DIR/region-subtyping-basic.rs:23:1: 23:2\n+        StorageDead(_3);                 // bb8[1]: scope 1 at $DIR/region-subtyping-basic.rs:23:1: 23:2\n+        StorageDead(_2);                 // bb8[2]: scope 1 at $DIR/region-subtyping-basic.rs:23:1: 23:2\n+        StorageDead(_1);                 // bb8[3]: scope 0 at $DIR/region-subtyping-basic.rs:23:1: 23:2\n+        StorageDead(_7);                 // bb8[4]: scope 0 at $DIR/region-subtyping-basic.rs:23:1: 23:2\n+        return;                          // bb8[5]: scope 0 at $DIR/region-subtyping-basic.rs:23:2: 23:2\n+    }\n+}"}, {"sha": "fa3a9a0e1222ab1faa412ad9360f10acfca15840", "filename": "src/test/mir-opt/nll/region-subtyping-basic/64bit/rustc.main.nll.0.mir", "status": "renamed", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -21,138 +21,138 @@\n | '_#3r: '_#4r due to Assignment at Single(bb2[3])\n |\n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:13:11: 13:11\n-    let mut _1: [usize; Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }]; // in scope 0 at $DIR/region-subtyping-basic.rs:14:9: 14:14\n-    let _3: usize;                       // in scope 0 at $DIR/region-subtyping-basic.rs:15:16: 15:17\n-    let mut _4: usize;                   // in scope 0 at $DIR/region-subtyping-basic.rs:15:14: 15:18\n-    let mut _5: bool;                    // in scope 0 at $DIR/region-subtyping-basic.rs:15:14: 15:18\n-    let mut _7: bool;                    // in scope 0 at $DIR/region-subtyping-basic.rs:17:8: 17:12\n-    let _8: bool;                        // in scope 0 at $DIR/region-subtyping-basic.rs:18:9: 18:18\n-    let mut _9: usize;                   // in scope 0 at $DIR/region-subtyping-basic.rs:18:15: 18:17\n-    let _10: bool;                       // in scope 0 at $DIR/region-subtyping-basic.rs:20:9: 20:18\n+    let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:14:11: 14:11\n+    let mut _1: [usize; Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }]; // in scope 0 at $DIR/region-subtyping-basic.rs:15:9: 15:14\n+    let _3: usize;                       // in scope 0 at $DIR/region-subtyping-basic.rs:16:16: 16:17\n+    let mut _4: usize;                   // in scope 0 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n+    let mut _5: bool;                    // in scope 0 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n+    let mut _7: bool;                    // in scope 0 at $DIR/region-subtyping-basic.rs:18:8: 18:12\n+    let _8: bool;                        // in scope 0 at $DIR/region-subtyping-basic.rs:19:9: 19:18\n+    let mut _9: usize;                   // in scope 0 at $DIR/region-subtyping-basic.rs:19:15: 19:17\n+    let _10: bool;                       // in scope 0 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n     scope 1 {\n-        debug v => _1;                   // in scope 1 at $DIR/region-subtyping-basic.rs:14:9: 14:14\n-        let _2: &'_#3r usize;            // in scope 1 at $DIR/region-subtyping-basic.rs:15:9: 15:10\n+        debug v => _1;                   // in scope 1 at $DIR/region-subtyping-basic.rs:15:9: 15:14\n+        let _2: &'_#3r usize;            // in scope 1 at $DIR/region-subtyping-basic.rs:16:9: 16:10\n         scope 2 {\n-            debug p => _2;               // in scope 2 at $DIR/region-subtyping-basic.rs:15:9: 15:10\n-            let _6: &'_#4r usize;        // in scope 2 at $DIR/region-subtyping-basic.rs:16:9: 16:10\n+            debug p => _2;               // in scope 2 at $DIR/region-subtyping-basic.rs:16:9: 16:10\n+            let _6: &'_#4r usize;        // in scope 2 at $DIR/region-subtyping-basic.rs:17:9: 17:10\n             scope 3 {\n-                debug q => _6;           // in scope 3 at $DIR/region-subtyping-basic.rs:16:9: 16:10\n+                debug q => _6;           // in scope 3 at $DIR/region-subtyping-basic.rs:17:9: 17:10\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/region-subtyping-basic.rs:14:9: 14:14\n-        _1 = [const Const(Value(Scalar(0x0000000000000001)): usize), const Const(Value(Scalar(0x0000000000000002)): usize), const Const(Value(Scalar(0x0000000000000003)): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:14:17: 14:26\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/region-subtyping-basic.rs:15:9: 15:14\n+        _1 = [const Const(Value(Scalar(0x0000000000000001)): usize), const Const(Value(Scalar(0x0000000000000002)): usize), const Const(Value(Scalar(0x0000000000000003)): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:15:17: 15:26\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000001))\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:14:18: 14:19\n+                                         // + span: $DIR/region-subtyping-basic.rs:15:18: 15:19\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000002))\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:14:21: 14:22\n+                                         // + span: $DIR/region-subtyping-basic.rs:15:21: 15:22\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000003))\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:14:24: 14:25\n+                                         // + span: $DIR/region-subtyping-basic.rs:15:24: 15:25\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n-        FakeRead(ForLet, _1);            // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:14:9: 14:14\n-        StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/region-subtyping-basic.rs:15:9: 15:10\n-        StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/region-subtyping-basic.rs:15:16: 15:17\n-        _3 = const Const(Value(Scalar(0x0000000000000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:15:16: 15:17\n+        FakeRead(ForLet, _1);            // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:15:9: 15:14\n+        StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/region-subtyping-basic.rs:16:9: 16:10\n+        StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/region-subtyping-basic.rs:16:16: 16:17\n+        _3 = const Const(Value(Scalar(0x0000000000000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:16:16: 16:17\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000000))\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:15:16: 15:17\n+                                         // + span: $DIR/region-subtyping-basic.rs:16:16: 16:17\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n-        _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:15:14: 15:18\n-        _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:15:14: 15:18\n-        assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:15:14: 15:18\n+        _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n+        _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n+        assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/region-subtyping-basic.rs:13:1: 22:2\n+        resume;                          // bb1[0]: scope 0 at $DIR/region-subtyping-basic.rs:14:1: 23:2\n     }\n \n     bb2: {\n-        _2 = &'_#2r _1[_3];              // bb2[0]: scope 1 at $DIR/region-subtyping-basic.rs:15:13: 15:18\n-        FakeRead(ForLet, _2);            // bb2[1]: scope 1 at $DIR/region-subtyping-basic.rs:15:9: 15:10\n-        StorageLive(_6);                 // bb2[2]: scope 2 at $DIR/region-subtyping-basic.rs:16:9: 16:10\n-        _6 = _2;                         // bb2[3]: scope 2 at $DIR/region-subtyping-basic.rs:16:13: 16:14\n-        FakeRead(ForLet, _6);            // bb2[4]: scope 2 at $DIR/region-subtyping-basic.rs:16:9: 16:10\n-        StorageLive(_7);                 // bb2[5]: scope 3 at $DIR/region-subtyping-basic.rs:17:8: 17:12\n-        _7 = const Const(Value(Scalar(0x01)): bool); // bb2[6]: scope 3 at $DIR/region-subtyping-basic.rs:17:8: 17:12\n+        _2 = &'_#2r _1[_3];              // bb2[0]: scope 1 at $DIR/region-subtyping-basic.rs:16:13: 16:18\n+        FakeRead(ForLet, _2);            // bb2[1]: scope 1 at $DIR/region-subtyping-basic.rs:16:9: 16:10\n+        StorageLive(_6);                 // bb2[2]: scope 2 at $DIR/region-subtyping-basic.rs:17:9: 17:10\n+        _6 = _2;                         // bb2[3]: scope 2 at $DIR/region-subtyping-basic.rs:17:13: 17:14\n+        FakeRead(ForLet, _6);            // bb2[4]: scope 2 at $DIR/region-subtyping-basic.rs:17:9: 17:10\n+        StorageLive(_7);                 // bb2[5]: scope 3 at $DIR/region-subtyping-basic.rs:18:8: 18:12\n+        _7 = const Const(Value(Scalar(0x01)): bool); // bb2[6]: scope 3 at $DIR/region-subtyping-basic.rs:18:8: 18:12\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x01))\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:17:8: 17:12\n+                                         // + span: $DIR/region-subtyping-basic.rs:18:8: 18:12\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-        FakeRead(ForMatchedPlace, _7);   // bb2[7]: scope 3 at $DIR/region-subtyping-basic.rs:17:8: 17:12\n-        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb3]; // bb2[8]: scope 3 at $DIR/region-subtyping-basic.rs:17:5: 21:6\n+        FakeRead(ForMatchedPlace, _7);   // bb2[7]: scope 3 at $DIR/region-subtyping-basic.rs:18:8: 18:12\n+        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb3]; // bb2[8]: scope 3 at $DIR/region-subtyping-basic.rs:18:5: 22:6\n     }\n \n     bb3: {\n-        falseEdges -> [real: bb5, imaginary: bb4]; // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:17:5: 21:6\n+        falseEdges -> [real: bb5, imaginary: bb4]; // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:18:5: 22:6\n     }\n \n     bb4: {\n-        StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:9: 20:18\n-        _10 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x0000000000000016)): usize)) -> [return: bb7, unwind: bb1]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:20:9: 20:18\n+        StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        _10 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x0000000000000016)): usize)) -> [return: bb7, unwind: bb1]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n                                          // ty::Const\n                                          // + ty: fn(usize) -> bool {use_x}\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:20:9: 20:14\n+                                         // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000016))\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:20:15: 20:17\n+                                         // + span: $DIR/region-subtyping-basic.rs:21:15: 21:17\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000016)) }\n     }\n \n     bb5: {\n-        StorageLive(_8);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:18:9: 18:18\n-        StorageLive(_9);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:18:15: 18:17\n-        _9 = (*_6);                      // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:18:15: 18:17\n-        _8 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb6, unwind: bb1]; // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:18:9: 18:18\n+        StorageLive(_8);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:19:9: 19:18\n+        StorageLive(_9);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:19:15: 19:17\n+        _9 = (*_6);                      // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:19:15: 19:17\n+        _8 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb6, unwind: bb1]; // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:19:9: 19:18\n                                          // ty::Const\n                                          // + ty: fn(usize) -> bool {use_x}\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:18:9: 18:14\n+                                         // + span: $DIR/region-subtyping-basic.rs:19:9: 19:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb6: {\n-        StorageDead(_9);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:18:17: 18:18\n-        StorageDead(_8);                 // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:18:18: 18:19\n-        _0 = ();                         // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:17:13: 19:6\n-        goto -> bb8;                     // bb6[3]: scope 3 at $DIR/region-subtyping-basic.rs:17:5: 21:6\n+        StorageDead(_9);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:19:17: 19:18\n+        StorageDead(_8);                 // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:19:18: 19:19\n+        _0 = ();                         // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:18:13: 20:6\n+        goto -> bb8;                     // bb6[3]: scope 3 at $DIR/region-subtyping-basic.rs:18:5: 22:6\n     }\n \n     bb7: {\n-        StorageDead(_10);                // bb7[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:18: 20:19\n-        _0 = ();                         // bb7[1]: scope 3 at $DIR/region-subtyping-basic.rs:19:12: 21:6\n-        goto -> bb8;                     // bb7[2]: scope 3 at $DIR/region-subtyping-basic.rs:17:5: 21:6\n+        StorageDead(_10);                // bb7[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n+        _0 = ();                         // bb7[1]: scope 3 at $DIR/region-subtyping-basic.rs:20:12: 22:6\n+        goto -> bb8;                     // bb7[2]: scope 3 at $DIR/region-subtyping-basic.rs:18:5: 22:6\n     }\n \n     bb8: {\n-        StorageDead(_6);                 // bb8[0]: scope 2 at $DIR/region-subtyping-basic.rs:22:1: 22:2\n-        StorageDead(_3);                 // bb8[1]: scope 1 at $DIR/region-subtyping-basic.rs:22:1: 22:2\n-        StorageDead(_2);                 // bb8[2]: scope 1 at $DIR/region-subtyping-basic.rs:22:1: 22:2\n-        StorageDead(_1);                 // bb8[3]: scope 0 at $DIR/region-subtyping-basic.rs:22:1: 22:2\n-        StorageDead(_7);                 // bb8[4]: scope 0 at $DIR/region-subtyping-basic.rs:22:1: 22:2\n-        return;                          // bb8[5]: scope 0 at $DIR/region-subtyping-basic.rs:22:2: 22:2\n+        StorageDead(_6);                 // bb8[0]: scope 2 at $DIR/region-subtyping-basic.rs:23:1: 23:2\n+        StorageDead(_3);                 // bb8[1]: scope 1 at $DIR/region-subtyping-basic.rs:23:1: 23:2\n+        StorageDead(_2);                 // bb8[2]: scope 1 at $DIR/region-subtyping-basic.rs:23:1: 23:2\n+        StorageDead(_1);                 // bb8[3]: scope 0 at $DIR/region-subtyping-basic.rs:23:1: 23:2\n+        StorageDead(_7);                 // bb8[4]: scope 0 at $DIR/region-subtyping-basic.rs:23:1: 23:2\n+        return;                          // bb8[5]: scope 0 at $DIR/region-subtyping-basic.rs:23:2: 23:2\n     }\n }", "previous_filename": "src/test/mir-opt/nll/region-subtyping-basic/rustc.main.nll.0.mir"}, {"sha": "daf397c3d9c14bc7ddf68ed7b053dde5b5551956", "filename": "src/test/mir-opt/packed-struct-drop-aligned.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -1,5 +1,6 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n \n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR rustc.main.SimplifyCfg-elaborate-drops.after.mir\n fn main() {\n     let mut x = Packed(Aligned(Droppy(0)));"}, {"sha": "03265c613bc79f4a48abb227c00d4f5a39c6527c", "filename": "src/test/mir-opt/packed-struct-drop-aligned/32bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -0,0 +1,67 @@\n+// MIR for `main` after SimplifyCfg-elaborate-drops\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/packed-struct-drop-aligned.rs:5:11: 5:11\n+    let mut _1: Packed;                  // in scope 0 at $DIR/packed-struct-drop-aligned.rs:6:9: 6:14\n+    let mut _2: Aligned;                 // in scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n+    let mut _3: Droppy;                  // in scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n+    let mut _4: Aligned;                 // in scope 0 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n+    let mut _5: Droppy;                  // in scope 0 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n+    let mut _6: Aligned;                 // in scope 0 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+    scope 1 {\n+        debug x => _1;                   // in scope 1 at $DIR/packed-struct-drop-aligned.rs:6:9: 6:14\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:9: 6:14\n+        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n+        StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n+        _3 = Droppy(const 0usize,);      // bb0[3]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/packed-struct-drop-aligned.rs:6:39: 6:40\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n+        _2 = Aligned(move _3,);          // bb0[4]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n+        StorageDead(_3);                 // bb0[5]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:41: 6:42\n+        _1 = Packed(move _2,);           // bb0[6]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:17: 6:43\n+        StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:42: 6:43\n+        StorageLive(_4);                 // bb0[8]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n+        StorageLive(_5);                 // bb0[9]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n+        _5 = Droppy(const 0usize,);      // bb0[10]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/packed-struct-drop-aligned.rs:7:26: 7:27\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n+        _4 = Aligned(move _5,);          // bb0[11]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n+        StorageDead(_5);                 // bb0[12]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n+        StorageLive(_6);                 // bb0[13]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        _6 = move (_1.0: Aligned);       // bb0[14]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        drop(_6) -> [return: bb4, unwind: bb3]; // bb0[15]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n+    }\n+\n+    bb2: {\n+        StorageDead(_1);                 // bb2[0]: scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        return;                          // bb2[1]: scope 0 at $DIR/packed-struct-drop-aligned.rs:8:2: 8:2\n+    }\n+\n+    bb3 (cleanup): {\n+        (_1.0: Aligned) = move _4;       // bb3[0]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        drop(_1) -> bb1;                 // bb3[1]: scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+    }\n+\n+    bb4: {\n+        StorageDead(_6);                 // bb4[0]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        (_1.0: Aligned) = move _4;       // bb4[1]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        StorageDead(_4);                 // bb4[2]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n+        _0 = ();                         // bb4[3]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n+        drop(_1) -> [return: bb2, unwind: bb1]; // bb4[4]: scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+    }\n+}"}, {"sha": "a1424d0bf5922c0430eec083d155b04474a44d2f", "filename": "src/test/mir-opt/packed-struct-drop-aligned/64bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "renamed", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -1,67 +1,67 @@\n // MIR for `main` after SimplifyCfg-elaborate-drops\n \n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/packed-struct-drop-aligned.rs:4:11: 4:11\n-    let mut _1: Packed;                  // in scope 0 at $DIR/packed-struct-drop-aligned.rs:5:9: 5:14\n-    let mut _2: Aligned;                 // in scope 0 at $DIR/packed-struct-drop-aligned.rs:5:24: 5:42\n-    let mut _3: Droppy;                  // in scope 0 at $DIR/packed-struct-drop-aligned.rs:5:32: 5:41\n-    let mut _4: Aligned;                 // in scope 0 at $DIR/packed-struct-drop-aligned.rs:6:11: 6:29\n-    let mut _5: Droppy;                  // in scope 0 at $DIR/packed-struct-drop-aligned.rs:6:19: 6:28\n-    let mut _6: Aligned;                 // in scope 0 at $DIR/packed-struct-drop-aligned.rs:6:5: 6:8\n+    let mut _0: ();                      // return place in scope 0 at $DIR/packed-struct-drop-aligned.rs:5:11: 5:11\n+    let mut _1: Packed;                  // in scope 0 at $DIR/packed-struct-drop-aligned.rs:6:9: 6:14\n+    let mut _2: Aligned;                 // in scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n+    let mut _3: Droppy;                  // in scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n+    let mut _4: Aligned;                 // in scope 0 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n+    let mut _5: Droppy;                  // in scope 0 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n+    let mut _6: Aligned;                 // in scope 0 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n     scope 1 {\n-        debug x => _1;                   // in scope 1 at $DIR/packed-struct-drop-aligned.rs:5:9: 5:14\n+        debug x => _1;                   // in scope 1 at $DIR/packed-struct-drop-aligned.rs:6:9: 6:14\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:9: 5:14\n-        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:24: 5:42\n-        StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:32: 5:41\n-        _3 = Droppy(const 0usize,);      // bb0[3]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:32: 5:41\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:9: 6:14\n+        StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n+        StorageLive(_3);                 // bb0[2]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n+        _3 = Droppy(const 0usize,);      // bb0[3]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:32: 6:41\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000000))\n                                          // mir::Constant\n-                                         // + span: $DIR/packed-struct-drop-aligned.rs:5:39: 5:40\n+                                         // + span: $DIR/packed-struct-drop-aligned.rs:6:39: 6:40\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n-        _2 = Aligned(move _3,);          // bb0[4]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:24: 5:42\n-        StorageDead(_3);                 // bb0[5]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:41: 5:42\n-        _1 = Packed(move _2,);           // bb0[6]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:17: 5:43\n-        StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:42: 5:43\n-        StorageLive(_4);                 // bb0[8]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:11: 6:29\n-        StorageLive(_5);                 // bb0[9]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:19: 6:28\n-        _5 = Droppy(const 0usize,);      // bb0[10]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:19: 6:28\n+        _2 = Aligned(move _3,);          // bb0[4]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:24: 6:42\n+        StorageDead(_3);                 // bb0[5]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:41: 6:42\n+        _1 = Packed(move _2,);           // bb0[6]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:17: 6:43\n+        StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/packed-struct-drop-aligned.rs:6:42: 6:43\n+        StorageLive(_4);                 // bb0[8]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n+        StorageLive(_5);                 // bb0[9]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n+        _5 = Droppy(const 0usize,);      // bb0[10]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:19: 7:28\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000000))\n                                          // mir::Constant\n-                                         // + span: $DIR/packed-struct-drop-aligned.rs:6:26: 6:27\n+                                         // + span: $DIR/packed-struct-drop-aligned.rs:7:26: 7:27\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n-        _4 = Aligned(move _5,);          // bb0[11]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:11: 6:29\n-        StorageDead(_5);                 // bb0[12]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:28: 6:29\n-        StorageLive(_6);                 // bb0[13]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:5: 6:8\n-        _6 = move (_1.0: Aligned);       // bb0[14]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:5: 6:8\n-        drop(_6) -> [return: bb4, unwind: bb3]; // bb0[15]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:5: 6:8\n+        _4 = Aligned(move _5,);          // bb0[11]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:11: 7:29\n+        StorageDead(_5);                 // bb0[12]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n+        StorageLive(_6);                 // bb0[13]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        _6 = move (_1.0: Aligned);       // bb0[14]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        drop(_6) -> [return: bb4, unwind: bb3]; // bb0[15]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/packed-struct-drop-aligned.rs:4:1: 7:2\n+        resume;                          // bb1[0]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:1: 8:2\n     }\n \n     bb2: {\n-        StorageDead(_1);                 // bb2[0]: scope 0 at $DIR/packed-struct-drop-aligned.rs:7:1: 7:2\n-        return;                          // bb2[1]: scope 0 at $DIR/packed-struct-drop-aligned.rs:7:2: 7:2\n+        StorageDead(_1);                 // bb2[0]: scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n+        return;                          // bb2[1]: scope 0 at $DIR/packed-struct-drop-aligned.rs:8:2: 8:2\n     }\n \n     bb3 (cleanup): {\n-        (_1.0: Aligned) = move _4;       // bb3[0]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:5: 6:8\n-        drop(_1) -> bb1;                 // bb3[1]: scope 0 at $DIR/packed-struct-drop-aligned.rs:7:1: 7:2\n+        (_1.0: Aligned) = move _4;       // bb3[0]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        drop(_1) -> bb1;                 // bb3[1]: scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n \n     bb4: {\n-        StorageDead(_6);                 // bb4[0]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:5: 6:8\n-        (_1.0: Aligned) = move _4;       // bb4[1]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:5: 6:8\n-        StorageDead(_4);                 // bb4[2]: scope 1 at $DIR/packed-struct-drop-aligned.rs:6:28: 6:29\n-        _0 = ();                         // bb4[3]: scope 0 at $DIR/packed-struct-drop-aligned.rs:4:11: 7:2\n-        drop(_1) -> [return: bb2, unwind: bb1]; // bb4[4]: scope 0 at $DIR/packed-struct-drop-aligned.rs:7:1: 7:2\n+        StorageDead(_6);                 // bb4[0]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        (_1.0: Aligned) = move _4;       // bb4[1]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:5: 7:8\n+        StorageDead(_4);                 // bb4[2]: scope 1 at $DIR/packed-struct-drop-aligned.rs:7:28: 7:29\n+        _0 = ();                         // bb4[3]: scope 0 at $DIR/packed-struct-drop-aligned.rs:5:11: 8:2\n+        drop(_1) -> [return: bb2, unwind: bb1]; // bb4[4]: scope 0 at $DIR/packed-struct-drop-aligned.rs:8:1: 8:2\n     }\n }", "previous_filename": "src/test/mir-opt/packed-struct-drop-aligned/rustc.main.SimplifyCfg-elaborate-drops.after.mir"}, {"sha": "c8c7e9188c2ba18d897887abc34c8e041f47f911", "filename": "src/test/mir-opt/simple-match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fsimple-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fsimple-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple-match.rs?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -1,5 +1,6 @@\n // Test that we don't generate unnecessarily large MIR for very simple matches\n \n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR rustc.match_bool.mir_map.0.mir\n fn match_bool(x: bool) -> usize {\n     match x {"}, {"sha": "b720255893a20dd5dd54126f10e0398474641c65", "filename": "src/test/mir-opt/simple-match/32bit/rustc.match_bool.mir_map.0.mir", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fsimple-match%2F32bit%2Frustc.match_bool.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fsimple-match%2F32bit%2Frustc.match_bool.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple-match%2F32bit%2Frustc.match_bool.mir_map.0.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -0,0 +1,49 @@\n+// MIR for `match_bool` 0 mir_map\n+\n+fn match_bool(_1: bool) -> usize {\n+    debug x => _1;                       // in scope 0 at $DIR/simple-match.rs:5:15: 5:16\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/simple-match.rs:5:27: 5:32\n+\n+    bb0: {\n+        FakeRead(ForMatchedPlace, _1);   // bb0[0]: scope 0 at $DIR/simple-match.rs:6:11: 6:12\n+        switchInt(_1) -> [false: bb3, otherwise: bb2]; // bb0[1]: scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/simple-match.rs:5:1: 10:2\n+    }\n+\n+    bb2: {\n+        falseEdges -> [real: bb4, imaginary: bb3]; // bb2[0]: scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+    }\n+\n+    bb3: {\n+        _0 = const 20usize;              // bb3[0]: scope 0 at $DIR/simple-match.rs:8:14: 8:16\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000014))\n+                                         // mir::Constant\n+                                         // + span: $DIR/simple-match.rs:8:14: 8:16\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000014)) }\n+        goto -> bb5;                     // bb3[1]: scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+    }\n+\n+    bb4: {\n+        _0 = const 10usize;              // bb4[0]: scope 0 at $DIR/simple-match.rs:7:17: 7:19\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x0000000a))\n+                                         // mir::Constant\n+                                         // + span: $DIR/simple-match.rs:7:17: 7:19\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x0000000a)) }\n+        goto -> bb5;                     // bb4[1]: scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+    }\n+\n+    bb5: {\n+        goto -> bb6;                     // bb5[0]: scope 0 at $DIR/simple-match.rs:10:2: 10:2\n+    }\n+\n+    bb6: {\n+        return;                          // bb6[0]: scope 0 at $DIR/simple-match.rs:10:2: 10:2\n+    }\n+}"}, {"sha": "f2fe72d0c118c4c610404bc46c8befbd1e4cd231", "filename": "src/test/mir-opt/simple-match/64bit/rustc.match_bool.mir_map.0.mir", "status": "renamed", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fsimple-match%2F64bit%2Frustc.match_bool.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fsimple-match%2F64bit%2Frustc.match_bool.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple-match%2F64bit%2Frustc.match_bool.mir_map.0.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -1,49 +1,49 @@\n // MIR for `match_bool` 0 mir_map\n \n fn match_bool(_1: bool) -> usize {\n-    debug x => _1;                       // in scope 0 at $DIR/simple-match.rs:4:15: 4:16\n-    let mut _0: usize;                   // return place in scope 0 at $DIR/simple-match.rs:4:27: 4:32\n+    debug x => _1;                       // in scope 0 at $DIR/simple-match.rs:5:15: 5:16\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/simple-match.rs:5:27: 5:32\n \n     bb0: {\n-        FakeRead(ForMatchedPlace, _1);   // bb0[0]: scope 0 at $DIR/simple-match.rs:5:11: 5:12\n-        switchInt(_1) -> [false: bb3, otherwise: bb2]; // bb0[1]: scope 0 at $DIR/simple-match.rs:6:9: 6:13\n+        FakeRead(ForMatchedPlace, _1);   // bb0[0]: scope 0 at $DIR/simple-match.rs:6:11: 6:12\n+        switchInt(_1) -> [false: bb3, otherwise: bb2]; // bb0[1]: scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/simple-match.rs:4:1: 9:2\n+        resume;                          // bb1[0]: scope 0 at $DIR/simple-match.rs:5:1: 10:2\n     }\n \n     bb2: {\n-        falseEdges -> [real: bb4, imaginary: bb3]; // bb2[0]: scope 0 at $DIR/simple-match.rs:6:9: 6:13\n+        falseEdges -> [real: bb4, imaginary: bb3]; // bb2[0]: scope 0 at $DIR/simple-match.rs:7:9: 7:13\n     }\n \n     bb3: {\n-        _0 = const 20usize;              // bb3[0]: scope 0 at $DIR/simple-match.rs:7:14: 7:16\n+        _0 = const 20usize;              // bb3[0]: scope 0 at $DIR/simple-match.rs:8:14: 8:16\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000014))\n                                          // mir::Constant\n-                                         // + span: $DIR/simple-match.rs:7:14: 7:16\n+                                         // + span: $DIR/simple-match.rs:8:14: 8:16\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000014)) }\n-        goto -> bb5;                     // bb3[1]: scope 0 at $DIR/simple-match.rs:5:5: 8:6\n+        goto -> bb5;                     // bb3[1]: scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n     bb4: {\n-        _0 = const 10usize;              // bb4[0]: scope 0 at $DIR/simple-match.rs:6:17: 6:19\n+        _0 = const 10usize;              // bb4[0]: scope 0 at $DIR/simple-match.rs:7:17: 7:19\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x000000000000000a))\n                                          // mir::Constant\n-                                         // + span: $DIR/simple-match.rs:6:17: 6:19\n+                                         // + span: $DIR/simple-match.rs:7:17: 7:19\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x000000000000000a)) }\n-        goto -> bb5;                     // bb4[1]: scope 0 at $DIR/simple-match.rs:5:5: 8:6\n+        goto -> bb5;                     // bb4[1]: scope 0 at $DIR/simple-match.rs:6:5: 9:6\n     }\n \n     bb5: {\n-        goto -> bb6;                     // bb5[0]: scope 0 at $DIR/simple-match.rs:9:2: 9:2\n+        goto -> bb6;                     // bb5[0]: scope 0 at $DIR/simple-match.rs:10:2: 10:2\n     }\n \n     bb6: {\n-        return;                          // bb6[0]: scope 0 at $DIR/simple-match.rs:9:2: 9:2\n+        return;                          // bb6[0]: scope 0 at $DIR/simple-match.rs:10:2: 10:2\n     }\n }", "previous_filename": "src/test/mir-opt/simple-match/rustc.match_bool.mir_map.0.mir"}, {"sha": "5d8d37e0bc50fb2c137b8dac096a8b7dbf8bea45", "filename": "src/test/mir-opt/slice-drop-shim.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: -Zmir-opt-level=0\n \n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR rustc.ptr-drop_in_place.[std__string__String].AddMovesForPackedDrops.before.mir\n fn main() {\n     let _fn = std::ptr::drop_in_place::<[String]> as unsafe fn(_);"}, {"sha": "05a07cbf4db8d61daf7966077ebea35c6db61757", "filename": "src/test/mir-opt/slice-drop-shim/32bit/rustc.ptr-drop_in_place.[std__string__String].AddMovesForPackedDrops.before.mir", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fslice-drop-shim%2F32bit%2Frustc.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fslice-drop-shim%2F32bit%2Frustc.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice-drop-shim%2F32bit%2Frustc.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -0,0 +1,131 @@\n+// MIR for `std::intrinsics::drop_in_place` before AddMovesForPackedDrops\n+\n+fn std::intrinsics::drop_in_place(_1: *mut [std::string::String]) -> () {\n+    let mut _0: ();                      // return place in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _2: usize;                   // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _3: usize;                   // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _4: usize;                   // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _5: *mut std::string::String; // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _6: bool;                    // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _7: *mut std::string::String; // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _8: bool;                    // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _9: *mut std::string::String; // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _10: *mut std::string::String; // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _11: *mut std::string::String; // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _12: bool;                   // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _13: *mut std::string::String; // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _14: bool;                   // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _15: *mut [std::string::String]; // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+\n+    bb0: {\n+        goto -> bb15;                    // bb0[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb1: {\n+        return;                          // bb1[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb2 (cleanup): {\n+        resume;                          // bb2[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb3 (cleanup): {\n+        _5 = &raw mut (*_1)[_4];         // bb3[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        _4 = Add(move _4, const 1usize); // bb3[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n+        drop((*_5)) -> bb4;              // bb3[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb4 (cleanup): {\n+        _6 = Eq(_4, _3);                 // bb4[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        switchInt(move _6) -> [false: bb3, otherwise: bb2]; // bb4[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb5: {\n+        _7 = &raw mut (*_1)[_4];         // bb5[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        _4 = Add(move _4, const 1usize); // bb5[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n+        drop((*_7)) -> [return: bb6, unwind: bb4]; // bb5[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb6: {\n+        _8 = Eq(_4, _3);                 // bb6[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        switchInt(move _8) -> [false: bb5, otherwise: bb1]; // bb6[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb7: {\n+        _4 = const 0usize;               // bb7[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n+        goto -> bb6;                     // bb7[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb8: {\n+        goto -> bb7;                     // bb8[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb9 (cleanup): {\n+        _11 = _9;                        // bb9[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        _9 = Offset(move _9, const 1usize); // bb9[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n+        drop((*_11)) -> bb10;            // bb9[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb10 (cleanup): {\n+        _12 = Eq(_9, _10);               // bb10[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        switchInt(move _12) -> [false: bb9, otherwise: bb2]; // bb10[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb11: {\n+        _13 = _9;                        // bb11[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        _9 = Offset(move _9, const 1usize); // bb11[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // ty::Const\n+                                         // + ty: usize\n+                                         // + val: Value(Scalar(0x00000001))\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n+        drop((*_13)) -> [return: bb12, unwind: bb10]; // bb11[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb12: {\n+        _14 = Eq(_9, _10);               // bb12[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        switchInt(move _14) -> [false: bb11, otherwise: bb1]; // bb12[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb13: {\n+        _15 = &raw mut (*_1);            // bb13[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        _9 = move _15 as *mut std::string::String (Misc); // bb13[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        _10 = Offset(_9, move _3);       // bb13[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        goto -> bb12;                    // bb13[3]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb14: {\n+        goto -> bb13;                    // bb14[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb15: {\n+        _2 = SizeOf(std::string::String); // bb15[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        _3 = Len((*_1));                 // bb15[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        switchInt(move _2) -> [0usize: bb8, otherwise: bb14]; // bb15[2]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+}"}, {"sha": "13178d94f170ab6cec3b79dd20eb7a911181134e", "filename": "src/test/mir-opt/slice-drop-shim/64bit/rustc.ptr-drop_in_place.[std__string__String].AddMovesForPackedDrops.before.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fslice-drop-shim%2F64bit%2Frustc.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Fslice-drop-shim%2F64bit%2Frustc.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice-drop-shim%2F64bit%2Frustc.ptr-drop_in_place.%5Bstd__string__String%5D.AddMovesForPackedDrops.before.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "previous_filename": "src/test/mir-opt/slice-drop-shim/rustc.ptr-drop_in_place.[std__string__String].AddMovesForPackedDrops.before.mir"}, {"sha": "ffe8ca01dfb4abf7d973f22d52f1366ac4fb93ef", "filename": "src/test/mir-opt/unusual-item-types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -1,6 +1,8 @@\n // Test that we don't ICE when trying to dump MIR for unusual item types and\n // that we don't create filenames containing `<` and `>`\n \n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n struct A;\n \n // EMIT_MIR rustc.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.mir"}, {"sha": "3dc8cea1fe8e16427942b6f8651d10bb71380429", "filename": "src/test/mir-opt/unusual-item-types/32bit/rustc.E-V-{{constant}}.mir_map.0.mir", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -0,0 +1,20 @@\n+// MIR for `E::V::{{constant}}#0` 0 mir_map\n+\n+E::V::{{constant}}#0: isize = {\n+    let mut _0: isize;                   // return place in scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n+\n+    bb0: {\n+        _0 = const 5isize;               // bb0[0]: scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n+                                         // ty::Const\n+                                         // + ty: isize\n+                                         // + val: Value(Scalar(0x00000005))\n+                                         // mir::Constant\n+                                         // + span: $DIR/unusual-item-types.rs:22:9: 22:10\n+                                         // + literal: Const { ty: isize, val: Value(Scalar(0x00000005)) }\n+        return;                          // bb0[1]: scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n+    }\n+}"}, {"sha": "d6ce06246a16d20695b8f05c8f42bba28be09e53", "filename": "src/test/mir-opt/unusual-item-types/32bit/rustc.Test-X-{{constructor}}.mir_map.0.mir", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.Test-X-%7B%7Bconstructor%7D%7D.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.Test-X-%7B%7Bconstructor%7D%7D.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.Test-X-%7B%7Bconstructor%7D%7D.mir_map.0.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -1,11 +1,11 @@\n // MIR for `Test::X` 0 mir_map\n \n fn Test::X(_1: usize) -> Test {\n-    let mut _0: Test;                    // return place in scope 0 at $DIR/unusual-item-types.rs:14:5: 14:13\n+    let mut _0: Test;                    // return place in scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n \n     bb0: {\n-        ((_0 as X).0: usize) = move _1;  // bb0[0]: scope 0 at $DIR/unusual-item-types.rs:14:5: 14:13\n-        discriminant(_0) = 0;            // bb0[1]: scope 0 at $DIR/unusual-item-types.rs:14:5: 14:13\n-        return;                          // bb0[2]: scope 0 at $DIR/unusual-item-types.rs:14:5: 14:13\n+        ((_0 as X).0: usize) = move _1;  // bb0[0]: scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n+        discriminant(_0) = 0;            // bb0[1]: scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n+        return;                          // bb0[2]: scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n     }\n }", "previous_filename": "src/test/mir-opt/unusual-item-types/rustc.Test-X-{{constructor}}.mir_map.0.mir"}, {"sha": "473c72a342e5205b27ac7c4aa00121816425ebdd", "filename": "src/test/mir-opt/unusual-item-types/32bit/rustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "previous_filename": "src/test/mir-opt/unusual-item-types/rustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir"}, {"sha": "9f65819bcf8d34960dc54c1b08fed24ed47c4eb1", "filename": "src/test/mir-opt/unusual-item-types/32bit/rustc.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.mir", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F32bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -1,20 +1,20 @@\n-// MIR for `<impl at $DIR/unusual-item-types.rs:7:1: 9:2>::ASSOCIATED_CONSTANT` 0 mir_map\n+// MIR for `<impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT` 0 mir_map\n \n-const <impl at $DIR/unusual-item-types.rs:7:1: 9:2>::ASSOCIATED_CONSTANT: i32 = {\n-    let mut _0: i32;                     // return place in scope 0 at $DIR/unusual-item-types.rs:8:32: 8:35\n+const <impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT: i32 = {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/unusual-item-types.rs:10:32: 10:35\n \n     bb0: {\n-        _0 = const 2i32;                 // bb0[0]: scope 0 at $DIR/unusual-item-types.rs:8:38: 8:39\n+        _0 = const 2i32;                 // bb0[0]: scope 0 at $DIR/unusual-item-types.rs:10:38: 10:39\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000002))\n                                          // mir::Constant\n-                                         // + span: $DIR/unusual-item-types.rs:8:38: 8:39\n+                                         // + span: $DIR/unusual-item-types.rs:10:38: 10:39\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-        return;                          // bb0[1]: scope 0 at $DIR/unusual-item-types.rs:8:5: 8:40\n+        return;                          // bb0[1]: scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/unusual-item-types.rs:8:5: 8:40\n+        resume;                          // bb1[0]: scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n     }\n }", "previous_filename": "src/test/mir-opt/unusual-item-types/rustc.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.mir"}, {"sha": "8434ff47f1c6421156513dd7adfed326f58fa47d", "filename": "src/test/mir-opt/unusual-item-types/64bit/rustc.E-V-{{constant}}.mir_map.0.mir", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.E-V-%7B%7Bconstant%7D%7D.mir_map.0.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -1,20 +1,20 @@\n // MIR for `E::V::{{constant}}#0` 0 mir_map\n \n E::V::{{constant}}#0: isize = {\n-    let mut _0: isize;                   // return place in scope 0 at $DIR/unusual-item-types.rs:20:9: 20:10\n+    let mut _0: isize;                   // return place in scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n \n     bb0: {\n-        _0 = const 5isize;               // bb0[0]: scope 0 at $DIR/unusual-item-types.rs:20:9: 20:10\n+        _0 = const 5isize;               // bb0[0]: scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n                                          // ty::Const\n                                          // + ty: isize\n                                          // + val: Value(Scalar(0x0000000000000005))\n                                          // mir::Constant\n-                                         // + span: $DIR/unusual-item-types.rs:20:9: 20:10\n+                                         // + span: $DIR/unusual-item-types.rs:22:9: 22:10\n                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000005)) }\n-        return;                          // bb0[1]: scope 0 at $DIR/unusual-item-types.rs:20:9: 20:10\n+        return;                          // bb0[1]: scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/unusual-item-types.rs:20:9: 20:10\n+        resume;                          // bb1[0]: scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n     }\n }", "previous_filename": "src/test/mir-opt/unusual-item-types/rustc.E-V-{{constant}}.mir_map.0.mir"}, {"sha": "d6ce06246a16d20695b8f05c8f42bba28be09e53", "filename": "src/test/mir-opt/unusual-item-types/64bit/rustc.Test-X-{{constructor}}.mir_map.0.mir", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.Test-X-%7B%7Bconstructor%7D%7D.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.Test-X-%7B%7Bconstructor%7D%7D.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.Test-X-%7B%7Bconstructor%7D%7D.mir_map.0.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -0,0 +1,11 @@\n+// MIR for `Test::X` 0 mir_map\n+\n+fn Test::X(_1: usize) -> Test {\n+    let mut _0: Test;                    // return place in scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n+\n+    bb0: {\n+        ((_0 as X).0: usize) = move _1;  // bb0[0]: scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n+        discriminant(_0) = 0;            // bb0[1]: scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n+        return;                          // bb0[2]: scope 0 at $DIR/unusual-item-types.rs:16:5: 16:13\n+    }\n+}"}, {"sha": "473c72a342e5205b27ac7c4aa00121816425ebdd", "filename": "src/test/mir-opt/unusual-item-types/64bit/rustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -0,0 +1,46 @@\n+// MIR for `std::intrinsics::drop_in_place` before AddMovesForPackedDrops\n+\n+fn std::intrinsics::drop_in_place(_1: *mut std::vec::Vec<i32>) -> () {\n+    let mut _0: ();                      // return place in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _2: &mut std::vec::Vec<i32>; // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    let mut _3: ();                      // in scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+\n+    bb0: {\n+        goto -> bb7;                     // bb0[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb1: {\n+        return;                          // bb1[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb2 (cleanup): {\n+        resume;                          // bb2[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb3: {\n+        goto -> bb1;                     // bb3[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb4 (cleanup): {\n+        goto -> bb2;                     // bb4[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb5 (cleanup): {\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb4; // bb5[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb6: {\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb3, unwind: bb4]; // bb6[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+    }\n+\n+    bb7: {\n+        _2 = &mut (*_1);                 // bb7[0]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+        _3 = const <std::vec::Vec<i32> as std::ops::Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // bb7[1]: scope 0 at $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // ty::Const\n+                                         // + ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/libcore/ptr/mod.rs:LL:COL: 181:2\n+                                         // + literal: Const { ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}, val: Value(Scalar(<ZST>)) }\n+    }\n+}"}, {"sha": "9f65819bcf8d34960dc54c1b08fed24ed47c4eb1", "filename": "src/test/mir-opt/unusual-item-types/64bit/rustc.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.mir", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e0bb75ef69f847c849d35e49d0d172a8708211a1/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types%2F64bit%2Frustc.%7B%7Bimpl%7D%7D-ASSOCIATED_CONSTANT.mir_map.0.mir?ref=e0bb75ef69f847c849d35e49d0d172a8708211a1", "patch": "@@ -0,0 +1,20 @@\n+// MIR for `<impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT` 0 mir_map\n+\n+const <impl at $DIR/unusual-item-types.rs:9:1: 11:2>::ASSOCIATED_CONSTANT: i32 = {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/unusual-item-types.rs:10:32: 10:35\n+\n+    bb0: {\n+        _0 = const 2i32;                 // bb0[0]: scope 0 at $DIR/unusual-item-types.rs:10:38: 10:39\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000002))\n+                                         // mir::Constant\n+                                         // + span: $DIR/unusual-item-types.rs:10:38: 10:39\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n+        return;                          // bb0[1]: scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n+    }\n+\n+    bb1 (cleanup): {\n+        resume;                          // bb1[0]: scope 0 at $DIR/unusual-item-types.rs:10:5: 10:40\n+    }\n+}"}]}