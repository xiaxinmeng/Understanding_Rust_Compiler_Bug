{"sha": "2d1843ad9dd398102c6550be2688ae955b19499c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMTg0M2FkOWRkMzk4MTAyYzY1NTBiZTI2ODhhZTk1NWIxOTQ5OWM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-27T02:34:54Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-27T05:22:01Z"}, "message": "Rollup merge of #31926 - llogiq:more_post, r=eddyb\n\nThese `_post` methods are quite helpful to control lint behavior without storing e.g. block node ids. So here are a few more I believe will be helpful.\n\nr? @Manishearth", "tree": {"sha": "4d3447b3cac606bc4590524d9de7bf36799a934c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d3447b3cac606bc4590524d9de7bf36799a934c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d1843ad9dd398102c6550be2688ae955b19499c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d1843ad9dd398102c6550be2688ae955b19499c", "html_url": "https://github.com/rust-lang/rust/commit/2d1843ad9dd398102c6550be2688ae955b19499c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d1843ad9dd398102c6550be2688ae955b19499c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b42b80a70be8d52fbd87c166c058b372bb9548d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b42b80a70be8d52fbd87c166c058b372bb9548d1", "html_url": "https://github.com/rust-lang/rust/commit/b42b80a70be8d52fbd87c166c058b372bb9548d1"}, {"sha": "d315dc6542f638677bbd250a4d8e14e38c1ece06", "url": "https://api.github.com/repos/rust-lang/rust/commits/d315dc6542f638677bbd250a4d8e14e38c1ece06", "html_url": "https://github.com/rust-lang/rust/commit/d315dc6542f638677bbd250a4d8e14e38c1ece06"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "d138ab101b524c81f1daa80f0cd8d547ffcc2253", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2d1843ad9dd398102c6550be2688ae955b19499c/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1843ad9dd398102c6550be2688ae955b19499c/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=2d1843ad9dd398102c6550be2688ae955b19499c", "patch": "@@ -766,6 +766,7 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n         self.with_lint_attrs(&it.attrs, |cx| {\n             run_lints!(cx, check_foreign_item, late_passes, it);\n             hir_visit::walk_foreign_item(cx, it);\n+            run_lints!(cx, check_foreign_item_post, late_passes, it);\n         })\n     }\n \n@@ -795,6 +796,7 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n                 body: &'v hir::Block, span: Span, id: ast::NodeId) {\n         run_lints!(self, check_fn, late_passes, fk, decl, body, span, id);\n         hir_visit::walk_fn(self, fk, decl, body, span);\n+        run_lints!(self, check_fn_post, late_passes, fk, decl, body, span, id);\n     }\n \n     fn visit_variant_data(&mut self,\n@@ -835,6 +837,7 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n     fn visit_mod(&mut self, m: &hir::Mod, s: Span, n: ast::NodeId) {\n         run_lints!(self, check_mod, late_passes, m, s, n);\n         hir_visit::walk_mod(self, m);\n+        run_lints!(self, check_mod_post, late_passes, m, s, n);\n     }\n \n     fn visit_local(&mut self, l: &hir::Local) {\n@@ -874,6 +877,7 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n             run_lints!(cx, check_trait_item, late_passes, trait_item);\n             cx.visit_ids(|v| v.visit_trait_item(trait_item));\n             hir_visit::walk_trait_item(cx, trait_item);\n+            run_lints!(cx, check_trait_item_post, late_passes, trait_item);\n         });\n     }\n \n@@ -882,6 +886,7 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n             run_lints!(cx, check_impl_item, late_passes, impl_item);\n             cx.visit_ids(|v| v.visit_impl_item(impl_item));\n             hir_visit::walk_impl_item(cx, impl_item);\n+            run_lints!(cx, check_impl_item_post, late_passes, impl_item);\n         });\n     }\n \n@@ -928,6 +933,7 @@ impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n         self.with_lint_attrs(&it.attrs, |cx| {\n             run_lints!(cx, check_foreign_item, early_passes, it);\n             ast_visit::walk_foreign_item(cx, it);\n+            run_lints!(cx, check_foreign_item_post, early_passes, it);\n         })\n     }\n \n@@ -952,6 +958,7 @@ impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n                 body: &'v ast::Block, span: Span, id: ast::NodeId) {\n         run_lints!(self, check_fn, early_passes, fk, decl, body, span, id);\n         ast_visit::walk_fn(self, fk, decl, body, span);\n+        run_lints!(self, check_fn_post, early_passes, fk, decl, body, span, id);\n     }\n \n     fn visit_variant_data(&mut self,\n@@ -992,6 +999,7 @@ impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n     fn visit_mod(&mut self, m: &ast::Mod, s: Span, n: ast::NodeId) {\n         run_lints!(self, check_mod, early_passes, m, s, n);\n         ast_visit::walk_mod(self, m);\n+        run_lints!(self, check_mod_post, early_passes, m, s, n);\n     }\n \n     fn visit_local(&mut self, l: &ast::Local) {\n@@ -1031,6 +1039,7 @@ impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n             run_lints!(cx, check_trait_item, early_passes, trait_item);\n             cx.visit_ids(|v| v.visit_trait_item(trait_item));\n             ast_visit::walk_trait_item(cx, trait_item);\n+            run_lints!(cx, check_trait_item_post, early_passes, trait_item);\n         });\n     }\n \n@@ -1039,6 +1048,7 @@ impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n             run_lints!(cx, check_impl_item, early_passes, impl_item);\n             cx.visit_ids(|v| v.visit_impl_item(impl_item));\n             ast_visit::walk_impl_item(cx, impl_item);\n+            run_lints!(cx, check_impl_item_post, early_passes, impl_item);\n         });\n     }\n "}, {"sha": "133d0163a8c9b9d568d716359152d7e3af188ac0", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2d1843ad9dd398102c6550be2688ae955b19499c/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1843ad9dd398102c6550be2688ae955b19499c/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=2d1843ad9dd398102c6550be2688ae955b19499c", "patch": "@@ -134,7 +134,9 @@ pub trait LateLintPass: LintPass {\n     fn check_crate(&mut self, _: &LateContext, _: &hir::Crate) { }\n     fn check_crate_post(&mut self, _: &LateContext, _: &hir::Crate) { }\n     fn check_mod(&mut self, _: &LateContext, _: &hir::Mod, _: Span, _: ast::NodeId) { }\n+    fn check_mod_post(&mut self, _: &LateContext, _: &hir::Mod, _: Span, _: ast::NodeId) { }\n     fn check_foreign_item(&mut self, _: &LateContext, _: &hir::ForeignItem) { }\n+    fn check_foreign_item_post(&mut self, _: &LateContext, _: &hir::ForeignItem) { }\n     fn check_item(&mut self, _: &LateContext, _: &hir::Item) { }\n     fn check_item_post(&mut self, _: &LateContext, _: &hir::Item) { }\n     fn check_local(&mut self, _: &LateContext, _: &hir::Local) { }\n@@ -150,8 +152,12 @@ pub trait LateLintPass: LintPass {\n     fn check_generics(&mut self, _: &LateContext, _: &hir::Generics) { }\n     fn check_fn(&mut self, _: &LateContext,\n         _: FnKind, _: &hir::FnDecl, _: &hir::Block, _: Span, _: ast::NodeId) { }\n+    fn check_fn_post(&mut self, _: &LateContext,\n+        _: FnKind, _: &hir::FnDecl, _: &hir::Block, _: Span, _: ast::NodeId) { }\n     fn check_trait_item(&mut self, _: &LateContext, _: &hir::TraitItem) { }\n+    fn check_trait_item_post(&mut self, _: &LateContext, _: &hir::TraitItem) { }\n     fn check_impl_item(&mut self, _: &LateContext, _: &hir::ImplItem) { }\n+    fn check_impl_item_post(&mut self, _: &LateContext, _: &hir::ImplItem) { }\n     fn check_struct_def(&mut self, _: &LateContext,\n         _: &hir::VariantData, _: ast::Name, _: &hir::Generics, _: ast::NodeId) { }\n     fn check_struct_def_post(&mut self, _: &LateContext,\n@@ -179,7 +185,9 @@ pub trait EarlyLintPass: LintPass {\n     fn check_crate(&mut self, _: &EarlyContext, _: &ast::Crate) { }\n     fn check_crate_post(&mut self, _: &EarlyContext, _: &ast::Crate) { }\n     fn check_mod(&mut self, _: &EarlyContext, _: &ast::Mod, _: Span, _: ast::NodeId) { }\n+    fn check_mod_post(&mut self, _: &EarlyContext, _: &ast::Mod, _: Span, _: ast::NodeId) { }\n     fn check_foreign_item(&mut self, _: &EarlyContext, _: &ast::ForeignItem) { }\n+    fn check_foreign_item_post(&mut self, _: &EarlyContext, _: &ast::ForeignItem) { }\n     fn check_item(&mut self, _: &EarlyContext, _: &ast::Item) { }\n     fn check_item_post(&mut self, _: &EarlyContext, _: &ast::Item) { }\n     fn check_local(&mut self, _: &EarlyContext, _: &ast::Local) { }\n@@ -195,8 +203,12 @@ pub trait EarlyLintPass: LintPass {\n     fn check_generics(&mut self, _: &EarlyContext, _: &ast::Generics) { }\n     fn check_fn(&mut self, _: &EarlyContext,\n         _: ast_visit::FnKind, _: &ast::FnDecl, _: &ast::Block, _: Span, _: ast::NodeId) { }\n+    fn check_fn_post(&mut self, _: &EarlyContext,\n+        _: ast_visit::FnKind, _: &ast::FnDecl, _: &ast::Block, _: Span, _: ast::NodeId) { }\n     fn check_trait_item(&mut self, _: &EarlyContext, _: &ast::TraitItem) { }\n+    fn check_trait_item_post(&mut self, _: &EarlyContext, _: &ast::TraitItem) { }\n     fn check_impl_item(&mut self, _: &EarlyContext, _: &ast::ImplItem) { }\n+    fn check_impl_item_post(&mut self, _: &EarlyContext, _: &ast::ImplItem) { }\n     fn check_struct_def(&mut self, _: &EarlyContext,\n         _: &ast::VariantData, _: ast::Ident, _: &ast::Generics, _: ast::NodeId) { }\n     fn check_struct_def_post(&mut self, _: &EarlyContext,"}]}