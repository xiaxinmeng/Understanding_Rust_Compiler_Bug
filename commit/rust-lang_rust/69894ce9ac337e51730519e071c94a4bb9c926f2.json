{"sha": "69894ce9ac337e51730519e071c94a4bb9c926f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ODk0Y2U5YWMzMzdlNTE3MzA1MTllMDcxYzk0YTRiYjljOTI2ZjI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-18T22:45:10Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-19T16:25:20Z"}, "message": "resolve: Introduce a separate `NonMacroAttrKind` for legacy derive helpers", "tree": {"sha": "ac011f666d669e73f01e836b7944b621393c1739", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac011f666d669e73f01e836b7944b621393c1739"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69894ce9ac337e51730519e071c94a4bb9c926f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69894ce9ac337e51730519e071c94a4bb9c926f2", "html_url": "https://github.com/rust-lang/rust/commit/69894ce9ac337e51730519e071c94a4bb9c926f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69894ce9ac337e51730519e071c94a4bb9c926f2/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7ee4d66ce2f2727f9b27e14d3e1ff917eff3d6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7ee4d66ce2f2727f9b27e14d3e1ff917eff3d6e", "html_url": "https://github.com/rust-lang/rust/commit/e7ee4d66ce2f2727f9b27e14d3e1ff917eff3d6e"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "4ede9d67b741f0b4841b2d4d27b17f6000ee44a5", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/69894ce9ac337e51730519e071c94a4bb9c926f2/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69894ce9ac337e51730519e071c94a4bb9c926f2/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=69894ce9ac337e51730519e071c94a4bb9c926f2", "patch": "@@ -39,6 +39,9 @@ pub enum NonMacroAttrKind {\n     Tool,\n     /// Single-segment custom attribute registered by a derive macro (`#[serde(default)]`).\n     DeriveHelper,\n+    /// Single-segment custom attribute registered by a derive macro\n+    /// but used before that derive macro was expanded (deprecated).\n+    DeriveHelperCompat,\n     /// Single-segment custom attribute registered with `#[register_attr]`.\n     Registered,\n }\n@@ -370,7 +373,9 @@ impl NonMacroAttrKind {\n         match self {\n             NonMacroAttrKind::Builtin => \"built-in attribute\",\n             NonMacroAttrKind::Tool => \"tool attribute\",\n-            NonMacroAttrKind::DeriveHelper => \"derive helper attribute\",\n+            NonMacroAttrKind::DeriveHelper | NonMacroAttrKind::DeriveHelperCompat => {\n+                \"derive helper attribute\"\n+            }\n             NonMacroAttrKind::Registered => \"explicitly registered attribute\",\n         }\n     }\n@@ -385,7 +390,9 @@ impl NonMacroAttrKind {\n     /// Users of some attributes cannot mark them as used, so they are considered always used.\n     pub fn is_used(self) -> bool {\n         match self {\n-            NonMacroAttrKind::Tool | NonMacroAttrKind::DeriveHelper => true,\n+            NonMacroAttrKind::Tool\n+            | NonMacroAttrKind::DeriveHelper\n+            | NonMacroAttrKind::DeriveHelperCompat => true,\n             NonMacroAttrKind::Builtin | NonMacroAttrKind::Registered => false,\n         }\n     }"}, {"sha": "2cca1a6ee5979eb0ae065e8923b79509cdb0c0c1", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69894ce9ac337e51730519e071c94a4bb9c926f2/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69894ce9ac337e51730519e071c94a4bb9c926f2/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=69894ce9ac337e51730519e071c94a4bb9c926f2", "patch": "@@ -609,7 +609,7 @@ impl<'a> Resolver<'a> {\n                     }\n                 }\n                 Scope::DeriveHelpersCompat => {\n-                    let res = Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper);\n+                    let res = Res::NonMacroAttr(NonMacroAttrKind::DeriveHelperCompat);\n                     if filter_fn(res) {\n                         for derive in parent_scope.derives {\n                             let parent_scope = &ParentScope { derives: &[], ..*parent_scope };"}, {"sha": "7b46b5fda042c54542405e9e477ecc6bfff391d8", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/69894ce9ac337e51730519e071c94a4bb9c926f2/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69894ce9ac337e51730519e071c94a4bb9c926f2/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=69894ce9ac337e51730519e071c94a4bb9c926f2", "patch": "@@ -568,10 +568,9 @@ impl<'a> Resolver<'a> {\n             struct Flags: u8 {\n                 const MACRO_RULES          = 1 << 0;\n                 const MODULE               = 1 << 1;\n-                const DERIVE_HELPER_COMPAT = 1 << 2;\n-                const MISC_SUGGEST_CRATE   = 1 << 3;\n-                const MISC_SUGGEST_SELF    = 1 << 4;\n-                const MISC_FROM_PRELUDE    = 1 << 5;\n+                const MISC_SUGGEST_CRATE   = 1 << 2;\n+                const MISC_SUGGEST_SELF    = 1 << 3;\n+                const MISC_FROM_PRELUDE    = 1 << 4;\n             }\n         }\n \n@@ -646,14 +645,11 @@ impl<'a> Resolver<'a> {\n                             ) {\n                                 Ok((Some(ext), _)) => {\n                                     if ext.helper_attrs.contains(&ident.name) {\n-                                        let binding = (\n-                                            Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper),\n-                                            ty::Visibility::Public,\n+                                        result = ok(\n+                                            Res::NonMacroAttr(NonMacroAttrKind::DeriveHelperCompat),\n                                             derive.span,\n-                                            ExpnId::root(),\n-                                        )\n-                                            .to_name_binding(this.arenas);\n-                                        result = Ok((binding, Flags::DERIVE_HELPER_COMPAT));\n+                                            this.arenas,\n+                                        );\n                                         break;\n                                     }\n                                 }\n@@ -799,17 +795,15 @@ impl<'a> Resolver<'a> {\n                             let (res, innermost_res) = (binding.res(), innermost_binding.res());\n                             if res != innermost_res {\n                                 let builtin = Res::NonMacroAttr(NonMacroAttrKind::Builtin);\n-                                let is_derive_helper_compat = |res, flags: Flags| {\n-                                    res == Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper)\n-                                        && flags.contains(Flags::DERIVE_HELPER_COMPAT)\n-                                };\n+                                let derive_helper_compat =\n+                                    Res::NonMacroAttr(NonMacroAttrKind::DeriveHelperCompat);\n \n                                 let ambiguity_error_kind = if is_import {\n                                     Some(AmbiguityKind::Import)\n                                 } else if innermost_res == builtin || res == builtin {\n                                     Some(AmbiguityKind::BuiltinAttr)\n-                                } else if is_derive_helper_compat(innermost_res, innermost_flags)\n-                                    || is_derive_helper_compat(res, flags)\n+                                } else if innermost_res == derive_helper_compat\n+                                    || res == derive_helper_compat\n                                 {\n                                     Some(AmbiguityKind::DeriveHelper)\n                                 } else if innermost_flags.contains(Flags::MACRO_RULES)"}]}