{"sha": "3d47ebeb0e96e328f247cb691f376e6431f258aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNDdlYmViMGU5NmUzMjhmMjQ3Y2I2OTFmMzc2ZTY0MzFmMjU4YWE=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-02-26T23:08:21Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-02-26T23:08:21Z"}, "message": "Simplify the signature of par_for_each_in\n\nGiven `T: IntoIterator`/`IntoParallelIterator`, `T::Item` is\nunambiguous, so we don't need the explicit trait casting.", "tree": {"sha": "2573326198c686b9c93f71444e1a1ad2b68bc535", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2573326198c686b9c93f71444e1a1ad2b68bc535"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d47ebeb0e96e328f247cb691f376e6431f258aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d47ebeb0e96e328f247cb691f376e6431f258aa", "html_url": "https://github.com/rust-lang/rust/commit/3d47ebeb0e96e328f247cb691f376e6431f258aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d47ebeb0e96e328f247cb691f376e6431f258aa/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abc3073c92df034636a823c5382ece2186d22b9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/abc3073c92df034636a823c5382ece2186d22b9e", "html_url": "https://github.com/rust-lang/rust/commit/abc3073c92df034636a823c5382ece2186d22b9e"}], "stats": {"total": 10, "additions": 2, "deletions": 8}, "files": [{"sha": "9051b1751b119426d2a6101dfe6ee867492834b1", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d47ebeb0e96e328f247cb691f376e6431f258aa/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d47ebeb0e96e328f247cb691f376e6431f258aa/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=3d47ebeb0e96e328f247cb691f376e6431f258aa", "patch": "@@ -203,11 +203,7 @@ cfg_if! {\n             t.into_iter()\n         }\n \n-        pub fn par_for_each_in<T: IntoIterator>(\n-            t: T,\n-            for_each:\n-                impl Fn(<<T as IntoIterator>::IntoIter as Iterator>::Item) + Sync + Send\n-        ) {\n+        pub fn par_for_each_in<T: IntoIterator>(t: T, for_each: impl Fn(T::Item) + Sync + Send) {\n             // We catch panics here ensuring that all the loop iterations execute.\n             // This makes behavior consistent with the parallel compiler.\n             let mut panic = None;\n@@ -397,9 +393,7 @@ cfg_if! {\n \n         pub fn par_for_each_in<T: IntoParallelIterator>(\n             t: T,\n-            for_each: impl Fn(\n-                <<T as IntoParallelIterator>::Iter as ParallelIterator>::Item\n-            ) + Sync + Send\n+            for_each: impl Fn(T::Item) + Sync + Send,\n         ) {\n             t.into_par_iter().for_each(for_each)\n         }"}]}