{"sha": "29e2376ac7f8719930a14f256a84fbcd65e10163", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZTIzNzZhYzdmODcxOTkzMGExNGYyNTZhODRmYmNkNjVlMTAxNjM=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-09-20T15:15:52Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-10-03T12:43:57Z"}, "message": "Add suggestions for unresolved imports.\n\nThis commit adds suggestions for unresolved imports in the cases where\nthere could be a missing `crate::`, `super::`, `self::` or a missing\nexternal crate name before an import.", "tree": {"sha": "d525feadfb23506e2949b7c98c687b6382ff9060", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d525feadfb23506e2949b7c98c687b6382ff9060"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29e2376ac7f8719930a14f256a84fbcd65e10163", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlu0uY0ACgkQAXYLT59T\n8VQpCA//X8uoI1sHT67ZZ5O7zH+VOLiyBI0fqvYrbhaYGUY/bCeXXW0sr3zKa7PT\nN0R4392FZMIeFsXdBTDnDx9F4AyyXWg23jz908n3x3XSRX/ixUGEZVfkqZUg3IF5\nhwZ3Py3C6oNk7zJaHONmOxlQhTJDji6K7WanLbmBqPqlraVwWbqkRqjzXTFl4qPn\niK4/DdNsWL5OSiY8nQ2B8FFd2OQuh9CyM3f6DbRT+DVRFJZVZ0rr4FUrjlKqDZIz\nDYgnhZQu8/gLzQNprHztcz0wbv+7x6T8xWcZP3yyurxdQ+isvye08baGX2Sw/BOb\nJ01we+8+t2O5Dd8lhkhtWKME609f5wExDK49K3KjLj/iBWYZ1+BTYo2WtH9HhHrN\nx87mLU9HciGczxKuUioQFOs1gfXIIiz/dQphXcKDNMhpRUFIoS+VFJYjDkdyegCV\nORJemm+KpQppuTZ2fsJRQuWSPShQMW819Z8mqGD4ZFXA76raWp+V0eF1arP6dXM6\nlWfUocB6u29ejqV98yJ6eTNFaVpBJs4Vypy28WBEaegCE+V3kz3S7ZE0ctTmhBIu\nrXmIVQk+mEqNVvOQE6AWBB7D3LTgvB9GQvcibdyuiQ6BMxXTeuwXG8p/MZuu7mms\n/bprkit1SPRB6sNrY5BBBniOfoc93BSsZK9fb50vWXQW6WWrbxQ=\n=NX9B\n-----END PGP SIGNATURE-----", "payload": "tree d525feadfb23506e2949b7c98c687b6382ff9060\nparent 4cf11765dc98536c6eedf33f2df7f72f6e161263\nauthor David Wood <david@davidtw.co> 1537456552 +0200\ncommitter David Wood <david@davidtw.co> 1538570637 +0200\n\nAdd suggestions for unresolved imports.\n\nThis commit adds suggestions for unresolved imports in the cases where\nthere could be a missing `crate::`, `super::`, `self::` or a missing\nexternal crate name before an import.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29e2376ac7f8719930a14f256a84fbcd65e10163", "html_url": "https://github.com/rust-lang/rust/commit/29e2376ac7f8719930a14f256a84fbcd65e10163", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29e2376ac7f8719930a14f256a84fbcd65e10163/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cf11765dc98536c6eedf33f2df7f72f6e161263", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf11765dc98536c6eedf33f2df7f72f6e161263", "html_url": "https://github.com/rust-lang/rust/commit/4cf11765dc98536c6eedf33f2df7f72f6e161263"}], "stats": {"total": 263, "additions": 244, "deletions": 19}, "files": [{"sha": "3ca0a11c1bb5664eddff534033b00fa5b4f83d8d", "filename": "src/librustc_resolve/error_reporting.rs", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/29e2376ac7f8719930a14f256a84fbcd65e10163/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e2376ac7f8719930a14f256a84fbcd65e10163/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=29e2376ac7f8719930a14f256a84fbcd65e10163", "patch": "@@ -0,0 +1,162 @@\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use {CrateLint, PathResult};\n+\n+use syntax::ast::Ident;\n+use syntax::symbol::keywords;\n+use syntax_pos::Span;\n+\n+use resolve_imports::ImportResolver;\n+\n+impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n+    /// Add suggestions for a path that cannot be resolved.\n+    pub(crate) fn make_path_suggestion(\n+        &mut self,\n+        span: Span,\n+        path: Vec<Ident>\n+    ) -> Option<Vec<Ident>> {\n+        debug!(\"make_path_suggestion: span={:?} path={:?}\", span, path);\n+        // If we don't have a path to suggest changes to, then return.\n+        if path.is_empty() {\n+            return None;\n+        }\n+\n+        // Check whether a ident is a path segment that is not root.\n+        let is_special = |ident: Ident| ident.is_path_segment_keyword() &&\n+                                        ident.name != keywords::CrateRoot.name();\n+\n+        match (path.get(0), path.get(1)) {\n+            // Make suggestions that require at least two non-special path segments.\n+            (Some(fst), Some(snd)) if !is_special(*fst) && !is_special(*snd) => {\n+                debug!(\"make_path_suggestion: fst={:?} snd={:?}\", fst, snd);\n+\n+                self.make_missing_self_suggestion(span, path.clone())\n+                    .or_else(|| self.make_missing_crate_suggestion(span, path.clone()))\n+                    .or_else(|| self.make_missing_super_suggestion(span, path.clone()))\n+                    .or_else(|| self.make_external_crate_suggestion(span, path.clone()))\n+            },\n+            _ => None,\n+        }\n+    }\n+\n+    /// Suggest a missing `self::` if that resolves to an correct module.\n+    ///\n+    /// ```\n+    ///    |\n+    /// LL | use foo::Bar;\n+    ///    |     ^^^ Did you mean `self::foo`?\n+    /// ```\n+    fn make_missing_self_suggestion(\n+        &mut self,\n+        span: Span,\n+        mut path: Vec<Ident>\n+    ) -> Option<Vec<Ident>> {\n+        // Replace first ident with `self` and check if that is valid.\n+        path[0].name = keywords::SelfValue.name();\n+        let result = self.resolve_path(None, &path, None, false, span, CrateLint::No);\n+        debug!(\"make_missing_self_suggestion: path={:?} result={:?}\", path, result);\n+        if let PathResult::Module(..) = result {\n+            Some(path)\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Suggest a missing `crate::` if that resolves to an correct module.\n+    ///\n+    /// ```\n+    ///    |\n+    /// LL | use foo::Bar;\n+    ///    |     ^^^ Did you mean `crate::foo`?\n+    /// ```\n+    fn make_missing_crate_suggestion(\n+        &mut self,\n+        span: Span,\n+        mut path: Vec<Ident>\n+    ) -> Option<Vec<Ident>> {\n+        // Replace first ident with `crate` and check if that is valid.\n+        path[0].name = keywords::Crate.name();\n+        let result = self.resolve_path(None, &path, None, false, span, CrateLint::No);\n+        debug!(\"make_missing_crate_suggestion:  path={:?} result={:?}\", path, result);\n+        if let PathResult::Module(..) = result {\n+            Some(path)\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Suggest a missing `super::` if that resolves to an correct module.\n+    ///\n+    /// ```\n+    ///    |\n+    /// LL | use foo::Bar;\n+    ///    |     ^^^ Did you mean `super::foo`?\n+    /// ```\n+    fn make_missing_super_suggestion(\n+        &mut self,\n+        span: Span,\n+        mut path: Vec<Ident>\n+    ) -> Option<Vec<Ident>> {\n+        // Replace first ident with `crate` and check if that is valid.\n+        path[0].name = keywords::Super.name();\n+        let result = self.resolve_path(None, &path, None, false, span, CrateLint::No);\n+        debug!(\"make_missing_super_suggestion:  path={:?} result={:?}\", path, result);\n+        if let PathResult::Module(..) = result {\n+            Some(path)\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Suggest a missing external crate name if that resolves to an correct module.\n+    ///\n+    /// ```\n+    ///    |\n+    /// LL | use foobar::Baz;\n+    ///    |     ^^^ Did you mean `baz::foobar`?\n+    /// ```\n+    ///\n+    /// Used when importing a submodule of an external crate but missing that crate's\n+    /// name as the first part of path.\n+    fn make_external_crate_suggestion(\n+        &mut self,\n+        span: Span,\n+        mut path: Vec<Ident>\n+    ) -> Option<Vec<Ident>> {\n+        // Need to clone else we can't call `resolve_path` without a borrow error.\n+        let external_crate_names = self.resolver.session.extern_prelude.clone();\n+\n+        // Insert a new path segment that we can replace.\n+        let new_path_segment = path[0].clone();\n+        path.insert(1, new_path_segment);\n+\n+        for name in &external_crate_names {\n+            // Don't suggest meta as it will error in `resolve_path`.\n+            if name.as_str() == \"meta\" {\n+                continue;\n+            }\n+\n+            // Replace the first after root (a placeholder we inserted) with a crate name\n+            // and check if that is valid.\n+            path[1].name = *name;\n+            let result = self.resolve_path(None, &path, None, false, span, CrateLint::No);\n+            debug!(\"make_external_crate_suggestion: name={:?} path={:?} result={:?}\",\n+                   name, path, result);\n+            if let PathResult::Module(..) = result {\n+                return Some(path)\n+            }\n+        }\n+\n+        // Remove our placeholder segment.\n+        path.remove(1);\n+        None\n+    }\n+}"}, {"sha": "35241e2b1556a1eaba9013302ee5a030be2d2be0", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29e2376ac7f8719930a14f256a84fbcd65e10163/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e2376ac7f8719930a14f256a84fbcd65e10163/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=29e2376ac7f8719930a14f256a84fbcd65e10163", "patch": "@@ -85,7 +85,7 @@ use macros::{InvocationData, LegacyBinding, ParentScope};\n // NB: This module needs to be declared first so diagnostics are\n // registered before they are used.\n mod diagnostics;\n-\n+mod error_reporting;\n mod macros;\n mod check_unused;\n mod build_reduced_graph;"}, {"sha": "bc93b43c6ae790b91c6bde673f7b8c47530cb7d6", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/29e2376ac7f8719930a14f256a84fbcd65e10163/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e2376ac7f8719930a14f256a84fbcd65e10163/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=29e2376ac7f8719930a14f256a84fbcd65e10163", "patch": "@@ -957,17 +957,13 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                 return None;\n             }\n             PathResult::Failed(span, msg, true) => {\n-                let (mut self_path, mut self_result) = (module_path.clone(), None);\n-                let is_special = |ident: Ident| ident.is_path_segment_keyword() &&\n-                                                ident.name != keywords::CrateRoot.name();\n-                if !self_path.is_empty() && !is_special(self_path[0]) &&\n-                   !(self_path.len() > 1 && is_special(self_path[1])) {\n-                    self_path[0].name = keywords::SelfValue.name();\n-                    self_result = Some(self.resolve_path(None, &self_path, None, false,\n-                                                         span, CrateLint::No));\n-                }\n-                return if let Some(PathResult::Module(..)) = self_result {\n-                    Some((span, format!(\"Did you mean `{}`?\", names_to_string(&self_path[..]))))\n+                return if let Some(suggested_path) = self.make_path_suggestion(\n+                    span, module_path.clone()\n+                ) {\n+                    Some((\n+                        span,\n+                        format!(\"Did you mean `{}`?\", names_to_string(&suggested_path[..]))\n+                    ))\n                 } else {\n                     Some((span, msg))\n                 };"}, {"sha": "a30e73cf02d12d00121afff6a39ef2f5c81e048a", "filename": "src/test/ui/resolve_self_super_hint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29e2376ac7f8719930a14f256a84fbcd65e10163/src%2Ftest%2Fui%2Fresolve_self_super_hint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e2376ac7f8719930a14f256a84fbcd65e10163/src%2Ftest%2Fui%2Fresolve_self_super_hint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve_self_super_hint.rs?ref=29e2376ac7f8719930a14f256a84fbcd65e10163", "patch": "@@ -19,15 +19,15 @@ mod a {\n     mod b {\n         use alloc::HashMap;\n         //~^ ERROR unresolved import `alloc` [E0432]\n-        //~| Did you mean `a::alloc`?\n+        //~| Did you mean `super::alloc`?\n         mod c {\n             use alloc::HashMap;\n             //~^ ERROR unresolved import `alloc` [E0432]\n-            //~| Did you mean `a::alloc`?\n+            //~| Did you mean `std::alloc`?\n             mod d {\n                 use alloc::HashMap;\n                 //~^ ERROR unresolved import `alloc` [E0432]\n-                //~| Did you mean `a::alloc`?\n+                //~| Did you mean `std::alloc`?\n             }\n         }\n     }"}, {"sha": "b58a23724e413d9acd3decf1716cd64b5af31590", "filename": "src/test/ui/resolve_self_super_hint.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29e2376ac7f8719930a14f256a84fbcd65e10163/src%2Ftest%2Fui%2Fresolve_self_super_hint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29e2376ac7f8719930a14f256a84fbcd65e10163/src%2Ftest%2Fui%2Fresolve_self_super_hint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve_self_super_hint.stderr?ref=29e2376ac7f8719930a14f256a84fbcd65e10163", "patch": "@@ -8,19 +8,19 @@ error[E0432]: unresolved import `alloc`\n   --> $DIR/resolve_self_super_hint.rs:20:13\n    |\n LL |         use alloc::HashMap;\n-   |             ^^^^^ Did you mean `a::alloc`?\n+   |             ^^^^^ Did you mean `super::alloc`?\n \n error[E0432]: unresolved import `alloc`\n   --> $DIR/resolve_self_super_hint.rs:24:17\n    |\n LL |             use alloc::HashMap;\n-   |                 ^^^^^ Did you mean `a::alloc`?\n+   |                 ^^^^^ Did you mean `std::alloc`?\n \n error[E0432]: unresolved import `alloc`\n   --> $DIR/resolve_self_super_hint.rs:28:21\n    |\n LL |                 use alloc::HashMap;\n-   |                     ^^^^^ Did you mean `a::alloc`?\n+   |                     ^^^^^ Did you mean `std::alloc`?\n \n error: aborting due to 4 previous errors\n "}, {"sha": "4ee9c051c65684d05575f3fa83c84799d46db97a", "filename": "src/test/ui/rust-2018/auxiliary/baz.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/29e2376ac7f8719930a14f256a84fbcd65e10163/src%2Ftest%2Fui%2Frust-2018%2Fauxiliary%2Fbaz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e2376ac7f8719930a14f256a84fbcd65e10163/src%2Ftest%2Fui%2Frust-2018%2Fauxiliary%2Fbaz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fauxiliary%2Fbaz.rs?ref=29e2376ac7f8719930a14f256a84fbcd65e10163", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This file is used as part of the local-path-suggestions.rs test.\n+\n+pub mod foobar {\n+    pub struct Baz;\n+}"}, {"sha": "37bf19e61f8d84d765ee585df142245eb2e5dc8c", "filename": "src/test/ui/rust-2018/issue-54006.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29e2376ac7f8719930a14f256a84fbcd65e10163/src%2Ftest%2Fui%2Frust-2018%2Fissue-54006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29e2376ac7f8719930a14f256a84fbcd65e10163/src%2Ftest%2Fui%2Frust-2018%2Fissue-54006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fissue-54006.stderr?ref=29e2376ac7f8719930a14f256a84fbcd65e10163", "patch": "@@ -2,7 +2,7 @@ error[E0432]: unresolved import `alloc`\n   --> $DIR/issue-54006.rs:16:5\n    |\n LL | use alloc::vec;\n-   |     ^^^^^ Could not find `alloc` in `{{root}}`\n+   |     ^^^^^ Did you mean `std::alloc`?\n \n error: cannot determine resolution for the macro `vec`\n   --> $DIR/issue-54006.rs:20:18"}, {"sha": "840e6103ec67d3ee53103205cf288b489d79936f", "filename": "src/test/ui/rust-2018/local-path-suggestions.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/29e2376ac7f8719930a14f256a84fbcd65e10163/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e2376ac7f8719930a14f256a84fbcd65e10163/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions.rs?ref=29e2376ac7f8719930a14f256a84fbcd65e10163", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:baz.rs\n+// compile-flags:--extern baz\n+// edition:2018\n+\n+mod foo {\n+    type Bar = u32;\n+}\n+\n+mod baz {\n+    use foo::Bar;\n+\n+    fn baz() {\n+        let x: Bar = 22;\n+    }\n+}\n+\n+use foo::Bar;\n+\n+use foobar::Baz;\n+\n+fn main() { }"}, {"sha": "38a5d412183cca6977c3c47a9e407cc4bdf9965f", "filename": "src/test/ui/rust-2018/local-path-suggestions.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/29e2376ac7f8719930a14f256a84fbcd65e10163/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29e2376ac7f8719930a14f256a84fbcd65e10163/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Flocal-path-suggestions.stderr?ref=29e2376ac7f8719930a14f256a84fbcd65e10163", "patch": "@@ -0,0 +1,21 @@\n+error[E0432]: unresolved import `foo`\n+  --> $DIR/local-path-suggestions.rs:20:9\n+   |\n+LL |     use foo::Bar;\n+   |         ^^^ Did you mean `crate::foo`?\n+\n+error[E0432]: unresolved import `foo`\n+  --> $DIR/local-path-suggestions.rs:27:5\n+   |\n+LL | use foo::Bar;\n+   |     ^^^ Did you mean `self::foo`?\n+\n+error[E0432]: unresolved import `foobar`\n+  --> $DIR/local-path-suggestions.rs:29:5\n+   |\n+LL | use foobar::Baz;\n+   |     ^^^^^^ Did you mean `baz::foobar`?\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0432`."}]}