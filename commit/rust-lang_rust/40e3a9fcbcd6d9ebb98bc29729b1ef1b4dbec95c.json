{"sha": "40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZTNhOWZjYmNkNmQ5ZWJiOThiYzI5NzI5YjFlZjFiNGRiZWM5NWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-10T01:15:13Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-10T01:15:13Z"}, "message": "Revert \"Encode meta tags in the crate and start sketching enhanced logic for resolving crate \"use\" directives.\" due to tree bustage\n\nThis reverts commit ab3635eebef2b8cf0e19cdbc5b4e8dd7a49a4658.", "tree": {"sha": "613f0fe04f54825b930b31fcda31340c5e6518b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/613f0fe04f54825b930b31fcda31340c5e6518b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c", "html_url": "https://github.com/rust-lang/rust/commit/40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60706f1e3559a1164c96378172bc8839c9870f51", "url": "https://api.github.com/repos/rust-lang/rust/commits/60706f1e3559a1164c96378172bc8839c9870f51", "html_url": "https://github.com/rust-lang/rust/commit/60706f1e3559a1164c96378172bc8839c9870f51"}], "stats": {"total": 183, "additions": 36, "deletions": 147}, "files": [{"sha": "202b963bd6085c37f5a5b15974ec6438c9eb74a8", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 13, "deletions": 31, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c", "patch": "@@ -279,7 +279,7 @@ mod write {\n  */\n \n \n-iter crate_export_metas(&ast::crate c) -> @ast::meta_item {\n+iter crate_export_metas(ast::crate c) -> @ast::meta_item {\n     for (@ast::crate_directive cdir in c.node.directives) {\n         alt (cdir.node) {\n             case (ast::cdir_meta(?v, ?mis)) {\n@@ -293,30 +293,12 @@ iter crate_export_metas(&ast::crate c) -> @ast::meta_item {\n         }\n     }\n }\n-\n-\n-iter crate_local_metas(&ast::crate c) -> @ast::meta_item {\n-    for (@ast::crate_directive cdir in c.node.directives) {\n-        alt (cdir.node) {\n-            case (ast::cdir_meta(?v, ?mis)) {\n-                if (v == ast::local_meta) {\n-                    for (@ast::meta_item mi in mis) {\n-                        put mi;\n-                    }\n-                }\n-            }\n-            case (_) {}\n-        }\n-    }\n-}\n-\n-\n-fn get_crate_meta_export(&session::session sess,\n-                         &ast::crate c, str k, str default,\n-                         bool warn_default) -> str {\n+fn get_crate_meta(&session::session sess,\n+                  &ast::crate c, str k, str default,\n+                  bool warn_default) -> str {\n     let vec[@ast::meta_item] v = [];\n     for each (@ast::meta_item mi in crate_export_metas(c)) {\n-        if (mi.node.key == k) {\n+        if (mi.node.name == k) {\n             v += [mi];\n         }\n     }\n@@ -341,7 +323,7 @@ fn get_crate_meta_export(&session::session sess,\n fn crate_meta_extras_hash(sha1 sha, &ast::crate crate) -> str {\n     fn lteq(&@ast::meta_item ma,\n             &@ast::meta_item mb) -> bool {\n-        ret ma.node.key <= mb.node.key;\n+        ret ma.node.name <= mb.node.name;\n     }\n \n     fn len_and_str(&str s) -> str {\n@@ -350,16 +332,16 @@ fn crate_meta_extras_hash(sha1 sha, &ast::crate crate) -> str {\n \n     let vec[mutable @ast::meta_item] v = [mutable];\n     for each (@ast::meta_item mi in crate_export_metas(crate)) {\n-        if (mi.node.key != \"name\" &&\n-            mi.node.key != \"vers\") {\n+        if (mi.node.name != \"name\" &&\n+            mi.node.name != \"vers\") {\n             v += [mutable mi];\n         }\n     }\n     sort::quick_sort(lteq, v);\n     sha.reset();\n     for (@ast::meta_item m_ in v) {\n         auto m = m_;\n-        sha.input_str(len_and_str(m.node.key));\n+        sha.input_str(len_and_str(m.node.name));\n         sha.input_str(len_and_str(m.node.value));\n     }\n     ret truncated_sha1_result(sha);\n@@ -370,13 +352,13 @@ fn crate_meta_name(&session::session sess, &ast::crate crate,\n     auto os = str::split(fs::basename(output), '.' as u8);\n     assert vec::len(os) >= 2u;\n     vec::pop(os);\n-    ret get_crate_meta_export(sess, crate, \"name\", str::connect(os, \".\"),\n-                              sess.get_opts().shared);\n+    ret get_crate_meta(sess, crate, \"name\", str::connect(os, \".\"),\n+                       sess.get_opts().shared);\n }\n \n fn crate_meta_vers(&session::session sess, &ast::crate crate) -> str {\n-    ret get_crate_meta_export(sess, crate, \"vers\", \"0.0\",\n-                              sess.get_opts().shared);\n+    ret get_crate_meta(sess, crate, \"vers\", \"0.0\",\n+                       sess.get_opts().shared);\n }\n \n fn truncated_sha1_result(sha1 sha) -> str {"}, {"sha": "b36a956464cac0381df9db8592f7e2a8fbbfef2b", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c", "patch": "@@ -97,7 +97,7 @@ type crate_directive = spanned[crate_directive_];\n \n \n type meta_item = spanned[meta_item_];\n-type meta_item_ = rec(ident key, str value);\n+type meta_item_ = rec(ident name, str value);\n \n type block = spanned[block_];\n type block_ = rec(vec[@stmt] stmts,"}, {"sha": "9a93263af35f29afb25a93fbbf33ef7fd5703d74", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 16, "deletions": 67, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c", "patch": "@@ -502,75 +502,24 @@ fn get_metadata_section(str filename) -> option::t[vec[u8]] {\n }\n \n \n-fn metadata_matches(&vec[u8] data,\n-                    &vec[@ast::meta_item] metas) -> bool {\n-    ret true;\n-}\n-\n-fn find_library_crate(&session::session sess,\n-                      &ast::ident ident,\n-                      &vec[@ast::meta_item] metas,\n-                      &vec[str] library_search_paths)\n-    -> option::t[tup(str, vec[u8])] {\n-\n-    let str crate_name = ident;\n-    for (@ast::meta_item mi in metas) {\n-        if (mi.node.key == \"name\") {\n-            crate_name = mi.node.value;\n-            break;\n-        }\n-    }\n-    auto nn = parser::default_native_lib_naming(sess);\n-    let str prefix = nn.prefix + crate_name;\n-\n-    // FIXME: we could probably use a 'glob' function in std::fs but it will\n-    // be much easier to write once the unsafe module knows more about FFI\n-    // tricks. Currently the glob(3) interface is a bit more than we can\n-    // stomach from here, and writing a C++ wrapper is more work than just\n-    // manually filtering fs::list_dir here.\n-\n+fn load_crate(session::session sess,\n+              int cnum,\n+              ast::ident ident,\n+              vec[str] library_search_paths) {\n+    auto filename = parser::default_native_name(sess, ident);\n     for (str library_search_path in library_search_paths) {\n-\n-        for (str path in fs::list_dir(library_search_path)) {\n-\n-            let str f = fs::basename(path);\n-            if (! (str::starts_with(f, prefix) &&\n-                   str::ends_with(f, nn.suffix))) {\n-                log #fmt(\"skipping %s, doesn't look like %s*%s\",\n-                         path, prefix, nn.suffix);\n-                cont;\n+        auto path = fs::connect(library_search_path, filename);\n+        alt (get_metadata_section(path)) {\n+            case (option::some(?cvec)) {\n+                sess.set_external_crate(cnum, rec(name=ident, data=cvec));\n+                ret;\n             }\n-\n-            alt (get_metadata_section(path)) {\n-                case (option::some(?cvec)) {\n-                    if (!metadata_matches(cvec, metas)) {\n-                        log #fmt(\"skipping %s, metadata doesn't match\", path);\n-                        cont;\n-                    }\n-                    log #fmt(\"found %s with matching metadata\", path);\n-                    ret some(tup(path, cvec));\n-                }\n-                case (_) {}\n-            }\n-        }\n-    }\n-    ret none;\n-}\n-\n-fn load_library_crate(&session::session sess,\n-                      &int cnum,\n-                      &ast::ident ident,\n-                      &vec[@ast::meta_item] metas,\n-                      &vec[str] library_search_paths) {\n-    alt (find_library_crate(sess, ident, metas, library_search_paths)) {\n-        case (some(?t)) {\n-            sess.set_external_crate(cnum, rec(name=ident,\n-                                              data=t._1));\n-            ret;\n+            case (_) {}\n         }\n-        case (_) {}\n     }\n-    log_err #fmt(\"can't find crate for '%s'\", ident);\n+\n+    log_err #fmt(\"can't open crate '%s' (looked for '%s' in lib search path)\",\n+                 ident, filename);\n     fail;\n }\n \n@@ -588,8 +537,8 @@ fn visit_view_item(env e, &@ast::view_item i) {\n             auto cnum;\n             if (!e.crate_cache.contains_key(ident)) {\n                 cnum = e.next_crate_num;\n-                load_library_crate(e.sess, cnum, ident, meta_items,\n-                                   e.library_search_paths);\n+                load_crate(e.sess, cnum, ident,\n+                           e.library_search_paths);\n                 e.crate_cache.insert(ident, e.next_crate_num);\n                 e.next_crate_num += 1;\n             } else {"}, {"sha": "d3a8fa9a3293ac536cad8ed7339eab4b1116c003", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c", "patch": "@@ -1992,26 +1992,20 @@ fn parse_native_mod_items(&parser p, &str native_name,\n             items=items);\n }\n \n-fn default_native_lib_naming(session::session sess)\n-    -> rec(str prefix, str suffix) {\n+fn default_native_name(session::session sess, str id) -> str {\n     alt (sess.get_targ_cfg().os) {\n         case (session::os_win32) {\n-            ret rec(prefix=\"\", suffix=\".dll\");\n+            ret id + \".dll\";\n         }\n         case (session::os_macos) {\n-            ret rec(prefix=\"lib\", suffix=\".dylib\");\n+            ret \"lib\" + id + \".dylib\";\n         }\n         case (session::os_linux) {\n-            ret rec(prefix=\"lib\", suffix=\".so\");\n+            ret \"lib\" + id + \".so\";\n         }\n     }\n }\n \n-fn default_native_name(session::session sess, str id) -> str {\n-    auto n = default_native_lib_naming(sess);\n-    ret n.prefix + id + n.suffix;\n-}\n-\n fn parse_item_native_mod(&parser p) -> @ast::item {\n     auto lo = p.get_last_lo_pos();\n     auto abi = ast::native_abi_cdecl;\n@@ -2200,7 +2194,7 @@ fn parse_meta_item(&parser p) -> @ast::meta_item {\n         case (token::LIT_STR(?s)) {\n             auto hi = p.get_hi_pos();\n             p.bump();\n-            ret @spanned(lo, hi, rec(key = ident,\n+            ret @spanned(lo, hi, rec(name = ident,\n                                      value = p.get_str(s)));\n         }\n         case (_) {"}, {"sha": "4aae74c5a6eb668a5aadb1416585977757885890", "filename": "src/comp/middle/metadata.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmetadata.rs?ref=40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c", "patch": "@@ -14,7 +14,6 @@ import middle::trans;\n import middle::ty;\n import middle::ty::path_to_str;\n import back::x86;\n-import back::link;\n import util::common;\n import pretty::ppaux::lit_to_str;\n \n@@ -47,12 +46,6 @@ const uint tag_index_buckets_bucket = 0x13u;\n const uint tag_index_buckets_bucket_elt = 0x14u;\n const uint tag_index_table = 0x15u;\n \n-const uint tag_meta_export = 0x16u;\n-const uint tag_meta_local = 0x17u;\n-const uint tag_meta_item = 0x18u;\n-const uint tag_meta_item_key = 0x19u;\n-const uint tag_meta_item_value = 0x20u;\n-\n // Type encoding\n \n // Compact string representation for ty.t values. API ty_str & parse_from_str.\n@@ -718,41 +711,12 @@ fn write_int(&io::writer writer, &int n) {\n }\n \n \n-fn encode_meta_items(&ebml::writer ebml_w, &ast::crate crate) {\n-\n-    fn encode_meta_item(&ebml::writer ebml_w, &ast::meta_item mi) {\n-        ebml::start_tag(ebml_w, tag_meta_item);\n-        ebml::start_tag(ebml_w, tag_meta_item_key);\n-        ebml_w.writer.write(str::bytes(mi.node.key));\n-        ebml::end_tag(ebml_w);\n-        ebml::start_tag(ebml_w, tag_meta_item_value);\n-        ebml_w.writer.write(str::bytes(mi.node.value));\n-        ebml::end_tag(ebml_w);\n-        ebml::end_tag(ebml_w);\n-    }\n-\n-    ebml::start_tag(ebml_w, tag_meta_export);\n-    for each (@ast::meta_item mi in link::crate_export_metas(crate)) {\n-        encode_meta_item(ebml_w, *mi);\n-    }\n-    ebml::end_tag(ebml_w);\n-\n-    ebml::start_tag(ebml_w, tag_meta_local);\n-    for each (@ast::meta_item mi in link::crate_local_metas(crate)) {\n-        encode_meta_item(ebml_w, *mi);\n-    }\n-    ebml::end_tag(ebml_w);\n-}\n-\n fn encode_metadata(&@trans::crate_ctxt cx, &@ast::crate crate)\n         -> ValueRef {\n     auto string_w = io::string_writer();\n     auto buf_w = string_w.get_writer().get_buf_writer();\n     auto ebml_w = ebml::create_writer(buf_w);\n \n-    // Encode the meta items\n-    encode_meta_items(ebml_w, *crate);\n-\n     // Encode and index the paths.\n     ebml::start_tag(ebml_w, tag_paths);\n     auto paths_index = encode_item_paths(ebml_w, crate);"}, {"sha": "20fe17c48c099deade05d0a72633412186dbb175", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=40e3a9fcbcd6d9ebb98bc29729b1ef1b4dbec95c", "patch": "@@ -1000,7 +1000,7 @@ fn print_view_item(&ps s, &@ast::view_item item) {\n                 popen(s);\n                 fn print_meta(&ps s, &@ast::meta_item item) {\n                     ibox(s, indent_unit);\n-                    word_space(s, item.node.key);\n+                    word_space(s, item.node.name);\n                     word_space(s, \"=\");\n                     print_string(s, item.node.value);\n                     end(s);"}]}