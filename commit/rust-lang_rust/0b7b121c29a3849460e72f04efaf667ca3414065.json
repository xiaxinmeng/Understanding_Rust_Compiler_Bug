{"sha": "0b7b121c29a3849460e72f04efaf667ca3414065", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiN2IxMjFjMjlhMzg0OTQ2MGU3MmYwNGVmYWY2NjdjYTM0MTQwNjU=", "commit": {"author": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2021-04-28T11:56:23Z"}, "committer": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2021-04-28T11:56:23Z"}, "message": "Simplify `Mutex::into_inner`", "tree": {"sha": "dd9a9c744434e97458e294d37722f04ecbc399d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd9a9c744434e97458e294d37722f04ecbc399d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b7b121c29a3849460e72f04efaf667ca3414065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7b121c29a3849460e72f04efaf667ca3414065", "html_url": "https://github.com/rust-lang/rust/commit/0b7b121c29a3849460e72f04efaf667ca3414065", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b7b121c29a3849460e72f04efaf667ca3414065/comments", "author": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "855c2d130fb70da1643cf8f696c7aad7537aef34", "url": "https://api.github.com/repos/rust-lang/rust/commits/855c2d130fb70da1643cf8f696c7aad7537aef34", "html_url": "https://github.com/rust-lang/rust/commit/855c2d130fb70da1643cf8f696c7aad7537aef34"}], "stats": {"total": 21, "additions": 2, "deletions": 19}, "files": [{"sha": "773ab18b2ce6555a57ec88f3e908f2cc9cc26882", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0b7b121c29a3849460e72f04efaf667ca3414065/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7b121c29a3849460e72f04efaf667ca3414065/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=0b7b121c29a3849460e72f04efaf667ca3414065", "patch": "@@ -3,9 +3,7 @@ mod tests;\n \n use crate::cell::UnsafeCell;\n use crate::fmt;\n-use crate::mem;\n use crate::ops::{Deref, DerefMut};\n-use crate::ptr;\n use crate::sync::{poison, LockResult, TryLockError, TryLockResult};\n use crate::sys_common::mutex as sys;\n \n@@ -376,23 +374,8 @@ impl<T: ?Sized> Mutex<T> {\n     where\n         T: Sized,\n     {\n-        // We know statically that there are no outstanding references to\n-        // `self` so there's no need to lock the inner mutex.\n-        //\n-        // To get the inner value, we'd like to call `data.into_inner()`,\n-        // but because `Mutex` impl-s `Drop`, we can't move out of it, so\n-        // we'll have to destructure it manually instead.\n-        unsafe {\n-            // Like `let Mutex { inner, poison, data } = self`.\n-            let (inner, poison, data) = {\n-                let Mutex { ref inner, ref poison, ref data } = self;\n-                (ptr::read(inner), ptr::read(poison), ptr::read(data))\n-            };\n-            mem::forget(self);\n-            drop(inner);\n-\n-            poison::map_result(poison.borrow(), |_| data.into_inner())\n-        }\n+        let data = self.data.into_inner();\n+        poison::map_result(self.poison.borrow(), |_| data)\n     }\n \n     /// Returns a mutable reference to the underlying data."}]}