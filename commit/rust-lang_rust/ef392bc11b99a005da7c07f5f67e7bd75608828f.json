{"sha": "ef392bc11b99a005da7c07f5f67e7bd75608828f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMzkyYmMxMWI5OWEwMDVkYTdjMDdmNWY2N2U3YmQ3NTYwODgyOGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-07T09:44:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-16T10:57:46Z"}, "message": "simplify lifetime annotations for `MirBorrowckCtxt`", "tree": {"sha": "c5a09b6a3170fc80ed862a02d7dc18ee102696dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5a09b6a3170fc80ed862a02d7dc18ee102696dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef392bc11b99a005da7c07f5f67e7bd75608828f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef392bc11b99a005da7c07f5f67e7bd75608828f", "html_url": "https://github.com/rust-lang/rust/commit/ef392bc11b99a005da7c07f5f67e7bd75608828f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef392bc11b99a005da7c07f5f67e7bd75608828f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51ce1f9493b5aec30616b15fc34a7d96307ad9ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/51ce1f9493b5aec30616b15fc34a7d96307ad9ad", "html_url": "https://github.com/rust-lang/rust/commit/51ce1f9493b5aec30616b15fc34a7d96307ad9ad"}], "stats": {"total": 72, "additions": 35, "deletions": 37}, "files": [{"sha": "93fd3e7637f8a685129ecee61d520ecd93213baf", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 35, "deletions": 37, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ef392bc11b99a005da7c07f5f67e7bd75608828f/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef392bc11b99a005da7c07f5f67e7bd75608828f/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=ef392bc11b99a005da7c07f5f67e7bd75608828f", "patch": "@@ -148,13 +148,13 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n }\n \n #[allow(dead_code)]\n-pub struct MirBorrowckCtxt<'c, 'b, 'a: 'b+'c, 'gcx: 'a+'tcx, 'tcx: 'a> {\n-    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    mir: &'b Mir<'tcx>,\n+pub struct MirBorrowckCtxt<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n+    tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n+    mir: &'cx Mir<'tcx>,\n     node_id: ast::NodeId,\n-    move_data: &'b MoveData<'tcx>,\n-    param_env: ParamEnv<'tcx>,\n-    fake_infer_ctxt: &'c InferCtxt<'c, 'gcx, 'tcx>,\n+    move_data: &'cx MoveData<'tcx>,\n+    param_env: ParamEnv<'gcx>,\n+    fake_infer_ctxt: &'cx InferCtxt<'cx, 'gcx, 'tcx>,\n }\n \n // (forced to be `pub` due to its use as an associated type below.)\n@@ -177,12 +177,10 @@ struct FlowInProgress<BD> where BD: BitDenotation {\n // 2. loans made in overlapping scopes do not conflict\n // 3. assignments do not affect things loaned out as immutable\n // 4. moves do not affect things loaned out in any way\n-impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> DataflowResultsConsumer<'b, 'tcx>\n-    for MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n-{\n-    type FlowState = InProgress<'b, 'gcx, 'tcx>;\n+impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n+    type FlowState = InProgress<'cx, 'gcx, 'tcx>;\n \n-    fn mir(&self) -> &'b Mir<'tcx> { self.mir }\n+    fn mir(&self) -> &'cx Mir<'tcx> { self.mir }\n \n     fn reset_to_entry_of(&mut self, bb: BasicBlock, flow_state: &mut Self::FlowState) {\n         flow_state.each_flow(|b| b.reset_to_entry_of(bb),\n@@ -437,12 +435,12 @@ enum WriteKind {\n     Move,\n }\n \n-impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx> {\n+impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     fn access_lvalue(&mut self,\n                      context: Context,\n                      lvalue_span: (&Lvalue<'tcx>, Span),\n                      kind: (ShallowOrDeep, ReadOrWrite),\n-                     flow_state: &InProgress<'b, 'gcx, 'tcx>) {\n+                     flow_state: &InProgress<'cx, 'gcx, 'tcx>) {\n \n         let (sd, rw) = kind;\n \n@@ -501,7 +499,7 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n                      lvalue_span: (&Lvalue<'tcx>, Span),\n                      kind: ShallowOrDeep,\n                      mode: MutateMode,\n-                     flow_state: &InProgress<'b, 'gcx, 'tcx>) {\n+                     flow_state: &InProgress<'cx, 'gcx, 'tcx>) {\n         // Write of P[i] or *P, or WriteAndRead of any P, requires P init'd.\n         match mode {\n             MutateMode::WriteAndRead => {\n@@ -522,7 +520,7 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n                       context: Context,\n                       (rvalue, span): (&Rvalue<'tcx>, Span),\n                       _location: Location,\n-                      flow_state: &InProgress<'b, 'gcx, 'tcx>) {\n+                      flow_state: &InProgress<'cx, 'gcx, 'tcx>) {\n         match *rvalue {\n             Rvalue::Ref(_/*rgn*/, bk, ref lvalue) => {\n                 let access_kind = match bk {\n@@ -579,7 +577,7 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n                        context: Context,\n                        consume_via_drop: ConsumeKind,\n                        (operand, span): (&Operand<'tcx>, Span),\n-                       flow_state: &InProgress<'b, 'gcx, 'tcx>) {\n+                       flow_state: &InProgress<'cx, 'gcx, 'tcx>) {\n         match *operand {\n             Operand::Consume(ref lvalue) => {\n                 self.consume_lvalue(context, consume_via_drop, (lvalue, span), flow_state)\n@@ -592,7 +590,7 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n                       context: Context,\n                       consume_via_drop: ConsumeKind,\n                       lvalue_span: (&Lvalue<'tcx>, Span),\n-                      flow_state: &InProgress<'b, 'gcx, 'tcx>) {\n+                      flow_state: &InProgress<'cx, 'gcx, 'tcx>) {\n         let lvalue = lvalue_span.0;\n         let ty = lvalue.ty(self.mir, self.tcx).to_ty(self.tcx);\n         let moves_by_default =\n@@ -619,11 +617,11 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n     }\n }\n \n-impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx> {\n+impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     fn check_if_reassignment_to_immutable_state(&mut self,\n                                                 context: Context,\n                                                 (lvalue, span): (&Lvalue<'tcx>, Span),\n-                                                flow_state: &InProgress<'b, 'gcx, 'tcx>) {\n+                                                flow_state: &InProgress<'cx, 'gcx, 'tcx>) {\n         let move_data = self.move_data;\n \n         // determine if this path has a non-mut owner (and thus needs checking).\n@@ -674,7 +672,7 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n                               context: Context,\n                               desired_action: &str,\n                               lvalue_span: (&Lvalue<'tcx>, Span),\n-                              flow_state: &InProgress<'b, 'gcx, 'tcx>) {\n+                              flow_state: &InProgress<'cx, 'gcx, 'tcx>) {\n         // FIXME: analogous code in check_loans first maps `lvalue` to\n         // its base_path ... but is that what we want here?\n         let lvalue = self.base_path(lvalue_span.0);\n@@ -802,7 +800,7 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n     fn check_if_assigned_path_is_moved(&mut self,\n                                        context: Context,\n                                        (lvalue, span): (&Lvalue<'tcx>, Span),\n-                                       flow_state: &InProgress<'b, 'gcx, 'tcx>) {\n+                                       flow_state: &InProgress<'cx, 'gcx, 'tcx>) {\n         // recur down lvalue; dispatch to check_if_path_is_moved when necessary\n         let mut lvalue = lvalue;\n         loop {\n@@ -1015,11 +1013,11 @@ enum NoMovePathFound {\n     ReachedStatic,\n }\n \n-impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx> {\n+impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     fn each_borrow_involving_path<F>(&mut self,\n                                      _context: Context,\n                                      access_lvalue: (ShallowOrDeep, &Lvalue<'tcx>),\n-                                     flow_state: &InProgress<'b, 'gcx, 'tcx>,\n+                                     flow_state: &InProgress<'cx, 'gcx, 'tcx>,\n                                      mut op: F)\n         where F: FnMut(&mut Self, BorrowIndex, &BorrowData<'tcx>, &Lvalue) -> Control\n     {\n@@ -1119,11 +1117,11 @@ mod prefixes {\n     }\n \n \n-    pub(super) struct Prefixes<'c, 'gcx: 'tcx, 'tcx: 'c> {\n-        mir: &'c Mir<'tcx>,\n-        tcx: TyCtxt<'c, 'gcx, 'tcx>,\n+    pub(super) struct Prefixes<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n+        mir: &'cx Mir<'tcx>,\n+        tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n         kind: PrefixSet,\n-        next: Option<&'c Lvalue<'tcx>>,\n+        next: Option<&'cx Lvalue<'tcx>>,\n     }\n \n     #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n@@ -1137,21 +1135,21 @@ mod prefixes {\n         Supporting,\n     }\n \n-    impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx> {\n+    impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         /// Returns an iterator over the prefixes of `lvalue`\n         /// (inclusive) from longest to smallest, potentially\n         /// terminating the iteration early based on `kind`.\n-        pub(super) fn prefixes<'d>(&self,\n-                                   lvalue: &'d Lvalue<'tcx>,\n-                                   kind: PrefixSet)\n-                                   -> Prefixes<'d, 'gcx, 'tcx> where 'b: 'd\n+        pub(super) fn prefixes(&self,\n+                               lvalue: &'cx Lvalue<'tcx>,\n+                               kind: PrefixSet)\n+                               -> Prefixes<'cx, 'gcx, 'tcx>\n         {\n             Prefixes { next: Some(lvalue), kind, mir: self.mir, tcx: self.tcx }\n         }\n     }\n \n-    impl<'c, 'gcx, 'tcx> Iterator for Prefixes<'c, 'gcx, 'tcx> {\n-        type Item = &'c Lvalue<'tcx>;\n+    impl<'cx, 'gcx, 'tcx> Iterator for Prefixes<'cx, 'gcx, 'tcx> {\n+        type Item = &'cx Lvalue<'tcx>;\n         fn next(&mut self) -> Option<Self::Item> {\n             let mut cursor = match self.next {\n                 None => return None,\n@@ -1244,7 +1242,7 @@ mod prefixes {\n     }\n }\n \n-impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx> {\n+impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     fn report_use_of_moved_or_uninitialized(&mut self,\n                            _context: Context,\n                            desired_action: &str,\n@@ -1481,7 +1479,7 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n     }\n }\n \n-impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx> {\n+impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     // End-user visible description of `lvalue`\n     fn describe_lvalue(&self, lvalue: &Lvalue) -> String {\n         let mut buf = String::new();\n@@ -1616,7 +1614,7 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n     }\n }\n \n-impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx> {\n+impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     // FIXME (#16118): function intended to allow the borrow checker\n     // to be less precise in its handling of Box while still allowing\n     // moves out of a Box. They should be removed when/if we stop"}]}