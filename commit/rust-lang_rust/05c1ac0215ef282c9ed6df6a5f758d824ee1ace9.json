{"sha": "05c1ac0215ef282c9ed6df6a5f758d824ee1ace9", "node_id": "C_kwDOAAsO6NoAKDA1YzFhYzAyMTVlZjI4MmM5ZWQ2ZGY2YTVmNzU4ZDgyNGVlMWFjZTk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-31T01:56:59Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-09T22:04:00Z"}, "message": "Collect backtraces for delayed span-bugs too", "tree": {"sha": "8834e599e3c5233a6627a1233cfd2852a6ca6c7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8834e599e3c5233a6627a1233cfd2852a6ca6c7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05c1ac0215ef282c9ed6df6a5f758d824ee1ace9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05c1ac0215ef282c9ed6df6a5f758d824ee1ace9", "html_url": "https://github.com/rust-lang/rust/commit/05c1ac0215ef282c9ed6df6a5f758d824ee1ace9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05c1ac0215ef282c9ed6df6a5f758d824ee1ace9/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3020239de947ec52677e9b4e853a6a9fc073d1f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3020239de947ec52677e9b4e853a6a9fc073d1f9", "html_url": "https://github.com/rust-lang/rust/commit/3020239de947ec52677e9b4e853a6a9fc073d1f9"}], "stats": {"total": 44, "additions": 18, "deletions": 26}, "files": [{"sha": "fcb73c64356fdeca925ed83b1b763031eca32e0a", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05c1ac0215ef282c9ed6df6a5f758d824ee1ace9/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c1ac0215ef282c9ed6df6a5f758d824ee1ace9/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=05c1ac0215ef282c9ed6df6a5f758d824ee1ace9", "patch": "@@ -1196,8 +1196,8 @@ static DEFAULT_HOOK: LazyLock<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send +\n             };\n \n             // Invoke the default handler, which prints the actual panic message and optionally a backtrace\n-            // Don't do this for `GoodPathBug`, which already emits its own more useful backtrace.\n-            if !info.payload().is::<rustc_errors::GoodPathBug>() {\n+            // Don't do this for delayed bugs, which already emit their own more useful backtrace.\n+            if !info.payload().is::<rustc_errors::DelayedBugPanic>() {\n                 (*DEFAULT_HOOK)(info);\n \n                 // Separate the output with an empty line\n@@ -1235,7 +1235,7 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // a .span_bug or .bug call has already printed what\n     // it wants to print.\n     if !info.payload().is::<rustc_errors::ExplicitBug>()\n-        && !info.payload().is::<rustc_errors::GoodPathBug>()\n+        && !info.payload().is::<rustc_errors::DelayedBugPanic>()\n     {\n         let mut d = rustc_errors::Diagnostic::new(rustc_errors::Level::Bug, \"unexpected panic\");\n         handler.emit_diagnostic(&mut d);"}, {"sha": "66e5c41f56c28b9555783c1af7ca21124eccf380", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/05c1ac0215ef282c9ed6df6a5f758d824ee1ace9/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c1ac0215ef282c9ed6df6a5f758d824ee1ace9/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=05c1ac0215ef282c9ed6df6a5f758d824ee1ace9", "patch": "@@ -40,7 +40,6 @@ use rustc_span::source_map::SourceMap;\n use rustc_span::HashStableContext;\n use rustc_span::{Loc, Span};\n \n-use std::any::Any;\n use std::borrow::Cow;\n use std::fmt;\n use std::hash::Hash;\n@@ -364,9 +363,9 @@ pub use rustc_span::fatal_error::{FatalError, FatalErrorMarker};\n /// or `.span_bug` rather than a failed assertion, etc.\n pub struct ExplicitBug;\n \n-/// Signifies that the compiler died with an explicit call to `.delay_good_path_bug`\n+/// Signifies that the compiler died with an explicit call to `.delay_*_bug`\n /// rather than a failed assertion, etc.\n-pub struct GoodPathBug;\n+pub struct DelayedBugPanic;\n \n pub use diagnostic::{\n     AddToDiagnostic, DecorateLint, Diagnostic, DiagnosticArg, DiagnosticArgValue, DiagnosticId,\n@@ -399,7 +398,7 @@ struct HandlerInner {\n     warn_count: usize,\n     deduplicated_err_count: usize,\n     emitter: Box<dyn Emitter + sync::Send>,\n-    delayed_span_bugs: Vec<Diagnostic>,\n+    delayed_span_bugs: Vec<DelayedDiagnostic>,\n     delayed_good_path_bugs: Vec<DelayedDiagnostic>,\n     /// This flag indicates that an expected diagnostic was emitted and suppressed.\n     /// This is used for the `delayed_good_path_bugs` check.\n@@ -505,11 +504,7 @@ impl Drop for HandlerInner {\n \n         if !self.has_errors() {\n             let bugs = std::mem::replace(&mut self.delayed_span_bugs, Vec::new());\n-            self.flush_delayed(\n-                bugs,\n-                \"no errors encountered even though `delay_span_bug` issued\",\n-                ExplicitBug,\n-            );\n+            self.flush_delayed(bugs, \"no errors encountered even though `delay_span_bug` issued\");\n         }\n \n         // FIXME(eddyb) this explains what `delayed_good_path_bugs` are!\n@@ -520,9 +515,8 @@ impl Drop for HandlerInner {\n         if !self.has_any_message() && !self.suppressed_expected_diag {\n             let bugs = std::mem::replace(&mut self.delayed_good_path_bugs, Vec::new());\n             self.flush_delayed(\n-                bugs.into_iter().map(DelayedDiagnostic::decorate),\n+                bugs,\n                 \"no warnings or errors encountered even though `delayed_good_path_bugs` issued\",\n-                GoodPathBug,\n             );\n         }\n \n@@ -1223,11 +1217,7 @@ impl Handler {\n     pub fn flush_delayed(&self) {\n         let mut inner = self.inner.lock();\n         let bugs = std::mem::replace(&mut inner.delayed_span_bugs, Vec::new());\n-        inner.flush_delayed(\n-            bugs,\n-            \"no errors encountered even though `delay_span_bug` issued\",\n-            ExplicitBug,\n-        );\n+        inner.flush_delayed(bugs, \"no errors encountered even though `delay_span_bug` issued\");\n     }\n }\n \n@@ -1287,7 +1277,9 @@ impl HandlerInner {\n             // once *any* errors were emitted (and truncate `delayed_span_bugs`\n             // when an error is first emitted, also), but maybe there's a case\n             // in which that's not sound? otherwise this is really inefficient.\n-            self.delayed_span_bugs.push(diagnostic.clone());\n+            let backtrace = std::backtrace::Backtrace::force_capture();\n+            self.delayed_span_bugs\n+                .push(DelayedDiagnostic::with_backtrace(diagnostic.clone(), backtrace));\n \n             if !self.flags.report_delayed_bugs {\n                 return Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n@@ -1562,7 +1554,6 @@ impl HandlerInner {\n         }\n         let mut diagnostic = Diagnostic::new(Level::DelayedBug, msg);\n         diagnostic.set_span(sp.into());\n-        diagnostic.note(&format!(\"delayed at {}\", std::panic::Location::caller()));\n         self.emit_diagnostic(&mut diagnostic).unwrap()\n     }\n \n@@ -1605,12 +1596,13 @@ impl HandlerInner {\n \n     fn flush_delayed(\n         &mut self,\n-        bugs: impl IntoIterator<Item = Diagnostic>,\n+        bugs: impl IntoIterator<Item = DelayedDiagnostic>,\n         explanation: impl Into<DiagnosticMessage> + Copy,\n-        panic_with: impl Any + Send + 'static,\n     ) {\n         let mut no_bugs = true;\n-        for mut bug in bugs {\n+        for bug in bugs {\n+            let mut bug = bug.decorate();\n+\n             if no_bugs {\n                 // Put the overall explanation before the `DelayedBug`s, to\n                 // frame them better (e.g. separate warnings from them).\n@@ -1633,9 +1625,9 @@ impl HandlerInner {\n             self.emit_diagnostic(&mut bug);\n         }\n \n-        // Panic with `ExplicitBug` to avoid \"unexpected panic\" messages.\n+        // Panic with `DelayedBugPanic` to avoid \"unexpected panic\" messages.\n         if !no_bugs {\n-            panic::panic_any(panic_with);\n+            panic::panic_any(DelayedBugPanic);\n         }\n     }\n "}]}