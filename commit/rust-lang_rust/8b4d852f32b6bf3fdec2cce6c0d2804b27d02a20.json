{"sha": "8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNGQ4NTJmMzJiNmJmM2ZkZWMyY2NlNmMwZDI4MDRiMjdkMDJhMjA=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2017-12-04T22:55:14Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-01-13T15:49:28Z"}, "message": "Address review.", "tree": {"sha": "b0dd0d344790daffb6af14ca47e770cfd2a250e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0dd0d344790daffb6af14ca47e770cfd2a250e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20", "html_url": "https://github.com/rust-lang/rust/commit/8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e3953bbdd58892844a1bd2b7f4a2336a8acea5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e3953bbdd58892844a1bd2b7f4a2336a8acea5e", "html_url": "https://github.com/rust-lang/rust/commit/4e3953bbdd58892844a1bd2b7f4a2336a8acea5e"}], "stats": {"total": 91, "additions": 16, "deletions": 75}, "files": [{"sha": "8342af6011d0c90de33e1f0b62193c07083e812f", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20", "patch": "@@ -248,15 +248,15 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     // Auto traits cannot have generics, super traits nor contain items.\n                     if generics.is_parameterized() {\n                         struct_span_err!(self.session, item.span, E0567,\n-                                        \"Auto traits cannot have generic parameters\").emit();\n+                                        \"auto traits cannot have generic parameters\").emit();\n                     }\n                     if !bounds.is_empty() {\n                         struct_span_err!(self.session, item.span, E0568,\n-                                        \"Auto traits cannot have predicates\").emit();\n+                                        \"auto traits cannot have super traits\").emit();\n                     }\n                     if !trait_items.is_empty() {\n                         struct_span_err!(self.session, item.span, E0380,\n-                                \"Auto traits cannot have methods or associated items\").emit();\n+                                \"auto traits cannot have methods or associated items\").emit();\n                     }\n                 }\n                 self.no_questions_in_bounds(bounds, \"supertraits\", true);"}, {"sha": "cbfdace7e0ff2718eab22fef3f846b46111b2aff", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20", "patch": "@@ -271,7 +271,7 @@ register_diagnostics! {\n     E0226, // only a single explicit lifetime bound is permitted\n     E0472, // asm! is unsupported on this target\n     E0561, // patterns aren't allowed in function pointer types\n-    E0567, // auto traits can not have type parameters\n-    E0568, // auto traits can not have predicates\n+    E0567, // auto traits can not have generic parameters\n+    E0568, // auto traits can not have super traits\n     E0642, // patterns aren't allowed in methods without bodies\n }"}, {"sha": "5485045b7043897f459e02445b8152abde6a1096", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 52, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20", "patch": "@@ -714,7 +714,7 @@ fn trait_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let (is_auto, unsafety) = match item.node {\n         hir::ItemTrait(is_auto, unsafety, ..) => (is_auto == hir::IsAuto::Yes, unsafety),\n-        hir::ItemTraitAlias(..) => (hir::IsAuto::No, hir::Unsafety::Normal),\n+        hir::ItemTraitAlias(..) => (false, hir::Unsafety::Normal),\n         _ => span_bug!(item.span, \"trait_def_of_item invoked on non-trait\"),\n     };\n \n@@ -1714,54 +1714,3 @@ fn is_foreign_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         _ => bug!(\"is_foreign_item applied to non-local def-id {:?}\", def_id)\n     }\n }\n-\n-struct ImplTraitUniversalInfo<'hir> {\n-    id: ast::NodeId,\n-    def_id: DefId,\n-    span: Span,\n-    bounds: &'hir [hir::TyParamBound],\n-}\n-\n-/// Take some possible list of arguments and return the DefIds of the ImplTraitUniversal\n-/// arguments\n-fn extract_universal_impl_trait_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                               opt_inputs: Option<&'tcx [P<hir::Ty>]>)\n-                                               -> Vec<ImplTraitUniversalInfo<'tcx>>\n-{\n-    // A visitor for simply collecting Universally quantified impl Trait arguments\n-    struct ImplTraitUniversalVisitor<'tcx> {\n-        items: Vec<&'tcx hir::Ty>\n-    }\n-\n-    impl<'tcx> Visitor<'tcx> for ImplTraitUniversalVisitor<'tcx> {\n-        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-            NestedVisitorMap::None\n-        }\n-\n-        fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n-            if let hir::TyImplTraitUniversal(..) = ty.node {\n-                self.items.push(ty);\n-            }\n-            intravisit::walk_ty(self, ty);\n-        }\n-    }\n-\n-    let mut visitor = ImplTraitUniversalVisitor { items: Vec::new() };\n-\n-    if let Some(inputs) = opt_inputs {\n-        for t in inputs.iter() {\n-            visitor.visit_ty(t);\n-        }\n-    }\n-\n-    visitor.items.into_iter().map(|ty| if let hir::TyImplTraitUniversal(_, ref bounds) = ty.node {\n-        ImplTraitUniversalInfo {\n-            id: ty.id,\n-            def_id: tcx.hir.local_def_id(ty.id),\n-            span: ty.span,\n-            bounds: bounds\n-        }\n-    } else {\n-        span_bug!(ty.span, \"this type should be a universally quantified impl trait. this is a bug\")\n-    }).collect()\n-}"}, {"sha": "ce42b05b8bbb7a3fff4fc129bfdd0077dbe03155", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20", "patch": "@@ -6370,8 +6370,8 @@ impl<'a> Parser<'a> {\n             let is_auto = if self.eat_keyword(keywords::Trait) {\n                 IsAuto::No\n             } else {\n-                self.eat_keyword(keywords::Auto);\n-                self.eat_keyword(keywords::Trait);\n+                self.expect_keyword(keywords::Auto)?;\n+                self.expect_keyword(keywords::Trait)?;\n                 IsAuto::Yes\n             };\n             let (ident, item_, extra_attrs) =\n@@ -6485,8 +6485,8 @@ impl<'a> Parser<'a> {\n             let is_auto = if self.eat_keyword(keywords::Trait) {\n                 IsAuto::No\n             } else {\n-                self.eat_keyword(keywords::Auto);\n-                self.eat_keyword(keywords::Trait);\n+                self.expect_keyword(keywords::Auto)?;\n+                self.expect_keyword(keywords::Trait)?;\n                 IsAuto::Yes\n             };\n             // TRAIT ITEM"}, {"sha": "92b222e1322b8b5e13442a973daa68bd0a38ba80", "filename": "src/test/compile-fail/auto-trait-validation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20/src%2Ftest%2Fcompile-fail%2Fauto-trait-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20/src%2Ftest%2Fcompile-fail%2Fauto-trait-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-trait-validation.rs?ref=8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20", "patch": "@@ -11,9 +11,9 @@\n #![feature(optin_builtin_traits)]\n \n auto trait Generic<T> {}\n-//~^ Auto traits cannot have type parameters [E0567]\n+//~^ auto traits cannot have generic parameters [E0567]\n auto trait Bound : Copy {}\n-//~^ Auto traits cannot have predicates [E0568]\n+//~^ auto traits cannot have super traits [E0568]\n auto trait MyTrait { fn foo() {} }\n-//~^ Auto traits cannot have methods or associated items [E0380]\n+//~^ auto traits cannot have methods or associated items [E0380]\n fn main() {}"}, {"sha": "d66da1224f8b950d0fd8dcc460ff8ecd8d2b18b0", "filename": "src/test/ui/feature-gate-optin-builtin-traits.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20/src%2Ftest%2Fui%2Ffeature-gate-optin-builtin-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20/src%2Ftest%2Fui%2Ffeature-gate-optin-builtin-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-optin-builtin-traits.stderr?ref=8b4d852f32b6bf3fdec2cce6c0d2804b27d02a20", "patch": "@@ -6,21 +6,13 @@ error: auto traits are experimental and possibly buggy (see issue #13231)\n    |\n    = help: add #![feature(optin_builtin_traits)] to the crate attributes to enable\n \n-error: auto trait implementations are experimental and possibly buggy (see issue #13231)\n-  --> $DIR/feature-gate-optin-builtin-traits.rs:24:1\n-   |\n-24 | impl DummyTrait for .. {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(optin_builtin_traits)] to the crate attributes to enable\n-\n error: negative trait bounds are not yet fully implemented; use marker types for now (see issue #13231)\n-  --> $DIR/feature-gate-optin-builtin-traits.rs:27:1\n+  --> $DIR/feature-gate-optin-builtin-traits.rs:23:1\n    |\n-27 | impl !DummyTrait for DummyStruct {}\n+23 | impl !DummyTrait for DummyStruct {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(optin_builtin_traits)] to the crate attributes to enable\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}]}