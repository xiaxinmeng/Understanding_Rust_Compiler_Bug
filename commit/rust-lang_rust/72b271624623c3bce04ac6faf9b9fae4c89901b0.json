{"sha": "72b271624623c3bce04ac6faf9b9fae4c89901b0", "node_id": "C_kwDOAAsO6NoAKDcyYjI3MTYyNDYyM2MzYmNlMDRhYzZmYWY5YjlmYWU0Yzg5OTAxYjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-16T07:20:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-16T07:20:46Z"}, "message": "Auto merge of #111472 - djkoloski:compiletest_cfg_current_target, r=compiler-errors\n\nGet current target config from` --print=cfg`\n\nCompiletest was switched to querying all targets using `--print=all-target-specs-json` and `--print=target-spec-json` in #108905. This unintentionally prevented codegen flags like `-Cpanic` from being reflected in the current target configuration. This change gets the current compiletest target config using `--print=cfg` like it was previously while still using the faster prints for getting information on all other targets.\n\nFixes #110850.\n\n`@jyn514` might be interested in reviewing since they commented on the issue.\ncc `@tmandry` since this issue is affecting Fuchsia.", "tree": {"sha": "76415f0de1c685fefbbec9e5aeb5eb38228ea0ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76415f0de1c685fefbbec9e5aeb5eb38228ea0ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72b271624623c3bce04ac6faf9b9fae4c89901b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72b271624623c3bce04ac6faf9b9fae4c89901b0", "html_url": "https://github.com/rust-lang/rust/commit/72b271624623c3bce04ac6faf9b9fae4c89901b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72b271624623c3bce04ac6faf9b9fae4c89901b0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ea9ad532474343426e564b997891e459cda89a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ea9ad532474343426e564b997891e459cda89a6", "html_url": "https://github.com/rust-lang/rust/commit/3ea9ad532474343426e564b997891e459cda89a6"}, {"sha": "9dffb52738e0b2ccd15af36d4607a709b21e020c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dffb52738e0b2ccd15af36d4607a709b21e020c", "html_url": "https://github.com/rust-lang/rust/commit/9dffb52738e0b2ccd15af36d4607a709b21e020c"}], "stats": {"total": 89, "additions": 84, "deletions": 5}, "files": [{"sha": "ba68b5ee9d5b445eadbe40a684dcd9f9dc5878e2", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 84, "deletions": 5, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/72b271624623c3bce04ac6faf9b9fae4c89901b0/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72b271624623c3bce04ac6faf9b9fae4c89901b0/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=72b271624623c3bce04ac6faf9b9fae4c89901b0", "patch": "@@ -428,7 +428,6 @@ impl TargetCfgs {\n         ))\n         .unwrap();\n \n-        let mut current = None;\n         let mut all_targets = HashSet::new();\n         let mut all_archs = HashSet::new();\n         let mut all_oses = HashSet::new();\n@@ -449,14 +448,11 @@ impl TargetCfgs {\n             }\n             all_pointer_widths.insert(format!(\"{}bit\", cfg.pointer_width));\n \n-            if target == config.target {\n-                current = Some(cfg);\n-            }\n             all_targets.insert(target.into());\n         }\n \n         Self {\n-            current: current.expect(\"current target not found\"),\n+            current: Self::get_current_target_config(config),\n             all_targets,\n             all_archs,\n             all_oses,\n@@ -467,6 +463,89 @@ impl TargetCfgs {\n             all_pointer_widths,\n         }\n     }\n+\n+    fn get_current_target_config(config: &Config) -> TargetCfg {\n+        let mut arch = None;\n+        let mut os = None;\n+        let mut env = None;\n+        let mut abi = None;\n+        let mut families = Vec::new();\n+        let mut pointer_width = None;\n+        let mut endian = None;\n+        let mut panic = None;\n+\n+        for config in\n+            rustc_output(config, &[\"--print=cfg\", \"--target\", &config.target]).trim().lines()\n+        {\n+            let (name, value) = config\n+                .split_once(\"=\\\"\")\n+                .map(|(name, value)| {\n+                    (\n+                        name,\n+                        Some(\n+                            value\n+                                .strip_suffix(\"\\\"\")\n+                                .expect(\"key-value pair should be properly quoted\"),\n+                        ),\n+                    )\n+                })\n+                .unwrap_or_else(|| (config, None));\n+\n+            match name {\n+                \"target_arch\" => {\n+                    arch = Some(value.expect(\"target_arch should be a key-value pair\").to_string());\n+                }\n+                \"target_os\" => {\n+                    os = Some(value.expect(\"target_os sould be a key-value pair\").to_string());\n+                }\n+                \"target_env\" => {\n+                    env = Some(value.expect(\"target_env should be a key-value pair\").to_string());\n+                }\n+                \"target_abi\" => {\n+                    abi = Some(value.expect(\"target_abi should be a key-value pair\").to_string());\n+                }\n+                \"target_family\" => {\n+                    families\n+                        .push(value.expect(\"target_family should be a key-value pair\").to_string());\n+                }\n+                \"target_pointer_width\" => {\n+                    pointer_width = Some(\n+                        value\n+                            .expect(\"target_pointer_width should be a key-value pair\")\n+                            .parse::<u32>()\n+                            .expect(\"target_pointer_width should be a valid u32\"),\n+                    );\n+                }\n+                \"target_endian\" => {\n+                    endian = Some(match value.expect(\"target_endian should be a key-value pair\") {\n+                        \"big\" => Endian::Big,\n+                        \"little\" => Endian::Little,\n+                        _ => panic!(\"target_endian should be either 'big' or 'little'\"),\n+                    });\n+                }\n+                \"panic\" => {\n+                    panic = Some(match value.expect(\"panic should be a key-value pair\") {\n+                        \"abort\" => PanicStrategy::Abort,\n+                        \"unwind\" => PanicStrategy::Unwind,\n+                        _ => panic!(\"panic should be either 'abort' or 'unwind'\"),\n+                    });\n+                }\n+                _ => (),\n+            }\n+        }\n+\n+        TargetCfg {\n+            arch: arch.expect(\"target configuration should specify target_arch\"),\n+            os: os.expect(\"target configuration should specify target_os\"),\n+            env: env.expect(\"target configuration should specify target_env\"),\n+            abi: abi.expect(\"target configuration should specify target_abi\"),\n+            families,\n+            pointer_width: pointer_width\n+                .expect(\"target configuration should specify target_pointer_width\"),\n+            endian: endian.expect(\"target configuration should specify target_endian\"),\n+            panic: panic.expect(\"target configuration should specify panic\"),\n+        }\n+    }\n }\n \n #[derive(Clone, Debug, serde::Deserialize)]"}]}