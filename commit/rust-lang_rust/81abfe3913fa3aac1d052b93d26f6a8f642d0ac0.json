{"sha": "81abfe3913fa3aac1d052b93d26f6a8f642d0ac0", "node_id": "C_kwDOAAsO6NoAKDgxYWJmZTM5MTNmYTNhYWMxZDA1MmI5M2QyNmY2YThmNjQyZDBhYzA", "commit": {"author": {"name": "Vincenzo Palazzo", "email": "vincenzopalazzodev@gmail.com", "date": "2022-05-14T23:28:10Z"}, "committer": {"name": "Vincenzo Palazzo", "email": "vincenzopalazzodev@gmail.com", "date": "2022-06-30T00:13:22Z"}, "message": "add blanket impl suggestion to the local traits\n\nSigned-off-by: Vincenzo Palazzo <vincenzopalazzodev@gmail.com>", "tree": {"sha": "4890c0d2b46e4e688be5ee9d83ee7dbf5371e0fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4890c0d2b46e4e688be5ee9d83ee7dbf5371e0fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81abfe3913fa3aac1d052b93d26f6a8f642d0ac0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE3eMWwQll8j3M3QQgi23CuHC4DV8FAmK86qIACgkQi23CuHC4\nDV+JfhAAuo/xLtyowURUAtmvapH0ugwDgfd7K7jzDUwW3En0ok8sVLGq6jYicMyP\nFjfv4hy32DBgfZHIfbADz0juMn4pdDP12WF/V+JQgG9s/E0Jk+9x5Q0l3QIlOPdA\ntmlgSQR25WLvPyZ+L+JrXAJnK30qplDuzXytwcYH4kndRtd4m0N+Plzt1seF73L4\nl3uX/4Qa3/wC4OBeAM6qPahe/ogYUmTCxqcqfJssXiXfp1vkiySC3IYSjpsh3S7b\naQJGvN9CEi2PW2aOk+KFon+rNs/giuxp8gXkTFWdOwLHHEm1XxWKKDKOLNGLyer9\nc4tPhhCqRlPubM1qlwz8Hv0JGgFpnu9CpZvcJsBG37azPIAtLHMyMI6fgAULzOKO\nHLxR3TtWn4mNFf8Vl7UdGtuaAaht2h1hkIp1lea7pPNtlGucY2Rw5q1xmFK7+0Sq\nU0wAj06XM2JXdIEtu35E9THZh4c6Y8n6v3sY9gNthzbtMY5sMpB59EMJth3dBZFk\nEuQrOHjzMaWq5pODtHFY7pGW63JAPZMKjQCq00eDYFyUrBqKtUxgo6jj80HY+l2k\nHjBFKJ7/nnt7wW6mN445kKYOuiMcOzHy0WhPN0jrlyyJWOeFEOIYQ7AYXtSzY8HB\nnSiZmyHSEUtIMOIHcQWohHyk8OXG2s0UPUnSW98BsDm7l1LGoHs=\n=sURH\n-----END PGP SIGNATURE-----", "payload": "tree 4890c0d2b46e4e688be5ee9d83ee7dbf5371e0fb\nparent ddcbba036aee08f0709f98a92a342a278eae5c05\nauthor Vincenzo Palazzo <vincenzopalazzodev@gmail.com> 1652570890 +0200\ncommitter Vincenzo Palazzo <vincenzopalazzodev@gmail.com> 1656548002 +0100\n\nadd blanket impl suggestion to the local traits\n\nSigned-off-by: Vincenzo Palazzo <vincenzopalazzodev@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81abfe3913fa3aac1d052b93d26f6a8f642d0ac0", "html_url": "https://github.com/rust-lang/rust/commit/81abfe3913fa3aac1d052b93d26f6a8f642d0ac0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81abfe3913fa3aac1d052b93d26f6a8f642d0ac0/comments", "author": {"login": "vincenzopalazzo", "id": 17150045, "node_id": "MDQ6VXNlcjE3MTUwMDQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17150045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vincenzopalazzo", "html_url": "https://github.com/vincenzopalazzo", "followers_url": "https://api.github.com/users/vincenzopalazzo/followers", "following_url": "https://api.github.com/users/vincenzopalazzo/following{/other_user}", "gists_url": "https://api.github.com/users/vincenzopalazzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vincenzopalazzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vincenzopalazzo/subscriptions", "organizations_url": "https://api.github.com/users/vincenzopalazzo/orgs", "repos_url": "https://api.github.com/users/vincenzopalazzo/repos", "events_url": "https://api.github.com/users/vincenzopalazzo/events{/privacy}", "received_events_url": "https://api.github.com/users/vincenzopalazzo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vincenzopalazzo", "id": 17150045, "node_id": "MDQ6VXNlcjE3MTUwMDQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17150045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vincenzopalazzo", "html_url": "https://github.com/vincenzopalazzo", "followers_url": "https://api.github.com/users/vincenzopalazzo/followers", "following_url": "https://api.github.com/users/vincenzopalazzo/following{/other_user}", "gists_url": "https://api.github.com/users/vincenzopalazzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vincenzopalazzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vincenzopalazzo/subscriptions", "organizations_url": "https://api.github.com/users/vincenzopalazzo/orgs", "repos_url": "https://api.github.com/users/vincenzopalazzo/repos", "events_url": "https://api.github.com/users/vincenzopalazzo/events{/privacy}", "received_events_url": "https://api.github.com/users/vincenzopalazzo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddcbba036aee08f0709f98a92a342a278eae5c05", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddcbba036aee08f0709f98a92a342a278eae5c05", "html_url": "https://github.com/rust-lang/rust/commit/ddcbba036aee08f0709f98a92a342a278eae5c05"}], "stats": {"total": 68, "additions": 58, "deletions": 10}, "files": [{"sha": "6ef4122a644b04343005e4f7857168fc51b73b80", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 58, "deletions": 10, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/81abfe3913fa3aac1d052b93d26f6a8f642d0ac0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81abfe3913fa3aac1d052b93d26f6a8f642d0ac0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=81abfe3913fa3aac1d052b93d26f6a8f642d0ac0", "patch": "@@ -2986,6 +2986,51 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         Some(r)\n     }\n \n+    /// make sure that we are in the condition to suggest the blanket implementation, if we are in the\n+    /// case of suggest it, use the function `err_reporter` to report the error or suggestion.\n+    fn maybe_lint_blanket_trait_impl<T: rustc_errors::EmissionGuarantee>(\n+        &self,\n+        self_ty: &hir::Ty<'_>,\n+        diagnostic: &mut DiagnosticBuilder<'_, T>,\n+    ) {\n+        let tcx = self.tcx();\n+        let parent_id = tcx.hir().get_parent_item(self_ty.hir_id);\n+        if let hir::Node::Item(hir::Item {\n+            kind:\n+                hir::ItemKind::Impl(hir::Impl {\n+                    self_ty: impl_self_typ, of_trait: Some(trait_ref), generics, ..\n+                }),\n+            ..\n+        }) = tcx.hir().get_by_def_id(parent_id) && self_ty.hir_id == impl_self_typ.hir_id\n+        {\n+            let trait_span = trait_ref.path.span;\n+            let target_span = if let Some(span) = generics.span_for_param_suggestion() {\n+                span\n+            } else {\n+                trait_span\n+            };\n+            let is_local = trait_ref.trait_def_id().map_or(false, |def_id| def_id.is_local());\n+            if is_local {\n+                let trait_name = tcx.sess.source_map().span_to_snippet(trait_span).unwrap();\n+                let self_name = tcx.sess.source_map().span_to_snippet(self_ty.span).unwrap();\n+                let blanket_msg = format!(\n+                    \"use a blanket implementation to implement {} for all types that also implement {}\",\n+                    trait_name, self_name\n+                );\n+                let blanket_sugg = vec![\n+                    (target_span, \"<T: \".to_owned()),\n+                    (trait_span.shrink_to_hi(), format!(\"{}>\", self_name)),\n+                    (self_ty.span, \"T\".to_owned()),\n+                ];\n+                diagnostic.multipart_suggestion(\n+                    blanket_msg,\n+                    blanket_sugg,\n+                    Applicability::Unspecified,\n+                );\n+            }\n+        }\n+    }\n+\n     fn maybe_lint_bare_trait(&self, self_ty: &hir::Ty<'_>, in_path: bool) {\n         let tcx = self.tcx();\n         if let hir::TyKind::TraitObject([poly_trait_ref, ..], _, TraitObjectSyntax::None) =\n@@ -3021,23 +3066,26 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             if self_ty.span.edition() >= Edition::Edition2021 {\n                 let msg = \"trait objects must include the `dyn` keyword\";\n                 let label = \"add `dyn` keyword before this trait\";\n-                rustc_errors::struct_span_err!(tcx.sess, self_ty.span, E0782, \"{}\", msg)\n-                    .multipart_suggestion_verbose(label, sugg, Applicability::MachineApplicable)\n-                    .emit();\n+                let mut diag =\n+                    rustc_errors::struct_span_err!(tcx.sess, self_ty.span, E0782, \"{}\", msg);\n+                diag.multipart_suggestion_verbose(label, sugg, Applicability::MachineApplicable);\n+                self.maybe_lint_blanket_trait_impl(&self_ty, &mut diag);\n+                diag.emit();\n             } else {\n                 let msg = \"trait objects without an explicit `dyn` are deprecated\";\n                 tcx.struct_span_lint_hir(\n                     BARE_TRAIT_OBJECTS,\n                     self_ty.hir_id,\n                     self_ty.span,\n                     |lint| {\n-                        lint.build(msg)\n-                            .multipart_suggestion_verbose(\n-                                \"use `dyn`\",\n-                                sugg,\n-                                Applicability::MachineApplicable,\n-                            )\n-                            .emit();\n+                        let mut diag = lint.build(msg);\n+                        diag.multipart_suggestion_verbose(\n+                            \"use `dyn`\",\n+                            sugg,\n+                            Applicability::MachineApplicable,\n+                        );\n+                        self.maybe_lint_blanket_trait_impl::<()>(&self_ty, &mut diag);\n+                        diag.emit();\n                     },\n                 );\n             }"}]}