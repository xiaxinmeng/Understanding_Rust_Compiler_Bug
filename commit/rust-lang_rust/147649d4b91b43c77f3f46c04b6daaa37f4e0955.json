{"sha": "147649d4b91b43c77f3f46c04b6daaa37f4e0955", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NzY0OWQ0YjkxYjQzYzc3ZjNmNDZjMDRiNmRhYWEzN2Y0ZTA5NTU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-04-08T20:50:47Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-04-08T20:50:47Z"}, "message": "Suggest changing impl parameter types to match trait\n\nThis is particularly useful for cases where arbitrary self types are\nused, like in custom `Future`s.", "tree": {"sha": "84c68d5dce9babbbc0ffb1ea92e3d131fc71eed7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84c68d5dce9babbbc0ffb1ea92e3d131fc71eed7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/147649d4b91b43c77f3f46c04b6daaa37f4e0955", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/147649d4b91b43c77f3f46c04b6daaa37f4e0955", "html_url": "https://github.com/rust-lang/rust/commit/147649d4b91b43c77f3f46c04b6daaa37f4e0955", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/147649d4b91b43c77f3f46c04b6daaa37f4e0955/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d43ede10e4cc69547d1c05831ca43c9902304573", "url": "https://api.github.com/repos/rust-lang/rust/commits/d43ede10e4cc69547d1c05831ca43c9902304573", "html_url": "https://github.com/rust-lang/rust/commit/d43ede10e4cc69547d1c05831ca43c9902304573"}], "stats": {"total": 176, "additions": 151, "deletions": 25}, "files": [{"sha": "964aa8426ea95836ec8b2692e93faf28305ccc7c", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 43, "deletions": 7, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/147649d4b91b43c77f3f46c04b6daaa37f4e0955/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147649d4b91b43c77f3f46c04b6daaa37f4e0955/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=147649d4b91b43c77f3f46c04b6daaa37f4e0955", "patch": "@@ -290,18 +290,55 @@ fn compare_predicate_entailment<'tcx>(\n                 \"method `{}` has an incompatible type for trait\",\n                 trait_m.ident\n             );\n-            if let TypeError::ArgumentMutability(_) = terr {\n-                if let Some(trait_err_span) = trait_err_span {\n-                    if let Ok(trait_err_str) = tcx.sess.source_map().span_to_snippet(trait_err_span)\n+            match &terr {\n+                TypeError::ArgumentMutability(0) | TypeError::ArgumentSorts(_, 0)\n+                    if trait_m.fn_has_self_parameter =>\n+                {\n+                    let ty = trait_sig.inputs()[0];\n+                    let sugg = match ExplicitSelf::determine(ty, |_| ty == impl_trait_ref.self_ty())\n                     {\n+                        ExplicitSelf::ByValue => \"self\".to_owned(),\n+                        ExplicitSelf::ByReference(_, hir::Mutability::Not) => \"&self\".to_owned(),\n+                        ExplicitSelf::ByReference(_, hir::Mutability::Mut) => {\n+                            \"&mut self\".to_owned()\n+                        }\n+                        _ => format!(\"self: {}\", ty),\n+                    };\n+\n+                    // When the `impl` receiver is an arbitrary self type, like `self: Box<Self>`, the\n+                    // span points only at the type `Box<Self`>, but we want to cover the whole\n+                    // argument pattern and type.\n+                    let impl_m_hir_id =\n+                        tcx.hir().local_def_id_to_hir_id(impl_m.def_id.expect_local());\n+                    let span = match tcx.hir().expect_impl_item(impl_m_hir_id).kind {\n+                        ImplItemKind::Fn(ref sig, body) => tcx\n+                            .hir()\n+                            .body_param_names(body)\n+                            .zip(sig.decl.inputs.iter())\n+                            .map(|(param, ty)| param.span.to(ty.span))\n+                            .next()\n+                            .unwrap_or(impl_err_span),\n+                        _ => bug!(\"{:?} is not a method\", impl_m),\n+                    };\n+\n+                    diag.span_suggestion(\n+                        span,\n+                        \"change the self-receiver type to match the trait\",\n+                        sugg,\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+                TypeError::ArgumentMutability(i) | TypeError::ArgumentSorts(_, i) => {\n+                    if let Some(trait_ty) = trait_sig.inputs().get(*i) {\n                         diag.span_suggestion(\n                             impl_err_span,\n-                            \"consider changing the mutability to match the trait\",\n-                            trait_err_str,\n+                            \"change the parameter type to match the trait\",\n+                            trait_ty.to_string(),\n                             Applicability::MachineApplicable,\n                         );\n                     }\n                 }\n+                _ => {}\n             }\n \n             infcx.note_type_err(\n@@ -482,8 +519,7 @@ fn compare_self_type<'tcx>(\n                 tcx.sess,\n                 impl_m_span,\n                 E0186,\n-                \"method `{}` has a `{}` declaration in the trait, but \\\n-                                            not in the impl\",\n+                \"method `{}` has a `{}` declaration in the trait, but not in the impl\",\n                 trait_m.ident,\n                 self_descr\n             );"}, {"sha": "9eb978664bfffb6af04f72179fbcceacd9edda51", "filename": "src/test/ui/compare-method/bad-self-type.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.rs?ref=147649d4b91b43c77f3f46c04b6daaa37f4e0955", "patch": "@@ -0,0 +1,23 @@\n+use std::future::Future;\n+use std::task::{Context, Poll};\n+\n+fn main() {}\n+\n+struct MyFuture {}\n+\n+impl Future for MyFuture {\n+    type Output = ();\n+    fn poll(self, _: &mut Context<'_>) -> Poll<()> {\n+    //~^ ERROR method `poll` has an incompatible type for trait\n+        todo!()\n+    }\n+}\n+\n+trait T {\n+    fn foo(self);\n+}\n+\n+impl T for MyFuture {\n+    fn foo(self: Box<Self>) {}\n+    //~^ ERROR method `foo` has an incompatible type for trait\n+}"}, {"sha": "4d85ff86df5d1599f4c65b0d872c38c434a88083", "filename": "src/test/ui/compare-method/bad-self-type.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.stderr?ref=147649d4b91b43c77f3f46c04b6daaa37f4e0955", "patch": "@@ -0,0 +1,30 @@\n+error[E0053]: method `poll` has an incompatible type for trait\n+  --> $DIR/bad-self-type.rs:10:13\n+   |\n+LL |     fn poll(self, _: &mut Context<'_>) -> Poll<()> {\n+   |             ^^^^\n+   |             |\n+   |             expected struct `Pin`, found struct `MyFuture`\n+   |             help: change the self-receiver type to match the trait: `self: Pin<&mut MyFuture>`\n+   |\n+   = note: expected fn pointer `fn(Pin<&mut MyFuture>, &mut Context<'_>) -> Poll<_>`\n+              found fn pointer `fn(MyFuture, &mut Context<'_>) -> Poll<_>`\n+\n+error[E0053]: method `foo` has an incompatible type for trait\n+  --> $DIR/bad-self-type.rs:21:18\n+   |\n+LL |     fn foo(self);\n+   |            ---- type in trait\n+...\n+LL |     fn foo(self: Box<Self>) {}\n+   |            ------^^^^^^^^^\n+   |            |     |\n+   |            |     expected struct `MyFuture`, found struct `Box`\n+   |            help: change the self-receiver type to match the trait: `self`\n+   |\n+   = note: expected fn pointer `fn(MyFuture)`\n+              found fn pointer `fn(Box<MyFuture>)`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "d581628ea48adaffbef65f307f500bbb3190350a", "filename": "src/test/ui/compare-method/reordered-type-param.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr?ref=147649d4b91b43c77f3f46c04b6daaa37f4e0955", "patch": "@@ -5,8 +5,10 @@ LL |   fn b<C:Clone,D>(&self, x: C) -> C;\n    |                             - type in trait\n ...\n LL |   fn b<F:Clone,G>(&self, _x: G) -> G { panic!() }\n-   |        -       -             ^ expected type parameter `F`, found type parameter `G`\n-   |        |       |\n+   |        -       -             ^\n+   |        |       |             |\n+   |        |       |             expected type parameter `F`, found type parameter `G`\n+   |        |       |             help: change the parameter type to match the trait: `F`\n    |        |       found type parameter\n    |        expected type parameter\n    |"}, {"sha": "d37670db08537447ae3edf31558ec295efe4560a", "filename": "src/test/ui/impl-trait/impl-generic-mismatch-ab.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr?ref=147649d4b91b43c77f3f46c04b6daaa37f4e0955", "patch": "@@ -5,8 +5,10 @@ LL |     fn foo<A: Debug>(&self, a: &A, b: &impl Debug);\n    |                                -- type in trait\n ...\n LL |     fn foo<B: Debug>(&self, a: &impl Debug, b: &B) { }\n-   |            -                   ^^^^^^^^^^^ expected type parameter `B`, found type parameter `impl Debug`\n-   |            |\n+   |            -                   ^^^^^^^^^^^\n+   |            |                   |\n+   |            |                   expected type parameter `B`, found type parameter `impl Debug`\n+   |            |                   help: change the parameter type to match the trait: `&B`\n    |            expected type parameter\n    |\n    = note: expected fn pointer `fn(&(), &B, &impl Debug)`"}, {"sha": "bea24339837a2414cb7ecf02ac6648b287b3a871", "filename": "src/test/ui/impl-trait/trait_type.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr?ref=147649d4b91b43c77f3f46c04b6daaa37f4e0955", "patch": "@@ -2,7 +2,10 @@ error[E0053]: method `fmt` has an incompatible type for trait\n   --> $DIR/trait_type.rs:7:21\n    |\n LL |    fn fmt(&self, x: &str) -> () { }\n-   |                     ^^^^ types differ in mutability\n+   |                     ^^^^\n+   |                     |\n+   |                     types differ in mutability\n+   |                     help: change the parameter type to match the trait: `&mut Formatter<'_>`\n    |\n    = note: expected fn pointer `fn(&MyType, &mut Formatter<'_>) -> Result<(), std::fmt::Error>`\n               found fn pointer `fn(&MyType, &str)`"}, {"sha": "6c3651ff1217a28381698ec173b811ac0a11aa52", "filename": "src/test/ui/issues/issue-13033.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr?ref=147649d4b91b43c77f3f46c04b6daaa37f4e0955", "patch": "@@ -8,7 +8,7 @@ LL |     fn bar(&mut self, other: &dyn Foo) {}\n    |                              ^^^^^^^^\n    |                              |\n    |                              types differ in mutability\n-   |                              help: consider changing the mutability to match the trait: `&mut dyn Foo`\n+   |                              help: change the parameter type to match the trait: `&mut dyn Foo`\n    |\n    = note: expected fn pointer `fn(&mut Baz, &mut dyn Foo)`\n               found fn pointer `fn(&mut Baz, &dyn Foo)`"}, {"sha": "6f4813ca6235b1cfb1d8a3331d530d1ff06d42f8", "filename": "src/test/ui/issues/issue-20225.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr?ref=147649d4b91b43c77f3f46c04b6daaa37f4e0955", "patch": "@@ -4,7 +4,10 @@ error[E0053]: method `call` has an incompatible type for trait\n LL | impl<'a, T> Fn<(&'a T,)> for Foo {\n    |          - this type parameter\n LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n-   |                                           ^^^^ expected `&T`, found type parameter `T`\n+   |                                           ^^^^\n+   |                                           |\n+   |                                           expected `&T`, found type parameter `T`\n+   |                                           help: change the parameter type to match the trait: `(&'a T,)`\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(&Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(&Foo, (T,))`\n@@ -15,7 +18,10 @@ error[E0053]: method `call_mut` has an incompatible type for trait\n LL | impl<'a, T> FnMut<(&'a T,)> for Foo {\n    |          - this type parameter\n LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n-   |                                                   ^^^^ expected `&T`, found type parameter `T`\n+   |                                                   ^^^^\n+   |                                                   |\n+   |                                                   expected `&T`, found type parameter `T`\n+   |                                                   help: change the parameter type to match the trait: `(&'a T,)`\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(&mut Foo, (T,))`\n@@ -27,7 +33,10 @@ LL | impl<'a, T> FnOnce<(&'a T,)> for Foo {\n    |          - this type parameter\n ...\n LL |   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n-   |                                               ^^^^ expected `&T`, found type parameter `T`\n+   |                                               ^^^^\n+   |                                               |\n+   |                                               expected `&T`, found type parameter `T`\n+   |                                               help: change the parameter type to match the trait: `(&'a T,)`\n    |\n    = note: expected fn pointer `extern \"rust-call\" fn(Foo, (&'a T,))`\n               found fn pointer `extern \"rust-call\" fn(Foo, (T,))`"}, {"sha": "c104aa30cb03fa8806275af210dc2f5b8ac1e9e1", "filename": "src/test/ui/issues/issue-35869.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr?ref=147649d4b91b43c77f3f46c04b6daaa37f4e0955", "patch": "@@ -5,7 +5,10 @@ LL |     fn foo(_: fn(u8) -> ());\n    |               ------------ type in trait\n ...\n LL |     fn foo(_: fn(u16) -> ()) {}\n-   |               ^^^^^^^^^^^^^ expected `u8`, found `u16`\n+   |               ^^^^^^^^^^^^^\n+   |               |\n+   |               expected `u8`, found `u16`\n+   |               help: change the parameter type to match the trait: `fn(u8)`\n    |\n    = note: expected fn pointer `fn(fn(u8))`\n               found fn pointer `fn(fn(u16))`\n@@ -17,7 +20,10 @@ LL |     fn bar(_: Option<u8>);\n    |               ---------- type in trait\n ...\n LL |     fn bar(_: Option<u16>) {}\n-   |               ^^^^^^^^^^^ expected `u8`, found `u16`\n+   |               ^^^^^^^^^^^\n+   |               |\n+   |               expected `u8`, found `u16`\n+   |               help: change the parameter type to match the trait: `Option<u8>`\n    |\n    = note: expected fn pointer `fn(Option<u8>)`\n               found fn pointer `fn(Option<u16>)`\n@@ -29,7 +35,10 @@ LL |     fn baz(_: (u8, u16));\n    |               --------- type in trait\n ...\n LL |     fn baz(_: (u16, u16)) {}\n-   |               ^^^^^^^^^^ expected `u8`, found `u16`\n+   |               ^^^^^^^^^^\n+   |               |\n+   |               expected `u8`, found `u16`\n+   |               help: change the parameter type to match the trait: `(u8, u16)`\n    |\n    = note: expected fn pointer `fn((u8, _))`\n               found fn pointer `fn((u16, _))`"}, {"sha": "6ce8126b9f970d64d592d3bf8a2b5c5e7754d11c", "filename": "src/test/ui/mismatched_types/E0053.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr?ref=147649d4b91b43c77f3f46c04b6daaa37f4e0955", "patch": "@@ -5,7 +5,10 @@ LL |     fn foo(x: u16);\n    |               --- type in trait\n ...\n LL |     fn foo(x: i16) { }\n-   |               ^^^ expected `u16`, found `i16`\n+   |               ^^^\n+   |               |\n+   |               expected `u16`, found `i16`\n+   |               help: change the parameter type to match the trait: `u16`\n    |\n    = note: expected fn pointer `fn(u16)`\n               found fn pointer `fn(i16)`\n@@ -20,7 +23,7 @@ LL |     fn bar(&mut self) { }\n    |            ^^^^^^^^^\n    |            |\n    |            types differ in mutability\n-   |            help: consider changing the mutability to match the trait: `&self`\n+   |            help: change the self-receiver type to match the trait: `self: &Bar`\n    |\n    = note: expected fn pointer `fn(&Bar)`\n               found fn pointer `fn(&mut Bar)`"}, {"sha": "2ac4d1c33a9b945c2891d266394963180614a88b", "filename": "src/test/ui/mismatched_types/trait-impl-fn-incompatibility.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr?ref=147649d4b91b43c77f3f46c04b6daaa37f4e0955", "patch": "@@ -5,7 +5,10 @@ LL |     fn foo(x: u16);\n    |               --- type in trait\n ...\n LL |     fn foo(x: i16) { }\n-   |               ^^^ expected `u16`, found `i16`\n+   |               ^^^\n+   |               |\n+   |               expected `u16`, found `i16`\n+   |               help: change the parameter type to match the trait: `u16`\n    |\n    = note: expected fn pointer `fn(u16)`\n               found fn pointer `fn(i16)`\n@@ -20,7 +23,7 @@ LL |     fn bar(&mut self, bar: &Bar) { }\n    |                            ^^^^\n    |                            |\n    |                            types differ in mutability\n-   |                            help: consider changing the mutability to match the trait: `&mut Bar`\n+   |                            help: change the parameter type to match the trait: `&mut Bar`\n    |\n    = note: expected fn pointer `fn(&mut Bar, &mut Bar)`\n               found fn pointer `fn(&mut Bar, &Bar)`"}, {"sha": "9be07cb1a74aff1bdf96cdeee7da4fa50f5ae170", "filename": "src/test/ui/wrong-mul-method-signature.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/147649d4b91b43c77f3f46c04b6daaa37f4e0955/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr?ref=147649d4b91b43c77f3f46c04b6daaa37f4e0955", "patch": "@@ -2,7 +2,10 @@ error[E0053]: method `mul` has an incompatible type for trait\n   --> $DIR/wrong-mul-method-signature.rs:16:21\n    |\n LL |     fn mul(self, s: &f64) -> Vec1 {\n-   |                     ^^^^ expected `f64`, found `&f64`\n+   |                     ^^^^\n+   |                     |\n+   |                     expected `f64`, found `&f64`\n+   |                     help: change the parameter type to match the trait: `f64`\n    |\n    = note: expected fn pointer `fn(Vec1, f64) -> Vec1`\n               found fn pointer `fn(Vec1, &f64) -> Vec1`\n@@ -11,7 +14,10 @@ error[E0053]: method `mul` has an incompatible type for trait\n   --> $DIR/wrong-mul-method-signature.rs:33:21\n    |\n LL |     fn mul(self, s: f64) -> Vec2 {\n-   |                     ^^^ expected struct `Vec2`, found `f64`\n+   |                     ^^^\n+   |                     |\n+   |                     expected struct `Vec2`, found `f64`\n+   |                     help: change the parameter type to match the trait: `Vec2`\n    |\n    = note: expected fn pointer `fn(Vec2, Vec2) -> f64`\n               found fn pointer `fn(Vec2, f64) -> Vec2`"}]}