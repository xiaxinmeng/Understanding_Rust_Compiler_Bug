{"sha": "5b7197af7fb379a84895084625b1eed47aa5c74f", "node_id": "C_kwDOAAsO6NoAKDViNzE5N2FmN2ZiMzc5YTg0ODk1MDg0NjI1YjFlZWQ0N2FhNWM3NGY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-21T03:51:15Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-22T18:25:41Z"}, "message": "do not mark interior mutable shared refs as dereferenceable", "tree": {"sha": "290cdef592114df2cdd63b4359793aef845bde83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/290cdef592114df2cdd63b4359793aef845bde83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b7197af7fb379a84895084625b1eed47aa5c74f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b7197af7fb379a84895084625b1eed47aa5c74f", "html_url": "https://github.com/rust-lang/rust/commit/5b7197af7fb379a84895084625b1eed47aa5c74f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b7197af7fb379a84895084625b1eed47aa5c74f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "307e80c1a64e189c5711892b4b03f0454fcefb79", "url": "https://api.github.com/repos/rust-lang/rust/commits/307e80c1a64e189c5711892b4b03f0454fcefb79", "html_url": "https://github.com/rust-lang/rust/commit/307e80c1a64e189c5711892b4b03f0454fcefb79"}], "stats": {"total": 45, "additions": 36, "deletions": 9}, "files": [{"sha": "dde55dd96554befc42d94ef9db4aab84e46530b2", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b7197af7fb379a84895084625b1eed47aa5c74f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7197af7fb379a84895084625b1eed47aa5c74f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=5b7197af7fb379a84895084625b1eed47aa5c74f", "patch": "@@ -2636,7 +2636,7 @@ where\n                             if ty.is_unpin(tcx.at(DUMMY_SP), cx.param_env()) {\n                                 PointerKind::UniqueBorrowed\n                             } else {\n-                                PointerKind::SharedMutable\n+                                PointerKind::UniqueBorrowedPinned\n                             }\n                         }\n                     }\n@@ -3255,10 +3255,13 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n                     // `Box` (`UniqueBorrowed`) are not necessarily dereferenceable\n                     // for the entire duration of the function as they can be deallocated\n-                    // at any time. Set their valid size to 0.\n+                    // at any time. Same for shared mutable references. If LLVM had a\n+                    // way to say \"dereferenceable on entry\" we could use it here.\n                     attrs.pointee_size = match kind {\n-                        PointerKind::UniqueOwned => Size::ZERO,\n-                        _ => pointee.size,\n+                        PointerKind::UniqueBorrowed\n+                        | PointerKind::UniqueBorrowedPinned\n+                        | PointerKind::Frozen => pointee.size,\n+                        PointerKind::SharedMutable | PointerKind::UniqueOwned => Size::ZERO,\n                     };\n \n                     // `Box`, `&T`, and `&mut T` cannot be undef.\n@@ -3285,7 +3288,9 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     // or not to actually emit the attribute. It can also be controlled with the\n                     // `-Zmutable-noalias` debugging option.\n                     let no_alias = match kind {\n-                        PointerKind::SharedMutable | PointerKind::UniqueBorrowed => false,\n+                        PointerKind::SharedMutable\n+                        | PointerKind::UniqueBorrowed\n+                        | PointerKind::UniqueBorrowedPinned => false,\n                         PointerKind::UniqueOwned => noalias_for_box,\n                         PointerKind::Frozen => !is_return,\n                     };"}, {"sha": "b35502d9ee42b70e7a0364e226e5b2be71d859e4", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b7197af7fb379a84895084625b1eed47aa5c74f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7197af7fb379a84895084625b1eed47aa5c74f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=5b7197af7fb379a84895084625b1eed47aa5c74f", "patch": "@@ -1352,13 +1352,17 @@ pub enum PointerKind {\n     /// Most general case, we know no restrictions to tell LLVM.\n     SharedMutable,\n \n-    /// `&T` where `T` contains no `UnsafeCell`, is `noalias` and `readonly`.\n+    /// `&T` where `T` contains no `UnsafeCell`, is `dereferenceable`, `noalias` and `readonly`.\n     Frozen,\n \n-    /// `&mut T` which is `noalias` but not `readonly`.\n+    /// `&mut T` which is `dereferenceable` and `noalias` but not `readonly`.\n     UniqueBorrowed,\n \n-    /// `Box<T>`, unlike `UniqueBorrowed`, it also has `noalias` on returns.\n+    /// `&mut !Unpin`, which is `dereferenceable` but neither `noalias` nor `readonly`.\n+    UniqueBorrowedPinned,\n+\n+    /// `Box<T>`, which is `noalias` (even on return types, unlike the above) but neither `readonly`\n+    /// nor `dereferenceable`.\n     UniqueOwned,\n }\n "}, {"sha": "dda139be6fcae4f6d09143fb677ebd059e9514a7", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b7197af7fb379a84895084625b1eed47aa5c74f/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7197af7fb379a84895084625b1eed47aa5c74f/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=5b7197af7fb379a84895084625b1eed47aa5c74f", "patch": "@@ -5,6 +5,7 @@\n \n use std::mem::MaybeUninit;\n use std::num::NonZeroU64;\n+use std::marker::PhantomPinned;\n \n pub struct S {\n   _field: [i32; 8],\n@@ -14,6 +15,11 @@ pub struct UnsafeInner {\n   _field: std::cell::UnsafeCell<i16>,\n }\n \n+pub struct NotUnpin {\n+  _field: i32,\n+  _marker: PhantomPinned,\n+}\n+\n pub enum MyBool {\n   True,\n   False,\n@@ -91,7 +97,7 @@ pub fn static_borrow(_: &'static i32) {\n pub fn named_borrow<'r>(_: &'r i32) {\n }\n \n-// CHECK: @unsafe_borrow({{i16\\*|ptr}} noundef align 2 dereferenceable(2) %_1)\n+// CHECK: @unsafe_borrow({{i16\\*|ptr}} noundef nonnull align 2 %_1)\n // unsafe interior means this isn't actually readonly and there may be aliases ...\n #[no_mangle]\n pub fn unsafe_borrow(_: &UnsafeInner) {\n@@ -109,6 +115,18 @@ pub fn mutable_unsafe_borrow(_: &mut UnsafeInner) {\n pub fn mutable_borrow(_: &mut i32) {\n }\n \n+#[no_mangle]\n+// CHECK: @mutable_notunpin_borrow({{i32\\*|ptr}} noundef align 4 dereferenceable(4) %_1)\n+// This one is *not* `noalias` because it might be self-referential.\n+pub fn mutable_notunpin_borrow(_: &mut NotUnpin) {\n+}\n+\n+// CHECK: @notunpin_borrow({{i32\\*|ptr}} noalias noundef readonly align 4 dereferenceable(4) %_1)\n+// But `&NotUnpin` behaves perfectly normal.\n+#[no_mangle]\n+pub fn notunpin_borrow(_: &NotUnpin) {\n+}\n+\n // CHECK: @indirect_struct({{%S\\*|ptr}} noalias nocapture noundef dereferenceable(32) %_1)\n #[no_mangle]\n pub fn indirect_struct(_: S) {"}]}