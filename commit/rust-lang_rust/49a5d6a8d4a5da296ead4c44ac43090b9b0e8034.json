{"sha": "49a5d6a8d4a5da296ead4c44ac43090b9b0e8034", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5YTVkNmE4ZDRhNWRhMjk2ZWFkNGM0NGFjNDMwOTBiOWIwZTgwMzQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-18T19:20:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-18T19:20:51Z"}, "message": "Merge #7698\n\n7698: Add new LSP extension for workspace symbol lookup r=matklad a=alcroito\n\nAs well as all symbol types (functions, modules).\r\n\r\nRemove outdated documentation regarding symbol lookup filtering.\r\n\r\nCloses #4881\n\nCo-authored-by: alcroito <placinta@gmail.com>", "tree": {"sha": "ca54a00fe5e9a447ab100ad36905004f0629f655", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca54a00fe5e9a447ab100ad36905004f0629f655"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgpBOTCRBK7hj4Ov3rIwAAkigIALLJJ+i12HGVc2Xji5Q9xxWG\nvnemZufK7GsNLQBgEeGeGm+uLyARNfMxxjihsCiLe9nYmB+xoephdsk6pVkIztrK\nTl+CgjwLPPMxZtxaM9JUBAlOyVAtT0HtvPi0lEdqY3BTVOgBcPTm7nkh+BkhYp4a\nCxy+ol/pbZaY7UiHvHzgFDXd+Ks965R2C4IoULILYX4Us46q0Qf3oVI9WF4OGT0L\nb+rT7Tvg8StFi8TPoZWuDLApYeuqJk6J2OACasewAh2HglDeRiwayym65uXhs2oO\nH8gUoYRkdharcY+LHhht0n49dahy34BRH49T9L9ddav5kVC3g90NT1Xu2DPAaSc=\n=3DqA\n-----END PGP SIGNATURE-----\n", "payload": "tree ca54a00fe5e9a447ab100ad36905004f0629f655\nparent 16b03d21dcbac48133fa9be1051c78211e83bbe8\nparent 1f7d2a6c2297de4dedfb42b739e880ad2dd7d5d5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621365651 +0000\ncommitter GitHub <noreply@github.com> 1621365651 +0000\n\nMerge #7698\n\n7698: Add new LSP extension for workspace symbol lookup r=matklad a=alcroito\n\nAs well as all symbol types (functions, modules).\r\n\r\nRemove outdated documentation regarding symbol lookup filtering.\r\n\r\nCloses #4881\n\nCo-authored-by: alcroito <placinta@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034", "html_url": "https://github.com/rust-lang/rust/commit/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16b03d21dcbac48133fa9be1051c78211e83bbe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/16b03d21dcbac48133fa9be1051c78211e83bbe8", "html_url": "https://github.com/rust-lang/rust/commit/16b03d21dcbac48133fa9be1051c78211e83bbe8"}, {"sha": "1f7d2a6c2297de4dedfb42b739e880ad2dd7d5d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f7d2a6c2297de4dedfb42b739e880ad2dd7d5d5", "html_url": "https://github.com/rust-lang/rust/commit/1f7d2a6c2297de4dedfb42b739e880ad2dd7d5d5"}], "stats": {"total": 228, "additions": 220, "deletions": 8}, "files": [{"sha": "0f5c4abc4b9946fd1d4e96a328a0a757c0549388", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=49a5d6a8d4a5da296ead4c44ac43090b9b0e8034", "patch": "@@ -161,6 +161,11 @@ impl<DB: ParallelDatabase> Clone for Snap<salsa::Snapshot<DB>> {\n // That is, `#` switches from \"types\" to all symbols, `*` switches from the current\n // workspace to dependencies.\n //\n+// Note that filtering does not currently work in VSCode due to the editor never\n+// sending the special symbols to the language server. Instead, you can configure\n+// the filtering via the `rust-analyzer.workspace.symbol.search.scope` and\n+// `rust-analyzer.workspace.symbol.search.kind` settings.\n+//\n // |===\n // | Editor  | Shortcut\n //"}, {"sha": "339014fd3188f1c5731772feafc888a126804086", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=49a5d6a8d4a5da296ead4c44ac43090b9b0e8034", "patch": "@@ -24,7 +24,8 @@ use vfs::AbsPathBuf;\n \n use crate::{\n     caps::completion_item_edit_resolve, diagnostics::DiagnosticsMapConfig,\n-    line_index::OffsetEncoding, lsp_ext::supports_utf8,\n+    line_index::OffsetEncoding, lsp_ext::supports_utf8, lsp_ext::WorkspaceSymbolSearchKind,\n+    lsp_ext::WorkspaceSymbolSearchScope,\n };\n \n // Defines the server-side configuration of the rust-analyzer. We generate\n@@ -215,6 +216,11 @@ config_data! {\n         /// Advanced option, fully override the command rust-analyzer uses for\n         /// formatting.\n         rustfmt_overrideCommand: Option<Vec<String>> = \"null\",\n+\n+        /// Workspace symbol search scope.\n+        workspace_symbol_search_scope: WorskpaceSymbolSearchScopeDef = \"\\\"workspace\\\"\",\n+        /// Workspace symbol search kind.\n+        workspace_symbol_search_kind: WorskpaceSymbolSearchKindDef = \"\\\"only_types\\\"\",\n     }\n }\n \n@@ -309,6 +315,15 @@ pub struct RunnablesConfig {\n     pub cargo_extra_args: Vec<String>,\n }\n \n+/// Configuration for workspace symbol search requests.\n+#[derive(Debug, Clone)]\n+pub struct WorkspaceSymbolConfig {\n+    /// In what scope should the symbol be searched in.\n+    pub search_scope: WorkspaceSymbolSearchScope,\n+    /// What kind of symbol is being search for.\n+    pub search_kind: WorkspaceSymbolSearchKind,\n+}\n+\n impl Config {\n     pub fn new(root_path: AbsPathBuf, caps: ClientCapabilities) -> Self {\n         Config { caps, data: ConfigData::default(), discovered_projects: None, root_path }\n@@ -687,6 +702,22 @@ impl Config {\n             .contains(&MarkupKind::Markdown),\n         }\n     }\n+\n+    pub fn workspace_symbol(&self) -> WorkspaceSymbolConfig {\n+        WorkspaceSymbolConfig {\n+            search_scope: match self.data.workspace_symbol_search_scope {\n+                WorskpaceSymbolSearchScopeDef::Workspace => WorkspaceSymbolSearchScope::Workspace,\n+                WorskpaceSymbolSearchScopeDef::WorkspaceAndDependencies => {\n+                    WorkspaceSymbolSearchScope::WorkspaceAndDependencies\n+                }\n+            },\n+            search_kind: match self.data.workspace_symbol_search_kind {\n+                WorskpaceSymbolSearchKindDef::OnlyTypes => WorkspaceSymbolSearchKind::OnlyTypes,\n+                WorskpaceSymbolSearchKindDef::AllSymbols => WorkspaceSymbolSearchKind::AllSymbols,\n+            },\n+        }\n+    }\n+\n     pub fn semantic_tokens_refresh(&self) -> bool {\n         try_or!(self.caps.workspace.as_ref()?.semantic_tokens.as_ref()?.refresh_support?, false)\n     }\n@@ -733,6 +764,20 @@ enum ImportPrefixDef {\n     ByCrate,\n }\n \n+#[derive(Deserialize, Debug, Clone)]\n+#[serde(rename_all = \"snake_case\")]\n+enum WorskpaceSymbolSearchScopeDef {\n+    Workspace,\n+    WorkspaceAndDependencies,\n+}\n+\n+#[derive(Deserialize, Debug, Clone)]\n+#[serde(rename_all = \"snake_case\")]\n+enum WorskpaceSymbolSearchKindDef {\n+    OnlyTypes,\n+    AllSymbols,\n+}\n+\n macro_rules! _config_data {\n     (struct $name:ident {\n         $(\n@@ -903,6 +948,22 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             \"type\": \"array\",\n             \"items\": { \"type\": [\"string\", \"object\"] },\n         },\n+        \"WorskpaceSymbolSearchScopeDef\" => set! {\n+            \"type\": \"string\",\n+            \"enum\": [\"workspace\", \"workspace_and_dependencies\"],\n+            \"enumDescriptions\": [\n+                \"Search in current workspace only\",\n+                \"Search in current workspace and dependencies\"\n+            ],\n+        },\n+        \"WorskpaceSymbolSearchKindDef\" => set! {\n+            \"type\": \"string\",\n+            \"enum\": [\"only_types\", \"all_symbols\"],\n+            \"enumDescriptions\": [\n+                \"Search for types only\",\n+                \"Search for all symbols kinds\"\n+            ],\n+        },\n         _ => panic!(\"{}: {}\", ty, default),\n     }\n "}, {"sha": "51041d7a0c39da311e5c49d129dd4749219b79a1", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=49a5d6a8d4a5da296ead4c44ac43090b9b0e8034", "patch": "@@ -38,7 +38,7 @@ use crate::{\n     from_proto,\n     global_state::{GlobalState, GlobalStateSnapshot},\n     line_index::LineEndings,\n-    lsp_ext::{self, InlayHint, InlayHintsParams},\n+    lsp_ext::{self, InlayHint, InlayHintsParams, WorkspaceSymbolParams},\n     lsp_utils::all_edits_are_disjoint,\n     to_proto, LspError, Result,\n };\n@@ -380,11 +380,12 @@ pub(crate) fn handle_document_symbol(\n \n pub(crate) fn handle_workspace_symbol(\n     snap: GlobalStateSnapshot,\n-    params: lsp_types::WorkspaceSymbolParams,\n+    params: WorkspaceSymbolParams,\n ) -> Result<Option<Vec<SymbolInformation>>> {\n     let _p = profile::span(\"handle_workspace_symbol\");\n-    let all_symbols = params.query.contains('#');\n-    let libs = params.query.contains('*');\n+\n+    let (all_symbols, libs) = decide_search_scope_and_kind(&params, &snap);\n+\n     let query = {\n         let query: String = params.query.chars().filter(|&c| c != '#' && c != '*').collect();\n         let mut q = Query::new(query);\n@@ -406,6 +407,45 @@ pub(crate) fn handle_workspace_symbol(\n \n     return Ok(Some(res));\n \n+    fn decide_search_scope_and_kind(\n+        params: &WorkspaceSymbolParams,\n+        snap: &GlobalStateSnapshot,\n+    ) -> (bool, bool) {\n+        // Support old-style parsing of markers in the query.\n+        let mut all_symbols = params.query.contains('#');\n+        let mut libs = params.query.contains('*');\n+\n+        let config = snap.config.workspace_symbol();\n+\n+        // If no explicit marker was set, check request params. If that's also empty\n+        // use global config.\n+        if !all_symbols {\n+            let search_kind = if let Some(ref search_kind) = params.search_kind {\n+                search_kind\n+            } else {\n+                &config.search_kind\n+            };\n+            all_symbols = match search_kind {\n+                lsp_ext::WorkspaceSymbolSearchKind::OnlyTypes => false,\n+                lsp_ext::WorkspaceSymbolSearchKind::AllSymbols => true,\n+            }\n+        }\n+\n+        if !libs {\n+            let search_scope = if let Some(ref search_scope) = params.search_scope {\n+                search_scope\n+            } else {\n+                &config.search_scope\n+            };\n+            libs = match search_scope {\n+                lsp_ext::WorkspaceSymbolSearchScope::Workspace => false,\n+                lsp_ext::WorkspaceSymbolSearchScope::WorkspaceAndDependencies => true,\n+            }\n+        }\n+\n+        (all_symbols, libs)\n+    }\n+\n     fn exec_query(snap: &GlobalStateSnapshot, query: Query) -> Result<Vec<SymbolInformation>> {\n         let mut res = Vec::new();\n         for nav in snap.analysis.symbol_search(query)? {"}, {"sha": "34b53a7a808d480fcde32ca8c9afabf9b2dc75c6", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=49a5d6a8d4a5da296ead4c44ac43090b9b0e8034", "patch": "@@ -4,7 +4,8 @@ use std::{collections::HashMap, path::PathBuf};\n \n use lsp_types::request::Request;\n use lsp_types::{\n-    notification::Notification, CodeActionKind, Position, Range, TextDocumentIdentifier,\n+    notification::Notification, CodeActionKind, PartialResultParams, Position, Range,\n+    TextDocumentIdentifier, WorkDoneProgressParams,\n };\n use serde::{Deserialize, Serialize};\n \n@@ -438,3 +439,42 @@ pub enum MoveItemDirection {\n     Up,\n     Down,\n }\n+\n+#[derive(Debug)]\n+pub enum WorkspaceSymbol {}\n+\n+impl Request for WorkspaceSymbol {\n+    type Params = WorkspaceSymbolParams;\n+    type Result = Option<Vec<lsp_types::SymbolInformation>>;\n+    const METHOD: &'static str = \"workspace/symbol\";\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Clone, Default, Deserialize, Serialize)]\n+pub struct WorkspaceSymbolParams {\n+    #[serde(flatten)]\n+    pub partial_result_params: PartialResultParams,\n+\n+    #[serde(flatten)]\n+    pub work_done_progress_params: WorkDoneProgressParams,\n+\n+    /// A non-empty query string\n+    pub query: String,\n+\n+    pub search_scope: Option<WorkspaceSymbolSearchScope>,\n+\n+    pub search_kind: Option<WorkspaceSymbolSearchKind>,\n+}\n+\n+#[derive(Serialize, Deserialize, Debug, Clone, Eq, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub enum WorkspaceSymbolSearchScope {\n+    Workspace,\n+    WorkspaceAndDependencies,\n+}\n+\n+#[derive(Serialize, Deserialize, Debug, Clone, Eq, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub enum WorkspaceSymbolSearchKind {\n+    OnlyTypes,\n+    AllSymbols,\n+}"}, {"sha": "4e07916113d54587abe37a904bd14d16b5aab030", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=49a5d6a8d4a5da296ead4c44ac43090b9b0e8034", "patch": "@@ -525,9 +525,9 @@ impl GlobalState {\n             .on::<lsp_ext::ExternalDocs>(handlers::handle_open_docs)\n             .on::<lsp_ext::OpenCargoToml>(handlers::handle_open_cargo_toml)\n             .on::<lsp_ext::MoveItem>(handlers::handle_move_item)\n+            .on::<lsp_ext::WorkspaceSymbol>(handlers::handle_workspace_symbol)\n             .on::<lsp_types::request::OnTypeFormatting>(handlers::handle_on_type_formatting)\n             .on::<lsp_types::request::DocumentSymbolRequest>(handlers::handle_document_symbol)\n-            .on::<lsp_types::request::WorkspaceSymbol>(handlers::handle_workspace_symbol)\n             .on::<lsp_types::request::GotoDefinition>(handlers::handle_goto_definition)\n             .on::<lsp_types::request::GotoImplementation>(handlers::handle_goto_implementation)\n             .on::<lsp_types::request::GotoTypeDefinition>(handlers::handle_goto_type_definition)"}, {"sha": "2d3787d0fe0d9507f3fc3c4066b134361222d45b", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=49a5d6a8d4a5da296ead4c44ac43090b9b0e8034", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 6e57fc1b345b00e9\n+lsp_ext.rs hash: 10a8988e6893e6b2\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:\n@@ -650,3 +650,33 @@ export const enum Direction {\n     Down = \"Down\"\n }\n ```\n+\n+## Lookup workspace symbol search scope and kind\n+\n+**Issue:** https://github.com/rust-analyzer/rust-analyzer/pull/7698\n+\n+This request is sent from client to server to search for workspace symbols filtered by an\n+optional search scope and / or an optional symbol kind.\n+\n+**Method:** `workspace/symbol`\n+\n+**Request:** `WorkspaceSymbolParams`\n+\n+**Response:** `SymbolInformation[] | null`\n+\n+```typescript\n+interface lsp_ext.WorkspaceSymbolParams extends WorkspaceSymbolParams {\n+    searchScope?: WorkspaceSymbolSearchScope;\n+    searchKind?: WorkspaceSymbolSearchKind;\n+}\n+\n+const enum WorkspaceSymbolSearchScope {\n+    Workspace = \"Workspace\",\n+    WorkspaceAndDependencies = \"WorkspaceAndDependencies\"\n+}\n+\n+const enum WorkspaceSymbolSearchKind {\n+    OnlyTypes = \"OnlyTypes\",\n+    AllSymbols = \"AllSymbols\"\n+}\n+```"}, {"sha": "b324118875e2aeb2e5a3dbff18707de6977f29cc", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=49a5d6a8d4a5da296ead4c44ac43090b9b0e8034", "patch": "@@ -341,3 +341,13 @@ Additional arguments to `rustfmt`.\n Advanced option, fully override the command rust-analyzer uses for\n formatting.\n --\n+[[rust-analyzer.workspace.symbol.search.scope]]rust-analyzer.workspace.symbol.search.scope (default: `\"workspace\"`)::\n++\n+--\n+Workspace symbol search scope.\n+--\n+[[rust-analyzer.workspace.symbol.search.kind]]rust-analyzer.workspace.symbol.search.kind (default: `\"only_types\"`)::\n++\n+--\n+Workspace symbol search kind.\n+--"}, {"sha": "99223c4e8c9403ff2cd4cf09a2c7c0710cf4a0d3", "filename": "editors/code/package.json", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=49a5d6a8d4a5da296ead4c44ac43090b9b0e8034", "patch": "@@ -783,6 +783,32 @@\n                         \"type\": \"string\"\n                     }\n                 },\n+                \"rust-analyzer.workspace.symbol.search.scope\": {\n+                    \"markdownDescription\": \"Workspace symbol search scope.\",\n+                    \"default\": \"workspace\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"workspace\",\n+                        \"workspace_and_dependencies\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Search in current workspace only\",\n+                        \"Search in current workspace and dependencies\"\n+                    ]\n+                },\n+                \"rust-analyzer.workspace.symbol.search.kind\": {\n+                    \"markdownDescription\": \"Workspace symbol search kind.\",\n+                    \"default\": \"only_types\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"only_types\",\n+                        \"all_symbols\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Search for types only\",\n+                        \"Search for all symbols kinds\"\n+                    ]\n+                },\n                 \"$generated-end\": false\n             }\n         },"}]}