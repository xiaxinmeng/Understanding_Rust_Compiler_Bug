{"sha": "89eb9951958dc2cd652645cea5badf4bb9edc6f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZWI5OTUxOTU4ZGMyY2Q2NTI2NDVjZWE1YmFkZjRiYjllZGM2Zjk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-06-15T02:40:11Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-28T14:44:16Z"}, "message": "librustc: Fix merge fallout.", "tree": {"sha": "dc234db5e74b23cec4080026d8c316d88849e638", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc234db5e74b23cec4080026d8c316d88849e638"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89eb9951958dc2cd652645cea5badf4bb9edc6f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89eb9951958dc2cd652645cea5badf4bb9edc6f9", "html_url": "https://github.com/rust-lang/rust/commit/89eb9951958dc2cd652645cea5badf4bb9edc6f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89eb9951958dc2cd652645cea5badf4bb9edc6f9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03ab6351ccc7b0e2b6102f88eddc0bbe84f2abc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/03ab6351ccc7b0e2b6102f88eddc0bbe84f2abc0", "html_url": "https://github.com/rust-lang/rust/commit/03ab6351ccc7b0e2b6102f88eddc0bbe84f2abc0"}], "stats": {"total": 71, "additions": 34, "deletions": 37}, "files": [{"sha": "5ff52b1859ad3ae3bb80b81ad72eb5e29908ee43", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=89eb9951958dc2cd652645cea5badf4bb9edc6f9", "patch": "@@ -1155,7 +1155,7 @@ fn encode_info_for_items(ecx: &EncodeContext,\n                                ast_map::path_to_str(\n                                 *pt,\n                                 token::get_ident_interner()),\n-                               *token::ident_to_str(&ni.ident));\n+                                token::ident_to_str(&ni.ident));\n \n                         let mut ebml_w = copy ebml_w;\n                         // See above"}, {"sha": "106c1d85cd77f68ecb7eaa777ab9ec082432d34f", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=89eb9951958dc2cd652645cea5badf4bb9edc6f9", "patch": "@@ -109,7 +109,7 @@ impl ReachableContext {\n         let reachable_symbols = self.reachable_symbols;\n         let worklist = self.worklist;\n         let visitor = visit::mk_vt(@Visitor {\n-            visit_item: |item, _, visitor| {\n+            visit_item: |item, (_, visitor)| {\n                 match item.node {\n                     item_fn(*) => {\n                         reachable_symbols.insert(item.id);\n@@ -184,13 +184,13 @@ impl ReachableContext {\n                 }\n \n                 if item.vis == public {\n-                    visit::visit_item(item, (), visitor)\n+                    visit::visit_item(item, ((), visitor))\n                 }\n             },\n             .. *visit::default_visitor()\n         });\n \n-        visit::visit_crate(crate, (), visitor)\n+        visit::visit_crate(crate, ((), visitor))\n     }\n \n     // Returns true if the given def ID represents a local item that is\n@@ -256,7 +256,7 @@ impl ReachableContext {\n         let (worklist, method_map) = (self.worklist, self.method_map);\n         let (tcx, reachable_symbols) = (self.tcx, self.reachable_symbols);\n         visit::mk_vt(@visit::Visitor {\n-            visit_expr: |expr, _, visitor| {\n+            visit_expr: |expr, (_, visitor)| {\n                 match expr.node {\n                     expr_path(_) => {\n                         let def = match tcx.def_map.find(&expr.id) {\n@@ -300,7 +300,7 @@ impl ReachableContext {\n                     _ => {}\n                 }\n \n-                visit::visit_expr(expr, (), visitor)\n+                visit::visit_expr(expr, ((), visitor))\n             },\n             ..*visit::default_visitor()\n         })\n@@ -325,7 +325,7 @@ impl ReachableContext {\n                 Some(&ast_map::node_item(item, _)) => {\n                     match item.node {\n                         item_fn(_, _, _, _, ref search_block) => {\n-                            visit::visit_block(search_block, (), visitor)\n+                            visit::visit_block(search_block, ((), visitor))\n                         }\n                         _ => {\n                             self.tcx.sess.span_bug(item.span,\n@@ -342,12 +342,12 @@ impl ReachableContext {\n                                                     worklist?!\")\n                         }\n                         provided(ref method) => {\n-                            visit::visit_block(&method.body, (), visitor)\n+                            visit::visit_block(&method.body, ((), visitor))\n                         }\n                     }\n                 }\n                 Some(&ast_map::node_method(ref method, _, _)) => {\n-                    visit::visit_block(&method.body, (), visitor)\n+                    visit::visit_block(&method.body, ((), visitor))\n                 }\n                 Some(_) => {\n                     let ident_interner = token::get_ident_interner();"}, {"sha": "7cf13c671b219600ddf65ee530db8297184811d6", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=89eb9951958dc2cd652645cea5badf4bb9edc6f9", "patch": "@@ -1299,7 +1299,7 @@ impl Resolver {\n             }\n \n             item_impl(_, Some(_), ty, ref methods) => {\n-                visit_item(item, parent, visitor);\n+                visit_item(item, (parent, visitor));\n             }\n \n             item_trait(_, _, ref methods) => {\n@@ -1349,7 +1349,7 @@ impl Resolver {\n                     match ty_m.explicit_self.node {\n                         sty_static => {}\n                         _ => {\n-                            method_names.insert(ident);\n+                            method_names.insert(ident, ());\n                         }\n                     }\n                 }\n@@ -2054,7 +2054,7 @@ impl Resolver {\n             } else {\n                 result.push_str(\"::\")\n             }\n-            result.push_str(*self.session.str_of(*ident));\n+            result.push_str(self.session.str_of(*ident));\n         };\n         return result;\n     }"}, {"sha": "a1d1b737f31f2fc88ef4da554d7cbd693731227d", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=89eb9951958dc2cd652645cea5badf4bb9edc6f9", "patch": "@@ -98,7 +98,7 @@ pub fn trans_inline_asm(bcx: block, ia: &ast::inline_asm) -> block {\n     if !ia.clobbers.is_empty() && !clobbers.is_empty() {\n         clobbers = fmt!(\"%s,%s\", ia.clobbers, clobbers);\n     } else {\n-        clobbers.push_str(*ia.clobbers);\n+        clobbers.push_str(ia.clobbers);\n     };\n \n     // Add the clobbers to our constraints list"}, {"sha": "661b19480e058ce1b44c3003616e01ebf1a5c0c5", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=89eb9951958dc2cd652645cea5badf4bb9edc6f9", "patch": "@@ -2890,7 +2890,7 @@ pub fn trans_crate(sess: session::Session,\n                    emap2: resolve::ExportMap2,\n                    reachable_map: @mut HashSet<ast::node_id>,\n                    maps: astencode::Maps)\n-                   -> (ContextRef, ModuleRef, LinkMeta) {\n+                   -> (ModuleRef, LinkMeta) {\n \n     let mut symbol_hasher = hash::default_state();\n     let link_meta = link::build_link_meta(sess, crate, output, &mut symbol_hasher);"}, {"sha": "04bce4c02a81fa232c850cb15f66f7e26b420169", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=89eb9951958dc2cd652645cea5badf4bb9edc6f9", "patch": "@@ -1046,7 +1046,7 @@ pub fn path_str(sess: session::Session, p: &[path_elt]) -> ~str {\n                 } else {\n                     r.push_str(\"::\")\n                 }\n-                r.push_str(*sess.str_of(s));\n+                r.push_str(sess.str_of(s));\n             }\n         }\n     }"}, {"sha": "d224d182950d3e5971b0c7dd65af70e721e360d9", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=89eb9951958dc2cd652645cea5badf4bb9edc6f9", "patch": "@@ -799,9 +799,8 @@ impl FnCtxt {\n         match self.inh.node_types.find(&ex.id) {\n             Some(&t) => t,\n             None => {\n-                self.tcx().sess.bug(\n-                    fmt!(\"no type for %s in fcx %s\",\n-                         self.expr_to_str(ex), self.tag()));\n+                self.tcx().sess.bug(fmt!(\"no type for expr in fcx %s\",\n+                                         self.tag()));\n             }\n         }\n     }\n@@ -1141,7 +1140,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                                expr: @ast::expr,\n                                expected: Option<ty::t>,\n                                unifier: &fn()) {\n-    debug!(\">> typechecking %s\", fcx.expr_to_str(expr));\n+    debug!(\">> typechecking\");\n \n     fn check_method_argument_types(\n         fcx: @mut FnCtxt,\n@@ -1730,8 +1729,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n             ty::mk_closure(tcx, fn_ty_copy)\n         };\n \n-        debug!(\"check_expr_fn_with_unifier %s fty=%s\",\n-               fcx.expr_to_str(expr),\n+        debug!(\"check_expr_fn_with_unifier fty=%s\",\n                fcx.infcx().ty_to_str(fty));\n \n         fcx.write_ty(expr.id, fty);"}, {"sha": "df81ebd48aa235286fff10698e65f6d01e4fb1c1", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=89eb9951958dc2cd652645cea5badf4bb9edc6f9", "patch": "@@ -230,7 +230,7 @@ fn constrain_bindings_in_pat(pat: @ast::pat, rcx: @mut Rcx) {\n }\n \n fn visit_expr(expr: @ast::expr, (rcx, v): (@mut Rcx, rvt)) {\n-    debug!(\"regionck::visit_expr(e=%s)\", rcx.fcx.expr_to_str(expr));\n+    debug!(\"regionck::visit_expr(e=?)\");\n \n     let has_method_map = rcx.fcx.inh.method_map.contains_key(&expr.id);\n \n@@ -520,8 +520,7 @@ fn constrain_derefs(rcx: @mut Rcx,\n     let tcx = rcx.fcx.tcx();\n     let r_deref_expr = ty::re_scope(deref_expr.id);\n     for uint::range(0, derefs) |i| {\n-        debug!(\"constrain_derefs(deref_expr=%s, derefd_ty=%s, derefs=%?/%?\",\n-               rcx.fcx.expr_to_str(deref_expr),\n+        debug!(\"constrain_derefs(deref_expr=?, derefd_ty=%s, derefs=%?/%?\",\n                rcx.fcx.infcx().ty_to_str(derefd_ty),\n                i, derefs);\n \n@@ -576,8 +575,7 @@ fn constrain_index(rcx: @mut Rcx,\n \n     let tcx = rcx.fcx.tcx();\n \n-    debug!(\"constrain_index(index_expr=%s, indexed_ty=%s\",\n-           rcx.fcx.expr_to_str(index_expr),\n+    debug!(\"constrain_index(index_expr=?, indexed_ty=%s\",\n            rcx.fcx.infcx().ty_to_str(indexed_ty));\n \n     let r_index_expr = ty::re_scope(index_expr.id);\n@@ -808,7 +806,7 @@ pub mod guarantor {\n          * to the lifetime of its guarantor (if any).\n          */\n \n-        debug!(\"guarantor::for_addr_of(base=%s)\", rcx.fcx.expr_to_str(base));\n+        debug!(\"guarantor::for_addr_of(base=?)\");\n \n         let guarantor = guarantor(rcx, base);\n         link(rcx, expr.span, expr.id, guarantor);\n@@ -842,8 +840,7 @@ pub mod guarantor {\n          * region pointers.\n          */\n \n-        debug!(\"guarantor::for_autoref(expr=%s, autoref=%?)\",\n-               rcx.fcx.expr_to_str(expr), autoref);\n+        debug!(\"guarantor::for_autoref(autoref=%?)\", autoref);\n \n         let mut expr_ct = categorize_unadjusted(rcx, expr);\n         debug!(\"    unadjusted cat=%?\", expr_ct.cat);\n@@ -970,7 +967,7 @@ pub mod guarantor {\n          * `&expr`).\n          */\n \n-        debug!(\"guarantor(expr=%s)\", rcx.fcx.expr_to_str(expr));\n+        debug!(\"guarantor()\");\n         match expr.node {\n             ast::expr_unary(_, ast::deref, b) => {\n                 let cat = categorize(rcx, b);\n@@ -1034,7 +1031,7 @@ pub mod guarantor {\n     }\n \n     fn categorize(rcx: @mut Rcx, expr: @ast::expr) -> ExprCategorization {\n-        debug!(\"categorize(expr=%s)\", rcx.fcx.expr_to_str(expr));\n+        debug!(\"categorize()\");\n \n         let mut expr_ct = categorize_unadjusted(rcx, expr);\n         debug!(\"before adjustments, cat=%?\", expr_ct.cat);\n@@ -1086,7 +1083,7 @@ pub mod guarantor {\n     fn categorize_unadjusted(rcx: @mut Rcx,\n                              expr: @ast::expr)\n                           -> ExprCategorizationType {\n-        debug!(\"categorize_unadjusted(expr=%s)\", rcx.fcx.expr_to_str(expr));\n+        debug!(\"categorize_unadjusted()\");\n \n         let guarantor = {\n             if rcx.fcx.inh.method_map.contains_key(&expr.id) {"}, {"sha": "9b4a3270f28a05df2a46c8fe49f08654839b3f61", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=89eb9951958dc2cd652645cea5badf4bb9edc6f9", "patch": "@@ -21,7 +21,7 @@ use cmp::Eq;\n use iterator::IteratorUtil;\n use libc;\n use option::{None, Option, Some};\n-use str::{Str, StrSlice, StrVector};\n+use str::{OwnedStr, Str, StrSlice, StrVector};\n use str;\n use to_str::ToStr;\n use ascii::{AsciiCast, AsciiStr};"}, {"sha": "3c512d9bfd294aac8612ce1e45b900e96413e0c8", "filename": "src/libstd/str.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=89eb9951958dc2cd652645cea5badf4bb9edc6f9", "patch": "@@ -1427,7 +1427,8 @@ impl<'self> StrSlice<'self> for &'self str {\n     fn slice_chars(&self, begin: uint, end: uint) -> &'self str {\n         assert!(begin <= end);\n         // not sure how to use the iterators for this nicely.\n-        let mut (position, count) = (0, 0);\n+        let mut position = 0;\n+        let mut count = 0;\n         let l = self.len();\n         while count < begin && position < l {\n             position = self.char_range_at(position).next;\n@@ -1575,7 +1576,8 @@ impl<'self> StrSlice<'self> for &'self str {\n      * The original string with all occurances of `from` replaced with `to`\n      */\n     pub fn replace(&self, from: &str, to: &str) -> ~str {\n-        let mut (result, last_end) = (~\"\", 0);\n+        let mut result = ~\"\";\n+        let mut last_end = 0;\n         for self.matches_index_iter(from).advance |(start, end)| {\n             result.push_str(unsafe{raw::slice_bytes(*self, last_end, start)});\n             result.push_str(to);"}, {"sha": "3044cd50b344c4e11591d99dbf2b46087562a616", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=89eb9951958dc2cd652645cea5badf4bb9edc6f9", "patch": "@@ -98,7 +98,7 @@ impl gen_send for message {\n             }\n             body.push_str(fmt!(\"let message = %s(%s);\\n\",\n                                 name,\n-                                vec::append_one(arg_names.map(|x| cx.str_of(*x)), ~\"s\")\n+                                vec::append_one(arg_names.map(|x| cx.str_of(*x)), @\"s\")\n                                                          .connect(\", \")));\n \n             if !try {"}, {"sha": "f1b5c4d16be974ad7a9e13a0ae57efa64f488fdd", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89eb9951958dc2cd652645cea5badf4bb9edc6f9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=89eb9951958dc2cd652645cea5badf4bb9edc6f9", "patch": "@@ -378,7 +378,7 @@ impl Parser {\n             self.fatal(\n                 fmt!(\n                     \"expected `%s`, found `%s`\",\n-                    *self.id_to_str(kw.to_ident()),\n+                    self.id_to_str(kw.to_ident()).to_str(),\n                     self.this_token_to_str()\n                 )\n             );"}]}