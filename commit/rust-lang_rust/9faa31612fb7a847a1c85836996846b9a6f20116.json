{"sha": "9faa31612fb7a847a1c85836996846b9a6f20116", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYWEzMTYxMmZiN2E4NDdhMWM4NTgzNjk5Njg0NmI5YTZmMjAxMTY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-12-07T15:46:31Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-12-14T16:15:10Z"}, "message": "incr.comp.: Speed up span hashing by caching expansion context hashes.", "tree": {"sha": "64ebfef720abdccff8f316c8841929ab7f6617e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64ebfef720abdccff8f316c8841929ab7f6617e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9faa31612fb7a847a1c85836996846b9a6f20116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9faa31612fb7a847a1c85836996846b9a6f20116", "html_url": "https://github.com/rust-lang/rust/commit/9faa31612fb7a847a1c85836996846b9a6f20116", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9faa31612fb7a847a1c85836996846b9a6f20116/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8624ea51172c8a86d5c7c47d740be65a3a9efbc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8624ea51172c8a86d5c7c47d740be65a3a9efbc6", "html_url": "https://github.com/rust-lang/rust/commit/8624ea51172c8a86d5c7c47d740be65a3a9efbc6"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "2d20836814c8fb46e345b1c26bcbaeb36fa79080", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9faa31612fb7a847a1c85836996846b9a6f20116/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faa31612fb7a847a1c85836996846b9a6f20116/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=9faa31612fb7a847a1c85836996846b9a6f20116", "patch": "@@ -12,7 +12,7 @@ use hir;\n use hir::def_id::{DefId, DefIndex};\n use hir::map::DefPathHash;\n use hir::map::definitions::Definitions;\n-use ich::{self, CachingCodemapView};\n+use ich::{self, CachingCodemapView, Fingerprint};\n use middle::cstore::CrateStore;\n use ty::{TyCtxt, fast_reject};\n use session::Session;\n@@ -28,12 +28,13 @@ use syntax::codemap::CodeMap;\n use syntax::ext::hygiene::SyntaxContext;\n use syntax::symbol::Symbol;\n use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::hygiene;\n \n use rustc_data_structures::stable_hasher::{HashStable, StableHashingContextProvider,\n                                            StableHasher, StableHasherResult,\n                                            ToStableHashKey};\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n \n thread_local!(static IGNORED_ATTR_NAMES: RefCell<FxHashSet<Symbol>> =\n     RefCell::new(FxHashSet()));\n@@ -349,7 +350,31 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for Span {\n             TAG_NO_EXPANSION.hash_stable(hcx, hasher);\n         } else {\n             TAG_EXPANSION.hash_stable(hcx, hasher);\n-            span.ctxt.outer().expn_info().hash_stable(hcx, hasher);\n+\n+            // Since the same expansion context is usually referenced many\n+            // times, we cache a stable hash of it and hash that instead of\n+            // recursing every time.\n+            thread_local! {\n+                static CACHE: RefCell<FxHashMap<hygiene::Mark, u64>> =\n+                    RefCell::new(FxHashMap());\n+            }\n+\n+            let sub_hash: u64 = CACHE.with(|cache| {\n+                let mark = span.ctxt.outer();\n+\n+                if let Some(&sub_hash) = cache.borrow().get(&mark) {\n+                    return sub_hash;\n+                }\n+\n+                let mut hasher = StableHasher::new();\n+                mark.expn_info().hash_stable(hcx, &mut hasher);\n+                let sub_hash: Fingerprint = hasher.finish();\n+                let sub_hash = sub_hash.to_smaller_hash();\n+                cache.borrow_mut().insert(mark, sub_hash);\n+                sub_hash\n+            });\n+\n+            sub_hash.hash_stable(hcx, hasher);\n         }\n     }\n }"}, {"sha": "55342c2768a0e599984eb18b113813c9f2d7d66e", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9faa31612fb7a847a1c85836996846b9a6f20116/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faa31612fb7a847a1c85836996846b9a6f20116/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=9faa31612fb7a847a1c85836996846b9a6f20116", "patch": "@@ -60,22 +60,27 @@ impl Mark {\n     }\n \n     /// The mark of the theoretical expansion that generates freshly parsed, unexpanded AST.\n+    #[inline]\n     pub fn root() -> Self {\n         Mark(0)\n     }\n \n+    #[inline]\n     pub fn as_u32(self) -> u32 {\n         self.0\n     }\n \n+    #[inline]\n     pub fn from_u32(raw: u32) -> Mark {\n         Mark(raw)\n     }\n \n+    #[inline]\n     pub fn expn_info(self) -> Option<ExpnInfo> {\n         HygieneData::with(|data| data.marks[self.0 as usize].expn_info.clone())\n     }\n \n+    #[inline]\n     pub fn set_expn_info(self, info: ExpnInfo) {\n         HygieneData::with(|data| data.marks[self.0 as usize].expn_info = Some(info))\n     }\n@@ -91,10 +96,12 @@ impl Mark {\n         })\n     }\n \n+    #[inline]\n     pub fn kind(self) -> MarkKind {\n         HygieneData::with(|data| data.marks[self.0 as usize].kind)\n     }\n \n+    #[inline]\n     pub fn set_kind(self, kind: MarkKind) {\n         HygieneData::with(|data| data.marks[self.0 as usize].kind = kind)\n     }\n@@ -309,10 +316,12 @@ impl SyntaxContext {\n         Some(scope)\n     }\n \n+    #[inline]\n     pub fn modern(self) -> SyntaxContext {\n         HygieneData::with(|data| data.syntax_contexts[self.0 as usize].modern)\n     }\n \n+    #[inline]\n     pub fn outer(self) -> Mark {\n         HygieneData::with(|data| data.syntax_contexts[self.0 as usize].outer_mark)\n     }"}]}