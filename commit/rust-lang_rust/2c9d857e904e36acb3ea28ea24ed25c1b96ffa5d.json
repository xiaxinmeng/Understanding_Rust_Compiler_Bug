{"sha": "2c9d857e904e36acb3ea28ea24ed25c1b96ffa5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjOWQ4NTdlOTA0ZTM2YWNiM2VhMjhlYTI0ZWQyNWMxYjk2ZmZhNWQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-04T10:03:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-04T10:15:32Z"}, "message": "Miri leak_report: do not report leaks of allocations that are reachable from globals", "tree": {"sha": "c5cd8f97207afd59c859d79961de0e12a330c326", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5cd8f97207afd59c859d79961de0e12a330c326"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c9d857e904e36acb3ea28ea24ed25c1b96ffa5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c9d857e904e36acb3ea28ea24ed25c1b96ffa5d", "html_url": "https://github.com/rust-lang/rust/commit/2c9d857e904e36acb3ea28ea24ed25c1b96ffa5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c9d857e904e36acb3ea28ea24ed25c1b96ffa5d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6050e523bae6de61de4e060facc43dc512adaccd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6050e523bae6de61de4e060facc43dc512adaccd", "html_url": "https://github.com/rust-lang/rust/commit/6050e523bae6de61de4e060facc43dc512adaccd"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "a97df313ea05be8c56166c5ef737fe63b5cd08f8", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2c9d857e904e36acb3ea28ea24ed25c1b96ffa5d/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c9d857e904e36acb3ea28ea24ed25c1b96ffa5d/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=2c9d857e904e36acb3ea28ea24ed25c1b96ffa5d", "patch": "@@ -650,7 +650,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         allocs_to_print: &mut VecDeque<AllocId>,\n         alloc: &Allocation<Tag, Extra>,\n     ) {\n-        for &(_, (_, target_id)) in alloc.relocations().iter() {\n+        for &(_, target_id) in alloc.relocations().values() {\n             if allocs_seen.insert(target_id) {\n                 allocs_to_print.push_back(target_id);\n             }\n@@ -713,12 +713,31 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     }\n \n     pub fn leak_report(&self) -> usize {\n-        let leaks: Vec<_> = self\n-            .alloc_map\n-            .filter_map_collect(|&id, &(kind, _)| if kind.may_leak() { None } else { Some(id) });\n+        // Collect the set of allocations that are *reachable* from `Global` allocations.\n+        let reachable = {\n+            let mut reachable = FxHashSet::default();\n+            let global_kind = M::GLOBAL_KIND.map(MemoryKind::Machine);\n+            let mut todo: Vec<_> = self.alloc_map.filter_map_collect(move |&id, &(kind, _)| {\n+                if Some(kind) == global_kind { Some(id) } else { None }\n+            });\n+            while let Some(id) = todo.pop() {\n+                if reachable.insert(id) {\n+                    if let Some((_, alloc)) = self.alloc_map.get(id) {\n+                        // This is a new allocation, add its relocations to `todo`.\n+                        todo.extend(alloc.relocations().values().map(|&(_, target_id)| target_id));\n+                    }\n+                }\n+            }\n+            reachable\n+        };\n+\n+        // All allocations that are *not* `reachable` and *not* `may_leak` are considered leaking.\n+        let leaks: Vec<_> = self.alloc_map.filter_map_collect(|&id, &(kind, _)| {\n+            if kind.may_leak() || reachable.contains(&id) { None } else { Some(id) }\n+        });\n         let n = leaks.len();\n         if n > 0 {\n-            eprintln!(\"### LEAK REPORT ###\");\n+            eprintln!(\"The following memory was leaked:\");\n             self.dump_allocs(leaks);\n         }\n         n"}]}