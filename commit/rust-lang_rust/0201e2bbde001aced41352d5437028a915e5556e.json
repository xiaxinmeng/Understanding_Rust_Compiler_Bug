{"sha": "0201e2bbde001aced41352d5437028a915e5556e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMDFlMmJiZGUwMDFhY2VkNDEzNTJkNTQzNzAyOGE5MTVlNTU1NmU=", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-03-05T13:38:52Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-03-05T13:38:52Z"}, "message": "Add more windows specific numbers", "tree": {"sha": "b5f2cbc59c0734fad7df2bb42b8f4b9605556f1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5f2cbc59c0734fad7df2bb42b8f4b9605556f1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0201e2bbde001aced41352d5437028a915e5556e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0201e2bbde001aced41352d5437028a915e5556e", "html_url": "https://github.com/rust-lang/rust/commit/0201e2bbde001aced41352d5437028a915e5556e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0201e2bbde001aced41352d5437028a915e5556e/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c718bd3f657003f603ea6d4435f8d83752f0751", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c718bd3f657003f603ea6d4435f8d83752f0751", "html_url": "https://github.com/rust-lang/rust/commit/8c718bd3f657003f603ea6d4435f8d83752f0751"}], "stats": {"total": 70, "additions": 42, "deletions": 28}, "files": [{"sha": "97cea74fc53721d80feb4b9bacfcd6f3c7a043a5", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 42, "deletions": 28, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/0201e2bbde001aced41352d5437028a915e5556e/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0201e2bbde001aced41352d5437028a915e5556e/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=0201e2bbde001aced41352d5437028a915e5556e", "patch": "@@ -229,51 +229,65 @@ fn format_rusage_data() -> Option<String> {\n \n #[cfg(windows)]\n fn format_rusage_data(handle: std::os::windows::raw::HANDLE) -> Option<String> {\n+    use winapi::um::{processthreadsapi, psapi, timezoneapi};\n     macro_rules! try_bool {\n         ($e:expr) => {\n             if $e != 1 {\n                 return None;\n             }\n         };\n     }\n+\n+    let mut user_filetime = Default::default();\n+    let mut user_time = Default::default();\n+    let mut kernel_filetime = Default::default();\n+    let mut kernel_time = Default::default();\n+    let mut memory_counters = psapi::PROCESS_MEMORY_COUNTERS::default();\n+\n     unsafe {\n-        let mut _filetime = winapi::shared::minwindef::FILETIME::default();\n-        let mut user_filetime = winapi::shared::minwindef::FILETIME::default();\n-        let mut kernel_filetime = winapi::shared::minwindef::FILETIME::default();\n-        try_bool!(winapi::um::processthreadsapi::GetProcessTimes(\n+        try_bool!(processthreadsapi::GetProcessTimes(\n             handle,\n-            &mut _filetime,\n-            &mut _filetime,\n+            &mut Default::default(),\n+            &mut Default::default(),\n             &mut kernel_filetime,\n             &mut user_filetime,\n         ));\n-        let mut memory_counters = winapi::um::psapi::PROCESS_MEMORY_COUNTERS_EX::default();\n-        try_bool!(winapi::um::psapi::GetProcessMemoryInfo(\n+        try_bool!(timezoneapi::FileTimeToSystemTime(&user_filetime, &mut user_time));\n+        try_bool!(timezoneapi::FileTimeToSystemTime(&kernel_filetime, &mut kernel_time));\n+\n+        // Unlike on Linux with RUSAGE_CHILDREN, this will only return memory information for the process\n+        // with the given handle and none of that process's children.\n+        try_bool!(psapi::GetProcessMemoryInfo(\n             handle as _,\n             &mut memory_counters as *mut _ as _,\n-            std::mem::size_of::<winapi::um::psapi::PROCESS_MEMORY_COUNTERS_EX>() as u32,\n-        ));\n-        let mut user_time = winapi::um::minwinbase::SYSTEMTIME::default();\n-        try_bool!(winapi::um::timezoneapi::FileTimeToSystemTime(&user_filetime, &mut user_time));\n-        let mut kernel_time = winapi::um::minwinbase::SYSTEMTIME::default();\n-        try_bool!(winapi::um::timezoneapi::FileTimeToSystemTime(\n-            &kernel_filetime,\n-            &mut kernel_time\n+            std::mem::size_of::<psapi::PROCESS_MEMORY_COUNTERS_EX>() as u32,\n         ));\n-        let maxrss = memory_counters.PeakWorkingSetSize / 1024;\n-        Some(format!(\n-            \"user: {USER_SEC}.{USER_USEC:03} \\\n+    }\n+\n+    // Guide on interpreting these numbers:\n+    // https://docs.microsoft.com/en-us/windows/win32/psapi/process-memory-usage-information\n+    let peak_working_set = memory_counters.PeakWorkingSetSize / 1024;\n+    let peak_page_file = memory_counters.PeakPagefileUsage / 1024;\n+    let peak_paged_pool = memory_counters.QuotaPeakPagedPoolUsage / 1024;\n+    let peak_nonpaged_pool = memory_counters.QuotaPeakNonPagedPoolUsage / 1024;\n+    Some(format!(\n+        \"user: {USER_SEC}.{USER_USEC:03} \\\n          sys: {SYS_SEC}.{SYS_USEC:03} \\\n-         max rss (kb): {MAXRSS} \\\n+         peak working set (kb): {PEAK_WORKING_SET} \\\n+         peak page file usage (kb): {PEAK_PAGE_FILE} \\\n+         peak paged pool usage (kb): {PEAK_PAGED_POOL} \\\n+         peak non-paged pool usage (kb): {PEAK_NONPAGED_POOL} \\\n          page faults: {PAGE_FAULTS}\",\n-            USER_SEC = user_time.wSecond + (user_time.wMinute * 60),\n-            USER_USEC = user_time.wMilliseconds,\n-            SYS_SEC = kernel_time.wSecond + (kernel_time.wMinute * 60),\n-            SYS_USEC = kernel_time.wMilliseconds,\n-            MAXRSS = maxrss,\n-            PAGE_FAULTS = memory_counters.PageFaultCount,\n-        ))\n-    }\n+        USER_SEC = user_time.wSecond + (user_time.wMinute * 60),\n+        USER_USEC = user_time.wMilliseconds,\n+        SYS_SEC = kernel_time.wSecond + (kernel_time.wMinute * 60),\n+        SYS_USEC = kernel_time.wMilliseconds,\n+        PEAK_WORKING_SET = peak_working_set,\n+        PEAK_PAGE_FILE = peak_page_file,\n+        PEAK_PAGED_POOL = peak_paged_pool,\n+        PEAK_NONPAGED_POOL = peak_nonpaged_pool,\n+        PAGE_FAULTS = memory_counters.PageFaultCount,\n+    ))\n }\n \n #[cfg(unix)]"}]}