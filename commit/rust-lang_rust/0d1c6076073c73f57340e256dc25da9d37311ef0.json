{"sha": "0d1c6076073c73f57340e256dc25da9d37311ef0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMWM2MDc2MDczYzczZjU3MzQwZTI1NmRjMjVkYTlkMzczMTFlZjA=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-27T09:56:06Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-27T09:56:06Z"}, "message": "Merge #1319\n\n1319: Rainbow highlighting spike \ud83c\udf08 r=killercup a=killercup\n\nVery simple approach: For each identifier, set the hash of the range\r\nwhere it's defined as its 'id' and use it in the VSCode extension to\r\ngenerate unique colors.\r\n\r\nThus, the generated colors are per-file. They are also quite fragile,\r\nand I'm not entirely sure why. Looks like we need to make sure the\r\nsame ranges aren't overwritten by a later request?\n\nCo-authored-by: Pascal Hertleif <pascal@technocreatives.com>", "tree": {"sha": "60ff1f4a42f8ef297c07d5716af67e3057c8e1bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60ff1f4a42f8ef297c07d5716af67e3057c8e1bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d1c6076073c73f57340e256dc25da9d37311ef0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d1c6076073c73f57340e256dc25da9d37311ef0", "html_url": "https://github.com/rust-lang/rust/commit/0d1c6076073c73f57340e256dc25da9d37311ef0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d1c6076073c73f57340e256dc25da9d37311ef0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "4b48cff022a1606bde596f01fbf44361640b10d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b48cff022a1606bde596f01fbf44361640b10d8", "html_url": "https://github.com/rust-lang/rust/commit/4b48cff022a1606bde596f01fbf44361640b10d8"}, {"sha": "1e6ba1901550fb1610a1a464c48ec358cd3c339c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e6ba1901550fb1610a1a464c48ec358cd3c339c", "html_url": "https://github.com/rust-lang/rust/commit/1e6ba1901550fb1610a1a464c48ec358cd3c339c"}], "stats": {"total": 288, "additions": 242, "deletions": 46}, "files": [{"sha": "68c5f78747d3461135294fad96ae94939a248c04", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d1c6076073c73f57340e256dc25da9d37311ef0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0d1c6076073c73f57340e256dc25da9d37311ef0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0d1c6076073c73f57340e256dc25da9d37311ef0", "patch": "@@ -1155,6 +1155,7 @@ dependencies = [\n  \"ra_prof 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"ra_text_edit 0.1.0\",\n+ \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rayon 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "84a1564ceb66c8bcbe3d703688c4f9c03ad065ae", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d1c6076073c73f57340e256dc25da9d37311ef0/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1c6076073c73f57340e256dc25da9d37311ef0/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=0d1c6076073c73f57340e256dc25da9d37311ef0", "patch": "@@ -16,7 +16,10 @@ fn main() -> Result<()> {\n         .setting(clap::AppSettings::SubcommandRequiredElseHelp)\n         .subcommand(SubCommand::with_name(\"parse\").arg(Arg::with_name(\"no-dump\").long(\"--no-dump\")))\n         .subcommand(SubCommand::with_name(\"symbols\"))\n-        .subcommand(SubCommand::with_name(\"highlight\"))\n+        .subcommand(\n+            SubCommand::with_name(\"highlight\")\n+                .arg(Arg::with_name(\"rainbow\").short(\"r\").long(\"rainbow\")),\n+        )\n         .subcommand(\n             SubCommand::with_name(\"analysis-stats\")\n                 .arg(Arg::with_name(\"verbose\").short(\"v\").long(\"verbose\"))\n@@ -39,9 +42,9 @@ fn main() -> Result<()> {\n                 println!(\"{:?}\", s);\n             }\n         }\n-        (\"highlight\", _) => {\n+        (\"highlight\", Some(matches)) => {\n             let (analysis, file_id) = Analysis::from_single_file(read_stdin()?);\n-            let html = analysis.highlight_as_html(file_id).unwrap();\n+            let html = analysis.highlight_as_html(file_id, matches.is_present(\"rainbow\")).unwrap();\n             println!(\"{}\", html);\n         }\n         (\"analysis-stats\", Some(matches)) => {"}, {"sha": "8939e9d79dedb8284743f4e7e69ebfbacc6e06ce", "filename": "crates/ra_ide_api/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d1c6076073c73f57340e256dc25da9d37311ef0/crates%2Fra_ide_api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0d1c6076073c73f57340e256dc25da9d37311ef0/crates%2Fra_ide_api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2FCargo.toml?ref=0d1c6076073c73f57340e256dc25da9d37311ef0", "patch": "@@ -15,6 +15,7 @@ rustc-hash = \"1.0\"\n parking_lot = \"0.7.0\"\n unicase = \"2.2.0\"\n superslice = \"1.0.0\"\n+rand = \"0.6.5\"\n \n jemallocator = { version = \"0.1.9\", optional = true }\n jemalloc-ctl = { version = \"0.2.0\", optional = true }"}, {"sha": "452407e8e3aa8db2af4d7fa19f8e959306433e10", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d1c6076073c73f57340e256dc25da9d37311ef0/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1c6076073c73f57340e256dc25da9d37311ef0/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=0d1c6076073c73f57340e256dc25da9d37311ef0", "patch": "@@ -463,16 +463,16 @@ impl Analysis {\n     }\n \n     /// Computes syntax highlighting for the given file.\n-    pub fn highlight_as_html(&self, file_id: FileId) -> Cancelable<String> {\n-        self.with_db(|db| syntax_highlighting::highlight_as_html(db, file_id))\n+    pub fn highlight_as_html(&self, file_id: FileId, rainbow: bool) -> Cancelable<String> {\n+        self.with_db(|db| syntax_highlighting::highlight_as_html(db, file_id, rainbow))\n     }\n \n     /// Computes completions at the given position.\n     pub fn completions(&self, position: FilePosition) -> Cancelable<Option<Vec<CompletionItem>>> {\n         self.with_db(|db| completion::completions(db, position).map(Into::into))\n     }\n \n-    /// Computes assists (aks code actons aka intentions) for the given\n+    /// Computes assists (aka code actions aka intentions) for the given\n     /// position.\n     pub fn assists(&self, frange: FileRange) -> Cancelable<Vec<Assist>> {\n         self.with_db(|db| assists::assists(db, frange))"}, {"sha": "ebd187a35d76fe1efd14932839f73badf4907ef1", "filename": "crates/ra_ide_api/src/snapshots/highlighting.html", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0d1c6076073c73f57340e256dc25da9d37311ef0/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/0d1c6076073c73f57340e256dc25da9d37311ef0/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=0d1c6076073c73f57340e256dc25da9d37311ef0", "patch": "@@ -1,10 +1,7 @@\n \n <style>\n-pre {\n-    color: #DCDCCC;\n-    background-color: #3F3F3F;\n-    font-size: 22px;\n-}\n+body       { margin: 0; }\n+pre        { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n \n .comment   { color: #7F9F7F; }\n .string    { color: #CC9393; }\n@@ -19,10 +16,8 @@\n .keyword           { color: #F0DFAF; }\n .keyword\\.unsafe  { color: #F0DFAF; font-weight: bold; }\n .keyword\\.control { color: #DC8CC3; }\n-\n </style>\n-<pre><code>\n-<span class=\"attribute\">#</span><span class=\"attribute\">[</span><span class=\"attribute\">derive</span><span class=\"attribute\">(</span><span class=\"attribute\">Clone</span><span class=\"attribute\">,</span><span class=\"attribute\"> </span><span class=\"attribute\">Debug</span><span class=\"attribute\">)</span><span class=\"attribute\">]</span>\n+<pre><code><span class=\"attribute\">#</span><span class=\"attribute\">[</span><span class=\"attribute\">derive</span><span class=\"attribute\">(</span><span class=\"attribute\">Clone</span><span class=\"attribute\">,</span><span class=\"attribute\"> </span><span class=\"attribute\">Debug</span><span class=\"attribute\">)</span><span class=\"attribute\">]</span>\n <span class=\"keyword\">struct</span> <span class=\"function\">Foo</span> {\n     <span class=\"keyword\">pub</span> <span class=\"function\">x</span>: <span class=\"text\">i32</span>,\n     <span class=\"keyword\">pub</span> <span class=\"function\">y</span>: <span class=\"text\">i32</span>,\n@@ -36,10 +31,9 @@\n <span class=\"keyword\">fn</span> <span class=\"function\">main</span>() {\n     <span class=\"macro\">println</span><span class=\"macro\">!</span>(<span class=\"string\">\"Hello, {}!\"</span>, <span class=\"literal\">92</span>);\n \n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"function\">vec</span> = <span class=\"text\">Vec</span>::<span class=\"text\">new</span>();\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable\" data-binding-hash=\"9636295041291189729\" style=\"color: hsl(51,57%,74%);\">vec</span> = <span class=\"text\">Vec</span>::<span class=\"text\">new</span>();\n     <span class=\"keyword.control\">if</span> <span class=\"keyword\">true</span> {\n-        <span class=\"text\">vec</span>.<span class=\"text\">push</span>(<span class=\"type\">Foo</span> { <span class=\"field\">x</span>: <span class=\"literal\">0</span>, <span class=\"field\">y</span>: <span class=\"literal\">1</span> });\n+        <span class=\"variable\" data-binding-hash=\"8496027264380925433\" style=\"color: hsl(18,48%,55%);\">vec</span>.<span class=\"text\">push</span>(<span class=\"type\">Foo</span> { <span class=\"field\">x</span>: <span class=\"literal\">0</span>, <span class=\"field\">y</span>: <span class=\"literal\">1</span> });\n     }\n-    <span class=\"keyword.unsafe\">unsafe</span> { <span class=\"text\">vec</span>.<span class=\"text\">set_len</span>(<span class=\"literal\">0</span>); }\n-}\n-</code></pre>\n\\ No newline at end of file\n+    <span class=\"keyword.unsafe\">unsafe</span> { <span class=\"variable\" data-binding-hash=\"8496027264380925433\" style=\"color: hsl(18,48%,55%);\">vec</span>.<span class=\"text\">set_len</span>(<span class=\"literal\">0</span>); }\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "729d129d070c8d0df91c7cd5e649366efd509498", "filename": "crates/ra_ide_api/src/snapshots/rainbow_highlighting.html", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0d1c6076073c73f57340e256dc25da9d37311ef0/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/0d1c6076073c73f57340e256dc25da9d37311ef0/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html?ref=0d1c6076073c73f57340e256dc25da9d37311ef0", "patch": "@@ -0,0 +1,27 @@\n+\n+<style>\n+body       { margin: 0; }\n+pre        { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n+\n+.comment   { color: #7F9F7F; }\n+.string    { color: #CC9393; }\n+.function  { color: #93E0E3; }\n+.parameter { color: #94BFF3; }\n+.builtin   { color: #DD6718; }\n+.text      { color: #DCDCCC; }\n+.attribute { color: #BFEBBF; }\n+.literal   { color: #DFAF8F; }\n+.macro     { color: #DFAF8F; }\n+\n+.keyword           { color: #F0DFAF; }\n+.keyword\\.unsafe  { color: #F0DFAF; font-weight: bold; }\n+.keyword\\.control { color: #DC8CC3; }\n+</style>\n+<pre><code><span class=\"keyword\">fn</span> <span class=\"function\">main</span>() {\n+    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"3888301305669440875\" style=\"color: hsl(242,59%,59%);\">hello</span> = <span class=\"string\">\"hello\"</span>;\n+    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"5695551762718493399\" style=\"color: hsl(272,48%,45%);\">x</span> = <span class=\"variable\" data-binding-hash=\"3888301305669440875\" style=\"color: hsl(242,59%,59%);\">hello</span>.<span class=\"text\">to_string</span>();\n+    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"5435401749617022797\" style=\"color: hsl(353,77%,74%);\">y</span> = <span class=\"variable\" data-binding-hash=\"3888301305669440875\" style=\"color: hsl(242,59%,59%);\">hello</span>.<span class=\"text\">to_string</span>();\n+\n+    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"1903207544374197704\" style=\"color: hsl(58,61%,61%);\">x</span> = <span class=\"string\">\"other color please!\"</span>;\n+    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"14878783531007968800\" style=\"color: hsl(265,73%,83%);\">y</span> = <span class=\"variable\" data-binding-hash=\"1903207544374197704\" style=\"color: hsl(58,61%,61%);\">x</span>.<span class=\"text\">to_string</span>();\n+}</code></pre>\n\\ No newline at end of file"}, {"sha": "dcefb051349f35812363089f630c7bb1517f3d0d", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 108, "deletions": 22, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/0d1c6076073c73f57340e256dc25da9d37311ef0/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1c6076073c73f57340e256dc25da9d37311ef0/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=0d1c6076073c73f57340e256dc25da9d37311ef0", "patch": "@@ -1,6 +1,6 @@\n-use rustc_hash::FxHashSet;\n+use rustc_hash::{FxHashSet, FxHashMap};\n \n-use ra_syntax::{ast, AstNode, TextRange, Direction, SyntaxKind, SyntaxKind::*, SyntaxElement, T};\n+use ra_syntax::{ast, AstNode, TextRange, Direction, SmolStr, SyntaxKind, SyntaxKind::*, SyntaxElement, T};\n use ra_db::SourceDatabase;\n use ra_prof::profile;\n \n@@ -10,6 +10,7 @@ use crate::{FileId, db::RootDatabase};\n pub struct HighlightedRange {\n     pub range: TextRange,\n     pub tag: &'static str,\n+    pub binding_hash: Option<u64>,\n }\n \n fn is_control_keyword(kind: SyntaxKind) -> bool {\n@@ -29,22 +30,36 @@ fn is_control_keyword(kind: SyntaxKind) -> bool {\n \n pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRange> {\n     let _p = profile(\"highlight\");\n-\n     let source_file = db.parse(file_id);\n \n+    fn calc_binding_hash(file_id: FileId, text: &SmolStr, shadow_count: u32) -> u64 {\n+        fn hash<T: std::hash::Hash + std::fmt::Debug>(x: T) -> u64 {\n+            use std::{collections::hash_map::DefaultHasher, hash::Hasher};\n+\n+            let mut hasher = DefaultHasher::new();\n+            x.hash(&mut hasher);\n+            hasher.finish()\n+        }\n+\n+        hash((file_id, text, shadow_count))\n+    }\n+\n     // Visited nodes to handle highlighting priorities\n     let mut highlighted: FxHashSet<SyntaxElement> = FxHashSet::default();\n+    let mut bindings_shadow_count: FxHashMap<SmolStr, u32> = FxHashMap::default();\n+\n     let mut res = Vec::new();\n     for node in source_file.syntax().descendants_with_tokens() {\n         if highlighted.contains(&node) {\n             continue;\n         }\n+        let mut binding_hash = None;\n         let tag = match node.kind() {\n             COMMENT => \"comment\",\n             STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => \"string\",\n             ATTR => \"attribute\",\n             NAME_REF => {\n-                if let Some(name_ref) = node.as_node().and_then(|n| ast::NameRef::cast(n)) {\n+                if let Some(name_ref) = node.as_node().and_then(ast::NameRef::cast) {\n                     use crate::name_ref_kind::{classify_name_ref, NameRefKind::*};\n                     use hir::{ModuleDef, ImplItem};\n \n@@ -68,7 +83,20 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                         Some(Def(ModuleDef::Trait(_))) => \"type\",\n                         Some(Def(ModuleDef::TypeAlias(_))) => \"type\",\n                         Some(SelfType(_)) => \"type\",\n-                        Some(Pat(_)) => \"text\",\n+                        Some(Pat(ptr)) => {\n+                            binding_hash = Some({\n+                                let text = ptr\n+                                    .syntax_node_ptr()\n+                                    .to_node(&source_file.syntax())\n+                                    .text()\n+                                    .to_smol_string();\n+                                let shadow_count =\n+                                    bindings_shadow_count.entry(text.clone()).or_default();\n+                                calc_binding_hash(file_id, &text, *shadow_count)\n+                            });\n+\n+                            \"variable\"\n+                        }\n                         Some(SelfParam(_)) => \"type\",\n                         Some(GenericParam(_)) => \"type\",\n                         None => \"text\",\n@@ -77,14 +105,32 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                     \"text\"\n                 }\n             }\n-            NAME => \"function\",\n+            NAME => {\n+                if let Some(name) = node.as_node().and_then(ast::Name::cast) {\n+                    if name.syntax().ancestors().any(|x| ast::BindPat::cast(x).is_some()) {\n+                        binding_hash = Some({\n+                            let text = name.syntax().text().to_smol_string();\n+                            let shadow_count =\n+                                bindings_shadow_count.entry(text.clone()).or_insert(0);\n+                            *shadow_count += 1;\n+                            calc_binding_hash(file_id, &text, *shadow_count)\n+                        });\n+                        \"variable\"\n+                    } else {\n+                        \"function\"\n+                    }\n+                } else {\n+                    \"text\"\n+                }\n+            }\n             TYPE_ALIAS_DEF | TYPE_ARG | TYPE_PARAM => \"type\",\n             INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE => \"literal\",\n             LIFETIME => \"parameter\",\n             T![unsafe] => \"keyword.unsafe\",\n             k if is_control_keyword(k) => \"keyword.control\",\n             k if k.is_keyword() => \"keyword\",\n             _ => {\n+                // let analyzer = hir::SourceAnalyzer::new(db, file_id, name_ref.syntax(), None);\n                 if let Some(macro_call) = node.as_node().and_then(ast::MacroCall::cast) {\n                     if let Some(path) = macro_call.path() {\n                         if let Some(segment) = path.segment() {\n@@ -101,6 +147,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                                 res.push(HighlightedRange {\n                                     range: TextRange::from_to(range_start, range_end),\n                                     tag: \"macro\",\n+                                    binding_hash: None,\n                                 })\n                             }\n                         }\n@@ -109,14 +156,25 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                 continue;\n             }\n         };\n-        res.push(HighlightedRange { range: node.range(), tag })\n+        res.push(HighlightedRange { range: node.range(), tag, binding_hash })\n     }\n     res\n }\n \n-pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId) -> String {\n+pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: bool) -> String {\n     let source_file = db.parse(file_id);\n \n+    fn rainbowify(seed: u64) -> String {\n+        use rand::prelude::*;\n+        let mut rng = SmallRng::seed_from_u64(seed);\n+        format!(\n+            \"hsl({h},{s}%,{l}%)\",\n+            h = rng.gen_range::<u16, _, _>(0, 361),\n+            s = rng.gen_range::<u16, _, _>(42, 99),\n+            l = rng.gen_range::<u16, _, _>(40, 91),\n+        )\n+    }\n+\n     let mut ranges = highlight(db, file_id);\n     ranges.sort_by_key(|it| it.range.start());\n     // quick non-optimal heuristic to intersect token ranges and highlighted ranges\n@@ -138,16 +196,24 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId) -> String {\n             }\n         }\n         let text = html_escape(&token.text());\n-        let classes = could_intersect\n+        let ranges = could_intersect\n             .iter()\n             .filter(|it| token.range().is_subrange(&it.range))\n-            .map(|it| it.tag)\n             .collect::<Vec<_>>();\n-        if classes.is_empty() {\n+        if ranges.is_empty() {\n             buf.push_str(&text);\n         } else {\n-            let classes = classes.join(\" \");\n-            buf.push_str(&format!(\"<span class=\\\"{}\\\">{}</span>\", classes, text));\n+            let classes = ranges.iter().map(|x| x.tag).collect::<Vec<_>>().join(\" \");\n+            let binding_hash = ranges.first().and_then(|x| x.binding_hash);\n+            let color = match (rainbow, binding_hash) {\n+                (true, Some(hash)) => format!(\n+                    \" data-binding-hash=\\\"{}\\\" style=\\\"color: {};\\\"\",\n+                    hash,\n+                    rainbowify(hash)\n+                ),\n+                _ => \"\".into(),\n+            };\n+            buf.push_str(&format!(\"<span class=\\\"{}\\\"{}>{}</span>\", classes, color, text));\n         }\n     }\n     buf.push_str(\"</code></pre>\");\n@@ -161,11 +227,8 @@ fn html_escape(text: &str) -> String {\n \n const STYLE: &str = \"\n <style>\n-pre {\n-    color: #DCDCCC;\n-    background-color: #3F3F3F;\n-    font-size: 22px;\n-}\n+body       { margin: 0; }\n+pre        { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n \n .comment   { color: #7F9F7F; }\n .string    { color: #CC9393; }\n@@ -180,7 +243,6 @@ pre {\n .keyword           { color: #F0DFAF; }\n .keyword\\\\.unsafe  { color: #F0DFAF; font-weight: bold; }\n .keyword\\\\.control { color: #DC8CC3; }\n-\n </style>\n \";\n \n@@ -213,12 +275,36 @@ fn main() {\n     }\n     unsafe { vec.set_len(0); }\n }\n-\"#,\n+\"#\n+            .trim(),\n         );\n         let dst_file = project_dir().join(\"crates/ra_ide_api/src/snapshots/highlighting.html\");\n-        let actual_html = &analysis.highlight_as_html(file_id).unwrap();\n+        let actual_html = &analysis.highlight_as_html(file_id, true).unwrap();\n+        let expected_html = &read_text(&dst_file);\n+        std::fs::write(dst_file, &actual_html).unwrap();\n+        assert_eq_text!(expected_html, actual_html);\n+    }\n+\n+    #[test]\n+    fn test_rainbow_highlighting() {\n+        let (analysis, file_id) = single_file(\n+            r#\"\n+fn main() {\n+    let hello = \"hello\";\n+    let x = hello.to_string();\n+    let y = hello.to_string();\n+\n+    let x = \"other color please!\";\n+    let y = x.to_string();\n+}\n+\"#\n+            .trim(),\n+        );\n+        let dst_file =\n+            project_dir().join(\"crates/ra_ide_api/src/snapshots/rainbow_highlighting.html\");\n+        let actual_html = &analysis.highlight_as_html(file_id, true).unwrap();\n         let expected_html = &read_text(&dst_file);\n-        // std::fs::write(dst_file, &actual_html).unwrap();\n+        std::fs::write(dst_file, &actual_html).unwrap();\n         assert_eq_text!(expected_html, actual_html);\n     }\n }"}, {"sha": "e36db12b32f9e056ab9417fece5cbc7f4f8540c7", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d1c6076073c73f57340e256dc25da9d37311ef0/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1c6076073c73f57340e256dc25da9d37311ef0/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=0d1c6076073c73f57340e256dc25da9d37311ef0", "patch": "@@ -872,7 +872,11 @@ fn highlight(world: &ServerWorld, file_id: FileId) -> Result<Vec<Decoration>> {\n         .analysis()\n         .highlight(file_id)?\n         .into_iter()\n-        .map(|h| Decoration { range: h.range.conv_with(&line_index), tag: h.tag })\n+        .map(|h| Decoration {\n+            range: h.range.conv_with(&line_index),\n+            tag: h.tag,\n+            binding_hash: h.binding_hash.map(|x| x.to_string()),\n+        })\n         .collect();\n     Ok(res)\n }"}, {"sha": "992c24eac3f158cfe9220eaed1e448a4f54cd7d4", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d1c6076073c73f57340e256dc25da9d37311ef0/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1c6076073c73f57340e256dc25da9d37311ef0/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=0d1c6076073c73f57340e256dc25da9d37311ef0", "patch": "@@ -129,6 +129,7 @@ pub struct PublishDecorationsParams {\n pub struct Decoration {\n     pub range: Range,\n     pub tag: &'static str,\n+    pub binding_hash: Option<String>,\n }\n \n pub enum ParentModule {}"}, {"sha": "c9038cd5c06dc5d8fc41e10045301ed17b5b5fdb", "filename": "crates/ra_syntax/src/syntax_text.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d1c6076073c73f57340e256dc25da9d37311ef0/crates%2Fra_syntax%2Fsrc%2Fsyntax_text.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1c6076073c73f57340e256dc25da9d37311ef0/crates%2Fra_syntax%2Fsrc%2Fsyntax_text.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_text.rs?ref=0d1c6076073c73f57340e256dc25da9d37311ef0", "patch": "@@ -1,6 +1,6 @@\n use std::{fmt, ops::{self, Bound}};\n \n-use crate::{SyntaxNode, TextRange, TextUnit, SyntaxElement};\n+use crate::{SmolStr, SyntaxNode, TextRange, TextUnit, SyntaxElement};\n \n #[derive(Clone)]\n pub struct SyntaxText<'a> {\n@@ -34,6 +34,12 @@ impl<'a> SyntaxText<'a> {\n         self.chunks().collect()\n     }\n \n+    pub fn to_smol_string(&self) -> SmolStr {\n+        // FIXME: use `self.chunks().collect()` here too once\n+        // https://github.com/matklad/smol_str/pull/12 is merged and published\n+        self.to_string().into()\n+    }\n+\n     pub fn contains(&self, c: char) -> bool {\n         self.chunks().any(|it| it.contains(c))\n     }"}, {"sha": "b6e6008c428502bd80343694ab80b1519524e650", "filename": "docs/user/features.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d1c6076073c73f57340e256dc25da9d37311ef0/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d1c6076073c73f57340e256dc25da9d37311ef0/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=0d1c6076073c73f57340e256dc25da9d37311ef0", "patch": "@@ -470,3 +470,12 @@ There also snippet completions:\n \n - `tfn` -> `#[test] fn f(){}`\n \n+### Code highlighting\n+\n+Experimental feature to let rust-analyzer highlight Rust code instead of using the\n+default highlighter.\n+\n+#### Rainbow highlighting\n+\n+Experimental feature that, given code highlighting using rust-analyzer is\n+active, will pick unique colors for identifiers."}, {"sha": "6b3a12f91a5add5d15c64a4e802bffce38d4ffec", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d1c6076073c73f57340e256dc25da9d37311ef0/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/0d1c6076073c73f57340e256dc25da9d37311ef0/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=0d1c6076073c73f57340e256dc25da9d37311ef0", "patch": "@@ -36,6 +36,11 @@\n             \"integrity\": \"sha512-Ja7d4s0qyGFxjGeDq5S7Si25OFibSAHUi6i17UWnwNnpitADN7hah9q0Tl25gxuV5R1u2Bx+np6w4LHXfHyj/g==\",\n             \"dev\": true\n         },\n+        \"@types/seedrandom\": {\n+            \"version\": \"2.4.28\",\n+            \"resolved\": \"https://registry.npmjs.org/@types/seedrandom/-/seedrandom-2.4.28.tgz\",\n+            \"integrity\": \"sha512-SMA+fUwULwK7sd/ZJicUztiPs8F1yCPwF3O23Z9uQ32ME5Ha0NmDK9+QTsYE4O2tHXChzXomSWWeIhCnoN1LqA==\"\n+        },\n         \"agent-base\": {\n             \"version\": \"4.2.1\",\n             \"resolved\": \"https://registry.npmjs.org/agent-base/-/agent-base-4.2.1.tgz\",\n@@ -984,6 +989,11 @@\n             \"integrity\": \"sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==\",\n             \"dev\": true\n         },\n+        \"seedrandom\": {\n+            \"version\": \"3.0.1\",\n+            \"resolved\": \"https://registry.npmjs.org/seedrandom/-/seedrandom-3.0.1.tgz\",\n+            \"integrity\": \"sha512-1/02Y/rUeU1CJBAGLebiC5Lbo5FnB22gQbIFFYTLkwvp1xdABZJH1sn4ZT1MzXmPpzv+Rf/Lu2NcsLJiK4rcDg==\"\n+        },\n         \"semver\": {\n             \"version\": \"5.7.0\",\n             \"resolved\": \"https://registry.npmjs.org/semver/-/semver-5.7.0.tgz\","}, {"sha": "05c808394963d65efe013a455dd5aeb232a1b38d", "filename": "editors/code/package.json", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d1c6076073c73f57340e256dc25da9d37311ef0/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/0d1c6076073c73f57340e256dc25da9d37311ef0/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=0d1c6076073c73f57340e256dc25da9d37311ef0", "patch": "@@ -31,11 +31,13 @@\n         \"singleQuote\": true\n     },\n     \"dependencies\": {\n+        \"seedrandom\": \"^3.0.1\",\n         \"vscode-languageclient\": \"^5.3.0-next.4\"\n     },\n     \"devDependencies\": {\n         \"@types/mocha\": \"^5.2.6\",\n         \"@types/node\": \"^10.14.5\",\n+        \"@types/seedrandom\": \"^2.4.28\",\n         \"prettier\": \"^1.17.0\",\n         \"shx\": \"^0.3.1\",\n         \"tslint\": \"^5.16.0\",\n@@ -162,6 +164,11 @@\n                     \"default\": false,\n                     \"description\": \"Highlight Rust code (overrides built-in syntax highlighting)\"\n                 },\n+                \"rust-analyzer.rainbowHighlightingOn\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": false,\n+                    \"description\": \"When highlighting Rust code, use a unique color per identifier\"\n+                },\n                 \"rust-analyzer.showWorkspaceLoadedNotification\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,"}, {"sha": "8d73a6b3404c7d3d3ce55348634815f5ce4410f1", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d1c6076073c73f57340e256dc25da9d37311ef0/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0d1c6076073c73f57340e256dc25da9d37311ef0/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=0d1c6076073c73f57340e256dc25da9d37311ef0", "patch": "@@ -15,6 +15,7 @@ export interface CargoWatchOptions {\n \n export class Config {\n     public highlightingOn = true;\n+    public rainbowHighlightingOn = false;\n     public enableEnhancedTyping = true;\n     public raLspServerPath = RA_LSP_DEBUG || 'ra_lsp_server';\n     public showWorkspaceLoadedNotification = true;\n@@ -39,6 +40,12 @@ export class Config {\n             this.highlightingOn = config.get('highlightingOn') as boolean;\n         }\n \n+        if (config.has('rainbowHighlightingOn')) {\n+            this.rainbowHighlightingOn = config.get(\n+                'rainbowHighlightingOn'\n+            ) as boolean;\n+        }\n+\n         if (config.has('showWorkspaceLoadedNotification')) {\n             this.showWorkspaceLoadedNotification = config.get(\n                 'showWorkspaceLoadedNotification'"}, {"sha": "52a0bd4bb16e5b8d171f7c5d39493a5c1f9b1b66", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0d1c6076073c73f57340e256dc25da9d37311ef0/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0d1c6076073c73f57340e256dc25da9d37311ef0/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=0d1c6076073c73f57340e256dc25da9d37311ef0", "patch": "@@ -1,3 +1,4 @@\n+import seedrandom = require('seedrandom');\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n@@ -6,6 +7,20 @@ import { Server } from './server';\n export interface Decoration {\n     range: lc.Range;\n     tag: string;\n+    bindingHash?: string;\n+}\n+\n+// Based on this HSL-based color generator: https://gist.github.com/bendc/76c48ce53299e6078a76\n+function fancify(seed: string, shade: 'light' | 'dark') {\n+    const random = seedrandom(seed);\n+    const randomInt = (min: number, max: number) => {\n+        return Math.floor(random() * (max - min + 1)) + min;\n+    };\n+\n+    const h = randomInt(0, 360);\n+    const s = randomInt(42, 98);\n+    const l = shade === 'light' ? randomInt(15, 40) : randomInt(40, 90);\n+    return `hsl(${h},${s}%,${l}%)`;\n }\n \n export class Highlighter {\n@@ -76,6 +91,9 @@ export class Highlighter {\n         }\n \n         const byTag: Map<string, vscode.Range[]> = new Map();\n+        const colorfulIdents: Map<string, vscode.Range[]> = new Map();\n+        const rainbowTime = Server.config.rainbowHighlightingOn;\n+\n         for (const tag of this.decorations.keys()) {\n             byTag.set(tag, []);\n         }\n@@ -84,9 +102,23 @@ export class Highlighter {\n             if (!byTag.get(d.tag)) {\n                 continue;\n             }\n-            byTag\n-                .get(d.tag)!\n-                .push(Server.client.protocol2CodeConverter.asRange(d.range));\n+\n+            if (rainbowTime && d.bindingHash) {\n+                if (!colorfulIdents.has(d.bindingHash)) {\n+                    colorfulIdents.set(d.bindingHash, []);\n+                }\n+                colorfulIdents\n+                    .get(d.bindingHash)!\n+                    .push(\n+                        Server.client.protocol2CodeConverter.asRange(d.range)\n+                    );\n+            } else {\n+                byTag\n+                    .get(d.tag)!\n+                    .push(\n+                        Server.client.protocol2CodeConverter.asRange(d.range)\n+                    );\n+            }\n         }\n \n         for (const tag of byTag.keys()) {\n@@ -96,5 +128,13 @@ export class Highlighter {\n             const ranges = byTag.get(tag)!;\n             editor.setDecorations(dec, ranges);\n         }\n+\n+        for (const [hash, ranges] of colorfulIdents.entries()) {\n+            const dec = vscode.window.createTextEditorDecorationType({\n+                light: { color: fancify(hash, 'light') },\n+                dark: { color: fancify(hash, 'dark') }\n+            });\n+            editor.setDecorations(dec, ranges);\n+        }\n     }\n }"}]}