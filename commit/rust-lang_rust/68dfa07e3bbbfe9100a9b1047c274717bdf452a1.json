{"sha": "68dfa07e3bbbfe9100a9b1047c274717bdf452a1", "node_id": "C_kwDOAAsO6NoAKDY4ZGZhMDdlM2JiYmZlOTEwMGE5YjEwNDdjMjc0NzE3YmRmNDUyYTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-10T15:59:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-10T15:59:28Z"}, "message": "Auto merge of #89633 - rhysd:issue-65230, r=petrochenkov\n\nShow detailed expected/found types in error message when trait paths are the same\n\nFixes #65230.\n\n### Issue solved by this PR\n\n```rust\ntrait T {\n    type U;\n    fn f(&self) -> Self::U;\n}\n\nstruct X<'a>(&'a mut i32);\n\nimpl<'a> T for X<'a> {\n    type U = &'a i32;\n    fn f(&self) -> Self::U {\n        self.0\n    }\n}\n\nfn main() {}\n```\n\nCompiler generates the following note:\n\n```\nnote: ...so that the types are compatible\n  --> test.rs:10:28\n   |\n10 |       fn f(&self) -> Self::U {\n   |  ____________________________^\n11 | |         self.0\n12 | |     }\n   | |_____^\n   = note: expected `T`\n              found `T`\n```\n\nThis note is not useful since the expected type and the found type are the same.\n\n### How this PR solve the issue\n\nWhen the expected type and the found type are exactly the same in string representation, the note falls back to the detailed string representation of trait ref:\n\n```\nnote: ...so that the types are compatible\n  --> test.rs:10:28\n   |\n10 |       fn f(&self) -> Self::U {\n   |  ____________________________^\n11 | |         self.0\n12 | |     }\n   | |_____^\n   = note: expected `<X<'a> as T>`\n              found `<X<'_> as T>`\n```\n\nSo that a user can notice what was different between the expected one and the found one.", "tree": {"sha": "dcbae8f386e9c59bab4a2c18d183f2bc687fad24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcbae8f386e9c59bab4a2c18d183f2bc687fad24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68dfa07e3bbbfe9100a9b1047c274717bdf452a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68dfa07e3bbbfe9100a9b1047c274717bdf452a1", "html_url": "https://github.com/rust-lang/rust/commit/68dfa07e3bbbfe9100a9b1047c274717bdf452a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68dfa07e3bbbfe9100a9b1047c274717bdf452a1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c87288f92b7e6365d61cfbcbc453ea4c696c030", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c87288f92b7e6365d61cfbcbc453ea4c696c030", "html_url": "https://github.com/rust-lang/rust/commit/0c87288f92b7e6365d61cfbcbc453ea4c696c030"}, {"sha": "9211beef087b1c87bb0335cac0c3b0676af7f54a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9211beef087b1c87bb0335cac0c3b0676af7f54a", "html_url": "https://github.com/rust-lang/rust/commit/9211beef087b1c87bb0335cac0c3b0676af7f54a"}], "stats": {"total": 79, "additions": 59, "deletions": 20}, "files": [{"sha": "056709cd314d1a8f9c689411ee9d1299bf646b19", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/68dfa07e3bbbfe9100a9b1047c274717bdf452a1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dfa07e3bbbfe9100a9b1047c274717bdf452a1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=68dfa07e3bbbfe9100a9b1047c274717bdf452a1", "patch": "@@ -2060,14 +2060,24 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     expected: exp_found.expected.print_only_trait_path(),\n                     found: exp_found.found.print_only_trait_path(),\n                 };\n-                self.expected_found_str(pretty_exp_found)\n+                match self.expected_found_str(pretty_exp_found) {\n+                    Some((expected, found)) if expected == found => {\n+                        self.expected_found_str(exp_found)\n+                    }\n+                    ret => ret,\n+                }\n             }\n             infer::PolyTraitRefs(exp_found) => {\n                 let pretty_exp_found = ty::error::ExpectedFound {\n                     expected: exp_found.expected.print_only_trait_path(),\n                     found: exp_found.found.print_only_trait_path(),\n                 };\n-                self.expected_found_str(pretty_exp_found)\n+                match self.expected_found_str(pretty_exp_found) {\n+                    Some((expected, found)) if expected == found => {\n+                        self.expected_found_str(exp_found)\n+                    }\n+                    ret => ret,\n+                }\n             }\n         }\n     }"}, {"sha": "0ac03195fa3418481d6d1419f129b2db8aad9af7", "filename": "src/test/ui/error-codes/E0308-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68dfa07e3bbbfe9100a9b1047c274717bdf452a1/src%2Ftest%2Fui%2Ferror-codes%2FE0308-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68dfa07e3bbbfe9100a9b1047c274717bdf452a1/src%2Ftest%2Fui%2Ferror-codes%2FE0308-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308-2.stderr?ref=68dfa07e3bbbfe9100a9b1047c274717bdf452a1", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL | impl Eq for &dyn DynEq {}\n    |      ^^ lifetime mismatch\n    |\n-   = note: expected trait `PartialEq`\n-              found trait `PartialEq`\n+   = note: expected trait `<&dyn DynEq as PartialEq>`\n+              found trait `<&(dyn DynEq + 'static) as PartialEq>`\n note: the lifetime `'_` as defined on the impl at 9:13...\n   --> $DIR/E0308-2.rs:9:13\n    |"}, {"sha": "02c80c2940824ca76c02091170d99e0bec7b58a0", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68dfa07e3bbbfe9100a9b1047c274717bdf452a1/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68dfa07e3bbbfe9100a9b1047c274717bdf452a1/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=68dfa07e3bbbfe9100a9b1047c274717bdf452a1", "patch": "@@ -19,8 +19,8 @@ note: ...so that the types are compatible\n    |\n LL |     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n    |        ^^^^^^^^^\n-   = note: expected `Publisher<'_>`\n-              found `Publisher<'_>`\n+   = note: expected `<MyStruct<'a> as Publisher<'_>>`\n+              found `<MyStruct<'_> as Publisher<'_>>`\n \n error: aborting due to previous error\n "}, {"sha": "54141d2214cd9424041189865bf34d264136ff04", "filename": "src/test/ui/issues/issue-65230.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/68dfa07e3bbbfe9100a9b1047c274717bdf452a1/src%2Ftest%2Fui%2Fissues%2Fissue-65230.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68dfa07e3bbbfe9100a9b1047c274717bdf452a1/src%2Ftest%2Fui%2Fissues%2Fissue-65230.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65230.rs?ref=68dfa07e3bbbfe9100a9b1047c274717bdf452a1", "patch": "@@ -0,0 +1,11 @@\n+trait T0 {}\n+trait T1: T0 {}\n+\n+trait T2 {}\n+\n+impl<'a> T0 for &'a (dyn T2 + 'static) {}\n+\n+impl T1 for &dyn T2 {}\n+//~^ ERROR mismatched types\n+\n+fn main() {}"}, {"sha": "d75428f3d531dd7d1b5acae6fd2e604009c61453", "filename": "src/test/ui/issues/issue-65230.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/68dfa07e3bbbfe9100a9b1047c274717bdf452a1/src%2Ftest%2Fui%2Fissues%2Fissue-65230.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68dfa07e3bbbfe9100a9b1047c274717bdf452a1/src%2Ftest%2Fui%2Fissues%2Fissue-65230.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65230.stderr?ref=68dfa07e3bbbfe9100a9b1047c274717bdf452a1", "patch": "@@ -0,0 +1,18 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-65230.rs:8:6\n+   |\n+LL | impl T1 for &dyn T2 {}\n+   |      ^^ lifetime mismatch\n+   |\n+   = note: expected trait `<&dyn T2 as T0>`\n+              found trait `<&(dyn T2 + 'static) as T0>`\n+note: the lifetime `'_` as defined on the impl at 8:13...\n+  --> $DIR/issue-65230.rs:8:13\n+   |\n+LL | impl T1 for &dyn T2 {}\n+   |             ^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "4e69dda8721d641509f0e6abbf7a8565d555f696", "filename": "src/test/ui/nll/issue-50716.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68dfa07e3bbbfe9100a9b1047c274717bdf452a1/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68dfa07e3bbbfe9100a9b1047c274717bdf452a1/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr?ref=68dfa07e3bbbfe9100a9b1047c274717bdf452a1", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let _x = *s;\n    |         ^^ lifetime mismatch\n    |\n-   = note: expected type `Sized`\n-              found type `Sized`\n+   = note: expected type `<<&'a T as A>::X as Sized>`\n+              found type `<<&'static T as A>::X as Sized>`\n note: the lifetime `'a` as defined on the function body at 9:8...\n   --> $DIR/issue-50716.rs:9:8\n    |"}, {"sha": "9455162732b735036f4df9d53f6066844f694d23", "filename": "src/test/ui/variance/variance-contravariant-self-trait-match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68dfa07e3bbbfe9100a9b1047c274717bdf452a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68dfa07e3bbbfe9100a9b1047c274717bdf452a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.stderr?ref=68dfa07e3bbbfe9100a9b1047c274717bdf452a1", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     impls_get::<&'min G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Get`\n-              found type `Get`\n+   = note: expected type `<&'min G as Get>`\n+              found type `<&'max G as Get>`\n note: the lifetime `'min` as defined on the function body at 10:21...\n   --> $DIR/variance-contravariant-self-trait-match.rs:10:21\n    |\n@@ -23,8 +23,8 @@ error[E0308]: mismatched types\n LL |     impls_get::<&'max G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Get`\n-              found type `Get`\n+   = note: expected type `<&'max G as Get>`\n+              found type `<&'min G as Get>`\n note: the lifetime `'min` as defined on the function body at 16:21...\n   --> $DIR/variance-contravariant-self-trait-match.rs:16:21\n    |"}, {"sha": "3f3a69dde52105a09c4a565016dc6682be270f49", "filename": "src/test/ui/variance/variance-covariant-self-trait-match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68dfa07e3bbbfe9100a9b1047c274717bdf452a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68dfa07e3bbbfe9100a9b1047c274717bdf452a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.stderr?ref=68dfa07e3bbbfe9100a9b1047c274717bdf452a1", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     impls_get::<&'min G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Get`\n-              found type `Get`\n+   = note: expected type `<&'min G as Get>`\n+              found type `<&'max G as Get>`\n note: the lifetime `'min` as defined on the function body at 10:21...\n   --> $DIR/variance-covariant-self-trait-match.rs:10:21\n    |\n@@ -23,8 +23,8 @@ error[E0308]: mismatched types\n LL |     impls_get::<&'max G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Get`\n-              found type `Get`\n+   = note: expected type `<&'max G as Get>`\n+              found type `<&'min G as Get>`\n note: the lifetime `'min` as defined on the function body at 17:21...\n   --> $DIR/variance-covariant-self-trait-match.rs:17:21\n    |"}, {"sha": "a80a5e41d03147d13cf7b7d077b46e154797e078", "filename": "src/test/ui/variance/variance-invariant-self-trait-match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68dfa07e3bbbfe9100a9b1047c274717bdf452a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68dfa07e3bbbfe9100a9b1047c274717bdf452a1/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.stderr?ref=68dfa07e3bbbfe9100a9b1047c274717bdf452a1", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     impls_get::<&'min G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Get`\n-              found type `Get`\n+   = note: expected type `<&'min G as Get>`\n+              found type `<&'max G as Get>`\n note: the lifetime `'min` as defined on the function body at 7:21...\n   --> $DIR/variance-invariant-self-trait-match.rs:7:21\n    |\n@@ -23,8 +23,8 @@ error[E0308]: mismatched types\n LL |     impls_get::<&'max G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Get`\n-              found type `Get`\n+   = note: expected type `<&'max G as Get>`\n+              found type `<&'min G as Get>`\n note: the lifetime `'min` as defined on the function body at 13:21...\n   --> $DIR/variance-invariant-self-trait-match.rs:13:21\n    |"}]}