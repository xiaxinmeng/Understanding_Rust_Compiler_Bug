{"sha": "a08bccb3c142fb98193eed202dbdde85386dd91a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwOGJjY2IzYzE0MmZiOTgxOTNlZWQyMDJkYmRkZTg1Mzg2ZGQ5MWE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-04-11T16:05:02Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-04-30T15:44:24Z"}, "message": "handle ByRef in relate", "tree": {"sha": "e7c1525dc6781a31ce0b5f44c654ecd6f3a28742", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7c1525dc6781a31ce0b5f44c654ecd6f3a28742"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a08bccb3c142fb98193eed202dbdde85386dd91a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a08bccb3c142fb98193eed202dbdde85386dd91a", "html_url": "https://github.com/rust-lang/rust/commit/a08bccb3c142fb98193eed202dbdde85386dd91a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a08bccb3c142fb98193eed202dbdde85386dd91a/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01b3637f6e9c01c003f8d9f9bba6d4a6e3c780a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/01b3637f6e9c01c003f8d9f9bba6d4a6e3c780a9", "html_url": "https://github.com/rust-lang/rust/commit/01b3637f6e9c01c003f8d9f9bba6d4a6e3c780a9"}], "stats": {"total": 89, "additions": 87, "deletions": 2}, "files": [{"sha": "4bfa46367d0c471808f699a38b4a44585c10aacc", "filename": "src/librustc_middle/ty/relate.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a08bccb3c142fb98193eed202dbdde85386dd91a/src%2Flibrustc_middle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08bccb3c142fb98193eed202dbdde85386dd91a/src%2Flibrustc_middle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Frelate.rs?ref=a08bccb3c142fb98193eed202dbdde85386dd91a", "patch": "@@ -11,6 +11,7 @@ use crate::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_hir as ast;\n use rustc_hir::def_id::DefId;\n+use rustc_span::DUMMY_SP;\n use rustc_target::spec::abi;\n use std::iter;\n use std::rc::Rc;\n@@ -507,6 +508,7 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n     a: &'tcx ty::Const<'tcx>,\n     b: &'tcx ty::Const<'tcx>,\n ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n+    debug!(\"{}.super_relate_consts(a = {:?}, b = {:?})\", relation.tag(), a, b);\n     let tcx = relation.tcx();\n \n     let eagerly_eval = |x: &'tcx ty::Const<'tcx>| {\n@@ -561,7 +563,7 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n                     }\n                 }\n \n-                (a_val @ ConstValue::Slice { .. }, b_val @ ConstValue::Slice { .. }) => {\n+                (ConstValue::Slice { .. }, ConstValue::Slice { .. }) => {\n                     let a_bytes = get_slice_bytes(&tcx, a_val);\n                     let b_bytes = get_slice_bytes(&tcx, b_val);\n                     if a_bytes == b_bytes {\n@@ -571,7 +573,37 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n                     }\n                 }\n \n-                // FIXME(const_generics): handle `ConstValue::ByRef`.\n+                (ConstValue::ByRef { .. }, ConstValue::ByRef { .. }) => {\n+                    match a.ty.kind {\n+                        ty::Array(..) | ty::Adt(..) | ty::Tuple(..) => {\n+                            let a_destructured = tcx.destructure_const(relation.param_env().and(a));\n+                            let b_destructured = tcx.destructure_const(relation.param_env().and(b));\n+\n+                            // Both the variant and each field have to be equal.\n+                            if a_destructured.variant == b_destructured.variant {\n+                                for (a_field, b_field) in\n+                                    a_destructured.fields.iter().zip(b_destructured.fields.iter())\n+                                {\n+                                    relation.consts(a_field, b_field)?;\n+                                }\n+\n+                                Ok(a_val)\n+                            } else {\n+                                Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n+                            }\n+                        }\n+                        // FIXME(const_generics): There are probably some `TyKind`s\n+                        // which should be handled here.\n+                        _ => {\n+                            tcx.sess.delay_span_bug(\n+                                DUMMY_SP,\n+                                &format!(\"unexpected consts: a: {:?}, b: {:?}\", a, b),\n+                            );\n+                            Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n+                        }\n+                    }\n+                }\n+\n                 _ => Err(TypeError::ConstMismatch(expected_found(relation, &a, &b))),\n             };\n "}, {"sha": "c52a5b8061dbff49346d4f722044dfa27a89bc82", "filename": "src/test/ui/const-generics/different_byref.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a08bccb3c142fb98193eed202dbdde85386dd91a/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08bccb3c142fb98193eed202dbdde85386dd91a/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.rs?ref=a08bccb3c142fb98193eed202dbdde85386dd91a", "patch": "@@ -0,0 +1,11 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct Const<const V: [usize; 1]> {}\n+\n+fn main() {\n+    let mut x = Const::<{ [3] }> {};\n+    x = Const::<{ [4] }> {};\n+    //~^ ERROR mismatched types\n+\n+}"}, {"sha": "9ea2aace89aaed5267bafea4c7725764479bf071", "filename": "src/test/ui/const-generics/different_byref.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a08bccb3c142fb98193eed202dbdde85386dd91a/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a08bccb3c142fb98193eed202dbdde85386dd91a/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr?ref=a08bccb3c142fb98193eed202dbdde85386dd91a", "patch": "@@ -0,0 +1,20 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/different_byref.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0308]: mismatched types\n+  --> $DIR/different_byref.rs:8:9\n+   |\n+LL |     x = Const::<{ [4] }> {};\n+   |         ^^^^^^^^^^^^^^^^^^^ expected `3usize`, found `4usize`\n+   |\n+   = note: expected struct `Const<[3usize]>`\n+              found struct `Const<[4usize]>`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "140bb28ec5a4f17d6c9ff6db032fa046fab33455", "filename": "src/test/ui/const-generics/issues/issue-68615-adt.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a08bccb3c142fb98193eed202dbdde85386dd91a/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08bccb3c142fb98193eed202dbdde85386dd91a/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.rs?ref=a08bccb3c142fb98193eed202dbdde85386dd91a", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Const<const V: [usize; 0]> {}\n+type MyConst = Const<{ [] }>;\n+\n+fn main() {\n+    let _x = Const::<{ [] }> {};\n+    let _y = MyConst {};\n+}"}, {"sha": "c384bc1e36d023f81cba9a067bacaa52b7e5618e", "filename": "src/test/ui/const-generics/issues/issue-68615-array.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a08bccb3c142fb98193eed202dbdde85386dd91a/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08bccb3c142fb98193eed202dbdde85386dd91a/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.rs?ref=a08bccb3c142fb98193eed202dbdde85386dd91a", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<const V: [usize; 0] > {}\n+\n+type MyFoo = Foo<{ [] }>;\n+\n+fn main() {\n+    let _ = Foo::<{ [] }> {};\n+}"}]}