{"sha": "dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYmVkZjc4YTA4ZjVlY2I4NmQyZTI4MTY2NTdiMjhmNmViNGI4M2Q=", "commit": {"author": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2017-11-14T01:13:26Z"}, "committer": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2017-11-14T13:24:28Z"}, "message": "Add context to E0084, E00517, E0518\n\nShow both the attribute and the item", "tree": {"sha": "dd3e4e3643b5de93ad581807564689134d546b97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd3e4e3643b5de93ad581807564689134d546b97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d", "html_url": "https://github.com/rust-lang/rust/commit/dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d/comments", "author": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24840dab0bef0047beb428e1c15e9a851f732dcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/24840dab0bef0047beb428e1c15e9a851f732dcc", "html_url": "https://github.com/rust-lang/rust/commit/24840dab0bef0047beb428e1c15e9a851f732dcc"}], "stats": {"total": 91, "additions": 49, "deletions": 42}, "files": [{"sha": "05c371113b4c40ce26d098d7ff2192206d31e612", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d", "patch": "@@ -47,27 +47,27 @@ struct CheckAttrVisitor<'a> {\n \n impl<'a> CheckAttrVisitor<'a> {\n     /// Check any attribute.\n-    fn check_attribute(&self, attr: &ast::Attribute, target: Target) {\n+    fn check_attribute(&self, attr: &ast::Attribute, item: &ast::Item, target: Target) {\n         if let Some(name) = attr.name() {\n             match &*name.as_str() {\n-                \"inline\" => self.check_inline(attr, target),\n-                \"repr\" => self.check_repr(attr, target),\n+                \"inline\" => self.check_inline(attr, item, target),\n+                \"repr\" => self.check_repr(attr, item, target),\n                 _ => (),\n             }\n         }\n     }\n \n     /// Check if an `#[inline]` is applied to a function.\n-    fn check_inline(&self, attr: &ast::Attribute, target: Target) {\n+    fn check_inline(&self, attr: &ast::Attribute, item: &ast::Item, target: Target) {\n         if target != Target::Fn {\n             struct_span_err!(self.sess, attr.span, E0518, \"attribute should be applied to function\")\n-                .span_label(attr.span, \"requires a function\")\n+                .span_label(item.span, \"not a function\")\n                 .emit();\n         }\n     }\n \n     /// Check if an `#[repr]` attr is valid.\n-    fn check_repr(&self, attr: &ast::Attribute, target: Target) {\n+    fn check_repr(&self, attr: &ast::Attribute, item: &ast::Item, target: Target) {\n         let words = match attr.meta_item_list() {\n             Some(words) => words,\n             None => {\n@@ -139,7 +139,7 @@ impl<'a> CheckAttrVisitor<'a> {\n                 _ => continue,\n             };\n             struct_span_err!(self.sess, attr.span, E0517, \"{}\", message)\n-                .span_label(attr.span, format!(\"requires {}\", label))\n+                .span_label(item.span, format!(\"not {}\", label))\n                 .emit();\n         }\n         if conflicting_reprs > 1 {\n@@ -153,7 +153,7 @@ impl<'a> Visitor<'a> for CheckAttrVisitor<'a> {\n     fn visit_item(&mut self, item: &'a ast::Item) {\n         let target = Target::from_item(item);\n         for attr in &item.attrs {\n-            self.check_attribute(attr, target);\n+            self.check_attribute(attr, item, target);\n         }\n         visit::walk_item(self, item);\n     }"}, {"sha": "002c003eabfd3ba63dada9d48f129b1a192ecb2b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d", "patch": "@@ -117,6 +117,7 @@ use std::mem::replace;\n use std::ops::{self, Deref};\n use syntax::abi::Abi;\n use syntax::ast;\n+use syntax::attr;\n use syntax::codemap::{self, original_sp, Spanned};\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::ptr::P;\n@@ -1561,12 +1562,15 @@ pub fn check_enum<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let def = tcx.adt_def(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n \n-    if vs.is_empty() && tcx.has_attr(def_id, \"repr\") {\n-        struct_span_err!(\n-            tcx.sess, sp, E0084,\n-            \"unsupported representation for zero-variant enum\")\n-            .span_label(sp, \"unsupported enum representation\")\n-            .emit();\n+    if vs.is_empty() {\n+        let attributes = tcx.get_attrs(def_id);\n+        if let Some(attr) = attr::find_by_name(&attributes, \"repr\") {\n+            struct_span_err!(\n+                tcx.sess, attr.span, E0084,\n+                \"unsupported representation for zero-variant enum\")\n+                .span_label(sp, \"zero-variant enum\")\n+                .emit();\n+        }\n     }\n \n     let repr_type_ty = def.repr.discr_type().to_ty(tcx);"}, {"sha": "8d0cf20008cf8905c3f6326154e0ab731d0740c6", "filename": "src/test/compile-fail/E0084.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d/src%2Ftest%2Fcompile-fail%2FE0084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d/src%2Ftest%2Fcompile-fail%2FE0084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0084.rs?ref=dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[repr(i32)]\n-enum Foo {}\n-//~^ ERROR E0084\n-//~| unsupported enum representation\n+#[repr(i32)] //~ ERROR E0084\n+enum Foo {} //~ zero-variant enum\n \n fn main() {\n }"}, {"sha": "0de2ec12fa3ca53048df07b7637c7ef42ab6b5f2", "filename": "src/test/compile-fail/E0517.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d/src%2Ftest%2Fcompile-fail%2FE0517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d/src%2Ftest%2Fcompile-fail%2FE0517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0517.rs?ref=dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d", "patch": "@@ -9,20 +9,16 @@\n // except according to those terms.\n \n #[repr(C)] //~ ERROR E0517\n-           //~| requires a struct, enum or union\n-type Foo = u8;\n+type Foo = u8; //~ not a struct, enum or union\n \n #[repr(packed)] //~ ERROR E0517\n-                //~| requires a struct\n-enum Foo2 {Bar, Baz}\n+enum Foo2 {Bar, Baz} //~ not a struct\n \n #[repr(u8)] //~ ERROR E0517\n-            //~| requires an enum\n-struct Foo3 {bar: bool, baz: bool}\n+struct Foo3 {bar: bool, baz: bool} //~ not an enum\n \n #[repr(C)] //~ ERROR E0517\n-           //~| requires a struct, enum or union\n-impl Foo3 {\n+impl Foo3 { //~ not a struct, enum or union\n }\n \n fn main() {"}, {"sha": "8de32bd3b771e5af44fce81c7b7ead51a06a4c0a", "filename": "src/test/compile-fail/E0518.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d/src%2Ftest%2Fcompile-fail%2FE0518.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d/src%2Ftest%2Fcompile-fail%2FE0518.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0518.rs?ref=dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d", "patch": "@@ -9,12 +9,10 @@\n // except according to those terms.\n \n #[inline(always)] //~ ERROR E0518\n-                  //~| requires a function\n-struct Foo;\n+struct Foo;       //~ not a function\n \n #[inline(never)] //~ ERROR E0518\n-                 //~| requires a function\n-impl Foo {\n+impl Foo {       //~ not a function\n }\n \n fn main() {"}, {"sha": "40edbe86c7b3c65f37aedc1794af7a8afd14fcb0", "filename": "src/test/compile-fail/attr-usage-inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d/src%2Ftest%2Fcompile-fail%2Fattr-usage-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d/src%2Ftest%2Fcompile-fail%2Fattr-usage-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-usage-inline.rs?ref=dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d", "patch": "@@ -14,6 +14,6 @@\n fn f() {}\n \n #[inline] //~ ERROR: attribute should be applied to function\n-struct S;\n+struct S; //~ not a function\n \n fn main() {}"}, {"sha": "5e0259cb22914dc88f7078056c8bdec1db6b8d48", "filename": "src/test/compile-fail/attr-usage-repr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d/src%2Ftest%2Fcompile-fail%2Fattr-usage-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d/src%2Ftest%2Fcompile-fail%2Fattr-usage-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-usage-repr.rs?ref=dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d", "patch": "@@ -13,7 +13,7 @@\n #![feature(repr_simd)]\n \n #[repr(C)] //~ ERROR: attribute should be applied to struct, enum or union\n-fn f() {}\n+fn f() {}  //~ not a struct, enum or union\n \n #[repr(C)]\n struct SExtern(f64, f64);\n@@ -25,19 +25,19 @@ struct SPacked(f64, f64);\n struct SSimd(f64, f64);\n \n #[repr(i8)] //~ ERROR: attribute should be applied to enum\n-struct SInt(f64, f64);\n+struct SInt(f64, f64); //~ not an enum\n \n #[repr(C)]\n enum EExtern { A, B }\n \n #[repr(align(8))] //~ ERROR: attribute should be applied to struct\n-enum EAlign { A, B }\n+enum EAlign { A, B } // not a struct\n \n #[repr(packed)] //~ ERROR: attribute should be applied to struct\n-enum EPacked { A, B }\n+enum EPacked { A, B } // not a struct\n \n #[repr(simd)] //~ ERROR: attribute should be applied to struct\n-enum ESimd { A, B }\n+enum ESimd { A, B } // not a struct\n \n #[repr(i8)]\n enum EInt { A, B }"}, {"sha": "d86eb50c4aeebc2f25f3bb8627c212c57a693953", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-inline.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs?ref=dcbedf78a08f5ecb86d2e2816657b28f6eb4b83d", "patch": "@@ -21,17 +21,28 @@\n #[inline = \"2100\"]\n //~^ ERROR attribute should be applied to function\n mod inline {\n-    mod inner { #![inline=\"2100\"] }\n-    //~^ ERROR attribute should be applied to function\n+//~^ not a function\n+    mod inner {\n+    //~^ not a function\n+        #![inline=\"2100\"]\n+        //~^ ERROR attribute should be applied to function\n+    }\n \n-    #[inline = \"2100\"] fn f() { }\n+    #[inline = \"2100\"]\n+    fn f() { }\n \n-    #[inline = \"2100\"] struct S;\n+    #[inline = \"2100\"]\n     //~^ ERROR attribute should be applied to function\n+    struct S;\n+    //~^ not a function\n \n-    #[inline = \"2100\"] type T = S;\n+    #[inline = \"2100\"]\n     //~^ ERROR attribute should be applied to function\n+    type T = S;\n+    //~^ not a function\n \n-    #[inline = \"2100\"] impl S { }\n+    #[inline = \"2100\"]\n     //~^ ERROR attribute should be applied to function\n+    impl S { }\n+    //~^ not a function\n }"}]}