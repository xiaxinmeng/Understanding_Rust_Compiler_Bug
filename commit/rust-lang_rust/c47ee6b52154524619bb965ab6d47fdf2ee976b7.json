{"sha": "c47ee6b52154524619bb965ab6d47fdf2ee976b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0N2VlNmI1MjE1NDUyNDYxOWJiOTY1YWI2ZDQ3ZmRmMmVlOTc2Yjc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-09-13T11:46:54Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-09-13T11:46:54Z"}, "message": "Rustup part 2/2", "tree": {"sha": "f56d5ebadae1971a1786e2b5de657225cb704ab2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f56d5ebadae1971a1786e2b5de657225cb704ab2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c47ee6b52154524619bb965ab6d47fdf2ee976b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlm5Gq4ACgkQpp+NIls6\n19kF6g/+LMN3Vu9M1Kot94S0PfIMf8zXiNPbhYp1uA6hBsrW2hszgbCk065UJReT\npdwWLHohb6Q9bKXG9UOR1ewJJdIrpQ5jLbZA1qcTK84SGij//fJQD2JSv7HxqTBc\nbuGf/R18FJd++/3QfD0Zjv++iIDaVpnDIHIiacMd1zKkmOmvboN5bn6VdKVon4AA\nsL8rk3iGo3RbLMtvdGXXM3LH2THuuO6N+WQlYq1VuNF3htCNwilpQ53UM268Ts8v\nrRoOzXGsADZgLIBgc/0hOEhc8MeRJS83MLAYmXb/Fy2XMd563/tkrYMZe3KFgc0y\nT1vPYo5GE/KOu7lORQq7xu1+NuEZRNyu1edDffzDV2GJJGC8VRnps/9/0BwVuixM\nq1ST/J/OtVNoR1ozMbcOJxniGFd7FajlF6tCaMMekAWiLWMpwls+X9gDE43Gi11w\nix+paBalsxCNRPQn7AkUd6CKxBEm5NzxDR4PWhHC2ecUze2YnzFpO/qApSubALS2\nFhSSoyL9fc3okPefZ4yXCpaD2YzNerb+pHQN1vGSbeU85RN0W4cpLY/cwETBIn7I\n6ZWfWR7zlib5yAUjR69a3DBM2W5wiREZdXNqVxDOAqfvWw8gMA+D13ZTTjCV//hk\nHmJAVVuWchtnSeCiE6bE3S9aev3W5S0mJvjH6y/HiGLMn7e8m1s=\n=EhjI\n-----END PGP SIGNATURE-----", "payload": "tree f56d5ebadae1971a1786e2b5de657225cb704ab2\nparent 79993e63a080c5472c1dabe222d827c2ac254708\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1505303214 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1505303214 +0200\n\nRustup part 2/2\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c47ee6b52154524619bb965ab6d47fdf2ee976b7", "html_url": "https://github.com/rust-lang/rust/commit/c47ee6b52154524619bb965ab6d47fdf2ee976b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c47ee6b52154524619bb965ab6d47fdf2ee976b7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79993e63a080c5472c1dabe222d827c2ac254708", "url": "https://api.github.com/repos/rust-lang/rust/commits/79993e63a080c5472c1dabe222d827c2ac254708", "html_url": "https://github.com/rust-lang/rust/commit/79993e63a080c5472c1dabe222d827c2ac254708"}], "stats": {"total": 85, "additions": 48, "deletions": 37}, "files": [{"sha": "5ae7c9da31c09b939878bc8815f5a924df46e9f6", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c47ee6b52154524619bb965ab6d47fdf2ee976b7/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47ee6b52154524619bb965ab6d47fdf2ee976b7/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=c47ee6b52154524619bb965ab6d47fdf2ee976b7", "patch": "@@ -38,36 +38,45 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         self.cast_from_int(val as u128, ty, val < 0)\n     }\n \n+    fn int_to_int(&self, v: i128, ty: IntTy) -> u128 {\n+        match ty {\n+            IntTy::I8 => v as i8 as u128,\n+            IntTy::I16 => v as i16 as u128,\n+            IntTy::I32 => v as i32 as u128,\n+            IntTy::I64 => v as i64 as u128,\n+            IntTy::I128 => v as u128,\n+            IntTy::Is => {\n+                let ty = self.tcx.sess.target.isize_ty;\n+                self.int_to_int(v, ty)\n+            }\n+        }\n+    }\n+    fn int_to_uint(&self, v: u128, ty: UintTy) -> u128 {\n+        match ty {\n+            UintTy::U8 => v as u8 as u128,\n+            UintTy::U16 => v as u16 as u128,\n+            UintTy::U32 => v as u32 as u128,\n+            UintTy::U64 => v as u64 as u128,\n+            UintTy::U128 => v,\n+            UintTy::Us => {\n+                let ty = self.tcx.sess.target.usize_ty;\n+                self.int_to_uint(v, ty)\n+            }\n+        }\n+    }\n+\n     fn cast_from_int(\n         &self,\n         v: u128,\n         ty: ty::Ty<'tcx>,\n         negative: bool,\n     ) -> EvalResult<'tcx, PrimVal> {\n+        trace!(\"cast_from_int: {}, {}, {}\", v, ty, negative);\n         use rustc::ty::TypeVariants::*;\n         match ty.sty {\n             // Casts to bool are not permitted by rustc, no need to handle them here.\n-            TyInt(IntTy::I8) => Ok(PrimVal::Bytes(v as i128 as i8 as u128)),\n-            TyInt(IntTy::I16) => Ok(PrimVal::Bytes(v as i128 as i16 as u128)),\n-            TyInt(IntTy::I32) => Ok(PrimVal::Bytes(v as i128 as i32 as u128)),\n-            TyInt(IntTy::I64) => Ok(PrimVal::Bytes(v as i128 as i64 as u128)),\n-            TyInt(IntTy::I128) => Ok(PrimVal::Bytes(v as u128)),\n-\n-            TyUint(UintTy::U8) => Ok(PrimVal::Bytes(v as u8 as u128)),\n-            TyUint(UintTy::U16) => Ok(PrimVal::Bytes(v as u16 as u128)),\n-            TyUint(UintTy::U32) => Ok(PrimVal::Bytes(v as u32 as u128)),\n-            TyUint(UintTy::U64) => Ok(PrimVal::Bytes(v as u64 as u128)),\n-            TyUint(UintTy::U128) => Ok(PrimVal::Bytes(v)),\n-\n-            TyInt(IntTy::Is) => {\n-                let ty = self.tcx.types.isize;\n-                self.cast_from_int(v, ty, negative)\n-            }\n-\n-            TyUint(UintTy::Us) => {\n-                let ty = self.tcx.types.usize;\n-                self.cast_from_int(v, ty, negative)\n-            }\n+            TyInt(ty) => Ok(PrimVal::Bytes(self.int_to_int(v as i128, ty))),\n+            TyUint(ty) => Ok(PrimVal::Bytes(self.int_to_uint(v, ty))),\n \n             TyFloat(FloatTy::F64) if negative => Ok(PrimVal::from_f64(v as i128 as f64)),\n             TyFloat(FloatTy::F64) => Ok(PrimVal::from_f64(v as f64)),"}, {"sha": "0a23e0569313de5935ed0c258717afb6a9709da9", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c47ee6b52154524619bb965ab6d47fdf2ee976b7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47ee6b52154524619bb965ab6d47fdf2ee976b7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=c47ee6b52154524619bb965ab6d47fdf2ee976b7", "patch": "@@ -240,10 +240,20 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             Str(ref s) => return self.str_to_value(s),\n \n             ByteStr(ref bs) => {\n-                let ptr = self.memory.allocate_cached(bs)?;\n+                let ptr = self.memory.allocate_cached(bs.data)?;\n                 PrimVal::Ptr(ptr)\n             }\n \n+            Unevaluated(def_id, substs) => {\n+                let instance = self.resolve_associated_const(def_id, substs);\n+                let cid = GlobalId {\n+                    instance,\n+                    promoted: None,\n+                };\n+                return Ok(Value::ByRef(*self.globals.get(&cid).expect(\"static/const not cached\")));\n+            }\n+\n+            Aggregate(..) |\n             Variant(_) => unimplemented!(),\n             // function items are zero sized and thus have no readable value\n             Function(..) => PrimVal::Undef,\n@@ -1284,16 +1294,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 use rustc::mir::Literal;\n                 let mir::Constant { ref literal, .. } = **constant;\n                 let value = match *literal {\n-                    Literal::Value { ref value } => self.const_to_value(value)?,\n-\n-                    Literal::Item { def_id, substs } => {\n-                        let instance = self.resolve_associated_const(def_id, substs);\n-                        let cid = GlobalId {\n-                            instance,\n-                            promoted: None,\n-                        };\n-                        Value::ByRef(*self.globals.get(&cid).expect(\"static/const not cached\"))\n-                    }\n+                    Literal::Value { ref value } => self.const_to_value(&value.val)?,\n \n                     Literal::Promoted { index } => {\n                         let cid = GlobalId {\n@@ -2501,7 +2502,7 @@ struct AssociatedTypeNormalizer<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> AssociatedTypeNormalizer<'a, 'tcx> {\n     fn fold<T: TypeFoldable<'tcx>>(&mut self, value: &T) -> T {\n-        if !value.has_projection_types() {\n+        if !value.has_projections() {\n             value.clone()\n         } else {\n             value.fold_with(self)\n@@ -2515,7 +2516,7 @@ impl<'a, 'tcx> ::rustc::ty::fold::TypeFolder<'tcx, 'tcx> for AssociatedTypeNorma\n     }\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        if !ty.has_projection_types() {\n+        if !ty.has_projections() {\n             ty\n         } else {\n             self.tcx.normalize_associated_type(&ty)"}, {"sha": "05f1bd10e87e85efac1f516f15896001a9f38c05", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c47ee6b52154524619bb965ab6d47fdf2ee976b7/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47ee6b52154524619bb965ab6d47fdf2ee976b7/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=c47ee6b52154524619bb965ab6d47fdf2ee976b7", "patch": "@@ -10,6 +10,7 @@ use rustc::traits::Reveal;\n use rustc::ty;\n use rustc::ty::layout::Layout;\n use rustc::ty::subst::Substs;\n+use rustc::middle::const_val::ConstVal;\n \n use super::{EvalResult, EvalContext, StackPopCleanup, PtrAndAlign, GlobalId, Lvalue,\n             MemoryKind, Machine, PrimVal};\n@@ -300,8 +301,7 @@ impl<'a, 'b, 'tcx, M: Machine<'tcx>> Visitor<'tcx> for ConstantExtractor<'a, 'b,\n         self.super_constant(constant, location);\n         match constant.literal {\n             // already computed by rustc\n-            mir::Literal::Value { .. } => {}\n-            mir::Literal::Item { def_id, substs } => {\n+            mir::Literal::Value { value: &ty::Const { val: ConstVal::Unevaluated(def_id, substs), .. } } => {\n                 self.try(|this| {\n                     this.ecx.global_item(\n                         def_id,\n@@ -311,6 +311,7 @@ impl<'a, 'b, 'tcx, M: Machine<'tcx>> Visitor<'tcx> for ConstantExtractor<'a, 'b,\n                     )\n                 });\n             }\n+            mir::Literal::Value { .. } => {}\n             mir::Literal::Promoted { index } => {\n                 let cid = GlobalId {\n                     instance: self.instance,"}, {"sha": "2477001bec49ab8c14b4a8d7f858a1a18932ac09", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c47ee6b52154524619bb965ab6d47fdf2ee976b7/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47ee6b52154524619bb965ab6d47fdf2ee976b7/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=c47ee6b52154524619bb965ab6d47fdf2ee976b7", "patch": "@@ -246,7 +246,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         {\n             let param_env = ty::ParamEnv::empty(Reveal::All);\n \n-            if !value.has_projection_types() {\n+            if !value.has_projections() {\n                 return value.clone();\n             }\n "}]}