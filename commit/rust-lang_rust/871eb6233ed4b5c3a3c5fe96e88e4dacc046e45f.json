{"sha": "871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MWViNjIzM2VkNGI1YzNhM2M1ZmU5NmU4OGU0ZGFjYzA0NmU0NWY=", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-08-31T23:49:14Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-09-05T17:13:32Z"}, "message": "Stop allocating vtable entries for non-object-safe methods", "tree": {"sha": "18d01cfbcf7f65008b16e83fed3394b0d26d9d5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18d01cfbcf7f65008b16e83fed3394b0d26d9d5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f", "html_url": "https://github.com/rust-lang/rust/commit/871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03c775c95596cbd92f2b1e8ca98e7addfa3eade2", "url": "https://api.github.com/repos/rust-lang/rust/commits/03c775c95596cbd92f2b1e8ca98e7addfa3eade2", "html_url": "https://github.com/rust-lang/rust/commit/03c775c95596cbd92f2b1e8ca98e7addfa3eade2"}], "stats": {"total": 66, "additions": 54, "deletions": 12}, "files": [{"sha": "f5a02ee7ad205248ea949a6bfd1241d42ad4cfe6", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f", "patch": "@@ -647,14 +647,14 @@ fn vtable_entries<'tcx>(\n                     .filter(|item| item.kind == ty::AssocKind::Fn);\n                 // Now list each method's DefId and InternalSubsts (for within its trait).\n                 // If the method can never be called from this object, produce `Vacant`.\n-                let own_entries = trait_methods.map(move |trait_method| {\n+                let own_entries = trait_methods.filter_map(move |trait_method| {\n                     debug!(\"vtable_entries: trait_method={:?}\", trait_method);\n                     let def_id = trait_method.def_id;\n \n                     // Some methods cannot be called on an object; skip those.\n                     if !is_vtable_safe_method(tcx, trait_ref.def_id(), &trait_method) {\n                         debug!(\"vtable_entries: not vtable safe\");\n-                        return VtblEntry::Vacant;\n+                        return None;\n                     }\n \n                     // The method may have some early-bound lifetimes; add regions for those.\n@@ -681,7 +681,7 @@ fn vtable_entries<'tcx>(\n                     let predicates = tcx.predicates_of(def_id).instantiate_own(tcx, substs);\n                     if impossible_predicates(tcx, predicates.predicates) {\n                         debug!(\"vtable_entries: predicates do not hold\");\n-                        return VtblEntry::Vacant;\n+                        return Some(VtblEntry::Vacant);\n                     }\n \n                     let instance = ty::Instance::resolve_for_vtable(\n@@ -691,7 +691,7 @@ fn vtable_entries<'tcx>(\n                         substs,\n                     )\n                     .expect(\"resolution failed during building vtable representation\");\n-                    VtblEntry::Method(instance)\n+                    Some(VtblEntry::Method(instance))\n                 });\n \n                 entries.extend(own_entries);"}, {"sha": "3b98fe48c8c1bf6d1d39ce2cb0b07731b79967c2", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f", "patch": "@@ -289,7 +289,9 @@ pub fn count_own_vtable_entries(tcx: TyCtxt<'tcx>, trait_ref: ty::PolyTraitRef<'\n     // Count number of methods and add them to the total offset.\n     // Skip over associated types and constants.\n     for trait_item in tcx.associated_items(trait_ref.def_id()).in_definition_order() {\n-        if trait_item.kind == ty::AssocKind::Fn {\n+        let is_vtable_safe_method = trait_item.kind == ty::AssocKind::Fn\n+            && super::is_vtable_safe_method(tcx, trait_ref.def_id(), trait_item);\n+        if is_vtable_safe_method {\n             entries += 1;\n         }\n     }\n@@ -308,13 +310,16 @@ pub fn get_vtable_index_of_object_method<N>(\n     // add them to the total offset.\n     // Skip over associated types and constants, as those aren't stored in the vtable.\n     let mut entries = object.vtable_base;\n-    for trait_item in tcx.associated_items(object.upcast_trait_ref.def_id()).in_definition_order() {\n+    let trait_def_id = object.upcast_trait_ref.def_id();\n+    for trait_item in tcx.associated_items(trait_def_id).in_definition_order() {\n+        let is_vtable_safe_method = trait_item.kind == ty::AssocKind::Fn\n+            && super::is_vtable_safe_method(tcx, trait_def_id, trait_item);\n         if trait_item.def_id == method_def_id {\n             // The item with the ID we were given really ought to be a method.\n-            assert_eq!(trait_item.kind, ty::AssocKind::Fn);\n+            assert!(is_vtable_safe_method);\n             return entries;\n         }\n-        if trait_item.kind == ty::AssocKind::Fn {\n+        if is_vtable_safe_method {\n             entries += 1;\n         }\n     }"}, {"sha": "45b6a8a98a79f9e6204975f95850458d252ab25e", "filename": "src/test/ui/traits/vtable/vtable-non-object-safe.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.rs?ref=871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f", "patch": "@@ -0,0 +1,18 @@\n+// build-fail\n+#![feature(rustc_attrs)]\n+\n+// Ensure that non-object-safe methods in Iterator does not generate\n+// vtable entries.\n+\n+#[rustc_dump_vtable]\n+trait A: Iterator {}\n+//~^ error Vtable\n+\n+impl<T> A for T where T: Iterator {}\n+\n+fn foo(_a: &mut dyn A<Item=u8>) {\n+}\n+\n+fn main() {\n+    foo(&mut vec![0, 1, 2, 3].into_iter());\n+}"}, {"sha": "f3175b805d1b6606bdaa5deff8e6e512ab69de25", "filename": "src/test/ui/traits/vtable/vtable-non-object-safe.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-non-object-safe.stderr?ref=871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f", "patch": "@@ -0,0 +1,16 @@\n+error: Vtable entries for `<std::vec::IntoIter<u8> as A>`: [\n+    MetadataDropInPlace,\n+    MetadataSize,\n+    MetadataAlign,\n+    Method(<std::vec::IntoIter<u8> as Iterator>::next),\n+    Method(<std::vec::IntoIter<u8> as Iterator>::size_hint),\n+    Method(<std::vec::IntoIter<u8> as Iterator>::advance_by),\n+    Method(<std::vec::IntoIter<u8> as Iterator>::nth),\n+]\n+  --> $DIR/vtable-non-object-safe.rs:8:1\n+   |\n+LL | trait A: Iterator {}\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "429ce523799f3e0faa4bd1d93ac4956884ab2132", "filename": "src/test/ui/traits/vtable/vtable-vacant.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.rs?ref=871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f", "patch": "@@ -1,22 +1,25 @@\n // build-fail\n #![feature(rustc_attrs)]\n+#![feature(negative_impls)]\n+#![allow(where_clauses_object_safety)]\n \n // B --> A\n \n #[rustc_dump_vtable]\n trait A {\n     fn foo_a1(&self) {}\n-    fn foo_a2(&self) where Self: Sized {}\n+    fn foo_a2(&self) where Self: Send {}\n }\n \n #[rustc_dump_vtable]\n trait B: A {\n     //~^ error Vtable\n     fn foo_b1(&self) {}\n-    fn foo_b2() where Self: Sized {}\n+    fn foo_b2(&self) where Self: Send {}\n }\n \n struct S;\n+impl !Send for S {}\n \n impl A for S {}\n impl B for S {}"}, {"sha": "f5cd36264fcff94e5a17668c667412e3c23dc376", "filename": "src/test/ui/traits/vtable/vtable-vacant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.stderr?ref=871eb6233ed4b5c3a3c5fe96e88e4dacc046e45f", "patch": "@@ -7,12 +7,12 @@ error: Vtable entries for `<S as B>`: [\n     Method(<S as B>::foo_b1),\n     Vacant,\n ]\n-  --> $DIR/vtable-vacant.rs:13:1\n+  --> $DIR/vtable-vacant.rs:15:1\n    |\n LL | / trait B: A {\n LL | |\n LL | |     fn foo_b1(&self) {}\n-LL | |     fn foo_b2() where Self: Sized {}\n+LL | |     fn foo_b2(&self) where Self: Send {}\n LL | | }\n    | |_^\n "}]}