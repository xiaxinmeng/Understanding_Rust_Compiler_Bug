{"sha": "5956b56ab251b9aafecd2ad6f431c42e069b3058", "node_id": "C_kwDOAAsO6NoAKDU5NTZiNTZhYjI1MWI5YWFmZWNkMmFkNmY0MzFjNDJlMDY5YjMwNTg", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-09-14T13:47:25Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-09-14T15:14:15Z"}, "message": "jsondoclint: Document validator", "tree": {"sha": "982e79f844cd42953ce526d466b5572a8a9565fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/982e79f844cd42953ce526d466b5572a8a9565fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5956b56ab251b9aafecd2ad6f431c42e069b3058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5956b56ab251b9aafecd2ad6f431c42e069b3058", "html_url": "https://github.com/rust-lang/rust/commit/5956b56ab251b9aafecd2ad6f431c42e069b3058", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5956b56ab251b9aafecd2ad6f431c42e069b3058/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c98c7cbfa5e9d9f414101f17abd4639b9541c9e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c98c7cbfa5e9d9f414101f17abd4639b9541c9e7", "html_url": "https://github.com/rust-lang/rust/commit/c98c7cbfa5e9d9f414101f17abd4639b9541c9e7"}], "stats": {"total": 51, "additions": 29, "deletions": 22}, "files": [{"sha": "b3e88a9081383c45c8da593990d5424f2bf0d5a8", "filename": "src/tools/jsondoclint/src/item_kind.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5956b56ab251b9aafecd2ad6f431c42e069b3058/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5956b56ab251b9aafecd2ad6f431c42e069b3058/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs?ref=5956b56ab251b9aafecd2ad6f431c42e069b3058", "patch": "@@ -1,7 +1,6 @@\n use rustdoc_json_types::{Item, ItemEnum, ItemKind, ItemSummary};\n \n-// We want a univeral way to represent an `ItemEnum` or `ItemKind`\n-\n+/// A univeral way to represent an [`ItemEnum`] or [`ItemKind`]\n #[derive(Debug)]\n pub(crate) enum Kind {\n     Module,"}, {"sha": "70d7a82a576059e21a0ddac5ba311634b997c21a", "filename": "src/tools/jsondoclint/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5956b56ab251b9aafecd2ad6f431c42e069b3058/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5956b56ab251b9aafecd2ad6f431c42e069b3058/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs?ref=5956b56ab251b9aafecd2ad6f431c42e069b3058", "patch": "@@ -25,8 +25,6 @@ fn main() -> Result<()> {\n     let path = env::args().nth(1).ok_or_else(|| anyhow!(\"no path given\"))?;\n     let contents = fs::read_to_string(&path)?;\n     let krate: Crate = serde_json::from_str(&contents)?;\n-    // TODO: Only load if nessessary.\n-    let krate_json: Value = serde_json::from_str(&contents)?;\n     assert_eq!(krate.format_version, FORMAT_VERSION);\n \n     let mut validator = validator::Validator::new(&krate);\n@@ -36,6 +34,8 @@ fn main() -> Result<()> {\n         for err in validator.errs {\n             match err.kind {\n                 ErrorKind::NotFound => {\n+                    let krate_json: Value = serde_json::from_str(&contents)?;\n+\n                     let sels =\n                         json_find::find_selector(&krate_json, &Value::String(err.id.0.clone()));\n                     match &sels[..] {"}, {"sha": "efe2c165b6c4ea6b9336d35d090a9e0f9936e990", "filename": "src/tools/jsondoclint/src/validator.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5956b56ab251b9aafecd2ad6f431c42e069b3058/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5956b56ab251b9aafecd2ad6f431c42e069b3058/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs?ref=5956b56ab251b9aafecd2ad6f431c42e069b3058", "patch": "@@ -10,22 +10,24 @@ use rustdoc_json_types::{\n \n use crate::{item_kind::Kind, Error, ErrorKind};\n \n+/// The Validator walks over the JSON tree, and ensures it is well formed.\n+/// It is made of several parts.\n+///\n+/// - `check_*`: These take a type from [`rustdoc_json_types`], and check that\n+///              it is well formed. This involves calling `check_*` functions on\n+///              fields of that item, and `add_*` functions on [`Id`]s.\n+/// - `add_*`: These add an [`Id`] to the worklist, after validating it to check if\n+///            the `Id` is a kind expected in this suituation.\n #[derive(Debug)]\n pub struct Validator<'a> {\n     pub(crate) errs: Vec<Error>,\n     krate: &'a Crate,\n+    /// Worklist of Ids to check.\n+    todo: HashSet<&'a Id>,\n+    /// Ids that have already been visited, so don't need to be checked again.\n     seen_ids: HashSet<&'a Id>,\n+    /// Ids that have already been reported missing.\n     missing_ids: HashSet<&'a Id>,\n-    todo: HashSet<&'a Id>,\n-}\n-\n-fn set_remove<T: Hash + Eq + Clone>(set: &mut HashSet<T>) -> Option<T> {\n-    if let Some(id) = set.iter().next() {\n-        let id = id.clone();\n-        set.take(&id)\n-    } else {\n-        None\n-    }\n }\n \n impl<'a> Validator<'a> {\n@@ -82,6 +84,8 @@ impl<'a> Validator<'a> {\n                     }\n                 }\n             }\n+        } else {\n+            assert!(self.krate.paths.contains_key(id));\n         }\n     }\n \n@@ -336,17 +340,12 @@ impl<'a> Validator<'a> {\n         fp.generic_params.iter().for_each(|gpd| self.check_generic_param_def(gpd));\n     }\n \n-    // Aux functions\n-    fn add_id(&mut self, id: &'a Id) {\n-        if !self.seen_ids.contains(id) {\n-            self.todo.insert(id);\n-        }\n-    }\n-\n     fn add_id_checked(&mut self, id: &'a Id, valid: fn(Kind) -> bool, expected: &str) {\n         if let Some(kind) = self.kind_of(id) {\n             if valid(kind) {\n-                self.add_id(id);\n+                if !self.seen_ids.contains(id) {\n+                    self.todo.insert(id);\n+                }\n             } else {\n                 self.fail_expecting(id, expected);\n             }\n@@ -402,3 +401,12 @@ impl<'a> Validator<'a> {\n         }\n     }\n }\n+\n+fn set_remove<T: Hash + Eq + Clone>(set: &mut HashSet<T>) -> Option<T> {\n+    if let Some(id) = set.iter().next() {\n+        let id = id.clone();\n+        set.take(&id)\n+    } else {\n+        None\n+    }\n+}"}]}