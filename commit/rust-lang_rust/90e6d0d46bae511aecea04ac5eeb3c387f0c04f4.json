{"sha": "90e6d0d46bae511aecea04ac5eeb3c387f0c04f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZTZkMGQ0NmJhZTUxMWFlY2VhMDRhYzVlZWIzYzM4N2YwYzA0ZjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-27T22:59:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-27T22:59:13Z"}, "message": "Auto merge of #75671 - nathanwhit:cstring-temp-lint, r=oli-obk\n\nUplift `temporary-cstring-as-ptr` lint from `clippy` into rustc\n\nThe general consensus seems to be that this lint covers a common enough mistake to warrant inclusion in rustc.\nThe diagnostic message might need some tweaking, as I'm not sure the use of second-person perspective matches the rest of rustc, but I'd like to hear others' thoughts on that.\n\n(cc #53224).\n\nr? `@oli-obk`", "tree": {"sha": "377ed837d5c0484e2b59bdd47e6be583567b0171", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/377ed837d5c0484e2b59bdd47e6be583567b0171"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4", "html_url": "https://github.com/rust-lang/rust/commit/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07e968b640e8ff76fa8be4b48b70ab80ea577800", "url": "https://api.github.com/repos/rust-lang/rust/commits/07e968b640e8ff76fa8be4b48b70ab80ea577800", "html_url": "https://github.com/rust-lang/rust/commit/07e968b640e8ff76fa8be4b48b70ab80ea577800"}, {"sha": "572cd358d379e4e641ad44bc693cdf48ceaf3581", "url": "https://api.github.com/repos/rust-lang/rust/commits/572cd358d379e4e641ad44bc693cdf48ceaf3581", "html_url": "https://github.com/rust-lang/rust/commit/572cd358d379e4e641ad44bc693cdf48ceaf3581"}], "stats": {"total": 318, "additions": 177, "deletions": 141}, "files": [{"sha": "c8990842d32e695fbcdd7f85d442444fbf81cc46", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=90e6d0d46bae511aecea04ac5eeb3c387f0c04f4", "patch": "@@ -49,6 +49,7 @@ mod early;\n mod internal;\n mod late;\n mod levels;\n+mod methods;\n mod non_ascii_idents;\n mod nonstandard_style;\n mod passes;\n@@ -73,6 +74,7 @@ use rustc_span::Span;\n use array_into_iter::ArrayIntoIter;\n use builtin::*;\n use internal::*;\n+use methods::*;\n use non_ascii_idents::*;\n use nonstandard_style::*;\n use redundant_semicolon::*;\n@@ -160,6 +162,7 @@ macro_rules! late_lint_passes {\n                 ArrayIntoIter: ArrayIntoIter,\n                 ClashingExternDeclarations: ClashingExternDeclarations::new(),\n                 DropTraitConstraints: DropTraitConstraints,\n+                TemporaryCStringAsPtr: TemporaryCStringAsPtr,\n             ]\n         );\n     };"}, {"sha": "8732845af0cecc874b21d8b1a2e47c11b1d5b137", "filename": "compiler/rustc_lint/src/methods.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs?ref=90e6d0d46bae511aecea04ac5eeb3c387f0c04f4", "patch": "@@ -0,0 +1,106 @@\n+use crate::LateContext;\n+use crate::LateLintPass;\n+use crate::LintContext;\n+use rustc_hir::{Expr, ExprKind, PathSegment};\n+use rustc_middle::ty;\n+use rustc_span::{symbol::sym, ExpnKind, Span};\n+\n+declare_lint! {\n+    /// The `temporary_cstring_as_ptr` lint detects getting the inner pointer of\n+    /// a temporary `CString`.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// # #![allow(unused)]\n+    /// # use std::ffi::CString;\n+    /// let c_str = CString::new(\"foo\").unwrap().as_ptr();\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// The inner pointer of a `CString` lives only as long as the `CString` it\n+    /// points to. Getting the inner pointer of a *temporary* `CString` allows the `CString`\n+    /// to be dropped at the end of the statement, as it is not being referenced as far as the typesystem\n+    /// is concerned. This means outside of the statement the pointer will point to freed memory, which\n+    /// causes undefined behavior if the pointer is later dereferenced.\n+    pub TEMPORARY_CSTRING_AS_PTR,\n+    Warn,\n+    \"detects getting the inner pointer of a temporary `CString`\"\n+}\n+\n+declare_lint_pass!(TemporaryCStringAsPtr => [TEMPORARY_CSTRING_AS_PTR]);\n+\n+fn in_macro(span: Span) -> bool {\n+    if span.from_expansion() {\n+        !matches!(span.ctxt().outer_expn_data().kind, ExpnKind::Desugaring(..))\n+    } else {\n+        false\n+    }\n+}\n+\n+fn first_method_call<'tcx>(\n+    expr: &'tcx Expr<'tcx>,\n+) -> Option<(&'tcx PathSegment<'tcx>, &'tcx [Expr<'tcx>])> {\n+    if let ExprKind::MethodCall(path, _, args, _) = &expr.kind {\n+        if args.iter().any(|e| e.span.from_expansion()) { None } else { Some((path, *args)) }\n+    } else {\n+        None\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for TemporaryCStringAsPtr {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if in_macro(expr.span) {\n+            return;\n+        }\n+\n+        match first_method_call(expr) {\n+            Some((path, args)) if path.ident.name == sym::as_ptr => {\n+                let unwrap_arg = &args[0];\n+                let as_ptr_span = path.ident.span;\n+                match first_method_call(unwrap_arg) {\n+                    Some((path, args))\n+                        if path.ident.name == sym::unwrap || path.ident.name == sym::expect =>\n+                    {\n+                        let source_arg = &args[0];\n+                        lint_cstring_as_ptr(cx, as_ptr_span, source_arg, unwrap_arg);\n+                    }\n+                    _ => return,\n+                }\n+            }\n+            _ => return,\n+        }\n+    }\n+}\n+\n+fn lint_cstring_as_ptr(\n+    cx: &LateContext<'_>,\n+    as_ptr_span: Span,\n+    source: &rustc_hir::Expr<'_>,\n+    unwrap: &rustc_hir::Expr<'_>,\n+) {\n+    let source_type = cx.typeck_results().expr_ty(source);\n+    if let ty::Adt(def, substs) = source_type.kind() {\n+        if cx.tcx.is_diagnostic_item(sym::result_type, def.did) {\n+            if let ty::Adt(adt, _) = substs.type_at(0).kind() {\n+                if cx.tcx.is_diagnostic_item(sym::cstring_type, adt.did) {\n+                    cx.struct_span_lint(TEMPORARY_CSTRING_AS_PTR, as_ptr_span, |diag| {\n+                        let mut diag = diag\n+                            .build(\"getting the inner pointer of a temporary `CString`\");\n+                        diag.span_label(as_ptr_span, \"this pointer will be invalid\");\n+                        diag.span_label(\n+                            unwrap.span,\n+                            \"this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\",\n+                        );\n+                        diag.note(\"pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\");\n+                        diag.help(\"for more information, see https://doc.rust-lang.org/reference/destructors.html\");\n+                        diag.emit();\n+                    });\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "34c00429cccd0db430699c3900629673d9552d6f", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=90e6d0d46bae511aecea04ac5eeb3c387f0c04f4", "patch": "@@ -127,6 +127,7 @@ symbols! {\n         ArgumentV1,\n         Arguments,\n         C,\n+        CString,\n         Center,\n         Clone,\n         Copy,\n@@ -261,6 +262,7 @@ symbols! {\n         arm_target_feature,\n         array,\n         arrays,\n+        as_ptr,\n         as_str,\n         asm,\n         assert,\n@@ -310,6 +312,7 @@ symbols! {\n         breakpoint,\n         bridge,\n         bswap,\n+        c_str,\n         c_variadic,\n         call,\n         call_mut,\n@@ -397,6 +400,7 @@ symbols! {\n         crate_type,\n         crate_visibility_modifier,\n         crt_dash_static: \"crt-static\",\n+        cstring_type,\n         ctlz,\n         ctlz_nonzero,\n         ctpop,\n@@ -478,6 +482,7 @@ symbols! {\n         existential_type,\n         exp2f32,\n         exp2f64,\n+        expect,\n         expected,\n         expf32,\n         expf64,\n@@ -501,6 +506,7 @@ symbols! {\n         fadd_fast,\n         fdiv_fast,\n         feature,\n+        ffi,\n         ffi_const,\n         ffi_pure,\n         ffi_returns_twice,\n@@ -1170,6 +1176,7 @@ symbols! {\n         unused_qualifications,\n         unwind,\n         unwind_attributes,\n+        unwrap,\n         unwrap_or,\n         use_extern_macros,\n         use_nested_groups,"}, {"sha": "8c6d6c80402fa58b66543e318d64be7ad09fa87c", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=90e6d0d46bae511aecea04ac5eeb3c387f0c04f4", "patch": "@@ -110,6 +110,7 @@ use crate::sys;\n /// of `CString` instances can lead to invalid memory accesses, memory leaks,\n /// and other memory errors.\n #[derive(PartialEq, PartialOrd, Eq, Ord, Hash, Clone)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"cstring_type\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct CString {\n     // Invariant 1: the slice ends with a zero byte and has a length of at least one.\n@@ -1265,7 +1266,7 @@ impl CStr {\n     /// behavior when `ptr` is used inside the `unsafe` block:\n     ///\n     /// ```no_run\n-    /// # #![allow(unused_must_use)]\n+    /// # #![allow(unused_must_use)] #![cfg_attr(not(bootstrap), allow(temporary_cstring_as_ptr))]\n     /// use std::ffi::CString;\n     ///\n     /// let ptr = CString::new(\"Hello\").expect(\"CString::new failed\").as_ptr();"}, {"sha": "9f5805367e43d098caed0f899d75795302f769c7", "filename": "src/test/ui/lint/lint-temporary-cstring-as-param.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.rs?ref=90e6d0d46bae511aecea04ac5eeb3c387f0c04f4", "patch": "@@ -0,0 +1,11 @@\n+#![deny(temporary_cstring_as_ptr)]\n+\n+use std::ffi::CString;\n+use std::os::raw::c_char;\n+\n+fn some_function(data: *const c_char) {}\n+\n+fn main() {\n+    some_function(CString::new(\"\").unwrap().as_ptr());\n+    //~^ ERROR getting the inner pointer of a temporary `CString`\n+}"}, {"sha": "0a9e5a4bf4aa54048618572956079d0c3e11f157", "filename": "src/test/ui/lint/lint-temporary-cstring-as-param.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-param.stderr?ref=90e6d0d46bae511aecea04ac5eeb3c387f0c04f4", "patch": "@@ -0,0 +1,18 @@\n+error: getting the inner pointer of a temporary `CString`\n+  --> $DIR/lint-temporary-cstring-as-param.rs:9:45\n+   |\n+LL |     some_function(CString::new(\"\").unwrap().as_ptr());\n+   |                   ------------------------- ^^^^^^ this pointer will be invalid\n+   |                   |\n+   |                   this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-temporary-cstring-as-param.rs:1:9\n+   |\n+LL | #![deny(temporary_cstring_as_ptr)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\n+   = help: for more information, see https://doc.rust-lang.org/reference/destructors.html\n+\n+error: aborting due to previous error\n+"}, {"sha": "7aa4f2e1e005cc6bcab9766045cbb8daf5a8ab16", "filename": "src/test/ui/lint/lint-temporary-cstring-as-ptr.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.rs?ref=90e6d0d46bae511aecea04ac5eeb3c387f0c04f4", "patch": "@@ -0,0 +1,9 @@\n+// this program is not technically incorrect, but is an obscure enough style to be worth linting\n+#![deny(temporary_cstring_as_ptr)]\n+\n+use std::ffi::CString;\n+\n+fn main() {\n+    let s = CString::new(\"some text\").unwrap().as_ptr();\n+    //~^ ERROR getting the inner pointer of a temporary `CString`\n+}"}, {"sha": "e69d2dd533a407c636d2816053d895a1591b192e", "filename": "src/test/ui/lint/lint-temporary-cstring-as-ptr.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr?ref=90e6d0d46bae511aecea04ac5eeb3c387f0c04f4", "patch": "@@ -0,0 +1,18 @@\n+error: getting the inner pointer of a temporary `CString`\n+  --> $DIR/lint-temporary-cstring-as-ptr.rs:7:48\n+   |\n+LL |     let s = CString::new(\"some text\").unwrap().as_ptr();\n+   |             ---------------------------------- ^^^^^^ this pointer will be invalid\n+   |             |\n+   |             this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-temporary-cstring-as-ptr.rs:2:9\n+   |\n+LL | #![deny(temporary_cstring_as_ptr)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\n+   = help: for more information, see https://doc.rust-lang.org/reference/destructors.html\n+\n+error: aborting due to previous error\n+"}, {"sha": "fc4dca5042b2a0a8e491c1383d330f18ae0845d9", "filename": "src/tools/clippy/.github/driver.sh", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/src%2Ftools%2Fclippy%2F.github%2Fdriver.sh", "raw_url": "https://github.com/rust-lang/rust/raw/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/src%2Ftools%2Fclippy%2F.github%2Fdriver.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2Fdriver.sh?ref=90e6d0d46bae511aecea04ac5eeb3c387f0c04f4", "patch": "@@ -22,9 +22,9 @@ unset CARGO_MANIFEST_DIR\n \n # Run a lint and make sure it produces the expected output. It's also expected to exit with code 1\n # FIXME: How to match the clippy invocation in compile-test.rs?\n-./target/debug/clippy-driver -Dwarnings -Aunused -Zui-testing --emit metadata --crate-type bin tests/ui/cstring.rs 2> cstring.stderr && exit 1\n-sed -e \"s,tests/ui,\\$DIR,\" -e \"/= help/d\" cstring.stderr > normalized.stderr\n-diff normalized.stderr tests/ui/cstring.stderr\n+./target/debug/clippy-driver -Dwarnings -Aunused -Zui-testing --emit metadata --crate-type bin tests/ui/cast.rs 2> cast.stderr && exit 1\n+sed -e \"s,tests/ui,\\$DIR,\" -e \"/= help/d\" cast.stderr > normalized.stderr\n+diff normalized.stderr tests/ui/cast.stderr\n \n \n # make sure \"clippy-driver --rustc --arg\" and \"rustc --arg\" behave the same"}, {"sha": "b5ca63cefec4f7ff2ca85b980be0f148512c30fd", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=90e6d0d46bae511aecea04ac5eeb3c387f0c04f4", "patch": "@@ -707,7 +707,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::SKIP_WHILE_NEXT,\n         &methods::STRING_EXTEND_CHARS,\n         &methods::SUSPICIOUS_MAP,\n-        &methods::TEMPORARY_CSTRING_AS_PTR,\n         &methods::UNINIT_ASSUMED_INIT,\n         &methods::UNNECESSARY_FILTER_MAP,\n         &methods::UNNECESSARY_FOLD,\n@@ -1417,7 +1416,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::SKIP_WHILE_NEXT),\n         LintId::of(&methods::STRING_EXTEND_CHARS),\n         LintId::of(&methods::SUSPICIOUS_MAP),\n-        LintId::of(&methods::TEMPORARY_CSTRING_AS_PTR),\n         LintId::of(&methods::UNINIT_ASSUMED_INIT),\n         LintId::of(&methods::UNNECESSARY_FILTER_MAP),\n         LintId::of(&methods::UNNECESSARY_FOLD),\n@@ -1765,7 +1763,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&mem_replace::MEM_REPLACE_WITH_UNINIT),\n         LintId::of(&methods::CLONE_DOUBLE_REF),\n         LintId::of(&methods::ITERATOR_STEP_BY_ZERO),\n-        LintId::of(&methods::TEMPORARY_CSTRING_AS_PTR),\n         LintId::of(&methods::UNINIT_ASSUMED_INIT),\n         LintId::of(&methods::ZST_OFFSET),\n         LintId::of(&minmax::MIN_MAX),"}, {"sha": "d250bfd71e93661424ab1a598ac9c5cdf99c849e", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=90e6d0d46bae511aecea04ac5eeb3c387f0c04f4", "patch": "@@ -798,40 +798,6 @@ declare_clippy_lint! {\n     \"using a single-character str where a char could be used, e.g., `_.split(\\\"x\\\")`\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for getting the inner pointer of a temporary\n-    /// `CString`.\n-    ///\n-    /// **Why is this bad?** The inner pointer of a `CString` is only valid as long\n-    /// as the `CString` is alive.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```rust\n-    /// # use std::ffi::CString;\n-    /// # fn call_some_ffi_func(_: *const i8) {}\n-    /// #\n-    /// let c_str = CString::new(\"foo\").unwrap().as_ptr();\n-    /// unsafe {\n-    ///     call_some_ffi_func(c_str);\n-    /// }\n-    /// ```\n-    /// Here `c_str` points to a freed address. The correct use would be:\n-    /// ```rust\n-    /// # use std::ffi::CString;\n-    /// # fn call_some_ffi_func(_: *const i8) {}\n-    /// #\n-    /// let c_str = CString::new(\"foo\").unwrap();\n-    /// unsafe {\n-    ///     call_some_ffi_func(c_str.as_ptr());\n-    /// }\n-    /// ```\n-    pub TEMPORARY_CSTRING_AS_PTR,\n-    correctness,\n-    \"getting the inner pointer of a temporary `CString`\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for calling `.step_by(0)` on iterators which panics.\n     ///\n@@ -1406,7 +1372,6 @@ declare_lint_pass!(Methods => [\n     SINGLE_CHAR_PATTERN,\n     SINGLE_CHAR_PUSH_STR,\n     SEARCH_IS_SOME,\n-    TEMPORARY_CSTRING_AS_PTR,\n     FILTER_NEXT,\n     SKIP_WHILE_NEXT,\n     FILTER_MAP,\n@@ -1490,7 +1455,6 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 lint_search_is_some(cx, expr, \"rposition\", arg_lists[1], arg_lists[0], method_spans[1])\n             },\n             [\"extend\", ..] => lint_extend(cx, expr, arg_lists[0]),\n-            [\"as_ptr\", \"unwrap\" | \"expect\"] => lint_cstring_as_ptr(cx, expr, &arg_lists[1][0], &arg_lists[0][0]),\n             [\"nth\", \"iter\"] => lint_iter_nth(cx, expr, &arg_lists, false),\n             [\"nth\", \"iter_mut\"] => lint_iter_nth(cx, expr, &arg_lists, true),\n             [\"nth\", ..] => lint_iter_nth_zero(cx, expr, arg_lists[0]),\n@@ -2207,26 +2171,6 @@ fn lint_extend(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>\n     }\n }\n \n-fn lint_cstring_as_ptr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, source: &hir::Expr<'_>, unwrap: &hir::Expr<'_>) {\n-    if_chain! {\n-        let source_type = cx.typeck_results().expr_ty(source);\n-        if let ty::Adt(def, substs) = source_type.kind();\n-        if cx.tcx.is_diagnostic_item(sym!(result_type), def.did);\n-        if match_type(cx, substs.type_at(0), &paths::CSTRING);\n-        then {\n-            span_lint_and_then(\n-                cx,\n-                TEMPORARY_CSTRING_AS_PTR,\n-                expr.span,\n-                \"you are getting the inner pointer of a temporary `CString`\",\n-                |diag| {\n-                    diag.note(\"that pointer will be invalid outside this expression\");\n-                    diag.span_help(unwrap.span, \"assign the `CString` to a variable to extend its lifetime\");\n-                });\n-        }\n-    }\n-}\n-\n fn lint_iter_cloned_collect<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, iter_args: &'tcx [hir::Expr<'_>]) {\n     if_chain! {\n         if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(expr), sym!(vec_type));"}, {"sha": "7566da80982a0657c3e7dba2be1d9e33f4e07243", "filename": "src/tools/clippy/clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=90e6d0d46bae511aecea04ac5eeb3c387f0c04f4", "patch": "@@ -21,7 +21,6 @@ pub const CLONE_TRAIT_METHOD: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n pub const CMP_MAX: [&str; 3] = [\"core\", \"cmp\", \"max\"];\n pub const CMP_MIN: [&str; 3] = [\"core\", \"cmp\", \"min\"];\n pub const COW: [&str; 3] = [\"alloc\", \"borrow\", \"Cow\"];\n-pub const CSTRING: [&str; 4] = [\"std\", \"ffi\", \"c_str\", \"CString\"];\n pub const CSTRING_AS_C_STR: [&str; 5] = [\"std\", \"ffi\", \"c_str\", \"CString\", \"as_c_str\"];\n pub const DEFAULT_TRAIT: [&str; 3] = [\"core\", \"default\", \"Default\"];\n pub const DEFAULT_TRAIT_METHOD: [&str; 4] = [\"core\", \"default\", \"Default\", \"default\"];"}, {"sha": "dcbb8a6a31da9d6583304270f55048f1f6b10ad5", "filename": "src/tools/clippy/src/lintlist/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/src%2Ftools%2Fclippy%2Fsrc%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e6d0d46bae511aecea04ac5eeb3c387f0c04f4/src%2Ftools%2Fclippy%2Fsrc%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Flintlist%2Fmod.rs?ref=90e6d0d46bae511aecea04ac5eeb3c387f0c04f4", "patch": "@@ -2258,13 +2258,6 @@ vec![\n         deprecation: None,\n         module: \"temporary_assignment\",\n     },\n-    Lint {\n-        name: \"temporary_cstring_as_ptr\",\n-        group: \"correctness\",\n-        desc: \"getting the inner pointer of a temporary `CString`\",\n-        deprecation: None,\n-        module: \"methods\",\n-    },\n     Lint {\n         name: \"to_digit_is_some\",\n         group: \"style\","}, {"sha": "6cdd6b4ff6e77671afb525e01d9f5398ad536a0e", "filename": "src/tools/clippy/tests/ui/cstring.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/07e968b640e8ff76fa8be4b48b70ab80ea577800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e968b640e8ff76fa8be4b48b70ab80ea577800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcstring.rs?ref=07e968b640e8ff76fa8be4b48b70ab80ea577800", "patch": "@@ -1,24 +0,0 @@\n-#![deny(clippy::temporary_cstring_as_ptr)]\n-\n-fn main() {}\n-\n-fn temporary_cstring() {\n-    use std::ffi::CString;\n-\n-    CString::new(\"foo\").unwrap().as_ptr();\n-    CString::new(\"foo\").expect(\"dummy\").as_ptr();\n-}\n-\n-mod issue4375 {\n-    use std::ffi::CString;\n-    use std::os::raw::c_char;\n-\n-    extern \"C\" {\n-        fn foo(data: *const c_char);\n-    }\n-\n-    pub fn bar(v: &[u8]) {\n-        let cstr = CString::new(v);\n-        unsafe { foo(cstr.unwrap().as_ptr()) }\n-    }\n-}"}, {"sha": "87cb29be57758a3f9679a2d95cebd4fe2caf321a", "filename": "src/tools/clippy/tests/ui/cstring.stderr", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/07e968b640e8ff76fa8be4b48b70ab80ea577800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcstring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e968b640e8ff76fa8be4b48b70ab80ea577800/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcstring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcstring.stderr?ref=07e968b640e8ff76fa8be4b48b70ab80ea577800", "patch": "@@ -1,46 +0,0 @@\n-error: you are getting the inner pointer of a temporary `CString`\n-  --> $DIR/cstring.rs:8:5\n-   |\n-LL |     CString::new(\"foo\").unwrap().as_ptr();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/cstring.rs:1:9\n-   |\n-LL | #![deny(clippy::temporary_cstring_as_ptr)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: that pointer will be invalid outside this expression\n-help: assign the `CString` to a variable to extend its lifetime\n-  --> $DIR/cstring.rs:8:5\n-   |\n-LL |     CString::new(\"foo\").unwrap().as_ptr();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you are getting the inner pointer of a temporary `CString`\n-  --> $DIR/cstring.rs:9:5\n-   |\n-LL |     CString::new(\"foo\").expect(\"dummy\").as_ptr();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: that pointer will be invalid outside this expression\n-help: assign the `CString` to a variable to extend its lifetime\n-  --> $DIR/cstring.rs:9:5\n-   |\n-LL |     CString::new(\"foo\").expect(\"dummy\").as_ptr();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you are getting the inner pointer of a temporary `CString`\n-  --> $DIR/cstring.rs:22:22\n-   |\n-LL |         unsafe { foo(cstr.unwrap().as_ptr()) }\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: that pointer will be invalid outside this expression\n-help: assign the `CString` to a variable to extend its lifetime\n-  --> $DIR/cstring.rs:22:22\n-   |\n-LL |         unsafe { foo(cstr.unwrap().as_ptr()) }\n-   |                      ^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-"}]}