{"sha": "7a4505900db08696071655018e72bad896fb9cb0", "node_id": "C_kwDOAAsO6NoAKDdhNDUwNTkwMGRiMDg2OTYwNzE2NTUwMThlNzJiYWQ4OTZmYjljYjA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-07T20:59:48Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-07T21:00:12Z"}, "message": "Add ~const bounds trait bounds when using derive_const", "tree": {"sha": "5e69b1b272872b265122f974635413e4372bc9e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e69b1b272872b265122f974635413e4372bc9e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a4505900db08696071655018e72bad896fb9cb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4505900db08696071655018e72bad896fb9cb0", "html_url": "https://github.com/rust-lang/rust/commit/7a4505900db08696071655018e72bad896fb9cb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a4505900db08696071655018e72bad896fb9cb0/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56bf28d4f4236f19f962868f181b15b174d041c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/56bf28d4f4236f19f962868f181b15b174d041c4", "html_url": "https://github.com/rust-lang/rust/commit/56bf28d4f4236f19f962868f181b15b174d041c4"}], "stats": {"total": 58, "additions": 46, "deletions": 12}, "files": [{"sha": "e8a353b1c8fcc61474ad64cb001971ede5a5b67a", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a4505900db08696071655018e72bad896fb9cb0/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4505900db08696071655018e72bad896fb9cb0/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=7a4505900db08696071655018e72bad896fb9cb0", "patch": "@@ -153,7 +153,10 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n         let path_debug = cx.path_global(span, cx.std_path(&[sym::fmt, sym::Debug]));\n         let ty_dyn_debug = cx.ty(\n             span,\n-            ast::TyKind::TraitObject(vec![cx.trait_bound(path_debug)], ast::TraitObjectSyntax::Dyn),\n+            ast::TyKind::TraitObject(\n+                vec![cx.trait_bound(path_debug, false)],\n+                ast::TraitObjectSyntax::Dyn,\n+            ),\n         );\n         let ty_slice = cx.ty(\n             span,"}, {"sha": "a8c0aeb787078140ba2cab22b851002e2bbdf3f6", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7a4505900db08696071655018e72bad896fb9cb0/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4505900db08696071655018e72bad896fb9cb0/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=7a4505900db08696071655018e72bad896fb9cb0", "patch": "@@ -605,18 +605,26 @@ impl<'a> TraitDef<'a> {\n                     let bounds: Vec<_> = self\n                         .additional_bounds\n                         .iter()\n-                        .map(|p| cx.trait_bound(p.to_path(cx, self.span, type_ident, generics)))\n+                        .map(|p| {\n+                            cx.trait_bound(\n+                                p.to_path(cx, self.span, type_ident, generics),\n+                                self.is_const,\n+                            )\n+                        })\n                         .chain(\n                             // Add a bound for the current trait.\n                             self.skip_path_as_bound\n                                 .not()\n-                                .then(|| cx.trait_bound(trait_path.clone())),\n+                                .then(|| cx.trait_bound(trait_path.clone(), self.is_const)),\n                         )\n                         .chain({\n                             // Add a `Copy` bound if required.\n                             if is_packed && self.needs_copy_as_bound_if_packed {\n                                 let p = deriving::path_std!(marker::Copy);\n-                                Some(cx.trait_bound(p.to_path(cx, self.span, type_ident, generics)))\n+                                Some(cx.trait_bound(\n+                                    p.to_path(cx, self.span, type_ident, generics),\n+                                    self.is_const,\n+                                ))\n                             } else {\n                                 None\n                             }\n@@ -694,18 +702,24 @@ impl<'a> TraitDef<'a> {\n                         let mut bounds: Vec<_> = self\n                             .additional_bounds\n                             .iter()\n-                            .map(|p| cx.trait_bound(p.to_path(cx, self.span, type_ident, generics)))\n+                            .map(|p| {\n+                                cx.trait_bound(\n+                                    p.to_path(cx, self.span, type_ident, generics),\n+                                    self.is_const,\n+                                )\n+                            })\n                             .collect();\n \n                         // Require the current trait.\n-                        bounds.push(cx.trait_bound(trait_path.clone()));\n+                        bounds.push(cx.trait_bound(trait_path.clone(), self.is_const));\n \n                         // Add a `Copy` bound if required.\n                         if is_packed && self.needs_copy_as_bound_if_packed {\n                             let p = deriving::path_std!(marker::Copy);\n-                            bounds.push(\n-                                cx.trait_bound(p.to_path(cx, self.span, type_ident, generics)),\n-                            );\n+                            bounds.push(cx.trait_bound(\n+                                p.to_path(cx, self.span, type_ident, generics),\n+                                self.is_const,\n+                            ));\n                         }\n \n                         let predicate = ast::WhereBoundPredicate {"}, {"sha": "aabd5b1f773f70baa3691862eb4a190f8068a8fb", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a4505900db08696071655018e72bad896fb9cb0/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4505900db08696071655018e72bad896fb9cb0/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs?ref=7a4505900db08696071655018e72bad896fb9cb0", "patch": "@@ -154,7 +154,7 @@ fn mk_ty_param(\n         .iter()\n         .map(|b| {\n             let path = b.to_path(cx, span, self_ident, self_generics);\n-            cx.trait_bound(path)\n+            cx.trait_bound(path, false)\n         })\n         .collect();\n     cx.typaram(span, Ident::new(name, span), bounds, None)"}, {"sha": "b4c12651e7a2d36e7011fac4664f36d63f695c05", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a4505900db08696071655018e72bad896fb9cb0/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4505900db08696071655018e72bad896fb9cb0/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=7a4505900db08696071655018e72bad896fb9cb0", "patch": "@@ -131,10 +131,14 @@ impl<'a> ExtCtxt<'a> {\n         }\n     }\n \n-    pub fn trait_bound(&self, path: ast::Path) -> ast::GenericBound {\n+    pub fn trait_bound(&self, path: ast::Path, is_const: bool) -> ast::GenericBound {\n         ast::GenericBound::Trait(\n             self.poly_trait_ref(path.span, path),\n-            ast::TraitBoundModifier::None,\n+            if is_const {\n+                ast::TraitBoundModifier::MaybeConst\n+            } else {\n+                ast::TraitBoundModifier::None\n+            },\n         )\n     }\n "}, {"sha": "72edfbc97e48fb0b3421cad2dfb19eda8e5b880e", "filename": "tests/ui/rfc-2632-const-trait-impl/const_derives/derive-const-with-params.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7a4505900db08696071655018e72bad896fb9cb0/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-with-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4505900db08696071655018e72bad896fb9cb0/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-with-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-with-params.rs?ref=7a4505900db08696071655018e72bad896fb9cb0", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+\n+#![feature(derive_const)]\n+#![feature(const_trait_impl)]\n+\n+#[derive_const(PartialEq)]\n+pub struct Reverse<T>(T);\n+\n+const fn foo(a: Reverse<i32>, b: Reverse<i32>) -> bool {\n+    a == b\n+}\n+\n+fn main() {}"}]}