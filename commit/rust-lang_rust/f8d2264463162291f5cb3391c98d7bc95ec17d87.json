{"sha": "f8d2264463162291f5cb3391c98d7bc95ec17d87", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZDIyNjQ0NjMxNjIyOTFmNWNiMzM5MWM5OGQ3YmM5NWVjMTdkODc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-15T00:50:26Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-15T19:57:12Z"}, "message": "parse associated statics.", "tree": {"sha": "513c6f3eae554053189a205993fe56db960b6462", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/513c6f3eae554053189a205993fe56db960b6462"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8d2264463162291f5cb3391c98d7bc95ec17d87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d2264463162291f5cb3391c98d7bc95ec17d87", "html_url": "https://github.com/rust-lang/rust/commit/f8d2264463162291f5cb3391c98d7bc95ec17d87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8d2264463162291f5cb3391c98d7bc95ec17d87/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c2906ead3825c013ac022249f1e1ee3a3b97c75", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c2906ead3825c013ac022249f1e1ee3a3b97c75", "html_url": "https://github.com/rust-lang/rust/commit/1c2906ead3825c013ac022249f1e1ee3a3b97c75"}], "stats": {"total": 285, "additions": 243, "deletions": 42}, "files": [{"sha": "b465fd79c8f20dc500dea03ef7f51e75e1b61fcb", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -760,7 +760,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let trait_item_def_id = self.resolver.definitions().local_def_id(i.id);\n \n         let (generics, kind) = match i.kind {\n-            AssocItemKind::Const(ref ty, ref default) => {\n+            AssocItemKind::Static(ref ty, _, ref default) // Let's pretend this is a `const`.\n+            | AssocItemKind::Const(ref ty, ref default) => {\n                 let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n                 let body = default.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n                 (hir::Generics::empty(), hir::TraitItemKind::Const(ty, body))\n@@ -802,7 +803,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     fn lower_trait_item_ref(&mut self, i: &AssocItem) -> hir::TraitItemRef {\n         let (kind, has_default) = match &i.kind {\n-            AssocItemKind::Const(_, default) => (hir::AssocItemKind::Const, default.is_some()),\n+            AssocItemKind::Static(_, _, default) // Let's pretend this is a `const` for recovery.\n+            | AssocItemKind::Const(_, default) => {\n+                (hir::AssocItemKind::Const, default.is_some())\n+            }\n             AssocItemKind::TyAlias(_, _, default) => (hir::AssocItemKind::Type, default.is_some()),\n             AssocItemKind::Fn(sig, _, default) => {\n                 (hir::AssocItemKind::Method { has_self: sig.decl.has_self() }, default.is_some())\n@@ -827,7 +831,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let impl_item_def_id = self.resolver.definitions().local_def_id(i.id);\n \n         let (generics, kind) = match i.kind {\n-            AssocItemKind::Const(ref ty, ref expr) => {\n+            AssocItemKind::Static(ref ty, _, ref expr) | AssocItemKind::Const(ref ty, ref expr) => {\n                 let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n                 (\n                     hir::Generics::empty(),\n@@ -895,7 +899,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             vis: self.lower_visibility(&i.vis, Some(i.id)),\n             defaultness: self.lower_defaultness(i.defaultness, true /* [1] */),\n             kind: match &i.kind {\n-                AssocItemKind::Const(..) => hir::AssocItemKind::Const,\n+                AssocItemKind::Static(..) // Let's pretend this is a `const` for recovery.\n+                | AssocItemKind::Const(..) => hir::AssocItemKind::Const,\n                 AssocItemKind::TyAlias(_, _, ty) => {\n                     match ty.as_deref().and_then(|ty| ty.kind.opaque_top_hack()) {\n                         None => hir::AssocItemKind::Type,"}, {"sha": "72cffdd750a32684ad94941cd515ad34dea6d250", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -1250,8 +1250,13 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n         }\n \n-        if let AssocItemKind::Const(..) = item.kind {\n-            self.check_item_named(item.ident, \"const\");\n+        match item.kind {\n+            AssocItemKind::Const(..) => self.check_item_named(item.ident, \"const\"),\n+            AssocItemKind::Static(..) => self\n+                .err_handler()\n+                .struct_span_err(item.span, \"associated `static` items are not allowed\")\n+                .emit(),\n+            _ => {}\n         }\n \n         self.with_in_trait_impl(false, |this| visit::walk_assoc_item(this, item, ctxt));"}, {"sha": "ee1a829da1a44e9b632dcd40c5c74015c71f6615", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -1441,6 +1441,9 @@ impl<'a> State<'a> {\n         self.print_outer_attributes(&item.attrs);\n         self.print_defaultness(item.defaultness);\n         match &item.kind {\n+            ast::AssocItemKind::Static(ty, mutbl, expr) => {\n+                self.print_item_const(item.ident, Some(*mutbl), ty, expr.as_deref(), &item.vis);\n+            }\n             ast::AssocItemKind::Const(ty, expr) => {\n                 self.print_item_const(item.ident, None, ty, expr.as_deref(), &item.vis);\n             }"}, {"sha": "9b7728f27d0f7ef6867fd5f1a9ba3f0a97eb6135", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -546,6 +546,7 @@ impl<'a> Parser<'a> {\n                 1,\n                 &[\n                     kw::Impl,\n+                    kw::Static,\n                     kw::Const,\n                     kw::Async,\n                     kw::Fn,\n@@ -670,8 +671,14 @@ impl<'a> Parser<'a> {\n         } else if self.check_fn_front_matter() {\n             let (ident, sig, generics, body) = self.parse_fn(at_end, &mut attrs, req_name)?;\n             (ident, AssocItemKind::Fn(sig, generics, body))\n+        } else if self.is_static_global() {\n+            self.bump(); // `static`\n+            let mutbl = self.parse_mutability();\n+            let (ident, ty, expr) = self.parse_item_const_common(Some(mutbl))?;\n+            (ident, AssocItemKind::Static(ty, mutbl, expr))\n         } else if self.eat_keyword(kw::Const) {\n-            self.parse_assoc_const()?\n+            let (ident, ty, expr) = self.parse_item_const_common(None)?;\n+            (ident, AssocItemKind::Const(ty, expr))\n         } else if self.isnt_macro_invocation() {\n             return Err(self.missing_assoc_item_kind_err(\"associated\", self.prev_span));\n         } else if self.token.is_path_start() {\n@@ -688,15 +695,6 @@ impl<'a> Parser<'a> {\n         Ok(AssocItem { id, span, ident, attrs, vis, defaultness, kind, tokens: None })\n     }\n \n-    /// This parses the grammar:\n-    ///\n-    ///     AssocConst = \"const\" Ident \":\" Ty \"=\" Expr \";\"\n-    fn parse_assoc_const(&mut self) -> PResult<'a, (Ident, AssocItemKind)> {\n-        self.expect_keyword(kw::Const)?;\n-        let (ident, ty, expr) = self.parse_item_const_common(None)?;\n-        Ok((ident, AssocItemKind::Const(ty, expr)))\n-    }\n-\n     /// Parses the following grammar:\n     ///\n     ///     AssocTy = Ident [\"<\"...\">\"] [\":\" [GenericBounds]] [\"where\" ...] [\"=\" Ty]"}, {"sha": "7c541928e6fab486ce7ac57fa29f4890e1328382", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -1251,7 +1251,8 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         // Add the item to the trait info.\n         let item_def_id = self.r.definitions.local_def_id(item.id);\n         let (res, ns) = match item.kind {\n-            AssocItemKind::Const(..) => (Res::Def(DefKind::AssocConst, item_def_id), ValueNS),\n+            AssocItemKind::Static(..) // Let's pretend it's a `const` for recovery.\n+            | AssocItemKind::Const(..) => (Res::Def(DefKind::AssocConst, item_def_id), ValueNS),\n             AssocItemKind::Fn(ref sig, _, _) => {\n                 if sig.decl.has_self() {\n                     self.r.has_self.insert(item_def_id);"}, {"sha": "60cba55512193f781c4ceefdc9e47986d894fc61", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -228,7 +228,9 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                     body.as_deref(),\n                 );\n             }\n-            AssocItemKind::Fn(..) | AssocItemKind::Const(..) => DefPathData::ValueNs(i.ident.name),\n+            AssocItemKind::Fn(..) | AssocItemKind::Const(..) | AssocItemKind::Static(..) => {\n+                DefPathData::ValueNs(i.ident.name)\n+            }\n             AssocItemKind::TyAlias(..) => DefPathData::TypeNs(i.ident.name),\n             AssocItemKind::Macro(..) => return self.visit_macro_invoc(i.id),\n         };"}, {"sha": "7b445fcc03538da3993d161d0eeebfb5a751f1e9", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -836,7 +836,8 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         for item in trait_items {\n                             this.with_trait_items(trait_items, |this| {\n                                 match &item.kind {\n-                                    AssocItemKind::Const(ty, default) => {\n+                                    AssocItemKind::Static(ty, _, default)\n+                                    | AssocItemKind::Const(ty, default) => {\n                                         this.visit_ty(ty);\n                                         // Only impose the restrictions of `ConstRibKind` for an\n                                         // actual constant expression in a provided default.\n@@ -1109,7 +1110,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                 for item in impl_items {\n                                     use crate::ResolutionError::*;\n                                     match &item.kind {\n-                                        AssocItemKind::Const(..) => {\n+                                        AssocItemKind::Static(..) | AssocItemKind::Const(..) => {\n                                             debug!(\"resolve_implementation AssocItemKind::Const\",);\n                                             // If this is a trait impl, ensure the const\n                                             // exists in trait"}, {"sha": "001f2f098549d21359c78adb38e7346a4d8ceaab", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -1004,7 +1004,8 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         self.process_macro_use(trait_item.span);\n         let vis_span = trait_item.span.shrink_to_lo();\n         match trait_item.kind {\n-            ast::AssocItemKind::Const(ref ty, ref expr) => {\n+            ast::AssocItemKind::Static(ref ty, _, ref expr)\n+            | ast::AssocItemKind::Const(ref ty, ref expr) => {\n                 self.process_assoc_const(\n                     trait_item.id,\n                     trait_item.ident,\n@@ -1074,7 +1075,8 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n     fn process_impl_item(&mut self, impl_item: &'l ast::AssocItem, impl_id: DefId) {\n         self.process_macro_use(impl_item.span);\n         match impl_item.kind {\n-            ast::AssocItemKind::Const(ref ty, ref expr) => {\n+            ast::AssocItemKind::Static(ref ty, _, ref expr)\n+            | ast::AssocItemKind::Const(ref ty, ref expr) => {\n                 self.process_assoc_const(\n                     impl_item.id,\n                     impl_item.ident,"}, {"sha": "ca39fbd6c5d0f83b91a2ad10d760b0b9fad6cbd1", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -2654,6 +2654,8 @@ pub enum AssocItemKind {\n     /// A constant, `const $ident: $ty $def?;` where `def ::= \"=\" $expr? ;`.\n     /// If `def` is parsed, then the constant is provided, and otherwise required.\n     Const(P<Ty>, Option<P<Expr>>),\n+    /// A static item (`static FOO: u8`).\n+    Static(P<Ty>, Mutability, Option<P<Expr>>),\n     /// A function.\n     Fn(FnSig, Generics, Option<P<Block>>),\n     /// A type."}, {"sha": "91db61586896ae8c446e42de42c165a92ca76c97", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -954,7 +954,7 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n     visitor.visit_vis(vis);\n     visit_attrs(attrs, visitor);\n     match kind {\n-        AssocItemKind::Const(ty, expr) => {\n+        AssocItemKind::Const(ty, expr) | AssocItemKind::Static(ty, _, expr) => {\n             visitor.visit_ty(ty);\n             visit_opt(expr, |expr| visitor.visit_expr(expr));\n         }"}, {"sha": "f5763ecf573e3ca3637b2700d9812147c23a8d34", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -633,7 +633,7 @@ pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem,\n     visitor.visit_ident(item.ident);\n     walk_list!(visitor, visit_attribute, &item.attrs);\n     match item.kind {\n-        AssocItemKind::Const(ref ty, ref expr) => {\n+        AssocItemKind::Const(ref ty, ref expr) | AssocItemKind::Static(ref ty, _, ref expr) => {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);\n         }"}, {"sha": "f4ca3c46ea28ab0fabdae71e2d083210583c710c", "filename": "src/test/ui/issues/issue-58856-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -7,11 +7,11 @@ LL |     fn how_are_you(&self -> Empty {\n    |                   |     help: `)` may belong here\n    |                   unclosed delimiter\n \n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, `}`, or identifier, found `)`\n+error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `static`, `type`, `unsafe`, `}`, or identifier, found `)`\n   --> $DIR/issue-58856-2.rs:11:1\n    |\n LL |     }\n-   |      - expected one of 11 possible tokens\n+   |      - expected one of 12 possible tokens\n LL | }\n    | ^ unexpected token\n "}, {"sha": "bab50a53b1ae486e0d9e879d7d6336ff477a78d7", "filename": "src/test/ui/issues/issue-60075.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -4,7 +4,7 @@ error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n LL |         });\n    |          ^ expected one of `.`, `;`, `?`, `else`, or an operator\n \n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, `}`, or identifier, found `;`\n+error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `static`, `type`, `unsafe`, `}`, or identifier, found `;`\n   --> $DIR/issue-60075.rs:6:11\n    |\n LL |     fn qux() -> Option<usize> {"}, {"sha": "cf3debd77cbfdc631a36b2c598886cb129f60cf0", "filename": "src/test/ui/parser/assoc-static-semantic-fail.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.rs?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -0,0 +1,43 @@\n+// Semantically, we do not allow e.g., `static X: u8 = 0;` as an associated item.\n+\n+#![feature(specialization)]\n+\n+fn main() {}\n+\n+struct S;\n+impl S {\n+    static IA: u8 = 0;\n+    //~^ ERROR associated `static` items are not allowed\n+    static IB: u8;\n+    //~^ ERROR associated `static` items are not allowed\n+    default static IC: u8 = 0;\n+    //~^ ERROR associated `static` items are not allowed\n+    pub(crate) default static ID: u8;\n+    //~^ ERROR associated `static` items are not allowed\n+}\n+\n+trait T {\n+    static TA: u8 = 0;\n+    //~^ ERROR associated `static` items are not allowed\n+    static TB: u8;\n+    //~^ ERROR associated `static` items are not allowed\n+    default static TC: u8 = 0;\n+    //~^ ERROR associated `static` items are not allowed\n+    //~| ERROR `default` is only allowed on items in\n+    pub(crate) default static TD: u8;\n+    //~^ ERROR associated `static` items are not allowed\n+    //~| ERROR `default` is only allowed on items in\n+    //~| ERROR unnecessary visibility qualifier\n+}\n+\n+impl T for S {\n+    static TA: u8 = 0;\n+    //~^ ERROR associated `static` items are not allowed\n+    static TB: u8;\n+    //~^ ERROR associated `static` items are not allowed\n+    default static TC: u8 = 0;\n+    //~^ ERROR associated `static` items are not allowed\n+    pub default static TD: u8;\n+    //~^ ERROR associated `static` items are not allowed\n+    //~| ERROR unnecessary visibility qualifier\n+}"}, {"sha": "d5a02c9bebcf02521808fe7d84f1a920308b806a", "filename": "src/test/ui/parser/assoc-static-semantic-fail.stderr", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -0,0 +1,99 @@\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-semantic-fail.rs:9:5\n+   |\n+LL |     static IA: u8 = 0;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-semantic-fail.rs:11:5\n+   |\n+LL |     static IB: u8;\n+   |     ^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-semantic-fail.rs:13:5\n+   |\n+LL |     default static IC: u8 = 0;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-semantic-fail.rs:15:5\n+   |\n+LL |     pub(crate) default static ID: u8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-semantic-fail.rs:20:5\n+   |\n+LL |     static TA: u8 = 0;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-semantic-fail.rs:22:5\n+   |\n+LL |     static TB: u8;\n+   |     ^^^^^^^^^^^^^^\n+\n+error: `default` is only allowed on items in `impl` definitions\n+  --> $DIR/assoc-static-semantic-fail.rs:24:5\n+   |\n+LL |     default static TC: u8 = 0;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-semantic-fail.rs:24:5\n+   |\n+LL |     default static TC: u8 = 0;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `default` is only allowed on items in `impl` definitions\n+  --> $DIR/assoc-static-semantic-fail.rs:27:5\n+   |\n+LL |     pub(crate) default static TD: u8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0449]: unnecessary visibility qualifier\n+  --> $DIR/assoc-static-semantic-fail.rs:27:5\n+   |\n+LL |     pub(crate) default static TD: u8;\n+   |     ^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-semantic-fail.rs:27:5\n+   |\n+LL |     pub(crate) default static TD: u8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-semantic-fail.rs:34:5\n+   |\n+LL |     static TA: u8 = 0;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-semantic-fail.rs:36:5\n+   |\n+LL |     static TB: u8;\n+   |     ^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-semantic-fail.rs:38:5\n+   |\n+LL |     default static TC: u8 = 0;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0449]: unnecessary visibility qualifier\n+  --> $DIR/assoc-static-semantic-fail.rs:40:5\n+   |\n+LL |     pub default static TD: u8;\n+   |     ^^^ `pub` not permitted here because it's implied\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-semantic-fail.rs:40:5\n+   |\n+LL |     pub default static TD: u8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 16 previous errors\n+\n+For more information about this error, try `rustc --explain E0449`."}, {"sha": "7f5b9f7933563dfc7646ced3e83c31145dc9d12d", "filename": "src/test/ui/parser/assoc-static-syntactic-pass.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-pass.rs?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -0,0 +1,29 @@\n+// Syntactically, we do allow e.g., `static X: u8 = 0;` as an associated item.\n+\n+// check-pass\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+impl S {\n+    static IA: u8 = 0;\n+    static IB: u8;\n+    default static IC: u8 = 0;\n+    pub(crate) default static ID: u8;\n+}\n+\n+#[cfg(FALSE)]\n+trait T {\n+    static TA: u8 = 0;\n+    static TB: u8;\n+    default static TC: u8 = 0;\n+    pub(crate) default static TD: u8;\n+}\n+\n+#[cfg(FALSE)]\n+impl T for S {\n+    static TA: u8 = 0;\n+    static TB: u8;\n+    default static TC: u8 = 0;\n+    pub default static TD: u8;\n+}"}, {"sha": "d25828da0b97986cea15eba61550428cad93cd29", "filename": "src/test/ui/parser/issue-32446.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fparser%2Fissue-32446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fparser%2Fissue-32446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32446.stderr?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, `}`, or identifier, found `...`\n+error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `static`, `type`, `unsafe`, `}`, or identifier, found `...`\n   --> $DIR/issue-32446.rs:4:11\n    |\n LL | trait T { ... }\n-   |           ^^^ expected one of 11 possible tokens\n+   |           ^^^ expected one of 12 possible tokens\n \n error: aborting due to previous error\n "}, {"sha": "a91ef6c67e89ee1b521eb86a5fb0caff0b2e2b03", "filename": "src/test/ui/parser/issue-41155.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fparser%2Fissue-41155.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fparser%2Fissue-41155.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-41155.stderr?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `(`, `async`, `const`, `default`, `extern`, `fn`, `type`, `unsafe`, or identifier, found `}`\n+error: expected one of `(`, `async`, `const`, `default`, `extern`, `fn`, `static`, `type`, `unsafe`, or identifier, found `}`\n   --> $DIR/issue-41155.rs:5:1\n    |\n LL |     pub\n-   |        - expected one of 9 possible tokens\n+   |        - expected one of 10 possible tokens\n LL | }\n    | ^ unexpected token\n "}, {"sha": "c76b096a1ebf402af6e2bf1b1c9eb2fe78268605", "filename": "src/test/ui/parser/macro/trait-non-item-macros.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or identifier, found `2`\n+error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `static`, `type`, `unsafe`, or identifier, found `2`\n   --> $DIR/trait-non-item-macros.rs:2:19\n    |\n LL |     ($a:expr) => ($a)\n-   |                   ^^ expected one of 10 possible tokens\n+   |                   ^^ expected one of 11 possible tokens\n ...\n LL |     bah!(2);\n    |     -------- in this macro invocation"}, {"sha": "cd643b874dbda108a22c18bf7a53b67f52ddb470", "filename": "src/test/ui/parser/removed-syntax-static-fn.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.rs?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -1,8 +1,10 @@\n struct S;\n \n impl S {\n-    //~^ ERROR missing `fn`, `type`, or `const` for associated-item declaration\n     static fn f() {}\n+    //~^ ERROR expected identifier, found keyword `fn`\n+    //~| ERROR expected one of `:`, `;`, or `=`\n+    //~| ERROR missing type for `static` item\n }\n \n fn main() {}"}, {"sha": "dc5625bdadea3395b416bf7381bd5518b211b128", "filename": "src/test/ui/parser/removed-syntax-static-fn.stderr", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -1,11 +1,20 @@\n-error: missing `fn`, `type`, or `const` for associated-item declaration\n-  --> $DIR/removed-syntax-static-fn.rs:3:9\n+error: expected identifier, found keyword `fn`\n+  --> $DIR/removed-syntax-static-fn.rs:4:12\n    |\n-LL |   impl S {\n-   |  _________^\n-LL | |\n-LL | |     static fn f() {}\n-   | |____^ missing `fn`, `type`, or `const`\n+LL |     static fn f() {}\n+   |            ^^ expected identifier, found keyword\n \n-error: aborting due to previous error\n+error: expected one of `:`, `;`, or `=`, found `f`\n+  --> $DIR/removed-syntax-static-fn.rs:4:15\n+   |\n+LL |     static fn f() {}\n+   |               ^ expected one of `:`, `;`, or `=`\n+\n+error: missing type for `static` item\n+  --> $DIR/removed-syntax-static-fn.rs:4:12\n+   |\n+LL |     static fn f() {}\n+   |            ^^ help: provide a type for the item: `r#fn: <type>`\n+\n+error: aborting due to 3 previous errors\n "}]}