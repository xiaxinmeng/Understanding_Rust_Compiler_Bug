{"sha": "548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0OGFkZDdmNjFiZmNiZTNiZWEzZjVjY2VmYjUzYzg0ZGE4ZmVmZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-18T02:10:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-18T02:10:21Z"}, "message": "Auto merge of #60910 - nnethercote:avoid-some-unnecessary-interning, r=petrochenkov\n\nAvoid some unnecessary interning\n\nr? @petrochenkov", "tree": {"sha": "c033c6bf9f7e7646613ea8ce0125c511fd2483c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c033c6bf9f7e7646613ea8ce0125c511fd2483c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "html_url": "https://github.com/rust-lang/rust/commit/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a614cee22e8d79766c6a6d0f63c28f12eaec63f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a614cee22e8d79766c6a6d0f63c28f12eaec63f4", "html_url": "https://github.com/rust-lang/rust/commit/a614cee22e8d79766c6a6d0f63c28f12eaec63f4"}, {"sha": "4ab5fe3f97a260f2cb2b3c06a9a841a05a659e57", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ab5fe3f97a260f2cb2b3c06a9a841a05a659e57", "html_url": "https://github.com/rust-lang/rust/commit/4ab5fe3f97a260f2cb2b3c06a9a841a05a659e57"}], "stats": {"total": 116, "additions": 67, "deletions": 49}, "files": [{"sha": "970f6ba01773557ebc8d94203fba55f4160b52f8", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "patch": "@@ -2218,7 +2218,7 @@ impl<'a> LoweringContext<'a> {\n                         bindings: hir_vec![\n                             hir::TypeBinding {\n                                 hir_id: this.next_id(),\n-                                ident: Ident::from_str(FN_OUTPUT_NAME),\n+                                ident: Ident::with_empty_ctxt(FN_OUTPUT_NAME),\n                                 ty: output\n                                     .as_ref()\n                                     .map(|ty| this.lower_ty(&ty, ImplTraitContext::disallowed()))\n@@ -2543,7 +2543,7 @@ impl<'a> LoweringContext<'a> {\n         let future_params = P(hir::GenericArgs {\n             args: hir_vec![],\n             bindings: hir_vec![hir::TypeBinding {\n-                ident: Ident::from_str(FN_OUTPUT_NAME),\n+                ident: Ident::with_empty_ctxt(FN_OUTPUT_NAME),\n                 ty: output_ty,\n                 hir_id: self.next_id(),\n                 span,\n@@ -4801,7 +4801,7 @@ impl<'a> LoweringContext<'a> {\n                 let attr = {\n                     // `allow(unreachable_code)`\n                     let allow = {\n-                        let allow_ident = Ident::from_str(\"allow\").with_span_pos(e.span);\n+                        let allow_ident = Ident::with_empty_ctxt(sym::allow).with_span_pos(e.span);\n                         let uc_ident = Ident::from_str(\"unreachable_code\").with_span_pos(e.span);\n                         let uc_nested = attr::mk_nested_word_item(uc_ident);\n                         attr::mk_list_item(e.span, allow_ident, vec![uc_nested])"}, {"sha": "9cb85c4db47579f8403de8d8369a5de6138226cd", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "patch": "@@ -17,7 +17,7 @@ use std::fmt::Write;\n use std::hash::Hash;\n use syntax::ast;\n use syntax::ext::hygiene::Mark;\n-use syntax::symbol::{Symbol, InternedString};\n+use syntax::symbol::{Symbol, sym, InternedString};\n use syntax_pos::{Span, DUMMY_SP};\n use crate::util::nodemap::NodeMap;\n \n@@ -584,16 +584,16 @@ impl DefPathData {\n                 return name\n             }\n             // note that this does not show up in user printouts\n-            CrateRoot => \"{{crate}}\",\n-            Impl => \"{{impl}}\",\n-            Misc => \"{{misc}}\",\n-            ClosureExpr => \"{{closure}}\",\n-            Ctor => \"{{constructor}}\",\n-            AnonConst => \"{{constant}}\",\n-            ImplTrait => \"{{opaque}}\",\n+            CrateRoot => sym::double_braced_crate,\n+            Impl => sym::double_braced_impl,\n+            Misc => sym::double_braced_misc,\n+            ClosureExpr => sym::double_braced_closure,\n+            Ctor => sym::double_braced_constructor,\n+            AnonConst => sym::double_braced_constant,\n+            ImplTrait => sym::double_braced_opaque,\n         };\n \n-        Symbol::intern(s).as_interned_str()\n+        s.as_interned_str()\n     }\n \n     pub fn to_string(&self) -> String {"}, {"sha": "67e76f7625ceee237c6ef5f5018603365ad80f83", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "patch": "@@ -1421,7 +1421,7 @@ fn confirm_callable_candidate<'cx, 'gcx, 'tcx>(\n                 projection_ty: ty::ProjectionTy::from_ref_and_name(\n                     tcx,\n                     trait_ref,\n-                    Ident::from_str(FN_OUTPUT_NAME),\n+                    Ident::with_empty_ctxt(FN_OUTPUT_NAME),\n                 ),\n                 ty: ret_type\n             }"}, {"sha": "67eaa19c080b5ec80d7976f2ca1ee2a2194f1081", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "patch": "@@ -11,14 +11,15 @@ use std::time::{Duration, Instant};\n \n use std::sync::mpsc::{Sender};\n use syntax_pos::{SpanData};\n+use syntax::symbol::{Symbol, sym};\n use rustc_macros::HashStable;\n use crate::ty::TyCtxt;\n use crate::dep_graph::{DepNode};\n use lazy_static;\n use crate::session::Session;\n \n // The name of the associated type for `Fn` return types\n-pub const FN_OUTPUT_NAME: &str = \"Output\";\n+pub const FN_OUTPUT_NAME: Symbol = sym::Output;\n \n // Useful type to use with `Result<>` indicate that an error has already\n // been reported to the user, so no need to continue checking."}, {"sha": "585c6fde634509938eaefc85152585887e61aafc", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "patch": "@@ -19,7 +19,7 @@ use syntax::{\n     mut_visit::{self, MutVisitor},\n     parse::ParseSess,\n     ptr::P,\n-    symbol::{Symbol, sym}\n+    symbol::{keywords, Symbol, sym}\n };\n use syntax_pos::Span;\n \n@@ -110,13 +110,14 @@ impl MutVisitor for ExpandAllocatorDirectives<'_> {\n             span,\n             kind: AllocatorKind::Global,\n             global: item.ident,\n-            core: Ident::from_str(\"core\"),\n+            core: Ident::with_empty_ctxt(sym::core),\n             cx: ExtCtxt::new(self.sess, ecfg, self.resolver),\n         };\n \n         // We will generate a new submodule. To `use` the static from that module, we need to get\n         // the `super::...` path.\n-        let super_path = f.cx.path(f.span, vec![Ident::from_str(\"super\"), f.global]);\n+        let super_path =\n+            f.cx.path(f.span, vec![Ident::with_empty_ctxt(keywords::Super.name()), f.global]);\n \n         // Generate the items in the submodule\n         let mut items = vec![\n@@ -236,7 +237,7 @@ impl AllocFnFactory<'_> {\n     ) -> P<Expr> {\n         match *ty {\n             AllocatorTy::Layout => {\n-                let usize = self.cx.path_ident(self.span, Ident::from_str(\"usize\"));\n+                let usize = self.cx.path_ident(self.span, Ident::with_empty_ctxt(sym::usize));\n                 let ty_usize = self.cx.ty_path(usize);\n                 let size = ident();\n                 let align = ident();\n@@ -298,12 +299,12 @@ impl AllocFnFactory<'_> {\n     }\n \n     fn usize(&self) -> P<Ty> {\n-        let usize = self.cx.path_ident(self.span, Ident::from_str(\"usize\"));\n+        let usize = self.cx.path_ident(self.span, Ident::with_empty_ctxt(sym::usize));\n         self.cx.ty_path(usize)\n     }\n \n     fn ptr_u8(&self) -> P<Ty> {\n-        let u8 = self.cx.path_ident(self.span, Ident::from_str(\"u8\"));\n+        let u8 = self.cx.path_ident(self.span, Ident::with_empty_ctxt(sym::u8));\n         let ty_u8 = self.cx.ty_path(u8);\n         self.cx.ty_ptr(self.span, ty_u8, Mutability::Mutable)\n     }"}, {"sha": "77e8cc3272cc3580089cf1c2e7822aa2f51e7aee", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "patch": "@@ -1979,11 +1979,11 @@ impl<'a> Resolver<'a> {\n                                        .collect();\n \n         if !attr::contains_name(&krate.attrs, sym::no_core) {\n-            extern_prelude.insert(Ident::from_str(\"core\"), Default::default());\n+            extern_prelude.insert(Ident::with_empty_ctxt(sym::core), Default::default());\n             if !attr::contains_name(&krate.attrs, sym::no_std) {\n-                extern_prelude.insert(Ident::from_str(\"std\"), Default::default());\n+                extern_prelude.insert(Ident::with_empty_ctxt(sym::std), Default::default());\n                 if session.rust_2018() {\n-                    extern_prelude.insert(Ident::from_str(\"meta\"), Default::default());\n+                    extern_prelude.insert(Ident::with_empty_ctxt(sym::meta), Default::default());\n                 }\n             }\n         }\n@@ -3374,7 +3374,7 @@ impl<'a> Resolver<'a> {\n                     self.trait_map.insert(id, traits);\n                 }\n \n-                let mut std_path = vec![Segment::from_ident(Ident::from_str(\"std\"))];\n+                let mut std_path = vec![Segment::from_ident(Ident::with_empty_ctxt(sym::std))];\n                 std_path.extend(path);\n                 if self.primitive_type_table.primitive_types.contains_key(&path[0].ident.name) {\n                     let cl = CrateLint::No;"}, {"sha": "e9ccc61280b10a9b517a58a29da48f0595f1fd96", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "patch": "@@ -929,8 +929,9 @@ impl Attributes {\n         for attr in attrs.lists(sym::target_feature) {\n             if attr.check_name(sym::enable) {\n                 if let Some(feat) = attr.value_str() {\n-                    let meta = attr::mk_name_value_item_str(Ident::from_str(\"target_feature\"),\n-                                                            dummy_spanned(feat));\n+                    let meta = attr::mk_name_value_item_str(\n+                        Ident::with_empty_ctxt(sym::target_feature),\n+                        dummy_spanned(feat));\n                     if let Ok(feat_cfg) = Cfg::parse(&meta) {\n                         cfg &= feat_cfg;\n                     }"}, {"sha": "592b40df1764e36c8fec5a757481480bcbb1b5f2", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "patch": "@@ -22,7 +22,7 @@ use crate::parse::parser::Parser;\n use crate::parse::{self, ParseSess, PResult};\n use crate::parse::token::{self, Token};\n use crate::ptr::P;\n-use crate::symbol::{keywords, Symbol};\n+use crate::symbol::{keywords, Symbol, sym};\n use crate::ThinVec;\n use crate::tokenstream::{TokenStream, TokenTree, DelimSpan};\n use crate::GLOBALS;\n@@ -323,7 +323,7 @@ impl Attribute {\n         if self.is_sugared_doc {\n             let comment = self.value_str().unwrap();\n             let meta = mk_name_value_item_str(\n-                Ident::from_str(\"doc\"),\n+                Ident::with_empty_ctxt(sym::doc),\n                 dummy_spanned(Symbol::intern(&strip_doc_comment_decoration(&comment.as_str()))));\n             let mut attr = if self.style == ast::AttrStyle::Outer {\n                 mk_attr_outer(self.span, self.id, meta)\n@@ -414,7 +414,7 @@ pub fn mk_sugared_doc_attr(id: AttrId, text: Symbol, span: Span) -> Attribute {\n     Attribute {\n         id,\n         style,\n-        path: Path::from_ident(Ident::from_str(\"doc\").with_span_pos(span)),\n+        path: Path::from_ident(Ident::with_empty_ctxt(sym::doc).with_span_pos(span)),\n         tokens: MetaItemKind::NameValue(lit).tokens(span),\n         is_sugared_doc: true,\n         span,"}, {"sha": "019ebc8566ff8a978951e67b48e2a883ee09e1af", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "patch": "@@ -1522,19 +1522,19 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                             let include_info = vec![\n                                 ast::NestedMetaItem::MetaItem(\n                                     attr::mk_name_value_item_str(\n-                                        Ident::from_str(\"file\"),\n+                                        Ident::with_empty_ctxt(sym::file),\n                                         dummy_spanned(file),\n                                     ),\n                                 ),\n                                 ast::NestedMetaItem::MetaItem(\n                                     attr::mk_name_value_item_str(\n-                                        Ident::from_str(\"contents\"),\n+                                        Ident::with_empty_ctxt(sym::contents),\n                                         dummy_spanned(src_interned),\n                                     ),\n                                 ),\n                             ];\n \n-                            let include_ident = Ident::from_str(\"include\");\n+                            let include_ident = Ident::with_empty_ctxt(sym::include);\n                             let item = attr::mk_list_item(DUMMY_SP, include_ident, include_info);\n                             items.push(ast::NestedMetaItem::MetaItem(item));\n                         }\n@@ -1600,7 +1600,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 }\n             }\n \n-            let meta = attr::mk_list_item(DUMMY_SP, Ident::from_str(\"doc\"), items);\n+            let meta = attr::mk_list_item(DUMMY_SP, Ident::with_empty_ctxt(sym::doc), items);\n             match at.style {\n                 ast::AttrStyle::Inner => *at = attr::mk_spanned_attr_inner(at.span, at.id, meta),\n                 ast::AttrStyle::Outer => *at = attr::mk_spanned_attr_outer(at.span, at.id, meta),"}, {"sha": "24d120376def15092077d3b91594222bbcc8491d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "patch": "@@ -352,7 +352,7 @@ impl TokenCursor {\n         let body = TokenTree::Delimited(\n             delim_span,\n             token::Bracket,\n-            [TokenTree::Token(sp, token::Ident(ast::Ident::from_str(\"doc\"), false)),\n+            [TokenTree::Token(sp, token::Ident(ast::Ident::with_empty_ctxt(sym::doc), false)),\n              TokenTree::Token(sp, token::Eq),\n              TokenTree::Token(sp, token::Literal(\n                 token::StrRaw(Symbol::intern(&stripped), num_of_hashes), None))\n@@ -7011,7 +7011,8 @@ impl<'a> Parser<'a> {\n                     let attr = Attribute {\n                         id: attr::mk_attr_id(),\n                         style: ast::AttrStyle::Outer,\n-                        path: ast::Path::from_ident(Ident::from_str(\"warn_directory_ownership\")),\n+                        path: ast::Path::from_ident(\n+                            Ident::with_empty_ctxt(sym::warn_directory_ownership)),\n                         tokens: TokenStream::empty(),\n                         is_sugared_doc: false,\n                         span: syntax_pos::DUMMY_SP,"}, {"sha": "cd86d94f4b81cbda763d09b702d35890e950378e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "patch": "@@ -13,7 +13,7 @@ use crate::print::pp::{self, Breaks};\n use crate::print::pp::Breaks::{Consistent, Inconsistent};\n use crate::ptr::P;\n use crate::std_inject;\n-use crate::symbol::keywords;\n+use crate::symbol::{keywords, sym};\n use crate::tokenstream::{self, TokenStream, TokenTree};\n \n use rustc_target::spec::abi::{self, Abi};\n@@ -89,13 +89,14 @@ pub fn print_crate<'a>(cm: &'a SourceMap,\n         // of the feature gate, so we fake them up here.\n \n         // #![feature(prelude_import)]\n-        let pi_nested = attr::mk_nested_word_item(ast::Ident::from_str(\"prelude_import\"));\n-        let list = attr::mk_list_item(DUMMY_SP, ast::Ident::from_str(\"feature\"), vec![pi_nested]);\n+        let pi_nested = attr::mk_nested_word_item(ast::Ident::with_empty_ctxt(sym::prelude_import));\n+        let list = attr::mk_list_item(\n+            DUMMY_SP, ast::Ident::with_empty_ctxt(sym::feature), vec![pi_nested]);\n         let fake_attr = attr::mk_attr_inner(DUMMY_SP, attr::mk_attr_id(), list);\n         s.print_attribute(&fake_attr)?;\n \n         // #![no_std]\n-        let no_std_meta = attr::mk_word_item(ast::Ident::from_str(\"no_std\"));\n+        let no_std_meta = attr::mk_word_item(ast::Ident::with_empty_ctxt(sym::no_std));\n         let fake_attr = attr::mk_attr_inner(DUMMY_SP, attr::mk_attr_id(), no_std_meta);\n         s.print_attribute(&fake_attr)?;\n     }"}, {"sha": "6784a2abe551c1340c64bf48b0eb40e52196ef9c", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "patch": "@@ -77,9 +77,11 @@ pub fn maybe_inject_crates_ref(\n             None\n         };\n         krate.module.items.insert(0, P(ast::Item {\n-            attrs: vec![attr::mk_attr_outer(DUMMY_SP,\n-                                            attr::mk_attr_id(),\n-                                            attr::mk_word_item(ast::Ident::from_str(\"macro_use\")))],\n+            attrs: vec![attr::mk_attr_outer(\n+                DUMMY_SP,\n+                attr::mk_attr_id(),\n+                attr::mk_word_item(ast::Ident::with_empty_ctxt(sym::macro_use))\n+            )],\n             vis: dummy_spanned(ast::VisibilityKind::Inherited),\n             node: ast::ItemKind::ExternCrate(alt_std_name.or(orig_name)),\n             ident: ast::Ident::with_empty_ctxt(rename),"}, {"sha": "3fd0790161cdd2cf4a1c230baa843cce79aacea9", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "patch": "@@ -171,7 +171,7 @@ impl MutVisitor for EntryPointCleaner {\n             EntryPointType::MainAttr |\n             EntryPointType::Start =>\n                 item.map(|ast::Item {id, ident, attrs, node, vis, span, tokens}| {\n-                    let allow_ident = Ident::from_str(\"allow\");\n+                    let allow_ident = Ident::with_empty_ctxt(sym::allow);\n                     let dc_nested = attr::mk_nested_word_item(Ident::from_str(\"dead_code\"));\n                     let allow_dead_code_item = attr::mk_list_item(DUMMY_SP, allow_ident,\n                                                                   vec![dc_nested]);\n@@ -215,7 +215,7 @@ fn mk_reexport_mod(cx: &mut TestCtxt<'_>,\n                    tests: Vec<Ident>,\n                    tested_submods: Vec<(Ident, Ident)>)\n                    -> (P<ast::Item>, Ident) {\n-    let super_ = Ident::from_str(\"super\");\n+    let super_ = Ident::with_empty_ctxt(keywords::Super.name());\n \n     let items = tests.into_iter().map(|r| {\n         cx.ext_cx.item_use_simple(DUMMY_SP, dummy_spanned(ast::VisibilityKind::Public),"}, {"sha": "2127179eecb5aaee64cc80bc76ef0bdb6bf3dce2", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "patch": "@@ -6,7 +6,7 @@\n use syntax::ast::{self, Ident, GenericArg};\n use syntax::ext::base::{self, *};\n use syntax::ext::build::AstBuilder;\n-use syntax::symbol::{keywords, Symbol};\n+use syntax::symbol::{keywords, Symbol, sym};\n use syntax_pos::Span;\n use syntax::tokenstream;\n \n@@ -29,7 +29,8 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                                      true,\n                                      cx.std_path(&[\"option\", \"Option\", \"None\"]),\n                                      vec![GenericArg::Type(cx.ty_rptr(sp,\n-                                                     cx.ty_ident(sp, Ident::from_str(\"str\")),\n+                                                     cx.ty_ident(sp,\n+                                                                 Ident::with_empty_ctxt(sym::str)),\n                                                      Some(lt),\n                                                      ast::Mutability::Immutable))],\n                                      vec![]))"}, {"sha": "c582fb422c97091fda82ec4eafa30818fda33e23", "filename": "src/libsyntax_ext/proc_macro_decls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_decls.rs?ref=548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "patch": "@@ -362,11 +362,11 @@ fn mk_decls(\n     });\n     let span = DUMMY_SP.apply_mark(mark);\n \n-    let hidden = cx.meta_list_item_word(span, Symbol::intern(\"hidden\"));\n-    let doc = cx.meta_list(span, Symbol::intern(\"doc\"), vec![hidden]);\n+    let hidden = cx.meta_list_item_word(span, sym::hidden);\n+    let doc = cx.meta_list(span, sym::doc, vec![hidden]);\n     let doc_hidden = cx.attribute(span, doc);\n \n-    let proc_macro = Ident::from_str(\"proc_macro\");\n+    let proc_macro = Ident::with_empty_ctxt(sym::proc_macro);\n     let krate = cx.item(span,\n                         proc_macro,\n                         Vec::new(),"}, {"sha": "01b126f48b327151c0e988deec216b1a8372295e", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548add7f61bfcbe3bea3f5ccefb53c84da8fefe4/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=548add7f61bfcbe3bea3f5ccefb53c84da8fefe4", "patch": "@@ -214,6 +214,13 @@ symbols! {\n         document_private_items,\n         dotdoteq_in_patterns,\n         dotdot_in_tuple_patterns,\n+        double_braced_crate: \"{{crate}}\",\n+        double_braced_impl: \"{{impl}}\",\n+        double_braced_misc: \"{{misc}}\",\n+        double_braced_closure: \"{{closure}}\",\n+        double_braced_constructor: \"{{constructor}}\",\n+        double_braced_constant: \"{{constant}}\",\n+        double_braced_opaque: \"{{opaque}}\",\n         dropck_eyepatch,\n         dropck_parametricity,\n         drop_types_in_const,\n@@ -336,6 +343,7 @@ symbols! {\n         match_default_bindings,\n         may_dangle,\n         message,\n+        meta,\n         min_const_fn,\n         min_const_unsafe_fn,\n         mips_target_feature,\n@@ -385,6 +393,7 @@ symbols! {\n         option,\n         Option,\n         opt_out_copy,\n+        Output,\n         overlapping_marker_traits,\n         packed,\n         panic_handler,\n@@ -530,6 +539,7 @@ symbols! {\n         static_nobundle,\n         static_recursion,\n         std,\n+        str,\n         stmt_expr_attributes,\n         stop_after_dataflow,\n         struct_field_attributes,"}]}