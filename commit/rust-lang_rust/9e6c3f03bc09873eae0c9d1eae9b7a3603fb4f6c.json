{"sha": "9e6c3f03bc09873eae0c9d1eae9b7a3603fb4f6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNmMzZjAzYmMwOTg3M2VhZTBjOWQxZWFlOWI3YTM2MDNmYjRmNmM=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-02-11T22:42:23Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-02-14T18:52:18Z"}, "message": "rustdoc: Strip impls of traits on #[doc(hidden)] types\n\nIn the strip-hidden pass, record all types that were stripped, and make\na second pass stripping all impls of traits for these types.", "tree": {"sha": "9e37935a12dda14189febdcd10360ae5bb3762bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e37935a12dda14189febdcd10360ae5bb3762bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e6c3f03bc09873eae0c9d1eae9b7a3603fb4f6c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e6c3f03bc09873eae0c9d1eae9b7a3603fb4f6c", "html_url": "https://github.com/rust-lang/rust/commit/9e6c3f03bc09873eae0c9d1eae9b7a3603fb4f6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e6c3f03bc09873eae0c9d1eae9b7a3603fb4f6c/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52a3d38796c616bbed39cda2dc3538f2cedbd5ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/52a3d38796c616bbed39cda2dc3538f2cedbd5ac", "html_url": "https://github.com/rust-lang/rust/commit/52a3d38796c616bbed39cda2dc3538f2cedbd5ac"}], "stats": {"total": 70, "additions": 51, "deletions": 19}, "files": [{"sha": "6ebaf6eece82d4b27a0ae056ee4d89a3eb2af702", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 51, "deletions": 19, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/9e6c3f03bc09873eae0c9d1eae9b7a3603fb4f6c/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e6c3f03bc09873eae0c9d1eae9b7a3603fb4f6c/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=9e6c3f03bc09873eae0c9d1eae9b7a3603fb4f6c", "patch": "@@ -22,30 +22,62 @@ use fold::DocFolder;\n \n /// Strip items marked `#[doc(hidden)]`\n pub fn strip_hidden(krate: clean::Crate) -> plugins::PluginResult {\n-    struct Stripper;\n-    impl fold::DocFolder for Stripper {\n-        fn fold_item(&mut self, i: Item) -> Option<Item> {\n-            for attr in i.attrs.iter() {\n-                match attr {\n-                    &clean::List(~\"doc\", ref l) => {\n-                        for innerattr in l.iter() {\n-                            match innerattr {\n-                                &clean::Word(ref s) if \"hidden\" == *s => {\n-                                    debug!(\"found one in strip_hidden; removing\");\n-                                    return None;\n-                                },\n-                                _ => (),\n+    let mut stripped = HashSet::new();\n+\n+    // strip all #[doc(hidden)] items\n+    let krate = {\n+        struct Stripper<'a> {\n+            stripped: &'a mut HashSet<ast::NodeId>\n+        };\n+        impl<'a> fold::DocFolder for Stripper<'a> {\n+            fn fold_item(&mut self, i: Item) -> Option<Item> {\n+                for attr in i.attrs.iter() {\n+                    match attr {\n+                        &clean::List(~\"doc\", ref l) => {\n+                            for innerattr in l.iter() {\n+                                match innerattr {\n+                                    &clean::Word(ref s) if \"hidden\" == *s => {\n+                                        debug!(\"found one in strip_hidden; removing\");\n+                                        self.stripped.insert(i.id);\n+                                        return None;\n+                                    },\n+                                    _ => (),\n+                                }\n                             }\n+                        },\n+                        _ => ()\n+                    }\n+                }\n+                self.fold_item_recur(i)\n+            }\n+        }\n+        let mut stripper = Stripper{ stripped: &mut stripped };\n+        stripper.fold_crate(krate)\n+    };\n+\n+    // strip any traits implemented on stripped items\n+    let krate = {\n+        struct ImplStripper<'a> {\n+            stripped: &'a mut HashSet<ast::NodeId>\n+        };\n+        impl<'a> fold::DocFolder for ImplStripper<'a> {\n+            fn fold_item(&mut self, i: Item) -> Option<Item> {\n+                match i.inner {\n+                    clean::ImplItem(clean::Impl{ for_: clean::ResolvedPath{ id: for_id, .. },\n+                                                 .. }) => {\n+                        if self.stripped.contains(&for_id) {\n+                            return None;\n                         }\n-                    },\n-                    _ => ()\n+                    }\n+                    _ => {}\n                 }\n+                self.fold_item_recur(i)\n             }\n-            self.fold_item_recur(i)\n         }\n-    }\n-    let mut stripper = Stripper;\n-    let krate = stripper.fold_crate(krate);\n+        let mut stripper = ImplStripper{ stripped: &mut stripped };\n+        stripper.fold_crate(krate)\n+    };\n+\n     (krate, None)\n }\n "}]}