{"sha": "86388f617178875af0b6a585479efa4f09abd630", "node_id": "C_kwDOAAsO6NoAKDg2Mzg4ZjYxNzE3ODg3NWFmMGI2YTU4NTQ3OWVmYTRmMDlhYmQ2MzA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-30T22:26:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-30T22:26:31Z"}, "message": "Rollup merge of #95251 - GrishaVar:hashes-u16-to-u8, r=dtolnay\n\nReduce max hash in raw strings from u16 to u8\n\n[Relevant discussion](https://rust-lang.zulipchat.com/#narrow/stream/237824-t-lang.2Fdoc/topic/Max.20raw.20string.20delimiters)", "tree": {"sha": "aca2ec03a02f07f1400617a45941a54ceb2763d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aca2ec03a02f07f1400617a45941a54ceb2763d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86388f617178875af0b6a585479efa4f09abd630", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiRNkYCRBK7hj4Ov3rIwAAzMgIACsSRzxJS7SDQdEC7P6hP/WA\n4Ao12czGaxTTI1g5il9hbMJheq1es6ByUoGNDZJiwgsLgYjyS0RY8dd0oKQKr6aq\n+ZoyXj/uNnvbtT9cHhgpYo9mwP6VKeETioorxwZ6ftbnD785m+C9gQxxtw5dc7RX\nmozl+E/FlJgV8VOR3s4/4AutTmYEpXPiatTn6GxaDe9RMjSudfmW93IsvGcSJX7m\n/aBV8F/rClOA6jVTUPSBbeeLL7QpuStbUGH1Z9A+kiKCz/8hiGnEnYqXVhG2Sf8B\nhUpeNraX4W4tIlI1ew9YPa6Ye7qP+Y4qXEz/aWbmQkxupje97oA2G+Hmlb09NN8=\n=74DT\n-----END PGP SIGNATURE-----\n", "payload": "tree aca2ec03a02f07f1400617a45941a54ceb2763d3\nparent 1c3657b20d9dc52574bcd19876ed56e1538bd605\nparent 759d1e6af8610cdfdbf091a5d3d825b05c1fc6a2\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648679191 +0200\ncommitter GitHub <noreply@github.com> 1648679191 +0200\n\nRollup merge of #95251 - GrishaVar:hashes-u16-to-u8, r=dtolnay\n\nReduce max hash in raw strings from u16 to u8\n\n[Relevant discussion](https://rust-lang.zulipchat.com/#narrow/stream/237824-t-lang.2Fdoc/topic/Max.20raw.20string.20delimiters)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86388f617178875af0b6a585479efa4f09abd630", "html_url": "https://github.com/rust-lang/rust/commit/86388f617178875af0b6a585479efa4f09abd630", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86388f617178875af0b6a585479efa4f09abd630/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c3657b20d9dc52574bcd19876ed56e1538bd605", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c3657b20d9dc52574bcd19876ed56e1538bd605", "html_url": "https://github.com/rust-lang/rust/commit/1c3657b20d9dc52574bcd19876ed56e1538bd605"}, {"sha": "759d1e6af8610cdfdbf091a5d3d825b05c1fc6a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/759d1e6af8610cdfdbf091a5d3d825b05c1fc6a2", "html_url": "https://github.com/rust-lang/rust/commit/759d1e6af8610cdfdbf091a5d3d825b05c1fc6a2"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "75ccbc92be1f681ce0b5d37fc2c0429be99b9345", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86388f617178875af0b6a585479efa4f09abd630/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86388f617178875af0b6a585479efa4f09abd630/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=86388f617178875af0b6a585479efa4f09abd630", "patch": "@@ -1616,7 +1616,7 @@ pub enum StrStyle {\n     /// A raw string, like `r##\"foo\"##`.\n     ///\n     /// The value is the number of `#` symbols used.\n-    Raw(u16),\n+    Raw(u8),\n }\n \n /// An AST literal."}, {"sha": "2132cdfc001b6037b898d4e4b7b26ebf17a190c4", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86388f617178875af0b6a585479efa4f09abd630/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86388f617178875af0b6a585479efa4f09abd630/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=86388f617178875af0b6a585479efa4f09abd630", "patch": "@@ -59,9 +59,9 @@ pub enum LitKind {\n     Integer,\n     Float,\n     Str,\n-    StrRaw(u16), // raw string delimited by `n` hash symbols\n+    StrRaw(u8), // raw string delimited by `n` hash symbols\n     ByteStr,\n-    ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols\n+    ByteStrRaw(u8), // raw byte string delimited by `n` hash symbols\n     Err,\n }\n "}, {"sha": "a41e0374f410ae969dacb26a62afc50fb6d73d09", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/86388f617178875af0b6a585479efa4f09abd630/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86388f617178875af0b6a585479efa4f09abd630/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=86388f617178875af0b6a585479efa4f09abd630", "patch": "@@ -161,15 +161,15 @@ pub enum LiteralKind {\n     /// \"b\"abc\"\", \"b\"abc\"\n     ByteStr { terminated: bool },\n     /// \"r\"abc\"\", \"r#\"abc\"#\", \"r####\"ab\"###\"c\"####\", \"r#\"a\"\n-    RawStr { n_hashes: u16, err: Option<RawStrError> },\n+    RawStr { n_hashes: u8, err: Option<RawStrError> },\n     /// \"br\"abc\"\", \"br#\"abc\"#\", \"br####\"ab\"###\"c\"####\", \"br#\"a\"\n-    RawByteStr { n_hashes: u16, err: Option<RawStrError> },\n+    RawByteStr { n_hashes: u8, err: Option<RawStrError> },\n }\n \n /// Error produced validating a raw string. Represents cases like:\n /// - `r##~\"abcde\"##`: `InvalidStarter`\n /// - `r###\"abcde\"##`: `NoTerminator { expected: 3, found: 2, possible_terminator_offset: Some(11)`\n-/// - Too many `#`s (>65535): `TooManyDelimiters`\n+/// - Too many `#`s (>255): `TooManyDelimiters`\n // perf note: It doesn't matter that this makes `Token` 36 bytes bigger. See #77629\n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub enum RawStrError {\n@@ -178,7 +178,7 @@ pub enum RawStrError {\n     /// The string was never terminated. `possible_terminator_offset` is the number of characters after `r` or `br` where they\n     /// may have intended to terminate it.\n     NoTerminator { expected: usize, found: usize, possible_terminator_offset: Option<usize> },\n-    /// More than 65535 `#`s exist.\n+    /// More than 255 `#`s exist.\n     TooManyDelimiters { found: usize },\n }\n \n@@ -698,12 +698,12 @@ impl Cursor<'_> {\n     }\n \n     /// Eats the double-quoted string and returns `n_hashes` and an error if encountered.\n-    fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u16, Option<RawStrError>) {\n+    fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u8, Option<RawStrError>) {\n         // Wrap the actual function to handle the error with too many hashes.\n         // This way, it eats the whole raw string.\n         let (n_hashes, err) = self.raw_string_unvalidated(prefix_len);\n-        // Only up to 65535 `#`s are allowed in raw strings\n-        match u16::try_from(n_hashes) {\n+        // Only up to 255 `#`s are allowed in raw strings\n+        match u8::try_from(n_hashes) {\n             Ok(num) => (num, err),\n             // We lie about the number of hashes here :P\n             Err(_) => (0, Some(RawStrError::TooManyDelimiters { found: n_hashes })),"}, {"sha": "07daee06f0f860d911db92bf847e686960bab832", "filename": "compiler/rustc_lexer/src/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86388f617178875af0b6a585479efa4f09abd630/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86388f617178875af0b6a585479efa4f09abd630/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs?ref=86388f617178875af0b6a585479efa4f09abd630", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n use expect_test::{expect, Expect};\n \n-fn check_raw_str(s: &str, expected_hashes: u16, expected_err: Option<RawStrError>) {\n+fn check_raw_str(s: &str, expected_hashes: u8, expected_err: Option<RawStrError>) {\n     let s = &format!(\"r{}\", s);\n     let mut cursor = Cursor::new(s);\n     cursor.bump();\n@@ -68,13 +68,13 @@ fn test_unterminated_no_pound() {\n \n #[test]\n fn test_too_many_hashes() {\n-    let max_count = u16::MAX;\n+    let max_count = u8::MAX;\n     let mut hashes: String = \"#\".repeat(max_count.into());\n \n-    // Valid number of hashes (65535 = 2^16 - 1), but invalid string.\n+    // Valid number of hashes (255 = 2^8 - 1 = u8::MAX), but invalid string.\n     check_raw_str(&hashes, max_count, Some(RawStrError::InvalidStarter { bad_char: '\\u{0}' }));\n \n-    // One more hash sign (65536 = 2^16) becomes too many.\n+    // One more hash sign (256 = 2^8) becomes too many.\n     hashes.push('#');\n     check_raw_str(\n         &hashes,"}, {"sha": "5ab412dc777de38510e8227197a3d5ea0197b052", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86388f617178875af0b6a585479efa4f09abd630/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86388f617178875af0b6a585479efa4f09abd630/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=86388f617178875af0b6a585479efa4f09abd630", "patch": "@@ -597,15 +597,13 @@ impl<'a> StringReader<'a> {\n         }\n     }\n \n-    /// Note: It was decided to not add a test case, because it would be too big.\n-    /// <https://github.com/rust-lang/rust/pull/50296#issuecomment-392135180>\n     fn report_too_many_hashes(&self, start: BytePos, found: usize) -> ! {\n         self.fatal_span_(\n             start,\n             self.pos,\n             &format!(\n                 \"too many `#` symbols: raw strings may be delimited \\\n-                by up to 65535 `#` symbols, but found {}\",\n+                by up to 255 `#` symbols, but found {}\",\n                 found\n             ),\n         )"}, {"sha": "a92097e1d24cac28e29bfea5b7307d8e226ae845", "filename": "src/tools/clippy/clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86388f617178875af0b6a585479efa4f09abd630/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86388f617178875af0b6a585479efa4f09abd630/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs?ref=86388f617178875af0b6a585479efa4f09abd630", "patch": "@@ -81,7 +81,7 @@ impl<'tcx> LateLintPass<'tcx> for Regex {\n \n #[allow(clippy::cast_possible_truncation)] // truncation very unlikely here\n #[must_use]\n-fn str_span(base: Span, c: regex_syntax::ast::Span, offset: u16) -> Span {\n+fn str_span(base: Span, c: regex_syntax::ast::Span, offset: u8) -> Span {\n     let offset = u32::from(offset);\n     let end = base.lo() + BytePos(u32::try_from(c.end.offset).expect(\"offset too large\") + offset);\n     let start = base.lo() + BytePos(u32::try_from(c.start.offset).expect(\"offset too large\") + offset);"}]}