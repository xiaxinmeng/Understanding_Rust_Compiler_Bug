{"sha": "4f5b6927e8e428239082ecc17b85a0506bcc9a65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNWI2OTI3ZThlNDI4MjM5MDgyZWNjMTdiODVhMDUwNmJjYzlhNjU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-07T01:58:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-13T18:30:14Z"}, "message": "std: Rename various slice traits for consistency\n\nImmutableVector -> ImmutableSlice\nImmutableEqVector -> ImmutableEqSlice\nImmutableOrdVector -> ImmutableOrdSlice\nMutableVector -> MutableSlice\nMutableVectorAllocating -> MutableSliceAllocating\nMutableCloneableVector -> MutableCloneableSlice\nMutableOrdVector -> MutableOrdSlice\n\nThese are all in the prelude so most code will not break.\n\n[breaking-change]", "tree": {"sha": "321222a7ebea4299f89dbd029e14dbec06d03ec8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/321222a7ebea4299f89dbd029e14dbec06d03ec8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f5b6927e8e428239082ecc17b85a0506bcc9a65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f5b6927e8e428239082ecc17b85a0506bcc9a65", "html_url": "https://github.com/rust-lang/rust/commit/4f5b6927e8e428239082ecc17b85a0506bcc9a65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f5b6927e8e428239082ecc17b85a0506bcc9a65/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9177707926d4fbed9dd9e4e7afc9a8c185dafe0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9177707926d4fbed9dd9e4e7afc9a8c185dafe0", "html_url": "https://github.com/rust-lang/rust/commit/d9177707926d4fbed9dd9e4e7afc9a8c185dafe0"}], "stats": {"total": 160, "additions": 80, "deletions": 80}, "files": [{"sha": "dd07e718af418f05f55da322eb84d2635d8c1473", "filename": "src/libcollections/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcollections%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcollections%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fmod.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -296,7 +296,7 @@ mod tests {\n     use std::prelude::*;\n     use std::mem;\n \n-    use slice::ImmutableVector;\n+    use slice::ImmutableSlice;\n     use super::{Hash, Hasher, Writer};\n \n     struct MyWriterHasher;"}, {"sha": "12888de43a025d37f65dedd4aa9699360c7f0b47", "filename": "src/libcollections/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcollections%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcollections%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fsip.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -275,7 +275,7 @@ mod tests {\n \n     use str::Str;\n     use string::String;\n-    use slice::{Vector, ImmutableVector};\n+    use slice::{Vector, ImmutableSlice};\n     use vec::Vec;\n \n     use super::super::{Hash, Writer};"}, {"sha": "d73fa49984898989f2d2a2c3974ba6da133e497b", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -45,8 +45,8 @@ represents iteration over a slice.\n ## Traits\n \n A number of traits add methods that allow you to accomplish tasks with slices.\n-These traits include `ImmutableVector`, which is defined for `&[T]` types,\n-and `MutableVector`, defined for `&mut [T]` types.\n+These traits include `ImmutableSlice`, which is defined for `&[T]` types,\n+and `MutableSlice`, defined for `&mut [T]` types.\n \n An example is the method `.slice(a, b)` that returns an immutable \"view\" into\n a `Vec` or another slice from the index interval `[a, b)`:\n@@ -98,10 +98,10 @@ use {Collection, MutableSeq};\n use vec::Vec;\n \n pub use core::slice::{ref_slice, mut_ref_slice, Splits, Windows};\n-pub use core::slice::{Chunks, Vector, ImmutableVector, ImmutableEqVector};\n-pub use core::slice::{ImmutableOrdVector, MutableVector, Items, MutItems};\n+pub use core::slice::{Chunks, Vector, ImmutableSlice, ImmutableEqSlice};\n+pub use core::slice::{ImmutableOrdSlice, MutableSlice, Items, MutItems};\n pub use core::slice::{MutSplits, MutChunks};\n-pub use core::slice::{bytes, MutableCloneableVector};\n+pub use core::slice::{bytes, MutableCloneableSlice};\n \n // Functional utilities\n \n@@ -558,7 +558,7 @@ fn merge_sort<T>(v: &mut [T], compare: |&T, &T| -> Ordering) {\n \n /// Extension methods for vectors such that their elements are\n /// mutable.\n-pub trait MutableVectorAllocating<'a, T> {\n+pub trait MutableSliceAllocating<'a, T> {\n     /// Sort the vector, in place, using `compare` to compare\n     /// elements.\n     ///\n@@ -604,7 +604,7 @@ pub trait MutableVectorAllocating<'a, T> {\n     fn move_from(self, src: Vec<T>, start: uint, end: uint) -> uint;\n }\n \n-impl<'a,T> MutableVectorAllocating<'a, T> for &'a mut [T] {\n+impl<'a,T> MutableSliceAllocating<'a, T> for &'a mut [T] {\n     #[inline]\n     fn sort_by(self, compare: |&T, &T| -> Ordering) {\n         merge_sort(self, compare)\n@@ -621,7 +621,7 @@ impl<'a,T> MutableVectorAllocating<'a, T> for &'a mut [T] {\n \n /// Methods for mutable vectors with orderable elements, such as\n /// in-place sorting.\n-pub trait MutableOrdVector<T> {\n+pub trait MutableOrdSlice<T> {\n     /// Sort the vector, in place.\n     ///\n     /// This is equivalent to `self.sort_by(|a, b| a.cmp(b))`.\n@@ -667,7 +667,7 @@ pub trait MutableOrdVector<T> {\n     fn prev_permutation(self) -> bool;\n }\n \n-impl<'a, T: Ord> MutableOrdVector<T> for &'a mut [T] {\n+impl<'a, T: Ord> MutableOrdSlice<T> for &'a mut [T] {\n     #[inline]\n     fn sort(self) {\n         self.sort_by(|a,b| a.cmp(b))"}, {"sha": "35ecfbd579203b81209fb7aad4142350be6af998", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -894,7 +894,7 @@ mod tests {\n     use {Collection, MutableSeq};\n \n     use super::*;\n-    use std::slice::{Vector, ImmutableVector};\n+    use std::slice::{Vector, ImmutableSlice};\n     use string::String;\n     use vec::Vec;\n "}, {"sha": "4c1530d1bfbe9120ce4373d293de568689298245", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -24,7 +24,7 @@ use core::ptr;\n use core::uint;\n \n use {Collection, Mutable, MutableSeq};\n-use slice::{MutableOrdVector, MutableVectorAllocating, CloneableVector};\n+use slice::{MutableOrdSlice, MutableSliceAllocating, CloneableVector};\n use slice::{Items, MutItems};\n \n "}, {"sha": "3a07e43e50993d3dbf3b18c63aac7d533b2f6044", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -17,7 +17,7 @@ use iter::{range, DoubleEndedIterator};\n use num::{Float, FPNaN, FPInfinite, ToPrimitive, Primitive};\n use num::{Zero, One, cast};\n use result::Ok;\n-use slice::{ImmutableVector, MutableVector};\n+use slice::{ImmutableSlice, MutableSlice};\n use slice;\n use str::StrSlice;\n "}, {"sha": "61f0d09453f2b1b44f0d177b13aa944cdf891093", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -24,7 +24,7 @@ use option::{Option, Some, None};\n use ops::Deref;\n use result::{Ok, Err};\n use result;\n-use slice::{Vector, ImmutableVector};\n+use slice::{Vector, ImmutableSlice};\n use slice;\n use str::StrSlice;\n use str;"}, {"sha": "21cbafdc60538b1052058bca2a832038c2dfacb6", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -18,7 +18,7 @@ use collections::Collection;\n use fmt;\n use iter::DoubleEndedIterator;\n use num::{Int, cast, zero};\n-use slice::{ImmutableVector, MutableVector};\n+use slice::{ImmutableSlice, MutableSlice};\n \n /// A type that represents a specific radix\n #[doc(hidden)]"}, {"sha": "08a431b0d1f233bed5543d8fbf484dead1387ced", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -61,6 +61,6 @@ pub use str::{Str, StrSlice};\n pub use tuple::{Tuple1, Tuple2, Tuple3, Tuple4};\n pub use tuple::{Tuple5, Tuple6, Tuple7, Tuple8};\n pub use tuple::{Tuple9, Tuple10, Tuple11, Tuple12};\n-pub use slice::{ImmutableEqVector, ImmutableOrdVector};\n-pub use slice::{MutableVector};\n-pub use slice::{Vector, ImmutableVector};\n+pub use slice::{ImmutableEqSlice, ImmutableOrdSlice};\n+pub use slice::{MutableSlice};\n+pub use slice::{Vector, ImmutableSlice};"}, {"sha": "6c8bacaef48e2f4e73b0d390cecced7d76fb9f63", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -54,7 +54,7 @@ use raw::{Repr, Slice};\n //\n \n /// Extension methods for vectors\n-pub trait ImmutableVector<'a, T> {\n+pub trait ImmutableSlice<'a, T> {\n     /**\n      * Returns a slice of self spanning the interval [`start`, `end`).\n      *\n@@ -234,7 +234,7 @@ pub trait ImmutableVector<'a, T> {\n     fn pop_ref(&mut self) -> Option<&'a T>;\n }\n \n-impl<'a,T> ImmutableVector<'a, T> for &'a [T] {\n+impl<'a,T> ImmutableSlice<'a, T> for &'a [T] {\n     #[inline]\n     fn slice(&self, start: uint, end: uint) -> &'a [T] {\n         assert!(start <= end);\n@@ -401,7 +401,7 @@ impl<'a,T> ImmutableVector<'a, T> for &'a [T] {\n \n /// Extension methods for vectors such that their elements are\n /// mutable.\n-pub trait MutableVector<'a, T> {\n+pub trait MutableSlice<'a, T> {\n     /// Returns a mutable reference to the element at the given index,\n     /// or `None` if the index is out of bounds\n     fn get_mut(self, index: uint) -> Option<&'a mut T>;\n@@ -607,7 +607,7 @@ pub trait MutableVector<'a, T> {\n     unsafe fn copy_memory(self, src: &[T]);\n }\n \n-impl<'a,T> MutableVector<'a, T> for &'a mut [T] {\n+impl<'a,T> MutableSlice<'a, T> for &'a mut [T] {\n     #[inline]\n     fn get_mut(self, index: uint) -> Option<&'a mut T> {\n         if index < self.len() { Some(&mut self[index]) } else { None }\n@@ -755,7 +755,7 @@ impl<'a,T> MutableVector<'a, T> for &'a mut [T] {\n }\n \n /// Extension methods for vectors contain `PartialEq` elements.\n-pub trait ImmutableEqVector<T:PartialEq> {\n+pub trait ImmutableEqSlice<T:PartialEq> {\n     /// Find the first index containing a matching value\n     fn position_elem(&self, t: &T) -> Option<uint>;\n \n@@ -772,7 +772,7 @@ pub trait ImmutableEqVector<T:PartialEq> {\n     fn ends_with(&self, needle: &[T]) -> bool;\n }\n \n-impl<'a,T:PartialEq> ImmutableEqVector<T> for &'a [T] {\n+impl<'a,T:PartialEq> ImmutableEqSlice<T> for &'a [T] {\n     #[inline]\n     fn position_elem(&self, x: &T) -> Option<uint> {\n         self.iter().position(|y| *x == *y)\n@@ -802,7 +802,7 @@ impl<'a,T:PartialEq> ImmutableEqVector<T> for &'a [T] {\n }\n \n /// Extension methods for vectors containing `Ord` elements.\n-pub trait ImmutableOrdVector<T: Ord> {\n+pub trait ImmutableOrdSlice<T: Ord> {\n     /**\n      * Binary search a sorted vector for a given element.\n      *\n@@ -811,22 +811,22 @@ pub trait ImmutableOrdVector<T: Ord> {\n     fn bsearch_elem(&self, x: &T) -> Option<uint>;\n }\n \n-impl<'a, T: Ord> ImmutableOrdVector<T> for &'a [T] {\n+impl<'a, T: Ord> ImmutableOrdSlice<T> for &'a [T] {\n     fn bsearch_elem(&self, x: &T) -> Option<uint> {\n         self.bsearch(|p| p.cmp(x))\n     }\n }\n \n /// Trait for &[T] where T is Cloneable\n-pub trait MutableCloneableVector<T> {\n+pub trait MutableCloneableSlice<T> {\n     /// Copies as many elements from `src` as it can into `self` (the\n     /// shorter of `self.len()` and `src.len()`). Returns the number\n     /// of elements copied.\n     ///\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::slice::MutableCloneableVector;\n+    /// use std::slice::MutableCloneableSlice;\n     ///\n     /// let mut dst = [0i, 0, 0];\n     /// let src = [1i, 2];\n@@ -841,7 +841,7 @@ pub trait MutableCloneableVector<T> {\n     fn copy_from(self, &[T]) -> uint;\n }\n \n-impl<'a, T:Clone> MutableCloneableVector<T> for &'a mut [T] {\n+impl<'a, T:Clone> MutableCloneableSlice<T> for &'a mut [T] {\n     #[inline]\n     fn copy_from(self, src: &[T]) -> uint {\n         for (a, b) in self.mut_iter().zip(src.iter()) {\n@@ -1413,7 +1413,7 @@ pub mod raw {\n pub mod bytes {\n     use collections::Collection;\n     use ptr;\n-    use slice::MutableVector;\n+    use slice::MutableSlice;\n \n     /// A trait for operations on mutable `[u8]`s.\n     pub trait MutableByteVector {"}, {"sha": "99de772f3affc1cc5b35c3d81a739306869d1594", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -30,7 +30,7 @@ use iter::range;\n use num::{CheckedMul, Saturating};\n use option::{Option, None, Some};\n use raw::Repr;\n-use slice::ImmutableVector;\n+use slice::ImmutableSlice;\n use slice;\n use uint;\n \n@@ -964,7 +964,7 @@ pub mod raw {\n     use collections::Collection;\n     use ptr::RawPtr;\n     use raw::Slice;\n-    use slice::{ImmutableVector};\n+    use slice::{ImmutableSlice};\n     use str::{is_utf8, StrSlice};\n \n     /// Converts a slice of bytes to a string slice without checking"}, {"sha": "118c2f7a3ce12066d904fd2dcfcb99bc880f2aed", "filename": "src/libregex/vm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibregex%2Fvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibregex%2Fvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fvm.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -35,7 +35,7 @@\n \n use std::cmp;\n use std::mem;\n-use std::slice::MutableVector;\n+use std::slice::MutableSlice;\n use compile::{\n     Program,\n     Match, OneChar, CharClass, Any, EmptyBegin, EmptyEnd, EmptyWordBoundary,"}, {"sha": "706b5c3325576c212dc72be9055ec4b9a035166c", "filename": "src/librlibc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibrlibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibrlibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrlibc%2Flib.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -112,7 +112,7 @@ mod test {\n     use core::iter::Iterator;\n     use core::collections::Collection;\n     use core::str::StrSlice;\n-    use core::slice::{MutableVector, ImmutableVector};\n+    use core::slice::{MutableSlice, ImmutableSlice};\n \n     use super::{memcmp, memset, memcpy, memmove};\n "}, {"sha": "6e442a018a068997c48ba37af49ee502e994a0be", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -19,7 +19,7 @@ use fmt;\n use iter::Iterator;\n use mem;\n use option::{Option, Some, None};\n-use slice::{ImmutableVector, MutableVector, Vector};\n+use slice::{ImmutableSlice, MutableSlice, Vector};\n use str::{Str, StrSlice};\n use str;\n use string::String;"}, {"sha": "1bb92c487c63a0d72a27c4b211547da4d2169464", "filename": "src/libstd/collections/hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -2743,7 +2743,7 @@ mod test_set {\n     use prelude::*;\n \n     use super::HashSet;\n-    use slice::ImmutableEqVector;\n+    use slice::ImmutableEqSlice;\n     use collections::Collection;\n \n     #[test]"}, {"sha": "f3bdd987122cdb62922e5c305c9989477e74eea6", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -29,7 +29,7 @@ use option::*;\n use os;\n use path::{Path,GenericPath};\n use result::*;\n-use slice::{Vector,ImmutableVector};\n+use slice::{Vector,ImmutableSlice};\n use str;\n use string::String;\n use vec::Vec;"}, {"sha": "a9b0b33c59ad9ae3b2ef066b0ab8a08c431fab62", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -19,7 +19,7 @@ use iter::ExactSize;\n use ops::Drop;\n use option::{Some, None, Option};\n use result::{Ok, Err};\n-use slice::{ImmutableVector, MutableVector};\n+use slice::{ImmutableSlice, MutableSlice};\n use slice;\n use vec::Vec;\n "}, {"sha": "53b5fbe3894edc099bd9e36ea109b6b4ab76eca9", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -15,7 +15,7 @@ use comm::{Sender, Receiver};\n use io;\n use option::{None, Option, Some};\n use result::{Ok, Err};\n-use slice::{bytes, MutableVector, ImmutableVector};\n+use slice::{bytes, MutableSlice, ImmutableSlice};\n use str::StrSlice;\n use super::{Reader, Writer, IoResult};\n use vec::Vec;"}, {"sha": "c40ea749376a07faf087e8a7319e3ca2ffa322bd", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -21,7 +21,7 @@ use option::{Option, Some, None};\n use result::{Ok, Err};\n use io;\n use io::{IoError, IoResult, Reader};\n-use slice::{ImmutableVector, Vector};\n+use slice::{ImmutableSlice, Vector};\n use ptr::RawPtr;\n \n /// An iterator that reads a single byte on each iteration,\n@@ -153,7 +153,7 @@ pub fn u64_to_be_bytes<T>(n: u64, size: uint, f: |v: &[u8]| -> T) -> T {\n pub fn u64_from_be_bytes(data: &[u8], start: uint, size: uint) -> u64 {\n     use ptr::{copy_nonoverlapping_memory};\n     use mem::from_be64;\n-    use slice::MutableVector;\n+    use slice::MutableSlice;\n \n     assert!(size <= 8u);\n "}, {"sha": "f95f41509a0f50b9158538476765560b4f265447", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -70,7 +70,7 @@ use path;\n use result::{Err, Ok};\n use rt::rtio::LocalIo;\n use rt::rtio;\n-use slice::ImmutableVector;\n+use slice::ImmutableSlice;\n use string::String;\n use vec::Vec;\n "}, {"sha": "e6866f45948565a23db43eeba6ec9eb4a2b68c7c", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -19,7 +19,7 @@ use result::{Err, Ok};\n use io;\n use io::{Reader, Writer, Seek, Buffer, IoError, SeekStyle, IoResult};\n use slice;\n-use slice::{Vector, ImmutableVector, MutableVector};\n+use slice::{Vector, ImmutableSlice, MutableSlice};\n use vec::Vec;\n \n static BUF_CAPACITY: uint = 128;"}, {"sha": "fa21c108ea342e71170ce951e3cdcbcb1b47ab12", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -235,7 +235,7 @@ use os;\n use boxed::Box;\n use result::{Ok, Err, Result};\n use rt::rtio;\n-use slice::{Vector, MutableVector, ImmutableVector};\n+use slice::{Vector, MutableSlice, ImmutableSlice};\n use str::{Str, StrSlice};\n use str;\n use string::String;"}, {"sha": "ed76cdc276ba62e8488f284fd2eb98fa2f5fb51c", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -21,7 +21,7 @@ use from_str::FromStr;\n use iter::Iterator;\n use option::{Option, None, Some};\n use str::StrSlice;\n-use slice::{MutableCloneableVector, ImmutableVector, MutableVector};\n+use slice::{MutableCloneableSlice, ImmutableSlice, MutableSlice};\n \n pub type Port = u16;\n "}, {"sha": "25ede848b881737ec1e30db8d984e63ea63ba93f", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -21,7 +21,7 @@ use clone::Clone;\n use collections::MutableSeq;\n use io::IoResult;\n use iter::Iterator;\n-use slice::ImmutableVector;\n+use slice::ImmutableSlice;\n use result::{Ok,Err};\n use io::net::addrinfo::get_host_addresses;\n use io::net::ip::SocketAddr;"}, {"sha": "0ef13df513f9737d7415127486b6f1fb529cbb55", "filename": "src/libstd/io/signal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fio%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fio%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fsignal.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -30,7 +30,7 @@ use option::{Some, None};\n use boxed::Box;\n use result::{Ok, Err};\n use rt::rtio::{IoFactory, LocalIo, RtioSignal, Callback};\n-use slice::ImmutableVector;\n+use slice::ImmutableSlice;\n use vec::Vec;\n \n /// Signals that can be sent and received"}, {"sha": "fea161c426a2e1a15a22fc5876fc052cd99cab16", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -41,7 +41,7 @@ use rt;\n use rt::local::Local;\n use rt::task::Task;\n use rt::rtio::{DontClose, IoFactory, LocalIo, RtioFileStream, RtioTTY};\n-use slice::ImmutableVector;\n+use slice::ImmutableSlice;\n use str::StrSlice;\n use uint;\n "}, {"sha": "f5b2f31a127d603f25fc09ea5d8513e885d3380a", "filename": "src/libstd/num/i16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi16.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -17,7 +17,7 @@ use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n-use slice::ImmutableVector;\n+use slice::ImmutableSlice;\n use string::String;\n \n pub use core::i16::{BITS, BYTES, MIN, MAX};"}, {"sha": "623a10725c826387d8c942b9c0f79efd3e416658", "filename": "src/libstd/num/i32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi32.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -17,7 +17,7 @@ use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n-use slice::ImmutableVector;\n+use slice::ImmutableSlice;\n use string::String;\n \n pub use core::i32::{BITS, BYTES, MIN, MAX};"}, {"sha": "ffb1307908c90821941ee8721d7a7ed8c20989f2", "filename": "src/libstd/num/i64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi64.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -17,7 +17,7 @@ use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n-use slice::ImmutableVector;\n+use slice::ImmutableSlice;\n use string::String;\n \n pub use core::i64::{BITS, BYTES, MIN, MAX};"}, {"sha": "4fbb7381238dc77569a6a05aafd84e20d1f9ac45", "filename": "src/libstd/num/i8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi8.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -17,7 +17,7 @@ use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n-use slice::ImmutableVector;\n+use slice::ImmutableSlice;\n use string::String;\n \n pub use core::i8::{BITS, BYTES, MIN, MAX};"}, {"sha": "7821306f5fc3da122ee4d2f4d027a6920272b1c8", "filename": "src/libstd/num/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -17,7 +17,7 @@ use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n-use slice::ImmutableVector;\n+use slice::ImmutableSlice;\n use string::String;\n \n pub use core::int::{BITS, BYTES, MIN, MAX};"}, {"sha": "407c8ea61d9146eeef1b061eb3ac96d6871586cd", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -20,7 +20,7 @@ use num::{Float, FPNaN, FPInfinite, ToPrimitive};\n use num;\n use ops::{Add, Sub, Mul, Div, Rem, Neg};\n use option::{None, Option, Some};\n-use slice::{ImmutableVector, MutableVector};\n+use slice::{ImmutableSlice, MutableSlice};\n use std::cmp::{PartialOrd, PartialEq};\n use str::StrSlice;\n use string::String;"}, {"sha": "0f00f99e980a2a6c387555fd8ca36bbb7b3cdd33", "filename": "src/libstd/num/u16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu16.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -17,7 +17,7 @@ use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n-use slice::ImmutableVector;\n+use slice::ImmutableSlice;\n use string::String;\n \n pub use core::u16::{BITS, BYTES, MIN, MAX};"}, {"sha": "e6c6bc377b7aa304d51cb468c93f06ac091b6768", "filename": "src/libstd/num/u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu32.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -17,7 +17,7 @@ use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n-use slice::ImmutableVector;\n+use slice::ImmutableSlice;\n use string::String;\n \n pub use core::u32::{BITS, BYTES, MIN, MAX};"}, {"sha": "7eb9e1a082fe872abb009e326cc94657d7048a41", "filename": "src/libstd/num/u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu64.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -17,7 +17,7 @@ use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n-use slice::ImmutableVector;\n+use slice::ImmutableSlice;\n use string::String;\n \n pub use core::u64::{BITS, BYTES, MIN, MAX};"}, {"sha": "300dd3bcc01a4cfc69f2f7965bb0f614a024f7ec", "filename": "src/libstd/num/u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu8.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -17,7 +17,7 @@ use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n-use slice::ImmutableVector;\n+use slice::ImmutableSlice;\n use string::String;\n \n pub use core::u8::{BITS, BYTES, MIN, MAX};"}, {"sha": "0adc22e321406ebdce3ef58c05d77dec808c8521", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -17,7 +17,7 @@ use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n-use slice::ImmutableVector;\n+use slice::ImmutableSlice;\n use string::String;\n \n pub use core::uint::{BITS, BYTES, MIN, MAX};"}, {"sha": "0d604aab8acbe044109de1eedebfaefa53aa026c", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -45,7 +45,7 @@ use path::{Path, GenericPath, BytesContainer};\n use ptr::RawPtr;\n use ptr;\n use result::{Err, Ok, Result};\n-use slice::{Vector, ImmutableVector, MutableVector, ImmutableEqVector};\n+use slice::{Vector, ImmutableSlice, MutableSlice, ImmutableEqSlice};\n use str::{Str, StrSlice, StrAllocating};\n use string::String;\n use sync::atomic::{AtomicInt, INIT_ATOMIC_INT, SeqCst};\n@@ -145,7 +145,7 @@ pub mod win32 {\n     use option::{None, Option};\n     use option;\n     use os::TMPBUF_SZ;\n-    use slice::{MutableVector, ImmutableVector};\n+    use slice::{MutableSlice, ImmutableSlice};\n     use string::String;\n     use str::StrSlice;\n     use vec::Vec;"}, {"sha": "087b3e4c53f4f6860b716ef52758639d6e8f4444", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -75,7 +75,7 @@ use str;\n use str::{MaybeOwned, Str, StrSlice};\n use string::String;\n use slice::Vector;\n-use slice::{ImmutableEqVector, ImmutableVector};\n+use slice::{ImmutableEqSlice, ImmutableSlice};\n use vec::Vec;\n \n /// Typedef for POSIX file paths."}, {"sha": "81abf3e7669b605752aa7326e06de35eb461a065", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -22,7 +22,7 @@ use option::{Option, None, Some};\n use str::Str;\n use str;\n use slice::{CloneableVector, Splits, Vector, VectorVector,\n-            ImmutableEqVector, ImmutableVector};\n+            ImmutableEqSlice, ImmutableSlice};\n use vec::Vec;\n \n use super::{BytesContainer, GenericPath, GenericPathUnsafe};"}, {"sha": "ca8eae769bba87c3235ea6a4946ed9beaa4ae481", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -23,7 +23,7 @@ use io::Writer;\n use iter::{AdditiveIterator, DoubleEndedIterator, Extendable, Iterator, Map};\n use mem;\n use option::{Option, Some, None};\n-use slice::{Vector, ImmutableVector};\n+use slice::{Vector, ImmutableSlice};\n use str::{CharSplits, Str, StrAllocating, StrVector, StrSlice};\n use string::String;\n use unicode::char::UnicodeChar;"}, {"sha": "d5d24d17d865da30870981c22c5c9a83af73dd4b", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -83,11 +83,11 @@\n #[doc(no_inline)] pub use tuple::{Tuple5, Tuple6, Tuple7, Tuple8};\n #[doc(no_inline)] pub use tuple::{Tuple9, Tuple10, Tuple11, Tuple12};\n #[doc(no_inline)] pub use slice::{CloneableVector, ImmutableCloneableVector};\n-#[doc(no_inline)] pub use slice::{MutableCloneableVector, MutableOrdVector};\n-#[doc(no_inline)] pub use slice::{ImmutableVector, MutableVector};\n-#[doc(no_inline)] pub use slice::{ImmutableEqVector, ImmutableOrdVector};\n+#[doc(no_inline)] pub use slice::{MutableCloneableSlice, MutableOrdSlice};\n+#[doc(no_inline)] pub use slice::{ImmutableSlice, MutableSlice};\n+#[doc(no_inline)] pub use slice::{ImmutableEqSlice, ImmutableOrdSlice};\n #[doc(no_inline)] pub use slice::{Vector, VectorVector};\n-#[doc(no_inline)] pub use slice::MutableVectorAllocating;\n+#[doc(no_inline)] pub use slice::MutableSliceAllocating;\n #[doc(no_inline)] pub use string::String;\n #[doc(no_inline)] pub use vec::Vec;\n "}, {"sha": "2be4129883f7421aa9ee966140e7a03adc4bac4b", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -70,7 +70,7 @@ mod imp {\n     use rand::Rng;\n     use result::{Ok};\n     use self::libc::{c_int, size_t};\n-    use slice::MutableVector;\n+    use slice::MutableSlice;\n \n     /// A random number generator that retrieves randomness straight from\n     /// the operating system. Platform sources:\n@@ -138,7 +138,7 @@ mod imp {\n     use rt::stack;\n     use self::libc::{DWORD, BYTE, LPCSTR, BOOL};\n     use self::libc::types::os::arch::extra::{LONG_PTR};\n-    use slice::MutableVector;\n+    use slice::MutableSlice;\n \n     type HCRYPTPROV = LONG_PTR;\n "}, {"sha": "a4491b2ab1d4695f3e467205c1d8e31694c11d70", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -258,7 +258,7 @@ mod imp {\n     pub fn write(w: &mut Writer) -> IoResult<()> {\n         use iter::{Iterator, range};\n         use result;\n-        use slice::{MutableVector};\n+        use slice::{MutableSlice};\n \n         extern {\n             fn backtrace(buf: *mut *mut libc::c_void,\n@@ -398,7 +398,7 @@ mod imp {\n         use path::GenericPath;\n         use ptr::RawPtr;\n         use ptr;\n-        use slice::{ImmutableVector, MutableVector};\n+        use slice::{ImmutableSlice, MutableSlice};\n \n         ////////////////////////////////////////////////////////////////////////\n         // libbacktrace.h API\n@@ -670,7 +670,7 @@ mod imp {\n     use path::Path;\n     use result::{Ok, Err};\n     use rt::mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n-    use slice::ImmutableVector;\n+    use slice::ImmutableSlice;\n     use str::StrSlice;\n     use dynamic_lib::DynamicLibrary;\n "}, {"sha": "c5e1773dcffc992718fbf95f4c130c1a00bfadfa", "filename": "src/libunicode/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibunicode%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibunicode%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fnormalize.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -15,7 +15,7 @@\n \n use core::cmp::{Equal, Less, Greater};\n use core::option::{Option, Some, None};\n-use core::slice::ImmutableVector;\n+use core::slice::ImmutableSlice;\n use tables::normalization::{canonical_table, compatibility_table, composition_table};\n \n fn bsearch_table<T>(c: char, r: &'static [(char, &'static [T])]) -> Option<&'static [T]> {"}, {"sha": "e58fe5895574d2d4659dc1b72f609bfc531a41fa", "filename": "src/libunicode/tables.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibunicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5b6927e8e428239082ecc17b85a0506bcc9a65/src%2Flibunicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Ftables.rs?ref=4f5b6927e8e428239082ecc17b85a0506bcc9a65", "patch": "@@ -14,7 +14,7 @@\n \n fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n     use core::cmp::{Equal, Less, Greater};\n-    use core::slice::ImmutableVector;\n+    use core::slice::ImmutableSlice;\n     use core::option::None;\n     r.bsearch(|&(lo,hi)| {\n         if lo <= c && c <= hi { Equal }\n@@ -6230,7 +6230,7 @@ pub mod normalization {\n     fn bsearch_range_value_table(c: char, r: &'static [(char, char, u8)]) -> u8 {\n         use core::option::{Some, None};\n         use core::cmp::{Equal, Less, Greater};\n-        use core::slice::ImmutableVector;\n+        use core::slice::ImmutableSlice;\n         match r.bsearch(|&(lo, hi, _)| {\n             if lo <= c && c <= hi { Equal }\n             else if hi < c { Less }\n@@ -6354,7 +6354,7 @@ pub mod normalization {\n \n pub mod conversions {\n     use core::cmp::{Equal, Less, Greater};\n-    use core::slice::ImmutableVector;\n+    use core::slice::ImmutableSlice;\n     use core::tuple::Tuple2;\n     use core::option::{Option, Some, None};\n \n@@ -6915,7 +6915,7 @@ pub mod conversions {\n \n pub mod charwidth {\n     use core::option::{Option, Some, None};\n-    use core::slice::ImmutableVector;\n+    use core::slice::ImmutableSlice;\n \n     fn bsearch_range_value_table(c: char, is_cjk: bool, r: &'static [(char, char, u8, u8)]) -> u8 {\n         use core::cmp::{Equal, Less, Greater};\n@@ -7113,7 +7113,7 @@ pub mod charwidth {\n \n pub mod grapheme {\n     use core::option::{Some, None};\n-    use core::slice::ImmutableVector;\n+    use core::slice::ImmutableSlice;\n \n     #[allow(non_camel_case_types)]\n     #[deriving(Clone)]"}]}