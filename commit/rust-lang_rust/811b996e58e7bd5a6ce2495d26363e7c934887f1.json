{"sha": "811b996e58e7bd5a6ce2495d26363e7c934887f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMWI5OTZlNThlN2JkNWE2Y2UyNDk1ZDI2MzYzZTdjOTM0ODg3ZjE=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-19T17:43:13Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-19T17:43:13Z"}, "message": "Change `ByRef` to a struct variant to clarify its fields via names", "tree": {"sha": "b5971bd7e6c59f27a0f29c72ff82ac622ee75091", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5971bd7e6c59f27a0f29c72ff82ac622ee75091"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/811b996e58e7bd5a6ce2495d26363e7c934887f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/811b996e58e7bd5a6ce2495d26363e7c934887f1", "html_url": "https://github.com/rust-lang/rust/commit/811b996e58e7bd5a6ce2495d26363e7c934887f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/811b996e58e7bd5a6ce2495d26363e7c934887f1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23a1ebb3fca8dc77340dd94400255722260991e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/23a1ebb3fca8dc77340dd94400255722260991e9", "html_url": "https://github.com/rust-lang/rust/commit/23a1ebb3fca8dc77340dd94400255722260991e9"}], "stats": {"total": 76, "additions": 42, "deletions": 34}, "files": [{"sha": "400a538baa96557070e89a27ed23610b693afa91", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=811b996e58e7bd5a6ce2495d26363e7c934887f1", "patch": "@@ -260,7 +260,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             ConstValue::Param(_) |\n             ConstValue::Scalar(_) |\n             ConstValue::Slice { .. } |\n-            ConstValue::ByRef(..) |\n+            ConstValue::ByRef { .. } |\n             ConstValue::Unevaluated(..) => {}\n         }\n "}, {"sha": "d94e2c6c2e09e3a786922d44ddacb1c9d7174455", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=811b996e58e7bd5a6ce2495d26363e7c934887f1", "patch": "@@ -43,13 +43,20 @@ pub enum ConstValue<'tcx> {\n         end: usize,\n     },\n \n-    /// An allocation together with an offset into the allocation.\n-    /// The alignment exists to allow `const_field` to have `ByRef` access to nonprimitive fields\n-    /// of `repr(packed)` structs. The alignment may be lower than the type of this constant.\n-    /// This permits reads with lower alignment than what the type would normally require.\n-    /// FIXME(RalfJ,oli-obk): The alignment checks are part of miri, but const eval doesn't really\n-    /// need them. Disabling them may be too hard though.\n-    ByRef(Size, Align, &'tcx Allocation),\n+    /// An value not represented/representable by `Scalar` or `Slice`\n+    ByRef {\n+        /// The alignment exists to allow `const_field` to have `ByRef` access to nonprimitive fields\n+        /// of `repr(packed)` structs. The alignment may be lower than the type of this constant.\n+        /// This permits reads with lower alignment than what the type would normally require.\n+        /// FIXME(RalfJ,oli-obk): The alignment checks are part of miri, but const eval doesn't really\n+        /// need them. Disabling them may be too hard though.\n+        align: Align,\n+        /// Offset into `alloc`\n+        offset: Size,\n+        /// The backing memory of the value, may contain more memory than needed for just the value\n+        /// in order to share `Allocation`s between values\n+        alloc: &'tcx Allocation,\n+    },\n \n     /// Used in the HIR by using `Unevaluated` everywhere and later normalizing to one of the other\n     /// variants when the code is monomorphic enough for that.\n@@ -66,7 +73,7 @@ impl<'tcx> ConstValue<'tcx> {\n             ConstValue::Param(_) |\n             ConstValue::Infer(_) |\n             ConstValue::Placeholder(_) |\n-            ConstValue::ByRef(..) |\n+            ConstValue::ByRef{ .. } |\n             ConstValue::Unevaluated(..) |\n             ConstValue::Slice { .. } => None,\n             ConstValue::Scalar(val) => Some(val),"}, {"sha": "c12402a57cc3cfcd416779e4e0ddda45072ef012", "filename": "src/librustc/ty/print/obsolete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs?ref=811b996e58e7bd5a6ce2495d26363e7c934887f1", "patch": "@@ -186,7 +186,7 @@ impl DefPathBasedNames<'tcx> {\n     // as well as the unprintable types of constants (see `push_type_name` for more details).\n     pub fn push_const_name(&self, c: &Const<'tcx>, output: &mut String, debug: bool) {\n         match c.val {\n-            ConstValue::Scalar(..) | ConstValue::Slice { .. } | ConstValue::ByRef(..) => {\n+            ConstValue::Scalar(..) | ConstValue::Slice { .. } | ConstValue::ByRef { .. } => {\n                 // FIXME(const_generics): we could probably do a better job here.\n                 write!(output, \"{:?}\", c).unwrap()\n             }"}, {"sha": "46adb7eb2a47642d8b61214c7791b7d7f5407ce1", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=811b996e58e7bd5a6ce2495d26363e7c934887f1", "patch": "@@ -594,7 +594,7 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n                 ty: a.ty,\n             }))\n         }\n-        (ConstValue::ByRef(..), _) => {\n+        (ConstValue::ByRef { .. }, _) => {\n             bug!(\n                 \"non-Scalar ConstValue encountered in super_relate_consts {:?} {:?}\",\n                 a,"}, {"sha": "ced2c8c465da498d70fe6cf15d5cd68c2690c133", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=811b996e58e7bd5a6ce2495d26363e7c934887f1", "patch": "@@ -1335,7 +1335,8 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {\n impl<'tcx> TypeFoldable<'tcx> for ConstValue<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         match *self {\n-            ConstValue::ByRef(offset, align, alloc) => ConstValue::ByRef(offset, align, alloc),\n+            ConstValue::ByRef { offset, align, alloc } =>\n+                ConstValue::ByRef { offset, align, alloc },\n             ConstValue::Infer(ic) => ConstValue::Infer(ic.fold_with(folder)),\n             ConstValue::Param(p) => ConstValue::Param(p.fold_with(folder)),\n             ConstValue::Placeholder(p) => ConstValue::Placeholder(p),\n@@ -1348,7 +1349,7 @@ impl<'tcx> TypeFoldable<'tcx> for ConstValue<'tcx> {\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         match *self {\n-            ConstValue::ByRef(..) => false,\n+            ConstValue::ByRef { .. } => false,\n             ConstValue::Infer(ic) => ic.visit_with(visitor),\n             ConstValue::Param(p) => p.visit_with(visitor),\n             ConstValue::Placeholder(_) => false,"}, {"sha": "7f11df397961dadeed525b2d80d393e21109bed1", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=811b996e58e7bd5a6ce2495d26363e7c934887f1", "patch": "@@ -71,7 +71,7 @@ pub fn codegen_static_initializer(\n     let static_ = cx.tcx.const_eval(param_env.and(cid))?;\n \n     let alloc = match static_.val {\n-        ConstValue::ByRef(offset, align, alloc) if offset.bytes() == 0 && align == alloc.align => {\n+        ConstValue::ByRef { offset, align, alloc } if offset.bytes() == 0 && align == alloc.align => {\n             alloc\n         },\n         _ => bug!(\"static const eval returned {:#?}\", static_),"}, {"sha": "4a6752fec3556a1e7a205841f40bd2a64e24d6c1", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=811b996e58e7bd5a6ce2495d26363e7c934887f1", "patch": "@@ -109,7 +109,7 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n                 let b_llval = bx.const_usize((end - start) as u64);\n                 OperandValue::Pair(a_llval, b_llval)\n             },\n-            ConstValue::ByRef(offset, align, alloc) => {\n+            ConstValue::ByRef { offset, align, alloc } => {\n                 return bx.load_operand(bx.from_const_alloc(layout, align, alloc, offset));\n             },\n         };"}, {"sha": "d56f39c6de204a7762c9b734b421aa54cfca19c8", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=811b996e58e7bd5a6ce2495d26363e7c934887f1", "patch": "@@ -424,7 +424,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let layout = cx.layout_of(self.monomorphize(&ty));\n                 match bx.tcx().const_eval(param_env.and(cid)) {\n                     Ok(val) => match val.val {\n-                        mir::interpret::ConstValue::ByRef(offset, align, alloc) => {\n+                        mir::interpret::ConstValue::ByRef { offset, align, alloc } => {\n                             bx.cx().from_const_alloc(layout, align, alloc, offset)\n                         }\n                         _ => bug!(\"promoteds should have an allocation: {:?}\", val),"}, {"sha": "64bc1929c9644af8f7d4764359061ccb1e4b2cfe", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=811b996e58e7bd5a6ce2495d26363e7c934887f1", "patch": "@@ -99,7 +99,7 @@ fn op_to_const<'tcx>(\n         Ok(mplace) => {\n             let ptr = mplace.ptr.to_ptr().unwrap();\n             let alloc = ecx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id);\n-            ConstValue::ByRef(ptr.offset, mplace.align, alloc)\n+            ConstValue::ByRef { offset: ptr.offset, align: mplace.align, alloc }\n         },\n         // see comment on `let try_as_immediate` above\n         Err(ImmTy { imm: Immediate::Scalar(x), .. }) => match x {\n@@ -113,7 +113,7 @@ fn op_to_const<'tcx>(\n                 let mplace = op.to_mem_place();\n                 let ptr = mplace.ptr.to_ptr().unwrap();\n                 let alloc = ecx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id);\n-                ConstValue::ByRef(ptr.offset, mplace.align, alloc)\n+                ConstValue::ByRef { offset: ptr.offset, align: mplace.align, alloc }\n             },\n         },\n         Err(ImmTy { imm: Immediate::ScalarPair(a, b), .. }) => {\n@@ -541,11 +541,11 @@ fn validate_and_turn_into_const<'tcx>(\n         if tcx.is_static(def_id) || cid.promoted.is_some() {\n             let ptr = mplace.ptr.to_ptr()?;\n             Ok(tcx.mk_const(ty::Const {\n-                val: ConstValue::ByRef(\n-                    ptr.offset,\n-                    mplace.align,\n-                    ecx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id),\n-                ),\n+                val: ConstValue::ByRef {\n+                    offset: ptr.offset,\n+                    align: mplace.align,\n+                    alloc: ecx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id),\n+                },\n                 ty: mplace.layout.ty,\n             }))\n         } else {"}, {"sha": "fc2951895f3fe9bd1cc2bd96cd7e8876005780b6", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=811b996e58e7bd5a6ce2495d26363e7c934887f1", "patch": "@@ -217,12 +217,12 @@ impl LiteralExpander<'tcx> {\n             // the easy case, deref a reference\n             (ConstValue::Scalar(Scalar::Ptr(p)), x, y) if x == y => {\n                 let alloc = self.tcx.alloc_map.lock().unwrap_memory(p.alloc_id);\n-                ConstValue::ByRef(\n-                    p.offset,\n+                ConstValue::ByRef {\n+                    offset: p.offset,\n                     // FIXME(oli-obk): this should be the type's layout\n-                    alloc.align,\n+                    align: alloc.align,\n                     alloc,\n-                )\n+                }\n             },\n             // unsize array to slice if pattern is array but match value or other patterns are slice\n             (ConstValue::Scalar(Scalar::Ptr(p)), ty::Array(t, n), ty::Slice(u)) => {\n@@ -1436,7 +1436,7 @@ fn slice_pat_covered_by_const<'tcx>(\n     suffix: &[Pattern<'tcx>],\n ) -> Result<bool, ErrorReported> {\n     let data: &[u8] = match (const_val.val, &const_val.ty.sty) {\n-        (ConstValue::ByRef(offset, _, alloc), ty::Array(t, n)) => {\n+        (ConstValue::ByRef { offset, alloc, .. }, ty::Array(t, n)) => {\n             assert_eq!(*t, tcx.types.u8);\n             let n = n.assert_usize(tcx).unwrap();\n             let ptr = Pointer::new(AllocId(0), offset);\n@@ -1759,7 +1759,7 @@ fn specialize<'p, 'a: 'p, 'tcx>(\n                     let (alloc, offset, n, ty) = match value.ty.sty {\n                         ty::Array(t, n) => {\n                             match value.val {\n-                                ConstValue::ByRef(offset, _, alloc) => (\n+                                ConstValue::ByRef { offset, alloc, .. } => (\n                                     alloc,\n                                     offset,\n                                     n.unwrap_usize(cx.tcx),\n@@ -1779,7 +1779,7 @@ fn specialize<'p, 'a: 'p, 'tcx>(\n                                     (end - start) as u64,\n                                     t,\n                                 ),\n-                                ConstValue::ByRef(..) => {\n+                                ConstValue::ByRef { .. } => {\n                                     // FIXME(oli-obk): implement `deref` for `ConstValue`\n                                     return None;\n                                 },"}, {"sha": "ec391b7bc5f0201814ab567b23c3e9a057fa5635", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=811b996e58e7bd5a6ce2495d26363e7c934887f1", "patch": "@@ -538,7 +538,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n             self.layout_of(self.monomorphize(val.ty)?)\n         })?;\n         let op = match val.val {\n-            ConstValue::ByRef(offset, align, alloc) => {\n+            ConstValue::ByRef { offset, align, alloc } => {\n                 let id = self.tcx.alloc_map.lock().create_memory_alloc(alloc);\n                 // We rely on mutability being set correctly in that allocation to prevent writes\n                 // where none should happen."}, {"sha": "bb2738d5aa4a32437ff4898e99b7109d2a7a4a54", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=811b996e58e7bd5a6ce2495d26363e7c934887f1", "patch": "@@ -1262,7 +1262,7 @@ fn collect_const<'tcx>(\n         ConstValue::Scalar(Scalar::Ptr(ptr)) =>\n             collect_miri(tcx, ptr.alloc_id, output),\n         ConstValue::Slice { data: alloc, start: _, end: _ } |\n-        ConstValue::ByRef(_, _, alloc) => {\n+        ConstValue::ByRef { alloc, .. } => {\n             for &((), id) in alloc.relocations.values() {\n                 collect_miri(tcx, id, output);\n             }"}, {"sha": "21acd67c033165b32310aa23f782997e888cd64e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811b996e58e7bd5a6ce2495d26363e7c934887f1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=811b996e58e7bd5a6ce2495d26363e7c934887f1", "patch": "@@ -1448,8 +1448,8 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: DefId, span: Span)\n     };\n     let param_env = ty::ParamEnv::reveal_all();\n     if let Ok(static_) = tcx.const_eval(param_env.and(cid)) {\n-        let alloc = if let ConstValue::ByRef(_, _, allocation) = static_.val {\n-            allocation\n+        let alloc = if let ConstValue::ByRef { alloc, .. } = static_.val {\n+            alloc\n         } else {\n             bug!(\"Matching on non-ByRef static\")\n         };"}]}