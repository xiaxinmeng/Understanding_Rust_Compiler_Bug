{"sha": "99ee0fca6722bc8b78032605c2f6243340f6b04e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZWUwZmNhNjcyMmJjOGI3ODAzMjYwNWMyZjYyNDMzNDBmNmIwNGU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-02T18:28:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-02T22:13:41Z"}, "message": "Remove estrs and evecs from runtime. Issue #855", "tree": {"sha": "ae3aaf03739cb0a96789d3d79a412a370b00b12b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae3aaf03739cb0a96789d3d79a412a370b00b12b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99ee0fca6722bc8b78032605c2f6243340f6b04e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99ee0fca6722bc8b78032605c2f6243340f6b04e", "html_url": "https://github.com/rust-lang/rust/commit/99ee0fca6722bc8b78032605c2f6243340f6b04e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99ee0fca6722bc8b78032605c2f6243340f6b04e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e68f687179f11c19b45a48137980ffb312dee999", "url": "https://api.github.com/repos/rust-lang/rust/commits/e68f687179f11c19b45a48137980ffb312dee999", "html_url": "https://github.com/rust-lang/rust/commit/e68f687179f11c19b45a48137980ffb312dee999"}], "stats": {"total": 348, "additions": 38, "deletions": 310}, "files": [{"sha": "77587bd058c7d189a2f5de8c206ff865d4cd571f", "filename": "src/lib/dbg.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99ee0fca6722bc8b78032605c2f6243340f6b04e/src%2Flib%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99ee0fca6722bc8b78032605c2f6243340f6b04e/src%2Flib%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fdbg.rs?ref=99ee0fca6722bc8b78032605c2f6243340f6b04e", "patch": "@@ -19,7 +19,6 @@ native \"rust\" mod rustrt {\n     fn debug_obj<T>(x: &T, nmethods: uint, nbytes: uint);\n     fn debug_fn<T>(x: &T);\n     fn debug_ptrcast<T, U>(x: @T) -> @U;\n-    fn debug_trap(msg: str);\n }\n \n fn debug_tydesc<T>() { rustrt::debug_tydesc::<T>(); }\n@@ -48,8 +47,6 @@ fn debug_fn<T>(x: &T) { rustrt::debug_fn::<T>(x); }\n \n fn ptr_cast<T, U>(x: @T) -> @U { ret rustrt::debug_ptrcast::<T, U>(x); }\n \n-fn trap(s: str) { rustrt::debug_trap(s); }\n-\n fn refcount<T>(a: &@T) -> uint {\n     let p: *uint = unsafe::reinterpret_cast(a);\n     ret *p;"}, {"sha": "b31f9ca8637c1903cd1085555c730582bd1e58ee", "filename": "src/lib/posix_fs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99ee0fca6722bc8b78032605c2f6243340f6b04e/src%2Flib%2Fposix_fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99ee0fca6722bc8b78032605c2f6243340f6b04e/src%2Flib%2Fposix_fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fposix_fs.rs?ref=99ee0fca6722bc8b78032605c2f6243340f6b04e", "patch": "@@ -1,7 +1,6 @@\n \n native \"rust\" mod rustrt {\n     fn rust_list_files(path: &istr) -> [istr];\n-    fn rust_dirent_filename(ent: os::libc::dirent) -> str;\n }\n \n fn list_dir(path: &istr) -> [istr] {"}, {"sha": "86a099c0cc22ebffe8996155eb93bc75f6ed1f6f", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 6, "deletions": 42, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/99ee0fca6722bc8b78032605c2f6243340f6b04e/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/99ee0fca6722bc8b78032605c2f6243340f6b04e/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=99ee0fca6722bc8b78032605c2f6243340f6b04e", "patch": "@@ -7,11 +7,9 @@ command_line_args : public kernel_owned<command_line_args>\n     rust_task *task;\n     int argc;\n     char **argv;\n-    rust_str **strs;\n \n     // [str] passed to rust_task::start.\n     rust_vec *args;\n-    rust_vec *args_istr;\n \n     command_line_args(rust_task *task,\n                       int sys_argc,\n@@ -40,52 +38,24 @@ command_line_args : public kernel_owned<command_line_args>\n         LocalFree(wargv);\n #endif\n \n-        // Allocate a vector of estrs\n-        size_t vec_fill = sizeof(rust_str *) * argc;\n-        size_t vec_alloc = next_power_of_two(vec_fill);\n-        void *mem = kernel->malloc(vec_alloc, \"command line\");\n-        strs = (rust_str**) mem;\n-        for (int i = 0; i < argc; ++i) {\n-            size_t str_fill = strlen(argv[i]) + 1;\n-            size_t str_alloc = next_power_of_two(sizeof(rust_str) + str_fill);\n-            mem = kernel->malloc(str_alloc, \"command line arg\");\n-            strs[i] = new (mem) rust_str(str_alloc, str_fill,\n-                                         (uint8_t const *)argv[i]);\n-            strs[i]->ref_count++;\n-        }\n-\n         args = (rust_vec *)\n-            kernel->malloc(vec_size<rust_str*>(argc),\n-                           \"command line arg interior\");\n-        args->fill = args->alloc = sizeof(rust_str *) * argc;\n-        memcpy(&args->data[0], strs, args->fill);\n-\n-        // Allocate a vector of istrs\n-        args_istr = (rust_vec *)\n             kernel->malloc(vec_size<rust_vec*>(argc),\n                            \"command line arg interior\");\n-        args_istr->fill = args_istr->alloc = sizeof(rust_vec*) * argc;\n+        args->fill = args->alloc = sizeof(rust_vec*) * argc;\n         for (int i = 0; i < argc; ++i) {\n             rust_vec *str = make_istr(kernel, argv[i],\n                                       strlen(argv[i]),\n                                       \"command line arg\");\n-            ((rust_vec**)&args_istr->data)[i] = str;\n+            ((rust_vec**)&args->data)[i] = str;\n         }\n     }\n \n     ~command_line_args() {\n-        // Free the estr args\n-        kernel->free(args);\n-        for (int i = 0; i < argc; ++i)\n-            kernel->free(strs[i]);\n-        kernel->free(strs);\n-\n-        // Free the istr args\n         for (int i = 0; i < argc; ++i) {\n-            rust_vec *s = ((rust_vec**)&args_istr->data)[i];\n+            rust_vec *s = ((rust_vec**)&args->data)[i];\n             kernel->free(s);\n         }\n-        kernel->free(args_istr);\n+        kernel->free(args);\n \n #ifdef __WIN32__\n         for (int i = 0; i < argc; ++i) {\n@@ -97,11 +67,9 @@ command_line_args : public kernel_owned<command_line_args>\n };\n \n \n-bool main_takes_istr = true;\n-\n+// FIXME: Transitional. Please remove.\n extern \"C\" CDECL void\n set_main_takes_istr(uintptr_t flag) {\n-    main_takes_istr = flag != 0;\n }\n \n /**\n@@ -136,11 +104,7 @@ rust_start(uintptr_t main_fn, int argc, char **argv,\n         DLOG(sched, dom, \"startup: arg[%d] = '%s'\", i, args->argv[i]);\n     }\n \n-    if (main_takes_istr) {\n-        root_task->start(main_fn, (uintptr_t)args->args_istr);\n-    } else {\n-        root_task->start(main_fn, (uintptr_t)args->args);\n-    }\n+    root_task->start(main_fn, (uintptr_t)args->args);\n     root_task->deref();\n     root_task = NULL;\n "}, {"sha": "814822e8f1eabb57a48807fc2de1137a4f9c39ce", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 3, "deletions": 72, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/99ee0fca6722bc8b78032605c2f6243340f6b04e/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/99ee0fca6722bc8b78032605c2f6243340f6b04e/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=99ee0fca6722bc8b78032605c2f6243340f6b04e", "patch": "@@ -7,7 +7,7 @@\n \n /* Native builtins. */\n \n-extern \"C\" CDECL rust_str*\n+extern \"C\" CDECL rust_vec*\n last_os_error(rust_task *task) {\n     LOG(task, task, \"last_os_error()\");\n \n@@ -39,16 +39,9 @@ last_os_error(rust_task *task) {\n         return NULL;\n     }\n #endif\n-    size_t fill = strlen(buf) + 1;\n-    size_t alloc = next_power_of_two(sizeof(rust_str) + fill);\n-    void *mem = task->malloc(alloc, \"rust_str(last_os_error)\");\n-    if (!mem) {\n-        task->fail();\n-        return NULL;\n-    }\n-    rust_str *st = new (mem) rust_str(alloc, fill,\n-                                      (const uint8_t *)buf);\n \n+    rust_vec * st = make_istr(task->kernel, buf, strlen(buf),\n+                              \"last_os_error\");\n #ifdef __WIN32__\n     LocalFree((HLOCAL)buf);\n #endif\n@@ -115,43 +108,6 @@ unsupervise(rust_task *task) {\n     task->unsupervise();\n }\n \n-/* Helper for str_alloc and str_from_vec.  Returns NULL as failure. */\n-static rust_evec*\n-vec_alloc_with_data(rust_task *task,\n-                    size_t n_elts,\n-                    size_t fill,\n-                    size_t elt_size,\n-                    void *d)\n-{\n-    size_t alloc = next_power_of_two(sizeof(rust_evec) + (n_elts * elt_size));\n-    void *mem = task->malloc(alloc, \"rust_evec (with data)\");\n-    if (!mem) return NULL;\n-    return new (mem) rust_evec(alloc, fill * elt_size, (uint8_t*)d);\n-}\n-\n-extern \"C\" CDECL char const *\n-str_buf(rust_task *task, rust_str *s)\n-{\n-    return (char const *)&s->data[0];\n-}\n-\n-extern \"C\" CDECL rust_str *\n-str_from_vec(rust_task *task, rust_vec **vp)\n-{\n-    rust_vec* v = *vp;\n-    rust_str *st = vec_alloc_with_data(task,\n-                                       v->fill + 1, // +1 for \\0\n-                                       v->fill,\n-                                       1,\n-                                       &v->data[0]);\n-    if (!st) {\n-        task->fail();\n-        return NULL;\n-    }\n-    st->data[st->fill++] = '\\0';\n-    return st;\n-}\n-\n extern \"C\" CDECL void\n vec_reserve_shared(rust_task* task, type_desc* ty, rust_vec** vp,\n                     size_t n_elts) {\n@@ -370,19 +326,6 @@ debug_ptrcast(rust_task *task,\n     return ptr;\n }\n \n-extern \"C\" CDECL void\n-debug_trap(rust_task *task, rust_str *s)\n-{\n-    LOG(task, stdlib, \"trapping: %s\", s->data);\n-    // FIXME: x86-ism.\n-    __asm__(\"int3\");\n-}\n-\n-rust_str* c_str_to_rust(rust_task *task, char const *str) {\n-    size_t len = strlen(str) + 1;\n-    return vec_alloc_with_data(task, len, len, 1, (void*)str);\n-}\n-\n extern \"C\" CDECL rust_vec*\n rust_list_files(rust_task *task, rust_vec **path) {\n     array_list<rust_vec*> strings;\n@@ -421,18 +364,6 @@ rust_list_files(rust_task *task, rust_vec **path) {\n   return vec;\n }\n \n-#if defined(__WIN32__)\n-extern \"C\" CDECL rust_str *\n-rust_dirent_filename(rust_task *task, void* ent) {\n-    return NULL;\n-}\n-#else\n-extern \"C\" CDECL rust_str *\n-rust_dirent_filename(rust_task *task, dirent* ent) {\n-    return c_str_to_rust(task, ent->d_name);\n-}\n-#endif\n-\n extern \"C\" CDECL int\n rust_file_is_dir(rust_task *task, char *path) {\n     struct stat buf;"}, {"sha": "504338da86273ad59b551a5e07114ecbe93a94e5", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 22, "deletions": 154, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/99ee0fca6722bc8b78032605c2f6243340f6b04e/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/99ee0fca6722bc8b78032605c2f6243340f6b04e/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=99ee0fca6722bc8b78032605c2f6243340f6b04e", "patch": "@@ -4,8 +4,9 @@\n \n // Upcalls.\n \n+// FIXME: Transitional. Please remove\n extern \"C\" CDECL char const *\n-str_buf(rust_task *task, rust_str *s);\n+str_buf(rust_task *task, void *s) { return NULL; }\n \n #ifdef __i386__\n void\n@@ -52,22 +53,33 @@ void upcall_log_double(rust_task *task, uint32_t level, double *f) {\n         task->sched->log(task, level, \"rust: %12.12f\", *f);\n }\n \n-extern \"C\" CDECL void\n-upcall_log_str(rust_task *task, uint32_t level, rust_str *str) {\n-    LOG_UPCALL_ENTRY(task);\n-    if (task->sched->log_lvl >= level) {\n-        const char *c = str_buf(task, str);\n-        task->sched->log(task, level, \"rust: %s\", c);\n-    }\n-}\n-\n extern \"C\" CDECL void\n upcall_yield(rust_task *task) {\n     LOG_UPCALL_ENTRY(task);\n     LOG(task, comm, \"upcall yield()\");\n     task->yield(1);\n }\n \n+// Copy elements from one vector to another,\n+// dealing with reference counts\n+static inline void\n+copy_elements(rust_task *task, type_desc *elem_t,\n+              void *pdst, void *psrc, size_t n)\n+{\n+    char *dst = (char *)pdst, *src = (char *)psrc;\n+    memmove(dst, src, n);\n+\n+    // increment the refcount of each element of the vector\n+    if (elem_t->take_glue) {\n+        glue_fn *take_glue = elem_t->take_glue;\n+        size_t elem_size = elem_t->size;\n+        const type_desc **tydescs = elem_t->first_param;\n+        for (char *p = dst; p < dst+n; p += elem_size) {\n+            take_glue(NULL, task, NULL, tydescs, p);\n+        }\n+    }\n+}\n+\n extern \"C\" CDECL void\n upcall_sleep(rust_task *task, size_t time_in_us) {\n     LOG_UPCALL_ENTRY(task);\n@@ -179,150 +191,6 @@ upcall_shared_free(rust_task *task, void* ptr) {\n     task->kernel->free(ptr);\n }\n \n-rust_str *make_str(rust_task *task, char const *s, size_t fill) {\n-    size_t alloc = next_power_of_two(sizeof(rust_str) + fill);\n-    void *mem = task->malloc(alloc, \"rust_str (make_str)\");\n-    if (!mem) {\n-        task->fail();\n-        return NULL;\n-    }\n-    rust_str *st = new (mem) rust_str(alloc, fill,\n-                                      (uint8_t const *) s);\n-    LOG(task, mem,\n-        \"upcall new_str('%s', %\" PRIdPTR \") = 0x%\" PRIxPTR,\n-        s, fill, st);\n-    return st;\n-}\n-\n-extern \"C\" CDECL rust_str *\n-upcall_new_str(rust_task *task, char const *s, size_t fill) {\n-    LOG_UPCALL_ENTRY(task);\n-    return make_str(task, s, fill);\n-}\n-\n-static rust_evec *\n-vec_grow(rust_task *task,\n-         rust_evec *v,\n-         size_t n_bytes,\n-         uintptr_t *need_copy,\n-         type_desc *td)\n-{\n-    rust_scheduler *sched = task->sched;\n-    LOG(task, mem,\n-        \"vec_grow(0x%\" PRIxPTR \", %\" PRIdPTR\n-        \"), rc=%\" PRIdPTR \" alloc=%\" PRIdPTR \", fill=%\" PRIdPTR\n-        \", need_copy=0x%\" PRIxPTR,\n-        v, n_bytes, v->ref_count, v->alloc, v->fill, need_copy);\n-\n-    *need_copy = 0;\n-    size_t alloc = next_power_of_two(sizeof(rust_evec) + v->fill + n_bytes);\n-\n-    if (v->ref_count == 1) {\n-\n-        // Fastest path: already large enough.\n-        if (v->alloc >= alloc) {\n-            LOG(task, mem, \"no-growth path\");\n-            return v;\n-        }\n-\n-        // Second-fastest path: can at least realloc.\n-        LOG(task, mem, \"realloc path\");\n-        v = (rust_evec*) task->realloc(v, alloc, td->is_stateful);\n-        if (!v) {\n-            task->fail();\n-            return NULL;\n-        }\n-        v->alloc = alloc;\n-\n-    } else {\n-        /**\n-         * Slowest path: make a new vec.\n-         *\n-         * 1. Allocate a new rust_evec with desired additional space.\n-         * 2. Down-ref the shared rust_evec, point to the new one instead.\n-         * 3. Copy existing elements into the new rust_evec.\n-         *\n-         * Step 3 is a bit tricky.  We don't know how to properly copy the\n-         * elements in the runtime (all we have are bits in a buffer; no\n-         * type information and no copy glue).  What we do instead is set the\n-         * need_copy outparam flag to indicate to our caller (vec-copy glue)\n-         * that we need the copies performed for us.\n-         */\n-        LOG(task, mem, \"new vec path\");\n-        void *mem = task->malloc(alloc, \"rust_evec (vec_grow)\", td);\n-        if (!mem) {\n-            task->fail();\n-            return NULL;\n-        }\n-\n-        if (v->ref_count != CONST_REFCOUNT)\n-            v->deref();\n-\n-        v = new (mem) rust_evec(alloc, 0, NULL);\n-        *need_copy = 1;\n-    }\n-    I(sched, sizeof(rust_evec) + v->fill <= v->alloc);\n-    return v;\n-}\n-\n-// Copy elements from one vector to another,\n-// dealing with reference counts\n-static inline void\n-copy_elements(rust_task *task, type_desc *elem_t,\n-              void *pdst, void *psrc, size_t n)\n-{\n-    char *dst = (char *)pdst, *src = (char *)psrc;\n-    memmove(dst, src, n);\n-\n-    // increment the refcount of each element of the vector\n-    if (elem_t->take_glue) {\n-        glue_fn *take_glue = elem_t->take_glue;\n-        size_t elem_size = elem_t->size;\n-        const type_desc **tydescs = elem_t->first_param;\n-        for (char *p = dst; p < dst+n; p += elem_size) {\n-            take_glue(NULL, task, NULL, tydescs, p);\n-        }\n-    }\n-}\n-\n-extern \"C\" CDECL void\n-upcall_evec_append(rust_task *task, type_desc *t, type_desc *elem_t,\n-                   rust_evec **dst_ptr, rust_evec *src, bool skip_null)\n-{\n-    LOG_UPCALL_ENTRY(task);\n-    rust_evec *dst = *dst_ptr;\n-    uintptr_t need_copy;\n-    size_t n_src_bytes = skip_null ? src->fill - 1 : src->fill;\n-    size_t n_dst_bytes = skip_null ? dst->fill - 1 : dst->fill;\n-    rust_evec *new_vec = vec_grow(task, dst, n_src_bytes, &need_copy, t);\n-\n-    // If src and dst are the same (due to \"v += v\"), then dst getting\n-    // resized causes src to move as well.\n-    if (dst == src && !need_copy) {\n-        src = new_vec;\n-    }\n-\n-    if (need_copy) {\n-        // Copy any dst elements in, omitting null if doing str.\n-        copy_elements(task, elem_t, &new_vec->data, &dst->data, n_dst_bytes);\n-    }\n-\n-    // Copy any src elements in, carrying along null if doing str.\n-    void *new_end = (void *)((char *)new_vec->data + n_dst_bytes);\n-    copy_elements(task, elem_t, new_end, &src->data, src->fill);\n-    new_vec->fill = n_dst_bytes + src->fill;\n-\n-    // Write new_vec back through the alias we were given.\n-    *dst_ptr = new_vec;\n-}\n-\n-// FIXME: Transitional. Please remove.\n-extern \"C\" CDECL void\n-upcall_vec_append(rust_task *task, type_desc *t, type_desc *elem_t,\n-                  rust_evec **dst_ptr, rust_evec *src, bool skip_null) {\n-    upcall_evec_append(task, t, elem_t, dst_ptr, src, skip_null);\n-}\n-\n extern \"C\" CDECL type_desc *\n upcall_get_type_desc(rust_task *task,\n                      void *curr_crate, // ignored, legacy compat."}, {"sha": "dc8eea20f72df2a4786dcab46160743a232ed392", "filename": "src/rt/rust_util.h", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/99ee0fca6722bc8b78032605c2f6243340f6b04e/src%2Frt%2Frust_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/99ee0fca6722bc8b78032605c2f6243340f6b04e/src%2Frt%2Frust_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.h?ref=99ee0fca6722bc8b78032605c2f6243340f6b04e", "patch": "@@ -164,36 +164,6 @@ isaac_init(sched_or_kernel *sched, randctx *rctx)\n         randinit(rctx, 1);\n }\n \n-// Vectors (rust-user-code level).\n-\n-struct\n-rust_evec\n-{\n-    RUST_REFCOUNTED(rust_evec)\n-\n-    size_t alloc;\n-    size_t fill;\n-    size_t pad; // Pad to align data[0] to 16 bytes.\n-    uint8_t data[];\n-    rust_evec(size_t alloc, size_t fill,\n-             uint8_t const *d)\n-        : ref_count(1),\n-          alloc(alloc),\n-          fill(fill)\n-    {\n-        if (d)\n-            memcpy(&data[0], d, fill);\n-    }\n-    ~rust_evec() {}\n-\n-    inline void *operator new(size_t size, void *mem) {\n-        return mem;\n-    }\n-};\n-\n-// Strings are just exterior vecs\n-typedef rust_evec rust_str;\n-\n // Interior vectors (rust-user-code level).\n \n struct"}, {"sha": "550155a834512ac7bd3d4134eadd1660e64ab996", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99ee0fca6722bc8b78032605c2f6243340f6b04e/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/99ee0fca6722bc8b78032605c2f6243340f6b04e/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=99ee0fca6722bc8b78032605c2f6243340f6b04e", "patch": "@@ -19,7 +19,6 @@ debug_opaque\n del_port\n debug_ptrcast\n debug_tag\n-debug_trap\n debug_tydesc\n do_gc\n drop_port\n@@ -44,7 +43,6 @@ rand_free\n rand_new\n rand_next\n refcount\n-rust_dirent_filename\n rust_file_is_dir\n rust_get_stdin\n rust_get_stdout\n@@ -63,7 +61,6 @@ size_of\n squareroot\n start_task\n str_buf\n-str_from_vec\n vec_reserve_shared\n vec_from_buf_shared\n task_sleep\n@@ -86,14 +83,9 @@ upcall_kill\n upcall_log_double\n upcall_log_float\n upcall_log_int\n-upcall_log_str\n-upcall_log_str\n upcall_log_type\n upcall_malloc\n-upcall_new_str\n upcall_shared_malloc\n upcall_shared_free\n upcall_sleep\n-upcall_evec_append\n-upcall_vec_append\n upcall_yield"}, {"sha": "b94f18f77f4af14fd38354bdf47fa780df1ae961", "filename": "src/test/stdtest/stdtest.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99ee0fca6722bc8b78032605c2f6243340f6b04e/src%2Ftest%2Fstdtest%2Fstdtest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/99ee0fca6722bc8b78032605c2f6243340f6b04e/src%2Ftest%2Fstdtest%2Fstdtest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fstdtest.rc?ref=99ee0fca6722bc8b78032605c2f6243340f6b04e", "patch": "@@ -25,6 +25,7 @@ mod run;\n mod sha1;\n mod sort;\n mod str;\n+mod sys;\n mod task;\n mod test;\n mod uint;"}, {"sha": "006aaaa8f5e4ced13d3cd66ad5cd5bd4eb50f5e4", "filename": "src/test/stdtest/sys.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99ee0fca6722bc8b78032605c2f6243340f6b04e/src%2Ftest%2Fstdtest%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99ee0fca6722bc8b78032605c2f6243340f6b04e/src%2Ftest%2Fstdtest%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fsys.rs?ref=99ee0fca6722bc8b78032605c2f6243340f6b04e", "patch": "@@ -0,0 +1,6 @@\n+import std::sys;\n+\n+#[test]\n+fn last_os_error() {\n+    log sys::rustrt::last_os_error();\n+}\n\\ No newline at end of file"}]}