{"sha": "d392cb596752c31415bb8b31aaacf6bc676371f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzOTJjYjU5Njc1MmMzMTQxNWJiOGIzMWFhYWNmNmJjNjc2MzcxZjI=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-06-02T16:51:51Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-06-04T15:26:10Z"}, "message": "Fix integer overflow in rotate_left", "tree": {"sha": "2beb737cdc130124d34b957aff1907dc8edce74a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2beb737cdc130124d34b957aff1907dc8edce74a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d392cb596752c31415bb8b31aaacf6bc676371f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d392cb596752c31415bb8b31aaacf6bc676371f2", "html_url": "https://github.com/rust-lang/rust/commit/d392cb596752c31415bb8b31aaacf6bc676371f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d392cb596752c31415bb8b31aaacf6bc676371f2/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c22ce2806c3198c9a2b90b78d00c5451593c833f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c22ce2806c3198c9a2b90b78d00c5451593c833f", "html_url": "https://github.com/rust-lang/rust/commit/c22ce2806c3198c9a2b90b78d00c5451593c833f"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "3f3651fd817edebe61c9360e8121f3c618047a54", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d392cb596752c31415bb8b31aaacf6bc676371f2/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d392cb596752c31415bb8b31aaacf6bc676371f2/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=d392cb596752c31415bb8b31aaacf6bc676371f2", "patch": "@@ -194,7 +194,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                 let raw_shift_bits = self.read_scalar(args[1])?.to_bits(layout.size)?;\n                 let width_bits = layout.size.bits() as u128;\n                 let shift_bits = raw_shift_bits % width_bits;\n-                let inv_shift_bits = (width_bits - raw_shift_bits) % width_bits;\n+                let inv_shift_bits = (width_bits - shift_bits) % width_bits;\n                 let result_bits = if intrinsic_name == \"rotate_left\" {\n                     (val_bits << shift_bits) | (val_bits >> inv_shift_bits)\n                 } else {"}, {"sha": "965f317c42466646a119df95c19daabd4e599e18", "filename": "src/test/run-pass/const-int-rotate.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d392cb596752c31415bb8b31aaacf6bc676371f2/src%2Ftest%2Frun-pass%2Fconst-int-rotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d392cb596752c31415bb8b31aaacf6bc676371f2/src%2Ftest%2Frun-pass%2Fconst-int-rotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-rotate.rs?ref=d392cb596752c31415bb8b31aaacf6bc676371f2", "patch": "@@ -1,11 +1,45 @@\n const LEFT: u32 = 0x10000b3u32.rotate_left(8);\n const RIGHT: u32 = 0xb301u32.rotate_right(8);\n \n+// Rotating these should make no difference\n+//\n+// We test using 124 bits because to ensure that overlong bit shifts do\n+// not cause undefined behaviour. See #10183.\n+const LEFT_OVERFLOW: i16 = 0i16.rotate_left(124);\n+const RIGHT_OVERFLOW: i16 = 0i16.rotate_right(124);\n+const ONE_LEFT_OVERFLOW: u16 = 1u16.rotate_left(124);\n+const ONE_RIGHT_OVERFLOW: u16 = 1u16.rotate_right(124);\n+\n+const NON_ZERO_LEFT_OVERFLOW: u16 = 0b10u16.rotate_left(124);\n+const NON_ZERO_RIGHT_OVERFLOW: u16 = 0b10u16.rotate_right(124);\n+\n+// Rotating by 0 should have no effect\n+const ZERO_ROTATE_LEFT: i8 = 0b0010_0001i8.rotate_left(0);\n+const ZERO_ROTATE_RIGHT: i8 = 0b0111_1001i8.rotate_right(0);\n+\n+// Rotating by a multiple of word size should also have no effect\n+const MULTIPLE_ROTATE_LEFT: i32 = 0b0010_0001i32.rotate_left(128);\n+const MULTIPLE_ROTATE_RIGHT: i32 = 0b0010_0001i32.rotate_right(128);\n+\n fn ident<T>(ident: T) -> T {\n     ident\n }\n \n fn main() {\n     assert_eq!(LEFT, ident(0xb301));\n-    assert_eq!(RIGHT, ident(0x10000b3));\n+    assert_eq!(RIGHT, ident(0x0100_00b3));\n+\n+    assert_eq!(LEFT_OVERFLOW, ident(0));\n+    assert_eq!(RIGHT_OVERFLOW, ident(0));\n+    assert_eq!(ONE_LEFT_OVERFLOW, ident(0b0001_0000_0000_0000));\n+    assert_eq!(ONE_RIGHT_OVERFLOW, ident(0b0001_0000));\n+\n+    assert_eq!(NON_ZERO_LEFT_OVERFLOW, ident(0b0010_0000_0000_0000));\n+    assert_eq!(NON_ZERO_RIGHT_OVERFLOW, ident(0b0000_0000_0010_0000));\n+\n+    assert_eq!(ZERO_ROTATE_LEFT, ident(0b0010_0001));\n+    assert_eq!(ZERO_ROTATE_RIGHT, ident(0b0111_1001));\n+\n+    assert_eq!(MULTIPLE_ROTATE_LEFT, ident(0b0010_0001));\n+    assert_eq!(MULTIPLE_ROTATE_RIGHT, ident(0b0010_0001));\n }"}]}