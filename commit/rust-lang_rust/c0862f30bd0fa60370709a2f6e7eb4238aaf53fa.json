{"sha": "c0862f30bd0fa60370709a2f6e7eb4238aaf53fa", "node_id": "C_kwDOAAsO6NoAKGMwODYyZjMwYmQwZmE2MDM3MDcwOWEyZjZlN2ViNDIzOGFhZjUzZmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-15T11:46:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-15T11:46:04Z"}, "message": "Rollup merge of #105722 - matthiaskrgr:compl2, r=compiler-errors\n\nmore clippy::complexity fixes\n\nr? ```@compiler-errors```", "tree": {"sha": "6c764153bd4a3160a9a5c4ef11eb3707258d61ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c764153bd4a3160a9a5c4ef11eb3707258d61ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjmwj8CRBK7hj4Ov3rIwAADi0IAEfSOs6gq21/5CjBGRpRmDLf\nVOc94A6KBSJ4zfEdYDZzC4QzfFAaHdH6Fz7wqyKkA9SE5FJ44F+jRGMfCXS9MQ5f\nM0Zo4Xt8053s9s/dmopKBMhE89S6D3T6ngLBrRsLpQXlT1OviMHynwMSYQwjoqKa\nSAd10e2tRa95t48/W4oUqvMha+LJw4rcrV71BQoznITB0oH02Q7BSLSriyYXxpzw\nXoEorOIf6o76Qx3sndw/QadTJdu3cas9qbs+i9Lk/tJxqmQ1gh1wZ2OtKBrDXYw+\n+giaNDHbYLvG0ZaT8AiTQVy/Y7D9X/coJ6Gux5d2Lh1Qmlh7K5tZ/vj9i9DmyU0=\n=Tt7/\n-----END PGP SIGNATURE-----\n", "payload": "tree 6c764153bd4a3160a9a5c4ef11eb3707258d61ff\nparent cb9bcafe0d5128d6381a836f7640c4de74ad64b3\nparent de59844c98f7925242a798a72c59dc3610dd0e2c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671104764 +0100\ncommitter GitHub <noreply@github.com> 1671104764 +0100\n\nRollup merge of #105722 - matthiaskrgr:compl2, r=compiler-errors\n\nmore clippy::complexity fixes\n\nr? ```@compiler-errors```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa", "html_url": "https://github.com/rust-lang/rust/commit/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb9bcafe0d5128d6381a836f7640c4de74ad64b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb9bcafe0d5128d6381a836f7640c4de74ad64b3", "html_url": "https://github.com/rust-lang/rust/commit/cb9bcafe0d5128d6381a836f7640c4de74ad64b3"}, {"sha": "de59844c98f7925242a798a72c59dc3610dd0e2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/de59844c98f7925242a798a72c59dc3610dd0e2c", "html_url": "https://github.com/rust-lang/rust/commit/de59844c98f7925242a798a72c59dc3610dd0e2c"}], "stats": {"total": 64, "additions": 23, "deletions": 41}, "files": [{"sha": "f933b9b161ca91f56bfb0db9e3f39eaae37e4d54", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=c0862f30bd0fa60370709a2f6e7eb4238aaf53fa", "patch": "@@ -2466,20 +2466,14 @@ pub enum ModKind {\n     Unloaded,\n }\n \n-#[derive(Copy, Clone, Encodable, Decodable, Debug)]\n+#[derive(Copy, Clone, Encodable, Decodable, Debug, Default)]\n pub struct ModSpans {\n     /// `inner_span` covers the body of the module; for a file module, its the whole file.\n     /// For an inline module, its the span inside the `{ ... }`, not including the curly braces.\n     pub inner_span: Span,\n     pub inject_use_span: Span,\n }\n \n-impl Default for ModSpans {\n-    fn default() -> ModSpans {\n-        ModSpans { inner_span: Default::default(), inject_use_span: Default::default() }\n-    }\n-}\n-\n /// Foreign module declaration.\n ///\n /// E.g., `extern { .. }` or `extern \"C\" { .. }`."}, {"sha": "05f059c89d5cd0fea01ea73e00e8d8419b4b3c9e", "filename": "compiler/rustc_data_structures/src/sorted_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs?ref=c0862f30bd0fa60370709a2f6e7eb4238aaf53fa", "patch": "@@ -126,13 +126,13 @@ impl<K: Ord, V> SortedMap<K, V> {\n     /// Iterate over the keys, sorted\n     #[inline]\n     pub fn keys(&self) -> impl Iterator<Item = &K> + ExactSizeIterator + DoubleEndedIterator {\n-        self.data.iter().map(|&(ref k, _)| k)\n+        self.data.iter().map(|(k, _)| k)\n     }\n \n     /// Iterate over values, sorted by key\n     #[inline]\n     pub fn values(&self) -> impl Iterator<Item = &V> + ExactSizeIterator + DoubleEndedIterator {\n-        self.data.iter().map(|&(_, ref v)| v)\n+        self.data.iter().map(|(_, v)| v)\n     }\n \n     #[inline]\n@@ -222,7 +222,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n         K: Borrow<Q>,\n         Q: Ord + ?Sized,\n     {\n-        self.data.binary_search_by(|&(ref x, _)| x.borrow().cmp(key))\n+        self.data.binary_search_by(|(x, _)| x.borrow().cmp(key))\n     }\n \n     #[inline]\n@@ -300,7 +300,7 @@ impl<K: Ord, V> FromIterator<(K, V)> for SortedMap<K, V> {\n     fn from_iter<T: IntoIterator<Item = (K, V)>>(iter: T) -> Self {\n         let mut data: Vec<(K, V)> = iter.into_iter().collect();\n \n-        data.sort_unstable_by(|&(ref k1, _), &(ref k2, _)| k1.cmp(k2));\n+        data.sort_unstable_by(|(k1, _), (k2, _)| k1.cmp(k2));\n         data.dedup_by(|&mut (ref k1, _), &mut (ref k2, _)| k1.cmp(k2) == Ordering::Equal);\n \n         SortedMap { data }"}, {"sha": "e2a0e436fd5e2677a9524066380a034907ef59b0", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=c0862f30bd0fa60370709a2f6e7eb4238aaf53fa", "patch": "@@ -2313,7 +2313,7 @@ impl FileWithAnnotatedLines {\n         }\n \n         // Find overlapping multiline annotations, put them at different depths\n-        multiline_annotations.sort_by_key(|&(_, ref ml)| (ml.line_start, usize::MAX - ml.line_end));\n+        multiline_annotations.sort_by_key(|(_, ml)| (ml.line_start, usize::MAX - ml.line_end));\n         for (_, ann) in multiline_annotations.clone() {\n             for (_, a) in multiline_annotations.iter_mut() {\n                 // Move all other multiline annotations overlapping with this one"}, {"sha": "518b5ec10f8906122c4ab9fb26cc19e80231bf8a", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=c0862f30bd0fa60370709a2f6e7eb4238aaf53fa", "patch": "@@ -324,7 +324,7 @@ impl CodeSuggestion {\n                         // Account for the difference between the width of the current code and the\n                         // snippet being suggested, so that the *later* suggestions are correctly\n                         // aligned on the screen.\n-                        acc += len as isize - (cur_hi.col.0 - cur_lo.col.0) as isize;\n+                        acc += len - (cur_hi.col.0 - cur_lo.col.0) as isize;\n                     }\n                     prev_hi = cur_hi;\n                     prev_line = sf.get_line(prev_hi.line - 1);"}, {"sha": "29a6902ccb0772591f896c431ec61e9d45ce37e1", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=c0862f30bd0fa60370709a2f6e7eb4238aaf53fa", "patch": "@@ -1757,7 +1757,6 @@ impl<'a> State<'a> {\n                 self.print_qpath(qpath, true);\n                 self.popen();\n                 if let Some(ddpos) = ddpos.as_opt_usize() {\n-                    let ddpos = ddpos as usize;\n                     self.commasep(Inconsistent, &elts[..ddpos], |s, p| s.print_pat(p));\n                     if ddpos != 0 {\n                         self.word_space(\",\");"}, {"sha": "13f06fe747349d8084b9b53d1a303c75f9b0278b", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=c0862f30bd0fa60370709a2f6e7eb4238aaf53fa", "patch": "@@ -192,7 +192,7 @@ impl Mismatch {\n         let crate_name = std::env::var(\"CARGO_CRATE_NAME\").ok()?;\n \n         // If we're not in a \"rustc_\" crate, bail.\n-        let Some((\"rustc\", slug_prefix)) = crate_name.split_once(\"_\") else { return None };\n+        let Some((\"rustc\", slug_prefix)) = crate_name.split_once('_') else { return None };\n \n         let slug_name = slug.segments.first()?.ident.to_string();\n         if !slug_name.starts_with(slug_prefix) {"}, {"sha": "3bafd3730bd79d2db4cb31d95bda50d7e756a492", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=c0862f30bd0fa60370709a2f6e7eb4238aaf53fa", "patch": "@@ -875,18 +875,12 @@ pub struct PacRet {\n     pub key: PAuthKey,\n }\n \n-#[derive(Clone, Copy, Hash, Debug, PartialEq)]\n+#[derive(Clone, Copy, Hash, Debug, PartialEq, Default)]\n pub struct BranchProtection {\n     pub bti: bool,\n     pub pac_ret: Option<PacRet>,\n }\n \n-impl Default for BranchProtection {\n-    fn default() -> Self {\n-        BranchProtection { bti: false, pac_ret: None }\n-    }\n-}\n-\n pub const fn default_lib_output() -> CrateType {\n     CrateType::Rlib\n }\n@@ -1875,7 +1869,7 @@ fn parse_opt_level(\n         .into_iter()\n         .flat_map(|(i, s)| {\n             // NB: This can match a string without `=`.\n-            if let Some(\"opt-level\") = s.splitn(2, '=').next() { Some(i) } else { None }\n+            if let Some(\"opt-level\") = s.split('=').next() { Some(i) } else { None }\n         })\n         .max();\n     if max_o > max_c {\n@@ -1912,7 +1906,7 @@ fn select_debuginfo(\n         .into_iter()\n         .flat_map(|(i, s)| {\n             // NB: This can match a string without `=`.\n-            if let Some(\"debuginfo\") = s.splitn(2, '=').next() { Some(i) } else { None }\n+            if let Some(\"debuginfo\") = s.split('=').next() { Some(i) } else { None }\n         })\n         .max();\n     if max_g > max_c {"}, {"sha": "26cd54210d0bbb9c33134c7876269f4f7a336006", "filename": "compiler/rustc_span/src/analyze_source_file.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_span%2Fsrc%2Fanalyze_source_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_span%2Fsrc%2Fanalyze_source_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fanalyze_source_file.rs?ref=c0862f30bd0fa60370709a2f6e7eb4238aaf53fa", "patch": "@@ -175,7 +175,7 @@ cfg_if::cfg_if! {\n             // There might still be a tail left to analyze\n             let tail_start = chunk_count * CHUNK_SIZE + intra_chunk_offset;\n             if tail_start < src.len() {\n-                analyze_source_file_generic(&src[tail_start as usize ..],\n+                analyze_source_file_generic(&src[tail_start ..],\n                                         src.len() - tail_start,\n                                         output_offset + BytePos::from_usize(tail_start),\n                                         lines,\n@@ -219,7 +219,7 @@ fn analyze_source_file_generic(\n     while i < scan_len {\n         let byte = unsafe {\n             // We verified that i < scan_len <= src.len()\n-            *src_bytes.get_unchecked(i as usize)\n+            *src_bytes.get_unchecked(i)\n         };\n \n         // How much to advance in order to get to the next UTF-8 char in the"}, {"sha": "5525eb5331c2776c82374222c7a47b32d7744573", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=c0862f30bd0fa60370709a2f6e7eb4238aaf53fa", "patch": "@@ -1381,7 +1381,7 @@ impl<S: Encoder> Encodable<S> for SourceFile {\n                     4 => {\n                         raw_diffs = Vec::with_capacity(bytes_per_diff * num_diffs);\n                         for diff in diff_iter {\n-                            raw_diffs.extend_from_slice(&(diff.0 as u32).to_le_bytes());\n+                            raw_diffs.extend_from_slice(&(diff.0).to_le_bytes());\n                         }\n                     }\n                     _ => unreachable!(),"}, {"sha": "fb3e4a6c083f82d69661213a16bc4f538045f5ff", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=c0862f30bd0fa60370709a2f6e7eb4238aaf53fa", "patch": "@@ -941,7 +941,7 @@ impl SourceMap {\n     /// Otherwise, the span reached to limit is returned.\n     pub fn span_look_ahead(&self, span: Span, expect: Option<&str>, limit: Option<usize>) -> Span {\n         let mut sp = span;\n-        for _ in 0..limit.unwrap_or(100 as usize) {\n+        for _ in 0..limit.unwrap_or(100_usize) {\n             sp = self.next_point(sp);\n             if let Ok(ref snippet) = self.span_to_snippet(sp) {\n                 if expect.map_or(false, |es| snippet == es) {"}, {"sha": "44644c4733e8726b33c886394631744352af4a04", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=c0862f30bd0fa60370709a2f6e7eb4238aaf53fa", "patch": "@@ -81,7 +81,7 @@ fn pre_link_args(os: &'static str, arch: Arch, abi: &'static str) -> LinkArgs {\n         _ => os.into(),\n     };\n \n-    let platform_version: StaticCow<str> = match os.as_ref() {\n+    let platform_version: StaticCow<str> = match os {\n         \"ios\" => ios_lld_platform_version(),\n         \"tvos\" => tvos_lld_platform_version(),\n         \"watchos\" => watchos_lld_platform_version(),"}, {"sha": "34934379c7e84a468abfe4995612c6bbb80aa579", "filename": "compiler/rustc_target/src/spec/powerpc64_ibm_aix.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_ibm_aix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_ibm_aix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_ibm_aix.rs?ref=c0862f30bd0fa60370709a2f6e7eb4238aaf53fa", "patch": "@@ -5,12 +5,7 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(64);\n     base.add_pre_link_args(\n         LinkerFlavor::Unix(Cc::No),\n-        &[\n-            \"-b64\".into(),\n-            \"-bpT:0x100000000\".into(),\n-            \"-bpD:0x110000000\".into(),\n-            \"-bcdtors:all:0:s\".into(),\n-        ],\n+        &[\"-b64\", \"-bpT:0x100000000\", \"-bpD:0x110000000\", \"-bcdtors:all:0:s\"],\n     );\n \n     Target {"}, {"sha": "f30ae82d7cdd2b4fd4d596c0e207f016efa4aada", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0862f30bd0fa60370709a2f6e7eb4238aaf53fa/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=c0862f30bd0fa60370709a2f6e7eb4238aaf53fa", "patch": "@@ -250,9 +250,9 @@ impl<I: Interner> Clone for TyKind<I> {\n         match self {\n             Bool => Bool,\n             Char => Char,\n-            Int(i) => Int(i.clone()),\n-            Uint(u) => Uint(u.clone()),\n-            Float(f) => Float(f.clone()),\n+            Int(i) => Int(*i),\n+            Uint(u) => Uint(*u),\n+            Float(f) => Float(*f),\n             Adt(d, s) => Adt(d.clone(), s.clone()),\n             Foreign(d) => Foreign(d.clone()),\n             Str => Str,\n@@ -262,15 +262,15 @@ impl<I: Interner> Clone for TyKind<I> {\n             Ref(r, t, m) => Ref(r.clone(), t.clone(), m.clone()),\n             FnDef(d, s) => FnDef(d.clone(), s.clone()),\n             FnPtr(s) => FnPtr(s.clone()),\n-            Dynamic(p, r, repr) => Dynamic(p.clone(), r.clone(), repr.clone()),\n+            Dynamic(p, r, repr) => Dynamic(p.clone(), r.clone(), *repr),\n             Closure(d, s) => Closure(d.clone(), s.clone()),\n             Generator(d, s, m) => Generator(d.clone(), s.clone(), m.clone()),\n             GeneratorWitness(g) => GeneratorWitness(g.clone()),\n             Never => Never,\n             Tuple(t) => Tuple(t.clone()),\n             Alias(k, p) => Alias(*k, p.clone()),\n             Param(p) => Param(p.clone()),\n-            Bound(d, b) => Bound(d.clone(), b.clone()),\n+            Bound(d, b) => Bound(*d, b.clone()),\n             Placeholder(p) => Placeholder(p.clone()),\n             Infer(t) => Infer(t.clone()),\n             Error(e) => Error(e.clone()),\n@@ -936,7 +936,7 @@ impl<I: Interner> Clone for RegionKind<I> {\n     fn clone(&self) -> Self {\n         match self {\n             ReEarlyBound(r) => ReEarlyBound(r.clone()),\n-            ReLateBound(d, r) => ReLateBound(d.clone(), r.clone()),\n+            ReLateBound(d, r) => ReLateBound(*d, r.clone()),\n             ReFree(r) => ReFree(r.clone()),\n             ReStatic => ReStatic,\n             ReVar(r) => ReVar(r.clone()),"}]}