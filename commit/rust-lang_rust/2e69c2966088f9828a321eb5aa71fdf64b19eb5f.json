{"sha": "2e69c2966088f9828a321eb5aa71fdf64b19eb5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNjljMjk2NjA4OGY5ODI4YTMyMWViNWFhNzFmZGY2NGIxOWViNWY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T01:08:47Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T06:07:55Z"}, "message": "rustc: Replace session's error handling with diagnostic impl", "tree": {"sha": "93311458de66b8dffbee1fd1bf52b6215dc6b9b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93311458de66b8dffbee1fd1bf52b6215dc6b9b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e69c2966088f9828a321eb5aa71fdf64b19eb5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e69c2966088f9828a321eb5aa71fdf64b19eb5f", "html_url": "https://github.com/rust-lang/rust/commit/2e69c2966088f9828a321eb5aa71fdf64b19eb5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e69c2966088f9828a321eb5aa71fdf64b19eb5f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4e089e94bde9d136b67b40f7facb9ea68265356", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4e089e94bde9d136b67b40f7facb9ea68265356", "html_url": "https://github.com/rust-lang/rust/commit/d4e089e94bde9d136b67b40f7facb9ea68265356"}], "stats": {"total": 44, "additions": 21, "deletions": 23}, "files": [{"sha": "83ca418144815684151d96fb15aeb373e60e3353", "filename": "src/comp/driver/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e69c2966088f9828a321eb5aa71fdf64b19eb5f/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e69c2966088f9828a321eb5aa71fdf64b19eb5f/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdiagnostic.rs?ref=2e69c2966088f9828a321eb5aa71fdf64b19eb5f", "patch": "@@ -4,7 +4,7 @@ import syntax::codemap;\n import codemap::span;\n \n export emit_warning, emit_error, emit_note;\n-export handler, codemap_handler;\n+export handler, mk_codemap_handler;\n \n iface handler {\n     fn span_fatal(sp: span, msg: str) -> !;"}, {"sha": "af911e06646c56fff5048d028a23ae811ad2cb18", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e69c2966088f9828a321eb5aa71fdf64b19eb5f/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e69c2966088f9828a321eb5aa71fdf64b19eb5f/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=2e69c2966088f9828a321eb5aa71fdf64b19eb5f", "patch": "@@ -459,7 +459,7 @@ fn build_session(sopts: @session::options, input: str) -> session::session {\n       codemap: codemap,\n       // For a library crate, this is always none\n       mutable main_fn: none,\n-      mutable err_count: 0u,\n+      diagnostic: diagnostic::mk_codemap_handler(codemap),\n       filesearch: filesearch,\n       mutable building_library: false,\n       working_dir: fs::dirname(input)}"}, {"sha": "b68be2c2f1846f2128394f273a155d7d35d02897", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2e69c2966088f9828a321eb5aa71fdf64b19eb5f/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e69c2966088f9828a321eb5aa71fdf64b19eb5f/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=2e69c2966088f9828a321eb5aa71fdf64b19eb5f", "patch": "@@ -58,56 +58,54 @@ type session = @{targ_cfg: @config,\n                  codemap: codemap::codemap,\n                  // For a library crate, this is always none\n                  mutable main_fn: option::t<node_id>,\n-                 mutable err_count: uint,\n+                 diagnostic: diagnostic::handler,\n                  filesearch: filesearch::filesearch,\n                  mutable building_library: bool,\n                  working_dir: str};\n \n impl session for session {\n     fn span_fatal(sp: span, msg: str) -> ! {\n-        diagnostic::emit_error(some((self.parse_sess.cm, sp)), msg);\n-        fail;\n+        self.diagnostic.span_fatal(sp, msg)\n     }\n     fn fatal(msg: str) -> ! {\n-        diagnostic::emit_error(none, msg);\n-        fail;\n+        self.diagnostic.fatal(msg)\n     }\n     fn span_err(sp: span, msg: str) {\n-        diagnostic::emit_error(some((self.parse_sess.cm, sp)), msg);\n-        self.err_count += 1u;\n+        self.diagnostic.span_err(sp, msg)\n     }\n     fn err(msg: str) {\n-        diagnostic::emit_error(none, msg);\n-        self.err_count += 1u;\n+        self.diagnostic.err(msg)\n+    }\n+    fn has_errors() -> bool {\n+        self.diagnostic.has_errors()\n     }\n-    fn has_errors() -> bool { self.err_count > 0u }\n     fn abort_if_errors() {\n-        if self.err_count > 0u {\n-            self.fatal(\"aborting due to previous errors\");\n-        }\n+        self.diagnostic.abort_if_errors()\n     }\n     fn span_warn(sp: span, msg: str) {\n-        diagnostic::emit_warning(some((self.parse_sess.cm, sp)), msg);\n+        self.diagnostic.span_warn(sp, msg)\n     }\n     fn warn(msg: str) {\n-        diagnostic::emit_warning(none, msg);\n+        self.diagnostic.warn(msg)\n     }\n     fn span_note(sp: span, msg: str) {\n-        diagnostic::emit_note(some((self.parse_sess.cm, sp)), msg);\n+        self.diagnostic.span_note(sp, msg)\n     }\n     fn note(msg: str) {\n-        diagnostic::emit_note(none, msg);\n+        self.diagnostic.note(msg)\n     }\n     fn span_bug(sp: span, msg: str) -> ! {\n-        self.span_fatal(sp, #fmt[\"internal compiler error %s\", msg]);\n+        self.diagnostic.span_bug(sp, msg)\n     }\n     fn bug(msg: str) -> ! {\n-        self.fatal(#fmt[\"internal compiler error %s\", msg]);\n+        self.diagnostic.bug(msg)\n     }\n     fn span_unimpl(sp: span, msg: str) -> ! {\n-        self.span_bug(sp, \"unimplemented \" + msg);\n+        self.diagnostic.span_unimpl(sp, msg)\n+    }\n+    fn unimpl(msg: str) -> ! {\n+        self.diagnostic.unimpl(msg)\n     }\n-    fn unimpl(msg: str) -> ! { self.bug(\"unimplemented \" + msg); }\n     fn next_node_id() -> ast::node_id {\n         ret syntax::parse::parser::next_node_id(self.parse_sess);\n     }"}]}