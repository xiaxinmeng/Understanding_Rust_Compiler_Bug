{"sha": "5033203121f4bda79e28dd698f0f42c8785f5684", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMzMyMDMxMjFmNGJkYTc5ZTI4ZGQ2OThmMGY0MmM4Nzg1ZjU2ODQ=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-09-01T02:18:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-01T02:18:18Z"}, "message": "Rollup merge of #76059 - GuillaumeGomez:cleanup-e0764, r=Dylan-DPC,pickfire\n\nClean up E0764\n\nr? @Dylan-DPC", "tree": {"sha": "715b4d27edf2ccc39e3d677d97650720dfcba917", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/715b4d27edf2ccc39e3d677d97650720dfcba917"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5033203121f4bda79e28dd698f0f42c8785f5684", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfTa9qCRBK7hj4Ov3rIwAAdHIIAHA6FllwlbF49VlNztvZN4He\njXoqsX8iY83BNyRxWTJvA7D9tWczUVFWcoGuZG55U9Typv/r50RRo4Vb5ml2T+2q\nOwBtJAk3LBICXV8PbsXqbL/ax3zOPsgamJdbXmkOCdZQmz8NHVvSkeTRWmlAfTpx\nH9j3oBh/UHaUbY+Wkkr66BTFV5c7zfsTrTclQPyWm+na5qqVBcsYxe9AbDhY+W7h\nKyen2EdYQ09ZVWIGbMbxo8ol1E8s8WdFLs9Xy5vJwPM9ZjK2YDMhup2Cp89eItyc\nyNIVUe7F8Ps8psNALmQxX2dZsVRTQkYVltHwl18HxJ4jns1smWGjti/GG16OdEI=\n=rlwu\n-----END PGP SIGNATURE-----\n", "payload": "tree 715b4d27edf2ccc39e3d677d97650720dfcba917\nparent 934127cca51219a19c213429d873d1153af78c1c\nparent 153f966d00b7e7f580ebc399a15e1f4c9115da65\nauthor Tyler Mandry <tmandry@gmail.com> 1598926698 -0700\ncommitter GitHub <noreply@github.com> 1598926698 -0700\n\nRollup merge of #76059 - GuillaumeGomez:cleanup-e0764, r=Dylan-DPC,pickfire\n\nClean up E0764\n\nr? @Dylan-DPC\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5033203121f4bda79e28dd698f0f42c8785f5684", "html_url": "https://github.com/rust-lang/rust/commit/5033203121f4bda79e28dd698f0f42c8785f5684", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5033203121f4bda79e28dd698f0f42c8785f5684/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "934127cca51219a19c213429d873d1153af78c1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/934127cca51219a19c213429d873d1153af78c1c", "html_url": "https://github.com/rust-lang/rust/commit/934127cca51219a19c213429d873d1153af78c1c"}, {"sha": "153f966d00b7e7f580ebc399a15e1f4c9115da65", "url": "https://api.github.com/repos/rust-lang/rust/commits/153f966d00b7e7f580ebc399a15e1f4c9115da65", "html_url": "https://github.com/rust-lang/rust/commit/153f966d00b7e7f580ebc399a15e1f4c9115da65"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "0a2e2290e77c2e7ad2cfcd23054a34de130456aa", "filename": "compiler/rustc_error_codes/src/error_codes/E0764.md", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5033203121f4bda79e28dd698f0f42c8785f5684/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0764.md", "raw_url": "https://github.com/rust-lang/rust/raw/5033203121f4bda79e28dd698f0f42c8785f5684/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0764.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0764.md?ref=5033203121f4bda79e28dd698f0f42c8785f5684", "patch": "@@ -1,12 +1,4 @@\n-Mutable references (`&mut`) can only be used in constant functions, not statics\n-or constants. This limitation exists to prevent the creation of constants that\n-have a mutable reference in their final value. If you had a constant of `&mut\n-i32` type, you could modify the value through that reference, making the\n-constant essentially mutable. While there could be a more fine-grained scheme\n-in the future that allows mutable references if they are not \"leaked\" to the\n-final value, a more conservative approach was chosen for now. `const fn` do not\n-have this problem, as the borrow checker will prevent the `const fn` from\n-returning new mutable references.\n+A mutable reference was used in a constant.\n \n Erroneous code example:\n \n@@ -19,6 +11,18 @@ fn main() {\n }\n ```\n \n+Mutable references (`&mut`) can only be used in constant functions, not statics\n+or constants. This limitation exists to prevent the creation of constants that\n+have a mutable reference in their final value. If you had a constant of\n+`&mut i32` type, you could modify the value through that reference, making the\n+constant essentially mutable.\n+\n+While there could be a more fine-grained scheme in the future that allows\n+mutable references if they are not \"leaked\" to the final value, a more\n+conservative approach was chosen for now. `const fn` do not have this problem,\n+as the borrow checker will prevent the `const fn` from returning new mutable\n+references.\n+\n Remember: you cannot use a function call inside a constant or static. However,\n you can totally use it in constant functions:\n "}]}