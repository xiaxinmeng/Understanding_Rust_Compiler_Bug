{"sha": "fc2ba13939aa9672d886beb06efde7aeda2d5f7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMmJhMTM5MzlhYTk2NzJkODg2YmViMDZlZmRlN2FlZGEyZDVmN2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-03T05:35:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-03T05:35:17Z"}, "message": "auto merge of #20456 : brson/rust/packaging2, r=alexcrichton", "tree": {"sha": "3199265e85096baec001958e33d1eebee1031eb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3199265e85096baec001958e33d1eebee1031eb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc2ba13939aa9672d886beb06efde7aeda2d5f7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2ba13939aa9672d886beb06efde7aeda2d5f7f", "html_url": "https://github.com/rust-lang/rust/commit/fc2ba13939aa9672d886beb06efde7aeda2d5f7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc2ba13939aa9672d886beb06efde7aeda2d5f7f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c3e6082e71618c088afd93f7a4a9a7708c9dcbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c3e6082e71618c088afd93f7a4a9a7708c9dcbd", "html_url": "https://github.com/rust-lang/rust/commit/9c3e6082e71618c088afd93f7a4a9a7708c9dcbd"}, {"sha": "d30353c1d2fa6608156d56ef6711d445edc7a75f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d30353c1d2fa6608156d56ef6711d445edc7a75f", "html_url": "https://github.com/rust-lang/rust/commit/d30353c1d2fa6608156d56ef6711d445edc7a75f"}], "stats": {"total": 498, "additions": 3, "deletions": 495}, "files": [{"sha": "8347238cf200d4ebc9e667183c23893a652065c1", "filename": "mk/dist.mk", "status": "modified", "additions": 2, "deletions": 106, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/fc2ba13939aa9672d886beb06efde7aeda2d5f7f/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/fc2ba13939aa9672d886beb06efde7aeda2d5f7f/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=fc2ba13939aa9672d886beb06efde7aeda2d5f7f", "patch": "@@ -17,8 +17,6 @@\n # * dist - make all distribution artifacts\n # * distcheck - sanity check dist artifacts\n # * dist-tar-src - source tarballs\n-# * dist-win - Windows exe installers\n-# * dist-osx - OS X .pkg installers\n # * dist-tar-bins - Ad-hoc Unix binary installers\n # * dist-docs - Stage docs for upload\n \n@@ -106,108 +104,6 @@ distcheck-tar-src: dist-tar-src\n \t$(Q)rm -Rf tmp/distcheck/srccheck\n \n \n-######################################################################\n-# Windows .exe installer\n-######################################################################\n-\n-# FIXME Needs to support all hosts, but making rust.iss compatible looks like a chore\n-\n-ifdef CFG_ISCC\n-\n-PKG_EXE = dist/$(PKG_NAME)-$(CFG_BUILD).exe\n-\n-%.iss: $(S)src/etc/pkg/%.iss\n-\tcp $< $@\n-\n-%.ico: $(S)src/etc/pkg/%.ico\n-\tcp $< $@\n-\n-$(PKG_EXE): rust.iss modpath.iss upgrade.iss LICENSE.txt rust-logo.ico \\\n-            $(CSREQ3_T_$(CFG_BUILD)_H_$(CFG_BUILD)) \\\n-            dist-prepare-win\n-\t$(Q)rm -rf tmp/dist/win/gcc\n-\t$(CFG_PYTHON) $(S)src/etc/make-win-dist.py tmp/dist/win/rust tmp/dist/win/gcc $(CFG_BUILD)\n-\t@$(call E, ISCC: $@)\n-\t$(Q)$(CFG_ISCC) $<\n-\n-$(eval $(call DEF_PREPARE,win))\n-\n-dist-prepare-win: PREPARE_HOST=$(CFG_BUILD)\n-dist-prepare-win: PREPARE_TARGETS=$(CFG_BUILD)\n-dist-prepare-win: PREPARE_DEST_DIR=tmp/dist/win/rust\n-dist-prepare-win: PREPARE_DIR_CMD=$(DEFAULT_PREPARE_DIR_CMD)\n-dist-prepare-win: PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n-dist-prepare-win: PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n-dist-prepare-win: PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n-dist-prepare-win: PREPARE_CLEAN=true\n-dist-prepare-win: prepare-base-win\n-\n-endif\n-\n-dist-win: $(PKG_EXE)\n-\n-distcheck-win: dist-win\n-\n-######################################################################\n-# OS X .pkg installer\n-######################################################################\n-\n-ifeq ($(CFG_OSTYPE), apple-darwin)\n-\n-define DEF_OSX_PKG\n-\n-$$(eval $$(call DEF_PREPARE,osx-$(1)))\n-\n-dist-prepare-osx-$(1): PREPARE_HOST=$(1)\n-dist-prepare-osx-$(1): PREPARE_TARGETS=$(2)\n-dist-prepare-osx-$(1): PREPARE_DEST_DIR=tmp/dist/pkgroot-$(1)\n-dist-prepare-osx-$(1): PREPARE_DIR_CMD=$(DEFAULT_PREPARE_DIR_CMD)\n-dist-prepare-osx-$(1): PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n-dist-prepare-osx-$(1): PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n-dist-prepare-osx-$(1): PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n-dist-prepare-osx-$(1): prepare-base-osx-$(1)\n-\n-dist/$(PKG_NAME)-$(1).pkg: $(S)src/etc/pkg/Distribution.xml LICENSE.txt \\\n-\t\tdist-prepare-osx-$(1) \\\n-\t\ttmp/dist/pkgres-$(1)/LICENSE.txt \\\n-\t\ttmp/dist/pkgres-$(1)/welcome.rtf \\\n-\t\ttmp/dist/pkgres-$(1)/rust-logo.png\n-\t@$$(call E, making OS X pkg)\n-\t$(Q)pkgbuild --identifier org.rust-lang.rust --root tmp/dist/pkgroot-$(1) rust.pkg\n-\t$(Q)productbuild --distribution $(S)src/etc/pkg/Distribution.xml \\\n-\t      --resources tmp/dist/pkgres-$(1) dist/$(PKG_NAME)-$(1).pkg\n-\t$(Q)rm -rf tmp rust.pkg\n-\n-tmp/dist/pkgres-$(1)/LICENSE.txt: LICENSE.txt\n-\t@$$(call E,pkg resource LICENSE.txt)\n-\t$(Q)mkdir -p $$(@D)\n-\t$(Q)cp $$< $$@\n-\n-tmp/dist/pkgres-$(1)/%: $(S)src/etc/pkg/%\n-\t@$$(call E,pkg resource $$*)\n-\t$(Q)mkdir -p $$(@D)\n-\t$(Q)cp -r $$< $$@\n-\n-endef\n-\n-ifneq ($(CFG_ENABLE_DIST_HOST_ONLY),)\n-$(foreach host,$(CFG_HOST),$(eval $(call DEF_OSX_PKG,$(host),$(host))))\n-else\n-$(foreach host,$(CFG_HOST),$(eval $(call DEF_OSX_PKG,$(host),$(TARGET))))\n-endif\n-\n-dist-osx: $(foreach host,$(CFG_HOST),dist/$(PKG_NAME)-$(host).pkg)\n-\n-else\n-\n-dist-osx:\n-\n-endif\n-\n-# FIXME should do something\n-distcheck-osx: dist-osx\n-\n-\n ######################################################################\n # Unix binary installer tarballs\n ######################################################################\n@@ -377,9 +273,9 @@ MAYBE_DIST_DOCS=dist-docs\n MAYBE_DISTCHECK_DOCS=distcheck-docs\n endif\n \n-dist: $(MAYBE_DIST_TAR_SRC) dist-osx dist-win dist-tar-bins $(MAYBE_DIST_DOCS)\n+dist: $(MAYBE_DIST_TAR_SRC) dist-tar-bins $(MAYBE_DIST_DOCS)\n \n-distcheck: $(MAYBE_DISTCHECK_TAR_SRC) distcheck-osx distcheck-win distcheck-tar-bins $(MAYBE_DISTCHECK_DOCS)\n+distcheck: $(MAYBE_DISTCHECK_TAR_SRC) distcheck-tar-bins $(MAYBE_DISTCHECK_DOCS)\n \t$(Q)rm -Rf tmp/distcheck\n \t@echo\n \t@echo -----------------------------------------------"}, {"sha": "e67bee3cab54da9e68bc05d2ec0c10ef16b19045", "filename": "mk/main.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2ba13939aa9672d886beb06efde7aeda2d5f7f/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/fc2ba13939aa9672d886beb06efde7aeda2d5f7f/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=fc2ba13939aa9672d886beb06efde7aeda2d5f7f", "patch": "@@ -45,7 +45,7 @@ CFG_PACKAGE_VERS=$(CFG_RELEASE_NUM)-dev\n endif\n \n # The name of the package to use for creating tarballs, installers etc.\n-CFG_PACKAGE_NAME=rust-$(CFG_PACKAGE_VERS)\n+CFG_PACKAGE_NAME=rustc-$(CFG_PACKAGE_VERS)\n \n # The version string plus commit information - this is what rustc reports\n CFG_VERSION = $(CFG_RELEASE)"}, {"sha": "c7383c0bb1a9fdfd91eaa480401f9cc33a365478", "filename": "src/etc/pkg/Distribution.xml", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9c3e6082e71618c088afd93f7a4a9a7708c9dcbd/src%2Fetc%2Fpkg%2FDistribution.xml", "raw_url": "https://github.com/rust-lang/rust/raw/9c3e6082e71618c088afd93f7a4a9a7708c9dcbd/src%2Fetc%2Fpkg%2FDistribution.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fpkg%2FDistribution.xml?ref=9c3e6082e71618c088afd93f7a4a9a7708c9dcbd", "patch": "@@ -1,26 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n-<installer-gui-script minSpecVersion=\"2\">\n-    <title>Rust</title>\n-    <license file=\"LICENSE.txt\" mime-type=\"text/plain\"/>\n-    <pkg-ref id=\"org.rust-lang.rust\"/>\n-    <options customize=\"never\" require-scripts=\"false\" hostArchitectures=\"i386,x86_64\"/>\n-    <volume-check>\n-        <allowed-os-versions>\n-            <os-version min=\"10.7\"/>\n-        </allowed-os-versions>\n-    </volume-check>\n-    <choices-outline>\n-        <line choice=\"default\">\n-            <line choice=\"org.rust-lang.rust\"/>\n-        </line>\n-    </choices-outline>\n-    <choice id=\"default\"\n-            customLocation=\"usr/local\"/>\n-    <choice id=\"org.rust-lang.rust\" visible=\"false\">\n-        <pkg-ref id=\"org.rust-lang.rust\"/>\n-    </choice>\n-    <pkg-ref id=\"org.rust-lang.rust\" version=\"0\" onConclusion=\"none\">rust.pkg</pkg-ref>\n-    <welcome file=\"welcome.rtf\" mime-type=\"text/enriched\"/>\n-    <background file=\"rust-logo.png\" mime-type=\"image/png\"\n-                alignment=\"bottomleft\"/>\n-</installer-gui-script>"}, {"sha": "35cc0097035c3d4daf0c369aac981b2a55ff1cc9", "filename": "src/etc/pkg/modpath.iss", "status": "removed", "additions": 0, "deletions": 219, "changes": 219, "blob_url": "https://github.com/rust-lang/rust/blob/9c3e6082e71618c088afd93f7a4a9a7708c9dcbd/src%2Fetc%2Fpkg%2Fmodpath.iss", "raw_url": "https://github.com/rust-lang/rust/raw/9c3e6082e71618c088afd93f7a4a9a7708c9dcbd/src%2Fetc%2Fpkg%2Fmodpath.iss", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fpkg%2Fmodpath.iss?ref=9c3e6082e71618c088afd93f7a4a9a7708c9dcbd", "patch": "@@ -1,219 +0,0 @@\n-// ----------------------------------------------------------------------------\n-//\n-// Inno Setup Ver:\t5.4.2\n-// Script Version:\t1.4.1\n-// Author:\t\t\tJared Breland <jbreland@legroom.net>\n-// Homepage:\t\thttp://www.legroom.net/software\n-// License:\t\t\tGNU Lesser General Public License (LGPL), version 3\n-//\t\t\t\t\t\thttp://www.gnu.org/licenses/lgpl.html\n-//\n-// Script Function:\n-//\tAllow modification of environmental path directly from Inno Setup installers\n-//\n-// Instructions:\n-//\tCopy modpath.iss to the same directory as your setup script\n-//\n-//\tAdd this statement to your [Setup] section\n-//\t\tChangesEnvironment=true\n-//\n-//\tAdd this statement to your [Tasks] section\n-//\tYou can change the Description or Flags\n-//\tYou can change the Name, but it must match the ModPathName setting below\n-//\t\tName: modifypath; Description: &Add application directory to your environmental path; Flags: unchecked\n-//\n-//\tAdd the following to the end of your [Code] section\n-//\tModPathName defines the name of the task defined above\n-//\tModPathType defines whether the 'user' or 'system' path will be modified;\n-//\t\tthis will default to user if anything other than system is set\n-//\tsetArrayLength must specify the total number of dirs to be added\n-//\tResult[0] contains first directory, Result[1] contains second, etc.\n-//\t\tconst\n-//\t\t\tModPathName = 'modifypath';\n-//\t\t\tModPathType = 'user';\n-//\n-//\t\tfunction ModPathDir(): TArrayOfString;\n-//\t\tbegin\n-//\t\t\tsetArrayLength(Result, 1);\n-//\t\t\tResult[0] := ExpandConstant('{app}');\n-//\t\tend;\n-//\t\t#include \"modpath.iss\"\n-// ----------------------------------------------------------------------------\n-\n-procedure ModPath();\n-var\n-\toldpath:\tString;\n-\tnewpath:\tString;\n-\tupdatepath:\tBoolean;\n-\tpathArr:\tTArrayOfString;\n-\taExecFile:\tString;\n-\taExecArr:\tTArrayOfString;\n-\ti, d:\t\tInteger;\n-\tpathdir:\tTArrayOfString;\n-\tregroot:\tInteger;\n-\tregpath:\tString;\n-\n-begin\n-\t// Get constants from main script and adjust behavior accordingly\n-\t// ModPathType MUST be 'system' or 'user'; force 'user' if invalid\n-\tif ModPathType = 'system' then begin\n-\t\tregroot := HKEY_LOCAL_MACHINE;\n-\t\tregpath := 'SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment';\n-\tend else begin\n-\t\tregroot := HKEY_CURRENT_USER;\n-\t\tregpath := 'Environment';\n-\tend;\n-\n-\t// Get array of new directories and act on each individually\n-\tpathdir := ModPathDir();\n-\tfor d := 0 to GetArrayLength(pathdir)-1 do begin\n-\t\tupdatepath := true;\n-\n-\t\t// Modify WinNT path\n-\t\tif UsingWinNT() = true then begin\n-\n-\t\t\t// Get current path, split into an array\n-\t\t\tRegQueryStringValue(regroot, regpath, 'Path', oldpath);\n-\t\t\toldpath := oldpath + ';';\n-\t\t\ti := 0;\n-\n-\t\t\twhile (Pos(';', oldpath) > 0) do begin\n-\t\t\t\tSetArrayLength(pathArr, i+1);\n-\t\t\t\tpathArr[i] := Copy(oldpath, 0, Pos(';', oldpath)-1);\n-\t\t\t\toldpath := Copy(oldpath, Pos(';', oldpath)+1, Length(oldpath));\n-\t\t\t\ti := i + 1;\n-\n-\t\t\t\t// Check if current directory matches app dir\n-\t\t\t\tif pathdir[d] = pathArr[i-1] then begin\n-\t\t\t\t\t// if uninstalling, remove dir from path\n-\t\t\t\t\tif IsUninstaller() = true then begin\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t// if installing, flag that dir already exists in path\n-\t\t\t\t\tend else begin\n-\t\t\t\t\t\tupdatepath := false;\n-\t\t\t\t\tend;\n-\t\t\t\tend;\n-\n-\t\t\t\t// Add current directory to new path\n-\t\t\t\tif i = 1 then begin\n-\t\t\t\t\tnewpath := pathArr[i-1];\n-\t\t\t\tend else begin\n-\t\t\t\t\tnewpath := newpath + ';' + pathArr[i-1];\n-\t\t\t\tend;\n-\t\t\tend;\n-\n-\t\t\t// Append app dir to path if not already included\n-\t\t\tif (IsUninstaller() = false) AND (updatepath = true) then\n-\t\t\t\tnewpath := newpath + ';' + pathdir[d];\n-\n-\t\t\t// Write new path\n-\t\t\tRegWriteStringValue(regroot, regpath, 'Path', newpath);\n-\n-\t\t// Modify Win9x path\n-\t\tend else begin\n-\n-\t\t\t// Convert to shortened dirname\n-\t\t\tpathdir[d] := GetShortName(pathdir[d]);\n-\n-\t\t\t// If autoexec.bat exists, check if app dir already exists in path\n-\t\t\taExecFile := 'C:\\AUTOEXEC.BAT';\n-\t\t\tif FileExists(aExecFile) then begin\n-\t\t\t\tLoadStringsFromFile(aExecFile, aExecArr);\n-\t\t\t\tfor i := 0 to GetArrayLength(aExecArr)-1 do begin\n-\t\t\t\t\tif IsUninstaller() = false then begin\n-\t\t\t\t\t\t// If app dir already exists while installing, skip add\n-\t\t\t\t\t\tif (Pos(pathdir[d], aExecArr[i]) > 0) then\n-\t\t\t\t\t\t\tupdatepath := false;\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\tend else begin\n-\t\t\t\t\t\t// If app dir exists and = what we originally set, then delete at uninstall\n-\t\t\t\t\t\tif aExecArr[i] = 'SET PATH=%PATH%;' + pathdir[d] then\n-\t\t\t\t\t\t\taExecArr[i] := '';\n-\t\t\t\t\tend;\n-\t\t\t\tend;\n-\t\t\tend;\n-\n-\t\t\t// If app dir not found, or autoexec.bat didn't exist, then (create and) append to current path\n-\t\t\tif (IsUninstaller() = false) AND (updatepath = true) then begin\n-\t\t\t\tSaveStringToFile(aExecFile, #13#10 + 'SET PATH=%PATH%;' + pathdir[d], True);\n-\n-\t\t\t// If uninstalling, write the full autoexec out\n-\t\t\tend else begin\n-\t\t\t\tSaveStringsToFile(aExecFile, aExecArr, False);\n-\t\t\tend;\n-\t\tend;\n-\tend;\n-end;\n-\n-// Split a string into an array using passed delimeter\n-procedure Explode(var Dest: TArrayOfString; Text: String; Separator: String);\n-var\n-\ti: Integer;\n-begin\n-\ti := 0;\n-\trepeat\n-\t\tSetArrayLength(Dest, i+1);\n-\t\tif Pos(Separator,Text) > 0 then\tbegin\n-\t\t\tDest[i] := Copy(Text, 1, Pos(Separator, Text)-1);\n-\t\t\tText := Copy(Text, Pos(Separator,Text) + Length(Separator), Length(Text));\n-\t\t\ti := i + 1;\n-\t\tend else begin\n-\t\t\t Dest[i] := Text;\n-\t\t\t Text := '';\n-\t\tend;\n-\tuntil Length(Text)=0;\n-end;\n-\n-\n-procedure ModPathCurStepChanged(CurStep: TSetupStep);\n-var\n-\ttaskname:\tString;\n-begin\n-\ttaskname := ModPathName;\n-\tif CurStep = ssPostInstall then\n-\t\tif IsTaskSelected(taskname) then\n-\t\t\tModPath();\n-end;\n-\n-procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);\n-var\n-\taSelectedTasks:\tTArrayOfString;\n-\ti:\t\t\t\tInteger;\n-\ttaskname:\t\tString;\n-\tregpath:\t\tString;\n-\tregstring:\t\tString;\n-\tappid:\t\t\tString;\n-begin\n-\t// only run during actual uninstall\n-\tif CurUninstallStep = usUninstall then begin\n-\t\t// get list of selected tasks saved in registry at install time\n-\t\tappid := '{#emit SetupSetting(\"AppId\")}';\n-\t\tif appid = '' then appid := '{#emit SetupSetting(\"AppName\")}';\n-\t\tregpath := ExpandConstant('Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\'+appid+'_is1');\n-\t\tRegQueryStringValue(HKLM, regpath, 'Inno Setup: Selected Tasks', regstring);\n-\t\tif regstring = '' then RegQueryStringValue(HKCU, regpath, 'Inno Setup: Selected Tasks', regstring);\n-\n-\t\t// check each task; if matches modpath taskname, trigger patch removal\n-\t\tif regstring <> '' then begin\n-\t\t\ttaskname := ModPathName;\n-\t\t\tExplode(aSelectedTasks, regstring, ',');\n-\t\t\tif GetArrayLength(aSelectedTasks) > 0 then begin\n-\t\t\t\tfor i := 0 to GetArrayLength(aSelectedTasks)-1 do begin\n-\t\t\t\t\tif comparetext(aSelectedTasks[i], taskname) = 0 then\n-\t\t\t\t\t\tModPath();\n-\t\t\t\tend;\n-\t\t\tend;\n-\t\tend;\n-\tend;\n-end;\n-\n-function NeedRestart(): Boolean;\n-var\n-\ttaskname:\tString;\n-begin\n-\ttaskname := ModPathName;\n-\tif IsTaskSelected(taskname) and not UsingWinNT() then begin\n-\t\tResult := True;\n-\tend else begin\n-\t\tResult := False;\n-\tend;\n-end;"}, {"sha": "e8e1f18df224101e38632043cfd043cdd329c4b3", "filename": "src/etc/pkg/rust-logo.ico", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c3e6082e71618c088afd93f7a4a9a7708c9dcbd/src%2Fetc%2Fpkg%2Frust-logo.ico", "raw_url": "https://github.com/rust-lang/rust/raw/9c3e6082e71618c088afd93f7a4a9a7708c9dcbd/src%2Fetc%2Fpkg%2Frust-logo.ico", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fpkg%2Frust-logo.ico?ref=9c3e6082e71618c088afd93f7a4a9a7708c9dcbd"}, {"sha": "2c3de3000879b36b1dc4751ea5db0fa8fce4b5aa", "filename": "src/etc/pkg/rust-logo.png", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9c3e6082e71618c088afd93f7a4a9a7708c9dcbd/src%2Fetc%2Fpkg%2Frust-logo.png", "raw_url": "https://github.com/rust-lang/rust/raw/9c3e6082e71618c088afd93f7a4a9a7708c9dcbd/src%2Fetc%2Fpkg%2Frust-logo.png", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fpkg%2Frust-logo.png?ref=9c3e6082e71618c088afd93f7a4a9a7708c9dcbd"}, {"sha": "43df6256e0b7ec8ca61b4830f3f38ed3044b87ca", "filename": "src/etc/pkg/rust.iss", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/9c3e6082e71618c088afd93f7a4a9a7708c9dcbd/src%2Fetc%2Fpkg%2Frust.iss", "raw_url": "https://github.com/rust-lang/rust/raw/9c3e6082e71618c088afd93f7a4a9a7708c9dcbd/src%2Fetc%2Fpkg%2Frust.iss", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fpkg%2Frust.iss?ref=9c3e6082e71618c088afd93f7a4a9a7708c9dcbd", "patch": "@@ -1,70 +0,0 @@\n-#define CFG_VERSION_WIN GetEnv(\"CFG_VERSION_WIN\")\n-#define CFG_RELEASE GetEnv(\"CFG_RELEASE\")\n-#define CFG_PACKAGE_NAME GetEnv(\"CFG_PACKAGE_NAME\")\n-#define CFG_BUILD GetEnv(\"CFG_BUILD\")\n-\n-[Setup]\n-\n-SetupIconFile=rust-logo.ico\n-AppName=Rust\n-AppVersion={#CFG_RELEASE}\n-AppCopyright=Copyright (C) 2006-2014 Mozilla Foundation, MIT license\n-AppPublisher=Mozilla Foundation\n-AppPublisherURL=http://www.rust-lang.org\n-VersionInfoVersion={#CFG_VERSION_WIN}\n-LicenseFile=LICENSE.txt\n-\n-PrivilegesRequired=lowest\n-DisableWelcomePage=true\n-DisableProgramGroupPage=true\n-DisableReadyPage=true\n-DisableStartupPrompt=true\n-\n-OutputDir=.\\dist\\\n-SourceDir=.\\\n-OutputBaseFilename={#CFG_PACKAGE_NAME}-{#CFG_BUILD}\n-DefaultDirName={sd}\\Rust\n-\n-Compression=lzma2/ultra\n-InternalCompressLevel=ultra\n-SolidCompression=true\n-\n-ChangesEnvironment=true\n-ChangesAssociations=no\n-AllowUNCPath=false\n-AllowNoIcons=true\n-Uninstallable=yes\n-\n-[Tasks]\n-Name: modifypath; Description: &Add {app}\\bin to your PATH (recommended)\n-\n-[Components]\n-Name: rust; Description: \"Rust compiler and standard crates\"; Types: full compact custom; Flags: fixed\n-Name: gcc; Description: \"Linker and platform libraries\"; Types: full\n-\n-[Files]\n-Source: \"tmp/dist/win/rust/*.*\"; DestDir: \"{app}\"; Flags: ignoreversion recursesubdirs; Components: rust\n-Source: \"tmp/dist/win/gcc/*.*\"; DestDir: \"{app}\"; Flags: ignoreversion recursesubdirs; Components: gcc\n-\n-[Code]\n-const\n-\tModPathName = 'modifypath';\n-\tModPathType = 'user';\n-\n-function ModPathDir(): TArrayOfString;\n-begin\n-\tsetArrayLength(Result, 1)\n-\tResult[0] := ExpandConstant('{app}\\bin');\n-end;\n-\n-#include \"modpath.iss\"\n-#include \"upgrade.iss\"\n-\n-// Both modpath.iss and upgrade.iss want to overload CurStepChanged.\n-// This version does the overload then delegates to each.\n-\n-procedure CurStepChanged(CurStep: TSetupStep);\n-begin\n-  UpgradeCurStepChanged(CurStep);\n-  ModPathCurStepChanged(CurStep);\n-end;"}, {"sha": "29da7c333bb72b3c1cc1d6d463b8acc792c16363", "filename": "src/etc/pkg/upgrade.iss", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/9c3e6082e71618c088afd93f7a4a9a7708c9dcbd/src%2Fetc%2Fpkg%2Fupgrade.iss", "raw_url": "https://github.com/rust-lang/rust/raw/9c3e6082e71618c088afd93f7a4a9a7708c9dcbd/src%2Fetc%2Fpkg%2Fupgrade.iss", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fpkg%2Fupgrade.iss?ref=9c3e6082e71618c088afd93f7a4a9a7708c9dcbd", "patch": "@@ -1,61 +0,0 @@\n-// The following code taken from https://stackoverflow.com/questions/2000296/innosetup-how-to-automatically-uninstall-previous-installed-version\n-// It performs upgrades by running the uninstaller before the install\n-\n-/////////////////////////////////////////////////////////////////////\n-function GetUninstallString(): String;\n-var\n-  sUnInstPath: String;\n-  sUnInstallString: String;\n-begin\n-  sUnInstPath := ExpandConstant('Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Rust_is1');\n-  sUnInstallString := '';\n-  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then\n-    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);\n-  Result := sUnInstallString;\n-end;\n-\n-\n-/////////////////////////////////////////////////////////////////////\n-function IsUpgrade(): Boolean;\n-begin\n-  Result := (GetUninstallString() <> '');\n-end;\n-\n-\n-/////////////////////////////////////////////////////////////////////\n-function UnInstallOldVersion(): Integer;\n-var\n-  sUnInstallString: String;\n-  iResultCode: Integer;\n-begin\n-// Return Values:\n-// 1 - uninstall string is empty\n-// 2 - error executing the UnInstallString\n-// 3 - successfully executed the UnInstallString\n-\n-  // default return value\n-  Result := 0;\n-\n-  // get the uninstall string of the old app\n-  sUnInstallString := GetUninstallString();\n-  if sUnInstallString <> '' then begin\n-    sUnInstallString := RemoveQuotes(sUnInstallString);\n-    if Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then\n-      Result := 3\n-    else\n-      Result := 2;\n-  end else\n-    Result := 1;\n-end;\n-\n-/////////////////////////////////////////////////////////////////////\n-procedure UpgradeCurStepChanged(CurStep: TSetupStep);\n-begin\n-  if (CurStep=ssInstall) then\n-  begin\n-    if (IsUpgrade()) then\n-    begin\n-      UnInstallOldVersion();\n-    end;\n-  end;\n-end;"}, {"sha": "2433348998ecfac72f7978a2843a86c2ab59b9cc", "filename": "src/etc/pkg/welcome.rtf", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c3e6082e71618c088afd93f7a4a9a7708c9dcbd/src%2Fetc%2Fpkg%2Fwelcome.rtf", "raw_url": "https://github.com/rust-lang/rust/raw/9c3e6082e71618c088afd93f7a4a9a7708c9dcbd/src%2Fetc%2Fpkg%2Fwelcome.rtf", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fpkg%2Fwelcome.rtf?ref=9c3e6082e71618c088afd93f7a4a9a7708c9dcbd", "patch": "@@ -1,12 +0,0 @@\n-{\\rtf1\\ansi\\ansicpg1252\\cocoartf1265\\cocoasubrtf190\n-{\\fonttbl\\f0\\fswiss\\fcharset0 Helvetica;}\n-{\\colortbl;\\red255\\green255\\blue255;}\n-\\margl1440\\margr1440\\vieww10800\\viewh6300\\viewkind0\n-\\pard\\tx720\\tx1440\\tx2160\\tx2880\\tx3600\\tx4320\\tx5040\\tx5760\\tx6480\\tx7200\\tx7920\\tx8640\\pardirnatural\n-\n-\\f0\\fs28 \\cf0 \\\n-\\\n-\tYou will be guided through the steps necessary to\\\n-\tinstall this software.\\\n-\\\n-\tThis will install Rust to /usr/local}"}]}