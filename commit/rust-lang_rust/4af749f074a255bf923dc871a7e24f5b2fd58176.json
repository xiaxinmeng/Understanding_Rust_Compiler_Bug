{"sha": "4af749f074a255bf923dc871a7e24f5b2fd58176", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZjc0OWYwNzRhMjU1YmY5MjNkYzg3MWE3ZTI0ZjViMmZkNTgxNzY=", "commit": {"author": {"name": "Basile Desloges", "email": "basile.desloges@gmail.com", "date": "2018-02-17T12:22:58Z"}, "committer": {"name": "Basile Desloges", "email": "basile.desloges@gmail.com", "date": "2018-03-08T10:22:49Z"}, "message": "Add a map of `DefId` to `Span` in the `Definitions` struct", "tree": {"sha": "5838514685a62613678ed812b22335a125ead03a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5838514685a62613678ed812b22335a125ead03a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4af749f074a255bf923dc871a7e24f5b2fd58176", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4af749f074a255bf923dc871a7e24f5b2fd58176", "html_url": "https://github.com/rust-lang/rust/commit/4af749f074a255bf923dc871a7e24f5b2fd58176", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4af749f074a255bf923dc871a7e24f5b2fd58176/comments", "author": {"login": "zilbuz", "id": 434964, "node_id": "MDQ6VXNlcjQzNDk2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/434964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zilbuz", "html_url": "https://github.com/zilbuz", "followers_url": "https://api.github.com/users/zilbuz/followers", "following_url": "https://api.github.com/users/zilbuz/following{/other_user}", "gists_url": "https://api.github.com/users/zilbuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zilbuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zilbuz/subscriptions", "organizations_url": "https://api.github.com/users/zilbuz/orgs", "repos_url": "https://api.github.com/users/zilbuz/repos", "events_url": "https://api.github.com/users/zilbuz/events{/privacy}", "received_events_url": "https://api.github.com/users/zilbuz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zilbuz", "id": 434964, "node_id": "MDQ6VXNlcjQzNDk2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/434964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zilbuz", "html_url": "https://github.com/zilbuz", "followers_url": "https://api.github.com/users/zilbuz/followers", "following_url": "https://api.github.com/users/zilbuz/following{/other_user}", "gists_url": "https://api.github.com/users/zilbuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zilbuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zilbuz/subscriptions", "organizations_url": "https://api.github.com/users/zilbuz/orgs", "repos_url": "https://api.github.com/users/zilbuz/repos", "events_url": "https://api.github.com/users/zilbuz/events{/privacy}", "received_events_url": "https://api.github.com/users/zilbuz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdcca786468a71375584bb48e3093790c91084f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdcca786468a71375584bb48e3093790c91084f7", "html_url": "https://github.com/rust-lang/rust/commit/cdcca786468a71375584bb48e3093790c91084f7"}], "stats": {"total": 84, "additions": 63, "deletions": 21}, "files": [{"sha": "49611689fc4af5c8b883254cbe10909b9bd24bd0", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4af749f074a255bf923dc871a7e24f5b2fd58176/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af749f074a255bf923dc871a7e24f5b2fd58176/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=4af749f074a255bf923dc871a7e24f5b2fd58176", "patch": "@@ -571,7 +571,8 @@ impl<'a> LoweringContext<'a> {\n                         def_node_id,\n                         DefPathData::LifetimeDef(name.as_str()),\n                         DefIndexAddressSpace::High,\n-                        Mark::root()\n+                        Mark::root(),\n+                        span\n                     );\n \n                     hir::GenericParam::Lifetime(hir::LifetimeDef {\n@@ -1003,7 +1004,8 @@ impl<'a> LoweringContext<'a> {\n                             def_node_id,\n                             DefPathData::ImplTrait,\n                             DefIndexAddressSpace::High,\n-                            Mark::root()\n+                            Mark::root(),\n+                            span\n                         );\n \n                         let hir_bounds = self.lower_bounds(bounds, itctx);\n@@ -1150,7 +1152,8 @@ impl<'a> LoweringContext<'a> {\n                         def_node_id,\n                         DefPathData::LifetimeDef(name.name().as_str()),\n                         DefIndexAddressSpace::High,\n-                        Mark::root()\n+                        Mark::root(),\n+                        lifetime.span\n                     );\n                     let def_lifetime = hir::Lifetime {\n                         id: def_node_id,"}, {"sha": "3619a7fb0c603288df6a75c2c5b4b8ce74f68a2f", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4af749f074a255bf923dc871a7e24f5b2fd58176/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af749f074a255bf923dc871a7e24f5b2fd58176/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=4af749f074a255bf923dc871a7e24f5b2fd58176", "patch": "@@ -18,6 +18,7 @@ use syntax::visit;\n use syntax::symbol::keywords;\n use syntax::symbol::Symbol;\n use syntax::parse::token::{self, Token};\n+use syntax_pos::Span;\n \n use hir::map::{ITEM_LIKE_SPACE, REGULAR_SPACE};\n \n@@ -57,12 +58,13 @@ impl<'a> DefCollector<'a> {\n     fn create_def(&mut self,\n                   node_id: NodeId,\n                   data: DefPathData,\n-                  address_space: DefIndexAddressSpace)\n+                  address_space: DefIndexAddressSpace,\n+                  span: Span)\n                   -> DefIndex {\n         let parent_def = self.parent_def.unwrap();\n         debug!(\"create_def(node_id={:?}, data={:?}, parent_def={:?})\", node_id, data, parent_def);\n         self.definitions\n-            .create_def_with_parent(parent_def, node_id, data, address_space, self.expansion)\n+            .create_def_with_parent(parent_def, node_id, data, address_space, self.expansion, span)\n     }\n \n     pub fn with_parent<F: FnOnce(&mut Self)>(&mut self, parent_def: DefIndex, f: F) {\n@@ -83,7 +85,7 @@ impl<'a> DefCollector<'a> {\n             _ => {}\n         }\n \n-        self.create_def(expr.id, DefPathData::Initializer, REGULAR_SPACE);\n+        self.create_def(expr.id, DefPathData::Initializer, REGULAR_SPACE, expr.span);\n     }\n \n     fn visit_macro_invoc(&mut self, id: NodeId, const_expr: bool) {\n@@ -122,7 +124,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                 return visit::walk_item(self, i);\n             }\n         };\n-        let def = self.create_def(i.id, def_data, ITEM_LIKE_SPACE);\n+        let def = self.create_def(i.id, def_data, ITEM_LIKE_SPACE, i.span);\n \n         self.with_parent(def, |this| {\n             match i.node {\n@@ -131,14 +133,16 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                         let variant_def_index =\n                             this.create_def(v.node.data.id(),\n                                             DefPathData::EnumVariant(v.node.name.name.as_str()),\n-                                            REGULAR_SPACE);\n+                                            REGULAR_SPACE,\n+                                            v.span);\n                         this.with_parent(variant_def_index, |this| {\n                             for (index, field) in v.node.data.fields().iter().enumerate() {\n                                 let name = field.ident.map(|ident| ident.name)\n                                     .unwrap_or_else(|| Symbol::intern(&index.to_string()));\n                                 this.create_def(field.id,\n                                                 DefPathData::Field(name.as_str()),\n-                                                REGULAR_SPACE);\n+                                                REGULAR_SPACE,\n+                                                field.span);\n                             }\n \n                             if let Some(ref expr) = v.node.disr_expr {\n@@ -152,13 +156,17 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                     if !struct_def.is_struct() {\n                         this.create_def(struct_def.id(),\n                                         DefPathData::StructCtor,\n-                                        REGULAR_SPACE);\n+                                        REGULAR_SPACE,\n+                                        i.span);\n                     }\n \n                     for (index, field) in struct_def.fields().iter().enumerate() {\n                         let name = field.ident.map(|ident| ident.name)\n                             .unwrap_or_else(|| Symbol::intern(&index.to_string()));\n-                        this.create_def(field.id, DefPathData::Field(name.as_str()), REGULAR_SPACE);\n+                        this.create_def(field.id,\n+                                        DefPathData::Field(name.as_str()),\n+                                        REGULAR_SPACE,\n+                                        field.span);\n                     }\n                 }\n                 _ => {}\n@@ -168,14 +176,15 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     }\n \n     fn visit_use_tree(&mut self, use_tree: &'a UseTree, id: NodeId, _nested: bool) {\n-        self.create_def(id, DefPathData::Misc, ITEM_LIKE_SPACE);\n+        self.create_def(id, DefPathData::Misc, ITEM_LIKE_SPACE, use_tree.span);\n         visit::walk_use_tree(self, use_tree, id);\n     }\n \n     fn visit_foreign_item(&mut self, foreign_item: &'a ForeignItem) {\n         let def = self.create_def(foreign_item.id,\n                                   DefPathData::ValueNs(foreign_item.ident.name.as_str()),\n-                                  REGULAR_SPACE);\n+                                  REGULAR_SPACE,\n+                                  foreign_item.span);\n \n         self.with_parent(def, |this| {\n             visit::walk_foreign_item(this, foreign_item);\n@@ -188,14 +197,16 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                 self.create_def(\n                     lifetime_def.lifetime.id,\n                     DefPathData::LifetimeDef(lifetime_def.lifetime.ident.name.as_str()),\n-                    REGULAR_SPACE\n+                    REGULAR_SPACE,\n+                    lifetime_def.lifetime.span\n                 );\n             }\n             GenericParam::Type(ref ty_param) => {\n                 self.create_def(\n                     ty_param.id,\n                     DefPathData::TypeParam(ty_param.ident.name.as_str()),\n-                    REGULAR_SPACE\n+                    REGULAR_SPACE,\n+                    ty_param.span\n                 );\n             }\n         }\n@@ -211,7 +222,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             TraitItemKind::Macro(..) => return self.visit_macro_invoc(ti.id, false),\n         };\n \n-        let def = self.create_def(ti.id, def_data, ITEM_LIKE_SPACE);\n+        let def = self.create_def(ti.id, def_data, ITEM_LIKE_SPACE, ti.span);\n         self.with_parent(def, |this| {\n             if let TraitItemKind::Const(_, Some(ref expr)) = ti.node {\n                 this.visit_const_expr(expr);\n@@ -229,7 +240,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             ImplItemKind::Macro(..) => return self.visit_macro_invoc(ii.id, false),\n         };\n \n-        let def = self.create_def(ii.id, def_data, ITEM_LIKE_SPACE);\n+        let def = self.create_def(ii.id, def_data, ITEM_LIKE_SPACE, ii.span);\n         self.with_parent(def, |this| {\n             if let ImplItemKind::Const(_, ref expr) = ii.node {\n                 this.visit_const_expr(expr);\n@@ -255,7 +266,8 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             ExprKind::Closure(..) => {\n                 let def = self.create_def(expr.id,\n                                           DefPathData::ClosureExpr,\n-                                          REGULAR_SPACE);\n+                                          REGULAR_SPACE,\n+                                          expr.span);\n                 self.parent_def = Some(def);\n             }\n             _ => {}\n@@ -270,7 +282,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             TyKind::Mac(..) => return self.visit_macro_invoc(ty.id, false),\n             TyKind::Array(_, ref length) => self.visit_const_expr(length),\n             TyKind::ImplTrait(..) => {\n-                self.create_def(ty.id, DefPathData::ImplTrait, REGULAR_SPACE);\n+                self.create_def(ty.id, DefPathData::ImplTrait, REGULAR_SPACE, ty.span);\n             }\n             TyKind::Typeof(ref expr) => self.visit_const_expr(expr),\n             _ => {}"}, {"sha": "1a2840de447de75d3d157288c0074610294d7002", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4af749f074a255bf923dc871a7e24f5b2fd58176/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af749f074a255bf923dc871a7e24f5b2fd58176/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=4af749f074a255bf923dc871a7e24f5b2fd58176", "patch": "@@ -28,6 +28,7 @@ use std::hash::Hash;\n use syntax::ast;\n use syntax::ext::hygiene::Mark;\n use syntax::symbol::{Symbol, InternedString};\n+use syntax_pos::{Span, DUMMY_SP};\n use util::nodemap::NodeMap;\n \n /// The DefPathTable maps DefIndexes to DefKeys and vice versa.\n@@ -159,6 +160,7 @@ pub struct Definitions {\n     macro_def_scopes: FxHashMap<Mark, DefId>,\n     expansions: FxHashMap<DefIndex, Mark>,\n     next_disambiguator: FxHashMap<(DefIndex, DefPathData), u32>,\n+    def_index_to_span: FxHashMap<DefIndex, Span>,\n }\n \n // Unfortunately we have to provide a manual impl of Clone because of the\n@@ -176,6 +178,7 @@ impl Clone for Definitions {\n             macro_def_scopes: self.macro_def_scopes.clone(),\n             expansions: self.expansions.clone(),\n             next_disambiguator: self.next_disambiguator.clone(),\n+            def_index_to_span: self.def_index_to_span.clone(),\n         }\n     }\n }\n@@ -410,6 +413,7 @@ impl Definitions {\n             macro_def_scopes: FxHashMap(),\n             expansions: FxHashMap(),\n             next_disambiguator: FxHashMap(),\n+            def_index_to_span: FxHashMap(),\n         }\n     }\n \n@@ -493,6 +497,22 @@ impl Definitions {\n         self.node_to_hir_id[node_id]\n     }\n \n+    /// Retrieve the span of the given `DefId` if `DefId` is in the local crate, the span exists and\n+    /// it's not DUMMY_SP\n+    #[inline]\n+    pub fn opt_span(&self, def_id: DefId) -> Option<Span> {\n+        if def_id.krate == LOCAL_CRATE {\n+            let span = self.def_index_to_span.get(&def_id.index).cloned().unwrap_or(DUMMY_SP);\n+            if span != DUMMY_SP {\n+                Some(span)\n+            } else {\n+                None\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+\n     /// Add a definition with a parent definition.\n     pub fn create_root_def(&mut self,\n                            crate_name: &str,\n@@ -530,7 +550,8 @@ impl Definitions {\n                                   node_id: ast::NodeId,\n                                   data: DefPathData,\n                                   address_space: DefIndexAddressSpace,\n-                                  expansion: Mark)\n+                                  expansion: Mark,\n+                                  span: Span)\n                                   -> DefIndex {\n         debug!(\"create_def_with_parent(parent={:?}, node_id={:?}, data={:?})\",\n                parent, node_id, data);\n@@ -583,6 +604,11 @@ impl Definitions {\n             self.expansions.insert(index, expansion);\n         }\n \n+        // The span is added if it isn't DUMMY_SP\n+        if span != DUMMY_SP {\n+            self.def_index_to_span.insert(index, span);\n+        }\n+\n         index\n     }\n \n@@ -692,7 +718,8 @@ macro_rules! define_global_metadata_kind {\n                         ast::DUMMY_NODE_ID,\n                         DefPathData::GlobalMetaData(instance.name().as_str()),\n                         GLOBAL_MD_ADDRESS_SPACE,\n-                        Mark::root()\n+                        Mark::root(),\n+                        DUMMY_SP\n                     );\n \n                     // Make sure calling def_index does not crash."}]}