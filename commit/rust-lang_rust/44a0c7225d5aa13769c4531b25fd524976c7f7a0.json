{"sha": "44a0c7225d5aa13769c4531b25fd524976c7f7a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YTBjNzIyNWQ1YWExMzc2OWM0NTMxYjI1ZmQ1MjQ5NzZjN2Y3YTA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-19T22:59:58Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-19T22:59:58Z"}, "message": "Isolate while-header bug to minimal testcase, fix in rustboot, remove workaround in rustc.", "tree": {"sha": "5a7ead9d3317adf09f49d8f565b1c8343fdba147", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a7ead9d3317adf09f49d8f565b1c8343fdba147"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44a0c7225d5aa13769c4531b25fd524976c7f7a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44a0c7225d5aa13769c4531b25fd524976c7f7a0", "html_url": "https://github.com/rust-lang/rust/commit/44a0c7225d5aa13769c4531b25fd524976c7f7a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44a0c7225d5aa13769c4531b25fd524976c7f7a0/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d311719a754f18e7764ce7b99e578e619a54f717", "url": "https://api.github.com/repos/rust-lang/rust/commits/d311719a754f18e7764ce7b99e578e619a54f717", "html_url": "https://github.com/rust-lang/rust/commit/d311719a754f18e7764ce7b99e578e619a54f717"}], "stats": {"total": 140, "additions": 94, "deletions": 46}, "files": [{"sha": "c4930c12f7a1e2675a355a23acfcb975942c29f8", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44a0c7225d5aa13769c4531b25fd524976c7f7a0/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/44a0c7225d5aa13769c4531b25fd524976c7f7a0/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=44a0c7225d5aa13769c4531b25fd524976c7f7a0", "patch": "@@ -132,6 +132,7 @@ type ctxt =\n \n       (* Typestate-y stuff. *)\n       ctxt_stmt_is_init: (node_id,unit) Hashtbl.t;\n+      ctxt_while_header_slots: (node_id,node_id list) Hashtbl.t;\n       ctxt_post_stmt_slot_drops: (node_id,node_id list) Hashtbl.t;\n       ctxt_post_block_slot_drops: (node_id,node_id list) Hashtbl.t;\n \n@@ -239,6 +240,7 @@ let new_ctxt sess abi crate =\n     ctxt_required_syms = crate.Ast.crate_required_syms;\n \n     ctxt_stmt_is_init = Hashtbl.create 0;\n+    ctxt_while_header_slots = Hashtbl.create 0;\n     ctxt_post_stmt_slot_drops = Hashtbl.create 0;\n     ctxt_post_block_slot_drops = Hashtbl.create 0;\n "}, {"sha": "c3d5240bc80c1dfe0515ddce150c2bbc6a525f36", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 46, "deletions": 32, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/44a0c7225d5aa13769c4531b25fd524976c7f7a0/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/44a0c7225d5aa13769c4531b25fd524976c7f7a0/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=44a0c7225d5aa13769c4531b25fd524976c7f7a0", "patch": "@@ -2614,27 +2614,24 @@ let trans_visitor\n         | Ast.EXPR_atom a ->\n             trans_atom a\n \n+  and drop_slot_by_id (depth:int) (slot_id:node_id) : unit =\n+    let slot = get_slot cx slot_id in\n+    let k = Hashtbl.find cx.ctxt_slot_keys slot_id in\n+      iflog (fun _ ->\n+               annotate\n+                 (Printf.sprintf\n+                    \"drop_slot %d = %s \"\n+                    (int_of_node slot_id)\n+                    (Fmt.fmt_to_str Ast.fmt_slot_key k)));\n+      drop_slot_in_current_frame\n+        (cell_of_block_slot\n+           ~access_depth:(Some depth) slot_id) slot\n+\n   and drop_slots_after_block bid : unit =\n+    let depth = Hashtbl.find cx.ctxt_block_loop_depths bid in\n     match htab_search cx.ctxt_post_block_slot_drops bid with\n         None -> ()\n-      | Some slots ->\n-          List.iter\n-            begin\n-              fun slot_id ->\n-                let slot = get_slot cx slot_id in\n-                let k = Hashtbl.find cx.ctxt_slot_keys slot_id in\n-                let depth = Hashtbl.find cx.ctxt_block_loop_depths bid in\n-                  iflog (fun _ ->\n-                           annotate\n-                             (Printf.sprintf\n-                                \"post-block, drop_slot %d = %s \"\n-                                (int_of_node slot_id)\n-                                (Fmt.fmt_to_str Ast.fmt_slot_key k)));\n-                  drop_slot_in_current_frame\n-                    (cell_of_block_slot\n-                       ~access_depth:(Some depth) slot_id) slot\n-            end\n-            slots\n+      | Some slots -> List.iter (drop_slot_by_id depth) slots\n \n   and trans_block (block:Ast.block) : unit =\n     flush_emitter_size_cache();\n@@ -5260,6 +5257,36 @@ let trans_visitor\n           trans_log_int a\n       | _ -> unimpl (Some id) \"logging type\"\n \n+  and trans_while (id:node_id) (sw:Ast.stmt_while) : unit =\n+    let (head_stmts, head_expr) = sw.Ast.while_lval in\n+    let fwd_jmp = mark () in\n+      emit (Il.jmp Il.JMP Il.CodeNone);\n+      let block_begin = mark () in\n+        Stack.push (Stack.create()) simple_break_jumps;\n+        trans_block sw.Ast.while_body;\n+        patch fwd_jmp;\n+        Array.iter trans_stmt head_stmts;\n+        check_interrupt_flag ();\n+        let flag = next_vreg_cell (Il.ValTy Il.Bits8) in\n+          mov flag imm_true;\n+          let true_jmps = trans_cond false head_expr in\n+            mov flag imm_false;\n+            List.iter patch true_jmps;\n+            begin\n+              begin\n+                match htab_search cx.ctxt_while_header_slots id with\n+                    None -> ()\n+                  | Some slots ->\n+                      let depth = get_stmt_depth cx id in\n+                        List.iter (drop_slot_by_id depth) slots\n+              end;\n+              let back_jmps =\n+                trans_compare_simple Il.JE (Il.Cell flag) imm_true\n+              in\n+                List.iter (fun j -> patch_existing j block_begin) back_jmps;\n+        end;\n+        Stack.iter patch (Stack.pop simple_break_jumps);\n+\n \n   and trans_stmt_full (stmt:Ast.stmt) : unit =\n     match stmt.node with\n@@ -5378,20 +5405,7 @@ let trans_visitor\n           trans_block block\n \n       | Ast.STMT_while sw ->\n-          let (head_stmts, head_expr) = sw.Ast.while_lval in\n-          let fwd_jmp = mark () in\n-            emit (Il.jmp Il.JMP Il.CodeNone);\n-            let block_begin = mark () in\n-              Stack.push (Stack.create()) simple_break_jumps;\n-              trans_block sw.Ast.while_body;\n-              patch fwd_jmp;\n-              Array.iter trans_stmt head_stmts;\n-              check_interrupt_flag ();\n-              begin\n-                let back_jmps = trans_cond false head_expr in\n-                  List.iter (fun j -> patch_existing j block_begin) back_jmps;\n-              end;\n-              Stack.iter patch (Stack.pop simple_break_jumps);\n+          trans_while stmt.id sw\n \n       | Ast.STMT_if si ->\n           let skip_thn_jmps = trans_cond true si.Ast.if_test in"}, {"sha": "ea0204f37cc35863a26255e23b51c1c4819ba795", "filename": "src/boot/me/typestate.ml", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/44a0c7225d5aa13769c4531b25fd524976c7f7a0/src%2Fboot%2Fme%2Ftypestate.ml", "raw_url": "https://github.com/rust-lang/rust/raw/44a0c7225d5aa13769c4531b25fd524976c7f7a0/src%2Fboot%2Fme%2Ftypestate.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftypestate.ml?ref=44a0c7225d5aa13769c4531b25fd524976c7f7a0", "patch": "@@ -1467,7 +1467,28 @@ let lifecycle_visitor\n                 f.Ast.for_each_body.id\n                 [ (fst f.Ast.for_each_slot).id ]\n \n-          | Ast.STMT_while _ ->\n+          | Ast.STMT_while sw ->\n+              (* Collect any header-locals. *)\n+              Array.iter\n+                begin\n+                  fun stmt ->\n+                    match stmt.node with\n+                        Ast.STMT_decl (Ast.DECL_slot (_, slot)) ->\n+                          begin\n+                            match\n+                              htab_search cx.ctxt_while_header_slots s.id\n+                            with\n+                                None ->\n+                                  Hashtbl.add cx.ctxt_while_header_slots\n+                                    s.id [slot.id]\n+                              | Some slots ->\n+                                  Hashtbl.replace cx.ctxt_while_header_slots\n+                                    s.id (slot.id :: slots)\n+                          end\n+                      | _ -> ()\n+                end\n+                (fst sw.Ast.while_lval);\n+\n               iflog cx (fun _ -> log cx \"entering a loop\");\n               Stack.push (Some (Stack.create ()))  loop_blocks;\n "}, {"sha": "2382efc1cf784a6655a1a39ec5f1fdb7042a6f68", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/44a0c7225d5aa13769c4531b25fd524976c7f7a0/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a0c7225d5aa13769c4531b25fd524976c7f7a0/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=44a0c7225d5aa13769c4531b25fd524976c7f7a0", "patch": "@@ -198,17 +198,6 @@ impure fn parse_arg(parser p) -> ast.arg {\n     ret rec(mode=m, ty=t, ident=i, id=p.next_def_id());\n }\n \n-// FIXME: workaround for a bug in the typestate walk of\n-// the while-graph; the while-loop header doesn't drop\n-// its slots, so \"while (p.peek() ...) { ... }\" leaks.\n-\n-fn peeking_at(parser p, token.token t) -> bool {\n-    if (p.peek() == t) {\n-        ret true;\n-    }\n-    ret false;\n-}\n-\n impure fn parse_seq[T](token.token bra,\n                       token.token ket,\n                       option.t[token.token] sep,\n@@ -218,7 +207,7 @@ impure fn parse_seq[T](token.token bra,\n     auto lo = p.get_span();\n     expect(p, bra);\n     let vec[T] v = vec();\n-    while (!peeking_at(p, ket)) {\n+    while (p.peek() != ket) {\n         alt(sep) {\n             case (some[token.token](?t)) {\n                 if (first) {\n@@ -936,7 +925,7 @@ impure fn parse_mod_items(parser p, token.token term) -> ast._mod {\n    let vec[@ast.item] items = vec();\n     let hashmap[ast.ident,uint] index = new_str_hash[uint]();\n     let uint u = 0u;\n-    while (!peeking_at(p, term)) {\n+    while (p.peek() != term) {\n         auto pair = parse_item(p);\n         append[@ast.item](items, pair._1);\n         index.insert(pair._0, u);"}, {"sha": "18f259a77d8cd9082ece8d6e4704f0965751e11e", "filename": "src/test/run-pass/while-prelude-drop.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/44a0c7225d5aa13769c4531b25fd524976c7f7a0/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44a0c7225d5aa13769c4531b25fd524976c7f7a0/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs?ref=44a0c7225d5aa13769c4531b25fd524976c7f7a0", "patch": "@@ -0,0 +1,22 @@\n+tag t {\n+  a;\n+  b(str);\n+}\n+\n+fn make(int i) -> t {\n+  if (i > 10) {\n+    ret a;\n+  }\n+  auto s = \"hello\";\n+  // Ensure s is non-const.\n+  s += \"there\";\n+  ret b(s);\n+}\n+\n+fn main() {\n+  auto i = 0;\n+  // The auto slot for the result of make(i) should not leak.\n+  while (make(i) != a) {\n+    i += 1;\n+  }\n+}\n\\ No newline at end of file"}]}