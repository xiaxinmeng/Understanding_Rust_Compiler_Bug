{"sha": "f1db3be9cf9a7efff0db8195e245dcfea16cb233", "node_id": "C_kwDOAAsO6NoAKGYxZGIzYmU5Y2Y5YTdlZmZmMGRiODE5NWUyNDVkY2ZlYTE2Y2IyMzM", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-08-22T11:41:38Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-08-22T11:44:04Z"}, "message": "fix tidy", "tree": {"sha": "df9746314c2a13671f19a7b7d805bf3949bd6989", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df9746314c2a13671f19a7b7d805bf3949bd6989"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1db3be9cf9a7efff0db8195e245dcfea16cb233", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1db3be9cf9a7efff0db8195e245dcfea16cb233", "html_url": "https://github.com/rust-lang/rust/commit/f1db3be9cf9a7efff0db8195e245dcfea16cb233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1db3be9cf9a7efff0db8195e245dcfea16cb233/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f019b6c5e8f2bb7e5985ea595b0946479c5aa4c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f019b6c5e8f2bb7e5985ea595b0946479c5aa4c2", "html_url": "https://github.com/rust-lang/rust/commit/f019b6c5e8f2bb7e5985ea595b0946479c5aa4c2"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "9e39e49b63c20b725e93259e7dae81992b9aab8a", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f1db3be9cf9a7efff0db8195e245dcfea16cb233/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1db3be9cf9a7efff0db8195e245dcfea16cb233/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=f1db3be9cf9a7efff0db8195e245dcfea16cb233", "patch": "@@ -1193,11 +1193,7 @@ fn check_item_type(tcx: TyCtxt<'_>, item_id: LocalDefId, ty_span: Span, allow_fo\n             }\n         }\n \n-        wfcx.register_wf_obligation(\n-            ty_span,\n-            Some(WellFormedLoc::Ty(item_id)),\n-            item_ty.into(),\n-        );\n+        wfcx.register_wf_obligation(ty_span, Some(WellFormedLoc::Ty(item_id)), item_ty.into());\n         if forbid_unsized {\n             wfcx.register_bound(\n                 traits::ObligationCause::new(ty_span, wfcx.body_id, traits::WellFormed(None)),\n@@ -1306,11 +1302,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n                     // parameter includes another (e.g., `<T, U = T>`). In those cases, we can't\n                     // be sure if it will error or not as user might always specify the other.\n                     if !ty.needs_subst() {\n-                        wfcx.register_wf_obligation(\n-                            tcx.def_span(param.def_id),\n-                            None,\n-                            ty.into(),\n-                        );\n+                        wfcx.register_wf_obligation(tcx.def_span(param.def_id), None, ty.into());\n                     }\n                 }\n             }\n@@ -1454,7 +1446,13 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n     assert_eq!(predicates.predicates.len(), predicates.spans.len());\n     let wf_obligations =\n         iter::zip(&predicates.predicates, &predicates.spans).flat_map(|(&p, &sp)| {\n-            traits::wf::predicate_obligations(infcx, wfcx.param_env.without_const(), wfcx.body_id, p, sp)\n+            traits::wf::predicate_obligations(\n+                infcx,\n+                wfcx.param_env.without_const(),\n+                wfcx.body_id,\n+                p,\n+                sp,\n+            )\n         });\n \n     let obligations: Vec<_> = wf_obligations.chain(default_obligations).collect();\n@@ -1509,11 +1507,7 @@ fn check_fn_or_method<'tcx>(\n         );\n     }\n \n-    wfcx.register_wf_obligation(\n-        hir_decl.output.span(),\n-        None,\n-        sig.output().into(),\n-    );\n+    wfcx.register_wf_obligation(hir_decl.output.span(), None, sig.output().into());\n \n     check_where_clauses(wfcx, span, def_id);\n }"}, {"sha": "1004bb28c59e70b6066beda09c3eb9920196c6a2", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-100222.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1db3be9cf9a7efff0db8195e245dcfea16cb233/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-100222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1db3be9cf9a7efff0db8195e245dcfea16cb233/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-100222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-100222.rs?ref=f1db3be9cf9a7efff0db8195e245dcfea16cb233", "patch": "@@ -19,7 +19,9 @@ impl Index for () { type Output = (); }\n impl const IndexMut for <() as Index>::Output {\n     const C: <Self as Index>::Output = ();\n     type Assoc = <Self as Index>::Output;\n-    fn foo(&mut self, x: <Self as Index>::Output) -> <Self as Index>::Output where <Self as Index>::Output: {}\n+    fn foo(&mut self, x: <Self as Index>::Output) -> <Self as Index>::Output\n+        where <Self as Index>::Output:,\n+    {}\n }\n \n const C: <() as Index>::Output = ();"}]}