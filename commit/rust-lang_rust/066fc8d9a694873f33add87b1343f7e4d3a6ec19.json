{"sha": "066fc8d9a694873f33add87b1343f7e4d3a6ec19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NmZjOGQ5YTY5NDg3M2YzM2FkZDg3YjEzNDNmN2U0ZDNhNmVjMTk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-30T15:05:46Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-30T15:05:46Z"}, "message": "Rollup merge of #33942 - srinivasreddy:rustfmt_llvm_folder, r=nrc\n\nrun rustfmt on librustc_llvm folder", "tree": {"sha": "6b58678756b67c1ddf99f185e367933bf369ee10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b58678756b67c1ddf99f185e367933bf369ee10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/066fc8d9a694873f33add87b1343f7e4d3a6ec19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/066fc8d9a694873f33add87b1343f7e4d3a6ec19", "html_url": "https://github.com/rust-lang/rust/commit/066fc8d9a694873f33add87b1343f7e4d3a6ec19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/066fc8d9a694873f33add87b1343f7e4d3a6ec19/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b5724f0c428e5364402d0fe7b8e9eb3998a5bc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b5724f0c428e5364402d0fe7b8e9eb3998a5bc4", "html_url": "https://github.com/rust-lang/rust/commit/2b5724f0c428e5364402d0fe7b8e9eb3998a5bc4"}, {"sha": "593e1567cac93b3ed60b37cb37cdf60b04182b4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/593e1567cac93b3ed60b37cb37cdf60b04182b4d", "html_url": "https://github.com/rust-lang/rust/commit/593e1567cac93b3ed60b37cb37cdf60b04182b4d"}], "stats": {"total": 139, "additions": 83, "deletions": 56}, "files": [{"sha": "b3f5f8e536052c09769d8bb246dcd68f8586d6ad", "filename": "src/librustc_llvm/archive_ro.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/066fc8d9a694873f33add87b1343f7e4d3a6ec19/src%2Flibrustc_llvm%2Farchive_ro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fc8d9a694873f33add87b1343f7e4d3a6ec19/src%2Flibrustc_llvm%2Farchive_ro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Farchive_ro.rs?ref=066fc8d9a694873f33add87b1343f7e4d3a6ec19", "patch": "@@ -18,7 +18,9 @@ use std::path::Path;\n use std::slice;\n use std::str;\n \n-pub struct ArchiveRO { ptr: ArchiveRef }\n+pub struct ArchiveRO {\n+    ptr: ArchiveRef,\n+}\n \n pub struct Iter<'a> {\n     archive: &'a ArchiveRO,\n@@ -61,11 +63,16 @@ impl ArchiveRO {\n         }\n     }\n \n-    pub fn raw(&self) -> ArchiveRef { self.ptr }\n+    pub fn raw(&self) -> ArchiveRef {\n+        self.ptr\n+    }\n \n     pub fn iter(&self) -> Iter {\n         unsafe {\n-            Iter { ptr: ::LLVMRustArchiveIteratorNew(self.ptr), archive: self }\n+            Iter {\n+                ptr: ::LLVMRustArchiveIteratorNew(self.ptr),\n+                archive: self,\n+            }\n         }\n     }\n }\n@@ -86,7 +93,10 @@ impl<'a> Iterator for Iter<'a> {\n         if ptr.is_null() {\n             ::last_error().map(Err)\n         } else {\n-            Some(Ok(Child { ptr: ptr, _data: marker::PhantomData }))\n+            Some(Ok(Child {\n+                ptr: ptr,\n+                _data: marker::PhantomData,\n+            }))\n         }\n     }\n }\n@@ -107,8 +117,7 @@ impl<'a> Child<'a> {\n             if name_ptr.is_null() {\n                 None\n             } else {\n-                let name = slice::from_raw_parts(name_ptr as *const u8,\n-                                                 name_len as usize);\n+                let name = slice::from_raw_parts(name_ptr as *const u8, name_len as usize);\n                 str::from_utf8(name).ok().map(|s| s.trim())\n             }\n         }\n@@ -125,11 +134,15 @@ impl<'a> Child<'a> {\n         }\n     }\n \n-    pub fn raw(&self) -> ::ArchiveChildRef { self.ptr }\n+    pub fn raw(&self) -> ::ArchiveChildRef {\n+        self.ptr\n+    }\n }\n \n impl<'a> Drop for Child<'a> {\n     fn drop(&mut self) {\n-        unsafe { ::LLVMRustArchiveChildFree(self.ptr); }\n+        unsafe {\n+            ::LLVMRustArchiveChildFree(self.ptr);\n+        }\n     }\n }"}, {"sha": "250aafd77a82664e22a09b0b5503cafaa6d13dd2", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 36, "deletions": 25, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/066fc8d9a694873f33add87b1343f7e4d3a6ec19/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fc8d9a694873f33add87b1343f7e4d3a6ec19/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=066fc8d9a694873f33add87b1343f7e4d3a6ec19", "patch": "@@ -21,20 +21,25 @@ fn main() {\n     println!(\"cargo:rustc-cfg=cargobuild\");\n \n     let target = env::var(\"TARGET\").unwrap();\n-    let llvm_config = env::var_os(\"LLVM_CONFIG\").map(PathBuf::from)\n-                           .unwrap_or_else(|| {\n-        match env::var_os(\"CARGO_TARGET_DIR\").map(PathBuf::from) {\n-            Some(dir) => {\n-                let to_test = dir.parent().unwrap().parent().unwrap()\n-                                 .join(&target).join(\"llvm/bin/llvm-config\");\n-                if Command::new(&to_test).output().is_ok() {\n-                    return to_test\n-                }\n-            }\n-            None => {}\n-        }\n-        PathBuf::from(\"llvm-config\")\n-    });\n+    let llvm_config = env::var_os(\"LLVM_CONFIG\")\n+                          .map(PathBuf::from)\n+                          .unwrap_or_else(|| {\n+                              match env::var_os(\"CARGO_TARGET_DIR\").map(PathBuf::from) {\n+                                  Some(dir) => {\n+                                      let to_test = dir.parent()\n+                                                       .unwrap()\n+                                                       .parent()\n+                                                       .unwrap()\n+                                                       .join(&target)\n+                                                       .join(\"llvm/bin/llvm-config\");\n+                                      if Command::new(&to_test).output().is_ok() {\n+                                          return to_test;\n+                                      }\n+                                  }\n+                                  None => {}\n+                              }\n+                              PathBuf::from(\"llvm-config\")\n+                          });\n \n     println!(\"cargo:rerun-if-changed={}\", llvm_config.display());\n \n@@ -63,20 +68,22 @@ fn main() {\n     let host = env::var(\"HOST\").unwrap();\n     let is_crossed = target != host;\n \n-    let optional_components = [\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\",\n-                               \"pnacl\"];\n+    let optional_components = [\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\"];\n \n     // FIXME: surely we don't need all these components, right? Stuff like mcjit\n     //        or interpreter the compiler itself never uses.\n-    let required_components = &[\"ipo\", \"bitreader\", \"bitwriter\", \"linker\",\n-                                \"asmparser\", \"mcjit\", \"interpreter\",\n+    let required_components = &[\"ipo\",\n+                                \"bitreader\",\n+                                \"bitwriter\",\n+                                \"linker\",\n+                                \"asmparser\",\n+                                \"mcjit\",\n+                                \"interpreter\",\n                                 \"instrumentation\"];\n \n     let components = output(Command::new(&llvm_config).arg(\"--components\"));\n     let mut components = components.split_whitespace().collect::<Vec<_>>();\n-    components.retain(|c| {\n-        optional_components.contains(c) || required_components.contains(c)\n-    });\n+    components.retain(|c| optional_components.contains(c) || required_components.contains(c));\n \n     for component in required_components {\n         if !components.contains(component) {\n@@ -96,7 +103,7 @@ fn main() {\n     for flag in cxxflags.split_whitespace() {\n         // Ignore flags like `-m64` when we're doing a cross build\n         if is_crossed && flag.starts_with(\"-m\") {\n-            continue\n+            continue;\n         }\n         cfg.flag(flag);\n     }\n@@ -131,7 +138,7 @@ fn main() {\n         } else if lib.starts_with(\"-\") {\n             &lib[1..]\n         } else {\n-            continue\n+            continue;\n         };\n \n         // Don't need or want this library, but LLVM's CMake build system\n@@ -140,10 +147,14 @@ fn main() {\n         // library and it otherwise may just pull in extra dependencies on\n         // libedit which we don't want\n         if name == \"LLVMLineEditor\" {\n-            continue\n+            continue;\n         }\n \n-        let kind = if name.starts_with(\"LLVM\") {\"static\"} else {\"dylib\"};\n+        let kind = if name.starts_with(\"LLVM\") {\n+            \"static\"\n+        } else {\n+            \"dylib\"\n+        };\n         println!(\"cargo:rustc-link-lib={}={}\", kind, name);\n     }\n "}, {"sha": "44e0156146402778af1269c26e9e339a6a7b792e", "filename": "src/librustc_llvm/diagnostic.rs", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/066fc8d9a694873f33add87b1343f7e4d3a6ec19/src%2Flibrustc_llvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fc8d9a694873f33add87b1343f7e4d3a6ec19/src%2Flibrustc_llvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fdiagnostic.rs?ref=066fc8d9a694873f33add87b1343f7e4d3a6ec19", "patch": "@@ -16,7 +16,7 @@ pub use self::Diagnostic::*;\n use libc::{c_char, c_uint};\n use std::ptr;\n \n-use {ValueRef, TwineRef, DebugLocRef, DiagnosticInfoRef};\n+use {DebugLocRef, DiagnosticInfoRef, TwineRef, ValueRef};\n \n #[derive(Copy, Clone)]\n pub enum OptimizationDiagnosticKind {\n@@ -46,8 +46,9 @@ pub struct OptimizationDiagnostic {\n }\n \n impl OptimizationDiagnostic {\n-    unsafe fn unpack(kind: OptimizationDiagnosticKind, di: DiagnosticInfoRef)\n-            -> OptimizationDiagnostic {\n+    unsafe fn unpack(kind: OptimizationDiagnosticKind,\n+                     di: DiagnosticInfoRef)\n+                     -> OptimizationDiagnostic {\n \n         let mut opt = OptimizationDiagnostic {\n             kind: kind,\n@@ -58,10 +59,10 @@ impl OptimizationDiagnostic {\n         };\n \n         super::LLVMUnpackOptimizationDiagnostic(di,\n-            &mut opt.pass_name,\n-            &mut opt.function,\n-            &mut opt.debug_loc,\n-            &mut opt.message);\n+                                                &mut opt.pass_name,\n+                                                &mut opt.function,\n+                                                &mut opt.debug_loc,\n+                                                &mut opt.message);\n \n         opt\n     }\n@@ -75,8 +76,7 @@ pub struct InlineAsmDiagnostic {\n }\n \n impl InlineAsmDiagnostic {\n-    unsafe fn unpack(di: DiagnosticInfoRef)\n-            -> InlineAsmDiagnostic {\n+    unsafe fn unpack(di: DiagnosticInfoRef) -> InlineAsmDiagnostic {\n \n         let mut opt = InlineAsmDiagnostic {\n             cookie: 0,\n@@ -85,9 +85,9 @@ impl InlineAsmDiagnostic {\n         };\n \n         super::LLVMUnpackInlineAsmDiagnostic(di,\n-            &mut opt.cookie,\n-            &mut opt.message,\n-            &mut opt.instruction);\n+                                             &mut opt.cookie,\n+                                             &mut opt.message,\n+                                             &mut opt.instruction);\n \n         opt\n     }\n@@ -106,22 +106,25 @@ impl Diagnostic {\n         let kind = super::LLVMGetDiagInfoKind(di);\n \n         match kind {\n-            super::DK_InlineAsm\n-                => InlineAsm(InlineAsmDiagnostic::unpack(di)),\n+            super::DK_InlineAsm => InlineAsm(InlineAsmDiagnostic::unpack(di)),\n \n-            super::DK_OptimizationRemark\n-                => Optimization(OptimizationDiagnostic::unpack(OptimizationRemark, di)),\n+            super::DK_OptimizationRemark => {\n+                Optimization(OptimizationDiagnostic::unpack(OptimizationRemark, di))\n+            }\n \n-            super::DK_OptimizationRemarkMissed\n-                => Optimization(OptimizationDiagnostic::unpack(OptimizationMissed, di)),\n+            super::DK_OptimizationRemarkMissed => {\n+                Optimization(OptimizationDiagnostic::unpack(OptimizationMissed, di))\n+            }\n \n-            super::DK_OptimizationRemarkAnalysis\n-                => Optimization(OptimizationDiagnostic::unpack(OptimizationAnalysis, di)),\n+            super::DK_OptimizationRemarkAnalysis => {\n+                Optimization(OptimizationDiagnostic::unpack(OptimizationAnalysis, di))\n+            }\n \n-            super::DK_OptimizationFailure\n-                => Optimization(OptimizationDiagnostic::unpack(OptimizationFailure, di)),\n+            super::DK_OptimizationFailure => {\n+                Optimization(OptimizationDiagnostic::unpack(OptimizationFailure, di))\n+            }\n \n-            _ => UnknownDiagnostic(di)\n+            _ => UnknownDiagnostic(di),\n         }\n     }\n }"}]}