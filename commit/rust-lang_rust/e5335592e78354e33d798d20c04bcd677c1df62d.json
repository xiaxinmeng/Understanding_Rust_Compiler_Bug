{"sha": "e5335592e78354e33d798d20c04bcd677c1df62d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MzM1NTkyZTc4MzU0ZTMzZDc5OGQyMGMwNGJjZDY3N2MxZGY2MmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-26T20:58:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-26T20:58:52Z"}, "message": "Auto merge of #72627 - Dylan-DPC:rollup-bavnoq5, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #72270 (add a lint against references to packed fields)\n - #72294 (JS cleanup)\n - #72342 (Warn about unused crate deps)\n - #72401 (Use correct function for detecting `const fn` in unsafety checking)\n - #72581 (Allow unlabeled breaks from desugared `?` in labeled blocks)\n - #72592 (Update books)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "905f866aaef10ee8effbc165b0844a580e68762b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/905f866aaef10ee8effbc165b0844a580e68762b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5335592e78354e33d798d20c04bcd677c1df62d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5335592e78354e33d798d20c04bcd677c1df62d", "html_url": "https://github.com/rust-lang/rust/commit/e5335592e78354e33d798d20c04bcd677c1df62d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5335592e78354e33d798d20c04bcd677c1df62d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5239f5c57bb6eb9e894081727f5aba0a67e89763", "url": "https://api.github.com/repos/rust-lang/rust/commits/5239f5c57bb6eb9e894081727f5aba0a67e89763", "html_url": "https://github.com/rust-lang/rust/commit/5239f5c57bb6eb9e894081727f5aba0a67e89763"}, {"sha": "e061c402ae3cd22e4b0037c23e4c0be84e7ef695", "url": "https://api.github.com/repos/rust-lang/rust/commits/e061c402ae3cd22e4b0037c23e4c0be84e7ef695", "html_url": "https://github.com/rust-lang/rust/commit/e061c402ae3cd22e4b0037c23e4c0be84e7ef695"}], "stats": {"total": 1009, "additions": 682, "deletions": 327}, "files": [{"sha": "e8a4714a9d8a6136a59b8e63544e149683876e36", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -1 +1 @@\n-Subproject commit 6247be15a7f7509559f7981ee2209b9e0cc121df\n+Subproject commit e8a4714a9d8a6136a59b8e63544e149683876e36"}, {"sha": "0a8ab5046829733eb03df0738c4fafaa9b36b348", "filename": "src/doc/edition-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fedition-guide?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -1 +1 @@\n-Subproject commit 49270740c7a4bff2763e6bc730b191d45b7d5167\n+Subproject commit 0a8ab5046829733eb03df0738c4fafaa9b36b348"}, {"sha": "5555a97f04ad7974ac6fb8fb47c267c4274adf4a", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -1 +1 @@\n-Subproject commit 366c50a03bed928589771eba8a6f18e0c0c01d23\n+Subproject commit 5555a97f04ad7974ac6fb8fb47c267c4274adf4a"}, {"sha": "becdca9477c9eafa96a4eea5156fe7a2730d9dd2", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -1 +1 @@\n-Subproject commit 892b928b565e35d25b6f9c47faee03b94bc41489\n+Subproject commit becdca9477c9eafa96a4eea5156fe7a2730d9dd2"}, {"sha": "7aa82129aa23e7e181efbeb8da03a2a897ef6afc", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -1 +1 @@\n-Subproject commit ab072b14393cbd9e8a1d1d75879bf51e27217bbb\n+Subproject commit 7aa82129aa23e7e181efbeb8da03a2a897ef6afc"}, {"sha": "ee27342541c93178a4b4fcf432866cdc19c32a00", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -276,6 +276,7 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n         UNUSED_ALLOCATION,\n         UNUSED_DOC_COMMENTS,\n         UNUSED_EXTERN_CRATES,\n+        UNUSED_CRATE_DEPENDENCIES,\n         UNUSED_FEATURES,\n         UNUSED_LABELS,\n         UNUSED_PARENS,"}, {"sha": "db29e9538999a4276cb3c8a377065275c490a690", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -5,6 +5,7 @@ use crate::rmeta::{CrateDep, CrateMetadata, CrateNumMap, CrateRoot, MetadataBlob\n \n use rustc_ast::expand::allocator::{global_allocator_spans, AllocatorKind};\n use rustc_ast::{ast, attr};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::struct_span_err;\n@@ -18,6 +19,7 @@ use rustc_middle::middle::cstore::{\n };\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{self, CrateType};\n+use rustc_session::lint;\n use rustc_session::output::validate_crate_name;\n use rustc_session::search_paths::PathKind;\n use rustc_session::{CrateDisambiguator, Session};\n@@ -49,6 +51,7 @@ pub struct CrateLoader<'a> {\n     local_crate_name: Symbol,\n     // Mutable output.\n     cstore: CStore,\n+    used_extern_options: FxHashSet<Symbol>,\n }\n \n pub enum LoadedMacro {\n@@ -205,6 +208,7 @@ impl<'a> CrateLoader<'a> {\n                 allocator_kind: None,\n                 has_global_allocator: false,\n             },\n+            used_extern_options: Default::default(),\n         }\n     }\n \n@@ -445,6 +449,9 @@ impl<'a> CrateLoader<'a> {\n         dep_kind: DepKind,\n         dep: Option<(&'b CratePaths, &'b CrateDep)>,\n     ) -> CrateNum {\n+        if dep.is_none() {\n+            self.used_extern_options.insert(name);\n+        }\n         self.maybe_resolve_crate(name, span, dep_kind, dep).unwrap_or_else(|err| err.report())\n     }\n \n@@ -839,6 +846,26 @@ impl<'a> CrateLoader<'a> {\n         });\n     }\n \n+    fn report_unused_deps(&mut self, krate: &ast::Crate) {\n+        // Make a point span rather than covering the whole file\n+        let span = krate.span.shrink_to_lo();\n+        // Complain about anything left over\n+        for (name, _) in self.sess.opts.externs.iter() {\n+            if !self.used_extern_options.contains(&Symbol::intern(name)) {\n+                self.sess.parse_sess.buffer_lint(\n+                    lint::builtin::UNUSED_CRATE_DEPENDENCIES,\n+                    span,\n+                    ast::CRATE_NODE_ID,\n+                    &format!(\n+                        \"external crate `{}` unused in `{}`: remove the dependency or add `use {} as _;`\",\n+                        name,\n+                        self.local_crate_name,\n+                        name),\n+                );\n+            }\n+        }\n+    }\n+\n     pub fn postprocess(&mut self, krate: &ast::Crate) {\n         self.inject_profiler_runtime();\n         self.inject_allocator_crate(krate);\n@@ -847,6 +874,8 @@ impl<'a> CrateLoader<'a> {\n         if log_enabled!(log::Level::Info) {\n             dump_crates(&self.cstore);\n         }\n+\n+        self.report_unused_deps(krate);\n     }\n \n     pub fn process_extern_crate("}, {"sha": "faad1a72327f49acd88a19c96f65b59ffa901068", "filename": "src/librustc_mir/transform/check_packed_ref.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustc_mir%2Ftransform%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustc_mir%2Ftransform%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_packed_ref.rs?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -0,0 +1,66 @@\n+use rustc_middle::mir::visit::{PlaceContext, Visitor};\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::{self, TyCtxt};\n+use rustc_session::lint::builtin::UNALIGNED_REFERENCES;\n+\n+use crate::transform::{MirPass, MirSource};\n+use crate::util;\n+\n+pub struct CheckPackedRef;\n+\n+impl<'tcx> MirPass<'tcx> for CheckPackedRef {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+        let param_env = tcx.param_env(src.instance.def_id());\n+        let source_info = SourceInfo::outermost(body.span);\n+        let mut checker = PackedRefChecker { body, tcx, param_env, source_info };\n+        checker.visit_body(&body);\n+    }\n+}\n+\n+struct PackedRefChecker<'a, 'tcx> {\n+    body: &'a Body<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    source_info: SourceInfo,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for PackedRefChecker<'a, 'tcx> {\n+    fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n+        // Make sure we know where in the MIR we are.\n+        self.source_info = terminator.source_info;\n+        self.super_terminator(terminator, location);\n+    }\n+\n+    fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n+        // Make sure we know where in the MIR we are.\n+        self.source_info = statement.source_info;\n+        self.super_statement(statement, location);\n+    }\n+\n+    fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, _location: Location) {\n+        if context.is_borrow() {\n+            if util::is_disaligned(self.tcx, self.body, self.param_env, *place) {\n+                let source_info = self.source_info;\n+                let lint_root = self.body.source_scopes[source_info.scope]\n+                    .local_data\n+                    .as_ref()\n+                    .assert_crate_local()\n+                    .lint_root;\n+                self.tcx.struct_span_lint_hir(\n+                    UNALIGNED_REFERENCES,\n+                    lint_root,\n+                    source_info.span,\n+                    |lint| {\n+                        lint.build(&format!(\"reference to packed field is unaligned\",))\n+                            .note(\n+                                \"fields of packed structs are not properly aligned, and creating \\\n+                                a misaligned reference is undefined behavior (even if that \\\n+                                reference is never dereferenced)\",\n+                            )\n+                            .emit()\n+                    },\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "a335fa2de411b459cf1561f7eb78359709b1e743", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -14,7 +14,7 @@ use rustc_span::symbol::{sym, Symbol};\n \n use std::ops::Bound;\n \n-use crate::const_eval::{is_const_fn, is_min_const_fn};\n+use crate::const_eval::is_min_const_fn;\n use crate::util;\n \n pub struct UnsafetyChecker<'a, 'tcx> {\n@@ -527,7 +527,7 @@ fn unsafety_check_result(tcx: TyCtxt<'_>, def_id: LocalDefId) -> UnsafetyCheckRe\n     let (const_context, min_const_fn) = match tcx.hir().body_owner_kind(id) {\n         hir::BodyOwnerKind::Closure => (false, false),\n         hir::BodyOwnerKind::Fn => {\n-            (is_const_fn(tcx, def_id.to_def_id()), is_min_const_fn(tcx, def_id.to_def_id()))\n+            (tcx.is_const_fn_raw(def_id.to_def_id()), is_min_const_fn(tcx, def_id.to_def_id()))\n         }\n         hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => (true, false),\n     };"}, {"sha": "26725a2ac02d585ecc528067127a10696dfb82b3", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -17,6 +17,7 @@ pub mod add_call_guards;\n pub mod add_moves_for_packed_drops;\n pub mod add_retag;\n pub mod check_consts;\n+pub mod check_packed_ref;\n pub mod check_unsafety;\n pub mod cleanup_post_borrowck;\n pub mod const_prop;\n@@ -228,10 +229,11 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> ConstQualifs {\n     validator.qualifs_in_return_place()\n }\n \n+/// Make MIR ready for const evaluation. This is run on all MIR, not just on consts!\n fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> Steal<Body<'_>> {\n     let def_id = def_id.expect_local();\n \n-    // Unsafety check uses the raw mir, so make sure it is run\n+    // Unsafety check uses the raw mir, so make sure it is run.\n     let _ = tcx.unsafety_check_result(def_id);\n \n     let mut body = tcx.mir_built(def_id).steal();\n@@ -247,6 +249,8 @@ fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> Steal<Body<'_>> {\n         None,\n         MirPhase::Const,\n         &[&[\n+            // MIR-level lints.\n+            &check_packed_ref::CheckPackedRef,\n             // What we need to do constant evaluation.\n             &simplify::SimplifyCfg::new(\"initial\"),\n             &rustc_peek::SanityCheck,"}, {"sha": "767a6909d31d44f26b53a5d54dc933ae5b660be5", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -9,6 +9,7 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n+use rustc_span::hygiene::DesugaringKind;\n use rustc_span::Span;\n \n #[derive(Clone, Copy, Debug, PartialEq)]\n@@ -203,7 +204,7 @@ impl<'a, 'hir> CheckLoopVisitor<'a, 'hir> {\n         label: &Destination,\n         cf_type: &str,\n     ) -> bool {\n-        if self.cx == LabeledBlock {\n+        if !span.is_desugaring(DesugaringKind::QuestionMark) && self.cx == LabeledBlock {\n             if label.label.is_none() {\n                 struct_span_err!(\n                     self.sess,"}, {"sha": "e55ddc26a944196721f95a50f41eb9e9ce676277", "filename": "src/librustc_session/lint/builtin.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint%2Fbuiltin.rs?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -71,6 +71,12 @@ declare_lint! {\n     \"extern crates that are never used\"\n }\n \n+declare_lint! {\n+    pub UNUSED_CRATE_DEPENDENCIES,\n+    Allow,\n+    \"crate dependencies that are never used\"\n+}\n+\n declare_lint! {\n     pub UNUSED_QUALIFICATIONS,\n     Allow,\n@@ -216,10 +222,16 @@ declare_lint! {\n     \"lints that have been renamed or removed\"\n }\n \n+declare_lint! {\n+    pub UNALIGNED_REFERENCES,\n+    Allow,\n+    \"detects unaligned references to fields of packed structs\",\n+}\n+\n declare_lint! {\n     pub SAFE_PACKED_BORROWS,\n     Warn,\n-    \"safe borrows of fields of packed structs were was erroneously allowed\",\n+    \"safe borrows of fields of packed structs were erroneously allowed\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #46043 <https://github.com/rust-lang/rust/issues/46043>\",\n         edition: None,\n@@ -523,6 +535,7 @@ declare_lint_pass! {\n         UNCONDITIONAL_PANIC,\n         UNUSED_IMPORTS,\n         UNUSED_EXTERN_CRATES,\n+        UNUSED_CRATE_DEPENDENCIES,\n         UNUSED_QUALIFICATIONS,\n         UNKNOWN_LINTS,\n         UNUSED_VARIABLES,\n@@ -545,6 +558,7 @@ declare_lint_pass! {\n         INVALID_TYPE_PARAM_DEFAULT,\n         CONST_ERR,\n         RENAMED_AND_REMOVED_LINTS,\n+        UNALIGNED_REFERENCES,\n         SAFE_PACKED_BORROWS,\n         PATTERNS_IN_FNS_WITHOUT_BODY,\n         MISSING_FRAGMENT_SPECIFIER,"}, {"sha": "22c9426db2036ed4db27336babcd0bda047da8e0", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 293, "deletions": 295, "changes": 588, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -3,7 +3,7 @@\n \n // Local js definitions:\n /* global addClass, getCurrentValue, hasClass */\n-/* global onEach, removeClass, updateLocalStorage */\n+/* global onEachLazy, hasOwnProperty, removeClass, updateLocalStorage */\n \n if (!String.prototype.startsWith) {\n     String.prototype.startsWith = function(searchString, position) {\n@@ -47,6 +47,16 @@ function getSearchElement() {\n     return document.getElementById(\"search\");\n }\n \n+// Sets the focus on the search bar at the top of the page\n+function focusSearchBar() {\n+    getSearchInput().focus();\n+}\n+\n+// Removes the focus from the search bar\n+function defocusSearchBar() {\n+    getSearchInput().blur();\n+}\n+\n (function() {\n     \"use strict\";\n \n@@ -181,6 +191,7 @@ function getSearchElement() {\n     var savedHash = \"\";\n \n     function handleHashes(ev) {\n+        var elem;\n         var search = getSearchElement();\n         if (ev !== null && search && !hasClass(search, \"hidden\") && ev.newURL) {\n             // This block occurs when clicking on an element in the navbar while\n@@ -190,7 +201,7 @@ function getSearchElement() {\n             if (browserSupportsHistoryApi()) {\n                 history.replaceState(hash, \"\", \"?search=#\" + hash);\n             }\n-            var elem = document.getElementById(hash);\n+            elem = document.getElementById(hash);\n             if (elem) {\n                 elem.scrollIntoView();\n             }\n@@ -201,7 +212,7 @@ function getSearchElement() {\n             if (savedHash.length === 0) {\n                 return;\n             }\n-            var elem = document.getElementById(savedHash.slice(1)); // we remove the '#'\n+            elem = document.getElementById(savedHash.slice(1)); // we remove the '#'\n             if (!elem || !isHidden(elem)) {\n                 return;\n             }\n@@ -324,7 +335,7 @@ function getSearchElement() {\n     }\n \n     function displayHelp(display, ev, help) {\n-        var help = help ? help : getHelpElement();\n+        help = help ? help : getHelpElement();\n         if (display === true) {\n             if (hasClass(help, \"hidden\")) {\n                 ev.preventDefault();\n@@ -438,8 +449,8 @@ function getSearchElement() {\n \n                 set_fragment(cur_line_id);\n             }\n-        }\n-    })();\n+        };\n+    }());\n \n     document.addEventListener(\"click\", function(ev) {\n         if (hasClass(ev.target, \"collapse-toggle\")) {\n@@ -465,27 +476,30 @@ function getSearchElement() {\n         }\n     });\n \n-    var x = document.getElementsByClassName(\"version-selector\");\n-    if (x.length > 0) {\n-        x[0].onchange = function() {\n-            var i, match,\n-                url = document.location.href,\n-                stripped = \"\",\n-                len = rootPath.match(/\\.\\.\\//g).length + 1;\n+    (function() {\n+        var x = document.getElementsByClassName(\"version-selector\");\n+        if (x.length > 0) {\n+            x[0].onchange = function() {\n+                var i, match,\n+                    url = document.location.href,\n+                    stripped = \"\",\n+                    len = rootPath.match(/\\.\\.\\//g).length + 1;\n \n-            for (i = 0; i < len; ++i) {\n-                match = url.match(/\\/[^\\/]*$/);\n-                if (i < len - 1) {\n-                    stripped = match[0] + stripped;\n+                for (i = 0; i < len; ++i) {\n+                    match = url.match(/\\/[^\\/]*$/);\n+                    if (i < len - 1) {\n+                        stripped = match[0] + stripped;\n+                    }\n+                    url = url.substring(0, url.length - match[0].length);\n                 }\n-                url = url.substring(0, url.length - match[0].length);\n-            }\n \n-            url += \"/\" + document.getElementsByClassName(\"version-selector\")[0].value + stripped;\n+                var selectedVersion = document.getElementsByClassName(\"version-selector\")[0].value;\n+                url += \"/\" + selectedVersion + stripped;\n \n-            document.location.href = url;\n-        };\n-    }\n+                document.location.href = url;\n+            };\n+        }\n+    }());\n \n     /**\n      * A function to compute the Levenshtein distance between two strings\n@@ -522,7 +536,7 @@ function getSearchElement() {\n         return s1_len + s2_len;\n     }\n \n-    function initSearch(rawSearchIndex) {\n+    window.initSearch = function(rawSearchIndex) {\n         var MAX_LEV_DISTANCE = 3;\n         var MAX_RESULTS = 200;\n         var GENERICS_DATA = 1;\n@@ -602,7 +616,7 @@ function getSearchElement() {\n             function sortResults(results, isType) {\n                 var ar = [];\n                 for (var entry in results) {\n-                    if (results.hasOwnProperty(entry)) {\n+                    if (hasOwnProperty(results, entry)) {\n                         ar.push(results[entry]);\n                     }\n                 }\n@@ -1100,8 +1114,6 @@ function getSearchElement() {\n                     }\n                     fullId = generateId(ty);\n \n-                    // allow searching for void (no output) functions as well\n-                    var typeOutput = type.length > OUTPUT_DATA ? type[OUTPUT_DATA].name : \"\";\n                     returned = checkReturned(ty, output, true, NO_TYPE_FILTER);\n                     if (output.name === \"*\" || returned === true) {\n                         in_args = false;\n@@ -1164,7 +1176,6 @@ function getSearchElement() {\n                 var contains = paths.slice(0, paths.length > 1 ? paths.length - 1 : 1);\n \n                 var lev;\n-                var lev_distance;\n                 for (j = 0; j < nSearchWords; ++j) {\n                     ty = searchIndex[j];\n                     if (!ty || (filterCrates !== undefined && ty.crate !== filterCrates)) {\n@@ -1661,7 +1672,7 @@ function getSearchElement() {\n         function getFilterCrates() {\n             var elem = document.getElementById(\"crate-search\");\n \n-            if (elem && elem.value !== \"All crates\" && rawSearchIndex.hasOwnProperty(elem.value)) {\n+            if (elem && elem.value !== \"All crates\" && hasOwnProperty(rawSearchIndex, elem.value)) {\n                 return elem.value;\n             }\n             return undefined;\n@@ -1709,7 +1720,7 @@ function getSearchElement() {\n             var currentIndex = 0;\n \n             for (var crate in rawSearchIndex) {\n-                if (!rawSearchIndex.hasOwnProperty(crate)) { continue; }\n+                if (!hasOwnProperty(rawSearchIndex, crate)) { continue; }\n \n                 var crateSize = 0;\n \n@@ -1893,7 +1904,7 @@ function getSearchElement() {\n \n                 var crates = [];\n                 for (var crate in rawSearchIndex) {\n-                    if (!rawSearchIndex.hasOwnProperty(crate)) {\n+                    if (!hasOwnProperty(rawSearchIndex, crate)) {\n                         continue;\n                     }\n                     crates.push(crate);\n@@ -1917,12 +1928,11 @@ function getSearchElement() {\n                 sidebar.appendChild(div);\n             }\n         }\n-    }\n+    };\n \n-    window.initSearch = initSearch;\n \n     // delayed sidebar rendering.\n-    function initSidebarItems(items) {\n+    window.initSidebarItems = function(items) {\n         var sidebar = document.getElementsByClassName(\"sidebar-elems\")[0];\n         var current = window.sidebarCurrent;\n \n@@ -1984,9 +1994,7 @@ function getSearchElement() {\n         block(\"foreigntype\", \"Foreign Types\");\n         block(\"keyword\", \"Keywords\");\n         block(\"traitalias\", \"Trait Aliases\");\n-    }\n-\n-    window.initSidebarItems = initSidebarItems;\n+    };\n \n     window.register_implementors = function(imp) {\n         var implementors = document.getElementById(\"implementors-list\");\n@@ -2163,19 +2171,13 @@ function getSearchElement() {\n                         }\n                     }\n                     var ns = n.nextElementSibling;\n-                    while (true) {\n-                        if (ns && (\n-                                hasClass(ns, \"docblock\") ||\n-                                hasClass(ns, \"stability\"))) {\n-                            if (addOrRemove) {\n-                                addClass(ns, \"hidden-by-impl-hider\");\n-                            } else {\n-                                removeClass(ns, \"hidden-by-impl-hider\");\n-                            }\n-                            ns = ns.nextElementSibling;\n-                            continue;\n+                    while (ns && (hasClass(ns, \"docblock\") || hasClass(ns, \"stability\"))) {\n+                        if (addOrRemove) {\n+                            addClass(ns, \"hidden-by-impl-hider\");\n+                        } else {\n+                            removeClass(ns, \"hidden-by-impl-hider\");\n                         }\n-                        break;\n+                        ns = ns.nextElementSibling;\n                     }\n                 }\n             };\n@@ -2248,7 +2250,7 @@ function getSearchElement() {\n         }\n     }\n \n-    function collapser(e, collapse) {\n+    function collapser(pageId, e, collapse) {\n         // inherent impl ids are like \"impl\" or impl-<number>'.\n         // they will never be hidden by default.\n         var n = e.parentElement;\n@@ -2268,15 +2270,15 @@ function getSearchElement() {\n \n             if (impl_list !== null) {\n                 onEachLazy(impl_list.getElementsByClassName(\"collapse-toggle\"), function(e) {\n-                    collapser(e, collapse);\n+                    collapser(pageId, e, collapse);\n                 });\n             }\n \n             var blanket_list = document.getElementById(\"blanket-implementations-list\");\n \n             if (blanket_list !== null) {\n                 onEachLazy(blanket_list.getElementsByClassName(\"collapse-toggle\"), function(e) {\n-                    collapser(e, collapse);\n+                    collapser(pageId, e, collapse);\n                 });\n             }\n         }\n@@ -2300,103 +2302,7 @@ function getSearchElement() {\n         return toggle;\n     }\n \n-    var toggle = createSimpleToggle(false);\n-    var hideMethodDocs = getCurrentValue(\"rustdoc-auto-hide-method-docs\") === \"true\";\n-    var pageId = getPageId();\n-\n-    var func = function(e) {\n-        var next = e.nextElementSibling;\n-        if (!next) {\n-            return;\n-        }\n-        if (hasClass(next, \"docblock\") === true ||\n-            (hasClass(next, \"stability\") === true &&\n-             hasClass(next.nextElementSibling, \"docblock\") === true)) {\n-            var newToggle = toggle.cloneNode(true);\n-            insertAfter(newToggle, e.childNodes[e.childNodes.length - 1]);\n-            if (hideMethodDocs === true && hasClass(e, \"method\") === true) {\n-                collapseDocs(newToggle, \"hide\", pageId);\n-            }\n-        }\n-    };\n-\n-    var funcImpl = function(e) {\n-        var next = e.nextElementSibling;\n-        if (next && hasClass(next, \"docblock\")) {\n-            next = next.nextElementSibling;\n-        }\n-        if (!next) {\n-            return;\n-        }\n-        if (next.getElementsByClassName(\"method\").length > 0 && hasClass(e, \"impl\")) {\n-            insertAfter(toggle.cloneNode(true), e.childNodes[e.childNodes.length - 1]);\n-        }\n-    };\n-\n-    onEachLazy(document.getElementsByClassName(\"method\"), func);\n-    onEachLazy(document.getElementsByClassName(\"associatedconstant\"), func);\n-    onEachLazy(document.getElementsByClassName(\"impl\"), funcImpl);\n-    var impl_call = function() {};\n-    if (hideMethodDocs === true) {\n-        impl_call = function(e, newToggle, pageId) {\n-            if (e.id.match(/^impl(?:-\\d+)?$/) === null) {\n-                // Automatically minimize all non-inherent impls\n-                if (hasClass(e, \"impl\") === true) {\n-                    collapseDocs(newToggle, \"hide\", pageId);\n-                }\n-            }\n-        };\n-    }\n-    var newToggle = document.createElement(\"a\");\n-    newToggle.href = \"javascript:void(0)\";\n-    newToggle.className = \"collapse-toggle hidden-default collapsed\";\n-    newToggle.innerHTML = \"[<span class=\\\"inner\\\">\" + labelForToggleButton(true) +\n-                          \"</span>] Show hidden undocumented items\";\n-    function toggleClicked() {\n-        if (hasClass(this, \"collapsed\")) {\n-            removeClass(this, \"collapsed\");\n-            onEachLazy(this.parentNode.getElementsByClassName(\"hidden\"), function(x) {\n-                if (hasClass(x, \"content\") === false) {\n-                    removeClass(x, \"hidden\");\n-                    addClass(x, \"x\");\n-                }\n-            }, true);\n-            this.innerHTML = \"[<span class=\\\"inner\\\">\" + labelForToggleButton(false) +\n-                             \"</span>] Hide undocumented items\";\n-        } else {\n-            addClass(this, \"collapsed\");\n-            onEachLazy(this.parentNode.getElementsByClassName(\"x\"), function(x) {\n-                if (hasClass(x, \"content\") === false) {\n-                    addClass(x, \"hidden\");\n-                    removeClass(x, \"x\");\n-                }\n-            }, true);\n-            this.innerHTML = \"[<span class=\\\"inner\\\">\" + labelForToggleButton(true) +\n-                             \"</span>] Show hidden undocumented items\";\n-        }\n-    }\n-    onEachLazy(document.getElementsByClassName(\"impl-items\"), function(e) {\n-        onEachLazy(e.getElementsByClassName(\"associatedconstant\"), func);\n-        var hiddenElems = e.getElementsByClassName(\"hidden\");\n-        var needToggle = false;\n-\n-        var hlength = hiddenElems.length;\n-        for (var i = 0; i < hlength; ++i) {\n-            if (hasClass(hiddenElems[i], \"content\") === false &&\n-                hasClass(hiddenElems[i], \"docblock\") === false) {\n-                needToggle = true;\n-                break;\n-            }\n-        }\n-        if (needToggle === true) {\n-            var inner_toggle = newToggle.cloneNode(true);\n-            inner_toggle.onclick = toggleClicked;\n-            e.insertBefore(inner_toggle, e.firstChild);\n-            impl_call(e.previousSibling, inner_toggle, pageId);\n-        }\n-    });\n-\n-    function createToggle(otherMessage, fontSize, extraClass, show) {\n+    function createToggle(toggle, otherMessage, fontSize, extraClass, show) {\n         var span = document.createElement(\"span\");\n         span.className = \"toggle-label\";\n         if (show) {\n@@ -2431,97 +2337,197 @@ function getSearchElement() {\n         return wrapper;\n     }\n \n-    var currentType = document.getElementsByClassName(\"type-decl\")[0];\n-    var className = null;\n-    if (currentType) {\n-        currentType = currentType.getElementsByClassName(\"rust\")[0];\n-        if (currentType) {\n-            currentType.classList.forEach(function(item) {\n-                if (item !== \"main\") {\n-                    className = item;\n-                    return true;\n+    (function() {\n+        var toggle = createSimpleToggle(false);\n+        var hideMethodDocs = getCurrentValue(\"rustdoc-auto-hide-method-docs\") === \"true\";\n+        var pageId = getPageId();\n+\n+        var func = function(e) {\n+            var next = e.nextElementSibling;\n+            if (!next) {\n+                return;\n+            }\n+            if (hasClass(next, \"docblock\") === true ||\n+                (hasClass(next, \"stability\") === true &&\n+                 hasClass(next.nextElementSibling, \"docblock\") === true)) {\n+                var newToggle = toggle.cloneNode(true);\n+                insertAfter(newToggle, e.childNodes[e.childNodes.length - 1]);\n+                if (hideMethodDocs === true && hasClass(e, \"method\") === true) {\n+                    collapseDocs(newToggle, \"hide\", pageId);\n                 }\n-            });\n+            }\n+        };\n+\n+        var funcImpl = function(e) {\n+            var next = e.nextElementSibling;\n+            if (next && hasClass(next, \"docblock\")) {\n+                next = next.nextElementSibling;\n+            }\n+            if (!next) {\n+                return;\n+            }\n+            if (next.getElementsByClassName(\"method\").length > 0 && hasClass(e, \"impl\")) {\n+                insertAfter(toggle.cloneNode(true), e.childNodes[e.childNodes.length - 1]);\n+            }\n+        };\n+\n+        onEachLazy(document.getElementsByClassName(\"method\"), func);\n+        onEachLazy(document.getElementsByClassName(\"associatedconstant\"), func);\n+        onEachLazy(document.getElementsByClassName(\"impl\"), funcImpl);\n+        var impl_call = function() {};\n+        if (hideMethodDocs === true) {\n+            impl_call = function(e, newToggle) {\n+                if (e.id.match(/^impl(?:-\\d+)?$/) === null) {\n+                    // Automatically minimize all non-inherent impls\n+                    if (hasClass(e, \"impl\") === true) {\n+                        collapseDocs(newToggle, \"hide\", pageId);\n+                    }\n+                }\n+            };\n         }\n-    }\n-    var showItemDeclarations = getCurrentValue(\"rustdoc-auto-hide-\" + className);\n-    if (showItemDeclarations === null) {\n-        if (className === \"enum\" || className === \"macro\") {\n-            showItemDeclarations = \"false\";\n-        } else if (className === \"struct\" || className === \"union\" || className === \"trait\") {\n-            showItemDeclarations = \"true\";\n-        } else {\n-            // In case we found an unknown type, we just use the \"parent\" value.\n-            showItemDeclarations = getCurrentValue(\"rustdoc-auto-hide-declarations\");\n+        var newToggle = document.createElement(\"a\");\n+        newToggle.href = \"javascript:void(0)\";\n+        newToggle.className = \"collapse-toggle hidden-default collapsed\";\n+        newToggle.innerHTML = \"[<span class=\\\"inner\\\">\" + labelForToggleButton(true) +\n+                              \"</span>] Show hidden undocumented items\";\n+        function toggleClicked() {\n+            if (hasClass(this, \"collapsed\")) {\n+                removeClass(this, \"collapsed\");\n+                onEachLazy(this.parentNode.getElementsByClassName(\"hidden\"), function(x) {\n+                    if (hasClass(x, \"content\") === false) {\n+                        removeClass(x, \"hidden\");\n+                        addClass(x, \"x\");\n+                    }\n+                }, true);\n+                this.innerHTML = \"[<span class=\\\"inner\\\">\" + labelForToggleButton(false) +\n+                                 \"</span>] Hide undocumented items\";\n+            } else {\n+                addClass(this, \"collapsed\");\n+                onEachLazy(this.parentNode.getElementsByClassName(\"x\"), function(x) {\n+                    if (hasClass(x, \"content\") === false) {\n+                        addClass(x, \"hidden\");\n+                        removeClass(x, \"x\");\n+                    }\n+                }, true);\n+                this.innerHTML = \"[<span class=\\\"inner\\\">\" + labelForToggleButton(true) +\n+                                 \"</span>] Show hidden undocumented items\";\n+            }\n         }\n-    }\n-    showItemDeclarations = showItemDeclarations === \"false\";\n-    function buildToggleWrapper(e) {\n-        if (hasClass(e, \"autohide\")) {\n-            var wrap = e.previousElementSibling;\n-            if (wrap && hasClass(wrap, \"toggle-wrapper\")) {\n-                var inner_toggle = wrap.childNodes[0];\n-                var extra = e.childNodes[0].tagName === \"H3\";\n-\n-                e.style.display = \"none\";\n-                addClass(wrap, \"collapsed\");\n-                onEachLazy(inner_toggle.getElementsByClassName(\"inner\"), function(e) {\n-                    e.innerHTML = labelForToggleButton(true);\n-                });\n-                onEachLazy(inner_toggle.getElementsByClassName(\"toggle-label\"), function(e) {\n-                    e.style.display = \"inline-block\";\n-                    if (extra === true) {\n-                        i_e.innerHTML = \" Show \" + e.childNodes[0].innerHTML;\n+        onEachLazy(document.getElementsByClassName(\"impl-items\"), function(e) {\n+            onEachLazy(e.getElementsByClassName(\"associatedconstant\"), func);\n+            var hiddenElems = e.getElementsByClassName(\"hidden\");\n+            var needToggle = false;\n+\n+            var hlength = hiddenElems.length;\n+            for (var i = 0; i < hlength; ++i) {\n+                if (hasClass(hiddenElems[i], \"content\") === false &&\n+                    hasClass(hiddenElems[i], \"docblock\") === false) {\n+                    needToggle = true;\n+                    break;\n+                }\n+            }\n+            if (needToggle === true) {\n+                var inner_toggle = newToggle.cloneNode(true);\n+                inner_toggle.onclick = toggleClicked;\n+                e.insertBefore(inner_toggle, e.firstChild);\n+                impl_call(e.previousSibling, inner_toggle);\n+            }\n+        });\n+\n+        var currentType = document.getElementsByClassName(\"type-decl\")[0];\n+        var className = null;\n+        if (currentType) {\n+            currentType = currentType.getElementsByClassName(\"rust\")[0];\n+            if (currentType) {\n+                currentType.classList.forEach(function(item) {\n+                    if (item !== \"main\") {\n+                        className = item;\n+                        return true;\n                     }\n                 });\n             }\n         }\n-        if (e.parentNode.id === \"main\") {\n-            var otherMessage = \"\";\n-            var fontSize;\n-            var extraClass;\n-\n-            if (hasClass(e, \"type-decl\")) {\n-                fontSize = \"20px\";\n-                otherMessage = \"&nbsp;Show&nbsp;declaration\";\n-                if (showItemDeclarations === false) {\n-                    extraClass = \"collapsed\";\n-                }\n-            } else if (hasClass(e, \"sub-variant\")) {\n-                otherMessage = \"&nbsp;Show&nbsp;fields\";\n-            } else if (hasClass(e, \"non-exhaustive\")) {\n-                otherMessage = \"&nbsp;This&nbsp;\";\n-                if (hasClass(e, \"non-exhaustive-struct\")) {\n-                    otherMessage += \"struct\";\n-                } else if (hasClass(e, \"non-exhaustive-enum\")) {\n-                    otherMessage += \"enum\";\n-                } else if (hasClass(e, \"non-exhaustive-variant\")) {\n-                    otherMessage += \"enum variant\";\n-                } else if (hasClass(e, \"non-exhaustive-type\")) {\n-                    otherMessage += \"type\";\n-                }\n-                otherMessage += \"&nbsp;is&nbsp;marked&nbsp;as&nbsp;non-exhaustive\";\n-            } else if (hasClass(e.childNodes[0], \"impl-items\")) {\n-                extraClass = \"marg-left\";\n-            }\n-\n-            e.parentNode.insertBefore(\n-                createToggle(otherMessage,\n-                             fontSize,\n-                             extraClass,\n-                             hasClass(e, \"type-decl\") === false || showItemDeclarations === true),\n-                e);\n-            if (hasClass(e, \"type-decl\") === true && showItemDeclarations === true) {\n-                collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n-            }\n-            if (hasClass(e, \"non-exhaustive\") === true) {\n-                collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n+        var showItemDeclarations = getCurrentValue(\"rustdoc-auto-hide-\" + className);\n+        if (showItemDeclarations === null) {\n+            if (className === \"enum\" || className === \"macro\") {\n+                showItemDeclarations = \"false\";\n+            } else if (className === \"struct\" || className === \"union\" || className === \"trait\") {\n+                showItemDeclarations = \"true\";\n+            } else {\n+                // In case we found an unknown type, we just use the \"parent\" value.\n+                showItemDeclarations = getCurrentValue(\"rustdoc-auto-hide-declarations\");\n+            }\n+        }\n+        showItemDeclarations = showItemDeclarations === \"false\";\n+        function buildToggleWrapper(e) {\n+            if (hasClass(e, \"autohide\")) {\n+                var wrap = e.previousElementSibling;\n+                if (wrap && hasClass(wrap, \"toggle-wrapper\")) {\n+                    var inner_toggle = wrap.childNodes[0];\n+                    var extra = e.childNodes[0].tagName === \"H3\";\n+\n+                    e.style.display = \"none\";\n+                    addClass(wrap, \"collapsed\");\n+                    onEachLazy(inner_toggle.getElementsByClassName(\"inner\"), function(e) {\n+                        e.innerHTML = labelForToggleButton(true);\n+                    });\n+                    onEachLazy(inner_toggle.getElementsByClassName(\"toggle-label\"), function(e) {\n+                        e.style.display = \"inline-block\";\n+                        if (extra === true) {\n+                            e.innerHTML = \" Show \" + e.childNodes[0].innerHTML;\n+                        }\n+                    });\n+                }\n+            }\n+            if (e.parentNode.id === \"main\") {\n+                var otherMessage = \"\";\n+                var fontSize;\n+                var extraClass;\n+\n+                if (hasClass(e, \"type-decl\")) {\n+                    fontSize = \"20px\";\n+                    otherMessage = \"&nbsp;Show&nbsp;declaration\";\n+                    if (showItemDeclarations === false) {\n+                        extraClass = \"collapsed\";\n+                    }\n+                } else if (hasClass(e, \"sub-variant\")) {\n+                    otherMessage = \"&nbsp;Show&nbsp;fields\";\n+                } else if (hasClass(e, \"non-exhaustive\")) {\n+                    otherMessage = \"&nbsp;This&nbsp;\";\n+                    if (hasClass(e, \"non-exhaustive-struct\")) {\n+                        otherMessage += \"struct\";\n+                    } else if (hasClass(e, \"non-exhaustive-enum\")) {\n+                        otherMessage += \"enum\";\n+                    } else if (hasClass(e, \"non-exhaustive-variant\")) {\n+                        otherMessage += \"enum variant\";\n+                    } else if (hasClass(e, \"non-exhaustive-type\")) {\n+                        otherMessage += \"type\";\n+                    }\n+                    otherMessage += \"&nbsp;is&nbsp;marked&nbsp;as&nbsp;non-exhaustive\";\n+                } else if (hasClass(e.childNodes[0], \"impl-items\")) {\n+                    extraClass = \"marg-left\";\n+                }\n+\n+                e.parentNode.insertBefore(\n+                    createToggle(\n+                        toggle,\n+                        otherMessage,\n+                        fontSize,\n+                        extraClass,\n+                        hasClass(e, \"type-decl\") === false || showItemDeclarations === true),\n+                    e);\n+                if (hasClass(e, \"type-decl\") === true && showItemDeclarations === true) {\n+                    collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n+                }\n+                if (hasClass(e, \"non-exhaustive\") === true) {\n+                    collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n+                }\n             }\n         }\n-    }\n \n-    onEachLazy(document.getElementsByClassName(\"docblock\"), buildToggleWrapper);\n-    onEachLazy(document.getElementsByClassName(\"sub-variant\"), buildToggleWrapper);\n+        onEachLazy(document.getElementsByClassName(\"docblock\"), buildToggleWrapper);\n+        onEachLazy(document.getElementsByClassName(\"sub-variant\"), buildToggleWrapper);\n+    }());\n \n     function createToggleWrapper(tog) {\n         var span = document.createElement(\"span\");\n@@ -2536,56 +2542,60 @@ function getSearchElement() {\n         return wrapper;\n     }\n \n-    // To avoid checking on \"rustdoc-item-attributes\" value on every loop...\n-    var itemAttributesFunc = function() {};\n-    if (getCurrentValue(\"rustdoc-auto-hide-attributes\") !== \"false\") {\n-        itemAttributesFunc = function(x) {\n-            collapseDocs(x.previousSibling.childNodes[0], \"toggle\");\n-        };\n-    }\n-    var attributesToggle = createToggleWrapper(createSimpleToggle(false));\n-    onEachLazy(main.getElementsByClassName(\"attributes\"), function(i_e) {\n-        var attr_tog = attributesToggle.cloneNode(true);\n-        if (hasClass(i_e, \"top-attr\") === true) {\n-            addClass(attr_tog, \"top-attr\");\n-        }\n-        i_e.parentNode.insertBefore(attr_tog, i_e);\n-        itemAttributesFunc(i_e);\n-    });\n-\n-    // To avoid checking on \"rustdoc-line-numbers\" value on every loop...\n-    var lineNumbersFunc = function() {};\n-    if (getCurrentValue(\"rustdoc-line-numbers\") === \"true\") {\n-        lineNumbersFunc = function(x) {\n-            var count = x.textContent.split(\"\\n\").length;\n-            var elems = [];\n-            for (var i = 0; i < count; ++i) {\n-                elems.push(i + 1);\n-            }\n-            var node = document.createElement(\"pre\");\n-            addClass(node, \"line-number\");\n-            node.innerHTML = elems.join(\"\\n\");\n-            x.parentNode.insertBefore(node, x);\n-        };\n-    }\n-    onEachLazy(document.getElementsByClassName(\"rust-example-rendered\"), function(e) {\n-        if (hasClass(e, \"compile_fail\")) {\n-            e.addEventListener(\"mouseover\", function(event) {\n-                this.parentElement.previousElementSibling.childNodes[0].style.color = \"#f00\";\n-            });\n-            e.addEventListener(\"mouseout\", function(event) {\n-                this.parentElement.previousElementSibling.childNodes[0].style.color = \"\";\n-            });\n-        } else if (hasClass(e, \"ignore\")) {\n-            e.addEventListener(\"mouseover\", function(event) {\n-                this.parentElement.previousElementSibling.childNodes[0].style.color = \"#ff9200\";\n-            });\n-            e.addEventListener(\"mouseout\", function(event) {\n-                this.parentElement.previousElementSibling.childNodes[0].style.color = \"\";\n-            });\n+    (function() {\n+        // To avoid checking on \"rustdoc-item-attributes\" value on every loop...\n+        var itemAttributesFunc = function() {};\n+        if (getCurrentValue(\"rustdoc-auto-hide-attributes\") !== \"false\") {\n+            itemAttributesFunc = function(x) {\n+                collapseDocs(x.previousSibling.childNodes[0], \"toggle\");\n+            };\n         }\n-        lineNumbersFunc(e);\n-    });\n+        var attributesToggle = createToggleWrapper(createSimpleToggle(false));\n+        onEachLazy(main.getElementsByClassName(\"attributes\"), function(i_e) {\n+            var attr_tog = attributesToggle.cloneNode(true);\n+            if (hasClass(i_e, \"top-attr\") === true) {\n+                addClass(attr_tog, \"top-attr\");\n+            }\n+            i_e.parentNode.insertBefore(attr_tog, i_e);\n+            itemAttributesFunc(i_e);\n+        });\n+    }());\n+\n+    (function() {\n+        // To avoid checking on \"rustdoc-line-numbers\" value on every loop...\n+        var lineNumbersFunc = function() {};\n+        if (getCurrentValue(\"rustdoc-line-numbers\") === \"true\") {\n+            lineNumbersFunc = function(x) {\n+                var count = x.textContent.split(\"\\n\").length;\n+                var elems = [];\n+                for (var i = 0; i < count; ++i) {\n+                    elems.push(i + 1);\n+                }\n+                var node = document.createElement(\"pre\");\n+                addClass(node, \"line-number\");\n+                node.innerHTML = elems.join(\"\\n\");\n+                x.parentNode.insertBefore(node, x);\n+            };\n+        }\n+        onEachLazy(document.getElementsByClassName(\"rust-example-rendered\"), function(e) {\n+            if (hasClass(e, \"compile_fail\")) {\n+                e.addEventListener(\"mouseover\", function() {\n+                    this.parentElement.previousElementSibling.childNodes[0].style.color = \"#f00\";\n+                });\n+                e.addEventListener(\"mouseout\", function() {\n+                    this.parentElement.previousElementSibling.childNodes[0].style.color = \"\";\n+                });\n+            } else if (hasClass(e, \"ignore\")) {\n+                e.addEventListener(\"mouseover\", function() {\n+                    this.parentElement.previousElementSibling.childNodes[0].style.color = \"#ff9200\";\n+                });\n+                e.addEventListener(\"mouseout\", function() {\n+                    this.parentElement.previousElementSibling.childNodes[0].style.color = \"\";\n+                });\n+            }\n+            lineNumbersFunc(e);\n+        });\n+    }());\n \n     // In the search display, allows to switch between tabs.\n     function printTab(nb) {\n@@ -2678,7 +2688,7 @@ function getSearchElement() {\n         });\n     }\n \n-    function addSearchOptions(crates) {\n+    window.addSearchOptions = function(crates) {\n         var elem = document.getElementById(\"crate-search\");\n \n         if (!elem) {\n@@ -2687,7 +2697,7 @@ function getSearchElement() {\n         var crates_text = [];\n         if (Object.keys(crates).length > 1) {\n             for (var crate in crates) {\n-                if (crates.hasOwnProperty(crate)) {\n+                if (hasOwnProperty(crates, crate)) {\n                     crates_text.push(crate);\n                 }\n             }\n@@ -2722,10 +2732,8 @@ function getSearchElement() {\n \n         if (search_input) {\n             search_input.removeAttribute('disabled');\n-        };\n-    }\n-\n-    window.addSearchOptions = addSearchOptions;\n+        }\n+    };\n \n     function buildHelperPopup() {\n         var popup = document.createElement(\"aside\");\n@@ -2778,16 +2786,6 @@ function getSearchElement() {\n     buildHelperPopup();\n }());\n \n-// Sets the focus on the search bar at the top of the page\n-function focusSearchBar() {\n-    getSearchInput().focus();\n-}\n-\n-// Removes the focus from the search bar\n-function defocusSearchBar() {\n-    getSearchInput().blur();\n-}\n-\n // This is required in firefox. Explanations: when going back in the history, firefox doesn't re-run\n // the JS, therefore preventing rustdoc from setting a few things required to be able to reload the\n // previous search results (if you navigated to a search result with the keyboard, pressed enter on"}, {"sha": "427a74c0c87fa3747d3fad992fbb3ffcdea009e2", "filename": "src/librustdoc/html/static/settings.js", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.js?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -1,3 +1,6 @@\n+// Local js definitions:\n+/* global getCurrentValue, updateLocalStorage */\n+\n (function () {\n     function changeSetting(settingName, isEnabled) {\n         updateLocalStorage('rustdoc-' + settingName, isEnabled);"}, {"sha": "cfbfe6675f52bc62e58bf459e884d5c899d2cc6c", "filename": "src/librustdoc/html/static/source-script.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -1,5 +1,5 @@\n // From rust:\n-/* global sourcesIndex */\n+/* global search, sourcesIndex */\n \n // Local js definitions:\n /* global addClass, getCurrentValue, hasClass, removeClass, updateLocalStorage */"}, {"sha": "0a2fae274fa87ade2260a0cb25e0d3b66e8fc291", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -27,14 +27,15 @@ function removeClass(elem, className) {\n function onEach(arr, func, reversed) {\n     if (arr && arr.length > 0 && func) {\n         var length = arr.length;\n+        var i;\n         if (reversed !== true) {\n-            for (var i = 0; i < length; ++i) {\n+            for (i = 0; i < length; ++i) {\n                 if (func(arr[i]) === true) {\n                     return true;\n                 }\n             }\n         } else {\n-            for (var i = length - 1; i >= 0; --i) {\n+            for (i = length - 1; i >= 0; --i) {\n                 if (func(arr[i]) === true) {\n                     return true;\n                 }\n@@ -51,6 +52,10 @@ function onEachLazy(lazyArray, func, reversed) {\n         reversed);\n }\n \n+function hasOwnProperty(obj, property) {\n+    return Object.prototype.hasOwnProperty.call(obj, property);\n+}\n+\n function usableLocalStorage() {\n     // Check if the browser supports localStorage at all:\n     if (typeof Storage === \"undefined\") {"}, {"sha": "b20d614b3036bbe620d873ff5dedcc311d0d11ff", "filename": "src/test/ui/issues/issue-27060-rpass.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Fissues%2Fissue-27060-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Fissues%2Fissue-27060-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27060-rpass.rs?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -7,19 +7,10 @@ pub struct Good {\n     aligned: [u8; 32],\n }\n \n-#[repr(packed)]\n-pub struct JustArray {\n-    array: [u32]\n-}\n-\n // kill this test when that turns to a hard error\n #[allow(safe_packed_borrows)]\n fn main() {\n-    let good = Good {\n-        data: &0,\n-        data2: [&0, &0],\n-        aligned: [0; 32]\n-    };\n+    let good = Good { data: &0, data2: [&0, &0], aligned: [0; 32] };\n \n     unsafe {\n         let _ = &good.data; // ok"}, {"sha": "78f2022ed38df6c8bf6143fb774a96b471a12eee", "filename": "src/test/ui/issues/issue-27060.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Fissues%2Fissue-27060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Fissues%2Fissue-27060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27060.rs?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -5,11 +5,6 @@ pub struct Good {\n     aligned: [u8; 32],\n }\n \n-#[repr(packed)]\n-pub struct JustArray {\n-    array: [u32]\n-}\n-\n #[deny(safe_packed_borrows)]\n fn main() {\n     let good = Good {"}, {"sha": "d14ae4d41d5c52d6526acfd4b8bd835542ec0d05", "filename": "src/test/ui/issues/issue-27060.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Fissues%2Fissue-27060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Fissues%2Fissue-27060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27060.stderr?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -1,11 +1,11 @@\n error: borrow of packed field is unsafe and requires unsafe function or block (error E0133)\n-  --> $DIR/issue-27060.rs:26:13\n+  --> $DIR/issue-27060.rs:21:13\n    |\n LL |     let _ = &good.data;\n    |             ^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-27060.rs:13:8\n+  --> $DIR/issue-27060.rs:8:8\n    |\n LL | #[deny(safe_packed_borrows)]\n    |        ^^^^^^^^^^^^^^^^^^^\n@@ -14,7 +14,7 @@ LL | #[deny(safe_packed_borrows)]\n    = note: fields of packed structs might be misaligned: dereferencing a misaligned pointer or even just creating a misaligned reference is undefined behavior\n \n error: borrow of packed field is unsafe and requires unsafe function or block (error E0133)\n-  --> $DIR/issue-27060.rs:28:13\n+  --> $DIR/issue-27060.rs:23:13\n    |\n LL |     let _ = &good.data2[0];\n    |             ^^^^^^^^^^^^^^"}, {"sha": "de883b61111ce5f8d3d962cbc4771e77199e947c", "filename": "src/test/ui/label/label_break_value_desugared_break.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_desugared_break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_desugared_break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_desugared_break.rs?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: --edition 2018\n+#![feature(label_break_value, try_blocks)]\n+\n+// run-pass\n+fn main() {\n+    let _: Result<(), ()> = try {\n+        'foo: {\n+            Err(())?;\n+            break 'foo;\n+        }\n+    };\n+}"}, {"sha": "1d9f4c3db2eb508adc184a3d012b1b191430b1ae", "filename": "src/test/ui/lint/unaligned_references.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Flint%2Funaligned_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Flint%2Funaligned_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references.rs?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -0,0 +1,22 @@\n+#![deny(unaligned_references)]\n+\n+#[repr(packed)]\n+pub struct Good {\n+    data: &'static u32,\n+    data2: [&'static u32; 2],\n+    aligned: [u8; 32],\n+}\n+\n+fn main() {\n+    unsafe {\n+        let good = Good { data: &0, data2: [&0, &0], aligned: [0; 32] };\n+\n+        let _ = &good.data; //~ ERROR reference to packed field\n+        let _ = &good.data as *const _; //~ ERROR reference to packed field\n+        let _: *const _ = &good.data; //~ ERROR reference to packed field\n+        let _ = &good.data2[0]; //~ ERROR reference to packed field\n+        let _ = &*good.data; // ok, behind a pointer\n+        let _ = &good.aligned; // ok, has align 1\n+        let _ = &good.aligned[2]; // ok, has align 1\n+    }\n+}"}, {"sha": "0c594cdb30a3ce1cae9b4908acaef9ce46c46987", "filename": "src/test/ui/lint/unaligned_references.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -0,0 +1,39 @@\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:14:17\n+   |\n+LL |         let _ = &good.data;\n+   |                 ^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unaligned_references.rs:1:9\n+   |\n+LL | #![deny(unaligned_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:15:17\n+   |\n+LL |         let _ = &good.data as *const _;\n+   |                 ^^^^^^^^^^\n+   |\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:16:27\n+   |\n+LL |         let _: *const _ = &good.data;\n+   |                           ^^^^^^^^^^\n+   |\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:17:17\n+   |\n+LL |         let _ = &good.data2[0];\n+   |                 ^^^^^^^^^^^^^^\n+   |\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "d9d85ee913266576d462962d865c93b87503b380", "filename": "src/test/ui/unsafe/unsafe-unstable-const-fn.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.rs?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -0,0 +1,13 @@\n+#![stable(feature = \"foo\", since = \"1.33.0\")]\n+#![feature(staged_api)]\n+#![feature(const_compare_raw_pointers)]\n+#![feature(const_fn)]\n+\n+#[stable(feature = \"foo\", since = \"1.33.0\")]\n+#[rustc_const_unstable(feature = \"const_foo\", issue = \"none\")]\n+const fn unstable(a: *const i32, b: *const i32) -> bool {\n+    a == b\n+    //~^ pointer operation is unsafe\n+}\n+\n+fn main() {}"}, {"sha": "d8f3737c8f541958c9354ba11645c10e4133f080", "filename": "src/test/ui/unsafe/unsafe-unstable-const-fn.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.stderr?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: pointer operation is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-unstable-const-fn.rs:9:5\n+   |\n+LL |     a == b\n+   |     ^^^^^^ pointer operation\n+   |\n+   = note: operations on pointers in constants\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "1d3824e7a44f69d27f0db29e04a9ffdd5e95a0b3", "filename": "src/test/ui/unused-crate-deps/auxiliary/bar.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Fauxiliary%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Fauxiliary%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fauxiliary%2Fbar.rs?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -0,0 +1 @@\n+pub const BAR: &str = \"bar\";"}, {"sha": "0ef03eb9edf0f9444030eef105d1697712672817", "filename": "src/test/ui/unused-crate-deps/auxiliary/foo.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Fauxiliary%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Fauxiliary%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fauxiliary%2Ffoo.rs?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -0,0 +1,5 @@\n+// edition:2018\n+// aux-crate:bar=bar.rs\n+\n+pub const FOO: &str = \"foo\";\n+pub use bar::BAR;"}, {"sha": "c1545dca99f57b3a0fa9f891c3281dc16eaa1577", "filename": "src/test/ui/unused-crate-deps/libfib.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Flibfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Flibfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Flibfib.rs?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -0,0 +1,21 @@\n+// Test warnings for a library crate\n+\n+// check-pass\n+// aux-crate:bar=bar.rs\n+// compile-flags:--crate-type lib -Wunused-crate-dependencies\n+\n+pub fn fib(n: u32) -> Vec<u32> {\n+//~^ WARNING external crate `bar` unused in\n+let mut prev = 0;\n+    let mut cur = 1;\n+    let mut v = vec![];\n+\n+    for _ in 0..n {\n+        v.push(prev);\n+        let n = prev + cur;\n+        prev = cur;\n+        cur = n;\n+    }\n+\n+    v\n+}"}, {"sha": "15833126bd6201ddda75e3b529eb26f8dc08473c", "filename": "src/test/ui/unused-crate-deps/libfib.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Flibfib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Flibfib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Flibfib.stderr?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -0,0 +1,10 @@\n+warning: external crate `bar` unused in `libfib`: remove the dependency or add `use bar as _;`\n+  --> $DIR/libfib.rs:7:1\n+   |\n+LL | pub fn fib(n: u32) -> Vec<u32> {\n+   | ^\n+   |\n+   = note: requested on the command line with `-W unused-crate-dependencies`\n+\n+warning: 1 warning emitted\n+"}, {"sha": "8904d04bc14f75ba1c1a084dd89195b2b92215f3", "filename": "src/test/ui/unused-crate-deps/suppress.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Fsuppress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Fsuppress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fsuppress.rs?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -0,0 +1,11 @@\n+// Suppress by using crate\n+\n+// edition:2018\n+// check-pass\n+// aux-crate:bar=bar.rs\n+\n+#![warn(unused_crate_dependencies)]\n+\n+use bar as _;\n+\n+fn main() {}"}, {"sha": "1b7cb9b970e4908d0ca713e952b4e808ecd55975", "filename": "src/test/ui/unused-crate-deps/unused-aliases.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Funused-aliases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Funused-aliases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Funused-aliases.rs?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -0,0 +1,13 @@\n+// Warn about unused aliased for the crate\n+\n+// edition:2018\n+// check-pass\n+// aux-crate:bar=bar.rs\n+// aux-crate:barbar=bar.rs\n+\n+#![warn(unused_crate_dependencies)]\n+//~^ WARNING external crate `barbar` unused in\n+\n+use bar as _;\n+\n+fn main() {}"}, {"sha": "c8c6c4507b0c51427136d656ba9de8cdbdcd3a43", "filename": "src/test/ui/unused-crate-deps/unused-aliases.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Funused-aliases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Funused-aliases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Funused-aliases.stderr?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -0,0 +1,14 @@\n+warning: external crate `barbar` unused in `unused_aliases`: remove the dependency or add `use barbar as _;`\n+  --> $DIR/unused-aliases.rs:8:1\n+   |\n+LL | #![warn(unused_crate_dependencies)]\n+   | ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unused-aliases.rs:8:9\n+   |\n+LL | #![warn(unused_crate_dependencies)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: 1 warning emitted\n+"}, {"sha": "f15c87fa0b2499647edd82dcd7879dd7b0716863", "filename": "src/test/ui/unused-crate-deps/use_extern_crate_2015.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Fuse_extern_crate_2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Fuse_extern_crate_2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fuse_extern_crate_2015.rs?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -0,0 +1,13 @@\n+// Suppress by using crate\n+\n+// edition:2015\n+// check-pass\n+// aux-crate:bar=bar.rs\n+\n+#![warn(unused_crate_dependencies)]\n+\n+extern crate bar;\n+\n+fn main() {\n+    println!(\"bar {}\", bar::BAR);\n+}"}, {"sha": "1acb307ab21b3714fd35f4cb22fa6b3964fbe94c", "filename": "src/test/ui/unused-crate-deps/warn-attr.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-attr.rs?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -0,0 +1,10 @@\n+// Check for unused crate dep, no path\n+\n+// edition:2018\n+// check-pass\n+// aux-crate:bar=bar.rs\n+\n+#![warn(unused_crate_dependencies)]\n+//~^ WARNING external crate `bar` unused in\n+\n+fn main() {}"}, {"sha": "0d38315704b11fb25e6bc7be22774c0714d4f4d4", "filename": "src/test/ui/unused-crate-deps/warn-attr.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-attr.stderr?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -0,0 +1,14 @@\n+warning: external crate `bar` unused in `warn_attr`: remove the dependency or add `use bar as _;`\n+  --> $DIR/warn-attr.rs:7:1\n+   |\n+LL | #![warn(unused_crate_dependencies)]\n+   | ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/warn-attr.rs:7:9\n+   |\n+LL | #![warn(unused_crate_dependencies)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: 1 warning emitted\n+"}, {"sha": "c609529a6c6fbea18c446692a4ac6709081b5e5e", "filename": "src/test/ui/unused-crate-deps/warn-cmdline-static.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline-static.rs?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -0,0 +1,10 @@\n+// Check for unused crate dep, no path\n+\n+// edition:2018\n+// check-pass\n+// compile-flags: -Wunused-crate-dependencies\n+// aux-crate:bar=bar.rs\n+// no-prefer-dynamic\n+\n+fn main() {}\n+//~^ WARNING external crate `bar` unused in"}, {"sha": "65956461d643928fa5a319c7ae533f3dc7e15ded", "filename": "src/test/ui/unused-crate-deps/warn-cmdline-static.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline-static.stderr?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -0,0 +1,10 @@\n+warning: external crate `bar` unused in `warn_cmdline_static`: remove the dependency or add `use bar as _;`\n+  --> $DIR/warn-cmdline-static.rs:9:1\n+   |\n+LL | fn main() {}\n+   | ^\n+   |\n+   = note: requested on the command line with `-W unused-crate-dependencies`\n+\n+warning: 1 warning emitted\n+"}, {"sha": "3bae61c3ea2ccd2c67a247c3cbc04a85de0b8d1f", "filename": "src/test/ui/unused-crate-deps/warn-cmdline.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline.rs?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -0,0 +1,9 @@\n+// Check for unused crate dep, no path\n+\n+// edition:2018\n+// check-pass\n+// compile-flags: -Wunused-crate-dependencies\n+// aux-crate:bar=bar.rs\n+\n+fn main() {}\n+//~^ WARNING external crate `bar` unused in"}, {"sha": "ea675ba9a1eb184560f8379ea4571e2d2b1e9ec4", "filename": "src/test/ui/unused-crate-deps/warn-cmdline.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline.stderr?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -0,0 +1,10 @@\n+warning: external crate `bar` unused in `warn_cmdline`: remove the dependency or add `use bar as _;`\n+  --> $DIR/warn-cmdline.rs:8:1\n+   |\n+LL | fn main() {}\n+   | ^\n+   |\n+   = note: requested on the command line with `-W unused-crate-dependencies`\n+\n+warning: 1 warning emitted\n+"}, {"sha": "163571bc5b9882906f3ce68924d8707f461f0b77", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/e5335592e78354e33d798d20c04bcd677c1df62d/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=e5335592e78354e33d798d20c04bcd677c1df62d", "patch": "@@ -241,7 +241,7 @@ function loadMainJsAndIndex(mainJs, searchIndex, storageJs, crate) {\n     ALIASES = {};\n     finalJS += 'window = { \"currentCrate\": \"' + crate + '\" };\\n';\n     finalJS += 'var rootPath = \"../\";\\n';\n-    finalJS += loadThings([\"onEach\"], 'function', extractFunction, storageJs);\n+    finalJS += loadThings([\"hasOwnProperty\", \"onEach\"], 'function', extractFunction, storageJs);\n     finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n     finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);\n     finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);"}]}