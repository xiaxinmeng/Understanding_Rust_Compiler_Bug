{"sha": "23b0776a594a0728a7706521c5193245de2ea823", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYjA3NzZhNTk0YTA3MjhhNzcwNjUyMWM1MTkzMjQ1ZGUyZWE4MjM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-26T20:57:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-26T20:57:31Z"}, "message": "Rollup merge of #73529 - pickfire:liballoc-specfromelem-i8, r=cuviper\n\nAdd liballoc impl SpecFromElem for i8\n\nSpeedup vec![1_i8; N] for non-zero element.\n\nBefore\ntest do_bench_from_elem_i8        ... bench:         130 ns/iter (+/- 7) = 61 MB/s\ntest do_bench_from_elem_u8        ... bench:         121 ns/iter (+/- 4) = 66 MB/s\nAfter\ntest do_bench_from_elem_i8        ... bench:         123 ns/iter (+/- 7) = 65 MB/s\ntest do_bench_from_elem_u8        ... bench:         121 ns/iter (+/- 5) = 66 MB/s\n\nNo speed difference if element is already zero.\n\n```rust\n#[bench]\nfn do_bench_from_elem_i8(b: &mut Bencher) {\n    b.bytes = 8 as u64;\n    b.iter(|| {\n        let dst = ve::vec![10_i8; 100];\n        assert_eq!(dst.len(), 100);\n        assert!(dst.iter().all(|x| *x == 10));\n    })\n}\n```\n\nAs suggested by @cuviper\nhttps://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/SpecForElem.20for.20other.20integers\n\nr? @cuviper\nCC @joshtriplett\n\nEdit: Wow, I just realized both reviewers are Josh.", "tree": {"sha": "06e88616646e49ae05a600232443f342088a937c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06e88616646e49ae05a600232443f342088a937c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23b0776a594a0728a7706521c5193245de2ea823", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe9mE7CRBK7hj4Ov3rIwAAdHIIAHNK20Ulte00sdLyAedoJ/bk\njYVyC91QiImrL0IZEOpG/bWrBktMcONKTlPfPSjwcKCyBwBnWJocdy1+uIV/7UG0\nNtu0hj5xHfR1oOwJn3NhhgPnIouomOriQpIXaNR7/d4wiSZ9IMuYMHe7fGpR9juz\nMxDMkDxD2qbHILWV8MweUd5lW3L6F4U4tTCTnN1KtTUS6kqQBY8HVj8IILL8W+cC\n+nDWog49ybbjNcaVPkAVJJy3s1OZrCB5B2UdYcUiKw2p8Wsikis1dmbLqJhZnrz4\nn5qKmMV90pEUQiDit+vC56N8pz7IVycLhejbzunl0eBFBdIrSWOq31e88IHgpz4=\n=HBVr\n-----END PGP SIGNATURE-----\n", "payload": "tree 06e88616646e49ae05a600232443f342088a937c\nparent f13d09abe1d7a02007ac8591dc409c8d820b903a\nparent f66bcc5459d4a720b31eaeac3149f19799118d72\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593205051 -0700\ncommitter GitHub <noreply@github.com> 1593205051 -0700\n\nRollup merge of #73529 - pickfire:liballoc-specfromelem-i8, r=cuviper\n\nAdd liballoc impl SpecFromElem for i8\n\nSpeedup vec![1_i8; N] for non-zero element.\n\nBefore\ntest do_bench_from_elem_i8        ... bench:         130 ns/iter (+/- 7) = 61 MB/s\ntest do_bench_from_elem_u8        ... bench:         121 ns/iter (+/- 4) = 66 MB/s\nAfter\ntest do_bench_from_elem_i8        ... bench:         123 ns/iter (+/- 7) = 65 MB/s\ntest do_bench_from_elem_u8        ... bench:         121 ns/iter (+/- 5) = 66 MB/s\n\nNo speed difference if element is already zero.\n\n```rust\n#[bench]\nfn do_bench_from_elem_i8(b: &mut Bencher) {\n    b.bytes = 8 as u64;\n    b.iter(|| {\n        let dst = ve::vec![10_i8; 100];\n        assert_eq!(dst.len(), 100);\n        assert!(dst.iter().all(|x| *x == 10));\n    })\n}\n```\n\nAs suggested by @cuviper\nhttps://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/SpecForElem.20for.20other.20integers\n\nr? @cuviper\nCC @joshtriplett\n\nEdit: Wow, I just realized both reviewers are Josh.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23b0776a594a0728a7706521c5193245de2ea823", "html_url": "https://github.com/rust-lang/rust/commit/23b0776a594a0728a7706521c5193245de2ea823", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23b0776a594a0728a7706521c5193245de2ea823/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f13d09abe1d7a02007ac8591dc409c8d820b903a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f13d09abe1d7a02007ac8591dc409c8d820b903a", "html_url": "https://github.com/rust-lang/rust/commit/f13d09abe1d7a02007ac8591dc409c8d820b903a"}, {"sha": "f66bcc5459d4a720b31eaeac3149f19799118d72", "url": "https://api.github.com/repos/rust-lang/rust/commits/f66bcc5459d4a720b31eaeac3149f19799118d72", "html_url": "https://github.com/rust-lang/rust/commit/f66bcc5459d4a720b31eaeac3149f19799118d72"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "c2cf64393adf8db1a1b62438629a9eac8521a920", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/23b0776a594a0728a7706521c5193245de2ea823/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b0776a594a0728a7706521c5193245de2ea823/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=23b0776a594a0728a7706521c5193245de2ea823", "patch": "@@ -1801,6 +1801,21 @@ impl<T: Clone> SpecFromElem for T {\n     }\n }\n \n+impl SpecFromElem for i8 {\n+    #[inline]\n+    fn from_elem(elem: i8, n: usize) -> Vec<i8> {\n+        if elem == 0 {\n+            return Vec { buf: RawVec::with_capacity_zeroed(n), len: n };\n+        }\n+        unsafe {\n+            let mut v = Vec::with_capacity(n);\n+            ptr::write_bytes(v.as_mut_ptr(), elem as u8, n);\n+            v.set_len(n);\n+            v\n+        }\n+    }\n+}\n+\n impl SpecFromElem for u8 {\n     #[inline]\n     fn from_elem(elem: u8, n: usize) -> Vec<u8> {\n@@ -1845,7 +1860,6 @@ macro_rules! impl_is_zero {\n     };\n }\n \n-impl_is_zero!(i8, |x| x == 0);\n impl_is_zero!(i16, |x| x == 0);\n impl_is_zero!(i32, |x| x == 0);\n impl_is_zero!(i64, |x| x == 0);"}]}