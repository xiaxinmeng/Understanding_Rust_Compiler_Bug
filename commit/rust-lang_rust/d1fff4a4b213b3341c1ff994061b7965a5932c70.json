{"sha": "d1fff4a4b213b3341c1ff994061b7965a5932c70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZmZmNGE0YjIxM2IzMzQxYzFmZjk5NDA2MWI3OTY1YTU5MzJjNzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-05T09:31:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-05T09:31:36Z"}, "message": "Auto merge of #66109 - pietroalbini:rollup-2npidna, r=pietroalbini\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #65136 (Update codegen option documentation.)\n - #65574 (docs: improve disclaimer regarding LinkedList)\n - #65720 (Add FFI bindings for LLVM's Module::getInstructionCount())\n - #65905 ([doc] fixes for unix/vxworks `OpenOptionsExt::mode`)\n - #65962 (Fix logic in example.)\n - #66019 (Improved std::iter::Chain documentation)\n - #66038 (doc(str): show example of chars().count() under len())\n - #66042 (Suggest correct code when encountering an incorrect trait bound referencing the current trait)\n - #66073 (Do not needlessly write-lock)\n - #66096 (Add a failing UI test for multiple loops of all kinds in a `const`)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "092a1579b1c3ddeccf48280bbf1d0a0294eaa716", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/092a1579b1c3ddeccf48280bbf1d0a0294eaa716"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1fff4a4b213b3341c1ff994061b7965a5932c70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1fff4a4b213b3341c1ff994061b7965a5932c70", "html_url": "https://github.com/rust-lang/rust/commit/d1fff4a4b213b3341c1ff994061b7965a5932c70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1fff4a4b213b3341c1ff994061b7965a5932c70/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e4da3caadc61fab2cfcffebcbfdd72fbcee62b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e4da3caadc61fab2cfcffebcbfdd72fbcee62b7", "html_url": "https://github.com/rust-lang/rust/commit/2e4da3caadc61fab2cfcffebcbfdd72fbcee62b7"}, {"sha": "1ffa93e5f8229c34286f50d1d79dd410324a7d9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ffa93e5f8229c34286f50d1d79dd410324a7d9d", "html_url": "https://github.com/rust-lang/rust/commit/1ffa93e5f8229c34286f50d1d79dd410324a7d9d"}], "stats": {"total": 562, "additions": 468, "deletions": 94}, "files": [{"sha": "70c7acccd3638b457d7aaf08c8b74feedc0bd75d", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 186, "deletions": 37, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=d1fff4a4b213b3341c1ff994061b7965a5932c70", "patch": "@@ -9,9 +9,12 @@ This option is deprecated and does nothing.\n \n ## linker\n \n-This flag lets you control which linker `rustc` invokes to link your code.\n+This flag lets you control which linker `rustc` invokes to link your code. It\n+takes a path to the linker executable. If this flag is not specified, the\n+linker will be inferred based on the target. See also the\n+[linker-flavor](#linker-flavor) flag for another way to specify the linker.\n \n-## link-arg=val\n+## link-arg\n \n This flag lets you append a single extra argument to the linker invocation.\n \n@@ -25,9 +28,27 @@ options should be separated by spaces.\n ## linker-flavor\n \n This flag lets you control the linker flavor used by `rustc`. If a linker is given with the\n-`-C linker` flag described above then the linker flavor is inferred from the value provided. If no\n+[`-C linker` flag](#linker), then the linker flavor is inferred from the value provided. If no\n linker is given then the linker flavor is used to determine the linker to use. Every `rustc` target\n-defaults to some linker flavor.\n+defaults to some linker flavor. Valid options are:\n+\n+* `em`: Uses [Emscripten `emcc`](https://emscripten.org/docs/tools_reference/emcc.html).\n+* `gcc`: Uses the `cc` executable, which is typically gcc or clang on many systems.\n+* `ld`: Uses the `ld` executable.\n+* `msvc`: Uses the `link.exe` executable from Microsoft Visual Studio MSVC.\n+* `ptx-linker`: Uses\n+  [`rust-ptx-linker`](https://github.com/denzp/rust-ptx-linker) for Nvidia\n+  NVPTX GPGPU support.\n+* `wasm-ld`: Uses the [`wasm-ld`](https://lld.llvm.org/WebAssembly.html)\n+  executable, a port of LLVM `lld` for WebAssembly.\n+* `ld64.lld`: Uses the LLVM `lld` executable with the [`-flavor darwin`\n+  flag][lld-flavor] for Apple's `ld`.\n+* `ld.lld`: Uses the LLVM `lld` executable with the [`-flavor gnu`\n+  flag][lld-flavor] for GNU binutils' `ld`.\n+* `lld-link`: Uses the LLVM `lld` executable with the [`-flavor link`\n+  flag][lld-flavor] for Microsoft's `link.exe`.\n+\n+[lld-flavor]: https://lld.llvm.org/Driver.html\n \n ## link-dead-code\n \n@@ -39,42 +60,92 @@ metrics.\n ## lto\n \n This flag instructs LLVM to use [link time\n-optimizations](https://llvm.org/docs/LinkTimeOptimization.html).\n+optimizations](https://llvm.org/docs/LinkTimeOptimization.html) to produce\n+better optimized code, using whole-program analysis, at the cost of longer\n+linking time.\n \n-It takes one of two values, `thin` and `fat`. 'thin' LTO [is a new feature of\n-LLVM](http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html),\n-'fat' referring to the classic version of LTO.\n+This flag may take one of the following values:\n+\n+* `y`, `yes`, `on`, `fat`, or no value: Performs \"fat\" LTO which attempts to\n+  perform optimizations across all crates within the dependency graph.\n+* `n`, `no`, `off`: Disables LTO.\n+* `thin`: Performs [\"thin\"\n+  LTO](http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html).\n+  This is similar to \"fat\", but takes substantially less time to run while\n+  still achieving performance gains similar to \"fat\".\n+\n+If `-C lto` is not specified, then the compiler will attempt to perform \"thin\n+local LTO\" which performs \"thin\" LTO on the local crate only across its\n+[codegen units](#codegen-units). When `-C lto` is not specified, LTO is\n+disabled if codegen units is 1 or optimizations are disabled ([`-C\n+opt-level=0`](#opt-level)). That is:\n+\n+* When `-C lto` is not specified:\n+  * `codegen-units=1`: Disables LTO.\n+  * `opt-level=0`: Disables LTO.\n+* When `-C lto=true`:\n+  * `lto=true`: 16 codegen units, performs fat LTO across crates.\n+  * `codegen-units=1` + `lto=true`: 1 codegen unit, fat LTO across crates.\n+\n+See also [linker-plugin-lto](#linker-plugin-lto) for cross-language LTO.\n+\n+## linker-plugin-lto\n+\n+Defers LTO optimizations to the linker. See\n+[linkger-plugin-LTO](../linker-plugin-lto.md) for more details. Takes one of\n+the following values:\n+\n+* `y`, `yes`, `on`, or no value: Enabled.\n+* `n`, `no`, or `off`: Disabled (default).\n+* A path to the linker plugin.\n \n ## target-cpu\n \n This instructs `rustc` to generate code specifically for a particular processor.\n \n You can run `rustc --print target-cpus` to see the valid options to pass\n here. Additionally, `native` can be passed to use the processor of the host\n-machine.\n+machine. Each target has a default base CPU.\n \n ## target-feature\n \n Individual targets will support different features; this flag lets you control\n-enabling or disabling a feature.\n+enabling or disabling a feature. Each feature should be prefixed with a `+` to\n+enable it or `-` to disable it. Separate multiple features with commas.\n \n To see the valid options and an example of use, run `rustc --print\n target-features`.\n \n-Using this flag is unsafe and might result in [undefined runtime behavior](../targets/known-issues.md).\n+Using this flag is unsafe and might result in [undefined runtime\n+behavior](../targets/known-issues.md).\n+\n+See also the [`target_feature`\n+attribute](../../reference/attributes/codegen.md#the-target_feature-attribute)\n+for controlling features per-function.\n+\n+This also supports the feature `+crt-static` and `-crt-static` to control\n+[static C runtime linkage](../../reference/linkage.html#static-and-dynamic-c-runtimes).\n+\n+Each target and [`target-cpu`](#target-cpu) has a default set of enabled\n+features.\n \n ## passes\n \n-This flag can be used to add extra LLVM passes to the compilation.\n+This flag can be used to add extra [LLVM\n+passes](http://llvm.org/docs/Passes.html) to the compilation.\n \n The list must be separated by spaces.\n \n+See also the [`no-prepopulate-passes`](#no-prepopulate-passes) flag.\n+\n ## llvm-args\n \n This flag can be used to pass a list of arguments directly to LLVM.\n \n The list must be separated by spaces.\n \n+Pass `--help` to see a list of options.\n+\n ## save-temps\n \n `rustc` will generate temporary files during compilation; normally it will\n@@ -83,16 +154,21 @@ preserved instead of removed.\n \n ## rpath\n \n-This option allows you to set the value of\n+This option allows you to enable\n [`rpath`](https://en.wikipedia.org/wiki/Rpath).\n \n ## overflow-checks\n \n-This flag allows you to control the behavior of integer overflow. This flag\n-can be passed many options:\n+This flag allows you to control the behavior of [runtime integer\n+overflow](../../reference/expressions/operator-expr.md#overflow). When\n+overflow-checks are enabled, a panic will occur on overflow. This flag takes\n+one of the following values:\n \n-* To turn overflow checks on: `y`, `yes`, or `on`.\n-* To turn overflow checks off: `n`, `no`, or `off`.\n+* `y`, `yes`, `on`, or no value: Enable overflow checks.\n+* `n`, `no`, or `off`: Disable overflow checks.\n+\n+If not specified, overflow checks are enabled if\n+[debug-assertions](#debug-assertions) are enabled, disabled otherwise.\n \n ## no-prepopulate-passes\n \n@@ -125,49 +201,65 @@ make it use dynamic linking instead.\n \n ## no-integrated-as\n \n-LLVM comes with an internal assembler; this option will let you use an\n-external assembler instead.\n+`rustc` normally uses the LLVM internal assembler to create object code. This\n+flag will disable the internal assembler and emit assembly code to be\n+translated using an external assembler, currently the linker such as `cc`.\n \n ## no-redzone\n \n This flag allows you to disable [the\n red zone](https://en.wikipedia.org/wiki/Red_zone_\\(computing\\)). This flag can\n-be passed many options:\n+be passed one of the following options:\n+\n+* `y`, `yes`, `on`, or no value: Disables the red zone.\n+* `n`, `no`, or `off`: Enables the red zone.\n \n-* To enable the red zone: `y`, `yes`, or `on`.\n-* To disable it: `n`, `no`, or `off`.\n+The default if not specified depends on the target.\n \n ## relocation-model\n \n-This option lets you choose which relocation model to use.\n+This option lets you choose which\n+[relocation](https://en.wikipedia.org/wiki/Relocation_\\(computing\\)) model to\n+use.\n \n To find the valid options for this flag, run `rustc --print relocation-models`.\n \n-## code-model=val\n+## code-model\n \n This option lets you choose which code model to use.\n \n To find the valid options for this flag, run `rustc --print code-models`.\n \n ## metadata\n \n-This option allows you to control the metadata used for symbol mangling.\n+This option allows you to control the metadata used for symbol mangling. This\n+takes a space-separated list of strings. Mangled symbols will incorporate a\n+hash of the metadata. This may be used, for example, to differentiate symbols\n+between two different versions of the same crate being linked.\n \n ## extra-filename\n \n-This option allows you to put extra data in each output filename.\n+This option allows you to put extra data in each output filename. It takes a\n+string to add as a suffix to the filename. See the [`--emit`\n+flag][option-emit] for more information.\n \n ## codegen-units\n \n-This flag lets you control how many threads are used when doing\n-code generation.\n+This flag controls how many code generation units the crate is split into. It\n+takes an integer greater than 0.\n \n-Increasing parallelism may speed up compile times, but may also\n-produce slower code.\n+When a crate is split into multiple codegen units, LLVM is able to process\n+them in parallel. Increasing parallelism may speed up compile times, but may\n+also produce slower code. Setting this to 1 may improve the performance of\n+generated code, but may be slower to compile.\n+\n+The default, if not specified, is 16. This flag is ignored if\n+[incremental](#incremental) is enabled, in which case an internal heuristic is\n+used to split the crate.\n \n ## remark\n \n-This flag lets you print remarks for these optimization passes.\n+This flag lets you print remarks for optimization passes.\n \n The list of passes should be separated by spaces.\n \n@@ -181,30 +273,55 @@ This option is deprecated and does nothing.\n \n This flag lets you control debug information:\n \n-* `0`: no debug info at all\n+* `0`: no debug info at all (default)\n * `1`: line tables only\n * `2`: full debug info\n \n+Note: The [`-g` flag][option-g-debug] is an alias for `-C debuginfo=2`.\n+\n ## opt-level\n \n This flag lets you control the optimization level.\n \n-* `0`: no optimizations, also turn on `cfg(debug_assertions)`.\n+* `0`: no optimizations, also turns on [`cfg(debug_assertions)`](#debug-assertions).\n * `1`: basic optimizations\n * `2`: some optimizations\n * `3`: all optimizations\n * `s`: optimize for binary size\n * `z`: optimize for binary size, but also turn off loop vectorization.\n \n+Note: The [`-O` flag][option-o-optimize] is an alias for `-C opt-level=2`.\n+\n+The default is `0`.\n+\n ## debug-assertions\n \n-This flag lets you turn `cfg(debug_assertions)` on or off.\n+This flag lets you turn `cfg(debug_assertions)` [conditional\n+compilation](../../reference/conditional-compilation.md#debug_assertions) on\n+or off. It takes one of the following values:\n+\n+* `y`, `yes`, `on`, or no value: Enable debug-assertions.\n+* `n`, `no`, or `off`: Disable debug-assertions.\n+\n+If not specified, debug assertions are automatically enabled only if the\n+[opt-level](#opt-level) is 0.\n \n ## inline-threshold\n \n-This option lets you set the threshold for inlining a function.\n+This option lets you set the default threshold for inlining a function. It\n+takes an unsigned integer as a value. Inlining is based on a cost model, where\n+a higher threshold will allow more inlining.\n \n-The default is 225.\n+The default depends on the [opt-level](#opt-level):\n+\n+| opt-level | Threshold |\n+|-----------|-----------|\n+| 0         | N/A, only inlines always-inline functions |\n+| 1         | N/A, only inlines always-inline functions and LLVM lifetime intrinsics |\n+| 2         | 225 |\n+| 3         | 275 |\n+| s         | 75 |\n+| z         | 25 |\n \n ## panic\n \n@@ -213,9 +330,14 @@ This option lets you control what happens when the code panics.\n * `abort`: terminate the process upon panic\n * `unwind`: unwind the stack upon panic\n \n+If not specified, the default depends on the target.\n+\n ## incremental\n \n-This flag allows you to enable incremental compilation.\n+This flag allows you to enable incremental compilation, which allows `rustc`\n+to save information after compiling a crate to be reused when recompiling the\n+crate, improving re-compile times. This takes a path to a directory where\n+incremental files will be stored.\n \n ## profile-generate\n \n@@ -232,4 +354,31 @@ optimization (PGO). The flag takes a mandatory argument which is the path\n to a valid `.profdata` file. See the chapter on\n [profile-guided optimization] for more information.\n \n+## force-frame-pointers\n+\n+This flag forces the use of frame pointers. It takes one of the following\n+values:\n+\n+* `y`, `yes`, `on`, or no value: Frame pointers are forced to be enabled.\n+* `n`, `no`, or `off`: Frame pointers are not forced to be enabled. This does\n+  not necessarily mean frame pointers will be removed.\n+\n+The default if not specified depends on the target.\n+\n+## default-linker-libraries\n+\n+This flag controls whether or not the linker includes its default libraries.\n+It takes one of the following values:\n+\n+* `y`, `yes`, `on`, or no value: Default libraries are included.\n+* `n`, `no`, or `off`: Default libraries are **not** included.\n+\n+For example, for gcc flavor linkers, this issues the `-nodefaultlibs` flag to\n+the linker.\n+\n+The default is `yes` if not specified.\n+\n+[option-emit]: ../command-line-arguments.md#option-emit\n+[option-o-optimize]: ../command-line-arguments.md#option-o-optimize\n [profile-guided optimization]: ../profile-guided-optimization.md\n+[option-g-debug]: ../command-line-arguments.md#option-g-debug"}, {"sha": "79b4f7542f9b05b82df6727c0dbf19fbdbcea2d3", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 68, "deletions": 31, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=d1fff4a4b213b3341c1ff994061b7965a5932c70", "patch": "@@ -2,19 +2,23 @@\n \n Here's a list of command-line arguments to `rustc` and what they do.\n \n+<a id=\"option-help\"></a>\n ## `-h`/`--help`: get help\n \n This flag will print out help information for `rustc`.\n \n+<a id=\"option-cfg\"></a>\n ## `--cfg`: configure the compilation environment\n \n-This flag can turn on or off various `#[cfg]` settings.\n+This flag can turn on or off various `#[cfg]` settings for [conditional\n+compilation](../reference/conditional-compilation.md).\n \n The value can either be a single identifier or two identifiers separated by `=`.\n \n For examples, `--cfg 'verbose'` or `--cfg 'feature=\"serde\"'`. These correspond\n to `#[cfg(verbose)]` and `#[cfg(feature = \"serde\")]` respectively.\n \n+<a id=\"option-l-search-path\"></a>\n ## `-L`: add a directory to the library search path\n \n When looking for external crates or libraries, a directory passed to this flag\n@@ -31,6 +35,7 @@ KIND=PATH` where `KIND` may be one of:\n - `all` \u2014\u00a0Search for all library kinds in this directory. This is the default\n   if `KIND` is not specified.\n \n+<a id=\"option-l-link-lib\"></a>\n ## `-l`: link the generated crate to a native library\n \n This flag allows you to specify linking to a specific native library when building\n@@ -55,6 +60,7 @@ and `LINK_NAME` is the name of the actual library that will be linked.\n \n [link-attribute]: ../reference/items/external-blocks.html#the-link-attribute\n \n+<a id=\"option-crate-type\"></a>\n ## `--crate-type`: a list of types of crates for the compiler to emit\n \n This instructs `rustc` on which crate type to build. This flag accepts a\n@@ -80,19 +86,21 @@ More details may be found in the [linkage chapter] of the reference.\n [linkage chapter]: ../reference/linkage.html\n [crate_type]: ../reference/linkage.html\n \n+<a id=\"option-crate-name\"></a>\n ## `--crate-name`: specify the name of the crate being built\n \n This informs `rustc` of the name of your crate.\n \n+<a id=\"option-edition\"></a>\n ## `--edition`: specify the edition to use\n \n This flag takes a value of `2015` or `2018`. The default is `2015`. More\n information about editions may be found in the [edition guide].\n \n [edition guide]: ../edition-guide/introduction.html\n \n+<a id=\"option-emit\"></a>\n ## `--emit`: specifies the types of output files to generate\n- <a id=\"option-emit\"></a>\n \n This flag controls the types of output files generated by the compiler. It\n accepts a comma-separated list of values, and may be specified multiple times.\n@@ -117,22 +125,24 @@ The valid emit kinds are:\n - `obj` \u2014 Generates a native object file. The default output filename is\n   `CRATE_NAME.o`.\n \n-The output filename can be set with the `-o` flag. A suffix may be added to\n-the filename with the `-C extra-filename` flag. The files are written to the\n-current directory unless the `--out-dir` flag is used. Each emission type may\n-also specify the output filename with the form `KIND=PATH`, which takes\n-precedence over the `-o` flag.\n+The output filename can be set with the [`-o` flag](#option-o-output). A\n+suffix may be added to the filename with the [`-C extra-filename`\n+flag](codegen-options/index.md#extra-filename). The files are written to the\n+current directory unless the [`--out-dir` flag](#option-out-dir) is used. Each\n+emission type may also specify the output filename with the form `KIND=PATH`,\n+which takes precedence over the `-o` flag.\n \n [LLVM bitcode]: https://llvm.org/docs/BitCodeFormat.html\n [LLVM IR]: https://llvm.org/docs/LangRef.html\n \n+<a id=\"option-print\"></a>\n ## `--print`: print compiler information\n \n This flag prints out various information about the compiler. This flag may be\n specified multiple times, and the information is printed in the order the\n flags are specified. Specifying a `--print` flag will usually disable the\n-`--emit` step and will only print the requested information. The valid types\n-of print values are:\n+[`--emit`](#option-emit) step and will only print the requested information.\n+The valid types of print values are:\n \n - `crate-name` \u2014 The name of the crate.\n - `file-names` \u2014 The names of the files created by the `link` emit kind.\n@@ -142,14 +152,17 @@ of print values are:\n - `target-list` \u2014 List of known targets. The target may be selected with the\n   `--target` flag.\n - `target-cpus` \u2014 List of available CPU values for the current target. The\n-  target CPU may be selected with the `-C target-cpu=val` flag.\n+  target CPU may be selected with the [`-C target-cpu=val`\n+  flag](codegen-options/index.md#target-cpu).\n - `target-features` \u2014 List of available target features for the current\n-  target. Target features may be enabled with the `-C target-feature=val`\n-  flag. This flag is unsafe. See [known issues](targets/known-issues.md) for more details.\n+  target. Target features may be enabled with the [`-C target-feature=val`\n+  flag](codegen-options/index.md#target-feature).  This flag is unsafe. See\n+  [known issues](targets/known-issues.md) for more details.\n - `relocation-models` \u2014 List of relocation models. Relocation models may be\n-  selected with the `-C relocation-model=val` flag.\n+  selected with the [`-C relocation-model=val`\n+  flag](codegen-options/index.md#relocation-model).\n - `code-models` \u2014 List of code models. Code models may be selected with the\n-  `-C code-model=val` flag.\n+  [`-C code-model=val` flag](codegen-options/index.md#code-model).\n - `tls-models` \u2014 List of Thread Local Storage models supported. The model may\n   be selected with the `-Z tls-model=val` flag.\n - `native-static-libs` \u2014 This may be used when creating a `staticlib` crate\n@@ -160,89 +173,107 @@ of print values are:\n \n [conditional compilation]: ../reference/conditional-compilation.html\n \n+<a id=\"option-g-debug\"></a>\n ## `-g`: include debug information\n \n-A synonym for `-C debuginfo=2`, for more see [here](codegen-options/index.md#debuginfo).\n+A synonym for [`-C debuginfo=2`](codegen-options/index.md#debuginfo).\n \n+<a id=\"option-o-optimize\"></a>\n ## `-O`: optimize your code\n \n-A synonym for `-C opt-level=2`, for more see [here](codegen-options/index.md#opt-level).\n+A synonym for [`-C opt-level=2`](codegen-options/index.md#opt-level).\n \n+<a id=\"option-o-output\"></a>\n ## `-o`: filename of the output\n \n This flag controls the output filename.\n \n+<a id=\"option-out-dir\"></a>\n ## `--out-dir`: directory to write the output in\n \n The outputted crate will be written to this directory. This flag is ignored if\n-the `-o` flag is used.\n+the [`-o` flag](#option-o-output) is used.\n \n+<a id=\"option-explain\"></a>\n ## `--explain`: provide a detailed explanation of an error message\n \n Each error of `rustc`'s comes with an error code; this will print\n out a longer explanation of a given error.\n \n+<a id=\"option-test\"></a>\n ## `--test`: build a test harness\n \n When compiling this crate, `rustc` will ignore your `main` function\n and instead produce a test harness.\n \n+<a id=\"option-target\"></a>\n ## `--target`: select a target triple to build\n \n This controls which [target](targets/index.md) to produce.\n \n+<a id=\"option-w-warn\"></a>\n ## `-W`: set lint warnings\n \n This flag will set which lints should be set to the [warn level](lints/levels.md#warn).\n \n+<a id=\"option-a-allow\"></a>\n ## `-A`: set lint allowed\n \n This flag will set which lints should be set to the [allow level](lints/levels.md#allow).\n \n+<a id=\"option-d-deny\"></a>\n ## `-D`: set lint denied\n \n This flag will set which lints should be set to the [deny level](lints/levels.md#deny).\n \n+<a id=\"option-f-forbid\"></a>\n ## `-F`: set lint forbidden\n \n This flag will set which lints should be set to the [forbid level](lints/levels.md#forbid).\n \n+<a id=\"option-z-unstable\"></a>\n ## `-Z`: set unstable options\n \n This flag will allow you to set unstable options of rustc. In order to set multiple options,\n the -Z flag can be used multiple times. For example: `rustc -Z verbose -Z time`.\n Specifying options with -Z is only available on nightly. To view all available options\n run: `rustc -Z help`.\n \n+<a id=\"option-cap-lints\"></a>\n ## `--cap-lints`: set the most restrictive lint level\n \n This flag lets you 'cap' lints, for more, [see here](lints/levels.md#capping-lints).\n \n+<a id=\"option-codegen\"></a>\n ## `-C`/`--codegen`: code generation options\n \n This flag will allow you to set [codegen options](codegen-options/index.md).\n \n+<a id=\"option-version\"></a>\n ## `-V`/`--version`: print a version\n \n This flag will print out `rustc`'s version.\n \n+<a id=\"option-verbose\"></a>\n ## `-v`/`--verbose`: use verbose output\n \n This flag, when combined with other flags, makes them produce extra output.\n \n+<a id=\"option-extern\"></a>\n ## `--extern`: specify where an external library is located\n \n This flag allows you to pass the name and location of an external crate that\n will be linked into the crate you are building. This flag may be specified\n multiple times. The format of the value should be `CRATENAME=PATH`.\n \n+<a id=\"option-sysroot\"></a>\n ## `--sysroot`: Override the system root\n \n The \"sysroot\" is where `rustc` looks for the crates that come with the Rust\n distribution; this flag allows that to be overridden.\n \n+<a id=\"option-error-format\"></a>\n ## `--error-format`: control how errors are produced\n- <a id=\"option-error-format\"></a>\n \n This flag lets you control the format of messages. Messages are printed to\n stderr. The valid options are:\n@@ -251,6 +282,7 @@ stderr. The valid options are:\n - `json` \u2014 Structured JSON output. See [the JSON chapter] for more detail.\n - `short` \u2014 Short, one-line messages.\n \n+<a id=\"option-color\"></a>\n ## `--color`: configure coloring of output\n \n This flag lets you control color settings of the output. The valid options\n@@ -260,6 +292,7 @@ are:\n - `always` \u2014\u00a0Always use colors.\n - `never` \u2014\u00a0Never colorize output.\n \n+<a id=\"option-remap-path-prefix\"></a>\n ## `--remap-path-prefix`: remap source names in output\n \n Remap source path prefixes in all output, including compiler diagnostics,\n@@ -274,13 +307,14 @@ replacement is purely textual, with no consideration of the current system's\n pathname syntax. For example `--remap-path-prefix foo=bar` will match\n `foo/lib.rs` but not `./foo/lib.rs`.\n \n+<a id=\"option-json\"></a>\n ## `--json`: configure json messages printed by the compiler\n- <a id=\"option-json\"></a>\n \n-When the `--error-format=json` option is passed to rustc then all of the\n-compiler's diagnostic output will be emitted in the form of JSON blobs. The\n-`--json` argument can be used in conjunction with `--error-format=json` to\n-configure what the JSON blobs contain as well as which ones are emitted.\n+When the [`--error-format=json` option](#option-error-format) is passed to\n+rustc then all of the compiler's diagnostic output will be emitted in the form\n+of JSON blobs. The `--json` argument can be used in conjunction with\n+`--error-format=json` to configure what the JSON blobs contain as well as\n+which ones are emitted.\n \n With `--error-format=json` the compiler will always emit any compiler errors as\n a JSON blob, but the following options are also available to the `--json` flag\n@@ -296,20 +330,23 @@ to customize the output:\n   indicates that the diagnostic should have embedded ANSI color codes intended\n   to be used to colorize the message in the manner rustc typically already does\n   for terminal outputs. Note that this is usefully combined with crates like\n-  `fwdansi` to translate these ANSI codes on Windows to console commands or\n-  `strip-ansi-escapes` if you'd like to optionally remove the ansi colors\n-  afterwards.\n+  [`fwdansi`](https://crates.io/crates/fwdansi) to translate these ANSI codes\n+  on Windows to console commands or\n+  [`strip-ansi-escapes`](https://crates.io/crates/strip-ansi-escapes) if you'd\n+  like to optionally remove the ansi colors afterwards.\n \n - `artifacts` - this instructs rustc to emit a JSON blob for each artifact that\n-  is emitted. An artifact corresponds to a request from the `--emit` CLI\n-  argument, and as soon as the artifact is available on the filesystem a\n-  notification will be emitted.\n+  is emitted. An artifact corresponds to a request from the [`--emit` CLI\n+  argument](#option-emit), and as soon as the artifact is available on the\n+  filesystem a notification will be emitted.\n \n-Note that it is invalid to combine the `--json` argument with the `--color`\n-argument, and it is required to combine `--json` with `--error-format=json`.\n+Note that it is invalid to combine the `--json` argument with the\n+[`--color`](#option-color) argument, and it is required to combine `--json`\n+with `--error-format=json`.\n \n See [the JSON chapter] for more detail.\n \n+<a id=\"at-path\"></a>\n ## `@path`: load command-line flags from a path\n \n If you specify `@path` on the command-line, then it will open `path` and read"}, {"sha": "48f9865b87036dfda488277f89733225be9a3f24", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=d1fff4a4b213b3341c1ff994061b7965a5932c70", "patch": "@@ -3,11 +3,11 @@\n //! The `LinkedList` allows pushing and popping elements at either end\n //! in constant time.\n //!\n-//! Almost always it is better to use `Vec` or [`VecDeque`] instead of\n-//! [`LinkedList`]. In general, array-based containers are faster,\n-//! more memory efficient and make better use of CPU cache.\n+//! NOTE: It is almost always better to use [`Vec`] or [`VecDeque`] because\n+//! array-based containers are generally faster,\n+//! more memory efficient, and make better use of CPU cache.\n //!\n-//! [`LinkedList`]: ../linked_list/struct.LinkedList.html\n+//! [`Vec`]: ../../vec/struct.Vec.html\n //! [`VecDeque`]: ../vec_deque/struct.VecDeque.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -31,9 +31,9 @@ mod tests;\n /// The `LinkedList` allows pushing and popping elements at either end\n /// in constant time.\n ///\n-/// Almost always it is better to use `Vec` or `VecDeque` instead of\n-/// `LinkedList`. In general, array-based containers are faster,\n-/// more memory efficient and make better use of CPU cache.\n+/// NOTE: It is almost always better to use `Vec` or `VecDeque` because\n+/// array-based containers are generally faster,\n+/// more memory efficient, and make better use of CPU cache.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct LinkedList<T> {\n     head: Option<NonNull<Node<T>>>,"}, {"sha": "0e5746d0d9df0e6e5f05008b68f164be3999ce3e", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=d1fff4a4b213b3341c1ff994061b7965a5932c70", "patch": "@@ -1402,16 +1402,21 @@ impl String {\n         &mut self.vec\n     }\n \n-    /// Returns the length of this `String`, in bytes.\n+    /// Returns the length of this `String`, in bytes, not [`char`]s or\n+    /// graphemes. In other words, it may not be what a human considers the\n+    /// length of the string.\n     ///\n     /// # Examples\n     ///\n     /// Basic usage:\n     ///\n     /// ```\n     /// let a = String::from(\"foo\");\n-    ///\n     /// assert_eq!(a.len(), 3);\n+    ///\n+    /// let fancy_f = String::from(\"\u0192oo\");\n+    /// assert_eq!(fancy_f.len(), 4);\n+    /// assert_eq!(fancy_f.chars().count(), 3);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "16045f64d461e09201db41c6a64b8cdad6aae088", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=d1fff4a4b213b3341c1ff994061b7965a5932c70", "patch": "@@ -438,16 +438,16 @@ pub trait TryInto<T>: Sized {\n /// ```\n /// use std::convert::TryFrom;\n ///\n-/// struct SuperiorThanZero(i32);\n+/// struct GreaterThanZero(i32);\n ///\n-/// impl TryFrom<i32> for SuperiorThanZero {\n+/// impl TryFrom<i32> for GreaterThanZero {\n ///     type Error = &'static str;\n ///\n ///     fn try_from(value: i32) -> Result<Self, Self::Error> {\n-///         if value < 0 {\n-///             Err(\"SuperiorThanZero only accepts value superior than zero!\")\n+///         if value <= 0 {\n+///             Err(\"GreaterThanZero only accepts value superior than zero!\")\n ///         } else {\n-///             Ok(SuperiorThanZero(value))\n+///             Ok(GreaterThanZero(value))\n ///         }\n ///     }\n /// }"}, {"sha": "3b669cad1c40ffe0aa98d0d2f1164ca0f41a16cc", "filename": "src/libcore/iter/adapters/chain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Flibcore%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Flibcore%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fchain.rs?ref=d1fff4a4b213b3341c1ff994061b7965a5932c70", "patch": "@@ -3,7 +3,7 @@ use crate::usize;\n \n use super::super::{Iterator, DoubleEndedIterator, FusedIterator, TrustedLen};\n \n-/// An iterator that strings two iterators together.\n+/// An iterator that links two iterators together, in a chain.\n ///\n /// This `struct` is created by the [`chain`] method on [`Iterator`]. See its\n /// documentation for more."}, {"sha": "1968919f5541c8ec3b97f7ba239617eaec004b05", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=d1fff4a4b213b3341c1ff994061b7965a5932c70", "patch": "@@ -2085,8 +2085,8 @@ impl str {\n     /// let len = \"foo\".len();\n     /// assert_eq!(3, len);\n     ///\n-    /// let len = \"\u0192oo\".len(); // fancy f!\n-    /// assert_eq!(4, len);\n+    /// assert_eq!(\"\u0192oo\".len(), 4); // fancy f!\n+    /// assert_eq!(\"\u0192oo\".chars().count(), 3);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]"}, {"sha": "72b0a7d640a4869c1286b506fe7b921ccc9cd886", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=d1fff4a4b213b3341c1ff994061b7965a5932c70", "patch": "@@ -1729,6 +1729,7 @@ extern \"C\" {\n                                ) -> LLVMRustResult;\n     pub fn LLVMRustSetLLVMOptions(Argc: c_int, Argv: *const *const c_char);\n     pub fn LLVMRustPrintPasses();\n+    pub fn LLVMRustGetInstructionCount(M: &Module) -> u32;\n     pub fn LLVMRustSetNormalizedTarget(M: &Module, triple: *const c_char);\n     pub fn LLVMRustAddAlwaysInlinePass(P: &PassManagerBuilder, AddLifetimes: bool);\n     pub fn LLVMRustRunRestrictionPass(M: &Module, syms: *const *const c_char, len: size_t);"}, {"sha": "3f85e6d772ec146249dc81da9ae4dbb8baeb5d1d", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=d1fff4a4b213b3341c1ff994061b7965a5932c70", "patch": "@@ -309,7 +309,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAttributes {\n             }\n         }\n \n-        let plugin_attributes = cx.sess().plugin_attributes.borrow_mut();\n+        let plugin_attributes = cx.sess().plugin_attributes.borrow();\n         for &(name, ty) in plugin_attributes.iter() {\n             if ty == AttributeType::Whitelisted && attr.check_name(name) {\n                 debug!(\"{:?} (plugin attr) is whitelisted with ty {:?}\", name, ty);"}, {"sha": "b14121da79f596059adc7e486ad70bf0b2b42dab", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=d1fff4a4b213b3341c1ff994061b7965a5932c70", "patch": "@@ -43,6 +43,8 @@ pub struct PathSeg(pub DefId, pub usize);\n pub trait AstConv<'tcx> {\n     fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;\n \n+    fn item_def_id(&self) -> Option<DefId>;\n+\n     /// Returns predicates in scope of the form `X: Foo`, where `X` is\n     /// a type parameter `X` with the given id `def_id`. This is a\n     /// subset of the full set of predicates.\n@@ -1759,17 +1761,41 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                    -> Ty<'tcx>\n     {\n         let tcx = self.tcx();\n+\n         let trait_def_id = tcx.parent(item_def_id).unwrap();\n \n+        debug!(\"qpath_to_ty: trait_def_id={:?}\", trait_def_id);\n+\n         self.prohibit_generics(slice::from_ref(item_segment));\n \n         let self_ty = if let Some(ty) = opt_self_ty {\n             ty\n         } else {\n             let path_str = tcx.def_path_str(trait_def_id);\n+\n+            let def_id = self.item_def_id();\n+\n+            debug!(\"qpath_to_ty: self.item_def_id()={:?}\", def_id);\n+\n+            let parent_def_id = def_id.and_then(|def_id| tcx.hir().as_local_hir_id(def_id))\n+                .map(|hir_id| tcx.hir().get_parent_did(hir_id));\n+\n+            debug!(\"qpath_to_ty: parent_def_id={:?}\", parent_def_id);\n+\n+            // If the trait in segment is the same as the trait defining the item,\n+            // use the `<Self as ..>` syntax in the error.\n+            let is_part_of_self_trait_constraints = def_id == Some(trait_def_id);\n+            let is_part_of_fn_in_self_trait = parent_def_id == Some(trait_def_id);\n+\n+            let type_name = if is_part_of_self_trait_constraints || is_part_of_fn_in_self_trait {\n+                \"Self\"\n+            } else {\n+                \"Type\"\n+            };\n+\n             self.report_ambiguous_associated_type(\n                 span,\n-                \"Type\",\n+                type_name,\n                 &path_str,\n                 item_segment.ident.name,\n             );"}, {"sha": "a2af29aef094bc22d9efb013af44389d06da3cd0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d1fff4a4b213b3341c1ff994061b7965a5932c70", "patch": "@@ -2279,6 +2279,10 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         self.tcx\n     }\n \n+    fn item_def_id(&self) -> Option<DefId> {\n+        None\n+    }\n+\n     fn get_type_parameter_bounds(&self, _: Span, def_id: DefId) -> ty::GenericPredicates<'tcx> {\n         let tcx = self.tcx;\n         let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();"}, {"sha": "7ef842cb7579c0a863559cf75a3ae3a8a1c0d95e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d1fff4a4b213b3341c1ff994061b7965a5932c70", "patch": "@@ -182,6 +182,10 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n         self.tcx\n     }\n \n+    fn item_def_id(&self) -> Option<DefId> {\n+        Some(self.item_def_id)\n+    }\n+\n     fn get_type_parameter_bounds(&self, span: Span, def_id: DefId) -> ty::GenericPredicates<'tcx> {\n         self.tcx\n             .at(span)"}, {"sha": "0c52dc5b81b0e1c69a1593d972648f59f80aa6ce", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=d1fff4a4b213b3341c1ff994061b7965a5932c70", "patch": "@@ -303,10 +303,10 @@ impl PermissionsExt for Permissions {\n pub trait OpenOptionsExt {\n     /// Sets the mode bits that a new file will be created with.\n     ///\n-    /// If a new file is created as part of a `File::open_opts` call then this\n+    /// If a new file is created as part of an `OpenOptions::open` call then this\n     /// specified `mode` will be used as the permission bits for the new file.\n     /// If no `mode` is set, the default of `0o666` will be used.\n-    /// The operating system masks out bits with the systems `umask`, to produce\n+    /// The operating system masks out bits with the system's `umask`, to produce\n     /// the final permissions.\n     ///\n     /// # Examples"}, {"sha": "4a9cc3bd0693cafb4012e065a794b7f0608345c3", "filename": "src/libstd/sys/vxworks/ext/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Flibstd%2Fsys%2Fvxworks%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Flibstd%2Fsys%2Fvxworks%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fext%2Ffs.rs?ref=d1fff4a4b213b3341c1ff994061b7965a5932c70", "patch": "@@ -304,10 +304,10 @@ impl PermissionsExt for Permissions {\n pub trait OpenOptionsExt {\n     /// Sets the mode bits that a new file will be created with.\n     ///\n-    /// If a new file is created as part of a `File::open_opts` call then this\n+    /// If a new file is created as part of an `OpenOptions::open` call then this\n     /// specified `mode` will be used as the permission bits for the new file.\n     /// If no `mode` is set, the default of `0o666` will be used.\n-    /// The operating system masks out bits with the systems `umask`, to produce\n+    /// The operating system masks out bits with the system's `umask`, to produce\n     /// the final permissions.\n     ///\n     /// # Examples"}, {"sha": "e6c45b8e3628b47d5e32862b85478bd1cf0cbcfa", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=d1fff4a4b213b3341c1ff994061b7965a5932c70", "patch": "@@ -87,6 +87,14 @@ extern \"C\" char *LLVMRustGetLastError(void) {\n   return Ret;\n }\n \n+extern \"C\" unsigned int LLVMRustGetInstructionCount(LLVMModuleRef M) {\n+#if LLVM_VERSION_GE(7, 0)\n+  return unwrap(M)->getInstructionCount();\n+#else\n+  report_fatal_error(\"Module::getInstructionCount not available before LLVM 7\");\n+#endif\n+}\n+\n extern \"C\" void LLVMRustSetLastError(const char *Err) {\n   free((void *)LastError);\n   LastError = strdup(Err);"}, {"sha": "51b53908f98c315195c98d9e90bfc99f05e62d17", "filename": "src/test/ui/associated-types/associated-types-in-ambiguous-context.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.rs?ref=d1fff4a4b213b3341c1ff994061b7965a5932c70", "patch": "@@ -10,6 +10,16 @@ trait Grab {\n     type Value;\n     fn grab(&self) -> Grab::Value;\n     //~^ ERROR ambiguous associated type\n+\n+    fn get(&self) -> Get::Value;\n+    //~^ ERROR ambiguous associated type\n+}\n+\n+trait Bar {}\n+\n+trait Foo where Foo::Assoc: Bar {\n+//~^ ERROR ambiguous associated type\n+    type Assoc;\n }\n \n type X = std::ops::Deref::Target;"}, {"sha": "77835c5f6766e6a39ece872a367bfb23ea095e2a", "filename": "src/test/ui/associated-types/associated-types-in-ambiguous-context.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-in-ambiguous-context.stderr?ref=d1fff4a4b213b3341c1ff994061b7965a5932c70", "patch": "@@ -5,7 +5,13 @@ LL | fn get<T:Get,U:Get>(x: T, y: U) -> Get::Value {}\n    |                                    ^^^^^^^^^^ help: use fully-qualified syntax: `<Type as Get>::Value`\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/associated-types-in-ambiguous-context.rs:15:10\n+  --> $DIR/associated-types-in-ambiguous-context.rs:20:17\n+   |\n+LL | trait Foo where Foo::Assoc: Bar {\n+   |                 ^^^^^^^^^^ help: use fully-qualified syntax: `<Self as Foo>::Assoc`\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/associated-types-in-ambiguous-context.rs:25:10\n    |\n LL | type X = std::ops::Deref::Target;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<Type as std::ops::Deref>::Target`\n@@ -14,8 +20,14 @@ error[E0223]: ambiguous associated type\n   --> $DIR/associated-types-in-ambiguous-context.rs:11:23\n    |\n LL |     fn grab(&self) -> Grab::Value;\n-   |                       ^^^^^^^^^^^ help: use fully-qualified syntax: `<Type as Grab>::Value`\n+   |                       ^^^^^^^^^^^ help: use fully-qualified syntax: `<Self as Grab>::Value`\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/associated-types-in-ambiguous-context.rs:14:22\n+   |\n+LL |     fn get(&self) -> Get::Value;\n+   |                      ^^^^^^^^^^ help: use fully-qualified syntax: `<Type as Get>::Value`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0223`."}, {"sha": "954f269d30e59e4ae1a281474081b3ab3e06d6c7", "filename": "src/test/ui/consts/const-loop.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.rs?ref=d1fff4a4b213b3341c1ff994061b7965a5932c70", "patch": "@@ -0,0 +1,58 @@\n+const _: i32 = {\n+    let mut x = 0;\n+\n+    while x < 4 {\n+        //~^ ERROR constant contains unimplemented expression type\n+        //~| ERROR constant contains unimplemented expression type\n+        x += 1;\n+    }\n+\n+    while x < 8 {\n+        x += 1;\n+    }\n+\n+    x\n+};\n+\n+const _: i32 = {\n+    let mut x = 0;\n+\n+    for i in 0..4 {\n+        //~^ ERROR constant contains unimplemented expression type\n+        //~| ERROR constant contains unimplemented expression type\n+        //~| ERROR references in constants may only refer to immutable values\n+        //~| ERROR calls in constants are limited to constant functions, tuple\n+        //         structs and tuple variants\n+        x += i;\n+    }\n+\n+    for i in 0..4 {\n+        x += i;\n+    }\n+\n+    x\n+};\n+\n+const _: i32 = {\n+    let mut x = 0;\n+\n+    loop {\n+        x += 1;\n+        if x == 4 {\n+            //~^ ERROR constant contains unimplemented expression type\n+            //~| ERROR constant contains unimplemented expression type\n+            break;\n+        }\n+    }\n+\n+    loop {\n+        x += 1;\n+        if x == 8 {\n+            break;\n+        }\n+    }\n+\n+    x\n+};\n+\n+fn main() {}"}, {"sha": "e6e4e2f5bb80881a88e0963b789fa7586791108f", "filename": "src/test/ui/consts/const-loop.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1fff4a4b213b3341c1ff994061b7965a5932c70/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-loop.stderr?ref=d1fff4a4b213b3341c1ff994061b7965a5932c70", "patch": "@@ -0,0 +1,60 @@\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/const-loop.rs:4:11\n+   |\n+LL |     while x < 4 {\n+   |           ^^^^^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/const-loop.rs:4:5\n+   |\n+LL | /     while x < 4 {\n+LL | |\n+LL | |\n+LL | |         x += 1;\n+LL | |     }\n+   | |_____^\n+\n+error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/const-loop.rs:20:14\n+   |\n+LL |     for i in 0..4 {\n+   |              ^^^^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/const-loop.rs:20:14\n+   |\n+LL |     for i in 0..4 {\n+   |              ^^^^\n+\n+error[E0017]: references in constants may only refer to immutable values\n+  --> $DIR/const-loop.rs:20:14\n+   |\n+LL |     for i in 0..4 {\n+   |              ^^^^ constants require immutable values\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/const-loop.rs:20:9\n+   |\n+LL |     for i in 0..4 {\n+   |         ^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/const-loop.rs:41:12\n+   |\n+LL |         if x == 4 {\n+   |            ^^^^^^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/const-loop.rs:41:9\n+   |\n+LL | /         if x == 4 {\n+LL | |\n+LL | |\n+LL | |             break;\n+LL | |         }\n+   | |_________^\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors have detailed explanations: E0015, E0017, E0019.\n+For more information about an error, try `rustc --explain E0015`."}]}