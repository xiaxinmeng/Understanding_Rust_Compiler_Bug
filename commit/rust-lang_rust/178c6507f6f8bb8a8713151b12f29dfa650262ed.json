{"sha": "178c6507f6f8bb8a8713151b12f29dfa650262ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3OGM2NTA3ZjZmOGJiOGE4NzEzMTUxYjEyZjI5ZGZhNjUwMjYyZWQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-03T14:39:02Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-15T10:58:32Z"}, "message": "typeck all the tables", "tree": {"sha": "c67b04674c7cbc859fd2314dd8a8af1aa186232f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c67b04674c7cbc859fd2314dd8a8af1aa186232f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/178c6507f6f8bb8a8713151b12f29dfa650262ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/178c6507f6f8bb8a8713151b12f29dfa650262ed", "html_url": "https://github.com/rust-lang/rust/commit/178c6507f6f8bb8a8713151b12f29dfa650262ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/178c6507f6f8bb8a8713151b12f29dfa650262ed/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e6bf0923b113b754c9bda72b78eac354bec61f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e6bf0923b113b754c9bda72b78eac354bec61f7", "html_url": "https://github.com/rust-lang/rust/commit/2e6bf0923b113b754c9bda72b78eac354bec61f7"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "18bf2a7beaaae95709e1d113fa11932cd4d1a9fc", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/178c6507f6f8bb8a8713151b12f29dfa650262ed/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178c6507f6f8bb8a8713151b12f29dfa650262ed/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=178c6507f6f8bb8a8713151b12f29dfa650262ed", "patch": "@@ -556,6 +556,14 @@ rustc_queries! {\n             desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n             cache_on_disk_if { true }\n         }\n+        query typeck_tables_of_const_arg(\n+            key: ty::WithOptParam<LocalDefId>\n+        ) -> &'tcx ty::TypeckTables<'tcx> {\n+            desc {\n+                |tcx| \"type-checking the potential const argument `{}`\",\n+                tcx.def_path_str(key.did.to_def_id()),\n+            }\n+        }\n         query diagnostic_only_typeck_tables_of(key: LocalDefId) -> &'tcx ty::TypeckTables<'tcx> {\n             desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n             cache_on_disk_if { true }"}, {"sha": "ad205e1f83b71f66944f058d9974b1bce87e96cc", "filename": "src/librustc_middle/ty/query/keys.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/178c6507f6f8bb8a8713151b12f29dfa650262ed/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178c6507f6f8bb8a8713151b12f29dfa650262ed/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs?ref=178c6507f6f8bb8a8713151b12f29dfa650262ed", "patch": "@@ -105,6 +105,17 @@ impl Key for DefId {\n     }\n }\n \n+impl Key for ty::WithOptParam<LocalDefId> {\n+    type CacheSelector = DefaultCacheSelector;\n+\n+    fn query_crate(&self) -> CrateNum {\n+        self.did.query_crate()\n+    }\n+    fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n+        self.did.default_span(tcx)\n+    }\n+}\n+\n impl Key for (DefId, DefId) {\n     type CacheSelector = DefaultCacheSelector;\n "}, {"sha": "4f792a07cc6003aca59a67072ee73aabe56fae9b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/178c6507f6f8bb8a8713151b12f29dfa650262ed/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178c6507f6f8bb8a8713151b12f29dfa650262ed/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=178c6507f6f8bb8a8713151b12f29dfa650262ed", "patch": "@@ -764,6 +764,7 @@ pub fn provide(providers: &mut Providers) {\n     method::provide(providers);\n     *providers = Providers {\n         typeck_item_bodies,\n+        typeck_tables_of_const_arg,\n         typeck_tables_of,\n         diagnostic_only_typeck_tables_of,\n         has_typeck_tables,\n@@ -955,9 +956,25 @@ where\n     val.fold_with(&mut FixupFolder { tcx })\n }\n \n+fn typeck_tables_of_const_arg<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def: ty::WithOptParam<LocalDefId>,\n+) -> &ty::TypeckTables<'tcx> {\n+    if let Some(param_did) = def.param_did {\n+        let fallback = move || tcx.type_of(param_did);\n+        typeck_tables_of_with_fallback(tcx, def.did, fallback)\n+    } else {\n+        tcx.typeck_tables_of(def.did)\n+    }\n+}\n+\n fn typeck_tables_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &ty::TypeckTables<'tcx> {\n-    let fallback = move || tcx.type_of(def_id.to_def_id());\n-    typeck_tables_of_with_fallback(tcx, def_id, fallback)\n+    if let param_did @ Some(_) = tcx.opt_const_param_of(def_id) {\n+        tcx.typeck_tables_of_const_arg(ty::WithOptParam { did: def_id, param_did })\n+    } else {\n+        let fallback = move || tcx.type_of(def_id.to_def_id());\n+        typeck_tables_of_with_fallback(tcx, def_id, fallback)\n+    }\n }\n \n /// Used only to get `TypeckTables` for type inference during error recovery."}]}