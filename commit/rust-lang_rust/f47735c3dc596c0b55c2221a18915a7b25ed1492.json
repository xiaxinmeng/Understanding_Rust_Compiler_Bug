{"sha": "f47735c3dc596c0b55c2221a18915a7b25ed1492", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NzczNWMzZGM1OTZjMGI1NWMyMjIxYTE4OTE1YTdiMjVlZDE0OTI=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-05-01T13:31:27Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-05-01T14:00:43Z"}, "message": "Ensure that users cannot use generated arguments.\n\nThis commit gensyms the generated ident for replacement arguments so\nthat users cannot refer to them. It also ensures that levenshtein\ndistance suggestions do not suggest gensymed identifiers.", "tree": {"sha": "07ba41492e8e495ad5dc7d5681399c8b03e9161f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07ba41492e8e495ad5dc7d5681399c8b03e9161f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f47735c3dc596c0b55c2221a18915a7b25ed1492", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlzJposACgkQAXYLT59T\n8VRymQ//Tz1jzhyOHK/Zi4pEnordr1cxSTcis13smbahM446RAVW/H5MRyr/uzZK\nfcC3A+quZDjB9JIpYMQ2lm4yg9QdyxljHxIJS8wd1NLyXYZ1Fu6JN4wQBWOQg/o1\nRRqVTjdHjCbieqUS0CORl4/vh/POE+C1I5LS54D5yXQVvboMXfrJB17Lze6W83py\n6fG2FH9nrsYSMXtXaVbdC8rireZDprcpDvgVt3JLHQV746QywlpYi3xhgUs0TRT8\n+x+EmrHHJ61uYxnwmYRESCfLjsUFsfkbwbatiRyvM0y35118JQ6V9Fq5PRSSVigk\n6eA3Vx/fswv4C+W3yf3rLmg7WpPyeIaZuLJYFYtDAR+lBtHOMitYjNLf/Qr1K5rv\nLMhBMyZG7gErZ53vdWuqnHDuzSDIJvRQehh2xXL2Mlxs3ICJdlEDHl6KWuw5wFAa\n8/7wnELA3TFck2dHkXUyxnICFFsnqx9DATdGu4FHu5feyfEJ82isRifRj32xbtX4\nbOgLRWtxDyax0HQrSeZNSf0BLb6/zLOBb7OYjMIj2aATnu/O6jRA4b3g8IDE/YoZ\n7YPfqNc3CMkn9eU7Dp+txf4exsKdtSz1pCUwWCJlzuJHGUzuP/OF5MF/9q9eBqG6\nlBlRJBmrJefjiAGveDJNmSb2yR9YHE4nxWgD4h5snqlWlDVZpNM=\n=9KFo\n-----END PGP SIGNATURE-----", "payload": "tree 07ba41492e8e495ad5dc7d5681399c8b03e9161f\nparent b05d5db87bd9a3f31729a5c48dc5dd5bec6dbd2d\nauthor David Wood <david@davidtw.co> 1556717487 +0100\ncommitter David Wood <david@davidtw.co> 1556719243 +0100\n\nEnsure that users cannot use generated arguments.\n\nThis commit gensyms the generated ident for replacement arguments so\nthat users cannot refer to them. It also ensures that levenshtein\ndistance suggestions do not suggest gensymed identifiers.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f47735c3dc596c0b55c2221a18915a7b25ed1492", "html_url": "https://github.com/rust-lang/rust/commit/f47735c3dc596c0b55c2221a18915a7b25ed1492", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f47735c3dc596c0b55c2221a18915a7b25ed1492/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b05d5db87bd9a3f31729a5c48dc5dd5bec6dbd2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b05d5db87bd9a3f31729a5c48dc5dd5bec6dbd2d", "html_url": "https://github.com/rust-lang/rust/commit/b05d5db87bd9a3f31729a5c48dc5dd5bec6dbd2d"}], "stats": {"total": 115, "additions": 104, "deletions": 11}, "files": [{"sha": "dcfe00069c5bd263b0497ce81dc0b562b36124ff", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f47735c3dc596c0b55c2221a18915a7b25ed1492/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47735c3dc596c0b55c2221a18915a7b25ed1492/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f47735c3dc596c0b55c2221a18915a7b25ed1492", "patch": "@@ -4183,7 +4183,7 @@ impl<'a> Resolver<'a> {\n         let add_module_candidates = |module: Module<'_>, names: &mut Vec<TypoSuggestion>| {\n             for (&(ident, _), resolution) in module.resolutions.borrow().iter() {\n                 if let Some(binding) = resolution.borrow().binding {\n-                    if filter_fn(binding.def()) {\n+                    if !ident.name.is_gensymed() && filter_fn(binding.def()) {\n                         names.push(TypoSuggestion {\n                             candidate: ident.name,\n                             article: binding.def().article(),\n@@ -4201,7 +4201,7 @@ impl<'a> Resolver<'a> {\n             for rib in self.ribs[ns].iter().rev() {\n                 // Locals and type parameters\n                 for (ident, def) in &rib.bindings {\n-                    if filter_fn(*def) {\n+                    if !ident.name.is_gensymed() && filter_fn(*def) {\n                         names.push(TypoSuggestion {\n                             candidate: ident.name,\n                             article: def.article(),\n@@ -4228,7 +4228,7 @@ impl<'a> Resolver<'a> {\n                                             index: CRATE_DEF_INDEX,\n                                         });\n \n-                                        if filter_fn(crate_mod) {\n+                                        if !ident.name.is_gensymed() && filter_fn(crate_mod) {\n                                             Some(TypoSuggestion {\n                                                 candidate: ident.name,\n                                                 article: \"a\",\n@@ -4251,13 +4251,16 @@ impl<'a> Resolver<'a> {\n             // Add primitive types to the mix\n             if filter_fn(Def::PrimTy(Bool)) {\n                 names.extend(\n-                    self.primitive_type_table.primitive_types.iter().map(|(name, _)| {\n-                        TypoSuggestion {\n-                            candidate: *name,\n-                            article: \"a\",\n-                            kind: \"primitive type\",\n-                        }\n-                    })\n+                    self.primitive_type_table.primitive_types\n+                        .iter()\n+                        .filter(|(name, _)| !name.is_gensymed())\n+                        .map(|(name, _)| {\n+                            TypoSuggestion {\n+                                candidate: *name,\n+                                article: \"a\",\n+                                kind: \"primitive type\",\n+                            }\n+                        })\n                 )\n             }\n         } else {"}, {"sha": "8d95b3900014dff8c9d2b1cefd1dfed7c154ccf2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f47735c3dc596c0b55c2221a18915a7b25ed1492/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47735c3dc596c0b55c2221a18915a7b25ed1492/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f47735c3dc596c0b55c2221a18915a7b25ed1492", "patch": "@@ -8878,7 +8878,7 @@ impl<'a> Parser<'a> {\n \n                 // Construct a name for our temporary argument.\n                 let name = format!(\"__arg{}\", index);\n-                let ident = Ident::from_str(&name);\n+                let ident = Ident::from_str(&name).gensym();\n \n                 // Check if this is a ident pattern, if so, we can optimize and avoid adding a\n                 // `let <pat> = __argN;` statement, instead just adding a `let <pat> = <pat>;`"}, {"sha": "10dc5e27f6f9f26763d31fd723d64cc16a20a4fe", "filename": "src/test/ui/async-await-drop-order-locals-are-hidden.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f47735c3dc596c0b55c2221a18915a7b25ed1492/src%2Ftest%2Fui%2Fasync-await-drop-order-locals-are-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47735c3dc596c0b55c2221a18915a7b25ed1492/src%2Ftest%2Fui%2Fasync-await-drop-order-locals-are-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await-drop-order-locals-are-hidden.rs?ref=f47735c3dc596c0b55c2221a18915a7b25ed1492", "patch": "@@ -0,0 +1,11 @@\n+// edition:2018\n+\n+#![allow(unused_variables)]\n+#![feature(async_await)]\n+\n+async fn foobar_async(x: u32, (a, _, _c): (u32, u32, u32), _: u32, _y: u32) {\n+    assert_eq!(__arg1, (1, 2, 3)); //~ ERROR cannot find value `__arg1` in this scope [E0425]\n+    assert_eq!(__arg2, 4); //~ ERROR cannot find value `__arg2` in this scope [E0425]\n+}\n+\n+fn main() {}"}, {"sha": "b988b85d63d1b8bf34b167b80ff9bc4956ead14f", "filename": "src/test/ui/async-await-drop-order-locals-are-hidden.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f47735c3dc596c0b55c2221a18915a7b25ed1492/src%2Ftest%2Fui%2Fasync-await-drop-order-locals-are-hidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f47735c3dc596c0b55c2221a18915a7b25ed1492/src%2Ftest%2Fui%2Fasync-await-drop-order-locals-are-hidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await-drop-order-locals-are-hidden.stderr?ref=f47735c3dc596c0b55c2221a18915a7b25ed1492", "patch": "@@ -0,0 +1,15 @@\n+error[E0425]: cannot find value `__arg1` in this scope\n+  --> $DIR/async-await-drop-order-locals-are-hidden.rs:7:16\n+   |\n+LL |     assert_eq!(__arg1, (1, 2, 3));\n+   |                ^^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `__arg2` in this scope\n+  --> $DIR/async-await-drop-order-locals-are-hidden.rs:8:16\n+   |\n+LL |     assert_eq!(__arg2, 4);\n+   |                ^^^^^^ not found in this scope\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "c21886f26f467e2176460fc166f95d0d9ee3cc6c", "filename": "src/test/ui/auxiliary/arc_wake.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f47735c3dc596c0b55c2221a18915a7b25ed1492/src%2Ftest%2Fui%2Fauxiliary%2Farc_wake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47735c3dc596c0b55c2221a18915a7b25ed1492/src%2Ftest%2Fui%2Fauxiliary%2Farc_wake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Farc_wake.rs?ref=f47735c3dc596c0b55c2221a18915a7b25ed1492", "patch": "@@ -0,0 +1,64 @@\n+// edition:2018\n+\n+use std::sync::Arc;\n+use std::task::{\n+    Waker, RawWaker, RawWakerVTable,\n+};\n+\n+macro_rules! waker_vtable {\n+    ($ty:ident) => {\n+        &RawWakerVTable::new(\n+            clone_arc_raw::<$ty>,\n+            wake_arc_raw::<$ty>,\n+            wake_by_ref_arc_raw::<$ty>,\n+            drop_arc_raw::<$ty>,\n+        )\n+    };\n+}\n+\n+pub trait ArcWake {\n+    fn wake(self: Arc<Self>);\n+\n+    fn wake_by_ref(arc_self: &Arc<Self>) {\n+        arc_self.clone().wake()\n+    }\n+\n+    fn into_waker(wake: Arc<Self>) -> Waker where Self: Sized\n+    {\n+        let ptr = Arc::into_raw(wake) as *const ();\n+\n+        unsafe {\n+            Waker::from_raw(RawWaker::new(ptr, waker_vtable!(Self)))\n+        }\n+    }\n+}\n+\n+unsafe fn increase_refcount<T: ArcWake>(data: *const ()) {\n+    // Retain Arc by creating a copy\n+    let arc: Arc<T> = Arc::from_raw(data as *const T);\n+    let arc_clone = arc.clone();\n+    // Forget the Arcs again, so that the refcount isn't decrased\n+    let _ = Arc::into_raw(arc);\n+    let _ = Arc::into_raw(arc_clone);\n+}\n+\n+unsafe fn clone_arc_raw<T: ArcWake>(data: *const ()) -> RawWaker {\n+    increase_refcount::<T>(data);\n+    RawWaker::new(data, waker_vtable!(T))\n+}\n+\n+unsafe fn drop_arc_raw<T: ArcWake>(data: *const ()) {\n+    // Drop Arc\n+    let _: Arc<T> = Arc::from_raw(data as *const T);\n+}\n+\n+unsafe fn wake_arc_raw<T: ArcWake>(data: *const ()) {\n+    let arc: Arc<T> = Arc::from_raw(data as *const T);\n+    ArcWake::wake(arc);\n+}\n+\n+unsafe fn wake_by_ref_arc_raw<T: ArcWake>(data: *const ()) {\n+    let arc: Arc<T> = Arc::from_raw(data as *const T);\n+    ArcWake::wake_by_ref(&arc);\n+    let _ = Arc::into_raw(arc);\n+}"}]}