{"sha": "72f95aac1ba1891fcf13b568514520205e3c848b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZjk1YWFjMWJhMTg5MWZjZjEzYjU2ODUxNDUyMDIwNWUzYzg0OGI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-16T22:24:27Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-17T00:14:16Z"}, "message": "Move retrace_path() implementation to DefPathTable", "tree": {"sha": "47caa9bd7f458a5f454ce5c3ff925f799397fe98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47caa9bd7f458a5f454ce5c3ff925f799397fe98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72f95aac1ba1891fcf13b568514520205e3c848b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72f95aac1ba1891fcf13b568514520205e3c848b", "html_url": "https://github.com/rust-lang/rust/commit/72f95aac1ba1891fcf13b568514520205e3c848b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72f95aac1ba1891fcf13b568514520205e3c848b/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea733b589c2c12b1b635d18ec033122eaa3e0d06", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea733b589c2c12b1b635d18ec033122eaa3e0d06", "html_url": "https://github.com/rust-lang/rust/commit/ea733b589c2c12b1b635d18ec033122eaa3e0d06"}], "stats": {"total": 128, "additions": 65, "deletions": 63}, "files": [{"sha": "16b8880b36fea71f710fc3b81968e524842b598f", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/72f95aac1ba1891fcf13b568514520205e3c848b/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f95aac1ba1891fcf13b568514520205e3c848b/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=72f95aac1ba1891fcf13b568514520205e3c848b", "patch": "@@ -15,8 +15,6 @@\n //! There are also some rather random cases (like const initializer\n //! expressions) that are mostly just leftovers.\n \n-\n-\n use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n@@ -57,6 +55,37 @@ impl DefPathTable {\n     pub fn contains_key(&self, key: &DefKey) -> bool {\n         self.key_to_index.contains_key(key)\n     }\n+\n+    pub fn retrace_path(&self,\n+                        path_data: &[DisambiguatedDefPathData])\n+                        -> Option<DefIndex> {\n+        let root_key = DefKey {\n+            parent: None,\n+            disambiguated_data: DisambiguatedDefPathData {\n+                data: DefPathData::CrateRoot,\n+                disambiguator: 0,\n+            },\n+        };\n+\n+        let root_index = self.key_to_index\n+                             .get(&root_key)\n+                             .expect(\"no root key?\")\n+                             .clone();\n+\n+        debug!(\"retrace_path: root_index={:?}\", root_index);\n+\n+        let mut index = root_index;\n+        for data in path_data {\n+            let key = DefKey { parent: Some(index), disambiguated_data: data.clone() };\n+            debug!(\"retrace_path: key={:?}\", key);\n+            match self.key_to_index.get(&key) {\n+                Some(&i) => index = i,\n+                None => return None,\n+            }\n+        }\n+\n+        Some(index)\n+    }\n }\n \n "}, {"sha": "88fac105bf55a0f7e82d0697ed23e7043d595d64", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/72f95aac1ba1891fcf13b568514520205e3c848b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f95aac1ba1891fcf13b568514520205e3c848b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=72f95aac1ba1891fcf13b568514520205e3c848b", "patch": "@@ -25,7 +25,7 @@\n use hir::def::{self, Def};\n use hir::def_id::{CrateNum, DefId, DefIndex};\n use hir::map as hir_map;\n-use hir::map::definitions::{Definitions, DefKey};\n+use hir::map::definitions::{Definitions, DefKey, DisambiguatedDefPathData};\n use hir::svh::Svh;\n use middle::lang_items;\n use ty::{self, Ty, TyCtxt};\n@@ -336,11 +336,11 @@ pub trait CrateStore<'tcx> {\n     fn is_no_builtins(&self, cnum: CrateNum) -> bool;\n \n     // resolve\n-    fn def_index_for_def_key(&self,\n-                             cnum: CrateNum,\n-                             def: DefKey)\n-                             -> Option<DefIndex>;\n-    fn def_key(&self, def: DefId) -> hir_map::DefKey;\n+    fn retrace_path(&self,\n+                    cnum: CrateNum,\n+                    path_data: &[DisambiguatedDefPathData])\n+                    -> Option<DefId>;\n+    fn def_key(&self, def: DefId) -> DefKey;\n     fn relative_def_path(&self, def: DefId) -> Option<hir_map::DefPath>;\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>;\n     fn item_children(&self, did: DefId) -> Vec<def::Export>;\n@@ -442,12 +442,6 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n \n     // trait info\n     fn implementations_of_trait(&self, filter: Option<DefId>) -> Vec<DefId> { vec![] }\n-    fn def_index_for_def_key(&self,\n-                             cnum: CrateNum,\n-                             def: DefKey)\n-                             -> Option<DefIndex> {\n-        None\n-    }\n \n     // impl info\n     fn associated_item_def_ids(&self, def_id: DefId) -> Vec<DefId>\n@@ -508,7 +502,14 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn is_no_builtins(&self, cnum: CrateNum) -> bool { bug!(\"is_no_builtins\") }\n \n     // resolve\n-    fn def_key(&self, def: DefId) -> hir_map::DefKey { bug!(\"def_key\") }\n+    fn retrace_path(&self,\n+                    cnum: CrateNum,\n+                    path_data: &[DisambiguatedDefPathData])\n+                    -> Option<DefId> {\n+        None\n+    }\n+\n+    fn def_key(&self, def: DefId) -> DefKey { bug!(\"def_key\") }\n     fn relative_def_path(&self, def: DefId) -> Option<hir_map::DefPath> {\n         bug!(\"relative_def_path\")\n     }"}, {"sha": "001d18b95cac01582b955994a4f8e649b4e320aa", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 10, "deletions": 39, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/72f95aac1ba1891fcf13b568514520205e3c848b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f95aac1ba1891fcf13b568514520205e3c848b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=72f95aac1ba1891fcf13b568514520205e3c848b", "patch": "@@ -15,9 +15,9 @@ use session::Session;\n use middle;\n use hir::TraitMap;\n use hir::def::Def;\n-use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n+use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use hir::map as ast_map;\n-use hir::map::{DefKey, DefPathData, DisambiguatedDefPathData};\n+use hir::map::DisambiguatedDefPathData;\n use middle::free_region::FreeRegionMap;\n use middle::region::RegionMaps;\n use middle::resolve_lifetime;\n@@ -627,50 +627,21 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// Given a def-key `key` and a crate `krate`, finds the def-index\n-    /// that `krate` assigned to `key`. This `DefIndex` will always be\n-    /// relative to `krate`.\n-    ///\n-    /// Returns `None` if there is no `DefIndex` with that key.\n-    pub fn def_index_for_def_key(self, krate: CrateNum, key: DefKey)\n-                                 -> Option<DefIndex> {\n-        if krate == LOCAL_CRATE {\n-            self.map.def_index_for_def_key(key)\n-        } else {\n-            self.sess.cstore.def_index_for_def_key(krate, key)\n-        }\n-    }\n-\n     pub fn retrace_path(self,\n                         krate: CrateNum,\n                         path_data: &[DisambiguatedDefPathData])\n                         -> Option<DefId> {\n         debug!(\"retrace_path(path={:?}, krate={:?})\", path_data, self.crate_name(krate));\n \n-        let root_key = DefKey {\n-            parent: None,\n-            disambiguated_data: DisambiguatedDefPathData {\n-                data: DefPathData::CrateRoot,\n-                disambiguator: 0,\n-            },\n-        };\n-\n-        let root_index = self.def_index_for_def_key(krate, root_key)\n-                             .expect(\"no root key?\");\n-\n-        debug!(\"retrace_path: root_index={:?}\", root_index);\n-\n-        let mut index = root_index;\n-        for data in path_data {\n-            let key = DefKey { parent: Some(index), disambiguated_data: data.clone() };\n-            debug!(\"retrace_path: key={:?}\", key);\n-            match self.def_index_for_def_key(krate, key) {\n-                Some(i) => index = i,\n-                None => return None,\n-            }\n+        if krate == LOCAL_CRATE {\n+            self.map\n+                .definitions()\n+                .def_path_table()\n+                .retrace_path(path_data)\n+                .map(|def_index| DefId { krate: krate, index: def_index })\n+        } else {\n+            self.sess.cstore.retrace_path(krate, path_data)\n         }\n-\n-        Some(DefId { krate: krate, index: index })\n     }\n \n     pub fn type_parameter_def(self,"}, {"sha": "bcb30982e1f700a1482ea39b68dcef724a975a69", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/72f95aac1ba1891fcf13b568514520205e3c848b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f95aac1ba1891fcf13b568514520205e3c848b/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=72f95aac1ba1891fcf13b568514520205e3c848b", "patch": "@@ -22,8 +22,7 @@ use rustc::ty::{self, Ty, TyCtxt};\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n \n use rustc::dep_graph::DepNode;\n-use rustc::hir::map as hir_map;\n-use rustc::hir::map::DefKey;\n+use rustc::hir::map::{DefKey, DefPath, DisambiguatedDefPathData};\n use rustc::mir::Mir;\n use rustc::util::nodemap::{NodeSet, DefIdMap};\n use rustc_back::PanicStrategy;\n@@ -336,18 +335,20 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(cnum).is_no_builtins()\n     }\n \n-    fn def_index_for_def_key(&self,\n-                             cnum: CrateNum,\n-                             def: DefKey)\n-                             -> Option<DefIndex> {\n+    fn retrace_path(&self,\n+                    cnum: CrateNum,\n+                    path: &[DisambiguatedDefPathData])\n+                    -> Option<DefId> {\n         let cdata = self.get_crate_data(cnum);\n-        cdata.def_path_table.def_index_for_def_key(&def)\n+        cdata.def_path_table\n+             .retrace_path(&path)\n+             .map(|index| DefId { krate: cnum, index: index })\n     }\n \n     /// Returns the `DefKey` for a given `DefId`. This indicates the\n     /// parent `DefId` as well as some idea of what kind of data the\n     /// `DefId` refers to.\n-    fn def_key(&self, def: DefId) -> hir_map::DefKey {\n+    fn def_key(&self, def: DefId) -> DefKey {\n         // Note: loading the def-key (or def-path) for a def-id is not\n         // a *read* of its metadata. This is because the def-id is\n         // really just an interned shorthand for a def-path, which is the\n@@ -357,7 +358,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(def.krate).def_key(def.index)\n     }\n \n-    fn relative_def_path(&self, def: DefId) -> Option<hir_map::DefPath> {\n+    fn relative_def_path(&self, def: DefId) -> Option<DefPath> {\n         // See `Note` above in `def_key()` for why this read is\n         // commented out:\n         //"}]}