{"sha": "1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MDlhMDMwM2E5MmMwOTM4ZTlmNTdiMWMzMjE0OGNmYTJhNGZmNzE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-31T17:19:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-31T17:19:51Z"}, "message": "Rollup merge of #59580 - taiki-e:coerce-closure, r=oli-obk\n\nAllow closure to unsafe fn coercion\n\nCloses #57883", "tree": {"sha": "89f7156bbaecefbf602b4f7d9346de2e40e617b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89f7156bbaecefbf602b4f7d9346de2e40e617b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcoPa4CRBK7hj4Ov3rIwAAdHIIAGc6BIUabZeI+gAzZr/eXrb6\nzogjR+vx2F7mpDRg20UYn2XldDJhIgCFKEFODpIJGeALPgluN+PLKueZVq9G8FT7\n62JWUPg6Z4rb3Eqg/ySTU5jJDMZyXCSq96nZvm2qw+gsxVpawucTYfDDjt4UAHDG\nYCIAcuoXJe+RGeZrKy7jewyvuNWMj7ThgCUM3dOhdCKZ3Tf8pCnyjacFCQPImlsi\nFbTvMOqNYkI00ZvrjoJoUahNKoTzVQ0w4cs/+PZ2hVulgaohGqwVG6lHw+a1CXMT\nzm2eo6agv6VAce71DN8deS/lB1RfjOrRxIOh9/UEXKwzZiI07BhctkNkUxcV/bM=\n=2l4D\n-----END PGP SIGNATURE-----\n", "payload": "tree 89f7156bbaecefbf602b4f7d9346de2e40e617b9\nparent 0171fe55986abd7e9ac33839db1676fd3ed6c03a\nparent 07021e07edf30384203b43024f5bc81ac84a9574\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1554052791 +0200\ncommitter GitHub <noreply@github.com> 1554052791 +0200\n\nRollup merge of #59580 - taiki-e:coerce-closure, r=oli-obk\n\nAllow closure to unsafe fn coercion\n\nCloses #57883\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "html_url": "https://github.com/rust-lang/rust/commit/1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0171fe55986abd7e9ac33839db1676fd3ed6c03a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0171fe55986abd7e9ac33839db1676fd3ed6c03a", "html_url": "https://github.com/rust-lang/rust/commit/0171fe55986abd7e9ac33839db1676fd3ed6c03a"}, {"sha": "07021e07edf30384203b43024f5bc81ac84a9574", "url": "https://api.github.com/repos/rust-lang/rust/commits/07021e07edf30384203b43024f5bc81ac84a9574", "html_url": "https://github.com/rust-lang/rust/commit/07021e07edf30384203b43024f5bc81ac84a9574"}], "stats": {"total": 77, "additions": 50, "deletions": 27}, "files": [{"sha": "4f630fe9a3911212adad37dcc1d0c34b7299d4d0", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "patch": "@@ -707,7 +707,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 adjustment::Adjust::NeverToAny |\n                 adjustment::Adjust::ReifyFnPointer |\n                 adjustment::Adjust::UnsafeFnPointer |\n-                adjustment::Adjust::ClosureFnPointer |\n+                adjustment::Adjust::ClosureFnPointer(_) |\n                 adjustment::Adjust::MutToConstPointer |\n                 adjustment::Adjust::Unsize => {\n                     // Creating a closure/fn-pointer or unsizing consumes"}, {"sha": "1a3fef18404e3793c0d0b3d4ca56bd5761494cd1", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "patch": "@@ -621,7 +621,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             adjustment::Adjust::NeverToAny |\n             adjustment::Adjust::ReifyFnPointer |\n             adjustment::Adjust::UnsafeFnPointer |\n-            adjustment::Adjust::ClosureFnPointer |\n+            adjustment::Adjust::ClosureFnPointer(_) |\n             adjustment::Adjust::MutToConstPointer |\n             adjustment::Adjust::Borrow(_) |\n             adjustment::Adjust::Unsize => {"}, {"sha": "7b419e306db600f6af763417ec3aea5ff5eeb4e6", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "patch": "@@ -2247,8 +2247,9 @@ pub enum CastKind {\n     /// Converts unique, zero-sized type for a fn to fn()\n     ReifyFnPointer,\n \n-    /// Converts non capturing closure to fn()\n-    ClosureFnPointer,\n+    /// Converts non capturing closure to fn() or unsafe fn().\n+    /// It cannot convert a closure that requires unsafe.\n+    ClosureFnPointer(hir::Unsafety),\n \n     /// Converts safe fn() to unsafe fn()\n     UnsafeFnPointer,"}, {"sha": "c2ef08c4c40fe1ddda50ef6d4f3ec4400c588b1a", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "patch": "@@ -62,8 +62,9 @@ pub enum Adjust<'tcx> {\n     /// Go from a safe fn pointer to an unsafe fn pointer.\n     UnsafeFnPointer,\n \n-    /// Go from a non-capturing closure to an fn pointer.\n-    ClosureFnPointer,\n+    /// Go from a non-capturing closure to an fn pointer or an unsafe fn pointer.\n+    /// It cannot convert a closure that requires unsafe.\n+    ClosureFnPointer(hir::Unsafety),\n \n     /// Go from a mut raw pointer to a const raw pointer.\n     MutToConstPointer,"}, {"sha": "77330c7a9d1b26a9fcfdf11c670ae575389de900", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "patch": "@@ -2441,7 +2441,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// type with the same signature. Detuples and so forth -- so\n     /// e.g., if we have a sig with `Fn<(u32, i32)>` then you would get\n     /// a `fn(u32, i32)`.\n-    pub fn coerce_closure_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {\n+    /// `unsafety` determines the unsafety of the `fn` type. If you pass\n+    /// `hir::Unsafety::Unsafe` in the previous example, then you would get\n+    /// an `unsafe fn (u32, i32)`.\n+    /// It cannot convert a closure that requires unsafe.\n+    pub fn coerce_closure_fn_ty(self, sig: PolyFnSig<'tcx>, unsafety: hir::Unsafety) -> Ty<'tcx> {\n         let converted_sig = sig.map_bound(|s| {\n             let params_iter = match s.inputs()[0].sty {\n                 ty::Tuple(params) => {\n@@ -2453,7 +2457,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 params_iter,\n                 s.output(),\n                 s.c_variadic,\n-                hir::Unsafety::Normal,\n+                unsafety,\n                 abi::Abi::Rust,\n             )\n         });"}, {"sha": "4f1fda3f4e5348679f02ee18d7aa373def13e285", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "patch": "@@ -630,8 +630,8 @@ impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::Adjust<'a> {\n                 Some(ty::adjustment::Adjust::ReifyFnPointer),\n             ty::adjustment::Adjust::UnsafeFnPointer =>\n                 Some(ty::adjustment::Adjust::UnsafeFnPointer),\n-            ty::adjustment::Adjust::ClosureFnPointer =>\n-                Some(ty::adjustment::Adjust::ClosureFnPointer),\n+            ty::adjustment::Adjust::ClosureFnPointer(unsafety) =>\n+                Some(ty::adjustment::Adjust::ClosureFnPointer(unsafety)),\n             ty::adjustment::Adjust::MutToConstPointer =>\n                 Some(ty::adjustment::Adjust::MutToConstPointer),\n             ty::adjustment::Adjust::Unsize =>\n@@ -1187,7 +1187,7 @@ EnumTypeFoldableImpl! {\n         (ty::adjustment::Adjust::NeverToAny),\n         (ty::adjustment::Adjust::ReifyFnPointer),\n         (ty::adjustment::Adjust::UnsafeFnPointer),\n-        (ty::adjustment::Adjust::ClosureFnPointer),\n+        (ty::adjustment::Adjust::ClosureFnPointer)(a),\n         (ty::adjustment::Adjust::MutToConstPointer),\n         (ty::adjustment::Adjust::Unsize),\n         (ty::adjustment::Adjust::Deref)(a),"}, {"sha": "53640284a2ca94b1f84dce4b81ecfd2e30bb792b", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "patch": "@@ -193,7 +193,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             }\n                         }\n                     }\n-                    mir::CastKind::ClosureFnPointer => {\n+                    mir::CastKind::ClosureFnPointer(_) => {\n                         match operand.layout.ty.sty {\n                             ty::Closure(def_id, substs) => {\n                                 let instance = monomorphize::resolve_closure("}, {"sha": "3b559b28f12355210084bd634b180ee10563030e", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "patch": "@@ -1999,14 +1999,14 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         }\n                     }\n \n-                    CastKind::ClosureFnPointer => {\n+                    CastKind::ClosureFnPointer(unsafety) => {\n                         let sig = match op.ty(mir, tcx).sty {\n                             ty::Closure(def_id, substs) => {\n                                 substs.closure_sig_ty(def_id, tcx).fn_sig(tcx)\n                             }\n                             _ => bug!(),\n                         };\n-                        let ty_fn_ptr_from = tcx.coerce_closure_fn_ty(sig);\n+                        let ty_fn_ptr_from = tcx.coerce_closure_fn_ty(sig, *unsafety);\n \n                         if let Err(terr) = self.eq_types(\n                             ty_fn_ptr_from,"}, {"sha": "84f74484e606f2499df4f163d4c9f4b367cbd71b", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "patch": "@@ -162,9 +162,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let source = unpack!(block = this.as_operand(block, scope, source));\n                 block.and(Rvalue::Cast(CastKind::UnsafeFnPointer, source, expr.ty))\n             }\n-            ExprKind::ClosureFnPointer { source } => {\n+            ExprKind::ClosureFnPointer { source, unsafety } => {\n                 let source = unpack!(block = this.as_operand(block, scope, source));\n-                block.and(Rvalue::Cast(CastKind::ClosureFnPointer, source, expr.ty))\n+                block.and(Rvalue::Cast(CastKind::ClosureFnPointer(unsafety), source, expr.ty))\n             }\n             ExprKind::MutToConstPointer { source } => {\n                 let source = unpack!(block = this.as_operand(block, scope, source));"}, {"sha": "91113dc2271bec57e5f8fef659a8bedbfb55b7db", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "patch": "@@ -81,8 +81,8 @@ fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         Adjust::UnsafeFnPointer => {\n             ExprKind::UnsafeFnPointer { source: expr.to_ref() }\n         }\n-        Adjust::ClosureFnPointer => {\n-            ExprKind::ClosureFnPointer { source: expr.to_ref() }\n+        Adjust::ClosureFnPointer(unsafety) => {\n+            ExprKind::ClosureFnPointer { source: expr.to_ref(), unsafety }\n         }\n         Adjust::NeverToAny => {\n             ExprKind::NeverToAny { source: expr.to_ref() }"}, {"sha": "a661649db0fd4296ed3273474a9d8fedf5e6e695", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "patch": "@@ -185,6 +185,7 @@ pub enum ExprKind<'tcx> {\n     },\n     ClosureFnPointer {\n         source: ExprRef<'tcx>,\n+        unsafety: hir::Unsafety,\n     },\n     UnsafeFnPointer {\n         source: ExprRef<'tcx>,"}, {"sha": "fe719bff250a84471be0a12a060feb9b4291b9f8", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "patch": "@@ -104,7 +104,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                 }\n             }\n \n-            ClosureFnPointer => {\n+            ClosureFnPointer(_) => {\n                 // The src operand does not matter, just its type\n                 match src.layout.ty.sty {\n                     ty::Closure(def_id, substs) => {"}, {"sha": "45b346b641362fbc9915be97ecd59f6d46cce657", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "patch": "@@ -563,7 +563,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 );\n                 visit_fn_use(self.tcx, fn_ty, false, &mut self.output);\n             }\n-            mir::Rvalue::Cast(mir::CastKind::ClosureFnPointer, ref operand, _) => {\n+            mir::Rvalue::Cast(mir::CastKind::ClosureFnPointer(_), ref operand, _) => {\n                 let source_ty = operand.ty(self.mir, self.tcx);\n                 let source_ty = self.tcx.subst_and_normalize_erasing_regions(\n                     self.param_substs,"}, {"sha": "9bd5fce31f1a2e9bcb4d3e195e19601514b7f837", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "patch": "@@ -1105,7 +1105,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n             Rvalue::CheckedBinaryOp(..) |\n             Rvalue::Cast(CastKind::ReifyFnPointer, ..) |\n             Rvalue::Cast(CastKind::UnsafeFnPointer, ..) |\n-            Rvalue::Cast(CastKind::ClosureFnPointer, ..) |\n+            Rvalue::Cast(CastKind::ClosureFnPointer(_), ..) |\n             Rvalue::Cast(CastKind::Unsize, ..) |\n             Rvalue::Cast(CastKind::MutToConstPointer, ..) |\n             Rvalue::Discriminant(..) |"}, {"sha": "87459571b529cba42d32499fa8dcf31decd35759", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "patch": "@@ -156,7 +156,7 @@ fn check_rvalue(\n             check_operand(tcx, mir, operand, span)\n         }\n         Rvalue::Cast(CastKind::UnsafeFnPointer, _, _) |\n-        Rvalue::Cast(CastKind::ClosureFnPointer, _, _) |\n+        Rvalue::Cast(CastKind::ClosureFnPointer(_), _, _) |\n         Rvalue::Cast(CastKind::ReifyFnPointer, _, _) => Err((\n             span,\n             \"function pointer casts are not allowed in const fn\".into(),"}, {"sha": "7c37c38f2d741f6503f3442d7c8ebcfca23f82b1", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "patch": "@@ -586,7 +586,7 @@ fn check_adjustments<'a, 'tcx>(\n             Adjust::NeverToAny |\n             Adjust::ReifyFnPointer |\n             Adjust::UnsafeFnPointer |\n-            Adjust::ClosureFnPointer |\n+            Adjust::ClosureFnPointer(_) |\n             Adjust::MutToConstPointer |\n             Adjust::Borrow(_) |\n             Adjust::Unsize => {}"}, {"sha": "c470bc09e8cd0173d20504a4c73e551143fe006b", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "patch": "@@ -225,7 +225,8 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n             }\n             ty::Closure(def_id_a, substs_a) => {\n                 // Non-capturing closures are coercible to\n-                // function pointers\n+                // function pointers or unsafe function pointers.\n+                // It cannot convert closures that require unsafe.\n                 self.coerce_closure_to_fn(a, def_id_a, substs_a, b)\n             }\n             _ => {\n@@ -714,16 +715,19 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n \n         let hir_id_a = self.tcx.hir().as_local_hir_id(def_id_a).unwrap();\n         match b.sty {\n-            ty::FnPtr(_) if self.tcx.with_freevars(hir_id_a, |v| v.is_empty()) => {\n+            ty::FnPtr(fn_ty) if self.tcx.with_freevars(hir_id_a, |v| v.is_empty()) => {\n                 // We coerce the closure, which has fn type\n                 //     `extern \"rust-call\" fn((arg0,arg1,...)) -> _`\n                 // to\n                 //     `fn(arg0,arg1,...) -> _`\n+                // or\n+                //     `unsafe fn(arg0,arg1,...) -> _`\n                 let sig = self.closure_sig(def_id_a, substs_a);\n-                let pointer_ty = self.tcx.coerce_closure_fn_ty(sig);\n+                let unsafety = fn_ty.unsafety();\n+                let pointer_ty = self.tcx.coerce_closure_fn_ty(sig, unsafety);\n                 debug!(\"coerce_closure_to_fn(a={:?}, b={:?}, pty={:?})\",\n                        a, b, pointer_ty);\n-                self.unify_and(pointer_ty, b, simple(Adjust::ClosureFnPointer))\n+                self.unify_and(pointer_ty, b, simple(Adjust::ClosureFnPointer(unsafety)))\n             }\n             _ => self.unify_and(a, b, identity),\n         }"}, {"sha": "36777693faba0cd54886175384087bbf0d78d476", "filename": "src/test/compile-fail/coerce-unsafe-closure-to-unsafe-fn-ptr.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Ftest%2Fcompile-fail%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Ftest%2Fcompile-fail%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.rs?ref=1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let _: unsafe fn() = || { ::std::pin::Pin::new_unchecked(&0_u8); };\n+    //~^ ERROR E0133\n+    let _: unsafe fn() = || unsafe { ::std::pin::Pin::new_unchecked(&0_u8); }; // OK\n+}"}, {"sha": "fe15b912d6029181a7a66b6a5aa031a33d5938cc", "filename": "src/test/run-pass/typeck-closure-to-unsafe-fn-ptr.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Ftest%2Frun-pass%2Ftypeck-closure-to-unsafe-fn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1909a0303a92c0938e9f57b1c32148cfa2a4ff71/src%2Ftest%2Frun-pass%2Ftypeck-closure-to-unsafe-fn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeck-closure-to-unsafe-fn-ptr.rs?ref=1909a0303a92c0938e9f57b1c32148cfa2a4ff71", "patch": "@@ -0,0 +1,7 @@\n+unsafe fn call_unsafe(func: unsafe fn() -> ()) -> () {\n+    func()\n+}\n+\n+pub fn main() {\n+    unsafe { call_unsafe(|| {}); }\n+}"}]}