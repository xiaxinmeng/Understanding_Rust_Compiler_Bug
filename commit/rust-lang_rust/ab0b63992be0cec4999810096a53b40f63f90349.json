{"sha": "ab0b63992be0cec4999810096a53b40f63f90349", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMGI2Mzk5MmJlMGNlYzQ5OTk4MTAwOTZhNTNiNDBmNjNmOTAzNDk=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-25T14:15:40Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-25T14:27:15Z"}, "message": "Implement basic completion for fields", "tree": {"sha": "5e6dca70c4e842bc87e6e1287cca176031ecc92f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e6dca70c4e842bc87e6e1287cca176031ecc92f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab0b63992be0cec4999810096a53b40f63f90349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab0b63992be0cec4999810096a53b40f63f90349", "html_url": "https://github.com/rust-lang/rust/commit/ab0b63992be0cec4999810096a53b40f63f90349", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab0b63992be0cec4999810096a53b40f63f90349/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d724ea572a5dd26acbbf2eb4538eabe454fb894", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d724ea572a5dd26acbbf2eb4538eabe454fb894", "html_url": "https://github.com/rust-lang/rust/commit/0d724ea572a5dd26acbbf2eb4538eabe454fb894"}], "stats": {"total": 168, "additions": 156, "deletions": 12}, "files": [{"sha": "fe580700ff942c27c2767c9d57b8487e2c9fc25e", "filename": "crates/ra_analysis/src/completion.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab0b63992be0cec4999810096a53b40f63f90349/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0b63992be0cec4999810096a53b40f63f90349/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs?ref=ab0b63992be0cec4999810096a53b40f63f90349", "patch": "@@ -1,6 +1,7 @@\n mod completion_item;\n mod completion_context;\n \n+mod complete_dot;\n mod complete_fn_param;\n mod complete_keyword;\n mod complete_snippet;\n@@ -20,13 +21,13 @@ use crate::{\n \n pub use crate::completion::completion_item::{CompletionItem, InsertText, CompletionItemKind};\n \n-/// Main entry point for copmletion. We run comletion as a two-phase process.\n+/// Main entry point for completion. We run completion as a two-phase process.\n ///\n /// First, we look at the position and collect a so-called `CompletionContext.\n /// This is a somewhat messy process, because, during completion, syntax tree is\n-/// incomplete and can look readlly weired.\n+/// incomplete and can look really weird.\n ///\n-/// Once the context is collected, we run a series of completion routines whihc\n+/// Once the context is collected, we run a series of completion routines which\n /// look at the context and produce completion items.\n pub(crate) fn completions(\n     db: &db::RootDatabase,\n@@ -43,6 +44,7 @@ pub(crate) fn completions(\n     complete_snippet::complete_item_snippet(&mut acc, &ctx);\n     complete_path::complete_path(&mut acc, &ctx)?;\n     complete_scope::complete_scope(&mut acc, &ctx)?;\n+    complete_dot::complete_dot(&mut acc, &ctx)?;\n \n     Ok(Some(acc))\n }"}, {"sha": "fa62da2105237cd95ac5cbebf7582648f5fce6fe", "filename": "crates/ra_analysis/src/completion/complete_dot.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/ab0b63992be0cec4999810096a53b40f63f90349/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0b63992be0cec4999810096a53b40f63f90349/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=ab0b63992be0cec4999810096a53b40f63f90349", "patch": "@@ -0,0 +1,98 @@\n+use ra_syntax::ast::AstNode;\n+use hir::{Ty, Def};\n+\n+use crate::Cancelable;\n+use crate::completion::{CompletionContext, Completions, CompletionKind, CompletionItem, CompletionItemKind};\n+\n+/// Complete dot accesses, i.e. fields or methods (currently only fields).\n+pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) -> Cancelable<()> {\n+    let module = if let Some(module) = &ctx.module {\n+        module\n+    } else {\n+        return Ok(());\n+    };\n+    let function = if let Some(fn_def) = ctx.enclosing_fn {\n+        hir::source_binder::function_from_module(ctx.db, module, fn_def)\n+    } else {\n+        return Ok(());\n+    };\n+    let receiver = if let Some(receiver) = ctx.dot_receiver {\n+        receiver\n+    } else {\n+        return Ok(());\n+    };\n+    let infer_result = function.infer(ctx.db)?;\n+    let receiver_ty = if let Some(ty) = infer_result.type_of_node(receiver.syntax()) {\n+        ty\n+    } else {\n+        return Ok(());\n+    };\n+    if !ctx.is_method_call {\n+        complete_fields(acc, ctx, receiver_ty)?;\n+    }\n+    Ok(())\n+}\n+\n+fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, ty: Ty) -> Cancelable<()> {\n+    // TODO: autoderef etc.\n+    match ty {\n+        Ty::Adt { def_id, .. } => {\n+            match def_id.resolve(ctx.db)? {\n+                Def::Struct(s) => {\n+                    let variant_data = s.variant_data(ctx.db)?;\n+                    for field in variant_data.fields() {\n+                        CompletionItem::new(CompletionKind::Reference, field.name().to_string())\n+                            .kind(CompletionItemKind::Field)\n+                            .add_to(acc);\n+                    }\n+                }\n+                // TODO unions\n+                _ => {}\n+            }\n+        }\n+        Ty::Tuple(fields) => {\n+            for (i, _ty) in fields.iter().enumerate() {\n+                CompletionItem::new(CompletionKind::Reference, i.to_string())\n+                    .kind(CompletionItemKind::Field)\n+                    .add_to(acc);\n+            }\n+        }\n+        _ => {}\n+    };\n+    Ok(())\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::completion::*;\n+\n+    fn check_ref_completion(code: &str, expected_completions: &str) {\n+        check_completion(code, expected_completions, CompletionKind::Reference);\n+    }\n+\n+    #[test]\n+    fn test_struct_field_completion() {\n+        check_ref_completion(\n+            r\"\n+            struct A { the_field: u32 }\n+            fn foo(a: A) {\n+               a.<|>\n+            }\n+            \",\n+            r#\"the_field\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_no_struct_field_completion_for_method_call() {\n+        check_ref_completion(\n+            r\"\n+            struct A { the_field: u32 }\n+            fn foo(a: A) {\n+               a.<|>()\n+            }\n+            \",\n+            r#\"\"#,\n+        );\n+    }\n+}"}, {"sha": "12e98e870cd281f4c18f1a8f68a77d185d39cde5", "filename": "crates/ra_analysis/src/completion/completion_context.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ab0b63992be0cec4999810096a53b40f63f90349/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0b63992be0cec4999810096a53b40f63f90349/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=ab0b63992be0cec4999810096a53b40f63f90349", "patch": "@@ -31,6 +31,10 @@ pub(super) struct CompletionContext<'a> {\n     pub(super) is_stmt: bool,\n     /// Something is typed at the \"top\" level, in module or impl/trait.\n     pub(super) is_new_item: bool,\n+    /// The receiver if this is a field or method access, i.e. writing something.<|>\n+    pub(super) dot_receiver: Option<ast::Expr<'a>>,\n+    /// If this is a method call in particular, i.e. the () are already there.\n+    pub(super) is_method_call: bool,\n }\n \n impl<'a> CompletionContext<'a> {\n@@ -54,6 +58,8 @@ impl<'a> CompletionContext<'a> {\n             after_if: false,\n             is_stmt: false,\n             is_new_item: false,\n+            dot_receiver: None,\n+            is_method_call: false,\n         };\n         ctx.fill(original_file, position.offset);\n         Ok(Some(ctx))\n@@ -105,6 +111,12 @@ impl<'a> CompletionContext<'a> {\n             _ => (),\n         }\n \n+        self.enclosing_fn = self\n+            .leaf\n+            .ancestors()\n+            .take_while(|it| it.kind() != SOURCE_FILE && it.kind() != MODULE)\n+            .find_map(ast::FnDef::cast);\n+\n         let parent = match name_ref.syntax().parent() {\n             Some(it) => it,\n             None => return,\n@@ -120,11 +132,6 @@ impl<'a> CompletionContext<'a> {\n             }\n             if path.qualifier().is_none() {\n                 self.is_trivial_path = true;\n-                self.enclosing_fn = self\n-                    .leaf\n-                    .ancestors()\n-                    .take_while(|it| it.kind() != SOURCE_FILE && it.kind() != MODULE)\n-                    .find_map(ast::FnDef::cast);\n \n                 self.is_stmt = match name_ref\n                     .syntax()\n@@ -145,6 +152,23 @@ impl<'a> CompletionContext<'a> {\n                 }\n             }\n         }\n+        if let Some(_field_expr) = ast::FieldExpr::cast(parent) {\n+            self.dot_receiver = self\n+                .leaf\n+                .ancestors()\n+                .take_while(|it| it.kind() != SOURCE_FILE && it.kind() != MODULE)\n+                .find_map(ast::FieldExpr::cast)\n+                .and_then(ast::FieldExpr::expr);\n+        }\n+        if let Some(_method_call_expr) = ast::MethodCallExpr::cast(parent) {\n+            self.dot_receiver = self\n+                .leaf\n+                .ancestors()\n+                .take_while(|it| it.kind() != SOURCE_FILE && it.kind() != MODULE)\n+                .find_map(ast::MethodCallExpr::cast)\n+                .and_then(ast::MethodCallExpr::expr);\n+            self.is_method_call = true;\n+        }\n     }\n }\n "}, {"sha": "c9f9f495da88098b5ee7a96765c7d1efd2c1d003", "filename": "crates/ra_analysis/src/completion/completion_item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab0b63992be0cec4999810096a53b40f63f90349/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0b63992be0cec4999810096a53b40f63f90349/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=ab0b63992be0cec4999810096a53b40f63f90349", "patch": "@@ -30,6 +30,7 @@ pub enum CompletionItemKind {\n     Struct,\n     Enum,\n     Binding,\n+    Field,\n }\n \n #[derive(Debug, PartialEq, Eq)]"}, {"sha": "e65f8deb866cc171d59290266bdbb82362ef4aab", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab0b63992be0cec4999810096a53b40f63f90349/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0b63992be0cec4999810096a53b40f63f90349/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=ab0b63992be0cec4999810096a53b40f63f90349", "patch": "@@ -124,6 +124,15 @@ pub struct StructField {\n     ty: Ty,\n }\n \n+impl StructField {\n+    pub fn name(&self) -> SmolStr {\n+        self.name.clone()\n+    }\n+    pub fn ty(&self) -> Ty {\n+        self.ty.clone()\n+    }\n+}\n+\n /// Fields of an enum variant or struct\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum VariantData {\n@@ -168,7 +177,10 @@ impl VariantData {\n     }\n \n     pub(crate) fn get_field_ty(&self, field_name: &str) -> Option<Ty> {\n-        self.fields().iter().find(|f| f.name == field_name).map(|f| f.ty.clone())\n+        self.fields()\n+            .iter()\n+            .find(|f| f.name == field_name)\n+            .map(|f| f.ty.clone())\n     }\n \n     pub fn fields(&self) -> &[StructField] {"}, {"sha": "68fdbb7ea1857de3c19bfa3843567093b692371d", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab0b63992be0cec4999810096a53b40f63f90349/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0b63992be0cec4999810096a53b40f63f90349/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=ab0b63992be0cec4999810096a53b40f63f90349", "patch": "@@ -44,6 +44,7 @@ pub use self::{\n     module::{Module, ModuleId, Problem, nameres::{ItemMap, PerNs, Namespace}, ModuleScope, Resolution},\n     function::{Function, FnScopes},\n     adt::{Struct, Enum},\n+    ty::Ty,\n };\n \n pub use self::function::FnSignatureInfo;"}, {"sha": "83da13f1a0a3d333fbb054484e833697e03d47bc", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab0b63992be0cec4999810096a53b40f63f90349/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0b63992be0cec4999810096a53b40f63f90349/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=ab0b63992be0cec4999810096a53b40f63f90349", "patch": "@@ -574,7 +574,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     match receiver_ty {\n                         Ty::Tuple(fields) => {\n                             let i = text.parse::<usize>().ok();\n-                            i.and_then(|i| fields.get(i).cloned()).unwrap_or(Ty::Unknown)\n+                            i.and_then(|i| fields.get(i).cloned())\n+                                .unwrap_or(Ty::Unknown)\n                         }\n                         Ty::Adt { def_id, .. } => {\n                             let field_ty = match def_id.resolve(self.db)? {\n@@ -589,7 +590,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 } else {\n                     Ty::Unknown\n                 }\n-            },\n+            }\n             ast::Expr::TryExpr(e) => {\n                 let _inner_ty = if let Some(e) = e.expr() {\n                     self.infer_expr(e)?"}, {"sha": "c0e4e3a36a86aaec491c34a865549e683752a4bf", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab0b63992be0cec4999810096a53b40f63f90349/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0b63992be0cec4999810096a53b40f63f90349/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=ab0b63992be0cec4999810096a53b40f63f90349", "patch": "@@ -58,6 +58,7 @@ impl Conv for CompletionItemKind {\n             CompletionItemKind::Struct => Struct,\n             CompletionItemKind::Enum => Enum,\n             CompletionItemKind::Binding => Variable,\n+            CompletionItemKind::Field => Field,\n         }\n     }\n }"}, {"sha": "6b2800a0e4d2e7e338bdefbeb2671beedf44b85f", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab0b63992be0cec4999810096a53b40f63f90349/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0b63992be0cec4999810096a53b40f63f90349/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=ab0b63992be0cec4999810096a53b40f63f90349", "patch": "@@ -2030,6 +2030,10 @@ impl<'a> MethodCallExpr<'a> {\n     pub fn expr(self) -> Option<Expr<'a>> {\n         super::child_opt(self)\n     }\n+\n+    pub fn name_ref(self) -> Option<NameRef<'a>> {\n+        super::child_opt(self)\n+    }\n }\n \n // Module"}, {"sha": "dcde32923ba93c5f459681c329303c5ddb74af01", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab0b63992be0cec4999810096a53b40f63f90349/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/ab0b63992be0cec4999810096a53b40f63f90349/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=ab0b63992be0cec4999810096a53b40f63f90349", "patch": "@@ -403,7 +403,7 @@ Grammar(\n         ),\n         \"MethodCallExpr\": (\n             traits: [\"ArgListOwner\"],\n-            options: [ \"Expr\" ],\n+            options: [ \"Expr\", \"NameRef\" ],\n         ),\n         \"IndexExpr\": (),\n         \"FieldExpr\": (options: [\"Expr\", \"NameRef\"]),"}]}