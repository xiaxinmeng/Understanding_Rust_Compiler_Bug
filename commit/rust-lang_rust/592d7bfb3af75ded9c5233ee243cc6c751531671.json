{"sha": "592d7bfb3af75ded9c5233ee243cc6c751531671", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MmQ3YmZiM2FmNzVkZWQ5YzUyMzNlZTI0M2NjNmM3NTE1MzE2NzE=", "commit": {"author": {"name": "Raph Levien", "email": "raph@google.com", "date": "2016-10-24T23:42:57Z"}, "committer": {"name": "Raph Levien", "email": "raph@google.com", "date": "2016-10-24T23:48:45Z"}, "message": "Add support for kernel randomness for Fuchsia\n\nWire up cprng syscall as provider for rand::os::OsRng on Fuchsia.", "tree": {"sha": "ccf54ae7f1b236245a4ae662121ed5ecf294d348", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccf54ae7f1b236245a4ae662121ed5ecf294d348"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/592d7bfb3af75ded9c5233ee243cc6c751531671", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/592d7bfb3af75ded9c5233ee243cc6c751531671", "html_url": "https://github.com/rust-lang/rust/commit/592d7bfb3af75ded9c5233ee243cc6c751531671", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/592d7bfb3af75ded9c5233ee243cc6c751531671/comments", "author": {"login": "raphlinus", "id": 242367, "node_id": "MDQ6VXNlcjI0MjM2Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/242367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raphlinus", "html_url": "https://github.com/raphlinus", "followers_url": "https://api.github.com/users/raphlinus/followers", "following_url": "https://api.github.com/users/raphlinus/following{/other_user}", "gists_url": "https://api.github.com/users/raphlinus/gists{/gist_id}", "starred_url": "https://api.github.com/users/raphlinus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raphlinus/subscriptions", "organizations_url": "https://api.github.com/users/raphlinus/orgs", "repos_url": "https://api.github.com/users/raphlinus/repos", "events_url": "https://api.github.com/users/raphlinus/events{/privacy}", "received_events_url": "https://api.github.com/users/raphlinus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "raphlinus", "id": 242367, "node_id": "MDQ6VXNlcjI0MjM2Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/242367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raphlinus", "html_url": "https://github.com/raphlinus", "followers_url": "https://api.github.com/users/raphlinus/followers", "following_url": "https://api.github.com/users/raphlinus/following{/other_user}", "gists_url": "https://api.github.com/users/raphlinus/gists{/gist_id}", "starred_url": "https://api.github.com/users/raphlinus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raphlinus/subscriptions", "organizations_url": "https://api.github.com/users/raphlinus/orgs", "repos_url": "https://api.github.com/users/raphlinus/repos", "events_url": "https://api.github.com/users/raphlinus/events{/privacy}", "received_events_url": "https://api.github.com/users/raphlinus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4879166194ed63ebd2a8c3ce8db1ccde4a6a1920", "url": "https://api.github.com/repos/rust-lang/rust/commits/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920", "html_url": "https://github.com/rust-lang/rust/commit/4879166194ed63ebd2a8c3ce8db1ccde4a6a1920"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "d1ca183fc3e70ef879a891dd4ccf868b7e23a6da", "filename": "src/libstd/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/592d7bfb3af75ded9c5233ee243cc6c751531671/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592d7bfb3af75ded9c5233ee243cc6c751531671/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=592d7bfb3af75ded9c5233ee243cc6c751531671", "patch": "@@ -58,6 +58,8 @@ fn main() {\n         println!(\"cargo:rustc-link-lib=ws2_32\");\n         println!(\"cargo:rustc-link-lib=userenv\");\n         println!(\"cargo:rustc-link-lib=shell32\");\n+    } else if target.contains(\"fuchsia\") {\n+        println!(\"cargo:rustc-link-lib=magenta\");\n     }\n }\n "}, {"sha": "3aebb8c18ec869b6d39c015cf59e3e2e98da6d8f", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/592d7bfb3af75ded9c5233ee243cc6c751531671/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592d7bfb3af75ded9c5233ee243cc6c751531671/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=592d7bfb3af75ded9c5233ee243cc6c751531671", "patch": "@@ -27,7 +27,8 @@ fn next_u64(mut fill_buf: &mut FnMut(&mut [u8])) -> u64 {\n #[cfg(all(unix,\n           not(target_os = \"ios\"),\n           not(target_os = \"openbsd\"),\n-          not(target_os = \"freebsd\")))]\n+          not(target_os = \"freebsd\"),\n+          not(target_os = \"fuchsia\")))]\n mod imp {\n     use self::OsRngInner::*;\n     use super::{next_u32, next_u64};\n@@ -339,3 +340,54 @@ mod imp {\n         }\n     }\n }\n+\n+#[cfg(target_os = \"fuchsia\")]\n+mod imp {\n+    use super::{next_u32, next_u64};\n+\n+    use io;\n+    use rand::Rng;\n+\n+    #[link(name = \"magenta\")]\n+    extern {\n+        fn mx_cprng_draw(buffer: *mut u8, len: usize) -> isize;\n+    }\n+\n+    fn getrandom(buf: &mut [u8]) -> isize {\n+        unsafe { mx_cprng_draw(buf.as_mut_ptr(), buf.len()) }\n+    }\n+\n+    pub struct OsRng {\n+        // dummy field to ensure that this struct cannot be constructed outside\n+        // of this module\n+        _dummy: (),\n+    }\n+\n+    impl OsRng {\n+        /// Create a new `OsRng`.\n+        pub fn new() -> io::Result<OsRng> {\n+            Ok(OsRng { _dummy: () })\n+        }\n+    }\n+\n+    impl Rng for OsRng {\n+        fn next_u32(&mut self) -> u32 {\n+            next_u32(&mut |v| self.fill_bytes(v))\n+        }\n+        fn next_u64(&mut self) -> u64 {\n+            next_u64(&mut |v| self.fill_bytes(v))\n+        }\n+        fn fill_bytes(&mut self, v: &mut [u8]) {\n+            let mut buf = v;\n+            while !buf.is_empty() {\n+                let ret = getrandom(buf);\n+                if ret < 0 {\n+                    panic!(\"kernel mx_cprng_draw call failed! (returned {}, buf.len() {})\",\n+                        ret, buf.len());\n+                }\n+                let move_buf = buf;\n+                buf = &mut move_buf[(ret as usize)..];\n+            }\n+        }\n+    }\n+}"}]}