{"sha": "3fef7a74ca9a642f51cdf8ec4f148916580b34ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZWY3YTc0Y2E5YTY0MmY1MWNkZjhlYzRmMTQ4OTE2NTgwYjM0Y2U=", "commit": {"author": {"name": "Florian Gilcher", "email": "florian.gilcher@asquera.de", "date": "2014-05-31T22:33:32Z"}, "committer": {"name": "Florian Gilcher", "email": "florian.gilcher@asquera.de", "date": "2014-06-01T22:16:48Z"}, "message": "rustdoc: make langstring parsing more robust\n\nThis changes the parsing of the language string\nin code examples so that unrecognized examples\nare not considered Rust code. This was, for example,\nthe case when a code example was marked `sh` for shell\ncode.\n\nThis relieves authors of having to mark those samples\nas `notrust`.\n\nAlso adds recognition of the positive marker `rust`.\n\nBy default, unmarked examples are still considered rust.\n\nIf any rust-specific tags are seen, code is considered\nrust unless marked as \"notrust\".\n\nAdds test cases for the detection logic.", "tree": {"sha": "4bf285d2deb05d0cf8dcc85672a9b4bd24920cc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bf285d2deb05d0cf8dcc85672a9b4bd24920cc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fef7a74ca9a642f51cdf8ec4f148916580b34ce", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fef7a74ca9a642f51cdf8ec4f148916580b34ce", "html_url": "https://github.com/rust-lang/rust/commit/3fef7a74ca9a642f51cdf8ec4f148916580b34ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fef7a74ca9a642f51cdf8ec4f148916580b34ce/comments", "author": {"login": "skade", "id": 47542, "node_id": "MDQ6VXNlcjQ3NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/47542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skade", "html_url": "https://github.com/skade", "followers_url": "https://api.github.com/users/skade/followers", "following_url": "https://api.github.com/users/skade/following{/other_user}", "gists_url": "https://api.github.com/users/skade/gists{/gist_id}", "starred_url": "https://api.github.com/users/skade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skade/subscriptions", "organizations_url": "https://api.github.com/users/skade/orgs", "repos_url": "https://api.github.com/users/skade/repos", "events_url": "https://api.github.com/users/skade/events{/privacy}", "received_events_url": "https://api.github.com/users/skade/received_events", "type": "User", "site_admin": false}, "committer": {"login": "skade", "id": 47542, "node_id": "MDQ6VXNlcjQ3NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/47542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skade", "html_url": "https://github.com/skade", "followers_url": "https://api.github.com/users/skade/followers", "following_url": "https://api.github.com/users/skade/following{/other_user}", "gists_url": "https://api.github.com/users/skade/gists{/gist_id}", "starred_url": "https://api.github.com/users/skade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skade/subscriptions", "organizations_url": "https://api.github.com/users/skade/orgs", "repos_url": "https://api.github.com/users/skade/repos", "events_url": "https://api.github.com/users/skade/events{/privacy}", "received_events_url": "https://api.github.com/users/skade/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1527dab9980bf1f94419dcb8482ff1f0228a6f4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1527dab9980bf1f94419dcb8482ff1f0228a6f4b", "html_url": "https://github.com/rust-lang/rust/commit/1527dab9980bf1f94419dcb8482ff1f0228a6f4b"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "48393db3b7d86e45f9671fe903268e533b22ce79", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3fef7a74ca9a642f51cdf8ec4f148916580b34ce/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fef7a74ca9a642f51cdf8ec4f148916580b34ce/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=3fef7a74ca9a642f51cdf8ec4f148916580b34ce", "patch": "@@ -287,10 +287,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n                 slice::raw::buf_as_slice((*lang).data,\n                                        (*lang).size as uint, |lang| {\n                     let s = str::from_utf8(lang).unwrap();\n-                    (s.contains(\"should_fail\"),\n-                     s.contains(\"no_run\"),\n-                     s.contains(\"ignore\"),\n-                     s.contains(\"notrust\"))\n+                    parse_lang_string(s)\n                 })\n             };\n             if notrust { return }\n@@ -340,6 +337,35 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n     }\n }\n \n+fn parse_lang_string(string: &str) -> (bool,bool,bool,bool) {\n+    let mut seen_rust_tags = false;\n+    let mut seen_other_tags = false;\n+    let mut should_fail = false;\n+    let mut no_run = false;\n+    let mut ignore = false;\n+    let mut notrust = false;\n+\n+    let mut tokens = string.as_slice().split(|c: char|\n+      !(c == '_' || c == '-' || c.is_alphanumeric())\n+    );\n+\n+    for token in tokens {\n+        match token {\n+            \"\" => {},\n+            \"should_fail\" => { should_fail = true; seen_rust_tags = true; },\n+            \"no_run\" => { no_run = true; seen_rust_tags = true; },\n+            \"ignore\" => { ignore = true; seen_rust_tags = true; },\n+            \"notrust\" => { notrust = true; seen_rust_tags = true; },\n+            \"rust\" => { notrust = false; seen_rust_tags = true; },\n+            _ => { seen_other_tags = true }\n+        }\n+    }\n+\n+    let notrust = notrust || (seen_other_tags && !seen_rust_tags);\n+\n+    (should_fail, no_run, ignore, notrust)\n+}\n+\n /// By default this markdown renderer generates anchors for each header in the\n /// rendered document. The anchor name is the contents of the header spearated\n /// by hyphens, and a task-local map is used to disambiguate among duplicate\n@@ -367,3 +393,22 @@ impl<'a> fmt::Show for MarkdownWithToc<'a> {\n         render(fmt, md.as_slice(), true)\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::parse_lang_string;\n+\n+    #[test]\n+    fn test_parse_lang_string() {\n+        assert_eq!(parse_lang_string(\"\"), (false,false,false,false))\n+        assert_eq!(parse_lang_string(\"rust\"), (false,false,false,false))\n+        assert_eq!(parse_lang_string(\"sh\"), (false,false,false,true))\n+        assert_eq!(parse_lang_string(\"notrust\"), (false,false,false,true))\n+        assert_eq!(parse_lang_string(\"ignore\"), (false,false,true,false))\n+        assert_eq!(parse_lang_string(\"should_fail\"), (true,false,false,false))\n+        assert_eq!(parse_lang_string(\"no_run\"), (false,true,false,false))\n+        assert_eq!(parse_lang_string(\"{.no_run .example}\"), (false,true,false,false))\n+        assert_eq!(parse_lang_string(\"{.sh .should_fail}\"), (true,false,false,false))\n+        assert_eq!(parse_lang_string(\"{.example .rust}\"), (false,false,false,false))\n+    }\n+}\n\\ No newline at end of file"}]}