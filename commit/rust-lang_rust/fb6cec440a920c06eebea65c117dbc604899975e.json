{"sha": "fb6cec440a920c06eebea65c117dbc604899975e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNmNlYzQ0MGE5MjBjMDZlZWJlYTY1YzExN2RiYzYwNDg5OTk3NWU=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-05-15T16:10:56Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-05-15T16:10:56Z"}, "message": "Revert to only using opportunistic_resolve_vars for existing places", "tree": {"sha": "aad60de6eddcf75d81c25ea137f464ba1990688c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aad60de6eddcf75d81c25ea137f464ba1990688c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb6cec440a920c06eebea65c117dbc604899975e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb6cec440a920c06eebea65c117dbc604899975e", "html_url": "https://github.com/rust-lang/rust/commit/fb6cec440a920c06eebea65c117dbc604899975e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb6cec440a920c06eebea65c117dbc604899975e/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61157b341eab1b555cb5bd099e030817e6d41ba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/61157b341eab1b555cb5bd099e030817e6d41ba1", "html_url": "https://github.com/rust-lang/rust/commit/61157b341eab1b555cb5bd099e030817e6d41ba1"}], "stats": {"total": 141, "additions": 47, "deletions": 94}, "files": [{"sha": "337b8365d8cd576f5e65c4348c34575756a787bf", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fb6cec440a920c06eebea65c117dbc604899975e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb6cec440a920c06eebea65c117dbc604899975e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=fb6cec440a920c06eebea65c117dbc604899975e", "patch": "@@ -322,7 +322,22 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n                 }\n             }\n \n-            ty::ReVar(_) => self.canonicalize_region_mode.canonicalize_free_region(self, r),\n+            ty::ReVar(vid) => {\n+                let resolved_vid = self\n+                    .infcx\n+                    .unwrap()\n+                    .inner\n+                    .borrow_mut()\n+                    .unwrap_region_constraints()\n+                    .opportunistic_resolve_var(vid);\n+                debug!(\n+                    \"canonical: region var found with vid {:?}, \\\n+                     opportunistically resolved to {:?}\",\n+                    vid, r\n+                );\n+                let r = self.tcx.reuse_or_mk_region(r, ty::ReVar(resolved_vid));\n+                self.canonicalize_region_mode.canonicalize_free_region(self, r)\n+            }\n \n             ty::ReStatic\n             | ty::ReEarlyBound(..)"}, {"sha": "d46a91b6a77d8034f58b659eb74d994bcf8c0c00", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fb6cec440a920c06eebea65c117dbc604899975e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb6cec440a920c06eebea65c117dbc604899975e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=fb6cec440a920c06eebea65c117dbc604899975e", "patch": "@@ -623,6 +623,10 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         }\n     }\n \n+    pub fn opportunistic_resolve_var(&mut self, rid: ty::RegionVid) -> ty::RegionVid {\n+        self.unification_table().find(rid).vid\n+    }\n+\n     pub fn opportunistic_resolve_region(\n         &mut self,\n         tcx: TyCtxt<'tcx>,\n@@ -692,8 +696,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         &self,\n         value_count: usize,\n     ) -> (Range<RegionVid>, Vec<RegionVariableOrigin>) {\n-        let range = RegionVid::from(value_count as u32)\n-            ..RegionVid::from(self.unification_table.len() as u32);\n+        let range = RegionVid::from(value_count)..RegionVid::from(self.unification_table.len());\n         (\n             range.clone(),\n             (range.start.index()..range.end.index())"}, {"sha": "48b8ee17594e3bd10708b88b8978a2417fb75572", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fb6cec440a920c06eebea65c117dbc604899975e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb6cec440a920c06eebea65c117dbc604899975e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=fb6cec440a920c06eebea65c117dbc604899975e", "patch": "@@ -84,12 +84,18 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticRegionResolver<'a, 'tcx> {\n     }\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n-        let tcx = self.tcx();\n-        self.infcx\n-            .inner\n-            .borrow_mut()\n-            .unwrap_region_constraints()\n-            .opportunistic_resolve_region(tcx, r)\n+        match *r {\n+            ty::ReVar(rid) => {\n+                let resolved = self\n+                    .infcx\n+                    .inner\n+                    .borrow_mut()\n+                    .unwrap_region_constraints()\n+                    .opportunistic_resolve_var(rid);\n+                self.tcx().reuse_or_mk_region(r, ty::ReVar(resolved))\n+            }\n+            _ => r,\n+        }\n     }\n \n     fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {"}, {"sha": "fb391913c321ecd0c71384ed633e308f76cabaa7", "filename": "src/test/ui/associated-types/associated-types-eq-hr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb6cec440a920c06eebea65c117dbc604899975e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb6cec440a920c06eebea65c117dbc604899975e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs?ref=fb6cec440a920c06eebea65c117dbc604899975e", "patch": "@@ -102,8 +102,6 @@ pub fn call_tuple_two() {\n     tuple_two::<Tuple>();\n     //~^ ERROR implementation of `TheTrait` is not general enough\n     //~| ERROR implementation of `TheTrait` is not general enough\n-    //~| ERROR mismatched types\n-    //~| ERROR mismatched types\n }\n \n pub fn call_tuple_three() {"}, {"sha": "6897b31fe46857dd89de03866b7719553126c631", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 3, "deletions": 32, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fb6cec440a920c06eebea65c117dbc604899975e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb6cec440a920c06eebea65c117dbc604899975e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=fb6cec440a920c06eebea65c117dbc604899975e", "patch": "@@ -46,34 +46,6 @@ LL |     tuple_one::<Tuple>();\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n    = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n-error[E0308]: mismatched types\n-  --> $DIR/associated-types-eq-hr.rs:102:5\n-   |\n-LL |     tuple_two::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected reference `&'x isize`\n-              found reference `&'y isize`\n-note: the lifetime requirement is introduced here\n-  --> $DIR/associated-types-eq-hr.rs:66:53\n-   |\n-LL |     T: for<'x, 'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>,\n-   |                                                     ^^^^^^^^^^^^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/associated-types-eq-hr.rs:102:5\n-   |\n-LL |     tuple_two::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected reference `&'x isize`\n-              found reference `&'y isize`\n-note: the lifetime requirement is introduced here\n-  --> $DIR/associated-types-eq-hr.rs:66:53\n-   |\n-LL |     T: for<'x, 'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>,\n-   |                                                     ^^^^^^^^^^^^^\n-\n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:102:5\n    |\n@@ -93,15 +65,14 @@ LL |     tuple_two::<Tuple>();\n    = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n-  --> $DIR/associated-types-eq-hr.rs:114:5\n+  --> $DIR/associated-types-eq-hr.rs:112:5\n    |\n LL |     tuple_four::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n    |\n    = note: `Tuple` must implement `TheTrait<(&'0 isize, &'1 isize)>`, for any two lifetimes `'0` and `'1`...\n    = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 7 previous errors\n \n-Some errors have detailed explanations: E0271, E0308.\n-For more information about an error, try `rustc --explain E0271`.\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "7b81beeed4167de4932195f63eeb64b4359c3182", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb6cec440a920c06eebea65c117dbc604899975e/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb6cec440a920c06eebea65c117dbc604899975e/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=fb6cec440a920c06eebea65c117dbc604899975e", "patch": "@@ -9,7 +9,7 @@ LL |     let v = Unit2.m(\n    = help: consider constraining the associated type `<_ as Ty<'_>>::V` to `Unit4`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n-error[E0271]: type mismatch resolving `<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39] as FnOnce<((&'r u8,),)>>::Output == Unit3`\n+error[E0271]: type mismatch resolving `<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39] as FnOnce<((&u8,),)>>::Output == Unit3`\n   --> $DIR/issue-62203-hrtb-ice.rs:38:19\n    |\n LL |     let v = Unit2.m("}, {"sha": "9ff4813d11286e860c0daf2a9f35dcd2c6c78789", "filename": "src/test/ui/rfc1623.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb6cec440a920c06eebea65c117dbc604899975e/src%2Ftest%2Fui%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb6cec440a920c06eebea65c117dbc604899975e/src%2Ftest%2Fui%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.rs?ref=fb6cec440a920c06eebea65c117dbc604899975e", "patch": "@@ -23,10 +23,6 @@ static SOME_STRUCT: &SomeStruct = &SomeStruct {\n     bar: &Bar { bools: &[true, true] },\n     f: &id,\n     //~^ ERROR implementation of `FnOnce` is not general enough\n-    //~^^ mismatched types\n-    //~^^^ mismatched types\n-    //~^^^^ mismatched types\n-    //~^^^^^ mismatched types\n };\n \n // very simple test for a 'static static with default lifetime"}, {"sha": "e95e68c8e6d26c92669d517b9e78f9d6d95ae2eb", "filename": "src/test/ui/rfc1623.stderr", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fb6cec440a920c06eebea65c117dbc604899975e/src%2Ftest%2Fui%2Frfc1623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb6cec440a920c06eebea65c117dbc604899975e/src%2Ftest%2Fui%2Frfc1623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.stderr?ref=fb6cec440a920c06eebea65c117dbc604899975e", "patch": "@@ -1,39 +1,3 @@\n-error[E0308]: mismatched types\n-  --> $DIR/rfc1623.rs:24:8\n-   |\n-LL |     f: &id,\n-   |        ^^^ one type is more general than the other\n-   |\n-   = note: expected reference `&'a Foo<'b>`\n-              found reference `&'a Foo<'b>`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/rfc1623.rs:24:8\n-   |\n-LL |     f: &id,\n-   |        ^^^ one type is more general than the other\n-   |\n-   = note: expected reference `&'a Foo<'b>`\n-              found reference `&'a Foo<'b>`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/rfc1623.rs:24:8\n-   |\n-LL |     f: &id,\n-   |        ^^^ one type is more general than the other\n-   |\n-   = note: expected reference `&'a Foo<'b>`\n-              found reference `&'a Foo<'b>`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/rfc1623.rs:24:8\n-   |\n-LL |     f: &id,\n-   |        ^^^ one type is more general than the other\n-   |\n-   = note: expected reference `&'a Foo<'b>`\n-              found reference `&'a Foo<'b>`\n-\n error: implementation of `FnOnce` is not general enough\n   --> $DIR/rfc1623.rs:24:8\n    |\n@@ -43,6 +7,5 @@ LL |     f: &id,\n    = note: `fn(&'2 Foo<'_>) -> &'2 Foo<'_> {id::<&'2 Foo<'_>>}` must implement `FnOnce<(&'1 Foo<'b>,)>`, for any lifetime `'1`...\n    = note: ...but it actually implements `FnOnce<(&'2 Foo<'_>,)>`, for some specific lifetime `'2`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "b75da1b512dc24cdaf226a6a7c8a278a6dc08159", "filename": "src/test/ui/traits/inductive-overflow/lifetime.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb6cec440a920c06eebea65c117dbc604899975e/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb6cec440a920c06eebea65c117dbc604899975e/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs?ref=fb6cec440a920c06eebea65c117dbc604899975e", "patch": "@@ -26,4 +26,6 @@ fn main() {\n     // Should only be a few notes.\n     is_send::<X<C<'static>>>();\n     //~^ ERROR overflow evaluating\n+    //~| 2 redundant requirements hidden\n+    //~| required because of\n }"}, {"sha": "cc91393039536b819ce5ac41b402338f5b01c5e6", "filename": "src/test/ui/traits/inductive-overflow/lifetime.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb6cec440a920c06eebea65c117dbc604899975e/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb6cec440a920c06eebea65c117dbc604899975e/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr?ref=fb6cec440a920c06eebea65c117dbc604899975e", "patch": "@@ -1,4 +1,4 @@\n-error[E0275]: overflow evaluating the requirement `Box<X<C<'static>>>: NotAuto`\n+error[E0275]: overflow evaluating the requirement `Box<X<C<'_>>>: NotAuto`\n   --> $DIR/lifetime.rs:27:5\n    |\n LL | fn is_send<S: NotAuto>() {}\n@@ -7,11 +7,13 @@ LL | fn is_send<S: NotAuto>() {}\n LL |     is_send::<X<C<'static>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: required because of the requirements on the impl of `NotAuto` for `X<C<'static>>`\n+note: required because of the requirements on the impl of `NotAuto` for `X<C<'_>>`\n   --> $DIR/lifetime.rs:19:12\n    |\n LL | impl<T: Y> NotAuto for X<T> where T::P: NotAuto {}\n    |            ^^^^^^^     ^^^^\n+   = note: 2 redundant requirements hidden\n+   = note: required because of the requirements on the impl of `NotAuto` for `X<C<'static>>`\n \n error: aborting due to previous error\n "}, {"sha": "4ac7f9423ff419f95f21f8075df2974ff5e5438c", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb6cec440a920c06eebea65c117dbc604899975e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb6cec440a920c06eebea65c117dbc604899975e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs?ref=fb6cec440a920c06eebea65c117dbc604899975e", "patch": "@@ -9,7 +9,7 @@ trait Bug {\n impl Bug for &() {\n     type Item = impl Bug; //~ ERROR `impl Trait` in type aliases is unstable\n     //~^ ERROR the trait bound `(): Bug` is not satisfied\n-    //~^^ ERROR the trait bound\n+    //~^^ ERROR could not find defining uses\n \n     const FUN: fn() -> Self::Item = || ();\n     //~^ ERROR type alias impl trait is not permitted here"}, {"sha": "255d381bf06837b9588828780c6fe1ae71132262", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fb6cec440a920c06eebea65c117dbc604899975e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb6cec440a920c06eebea65c117dbc604899975e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=fb6cec440a920c06eebea65c117dbc604899975e", "patch": "@@ -25,14 +25,11 @@ LL |     type Item = impl Bug;\n    = help: the following implementations were found:\n              <&() as Bug>\n \n-error[E0277]: the trait bound `(): Bug` is not satisfied\n+error: could not find defining uses\n   --> $DIR/issue-60371.rs:10:17\n    |\n LL |     type Item = impl Bug;\n-   |                 ^^^^^^^^ the trait `Bug` is not implemented for `()`\n-   |\n-   = help: the following implementations were found:\n-             <&() as Bug>\n+   |                 ^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}]}