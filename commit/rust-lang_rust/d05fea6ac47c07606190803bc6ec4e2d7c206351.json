{"sha": "d05fea6ac47c07606190803bc6ec4e2d7c206351", "node_id": "C_kwDOAAsO6NoAKGQwNWZlYTZhYzQ3YzA3NjA2MTkwODAzYmM2ZWM0ZTJkN2MyMDYzNTE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-16T23:13:23Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-21T02:34:52Z"}, "message": "Account for relative paths", "tree": {"sha": "4db3eeae92e9df4db494efa61fb78f37c94b4c75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4db3eeae92e9df4db494efa61fb78f37c94b4c75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d05fea6ac47c07606190803bc6ec4e2d7c206351", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d05fea6ac47c07606190803bc6ec4e2d7c206351", "html_url": "https://github.com/rust-lang/rust/commit/d05fea6ac47c07606190803bc6ec4e2d7c206351", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d05fea6ac47c07606190803bc6ec4e2d7c206351/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c005e760f518254af6c47b36ddb16b8fe8aecb6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c005e760f518254af6c47b36ddb16b8fe8aecb6a", "html_url": "https://github.com/rust-lang/rust/commit/c005e760f518254af6c47b36ddb16b8fe8aecb6a"}], "stats": {"total": 168, "additions": 112, "deletions": 56}, "files": [{"sha": "550c3395d3ca641eb39e3ff0e71137ddb1ca4940", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d05fea6ac47c07606190803bc6ec4e2d7c206351/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05fea6ac47c07606190803bc6ec4e2d7c206351/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=d05fea6ac47c07606190803bc6ec4e2d7c206351", "patch": "@@ -1645,7 +1645,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             })\n         });\n-\n         let fallback_param_to_point_at = predicate_substs.types().find_map(|ty| {\n             ty.walk().find_map(|arg| {\n                 if let ty::GenericArgKind::Type(ty) = arg.unpack()\n@@ -1660,8 +1659,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         });\n \n         let hir = self.tcx.hir();\n+\n         match hir.get(hir_id) {\n-            hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Path(hir::QPath::Resolved(_, path)), hir_id, .. }) => {\n+            hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Path(qpath), hir_id, .. }) => {\n                 if let hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Call(callee, args), hir_id: call_hir_id, .. })\n                     = hir.get(hir.get_parent_node(*hir_id))\n                     && callee.hir_id == *hir_id\n@@ -1677,12 +1677,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         return;\n                     }\n \n-                    if let Some(param_to_point_at) = param_to_point_at\n+                    if let hir::QPath::Resolved(_, path) = qpath\n+                        && let Some(param_to_point_at) = param_to_point_at\n                         && let Some(segment) = path.segments.last()\n                         && self.point_at_generics_if_possible(error, def_id, param_to_point_at, segment)\n                     {\n                         return;\n                     }\n+\n+                    if let hir::QPath::TypeRelative(_, segment) = qpath\n+                        && let Some(param_to_point_at) = param_to_point_at\n+                        && self.point_at_generics_if_possible(error, def_id, param_to_point_at, segment)\n+                    {\n+                        return;\n+                    }\n                 }\n             }\n             hir::Node::Expr(hir::Expr { kind: hir::ExprKind::MethodCall(segment, args, ..), .. }) => {\n@@ -1727,6 +1735,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .enumerate()\n             .filter(|(_, ty)| ty.walk().any(|arg| arg == param_to_point_at))\n             .collect();\n+\n         if let [(idx, _)] = args_referencing_param.as_slice()\n             && let Some(arg) = args.get(*idx)\n         {"}, {"sha": "919abf646037deaa2bcd7ceae1f8aa14e4214d1f", "filename": "src/test/ui/async-await/issue-72442.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr?ref=d05fea6ac47c07606190803bc6ec4e2d7c206351", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `Option<&str>: AsRef<Path>` is not satisfied\n-  --> $DIR/issue-72442.rs:12:25\n+  --> $DIR/issue-72442.rs:12:36\n    |\n LL |             let mut f = File::open(path.to_str())?;\n-   |                         ^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `Option<&str>`\n+   |                         ---------- ^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `Option<&str>`\n+   |                         |\n+   |                         required by a bound introduced by this call\n    |\n note: required by a bound in `File::open`\n   --> $SRC_DIR/std/src/fs.rs:LL:COL"}, {"sha": "83d1a02c876b19e3ca71523aba19fdc147b0005d", "filename": "src/test/ui/async-await/pin-needed-to-poll-2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr?ref=d05fea6ac47c07606190803bc6ec4e2d7c206351", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: `PhantomPinned` cannot be unpinned\n-  --> $DIR/pin-needed-to-poll-2.rs:43:9\n+  --> $DIR/pin-needed-to-poll-2.rs:43:18\n    |\n LL |         Pin::new(&mut self.sleep).poll(cx)\n-   |         ^^^^^^^^ within `Sleep`, the trait `Unpin` is not implemented for `PhantomPinned`\n+   |         -------- ^^^^^^^^^^^^^^^ within `Sleep`, the trait `Unpin` is not implemented for `PhantomPinned`\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n    = note: consider using `Box::pin`\n note: required because it appears within the type `Sleep`"}, {"sha": "de654fdc1a4b5540125520e7825586a083a7f672", "filename": "src/test/ui/box/into-boxed-slice-fail.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fbox%2Finto-boxed-slice-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fbox%2Finto-boxed-slice-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox%2Finto-boxed-slice-fail.stderr?ref=d05fea6ac47c07606190803bc6ec4e2d7c206351", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/into-boxed-slice-fail.rs:7:13\n+  --> $DIR/into-boxed-slice-fail.rs:7:35\n    |\n LL |     let _ = Box::into_boxed_slice(boxed_slice);\n-   |             ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |             --------------------- ^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n note: required by a bound in `Box::<T, A>::into_boxed_slice`\n@@ -21,10 +23,12 @@ LL |     let _ = Box::into_boxed_slice(boxed_slice);\n    = note: slice and array elements must have `Sized` type\n \n error[E0277]: the size for values of type `dyn Debug` cannot be known at compilation time\n-  --> $DIR/into-boxed-slice-fail.rs:11:13\n+  --> $DIR/into-boxed-slice-fail.rs:11:35\n    |\n LL |     let _ = Box::into_boxed_slice(boxed_trait);\n-   |             ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |             --------------------- ^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `dyn Debug`\n note: required by a bound in `Box::<T, A>::into_boxed_slice`"}, {"sha": "91b4f7879e4e4cd9675c3b44236518b75bb680dd", "filename": "src/test/ui/chalkify/bugs/async.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr?ref=d05fea6ac47c07606190803bc6ec4e2d7c206351", "patch": "@@ -2,10 +2,13 @@ error[E0277]: the trait bound `[static generator@$DIR/async.rs:7:29: 9:2]: Gener\n   --> $DIR/async.rs:7:29\n    |\n LL |   async fn foo(x: u32) -> u32 {\n-   |  _____________________________^\n+   |  _____________________________-\n LL | |     x\n LL | | }\n-   | |_^ the trait `Generator<ResumeTy>` is not implemented for `[static generator@$DIR/async.rs:7:29: 9:2]`\n+   | | ^\n+   | | |\n+   | |_the trait `Generator<ResumeTy>` is not implemented for `[static generator@$DIR/async.rs:7:29: 9:2]`\n+   |   required by a bound introduced by this call\n    |\n note: required by a bound in `std::future::from_generator`\n   --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n@@ -20,7 +23,9 @@ LL |   async fn foo(x: u32) -> u32 {\n    |  _____________________________^\n LL | |     x\n LL | | }\n-   | |_^\n+   | | ^ required by a bound introduced by this call\n+   | |_|\n+   | \n    |\n note: required by a bound in `std::future::from_generator`\n   --> $SRC_DIR/core/src/future/mod.rs:LL:COL"}, {"sha": "727f4d843033fd132349d2571fffd4fd812420e3", "filename": "src/test/ui/dst/dst-rvalue.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.stderr?ref=d05fea6ac47c07606190803bc6ec4e2d7c206351", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/dst-rvalue.rs:4:24\n+  --> $DIR/dst-rvalue.rs:4:33\n    |\n LL |     let _x: Box<str> = Box::new(*\"hello world\");\n-   |                        ^^^^^^^^ doesn't have a size known at compile-time\n+   |                        -------- ^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                        |\n+   |                        required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `str`\n note: required by a bound in `Box::<T>::new`\n@@ -12,10 +14,12 @@ LL | impl<T> Box<T> {\n    |      ^ required by this bound in `Box::<T>::new`\n \n error[E0277]: the size for values of type `[isize]` cannot be known at compilation time\n-  --> $DIR/dst-rvalue.rs:8:28\n+  --> $DIR/dst-rvalue.rs:8:37\n    |\n LL |     let _x: Box<[isize]> = Box::new(*array);\n-   |                            ^^^^^^^^ doesn't have a size known at compile-time\n+   |                            -------- ^^^^^^ doesn't have a size known at compile-time\n+   |                            |\n+   |                            required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `[isize]`\n note: required by a bound in `Box::<T>::new`"}, {"sha": "9aff2cec160f2bcce6f800297fde81056f38656c", "filename": "src/test/ui/inference/issue-86162-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.stderr?ref=d05fea6ac47c07606190803bc6ec4e2d7c206351", "patch": "@@ -4,7 +4,7 @@ error[E0283]: type annotations needed\n LL |     Foo::bar(gen()); //<- Do not suggest `Foo::bar::<impl Clone>()`!\n    |     -------- ^^^ cannot infer type of the type parameter `T` declared on the function `gen`\n    |     |\n-   |     type must be known at this point\n+   |     required by a bound introduced by this call\n    |\n    = note: cannot satisfy `_: Clone`\n note: required by a bound in `Foo::bar`"}, {"sha": "efaaeeda2fab6798d18b0b99e1f2eee73d8f9597", "filename": "src/test/ui/issues/issue-17651.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr?ref=d05fea6ac47c07606190803bc6ec4e2d7c206351", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the size for values of type `[{integer}]` cannot be known at compilation time\n-  --> $DIR/issue-17651.rs:5:9\n+  --> $DIR/issue-17651.rs:5:18\n    |\n LL |     (|| Box::new(*(&[0][..])))();\n-   |         ^^^^^^^^ doesn't have a size known at compile-time\n+   |         -------- ^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n    = help: the trait `Sized` is not implemented for `[{integer}]`\n note: required by a bound in `Box::<T>::new`"}, {"sha": "78b0beff0da39d6aae0af07deafac0e05ce2b58f", "filename": "src/test/ui/proc-macro/signature.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr?ref=d05fea6ac47c07606190803bc6ec4e2d7c206351", "patch": "@@ -5,7 +5,10 @@ LL | / pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n LL | |\n LL | |     loop {}\n LL | | }\n-   | |_^ call the function in a closure: `|| unsafe { /* code */ }`\n+   | | ^\n+   | | |\n+   | |_call the function in a closure: `|| unsafe { /* code */ }`\n+   |   required by a bound introduced by this call\n    |\n    = help: the trait `Fn<(proc_macro::TokenStream,)>` is not implemented for `unsafe extern \"C\" fn(i32, u32) -> u32 {foo}`\n    = note: unsafe function cannot be called generically without an unsafe block"}, {"sha": "fd5fe25ddcfb450c477db16f0c11f4b2b049e5b4", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr?ref=d05fea6ac47c07606190803bc6ec4e2d7c206351", "patch": "@@ -20,16 +20,16 @@ LL | const fn test1<T: ~const Foo + Bar + ~const Bar>() {\n    |                                    ++++++++++++\n \n error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n-  --> $DIR/trait-where-clause.rs:15:5\n+  --> $DIR/trait-where-clause.rs:15:12\n    |\n LL |     T::c::<T>();\n-   |     ^^^^^^^^^ the trait `~const Bar` is not implemented for `T`\n+   |            ^ the trait `~const Bar` is not implemented for `T`\n    |\n note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/trait-where-clause.rs:15:5\n+  --> $DIR/trait-where-clause.rs:15:12\n    |\n LL |     T::c::<T>();\n-   |     ^^^^^^^^^\n+   |            ^\n note: required by a bound in `Foo::c`\n   --> $DIR/trait-where-clause.rs:8:13\n    |\n@@ -57,10 +57,10 @@ LL | fn test3<T: Foo + Bar>() {\n    |                 +++++\n \n error[E0277]: the trait bound `T: Bar` is not satisfied\n-  --> $DIR/trait-where-clause.rs:29:5\n+  --> $DIR/trait-where-clause.rs:29:12\n    |\n LL |     T::c::<T>();\n-   |     ^^^^^^^^^ the trait `Bar` is not implemented for `T`\n+   |            ^ the trait `Bar` is not implemented for `T`\n    |\n note: required by a bound in `Foo::c`\n   --> $DIR/trait-where-clause.rs:8:13"}, {"sha": "e43a4e79bfe8c54c1e433d7ef0ddf184fe7567ce", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=d05fea6ac47c07606190803bc6ec4e2d7c206351", "patch": "@@ -46,10 +46,12 @@ LL |     pub const fn new(pointer: P) -> Pin<P> {\n    |                  ^^^\n \n error[E0277]: `dyn Future<Output = i32> + Send` cannot be unpinned\n-  --> $DIR/expected-boxed-future-isnt-pinned.rs:19:5\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:19:14\n    |\n LL |     Pin::new(x)\n-   |     ^^^^^^^^ the trait `Unpin` is not implemented for `dyn Future<Output = i32> + Send`\n+   |     -------- ^ the trait `Unpin` is not implemented for `dyn Future<Output = i32> + Send`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note: consider using `Box::pin`\n note: required by a bound in `Pin::<P>::new`\n@@ -59,10 +61,12 @@ LL | impl<P: Deref<Target: Unpin>> Pin<P> {\n    |                       ^^^^^ required by this bound in `Pin::<P>::new`\n \n error[E0277]: `dyn Future<Output = i32> + Send` cannot be unpinned\n-  --> $DIR/expected-boxed-future-isnt-pinned.rs:24:5\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:24:14\n    |\n LL |     Pin::new(Box::new(x))\n-   |     ^^^^^^^^ the trait `Unpin` is not implemented for `dyn Future<Output = i32> + Send`\n+   |     -------- ^^^^^^^^^^^ the trait `Unpin` is not implemented for `dyn Future<Output = i32> + Send`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note: consider using `Box::pin`\n note: required by a bound in `Pin::<P>::new`"}, {"sha": "24c989ec3e86d51f2168e8f87988bdbda7353b4b", "filename": "src/test/ui/suggestions/issue-84973.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr?ref=d05fea6ac47c07606190803bc6ec4e2d7c206351", "patch": "@@ -1,10 +1,11 @@\n error[E0277]: the trait bound `Fancy: SomeTrait` is not satisfied\n-  --> $DIR/issue-84973.rs:6:13\n+  --> $DIR/issue-84973.rs:6:24\n    |\n LL |     let o = Other::new(f);\n-   |             ^^^^^^^^^^ the trait `SomeTrait` is not implemented for `Fancy`\n+   |             ---------- ^ expected an implementor of trait `SomeTrait`\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n-   = help: the trait `SomeTrait` is implemented for `&'a Fancy`\n note: required by a bound in `Other::<'a, G>::new`\n   --> $DIR/issue-84973.rs:25:8\n    |\n@@ -13,6 +14,10 @@ LL |     G: SomeTrait,\n LL | {\n LL |     pub fn new(g: G) -> Self {\n    |            --- required by a bound in this\n+help: consider borrowing here\n+   |\n+LL |     let o = Other::new(&f);\n+   |                        +\n \n error: aborting due to previous error\n "}, {"sha": "0aa22f9fe8de5528c6c5338fc492f00985010aec", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=d05fea6ac47c07606190803bc6ec4e2d7c206351", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n-  --> $DIR/mut-borrow-needed-by-trait.rs:17:14\n+  --> $DIR/mut-borrow-needed-by-trait.rs:17:29\n    |\n LL |     let fp = BufWriter::new(fp);\n-   |              ^^^^^^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n+   |              -------------- ^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n+   |              |\n+   |              required by a bound introduced by this call\n    |\n    = note: `std::io::Write` is implemented for `&mut dyn std::io::Write`, but not for `&dyn std::io::Write`\n note: required by a bound in `BufWriter::<W>::new`"}, {"sha": "889b11a741084c09f25260b17841ca65dde369e8", "filename": "src/test/ui/suggestions/suggest-change-mut.stderr", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr?ref=d05fea6ac47c07606190803bc6ec4e2d7c206351", "patch": "@@ -1,19 +1,29 @@\n error[E0277]: the trait bound `&T: std::io::Read` is not satisfied\n-  --> $DIR/suggest-change-mut.rs:12:33\n+  --> $DIR/suggest-change-mut.rs:12:48\n    |\n LL |         let mut stream_reader = BufReader::new(&stream);\n-   |                                 ^^^^^^^^^^^^^^ the trait `std::io::Read` is not implemented for `&T`\n+   |                                 -------------- ^^^^^^^ the trait `std::io::Read` is not implemented for `&T`\n+   |                                 |\n+   |                                 required by a bound introduced by this call\n    |\n-   = note: `std::io::Read` is implemented for `&mut T`, but not for `&T`\n note: required by a bound in `BufReader::<R>::new`\n   --> $SRC_DIR/std/src/io/buffered/bufreader.rs:LL:COL\n    |\n LL | impl<R: Read> BufReader<R> {\n    |         ^^^^ required by this bound in `BufReader::<R>::new`\n+help: consider removing the leading `&`-reference\n+   |\n+LL -         let mut stream_reader = BufReader::new(&stream);\n+LL +         let mut stream_reader = BufReader::new(stream);\n+   |\n help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | fn issue_81421<T: Read + Write>(mut stream: T) where &T: std::io::Read {\n    |                                                +++++++++++++++++++++++\n+help: consider changing this borrow's mutability\n+   |\n+LL |         let mut stream_reader = BufReader::new(&mut stream);\n+   |                                                ~~~~\n \n error[E0599]: the method `read_until` exists for struct `BufReader<&T>`, but its trait bounds were not satisfied\n   --> $DIR/suggest-change-mut.rs:16:23"}, {"sha": "6ef9ee81a9bd25deff8b72961b5fea44fdd56453", "filename": "src/test/ui/traits/inheritance/repeated-supertrait-ambig.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr?ref=d05fea6ac47c07606190803bc6ec4e2d7c206351", "patch": "@@ -24,10 +24,12 @@ LL | fn with_trait<C:CompareToInts + CompareTo<i32>>(c: &C) -> bool {\n    |                               ++++++++++++++++\n \n error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfied\n-  --> $DIR/repeated-supertrait-ambig.rs:34:5\n+  --> $DIR/repeated-supertrait-ambig.rs:34:34\n    |\n LL |     <dyn CompareToInts>::same_as(c, 22)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n+   |     ---------------------------- ^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `CompareTo<T>`:\n              <i64 as CompareTo<i64>>"}, {"sha": "93a36a228740286b970ad3b7e21404944a75910b", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=d05fea6ac47c07606190803bc6ec4e2d7c206351", "patch": "@@ -39,6 +39,17 @@ help: consider specifying the generic argument\n LL |     opts.get::<Q>(opt.as_ref());\n    |             +++++\n \n+error[E0282]: type annotations needed\n+  --> $DIR/issue-77982.rs:13:59\n+   |\n+LL |     let ips: Vec<_> = (0..100_000).map(|_| u32::from(0u32.into())).collect();\n+   |                                                           ^^^^\n+   |\n+help: try using a fully qualified path to specify the expected types\n+   |\n+LL |     let ips: Vec<_> = (0..100_000).map(|_| u32::from(<u32 as Into<T>>::into(0u32))).collect();\n+   |                                                      +++++++++++++++++++++++    ~\n+\n error[E0283]: type annotations needed\n   --> $DIR/issue-77982.rs:13:59\n    |\n@@ -98,6 +109,7 @@ help: consider giving this pattern a type, where the type for type parameter `T`\n LL |     let _: Box<T> = (&()).bar();\n    |          ++++++++\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0283`.\n+Some errors have detailed explanations: E0282, E0283.\n+For more information about an error, try `rustc --explain E0282`."}, {"sha": "a1abf668b8b6ec8c0e0f08c99dd29f3d09ae88fd", "filename": "src/test/ui/traits/suggest-deferences/issue-39029.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.fixed?ref=d05fea6ac47c07606190803bc6ec4e2d7c206351", "patch": "@@ -13,6 +13,6 @@ impl std::ops::Deref for NoToSocketAddrs {\n fn main() {\n     let _works = TcpListener::bind(\"some string\");\n     let bad = NoToSocketAddrs(\"bad\".to_owned());\n-    let _errors = TcpListener::bind(&bad);\n+    let _errors = TcpListener::bind(&*bad);\n     //~^ ERROR the trait bound `NoToSocketAddrs: ToSocketAddrs` is not satisfied\n }"}, {"sha": "eb2b88059d485e0059be5f736f5e26b96911421f", "filename": "src/test/ui/traits/suggest-deferences/issue-39029.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d05fea6ac47c07606190803bc6ec4e2d7c206351/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr?ref=d05fea6ac47c07606190803bc6ec4e2d7c206351", "patch": "@@ -1,21 +1,11 @@\n error[E0277]: the trait bound `NoToSocketAddrs: ToSocketAddrs` is not satisfied\n-  --> $DIR/issue-39029.rs:16:19\n+  --> $DIR/issue-39029.rs:16:37\n    |\n LL |     let _errors = TcpListener::bind(&bad);\n    |                   ----------------- ^^^^ the trait `ToSocketAddrs` is not implemented for `NoToSocketAddrs`\n    |                   |\n    |                   required by a bound introduced by this call\n    |\n-   = help: the following other types implement trait `ToSocketAddrs`:\n-             &'a [std::net::SocketAddr]\n-             &T\n-             (&str, u16)\n-             (IpAddr, u16)\n-             (Ipv4Addr, u16)\n-             (Ipv6Addr, u16)\n-             (String, u16)\n-             SocketAddrV4\n-           and 4 others\n    = note: required for `&NoToSocketAddrs` to implement `ToSocketAddrs`\n note: required by a bound in `TcpListener::bind`\n   --> $SRC_DIR/std/src/net/tcp.rs:LL:COL"}]}