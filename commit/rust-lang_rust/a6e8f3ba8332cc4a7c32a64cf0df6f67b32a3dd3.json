{"sha": "a6e8f3ba8332cc4a7c32a64cf0df6f67b32a3dd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZThmM2JhODMzMmNjNGE3YzMyYTY0Y2YwZGY2ZjY3YjMyYTNkZDM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-18T05:39:32Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-18T08:09:24Z"}, "message": "Add type `Determinacy`.", "tree": {"sha": "d8305484bfda7f22299209c994da2912f3310b50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8305484bfda7f22299209c994da2912f3310b50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6e8f3ba8332cc4a7c32a64cf0df6f67b32a3dd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6e8f3ba8332cc4a7c32a64cf0df6f67b32a3dd3", "html_url": "https://github.com/rust-lang/rust/commit/a6e8f3ba8332cc4a7c32a64cf0df6f67b32a3dd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6e8f3ba8332cc4a7c32a64cf0df6f67b32a3dd3/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "951d3d6872daa1db11a7678606a5a9791220fb1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/951d3d6872daa1db11a7678606a5a9791220fb1d", "html_url": "https://github.com/rust-lang/rust/commit/951d3d6872daa1db11a7678606a5a9791220fb1d"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "c0a9ee1c48380e957ea9c07118da18b91ee3dfbf", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a6e8f3ba8332cc4a7c32a64cf0df6f67b32a3dd3/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6e8f3ba8332cc4a7c32a64cf0df6f67b32a3dd3/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=a6e8f3ba8332cc4a7c32a64cf0df6f67b32a3dd3", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use self::Determinacy::*;\n use self::ImportDirectiveSubclass::*;\n \n use Module;\n@@ -36,14 +37,20 @@ impl<'a> Resolver<'a> {\n     }\n }\n \n+#[derive(Copy, Clone, Debug)]\n+pub enum Determinacy {\n+    Determined,\n+    Undetermined,\n+}\n+\n /// Contains data for specific types of import directives.\n #[derive(Clone, Debug)]\n pub enum ImportDirectiveSubclass<'a> {\n     SingleImport {\n         target: Name,\n         source: Name,\n-        value_result: Cell<Result<&'a NameBinding<'a>, bool /* determined? */>>,\n-        type_result: Cell<Result<&'a NameBinding<'a>, bool /* determined? */>>,\n+        value_result: Cell<Result<&'a NameBinding<'a>, Determinacy>>,\n+        type_result: Cell<Result<&'a NameBinding<'a>, Determinacy>>,\n     },\n     GlobImport { is_prelude: bool },\n }\n@@ -53,8 +60,8 @@ impl<'a> ImportDirectiveSubclass<'a> {\n         SingleImport {\n             target: target,\n             source: source,\n-            type_result: Cell::new(Err(false)),\n-            value_result: Cell::new(Err(false)),\n+            type_result: Cell::new(Err(Undetermined)),\n+            value_result: Cell::new(Err(Undetermined)),\n         }\n     }\n }\n@@ -497,21 +504,21 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n \n         let mut indeterminate = false;\n         for &(ns, result) in &[(ValueNS, value_result), (TypeNS, type_result)] {\n-            if let Err(false) = result.get() {\n+            if let Err(Undetermined) = result.get() {\n                 result.set({\n                     match self.resolve_name_in_module(module, source, ns, false, None) {\n                         Success(binding) => Ok(binding),\n-                        Indeterminate => Err(false),\n-                        Failed(_) => Err(true),\n+                        Indeterminate => Err(Undetermined),\n+                        Failed(_) => Err(Determined),\n                     }\n                 });\n             } else {\n                 continue\n             };\n \n             match result.get() {\n-                Err(false) => indeterminate = true,\n-                Err(true) => {\n+                Err(Undetermined) => indeterminate = true,\n+                Err(Determined) => {\n                     self.update_resolution(directive.parent, target, ns, |_, resolution| {\n                         resolution.single_imports.directive_failed()\n                     });"}]}