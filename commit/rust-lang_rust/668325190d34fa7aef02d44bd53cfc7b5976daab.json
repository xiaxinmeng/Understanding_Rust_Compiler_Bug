{"sha": "668325190d34fa7aef02d44bd53cfc7b5976daab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ODMyNTE5MGQzNGZhN2FlZjAyZDQ0YmQ1M2NmYzdiNTk3NmRhYWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-12T00:21:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-12T00:21:26Z"}, "message": "Merge pull request #20902 from stevencrockett/master\n\nreference: Small grammar fixes for correctness/consistency and updates for language changes.\n\nReviewed-by: steveklabnik", "tree": {"sha": "3fe29b393d1b645b7253139db2f7019f666ab189", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fe29b393d1b645b7253139db2f7019f666ab189"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/668325190d34fa7aef02d44bd53cfc7b5976daab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/668325190d34fa7aef02d44bd53cfc7b5976daab", "html_url": "https://github.com/rust-lang/rust/commit/668325190d34fa7aef02d44bd53cfc7b5976daab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/668325190d34fa7aef02d44bd53cfc7b5976daab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67736510aed0090f7bed69dbe6218a3d6b45e491", "url": "https://api.github.com/repos/rust-lang/rust/commits/67736510aed0090f7bed69dbe6218a3d6b45e491", "html_url": "https://github.com/rust-lang/rust/commit/67736510aed0090f7bed69dbe6218a3d6b45e491"}, {"sha": "e7e308f447eccb626f697b5d6d10b1c9e45839e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7e308f447eccb626f697b5d6d10b1c9e45839e4", "html_url": "https://github.com/rust-lang/rust/commit/e7e308f447eccb626f697b5d6d10b1c9e45839e4"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "6c34d4546cd639329df93d46c4d2c23377cb8a4a", "filename": "src/doc/reference.md", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/668325190d34fa7aef02d44bd53cfc7b5976daab/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/668325190d34fa7aef02d44bd53cfc7b5976daab/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=668325190d34fa7aef02d44bd53cfc7b5976daab", "patch": "@@ -603,7 +603,7 @@ mod b {\n ```\n \n * Paths starting with the keyword `super` begin resolution relative to the\n-  parent module. Each further identifier must resolve to an item\n+  parent module. Each further identifier must resolve to an item.\n \n ```rust\n mod a {\n@@ -985,7 +985,7 @@ top of [modules](#modules) and [blocks](#blocks).\n \n Use declarations support a number of convenient shortcuts:\n \n-* Rebinding the target name as a new local name, using the syntax `use p::q::r as x;`.\n+* Rebinding the target name as a new local name, using the syntax `use p::q::r as x;`\n * Simultaneously binding a list of paths differing only in their final element,\n   using the glob-like brace syntax `use a::b::{c,d,e,f};`\n * Binding all paths matching a given prefix, using the asterisk wildcard syntax\n@@ -1091,7 +1091,7 @@ set of *input* [*slots*](#memory-slots) as parameters, through which the caller\n passes arguments into the function, and an *output* [*slot*](#memory-slots)\n through which the function passes results back to the caller.\n \n-A function may also be copied into a first class *value*, in which case the\n+A function may also be copied into a first-class *value*, in which case the\n value has the corresponding [*function type*](#function-types), and can be used\n otherwise exactly as a function item (with a minor additional cost of calling\n the function indirectly).\n@@ -1224,7 +1224,7 @@ the guarantee that these issues are never caused by safe code.\n   * A value other than `false` (0) or `true` (1) in a `bool`\n   * A discriminant in an `enum` not included in the type definition\n   * A value in a `char` which is a surrogate or above `char::MAX`\n-  * non-UTF-8 byte sequences in a `str`\n+  * Non-UTF-8 byte sequences in a `str`\n * Unwinding into Rust from foreign code or unwinding from Rust into foreign\n   code. Rust's failure system is not compatible with exception handling in\n   other languages. Unwinding must be caught and handled at FFI boundaries.\n@@ -1827,7 +1827,7 @@ accesses in two cases:\n \n These two cases are surprisingly powerful for creating module hierarchies\n exposing public APIs while hiding internal implementation details. To help\n-explain, here's a few use cases and what they would entail.\n+explain, here's a few use cases and what they would entail:\n \n * A library developer needs to expose functionality to crates which link\n   against their library. As a consequence of the first case, this means that\n@@ -1858,7 +1858,7 @@ import/expression is only valid if the destination is in the current visibility\n scope.\n \n Here's an example of a program which exemplifies the three cases outlined\n-above.\n+above:\n \n ```\n // This module is private, meaning that no external crate can access this\n@@ -2213,7 +2213,7 @@ mod m1 {\n ```\n \n This example shows how one can use `allow` and `warn` to toggle a particular\n-check on and off.\n+check on and off:\n \n ```{.ignore}\n #[warn(missing_docs)]\n@@ -2235,7 +2235,7 @@ mod m2{\n ```\n \n This example shows how one can use `forbid` to disallow uses of `allow` for\n-that lint check.\n+that lint check:\n \n ```{.ignore}\n #[forbid(missing_docs)]\n@@ -2318,9 +2318,9 @@ These language items are traits:\n * `ord`\n   : Elements have a partial ordering.\n * `deref`\n-  : `*` can be applied, yielding a reference to another type\n+  : `*` can be applied, yielding a reference to another type.\n * `deref_mut`\n-  : `*` can be applied, yielding a mutable reference to another type\n+  : `*` can be applied, yielding a mutable reference to another type.\n \n These are functions:\n \n@@ -2341,7 +2341,7 @@ These are functions:\n * `type_id`\n   : The type returned by the `type_id` intrinsic.\n * `unsafe`\n-  : A type whose contents can be mutated through an immutable reference\n+  : A type whose contents can be mutated through an immutable reference.\n \n #### Marker types\n \n@@ -2350,11 +2350,11 @@ These types help drive the compiler's analysis\n * `begin_unwind`\n   : ___Needs filling in___\n * `no_copy_bound`\n-  : This type does not implement \"copy\", even if eligible\n+  : This type does not implement \"copy\", even if eligible.\n * `no_send_bound`\n-  : This type does not implement \"send\", even if eligible\n+  : This type does not implement \"send\", even if eligible.\n * `no_sync_bound`\n-  : This type does not implement \"sync\", even if eligible\n+  : This type does not implement \"sync\", even if eligible.\n * `eh_personality`\n   : ___Needs filling in___\n * `exchange_free`\n@@ -2376,11 +2376,11 @@ These types help drive the compiler's analysis\n * `iterator`\n   : ___Needs filling in___\n * `contravariant_lifetime`\n-  : The lifetime parameter should be considered contravariant\n+  : The lifetime parameter should be considered contravariant.\n * `covariant_lifetime`\n-  : The lifetime parameter should be considered covariant\n+  : The lifetime parameter should be considered covariant.\n * `invariant_lifetime`\n-  : The lifetime parameter should be considered invariant\n+  : The lifetime parameter should be considered invariant.\n * `malloc`\n   : Allocate memory on the managed heap.\n * `owned_box`\n@@ -2390,11 +2390,11 @@ These types help drive the compiler's analysis\n * `start`\n   : ___Needs filling in___\n * `contravariant_type`\n-  : The type parameter should be considered contravariant\n+  : The type parameter should be considered contravariant.\n * `covariant_type`\n-  : The type parameter should be considered covariant\n+  : The type parameter should be considered covariant.\n * `invariant_type`\n-  : The type parameter should be considered invariant\n+  : The type parameter should be considered invariant.\n * `ty_desc`\n   : ___Needs filling in___\n \n@@ -3219,11 +3219,11 @@ the simplest and least-expensive form (analogous to a ```|| { }``` expression),\n the lambda expression captures its environment by reference, effectively\n borrowing pointers to all outer variables mentioned inside the function.\n Alternately, the compiler may infer that a lambda expression should copy or\n-move values (depending on their type.) from the environment into the lambda\n+move values (depending on their type) from the environment into the lambda\n expression's captured environment.\n \n In this example, we define a function `ten_times` that takes a higher-order\n-function argument, and call it with a lambda expression as an argument.\n+function argument, and call it with a lambda expression as an argument:\n \n ```\n fn ten_times<F>(f: F) where F: Fn(int) {\n@@ -3661,14 +3661,14 @@ within an object along with one byte past the end.\n The types `char` and `str` hold textual data.\n \n A value of type `char` is a [Unicode scalar value](\n-http://www.unicode.org/glossary/#unicode_scalar_value) (ie. a code point that\n+http://www.unicode.org/glossary/#unicode_scalar_value) (i.e. a code point that\n is not a surrogate), represented as a 32-bit unsigned word in the 0x0000 to\n 0xD7FF or 0xE000 to 0x10FFFF range. A `[char]` array is effectively an UCS-4 /\n UTF-32 string.\n \n A value of type `str` is a Unicode string, represented as an array of 8-bit\n unsigned bytes holding a sequence of UTF-8 codepoints. Since `str` is of\n-unknown size, it is not a _first class_ type, but can only be instantiated\n+unknown size, it is not a _first-class_ type, but can only be instantiated\n through a pointer type, such as `&str` or `String`.\n \n ### Tuple types\n@@ -3698,7 +3698,7 @@ assert!(b != \"world\");\n \n Rust has two different types for a list of items:\n \n-* `[T ..N]`, an 'array'\n+* `[T; N]`, an 'array'.\n * `&[T]`, a 'slice'.\n \n An array has a fixed size, and can be allocated on either the stack or the\n@@ -3710,9 +3710,9 @@ to, it borrows it.\n An example of each kind:\n \n ```{rust}\n-let vec: Vec<int>  = vec![1, 2, 3];\n-let arr: [int; 3] = [1, 2, 3];\n-let s: &[int]      = vec.as_slice();\n+let vec: Vec<i32> = vec![1, 2, 3];\n+let arr: [i32; 3] = [1, 2, 3];\n+let s: &[i32] = vec.as_slice();\n ```\n \n As you can see, the `vec!` macro allows you to create a `Vec<T>` easily. The\n@@ -3798,7 +3798,7 @@ enum List<T> {\n     Cons(T, Box<List<T>>)\n }\n \n-let a: List<int> = List::Cons(7, Box::new(List::Cons(13, Box::new(List::Nil))));\n+let a: List<i32> = List::Cons(7, Box::new(List::Cons(13, Box::new(List::Nil))));\n ```\n \n ### Pointer types"}]}