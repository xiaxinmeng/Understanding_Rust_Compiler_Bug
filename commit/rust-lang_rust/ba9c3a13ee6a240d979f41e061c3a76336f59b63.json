{"sha": "ba9c3a13ee6a240d979f41e061c3a76336f59b63", "node_id": "C_kwDOAAsO6NoAKGJhOWMzYTEzZWU2YTI0MGQ5NzlmNDFlMDYxYzNhNzYzMzZmNTliNjM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-15T18:50:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-15T18:50:47Z"}, "message": "Rollup merge of #96026 - matthiaskrgr:clippy_compl_1304, r=Dylan-DPC\n\ncouple of clippy::complexity fixes", "tree": {"sha": "86ee4614fbe0ba21a17ce193f278252aa54309ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86ee4614fbe0ba21a17ce193f278252aa54309ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba9c3a13ee6a240d979f41e061c3a76336f59b63", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiWb6HCRBK7hj4Ov3rIwAABAgIAFxQkuycJmW0iRH3Lbu0RC+R\nKCPJgsF8mzkKeT7kgR41o/24OhdII7HcO7zjXTDxnBr5Ti1eXzegdepybjtPXeH7\ncwoJTs9zT99Oq9Jaq04xwKP/dy5/gm7nDeYqrJsRSn9uI0nrjIv+I9exC7iHvFLj\neDoQNQqI6RaiMvCMye8vwOMRtcUXUACRhbU3HD1xrhlTfggZPw45nOBIbAooiquM\nlqooPjhQL3MPG2Hrxt1bprM0us+R/cl9F0iWf+Mk74hIJEk3VylguxXLrojDwFvA\n4Gl9Tb4c7/GfCL7n0TzToIscUFLxC7r7gYNny+c+7/fdHBReyMDRy92FRE1LpT8=\n=bBC0\n-----END PGP SIGNATURE-----\n", "payload": "tree 86ee4614fbe0ba21a17ce193f278252aa54309ba\nparent 747829428b41ce182c62c019426f84e1447dfead\nparent 7c2d57e0fa1615d993a4b4166163fb0b3ec7d395\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650048647 +0200\ncommitter GitHub <noreply@github.com> 1650048647 +0200\n\nRollup merge of #96026 - matthiaskrgr:clippy_compl_1304, r=Dylan-DPC\n\ncouple of clippy::complexity fixes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba9c3a13ee6a240d979f41e061c3a76336f59b63", "html_url": "https://github.com/rust-lang/rust/commit/ba9c3a13ee6a240d979f41e061c3a76336f59b63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba9c3a13ee6a240d979f41e061c3a76336f59b63/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "747829428b41ce182c62c019426f84e1447dfead", "url": "https://api.github.com/repos/rust-lang/rust/commits/747829428b41ce182c62c019426f84e1447dfead", "html_url": "https://github.com/rust-lang/rust/commit/747829428b41ce182c62c019426f84e1447dfead"}, {"sha": "7c2d57e0fa1615d993a4b4166163fb0b3ec7d395", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c2d57e0fa1615d993a4b4166163fb0b3ec7d395", "html_url": "https://github.com/rust-lang/rust/commit/7c2d57e0fa1615d993a4b4166163fb0b3ec7d395"}], "stats": {"total": 54, "additions": 25, "deletions": 29}, "files": [{"sha": "9cd072c8b4cdf38af332c504b226cea1996edb3f", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=ba9c3a13ee6a240d979f41e061c3a76336f59b63", "patch": "@@ -832,7 +832,7 @@ impl Diagnostic {\n         name: impl Into<Cow<'static, str>>,\n         arg: DiagnosticArgValue<'static>,\n     ) -> &mut Self {\n-        self.args.push((name.into(), arg.into()));\n+        self.args.push((name.into(), arg));\n         self\n     }\n "}, {"sha": "c6a6e3d125f709196f09194bdfc509afb571c41d", "filename": "compiler/rustc_expand/src/mbe/macro_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs?ref=ba9c3a13ee6a240d979f41e061c3a76336f59b63", "patch": "@@ -270,7 +270,7 @@ fn check_binders(\n                     MISSING_FRAGMENT_SPECIFIER,\n                     span,\n                     node_id,\n-                    &format!(\"missing fragment specifier\"),\n+                    \"missing fragment specifier\",\n                 );\n             }\n             if !macros.is_empty() {"}, {"sha": "58c309a5c52ea7a52aa3efbe39157cc8ad225ff6", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=ba9c3a13ee6a240d979f41e061c3a76336f59b63", "patch": "@@ -63,9 +63,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// common state. Used in coherence.\n     pub fn fork(&self) -> Self {\n         Self {\n-            tcx: self.tcx.clone(),\n-            defining_use_anchor: self.defining_use_anchor.clone(),\n-            in_progress_typeck_results: self.in_progress_typeck_results.clone(),\n+            tcx: self.tcx,\n+            defining_use_anchor: self.defining_use_anchor,\n+            in_progress_typeck_results: self.in_progress_typeck_results,\n             inner: self.inner.clone(),\n             skip_leak_check: self.skip_leak_check.clone(),\n             lexical_region_resolutions: self.lexical_region_resolutions.clone(),"}, {"sha": "b53ef8161359a48fec2941ff7624152df91b82cf", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=ba9c3a13ee6a240d979f41e061c3a76336f59b63", "patch": "@@ -44,7 +44,7 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n #[proc_macro]\n #[allow_internal_unstable(step_trait, rustc_attrs, trusted_step)]\n pub fn newtype_index(input: TokenStream) -> TokenStream {\n-    newtype::newtype(input).into()\n+    newtype::newtype(input)\n }\n \n decl_derive!([HashStable, attributes(stable_hasher)] => hash_stable::hash_stable_derive);"}, {"sha": "226456588e75d3c12545132f4671ce3b23ecfc9d", "filename": "compiler/rustc_middle/src/ty/inhabitedness/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs?ref=ba9c3a13ee6a240d979f41e061c3a76336f59b63", "patch": "@@ -191,7 +191,7 @@ impl<'tcx> Ty<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> DefIdForest<'tcx> {\n-        tcx.type_uninhabited_from(param_env.and(self)).clone()\n+        tcx.type_uninhabited_from(param_env.and(self))\n     }\n }\n "}, {"sha": "3a6e59db90b91d08cd492268ebf3ebf934210cbc", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=ba9c3a13ee6a240d979f41e061c3a76336f59b63", "patch": "@@ -39,7 +39,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         }\n                     };\n \n-                Constant { span, user_ty: None, literal: literal.into() }\n+                Constant { span, user_ty: None, literal }\n             }\n             ExprKind::NonHirLiteral { lit, user_ty } => {\n                 let user_ty = user_ty.map(|user_ty| {"}, {"sha": "823f5f4cf12c460f74c79946e47e658050c76a2a", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=ba9c3a13ee6a240d979f41e061c3a76336f59b63", "patch": "@@ -423,11 +423,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         }\n                         thir::InlineAsmOperand::Const { value, span } => {\n                             mir::InlineAsmOperand::Const {\n-                                value: Box::new(Constant {\n-                                    span,\n-                                    user_ty: None,\n-                                    literal: value.into(),\n-                                }),\n+                                value: Box::new(Constant { span, user_ty: None, literal: value }),\n                             }\n                         }\n                         thir::InlineAsmOperand::SymFn { expr } => mir::InlineAsmOperand::SymFn {"}, {"sha": "0e9e98693766084ec18e95d4d1f10904dbd7c2ee", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=ba9c3a13ee6a240d979f41e061c3a76336f59b63", "patch": "@@ -441,7 +441,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     // Need to experiment.\n                     user_ty: None,\n \n-                    literal: method.into(),\n+                    literal: method,\n                 })),\n                 args: vec![val, expect],\n                 destination: Some((eq_result, eq_block)),"}, {"sha": "1b4510b62206803d6b9a710bbaee2fb13db5fdc0", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=ba9c3a13ee6a240d979f41e061c3a76336f59b63", "patch": "@@ -539,13 +539,13 @@ fn report_unused_unsafe(tcx: TyCtxt<'_>, kind: UnusedUnsafe, id: HirId) {\n             UnusedUnsafe::InUnsafeBlock(id) => {\n                 db.span_label(\n                     tcx.sess.source_map().guess_head_span(tcx.hir().span(id)),\n-                    format!(\"because it's nested under this `unsafe` block\"),\n+                    \"because it's nested under this `unsafe` block\",\n                 );\n             }\n             UnusedUnsafe::InUnsafeFn(id, usage_lint_root) => {\n                 db.span_label(\n                     tcx.sess.source_map().guess_head_span(tcx.hir().span(id)),\n-                    format!(\"because it's nested under this `unsafe` fn\"),\n+                    \"because it's nested under this `unsafe` fn\",\n                 )\n                 .note(\n                     \"this `unsafe` block does contain unsafe operations, \\"}, {"sha": "79f0237fd9b7478f4128c70465c92f0a1246915e", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=ba9c3a13ee6a240d979f41e061c3a76336f59b63", "patch": "@@ -234,13 +234,13 @@ impl<'a> StringReader<'a> {\n             rustc_lexer::TokenKind::InvalidIdent\n                 // Do not recover an identifier with emoji if the codepoint is a confusable\n                 // with a recoverable substitution token, like `\u2796`.\n-                if UNICODE_ARRAY\n+                if !UNICODE_ARRAY\n                     .iter()\n-                    .find(|&&(c, _, _)| {\n+                    .any(|&(c, _, _)| {\n                         let sym = self.str_from(start);\n                         sym.chars().count() == 1 && c == sym.chars().next().unwrap()\n                     })\n-                    .is_none() =>\n+                     =>\n             {\n                 let sym = nfc_normalize(self.str_from(start));\n                 let span = self.mk_sp(start, self.pos);"}, {"sha": "01ba9e35c24dc65c22e1ba4d79e9ef381214cfbc", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=ba9c3a13ee6a240d979f41e061c3a76336f59b63", "patch": "@@ -133,9 +133,9 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             }\n \n             // `Deprecation` is just two pointers, no need to intern it\n-            let depr_entry = DeprecationEntry::local(depr.clone(), def_id);\n+            let depr_entry = DeprecationEntry::local(*depr, def_id);\n             self.index.depr_map.insert(def_id, depr_entry);\n-        } else if let Some(parent_depr) = self.parent_depr.clone() {\n+        } else if let Some(parent_depr) = self.parent_depr {\n             if inherit_deprecation.yes() {\n                 is_deprecated = true;\n                 info!(\"tagging child {:?} as deprecated from parent\", def_id);"}, {"sha": "b4548129689b1e90f718d7737ce28c48131170a1", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=ba9c3a13ee6a240d979f41e061c3a76336f59b63", "patch": "@@ -238,7 +238,7 @@ impl Session {\n             }\n             diag.emit();\n             // If we should err, make sure we did.\n-            if must_err && !self.has_errors().is_some() {\n+            if must_err && self.has_errors().is_none() {\n                 // We have skipped a feature gate, and not run into other errors... reject.\n                 self.err(\n                     \"`-Zunleash-the-miri-inside-of-you` may not be used to circumvent feature \\"}, {"sha": "cc3a0a69999b0bc77bf99dbb1aad837f88c0d933", "filename": "compiler/rustc_target/src/abi/call/sparc64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fsparc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fsparc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fsparc64.rs?ref=ba9c3a13ee6a240d979f41e061c3a76336f59b63", "patch": "@@ -113,11 +113,11 @@ where\n             data = arg_scalar(cx, &scalar, offset, data);\n         }\n         abi::Abi::Aggregate { .. } => {\n-            for i in 0..layout.fields.count().clone() {\n+            for i in 0..layout.fields.count() {\n                 if offset < layout.fields.offset(i) {\n                     offset = layout.fields.offset(i);\n                 }\n-                data = parse_structure(cx, layout.field(cx, i).clone(), data.clone(), offset);\n+                data = parse_structure(cx, layout.field(cx, i), data.clone(), offset);\n             }\n         }\n         _ => {\n@@ -161,7 +161,7 @@ where\n \n             let mut data = parse_structure(\n                 cx,\n-                arg.layout.clone(),\n+                arg.layout,\n                 Sdata {\n                     prefix: [None; 8],\n                     prefix_index: 0,"}, {"sha": "ce0e0a21ff516f0adaab581cfa80bf828836af39", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=ba9c3a13ee6a240d979f41e061c3a76336f59b63", "patch": "@@ -258,7 +258,7 @@ impl<'tcx> OnUnimplementedDirective {\n                 enclosing_scope = Some(enclosing_scope_.clone());\n             }\n \n-            append_const_msg = command.append_const_msg.clone();\n+            append_const_msg = command.append_const_msg;\n         }\n \n         OnUnimplementedNote {"}, {"sha": "9c702610888807edf93db00027866e1abda7f622", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=ba9c3a13ee6a240d979f41e061c3a76336f59b63", "patch": "@@ -415,8 +415,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .get_if_local(def_id)\n                     .and_then(|node| node.body_id())\n                     .into_iter()\n-                    .map(|id| tcx.hir().body(id).params)\n-                    .flatten();\n+                    .flat_map(|id| tcx.hir().body(id).params)\n+                    ;\n \n                 for param in params {\n                     spans.push_span_label(param.span, String::new());"}, {"sha": "62518408b8b3097d3003936e6ccc6ced2322ace7", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9c3a13ee6a240d979f41e061c3a76336f59b63/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=ba9c3a13ee6a240d979f41e061c3a76336f59b63", "patch": "@@ -646,7 +646,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // now get all predicates in the same types as the where bounds, so we can chain them\n         let predicates_from_where =\n-            where_predicates.iter().flatten().map(|bounds| bounds.iter()).flatten();\n+            where_predicates.iter().flatten().flat_map(|bounds| bounds.iter());\n \n         // extract all bounds from the source code using their spans\n         let all_matching_bounds_strs = expected_generic_param"}]}