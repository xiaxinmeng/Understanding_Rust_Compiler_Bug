{"sha": "574c8aeeb5320a672c4956a8749d577637ad7712", "node_id": "C_kwDOAAsO6NoAKDU3NGM4YWVlYjUzMjBhNjcyYzQ5NTZhODc0OWQ1Nzc2MzdhZDc3MTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-20T13:14:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-20T13:14:23Z"}, "message": "Auto merge of #10382 - samueltardieu:issue-10381, r=llogiq\n\nBox::default(): do not omit the type of the removed trait object\n\nWithin a larger expression, when the type of `Box::new(T::default())` is `Box<dyn Trait>`, the concrete type `T` cannot be omitted in the proposed replacement `Box::<T>::default()`.\n\nFixes #10381\n\nchangelog: [`box_default`]: in case of a trait object do not omit the concrete type name", "tree": {"sha": "c46758be9ae6e9910a97193d4766cc0c5a35460c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c46758be9ae6e9910a97193d4766cc0c5a35460c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/574c8aeeb5320a672c4956a8749d577637ad7712", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/574c8aeeb5320a672c4956a8749d577637ad7712", "html_url": "https://github.com/rust-lang/rust/commit/574c8aeeb5320a672c4956a8749d577637ad7712", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/574c8aeeb5320a672c4956a8749d577637ad7712/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85d4b5ac4855433fdb7584285db4f0af65805041", "url": "https://api.github.com/repos/rust-lang/rust/commits/85d4b5ac4855433fdb7584285db4f0af65805041", "html_url": "https://github.com/rust-lang/rust/commit/85d4b5ac4855433fdb7584285db4f0af65805041"}, {"sha": "92c403c9b01e213ad9b5a003d9c3c289abc653f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/92c403c9b01e213ad9b5a003d9c3c289abc653f1", "html_url": "https://github.com/rust-lang/rust/commit/92c403c9b01e213ad9b5a003d9c3c289abc653f1"}], "stats": {"total": 53, "additions": 48, "deletions": 5}, "files": [{"sha": "dfa949d1af2f4cec1d332575ff51fdc19565e9d5", "filename": "clippy_lints/src/box_default.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/574c8aeeb5320a672c4956a8749d577637ad7712/clippy_lints%2Fsrc%2Fbox_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c8aeeb5320a672c4956a8749d577637ad7712/clippy_lints%2Fsrc%2Fbox_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbox_default.rs?ref=574c8aeeb5320a672c4956a8749d577637ad7712", "patch": "@@ -117,7 +117,8 @@ fn given_type(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n         ) => {\n             if let Some(index) = args.iter().position(|arg| arg.hir_id == expr.hir_id) &&\n                 let Some(sig) = expr_sig(cx, path) &&\n-                let Some(input) = sig.input(index)\n+                let Some(input) = sig.input(index) &&\n+                !cx.typeck_results().expr_ty_adjusted(expr).boxed_ty().is_trait()\n             {\n                 input.no_bound_vars().is_some()\n             } else {"}, {"sha": "59c0baf8718aae16755f769719e0c6823ca4afb9", "filename": "tests/ui/box_default.fixed", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/574c8aeeb5320a672c4956a8749d577637ad7712/tests%2Fui%2Fbox_default.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/574c8aeeb5320a672c4956a8749d577637ad7712/tests%2Fui%2Fbox_default.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.fixed?ref=574c8aeeb5320a672c4956a8749d577637ad7712", "patch": "@@ -33,6 +33,7 @@ fn main() {\n     let _vec4: Box<_> = Box::<Vec<bool>>::default();\n     let _more = ret_ty_fn();\n     call_ty_fn(Box::default());\n+    issue_10381();\n }\n \n fn ret_ty_fn() -> Box<bool> {\n@@ -65,3 +66,20 @@ fn issue_10089() {\n         let _ = Box::<WeirdPathed>::default();\n     };\n }\n+\n+fn issue_10381() {\n+    #[derive(Default)]\n+    pub struct Foo {}\n+    pub trait Bar {}\n+    impl Bar for Foo {}\n+\n+    fn maybe_get_bar(i: u32) -> Option<Box<dyn Bar>> {\n+        if i % 2 == 0 {\n+            Some(Box::<Foo>::default())\n+        } else {\n+            None\n+        }\n+    }\n+\n+    assert!(maybe_get_bar(2).is_some());\n+}"}, {"sha": "f7d832193a3a1a82e02e8bafd15edb6d0727126e", "filename": "tests/ui/box_default.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/574c8aeeb5320a672c4956a8749d577637ad7712/tests%2Fui%2Fbox_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c8aeeb5320a672c4956a8749d577637ad7712/tests%2Fui%2Fbox_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.rs?ref=574c8aeeb5320a672c4956a8749d577637ad7712", "patch": "@@ -33,6 +33,7 @@ fn main() {\n     let _vec4: Box<_> = Box::new(Vec::from([false; 0]));\n     let _more = ret_ty_fn();\n     call_ty_fn(Box::new(u8::default()));\n+    issue_10381();\n }\n \n fn ret_ty_fn() -> Box<bool> {\n@@ -65,3 +66,20 @@ fn issue_10089() {\n         let _ = Box::new(WeirdPathed::default());\n     };\n }\n+\n+fn issue_10381() {\n+    #[derive(Default)]\n+    pub struct Foo {}\n+    pub trait Bar {}\n+    impl Bar for Foo {}\n+\n+    fn maybe_get_bar(i: u32) -> Option<Box<dyn Bar>> {\n+        if i % 2 == 0 {\n+            Some(Box::new(Foo::default()))\n+        } else {\n+            None\n+        }\n+    }\n+\n+    assert!(maybe_get_bar(2).is_some());\n+}"}, {"sha": "78e17b9f0359c11be2673336eef032f095e815d9", "filename": "tests/ui/box_default.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/574c8aeeb5320a672c4956a8749d577637ad7712/tests%2Fui%2Fbox_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574c8aeeb5320a672c4956a8749d577637ad7712/tests%2Fui%2Fbox_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.stderr?ref=574c8aeeb5320a672c4956a8749d577637ad7712", "patch": "@@ -73,22 +73,28 @@ LL |     call_ty_fn(Box::new(u8::default()));\n    |                ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:39:5\n+  --> $DIR/box_default.rs:40:5\n    |\n LL |     Box::new(bool::default())\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<bool>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:56:28\n+  --> $DIR/box_default.rs:57:28\n    |\n LL |     let _: Box<dyn Read> = Box::new(ImplementsDefault::default());\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<ImplementsDefault>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:65:17\n+  --> $DIR/box_default.rs:66:17\n    |\n LL |         let _ = Box::new(WeirdPathed::default());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<WeirdPathed>::default()`\n \n-error: aborting due to 15 previous errors\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:78:18\n+   |\n+LL |             Some(Box::new(Foo::default()))\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<Foo>::default()`\n+\n+error: aborting due to 16 previous errors\n "}]}