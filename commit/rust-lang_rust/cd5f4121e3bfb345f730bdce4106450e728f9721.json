{"sha": "cd5f4121e3bfb345f730bdce4106450e728f9721", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNWY0MTIxZTNiZmIzNDVmNzMwYmRjZTQxMDY0NTBlNzI4Zjk3MjE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-17T10:09:28Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-17T10:09:28Z"}, "message": "Create modules in correct directory for nested modules in move_module assist", "tree": {"sha": "fea98a0052a6c45743a86fddd01160936682ab8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fea98a0052a6c45743a86fddd01160936682ab8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd5f4121e3bfb345f730bdce4106450e728f9721", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd5f4121e3bfb345f730bdce4106450e728f9721", "html_url": "https://github.com/rust-lang/rust/commit/cd5f4121e3bfb345f730bdce4106450e728f9721", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd5f4121e3bfb345f730bdce4106450e728f9721/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6b8af44829521a9f925c4d87599efa3fef38edc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6b8af44829521a9f925c4d87599efa3fef38edc", "html_url": "https://github.com/rust-lang/rust/commit/d6b8af44829521a9f925c4d87599efa3fef38edc"}], "stats": {"total": 73, "additions": 60, "deletions": 13}, "files": [{"sha": "cfc54be8d186a8d124d431299e63c49d836277cf", "filename": "crates/ide_assists/src/handlers/move_module_to_file.rs", "status": "modified", "additions": 52, "deletions": 13, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f4121e3bfb345f730bdce4106450e728f9721/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_module_to_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f4121e3bfb345f730bdce4106450e728f9721/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_module_to_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_module_to_file.rs?ref=cd5f4121e3bfb345f730bdce4106450e728f9721", "patch": "@@ -1,5 +1,8 @@\n+use std::iter;\n+\n use ast::edit::IndentLevel;\n use ide_db::base_db::AnchoredPathBuf;\n+use itertools::Itertools;\n use stdx::format_to;\n use syntax::{\n     ast::{self, edit::AstNodeEdit, NameOwner},\n@@ -34,7 +37,10 @@ pub(crate) fn move_module_to_file(acc: &mut Assists, ctx: &AssistContext) -> Opt\n \n     let module_name = module_ast.name()?;\n \n-    let module_def = ctx.sema.to_def(&module_ast)?;\n+    // get to the outermost module syntax so we can grab the module of file we are in\n+    let outermost_mod_decl =\n+        iter::successors(Some(module_ast.clone()), |module| module.parent()).last()?;\n+    let module_def = ctx.sema.to_def(&outermost_mod_decl)?;\n     let parent_module = module_def.parent(ctx.db())?;\n \n     acc.add(\n@@ -43,11 +49,19 @@ pub(crate) fn move_module_to_file(acc: &mut Assists, ctx: &AssistContext) -> Opt\n         target,\n         |builder| {\n             let path = {\n-                let dir = match parent_module.name(ctx.db()) {\n-                    Some(name) if !parent_module.is_mod_rs(ctx.db()) => format!(\"{}/\", name),\n-                    _ => String::new(),\n-                };\n-                format!(\"./{}{}.rs\", dir, module_name)\n+                let mut buf = String::from(\"./\");\n+                match parent_module.name(ctx.db()) {\n+                    Some(name) if !parent_module.is_mod_rs(ctx.db()) => {\n+                        format_to!(buf, \"{}/\", name)\n+                    }\n+                    _ => (),\n+                }\n+                let segments = iter::successors(Some(module_ast.clone()), |module| module.parent())\n+                    .filter_map(|it| it.name())\n+                    .collect::<Vec<_>>();\n+                format_to!(buf, \"{}\", segments.into_iter().rev().format(\"/\"));\n+                format_to!(buf, \".rs\");\n+                buf\n             };\n             let contents = {\n                 let items = module_items.dedent(IndentLevel(1)).to_string();\n@@ -59,14 +73,13 @@ pub(crate) fn move_module_to_file(acc: &mut Assists, ctx: &AssistContext) -> Opt\n                 items\n             };\n \n-            let mut buf = String::new();\n-            format_to!(buf, \"mod {};\", module_name);\n+            let buf = format!(\"mod {};\", module_name);\n \n-            let replacement_start = if let Some(mod_token) = module_ast.mod_token() {\n-                mod_token.text_range().start()\n-            } else {\n-                module_ast.syntax().text_range().start()\n-            };\n+            let replacement_start = match module_ast.mod_token() {\n+                Some(mod_token) => mod_token.text_range(),\n+                None => module_ast.syntax().text_range(),\n+            }\n+            .start();\n \n             builder.replace(\n                 TextRange::new(replacement_start, module_ast.syntax().text_range().end()),\n@@ -209,6 +222,32 @@ mod $0tests {\n mod tests;\n //- /tests.rs\n #[test] fn t() {}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn extract_nested() {\n+        check_assist(\n+            move_module_to_file,\n+            r#\"\n+//- /lib.rs\n+mod foo;\n+//- /foo.rs\n+mod bar {\n+    mod baz {\n+        mod qux$0 {}\n+    }\n+}\n+\"#,\n+            r#\"\n+//- /foo.rs\n+mod bar {\n+    mod baz {\n+        mod qux;\n+    }\n+}\n+//- /foo/bar/baz/qux.rs\n \"#,\n         );\n     }"}, {"sha": "b057e662407ace4158c897a2bc10285e51049d1e", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd5f4121e3bfb345f730bdce4106450e728f9721/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5f4121e3bfb345f730bdce4106450e728f9721/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=cd5f4121e3bfb345f730bdce4106450e728f9721", "patch": "@@ -675,6 +675,14 @@ impl ast::LifetimeParam {\n     }\n }\n \n+impl ast::Module {\n+    /// Returns the parent ast::Module, this is different than the semantic parent in that this only\n+    /// considers parent declarations in the AST\n+    pub fn parent(&self) -> Option<ast::Module> {\n+        self.syntax().ancestors().nth(2).and_then(ast::Module::cast)\n+    }\n+}\n+\n impl ast::RangePat {\n     pub fn start(&self) -> Option<ast::Pat> {\n         self.syntax()"}]}