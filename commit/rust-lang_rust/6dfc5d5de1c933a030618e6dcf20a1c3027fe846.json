{"sha": "6dfc5d5de1c933a030618e6dcf20a1c3027fe846", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkZmM1ZDVkZTFjOTMzYTAzMDYxOGU2ZGNmMjBhMWMzMDI3ZmU4NDY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-10-08T02:56:30Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-10-08T02:56:30Z"}, "message": "std: fix an infinite loop in num::ToPrimitive and add tests", "tree": {"sha": "fcb02bfc734c713b12ab79799378ca8570fd62ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcb02bfc734c713b12ab79799378ca8570fd62ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dfc5d5de1c933a030618e6dcf20a1c3027fe846", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dfc5d5de1c933a030618e6dcf20a1c3027fe846", "html_url": "https://github.com/rust-lang/rust/commit/6dfc5d5de1c933a030618e6dcf20a1c3027fe846", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dfc5d5de1c933a030618e6dcf20a1c3027fe846/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "html_url": "https://github.com/rust-lang/rust/commit/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "379e874f8627c15fe3ef840887ac8389dfbeac93", "filename": "src/libstd/num/num.rs", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6dfc5d5de1c933a030618e6dcf20a1c3027fe846/src%2Flibstd%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dfc5d5de1c933a030618e6dcf20a1c3027fe846/src%2Flibstd%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fnum.rs?ref=6dfc5d5de1c933a030618e6dcf20a1c3027fe846", "patch": "@@ -404,9 +404,7 @@ pub trait ToPrimitive {\n \n     /// Converts the value of `self` to an `u64`.\n     #[inline]\n-    fn to_u64(&self) -> Option<u64> {\n-        self.to_u64().and_then(|x| x.to_u64())\n-    }\n+    fn to_u64(&self) -> Option<u64>;\n \n     /// Converts the value of `self` to an `f32`.\n     #[inline]\n@@ -1481,4 +1479,51 @@ mod tests {\n         assert_eq!(third.checked_mul(&3), Some(third * 3));\n         assert_eq!(third.checked_mul(&4), None);\n     }\n+\n+\n+    #[deriving(Eq)]\n+    struct Value { x: int }\n+\n+    impl ToPrimitive for Value {\n+        fn to_i64(&self) -> Option<i64> { self.x.to_i64() }\n+        fn to_u64(&self) -> Option<u64> { self.x.to_u64() }\n+    }\n+\n+    impl FromPrimitive for Value {\n+        fn from_i64(n: i64) -> Option<Value> { Some(Value { x: n as int }) }\n+        fn from_u64(n: u64) -> Option<Value> { Some(Value { x: n as int }) }\n+    }\n+\n+    #[test]\n+    fn test_to_primitive() {\n+        let value = Value { x: 5 };\n+        assert_eq!(value.to_int(),  Some(5));\n+        assert_eq!(value.to_i8(),   Some(5));\n+        assert_eq!(value.to_i16(),  Some(5));\n+        assert_eq!(value.to_i32(),  Some(5));\n+        assert_eq!(value.to_i64(),  Some(5));\n+        assert_eq!(value.to_uint(), Some(5));\n+        assert_eq!(value.to_u8(),   Some(5));\n+        assert_eq!(value.to_u16(),  Some(5));\n+        assert_eq!(value.to_u32(),  Some(5));\n+        assert_eq!(value.to_u64(),  Some(5));\n+        assert_eq!(value.to_f32(),  Some(5f32));\n+        assert_eq!(value.to_f64(),  Some(5f64));\n+    }\n+\n+    #[test]\n+    fn test_from_primitive() {\n+        assert_eq!(from_int(5),    Some(Value { x: 5 }));\n+        assert_eq!(from_i8(5),     Some(Value { x: 5 }));\n+        assert_eq!(from_i16(5),    Some(Value { x: 5 }));\n+        assert_eq!(from_i32(5),    Some(Value { x: 5 }));\n+        assert_eq!(from_i64(5),    Some(Value { x: 5 }));\n+        assert_eq!(from_uint(5),   Some(Value { x: 5 }));\n+        assert_eq!(from_u8(5),     Some(Value { x: 5 }));\n+        assert_eq!(from_u16(5),    Some(Value { x: 5 }));\n+        assert_eq!(from_u32(5),    Some(Value { x: 5 }));\n+        assert_eq!(from_u64(5),    Some(Value { x: 5 }));\n+        assert_eq!(from_f32(5f32), Some(Value { x: 5 }));\n+        assert_eq!(from_f64(5f64), Some(Value { x: 5 }));\n+    }\n }"}]}