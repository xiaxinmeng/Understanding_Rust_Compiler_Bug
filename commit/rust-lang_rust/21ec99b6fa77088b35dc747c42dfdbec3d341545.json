{"sha": "21ec99b6fa77088b35dc747c42dfdbec3d341545", "node_id": "C_kwDOAAsO6NoAKDIxZWM5OWI2ZmE3NzA4OGIzNWRjNzQ3YzQyZGZkYmVjM2QzNDE1NDU", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-24T17:07:23Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-09T13:05:52Z"}, "message": "`for_loop_over_fallibles`: Suggest removing `.next()`", "tree": {"sha": "4d9d96b5d6a733090080db9227ce22eedc0e6bf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d9d96b5d6a733090080db9227ce22eedc0e6bf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21ec99b6fa77088b35dc747c42dfdbec3d341545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21ec99b6fa77088b35dc747c42dfdbec3d341545", "html_url": "https://github.com/rust-lang/rust/commit/21ec99b6fa77088b35dc747c42dfdbec3d341545", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21ec99b6fa77088b35dc747c42dfdbec3d341545/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d030ba52e20da70ddca073bd6795d0c27aff2ddb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d030ba52e20da70ddca073bd6795d0c27aff2ddb", "html_url": "https://github.com/rust-lang/rust/commit/d030ba52e20da70ddca073bd6795d0c27aff2ddb"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "78b6ca6a653c0953265c76d12609b0cb759aa3eb", "filename": "compiler/rustc_lint/src/for_loop_over_fallibles.rs", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/21ec99b6fa77088b35dc747c42dfdbec3d341545/compiler%2Frustc_lint%2Fsrc%2Ffor_loop_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ec99b6fa77088b35dc747c42dfdbec3d341545/compiler%2Frustc_lint%2Fsrc%2Ffor_loop_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ffor_loop_over_fallibles.rs?ref=21ec99b6fa77088b35dc747c42dfdbec3d341545", "patch": "@@ -73,17 +73,30 @@ impl<'tcx> LateLintPass<'tcx> for ForLoopOverFallibles {\n         );\n \n         cx.struct_span_lint(FOR_LOOP_OVER_FALLIBLES, arg.span, |diag| {\n-            diag.build(msg)\n-                .multipart_suggestion_verbose(\n-                    \"consider using `if let` to clear intent\",\n-                    vec![\n-                        // NB can't use `until` here because `expr.span` and `pat.span` have different syntax contexts\n-                        (expr.span.with_hi(pat.span.lo()), format!(\"if let {var}(\")),\n-                        (pat.span.between(arg.span), format!(\") = \")),\n-                    ],\n-                    Applicability::MachineApplicable,\n-                )\n-                .emit()\n+            let mut warn = diag.build(msg);\n+\n+            if let Some(recv) = extract_iterator_next_call(cx, arg)\n+            && let Ok(recv_snip) = cx.sess().source_map().span_to_snippet(recv.span)\n+            {\n+                warn.span_suggestion(\n+                    recv.span.between(arg.span.shrink_to_hi()),\n+                    format!(\"to iterate over `{recv_snip}` remove the call to `next`\"),\n+                    \"\",\n+                    Applicability::MaybeIncorrect\n+                );\n+            }\n+\n+            warn.multipart_suggestion_verbose(\n+                \"consider using `if let` to clear intent\",\n+                vec![\n+                    // NB can't use `until` here because `expr.span` and `pat.span` have different syntax contexts\n+                    (expr.span.with_hi(pat.span.lo()), format!(\"if let {var}(\")),\n+                    (pat.span.between(arg.span), format!(\") = \")),\n+                ],\n+                Applicability::MachineApplicable,\n+            );\n+\n+            warn.emit()\n         })\n     }\n }\n@@ -103,3 +116,17 @@ fn extract_for_loop<'tcx>(expr: &Expr<'tcx>) -> Option<(&'tcx Pat<'tcx>, &'tcx E\n         None\n     }\n }\n+\n+fn extract_iterator_next_call<'tcx>(\n+    cx: &LateContext<'_>,\n+    expr: &Expr<'tcx>,\n+) -> Option<&'tcx Expr<'tcx>> {\n+    // This won't work for `Iterator::next(iter)`, is this an issue?\n+    if let hir::ExprKind::MethodCall(_, [recv], _) = expr.kind\n+    && cx.typeck_results().type_dependent_def_id(expr.hir_id) == cx.tcx.lang_items().next_fn()\n+    {\n+        Some(recv)\n+    } else {\n+        return None\n+    }\n+}"}]}