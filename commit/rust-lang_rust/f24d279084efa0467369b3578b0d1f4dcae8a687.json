{"sha": "f24d279084efa0467369b3578b0d1f4dcae8a687", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNGQyNzkwODRlZmEwNDY3MzY5YjM1NzhiMGQxZjRkY2FlOGE2ODc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-20T13:51:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-20T13:51:59Z"}, "message": "Rollup merge of #76887 - GuillaumeGomez:hashset-iter-types-examples, r=Dylan-DPC\n\nAdd missing examples on HashSet iter types", "tree": {"sha": "d13ef7a2b27f4eec62ac819c98e1631577fa04a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d13ef7a2b27f4eec62ac819c98e1631577fa04a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f24d279084efa0467369b3578b0d1f4dcae8a687", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfZ16ACRBK7hj4Ov3rIwAAdHIIAFY7Hfn+DUtLqchMYrexs/34\nTCcVwaYUlxJl+PZjI6aOKl6RmihOk5/35Wlfwy6Rz4l/l/HDon3J/uQmufSvDYUV\nYGUFXWkbqn4pvlicvmMFeW5L+FjwanZwuMKtFQ1dKDB3oB8Tfn+7tnq+52pW2uhu\nHbhyLo11NAVTjcs0h613YJ6ajgY6R5oB4LwvtiTUv+dZCuM/Qd+O9RJR+JBS02hH\nRcwyj6QMgc54Brze2xLoVnBrpKim1VpKvBfFfDfaV8EgfF5TTUwvjJIu9mTTeJ+z\nlJWUINhj0CZYz5C2WxXQ1vq/UcWBLnPtDq4K52NdnlxOPG4XRIoRtyJevJ2Qm9U=\n=MOBW\n-----END PGP SIGNATURE-----\n", "payload": "tree d13ef7a2b27f4eec62ac819c98e1631577fa04a3\nparent 3ef093ba2dab113b1988836503c173b2e9c6efea\nparent 28588e5df1747572110f0fc247d2efd653f3b398\nauthor Ralf Jung <post@ralfj.de> 1600609919 +0200\ncommitter GitHub <noreply@github.com> 1600609919 +0200\n\nRollup merge of #76887 - GuillaumeGomez:hashset-iter-types-examples, r=Dylan-DPC\n\nAdd missing examples on HashSet iter types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f24d279084efa0467369b3578b0d1f4dcae8a687", "html_url": "https://github.com/rust-lang/rust/commit/f24d279084efa0467369b3578b0d1f4dcae8a687", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f24d279084efa0467369b3578b0d1f4dcae8a687/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ef093ba2dab113b1988836503c173b2e9c6efea", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ef093ba2dab113b1988836503c173b2e9c6efea", "html_url": "https://github.com/rust-lang/rust/commit/3ef093ba2dab113b1988836503c173b2e9c6efea"}, {"sha": "28588e5df1747572110f0fc247d2efd653f3b398", "url": "https://api.github.com/repos/rust-lang/rust/commits/28588e5df1747572110f0fc247d2efd653f3b398", "html_url": "https://github.com/rust-lang/rust/commit/28588e5df1747572110f0fc247d2efd653f3b398"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "a0c39852ad5d8b69180064d9eccea1326db4216f", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/f24d279084efa0467369b3578b0d1f4dcae8a687/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24d279084efa0467369b3578b0d1f4dcae8a687/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=f24d279084efa0467369b3578b0d1f4dcae8a687", "patch": "@@ -1173,6 +1173,16 @@ where\n /// See its documentation for more.\n ///\n /// [`iter`]: HashSet::iter\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::HashSet;\n+///\n+/// let a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n+///\n+/// let mut iter = a.iter();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, K: 'a> {\n     base: base::Iter<'a, K>,\n@@ -1184,6 +1194,16 @@ pub struct Iter<'a, K: 'a> {\n /// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n /// [`into_iter`]: IntoIterator::into_iter\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::HashSet;\n+///\n+/// let a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n+///\n+/// let mut iter = a.into_iter();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K> {\n     base: base::IntoIter<K>,\n@@ -1195,6 +1215,16 @@ pub struct IntoIter<K> {\n /// See its documentation for more.\n ///\n /// [`drain`]: HashSet::drain\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::HashSet;\n+///\n+/// let mut a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n+///\n+/// let mut drain = a.drain();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Drain<'a, K: 'a> {\n     base: base::Drain<'a, K>,\n@@ -1205,6 +1235,18 @@ pub struct Drain<'a, K: 'a> {\n /// This `struct` is created by the [`drain_filter`] method on [`HashSet`].\n ///\n /// [`drain_filter`]: HashSet::drain_filter\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(hash_drain_filter)]\n+///\n+/// use std::collections::HashSet;\n+///\n+/// let mut a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n+///\n+/// let mut drain_filtered = a.drain_filter(|v| v % 2 == 0);\n+/// ```\n #[unstable(feature = \"hash_drain_filter\", issue = \"59618\")]\n pub struct DrainFilter<'a, K, F>\n where\n@@ -1219,6 +1261,17 @@ where\n /// See its documentation for more.\n ///\n /// [`intersection`]: HashSet::intersection\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::HashSet;\n+///\n+/// let a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n+/// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n+///\n+/// let mut intersection = a.intersection(&b);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Intersection<'a, T: 'a, S: 'a> {\n     // iterator of the first set\n@@ -1233,6 +1286,17 @@ pub struct Intersection<'a, T: 'a, S: 'a> {\n /// See its documentation for more.\n ///\n /// [`difference`]: HashSet::difference\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::HashSet;\n+///\n+/// let a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n+/// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n+///\n+/// let mut difference = a.difference(&b);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Difference<'a, T: 'a, S: 'a> {\n     // iterator of the first set\n@@ -1247,6 +1311,17 @@ pub struct Difference<'a, T: 'a, S: 'a> {\n /// [`HashSet`]. See its documentation for more.\n ///\n /// [`symmetric_difference`]: HashSet::symmetric_difference\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::HashSet;\n+///\n+/// let a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n+/// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n+///\n+/// let mut intersection = a.symmetric_difference(&b);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SymmetricDifference<'a, T: 'a, S: 'a> {\n     iter: Chain<Difference<'a, T, S>, Difference<'a, T, S>>,\n@@ -1258,6 +1333,17 @@ pub struct SymmetricDifference<'a, T: 'a, S: 'a> {\n /// See its documentation for more.\n ///\n /// [`union`]: HashSet::union\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::HashSet;\n+///\n+/// let a: HashSet<u32> = vec![1, 2, 3].into_iter().collect();\n+/// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n+///\n+/// let mut union_iter = a.union(&b);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Union<'a, T: 'a, S: 'a> {\n     iter: Chain<Iter<'a, T>, Difference<'a, T, S>>,"}]}