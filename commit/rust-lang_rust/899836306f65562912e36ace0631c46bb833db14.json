{"sha": "899836306f65562912e36ace0631c46bb833db14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5OTgzNjMwNmY2NTU2MjkxMmUzNmFjZTA2MzFjNDZiYjgzM2RiMTQ=", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2021-03-16T01:57:52Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2021-03-16T01:57:52Z"}, "message": "remove assignments to ZST places", "tree": {"sha": "6f5da8f4df515e27de240b9c89ddfab1b3b2820f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f5da8f4df515e27de240b9c89ddfab1b3b2820f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/899836306f65562912e36ace0631c46bb833db14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/899836306f65562912e36ace0631c46bb833db14", "html_url": "https://github.com/rust-lang/rust/commit/899836306f65562912e36ace0631c46bb833db14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/899836306f65562912e36ace0631c46bb833db14/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "affb081fa0810494165fbfb8d308a0f02a290fed", "url": "https://api.github.com/repos/rust-lang/rust/commits/affb081fa0810494165fbfb8d308a0f02a290fed", "html_url": "https://github.com/rust-lang/rust/commit/affb081fa0810494165fbfb8d308a0f02a290fed"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "5ac2ff1fc9a1618563707e450d85a7bf65968985", "filename": "compiler/rustc_mir/src/transform/instcombine.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/899836306f65562912e36ace0631c46bb833db14/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899836306f65562912e36ace0631c46bb833db14/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs?ref=899836306f65562912e36ace0631c46bb833db14", "patch": "@@ -12,10 +12,12 @@ pub struct InstCombine;\n \n impl<'tcx> MirPass<'tcx> for InstCombine {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        let param_env = tcx.param_env(body.source.def_id());\n         let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n-        let ctx = InstCombineContext { tcx, local_decls };\n+        let ctx = InstCombineContext { tcx, local_decls, param_env };\n         for block in basic_blocks.iter_mut() {\n             for statement in block.statements.iter_mut() {\n+                ctx.combine_zst(&statement.source_info, &mut statement.kind);\n                 match statement.kind {\n                     StatementKind::Assign(box (_place, ref mut rvalue)) => {\n                         ctx.combine_bool_cmp(&statement.source_info, rvalue);\n@@ -32,6 +34,7 @@ impl<'tcx> MirPass<'tcx> for InstCombine {\n struct InstCombineContext<'tcx, 'a> {\n     tcx: TyCtxt<'tcx>,\n     local_decls: &'a LocalDecls<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n }\n \n impl<'tcx, 'a> InstCombineContext<'tcx, 'a> {\n@@ -41,6 +44,28 @@ impl<'tcx, 'a> InstCombineContext<'tcx, 'a> {\n         })\n     }\n \n+    /// Remove assignments to inhabited ZST places.\n+    fn combine_zst(&self, source_info: &SourceInfo, kind: &mut StatementKind<'tcx>) {\n+        match kind {\n+            StatementKind::Assign(box (place, _)) => {\n+                let place_ty = place.ty(self.local_decls, self.tcx).ty;\n+                if let Ok(layout) = self.tcx.layout_of(self.param_env.and(place_ty)) {\n+                    if layout.is_zst() && !layout.abi.is_uninhabited() {\n+                        if self.tcx.consider_optimizing(|| {\n+                            format!(\n+                                \"InstCombine ZST - Place: {:?} SourceInfo: {:?}\",\n+                                place, source_info\n+                            )\n+                        }) {\n+                            *kind = StatementKind::Nop;\n+                        }\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+\n     /// Transform boolean comparisons into logical operations.\n     fn combine_bool_cmp(&self, source_info: &SourceInfo, rvalue: &mut Rvalue<'tcx>) {\n         match rvalue {"}]}