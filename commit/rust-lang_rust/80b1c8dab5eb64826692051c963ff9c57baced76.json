{"sha": "80b1c8dab5eb64826692051c963ff9c57baced76", "node_id": "C_kwDOAAsO6NoAKDgwYjFjOGRhYjVlYjY0ODI2NjkyMDUxYzk2M2ZmOWM1N2JhY2VkNzY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-27T18:11:19Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-02-28T23:57:14Z"}, "message": "interpret: rename relocation \u2192 provenance", "tree": {"sha": "98af9b03f0162819f2d6cea15f42c58e590f2f75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98af9b03f0162819f2d6cea15f42c58e590f2f75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80b1c8dab5eb64826692051c963ff9c57baced76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80b1c8dab5eb64826692051c963ff9c57baced76", "html_url": "https://github.com/rust-lang/rust/commit/80b1c8dab5eb64826692051c963ff9c57baced76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80b1c8dab5eb64826692051c963ff9c57baced76/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5eedd541a962a36e86d3302856211248317f635c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eedd541a962a36e86d3302856211248317f635c", "html_url": "https://github.com/rust-lang/rust/commit/5eedd541a962a36e86d3302856211248317f635c"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "b91fbfd6d94f3d89ac865714cd53cc79e3b884e2", "filename": "src/consts.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/80b1c8dab5eb64826692051c963ff9c57baced76/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80b1c8dab5eb64826692051c963ff9c57baced76/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=80b1c8dab5eb64826692051c963ff9c57baced76", "patch": "@@ -127,7 +127,7 @@ impl<'gcc, 'tcx> StaticMethods for CodegenCx<'gcc, 'tcx> {\n             //\n             // We could remove this hack whenever we decide to drop macOS 10.10 support.\n             if self.tcx.sess.target.options.is_like_osx {\n-                // The `inspect` method is okay here because we checked relocations, and\n+                // The `inspect` method is okay here because we checked for provenance, and\n                 // because we are doing this access to inspect the final interpreter state\n                 // (not as part of the interpreter execution).\n                 //\n@@ -278,17 +278,17 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n \n pub fn const_alloc_to_gcc<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, alloc: ConstAllocation<'tcx>) -> RValue<'gcc> {\n     let alloc = alloc.inner();\n-    let mut llvals = Vec::with_capacity(alloc.relocations().len() + 1);\n+    let mut llvals = Vec::with_capacity(alloc.provenance().len() + 1);\n     let dl = cx.data_layout();\n     let pointer_size = dl.pointer_size.bytes() as usize;\n \n     let mut next_offset = 0;\n-    for &(offset, alloc_id) in alloc.relocations().iter() {\n+    for &(offset, alloc_id) in alloc.provenance().iter() {\n         let offset = offset.bytes();\n         assert_eq!(offset as usize as u64, offset);\n         let offset = offset as usize;\n         if offset > next_offset {\n-            // This `inspect` is okay since we have checked that it is not within a relocation, it\n+            // This `inspect` is okay since we have checked that it is not within a pointer with provenance, it\n             // is within the bounds of the allocation, and it doesn't affect interpreter execution\n             // (we inspect the result after interpreter execution). Any undef byte is replaced with\n             // some arbitrary byte value.\n@@ -301,7 +301,7 @@ pub fn const_alloc_to_gcc<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, alloc: ConstAl\n             read_target_uint( dl.endian,\n                 // This `inspect` is okay since it is within the bounds of the allocation, it doesn't\n                 // affect interpreter execution (we inspect the result after interpreter execution),\n-                // and we properly interpret the relocation as a relocation pointer offset.\n+                // and we properly interpret the provenance as a relocation pointer offset.\n                 alloc.inspect_with_uninit_and_ptr_outside_interpreter(offset..(offset + pointer_size)),\n             )\n             .expect(\"const_alloc_to_llvm: could not read relocation pointer\")\n@@ -318,7 +318,7 @@ pub fn const_alloc_to_gcc<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, alloc: ConstAl\n     }\n     if alloc.len() >= next_offset {\n         let range = next_offset..alloc.len();\n-        // This `inspect` is okay since we have check that it is after all relocations, it is\n+        // This `inspect` is okay since we have check that it is after all provenance, it is\n         // within the bounds of the allocation, and it doesn't affect interpreter execution (we\n         // inspect the result after interpreter execution). Any undef byte is replaced with some\n         // arbitrary byte value."}]}