{"sha": "59c746030a1f1330f2037f09c2a7a6def8a5fc04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5Yzc0NjAzMGExZjEzMzBmMjAzN2YwOWMyYTdhNmRlZjhhNWZjMDQ=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-04-21T17:15:07Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-04-23T01:24:20Z"}, "message": "Use a ref-counted pointer for ownership of the predecessor cache\n\n...instead of a `LockGuard` which means the lock is held for longer than\nnecessary.", "tree": {"sha": "418773a61c5a4c235d8c032c6a6a2b3fc5ede5d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/418773a61c5a4c235d8c032c6a6a2b3fc5ede5d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59c746030a1f1330f2037f09c2a7a6def8a5fc04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59c746030a1f1330f2037f09c2a7a6def8a5fc04", "html_url": "https://github.com/rust-lang/rust/commit/59c746030a1f1330f2037f09c2a7a6def8a5fc04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59c746030a1f1330f2037f09c2a7a6def8a5fc04/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "740f228b5b68f4db74318e0f234786aa3bc4e982", "url": "https://api.github.com/repos/rust-lang/rust/commits/740f228b5b68f4db74318e0f234786aa3bc4e982", "html_url": "https://github.com/rust-lang/rust/commit/740f228b5b68f4db74318e0f234786aa3bc4e982"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "8f1f927852119c2fcaf978008be73fb77a260d17", "filename": "src/librustc_middle/mir/predecessors.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/59c746030a1f1330f2037f09c2a7a6def8a5fc04/src%2Flibrustc_middle%2Fmir%2Fpredecessors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c746030a1f1330f2037f09c2a7a6def8a5fc04/src%2Flibrustc_middle%2Fmir%2Fpredecessors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fpredecessors.rs?ref=59c746030a1f1330f2037f09c2a7a6def8a5fc04", "patch": "@@ -1,5 +1,5 @@\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_data_structures::sync::{Lock, LockGuard, MappedLockGuard};\n+use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_index::vec::IndexVec;\n use rustc_serialize as serialize;\n use smallvec::SmallVec;\n@@ -11,7 +11,7 @@ pub type Predecessors = IndexVec<BasicBlock, SmallVec<[BasicBlock; 4]>>;\n \n #[derive(Clone, Debug)]\n pub struct PredecessorCache {\n-    cache: Lock<Option<Predecessors>>,\n+    cache: Lock<Option<Lrc<Predecessors>>>,\n }\n \n impl PredecessorCache {\n@@ -20,30 +20,39 @@ impl PredecessorCache {\n         PredecessorCache { cache: Lock::new(None) }\n     }\n \n+    /// Invalidates the predecessor cache.\n+    ///\n+    /// Invalidating the predecessor cache requires mutating the MIR, which in turn requires a\n+    /// unique reference (`&mut`) to the `mir::Body`. Because of this, we can assume that all\n+    /// callers of `invalidate` have a unique reference to the MIR and thus to the predecessor\n+    /// cache. This means we don't actually need to take a lock when `invalidate` is called.\n     #[inline]\n     pub fn invalidate(&mut self) {\n         *self.cache.get_mut() = None;\n     }\n \n+    /// Returns a ref-counted smart pointer containing the predecessor graph for this MIR.\n+    ///\n+    /// We use ref-counting instead of a mapped `LockGuard` here to ensure that the lock for\n+    /// `cache` is only held inside this function. As long as no other locks are taken while\n+    /// computing the predecessor graph, deadlock is impossible.\n     #[inline]\n     pub fn compute(\n         &self,\n         basic_blocks: &IndexVec<BasicBlock, BasicBlockData<'_>>,\n-    ) -> MappedLockGuard<'_, Predecessors> {\n-        LockGuard::map(self.cache.lock(), |cache| {\n-            cache.get_or_insert_with(|| {\n-                let mut preds = IndexVec::from_elem(SmallVec::new(), basic_blocks);\n-                for (bb, data) in basic_blocks.iter_enumerated() {\n-                    if let Some(term) = &data.terminator {\n-                        for &succ in term.successors() {\n-                            preds[succ].push(bb);\n-                        }\n+    ) -> Lrc<Predecessors> {\n+        Lrc::clone(self.cache.lock().get_or_insert_with(|| {\n+            let mut preds = IndexVec::from_elem(SmallVec::new(), basic_blocks);\n+            for (bb, data) in basic_blocks.iter_enumerated() {\n+                if let Some(term) = &data.terminator {\n+                    for &succ in term.successors() {\n+                        preds[succ].push(bb);\n                     }\n                 }\n+            }\n \n-                preds\n-            })\n-        })\n+            Lrc::new(preds)\n+        }))\n     }\n }\n "}]}