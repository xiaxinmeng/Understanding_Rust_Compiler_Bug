{"sha": "c453b48fd8d2ef0721b470ad72f261e3bca5a50d", "node_id": "C_kwDOAAsO6NoAKGM0NTNiNDhmZDhkMmVmMDcyMWI0NzBhZDcyZjI2MWUzYmNhNWE1MGQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-20T06:51:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-20T06:51:01Z"}, "message": "Rollup merge of #111723 - lcnr:overwrite-obligations, r=compiler-errors\n\nstyle: do not overwrite obligations\n\nthis looks sketchy and would break if the original obligations do not start out empty :grin:", "tree": {"sha": "a789f4f00ac29b1132d38d8e9f1333a8dce23a60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a789f4f00ac29b1132d38d8e9f1333a8dce23a60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c453b48fd8d2ef0721b470ad72f261e3bca5a50d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkaG3VCRBK7hj4Ov3rIwAABHcIAA2KxsK+XD8BKc2NVdEQ/V1e\nzMO4vbzM8HSMzSlsS2J25HyypEqpEr8tZksyZpTulHg8+KJgewgJaHH3XiD8A68w\n2JGAUHtwb6eSjVioTKxp83W5kjpdCyeZ+fmfJt3XPVlBZx0IPUjywdxvcawk4WWd\nNjfXGxiFhzjhj2g2HvWvXiw5Fzeh0cSmtco6plLg+2kjuKzfN8hf5dlzS/x020KN\nLPDJXrB/+gq9ih4oOkKLzoVKMhQYIsooz0BCDDm9fWWW/kbjQYOPrVuXIDzecTsm\ndlXlkJUD/s9plAYGWwjIphiIsaKGcOMQoA1Z/FnNoq1aruSuuLHkBLWs7hOwLuQ=\n=oaKt\n-----END PGP SIGNATURE-----\n", "payload": "tree a789f4f00ac29b1132d38d8e9f1333a8dce23a60\nparent 93c031f6e663c428ee6e09b6fae2710ad3c54756\nparent 3e4ed61c0987d73af4c291b68cf76adfeaa349c6\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1684565461 +0530\ncommitter GitHub <noreply@github.com> 1684565461 +0530\n\nRollup merge of #111723 - lcnr:overwrite-obligations, r=compiler-errors\n\nstyle: do not overwrite obligations\n\nthis looks sketchy and would break if the original obligations do not start out empty :grin:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c453b48fd8d2ef0721b470ad72f261e3bca5a50d", "html_url": "https://github.com/rust-lang/rust/commit/c453b48fd8d2ef0721b470ad72f261e3bca5a50d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c453b48fd8d2ef0721b470ad72f261e3bca5a50d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93c031f6e663c428ee6e09b6fae2710ad3c54756", "url": "https://api.github.com/repos/rust-lang/rust/commits/93c031f6e663c428ee6e09b6fae2710ad3c54756", "html_url": "https://github.com/rust-lang/rust/commit/93c031f6e663c428ee6e09b6fae2710ad3c54756"}, {"sha": "3e4ed61c0987d73af4c291b68cf76adfeaa349c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e4ed61c0987d73af4c291b68cf76adfeaa349c6", "html_url": "https://github.com/rust-lang/rust/commit/3e4ed61c0987d73af4c291b68cf76adfeaa349c6"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "b88ba04b2737939562c8676c35b847e5da6a70ca", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c453b48fd8d2ef0721b470ad72f261e3bca5a50d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c453b48fd8d2ef0721b470ad72f261e3bca5a50d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=c453b48fd8d2ef0721b470ad72f261e3bca5a50d", "patch": "@@ -530,19 +530,18 @@ impl<'tcx> InferCtxt<'tcx> {\n         // these are the same span, but not in cases like `-> (impl\n         // Foo, impl Bar)`.\n         let span = cause.span;\n-\n-        let mut obligations = vec![];\n         let prev = self.inner.borrow_mut().opaque_types().register(\n             OpaqueTypeKey { def_id, substs },\n             OpaqueHiddenType { ty: hidden_ty, span },\n             origin,\n         );\n-        if let Some(prev) = prev {\n-            obligations = self\n-                .at(&cause, param_env)\n+        let mut obligations = if let Some(prev) = prev {\n+            self.at(&cause, param_env)\n                 .eq_exp(DefineOpaqueTypes::Yes, a_is_expected, prev, hidden_ty)?\n-                .obligations;\n-        }\n+                .obligations\n+        } else {\n+            Vec::new()\n+        };\n \n         let item_bounds = tcx.explicit_item_bounds(def_id);\n "}]}