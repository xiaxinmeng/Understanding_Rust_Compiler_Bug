{"sha": "7e4404b6fbbf28bbe115ab8837f929e51c831a31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNDQwNGI2ZmJiZjI4YmJlMTE1YWI4ODM3ZjkyOWU1MWM4MzFhMzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-21T22:46:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-21T22:46:23Z"}, "message": "auto merge of #9937 : brson/rust/log_str, r=alexcrichton", "tree": {"sha": "e30286528b9b873604d6c012998d61249e322c74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e30286528b9b873604d6c012998d61249e322c74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e4404b6fbbf28bbe115ab8837f929e51c831a31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e4404b6fbbf28bbe115ab8837f929e51c831a31", "html_url": "https://github.com/rust-lang/rust/commit/7e4404b6fbbf28bbe115ab8837f929e51c831a31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e4404b6fbbf28bbe115ab8837f929e51c831a31/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dd6623b71ccee5b24117fa14df2bf3e5533e0c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dd6623b71ccee5b24117fa14df2bf3e5533e0c7", "html_url": "https://github.com/rust-lang/rust/commit/6dd6623b71ccee5b24117fa14df2bf3e5533e0c7"}, {"sha": "3675e42334e9e58ae16446f52b2c6c951e8e1628", "url": "https://api.github.com/repos/rust-lang/rust/commits/3675e42334e9e58ae16446f52b2c6c951e8e1628", "html_url": "https://github.com/rust-lang/rust/commit/3675e42334e9e58ae16446f52b2c6c951e8e1628"}], "stats": {"total": 46, "additions": 21, "deletions": 25}, "files": [{"sha": "e7fa81fc87ac9a60ca564649c81b2a0bda85fd93", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e4404b6fbbf28bbe115ab8837f929e51c831a31/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4404b6fbbf28bbe115ab8837f929e51c831a31/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=7e4404b6fbbf28bbe115ab8837f929e51c831a31", "patch": "@@ -466,7 +466,7 @@ use rt::io::Decorator;\n use rt::io::mem::MemWriter;\n use rt::io;\n use str;\n-use sys;\n+use repr;\n use util;\n use vec;\n \n@@ -1087,17 +1087,13 @@ impl<T> Poly for T {\n     fn fmt(t: &T, f: &mut Formatter) {\n         match (f.width, f.precision) {\n             (None, None) => {\n-                // XXX: sys::log_str should have a variant which takes a stream\n-                //      and we should directly call that (avoids unnecessary\n-                //      allocations)\n-                let s = sys::log_str(t);\n-                f.buf.write(s.as_bytes());\n+                repr::write_repr(f.buf, t);\n             }\n \n             // If we have a specified width for formatting, then we have to make\n             // this allocation of a new string\n             _ => {\n-                let s = sys::log_str(t);\n+                let s = repr::repr_to_str(t);\n                 f.pad(s);\n             }\n         }"}, {"sha": "a788064293ff0378c6b32498d312203845a12a9c", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e4404b6fbbf28bbe115ab8837f929e51c831a31/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4404b6fbbf28bbe115ab8837f929e51c831a31/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=7e4404b6fbbf28bbe115ab8837f929e51c831a31", "patch": "@@ -616,6 +616,16 @@ pub fn write_repr<T>(writer: &mut io::Writer, object: &T) {\n     }\n }\n \n+pub fn repr_to_str<T>(t: &T) -> ~str {\n+    use str;\n+    use rt::io;\n+    use rt::io::Decorator;\n+\n+    let mut result = io::mem::MemWriter::new();\n+    write_repr(&mut result as &mut io::Writer, t);\n+    str::from_utf8_owned(result.inner())\n+}\n+\n #[cfg(test)]\n struct P {a: int, b: f64}\n "}, {"sha": "d20a6696e278fd82d33ecdfa113454dc769d815c", "filename": "src/libstd/sys.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7e4404b6fbbf28bbe115ab8837f929e51c831a31/src%2Flibstd%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4404b6fbbf28bbe115ab8837f929e51c831a31/src%2Flibstd%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys.rs?ref=7e4404b6fbbf28bbe115ab8837f929e51c831a31", "patch": "@@ -15,18 +15,7 @@\n use c_str::ToCStr;\n use libc::size_t;\n use libc;\n-use repr;\n use rt::task;\n-use str;\n-\n-pub fn log_str<T>(t: &T) -> ~str {\n-    use rt::io;\n-    use rt::io::Decorator;\n-\n-    let mut result = io::mem::MemWriter::new();\n-    repr::write_repr(&mut result as &mut io::Writer, t);\n-    str::from_utf8_owned(result.inner())\n-}\n \n /// Trait for initiating task failure.\n pub trait FailWithCause {"}, {"sha": "77dbafa5ad7b093225668db2db093e52d1046731", "filename": "src/libsyntax/ext/deriving/to_str.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e4404b6fbbf28bbe115ab8837f929e51c831a31/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4404b6fbbf28bbe115ab8837f929e51c831a31/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs?ref=7e4404b6fbbf28bbe115ab8837f929e51c831a31", "patch": "@@ -40,9 +40,10 @@ pub fn expand_deriving_to_str(cx: @ExtCtxt,\n }\n \n // It used to be the case that this deriving implementation invoked\n-// std::sys::log_str, but this isn't sufficient because it doesn't invoke the\n-// to_str() method on each field. Hence we mirror the logic of the log_str()\n-// method, but with tweaks to call to_str() on sub-fields.\n+// std::repr::repr_to_str, but this isn't sufficient because it\n+// doesn't invoke the to_str() method on each field. Hence we mirror\n+// the logic of the repr_to_str() method, but with tweaks to call to_str()\n+// on sub-fields.\n fn to_str_substructure(cx: @ExtCtxt, span: Span,\n                        substr: &Substructure) -> @Expr {\n     let to_str = cx.ident_of(\"to_str\");"}, {"sha": "d778844f4d79e3fa99ffd0fe20df1d167c2d006a", "filename": "src/test/run-pass/fixed_length_vec_glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e4404b6fbbf28bbe115ab8837f929e51c831a31/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4404b6fbbf28bbe115ab8837f929e51c831a31/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs?ref=7e4404b6fbbf28bbe115ab8837f929e51c831a31", "patch": "@@ -10,13 +10,13 @@\n \n // xfail-fast: check-fast screws up repr paths\n \n-use std::sys;\n+use std::repr;\n \n struct Struc { a: u8, b: [int, ..3], c: int }\n \n pub fn main() {\n     let arr = [1,2,3];\n     let struc = Struc {a: 13u8, b: arr, c: 42};\n-    let s = sys::log_str(&struc);\n+    let s = repr::repr_to_str(&struc);\n     assert_eq!(s, ~\"Struc{a: 13u8, b: [1, 2, 3], c: 42}\");\n }"}, {"sha": "8859b5336260c2e1f19acd69e7bc760a0888e63c", "filename": "src/test/run-pass/log-str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e4404b6fbbf28bbe115ab8837f929e51c831a31/src%2Ftest%2Frun-pass%2Flog-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4404b6fbbf28bbe115ab8837f929e51c831a31/src%2Ftest%2Frun-pass%2Flog-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-str.rs?ref=7e4404b6fbbf28bbe115ab8837f929e51c831a31", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::sys;\n+use std::repr;\n \n pub fn main() {\n-    let act = sys::log_str(&~[1, 2, 3]);\n+    let act = repr::repr_to_str(&~[1, 2, 3]);\n     assert_eq!(~\"~[1, 2, 3]\", act);\n \n     let act = format!(\"{:?}/{:6?}\", ~[1, 2, 3], ~\"hi\");"}]}