{"sha": "2c787676c92c81a0c9efeb3e72a91c5132c8106a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNzg3Njc2YzkyYzgxYTBjOWVmZWIzZTcyYTkxYzUxMzJjODEwNmE=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-24T08:29:16Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-24T08:29:16Z"}, "message": "Add tests for traits functions in ide_db", "tree": {"sha": "70f90f7310b125cfb4ecfe89a27164c9feb916eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70f90f7310b125cfb4ecfe89a27164c9feb916eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c787676c92c81a0c9efeb3e72a91c5132c8106a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c787676c92c81a0c9efeb3e72a91c5132c8106a", "html_url": "https://github.com/rust-lang/rust/commit/2c787676c92c81a0c9efeb3e72a91c5132c8106a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c787676c92c81a0c9efeb3e72a91c5132c8106a/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6ea56ea091ad1dbd765831d8dfe79e4d3cdf004", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6ea56ea091ad1dbd765831d8dfe79e4d3cdf004", "html_url": "https://github.com/rust-lang/rust/commit/b6ea56ea091ad1dbd765831d8dfe79e4d3cdf004"}], "stats": {"total": 149, "additions": 149, "deletions": 0}, "files": [{"sha": "f57b6dd91ecff5069642d0a4cd0e46b75a15d889", "filename": "crates/ide_db/src/traits.rs", "status": "modified", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/2c787676c92c81a0c9efeb3e72a91c5132c8106a/crates%2Fide_db%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c787676c92c81a0c9efeb3e72a91c5132c8106a/crates%2Fide_db%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ftraits.rs?ref=2c787676c92c81a0c9efeb3e72a91c5132c8106a", "patch": "@@ -76,3 +76,152 @@ pub fn get_missing_assoc_items(\n             .collect()\n     })\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::RootDatabase;\n+    use base_db::{fixture::ChangeFixture, FilePosition};\n+    use expect_test::{expect, Expect};\n+    use hir::Semantics;\n+    use syntax::ast::{self, AstNode};\n+    use test_utils::RangeOrOffset;\n+\n+    /// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n+    pub(crate) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {\n+        let change_fixture = ChangeFixture::parse(ra_fixture);\n+        let mut database = RootDatabase::default();\n+        database.apply_change(change_fixture.change);\n+        let (file_id, range_or_offset) =\n+            change_fixture.file_position.expect(\"expected a marker (<|>)\");\n+        let offset = match range_or_offset {\n+            RangeOrOffset::Range(_) => panic!(),\n+            RangeOrOffset::Offset(it) => it,\n+        };\n+        (database, FilePosition { file_id, offset })\n+    }\n+\n+    fn check_trait(ra_fixture: &str, expect: Expect) {\n+        let (db, position) = position(ra_fixture);\n+        let sema = Semantics::new(&db);\n+        let file = sema.parse(position.file_id);\n+        let impl_block: ast::Impl =\n+            sema.find_node_at_offset_with_descend(file.syntax(), position.offset).unwrap();\n+        let trait_ = crate::traits::resolve_target_trait(&sema, &impl_block);\n+        let actual = match trait_ {\n+            Some(trait_) => trait_.name(&db).to_string(),\n+            None => String::new(),\n+        };\n+        expect.assert_eq(&actual);\n+    }\n+\n+    fn check_missing_assoc(ra_fixture: &str, expect: Expect) {\n+        let (db, position) = position(ra_fixture);\n+        let sema = Semantics::new(&db);\n+        let file = sema.parse(position.file_id);\n+        let impl_block: ast::Impl =\n+            sema.find_node_at_offset_with_descend(file.syntax(), position.offset).unwrap();\n+        let items = crate::traits::get_missing_assoc_items(&sema, &impl_block);\n+        let actual = items\n+            .into_iter()\n+            .map(|item| item.name(&db).unwrap().to_string())\n+            .collect::<Vec<_>>()\n+            .join(\"\\n\");\n+        expect.assert_eq(&actual);\n+    }\n+\n+    #[test]\n+    fn resolve_trait() {\n+        check_trait(\n+            r#\"\n+pub trait Foo {\n+    fn bar();\n+}\n+impl Foo for u8 {\n+    <|>\n+}\n+            \"#,\n+            expect![[\"Foo\"]],\n+        );\n+        check_trait(\n+            r#\"\n+pub trait Foo {\n+    fn bar();\n+}\n+impl Foo for u8 {\n+    fn bar() {\n+        fn baz() {\n+            <|>\n+        }\n+        baz();\n+    }\n+}\n+            \"#,\n+            expect![[\"Foo\"]],\n+        );\n+        check_trait(\n+            r#\"\n+pub trait Foo {\n+    fn bar();\n+}\n+pub struct Bar;\n+impl Bar {\n+    <|>\n+}\n+            \"#,\n+            expect![[\"\"]],\n+        );\n+    }\n+\n+    #[test]\n+    fn missing_assoc_items() {\n+        check_missing_assoc(\n+            r#\"\n+pub trait Foo {\n+    const FOO: u8;\n+    fn bar();\n+}\n+impl Foo for u8 {\n+    <|>\n+}\"#,\n+            expect![[r#\"\n+                FOO\n+                bar\"#]],\n+        );\n+\n+        check_missing_assoc(\n+            r#\"\n+pub trait Foo {\n+    const FOO: u8;\n+    fn bar();\n+}\n+impl Foo for u8 {\n+    const FOO: u8 = 10;\n+    <|>\n+}\"#,\n+            expect![[r#\"\n+                bar\"#]],\n+        );\n+\n+        check_missing_assoc(\n+            r#\"\n+pub trait Foo {\n+    const FOO: u8;\n+    fn bar();\n+}\n+impl Foo for u8 {\n+    const FOO: u8 = 10;\n+    fn bar() {<|>}\n+}\"#,\n+            expect![[r#\"\"#]],\n+        );\n+\n+        check_missing_assoc(\n+            r#\"\n+pub struct Foo;\n+impl Foo {\n+    fn bar() {<|>}\n+}\"#,\n+            expect![[r#\"\"#]],\n+        );\n+    }\n+}"}]}