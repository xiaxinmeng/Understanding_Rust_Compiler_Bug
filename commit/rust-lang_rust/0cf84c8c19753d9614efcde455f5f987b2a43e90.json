{"sha": "0cf84c8c19753d9614efcde455f5f987b2a43e90", "node_id": "C_kwDOAAsO6NoAKDBjZjg0YzhjMTk3NTNkOTYxNGVmY2RlNDU1ZjVmOTg3YjJhNDNlOTA", "commit": {"author": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-11T23:04:24Z"}, "committer": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-11T23:37:16Z"}, "message": "Add #[must_use] to to_value conversions", "tree": {"sha": "8fdf3e80c302f37ec8df2900d4c9d33a543f3a0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fdf3e80c302f37ec8df2900d4c9d33a543f3a0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cf84c8c19753d9614efcde455f5f987b2a43e90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cf84c8c19753d9614efcde455f5f987b2a43e90", "html_url": "https://github.com/rust-lang/rust/commit/0cf84c8c19753d9614efcde455f5f987b2a43e90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cf84c8c19753d9614efcde455f5f987b2a43e90/comments", "author": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b210643ebf2485aafdf2494de8cf41941a64e95", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b210643ebf2485aafdf2494de8cf41941a64e95", "html_url": "https://github.com/rust-lang/rust/commit/5b210643ebf2485aafdf2494de8cf41941a64e95"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "3c4972bd3c9a47f74046c7022098021104200fc4", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cf84c8c19753d9614efcde455f5f987b2a43e90/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf84c8c19753d9614efcde455f5f987b2a43e90/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=0cf84c8c19753d9614efcde455f5f987b2a43e90", "patch": "@@ -328,9 +328,11 @@ impl char {\n     ///\n     /// ```should_panic\n     /// // this panics\n-    /// '1'.to_digit(37);\n+    /// let _ = '1'.to_digit(37);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn to_digit(self, radix: u32) -> Option<u32> {\n         assert!(radix <= 36, \"to_digit: radix is too high (maximum 36)\");"}, {"sha": "7695e3a4a8a247387c41985323a778fa2330dd00", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cf84c8c19753d9614efcde455f5f987b2a43e90/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf84c8c19753d9614efcde455f5f987b2a43e90/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=0cf84c8c19753d9614efcde455f5f987b2a43e90", "patch": "@@ -240,6 +240,8 @@ impl<T: ?Sized> NonNull<T> {\n     /// The pointer can be later reconstructed with [`NonNull::from_raw_parts`].\n     #[unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n     #[rustc_const_unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub const fn to_raw_parts(self) -> (NonNull<()>, <T as super::Pointee>::Metadata) {\n         (self.cast(), super::metadata(self.as_ptr()))\n@@ -381,6 +383,8 @@ impl<T: ?Sized> NonNull<T> {\n     /// ```\n     #[stable(feature = \"nonnull_cast\", since = \"1.27.0\")]\n     #[rustc_const_stable(feature = \"const_nonnull_cast\", since = \"1.36.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub const fn cast<U>(self) -> NonNull<U> {\n         // SAFETY: `self` is a `NonNull` pointer which is necessarily non-null"}, {"sha": "b6cc388a1dd7081ad5d079201213b00cdb42603e", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cf84c8c19753d9614efcde455f5f987b2a43e90/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf84c8c19753d9614efcde455f5f987b2a43e90/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=0cf84c8c19753d9614efcde455f5f987b2a43e90", "patch": "@@ -1337,6 +1337,8 @@ impl CStr {\n     /// assert_eq!(cstr.to_bytes(), b\"foo\");\n     /// ```\n     #[inline]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_bytes(&self) -> &[u8] {\n         let bytes = self.to_bytes_with_nul();\n@@ -1362,6 +1364,8 @@ impl CStr {\n     /// assert_eq!(cstr.to_bytes_with_nul(), b\"foo\\0\");\n     /// ```\n     #[inline]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_bytes_with_nul(&self) -> &[u8] {\n         unsafe { &*(&self.inner as *const [c_char] as *const [u8]) }\n@@ -1432,6 +1436,8 @@ impl CStr {\n     ///     Cow::Owned(String::from(\"Hello \ufffdWorld\")) as Cow<'_, str>\n     /// );\n     /// ```\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"cstr_to_str\", since = \"1.4.0\")]\n     pub fn to_string_lossy(&self) -> Cow<'_, str> {\n         String::from_utf8_lossy(self.to_bytes())"}, {"sha": "2828b2a8e4523ee2114fd40ad887d546c69a50b8", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cf84c8c19753d9614efcde455f5f987b2a43e90/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf84c8c19753d9614efcde455f5f987b2a43e90/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=0cf84c8c19753d9614efcde455f5f987b2a43e90", "patch": "@@ -575,6 +575,8 @@ impl OsStr {\n     /// assert_eq!(os_str.to_str(), Some(\"foo\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn to_str(&self) -> Option<&str> {\n         self.inner.to_str()\n@@ -626,6 +628,8 @@ impl OsStr {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn to_string_lossy(&self) -> Cow<'_, str> {\n         self.inner.to_string_lossy()\n@@ -643,6 +647,8 @@ impl OsStr {\n     /// assert_eq!(os_string, OsString::from(\"foo\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn to_os_string(&self) -> OsString {\n         OsString { inner: self.inner.to_owned() }"}, {"sha": "2bd2ab31a3f6fa2055503fae1add8df750512449", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cf84c8c19753d9614efcde455f5f987b2a43e90/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf84c8c19753d9614efcde455f5f987b2a43e90/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=0cf84c8c19753d9614efcde455f5f987b2a43e90", "patch": "@@ -418,6 +418,8 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x7f00, 0x1)).to_canonical().is_loopback(), true);\n     /// ```\n     #[inline]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n     pub const fn to_canonical(&self) -> IpAddr {\n@@ -882,6 +884,8 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub const fn to_ipv6_compatible(&self) -> Ipv6Addr {\n         let [a, b, c, d] = self.octets();\n@@ -907,6 +911,8 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub const fn to_ipv6_mapped(&self) -> Ipv6Addr {\n         let [a, b, c, d] = self.octets();\n@@ -1619,6 +1625,8 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub const fn to_ipv4_mapped(&self) -> Option<Ipv4Addr> {\n         match self.octets() {\n@@ -1656,6 +1664,8 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub const fn to_ipv4(&self) -> Option<Ipv4Addr> {\n         if let [0, 0, 0, 0, 0, 0 | 0xffff, ab, cd] = self.segments() {\n@@ -1679,9 +1689,11 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x7f00, 0x1).is_loopback(), false);\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x7f00, 0x1).to_canonical().is_loopback(), true);\n     /// ```\n-    #[inline]\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n+    #[inline]\n     pub const fn to_canonical(&self) -> IpAddr {\n         if let Some(mapped) = self.to_ipv4_mapped() {\n             return IpAddr::V4(mapped);"}, {"sha": "a5ebaa34d53e5ede736d64e5b1d365a777e5ce18", "filename": "library/std/src/path.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cf84c8c19753d9614efcde455f5f987b2a43e90/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf84c8c19753d9614efcde455f5f987b2a43e90/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=0cf84c8c19753d9614efcde455f5f987b2a43e90", "patch": "@@ -1945,6 +1945,8 @@ impl Path {\n     /// assert_eq!(path.to_str(), Some(\"foo.txt\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn to_str(&self) -> Option<&str> {\n         self.inner.to_str()\n@@ -1971,6 +1973,8 @@ impl Path {\n     /// Had `path` contained invalid unicode, the `to_string_lossy` call might\n     /// have returned `\"fo\ufffd.txt\"`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[inline]\n     pub fn to_string_lossy(&self) -> Cow<'_, str> {\n         self.inner.to_string_lossy()\n@@ -1987,6 +1991,8 @@ impl Path {\n     /// assert_eq!(path_buf, std::path::PathBuf::from(\"foo.txt\"));\n     /// ```\n     #[rustc_conversion_suggestion]\n+    #[must_use = \"this returns the result of the operation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_path_buf(&self) -> PathBuf {\n         PathBuf::from(self.inner.to_os_string())"}]}