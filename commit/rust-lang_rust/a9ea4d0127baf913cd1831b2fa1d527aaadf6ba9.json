{"sha": "a9ea4d0127baf913cd1831b2fa1d527aaadf6ba9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZWE0ZDAxMjdiYWY5MTNjZDE4MzFiMmZhMWQ1MjdhYWFkZjZiYTk=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T13:23:55Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T22:22:17Z"}, "message": "fix benchmarks", "tree": {"sha": "dc6aa41c51cc7e092f07ca18212ded71de399a23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc6aa41c51cc7e092f07ca18212ded71de399a23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9ea4d0127baf913cd1831b2fa1d527aaadf6ba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ea4d0127baf913cd1831b2fa1d527aaadf6ba9", "html_url": "https://github.com/rust-lang/rust/commit/a9ea4d0127baf913cd1831b2fa1d527aaadf6ba9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9ea4d0127baf913cd1831b2fa1d527aaadf6ba9/comments", "author": null, "committer": null, "parents": [{"sha": "ef726591f81238f19bfd4cc3b48d812d20dbfcc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef726591f81238f19bfd4cc3b48d812d20dbfcc2", "html_url": "https://github.com/rust-lang/rust/commit/ef726591f81238f19bfd4cc3b48d812d20dbfcc2"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "1dcac9fe0742d5f6961a2c861eab1aeb92e54036", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a9ea4d0127baf913cd1831b2fa1d527aaadf6ba9/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ea4d0127baf913cd1831b2fa1d527aaadf6ba9/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=a9ea4d0127baf913cd1831b2fa1d527aaadf6ba9", "patch": "@@ -61,12 +61,14 @@ impl MutableSet<uint> for BitvSet {\n \n impl Results {\n     pub fn bench_int<T:MutableSet<uint>,\n-                     R: rand::Rng>(\n+                     R:rand::Rng,\n+                     F:FnMut() -> T>(\n                      &mut self,\n                      rng: &mut R,\n                      num_keys: uint,\n                      rand_cap: uint,\n-                     f: || -> T) { {\n+                     mut f: F) {\n+        {\n             let mut set = f();\n             timed(&mut self.sequential_ints, || {\n                 for i in range(0u, num_keys) {\n@@ -103,11 +105,12 @@ impl Results {\n     }\n \n     pub fn bench_str<T:MutableSet<String>,\n-                     R:rand::Rng>(\n+                     R:rand::Rng,\n+                     F:FnMut() -> T>(\n                      &mut self,\n                      rng: &mut R,\n                      num_keys: uint,\n-                     f: || -> T) {\n+                     mut f: F) {\n         {\n             let mut set = f();\n             timed(&mut self.sequential_strings, || {"}, {"sha": "e6ef6a8c8c9ec4da7841ca5e263852b94cb25933", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9ea4d0127baf913cd1831b2fa1d527aaadf6ba9/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ea4d0127baf913cd1831b2fa1d527aaadf6ba9/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=a9ea4d0127baf913cd1831b2fa1d527aaadf6ba9", "patch": "@@ -94,7 +94,9 @@ fn update_freq(mm: &mut HashMap<Vec<u8> , uint>, key: &[u8]) {\n // given a Vec<u8>, for each window call a function\n // i.e., for \"hello\" and windows of size four,\n // run it(\"hell\") and it(\"ello\"), then return \"llo\"\n-fn windows_with_carry(bb: &[u8], nn: uint, it: |window: &[u8]|) -> Vec<u8> {\n+fn windows_with_carry<F>(bb: &[u8], nn: uint, mut it: F) -> Vec<u8> where\n+    F: FnMut(&[u8]),\n+{\n    let mut ii = 0u;\n \n    let len = bb.len();"}, {"sha": "cdc7617fec8b074f294cd4117988b1a19e9b6557", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9ea4d0127baf913cd1831b2fa1d527aaadf6ba9/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ea4d0127baf913cd1831b2fa1d527aaadf6ba9/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=a9ea4d0127baf913cd1831b2fa1d527aaadf6ba9", "patch": "@@ -53,14 +53,14 @@ use std::thread::Thread;\n \n // returns an infinite iterator of repeated applications of f to x,\n // i.e. [x, f(x), f(f(x)), ...], as haskell iterate function.\n-fn iterate<'a, T>(x: T, f: |&T|: 'a -> T) -> Iterate<'a, T> {\n+fn iterate<T, F>(x: T, f: F) -> Iterate<T, F> where F: FnMut(&T) -> T {\n     Iterate {f: f, next: x}\n }\n-struct Iterate<'a, T> {\n-    f: |&T|: 'a -> T,\n+struct Iterate<T, F> where F: FnMut(&T) -> T {\n+    f: F,\n     next: T\n }\n-impl<'a, T> Iterator for Iterate<'a, T> {\n+impl<T, F> Iterator for Iterate<T, F> where F: FnMut(&T) -> T {\n     type Item = T;\n \n     fn next(&mut self) -> Option<T> {"}]}