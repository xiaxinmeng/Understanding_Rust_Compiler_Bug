{"sha": "8b68f58fef4ffb833c123f057638484fa59ded76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNjhmNThmZWY0ZmZiODMzYzEyM2YwNTc2Mzg0ODRmYTU5ZGVkNzY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-12T22:37:21Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-17T21:41:40Z"}, "message": "Allow generic repr(simd) types.\n\nAbsolute correctness is checked at monomorphisation time.", "tree": {"sha": "9b21bb62dac14e1827a4e874beda25931b8de6f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b21bb62dac14e1827a4e874beda25931b8de6f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b68f58fef4ffb833c123f057638484fa59ded76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b68f58fef4ffb833c123f057638484fa59ded76", "html_url": "https://github.com/rust-lang/rust/commit/8b68f58fef4ffb833c123f057638484fa59ded76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b68f58fef4ffb833c123f057638484fa59ded76/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f5739fb3cdaff001d1af138a7b9b096a06c94e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5739fb3cdaff001d1af138a7b9b096a06c94e8", "html_url": "https://github.com/rust-lang/rust/commit/1f5739fb3cdaff001d1af138a7b9b096a06c94e8"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "2e2f11bd133d8a0f92cb04a4b8d5e155588a4b91", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=8b68f58fef4ffb833c123f057638484fa59ded76", "patch": "@@ -224,7 +224,13 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n \n         ty::TyStruct(..) => {\n             if t.is_simd() {\n-                let llet = type_of(cx, t.simd_type(cx.tcx()));\n+                let e = t.simd_type(cx.tcx());\n+                if !e.is_machine() {\n+                    cx.sess().fatal(&format!(\"monomorphising SIMD type `{}` with \\\n+                                              a non-machine element type `{}`\",\n+                                             t, e))\n+                }\n+                let llet = type_of(cx, e);\n                 let n = t.simd_size(cx.tcx()) as u64;\n                 ensure_array_fits_in_address_space(cx, llet, n, t);\n                 Type::vector(&llet, n)\n@@ -410,7 +416,13 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n       }\n       ty::TyStruct(def, ref substs) => {\n           if t.is_simd() {\n-              let llet = in_memory_type_of(cx, t.simd_type(cx.tcx()));\n+              let e = t.simd_type(cx.tcx());\n+              if !e.is_machine() {\n+                  cx.sess().fatal(&format!(\"monomorphising SIMD type `{}` with \\\n+                                            a non-machine element type `{}`\",\n+                                           t, e))\n+              }\n+              let llet = in_memory_type_of(cx, e);\n               let n = t.simd_size(cx.tcx()) as u64;\n               ensure_array_fits_in_address_space(cx, llet, n, t);\n               Type::vector(&llet, n)"}, {"sha": "a16415a03c0f1c10081a98f612e1b36577bbd467", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b68f58fef4ffb833c123f057638484fa59ded76/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8b68f58fef4ffb833c123f057638484fa59ded76", "patch": "@@ -4321,10 +4321,6 @@ pub fn check_instantiable(tcx: &ty::ctxt,\n \n pub fn check_simd(tcx: &ty::ctxt, sp: Span, id: ast::NodeId) {\n     let t = tcx.node_id_to_type(id);\n-    if t.needs_subst() {\n-        span_err!(tcx.sess, sp, E0074, \"SIMD vector cannot be generic\");\n-        return;\n-    }\n     match t.sty {\n         ty::TyStruct(def, substs) => {\n             let fields = &def.struct_variant().fields;\n@@ -4337,10 +4333,14 @@ pub fn check_simd(tcx: &ty::ctxt, sp: Span, id: ast::NodeId) {\n                 span_err!(tcx.sess, sp, E0076, \"SIMD vector should be homogeneous\");\n                 return;\n             }\n-            if !e.is_machine() {\n-                span_err!(tcx.sess, sp, E0077,\n-                    \"SIMD vector element type should be machine type\");\n-                return;\n+            match e.sty {\n+                ty::TyParam(_) => { /* struct<T>(T, T, T, T) is ok */ }\n+                _ if e.is_machine()  => { /* struct(u8, u8, u8, u8) is ok */ }\n+                _ => {\n+                    span_err!(tcx.sess, sp, E0077,\n+                              \"SIMD vector element type should be machine type\");\n+                    return;\n+                }\n             }\n         }\n         _ => ()"}]}