{"sha": "cc000599b8f3fd2b15a7d862bd70da440ff8b12b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMDAwNTk5YjhmM2ZkMmIxNWE3ZDg2MmJkNzBkYTQ0MGZmOGIxMmI=", "commit": {"author": {"name": "Phil Ruffwind", "email": "rf@rufflewind.com", "date": "2017-02-11T22:00:56Z"}, "committer": {"name": "Phil Ruffwind", "email": "rf@rufflewind.com", "date": "2017-02-20T03:24:45Z"}, "message": "Rust Book: Generics: Resolving ambiguities\n\n- Add a small section to generics.md to explain how ambiguities in type\n  inference can be resolved using the ::<> syntax.\n- Add links from syntax-index.md and iterators.md.\n- Minor edits to iterators.md and structs.md.", "tree": {"sha": "e95ea5b2d94ae10b0a57f4b58f1cd090c170aa21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e95ea5b2d94ae10b0a57f4b58f1cd090c170aa21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc000599b8f3fd2b15a7d862bd70da440ff8b12b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc000599b8f3fd2b15a7d862bd70da440ff8b12b", "html_url": "https://github.com/rust-lang/rust/commit/cc000599b8f3fd2b15a7d862bd70da440ff8b12b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc000599b8f3fd2b15a7d862bd70da440ff8b12b/comments", "author": {"login": "Rufflewind", "id": 6571068, "node_id": "MDQ6VXNlcjY1NzEwNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/6571068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rufflewind", "html_url": "https://github.com/Rufflewind", "followers_url": "https://api.github.com/users/Rufflewind/followers", "following_url": "https://api.github.com/users/Rufflewind/following{/other_user}", "gists_url": "https://api.github.com/users/Rufflewind/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rufflewind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rufflewind/subscriptions", "organizations_url": "https://api.github.com/users/Rufflewind/orgs", "repos_url": "https://api.github.com/users/Rufflewind/repos", "events_url": "https://api.github.com/users/Rufflewind/events{/privacy}", "received_events_url": "https://api.github.com/users/Rufflewind/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rufflewind", "id": 6571068, "node_id": "MDQ6VXNlcjY1NzEwNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/6571068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rufflewind", "html_url": "https://github.com/Rufflewind", "followers_url": "https://api.github.com/users/Rufflewind/followers", "following_url": "https://api.github.com/users/Rufflewind/following{/other_user}", "gists_url": "https://api.github.com/users/Rufflewind/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rufflewind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rufflewind/subscriptions", "organizations_url": "https://api.github.com/users/Rufflewind/orgs", "repos_url": "https://api.github.com/users/Rufflewind/repos", "events_url": "https://api.github.com/users/Rufflewind/events{/privacy}", "received_events_url": "https://api.github.com/users/Rufflewind/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f57a027f7153c0764a2b8bb5a68ee879e47cd255", "url": "https://api.github.com/repos/rust-lang/rust/commits/f57a027f7153c0764a2b8bb5a68ee879e47cd255", "html_url": "https://github.com/rust-lang/rust/commit/f57a027f7153c0764a2b8bb5a68ee879e47cd255"}], "stats": {"total": 58, "additions": 52, "deletions": 6}, "files": [{"sha": "d02cd776d00e3a48c4fce6de90f77bff9caaaf4d", "filename": "src/doc/book/src/generics.md", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/cc000599b8f3fd2b15a7d862bd70da440ff8b12b/src%2Fdoc%2Fbook%2Fsrc%2Fgenerics.md", "raw_url": "https://github.com/rust-lang/rust/raw/cc000599b8f3fd2b15a7d862bd70da440ff8b12b/src%2Fdoc%2Fbook%2Fsrc%2Fgenerics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fgenerics.md?ref=cc000599b8f3fd2b15a7d862bd70da440ff8b12b", "patch": "@@ -140,5 +140,51 @@ container types like [`Vec<T>`][Vec]. On the other hand, often you want to\n trade that flexibility for increased expressive power. Read about [trait\n bounds][traits] to see why and how.\n \n+## Resolving ambiguities\n+\n+Most of the time when generics are involved, the compiler can infer the\n+generic parameters automatically:\n+\n+```rust\n+// v must be a Vec<T> but we don't know what T is yet\n+let mut v = Vec::new();\n+// v just got a bool value, so T must be bool!\n+v.push(true);\n+// Debug-print v\n+println!(\"{:?}\", v);\n+```\n+\n+Sometimes though, the compiler needs a little help. For example, had we\n+omitted the last line, we would get a compile error:\n+\n+```rust,ignore\n+let v = Vec::new();\n+//      ^^^^^^^^ cannot infer type for `T`\n+//\n+// note: type annotations or generic parameter binding required\n+println!(\"{:?}\", v);\n+```\n+\n+We can solve this using either a type annotation:\n+\n+```rust\n+let v: Vec<bool> = Vec::new();\n+println!(\"{:?}\", v);\n+```\n+\n+or by binding the generic parameter `T` via the so-called\n+[\u2018turbofish\u2019][turbofish] `::<>` syntax:\n+\n+```rust\n+let v = Vec::<bool>::new();\n+println!(\"{:?}\", v);\n+```\n+\n+The second approach is useful in situations where we don\u2019t want to bind the\n+result to a variable. It can also be used to bind generic parameters in\n+functions or methods. See [Iterators \u00a7 Consumers](iterators.html#consumers)\n+for an example.\n+\n [traits]: traits.html\n [Vec]: ../std/vec/struct.Vec.html\n+[turbofish]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect"}, {"sha": "8ee6c0828ad6b7253a507a56c224749566d7b307", "filename": "src/doc/book/src/iterators.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc000599b8f3fd2b15a7d862bd70da440ff8b12b/src%2Fdoc%2Fbook%2Fsrc%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/cc000599b8f3fd2b15a7d862bd70da440ff8b12b/src%2Fdoc%2Fbook%2Fsrc%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fiterators.md?ref=cc000599b8f3fd2b15a7d862bd70da440ff8b12b", "patch": "@@ -135,10 +135,10 @@ Here's the version that does compile:\n let one_to_one_hundred = (1..101).collect::<Vec<i32>>();\n ```\n \n-If you remember, the `::<>` syntax allows us to give a type hint,\n-and so we tell it that we want a vector of integers. You don't always\n-need to use the whole type, though. Using a `_` will let you provide\n-a partial hint:\n+If you remember, the [`::<>` syntax](generics.html#resolving-ambiguities)\n+allows us to give a type hint that tells the compiler we want a vector of\n+integers. You don't always need to use the whole type, though. Using a `_`\n+will let you provide a partial hint:\n \n ```rust\n let one_to_one_hundred = (1..101).collect::<Vec<_>>();"}, {"sha": "6b2a145c85e512ffdf9d14733bf01509c9eda522", "filename": "src/doc/book/src/structs.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc000599b8f3fd2b15a7d862bd70da440ff8b12b/src%2Fdoc%2Fbook%2Fsrc%2Fstructs.md", "raw_url": "https://github.com/rust-lang/rust/raw/cc000599b8f3fd2b15a7d862bd70da440ff8b12b/src%2Fdoc%2Fbook%2Fsrc%2Fstructs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fstructs.md?ref=cc000599b8f3fd2b15a7d862bd70da440ff8b12b", "patch": "@@ -134,7 +134,7 @@ fn main() {\n     let age = 27;\n     let peter = Person { name, age };\n \n-    // Print debug struct\n+    // Debug-print struct\n     println!(\"{:?}\", peter);\n }\n ```"}, {"sha": "df7ae410ed1c1315997149da7aeb971697d6359c", "filename": "src/doc/book/src/syntax-index.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc000599b8f3fd2b15a7d862bd70da440ff8b12b/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-index.md", "raw_url": "https://github.com/rust-lang/rust/raw/cc000599b8f3fd2b15a7d862bd70da440ff8b12b/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-index.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-index.md?ref=cc000599b8f3fd2b15a7d862bd70da440ff8b12b", "patch": "@@ -125,7 +125,7 @@\n <!-- Generics -->\n \n * `path<\u2026>` (*e.g.* `Vec<u8>`): specifies parameters to generic type *in a type*.  See [Generics].\n-* `path::<\u2026>`, `method::<\u2026>` (*e.g.* `\"42\".parse::<i32>()`): specifies parameters to generic type, function, or method *in an expression*.\n+* `path::<\u2026>`, `method::<\u2026>` (*e.g.* `\"42\".parse::<i32>()`): specifies parameters to generic type, function, or method *in an expression*.  See [Generics \u00a7 Resolving ambiguities](generics.html#resolving-ambiguities).\n * `fn ident<\u2026> \u2026`: define generic function.  See [Generics].\n * `struct ident<\u2026> \u2026`: define generic structure.  See [Generics].\n * `enum ident<\u2026> \u2026`: define generic enumeration.  See [Generics]."}]}