{"sha": "97b736c1a5260ae51a8ee72311dde33817a161ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3YjczNmMxYTUyNjBhZTUxYThlZTcyMzExZGRlMzM4MTdhMTYxYWM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-01-15T22:31:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-15T22:31:00Z"}, "message": "Rollup merge of #81033 - jyn514:nested-variant, r=CraftSpider\n\nRemove useless `clean::Variant` struct\n\nIt had exactly one field and no special behavior, so there was no point in having it.\n\nr? `@CraftSpider`", "tree": {"sha": "010b22dd508ab78ee4f97cf9d9d51d6020af40d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/010b22dd508ab78ee4f97cf9d9d51d6020af40d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97b736c1a5260ae51a8ee72311dde33817a161ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgAhekCRBK7hj4Ov3rIwAAdHIIAKampWH4BcWLdn5spNyWiyBR\nv8rt+13S3DJUqErHTUrGilmpthtz9wxYmCdAjuP80htwllvi4tk2GowhpQwGdRhu\nRU3y1D/7LK+D0Eh/T+/qo9iKM4DS9HbPZoAgsnLRY3zUHKESnjOez1O/imL/2mpX\n+HYFVatHkU3Gs6Y3D8F2eygw087RZkM1D3R7b1xm7o1B61Y6/Vgfs9MFJye04OI+\nS5NNKmZdh4Db4JqWzkavp/qE0peP623QPkO0SMcyfQhBzWe63jsYtU8x1aDmiqn3\nDxJyf6v+ol4MS7zwJeQPoLxHza8svxW4VHxfcQFvTnyQrP0OZXl544D4ea4iLvU=\n=1SjW\n-----END PGP SIGNATURE-----\n", "payload": "tree 010b22dd508ab78ee4f97cf9d9d51d6020af40d8\nparent 38772f1491bdce8e06f4eb451bc98d4c43c1ba35\nparent d11855a8ceb129c25160a7adb995087fdf799102\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1610749860 +0100\ncommitter GitHub <noreply@github.com> 1610749860 +0100\n\nRollup merge of #81033 - jyn514:nested-variant, r=CraftSpider\n\nRemove useless `clean::Variant` struct\n\nIt had exactly one field and no special behavior, so there was no point in having it.\n\nr? `@CraftSpider`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97b736c1a5260ae51a8ee72311dde33817a161ac", "html_url": "https://github.com/rust-lang/rust/commit/97b736c1a5260ae51a8ee72311dde33817a161ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97b736c1a5260ae51a8ee72311dde33817a161ac/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38772f1491bdce8e06f4eb451bc98d4c43c1ba35", "url": "https://api.github.com/repos/rust-lang/rust/commits/38772f1491bdce8e06f4eb451bc98d4c43c1ba35", "html_url": "https://github.com/rust-lang/rust/commit/38772f1491bdce8e06f4eb451bc98d4c43c1ba35"}, {"sha": "d11855a8ceb129c25160a7adb995087fdf799102", "url": "https://api.github.com/repos/rust-lang/rust/commits/d11855a8ceb129c25160a7adb995087fdf799102", "html_url": "https://github.com/rust-lang/rust/commit/d11855a8ceb129c25160a7adb995087fdf799102"}], "stats": {"total": 80, "additions": 33, "deletions": 47}, "files": [{"sha": "545f432def5a7493890d8ce628ac7e0c784d4869", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/97b736c1a5260ae51a8ee72311dde33817a161ac/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b736c1a5260ae51a8ee72311dde33817a161ac/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=97b736c1a5260ae51a8ee72311dde33817a161ac", "patch": "@@ -1840,11 +1840,11 @@ impl Clean<VariantStruct> for rustc_hir::VariantData<'_> {\n impl Clean<Item> for ty::VariantDef {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let kind = match self.ctor_kind {\n-            CtorKind::Const => VariantKind::CLike,\n-            CtorKind::Fn => VariantKind::Tuple(\n+            CtorKind::Const => Variant::CLike,\n+            CtorKind::Fn => Variant::Tuple(\n                 self.fields.iter().map(|f| cx.tcx.type_of(f.did).clean(cx)).collect(),\n             ),\n-            CtorKind::Fictive => VariantKind::Struct(VariantStruct {\n+            CtorKind::Fictive => Variant::Struct(VariantStruct {\n                 struct_type: doctree::Plain,\n                 fields_stripped: false,\n                 fields: self\n@@ -1861,25 +1861,21 @@ impl Clean<Item> for ty::VariantDef {\n                     .collect(),\n             }),\n         };\n-        let what_rustc_thinks = Item::from_def_id_and_parts(\n-            self.def_id,\n-            Some(self.ident.name),\n-            VariantItem(Variant { kind }),\n-            cx,\n-        );\n+        let what_rustc_thinks =\n+            Item::from_def_id_and_parts(self.def_id, Some(self.ident.name), VariantItem(kind), cx);\n         // don't show `pub` for fields, which are always public\n         Item { visibility: Inherited, ..what_rustc_thinks }\n     }\n }\n \n-impl Clean<VariantKind> for hir::VariantData<'_> {\n-    fn clean(&self, cx: &DocContext<'_>) -> VariantKind {\n+impl Clean<Variant> for hir::VariantData<'_> {\n+    fn clean(&self, cx: &DocContext<'_>) -> Variant {\n         match self {\n-            hir::VariantData::Struct(..) => VariantKind::Struct(self.clean(cx)),\n+            hir::VariantData::Struct(..) => Variant::Struct(self.clean(cx)),\n             hir::VariantData::Tuple(..) => {\n-                VariantKind::Tuple(self.fields().iter().map(|x| x.ty.clean(cx)).collect())\n+                Variant::Tuple(self.fields().iter().map(|x| x.ty.clean(cx)).collect())\n             }\n-            hir::VariantData::Unit(..) => VariantKind::CLike,\n+            hir::VariantData::Unit(..) => Variant::CLike,\n         }\n     }\n }\n@@ -2048,7 +2044,7 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n \n impl Clean<Item> for hir::Variant<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        let kind = VariantItem(Variant { kind: self.data.clean(cx) });\n+        let kind = VariantItem(self.data.clean(cx));\n         let what_rustc_thinks =\n             Item::from_hir_id_and_parts(self.id, Some(self.ident.name), kind, cx);\n         // don't show `pub` for variants, which are always public"}, {"sha": "666b11b5f806dd1f42edde23e96e1b49c620df56", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/97b736c1a5260ae51a8ee72311dde33817a161ac/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b736c1a5260ae51a8ee72311dde33817a161ac/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=97b736c1a5260ae51a8ee72311dde33817a161ac", "patch": "@@ -237,9 +237,7 @@ impl Item {\n         match *self.kind {\n             StructItem(ref _struct) => Some(_struct.fields_stripped),\n             UnionItem(ref union) => Some(union.fields_stripped),\n-            VariantItem(Variant { kind: VariantKind::Struct(ref vstruct) }) => {\n-                Some(vstruct.fields_stripped)\n-            }\n+            VariantItem(Variant::Struct(ref vstruct)) => Some(vstruct.fields_stripped),\n             _ => None,\n         }\n     }\n@@ -353,7 +351,7 @@ impl ItemKind {\n         match self {\n             StructItem(s) => s.fields.iter(),\n             UnionItem(u) => u.fields.iter(),\n-            VariantItem(Variant { kind: VariantKind::Struct(v) }) => v.fields.iter(),\n+            VariantItem(Variant::Struct(v)) => v.fields.iter(),\n             EnumItem(e) => e.variants.iter(),\n             TraitItem(t) => t.items.iter(),\n             ImplItem(i) => i.items.iter(),\n@@ -1719,12 +1717,7 @@ crate struct Enum {\n }\n \n #[derive(Clone, Debug)]\n-crate struct Variant {\n-    crate kind: VariantKind,\n-}\n-\n-#[derive(Clone, Debug)]\n-crate enum VariantKind {\n+crate enum Variant {\n     CLike,\n     Tuple(Vec<Type>),\n     Struct(VariantStruct),"}, {"sha": "b2773a29e29051d6a3423865facc393219b21e6e", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97b736c1a5260ae51a8ee72311dde33817a161ac/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b736c1a5260ae51a8ee72311dde33817a161ac/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=97b736c1a5260ae51a8ee72311dde33817a161ac", "patch": "@@ -55,13 +55,13 @@ crate trait DocFolder: Sized {\n             }\n             VariantItem(i) => {\n                 let i2 = i.clone(); // this clone is small\n-                match i.kind {\n-                    VariantKind::Struct(mut j) => {\n+                match i {\n+                    Variant::Struct(mut j) => {\n                         let num_fields = j.fields.len();\n                         j.fields = j.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n                         j.fields_stripped |= num_fields != j.fields.len()\n                             || j.fields.iter().any(|f| f.is_stripped());\n-                        VariantItem(Variant { kind: VariantKind::Struct(j) })\n+                        VariantItem(Variant::Struct(j))\n                     }\n                     _ => VariantItem(i2),\n                 }"}, {"sha": "2db89e8a7ca687a27d1ca35d1d8672a5fd325928", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/97b736c1a5260ae51a8ee72311dde33817a161ac/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b736c1a5260ae51a8ee72311dde33817a161ac/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=97b736c1a5260ae51a8ee72311dde33817a161ac", "patch": "@@ -3200,9 +3200,9 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                 write!(w, \"    \");\n                 let name = v.name.as_ref().unwrap();\n                 match *v.kind {\n-                    clean::VariantItem(ref var) => match var.kind {\n-                        clean::VariantKind::CLike => write!(w, \"{}\", name),\n-                        clean::VariantKind::Tuple(ref tys) => {\n+                    clean::VariantItem(ref var) => match var {\n+                        clean::Variant::CLike => write!(w, \"{}\", name),\n+                        clean::Variant::Tuple(ref tys) => {\n                             write!(w, \"{}(\", name);\n                             for (i, ty) in tys.iter().enumerate() {\n                                 if i > 0 {\n@@ -3212,7 +3212,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                             }\n                             write!(w, \")\");\n                         }\n-                        clean::VariantKind::Struct(ref s) => {\n+                        clean::Variant::Struct(ref s) => {\n                             render_struct(w, v, None, s.struct_type, &s.fields, \"    \", false, cx);\n                         }\n                     },\n@@ -3249,25 +3249,22 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                 id = id,\n                 name = variant.name.as_ref().unwrap()\n             );\n-            if let clean::VariantItem(ref var) = *variant.kind {\n-                if let clean::VariantKind::Tuple(ref tys) = var.kind {\n-                    write!(w, \"(\");\n-                    for (i, ty) in tys.iter().enumerate() {\n-                        if i > 0 {\n-                            write!(w, \",&nbsp;\");\n-                        }\n-                        write!(w, \"{}\", ty.print());\n+            if let clean::VariantItem(clean::Variant::Tuple(ref tys)) = *variant.kind {\n+                write!(w, \"(\");\n+                for (i, ty) in tys.iter().enumerate() {\n+                    if i > 0 {\n+                        write!(w, \",&nbsp;\");\n                     }\n-                    write!(w, \")\");\n+                    write!(w, \"{}\", ty.print());\n                 }\n+                write!(w, \")\");\n             }\n             write!(w, \"</code></div>\");\n             document(w, cx, variant, Some(it));\n             document_non_exhaustive(w, variant);\n \n-            use crate::clean::{Variant, VariantKind};\n-            if let clean::VariantItem(Variant { kind: VariantKind::Struct(ref s) }) = *variant.kind\n-            {\n+            use crate::clean::Variant;\n+            if let clean::VariantItem(Variant::Struct(ref s)) = *variant.kind {\n                 let variant_id = cx.derive_id(format!(\n                     \"{}.{}.fields\",\n                     ItemType::Variant,"}, {"sha": "7d05cb016b67c899ccc03b674944b1e9993cb5b8", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97b736c1a5260ae51a8ee72311dde33817a161ac/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b736c1a5260ae51a8ee72311dde33817a161ac/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=97b736c1a5260ae51a8ee72311dde33817a161ac", "patch": "@@ -482,8 +482,8 @@ impl From<clean::VariantStruct> for Struct {\n \n impl From<clean::Variant> for Variant {\n     fn from(variant: clean::Variant) -> Self {\n-        use clean::VariantKind::*;\n-        match variant.kind {\n+        use clean::Variant::*;\n+        match variant {\n             CLike => Variant::Plain,\n             Tuple(t) => Variant::Tuple(t.into_iter().map(Into::into).collect()),\n             Struct(s) => Variant::Struct(ids(s.fields)),"}, {"sha": "162b70973b418e25f77855fca860b661c45eba10", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97b736c1a5260ae51a8ee72311dde33817a161ac/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b736c1a5260ae51a8ee72311dde33817a161ac/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=97b736c1a5260ae51a8ee72311dde33817a161ac", "patch": "@@ -94,7 +94,7 @@ impl<'a> DocFolder for Stripper<'a> {\n             // implementations of traits are always public.\n             clean::ImplItem(ref imp) if imp.trait_.is_some() => true,\n             // Struct variant fields have inherited visibility\n-            clean::VariantItem(clean::Variant { kind: clean::VariantKind::Struct(..) }) => true,\n+            clean::VariantItem(clean::Variant::Struct(..)) => true,\n             _ => false,\n         };\n "}]}