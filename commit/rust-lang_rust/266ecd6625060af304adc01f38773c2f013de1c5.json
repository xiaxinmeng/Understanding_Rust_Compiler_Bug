{"sha": "266ecd6625060af304adc01f38773c2f013de1c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NmVjZDY2MjUwNjBhZjMwNGFkYzAxZjM4NzczYzJmMDEzZGUxYzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-31T03:10:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-31T03:10:07Z"}, "message": "Auto merge of #68685 - Dylan-DPC:rollup-rkbo05z, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #68588 (check_unsafety: more code reuse)\n - #68638 (Add missing links for cmp traits)\n - #68660 (Fix typo.)\n - #68669 (suggest adding space in accidental doc comments)\n - #68670 (clarify \"incorrect issue\" error)\n - #68680 (Add `#![doc(html_playground_url = ...)]` to alloc crate)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "fa1b45c467eea8918b50b0be085c677f8c66e1ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa1b45c467eea8918b50b0be085c677f8c66e1ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/266ecd6625060af304adc01f38773c2f013de1c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/266ecd6625060af304adc01f38773c2f013de1c5", "html_url": "https://github.com/rust-lang/rust/commit/266ecd6625060af304adc01f38773c2f013de1c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/266ecd6625060af304adc01f38773c2f013de1c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "138c50f0af57e2631aa09092b826e2c3efd224d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/138c50f0af57e2631aa09092b826e2c3efd224d2", "html_url": "https://github.com/rust-lang/rust/commit/138c50f0af57e2631aa09092b826e2c3efd224d2"}, {"sha": "6c67466f73b1727d148f48cb12d1c4d86fa392fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c67466f73b1727d148f48cb12d1c4d86fa392fc", "html_url": "https://github.com/rust-lang/rust/commit/6c67466f73b1727d148f48cb12d1c4d86fa392fc"}], "stats": {"total": 281, "additions": 188, "deletions": 93}, "files": [{"sha": "ffa4176cc7969533012b20bc4e3ceb1879cb0f2b", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/266ecd6625060af304adc01f38773c2f013de1c5/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266ecd6625060af304adc01f38773c2f013de1c5/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=266ecd6625060af304adc01f38773c2f013de1c5", "patch": "@@ -60,6 +60,7 @@\n #![stable(feature = \"alloc\", since = \"1.36.0\")]\n #![doc(\n     html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+    html_playground_url = \"https://play.rust-lang.org/\",\n     issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\n     test(no_crate_inject, attr(allow(unused_variables), deny(warnings)))\n )]"}, {"sha": "e41a7afd3e223a4f840c8a5b5dd14d9d690df050", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/266ecd6625060af304adc01f38773c2f013de1c5/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266ecd6625060af304adc01f38773c2f013de1c5/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=266ecd6625060af304adc01f38773c2f013de1c5", "patch": "@@ -35,7 +35,7 @@ use self::Ordering::*;\n ///\n /// This trait allows for partial equality, for types that do not have a full\n /// equivalence relation. For example, in floating point numbers `NaN != NaN`,\n-/// so floating point types implement `PartialEq` but not `Eq`.\n+/// so floating point types implement `PartialEq` but not [`Eq`].\n ///\n /// Formally, the equality must be (for all `a`, `b` and `c`):\n ///\n@@ -55,12 +55,12 @@ use self::Ordering::*;\n ///\n /// ## How can I implement `PartialEq`?\n ///\n-/// PartialEq only requires the `eq` method to be implemented; `ne` is defined\n-/// in terms of it by default. Any manual implementation of `ne` *must* respect\n-/// the rule that `eq` is a strict inverse of `ne`; that is, `!(a == b)` if and\n+/// `PartialEq` only requires the [`eq`] method to be implemented; [`ne`] is defined\n+/// in terms of it by default. Any manual implementation of [`ne`] *must* respect\n+/// the rule that [`eq`] is a strict inverse of [`ne`]; that is, `!(a == b)` if and\n /// only if `a != b`.\n ///\n-/// Implementations of `PartialEq`, `PartialOrd`, and `Ord` *must* agree with\n+/// Implementations of `PartialEq`, [`PartialOrd`], and [`Ord`] *must* agree with\n /// each other. It's easy to accidentally make them disagree by deriving some\n /// of the traits and manually implementing others.\n ///\n@@ -190,6 +190,9 @@ use self::Ordering::*;\n /// assert_eq!(x == y, false);\n /// assert_eq!(x.eq(&y), false);\n /// ```\n+///\n+/// [`eq`]: PartialEq::eq\n+/// [`ne`]: PartialEq::ne\n #[lang = \"eq\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(alias = \"==\")]\n@@ -233,7 +236,7 @@ pub macro PartialEq($item:item) {\n /// - transitive: `a == b` and `b == c` implies `a == c`.\n ///\n /// This property cannot be checked by the compiler, and therefore `Eq` implies\n-/// `PartialEq`, and has no extra methods.\n+/// [`PartialEq`], and has no extra methods.\n ///\n /// ## Derivable\n ///\n@@ -370,6 +373,7 @@ impl Ordering {\n     /// Chains two orderings.\n     ///\n     /// Returns `self` when it's not `Equal`. Otherwise returns `other`.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -442,10 +446,12 @@ impl Ordering {\n \n /// A helper struct for reverse ordering.\n ///\n-/// This struct is a helper to be used with functions like `Vec::sort_by_key` and\n+/// This struct is a helper to be used with functions like [`Vec::sort_by_key`] and\n /// can be used to reverse order a part of a key.\n ///\n-/// Example usage:\n+/// [`Vec::sort_by_key`]: ../../std/vec/struct.Vec.html#method.sort_by_key\n+///\n+/// # Examples\n ///\n /// ```\n /// use std::cmp::Reverse;\n@@ -506,12 +512,12 @@ impl<T: Ord> Ord for Reverse<T> {\n ///\n /// ## How can I implement `Ord`?\n ///\n-/// `Ord` requires that the type also be `PartialOrd` and `Eq` (which requires `PartialEq`).\n+/// `Ord` requires that the type also be [`PartialOrd`] and [`Eq`] (which requires [`PartialEq`]).\n ///\n-/// Then you must define an implementation for `cmp()`. You may find it useful to use\n-/// `cmp()` on your type's fields.\n+/// Then you must define an implementation for [`cmp`]. You may find it useful to use\n+/// [`cmp`] on your type's fields.\n ///\n-/// Implementations of `PartialEq`, `PartialOrd`, and `Ord` *must*\n+/// Implementations of [`PartialEq`], [`PartialOrd`], and `Ord` *must*\n /// agree with each other. That is, `a.cmp(b) == Ordering::Equal` if\n /// and only if `a == b` and `Some(a.cmp(b)) == a.partial_cmp(b)` for\n /// all `a` and `b`. It's easy to accidentally make them disagree by\n@@ -548,13 +554,15 @@ impl<T: Ord> Ord for Reverse<T> {\n ///     }\n /// }\n /// ```\n+///\n+/// [`cmp`]: Ord::cmp\n #[doc(alias = \"<\")]\n #[doc(alias = \">\")]\n #[doc(alias = \"<=\")]\n #[doc(alias = \">=\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Ord: Eq + PartialOrd<Self> {\n-    /// This method returns an `Ordering` between `self` and `other`.\n+    /// This method returns an [`Ordering`] between `self` and `other`.\n     ///\n     /// By convention, `self.cmp(&other)` returns the ordering matching the expression\n     /// `self <operator> other` if true.\n@@ -689,20 +697,20 @@ impl PartialOrd for Ordering {\n ///\n /// ## How can I implement `PartialOrd`?\n ///\n-/// `PartialOrd` only requires implementation of the `partial_cmp` method, with the others\n+/// `PartialOrd` only requires implementation of the [`partial_cmp`] method, with the others\n /// generated from default implementations.\n ///\n /// However it remains possible to implement the others separately for types which do not have a\n /// total order. For example, for floating point numbers, `NaN < 0 == false` and `NaN >= 0 ==\n /// false` (cf. IEEE 754-2008 section 5.11).\n ///\n-/// `PartialOrd` requires your type to be `PartialEq`.\n+/// `PartialOrd` requires your type to be [`PartialEq`].\n ///\n-/// Implementations of `PartialEq`, `PartialOrd`, and `Ord` *must* agree with each other. It's\n+/// Implementations of [`PartialEq`], `PartialOrd`, and [`Ord`] *must* agree with each other. It's\n /// easy to accidentally make them disagree by deriving some of the traits and manually\n /// implementing others.\n ///\n-/// If your type is `Ord`, you can implement `partial_cmp()` by using `cmp()`:\n+/// If your type is [`Ord`], you can implement [`partial_cmp`] by using [`cmp`]:\n ///\n /// ```\n /// use std::cmp::Ordering;\n@@ -733,7 +741,7 @@ impl PartialOrd for Ordering {\n /// }\n /// ```\n ///\n-/// You may also find it useful to use `partial_cmp()` on your type's fields. Here\n+/// You may also find it useful to use [`partial_cmp`] on your type's fields. Here\n /// is an example of `Person` types who have a floating-point `height` field that\n /// is the only field to be used for sorting:\n ///\n@@ -768,6 +776,9 @@ impl PartialOrd for Ordering {\n /// assert_eq!(x < y, true);\n /// assert_eq!(x.lt(&y), true);\n /// ```\n+///\n+/// [`partial_cmp`]: PartialOrd::partial_cmp\n+/// [`cmp`]: Ord::cmp\n #[lang = \"partial_ord\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(alias = \">\")]\n@@ -893,7 +904,7 @@ pub macro PartialOrd($item:item) {\n ///\n /// Returns the first argument if the comparison determines them to be equal.\n ///\n-/// Internally uses an alias to `Ord::min`.\n+/// Internally uses an alias to [`Ord::min`].\n ///\n /// # Examples\n ///\n@@ -956,7 +967,7 @@ pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n ///\n /// Returns the second argument if the comparison determines them to be equal.\n ///\n-/// Internally uses an alias to `Ord::max`.\n+/// Internally uses an alias to [`Ord::max`].\n ///\n /// # Examples\n ///"}, {"sha": "8dc185cd82b3b41c97d60c558b64efe7444c702c", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 18, "deletions": 39, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/266ecd6625060af304adc01f38773c2f013de1c5/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266ecd6625060af304adc01f38773c2f013de1c5/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=266ecd6625060af304adc01f38773c2f013de1c5", "patch": "@@ -148,16 +148,10 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 let cast_out = CastTy::from_ty(cast_ty).expect(\"bad output type for cast\");\n                 match (cast_in, cast_out) {\n                     (CastTy::Ptr(_), CastTy::Int(_)) | (CastTy::FnPtr, CastTy::Int(_)) => {\n-                        self.register_violations(\n-                            &[UnsafetyViolation {\n-                                source_info: self.source_info,\n-                                description: Symbol::intern(\"cast of pointer to int\"),\n-                                details: Symbol::intern(\n-                                    \"casting pointers to integers in constants\",\n-                                ),\n-                                kind: UnsafetyViolationKind::General,\n-                            }],\n-                            &[],\n+                        self.require_unsafe(\n+                            \"cast of pointer to int\",\n+                            \"casting pointers to integers in constants\",\n+                            UnsafetyViolationKind::General,\n                         );\n                     }\n                     _ => {}\n@@ -171,14 +165,10 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 if self.const_context && self.tcx.features().const_compare_raw_pointers =>\n             {\n                 if let ty::RawPtr(_) | ty::FnPtr(..) = lhs.ty(self.body, self.tcx).kind {\n-                    self.register_violations(\n-                        &[UnsafetyViolation {\n-                            source_info: self.source_info,\n-                            description: Symbol::intern(\"pointer operation\"),\n-                            details: Symbol::intern(\"operations on pointers in constants\"),\n-                            kind: UnsafetyViolationKind::General,\n-                        }],\n-                        &[],\n+                    self.require_unsafe(\n+                        \"pointer operation\",\n+                        \"operations on pointers in constants\",\n+                        UnsafetyViolationKind::General,\n                     );\n                 }\n             }\n@@ -199,18 +189,12 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         .as_ref()\n                         .assert_crate_local()\n                         .lint_root;\n-                    self.register_violations(\n-                        &[UnsafetyViolation {\n-                            source_info,\n-                            description: Symbol::intern(\"borrow of packed field\"),\n-                            details: Symbol::intern(\n-                                \"fields of packed structs might be misaligned: dereferencing a \\\n-                            misaligned pointer or even just creating a misaligned reference \\\n-                            is undefined behavior\",\n-                            ),\n-                            kind: UnsafetyViolationKind::BorrowPacked(lint_root),\n-                        }],\n-                        &[],\n+                    self.require_unsafe(\n+                        \"borrow of packed field\",\n+                        \"fields of packed structs might be misaligned: dereferencing a \\\n+                        misaligned pointer or even just creating a misaligned reference \\\n+                        is undefined behavior\",\n+                        UnsafetyViolationKind::BorrowPacked(lint_root),\n                     );\n                 }\n             }\n@@ -434,15 +418,10 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                                         the field can be changed to invalid values\",\n                                     )\n                                 };\n-                                let source_info = self.source_info;\n-                                self.register_violations(\n-                                    &[UnsafetyViolation {\n-                                        source_info,\n-                                        description: Symbol::intern(description),\n-                                        details: Symbol::intern(details),\n-                                        kind: UnsafetyViolationKind::GeneralAndConstFn,\n-                                    }],\n-                                    &[],\n+                                self.require_unsafe(\n+                                    description,\n+                                    details,\n+                                    UnsafetyViolationKind::GeneralAndConstFn,\n                                 );\n                             }\n                         },"}, {"sha": "ae8f1e4db1b38519da89f82ba2474bcf0399fd63", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/266ecd6625060af304adc01f38773c2f013de1c5/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266ecd6625060af304adc01f38773c2f013de1c5/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=266ecd6625060af304adc01f38773c2f013de1c5", "patch": "@@ -7,13 +7,13 @@ use crate::maybe_whole;\n use crate::DirectoryOwnership;\n \n use rustc_errors::{Applicability, PResult};\n-use rustc_span::source_map::{respan, Span};\n+use rustc_span::source_map::{respan, BytePos, Span};\n use rustc_span::symbol::{kw, sym, Symbol};\n use syntax::ast;\n use syntax::ast::{AttrStyle, AttrVec, Attribute, Mac, MacStmtStyle, VisibilityKind};\n use syntax::ast::{Block, BlockCheckMode, Expr, ExprKind, Local, Stmt, StmtKind, DUMMY_NODE_ID};\n use syntax::ptr::P;\n-use syntax::token;\n+use syntax::token::{self, TokenKind};\n use syntax::util::classify;\n \n use std::mem;\n@@ -431,6 +431,23 @@ impl<'a> Parser<'a> {\n                     if let Err(mut e) =\n                         self.expect_one_of(&[], &[token::Semi, token::CloseDelim(token::Brace)])\n                     {\n+                        if let TokenKind::DocComment(..) = self.token.kind {\n+                            if let Ok(snippet) = self.span_to_snippet(self.token.span) {\n+                                let sp = self.token.span;\n+                                let marker = &snippet[..3];\n+                                let (comment_marker, doc_comment_marker) = marker.split_at(2);\n+\n+                                e.span_suggestion(\n+                                    sp.with_hi(sp.lo() + BytePos(marker.len() as u32)),\n+                                    &format!(\n+                                        \"add a space before `{}` to use a regular comment\",\n+                                        doc_comment_marker,\n+                                    ),\n+                                    format!(\"{} {}\", comment_marker, doc_comment_marker),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            }\n+                        }\n                         e.emit();\n                         self.recover_stmt();\n                         // Don't complain about type errors in body tail after parse error (#57383)."}, {"sha": "3ca778354e41386192e0ec8bfb8a3f2aae0f46b9", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/266ecd6625060af304adc01f38773c2f013de1c5/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266ecd6625060af304adc01f38773c2f013de1c5/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=266ecd6625060af304adc01f38773c2f013de1c5", "patch": "@@ -426,8 +426,8 @@ pub mod guard {\n }\n \n // glibc >= 2.15 has a __pthread_get_minstack() function that returns\n-// PTHREAD_STACK_MIN plus however many bytes are needed for thread-local\n-// storage.  We need that information to avoid blowing up when a small stack\n+// PTHREAD_STACK_MIN plus bytes needed for thread-local storage.\n+// We need that information to avoid blowing up when a small stack\n // is created in an application with big thread-local storage requirements.\n // See #6233 for rationale and details.\n #[cfg(target_os = \"linux\")]"}, {"sha": "1da005d70d41b25725b511204b0cb7dc99c84e6c", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 34, "deletions": 21, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/266ecd6625060af304adc01f38773c2f013de1c5/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266ecd6625060af304adc01f38773c2f013de1c5/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=266ecd6625060af304adc01f38773c2f013de1c5", "patch": "@@ -371,6 +371,7 @@ where\n                     let mut feature = None;\n                     let mut reason = None;\n                     let mut issue = None;\n+                    let mut issue_num = None;\n                     let mut is_soft = false;\n                     for meta in metas {\n                         if let Some(mi) = meta.meta_item() {\n@@ -389,6 +390,37 @@ where\n                                     if !get(mi, &mut issue) {\n                                         continue 'outer;\n                                     }\n+\n+                                    // These unwraps are safe because `get` ensures the meta item\n+                                    // is a name/value pair string literal.\n+                                    issue_num = match &*issue.unwrap().as_str() {\n+                                        \"none\" => None,\n+                                        issue => {\n+                                            match issue.parse() {\n+                                                Ok(num) => {\n+                                                    // FIXME(rossmacarthur): disallow 0\n+                                                    // Disallowing this requires updates to\n+                                                    // some submodules\n+                                                    NonZeroU32::new(num)\n+                                                }\n+                                                Err(err) => {\n+                                                    struct_span_err!(\n+                                                        diagnostic,\n+                                                        mi.span,\n+                                                        E0545,\n+                                                        \"`issue` must be a numeric string \\\n+                                                        or \\\"none\\\"\",\n+                                                    )\n+                                                    .span_label(\n+                                                        mi.name_value_literal().unwrap().span,\n+                                                        &err.to_string(),\n+                                                    )\n+                                                    .emit();\n+                                                    continue 'outer;\n+                                                }\n+                                            }\n+                                        }\n+                                    };\n                                 }\n                                 sym::soft => {\n                                     if !mi.is_word() {\n@@ -420,27 +452,8 @@ where\n                     }\n \n                     match (feature, reason, issue) {\n-                        (Some(feature), reason, Some(issue)) => {\n-                            let issue = match &*issue.as_str() {\n-                                \"none\" => None,\n-                                issue => {\n-                                    if let Ok(num) = issue.parse() {\n-                                        // FIXME(rossmacarthur): disallow 0\n-                                        // Disallowing this requires updates to some submodules\n-                                        NonZeroU32::new(num)\n-                                    } else {\n-                                        struct_span_err!(\n-                                            diagnostic,\n-                                            attr.span,\n-                                            E0545,\n-                                            \"incorrect 'issue'\"\n-                                        )\n-                                        .emit();\n-                                        continue;\n-                                    }\n-                                }\n-                            };\n-                            let level = Unstable { reason, issue, is_soft };\n+                        (Some(feature), reason, Some(_)) => {\n+                            let level = Unstable { reason, issue: issue_num, is_soft };\n                             if sym::unstable == meta_name {\n                                 stab = Some(Stability { level, feature, rustc_depr: None });\n                             } else {"}, {"sha": "7a2bf468f893a59917876a672843d702b063ce05", "filename": "src/test/ui/feature-gate/unstable-attribute-allow-issue-0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/266ecd6625060af304adc01f38773c2f013de1c5/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266ecd6625060af304adc01f38773c2f013de1c5/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-0.rs?ref=266ecd6625060af304adc01f38773c2f013de1c5", "patch": "@@ -9,5 +9,5 @@ fn unstable_issue_0() {}\n #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n fn unstable_issue_none() {}\n \n-#[unstable(feature = \"unstable_test_feature\", issue = \"something\")] //~ ERROR incorrect 'issue'\n-fn unstable_issue_not_allowed() {}\n+#[unstable(feature = \"unstable_test_feature\", issue = \"something\")]\n+fn unstable_issue_not_allowed() {} //~^ ERROR `issue` must be a numeric string or \"none\""}, {"sha": "21ff12185ec5f962b0c7729ec7791261e66640de", "filename": "src/test/ui/feature-gate/unstable-attribute-allow-issue-0.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/266ecd6625060af304adc01f38773c2f013de1c5/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/266ecd6625060af304adc01f38773c2f013de1c5/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-0.stderr?ref=266ecd6625060af304adc01f38773c2f013de1c5", "patch": "@@ -1,8 +1,10 @@\n-error[E0545]: incorrect 'issue'\n-  --> $DIR/unstable-attribute-allow-issue-0.rs:12:1\n+error[E0545]: `issue` must be a numeric string or \"none\"\n+  --> $DIR/unstable-attribute-allow-issue-0.rs:12:47\n    |\n LL | #[unstable(feature = \"unstable_test_feature\", issue = \"something\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^^^-----------\n+   |                                                       |\n+   |                                                       invalid digit found in string\n \n error: aborting due to previous error\n "}, {"sha": "b02df13213f209a4eb276ad91b1fb9f4b1593242", "filename": "src/test/ui/parser/doc-comment-in-stmt.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/266ecd6625060af304adc01f38773c2f013de1c5/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266ecd6625060af304adc01f38773c2f013de1c5/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-stmt.rs?ref=266ecd6625060af304adc01f38773c2f013de1c5", "patch": "@@ -0,0 +1,20 @@\n+fn foo() -> bool {\n+    false\n+    //!self.allow_ty_infer()\n+    //~^ ERROR found doc comment\n+}\n+\n+fn bar() -> bool {\n+    false\n+    /*! bar */ //~ ERROR found doc comment\n+}\n+\n+fn baz() -> i32 {\n+    1 /** baz */ //~ ERROR found doc comment\n+}\n+\n+fn quux() -> i32 {\n+    2 /*! quux */ //~ ERROR found doc comment\n+}\n+\n+fn main() {}"}, {"sha": "5d94d6fe69b59716f7a452ad77ae7b9b8f1c9b28", "filename": "src/test/ui/parser/doc-comment-in-stmt.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/266ecd6625060af304adc01f38773c2f013de1c5/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/266ecd6625060af304adc01f38773c2f013de1c5/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-stmt.stderr?ref=266ecd6625060af304adc01f38773c2f013de1c5", "patch": "@@ -0,0 +1,50 @@\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found doc comment `//!self.allow_ty_infer()`\n+  --> $DIR/doc-comment-in-stmt.rs:3:5\n+   |\n+LL |     false\n+   |          - expected one of `.`, `;`, `?`, `}`, or an operator\n+LL |     //!self.allow_ty_infer()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ unexpected token\n+   |\n+help: add a space before `!` to use a regular comment\n+   |\n+LL |     // !self.allow_ty_infer()\n+   |     ^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found doc comment `/*! bar */`\n+  --> $DIR/doc-comment-in-stmt.rs:9:5\n+   |\n+LL |     false\n+   |          - expected one of `.`, `;`, `?`, `}`, or an operator\n+LL |     /*! bar */\n+   |     ^^^^^^^^^^ unexpected token\n+   |\n+help: add a space before `!` to use a regular comment\n+   |\n+LL |     /* ! bar */\n+   |     ^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found doc comment `/** baz */`\n+  --> $DIR/doc-comment-in-stmt.rs:13:7\n+   |\n+LL |     1 /** baz */\n+   |       ^^^^^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+   |\n+help: add a space before `*` to use a regular comment\n+   |\n+LL |     1 /* * baz */\n+   |       ^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found doc comment `/*! quux */`\n+  --> $DIR/doc-comment-in-stmt.rs:17:7\n+   |\n+LL |     2 /*! quux */\n+   |       ^^^^^^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+   |\n+help: add a space before `!` to use a regular comment\n+   |\n+LL |     2 /* ! quux */\n+   |       ^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "e74147ce900e865c213c31c33e5fd32c420d33a4", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266ecd6625060af304adc01f38773c2f013de1c5/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266ecd6625060af304adc01f38773c2f013de1c5/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-2.rs?ref=266ecd6625060af304adc01f38773c2f013de1c5", "patch": "@@ -10,7 +10,7 @@ fn f1() { }\n #[stable(feature = \"a\", sinse = \"1.0.0\")] //~ ERROR unknown meta item 'sinse'\n fn f2() { }\n \n-#[unstable(feature = \"a\", issue = \"no\")] //~ ERROR incorrect 'issue'\n+#[unstable(feature = \"a\", issue = \"no\")] //~ ERROR `issue` must be a numeric string or \"none\"\n fn f3() { }\n \n fn main() { }"}, {"sha": "541b94afe0f67acfc716cbba03cefa61f17561df", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity-2.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/266ecd6625060af304adc01f38773c2f013de1c5/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/266ecd6625060af304adc01f38773c2f013de1c5/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-2.stderr?ref=266ecd6625060af304adc01f38773c2f013de1c5", "patch": "@@ -10,11 +10,13 @@ error[E0541]: unknown meta item 'sinse'\n LL | #[stable(feature = \"a\", sinse = \"1.0.0\")]\n    |                         ^^^^^^^^^^^^^^^ expected one of `since`, `note`\n \n-error[E0545]: incorrect 'issue'\n-  --> $DIR/stability-attribute-sanity-2.rs:13:1\n+error[E0545]: `issue` must be a numeric string or \"none\"\n+  --> $DIR/stability-attribute-sanity-2.rs:13:27\n    |\n LL | #[unstable(feature = \"a\", issue = \"no\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                           ^^^^^^^^----\n+   |                                   |\n+   |                                   invalid digit found in string\n \n error: aborting due to 3 previous errors\n "}]}