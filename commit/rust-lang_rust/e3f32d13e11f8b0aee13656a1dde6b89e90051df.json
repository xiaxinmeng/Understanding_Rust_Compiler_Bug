{"sha": "e3f32d13e11f8b0aee13656a1dde6b89e90051df", "node_id": "C_kwDOAAsO6NoAKGUzZjMyZDEzZTExZjhiMGFlZTEzNjU2YTFkZGU2Yjg5ZTkwMDUxZGY", "commit": {"author": {"name": "Lee Dogeon", "email": "dev.moreal@gmail.com", "date": "2022-04-01T06:22:32Z"}, "committer": {"name": "Lee Dogeon", "email": "dev.moreal@gmail.com", "date": "2022-04-01T11:29:32Z"}, "message": "Code blocks with tilde also works like code block", "tree": {"sha": "590bcdbaa6c96b5e66a18aeeafb7927a44ba2b7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/590bcdbaa6c96b5e66a18aeeafb7927a44ba2b7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3f32d13e11f8b0aee13656a1dde6b89e90051df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3f32d13e11f8b0aee13656a1dde6b89e90051df", "html_url": "https://github.com/rust-lang/rust/commit/e3f32d13e11f8b0aee13656a1dde6b89e90051df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3f32d13e11f8b0aee13656a1dde6b89e90051df/comments", "author": {"login": "moreal", "id": 26626194, "node_id": "MDQ6VXNlcjI2NjI2MTk0", "avatar_url": "https://avatars.githubusercontent.com/u/26626194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moreal", "html_url": "https://github.com/moreal", "followers_url": "https://api.github.com/users/moreal/followers", "following_url": "https://api.github.com/users/moreal/following{/other_user}", "gists_url": "https://api.github.com/users/moreal/gists{/gist_id}", "starred_url": "https://api.github.com/users/moreal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moreal/subscriptions", "organizations_url": "https://api.github.com/users/moreal/orgs", "repos_url": "https://api.github.com/users/moreal/repos", "events_url": "https://api.github.com/users/moreal/events{/privacy}", "received_events_url": "https://api.github.com/users/moreal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "moreal", "id": 26626194, "node_id": "MDQ6VXNlcjI2NjI2MTk0", "avatar_url": "https://avatars.githubusercontent.com/u/26626194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moreal", "html_url": "https://github.com/moreal", "followers_url": "https://api.github.com/users/moreal/followers", "following_url": "https://api.github.com/users/moreal/following{/other_user}", "gists_url": "https://api.github.com/users/moreal/gists{/gist_id}", "starred_url": "https://api.github.com/users/moreal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moreal/subscriptions", "organizations_url": "https://api.github.com/users/moreal/orgs", "repos_url": "https://api.github.com/users/moreal/repos", "events_url": "https://api.github.com/users/moreal/events{/privacy}", "received_events_url": "https://api.github.com/users/moreal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "259182b50b131647975926e8c94aad4c47d33747", "url": "https://api.github.com/repos/rust-lang/rust/commits/259182b50b131647975926e8c94aad4c47d33747", "html_url": "https://github.com/rust-lang/rust/commit/259182b50b131647975926e8c94aad4c47d33747"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "1c455c5f30c37ea85e86980fddee72a1c612d81c", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3f32d13e11f8b0aee13656a1dde6b89e90051df/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f32d13e11f8b0aee13656a1dde6b89e90051df/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=e3f32d13e11f8b0aee13656a1dde6b89e90051df", "patch": "@@ -474,7 +474,7 @@ impl TestAttr {\n     }\n }\n \n-const RUSTDOC_FENCE: &str = \"```\";\n+const RUSTDOC_FENCES: [&str; 2] = [\"```\", \"~~~\"];\n const RUSTDOC_CODE_BLOCK_ATTRIBUTES_RUNNABLE: &[&str] =\n     &[\"\", \"rust\", \"should_panic\", \"edition2015\", \"edition2018\", \"edition2021\"];\n \n@@ -483,7 +483,9 @@ fn has_runnable_doc_test(attrs: &hir::Attrs) -> bool {\n         let mut in_code_block = false;\n \n         for line in String::from(doc).lines() {\n-            if let Some(header) = line.strip_prefix(RUSTDOC_FENCE) {\n+            if let Some(header) =\n+                RUSTDOC_FENCES.into_iter().find_map(|fence| line.strip_prefix(fence))\n+            {\n                 in_code_block = !in_code_block;\n \n                 if in_code_block"}, {"sha": "8ac3c2da50b35654ff58b1eda6ee5f75c4eee54e", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e3f32d13e11f8b0aee13656a1dde6b89e90051df/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f32d13e11f8b0aee13656a1dde6b89e90051df/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=e3f32d13e11f8b0aee13656a1dde6b89e90051df", "patch": "@@ -78,7 +78,8 @@ pub(super) fn ra_fixture(\n     Some(())\n }\n \n-const RUSTDOC_FENCE: &str = \"```\";\n+const RUSTDOC_FENCE_LENGTH: usize = 3;\n+const RUSTDOC_FENCES: [&str; 2] = [\"```\", \"~~~\"];\n \n /// Injection of syntax highlighting of doctests.\n pub(super) fn doc_comment(\n@@ -166,11 +167,11 @@ pub(super) fn doc_comment(\n             };\n             let mut pos = TextSize::from(0);\n \n-            match line.find(RUSTDOC_FENCE) {\n+            match RUSTDOC_FENCES.into_iter().find_map(|fence| line.find(fence)) {\n                 Some(idx) => {\n                     is_codeblock = !is_codeblock;\n                     // Check whether code is rust by inspecting fence guards\n-                    let guards = &line[idx + RUSTDOC_FENCE.len()..];\n+                    let guards = &line[idx + RUSTDOC_FENCE_LENGTH..];\n                     let is_rust = is_rust_fence(guards);\n                     is_doctest = is_codeblock && is_rust;\n                     continue;"}, {"sha": "36e9ec6333be03a36c533f899b026d5d1c1b8fc9", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3f32d13e11f8b0aee13656a1dde6b89e90051df/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/e3f32d13e11f8b0aee13656a1dde6b89e90051df/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=e3f32d13e11f8b0aee13656a1dde6b89e90051df", "patch": "@@ -110,6 +110,11 @@\n     <span class=\"comment documentation\">///</span><span class=\"comment documentation\"> </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"variable declaration injected\">foobar</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"operator injected\">.</span><span class=\"function injected\">bar</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">/// ```</span>\n     <span class=\"comment documentation\">///</span>\n+    <span class=\"comment documentation\">/// ~~~rust,no_run</span>\n+    <span class=\"comment documentation\">///</span><span class=\"comment documentation\"> </span><span class=\"comment injected\">// code block with tilde.</span>\n+    <span class=\"comment documentation\">///</span><span class=\"comment documentation\"> </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"variable declaration injected\">foobar</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"operator injected\">.</span><span class=\"function injected\">bar</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n+    <span class=\"comment documentation\">/// ~~~</span>\n+    <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n     <span class=\"comment documentation\">///</span><span class=\"comment documentation\"> </span><span class=\"comment injected\">// functions</span>\n     <span class=\"comment documentation\">///</span><span class=\"comment documentation\"> </span><span class=\"keyword injected\">fn</span><span class=\"none injected\"> </span><span class=\"function declaration injected\">foo</span><span class=\"angle injected\">&lt;</span><span class=\"type_param declaration injected\">T</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"keyword injected\">const</span><span class=\"none injected\"> </span><span class=\"const_param declaration injected\">X</span><span class=\"colon injected\">:</span><span class=\"none injected\"> </span><span class=\"builtin_type injected\">usize</span><span class=\"angle injected\">&gt;</span><span class=\"parenthesis injected\">(</span><span class=\"value_param declaration injected\">arg</span><span class=\"colon injected\">:</span><span class=\"none injected\"> </span><span class=\"builtin_type injected\">i32</span><span class=\"parenthesis injected\">)</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span>"}, {"sha": "fdfe347a3286ddf981d1d5325497d7d4bde8ea68", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3f32d13e11f8b0aee13656a1dde6b89e90051df/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f32d13e11f8b0aee13656a1dde6b89e90051df/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=e3f32d13e11f8b0aee13656a1dde6b89e90051df", "patch": "@@ -644,6 +644,11 @@ impl Foo {\n     /// let foobar = Foo::new().bar();\n     /// ```\n     ///\n+    /// ~~~rust,no_run\n+    /// // code block with tilde.\n+    /// let foobar = Foo::new().bar();\n+    /// ~~~\n+    ///\n     /// ```\n     /// // functions\n     /// fn foo<T, const X: usize>(arg: i32) {"}, {"sha": "912ed1e7642759a21030209d8d502a5505e70132", "filename": "crates/rust-analyzer/src/markdown.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3f32d13e11f8b0aee13656a1dde6b89e90051df/crates%2Frust-analyzer%2Fsrc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f32d13e11f8b0aee13656a1dde6b89e90051df/crates%2Frust-analyzer%2Fsrc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmarkdown.rs?ref=e3f32d13e11f8b0aee13656a1dde6b89e90051df", "patch": "@@ -1,7 +1,7 @@\n //! Transforms markdown\n use ide_db::rust_doc::is_rust_fence;\n \n-const RUSTDOC_FENCE: &str = \"```\";\n+const RUSTDOC_FENCES: [&str; 2] = [\"```\", \"~~~\"];\n \n pub(crate) fn format_docs(src: &str) -> String {\n     let mut processed_lines = Vec::new();\n@@ -13,7 +13,8 @@ pub(crate) fn format_docs(src: &str) -> String {\n             continue;\n         }\n \n-        if let Some(header) = line.strip_prefix(RUSTDOC_FENCE) {\n+        if let Some(header) = RUSTDOC_FENCES.into_iter().find_map(|fence| line.strip_prefix(fence))\n+        {\n             in_code_block ^= true;\n \n             if in_code_block {"}]}