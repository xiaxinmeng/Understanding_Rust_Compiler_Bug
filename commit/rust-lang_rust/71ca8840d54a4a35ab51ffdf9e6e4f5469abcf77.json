{"sha": "71ca8840d54a4a35ab51ffdf9e6e4f5469abcf77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxY2E4ODQwZDU0YTRhMzVhYjUxZmZkZjllNmU0ZjU0NjlhYmNmNzc=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-09T23:08:15Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-09T23:08:15Z"}, "message": "Use `next()` instead of `peek()` where possible", "tree": {"sha": "b4869832862b0a7a8acde641a0704d1b05daa85e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4869832862b0a7a8acde641a0704d1b05daa85e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71ca8840d54a4a35ab51ffdf9e6e4f5469abcf77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71ca8840d54a4a35ab51ffdf9e6e4f5469abcf77", "html_url": "https://github.com/rust-lang/rust/commit/71ca8840d54a4a35ab51ffdf9e6e4f5469abcf77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71ca8840d54a4a35ab51ffdf9e6e4f5469abcf77/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "330ce948f7a0c338ba669bfe904a9619f9589c9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/330ce948f7a0c338ba669bfe904a9619f9589c9e", "html_url": "https://github.com/rust-lang/rust/commit/330ce948f7a0c338ba669bfe904a9619f9589c9e"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "4b455c6fea7a8b35fcce1aa9b2948c9808f5496c", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71ca8840d54a4a35ab51ffdf9e6e4f5469abcf77/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ca8840d54a4a35ab51ffdf9e6e4f5469abcf77/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=71ca8840d54a4a35ab51ffdf9e6e4f5469abcf77", "patch": "@@ -2028,7 +2028,7 @@ fn strip_generics_from_path(path_str: &str) -> Result<String, ResolutionFailure<\n             '<' => {\n                 segment.push(chr);\n \n-                match path.peek() {\n+                match path.next() {\n                     Some('<') => {\n                         return Err(ResolutionFailure::MalformedGenerics(\n                             MalformedGenerics::TooManyAngleBrackets,\n@@ -2039,8 +2039,8 @@ fn strip_generics_from_path(path_str: &str) -> Result<String, ResolutionFailure<\n                             MalformedGenerics::EmptyAngleBrackets,\n                         ));\n                     }\n-                    Some(_) => {\n-                        segment.push(path.next().unwrap());\n+                    Some(chr) => {\n+                        segment.push(chr);\n \n                         while let Some(chr) = path.next_if(|c| *c != '>') {\n                             segment.push(chr);"}]}