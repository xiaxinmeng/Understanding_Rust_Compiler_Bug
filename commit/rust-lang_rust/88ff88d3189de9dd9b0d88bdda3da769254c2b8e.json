{"sha": "88ff88d3189de9dd9b0d88bdda3da769254c2b8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZmY4OGQzMTg5ZGU5ZGQ5YjBkODhiZGRhM2RhNzY5MjU0YzJiOGU=", "commit": {"author": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-10-14T11:59:02Z"}, "committer": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-10-22T20:47:31Z"}, "message": "use Lazy, some fixes", "tree": {"sha": "080616bb7e00e028e8d561c828e48eb51956b635", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/080616bb7e00e028e8d561c828e48eb51956b635"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88ff88d3189de9dd9b0d88bdda3da769254c2b8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88ff88d3189de9dd9b0d88bdda3da769254c2b8e", "html_url": "https://github.com/rust-lang/rust/commit/88ff88d3189de9dd9b0d88bdda3da769254c2b8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88ff88d3189de9dd9b0d88bdda3da769254c2b8e/comments", "author": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19fbf2c16b5c1f39e23c720a2655cfdb49c25135", "url": "https://api.github.com/repos/rust-lang/rust/commits/19fbf2c16b5c1f39e23c720a2655cfdb49c25135", "html_url": "https://github.com/rust-lang/rust/commit/19fbf2c16b5c1f39e23c720a2655cfdb49c25135"}], "stats": {"total": 94, "additions": 51, "deletions": 43}, "files": [{"sha": "634480e5fb82287509392b22b4c3059c52312714", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88ff88d3189de9dd9b0d88bdda3da769254c2b8e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/88ff88d3189de9dd9b0d88bdda3da769254c2b8e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=88ff88d3189de9dd9b0d88bdda3da769254c2b8e", "patch": "@@ -1025,6 +1025,7 @@ dependencies = [\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"join_to_string 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"once_cell 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proptest 0.9.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_assists 0.1.0\",\n  \"ra_cfg 0.1.0\","}, {"sha": "f9bf0c686a30f203f64cf80e614f74f74b51c73d", "filename": "crates/ra_ide_api/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88ff88d3189de9dd9b0d88bdda3da769254c2b8e/crates%2Fra_ide_api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/88ff88d3189de9dd9b0d88bdda3da769254c2b8e/crates%2Fra_ide_api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2FCargo.toml?ref=88ff88d3189de9dd9b0d88bdda3da769254c2b8e", "patch": "@@ -19,6 +19,7 @@ rustc-hash = \"1.0\"\n unicase = \"2.2.0\"\n superslice = \"1.0.0\"\n rand = { version = \"0.7.0\", features = [\"small_rng\"] }\n+once_cell = \"1.2.0\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }"}, {"sha": "d14908b25d006afcc623fadaa4665c28afceac3a", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88ff88d3189de9dd9b0d88bdda3da769254c2b8e/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ff88d3189de9dd9b0d88bdda3da769254c2b8e/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=88ff88d3189de9dd9b0d88bdda3da769254c2b8e", "patch": "@@ -54,7 +54,7 @@ pub(crate) fn reference_definition(\n ) -> ReferenceResult {\n     use self::ReferenceResult::*;\n \n-    let name_kind = classify_name_ref(db, file_id, &name_ref).map(|d| d.item);\n+    let name_kind = classify_name_ref(db, file_id, &name_ref).map(|d| d.kind);\n     match name_kind {\n         Some(Macro(mac)) => return Exact(NavigationTarget::from_macro_def(db, mac)),\n         Some(Field(field)) => return Exact(NavigationTarget::from_field(db, field)),"}, {"sha": "ba328efa14012e1485b289510f50486554e4a87d", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88ff88d3189de9dd9b0d88bdda3da769254c2b8e/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ff88d3189de9dd9b0d88bdda3da769254c2b8e/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=88ff88d3189de9dd9b0d88bdda3da769254c2b8e", "patch": "@@ -100,8 +100,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n     let mut range = None;\n     if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset) {\n         let mut no_fallback = false;\n-        let name_kind =\n-            classify_name_ref(db, position.file_id, &name_ref).and_then(|d| Some(d.item));\n+        let name_kind = classify_name_ref(db, position.file_id, &name_ref).map(|d| d.kind);\n         match name_kind {\n             Some(Macro(it)) => {\n                 let src = it.source(db);"}, {"sha": "3d282d48a798c3438041d52c8954c731781bd0ea", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/88ff88d3189de9dd9b0d88bdda3da769254c2b8e/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ff88d3189de9dd9b0d88bdda3da769254c2b8e/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=88ff88d3189de9dd9b0d88bdda3da769254c2b8e", "patch": "@@ -5,6 +5,7 @@ mod name_definition;\n mod rename;\n mod search_scope;\n \n+use once_cell::unsync::Lazy;\n use ra_db::{SourceDatabase, SourceDatabaseExt};\n use ra_syntax::{algo::find_node_at_offset, ast, AstNode, SourceFile, SyntaxNode, TextUnit};\n \n@@ -61,7 +62,7 @@ pub(crate) fn find_all_refs(\n     let syntax = parse.tree().syntax().clone();\n     let RangeInfo { range, info: (name, def) } = find_name(db, &syntax, position)?;\n \n-    let declaration = match def.item {\n+    let declaration = match def.kind {\n         NameKind::Macro(mac) => NavigationTarget::from_macro_def(db, mac),\n         NameKind::Field(field) => NavigationTarget::from_field(db, field),\n         NameKind::AssocItem(assoc) => NavigationTarget::from_assoc_item(db, assoc),\n@@ -98,7 +99,7 @@ fn find_name<'a>(\n \n fn process_definition(db: &RootDatabase, def: NameDefinition, name: String) -> Vec<FileRange> {\n     let pat = name.as_str();\n-    let scope = def.scope(db).scope;\n+    let scope = def.scope(db).files;\n     let mut refs = vec![];\n \n     let is_match = |file_id: FileId, name_ref: &ast::NameRef| -> bool {\n@@ -112,12 +113,14 @@ fn process_definition(db: &RootDatabase, def: NameDefinition, name: String) -> V\n \n     for (file_id, text_range) in scope {\n         let text = db.file_text(file_id);\n-        let parse = SourceFile::parse(&text);\n-        let syntax = parse.tree().syntax().clone();\n+        let parse = Lazy::new(|| SourceFile::parse(&text));\n \n         for (idx, _) in text.match_indices(pat) {\n             let offset = TextUnit::from_usize(idx);\n-            if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(&syntax, offset) {\n+\n+            if let Some(name_ref) =\n+                find_node_at_offset::<ast::NameRef>(parse.tree().syntax(), offset)\n+            {\n                 let range = name_ref.syntax().text_range();\n \n                 if let Some(text_range) = text_range {"}, {"sha": "93e079cccbad3916f80299edb074d468edf21a96", "filename": "crates/ra_ide_api/src/references/classify.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/88ff88d3189de9dd9b0d88bdda3da769254c2b8e/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ff88d3189de9dd9b0d88bdda3da769254c2b8e/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs?ref=88ff88d3189de9dd9b0d88bdda3da769254c2b8e", "patch": "@@ -1,3 +1,5 @@\n+//! FIXME: write short doc here\n+\n use hir::{Either, FromSource, Module, ModuleSource, Path, PathResolution, Source, SourceAnalyzer};\n use ra_db::FileId;\n use ra_syntax::{ast, match_ast, AstNode, AstPtr};\n@@ -102,8 +104,9 @@ pub(crate) fn classify_name_ref(\n     let analyzer = SourceAnalyzer::new(db, file_id, name_ref.syntax(), None);\n \n     if let Some(method_call) = ast::MethodCallExpr::cast(parent.clone()) {\n-        let func = analyzer.resolve_method_call(&method_call)?;\n-        return Some(from_assoc_item(db, func.into()));\n+        if let Some(func) = analyzer.resolve_method_call(&method_call) {\n+            return Some(from_assoc_item(db, func.into()));\n+        }\n     }\n \n     if let Some(field_expr) = ast::FieldExpr::cast(parent.clone()) {\n@@ -128,15 +131,10 @@ pub(crate) fn classify_name_ref(\n     let container = Module::from_definition(db, Source { file_id, ast })?;\n     let visibility = None;\n \n-    if let Some(macro_call) =\n-        parent.parent().and_then(|node| node.parent()).and_then(ast::MacroCall::cast)\n-    {\n+    if let Some(macro_call) = parent.ancestors().find_map(ast::MacroCall::cast) {\n         if let Some(macro_def) = analyzer.resolve_macro_call(db, &macro_call) {\n-            return Some(NameDefinition {\n-                item: NameKind::Macro(macro_def),\n-                container,\n-                visibility,\n-            });\n+            let kind = NameKind::Macro(macro_def);\n+            return Some(NameDefinition { kind, container, visibility });\n         }\n     }\n \n@@ -147,23 +145,23 @@ pub(crate) fn classify_name_ref(\n         AssocItem(item) => Some(from_assoc_item(db, item)),\n         LocalBinding(Either::A(pat)) => from_pat(db, file_id, pat),\n         LocalBinding(Either::B(par)) => {\n-            let item = NameKind::SelfParam(par);\n-            Some(NameDefinition { item, container, visibility })\n+            let kind = NameKind::SelfParam(par);\n+            Some(NameDefinition { kind, container, visibility })\n         }\n         GenericParam(par) => {\n             // FIXME: get generic param def\n-            let item = NameKind::GenericParam(par);\n-            Some(NameDefinition { item, container, visibility })\n+            let kind = NameKind::GenericParam(par);\n+            Some(NameDefinition { kind, container, visibility })\n         }\n         Macro(def) => {\n-            let item = NameKind::Macro(def);\n-            Some(NameDefinition { item, container, visibility })\n+            let kind = NameKind::Macro(def);\n+            Some(NameDefinition { kind, container, visibility })\n         }\n         SelfType(impl_block) => {\n             let ty = impl_block.target_ty(db);\n-            let item = NameKind::SelfType(ty);\n+            let kind = NameKind::SelfType(ty);\n             let container = impl_block.module();\n-            Some(NameDefinition { item, container, visibility })\n+            Some(NameDefinition { kind, container, visibility })\n         }\n     }\n }"}, {"sha": "723d972373a2f415d39d19bee791d9e509413611", "filename": "crates/ra_ide_api/src/references/name_definition.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/88ff88d3189de9dd9b0d88bdda3da769254c2b8e/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ff88d3189de9dd9b0d88bdda3da769254c2b8e/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs?ref=88ff88d3189de9dd9b0d88bdda3da769254c2b8e", "patch": "@@ -1,3 +1,5 @@\n+//! FIXME: write short doc here\n+\n use hir::{\n     db::AstDatabase, Adt, AssocItem, DefWithBody, FromSource, HasSource, HirFileId, MacroDef,\n     Module, ModuleDef, StructField, Ty, VariantDef,\n@@ -22,7 +24,7 @@ pub enum NameKind {\n pub(crate) struct NameDefinition {\n     pub visibility: Option<ast::Visibility>,\n     pub container: Module,\n-    pub item: NameKind,\n+    pub kind: NameKind,\n }\n \n pub(super) fn from_pat(\n@@ -50,9 +52,9 @@ pub(super) fn from_pat(\n             }\n         }\n     })?;\n-    let item = NameKind::Pat((def, pat));\n+    let kind = NameKind::Pat((def, pat));\n     let container = def.module(db);\n-    Some(NameDefinition { item, container, visibility: None })\n+    Some(NameDefinition { kind, container, visibility: None })\n }\n \n pub(super) fn from_assoc_item(db: &RootDatabase, item: AssocItem) -> NameDefinition {\n@@ -62,27 +64,27 @@ pub(super) fn from_assoc_item(db: &RootDatabase, item: AssocItem) -> NameDefinit\n         AssocItem::Const(c) => c.source(db).ast.visibility(),\n         AssocItem::TypeAlias(a) => a.source(db).ast.visibility(),\n     };\n-    let item = NameKind::AssocItem(item);\n-    NameDefinition { item, container, visibility }\n+    let kind = NameKind::AssocItem(item);\n+    NameDefinition { kind, container, visibility }\n }\n \n pub(super) fn from_struct_field(db: &RootDatabase, field: StructField) -> NameDefinition {\n-    let item = NameKind::Field(field);\n+    let kind = NameKind::Field(field);\n     let parent = field.parent_def(db);\n     let container = parent.module(db);\n     let visibility = match parent {\n         VariantDef::Struct(s) => s.source(db).ast.visibility(),\n         VariantDef::EnumVariant(e) => e.source(db).ast.parent_enum().visibility(),\n     };\n-    NameDefinition { item, container, visibility }\n+    NameDefinition { kind, container, visibility }\n }\n \n pub(super) fn from_module_def(\n     db: &RootDatabase,\n     def: ModuleDef,\n     module: Option<Module>,\n ) -> NameDefinition {\n-    let item = NameKind::Def(def);\n+    let kind = NameKind::Def(def);\n     let (container, visibility) = match def {\n         ModuleDef::Module(it) => {\n             let container = it.parent(db).or_else(|| Some(it)).unwrap();\n@@ -104,5 +106,5 @@ pub(super) fn from_module_def(\n         ModuleDef::Adt(Adt::Enum(it)) => (it.module(db), it.source(db).ast.visibility()),\n         ModuleDef::BuiltinType(..) => (module.unwrap(), None),\n     };\n-    NameDefinition { item, container, visibility }\n+    NameDefinition { kind, container, visibility }\n }"}, {"sha": "c91dada464d0d28416ce3ae1661888382d11f99f", "filename": "crates/ra_ide_api/src/references/rename.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88ff88d3189de9dd9b0d88bdda3da769254c2b8e/crates%2Fra_ide_api%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ff88d3189de9dd9b0d88bdda3da769254c2b8e/crates%2Fra_ide_api%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Frename.rs?ref=88ff88d3189de9dd9b0d88bdda3da769254c2b8e", "patch": "@@ -1,3 +1,5 @@\n+//! FIXME: write short doc here\n+\n use hir::ModuleSource;\n use ra_db::SourceDatabase;\n use ra_syntax::{algo::find_node_at_offset, ast, AstNode, SyntaxNode};"}, {"sha": "aae9db13ba4fa73388c2650e5688c9a9172d5044", "filename": "crates/ra_ide_api/src/references/search_scope.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/88ff88d3189de9dd9b0d88bdda3da769254c2b8e/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ff88d3189de9dd9b0d88bdda3da769254c2b8e/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs?ref=88ff88d3189de9dd9b0d88bdda3da769254c2b8e", "patch": "@@ -1,3 +1,5 @@\n+//! FIXME: write short doc here\n+\n use hir::{DefWithBody, HasSource, ModuleSource};\n use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{AstNode, TextRange};\n@@ -7,21 +9,21 @@ use crate::db::RootDatabase;\n use super::{NameDefinition, NameKind};\n \n pub(crate) struct SearchScope {\n-    pub scope: Vec<(FileId, Option<TextRange>)>,\n+    pub files: Vec<(FileId, Option<TextRange>)>,\n }\n \n impl NameDefinition {\n-    pub fn scope(&self, db: &RootDatabase) -> SearchScope {\n+    pub(crate) fn scope(&self, db: &RootDatabase) -> SearchScope {\n         let module_src = self.container.definition_source(db);\n         let file_id = module_src.file_id.original_file(db);\n \n-        if let NameKind::Pat((def, _)) = self.item {\n+        if let NameKind::Pat((def, _)) = self.kind {\n             let range = match def {\n                 DefWithBody::Function(f) => f.source(db).ast.syntax().text_range(),\n                 DefWithBody::Const(c) => c.source(db).ast.syntax().text_range(),\n                 DefWithBody::Static(s) => s.source(db).ast.syntax().text_range(),\n             };\n-            return SearchScope { scope: vec![(file_id, Some(range))] };\n+            return SearchScope { files: vec![(file_id, Some(range))] };\n         }\n \n         if let Some(ref vis) = self.visibility {\n@@ -30,7 +32,7 @@ impl NameDefinition {\n             let mut files = source_root.walk().map(|id| (id.into(), None)).collect::<Vec<_>>();\n \n             if vis.syntax().to_string().as_str() == \"pub(crate)\" {\n-                return SearchScope { scope: files };\n+                return SearchScope { files };\n             }\n             if vis.syntax().to_string().as_str() == \"pub\" {\n                 let krate = self.container.krate(db).unwrap();\n@@ -47,7 +49,7 @@ impl NameDefinition {\n                     }\n                 }\n \n-                return SearchScope { scope: files };\n+                return SearchScope { files };\n             }\n             // FIXME: \"pub(super)\", \"pub(in path)\"\n         }\n@@ -56,6 +58,6 @@ impl NameDefinition {\n             ModuleSource::Module(m) => Some(m.syntax().text_range()),\n             ModuleSource::SourceFile(_) => None,\n         };\n-        SearchScope { scope: vec![(file_id, range)] }\n+        SearchScope { files: vec![(file_id, range)] }\n     }\n }"}, {"sha": "33f3cacebeef135929482d0f1715f66202c424b1", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88ff88d3189de9dd9b0d88bdda3da769254c2b8e/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ff88d3189de9dd9b0d88bdda3da769254c2b8e/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=88ff88d3189de9dd9b0d88bdda3da769254c2b8e", "patch": "@@ -101,7 +101,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                     continue;\n                 }\n                 if let Some(name_ref) = node.as_node().cloned().and_then(ast::NameRef::cast) {\n-                    let name_kind = classify_name_ref(db, file_id, &name_ref).map(|d| d.item);\n+                    let name_kind = classify_name_ref(db, file_id, &name_ref).map(|d| d.kind);\n                     match name_kind {\n                         Some(Macro(_)) => \"macro\",\n                         Some(Field(_)) => \"field\","}]}