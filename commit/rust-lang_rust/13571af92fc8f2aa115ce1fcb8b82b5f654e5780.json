{"sha": "13571af92fc8f2aa115ce1fcb8b82b5f654e5780", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNTcxYWY5MmZjOGYyYWExMTVjZTFmY2I4YjgyYjVmNjU0ZTU3ODA=", "commit": {"author": {"name": "Jesse Ray", "email": "jesse@localhost.localdomain", "date": "2013-09-23T21:10:48Z"}, "committer": {"name": "Jesse Ray", "email": "jesse@localhost.localdomain", "date": "2013-09-23T21:10:48Z"}, "message": "Added is_control function, method, and tests.", "tree": {"sha": "7d2270f62d693836512f4aeae4dbf712d8ac0eab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d2270f62d693836512f4aeae4dbf712d8ac0eab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13571af92fc8f2aa115ce1fcb8b82b5f654e5780", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13571af92fc8f2aa115ce1fcb8b82b5f654e5780", "html_url": "https://github.com/rust-lang/rust/commit/13571af92fc8f2aa115ce1fcb8b82b5f654e5780", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13571af92fc8f2aa115ce1fcb8b82b5f654e5780/comments", "author": null, "committer": null, "parents": [{"sha": "eb55348a7cb1d99563c9135b8c83bcc20f6346bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb55348a7cb1d99563c9135b8c83bcc20f6346bf", "html_url": "https://github.com/rust-lang/rust/commit/eb55348a7cb1d99563c9135b8c83bcc20f6346bf"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "abb1ac5ace85b69730adbb9a15f155222c201ea3", "filename": "src/libstd/char.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/13571af92fc8f2aa115ce1fcb8b82b5f654e5780/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13571af92fc8f2aa115ce1fcb8b82b5f654e5780/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=13571af92fc8f2aa115ce1fcb8b82b5f654e5780", "patch": "@@ -128,6 +128,14 @@ pub fn is_alphanumeric(c: char) -> bool {\n         || general_category::No(c)\n }\n \n+///\n+/// Indicates whether a character is a control character. Control\n+/// characters are defined in terms of the Unicode General Category\n+/// 'Cc'.\n+///\n+#[inline]\n+pub fn is_control(c: char) -> bool { general_category::Cc(c) }\n+\n /// Indicates whether the character is numeric (Nd, Nl, or No)\n #[inline]\n pub fn is_digit(c: char) -> bool {\n@@ -354,6 +362,7 @@ pub trait Char {\n     fn is_uppercase(&self) -> bool;\n     fn is_whitespace(&self) -> bool;\n     fn is_alphanumeric(&self) -> bool;\n+    fn is_control(&self) -> bool;\n     fn is_digit(&self) -> bool;\n     fn is_digit_radix(&self, radix: uint) -> bool;\n     fn to_digit(&self, radix: uint) -> Option<uint>;\n@@ -384,6 +393,8 @@ impl Char for char {\n \n     fn is_alphanumeric(&self) -> bool { is_alphanumeric(*self) }\n \n+    fn is_control(&self) -> bool { is_control(*self) }\n+\n     fn is_digit(&self) -> bool { is_digit(*self) }\n \n     fn is_digit_radix(&self, radix: uint) -> bool { is_digit_radix(*self, radix) }\n@@ -494,6 +505,19 @@ fn test_to_digit() {\n     assert_eq!('$'.to_digit(36u), None);\n }\n \n+#[test]\n+fn test_is_control() {\n+    assert!('\\u0000'.is_control());\n+    assert!('\\u0003'.is_control());\n+    assert!('\\u0006'.is_control());\n+    assert!('\\u0009'.is_control());\n+    assert!('\\u007f'.is_control());\n+    assert!('\\u0092'.is_control());\n+    assert!(!'\\u0020'.is_control());\n+    assert!(!'\\u0055'.is_control());\n+    assert!(!'\\u0068'.is_control());\n+}\n+\n #[test]\n fn test_is_digit() {\n    assert!('2'.is_digit());"}]}