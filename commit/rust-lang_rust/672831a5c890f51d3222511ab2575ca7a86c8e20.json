{"sha": "672831a5c890f51d3222511ab2575ca7a86c8e20", "node_id": "C_kwDOAAsO6NoAKDY3MjgzMWE1Yzg5MGY1MWQzMjIyNTExYWIyNTc1Y2E3YTg2YzhlMjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-17T10:56:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-17T10:56:42Z"}, "message": "Auto merge of #101938 - Dylan-DPC:rollup-6vlohhs, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #93628 (Stabilize `let else`)\n - #98441 (Implement simd_as for pointers)\n - #101790 (Do not suggest a placeholder to const and static without a type)\n - #101807 (Disallow defaults on type GATs)\n - #101915 (doc: fix redirected link in `/index.html`)\n - #101931 (doc: Fix a typo in `Rc::make_mut` docstring)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "fa6f0d0797bb75d188725c2a027d8f0d6475f2c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa6f0d0797bb75d188725c2a027d8f0d6475f2c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/672831a5c890f51d3222511ab2575ca7a86c8e20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/672831a5c890f51d3222511ab2575ca7a86c8e20", "html_url": "https://github.com/rust-lang/rust/commit/672831a5c890f51d3222511ab2575ca7a86c8e20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/672831a5c890f51d3222511ab2575ca7a86c8e20/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b195f5349a5f7b01369e7bba2f9fff250e62d36d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b195f5349a5f7b01369e7bba2f9fff250e62d36d", "html_url": "https://github.com/rust-lang/rust/commit/b195f5349a5f7b01369e7bba2f9fff250e62d36d"}, {"sha": "80cceb8f7705b9809c726cd6d8dda93451d32cc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/80cceb8f7705b9809c726cd6d8dda93451d32cc6", "html_url": "https://github.com/rust-lang/rust/commit/80cceb8f7705b9809c726cd6d8dda93451d32cc6"}], "stats": {"total": 673, "additions": 437, "deletions": 236}, "files": [{"sha": "bd7a85b07a09e594b48fdbc63acf0a39dbb07a88", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -15,7 +15,7 @@\n #![feature(if_let_guard)]\n #![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(negative_impls)]\n #![feature(slice_internals)]"}, {"sha": "12a0cc0d25508654b3f8d7e1663087bb441d9c4d", "filename": "compiler/rustc_ast_lowering/src/block.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,8 +1,6 @@\n use crate::{ImplTraitContext, ImplTraitPosition, LoweringContext};\n use rustc_ast::{Block, BlockCheckMode, Local, LocalKind, Stmt, StmtKind};\n use rustc_hir as hir;\n-use rustc_session::parse::feature_err;\n-use rustc_span::sym;\n \n use smallvec::SmallVec;\n \n@@ -92,15 +90,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let hir_id = self.lower_node_id(l.id);\n         let pat = self.lower_pat(&l.pat);\n         let els = if let LocalKind::InitElse(_, els) = &l.kind {\n-            if !self.tcx.features().let_else {\n-                feature_err(\n-                    &self.tcx.sess.parse_sess,\n-                    sym::let_else,\n-                    l.span,\n-                    \"`let...else` statements are unstable\",\n-                )\n-                .emit();\n-            }\n             Some(self.lower_block(els, false))\n         } else {\n             None"}, {"sha": "d2ce6bdb08e5857744db7f29e5125a511fc7a317", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -32,7 +32,7 @@\n \n #![feature(box_patterns)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "8aa9d57f046a9f958addbc3e398ca7103f31a620", "filename": "compiler/rustc_ast_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -9,7 +9,7 @@\n #![feature(if_let_guard)]\n #![feature(iter_is_partitioned)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "52e65a9c7743d7e96db111337d375c13247e0d4a", "filename": "compiler/rustc_attr/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -5,7 +5,7 @@\n //! to this crate.\n \n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n "}, {"sha": "86da87d0603138bfc88b76efe7361e98c080cb18", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -3,7 +3,7 @@\n #![allow(rustc::potential_query_instability)]\n #![feature(box_patterns)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(rustc_attrs)]"}, {"sha": "8aeb3b82a9cd01059ab409aa6e7ba803055a4f2a", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -9,7 +9,7 @@\n #![feature(if_let_guard)]\n #![feature(is_sorted)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n #![recursion_limit = \"256\"]"}, {"sha": "a640de42a6a86a3df51a5e5c3f48f7ae56acad91", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1705,6 +1705,97 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n     bitwise_red!(simd_reduce_all: vector_reduce_and, true);\n     bitwise_red!(simd_reduce_any: vector_reduce_or, true);\n \n+    if name == sym::simd_cast_ptr {\n+        require_simd!(ret_ty, \"return\");\n+        let (out_len, out_elem) = ret_ty.simd_size_and_type(bx.tcx());\n+        require!(\n+            in_len == out_len,\n+            \"expected return type with length {} (same as input type `{}`), \\\n+                  found `{}` with length {}\",\n+            in_len,\n+            in_ty,\n+            ret_ty,\n+            out_len\n+        );\n+\n+        match in_elem.kind() {\n+            ty::RawPtr(p) => {\n+                let (metadata, check_sized) = p.ty.ptr_metadata_ty(bx.tcx, |ty| {\n+                    bx.tcx.normalize_erasing_regions(ty::ParamEnv::reveal_all(), ty)\n+                });\n+                assert!(!check_sized); // we are in codegen, so we shouldn't see these types\n+                require!(metadata.is_unit(), \"cannot cast fat pointer `{}`\", in_elem)\n+            }\n+            _ => return_error!(\"expected pointer, got `{}`\", in_elem),\n+        }\n+        match out_elem.kind() {\n+            ty::RawPtr(p) => {\n+                let (metadata, check_sized) = p.ty.ptr_metadata_ty(bx.tcx, |ty| {\n+                    bx.tcx.normalize_erasing_regions(ty::ParamEnv::reveal_all(), ty)\n+                });\n+                assert!(!check_sized); // we are in codegen, so we shouldn't see these types\n+                require!(metadata.is_unit(), \"cannot cast to fat pointer `{}`\", out_elem)\n+            }\n+            _ => return_error!(\"expected pointer, got `{}`\", out_elem),\n+        }\n+\n+        if in_elem == out_elem {\n+            return Ok(args[0].immediate());\n+        } else {\n+            return Ok(bx.pointercast(args[0].immediate(), llret_ty));\n+        }\n+    }\n+\n+    if name == sym::simd_expose_addr {\n+        require_simd!(ret_ty, \"return\");\n+        let (out_len, out_elem) = ret_ty.simd_size_and_type(bx.tcx());\n+        require!(\n+            in_len == out_len,\n+            \"expected return type with length {} (same as input type `{}`), \\\n+                  found `{}` with length {}\",\n+            in_len,\n+            in_ty,\n+            ret_ty,\n+            out_len\n+        );\n+\n+        match in_elem.kind() {\n+            ty::RawPtr(_) => {}\n+            _ => return_error!(\"expected pointer, got `{}`\", in_elem),\n+        }\n+        match out_elem.kind() {\n+            ty::Uint(ty::UintTy::Usize) => {}\n+            _ => return_error!(\"expected `usize`, got `{}`\", out_elem),\n+        }\n+\n+        return Ok(bx.ptrtoint(args[0].immediate(), llret_ty));\n+    }\n+\n+    if name == sym::simd_from_exposed_addr {\n+        require_simd!(ret_ty, \"return\");\n+        let (out_len, out_elem) = ret_ty.simd_size_and_type(bx.tcx());\n+        require!(\n+            in_len == out_len,\n+            \"expected return type with length {} (same as input type `{}`), \\\n+                  found `{}` with length {}\",\n+            in_len,\n+            in_ty,\n+            ret_ty,\n+            out_len\n+        );\n+\n+        match in_elem.kind() {\n+            ty::Uint(ty::UintTy::Usize) => {}\n+            _ => return_error!(\"expected `usize`, got `{}`\", in_elem),\n+        }\n+        match out_elem.kind() {\n+            ty::RawPtr(_) => {}\n+            _ => return_error!(\"expected pointer, got `{}`\", out_elem),\n+        }\n+\n+        return Ok(bx.inttoptr(args[0].immediate(), llret_ty));\n+    }\n+\n     if name == sym::simd_cast || name == sym::simd_as {\n         require_simd!(ret_ty, \"return\");\n         let (out_len, out_elem) = ret_ty.simd_size_and_type(bx.tcx());"}, {"sha": "42c65e04e3b6b07998b5d8b75a4d5dca4aa3f869", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -7,7 +7,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(hash_raw_entry)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(extern_types)]\n #![feature(once_cell)]\n #![feature(iter_intersperse)]"}, {"sha": "e736b2aba9c14d570e380e39068f72af5c480aca", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,7 +1,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(box_patterns)]\n #![feature(try_blocks)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(once_cell)]\n #![feature(associated_type_bounds)]\n #![feature(strict_provenance)]"}, {"sha": "9f47d302a0c3d0cda13f5b5a82293455688606e3", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -10,7 +10,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(decl_macro)]\n #![feature(exact_size_is_empty)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n #![feature(slice_ptr_get)]"}, {"sha": "56f7823efe0c24cd73adace1239e25f5d153d3d2", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -13,7 +13,7 @@\n #![feature(cell_leak)]\n #![feature(control_flow_enum)]\n #![feature(extend_one)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(hash_raw_entry)]\n #![feature(hasher_prefixfree_extras)]\n #![feature(maybe_uninit_uninit_array)]"}, {"sha": "8fb9508194b6846dfb610493254600bb65a79ce3", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -5,7 +5,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "6f969bfcc53f07f2445a93234a215bcdd9daaf5b", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -7,7 +7,7 @@\n #![feature(if_let_guard)]\n #![feature(adt_const_params)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(never_type)]\n #![feature(result_option_inspect)]\n #![feature(rustc_attrs)]\n@@ -635,6 +635,10 @@ impl Handler {\n         inner.steal((span, key)).map(|diag| DiagnosticBuilder::new_diagnostic(self, diag))\n     }\n \n+    pub fn has_stashed_diagnostic(&self, span: Span, key: StashKey) -> bool {\n+        self.inner.borrow().stashed_diagnostics.get(&(span, key)).is_some()\n+    }\n+\n     /// Emit all stashed diagnostics.\n     pub fn emit_stashed_diagnostics(&self) -> Option<ErrorGuaranteed> {\n         self.inner.borrow_mut().emit_stashed_diagnostics()"}, {"sha": "ffc9abe64d2ea8c127ed3202351d209ba074b1d6", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -3,7 +3,7 @@\n #![feature(associated_type_defaults)]\n #![feature(if_let_guard)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(macro_metavar_expr)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]"}, {"sha": "5f7de94e726573ebf9062afc11ffc1b035dc2042", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -190,6 +190,8 @@ declare_features! (\n     (accepted, item_like_imports, \"1.15.0\", Some(35120), None),\n     /// Allows `'a: { break 'a; }`.\n     (accepted, label_break_value, \"CURRENT_RUSTC_VERSION\", Some(48594), None),\n+    /// Allows `let...else` statements.\n+    (accepted, let_else, \"CURRENT_RUSTC_VERSION\", Some(87335), None),\n     /// Allows `break {expr}` with a value inside `loop`s.\n     (accepted, loop_break_value, \"1.19.0\", Some(37339), None),\n     /// Allows use of `?` as the Kleene \"at most one\" operator in macros."}, {"sha": "ad28595ca82b3a390d87169fe577279488a5f129", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -430,8 +430,6 @@ declare_features! (\n     (active, large_assignments, \"1.52.0\", Some(83518), None),\n     /// Allows `if/while p && let q = r && ...` chains.\n     (active, let_chains, \"1.37.0\", Some(53667), None),\n-    /// Allows `let...else` statements.\n-    (active, let_else, \"1.56.0\", Some(87335), None),\n     /// Allows `#[link(..., cfg(..))]`.\n     (active, link_cfg, \"1.14.0\", Some(37406), None),\n     /// Allows using `reason` in lint attributes and the `#[expect(lint)]` lint check."}, {"sha": "946da9265ba092247af0167e341ab656f6008b83", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -5,7 +5,7 @@\n #![feature(associated_type_defaults)]\n #![feature(closure_track_caller)]\n #![feature(const_btree_new)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(once_cell)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "2c9e21f769fb12eb09714043c86827cb53d78c74", "filename": "compiler/rustc_incremental/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -2,7 +2,7 @@\n \n #![deny(missing_docs)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n "}, {"sha": "a00d7bd68014756ed90fde7a7823c7203897ff5a", "filename": "compiler/rustc_index/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -3,7 +3,7 @@\n #![feature(allow_internal_unstable)]\n #![feature(bench_black_box)]\n #![feature(extend_one)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(new_uninit)]\n #![feature(step_trait)]"}, {"sha": "ef60d2c9188459d7b9cafa077f42b62e28dd83a0", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -19,7 +19,7 @@\n #![feature(extend_one)]\n #![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(try_blocks)]"}, {"sha": "41cd7b0e9b1d60daec567c5530998edc0b7c48a9", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,5 +1,5 @@\n #![feature(box_patterns)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(internal_output_capture)]\n #![feature(thread_spawn_unchecked)]\n #![feature(once_cell)]"}, {"sha": "c760e435699c65565e51fd74e6cbc430815a49eb", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -34,7 +34,7 @@\n #![feature(iter_intersperse)]\n #![feature(iter_order_by)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]"}, {"sha": "2c027d754da4d5c9e6144f8fff67f5c07fcdad8e", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,5 +1,5 @@\n #![feature(allow_internal_unstable)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(never_type)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_span)]"}, {"sha": "6f5604b7e11f04be49d5dcf4d3ac579753e7bf67", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -5,7 +5,7 @@\n #![cfg_attr(bootstrap, feature(generic_associated_types))]\n #![feature(iter_from_generator)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(once_cell)]\n #![feature(proc_macro_internals)]\n #![feature(macro_metavar_expr)]"}, {"sha": "01b9277b9836204eb983af36dbe756fe68c3138b", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -40,7 +40,7 @@\n #![feature(new_uninit)]\n #![feature(once_cell)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(trusted_len)]\n #![feature(type_alias_impl_trait)]"}, {"sha": "0c0a2fe9c9ed628584718a188f98bacaf232a9df", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -6,7 +6,7 @@\n #![feature(control_flow_enum)]\n #![feature(if_let_guard)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]"}, {"sha": "d45b886903bbf757464894a79d4fb58504bc14fa", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -491,8 +491,8 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n                     err.span_suggestion_verbose(\n                         semi_span.shrink_to_lo(),\n                         &format!(\n-                            \"alternatively, on nightly, you might want to use \\\n-                             `#![feature(let_else)]` to handle the variant{} that {} matched\",\n+                            \"alternatively, you might want to use \\\n+                             let else to handle the variant{} that {} matched\",\n                             pluralize!(witnesses.len()),\n                             match witnesses.len() {\n                                 1 => \"isn't\","}, {"sha": "b45c32ee986b6b021354cec283f0ad08e2991028", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,7 +1,7 @@\n #![feature(associated_type_defaults)]\n #![feature(box_patterns)]\n #![feature(exact_size_is_empty)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(once_cell)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "e6fc85595714bacd99a643ef2a6e282dd05052b0", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,7 +1,7 @@\n #![allow(rustc::potential_query_instability)]\n #![feature(box_patterns)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "ba6ce9fd40f638079362059679309e1dc092b9e5", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,6 +1,6 @@\n #![feature(array_windows)]\n #![feature(control_flow_enum)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]"}, {"sha": "a37327f42942a0ab6402543d0e82e785910db0f5", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -4,7 +4,7 @@\n #![feature(box_patterns)]\n #![feature(if_let_guard)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(never_type)]\n #![feature(rustc_attrs)]\n #![recursion_limit = \"256\"]"}, {"sha": "39ebb8db21cbcf904a7259cf53e6656503a22cf2", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -8,7 +8,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(iter_intersperse)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n #![feature(try_blocks)]"}, {"sha": "48ab31ab92d7c834ce9ae5adb6026b4fc1385691", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,7 +1,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(associated_type_defaults)]\n #![feature(control_flow_enum)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(rustc_private)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]"}, {"sha": "f92c3831f2689d1e7d30c69660c3bd4837845525", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,7 +1,7 @@\n #![feature(assert_matches)]\n #![feature(core_intrinsics)]\n #![feature(hash_raw_entry)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(extern_types)]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "54a7f416ce64cf7d06f407c84c3985823e82dcb4", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -12,7 +12,7 @@\n #![feature(if_let_guard)]\n #![feature(iter_intersperse)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n #![allow(rustdoc::private_intra_doc_links)]"}, {"sha": "ce03c2a8ad05ffd53a60f73b3f6ff07d2d99fe8e", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,6 +1,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(if_let_guard)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n #![feature(never_type)]"}, {"sha": "fa9c7bd54c3956bbebec5c603db8d9dbbd0281a4", "filename": "compiler/rustc_serialize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -14,7 +14,7 @@ Core encoding and decoding interfaces.\n #![feature(min_specialization)]\n #![feature(core_intrinsics)]\n #![feature(maybe_uninit_slice)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(new_uninit)]\n #![feature(allocator_api)]\n #![cfg_attr(test, feature(test))]"}, {"sha": "f6bab775e76b34258447d09b07a1449ecbaca6cf", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,6 +1,6 @@\n #![feature(if_let_guard)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(once_cell)]"}, {"sha": "ada3bae61502f3eab2db96ea9f9762b7ac080b7d", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -15,7 +15,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(array_windows)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(if_let_guard)]\n #![feature(negative_impls)]\n #![feature(min_specialization)]"}, {"sha": "ae4d1a4635bee090aaaaf05656b5ca678def6447", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1322,9 +1322,11 @@ symbols! {\n         simd_as,\n         simd_bitmask,\n         simd_cast,\n+        simd_cast_ptr,\n         simd_ceil,\n         simd_div,\n         simd_eq,\n+        simd_expose_addr,\n         simd_extract,\n         simd_fabs,\n         simd_fcos,\n@@ -1340,6 +1342,7 @@ symbols! {\n         simd_fmin,\n         simd_fpow,\n         simd_fpowi,\n+        simd_from_exposed_addr,\n         simd_fsin,\n         simd_fsqrt,\n         simd_gather,"}, {"sha": "a7deab9d2efc813833ccada8793a8af719b6606c", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -11,7 +11,7 @@\n #![feature(assert_matches)]\n #![feature(associated_type_bounds)]\n #![feature(exhaustive_patterns)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(rustc_attrs)]"}, {"sha": "d35f74974fdd9b248b3efd4575b3c96fc0b6187e", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -18,7 +18,7 @@\n #![feature(hash_drain_filter)]\n #![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(if_let_guard)]\n #![feature(never_type)]\n #![feature(type_alias_impl_trait)]"}, {"sha": "2d39e973ed9bb72e28363a72aeeeb26c9c571952", "filename": "compiler/rustc_traits/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -3,7 +3,7 @@\n \n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "8524e57cb58a36e144937f0103d42010f0b99c34", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -6,7 +6,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(control_flow_enum)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(never_type)]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]"}, {"sha": "c7425ff7865f7350411d7f8bd78d7abeecf42ae8", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -477,7 +477,11 @@ pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>)\n         sym::simd_scatter => (3, vec![param(0), param(1), param(2)], tcx.mk_unit()),\n         sym::simd_insert => (2, vec![param(0), tcx.types.u32, param(1)], param(0)),\n         sym::simd_extract => (2, vec![param(0), tcx.types.u32], param(1)),\n-        sym::simd_cast | sym::simd_as => (2, vec![param(0)], param(1)),\n+        sym::simd_cast\n+        | sym::simd_as\n+        | sym::simd_cast_ptr\n+        | sym::simd_expose_addr\n+        | sym::simd_from_exposed_addr => (2, vec![param(0)], param(1)),\n         sym::simd_bitmask => (2, vec![param(0)], param(1)),\n         sym::simd_select | sym::simd_select_bitmask => {\n             (2, vec![param(0), param(1), param(1)], param(1))"}, {"sha": "45a5eca708ab5eac832aa107495e199de4ea67e2", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 47, "deletions": 22, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -25,7 +25,7 @@ use rustc_ast::{MetaItemKind, NestedMetaItem};\n use rustc_attr::{list_contains_name, InlineAttr, InstructionSetAttr, OptimizeAttr};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n@@ -852,12 +852,14 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::TraitItemId) {\n             tcx.ensure().type_of(trait_item_id.def_id);\n         }\n \n-        hir::TraitItemKind::Const(..) => {\n+        hir::TraitItemKind::Const(hir_ty, _) => {\n             tcx.ensure().type_of(trait_item_id.def_id);\n             // Account for `const C: _;`.\n             let mut visitor = HirPlaceholderCollector::default();\n             visitor.visit_trait_item(trait_item);\n-            placeholder_type_error(tcx, None, visitor.0, false, None, \"constant\");\n+            if !tcx.sess.diagnostic().has_stashed_diagnostic(hir_ty.span, StashKey::ItemNoType) {\n+                placeholder_type_error(tcx, None, visitor.0, false, None, \"constant\");\n+            }\n         }\n \n         hir::TraitItemKind::Type(_, Some(_)) => {\n@@ -1604,6 +1606,13 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n         _ => None,\n     };\n \n+    enum Defaults {\n+        Allowed,\n+        // See #36887\n+        FutureCompatDisallowed,\n+        Deny,\n+    }\n+\n     let no_generics = hir::Generics::empty();\n     let ast_generics = node.generics().unwrap_or(&no_generics);\n     let (opt_self, allow_defaults) = match node {\n@@ -1625,17 +1634,26 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                         },\n                     });\n \n-                    (opt_self, true)\n+                    (opt_self, Defaults::Allowed)\n                 }\n                 ItemKind::TyAlias(..)\n                 | ItemKind::Enum(..)\n                 | ItemKind::Struct(..)\n                 | ItemKind::OpaqueTy(..)\n-                | ItemKind::Union(..) => (None, true),\n-                _ => (None, false),\n+                | ItemKind::Union(..) => (None, Defaults::Allowed),\n+                _ => (None, Defaults::FutureCompatDisallowed),\n             }\n         }\n-        _ => (None, false),\n+\n+        // GATs\n+        Node::TraitItem(item) if matches!(item.kind, TraitItemKind::Type(..)) => {\n+            (None, Defaults::Deny)\n+        }\n+        Node::ImplItem(item) if matches!(item.kind, ImplItemKind::TyAlias(..)) => {\n+            (None, Defaults::Deny)\n+        }\n+\n+        _ => (None, Defaults::FutureCompatDisallowed),\n     };\n \n     let has_self = opt_self.is_some();\n@@ -1668,23 +1686,30 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n     let type_start = own_start - has_self as u32 + params.len() as u32;\n     let mut i = 0;\n \n+    const TYPE_DEFAULT_NOT_ALLOWED: &'static str = \"defaults for type parameters are only allowed in \\\n+    `struct`, `enum`, `type`, or `trait` definitions\";\n+\n     params.extend(ast_generics.params.iter().filter_map(|param| match param.kind {\n         GenericParamKind::Lifetime { .. } => None,\n         GenericParamKind::Type { ref default, synthetic, .. } => {\n-            if !allow_defaults && default.is_some() {\n-                if !tcx.features().default_type_parameter_fallback {\n-                    tcx.struct_span_lint_hir(\n-                        lint::builtin::INVALID_TYPE_PARAM_DEFAULT,\n-                        param.hir_id,\n-                        param.span,\n-                        |lint| {\n-                            lint.build(\n-                                \"defaults for type parameters are only allowed in \\\n-                                 `struct`, `enum`, `type`, or `trait` definitions\",\n-                            )\n-                            .emit();\n-                        },\n-                    );\n+            if default.is_some() {\n+                match allow_defaults {\n+                    Defaults::Allowed => {}\n+                    Defaults::FutureCompatDisallowed\n+                        if tcx.features().default_type_parameter_fallback => {}\n+                    Defaults::FutureCompatDisallowed => {\n+                        tcx.struct_span_lint_hir(\n+                            lint::builtin::INVALID_TYPE_PARAM_DEFAULT,\n+                            param.hir_id,\n+                            param.span,\n+                            |lint| {\n+                                lint.build(TYPE_DEFAULT_NOT_ALLOWED).emit();\n+                            },\n+                        );\n+                    }\n+                    Defaults::Deny => {\n+                        tcx.sess.span_err(param.span, TYPE_DEFAULT_NOT_ALLOWED);\n+                    }\n                 }\n             }\n \n@@ -1701,7 +1726,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             Some(param_def)\n         }\n         GenericParamKind::Const { default, .. } => {\n-            if !allow_defaults && default.is_some() {\n+            if !matches!(allow_defaults, Defaults::Allowed) && default.is_some() {\n                 tcx.sess.span_err(\n                     param.span,\n                     \"defaults for const parameters are only allowed in \\"}, {"sha": "b1ce972e1d682ef9fe3ff1161aeef8b6fcf0d72e", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -66,7 +66,7 @@ This API is completely unstable and subject to change.\n #![feature(iter_intersperse)]\n #![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(once_cell)]"}, {"sha": "8619467c2d928e5eb2d2d1c928a07a5c517b13ba", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -169,7 +169,7 @@\n #![cfg_attr(not(test), feature(generator_trait))]\n #![feature(hashmap_internals)]\n #![feature(lang_items)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(min_specialization)]\n #![feature(negative_impls)]\n #![feature(never_type)]"}, {"sha": "6d247681c66612d0e6a96dd4b0f09ec66ce9153f", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1142,7 +1142,7 @@ impl<T: Clone> Rc<T> {\n     /// be cloned.\n     ///\n     /// See also [`get_mut`], which will fail rather than cloning the inner value\n-    /// or diassociating [`Weak`] pointers.\n+    /// or disassociating [`Weak`] pointers.\n     ///\n     /// [`clone`]: Clone::clone\n     /// [`get_mut`]: Rc::get_mut"}, {"sha": "bc4f1b27c2aaabe1b7e23237604a75cc6e85f6be", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -255,7 +255,7 @@\n #![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(lang_items)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(linkage)]\n #![feature(link_cfg)]\n #![feature(min_specialization)]"}, {"sha": "744c7f709a6dbe3be9e7be7c00328e33f0574d39", "filename": "src/doc/index.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -101,7 +101,7 @@ accomplishing various tasks.\n \n Many of Rust's errors come with error codes, and you can request extended\n diagnostics from the compiler on those errors. You can also [read them\n-here](error-index.html), if you prefer to read them that way.\n+here](error_codes/index.html), if you prefer to read them that way.\n \n # Master Rust\n "}, {"sha": "14d695582b0f8556c055b25639ebad1064c8a2a6", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -9,7 +9,7 @@\n #![feature(control_flow_enum)]\n #![feature(drain_filter)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(test)]\n #![feature(never_type)]\n #![feature(once_cell)]"}, {"sha": "3fb2142b9e5d8aca7862bf960a1cc785da689d70", "filename": "src/test/ui/async-await/async-await-let-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -2,7 +2,7 @@\n // revisions: drop-tracking no-drop-tracking\n // [drop-tracking] compile-flags: -Zdrop-tracking=yes\n // [no-drop-tracking] compile-flags: -Zdrop-tracking=no\n-#![feature(let_else)]\n+\n use std::rc::Rc;\n \n async fn foo(x: Option<bool>) {"}, {"sha": "adf782743680585351833aca7b4d6dcf872307dc", "filename": "src/test/ui/empty/empty-never-array.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -18,7 +18,7 @@ help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     let u = if let Helper::U(u) = Helper::T(t, []) { u } else { todo!() };\n    |     ++++++++++                                     ++++++++++++++++++++++\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variant that isn't matched\n+help: alternatively, you might want to use let else to handle the variant that isn't matched\n    |\n LL |     let Helper::U(u) = Helper::T(t, []) else { todo!() };\n    |                                         ++++++++++++++++"}, {"sha": "de8e6bac486c1238b985e7b76b0c5ddcd1d59722", "filename": "src/test/ui/error-codes/E0005.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -19,7 +19,7 @@ help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     let y = if let Some(y) = x { y } else { todo!() };\n    |     ++++++++++                 ++++++++++++++++++++++\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variant that isn't matched\n+help: alternatively, you might want to use let else to handle the variant that isn't matched\n    |\n LL |     let Some(y) = x else { todo!() };\n    |                     ++++++++++++++++"}, {"sha": "5ced344f13f38b510154bea9a586113f923a3fe8", "filename": "src/test/ui/feature-gates/feature-gate-exhaustive-patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -19,7 +19,7 @@ help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     let _x = if let Ok(_x) = foo() { _x } else { todo!() };\n    |     +++++++++++                    +++++++++++++++++++++++\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variant that isn't matched\n+help: alternatively, you might want to use let else to handle the variant that isn't matched\n    |\n LL |     let Ok(_x) = foo() else { todo!() };\n    |                        ++++++++++++++++"}, {"sha": "3f04a9dabfd1f743046b2a87c69b558919743863", "filename": "src/test/ui/feature-gates/feature-gate-let_else.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b195f5349a5f7b01369e7bba2f9fff250e62d36d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b195f5349a5f7b01369e7bba2f9fff250e62d36d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-let_else.rs?ref=b195f5349a5f7b01369e7bba2f9fff250e62d36d", "patch": "@@ -1,5 +0,0 @@\n-fn main() {\n-    let Some(x) = Some(1) else { //~ ERROR `let...else` statements are unstable\n-        return;\n-    };\n-}"}, {"sha": "8625260415467f23b3fdc983391bb6c791764a33", "filename": "src/test/ui/feature-gates/feature-gate-let_else.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b195f5349a5f7b01369e7bba2f9fff250e62d36d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b195f5349a5f7b01369e7bba2f9fff250e62d36d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-let_else.stderr?ref=b195f5349a5f7b01369e7bba2f9fff250e62d36d", "patch": "@@ -1,14 +0,0 @@\n-error[E0658]: `let...else` statements are unstable\n-  --> $DIR/feature-gate-let_else.rs:2:5\n-   |\n-LL | /     let Some(x) = Some(1) else {\n-LL | |         return;\n-LL | |     };\n-   | |______^\n-   |\n-   = note: see issue #87335 <https://github.com/rust-lang/rust/issues/87335> for more information\n-   = help: add `#![feature(let_else)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "f034076b01093aed18f4a3eaf60466bf05cbfa0d", "filename": "src/test/ui/generic-associated-types/type-param-defaults.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftype-param-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftype-param-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftype-param-defaults.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -0,0 +1,34 @@\n+// Check that we disallow GAT param defaults, even with `invalid_type_param_default` allowed\n+\n+#![allow(invalid_type_param_default)]\n+\n+trait Trait {\n+    type Assoc<T = u32>;\n+    //~^ defaults for type parameters are only allowed\n+}\n+\n+impl Trait for () {\n+    type Assoc<T = u32> = u64;\n+    //~^ defaults for type parameters are only allowed\n+}\n+\n+impl Trait for u32 {\n+    type Assoc<T = u32> = T;\n+    //~^ defaults for type parameters are only allowed\n+}\n+\n+trait Other {}\n+impl Other for u32 {}\n+\n+fn foo<T>()\n+where\n+    T: Trait<Assoc = u32>,\n+    T::Assoc: Other {\n+    }\n+\n+fn main() {\n+    // errors\n+    foo::<()>();\n+    // works\n+    foo::<u32>();\n+}"}, {"sha": "85ccaba0e69e721a40b70821dc7776ce0849c7a4", "filename": "src/test/ui/generic-associated-types/type-param-defaults.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftype-param-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftype-param-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftype-param-defaults.stderr?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -0,0 +1,20 @@\n+error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+  --> $DIR/type-param-defaults.rs:6:16\n+   |\n+LL |     type Assoc<T = u32>;\n+   |                ^^^^^^^\n+\n+error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+  --> $DIR/type-param-defaults.rs:11:16\n+   |\n+LL |     type Assoc<T = u32> = u64;\n+   |                ^^^^^^^\n+\n+error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+  --> $DIR/type-param-defaults.rs:16:16\n+   |\n+LL |     type Assoc<T = u32> = T;\n+   |                ^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "f5f9b2f5f0634b59f3ef41cc605b3b392d5fe752", "filename": "src/test/ui/let-else/issue-100103.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Fissue-100103.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Fissue-100103.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Fissue-100103.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -2,7 +2,7 @@\n // check-pass\n \n #![feature(try_blocks)]\n-#![feature(let_else)]\n+\n \n fn main() {\n     let _: Result<i32, i32> = try {"}, {"sha": "f76dfc15bc15d7ebf6a05b690e43acb632501062", "filename": "src/test/ui/let-else/issue-94176.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Fissue-94176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Fissue-94176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Fissue-94176.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,6 +1,6 @@\n // Issue #94176: wrong span for the error message of a mismatched type error,\n // if the function uses a `let else` construct.\n-#![feature(let_else)]\n+\n \n pub fn test(a: Option<u32>) -> Option<u32> { //~ ERROR mismatched types\n     let Some(_) = a else { return None; };"}, {"sha": "5b164f347e7dd8d6ba2dd5752b23b95fa2b9211a", "filename": "src/test/ui/let-else/issue-99975.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Fissue-99975.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Fissue-99975.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Fissue-99975.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // compile-flags: -C opt-level=3 -Zvalidate-mir\n \n-#![feature(let_else)]\n+\n \n fn return_result() -> Option<String> {\n     Some(\"ok\".to_string())"}, {"sha": "33acb6c6a29c5284999002648726be5c8d2a4da9", "filename": "src/test/ui/let-else/let-else-allow-in-expr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,5 +1,3 @@\n-#![feature(let_else)]\n-\n #![deny(unused_variables)]\n \n fn main() {"}, {"sha": "3b2b9066c90d6f428bd2eae543ad15d8fca99ed5", "filename": "src/test/ui/let-else/let-else-allow-in-expr.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.stderr?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,17 +1,17 @@\n error: unused variable: `x`\n-  --> $DIR/let-else-allow-in-expr.rs:7:13\n+  --> $DIR/let-else-allow-in-expr.rs:5:13\n    |\n LL |         let x = 1;\n    |             ^ help: if this is intentional, prefix it with an underscore: `_x`\n    |\n note: the lint level is defined here\n-  --> $DIR/let-else-allow-in-expr.rs:3:9\n+  --> $DIR/let-else-allow-in-expr.rs:1:9\n    |\n LL | #![deny(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unused variable: `x`\n-  --> $DIR/let-else-allow-in-expr.rs:29:9\n+  --> $DIR/let-else-allow-in-expr.rs:27:9\n    |\n LL |     let x = 1;\n    |         ^ help: if this is intentional, prefix it with an underscore: `_x`"}, {"sha": "bbb1c7beaf8d367279d5fad326fd0cffcd33e98b", "filename": "src/test/ui/let-else/let-else-allow-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-unused.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,6 +1,6 @@\n // issue #89807\n \n-#![feature(let_else)]\n+\n \n #[deny(unused_variables)]\n "}, {"sha": "955f33ee134d2735b1f90ba428246c65b5d995e6", "filename": "src/test/ui/let-else/let-else-binding-explicit-mut-annotated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-annotated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-annotated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-annotated.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,6 +1,6 @@\n // from rfc2005 test suite\n \n-#![feature(let_else)]\n+\n \n // Verify the binding mode shifts - only when no `&` are auto-dereferenced is the\n // final default binding mode mutable."}, {"sha": "1524d010233310c5308a22259975430a3154a07b", "filename": "src/test/ui/let-else/let-else-binding-explicit-mut-borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-borrow.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,8 +1,8 @@\n-#![feature(let_else)]\n-\n // Slightly different from explicit-mut-annotated -- this won't show an error until borrowck.\n // Should it show a type error instead?\n \n+\n+\n fn main() {\n     let Some(n): &mut Option<i32> = &mut &Some(5i32) else {\n         //~^ ERROR cannot borrow data in a `&` reference as mutable"}, {"sha": "b0a6264a10d45ac02a92da2794b498e9a467ae54", "filename": "src/test/ui/let-else/let-else-binding-explicit-mut-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-pass.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(let_else)]\n+\n \n fn main() {\n     let Some(n) = &mut &mut Some(5i32) else { return; };"}, {"sha": "a153b3af0de1c7659604f0375c177bbc0d4b2b3f", "filename": "src/test/ui/let-else/let-else-binding-explicit-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,6 +1,6 @@\n // from rfc2005 test suite\n \n-#![feature(let_else)]\n+\n \n // Verify the binding mode shifts - only when no `&` are auto-dereferenced is the\n // final default binding mode mutable."}, {"sha": "ff2d9f240a094f70bef7933ace621b76e7092aec", "filename": "src/test/ui/let-else/let-else-binding-immutable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-immutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-immutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-immutable.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,6 +1,6 @@\n // from rfc2005 test suite\n \n-#![feature(let_else)]\n+\n \n pub fn main() {\n     let Some(x) = &Some(3) else {"}, {"sha": "7d2cad978fc02ef96e654f2d1a7bb9dfb0e2145b", "filename": "src/test/ui/let-else/let-else-bindings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-bindings.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n // adapted from src/test/ui/binding/if-let.rs\n-#![feature(let_else)]\n+\n #![allow(dead_code)]\n \n fn none() -> bool {"}, {"sha": "20e558ca909cf0a14be3a01ee3407e017423e3d3", "filename": "src/test/ui/let-else/let-else-bool-binop-init.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.fixed?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![feature(let_else)]\n+\n \n fn main() {\n     let true = (true && false) else { return }; //~ ERROR a `&&` expression cannot be directly assigned in `let...else`"}, {"sha": "f88179a940b5dee46a97cf99a66512411cc73d30", "filename": "src/test/ui/let-else/let-else-bool-binop-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![feature(let_else)]\n+\n \n fn main() {\n     let true = true && false else { return }; //~ ERROR a `&&` expression cannot be directly assigned in `let...else`"}, {"sha": "a75c770ddf2993ad295d6e8df69b5eb197b7ad41", "filename": "src/test/ui/let-else/let-else-brace-before-else.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.fixed?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![feature(let_else)]\n+\n \n fn main() {\n     let Some(1) = ({ Some(1) }) else {"}, {"sha": "5603b946f3883a14284ed86320db3b213d12094b", "filename": "src/test/ui/let-else/let-else-brace-before-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![feature(let_else)]\n+\n \n fn main() {\n     let Some(1) = { Some(1) } else {"}, {"sha": "713fd986e9792bbaa660a461e0aae404166dbee3", "filename": "src/test/ui/let-else/let-else-check.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,5 +1,3 @@\n-#![feature(let_else)]\n-\n #![deny(unused_variables)]\n \n fn main() {"}, {"sha": "bdecbf708f9d229666036e5e8153e9e4d1265799", "filename": "src/test/ui/let-else/let-else-check.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.stderr?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,17 +1,17 @@\n error: unused variable: `x`\n-  --> $DIR/let-else-check.rs:14:13\n+  --> $DIR/let-else-check.rs:12:13\n    |\n LL |         let x = 1;\n    |             ^ help: if this is intentional, prefix it with an underscore: `_x`\n    |\n note: the lint level is defined here\n-  --> $DIR/let-else-check.rs:3:9\n+  --> $DIR/let-else-check.rs:1:9\n    |\n LL | #![deny(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unused variable: `x`\n-  --> $DIR/let-else-check.rs:18:9\n+  --> $DIR/let-else-check.rs:16:9\n    |\n LL |     let x = 1;\n    |         ^ help: if this is intentional, prefix it with an underscore: `_x`"}, {"sha": "60fdf825a336a94fc665310915ad0e69bf9700bd", "filename": "src/test/ui/let-else/let-else-deref-coercion-annotated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion-annotated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion-annotated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion-annotated.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -6,7 +6,7 @@\n // Deref/DerefMut to Bar. You can do this with an irrefutable binding, so it should work with\n // let-else too.\n \n-#![feature(let_else)]\n+\n use std::ops::{Deref, DerefMut};\n \n struct Foo(Bar);"}, {"sha": "052a5a8c73cc4ab05285ca5771735235bffa6ac5", "filename": "src/test/ui/let-else/let-else-deref-coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -3,7 +3,7 @@\n // We attempt to `let Bar::Present(_) = foo else { ... }` where foo is meant to Deref/DerefMut to\n // Bar. This fails, you must add a type annotation like `let _: &mut Bar = _ else { ... }`\n \n-#![feature(let_else)]\n+\n use std::ops::{Deref, DerefMut};\n \n struct Foo(Bar);"}, {"sha": "d1f1a69bfc2549d6263b4d5aca49ed7c7c09b6b6", "filename": "src/test/ui/let-else/let-else-destructuring.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-destructuring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-destructuring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-destructuring.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,4 +1,3 @@\n-#![feature(let_else)]\n #[derive(Debug)]\n enum Foo {\n     Done,"}, {"sha": "7d6cb2386440d56b5926eed294a4a9ec3f0e6a33", "filename": "src/test/ui/let-else/let-else-destructuring.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-destructuring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-destructuring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-destructuring.stderr?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,11 +1,11 @@\n error: <assignment> ... else { ... } is not allowed\n-  --> $DIR/let-else-destructuring.rs:11:9\n+  --> $DIR/let-else-destructuring.rs:10:9\n    |\n LL |         &Foo::Nested(Some(value)) = value else { break };\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/let-else-destructuring.rs:11:35\n+  --> $DIR/let-else-destructuring.rs:10:35\n    |\n LL |         &Foo::Nested(Some(value)) = value else { break };\n    |         ------------------------- ^"}, {"sha": "e91e5de84e4bd1346ee2ef62f6479f28045e1a54", "filename": "src/test/ui/let-else/let-else-drop-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-drop-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-drop-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-drop-order.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -16,7 +16,7 @@\n // This is important as it's easy to update the stdout file\n // with a --bless and miss the impact of that change.\n \n-#![feature(let_else)]\n+\n #![allow(irrefutable_let_patterns)]\n \n use std::cell::RefCell;"}, {"sha": "e8c54ca7ab2932a6ca03b238fd5676c34664ea91", "filename": "src/test/ui/let-else/let-else-if.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,5 +1,3 @@\n-#![feature(let_else)]\n-\n fn main() {\n     let Some(_) = Some(()) else if true {\n         //~^ ERROR conditional `else if` is not supported for `let...else`"}, {"sha": "c63fd61c5dec9ad3a51fa457dae719fdebc60685", "filename": "src/test/ui/let-else/let-else-if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.stderr?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,5 +1,5 @@\n error: conditional `else if` is not supported for `let...else`\n-  --> $DIR/let-else-if.rs:4:33\n+  --> $DIR/let-else-if.rs:2:33\n    |\n LL |     let Some(_) = Some(()) else if true {\n    |                                 ^^ expected `{`"}, {"sha": "1cb68ecb8a6bfc4128c9318cf2efbe4165b277e5", "filename": "src/test/ui/let-else/let-else-irrefutable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-irrefutable.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(let_else)]\n+\n \n fn main() {\n     let x = 1 else { return }; //~ WARN irrefutable `let...else` pattern"}, {"sha": "d87ac90c1a772e9720a39ccce4ffa56fbcfbf91f", "filename": "src/test/ui/let-else/let-else-missing-semicolon.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-missing-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-missing-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-missing-semicolon.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,5 +1,3 @@\n-#![feature(let_else)]\n-\n fn main() {\n     let Some(x) = Some(1) else {\n         return;"}, {"sha": "99029ff33fe0ca69a050cfbbfbdaa60cc814c8b2", "filename": "src/test/ui/let-else/let-else-missing-semicolon.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-missing-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-missing-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-missing-semicolon.stderr?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,13 +1,13 @@\n error: expected `;`, found keyword `let`\n-  --> $DIR/let-else-missing-semicolon.rs:6:6\n+  --> $DIR/let-else-missing-semicolon.rs:4:6\n    |\n LL |     }\n    |      ^ help: add `;` here\n LL |     let _ = \"\";\n    |     --- unexpected token\n \n error: expected `;`, found `}`\n-  --> $DIR/let-else-missing-semicolon.rs:10:6\n+  --> $DIR/let-else-missing-semicolon.rs:8:6\n    |\n LL |     }\n    |      ^ help: add `;` here"}, {"sha": "91fcc5d7e91e864e4f6d41897eeb9a4e95346e21", "filename": "src/test/ui/let-else/let-else-no-double-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-no-double-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-no-double-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-no-double-error.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,6 +1,6 @@\n // from rfc2005 test suite\n \n-#![feature(let_else)]\n+\n \n // Without caching type lookups in FnCtxt.resolve_ty_and_def_ufcs\n // the error below would be reported twice (once when checking"}, {"sha": "08c07dd1a43acf9ea5db3207033e99d616de21ca", "filename": "src/test/ui/let-else/let-else-non-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-copy.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -10,7 +10,7 @@\n //\n // The move was due to mir::Place being Copy, but mir::VarDebugInfoContents not being Copy.\n \n-#![feature(let_else)]\n+\n \n #[derive(Copy, Clone)]\n struct Copyable;"}, {"sha": "b5bd91ceb9e755237bdce693aaa35a90727d5076", "filename": "src/test/ui/let-else/let-else-non-diverging.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,5 +1,3 @@\n-#![feature(let_else)]\n-\n fn main() {\n     let Some(x) = Some(1) else { //~ ERROR does not diverge\n         Some(2)"}, {"sha": "c999a5495256089a8c6a8909e4f9e6732c99be39", "filename": "src/test/ui/let-else/let-else-non-diverging.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.stderr?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: `else` clause of `let...else` does not diverge\n-  --> $DIR/let-else-non-diverging.rs:4:32\n+  --> $DIR/let-else-non-diverging.rs:2:32\n    |\n LL |       let Some(x) = Some(1) else {\n    |  ________________________________^\n@@ -13,7 +13,7 @@ LL | |     };\n    = help: ...or use `match` instead of `let...else`\n \n error[E0308]: `else` clause of `let...else` does not diverge\n-  --> $DIR/let-else-non-diverging.rs:7:32\n+  --> $DIR/let-else-non-diverging.rs:5:32\n    |\n LL |       let Some(x) = Some(1) else {\n    |  ________________________________^\n@@ -29,7 +29,7 @@ LL | |     };\n    = help: ...or use `match` instead of `let...else`\n \n error[E0308]: `else` clause of `let...else` does not diverge\n-  --> $DIR/let-else-non-diverging.rs:12:32\n+  --> $DIR/let-else-non-diverging.rs:10:32\n    |\n LL |     let Some(x) = Some(1) else { Some(2) };\n    |                                ^^^^^^^^^^^ expected `!`, found enum `Option`"}, {"sha": "62fc65731cd2f9cc0aaa17699df048b603086e3d", "filename": "src/test/ui/let-else/let-else-ref-bindings-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings-pass.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(let_else)]\n+\n #![allow(unused_variables)]\n \n fn ref_() {"}, {"sha": "687e235d47e78d4a41f8fa7f3df64d1821826fe8", "filename": "src/test/ui/let-else/let-else-ref-bindings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,6 +1,6 @@\n-#![feature(let_else)]\n #![allow(unused_variables)]\n \n+\n fn ref_() {\n     let bytes: Vec<u8> = b\"Hello\"[..].to_vec();\n     let some = Some(bytes);"}, {"sha": "a0fb6c683f8ceb580a89111b5728f39622b020fa", "filename": "src/test/ui/let-else/let-else-run-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-run-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-run-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-run-pass.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(let_else)]\n+\n \n fn main() {\n     #[allow(dead_code)]"}, {"sha": "78a67769ef2843f1473ef427b4e379fc37df3fba", "filename": "src/test/ui/let-else/let-else-scope.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-scope.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,5 +1,3 @@\n-#![feature(let_else)]\n-\n fn main() {\n     let Some(x) = Some(2) else {\n         panic!(\"{}\", x); //~ ERROR cannot find value `x` in this scope"}, {"sha": "3b4f0982940e831fd245f9ea77d0ce30ddabbaff", "filename": "src/test/ui/let-else/let-else-scope.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-scope.stderr?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,5 +1,5 @@\n error[E0425]: cannot find value `x` in this scope\n-  --> $DIR/let-else-scope.rs:5:22\n+  --> $DIR/let-else-scope.rs:3:22\n    |\n LL |         panic!(\"{}\", x);\n    |                      ^ not found in this scope"}, {"sha": "25770094bce99e5068c7d62682fc8866c8f9bfb9", "filename": "src/test/ui/let-else/let-else-slicing-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-slicing-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-slicing-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-slicing-error.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,5 +1,5 @@\n // issue #92069\n-#![feature(let_else)]\n+\n \n fn main() {\n     let nums = vec![5, 4, 3, 2, 1];"}, {"sha": "ee378abcf2bad771e90f59711c185794001de7ca", "filename": "src/test/ui/let-else/let-else-source-expr-nomove-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-source-expr-nomove-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-source-expr-nomove-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-source-expr-nomove-pass.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // issue #89688\n \n-#![feature(let_else)]\n+\n \n fn example_let_else(value: Option<String>) {\n     let Some(inner) = value else {"}, {"sha": "6b4642d2f985219d039cd3a3dbc34d3139bc9a25", "filename": "src/test/ui/let-else/let-else-temp-borrowck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-temp-borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-temp-borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-temp-borrowck.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -3,7 +3,7 @@\n // from issue #93951, where borrowck complained the temporary that `foo(&x)` was stored in was to\n // be dropped sometime after `x` was. It then suggested adding a semicolon that was already there.\n \n-#![feature(let_else)]\n+\n use std::fmt::Debug;\n \n fn foo<'a>(x: &'a str) -> Result<impl Debug + 'a, ()> {"}, {"sha": "c23eaa997fe4d0ce82ffb7cf842d426dd254d615", "filename": "src/test/ui/let-else/let-else-temporary-lifetime.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-temporary-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-temporary-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-temporary-lifetime.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // compile-flags: -Zvalidate-mir\n-#![feature(let_else)]\n \n use std::fmt::Display;\n use std::rc::Rc;"}, {"sha": "1c8f7d758e8a6e1a16d41187c352acbf5fa68926", "filename": "src/test/ui/let-else/let-else-then-diverge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-then-diverge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else-then-diverge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-then-diverge.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -2,7 +2,7 @@\n // popped up in in #94012, where an alternative desugaring was\n // causing unreachable code errors\n \n-#![feature(let_else)]\n+\n #![deny(unused_variables)]\n #![deny(unreachable_code)]\n "}, {"sha": "3505533e63f14736fbc85b587524803e78806b84", "filename": "src/test/ui/let-else/let-else.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Flet-else%2Flet-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -0,0 +1,8 @@\n+// run-pass\n+\n+fn main() {\n+    let Some(x) = Some(1) else {\n+        return;\n+    };\n+    assert_eq!(x, 1);\n+}"}, {"sha": "20f2f09500aa213cbcad6d46cc6d4ce021d46689", "filename": "src/test/ui/pattern/usefulness/issue-31561.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31561.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31561.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31561.stderr?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -21,7 +21,7 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL |     let y = if let Thing::Foo(y) = Thing::Foo(1) { y } else { todo!() };\n    |     ++++++++++                                   ++++++++++++++++++++++\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n+help: alternatively, you might want to use let else to handle the variants that aren't matched\n    |\n LL |     let Thing::Foo(y) = Thing::Foo(1) else { todo!() };\n    |                                       ++++++++++++++++"}, {"sha": "678c9b2ab58c3df7d42a7a249f81512832a1fe79", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-defined-here.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -187,7 +187,7 @@ help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     let _x = if let Opt::Some(ref _x) = e { _x } else { todo!() };\n    |     +++++++++++                           +++++++++++++++++++++++\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variant that isn't matched\n+help: alternatively, you might want to use let else to handle the variant that isn't matched\n    |\n LL |     let Opt::Some(ref _x) = e else { todo!() };\n    |                               ++++++++++++++++"}, {"sha": "e8cd12ea4a2c487ccba294ea3ab9dc29744dd004", "filename": "src/test/ui/pattern/usefulness/top-level-alternation.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftop-level-alternation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftop-level-alternation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftop-level-alternation.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,5 +1,3 @@\n-#![feature(let_else)]\n-\n #![deny(unreachable_patterns)]\n \n fn main() {"}, {"sha": "17fa951c53905b4ca436739814a1c2e7aeefe022", "filename": "src/test/ui/pattern/usefulness/top-level-alternation.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftop-level-alternation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftop-level-alternation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftop-level-alternation.stderr?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,71 +1,71 @@\n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:6:23\n+  --> $DIR/top-level-alternation.rs:4:23\n    |\n LL |     while let 0..=2 | 1 = 0 {}\n    |                       ^\n    |\n note: the lint level is defined here\n-  --> $DIR/top-level-alternation.rs:3:9\n+  --> $DIR/top-level-alternation.rs:1:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:7:20\n+  --> $DIR/top-level-alternation.rs:5:20\n    |\n LL |     if let 0..=2 | 1 = 0 {}\n    |                    ^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:11:15\n+  --> $DIR/top-level-alternation.rs:9:15\n    |\n LL |             | 0 => {}\n    |               ^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:16:15\n+  --> $DIR/top-level-alternation.rs:14:15\n    |\n LL |             | Some(0) => {}\n    |               ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:21:9\n+  --> $DIR/top-level-alternation.rs:19:9\n    |\n LL |         (0, 0) => {}\n    |         ^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:41:9\n+  --> $DIR/top-level-alternation.rs:39:9\n    |\n LL |         _ => {}\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:45:9\n+  --> $DIR/top-level-alternation.rs:43:9\n    |\n LL |         Some(_) => {}\n    |         ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:46:9\n+  --> $DIR/top-level-alternation.rs:44:9\n    |\n LL |         None => {}\n    |         ^^^^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:51:9\n+  --> $DIR/top-level-alternation.rs:49:9\n    |\n LL |         None | Some(_) => {}\n    |         ^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:55:9\n+  --> $DIR/top-level-alternation.rs:53:9\n    |\n LL |         1..=2 => {},\n    |         ^^^^^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:58:14\n+  --> $DIR/top-level-alternation.rs:56:14\n    |\n LL |     let (0 | 0) = 0 else { return };\n    |              ^"}, {"sha": "321ee0a36942ed3e7482d71e55a213fdd7fbe2f6", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -19,7 +19,7 @@ help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     let x = if let Ok(x) = res { x } else { todo!() };\n    |     ++++++++++                 ++++++++++++++++++++++\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variant that isn't matched\n+help: alternatively, you might want to use let else to handle the variant that isn't matched\n    |\n LL |     let Ok(x) = res else { todo!() };\n    |                     ++++++++++++++++"}, {"sha": "2a6c144350a7a8fc48d4d774751c1763a1362d92", "filename": "src/test/ui/rfc-2497-if-let-chains/ensure-that-let-else-does-not-interact-with-let-chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,4 +1,4 @@\n-#![feature(let_chains, let_else)]\n+#![feature(let_chains)]\n \n fn main() {\n     let opt = Some(1i32);"}, {"sha": "1d13720bcd31e17e4689fe513bcbc14e2aabcfc1", "filename": "src/test/ui/simd/intrinsic/ptr-cast.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fintrinsic%2Fptr-cast.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -0,0 +1,33 @@\n+// run-pass\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_cast_ptr<T, U>(x: T) -> U;\n+    fn simd_expose_addr<T, U>(x: T) -> U;\n+    fn simd_from_exposed_addr<T, U>(x: T) -> U;\n+}\n+\n+#[derive(Copy, Clone)]\n+#[repr(simd)]\n+struct V<T>([T; 2]);\n+\n+fn main() {\n+    unsafe {\n+        let mut foo = 4i8;\n+        let ptr = &mut foo as *mut i8;\n+\n+        let ptrs = V::<*mut i8>([ptr, core::ptr::null_mut()]);\n+\n+        // change constness and type\n+        let const_ptrs: V<*const u8> = simd_cast_ptr(ptrs);\n+\n+        let exposed_addr: V<usize> = simd_expose_addr(const_ptrs);\n+\n+        let from_exposed_addr: V<*mut i8> = simd_from_exposed_addr(exposed_addr);\n+\n+        assert!(const_ptrs.0 == [ptr as *const u8, core::ptr::null()]);\n+        assert!(exposed_addr.0 == [ptr as usize, 0]);\n+        assert!(from_exposed_addr.0 == ptrs.0);\n+    }\n+}"}, {"sha": "97e0b213f2e7913ab6923bb5c5aaabc88b36de03", "filename": "src/test/ui/typeck/do-not-suggest-placeholder-to-const-static-without-type.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-placeholder-to-const-static-without-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-placeholder-to-const-static-without-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-placeholder-to-const-static-without-type.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -0,0 +1,8 @@\n+trait Foo {\n+    const A; //~ ERROR missing type for `const` item\n+    static B;\n+    //~^ ERROR associated `static` items are not allowed\n+    //~| ERROR missing type for `static` item\n+}\n+\n+fn main() {}"}, {"sha": "8982d6285617d911e962cfc2d08ecbb6ccbba4dd", "filename": "src/test/ui/typeck/do-not-suggest-placeholder-to-const-static-without-type.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-placeholder-to-const-static-without-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-placeholder-to-const-static-without-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-placeholder-to-const-static-without-type.stderr?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -0,0 +1,20 @@\n+error: associated `static` items are not allowed\n+  --> $DIR/do-not-suggest-placeholder-to-const-static-without-type.rs:3:5\n+   |\n+LL |     static B;\n+   |     ^^^^^^^^^\n+\n+error: missing type for `const` item\n+  --> $DIR/do-not-suggest-placeholder-to-const-static-without-type.rs:2:12\n+   |\n+LL |     const A;\n+   |            ^ help: provide a type for the item: `: <type>`\n+\n+error: missing type for `static` item\n+  --> $DIR/do-not-suggest-placeholder-to-const-static-without-type.rs:3:13\n+   |\n+LL |     static B;\n+   |             ^ help: provide a type for the item: `: <type>`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "32f287a18188c33c7fb8964d309c2aa993c5c10e", "filename": "src/test/ui/uninhabited/uninhabited-irrefutable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -18,7 +18,7 @@ help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     let (_y, _z) = if let Foo::D(_y, _z) = x { (_y, _z) } else { todo!() };\n    |     +++++++++++++++++                        +++++++++++++++++++++++++++++\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variant that isn't matched\n+help: alternatively, you might want to use let else to handle the variant that isn't matched\n    |\n LL |     let Foo::D(_y, _z) = x else { todo!() };\n    |                            ++++++++++++++++"}, {"sha": "c7882963407f707b03e986b06fb2ca70f430ebb1", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -122,7 +122,7 @@ help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     let x = if let Ok(x) = x { x } else { todo!() };\n    |     ++++++++++               ++++++++++++++++++++++\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variant that isn't matched\n+help: alternatively, you might want to use let else to handle the variant that isn't matched\n    |\n LL |     let Ok(x) = x else { todo!() };\n    |                   ++++++++++++++++"}, {"sha": "b5ae529699da230633724cc84cf21655f0f4a35b", "filename": "src/test/ui/unpretty/pretty-let-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Funpretty%2Fpretty-let-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Funpretty%2Fpretty-let-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funpretty%2Fpretty-let-else.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: -Zunpretty=hir\n // check-pass\n \n-#![feature(let_else)]\n+\n \n fn foo(x: Option<u32>) {\n     let Some(_) = x else { panic!() };"}, {"sha": "35ad1cd1b181261bedbcce15dd1ae00f6fb8fd00", "filename": "src/test/ui/unpretty/pretty-let-else.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Funpretty%2Fpretty-let-else.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftest%2Fui%2Funpretty%2Fpretty-let-else.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funpretty%2Fpretty-let-else.stdout?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,11 +1,11 @@\n-// compile-flags: -Zunpretty=hir\n-// check-pass\n-\n-#![feature(let_else)]\n #[prelude_import]\n use ::std::prelude::rust_2015::*;\n #[macro_use]\n extern crate std;\n+// compile-flags: -Zunpretty=hir\n+// check-pass\n+\n+\n \n fn foo(x:\n         Option<u32>) {"}, {"sha": "54c7456a2a3b0b2dfbda537e2ac583dd3baeb940", "filename": "src/tools/clippy/clippy_dev/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,5 +1,5 @@\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(once_cell)]\n #![feature(rustc_private)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]"}, {"sha": "ceaaf5c6d6ed6b8f3522a2c9e4031ac59b316318", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -5,7 +5,7 @@\n #![feature(drain_filter)]\n #![feature(iter_intersperse)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(lint_reasons)]\n #![feature(never_type)]\n #![feature(once_cell)]"}, {"sha": "62da850a15e706a2a7370504d2e2c935c34089d8", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,9 +1,9 @@\n #![feature(array_chunks)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n-#![feature(let_else)]\n #![feature(let_chains)]\n #![feature(lint_reasons)]\n+#![cfg_attr(bootstrap, feature(let_else))]\n #![feature(once_cell)]\n #![feature(rustc_private)]\n #![recursion_limit = \"512\"]"}, {"sha": "695883e8dff770ffc3820af1997e53e341459e3f", "filename": "src/tools/clippy/tests/ui/needless_return.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.fixed?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n \n #![feature(lint_reasons)]\n-#![feature(let_else)]\n #![allow(unused)]\n #![allow(\n     clippy::if_same_then_else,"}, {"sha": "63d9fe9ecdf8ef4d21d25d9f57ab6deeee66e857", "filename": "src/tools/clippy/tests/ui/needless_return.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n \n #![feature(lint_reasons)]\n-#![feature(let_else)]\n #![allow(unused)]\n #![allow(\n     clippy::if_same_then_else,"}, {"sha": "cadee6e00dff25669a6e0d46b86263054efc0dc7", "filename": "src/tools/clippy/tests/ui/needless_return.stderr", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.stderr?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,223 +1,223 @@\n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:27:5\n+  --> $DIR/needless_return.rs:26:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n    |\n    = note: `-D clippy::needless-return` implied by `-D warnings`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:31:5\n+  --> $DIR/needless_return.rs:30:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:36:9\n+  --> $DIR/needless_return.rs:35:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:38:9\n+  --> $DIR/needless_return.rs:37:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:44:17\n+  --> $DIR/needless_return.rs:43:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:46:13\n+  --> $DIR/needless_return.rs:45:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:53:9\n+  --> $DIR/needless_return.rs:52:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:55:16\n+  --> $DIR/needless_return.rs:54:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:59:5\n+  --> $DIR/needless_return.rs:58:5\n    |\n LL |     return the_answer!();\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `the_answer!()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:63:5\n+  --> $DIR/needless_return.rs:62:5\n    |\n LL |     return;\n    |     ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:68:9\n+  --> $DIR/needless_return.rs:67:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:70:9\n+  --> $DIR/needless_return.rs:69:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:77:14\n+  --> $DIR/needless_return.rs:76:14\n    |\n LL |         _ => return,\n    |              ^^^^^^ help: replace `return` with a unit value: `()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:86:13\n+  --> $DIR/needless_return.rs:85:13\n    |\n LL |             return;\n    |             ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:88:14\n+  --> $DIR/needless_return.rs:87:14\n    |\n LL |         _ => return,\n    |              ^^^^^^ help: replace `return` with a unit value: `()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:101:9\n+  --> $DIR/needless_return.rs:100:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::from(\"test\")`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:103:9\n+  --> $DIR/needless_return.rs:102:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:125:32\n+  --> $DIR/needless_return.rs:124:32\n    |\n LL |         bar.unwrap_or_else(|_| return)\n    |                                ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:130:13\n+  --> $DIR/needless_return.rs:129:13\n    |\n LL |             return;\n    |             ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:132:20\n+  --> $DIR/needless_return.rs:131:20\n    |\n LL |         let _ = || return;\n    |                    ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:138:32\n+  --> $DIR/needless_return.rs:137:32\n    |\n LL |         res.unwrap_or_else(|_| return Foo)\n    |                                ^^^^^^^^^^ help: remove `return`: `Foo`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:147:5\n+  --> $DIR/needless_return.rs:146:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:151:5\n+  --> $DIR/needless_return.rs:150:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:156:9\n+  --> $DIR/needless_return.rs:155:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:158:9\n+  --> $DIR/needless_return.rs:157:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:164:17\n+  --> $DIR/needless_return.rs:163:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:166:13\n+  --> $DIR/needless_return.rs:165:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:173:9\n+  --> $DIR/needless_return.rs:172:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:175:16\n+  --> $DIR/needless_return.rs:174:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:179:5\n+  --> $DIR/needless_return.rs:178:5\n    |\n LL |     return the_answer!();\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `the_answer!()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:183:5\n+  --> $DIR/needless_return.rs:182:5\n    |\n LL |     return;\n    |     ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:188:9\n+  --> $DIR/needless_return.rs:187:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:190:9\n+  --> $DIR/needless_return.rs:189:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:197:14\n+  --> $DIR/needless_return.rs:196:14\n    |\n LL |         _ => return,\n    |              ^^^^^^ help: replace `return` with a unit value: `()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:210:9\n+  --> $DIR/needless_return.rs:209:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::from(\"test\")`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:212:9\n+  --> $DIR/needless_return.rs:211:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:228:5\n+  --> $DIR/needless_return.rs:227:5\n    |\n LL |     return format!(\"Hello {}\", \"world!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `format!(\"Hello {}\", \"world!\")`"}, {"sha": "c4dfbd9210e0d6e727ccb418962b717c6004f41e", "filename": "src/tools/clippy/tests/ui/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsemicolon_if_nothing_returned.rs?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,6 +1,5 @@\n #![warn(clippy::semicolon_if_nothing_returned)]\n #![allow(clippy::redundant_closure)]\n-#![feature(let_else)]\n \n fn get_unit() {}\n "}, {"sha": "8d9a67585cf12fb6141b92546a8e690aefe4c1a8", "filename": "src/tools/clippy/tests/ui/semicolon_if_nothing_returned.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672831a5c890f51d3222511ab2575ca7a86c8e20/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsemicolon_if_nothing_returned.stderr?ref=672831a5c890f51d3222511ab2575ca7a86c8e20", "patch": "@@ -1,31 +1,31 @@\n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:9:5\n+  --> $DIR/semicolon_if_nothing_returned.rs:8:5\n    |\n LL |     println!(\"Hello\")\n    |     ^^^^^^^^^^^^^^^^^ help: add a `;` here: `println!(\"Hello\");`\n    |\n    = note: `-D clippy::semicolon-if-nothing-returned` implied by `-D warnings`\n \n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:13:5\n+  --> $DIR/semicolon_if_nothing_returned.rs:12:5\n    |\n LL |     get_unit()\n    |     ^^^^^^^^^^ help: add a `;` here: `get_unit();`\n \n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:18:5\n+  --> $DIR/semicolon_if_nothing_returned.rs:17:5\n    |\n LL |     y = x + 1\n    |     ^^^^^^^^^ help: add a `;` here: `y = x + 1;`\n \n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:24:9\n+  --> $DIR/semicolon_if_nothing_returned.rs:23:9\n    |\n LL |         hello()\n    |         ^^^^^^^ help: add a `;` here: `hello();`\n \n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:35:9\n+  --> $DIR/semicolon_if_nothing_returned.rs:34:9\n    |\n LL |         ptr::drop_in_place(s.as_mut_ptr())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add a `;` here: `ptr::drop_in_place(s.as_mut_ptr());`"}]}