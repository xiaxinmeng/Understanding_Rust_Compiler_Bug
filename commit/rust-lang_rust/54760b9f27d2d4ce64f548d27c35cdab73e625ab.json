{"sha": "54760b9f27d2d4ce64f548d27c35cdab73e625ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NzYwYjlmMjdkMmQ0Y2U2NGY1NDhkMjdjMzVjZGFiNzNlNjI1YWI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-02-11T11:48:55Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-02-12T12:17:06Z"}, "message": "Removed ty_type (previously used to represent *tydesc).", "tree": {"sha": "3de9fc47a30c2111c2fa95a4ae5151acce6be9eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3de9fc47a30c2111c2fa95a4ae5151acce6be9eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54760b9f27d2d4ce64f548d27c35cdab73e625ab", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54760b9f27d2d4ce64f548d27c35cdab73e625ab", "html_url": "https://github.com/rust-lang/rust/commit/54760b9f27d2d4ce64f548d27c35cdab73e625ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54760b9f27d2d4ce64f548d27c35cdab73e625ab/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ca02eae1cbd69d6dbf9fec04a043ead890a8db3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca02eae1cbd69d6dbf9fec04a043ead890a8db3", "html_url": "https://github.com/rust-lang/rust/commit/2ca02eae1cbd69d6dbf9fec04a043ead890a8db3"}], "stats": {"total": 86, "additions": 29, "deletions": 57}, "files": [{"sha": "c1f2a459666fcc82bbcca4a28e38bd84789e307a", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=54760b9f27d2d4ce64f548d27c35cdab73e625ab", "patch": "@@ -372,7 +372,6 @@ fn parse_ty(st: &mut PState, conv: conv_did) -> ty::t {\n       'F' => {\n         return ty::mk_bare_fn(st.tcx, parse_bare_fn_ty(st, |x,y| conv(x,y)));\n       }\n-      'Y' => return ty::mk_type(st.tcx),\n       '#' => {\n         let pos = parse_hex(st);\n         assert_eq!(next(st), ':');"}, {"sha": "0f4a1899368946ea1b5182ed02edf18e85739c09", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=54760b9f27d2d4ce64f548d27c35cdab73e625ab", "patch": "@@ -328,7 +328,6 @@ fn enc_sty(w: &mut MemWriter, cx: @ctxt, st: &ty::sty) {\n         ty::ty_self(did) => {\n             mywrite!(w, \"s{}|\", (cx.ds)(did));\n         }\n-        ty::ty_type => mywrite!(w, \"Y\"),\n         ty::ty_struct(def, ref substs) => {\n             mywrite!(w, \"a[{}|\", (cx.ds)(def));\n             enc_substs(w, cx, substs);"}, {"sha": "0aa627994951b995b419c4c15f516979fb9b09e5", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=54760b9f27d2d4ce64f548d27c35cdab73e625ab", "patch": "@@ -598,19 +598,8 @@ pub fn compare_scalar_types<'a>(\n         ty::ty_int(_) => rslt(cx, f(signed_int)),\n         ty::ty_uint(_) => rslt(cx, f(unsigned_int)),\n         ty::ty_float(_) => rslt(cx, f(floating_point)),\n-        ty::ty_type => {\n-            rslt(\n-                controlflow::trans_fail(\n-                    cx, None,\n-                    InternedString::new(\"attempt to compare values of type \\\n-                                         type\")),\n-                C_nil())\n-        }\n-        _ => {\n             // Should never get here, because t is scalar.\n-            cx.sess().bug(\"non-scalar type passed to \\\n-                           compare_scalar_types\")\n-        }\n+        _ => cx.sess().bug(\"non-scalar type passed to compare_scalar_types\")\n     }\n }\n "}, {"sha": "6506fe59a5d940aed6808dde035753ffad644c19", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=54760b9f27d2d4ce64f548d27c35cdab73e625ab", "patch": "@@ -152,8 +152,12 @@ pub fn mk_closure_tys(tcx: ty::ctxt,\n     return cdata_ty;\n }\n \n-pub fn allocate_cbox<'a>(\n-                     bcx: &'a Block<'a>,\n+fn tuplify_box_ty(tcx: ty::ctxt, t: ty::t) -> ty::t {\n+    let ptr = ty::mk_imm_ptr(tcx, ty::mk_i8());\n+    ty::mk_tup(tcx, ~[ty::mk_uint(), ty::mk_nil_ptr(tcx), ptr, ptr, t])\n+}\n+\n+fn allocate_cbox<'a>(bcx: &'a Block<'a>,\n                      sigil: ast::Sigil,\n                      cdata_ty: ty::t)\n                      -> Result<'a> {"}, {"sha": "78bee6c7263e38eb4fc1f9cdf9fa761c75cae5f8", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=54760b9f27d2d4ce64f548d27c35cdab73e625ab", "patch": "@@ -520,19 +520,6 @@ pub fn val_ty(v: ValueRef) -> Type {\n     }\n }\n \n-// Let T be the content of a box @T.  tuplify_box_ty(t) returns the\n-// representation of @T as a tuple (i.e., the ty::t version of what T_box()\n-// returns).\n-pub fn tuplify_box_ty(tcx: ty::ctxt, t: ty::t) -> ty::t {\n-    let ptr = ty::mk_ptr(\n-        tcx,\n-        ty::mt {ty: ty::mk_i8(), mutbl: ast::MutImmutable}\n-    );\n-    return ty::mk_tup(tcx, ~[ty::mk_uint(), ty::mk_type(tcx),\n-                         ptr, ptr,\n-                         t]);\n-}\n-\n // LLVM constant constructors.\n pub fn C_null(t: Type) -> ValueRef {\n     unsafe {"}, {"sha": "89538731626e1d1425d33ed049f99bec9b34b65b", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=54760b9f27d2d4ce64f548d27c35cdab73e625ab", "patch": "@@ -368,8 +368,7 @@ impl<'a> Reflector<'a> {\n               let extra = ~[self.c_uint(p.idx)];\n               self.visit(\"param\", extra)\n           }\n-          ty::ty_self(..) => self.leaf(\"self\"),\n-          ty::ty_type => self.leaf(\"type\")\n+          ty::ty_self(..) => self.leaf(\"self\")\n         }\n     }\n "}, {"sha": "3afd490323044633136db32396ac3fa88cd73c80", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=54760b9f27d2d4ce64f548d27c35cdab73e625ab", "patch": "@@ -119,8 +119,7 @@ pub fn sizing_type_of(cx: &CrateContext, t: ty::t) -> Type {\n         ty::ty_box(..) |\n         ty::ty_uniq(..) |\n         ty::ty_ptr(..) |\n-        ty::ty_rptr(..) |\n-        ty::ty_type => Type::i8p(),\n+        ty::ty_rptr(..) => Type::i8p(),\n \n         ty::ty_str(ty::vstore_slice(..)) |\n         ty::ty_vec(_, ty::vstore_slice(..)) => {\n@@ -263,7 +262,6 @@ pub fn type_of(cx: &CrateContext, t: ty::t) -> Type {\n           Type::struct_([fn_ty, Type::i8p()], false)\n       }\n       ty::ty_trait(..) => Type::opaque_trait(),\n-      ty::ty_type => cx.tydesc_type.ptr_to(),\n       ty::ty_tup(..) => {\n           let repr = adt::represent_type(cx, t);\n           adt::type_of(cx, repr)"}, {"sha": "21124a9f741991ddd93d285812916d059ed41f20", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=54760b9f27d2d4ce64f548d27c35cdab73e625ab", "patch": "@@ -756,7 +756,6 @@ pub enum sty {\n             // on non-useful type error messages)\n \n     // \"Fake\" types, used for trans purposes\n-    ty_type, // type_desc*\n     ty_unboxed_vec(mt),\n }\n \n@@ -1181,7 +1180,7 @@ pub fn mk_t(cx: ctxt, st: sty) -> t {\n         flags |= get(mt.ty).flags;\n       }\n       &ty_nil | &ty_bool | &ty_char | &ty_int(_) | &ty_float(_) | &ty_uint(_) |\n-      &ty_str(_) | &ty_type => {}\n+      &ty_str(_) => {}\n       // You might think that we could just return ty_err for\n       // any type containing ty_err as a component, and get\n       // rid of the has_ty_err flag -- likewise for ty_bot (with\n@@ -1444,8 +1443,6 @@ pub fn mk_param(cx: ctxt, n: uint, k: DefId) -> t {\n     mk_t(cx, ty_param(param_ty { idx: n, def_id: k }))\n }\n \n-pub fn mk_type(cx: ctxt) -> t { mk_t(cx, ty_type) }\n-\n pub fn walk_ty(ty: t, f: |t|) {\n     maybe_walk_ty(ty, |t| { f(t); true });\n }\n@@ -1456,7 +1453,7 @@ pub fn maybe_walk_ty(ty: t, f: |t| -> bool) {\n     }\n     match get(ty).sty {\n         ty_nil | ty_bot | ty_bool | ty_char | ty_int(_) | ty_uint(_) | ty_float(_) |\n-        ty_str(_) | ty_type | ty_self(_) |\n+        ty_str(_) | ty_self(_) |\n         ty_infer(_) | ty_param(_) | ty_err => {}\n         ty_box(ty) | ty_uniq(ty) => maybe_walk_ty(ty, f),\n         ty_vec(ref tm, _) | ty_unboxed_vec(ref tm) | ty_ptr(ref tm) |\n@@ -1730,7 +1727,7 @@ pub fn type_is_unique(ty: t) -> bool {\n pub fn type_is_scalar(ty: t) -> bool {\n     match get(ty).sty {\n       ty_nil | ty_bool | ty_char | ty_int(_) | ty_float(_) | ty_uint(_) |\n-      ty_infer(IntVar(_)) | ty_infer(FloatVar(_)) | ty_type |\n+      ty_infer(IntVar(_)) | ty_infer(FloatVar(_)) |\n       ty_bare_fn(..) | ty_ptr(_) => true,\n       _ => false\n     }\n@@ -2216,8 +2213,6 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n             }\n             ty_unboxed_vec(mt) => TC::InteriorUnsized | tc_mt(cx, mt, cache),\n \n-            ty_type => TC::None,\n-\n             ty_err => {\n                 cx.sess.bug(\"asked to compute contents of error type\");\n             }\n@@ -2401,7 +2396,6 @@ pub fn is_instantiable(cx: ctxt, r_ty: t) -> bool {\n             ty_err |\n             ty_param(_) |\n             ty_self(_) |\n-            ty_type |\n             ty_vec(_, _) |\n             ty_unboxed_vec(_) => {\n                 false\n@@ -2628,7 +2622,7 @@ pub fn type_is_pod(cx: ctxt, ty: t) -> bool {\n     match get(ty).sty {\n       // Scalar types\n       ty_nil | ty_bot | ty_bool | ty_char | ty_int(_) | ty_float(_) | ty_uint(_) |\n-      ty_type | ty_ptr(_) | ty_bare_fn(_) => result = true,\n+      ty_ptr(_) | ty_bare_fn(_) => result = true,\n       // Boxed types\n       ty_box(_) | ty_uniq(_) | ty_closure(_) |\n       ty_str(vstore_uniq) |\n@@ -3556,7 +3550,7 @@ pub fn occurs_check(tcx: ctxt, sp: Span, vid: TyVid, rt: t) {\n pub fn ty_sort_str(cx: ctxt, t: t) -> ~str {\n     match get(t).sty {\n         ty_nil | ty_bot | ty_bool | ty_char | ty_int(_) |\n-        ty_uint(_) | ty_float(_) | ty_str(_) | ty_type => {\n+        ty_uint(_) | ty_float(_) | ty_str(_) => {\n             ::util::ppaux::ty_to_str(cx, t)\n         }\n \n@@ -5120,9 +5114,8 @@ pub fn hash_crate_independent(tcx: ctxt, t: t, local_hash: ~str) -> u64 {\n             }\n             ty_infer(_) => unreachable!(),\n             ty_err => hash.input([23]),\n-            ty_type => hash.input([24]),\n             ty_unboxed_vec(m) => {\n-                hash.input([25]);\n+                hash.input([24]);\n                 mt(&mut hash, m);\n             }\n         }"}, {"sha": "c0977d3c43fef22b5853c1529bcc3436b52441a7", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=54760b9f27d2d4ce64f548d27c35cdab73e625ab", "patch": "@@ -187,8 +187,7 @@ pub fn super_fold_sty<T:TypeFolder>(this: &mut T,\n             ty::ty_str(this.fold_vstore(vst))\n         }\n         ty::ty_nil | ty::ty_bot | ty::ty_bool | ty::ty_char |\n-        ty::ty_int(_) | ty::ty_uint(_) |\n-        ty::ty_float(_) | ty::ty_type |\n+        ty::ty_int(_) | ty::ty_uint(_) | ty::ty_float(_) |\n         ty::ty_err | ty::ty_infer(_) |\n         ty::ty_param(..) | ty::ty_self(_) => {\n             (*sty).clone()"}, {"sha": "bdcb418b9f8eb85e32b7a2759c7c739deddf6175", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=54760b9f27d2d4ce64f548d27c35cdab73e625ab", "patch": "@@ -788,7 +788,7 @@ impl<'a> LookupContext<'a> {\n \n             ty_err => None,\n \n-            ty_unboxed_vec(_) | ty_type | ty_infer(TyVar(_)) => {\n+            ty_unboxed_vec(_) | ty_infer(TyVar(_)) => {\n                 self.bug(format!(\"unexpected type: {}\",\n                               self.ty_to_str(self_ty)));\n             }"}, {"sha": "3a5f9900e3c32fd7b8980712a31932c1e5d5cd6d", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=54760b9f27d2d4ce64f548d27c35cdab73e625ab", "patch": "@@ -23,7 +23,7 @@ use middle::ty::{substs, t, ty_bool, ty_char, ty_bot, ty_box, ty_enum, ty_err};\n use middle::ty::{ty_str, ty_vec, ty_float, ty_infer, ty_int, ty_nil};\n use middle::ty::{ty_param, ty_param_bounds_and_ty, ty_ptr};\n use middle::ty::{ty_rptr, ty_self, ty_struct, ty_trait, ty_tup};\n-use middle::ty::{ty_type, ty_uint, ty_uniq, ty_bare_fn, ty_closure};\n+use middle::ty::{ty_uint, ty_uniq, ty_bare_fn, ty_closure};\n use middle::ty::{ty_unboxed_vec, type_is_ty_var};\n use middle::subst::Subst;\n use middle::ty;\n@@ -82,7 +82,7 @@ fn get_base_type(inference_context: &InferCtxt,\n \n         ty_nil | ty_bot | ty_bool | ty_char | ty_int(..) | ty_uint(..) | ty_float(..) |\n         ty_str(..) | ty_vec(..) | ty_bare_fn(..) | ty_closure(..) | ty_tup(..) |\n-        ty_infer(..) | ty_param(..) | ty_self(..) | ty_type |\n+        ty_infer(..) | ty_param(..) | ty_self(..) |\n         ty_unboxed_vec(..) | ty_err | ty_box(_) |\n         ty_uniq(_) | ty_ptr(_) | ty_rptr(_, _) => {\n             debug!(\"(getting base type) no base type; found {:?}\","}, {"sha": "d0420aba45fd19c55ec90a6920029ea270fe06ac", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=54760b9f27d2d4ce64f548d27c35cdab73e625ab", "patch": "@@ -715,8 +715,7 @@ impl<'a> ConstraintContext<'a> {\n                 self.add_constraints_from_sig(sig, variance);\n             }\n \n-            ty::ty_infer(..) | ty::ty_err |\n-            ty::ty_type | ty::ty_unboxed_vec(..) => {\n+            ty::ty_infer(..) | ty::ty_err | ty::ty_unboxed_vec(..) => {\n                 self.tcx().sess.bug(\n                     format!(\"unexpected type encountered in \\\n                             variance inference: {}\","}, {"sha": "f536e231e158999e9619397decd7d68f5a54e9dc", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=54760b9f27d2d4ce64f548d27c35cdab73e625ab", "patch": "@@ -18,7 +18,7 @@ use middle::ty::{ReFree, ReScope, ReInfer, ReStatic, Region,\n                  ReEmpty};\n use middle::ty::{ty_bool, ty_char, ty_bot, ty_box, ty_struct, ty_enum};\n use middle::ty::{ty_err, ty_str, ty_vec, ty_float, ty_bare_fn, ty_closure};\n-use middle::ty::{ty_nil, ty_param, ty_ptr, ty_rptr, ty_self, ty_tup, ty_type};\n+use middle::ty::{ty_nil, ty_param, ty_ptr, ty_rptr, ty_self, ty_tup};\n use middle::ty::{ty_uniq, ty_trait, ty_int, ty_uint, ty_unboxed_vec, ty_infer};\n use middle::ty;\n use middle::typeck;\n@@ -454,7 +454,6 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n         region_ptr_to_str(cx, r) + mt_to_str(cx, tm)\n       }\n       ty_unboxed_vec(ref tm) => { format!(\"unboxed_vec<{}>\", mt_to_str(cx, tm)) }\n-      ty_type => ~\"type\",\n       ty_tup(ref elems) => {\n         let strs = elems.map(|elem| ty_to_str(cx, *elem));\n         ~\"(\" + strs.connect(\",\") + \")\""}, {"sha": "1c22408592a74f56979d8d62bef3ee1802d728a5", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=54760b9f27d2d4ce64f548d27c35cdab73e625ab", "patch": "@@ -442,6 +442,8 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n+    // NOTE Remove after next snapshot.\n+    #[cfg(stage0)]\n     fn visit_type(&mut self) -> bool {\n         if ! self.inner.visit_type() { return false; }\n         true"}, {"sha": "4ced74a92b7c04fb8cc568412cadfe97b9e8c165", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=54760b9f27d2d4ce64f548d27c35cdab73e625ab", "patch": "@@ -601,6 +601,9 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n \n     fn visit_param(&mut self, _i: uint) -> bool { true }\n     fn visit_self(&mut self) -> bool { true }\n+\n+    // NOTE Remove after next snapshot.\n+    #[cfg(stage0)]\n     fn visit_type(&mut self) -> bool { true }\n }\n "}, {"sha": "b9e9c9d5a436f47b357aee00f2ff00c1aceef758", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=54760b9f27d2d4ce64f548d27c35cdab73e625ab", "patch": "@@ -160,6 +160,9 @@ pub trait TyVisitor {\n     fn visit_trait(&mut self, name: &str) -> bool;\n     fn visit_param(&mut self, i: uint) -> bool;\n     fn visit_self(&mut self) -> bool;\n+\n+    // NOTE Remove after next snapshot.\n+    #[cfg(stage0)]\n     fn visit_type(&mut self) -> bool;\n }\n "}, {"sha": "56db021e2bc29ff4607a72f16a7e7684e0b043fc", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54760b9f27d2d4ce64f548d27c35cdab73e625ab/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=54760b9f27d2d4ce64f548d27c35cdab73e625ab", "patch": "@@ -138,7 +138,6 @@ impl TyVisitor for MyVisitor {\n     fn visit_trait(&mut self, _name: &str) -> bool { true }\n     fn visit_param(&mut self, _i: uint) -> bool { true }\n     fn visit_self(&mut self) -> bool { true }\n-    fn visit_type(&mut self) -> bool { true }\n }\n \n fn visit_ty<T>(v: &mut MyVisitor) {"}]}