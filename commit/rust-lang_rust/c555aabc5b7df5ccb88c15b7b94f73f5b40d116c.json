{"sha": "c555aabc5b7df5ccb88c15b7b94f73f5b40d116c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NTVhYWJjNWI3ZGY1Y2NiODhjMTViN2I5NGY3M2Y1YjQwZDExNmM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-12T08:08:25Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-12T08:32:11Z"}, "message": "clarify rules for ZST Boxes", "tree": {"sha": "92ccb7cfc117b803af64f93d5b9cb22b6a708e56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92ccb7cfc117b803af64f93d5b9cb22b6a708e56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c555aabc5b7df5ccb88c15b7b94f73f5b40d116c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c555aabc5b7df5ccb88c15b7b94f73f5b40d116c", "html_url": "https://github.com/rust-lang/rust/commit/c555aabc5b7df5ccb88c15b7b94f73f5b40d116c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c555aabc5b7df5ccb88c15b7b94f73f5b40d116c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06a079c43efb062e335e6e6c9dabd3c750619980", "url": "https://api.github.com/repos/rust-lang/rust/commits/06a079c43efb062e335e6e6c9dabd3c750619980", "html_url": "https://github.com/rust-lang/rust/commit/06a079c43efb062e335e6e6c9dabd3c750619980"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "c543ee2d0c5819f25d5e3bd78119ee45d00b86b1", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c555aabc5b7df5ccb88c15b7b94f73f5b40d116c/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c555aabc5b7df5ccb88c15b7b94f73f5b40d116c/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=c555aabc5b7df5ccb88c15b7b94f73f5b40d116c", "patch": "@@ -62,6 +62,11 @@\n //! T` obtained from [`Box::<T>::into_raw`] may be deallocated using the\n //! [`Global`] allocator with [`Layout::for_value(&*value)`].\n //!\n+//! For zero-sized values, the `Box` pointer still has to be [valid] for reads and writes and\n+//! sufficiently aligned. In particular, casting any aligned non-zero integer to a raw pointer\n+//! produces a valid pointer, but a pointer pointing into previously allocated memory that since got\n+//! freed is not valid.\n+//!\n //! So long as `T: Sized`, a `Box<T>` is guaranteed to be represented\n //! as a single pointer and is also ABI-compatible with C pointers\n //! (i.e. the C type `T*`). This means that if you have extern \"C\"\n@@ -125,6 +130,7 @@\n //! [`Global`]: crate::alloc::Global\n //! [`Layout`]: crate::alloc::Layout\n //! [`Layout::for_value(&*value)`]: crate::alloc::Layout::for_value\n+//! [valid]: ptr#safety\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -385,7 +391,10 @@ impl<T: ?Sized> Box<T> {\n     /// memory problems. For example, a double-free may occur if the\n     /// function is called twice on the same raw pointer.\n     ///\n+    /// The safety conditions are described in the [memory layout] section.\n+    ///\n     /// # Examples\n+    ///\n     /// Recreate a `Box` which was previously converted to a raw pointer\n     /// using [`Box::into_raw`]:\n     /// ```"}, {"sha": "453621d9eadff38a756537ca74ce4214133bcc4d", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c555aabc5b7df5ccb88c15b7b94f73f5b40d116c/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c555aabc5b7df5ccb88c15b7b94f73f5b40d116c/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=c555aabc5b7df5ccb88c15b7b94f73f5b40d116c", "patch": "@@ -16,12 +16,15 @@\n //! provided at this point are very minimal:\n //!\n //! * A [null] pointer is *never* valid, not even for accesses of [size zero][zst].\n-//! * All pointers (except for the null pointer) are valid for all operations of\n-//!   [size zero][zst].\n //! * For a pointer to be valid, it is necessary, but not always sufficient, that the pointer\n //!   be *dereferenceable*: the memory range of the given size starting at the pointer must all be\n //!   within the bounds of a single allocated object. Note that in Rust,\n //!   every (stack-allocated) variable is considered a separate allocated object.\n+//! * Even for operations of [size zero][zst], the pointer must not be \"dangling\" in the sense of\n+//!   pointing to deallocated memory. However, casting any non-zero integer to a pointer is valid\n+//!   for zero-sized accesses. This corresponds to writing your own allocator; allocating zero-sized\n+//!   objects is not very hard. In contrast, when you use the standard allocator, after memory got\n+//!   deallocated, even zero-sized accesses to that memory are invalid.\n //! * All accesses performed by functions in this module are *non-atomic* in the sense\n //!   of [atomic operations] used to synchronize between threads. This means it is\n //!   undefined behavior to perform two concurrent accesses to the same location from different"}]}