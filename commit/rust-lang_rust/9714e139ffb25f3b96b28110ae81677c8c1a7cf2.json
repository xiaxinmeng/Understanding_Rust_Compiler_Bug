{"sha": "9714e139ffb25f3b96b28110ae81677c8c1a7cf2", "node_id": "C_kwDOAAsO6NoAKDk3MTRlMTM5ZmZiMjVmM2I5NmIyODExMGFlODE2NzdjOGMxYTdjZjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-06T04:56:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-06T04:56:23Z"}, "message": "Auto merge of #96759 - compiler-errors:rollup-p4jtm92, r=compiler-errors\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #96174 (mark ptr-int-transmute test as no_run)\n - #96639 (Fix typo in `offset_from` documentation)\n - #96704 (Add rotation animation on settings button when loading)\n - #96730 (Add a regression test for #64173 and #66152)\n - #96741 (Improve settings loading strategy)\n - #96744 (Implement [OsStr]::join)\n - #96747 (Add `track_caller` to `DefId::expect_local()`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5fd47fc0450fa4c56ecc7e0c7c3ef43dcac3cce0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fd47fc0450fa4c56ecc7e0c7c3ef43dcac3cce0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9714e139ffb25f3b96b28110ae81677c8c1a7cf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9714e139ffb25f3b96b28110ae81677c8c1a7cf2", "html_url": "https://github.com/rust-lang/rust/commit/9714e139ffb25f3b96b28110ae81677c8c1a7cf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74cea9fdb9ca77d4104df5c28124817004ead6a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/74cea9fdb9ca77d4104df5c28124817004ead6a3", "html_url": "https://github.com/rust-lang/rust/commit/74cea9fdb9ca77d4104df5c28124817004ead6a3"}, {"sha": "b8c829b64f6b95f89bff9b953c4eeb2bf8e8695b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c829b64f6b95f89bff9b953c4eeb2bf8e8695b", "html_url": "https://github.com/rust-lang/rust/commit/b8c829b64f6b95f89bff9b953c4eeb2bf8e8695b"}], "stats": {"total": 116, "additions": 109, "deletions": 7}, "files": [{"sha": "6b529d5e0837b03d686fd70b8795ad93c641bc75", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=9714e139ffb25f3b96b28110ae81677c8c1a7cf2", "patch": "@@ -279,6 +279,7 @@ impl DefId {\n     }\n \n     #[inline]\n+    #[track_caller]\n     pub fn expect_local(self) -> LocalDefId {\n         self.as_local().unwrap_or_else(|| panic!(\"DefId::expect_local: `{:?}` isn't local\", self))\n     }"}, {"sha": "4e32c514d5f68fbadbbe12732b48ac5f5658eeab", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=9714e139ffb25f3b96b28110ae81677c8c1a7cf2", "patch": "@@ -981,7 +981,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// Turning a pointer into a `usize`:\n     ///\n-    /// ```\n+    /// ```no_run\n     /// let ptr = &0;\n     /// let ptr_num_transmute = unsafe {\n     ///     std::mem::transmute::<&i32, usize>(ptr)"}, {"sha": "45964c3a444fec86f6b28231cbab12bf3f7cdcf8", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=9714e139ffb25f3b96b28110ae81677c8c1a7cf2", "patch": "@@ -518,7 +518,7 @@ impl<T: ?Sized> *const T {\n     }\n \n     /// Calculates the distance between two pointers. The returned value is in\n-    /// units of T: the distance in bytes is divided by `mem::size_of::<T>()`.\n+    /// units of T: the distance in bytes divided by `mem::size_of::<T>()`.\n     ///\n     /// This function is the inverse of [`offset`].\n     ///"}, {"sha": "ff5207c1a06e1cd09e48d915ff435f5ebcc06fd7", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=9714e139ffb25f3b96b28110ae81677c8c1a7cf2", "patch": "@@ -696,7 +696,7 @@ impl<T: ?Sized> *mut T {\n     }\n \n     /// Calculates the distance between two pointers. The returned value is in\n-    /// units of T: the distance in bytes is divided by `mem::size_of::<T>()`.\n+    /// units of T: the distance in bytes divided by `mem::size_of::<T>()`.\n     ///\n     /// This function is the inverse of [`offset`].\n     ///"}, {"sha": "dd316bdb2c6ce5476a31b95a23801ba248b92232", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=9714e139ffb25f3b96b28110ae81677c8c1a7cf2", "patch": "@@ -1222,6 +1222,23 @@ impl OsStr {\n     }\n }\n \n+#[unstable(feature = \"slice_concat_ext\", issue = \"27747\")]\n+impl<S: Borrow<OsStr>> alloc::slice::Join<&OsStr> for [S] {\n+    type Output = OsString;\n+\n+    fn join(slice: &Self, sep: &OsStr) -> OsString {\n+        let Some(first) = slice.first() else {\n+            return OsString::new();\n+        };\n+        let first = first.borrow().to_owned();\n+        slice[1..].iter().fold(first, |mut a, b| {\n+            a.push(sep);\n+            a.push(b.borrow());\n+            a\n+        })\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Borrow<OsStr> for OsString {\n     #[inline]"}, {"sha": "d7926749aae2090416729d0aec53db4bf0a6b276", "filename": "library/std/src/ffi/os_str/tests.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/library%2Fstd%2Fsrc%2Fffi%2Fos_str%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/library%2Fstd%2Fsrc%2Fffi%2Fos_str%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str%2Ftests.rs?ref=9714e139ffb25f3b96b28110ae81677c8c1a7cf2", "patch": "@@ -84,6 +84,20 @@ fn test_os_string_reserve_exact() {\n     assert!(os_string.capacity() >= 33)\n }\n \n+#[test]\n+fn test_os_string_join() {\n+    let strings = [OsStr::new(\"hello\"), OsStr::new(\"dear\"), OsStr::new(\"world\")];\n+    assert_eq!(\"hello\", strings[..1].join(OsStr::new(\" \")));\n+    assert_eq!(\"hello dear world\", strings.join(OsStr::new(\" \")));\n+    assert_eq!(\"hellodearworld\", strings.join(OsStr::new(\"\")));\n+    assert_eq!(\"hello.\\n dear.\\n world\", strings.join(OsStr::new(\".\\n \")));\n+\n+    assert_eq!(\"dear world\", strings[1..].join(&OsString::from(\" \")));\n+\n+    let strings_abc = [OsString::from(\"a\"), OsString::from(\"b\"), OsString::from(\"c\")];\n+    assert_eq!(\"a b c\", strings_abc.join(OsStr::new(\" \")));\n+}\n+\n #[test]\n fn test_os_string_default() {\n     let os_string: OsString = Default::default();"}, {"sha": "d70befa9d20c8ffc4fe929f3e3a8e8f4c2148de0", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=9714e139ffb25f3b96b28110ae81677c8c1a7cf2", "patch": "@@ -241,6 +241,7 @@\n #![feature(intra_doc_pointers)]\n #![feature(lang_items)]\n #![feature(let_chains)]\n+#![feature(let_else)]\n #![feature(linkage)]\n #![feature(min_specialization)]\n #![feature(must_not_suspend)]\n@@ -300,6 +301,7 @@\n #![feature(toowned_clone_into)]\n #![feature(try_reserve_kind)]\n #![feature(vec_into_raw_parts)]\n+#![feature(slice_concat_trait)]\n //\n // Library features (unwind):\n #![feature(panic_unwind)]"}, {"sha": "12059e0b9c4b5750e4a613ace6984671c3a374fa", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=9714e139ffb25f3b96b28110ae81677c8c1a7cf2", "patch": "@@ -1401,6 +1401,18 @@ pre.rust {\n \tcursor: pointer;\n }\n \n+@keyframes rotating {\n+\tfrom {\n+\t\ttransform: rotate(0deg);\n+\t}\n+\tto {\n+\t\ttransform: rotate(360deg);\n+\t}\n+}\n+#settings-menu.rotate img {\n+\tanimation: rotating 2s linear infinite;\n+}\n+\n #help-button {\n \tfont-family: \"Fira Sans\", Arial, sans-serif;\n \ttext-align: center;"}, {"sha": "66a7d484f33b0f5523674a87ed744b91c986645a", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=9714e139ffb25f3b96b28110ae81677c8c1a7cf2", "patch": "@@ -301,7 +301,11 @@ function loadCss(cssFileName) {\n     }\n \n     getSettingsButton().onclick = event => {\n+        addClass(getSettingsButton(), \"rotate\");\n         event.preventDefault();\n+        // Sending request for the CSS and the JS files at the same time so it will\n+        // hopefully be loaded when the JS will generate the settings content.\n+        loadCss(\"settings\");\n         loadScript(window.settingsJS);\n     };\n "}, {"sha": "e447d09ab6b97711822b9bb7c2b2d06b3983d4db", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=9714e139ffb25f3b96b28110ae81677c8c1a7cf2", "patch": "@@ -3,7 +3,7 @@\n /* eslint prefer-const: \"error\" */\n /* eslint prefer-arrow-callback: \"error\" */\n // Local js definitions:\n-/* global getSettingValue, getVirtualKey, updateLocalStorage, updateSystemTheme, loadCss */\n+/* global getSettingValue, getVirtualKey, updateLocalStorage, updateSystemTheme */\n /* global addClass, removeClass, onEach, onEachLazy, NOT_DISPLAYED_ID */\n /* global MAIN_ID, getVar, getSettingsButton, switchDisplayedElement, getNotDisplayedElem */\n \n@@ -209,9 +209,6 @@\n             },\n         ];\n \n-        // First, we add the settings.css file.\n-        loadCss(\"settings\");\n-\n         // Then we build the DOM.\n         const el = document.createElement(\"section\");\n         el.id = \"settings\";\n@@ -274,5 +271,6 @@\n         if (!isSettingsPage) {\n             switchDisplayedElement(settingsMenu);\n         }\n+        removeClass(getSettingsButton(), \"rotate\");\n     }, 0);\n })();"}, {"sha": "8080dd7dc34dbaaa6c90dadc828bbab20601a9a7", "filename": "src/test/ui/lifetimes/issue-64173-unused-lifetimes.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/src%2Ftest%2Fui%2Flifetimes%2Fissue-64173-unused-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/src%2Ftest%2Fui%2Flifetimes%2Fissue-64173-unused-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-64173-unused-lifetimes.rs?ref=9714e139ffb25f3b96b28110ae81677c8c1a7cf2", "patch": "@@ -0,0 +1,19 @@\n+use std::mem::size_of;\n+\n+struct Foo<'s> { //~ ERROR: parameter `'s` is never used\n+    array: [(); size_of::<&Self>()],\n+    //~^ ERROR: generic `Self` types are currently not permitted in anonymous constants\n+}\n+\n+// The below is taken from https://github.com/rust-lang/rust/issues/66152#issuecomment-550275017\n+// as the root cause seems the same.\n+\n+const fn foo<T>() -> usize {\n+    0\n+}\n+\n+struct Bar<'a> { //~ ERROR: parameter `'a` is never used\n+    beta: [(); foo::<&'a ()>()], //~ ERROR: a non-static lifetime is not allowed in a `const`\n+}\n+\n+fn main() {}"}, {"sha": "a487cbea5371b03a47c0b0f1bfea48a2a6067867", "filename": "src/test/ui/lifetimes/issue-64173-unused-lifetimes.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/src%2Ftest%2Fui%2Flifetimes%2Fissue-64173-unused-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9714e139ffb25f3b96b28110ae81677c8c1a7cf2/src%2Ftest%2Fui%2Flifetimes%2Fissue-64173-unused-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-64173-unused-lifetimes.stderr?ref=9714e139ffb25f3b96b28110ae81677c8c1a7cf2", "patch": "@@ -0,0 +1,35 @@\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/issue-64173-unused-lifetimes.rs:16:23\n+   |\n+LL |     beta: [(); foo::<&'a ()>()],\n+   |                       ^^\n+   |\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+\n+error: generic `Self` types are currently not permitted in anonymous constants\n+  --> $DIR/issue-64173-unused-lifetimes.rs:4:28\n+   |\n+LL |     array: [(); size_of::<&Self>()],\n+   |                            ^^^^\n+\n+error[E0392]: parameter `'s` is never used\n+  --> $DIR/issue-64173-unused-lifetimes.rs:3:12\n+   |\n+LL | struct Foo<'s> {\n+   |            ^^ unused parameter\n+   |\n+   = help: consider removing `'s`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error[E0392]: parameter `'a` is never used\n+  --> $DIR/issue-64173-unused-lifetimes.rs:15:12\n+   |\n+LL | struct Bar<'a> {\n+   |            ^^ unused parameter\n+   |\n+   = help: consider removing `'a`, referring to it in a field, or using a marker such as `PhantomData`\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0392, E0658.\n+For more information about an error, try `rustc --explain E0392`."}]}