{"sha": "caf10b5ffe6977e79f8d5f1bb407d99d2b015b4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZjEwYjVmZmU2OTc3ZTc5ZjhkNWYxYmI0MDdkOTlkMmIwMTViNGE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-15T23:55:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-15T23:55:04Z"}, "message": "Rollup merge of #62634 - llogiq:uninit-array-docs, r=RalfJung\n\nLess unsafe in the array example of MaybeUninit docs\n\nI believe this is an acceptable way to initialize elements of `[MaybeUninit<T>; _]` arrays. Miri agrees. Conceptually, we are working at the array level, above the `MaybeUninit`, and as we are replacing it wholesale, this should pose no problem to soundness. And the code is easier to read.\n\nr? @RalfJung", "tree": {"sha": "fb978b5d347bf9e155faab504c586249b403c8a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb978b5d347bf9e155faab504c586249b403c8a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caf10b5ffe6977e79f8d5f1bb407d99d2b015b4a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdLRJYCRBK7hj4Ov3rIwAAdHIIAFHiIfmV6incM9Ero6Fq8nGu\nbompGVpXwqI2fqPWyqLgCbq8FPIh80p/K3xzUf5oL27wxCvjeElvV131+zX+HMKB\nzocwjtIDE2xkuKFcT4yGaFr+ditBCYES0OzejFQOCMpheUzvhehZJtj67DwnFRoh\nT5VoMT9sNWU364Jyncf1hh6nnFIbHJi6YJ4rtzygiw6c03ire32kveQf9ISagyjf\n7sjZKg3Nctnmtvg7qrJ7uA3j139A9bLNNXbiZOXfTZChhJ/jOe0oV+ewgp/TY63Q\nWQKy0DefWx9IxDJBxlSfYWgJEHFlUq0cKw0LyzLwN7M0GAHpyheWY0a6XOWILrk=\n=jEb5\n-----END PGP SIGNATURE-----\n", "payload": "tree fb978b5d347bf9e155faab504c586249b403c8a5\nparent 64ceba73afca4eddf1409427413fed5ed6711270\nparent cb3aa4ce2c5de3ffb38afb2ca6d7cf19cb3e9be7\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1563234904 -0400\ncommitter GitHub <noreply@github.com> 1563234904 -0400\n\nRollup merge of #62634 - llogiq:uninit-array-docs, r=RalfJung\n\nLess unsafe in the array example of MaybeUninit docs\n\nI believe this is an acceptable way to initialize elements of `[MaybeUninit<T>; _]` arrays. Miri agrees. Conceptually, we are working at the array level, above the `MaybeUninit`, and as we are replacing it wholesale, this should pose no problem to soundness. And the code is easier to read.\n\nr? @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caf10b5ffe6977e79f8d5f1bb407d99d2b015b4a", "html_url": "https://github.com/rust-lang/rust/commit/caf10b5ffe6977e79f8d5f1bb407d99d2b015b4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caf10b5ffe6977e79f8d5f1bb407d99d2b015b4a/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64ceba73afca4eddf1409427413fed5ed6711270", "url": "https://api.github.com/repos/rust-lang/rust/commits/64ceba73afca4eddf1409427413fed5ed6711270", "html_url": "https://github.com/rust-lang/rust/commit/64ceba73afca4eddf1409427413fed5ed6711270"}, {"sha": "cb3aa4ce2c5de3ffb38afb2ca6d7cf19cb3e9be7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3aa4ce2c5de3ffb38afb2ca6d7cf19cb3e9be7", "html_url": "https://github.com/rust-lang/rust/commit/cb3aa4ce2c5de3ffb38afb2ca6d7cf19cb3e9be7"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "f6f7ccffdb005d097cd688b7388465cc025214c5", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/caf10b5ffe6977e79f8d5f1bb407d99d2b015b4a/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caf10b5ffe6977e79f8d5f1bb407d99d2b015b4a/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=caf10b5ffe6977e79f8d5f1bb407d99d2b015b4a", "patch": "@@ -112,7 +112,6 @@ use crate::mem::ManuallyDrop;\n ///\n /// ```\n /// use std::mem::{self, MaybeUninit};\n-/// use std::ptr;\n ///\n /// let data = {\n ///     // Create an uninitialized array of `MaybeUninit`. The `assume_init` is\n@@ -122,10 +121,13 @@ use crate::mem::ManuallyDrop;\n ///         MaybeUninit::uninit().assume_init()\n ///     };\n ///\n-///     // Dropping a `MaybeUninit` does nothing, so if there is a panic during this loop,\n-///     // we have a memory leak, but there is no memory safety issue.\n+///     // Dropping a `MaybeUninit` does nothing. Thus using raw pointer\n+///     // assignment instead of `ptr::write` does not cause the old\n+///     // uninitialized value to be dropped. Also if there is a panic during\n+///     // this loop, we have a memory leak, but there is no memory safety\n+///     // issue.\n ///     for elem in &mut data[..] {\n-///         unsafe { ptr::write(elem.as_mut_ptr(), vec![42]); }\n+///         *elem = MaybeUninit::new(vec![42]);\n ///     }\n ///\n ///     // Everything is initialized. Transmute the array to the\n@@ -151,7 +153,7 @@ use crate::mem::ManuallyDrop;\n /// let mut data_len: usize = 0;\n ///\n /// for elem in &mut data[0..500] {\n-///     unsafe { ptr::write(elem.as_mut_ptr(), String::from(\"hello\")); }\n+///     *elem = MaybeUninit::new(String::from(\"hello\"));\n ///     data_len += 1;\n /// }\n ///"}]}