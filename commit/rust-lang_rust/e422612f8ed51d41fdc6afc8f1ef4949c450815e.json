{"sha": "e422612f8ed51d41fdc6afc8f1ef4949c450815e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MjI2MTJmOGVkNTFkNDFmZGM2YWZjOGYxZWY0OTQ5YzQ1MDgxNWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-09-10T15:23:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-10T15:23:15Z"}, "message": "Rollup merge of #87088 - FabianWolff:issue-87060, r=estebank\n\nFix stray notes when the source code is not available\n\nFixes #87060. To reproduce it with a local build of rustc, you have to copy the compiler (e.g. `build/x86_64-unknown-linux-gnu/stage1/`) somewhere and then rename the compiler source directory (maybe there is a smarter way as well). Then, rustc won't find the standard library sources and report stray notes such as\n```\nnote: deref defined here\n```\nwith no location for \"here\". Another example I've found is this:\n```rust\nuse std::ops::Add;\n\nfn foo<T: Add<Output=()>>(x: T) {\n    x + x;\n}\n\nfn main() {}\n```\n```\nerror[E0382]: use of moved value: `x`\n  --> binop.rs:4:9\n   |\n3  | fn foo<T: Add<Output=()>>(x: T) {\n   |                           - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n4  |     x + x;\n   |     ----^\n   |     |   |\n   |     |   value used here after move\n   |     `x` moved due to usage in operator\n   |\nnote: calling this operator moves the left-hand side\nhelp: consider further restricting this bound\n   |\n3  | fn foo<T: Add<Output=()> + Copy>(x: T) {\n   |                          ^^^^^^\n\nerror: aborting due to previous error\n```\nwhere, again, the note is supposed to point somewhere but doesn't. I have fixed this by checking whether the corresponding source code is actually available before emitting the note.", "tree": {"sha": "564fd1f01cf09a0548c263d96571f8fae87ed8c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/564fd1f01cf09a0548c263d96571f8fae87ed8c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e422612f8ed51d41fdc6afc8f1ef4949c450815e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhO3hjCRBK7hj4Ov3rIwAAuZEIAFqQbvuRDHUOImSjDDUp43Cf\nwP/ElQgUMVky80L0qraCrnlYDUOWMJ3STNc6fdQOMjhkvG28+/vl9v/8qCIHr40G\nNLPuoDX3q7WNiWGU7HUllknnFz13p4JD/V1VuZITTrD61HxcbLxrG5NaV73aU7wM\nBi8FS/R1kjYoQwthzmWLnJr+KGbjRSrwOidk0NglepmpOQlO1fqP6ZvUglP97/Xj\nFUZa9apyjO3t+EVDygaYA5W5bEinCRvvn2YvYytOBUldPMMRekTcZRV517HbbLhL\nvL+FvAWH3P3varDvYwOognMffbLzLIFl/NLwELZmfM7kOvtzbFvZkWYSgAnQpbE=\n=V8YF\n-----END PGP SIGNATURE-----\n", "payload": "tree 564fd1f01cf09a0548c263d96571f8fae87ed8c2\nparent 000dbd27f146f4fd6ee2fb5e0f3060c440a08898\nparent 57fcb2e2d63306e762943b9edffa4454e89ef665\nauthor Manish Goregaokar <manishsmail@gmail.com> 1631287395 -0700\ncommitter GitHub <noreply@github.com> 1631287395 -0700\n\nRollup merge of #87088 - FabianWolff:issue-87060, r=estebank\n\nFix stray notes when the source code is not available\n\nFixes #87060. To reproduce it with a local build of rustc, you have to copy the compiler (e.g. `build/x86_64-unknown-linux-gnu/stage1/`) somewhere and then rename the compiler source directory (maybe there is a smarter way as well). Then, rustc won't find the standard library sources and report stray notes such as\n```\nnote: deref defined here\n```\nwith no location for \"here\". Another example I've found is this:\n```rust\nuse std::ops::Add;\n\nfn foo<T: Add<Output=()>>(x: T) {\n    x + x;\n}\n\nfn main() {}\n```\n```\nerror[E0382]: use of moved value: `x`\n  --> binop.rs:4:9\n   |\n3  | fn foo<T: Add<Output=()>>(x: T) {\n   |                           - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n4  |     x + x;\n   |     ----^\n   |     |   |\n   |     |   value used here after move\n   |     `x` moved due to usage in operator\n   |\nnote: calling this operator moves the left-hand side\nhelp: consider further restricting this bound\n   |\n3  | fn foo<T: Add<Output=()> + Copy>(x: T) {\n   |                          ^^^^^^\n\nerror: aborting due to previous error\n```\nwhere, again, the note is supposed to point somewhere but doesn't. I have fixed this by checking whether the corresponding source code is actually available before emitting the note.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e422612f8ed51d41fdc6afc8f1ef4949c450815e", "html_url": "https://github.com/rust-lang/rust/commit/e422612f8ed51d41fdc6afc8f1ef4949c450815e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e422612f8ed51d41fdc6afc8f1ef4949c450815e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "000dbd27f146f4fd6ee2fb5e0f3060c440a08898", "url": "https://api.github.com/repos/rust-lang/rust/commits/000dbd27f146f4fd6ee2fb5e0f3060c440a08898", "html_url": "https://github.com/rust-lang/rust/commit/000dbd27f146f4fd6ee2fb5e0f3060c440a08898"}, {"sha": "57fcb2e2d63306e762943b9edffa4454e89ef665", "url": "https://api.github.com/repos/rust-lang/rust/commits/57fcb2e2d63306e762943b9edffa4454e89ef665", "html_url": "https://github.com/rust-lang/rust/commit/57fcb2e2d63306e762943b9edffa4454e89ef665"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "f4cbbb60b053a2625f1c4578c96545d09a04a53c", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e422612f8ed51d41fdc6afc8f1ef4949c450815e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e422612f8ed51d41fdc6afc8f1ef4949c450815e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=e422612f8ed51d41fdc6afc8f1ef4949c450815e", "patch": "@@ -218,7 +218,19 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             );\n                             if self.fn_self_span_reported.insert(fn_span) {\n                                 err.span_note(\n-                                    self_arg.span,\n+                                    // Check whether the source is accessible\n+                                    if self\n+                                        .infcx\n+                                        .tcx\n+                                        .sess\n+                                        .source_map()\n+                                        .span_to_snippet(self_arg.span)\n+                                        .is_ok()\n+                                    {\n+                                        self_arg.span\n+                                    } else {\n+                                        fn_call_span\n+                                    },\n                                     \"calling this operator moves the left-hand side\",\n                                 );\n                             }\n@@ -429,7 +441,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     deref_target_ty\n                 ));\n \n-                err.span_note(deref_target, \"deref defined here\");\n+                // Check first whether the source is accessible (issue #87060)\n+                if self.infcx.tcx.sess.source_map().span_to_snippet(deref_target).is_ok() {\n+                    err.span_note(deref_target, \"deref defined here\");\n+                }\n             }\n \n             if let Some((_, mut old_err)) ="}]}