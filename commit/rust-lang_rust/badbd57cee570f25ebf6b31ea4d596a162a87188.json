{"sha": "badbd57cee570f25ebf6b31ea4d596a162a87188", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZGJkNTdjZWU1NzBmMjVlYmY2YjMxZWE0ZDU5NmExNjJhODcxODg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-30T08:58:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-30T08:58:30Z"}, "message": "update for rustc warning about missing dyn", "tree": {"sha": "8df7443b19eeee3b24ea00732a1a0afd1555eff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8df7443b19eeee3b24ea00732a1a0afd1555eff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/badbd57cee570f25ebf6b31ea4d596a162a87188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/badbd57cee570f25ebf6b31ea4d596a162a87188", "html_url": "https://github.com/rust-lang/rust/commit/badbd57cee570f25ebf6b31ea4d596a162a87188", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/badbd57cee570f25ebf6b31ea4d596a162a87188/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dfbebdd5eddb7c872ad843a0c0e47af066b18bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dfbebdd5eddb7c872ad843a0c0e47af066b18bd", "html_url": "https://github.com/rust-lang/rust/commit/9dfbebdd5eddb7c872ad843a0c0e47af066b18bd"}], "stats": {"total": 110, "additions": 55, "deletions": 55}, "files": [{"sha": "5504e77097b735d970d5473bede6f2a39a674822", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -1 +1 @@\n-81970852e172c04322cbf8ba23effabeb491c83c\n+c28084ac16af4ab594b6860958df140e7c876a13"}, {"sha": "e7620cd42f7000111bd3c669887445878ef55143", "filename": "tests/run-pass/box_box_trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fbox_box_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fbox_box_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbox_box_trait.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -14,18 +14,18 @@ trait MyTrait { fn dummy(&self) { } }\n impl MyTrait for Box<DroppableStruct> {}\n \n #[allow(dead_code)]\n-struct Whatever { w: Box<MyTrait+'static> }\n+struct Whatever { w: Box<dyn MyTrait+'static> }\n \n impl  Whatever {\n-    fn new(w: Box<MyTrait+'static>) -> Whatever {\n+    fn new(w: Box<dyn MyTrait+'static>) -> Whatever {\n         Whatever { w: w }\n     }\n }\n \n fn main() {\n     {\n         let f: Box<_> = box DroppableStruct;\n-        let _a = Whatever::new(box f as Box<MyTrait>);\n+        let _a = Whatever::new(box f as Box<dyn MyTrait>);\n     }\n     assert!(unsafe { DROPPED });\n }"}, {"sha": "36162d320212ae6ffc7c555d3e0c694308d8ecaf", "filename": "tests/run-pass/call_drop_on_fat_ptr_array_elements.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fcall_drop_on_fat_ptr_array_elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fcall_drop_on_fat_ptr_array_elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcall_drop_on_fat_ptr_array_elements.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -13,7 +13,7 @@ impl Drop for Bar {\n }\n \n fn main() {\n-    let b: [Box<Foo>; 4] = [Box::new(Bar), Box::new(Bar), Box::new(Bar), Box::new(Bar)];\n+    let b: [Box<dyn Foo>; 4] = [Box::new(Bar), Box::new(Bar), Box::new(Bar), Box::new(Bar)];\n     assert_eq!(unsafe { DROP_COUNT }, 0);\n     drop(b);\n     assert_eq!(unsafe { DROP_COUNT }, 4);"}, {"sha": "97ba69c9fe2882a81ba99b92241dcd8d571c1db2", "filename": "tests/run-pass/call_drop_through_trait_object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fcall_drop_through_trait_object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fcall_drop_through_trait_object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcall_drop_through_trait_object.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -13,7 +13,7 @@ impl Drop for Bar {\n impl Foo for Bar {}\n \n fn main() {\n-    let b: Box<Foo> = Box::new(Bar);\n+    let b: Box<dyn Foo> = Box::new(Bar);\n     assert!(unsafe { !DROP_CALLED });\n     drop(b);\n     assert!(unsafe { DROP_CALLED });"}, {"sha": "172a4580dc10548f0692f658cf0bde59fcdfffa9", "filename": "tests/run-pass/call_drop_through_trait_object_rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fcall_drop_through_trait_object_rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fcall_drop_through_trait_object_rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcall_drop_through_trait_object_rc.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -15,7 +15,7 @@ impl Foo for Bar {}\n use std::rc::Rc;\n \n fn main() {\n-    let b: Rc<Foo> = Rc::new(Bar);\n+    let b: Rc<dyn Foo> = Rc::new(Bar);\n     assert!(unsafe { !DROP_CALLED });\n     drop(b);\n     assert!(unsafe { DROP_CALLED });"}, {"sha": "544510be9bb0997de3534ba3bea99b01e87d7499", "filename": "tests/run-pass/cast-rfc0401-vtable-kinds.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -13,9 +13,9 @@ impl<T> Foo<T> for () {}\n impl Foo<u32> for u32 { fn foo(&self, _: u32) -> u32 { self+43 } }\n impl Bar for () {}\n \n-unsafe fn round_trip_and_call<'a>(t: *const (Foo<u32>+'a)) -> u32 {\n-    let foo_e : *const Foo<u16> = t as *const _;\n-    let r_1 = foo_e as *mut Foo<u32>;\n+unsafe fn round_trip_and_call<'a>(t: *const (dyn Foo<u32>+'a)) -> u32 {\n+    let foo_e : *const dyn Foo<u16> = t as *const _;\n+    let r_1 = foo_e as *mut dyn Foo<u32>;\n \n     (&*r_1).foo(0)\n }\n@@ -31,8 +31,8 @@ fn foo_to_bar<T:?Sized>(u: *const FooS<T>) -> *const BarS<T> {\n \n fn main() {\n     let x = 4u32;\n-    let y : &Foo<u32> = &x;\n-    let fl = unsafe { round_trip_and_call(y as *const Foo<u32>) };\n+    let y : &dyn Foo<u32> = &x;\n+    let fl = unsafe { round_trip_and_call(y as *const dyn Foo<u32>) };\n     assert_eq!(fl, (43+4));\n \n     let s = FooS([0,1,2]);"}, {"sha": "7cd0c851b63872e8da78685a9f1498a5a4e79a40", "filename": "tests/run-pass/dst-field-align.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fdst-field-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fdst-field-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdst-field-align.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -26,15 +26,15 @@ fn main() {\n     // Test that zero-offset works properly\n     let b : Baz<usize> = Baz { a: 7 };\n     assert_eq!(b.a.get(), 7);\n-    let b : &Baz<Bar> = &b;\n+    let b : &Baz<dyn Bar> = &b;\n     assert_eq!(b.a.get(), 7);\n \n     // Test that the field is aligned properly\n     let f : Foo<usize> = Foo { a: 0, b: 11 };\n     assert_eq!(f.b.get(), 11);\n     let ptr1 : *const u8 = &f.b as *const _ as *const u8;\n \n-    let f : &Foo<Bar> = &f;\n+    let f : &Foo<dyn Bar> = &f;\n     let ptr2 : *const u8 = &f.b as *const _ as *const u8;\n     assert_eq!(f.b.get(), 11);\n \n@@ -44,13 +44,13 @@ fn main() {\n     // Test that nested DSTs work properly\n     let f : Foo<Foo<usize>> = Foo { a: 0, b: Foo { a: 1, b: 17 }};\n     assert_eq!(f.b.b.get(), 17);\n-    let f : &Foo<Foo<Bar>> = &f;\n+    let f : &Foo<Foo<dyn Bar>> = &f;\n     assert_eq!(f.b.b.get(), 17);\n \n     // Test that get the pointer via destructuring works\n \n     let f : Foo<usize> = Foo { a: 0, b: 11 };\n-    let f : &Foo<Bar> = &f;\n+    let f : &Foo<dyn Bar> = &f;\n     let &Foo { a: _, b: ref bar } = f;\n     assert_eq!(bar.get(), 11);\n "}, {"sha": "0fe2b72b8c6abea10b5019da3a897df4d5fc0b45", "filename": "tests/run-pass/dst-raw.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fdst-raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fdst-raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdst-raw.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -21,15 +21,15 @@ struct Foo<T: ?Sized> {\n pub fn main() {\n     // raw trait object\n     let x = A { f: 42 };\n-    let z: *const Trait = &x;\n+    let z: *const dyn Trait = &x;\n     let r = unsafe {\n         (&*z).foo()\n     };\n     assert_eq!(r, 42);\n \n     // raw DST struct\n     let p = Foo {f: A { f: 42 }};\n-    let o: *const Foo<Trait> = &p;\n+    let o: *const Foo<dyn Trait> = &p;\n     let r = unsafe {\n         (&*o).f.foo()\n     };\n@@ -64,14 +64,14 @@ pub fn main() {\n \n     // all of the above with *mut\n     let mut x = A { f: 42 };\n-    let z: *mut Trait = &mut x;\n+    let z: *mut dyn Trait = &mut x;\n     let r = unsafe {\n         (&*z).foo()\n     };\n     assert_eq!(r, 42);\n \n     let mut p = Foo {f: A { f: 42 }};\n-    let o: *mut Foo<Trait> = &mut p;\n+    let o: *mut Foo<dyn Trait> = &mut p;\n     let r = unsafe {\n         (&*o).f.foo()\n     };"}, {"sha": "dcbbb5cb6a2ceb2adf46e9d0dc51df8c38c8a4b6", "filename": "tests/run-pass/fn_item_as_closure_trait_object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Ffn_item_as_closure_trait_object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Ffn_item_as_closure_trait_object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffn_item_as_closure_trait_object.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -1,6 +1,6 @@\n fn foo() {}\n \n fn main() {\n-    let f: &Fn() = &foo;\n+    let f: &dyn Fn() = &foo;\n     f();\n }"}, {"sha": "257028c4f0d8ebf4a8e45cbc5a875da3eb0072c3", "filename": "tests/run-pass/fn_item_with_args_as_closure_trait_object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Ffn_item_with_args_as_closure_trait_object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Ffn_item_with_args_as_closure_trait_object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffn_item_with_args_as_closure_trait_object.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -3,6 +3,6 @@ fn foo(i: i32) {\n }\n \n fn main() {\n-    let f: &Fn(i32) = &foo;\n+    let f: &dyn Fn(i32) = &foo;\n     f(42);\n }"}, {"sha": "98111f304c893bf58609c6d259937da7d1c7f98a", "filename": "tests/run-pass/fn_item_with_multiple_args_as_closure_trait_object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Ffn_item_with_multiple_args_as_closure_trait_object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Ffn_item_with_multiple_args_as_closure_trait_object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffn_item_with_multiple_args_as_closure_trait_object.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -11,8 +11,8 @@ fn bar(i: i32, j: i32, k: f32) {\n \n \n fn main() {\n-    let f: &Fn(i32, i32) = &foo;\n+    let f: &dyn Fn(i32, i32) = &foo;\n     f(42, 55);\n-    let f: &Fn(i32, i32, f32) = &bar;\n+    let f: &dyn Fn(i32, i32, f32) = &bar;\n     f(42, 55, 3.14159);\n }"}, {"sha": "89daed81507f1a03a278f1e266d426fd62cd5729", "filename": "tests/run-pass/fn_ptr_as_closure_trait_object.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Ffn_ptr_as_closure_trait_object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Ffn_ptr_as_closure_trait_object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffn_ptr_as_closure_trait_object.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -6,10 +6,10 @@ fn baa(u: u32, f: f32) {\n }\n \n fn main() {\n-    let f: &Fn() = &(foo as fn());\n+    let f: &dyn Fn() = &(foo as fn());\n     f();\n-    let f: &Fn(u32) = &(bar as fn(u32));\n+    let f: &dyn Fn(u32) = &(bar as fn(u32));\n     f(42);\n-    let f: &Fn(u32, f32) = &(baa as fn(u32, f32));\n+    let f: &dyn Fn(u32, f32) = &(baa as fn(u32, f32));\n     f(42, 3.141);\n }"}, {"sha": "19049b9add5c1c399a13c599c9b2a9a079679bb6", "filename": "tests/run-pass/issue-20575.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fissue-20575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fissue-20575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-20575.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -1,7 +1,7 @@\n // Test that overloaded calls work with zero arity closures\n \n fn main() {\n-    let functions: [Box<Fn() -> Option<()>>; 1] = [Box::new(|| None)];\n+    let functions: [Box<dyn Fn() -> Option<()>>; 1] = [Box::new(|| None)];\n \n     let _val: Option<Vec<()>> = functions.iter().map(|f| (*f)()).collect();\n }"}, {"sha": "f3c2f58ddbca12048d3f93015bf5819e76c5d2b8", "filename": "tests/run-pass/issue-23261.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fissue-23261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fissue-23261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-23261.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -40,7 +40,7 @@ fn check_both(val: &Foo<[u8]>) {\n     }\n }\n \n-fn check_trait_obj(val: &Foo<Get>) {\n+fn check_trait_obj(val: &Foo<dyn Get>) {\n     match *val {\n         Foo { a, ref inner } => {\n             assert_eq!(a, 32);\n@@ -55,6 +55,6 @@ fn main() {\n     check_dst_val(foo);\n     check_both(foo);\n \n-    let foo: &Foo<Get> = &Foo { a: 32, inner: 32 };\n+    let foo: &Foo<dyn Get> = &Foo { a: 32, inner: 32 };\n     check_trait_obj(foo);\n }"}, {"sha": "78f30e78db7661de224424fda8cf2a36ecb69f5c", "filename": "tests/run-pass/issue-26709.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fissue-26709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fissue-26709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-26709.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -10,7 +10,7 @@ fn main() {\n     let mut x = 0;\n     {\n         let wrapper = Box::new(Wrapper(&mut x, 123));\n-        let _val: Box<Wrapper<Send>> = wrapper;\n+        let _val: Box<Wrapper<dyn Send>> = wrapper;\n     }\n     assert_eq!(432, x)\n }"}, {"sha": "10dec30c64ca7125deb4c7fab72fd2514ea948ad", "filename": "tests/run-pass/issue-30530.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fissue-30530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fissue-30530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-30530.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -17,15 +17,15 @@\n pub enum Handler {\n     Default,\n     #[allow(dead_code)]\n-    Custom(*mut Box<Fn()>),\n+    Custom(*mut Box<dyn Fn()>),\n }\n \n fn main() {\n     take(Handler::Default, Box::new(main));\n }\n \n #[inline(never)]\n-pub fn take(h: Handler, f: Box<Fn()>) -> Box<Fn()> {\n+pub fn take(h: Handler, f: Box<dyn Fn()>) -> Box<dyn Fn()> {\n     unsafe {\n         match h {\n             Handler::Custom(ptr) => *Box::from_raw(ptr),"}, {"sha": "36b58c642d7d53fd5b960505304eabc8b34a2bac", "filename": "tests/run-pass/issue-33387.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fissue-33387.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fissue-33387.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-33387.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -5,5 +5,5 @@ trait Foo {}\n impl Foo for [u8; 2] {}\n \n fn main() {\n-    let _val: Arc<Foo + Send> = Arc::new([3, 4]);\n+    let _val: Arc<dyn Foo + Send> = Arc::new([3, 4]);\n }"}, {"sha": "fb0bd8e202fffa01305d63c3cfcb696d8b21618d", "filename": "tests/run-pass/issue-35815.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fissue-35815.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fissue-35815.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-35815.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -10,6 +10,6 @@ struct Foo<T: ?Sized> {\n \n fn main() {\n     let foo: &Foo<i32> = &Foo { a: 1, b: false, c: 2i32 };\n-    let foo_unsized: &Foo<Send> = foo;\n+    let foo_unsized: &Foo<dyn Send> = foo;\n     assert_eq!(mem::size_of_val(foo), mem::size_of_val(foo_unsized));\n }"}, {"sha": "fb1c19b04e9984482ed6f34aa26c5057e9baabff", "filename": "tests/run-pass/issue-3794.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-3794.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -15,7 +15,7 @@ impl T for S {\n     }\n }\n \n-fn print_t(t: &T) {\n+fn print_t(t: &dyn T) {\n     t.print();\n }\n \n@@ -26,6 +26,6 @@ fn print_s(s: &S) {\n pub fn main() {\n     let s: Box<S> = box S { s: 5 };\n     print_s(&*s);\n-    let t: Box<T> = s as Box<T>;\n+    let t: Box<dyn T> = s as Box<dyn T>;\n     print_t(&*t);\n }"}, {"sha": "9d137f706bd331c57e79684cdfd6fd973c615dc0", "filename": "tests/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -3,7 +3,7 @@\n #[allow(dead_code)]\n struct A { a: Box<isize> }\n \n-fn foo() -> Box<FnMut() -> isize + 'static> {\n+fn foo() -> Box<dyn FnMut() -> isize + 'static> {\n     let k: Box<_> = Box::new(22);\n     let _u = A {a: k.clone()};\n     let result  = || 22;"}, {"sha": "bfc821f799ee4bdd974e7add5918a246c38e5c98", "filename": "tests/run-pass/mir_coercions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fmir_coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fmir_coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmir_coercions.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -3,12 +3,12 @@\n use std::ops::CoerceUnsized;\n use std::marker::Unsize;\n \n-fn identity_coercion(x: &(Fn(u32)->u32 + Send)) -> &Fn(u32)->u32 {\n+fn identity_coercion(x: &(dyn Fn(u32)->u32 + Send)) -> &dyn Fn(u32)->u32 {\n     x\n }\n fn fn_coercions(f: &fn(u32) -> u32) ->\n     (unsafe fn(u32) -> u32,\n-     &(Fn(u32) -> u32+Send))\n+     &(dyn Fn(u32) -> u32 + Send))\n {\n     (*f, f)\n }\n@@ -34,8 +34,8 @@ fn coerce_triv_ptr_wrapper(p: TrivPtrWrapper<[u8; 3]>) -> TrivPtrWrapper<[u8]> {\n     p\n }\n \n-fn coerce_fat_ptr_wrapper(p: PtrWrapper<Fn(u32) -> u32+Send>)\n-                          -> PtrWrapper<Fn(u32) -> u32> {\n+fn coerce_fat_ptr_wrapper(p: PtrWrapper<dyn Fn(u32) -> u32 + Send>)\n+                          -> PtrWrapper<dyn Fn(u32) -> u32> {\n     p\n }\n \n@@ -67,7 +67,7 @@ fn main() {\n     let z = coerce_fat_ptr_wrapper(PtrWrapper(2,3,(),&square_local));\n     assert_eq!((z.3)(6), 36);\n \n-    let z: PtrWrapper<Fn(u32) -> u32> =\n+    let z: PtrWrapper<dyn Fn(u32) -> u32> =\n         coerce_ptr_wrapper_poly(PtrWrapper(2,3,(),&square_local));\n     assert_eq!((z.3)(6), 36);\n }"}, {"sha": "02d53540b83c3592b51d7b6404f2f0b106953614", "filename": "tests/run-pass/multi_arg_closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fmulti_arg_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fmulti_arg_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmulti_arg_closure.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -1,4 +1,4 @@\n-fn foo(f: &mut FnMut(isize, isize) -> isize) -> isize {\n+fn foo(f: &mut dyn FnMut(isize, isize) -> isize) -> isize {\n     f(1, 2)\n }\n "}, {"sha": "e6a5017847d4d78d04e2f13f56bc5df632be0f39", "filename": "tests/run-pass/non_capture_closure_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fnon_capture_closure_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fnon_capture_closure_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fnon_capture_closure_to_fn_ptr.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     BAR(44, 45);\n     let bar: unsafe fn(i32, i32) = BAR;\n     unsafe { bar(46, 47) };\n-    let boo: &Fn(i32, i32) = &BAR;\n+    let boo: &dyn Fn(i32, i32) = &BAR;\n     boo(48, 49);\n \n     let f = magic(||{}) as fn();"}, {"sha": "d731fe8fd4c303d0f71b192d1d2277c5fd9ecc7b", "filename": "tests/run-pass/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frc.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -64,8 +64,8 @@ fn rc_from() {\n }\n \n fn rc_fat_ptr_eq() {\n-    let p = Rc::new(1) as Rc<Debug>;\n-    let a: *const Debug = &*p;\n+    let p = Rc::new(1) as Rc<dyn Debug>;\n+    let a: *const dyn Debug = &*p;\n     let r = Rc::into_raw(p);\n     assert!(a == r);\n     drop(unsafe { Rc::from_raw(r) });"}, {"sha": "78aeea64814a7d6eb9cdf1e4ee8b3f263a11f047", "filename": "tests/run-pass/regions-lifetime-nonfree-late-bound.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -16,15 +16,15 @@\n \n pub fn main() {\n     fn explicit() {\n-        fn test<F>(_x: Option<Box<F>>) where F: FnMut(Box<for<'a> FnMut(&'a isize)>) {}\n-        test(Some(box |_f: Box<for<'a> FnMut(&'a isize)>| {}));\n+        fn test<F>(_x: Option<Box<F>>) where F: FnMut(Box<dyn for<'a> FnMut(&'a isize)>) {}\n+        test(Some(box |_f: Box<dyn for<'a> FnMut(&'a isize)>| {}));\n     }\n \n     // The code below is shorthand for the code above (and more likely\n     // to represent what one encounters in practice).\n     fn implicit() {\n-        fn test<F>(_x: Option<Box<F>>) where F: FnMut(Box<        FnMut(&   isize)>) {}\n-        test(Some(box |_f: Box<        FnMut(&   isize)>| {}));\n+        fn test<F>(_x: Option<Box<F>>) where F: FnMut(Box<dyn         FnMut(&   isize)>) {}\n+        test(Some(box |_f: Box<dyn         FnMut(&   isize)>| {}));\n     }\n \n     explicit();"}, {"sha": "03d2db400f01368fb26bdd55a6bd088d33c53afb", "filename": "tests/run-pass/traits.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badbd57cee570f25ebf6b31ea4d596a162a87188/tests%2Frun-pass%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftraits.rs?ref=badbd57cee570f25ebf6b31ea4d596a162a87188", "patch": "@@ -13,17 +13,17 @@ impl Trait for Struct {\n struct Foo<T: ?Sized>(T);\n \n fn main() {\n-    let y: &Trait = &Struct(42);\n+    let y: &dyn Trait = &Struct(42);\n     y.method();\n     let x: Foo<Struct> = Foo(Struct(42));\n-    let y: &Foo<Trait> = &x;\n+    let y: &Foo<dyn Trait> = &x;\n     y.0.method();\n \n-    let x: Box<Fn(i32) -> i32> = Box::new(|x| x * 2);\n+    let x: Box<dyn Fn(i32) -> i32> = Box::new(|x| x * 2);\n     assert_eq!(x(21), 42);\n     let mut i = 5;\n     {\n-        let mut x: Box<FnMut()> = Box::new(|| i *= 2);\n+        let mut x: Box<dyn FnMut()> = Box::new(|| i *= 2);\n         x(); x();\n     }\n     assert_eq!(i, 20);"}]}