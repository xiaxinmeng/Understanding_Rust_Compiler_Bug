{"sha": "b07eab5faab16a975df89eae8ea5d7276bc44507", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwN2VhYjVmYWFiMTZhOTc1ZGY4OWVhZThlYTVkNzI3NmJjNDQ1MDc=", "commit": {"author": {"name": "Armin Ronacher", "email": "armin.ronacher@active-4.com", "date": "2013-02-19T01:34:48Z"}, "committer": {"name": "Armin Ronacher", "email": "armin.ronacher@active-4.com", "date": "2013-02-19T01:34:48Z"}, "message": "Improved windows path handling support", "tree": {"sha": "bd5fc46f9b298ebea03ff8c506488648989b7ed9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd5fc46f9b298ebea03ff8c506488648989b7ed9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b07eab5faab16a975df89eae8ea5d7276bc44507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b07eab5faab16a975df89eae8ea5d7276bc44507", "html_url": "https://github.com/rust-lang/rust/commit/b07eab5faab16a975df89eae8ea5d7276bc44507", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b07eab5faab16a975df89eae8ea5d7276bc44507/comments", "author": {"login": "mitsuhiko", "id": 7396, "node_id": "MDQ6VXNlcjczOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitsuhiko", "html_url": "https://github.com/mitsuhiko", "followers_url": "https://api.github.com/users/mitsuhiko/followers", "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}", "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions", "organizations_url": "https://api.github.com/users/mitsuhiko/orgs", "repos_url": "https://api.github.com/users/mitsuhiko/repos", "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}", "received_events_url": "https://api.github.com/users/mitsuhiko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitsuhiko", "id": 7396, "node_id": "MDQ6VXNlcjczOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitsuhiko", "html_url": "https://github.com/mitsuhiko", "followers_url": "https://api.github.com/users/mitsuhiko/followers", "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}", "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions", "organizations_url": "https://api.github.com/users/mitsuhiko/orgs", "repos_url": "https://api.github.com/users/mitsuhiko/repos", "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}", "received_events_url": "https://api.github.com/users/mitsuhiko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8d8f6cfec50cad6b35e3b5fc604abc01a26143e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8d8f6cfec50cad6b35e3b5fc604abc01a26143e", "html_url": "https://github.com/rust-lang/rust/commit/c8d8f6cfec50cad6b35e3b5fc604abc01a26143e"}], "stats": {"total": 118, "additions": 100, "deletions": 18}, "files": [{"sha": "96a921cf20bfbf4a22492dd4455ab08ec6d02dd7", "filename": "src/libcore/path.rs", "status": "modified", "additions": 100, "deletions": 18, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/b07eab5faab16a975df89eae8ea5d7276bc44507/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07eab5faab16a975df89eae8ea5d7276bc44507/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=b07eab5faab16a975df89eae8ea5d7276bc44507", "patch": "@@ -697,21 +697,44 @@ impl GenericPath for WindowsPath {\n     }\n \n     pure fn unsafe_join(other: &WindowsPath) -> WindowsPath {\n+        /* rhs not absolute is simple push */\n         if !other.is_absolute {\n-            self.push_rel(other)\n-        } else {\n-            WindowsPath {\n-                host: match other.host {\n-                    None => copy self.host,\n-                    Some(copy x) => Some(x)\n-                },\n-                device: match other.device {\n-                    None => copy self.device,\n-                    Some(copy x) => Some(x)\n-                },\n-                is_absolute: true,\n-                components: copy other.components\n+            return self.push_many(other.components);\n+        }\n+\n+        /* if rhs has a host set, then the whole thing wins */\n+        match other.host {\n+            Some(copy host) => {\n+                return WindowsPath {\n+                    host: Some(host),\n+                    device: copy other.device,\n+                    is_absolute: true,\n+                    components: copy other.components\n+                };\n+            }\n+            _ => {}\n+        }\n+\n+        /* if rhs has a device set, then a part wins */\n+        match other.device {\n+            Some(copy device) => {\n+                return WindowsPath {\n+                    host: None,\n+                    device: Some(device),\n+                    is_absolute: true,\n+                    components: copy other.components\n+                };\n             }\n+            _ => {}\n+        }\n+\n+        /* fallback: host and device of lhs win, but the\n+           whole path of the right */\n+        WindowsPath {\n+            host: copy self.host,\n+            device: copy self.device,\n+            is_absolute: self.is_absolute || other.is_absolute,\n+            components: copy other.components\n         }\n     }\n \n@@ -755,7 +778,10 @@ impl GenericPath for WindowsPath {\n     pure fn normalize() -> WindowsPath {\n         return WindowsPath {\n             host: copy self.host,\n-            device: copy self.device,\n+            device: match self.device {\n+                None => None,\n+                Some(ref device) => Some(device.to_upper())\n+            },\n             is_absolute: self.is_absolute,\n             components: normalize(self.components)\n         }\n@@ -794,13 +820,13 @@ pub mod windows {\n \n     pub pure fn extract_unc_prefix(s: &str) -> Option<(~str,~str)> {\n         if (s.len() > 1 &&\n-            s[0] == '\\\\' as u8 &&\n-            s[1] == '\\\\' as u8) {\n+            (s[0] == '\\\\' as u8 || s[0] == '/' as u8) &&\n+            s[0] == s[1]) {\n             let mut i = 2;\n             while i < s.len() {\n-                if s[i] == '\\\\' as u8 {\n+                if is_sep(s[i]) {\n                     let pre = s.slice(2, i);\n-                    let rest = s.slice(i, s.len());\n+                    let mut rest = s.slice(i, s.len());\n                     return Some((pre, rest));\n                 }\n                 i += 1;\n@@ -946,13 +972,21 @@ mod tests {\n     #[test]\n     fn test_extract_unc_prefixes() {\n         assert windows::extract_unc_prefix(\"\\\\\\\\\").is_none();\n+        assert windows::extract_unc_prefix(\"//\").is_none();\n         assert windows::extract_unc_prefix(\"\\\\\\\\hi\").is_none();\n+        assert windows::extract_unc_prefix(\"//hi\").is_none();\n         assert windows::extract_unc_prefix(\"\\\\\\\\hi\\\\\") ==\n             Some((~\"hi\", ~\"\\\\\"));\n+        assert windows::extract_unc_prefix(\"//hi\\\\\") ==\n+            Some((~\"hi\", ~\"\\\\\"));\n         assert windows::extract_unc_prefix(\"\\\\\\\\hi\\\\there\") ==\n             Some((~\"hi\", ~\"\\\\there\"));\n+        assert windows::extract_unc_prefix(\"//hi/there\") ==\n+            Some((~\"hi\", ~\"/there\"));\n         assert windows::extract_unc_prefix(\"\\\\\\\\hi\\\\there\\\\friends.txt\") ==\n             Some((~\"hi\", ~\"\\\\there\\\\friends.txt\"));\n+        assert windows::extract_unc_prefix(\"//hi\\\\there\\\\friends.txt\") ==\n+            Some((~\"hi\", ~\"\\\\there\\\\friends.txt\"));\n     }\n \n     #[test]\n@@ -1011,5 +1045,53 @@ mod tests {\n             .push_many([~\"lib\", ~\"thingy.dll\"])\n             .with_filename(\"librustc.dll\")),\n           \"c:\\\\program files (x86)\\\\rust\\\\lib\\\\librustc.dll\");\n+\n+        t(&(WindowsPath(\"\\\\\\\\computer\\\\share\")\n+            .unsafe_join(&WindowsPath(\"\\\\a\"))),\n+          \"\\\\\\\\computer\\\\a\");\n+\n+        t(&(WindowsPath(\"//computer/share\")\n+            .unsafe_join(&WindowsPath(\"\\\\a\"))),\n+          \"\\\\\\\\computer\\\\a\");\n+\n+        t(&(WindowsPath(\"//computer/share\")\n+            .unsafe_join(&WindowsPath(\"\\\\\\\\computer\\\\share\"))),\n+          \"\\\\\\\\computer\\\\share\");\n+\n+        t(&(WindowsPath(\"C:/whatever\")\n+            .unsafe_join(&WindowsPath(\"//computer/share/a/b\"))),\n+          \"\\\\\\\\computer\\\\share\\\\a\\\\b\");\n+\n+        t(&(WindowsPath(\"C:\")\n+            .unsafe_join(&WindowsPath(\"D:/foo\"))),\n+          \"D:\\\\foo\");\n+\n+        t(&(WindowsPath(\"C:\")\n+            .unsafe_join(&WindowsPath(\"B\"))),\n+          \"C:B\");\n+\n+        t(&(WindowsPath(\"C:\")\n+            .unsafe_join(&WindowsPath(\"/foo\"))),\n+          \"C:\\\\foo\");\n+\n+        t(&(WindowsPath(\"C:\\\\\")\n+            .unsafe_join(&WindowsPath(\"\\\\bar\"))),\n+          \"C:\\\\bar\");\n+\n+        t(&(WindowsPath(\"\")\n+            .unsafe_join(&WindowsPath(\"\"))),\n+          \"\");\n+\n+        t(&(WindowsPath(\"\")\n+            .unsafe_join(&WindowsPath(\"a\"))),\n+          \"a\");\n+\n+        t(&(WindowsPath(\"\")\n+            .unsafe_join(&WindowsPath(\"C:\\\\a\"))),\n+          \"C:\\\\a\");\n+\n+        t(&(WindowsPath(\"c:\\\\foo\")\n+            .normalize()),\n+          \"C:\\\\foo\");\n     }\n }"}]}