{"sha": "1f9bd62fd6d63689b2d4bb4338625addf0e09bdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmOWJkNjJmZDZkNjM2ODliMmQ0YmI0MzM4NjI1YWRkZjBlMDliZGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-30T11:40:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-30T11:40:47Z"}, "message": "auto merge of #8857 : blake2-ppc/rust/std-str-remove, r=thestinger\n\nThese are very easy to replace with methods on string slices, basically\r\n`.char_len()` and `.len()`.\r\n\r\nThese are the replacement implementations I did to clean these\r\nfunctions up, but seeing this I propose removal:\r\n\r\n/// ...\r\npub fn count_chars(s: &str, begin: uint, end: uint) -> uint {\r\n    // .slice() checks the char boundaries\r\n    s.slice(begin, end).char_len()\r\n}\r\n\r\n/// Counts the number of bytes taken by the first `n` chars in `s`\r\n/// starting from byte index `begin`.\r\n///\r\n/// Fails if there are less than `n` chars past `begin`\r\npub fn count_bytes<'b>(s: &'b str, begin: uint, n: uint) -> uint {\r\n    s.slice_from(begin).slice_chars(0, n).len()\r\n}", "tree": {"sha": "0492bfee0c9883c33243c6a7ad55195f5a83d0f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0492bfee0c9883c33243c6a7ad55195f5a83d0f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f9bd62fd6d63689b2d4bb4338625addf0e09bdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f9bd62fd6d63689b2d4bb4338625addf0e09bdd", "html_url": "https://github.com/rust-lang/rust/commit/1f9bd62fd6d63689b2d4bb4338625addf0e09bdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f9bd62fd6d63689b2d4bb4338625addf0e09bdd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72bf8956298107d36430bbfc4a18177e7b2097c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/72bf8956298107d36430bbfc4a18177e7b2097c6", "html_url": "https://github.com/rust-lang/rust/commit/72bf8956298107d36430bbfc4a18177e7b2097c6"}, {"sha": "b656bfaaa96dd8d242e6045e7e38b355992aca31", "url": "https://api.github.com/repos/rust-lang/rust/commits/b656bfaaa96dd8d242e6045e7e38b355992aca31", "html_url": "https://github.com/rust-lang/rust/commit/b656bfaaa96dd8d242e6045e7e38b355992aca31"}], "stats": {"total": 40, "additions": 0, "deletions": 40}, "files": [{"sha": "3265c470e904fcb1f5aa1b2c7b780867c66d55be", "filename": "src/libstd/str.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1f9bd62fd6d63689b2d4bb4338625addf0e09bdd/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f9bd62fd6d63689b2d4bb4338625addf0e09bdd/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=1f9bd62fd6d63689b2d4bb4338625addf0e09bdd", "patch": "@@ -907,46 +907,6 @@ pub fn with_capacity(capacity: uint) -> ~str {\n     }\n }\n \n-/// As char_len but for a slice of a string\n-///\n-/// # Arguments\n-///\n-/// * s - A valid string\n-/// * start - The position inside `s` where to start counting in bytes\n-/// * end - The position where to stop counting\n-///\n-/// # Return value\n-///\n-/// The number of Unicode characters in `s` between the given indices.\n-pub fn count_chars(s: &str, start: uint, end: uint) -> uint {\n-    assert!(s.is_char_boundary(start));\n-    assert!(s.is_char_boundary(end));\n-    let mut i = start;\n-    let mut len = 0u;\n-    while i < end {\n-        let next = s.char_range_at(i).next;\n-        len += 1u;\n-        i = next;\n-    }\n-    return len;\n-}\n-\n-/// Counts the number of bytes taken by the first `n` chars in `s`\n-/// starting from `start`.\n-pub fn count_bytes<'b>(s: &'b str, start: uint, n: uint) -> uint {\n-    assert!(s.is_char_boundary(start));\n-    let mut end = start;\n-    let mut cnt = n;\n-    let l = s.len();\n-    while cnt > 0u {\n-        assert!(end < l);\n-        let next = s.char_range_at(end).next;\n-        cnt -= 1u;\n-        end = next;\n-    }\n-    end - start\n-}\n-\n // https://tools.ietf.org/html/rfc3629\n static UTF8_CHAR_WIDTH: [u8, ..256] = [\n 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"}]}