{"sha": "a369a7881f2196e359fb9d4cb20cf5d2bb0da6f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNjlhNzg4MWYyMTk2ZTM1OWZiOWQ0Y2IyMGNmNWQyYmIwZGE2Zjg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-29T21:11:56Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-29T21:11:56Z"}, "message": "rustc: Implement typechecking for automatically-derived enums", "tree": {"sha": "19a246ef6d19c8978a5e90fc78b7a7d28f8fdb2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19a246ef6d19c8978a5e90fc78b7a7d28f8fdb2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a369a7881f2196e359fb9d4cb20cf5d2bb0da6f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a369a7881f2196e359fb9d4cb20cf5d2bb0da6f8", "html_url": "https://github.com/rust-lang/rust/commit/a369a7881f2196e359fb9d4cb20cf5d2bb0da6f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a369a7881f2196e359fb9d4cb20cf5d2bb0da6f8/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17a875b08a0a607a97fff0e4fd13be0d2fa4dcb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/17a875b08a0a607a97fff0e4fd13be0d2fa4dcb3", "html_url": "https://github.com/rust-lang/rust/commit/17a875b08a0a607a97fff0e4fd13be0d2fa4dcb3"}], "stats": {"total": 81, "additions": 79, "deletions": 2}, "files": [{"sha": "f44f6a3ce628db5a51c8d6707a27a2456b379bc4", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a369a7881f2196e359fb9d4cb20cf5d2bb0da6f8/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a369a7881f2196e359fb9d4cb20cf5d2bb0da6f8/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=a369a7881f2196e359fb9d4cb20cf5d2bb0da6f8", "patch": "@@ -387,6 +387,11 @@ type ctxt =\n       deriving_struct_methods: HashMap<ast::def_id,\n                                        @~[typeck::method_origin]>,\n \n+      // The outer vector here describes each enum variant, while the inner\n+      // nested vector describes each enum variant argument.\n+      deriving_enum_methods: HashMap<ast::def_id,\n+                                     @~[@~[typeck::method_origin]]>,\n+\n       // A mapping from the def ID of a method that was automatically derived\n       // to information about it.\n       automatically_derived_methods: HashMap<ast::def_id, DerivedMethodInfo>,\n@@ -959,6 +964,7 @@ fn mk_ctxt(s: session::Session,\n       provided_method_sources: HashMap(),\n       supertraits: HashMap(),\n       deriving_struct_methods: HashMap(),\n+      deriving_enum_methods: HashMap(),\n       automatically_derived_methods: HashMap(),\n       automatically_derived_methods_for_impl: HashMap()}\n }"}, {"sha": "c48c8576e079a8a83318568349a18c536a48b856", "filename": "src/rustc/middle/typeck/deriving.rs", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a369a7881f2196e359fb9d4cb20cf5d2bb0da6f8/src%2Frustc%2Fmiddle%2Ftypeck%2Fderiving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a369a7881f2196e359fb9d4cb20cf5d2bb0da6f8/src%2Frustc%2Fmiddle%2Ftypeck%2Fderiving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fderiving.rs?ref=a369a7881f2196e359fb9d4cb20cf5d2bb0da6f8", "patch": "@@ -113,6 +113,48 @@ impl DerivingChecker {\n         tcx.deriving_struct_methods.insert(local_def(impl_id), field_info);\n     }\n \n+    fn check_deriving_for_enum(enum_def_id: def_id,\n+                               enum_substs: &substs,\n+                               trait_ref: @trait_ref,\n+                               impl_id: node_id,\n+                               impl_span: span) {\n+        let tcx = self.crate_context.tcx;\n+        let enum_methods = dvec::DVec();\n+        let variants = ty::substd_enum_variants(\n+            tcx, enum_def_id, enum_substs);\n+        for variants.each |enum_variant_info| {\n+            let variant_methods = dvec::DVec();\n+            for enum_variant_info.args.eachi |i, variant_arg_type| {\n+                match self.check_deriving_for_substructure_type(\n+                        *variant_arg_type, trait_ref, impl_span) {\n+                    Some(method_target_def_id) => {\n+                        variant_methods.push(method_static(\n+                            method_target_def_id));\n+                    }\n+                    None => {\n+                        let trait_str = pprust::path_to_str(\n+                            trait_ref.path, tcx.sess.parse_sess.interner);\n+                        tcx.sess.span_err(impl_span,\n+                                          fmt!(\"cannot automatically derive \\\n+                                                an implementation for `%s`: \\\n+                                                argument %u of variant `%s` \\\n+                                                does not implement the trait \\\n+                                                `%s`\",\n+                                               trait_str,\n+                                               i + 1,\n+                                               tcx.sess.str_of(\n+                                                    enum_variant_info.name),\n+                                               trait_str));\n+                    }\n+                }\n+            }\n+            enum_methods.push(@dvec::unwrap(move variant_methods));\n+        }\n+\n+        let enum_methods = @dvec::unwrap(move enum_methods);\n+        tcx.deriving_enum_methods.insert(local_def(impl_id), enum_methods);\n+    }\n+\n     fn check_deriving(crate: @crate) {\n         let tcx = self.crate_context.tcx;\n         visit_crate(*crate, (), mk_simple_visitor(@{\n@@ -123,8 +165,13 @@ impl DerivingChecker {\n                         let superty = ty::lookup_item_type(\n                             tcx, local_def(item.id)).ty;\n                         match ty::get(superty).sty {\n-                            ty_enum(_def_id, _substs) => {\n-                                // XXX: Handle enums.\n+                            ty_enum(def_id, ref substs) => {\n+                                self.check_deriving_for_enum(\n+                                    def_id,\n+                                    substs,\n+                                    trait_ref,\n+                                    item.id,\n+                                    item.span);\n                             }\n                             ty_class(def_id, ref substs) => {\n                                 self.check_deriving_for_struct("}, {"sha": "1eba177e964e7ed6f7d44d8b08052fe319f34d42", "filename": "src/test/compile-fail/enum-deriving-incomplete.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a369a7881f2196e359fb9d4cb20cf5d2bb0da6f8/src%2Ftest%2Fcompile-fail%2Fenum-deriving-incomplete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a369a7881f2196e359fb9d4cb20cf5d2bb0da6f8/src%2Ftest%2Fcompile-fail%2Fenum-deriving-incomplete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-deriving-incomplete.rs?ref=a369a7881f2196e359fb9d4cb20cf5d2bb0da6f8", "patch": "@@ -0,0 +1,24 @@\n+trait MyEq {\n+    pure fn eq(other: &self) -> bool;\n+}\n+\n+struct A {\n+    x: int\n+}\n+\n+enum B {\n+    C(A),\n+    D(A),\n+    E(A)\n+}\n+\n+impl B : MyEq;\n+//~^ ERROR cannot automatically derive\n+//~^^ ERROR cannot automatically derive\n+//~^^^ ERROR cannot automatically derive\n+\n+fn main() {\n+    let c = C(A { x: 15 });\n+    assert c.eq(&c);\n+}\n+"}]}