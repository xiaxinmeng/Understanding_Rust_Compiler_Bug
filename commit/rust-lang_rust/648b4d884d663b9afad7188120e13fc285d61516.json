{"sha": "648b4d884d663b9afad7188120e13fc285d61516", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0OGI0ZDg4NGQ2NjNiOWFmYWQ3MTg4MTIwZTEzZmMyODVkNjE1MTY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-28T20:50:30Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-01T17:28:59Z"}, "message": "rustc_resolve: never push `ClosureRibKind` to `label_ribs`.", "tree": {"sha": "44c5b29c1bb52d2a2d2b5ef3817873e893ae3a20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44c5b29c1bb52d2a2d2b5ef3817873e893ae3a20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/648b4d884d663b9afad7188120e13fc285d61516", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/648b4d884d663b9afad7188120e13fc285d61516", "html_url": "https://github.com/rust-lang/rust/commit/648b4d884d663b9afad7188120e13fc285d61516", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/648b4d884d663b9afad7188120e13fc285d61516/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807", "html_url": "https://github.com/rust-lang/rust/commit/ed1bbbb5458b9ee2fbcf7a41b9aeb3203ebca807"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "7ab3de0475e731d9b727555bb271cdfce7973288", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/648b4d884d663b9afad7188120e13fc285d61516/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/648b4d884d663b9afad7188120e13fc285d61516/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=648b4d884d663b9afad7188120e13fc285d61516", "patch": "@@ -870,7 +870,10 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n         self.ribs[ValueNS].push(Rib::new(rib_kind));\n \n         // Create a label rib for the function.\n-        self.label_ribs.push(Rib::new(rib_kind));\n+        match rib_kind {\n+            ClosureRibKind(_) => {}\n+            _ => self.label_ribs.push(Rib::new(rib_kind)),\n+        }\n \n         // Add each argument to the rib.\n         let mut bindings_list = FxHashMap::default();\n@@ -900,7 +903,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n         if let IsAsync::Async { closure_id, .. } = asyncness {\n             let rib_kind = ClosureRibKind(*closure_id);\n             self.ribs[ValueNS].push(Rib::new(rib_kind));\n-            self.label_ribs.push(Rib::new(rib_kind));\n         }\n \n         match function_kind {\n@@ -927,13 +929,17 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n \n         // Leave the body of the async closure\n         if asyncness.is_async() {\n-            self.label_ribs.pop();\n             self.ribs[ValueNS].pop();\n         }\n \n         debug!(\"(resolving function) leaving function\");\n \n-        self.label_ribs.pop();\n+        match rib_kind {\n+            ClosureRibKind(_) => {}\n+            _ => {\n+                self.label_ribs.pop();\n+            }\n+        }\n         self.ribs[ValueNS].pop();\n     }\n \n@@ -2500,6 +2506,9 @@ impl<'a> Resolver<'a> {\n         for rib in self.label_ribs.iter().rev() {\n             match rib.kind {\n                 NormalRibKind => {}\n+                ClosureRibKind(_) => {\n+                    span_bug!(ident.span, \"rustc_resolve: `ClosureRibKind` in `label_ribs`\");\n+                }\n                 // If an invocation of this macro created `ident`, give up on `ident`\n                 // and switch to `ident`'s source from the macro definition.\n                 MacroDefinition(def) => {\n@@ -4465,9 +4474,7 @@ impl<'a> Resolver<'a> {\n             ExprKind::Async(_, async_closure_id, ref block) => {\n                 let rib_kind = ClosureRibKind(async_closure_id);\n                 self.ribs[ValueNS].push(Rib::new(rib_kind));\n-                self.label_ribs.push(Rib::new(rib_kind));\n                 self.visit_block(&block);\n-                self.label_ribs.pop();\n                 self.ribs[ValueNS].pop();\n             }\n             // `async |x| ...` gets desugared to `|x| future_from_generator(|| ...)`, so we need to\n@@ -4479,7 +4486,6 @@ impl<'a> Resolver<'a> {\n             ) => {\n                 let rib_kind = ClosureRibKind(expr.id);\n                 self.ribs[ValueNS].push(Rib::new(rib_kind));\n-                self.label_ribs.push(Rib::new(rib_kind));\n                 // Resolve arguments:\n                 let mut bindings_list = FxHashMap::default();\n                 for argument in &fn_decl.inputs {\n@@ -4493,16 +4499,13 @@ impl<'a> Resolver<'a> {\n                 {\n                     let rib_kind = ClosureRibKind(inner_closure_id);\n                     self.ribs[ValueNS].push(Rib::new(rib_kind));\n-                    self.label_ribs.push(Rib::new(rib_kind));\n                     // No need to resolve arguments: the inner closure has none.\n                     // Resolve the return type:\n                     visit::walk_fn_ret_ty(self, &fn_decl.output);\n                     // Resolve the body\n                     self.visit_expr(body);\n-                    self.label_ribs.pop();\n                     self.ribs[ValueNS].pop();\n                 }\n-                self.label_ribs.pop();\n                 self.ribs[ValueNS].pop();\n             }\n             _ => {"}]}