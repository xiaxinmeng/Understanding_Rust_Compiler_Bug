{"sha": "e555003e6d6b6d71ce5509a6b6c7a15861208d6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NTUwMDNlNmQ2YjZkNzFjZTU1MDlhNmI2YzdhMTU4NjEyMDhkNmM=", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-08-19T19:24:25Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-08-19T20:27:19Z"}, "message": "Factor out a common `RawFd`/`AsRawFd`/etc for Unix and WASI.", "tree": {"sha": "be8caa2cd65607d9d2d67df621283668f9fd8a60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be8caa2cd65607d9d2d67df621283668f9fd8a60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e555003e6d6b6d71ce5509a6b6c7a15861208d6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e555003e6d6b6d71ce5509a6b6c7a15861208d6c", "html_url": "https://github.com/rust-lang/rust/commit/e555003e6d6b6d71ce5509a6b6c7a15861208d6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0377a633520344c6530f21fffee4d31768c9c447", "url": "https://api.github.com/repos/rust-lang/rust/commits/0377a633520344c6530f21fffee4d31768c9c447", "html_url": "https://github.com/rust-lang/rust/commit/0377a633520344c6530f21fffee4d31768c9c447"}], "stats": {"total": 880, "additions": 355, "deletions": 525}, "files": [{"sha": "df11dc21aa7a6da91f92fc622feb8c0b3346683d", "filename": "library/std/src/os/fd/mod.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fmod.rs?ref=e555003e6d6b6d71ce5509a6b6c7a15861208d6c", "patch": "@@ -0,0 +1,13 @@\n+//! Owned and borrowed Unix-like file descriptors.\n+\n+#![unstable(feature = \"io_safety\", issue = \"87074\")]\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n+// `RawFd`, `AsRawFd`, etc.\n+pub mod raw;\n+\n+// `OwnedFd`, `AsFd`, etc.\n+pub mod owned;\n+\n+// Implementations for `AsRawFd` etc. for network types.\n+mod net;"}, {"sha": "843f45f7f5f9820bfd2641d59bde3c4e99405349", "filename": "library/std/src/os/fd/net.rs", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fnet.rs?ref=e555003e6d6b6d71ce5509a6b6c7a15861208d6c", "patch": "@@ -1,5 +1,6 @@\n-use crate::os::wasi::io::{AsRawFd, FromRawFd, IntoRawFd, OwnedFd, RawFd};\n-use crate::sys_common::{AsInner, FromInner, IntoInner};\n+use crate::os::fd::owned::OwnedFd;\n+use crate::os::fd::raw::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n+use crate::sys_common::{self, AsInner, FromInner, IntoInner};\n use crate::{net, sys};\n \n macro_rules! impl_as_raw_fd {\n@@ -23,7 +24,7 @@ macro_rules! impl_from_raw_fd {\n             unsafe fn from_raw_fd(fd: RawFd) -> net::$t {\n                 unsafe {\n                     let socket = sys::net::Socket::from_inner(FromInner::from_inner(OwnedFd::from_raw_fd(fd)));\n-                    net::$t::from_inner(sys::net::$t::from_inner(socket))\n+                    net::$t::from_inner(sys_common::net::$t::from_inner(socket))\n                 }\n             }\n         }", "previous_filename": "library/std/src/os/wasi/net/raw_fd.rs"}, {"sha": "ecaec8b21d8a2cc076994844c895df49105f5194", "filename": "library/std/src/os/fd/owned.rs", "status": "renamed", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=e555003e6d6b6d71ce5509a6b6c7a15861208d6c", "patch": "@@ -3,15 +3,11 @@\n #![unstable(feature = \"io_safety\", issue = \"87074\")]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n-#[cfg(unix)]\n-use super::unix::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n-#[cfg(target_os = \"wasi\")]\n-use super::wasi::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n+use super::raw::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n use crate::fmt;\n use crate::fs;\n use crate::marker::PhantomData;\n use crate::mem::forget;\n-use crate::os::raw;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n \n /// A borrowed file descriptor.\n@@ -123,7 +119,7 @@ impl Drop for OwnedFd {\n             // the file descriptor was closed or not, and if we retried (for\n             // something like EINTR), we might close another valid file descriptor\n             // opened after we closed ours.\n-            let _ = libc::close(self.fd as raw::c_int);\n+            let _ = libc::close(self.fd);\n         }\n     }\n }", "previous_filename": "library/std/src/os/fd.rs"}, {"sha": "dcbce9f10b8da658bc80b2706fd76c07b0527d86", "filename": "library/std/src/os/fd/raw.rs", "status": "added", "additions": 206, "deletions": 0, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs?ref=e555003e6d6b6d71ce5509a6b6c7a15861208d6c", "patch": "@@ -0,0 +1,206 @@\n+//! Raw Unix-like file descriptors.\n+\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+use crate::fs;\n+use crate::io;\n+use crate::os::raw;\n+#[cfg(unix)]\n+use crate::os::unix::io::OwnedFd;\n+#[cfg(target_os = \"wasi\")]\n+use crate::os::wasi::io::OwnedFd;\n+use crate::sys_common::{AsInner, IntoInner};\n+\n+/// Raw file descriptors.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub type RawFd = raw::c_int;\n+\n+/// A trait to extract the raw file descriptor from an underlying object.\n+///\n+/// This is only available on unix and WASI platforms and must be imported in\n+/// order to call the method. Windows platforms have a corresponding\n+/// `AsRawHandle` and `AsRawSocket` set of traits.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub trait AsRawFd {\n+    /// Extracts the raw file descriptor.\n+    ///\n+    /// This method does **not** pass ownership of the raw file descriptor\n+    /// to the caller. The descriptor is only guaranteed to be valid while\n+    /// the original object has not yet been destroyed.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```no_run\n+    /// use std::fs::File;\n+    /// # use std::io;\n+    /// #[cfg(unix)]\n+    /// use std::os::unix::io::{AsRawFd, RawFd};\n+    /// #[cfg(target_os = \"wasi\")]\n+    /// use std::os::wasi::io::{AsRawFd, RawFd};\n+    ///\n+    /// let mut f = File::open(\"foo.txt\")?;\n+    /// // Note that `raw_fd` is only valid as long as `f` exists.\n+    /// let raw_fd: RawFd = f.as_raw_fd();\n+    /// # Ok::<(), io::Error>(())\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn as_raw_fd(&self) -> RawFd;\n+}\n+\n+/// A trait to express the ability to construct an object from a raw file\n+/// descriptor.\n+#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n+pub trait FromRawFd {\n+    /// Constructs a new instance of `Self` from the given raw file\n+    /// descriptor.\n+    ///\n+    /// This function **consumes ownership** of the specified file\n+    /// descriptor. The returned object will take responsibility for closing\n+    /// it when the object goes out of scope.\n+    ///\n+    /// This function is also unsafe as the primitives currently returned\n+    /// have the contract that they are the sole owner of the file\n+    /// descriptor they are wrapping. Usage of this function could\n+    /// accidentally allow violating this contract which can cause memory\n+    /// unsafety in code that relies on it being true.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```no_run\n+    /// use std::fs::File;\n+    /// # use std::io;\n+    /// #[cfg(unix)]\n+    /// use std::os::unix::io::{FromRawFd, IntoRawFd, RawFd};\n+    /// #[cfg(target_os = \"wasi\")]\n+    /// use std::os::wasi::io::{FromRawFd, IntoRawFd, RawFd};\n+    ///\n+    /// let f = File::open(\"foo.txt\")?;\n+    /// let raw_fd: RawFd = f.into_raw_fd();\n+    /// // SAFETY: no other functions should call `from_raw_fd`, so there\n+    /// // is only one owner for the file descriptor.\n+    /// let f = unsafe { File::from_raw_fd(raw_fd) };\n+    /// # Ok::<(), io::Error>(())\n+    /// ```\n+    #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n+    unsafe fn from_raw_fd(fd: RawFd) -> Self;\n+}\n+\n+/// A trait to express the ability to consume an object and acquire ownership of\n+/// its raw file descriptor.\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n+pub trait IntoRawFd {\n+    /// Consumes this object, returning the raw underlying file descriptor.\n+    ///\n+    /// This function **transfers ownership** of the underlying file descriptor\n+    /// to the caller. Callers are then the unique owners of the file descriptor\n+    /// and must close the descriptor once it's no longer needed.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```no_run\n+    /// use std::fs::File;\n+    /// # use std::io;\n+    /// #[cfg(unix)]\n+    /// use std::os::unix::io::{IntoRawFd, RawFd};\n+    /// #[cfg(target_os = \"wasi\")]\n+    /// use std::os::wasi::io::{IntoRawFd, RawFd};\n+    ///\n+    /// let f = File::open(\"foo.txt\")?;\n+    /// let raw_fd: RawFd = f.into_raw_fd();\n+    /// # Ok::<(), io::Error>(())\n+    /// ```\n+    #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n+    fn into_raw_fd(self) -> RawFd;\n+}\n+\n+#[stable(feature = \"raw_fd_reflexive_traits\", since = \"1.48.0\")]\n+impl AsRawFd for RawFd {\n+    #[inline]\n+    fn as_raw_fd(&self) -> RawFd {\n+        *self\n+    }\n+}\n+#[stable(feature = \"raw_fd_reflexive_traits\", since = \"1.48.0\")]\n+impl IntoRawFd for RawFd {\n+    #[inline]\n+    fn into_raw_fd(self) -> RawFd {\n+        self\n+    }\n+}\n+#[stable(feature = \"raw_fd_reflexive_traits\", since = \"1.48.0\")]\n+impl FromRawFd for RawFd {\n+    #[inline]\n+    unsafe fn from_raw_fd(fd: RawFd) -> RawFd {\n+        fd\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl AsRawFd for fs::File {\n+    #[inline]\n+    fn as_raw_fd(&self) -> RawFd {\n+        self.as_inner().as_raw_fd()\n+    }\n+}\n+#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n+impl FromRawFd for fs::File {\n+    #[inline]\n+    unsafe fn from_raw_fd(fd: RawFd) -> fs::File {\n+        unsafe { fs::File::from(OwnedFd::from_raw_fd(fd)) }\n+    }\n+}\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n+impl IntoRawFd for fs::File {\n+    #[inline]\n+    fn into_raw_fd(self) -> RawFd {\n+        self.into_inner().into_inner().into_raw_fd()\n+    }\n+}\n+\n+#[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n+impl AsRawFd for io::Stdin {\n+    #[inline]\n+    fn as_raw_fd(&self) -> RawFd {\n+        libc::STDIN_FILENO\n+    }\n+}\n+\n+#[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n+impl AsRawFd for io::Stdout {\n+    #[inline]\n+    fn as_raw_fd(&self) -> RawFd {\n+        libc::STDOUT_FILENO\n+    }\n+}\n+\n+#[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n+impl AsRawFd for io::Stderr {\n+    #[inline]\n+    fn as_raw_fd(&self) -> RawFd {\n+        libc::STDERR_FILENO\n+    }\n+}\n+\n+#[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n+impl<'a> AsRawFd for io::StdinLock<'a> {\n+    #[inline]\n+    fn as_raw_fd(&self) -> RawFd {\n+        libc::STDIN_FILENO\n+    }\n+}\n+\n+#[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n+impl<'a> AsRawFd for io::StdoutLock<'a> {\n+    #[inline]\n+    fn as_raw_fd(&self) -> RawFd {\n+        libc::STDOUT_FILENO\n+    }\n+}\n+\n+#[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n+impl<'a> AsRawFd for io::StderrLock<'a> {\n+    #[inline]\n+    fn as_raw_fd(&self) -> RawFd {\n+        libc::STDERR_FILENO\n+    }\n+}"}, {"sha": "79e6967300767e463a5b6c06f5b2b663c9742809", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=e555003e6d6b6d71ce5509a6b6c7a15861208d6c", "patch": "@@ -122,5 +122,5 @@ mod imp {\n #[stable(feature = \"os\", since = \"1.0.0\")]\n pub use imp::*;\n \n-#[cfg(any(unix, target_os = \"wasi\"))]\n+#[cfg(any(unix, target_os = \"wasi\", doc))]\n mod fd;"}, {"sha": "7795db7abc01def170058fbb567d50df1c8bce6d", "filename": "library/std/src/os/unix/io/fd.rs", "status": "modified", "additions": 1, "deletions": 51, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio%2Ffd.rs?ref=e555003e6d6b6d71ce5509a6b6c7a15861208d6c", "patch": "@@ -6,54 +6,4 @@\n #[cfg(test)]\n mod tests;\n \n-use crate::sys_common::{AsInner, IntoInner};\n-\n-pub use super::super::super::super::fd::*;\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl AsFd for crate::process::ChildStdin {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        self.as_inner().as_fd()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl From<crate::process::ChildStdin> for OwnedFd {\n-    #[inline]\n-    fn from(child_stdin: crate::process::ChildStdin) -> OwnedFd {\n-        child_stdin.into_inner().into_inner().into_inner()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl AsFd for crate::process::ChildStdout {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        self.as_inner().as_fd()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl From<crate::process::ChildStdout> for OwnedFd {\n-    #[inline]\n-    fn from(child_stdout: crate::process::ChildStdout) -> OwnedFd {\n-        child_stdout.into_inner().into_inner().into_inner()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl AsFd for crate::process::ChildStderr {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        self.as_inner().as_fd()\n-    }\n-}\n-\n-#[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl From<crate::process::ChildStderr> for OwnedFd {\n-    #[inline]\n-    fn from(child_stderr: crate::process::ChildStderr) -> OwnedFd {\n-        child_stderr.into_inner().into_inner().into_inner()\n-    }\n-}\n+pub use crate::os::fd::owned::*;"}, {"sha": "6317e317471199a02794fe55fcb560ca8593f4f3", "filename": "library/std/src/os/unix/io/raw.rs", "status": "modified", "additions": 1, "deletions": 191, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio%2Fraw.rs?ref=e555003e6d6b6d71ce5509a6b6c7a15861208d6c", "patch": "@@ -2,194 +2,4 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use crate::fs;\n-use crate::io;\n-use crate::os::raw;\n-use crate::os::unix::io::OwnedFd;\n-use crate::sys_common::{AsInner, IntoInner};\n-\n-/// Raw file descriptors.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub type RawFd = raw::c_int;\n-\n-/// A trait to extract the raw unix file descriptor from an underlying\n-/// object.\n-///\n-/// This is only available on unix platforms and must be imported in order\n-/// to call the method. Windows platforms have a corresponding `AsRawHandle`\n-/// and `AsRawSocket` set of traits.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait AsRawFd {\n-    /// Extracts the raw file descriptor.\n-    ///\n-    /// This method does **not** pass ownership of the raw file descriptor\n-    /// to the caller. The descriptor is only guaranteed to be valid while\n-    /// the original object has not yet been destroyed.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```no_run\n-    /// use std::fs::File;\n-    /// # use std::io;\n-    /// use std::os::unix::io::{AsRawFd, RawFd};\n-    ///\n-    /// let mut f = File::open(\"foo.txt\")?;\n-    /// // Note that `raw_fd` is only valid as long as `f` exists.\n-    /// let raw_fd: RawFd = f.as_raw_fd();\n-    /// # Ok::<(), io::Error>(())\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn as_raw_fd(&self) -> RawFd;\n-}\n-\n-/// A trait to express the ability to construct an object from a raw file\n-/// descriptor.\n-#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n-pub trait FromRawFd {\n-    /// Constructs a new instance of `Self` from the given raw file\n-    /// descriptor.\n-    ///\n-    /// This function **consumes ownership** of the specified file\n-    /// descriptor. The returned object will take responsibility for closing\n-    /// it when the object goes out of scope.\n-    ///\n-    /// This function is also unsafe as the primitives currently returned\n-    /// have the contract that they are the sole owner of the file\n-    /// descriptor they are wrapping. Usage of this function could\n-    /// accidentally allow violating this contract which can cause memory\n-    /// unsafety in code that relies on it being true.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```no_run\n-    /// use std::fs::File;\n-    /// # use std::io;\n-    /// use std::os::unix::io::{FromRawFd, IntoRawFd, RawFd};\n-    ///\n-    /// let f = File::open(\"foo.txt\")?;\n-    /// let raw_fd: RawFd = f.into_raw_fd();\n-    /// // SAFETY: no other functions should call `from_raw_fd`, so there\n-    /// // is only one owner for the file descriptor.\n-    /// let f = unsafe { File::from_raw_fd(raw_fd) };\n-    /// # Ok::<(), io::Error>(())\n-    /// ```\n-    #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n-    unsafe fn from_raw_fd(fd: RawFd) -> Self;\n-}\n-\n-/// A trait to express the ability to consume an object and acquire ownership of\n-/// its raw file descriptor.\n-#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n-pub trait IntoRawFd {\n-    /// Consumes this object, returning the raw underlying file descriptor.\n-    ///\n-    /// This function **transfers ownership** of the underlying file descriptor\n-    /// to the caller. Callers are then the unique owners of the file descriptor\n-    /// and must close the descriptor once it's no longer needed.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```no_run\n-    /// use std::fs::File;\n-    /// # use std::io;\n-    /// use std::os::unix::io::{IntoRawFd, RawFd};\n-    ///\n-    /// let f = File::open(\"foo.txt\")?;\n-    /// let raw_fd: RawFd = f.into_raw_fd();\n-    /// # Ok::<(), io::Error>(())\n-    /// ```\n-    #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n-    fn into_raw_fd(self) -> RawFd;\n-}\n-\n-#[stable(feature = \"raw_fd_reflexive_traits\", since = \"1.48.0\")]\n-impl AsRawFd for RawFd {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        *self\n-    }\n-}\n-#[stable(feature = \"raw_fd_reflexive_traits\", since = \"1.48.0\")]\n-impl IntoRawFd for RawFd {\n-    #[inline]\n-    fn into_raw_fd(self) -> RawFd {\n-        self\n-    }\n-}\n-#[stable(feature = \"raw_fd_reflexive_traits\", since = \"1.48.0\")]\n-impl FromRawFd for RawFd {\n-    #[inline]\n-    unsafe fn from_raw_fd(fd: RawFd) -> RawFd {\n-        fd\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl AsRawFd for fs::File {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        self.as_inner().as_raw_fd()\n-    }\n-}\n-#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n-impl FromRawFd for fs::File {\n-    #[inline]\n-    unsafe fn from_raw_fd(fd: RawFd) -> fs::File {\n-        fs::File::from(OwnedFd::from_raw_fd(fd))\n-    }\n-}\n-#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n-impl IntoRawFd for fs::File {\n-    #[inline]\n-    fn into_raw_fd(self) -> RawFd {\n-        self.into_inner().into_inner().into_raw_fd()\n-    }\n-}\n-\n-#[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n-impl AsRawFd for io::Stdin {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        libc::STDIN_FILENO\n-    }\n-}\n-\n-#[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n-impl AsRawFd for io::Stdout {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        libc::STDOUT_FILENO\n-    }\n-}\n-\n-#[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n-impl AsRawFd for io::Stderr {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        libc::STDERR_FILENO\n-    }\n-}\n-\n-#[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n-impl<'a> AsRawFd for io::StdinLock<'a> {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        libc::STDIN_FILENO\n-    }\n-}\n-\n-#[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n-impl<'a> AsRawFd for io::StdoutLock<'a> {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        libc::STDOUT_FILENO\n-    }\n-}\n-\n-#[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n-impl<'a> AsRawFd for io::StderrLock<'a> {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        libc::STDERR_FILENO\n-    }\n-}\n+pub use crate::os::fd::raw::*;"}, {"sha": "d462bd4b5f75e8765e39424f19cb2d5555ef83cb", "filename": "library/std/src/os/unix/net/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fmod.rs?ref=e555003e6d6b6d71ce5509a6b6c7a15861208d6c", "patch": "@@ -25,7 +25,6 @@ mod addr;\n mod ancillary;\n mod datagram;\n mod listener;\n-mod raw_fd;\n mod stream;\n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests;\n@@ -48,7 +47,5 @@ pub use self::ancillary::*;\n pub use self::datagram::*;\n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n pub use self::listener::*;\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use self::raw_fd::*;\n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n pub use self::stream::*;"}, {"sha": "017caeebf7243648550116087d24095c97af2b22", "filename": "library/std/src/os/unix/net/raw_fd.rs", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0377a633520344c6530f21fffee4d31768c9c447/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fraw_fd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0377a633520344c6530f21fffee4d31768c9c447/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fraw_fd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fraw_fd.rs?ref=0377a633520344c6530f21fffee4d31768c9c447", "patch": "@@ -1,43 +0,0 @@\n-use crate::os::unix::io::{AsRawFd, FromRawFd, IntoRawFd, OwnedFd, RawFd};\n-use crate::sys_common::{self, AsInner, FromInner, IntoInner};\n-use crate::{net, sys};\n-\n-macro_rules! impl_as_raw_fd {\n-    ($($t:ident)*) => {$(\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl AsRawFd for net::$t {\n-            #[inline]\n-            fn as_raw_fd(&self) -> RawFd {\n-                self.as_inner().socket().as_raw_fd()\n-            }\n-        }\n-    )*};\n-}\n-impl_as_raw_fd! { TcpStream TcpListener UdpSocket }\n-\n-macro_rules! impl_from_raw_fd {\n-    ($($t:ident)*) => {$(\n-        #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n-        impl FromRawFd for net::$t {\n-            #[inline]\n-            unsafe fn from_raw_fd(fd: RawFd) -> net::$t {\n-                let socket = sys::net::Socket::from_inner(FromInner::from_inner(OwnedFd::from_raw_fd(fd)));\n-                net::$t::from_inner(sys_common::net::$t::from_inner(socket))\n-            }\n-        }\n-    )*};\n-}\n-impl_from_raw_fd! { TcpStream TcpListener UdpSocket }\n-\n-macro_rules! impl_into_raw_fd {\n-    ($($t:ident)*) => {$(\n-        #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n-        impl IntoRawFd for net::$t {\n-            #[inline]\n-            fn into_raw_fd(self) -> RawFd {\n-                self.into_inner().into_socket().into_inner().into_inner().into_raw_fd()\n-            }\n-        }\n-    )*};\n-}\n-impl_into_raw_fd! { TcpStream TcpListener UdpSocket }"}, {"sha": "650dcbabbae8c0beeb753bbad5b9fb7284b351b9", "filename": "library/std/src/os/unix/process.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs?ref=e555003e6d6b6d71ce5509a6b6c7a15861208d6c", "patch": "@@ -4,7 +4,7 @@\n \n use crate::ffi::OsStr;\n use crate::io;\n-use crate::os::unix::io::{AsRawFd, FromRawFd, IntoRawFd, OwnedFd, RawFd};\n+use crate::os::unix::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, IntoRawFd, OwnedFd, RawFd};\n use crate::process;\n use crate::sealed::Sealed;\n use crate::sys;\n@@ -385,6 +385,54 @@ impl IntoRawFd for process::ChildStderr {\n     }\n }\n \n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl AsFd for crate::process::ChildStdin {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        self.as_inner().as_fd()\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl From<crate::process::ChildStdin> for OwnedFd {\n+    #[inline]\n+    fn from(child_stdin: crate::process::ChildStdin) -> OwnedFd {\n+        child_stdin.into_inner().into_inner().into_inner()\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl AsFd for crate::process::ChildStdout {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        self.as_inner().as_fd()\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl From<crate::process::ChildStdout> for OwnedFd {\n+    #[inline]\n+    fn from(child_stdout: crate::process::ChildStdout) -> OwnedFd {\n+        child_stdout.into_inner().into_inner().into_inner()\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl AsFd for crate::process::ChildStderr {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        self.as_inner().as_fd()\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl From<crate::process::ChildStderr> for OwnedFd {\n+    #[inline]\n+    fn from(child_stderr: crate::process::ChildStderr) -> OwnedFd {\n+        child_stderr.into_inner().into_inner().into_inner()\n+    }\n+}\n+\n /// Returns the OS-assigned process identifier associated with this process's parent.\n #[stable(feature = \"unix_ppid\", since = \"1.27.0\")]\n pub fn parent_id() -> u32 {"}, {"sha": "930aca887e3c456ab52dda459f8b1040b793425f", "filename": "library/std/src/os/wasi/io/fd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio%2Ffd.rs?ref=e555003e6d6b6d71ce5509a6b6c7a15861208d6c", "patch": "@@ -6,4 +6,4 @@\n #[cfg(test)]\n mod tests;\n \n-pub use super::super::super::super::fd::*;\n+pub use crate::os::fd::owned::*;"}, {"sha": "0e0c5824e340456bfbe352348ae09a8414897ea5", "filename": "library/std/src/os/wasi/io/raw.rs", "status": "modified", "additions": 1, "deletions": 180, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio%2Fraw.rs?ref=e555003e6d6b6d71ce5509a6b6c7a15861208d6c", "patch": "@@ -2,183 +2,4 @@\n \n #![unstable(feature = \"wasi_ext\", issue = \"71213\")]\n \n-use crate::fs;\n-use crate::io;\n-use crate::net;\n-use crate::os::raw;\n-use crate::sys;\n-use crate::sys_common::{AsInner, FromInner, IntoInner};\n-use crate::os::wasi::io::OwnedFd;\n-\n-/// Raw file descriptors.\n-///\n-/// This has type `c_int` to ease compatibility with code that also compiles on\n-/// Unix configurations, however unlike Unix and POSIX, in WASI negative file\n-/// descriptors are valid. Only `-1` is reserved for indicating errors. Code\n-/// intending to be portable across Unix platforms and WASI should avoid\n-/// assuming that negative file descriptors are invalid.\n-pub type RawFd = raw::c_int;\n-\n-/// A trait to extract the raw unix file descriptor from an underlying\n-/// object.\n-///\n-/// This is only available on unix platforms and must be imported in order\n-/// to call the method. Windows platforms have a corresponding `AsRawHandle`\n-/// and `AsRawSocket` set of traits.\n-pub trait AsRawFd {\n-    /// Extracts the raw file descriptor.\n-    ///\n-    /// This method does **not** pass ownership of the raw file descriptor\n-    /// to the caller. The descriptor is only guaranteed to be valid while\n-    /// the original object has not yet been destroyed.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```no_run\n-    /// use std::fs::File;\n-    /// # use std::io;\n-    /// use std::os::wasi::io::{AsRawFd, RawFd};\n-    ///\n-    /// let mut f = File::open(\"foo.txt\")?;\n-    /// // Note that `raw_fd` is only valid as long as `f` exists.\n-    /// let raw_fd: RawFd = f.as_raw_fd();\n-    /// # Ok::<(), io::Error>(())\n-    /// ```\n-    fn as_raw_fd(&self) -> RawFd;\n-}\n-\n-/// A trait to express the ability to construct an object from a raw file\n-/// descriptor.\n-pub trait FromRawFd {\n-    /// Constructs a new instance of `Self` from the given raw file\n-    /// descriptor.\n-    ///\n-    /// This function **consumes ownership** of the specified file\n-    /// descriptor. The returned object will take responsibility for closing\n-    /// it when the object goes out of scope.\n-    ///\n-    /// This function is also unsafe as the primitives currently returned\n-    /// have the contract that they are the sole owner of the file\n-    /// descriptor they are wrapping. Usage of this function could\n-    /// accidentally allow violating this contract which can cause memory\n-    /// unsafety in code that relies on it being true.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```no_run\n-    /// use std::fs::File;\n-    /// # use std::io;\n-    /// use std::os::wasi::io::{FromRawFd, IntoRawFd, RawFd};\n-    ///\n-    /// let f = File::open(\"foo.txt\")?;\n-    /// let raw_fd: RawFd = f.into_raw_fd();\n-    /// // SAFETY: no other functions should call `from_raw_fd`, so there\n-    /// // is only one owner for the file descriptor.\n-    /// let f = unsafe { File::from_raw_fd(raw_fd) };\n-    /// # Ok::<(), io::Error>(())\n-    /// ```\n-    unsafe fn from_raw_fd(fd: RawFd) -> Self;\n-}\n-\n-/// A trait to express the ability to consume an object and acquire ownership of\n-/// its raw file descriptor.\n-pub trait IntoRawFd {\n-    /// Consumes this object, returning the raw underlying file descriptor.\n-    ///\n-    /// This function **transfers ownership** of the underlying file descriptor\n-    /// to the caller. Callers are then the unique owners of the file descriptor\n-    /// and must close the descriptor once it's no longer needed.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```no_run\n-    /// use std::fs::File;\n-    /// # use std::io;\n-    /// use std::os::wasi::io::{IntoRawFd, RawFd};\n-    ///\n-    /// let f = File::open(\"foo.txt\")?;\n-    /// let raw_fd: RawFd = f.into_raw_fd();\n-    /// # Ok::<(), io::Error>(())\n-    /// ```\n-    fn into_raw_fd(self) -> RawFd;\n-}\n-\n-impl AsRawFd for RawFd {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        *self\n-    }\n-}\n-impl IntoRawFd for RawFd {\n-    #[inline]\n-    fn into_raw_fd(self) -> RawFd {\n-        self\n-    }\n-}\n-impl FromRawFd for RawFd {\n-    #[inline]\n-    unsafe fn from_raw_fd(fd: RawFd) -> RawFd {\n-        fd\n-    }\n-}\n-\n-impl AsRawFd for fs::File {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        self.as_inner().as_raw_fd()\n-    }\n-}\n-impl FromRawFd for fs::File {\n-    #[inline]\n-    unsafe fn from_raw_fd(fd: RawFd) -> fs::File {\n-        unsafe { fs::File::from(OwnedFd::from_raw_fd(fd)) }\n-    }\n-}\n-impl IntoRawFd for fs::File {\n-    #[inline]\n-    fn into_raw_fd(self) -> RawFd {\n-        self.into_inner().into_inner().into_raw_fd()\n-    }\n-}\n-\n-impl AsRawFd for io::Stdin {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        libc::STDIN_FILENO\n-    }\n-}\n-\n-impl AsRawFd for io::Stdout {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        libc::STDOUT_FILENO\n-    }\n-}\n-\n-impl AsRawFd for io::Stderr {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        libc::STDERR_FILENO\n-    }\n-}\n-\n-impl<'a> AsRawFd for io::StdinLock<'a> {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        libc::STDIN_FILENO\n-    }\n-}\n-\n-impl<'a> AsRawFd for io::StdoutLock<'a> {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        libc::STDOUT_FILENO\n-    }\n-}\n-\n-impl<'a> AsRawFd for io::StderrLock<'a> {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        libc::STDERR_FILENO\n-    }\n-}\n+pub use crate::os::fd::raw::*;"}, {"sha": "e6bcf87887f036c1c99b47a2209b55369a4abfac", "filename": "library/std/src/os/wasi/net/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fnet%2Fmod.rs?ref=e555003e6d6b6d71ce5509a6b6c7a15861208d6c", "patch": "@@ -1,8 +1,3 @@\n //! WASI-specific networking functionality\n \n #![unstable(feature = \"wasi_ext\", issue = \"71213\")]\n-\n-mod raw_fd;\n-\n-#[unstable(feature = \"wasi_ext\", issue = \"71213\")]\n-pub use self::raw_fd::*;"}, {"sha": "b246599dfc0a9d986c7f3f7b11e469c7b08965af", "filename": "library/std/src/os/windows/process.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs?ref=e555003e6d6b6d71ce5509a6b6c7a15861208d6c", "patch": "@@ -3,7 +3,9 @@\n #![stable(feature = \"process_extensions\", since = \"1.2.0\")]\n \n use crate::ffi::OsStr;\n-use crate::os::windows::io::{AsRawHandle, FromRawHandle, IntoRawHandle, OwnedHandle, RawHandle};\n+use crate::os::windows::io::{\n+    AsHandle, AsRawHandle, BorrowedHandle, FromRawHandle, IntoRawHandle, OwnedHandle, RawHandle,\n+};\n use crate::process;\n use crate::sealed::Sealed;\n use crate::sys;\n@@ -21,7 +23,7 @@ impl FromRawHandle for process::Stdio {\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n impl From<OwnedHandle> for process::Stdio {\n     fn from(handle: OwnedHandle) -> process::Stdio {\n-        let handle = sys::handle::Handle::from_handle(handle);\n+        let handle = sys::handle::Handle::from_inner(handle);\n         let io = sys::process::Stdio::Handle(handle);\n         process::Stdio::from_inner(io)\n     }\n@@ -51,9 +53,9 @@ impl IntoRawHandle for process::Child {\n }\n \n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl IntoHandle for process::Child {\n-    fn into_handle(self) -> BorrowedHandle<'_> {\n-        self.into_inner().into_handle().into_handle()\n+impl From<process::Child> for OwnedHandle {\n+    fn from(child: process::Child) -> OwnedHandle {\n+        child.into_inner().into_handle().into_inner()\n     }\n }\n "}, {"sha": "e4f4456611cd043e615ffa347919231404670031", "filename": "library/std/src/sys/wasi/fd.rs", "status": "modified", "additions": 69, "deletions": 34, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs?ref=e555003e6d6b6d71ce5509a6b6c7a15861208d6c", "patch": "@@ -5,7 +5,6 @@ use super::err2io;\n use crate::io::{self, IoSlice, IoSliceMut, SeekFrom};\n use crate::mem;\n use crate::net::Shutdown;\n-use crate::os::raw::c_int;\n use crate::os::wasi::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, IntoRawFd, OwnedFd, RawFd};\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n \n@@ -30,23 +29,25 @@ fn ciovec<'a>(a: &'a [IoSlice<'_>]) -> &'a [wasi::Ciovec] {\n \n impl WasiFd {\n     pub fn datasync(&self) -> io::Result<()> {\n-        unsafe { wasi::fd_datasync(self.as_raw_fd()).map_err(err2io) }\n+        unsafe { wasi::fd_datasync(self.as_raw_fd() as wasi::Fd).map_err(err2io) }\n     }\n \n     pub fn pread(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize> {\n-        unsafe { wasi::fd_pread(self.as_raw_fd(), iovec(bufs), offset).map_err(err2io) }\n+        unsafe { wasi::fd_pread(self.as_raw_fd() as wasi::Fd, iovec(bufs), offset).map_err(err2io) }\n     }\n \n     pub fn pwrite(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize> {\n-        unsafe { wasi::fd_pwrite(self.as_raw_fd(), ciovec(bufs), offset).map_err(err2io) }\n+        unsafe {\n+            wasi::fd_pwrite(self.as_raw_fd() as wasi::Fd, ciovec(bufs), offset).map_err(err2io)\n+        }\n     }\n \n     pub fn read(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        unsafe { wasi::fd_read(self.as_raw_fd(), iovec(bufs)).map_err(err2io) }\n+        unsafe { wasi::fd_read(self.as_raw_fd() as wasi::Fd, iovec(bufs)).map_err(err2io) }\n     }\n \n     pub fn write(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n-        unsafe { wasi::fd_write(self.as_raw_fd(), ciovec(bufs)).map_err(err2io) }\n+        unsafe { wasi::fd_write(self.as_raw_fd() as wasi::Fd, ciovec(bufs)).map_err(err2io) }\n     }\n \n     pub fn seek(&self, pos: SeekFrom) -> io::Result<u64> {\n@@ -55,37 +56,42 @@ impl WasiFd {\n             SeekFrom::End(pos) => (wasi::WHENCE_END, pos),\n             SeekFrom::Current(pos) => (wasi::WHENCE_CUR, pos),\n         };\n-        unsafe { wasi::fd_seek(self.as_raw_fd(), offset, whence).map_err(err2io) }\n+        unsafe { wasi::fd_seek(self.as_raw_fd() as wasi::Fd, offset, whence).map_err(err2io) }\n     }\n \n     pub fn tell(&self) -> io::Result<u64> {\n-        unsafe { wasi::fd_tell(self.as_raw_fd()).map_err(err2io) }\n+        unsafe { wasi::fd_tell(self.as_raw_fd() as wasi::Fd).map_err(err2io) }\n     }\n \n     // FIXME: __wasi_fd_fdstat_get\n \n     pub fn set_flags(&self, flags: wasi::Fdflags) -> io::Result<()> {\n-        unsafe { wasi::fd_fdstat_set_flags(self.as_raw_fd(), flags).map_err(err2io) }\n+        unsafe { wasi::fd_fdstat_set_flags(self.as_raw_fd() as wasi::Fd, flags).map_err(err2io) }\n     }\n \n     pub fn set_rights(&self, base: wasi::Rights, inheriting: wasi::Rights) -> io::Result<()> {\n-        unsafe { wasi::fd_fdstat_set_rights(self.as_raw_fd(), base, inheriting).map_err(err2io) }\n+        unsafe {\n+            wasi::fd_fdstat_set_rights(self.as_raw_fd() as wasi::Fd, base, inheriting)\n+                .map_err(err2io)\n+        }\n     }\n \n     pub fn sync(&self) -> io::Result<()> {\n-        unsafe { wasi::fd_sync(self.as_raw_fd()).map_err(err2io) }\n+        unsafe { wasi::fd_sync(self.as_raw_fd() as wasi::Fd).map_err(err2io) }\n     }\n \n     pub fn advise(&self, offset: u64, len: u64, advice: wasi::Advice) -> io::Result<()> {\n-        unsafe { wasi::fd_advise(self.as_raw_fd(), offset, len, advice).map_err(err2io) }\n+        unsafe {\n+            wasi::fd_advise(self.as_raw_fd() as wasi::Fd, offset, len, advice).map_err(err2io)\n+        }\n     }\n \n     pub fn allocate(&self, offset: u64, len: u64) -> io::Result<()> {\n-        unsafe { wasi::fd_allocate(self.as_raw_fd(), offset, len).map_err(err2io) }\n+        unsafe { wasi::fd_allocate(self.as_raw_fd() as wasi::Fd, offset, len).map_err(err2io) }\n     }\n \n     pub fn create_directory(&self, path: &str) -> io::Result<()> {\n-        unsafe { wasi::path_create_directory(self.as_raw_fd(), path).map_err(err2io) }\n+        unsafe { wasi::path_create_directory(self.as_raw_fd() as wasi::Fd, path).map_err(err2io) }\n     }\n \n     pub fn link(\n@@ -96,8 +102,14 @@ impl WasiFd {\n         new_path: &str,\n     ) -> io::Result<()> {\n         unsafe {\n-            wasi::path_link(self.as_raw_fd(), old_flags, old_path, new_fd.as_raw_fd(), new_path)\n-                .map_err(err2io)\n+            wasi::path_link(\n+                self.as_raw_fd() as wasi::Fd,\n+                old_flags,\n+                old_path,\n+                new_fd.as_raw_fd() as wasi::Fd,\n+                new_path,\n+            )\n+            .map_err(err2io)\n         }\n     }\n \n@@ -112,40 +124,47 @@ impl WasiFd {\n     ) -> io::Result<WasiFd> {\n         unsafe {\n             wasi::path_open(\n-                self.as_raw_fd(),\n+                self.as_raw_fd() as wasi::Fd,\n                 dirflags,\n                 path,\n                 oflags,\n                 fs_rights_base,\n                 fs_rights_inheriting,\n                 fs_flags,\n             )\n-            .map(|fd| WasiFd::from_raw_fd(fd))\n+            .map(|fd| WasiFd::from_raw_fd(fd as RawFd))\n             .map_err(err2io)\n         }\n     }\n \n     pub fn readdir(&self, buf: &mut [u8], cookie: wasi::Dircookie) -> io::Result<usize> {\n         unsafe {\n-            wasi::fd_readdir(self.as_raw_fd(), buf.as_mut_ptr(), buf.len(), cookie).map_err(err2io)\n+            wasi::fd_readdir(self.as_raw_fd() as wasi::Fd, buf.as_mut_ptr(), buf.len(), cookie)\n+                .map_err(err2io)\n         }\n     }\n \n     pub fn readlink(&self, path: &str, buf: &mut [u8]) -> io::Result<usize> {\n         unsafe {\n-            wasi::path_readlink(self.as_raw_fd(), path, buf.as_mut_ptr(), buf.len()).map_err(err2io)\n+            wasi::path_readlink(self.as_raw_fd() as wasi::Fd, path, buf.as_mut_ptr(), buf.len())\n+                .map_err(err2io)\n         }\n     }\n \n     pub fn rename(&self, old_path: &str, new_fd: &WasiFd, new_path: &str) -> io::Result<()> {\n         unsafe {\n-            wasi::path_rename(self.as_raw_fd(), old_path, new_fd.as_raw_fd(), new_path)\n-                .map_err(err2io)\n+            wasi::path_rename(\n+                self.as_raw_fd() as wasi::Fd,\n+                old_path,\n+                new_fd.as_raw_fd() as wasi::Fd,\n+                new_path,\n+            )\n+            .map_err(err2io)\n         }\n     }\n \n     pub fn filestat_get(&self) -> io::Result<wasi::Filestat> {\n-        unsafe { wasi::fd_filestat_get(self.as_raw_fd()).map_err(err2io) }\n+        unsafe { wasi::fd_filestat_get(self.as_raw_fd() as wasi::Fd).map_err(err2io) }\n     }\n \n     pub fn filestat_set_times(\n@@ -155,20 +174,23 @@ impl WasiFd {\n         fstflags: wasi::Fstflags,\n     ) -> io::Result<()> {\n         unsafe {\n-            wasi::fd_filestat_set_times(self.as_raw_fd(), atim, mtim, fstflags).map_err(err2io)\n+            wasi::fd_filestat_set_times(self.as_raw_fd() as wasi::Fd, atim, mtim, fstflags)\n+                .map_err(err2io)\n         }\n     }\n \n     pub fn filestat_set_size(&self, size: u64) -> io::Result<()> {\n-        unsafe { wasi::fd_filestat_set_size(self.as_raw_fd(), size).map_err(err2io) }\n+        unsafe { wasi::fd_filestat_set_size(self.as_raw_fd() as wasi::Fd, size).map_err(err2io) }\n     }\n \n     pub fn path_filestat_get(\n         &self,\n         flags: wasi::Lookupflags,\n         path: &str,\n     ) -> io::Result<wasi::Filestat> {\n-        unsafe { wasi::path_filestat_get(self.as_raw_fd(), flags, path).map_err(err2io) }\n+        unsafe {\n+            wasi::path_filestat_get(self.as_raw_fd() as wasi::Fd, flags, path).map_err(err2io)\n+        }\n     }\n \n     pub fn path_filestat_set_times(\n@@ -180,33 +202,46 @@ impl WasiFd {\n         fstflags: wasi::Fstflags,\n     ) -> io::Result<()> {\n         unsafe {\n-            wasi::path_filestat_set_times(self.as_raw_fd(), flags, path, atim, mtim, fstflags)\n-                .map_err(err2io)\n+            wasi::path_filestat_set_times(\n+                self.as_raw_fd() as wasi::Fd,\n+                flags,\n+                path,\n+                atim,\n+                mtim,\n+                fstflags,\n+            )\n+            .map_err(err2io)\n         }\n     }\n \n     pub fn symlink(&self, old_path: &str, new_path: &str) -> io::Result<()> {\n-        unsafe { wasi::path_symlink(old_path, self.as_raw_fd(), new_path).map_err(err2io) }\n+        unsafe {\n+            wasi::path_symlink(old_path, self.as_raw_fd() as wasi::Fd, new_path).map_err(err2io)\n+        }\n     }\n \n     pub fn unlink_file(&self, path: &str) -> io::Result<()> {\n-        unsafe { wasi::path_unlink_file(self.as_raw_fd(), path).map_err(err2io) }\n+        unsafe { wasi::path_unlink_file(self.as_raw_fd() as wasi::Fd, path).map_err(err2io) }\n     }\n \n     pub fn remove_directory(&self, path: &str) -> io::Result<()> {\n-        unsafe { wasi::path_remove_directory(self.as_raw_fd(), path).map_err(err2io) }\n+        unsafe { wasi::path_remove_directory(self.as_raw_fd() as wasi::Fd, path).map_err(err2io) }\n     }\n \n     pub fn sock_recv(\n         &self,\n         ri_data: &mut [IoSliceMut<'_>],\n         ri_flags: wasi::Riflags,\n     ) -> io::Result<(usize, wasi::Roflags)> {\n-        unsafe { wasi::sock_recv(self.as_raw_fd(), iovec(ri_data), ri_flags).map_err(err2io) }\n+        unsafe {\n+            wasi::sock_recv(self.as_raw_fd() as wasi::Fd, iovec(ri_data), ri_flags).map_err(err2io)\n+        }\n     }\n \n     pub fn sock_send(&self, si_data: &[IoSlice<'_>], si_flags: wasi::Siflags) -> io::Result<usize> {\n-        unsafe { wasi::sock_send(self.as_raw_fd(), ciovec(si_data), si_flags).map_err(err2io) }\n+        unsafe {\n+            wasi::sock_send(self.as_raw_fd() as wasi::Fd, ciovec(si_data), si_flags).map_err(err2io)\n+        }\n     }\n \n     pub fn sock_shutdown(&self, how: Shutdown) -> io::Result<()> {\n@@ -215,7 +250,7 @@ impl WasiFd {\n             Shutdown::Write => wasi::SDFLAGS_WR,\n             Shutdown::Both => wasi::SDFLAGS_WR | wasi::SDFLAGS_RD,\n         };\n-        unsafe { wasi::sock_shutdown(self.as_raw_fd(), how).map_err(err2io) }\n+        unsafe { wasi::sock_shutdown(self.as_raw_fd() as wasi::Fd, how).map_err(err2io) }\n     }\n }\n "}, {"sha": "c7c4a9f6efdfb8fad71c442251e61be3ea0990d0", "filename": "library/std/src/sys/wasi/net.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e555003e6d6b6d71ce5509a6b6c7a15861208d6c/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs?ref=e555003e6d6b6d71ce5509a6b6c7a15861208d6c", "patch": "@@ -5,7 +5,6 @@ use crate::convert::TryFrom;\n use crate::fmt;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n-use crate::os::raw::c_int;\n use crate::os::wasi::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, IntoRawFd, RawFd};\n use crate::sys::unsupported;\n use crate::sys_common::{AsInner, FromInner, IntoInner};"}]}