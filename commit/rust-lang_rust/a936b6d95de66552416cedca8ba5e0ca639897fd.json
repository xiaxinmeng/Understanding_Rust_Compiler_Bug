{"sha": "a936b6d95de66552416cedca8ba5e0ca639897fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MzZiNmQ5NWRlNjY1NTI0MTZjZWRjYThiYTVlMGNhNjM5ODk3ZmQ=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-12T20:32:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-12T20:32:45Z"}, "message": "Merge pull request #2664 from phansch/move_unnecessary_fold_ui_tests\n\nMove unnecessary_fold UI tests to separate file", "tree": {"sha": "3993710bd4d62c6d91ba22d362ec54c84b635360", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3993710bd4d62c6d91ba22d362ec54c84b635360"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a936b6d95de66552416cedca8ba5e0ca639897fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaz8JtCRBK7hj4Ov3rIwAAdHIIAEqZNUnv5GqjtzfTH+pH4k22\nhPnkMAun63CB6tqlknRUEIjwG/3jxTO97pdHAitleCqLNJ0RbIPFgUEBtjgkX6zm\n5/ESbTb9kL5BZW5VnZFWwYcBGIH7nBsywibwC16y/R08BPWuQNPiiqbA3nql8kb1\nxAq3Ijhd03VCRyjQghmPvtyt4F5HDpLnQFt24y0xBliGxXRjJ2ed34Ypwj/o6WIK\nsw99LWTw+akjz0B3SgkZAMnE7aYfVrbeMkJ2uBAYl8c5xrjxvX40rIt1XvY+H2Nh\nnbR2g0JVL7Fi/eviKin/HwWGvZccgE50NOiCcxy6j22OAOWW2SApwwLeWsHSnXY=\n=+VZm\n-----END PGP SIGNATURE-----\n", "payload": "tree 3993710bd4d62c6d91ba22d362ec54c84b635360\nparent 8ec61a613ad1278b18a4770332b6da128704fdd6\nparent dfde407f0d81b2155a6354fa8ddc5a5ad0d7c2b6\nauthor Philipp Hansch <dev@phansch.net> 1523565165 +0200\ncommitter GitHub <noreply@github.com> 1523565165 +0200\n\nMerge pull request #2664 from phansch/move_unnecessary_fold_ui_tests\n\nMove unnecessary_fold UI tests to separate file"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a936b6d95de66552416cedca8ba5e0ca639897fd", "html_url": "https://github.com/rust-lang/rust/commit/a936b6d95de66552416cedca8ba5e0ca639897fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a936b6d95de66552416cedca8ba5e0ca639897fd/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ec61a613ad1278b18a4770332b6da128704fdd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec61a613ad1278b18a4770332b6da128704fdd6", "html_url": "https://github.com/rust-lang/rust/commit/8ec61a613ad1278b18a4770332b6da128704fdd6"}, {"sha": "dfde407f0d81b2155a6354fa8ddc5a5ad0d7c2b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfde407f0d81b2155a6354fa8ddc5a5ad0d7c2b6", "html_url": "https://github.com/rust-lang/rust/commit/dfde407f0d81b2155a6354fa8ddc5a5ad0d7c2b6"}], "stats": {"total": 151, "additions": 77, "deletions": 74}, "files": [{"sha": "9e25365583331212c8bfd38b436c3005856399a9", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a936b6d95de66552416cedca8ba5e0ca639897fd/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a936b6d95de66552416cedca8ba5e0ca639897fd/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=a936b6d95de66552416cedca8ba5e0ca639897fd", "patch": "@@ -385,45 +385,6 @@ fn iter_skip_next() {\n     let _ = foo.filter().skip(42).next();\n }\n \n-/// Calls which should trigger the `UNNECESSARY_FOLD` lint\n-fn unnecessary_fold() {\n-    // Can be replaced by .any\n-    let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n-    // Can be replaced by .all\n-    let _ = (0..3).fold(true, |acc, x| acc && x > 2);\n-    // Can be replaced by .sum\n-    let _ = (0..3).fold(0, |acc, x| acc + x);\n-    // Can be replaced by .product\n-    let _ = (0..3).fold(1, |acc, x| acc * x);\n-}\n-\n-/// Should trigger the `UNNECESSARY_FOLD` lint, with an error span including exactly `.fold(...)`\n-fn unnecessary_fold_span_for_multi_element_chain() {\n-    let _ = (0..3).map(|x| 2 * x).fold(false, |acc, x| acc || x > 2);\n-}\n-\n-/// Calls which should not trigger the `UNNECESSARY_FOLD` lint\n-fn unnecessary_fold_should_ignore() {\n-    let _ = (0..3).fold(true, |acc, x| acc || x > 2);\n-    let _ = (0..3).fold(false, |acc, x| acc && x > 2);\n-    let _ = (0..3).fold(1, |acc, x| acc + x);\n-    let _ = (0..3).fold(0, |acc, x| acc * x);\n-    let _ = (0..3).fold(0, |acc, x| 1 + acc + x);\n-\n-    // We only match against an accumulator on the left\n-    // hand side. We could lint for .sum and .product when\n-    // it's on the right, but don't for now (and this wouldn't\n-    // be valid if we extended the lint to cover arbitrary numeric\n-    // types).\n-    let _ = (0..3).fold(false, |acc, x| x > 2 || acc);\n-    let _ = (0..3).fold(true, |acc, x| x > 2 && acc);\n-    let _ = (0..3).fold(0, |acc, x| x + acc);\n-    let _ = (0..3).fold(1, |acc, x| x * acc);\n-\n-    let _ = [(0..2), (0..3)].iter().fold(0, |a, b| a + b.len());\n-    let _ = [(0..2), (0..3)].iter().fold(1, |a, b| a * b.len());\n-}\n-\n #[allow(similar_names)]\n fn main() {\n     let opt = Some(0);"}, {"sha": "1dd1ddc3caadb82ae7ef4128183000445575bd79", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 3, "deletions": 35, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a936b6d95de66552416cedca8ba5e0ca639897fd/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a936b6d95de66552416cedca8ba5e0ca639897fd/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=a936b6d95de66552416cedca8ba5e0ca639897fd", "patch": "@@ -493,45 +493,13 @@ error: called `skip(x).next()` on an iterator. This is more succinctly expressed\n 382 |     let _ = &some_vec[..].iter().skip(3).next();\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: this `.fold` can be written more succinctly using another method\n-   --> $DIR/methods.rs:391:19\n-    |\n-391 |     let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n-    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n-    |\n-    = note: `-D unnecessary-fold` implied by `-D warnings`\n-\n-error: this `.fold` can be written more succinctly using another method\n-   --> $DIR/methods.rs:393:19\n-    |\n-393 |     let _ = (0..3).fold(true, |acc, x| acc && x > 2);\n-    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.all(|x| x > 2)`\n-\n-error: this `.fold` can be written more succinctly using another method\n-   --> $DIR/methods.rs:395:19\n-    |\n-395 |     let _ = (0..3).fold(0, |acc, x| acc + x);\n-    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.sum()`\n-\n-error: this `.fold` can be written more succinctly using another method\n-   --> $DIR/methods.rs:397:19\n-    |\n-397 |     let _ = (0..3).fold(1, |acc, x| acc * x);\n-    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.product()`\n-\n-error: this `.fold` can be written more succinctly using another method\n-   --> $DIR/methods.rs:402:34\n-    |\n-402 |     let _ = (0..3).map(|x| 2 * x).fold(false, |acc, x| acc || x > 2);\n-    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n-\n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:430:13\n+   --> $DIR/methods.rs:391:13\n     |\n-430 |     let _ = opt.unwrap();\n+391 |     let _ = opt.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D option-unwrap-used` implied by `-D warnings`\n \n-error: aborting due to 71 previous errors\n+error: aborting due to 66 previous errors\n "}, {"sha": "62198e21ef7ce7ca4fb5449cd108472aef35b948", "filename": "tests/ui/unnecessary_fold.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a936b6d95de66552416cedca8ba5e0ca639897fd/tests%2Fui%2Funnecessary_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a936b6d95de66552416cedca8ba5e0ca639897fd/tests%2Fui%2Funnecessary_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_fold.rs?ref=a936b6d95de66552416cedca8ba5e0ca639897fd", "patch": "@@ -0,0 +1,40 @@\n+/// Calls which should trigger the `UNNECESSARY_FOLD` lint\n+fn unnecessary_fold() {\n+    // Can be replaced by .any\n+    let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n+    // Can be replaced by .all\n+    let _ = (0..3).fold(true, |acc, x| acc && x > 2);\n+    // Can be replaced by .sum\n+    let _ = (0..3).fold(0, |acc, x| acc + x);\n+    // Can be replaced by .product\n+    let _ = (0..3).fold(1, |acc, x| acc * x);\n+}\n+\n+/// Should trigger the `UNNECESSARY_FOLD` lint, with an error span including exactly `.fold(...)`\n+fn unnecessary_fold_span_for_multi_element_chain() {\n+    let _ = (0..3).map(|x| 2 * x).fold(false, |acc, x| acc || x > 2);\n+}\n+\n+/// Calls which should not trigger the `UNNECESSARY_FOLD` lint\n+fn unnecessary_fold_should_ignore() {\n+    let _ = (0..3).fold(true, |acc, x| acc || x > 2);\n+    let _ = (0..3).fold(false, |acc, x| acc && x > 2);\n+    let _ = (0..3).fold(1, |acc, x| acc + x);\n+    let _ = (0..3).fold(0, |acc, x| acc * x);\n+    let _ = (0..3).fold(0, |acc, x| 1 + acc + x);\n+\n+    // We only match against an accumulator on the left\n+    // hand side. We could lint for .sum and .product when\n+    // it's on the right, but don't for now (and this wouldn't\n+    // be valid if we extended the lint to cover arbitrary numeric\n+    // types).\n+    let _ = (0..3).fold(false, |acc, x| x > 2 || acc);\n+    let _ = (0..3).fold(true, |acc, x| x > 2 && acc);\n+    let _ = (0..3).fold(0, |acc, x| x + acc);\n+    let _ = (0..3).fold(1, |acc, x| x * acc);\n+\n+    let _ = [(0..2), (0..3)].iter().fold(0, |a, b| a + b.len());\n+    let _ = [(0..2), (0..3)].iter().fold(1, |a, b| a * b.len());\n+}\n+\n+fn main() {}"}, {"sha": "8bc4b8244bd55b28ee29cf5e5b6b3468149f7684", "filename": "tests/ui/unnecessary_fold.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a936b6d95de66552416cedca8ba5e0ca639897fd/tests%2Fui%2Funnecessary_fold.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a936b6d95de66552416cedca8ba5e0ca639897fd/tests%2Fui%2Funnecessary_fold.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_fold.stderr?ref=a936b6d95de66552416cedca8ba5e0ca639897fd", "patch": "@@ -0,0 +1,34 @@\n+error: this `.fold` can be written more succinctly using another method\n+ --> $DIR/unnecessary_fold.rs:4:19\n+  |\n+4 |     let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n+  |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n+  |\n+  = note: `-D unnecessary-fold` implied by `-D warnings`\n+\n+error: this `.fold` can be written more succinctly using another method\n+ --> $DIR/unnecessary_fold.rs:6:19\n+  |\n+6 |     let _ = (0..3).fold(true, |acc, x| acc && x > 2);\n+  |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.all(|x| x > 2)`\n+\n+error: this `.fold` can be written more succinctly using another method\n+ --> $DIR/unnecessary_fold.rs:8:19\n+  |\n+8 |     let _ = (0..3).fold(0, |acc, x| acc + x);\n+  |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.sum()`\n+\n+error: this `.fold` can be written more succinctly using another method\n+  --> $DIR/unnecessary_fold.rs:10:19\n+   |\n+10 |     let _ = (0..3).fold(1, |acc, x| acc * x);\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.product()`\n+\n+error: this `.fold` can be written more succinctly using another method\n+  --> $DIR/unnecessary_fold.rs:15:34\n+   |\n+15 |     let _ = (0..3).map(|x| 2 * x).fold(false, |acc, x| acc || x > 2);\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n+\n+error: aborting due to 5 previous errors\n+"}]}