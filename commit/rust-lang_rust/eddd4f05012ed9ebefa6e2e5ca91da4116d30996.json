{"sha": "eddd4f05012ed9ebefa6e2e5ca91da4116d30996", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZGQ0ZjA1MDEyZWQ5ZWJlZmE2ZTJlNWNhOTFkYTQxMTZkMzA5OTY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-04T15:54:28Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-04T15:54:28Z"}, "message": "Add tracking issue for map_try_insert.", "tree": {"sha": "dc87e9168f0bbbb16ec3287c992b0b924f8272d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc87e9168f0bbbb16ec3287c992b0b924f8272d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eddd4f05012ed9ebefa6e2e5ca91da4116d30996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eddd4f05012ed9ebefa6e2e5ca91da4116d30996", "html_url": "https://github.com/rust-lang/rust/commit/eddd4f05012ed9ebefa6e2e5ca91da4116d30996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eddd4f05012ed9ebefa6e2e5ca91da4116d30996/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1aedb4c3a38b099a127c3fd3815400b3d0098475", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aedb4c3a38b099a127c3fd3815400b3d0098475", "html_url": "https://github.com/rust-lang/rust/commit/1aedb4c3a38b099a127c3fd3815400b3d0098475"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "622983996aa08651edb6c36a82f5b868a4152e2b", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eddd4f05012ed9ebefa6e2e5ca91da4116d30996/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddd4f05012ed9ebefa6e2e5ca91da4116d30996/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=eddd4f05012ed9ebefa6e2e5ca91da4116d30996", "patch": "@@ -859,7 +859,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(err.entry.get(), &\"a\");\n     /// assert_eq!(err.value, \"b\");\n     /// ```\n-    #[unstable(feature = \"map_try_insert\", issue = \"none\")]\n+    #[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n     pub fn try_insert(&mut self, key: K, value: V) -> Result<&mut V, OccupiedError<'_, K, V>>\n     where\n         K: Ord,"}, {"sha": "6b30d95977395fc9c53d7cba74d5c79a487719a1", "filename": "library/alloc/src/collections/btree/map/entry.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eddd4f05012ed9ebefa6e2e5ca91da4116d30996/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddd4f05012ed9ebefa6e2e5ca91da4116d30996/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs?ref=eddd4f05012ed9ebefa6e2e5ca91da4116d30996", "patch": "@@ -74,15 +74,15 @@ impl<K: Debug + Ord, V: Debug> Debug for OccupiedEntry<'_, K, V> {\n /// The error returned by [`try_insert`](BTreeMap::try_insert) when the key already exists.\n ///\n /// Contains the occupied entry, and the value that was not inserted.\n-#[unstable(feature = \"map_try_insert\", issue = \"none\")]\n+#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n pub struct OccupiedError<'a, K: 'a, V: 'a> {\n     /// The entry in the map that was already occupied.\n     pub entry: OccupiedEntry<'a, K, V>,\n     /// The value which was not inserted, because the entry was already occupied.\n     pub value: V,\n }\n \n-#[unstable(feature = \"map_try_insert\", issue = \"none\")]\n+#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n impl<K: Debug + Ord, V: Debug> Debug for OccupiedError<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"OccupiedError\")\n@@ -93,7 +93,7 @@ impl<K: Debug + Ord, V: Debug> Debug for OccupiedError<'_, K, V> {\n     }\n }\n \n-#[unstable(feature = \"map_try_insert\", issue = \"none\")]\n+#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n impl<'a, K: Debug + Ord, V: Debug> fmt::Display for OccupiedError<'a, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!("}, {"sha": "233afa92389992328b7838417e2e046587a04a56", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eddd4f05012ed9ebefa6e2e5ca91da4116d30996/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddd4f05012ed9ebefa6e2e5ca91da4116d30996/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=eddd4f05012ed9ebefa6e2e5ca91da4116d30996", "patch": "@@ -867,7 +867,7 @@ where\n     /// assert_eq!(err.entry.get(), &\"a\");\n     /// assert_eq!(err.value, \"b\");\n     /// ```\n-    #[unstable(feature = \"map_try_insert\", issue = \"none\")]\n+    #[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n     pub fn try_insert(&mut self, key: K, value: V) -> Result<&mut V, OccupiedError<'_, K, V>> {\n         match self.entry(key) {\n             Occupied(entry) => Err(OccupiedError { entry, value }),\n@@ -1887,15 +1887,15 @@ impl<K: Debug, V> Debug for VacantEntry<'_, K, V> {\n /// The error returned by [`try_insert`](HashMap::try_insert) when the key already exists.\n ///\n /// Contains the occupied entry, and the value that was not inserted.\n-#[unstable(feature = \"map_try_insert\", issue = \"none\")]\n+#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n pub struct OccupiedError<'a, K: 'a, V: 'a> {\n     /// The entry in the map that was already occupied.\n     pub entry: OccupiedEntry<'a, K, V>,\n     /// The value which was not inserted, because the entry was already occupied.\n     pub value: V,\n }\n \n-#[unstable(feature = \"map_try_insert\", issue = \"none\")]\n+#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n impl<K: Debug, V: Debug> Debug for OccupiedError<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"OccupiedError\")\n@@ -1906,7 +1906,7 @@ impl<K: Debug, V: Debug> Debug for OccupiedError<'_, K, V> {\n     }\n }\n \n-#[unstable(feature = \"map_try_insert\", issue = \"none\")]\n+#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n impl<'a, K: Debug, V: Debug> fmt::Display for OccupiedError<'a, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!("}, {"sha": "80c35307d52ac73643c26a9eef7e8f5bc46d75ac", "filename": "library/std/src/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eddd4f05012ed9ebefa6e2e5ca91da4116d30996/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eddd4f05012ed9ebefa6e2e5ca91da4116d30996/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=eddd4f05012ed9ebefa6e2e5ca91da4116d30996", "patch": "@@ -470,7 +470,7 @@ impl Error for char::DecodeUtf16Error {\n     }\n }\n \n-#[unstable(feature = \"map_try_insert\", issue = \"none\")]\n+#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n impl<'a, K: Debug + Ord, V: Debug> Error\n     for crate::collections::btree_map::OccupiedError<'a, K, V>\n {\n@@ -480,7 +480,7 @@ impl<'a, K: Debug + Ord, V: Debug> Error\n     }\n }\n \n-#[unstable(feature = \"map_try_insert\", issue = \"none\")]\n+#[unstable(feature = \"map_try_insert\", issue = \"82766\")]\n impl<'a, K: Debug, V: Debug> Error for crate::collections::hash_map::OccupiedError<'a, K, V> {\n     #[allow(deprecated)]\n     fn description(&self) -> &str {"}]}