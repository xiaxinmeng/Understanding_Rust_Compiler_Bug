{"sha": "6f629d365407cac1de372a64abec046dce6d9bb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNjI5ZDM2NTQwN2NhYzFkZTM3MmE2NGFiZWMwNDZkY2U2ZDliYjE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-14T07:22:57Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-14T07:22:57Z"}, "message": "Rollup merge of #49913 - varkor:RegionParameterDef-InternedString, r=petrochenkov\n\nUse InternedString rather than Name for RegionParameterDef\n\nThis makes it consistent with `TypeParameterDef`.", "tree": {"sha": "ac757d430ad936143745a9e2c8070017502a555d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac757d430ad936143745a9e2c8070017502a555d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f629d365407cac1de372a64abec046dce6d9bb1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlrRrFEACgkQ/vbIBR0O\nATxt5Q/+JCpfDokFMkXusKj6sd5sMGcOFA3Bj+eVKN53JIYzFUrJ5yZTMX5WWTja\n0Wo6GIrCPtPpNialsO5sh5v1Jp8dZ9FXKXq2C7Nz419WZIopF8mNlFfolHOjeoBe\nBmZKb2/MM971qBPuK+ZHwu6rXjVQ+8D4m5+n2Lvj0RC1qxh3Hkha47fKBpImwERz\nj2/f0aPA5TXbYsg37OLPtmEo2cqMODGmuKYck7Sc7PafMCYBhXlAIKVK9zpzaPX0\nzT1ugflTUJRGTtXCV2taZgGCPEcw/PVKsFrFp56zJq/lKjgKzKWo6TjUWZkB/9GC\nsWs/jf6lRw4sB65i4ZcVxhF59GdnvvtwmB9mcqjWyToeZSrHtqi306NpEBEVoUcy\nHIaKZ6i2pJL/Amr4v2TeXGuX50/wtrcXYtb0ce5Cettap26kXFUyTvd4IVSJyZ4i\nqpzFd27pMFvHxwCHoYbxv1LSlpAww0eEnXKChZ2Ser/vE2LjmchQmCgaBsnGyC6s\n7B/tu9HYyZVyvx4qmkpp+NqD5YIgaYBI9OCad9HosvilqOXnJMUMN/gZf06ozdWZ\n9kx+TxAYwN66SgEgLmX69hG7ztYeZZdA4oXmua/i8KNx0yKVk6An8XR8qhd90VRy\nFCe6FkyWDj9M4DpAq1RLBfKvzjnQ/dAk6flckMRHIdDugcJgah8=\n=Xh8i\n-----END PGP SIGNATURE-----", "payload": "tree ac757d430ad936143745a9e2c8070017502a555d\nparent 44a71e2e6125aa1289a973d602057c4aecd2f600\nparent 6234d4192a8e0cc176dd1bac6a41206a3eab95d7\nauthor kennytm <kennytm@gmail.com> 1523690577 +0800\ncommitter kennytm <kennytm@gmail.com> 1523690577 +0800\n\nRollup merge of #49913 - varkor:RegionParameterDef-InternedString, r=petrochenkov\n\nUse InternedString rather than Name for RegionParameterDef\n\nThis makes it consistent with `TypeParameterDef`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f629d365407cac1de372a64abec046dce6d9bb1", "html_url": "https://github.com/rust-lang/rust/commit/6f629d365407cac1de372a64abec046dce6d9bb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f629d365407cac1de372a64abec046dce6d9bb1/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44a71e2e6125aa1289a973d602057c4aecd2f600", "url": "https://api.github.com/repos/rust-lang/rust/commits/44a71e2e6125aa1289a973d602057c4aecd2f600", "html_url": "https://github.com/rust-lang/rust/commit/44a71e2e6125aa1289a973d602057c4aecd2f600"}, {"sha": "6234d4192a8e0cc176dd1bac6a41206a3eab95d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6234d4192a8e0cc176dd1bac6a41206a3eab95d7", "html_url": "https://github.com/rust-lang/rust/commit/6234d4192a8e0cc176dd1bac6a41206a3eab95d7"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "84bf9cc84e7373499419c79f7d4b9682840801aa", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f629d365407cac1de372a64abec046dce6d9bb1/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f629d365407cac1de372a64abec046dce6d9bb1/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=6f629d365407cac1de372a64abec046dce6d9bb1", "patch": "@@ -35,6 +35,7 @@ use std::fmt;\n use syntax::ast;\n use errors::DiagnosticBuilder;\n use syntax_pos::{self, Span};\n+use syntax_pos::symbol::InternedString;\n use util::nodemap::FxHashMap;\n use arena::DroplessArena;\n \n@@ -343,7 +344,7 @@ pub enum RegionVariableOrigin {\n     Coercion(Span),\n \n     // Region variables created as the values for early-bound regions\n-    EarlyBoundRegion(Span, ast::Name),\n+    EarlyBoundRegion(Span, InternedString),\n \n     // Region variables created for bound regions\n     // in a function or method that is called"}, {"sha": "c3d2d5675de0544de65a577b3c0f62b4ed9b974c", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f629d365407cac1de372a64abec046dce6d9bb1/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f629d365407cac1de372a64abec046dce6d9bb1/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=6f629d365407cac1de372a64abec046dce6d9bb1", "patch": "@@ -728,7 +728,7 @@ pub struct TypeParameterDef {\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n pub struct RegionParameterDef {\n-    pub name: Name,\n+    pub name: InternedString,\n     pub def_id: DefId,\n     pub index: u32,\n "}, {"sha": "d68393956efd1a51ece763e6e8e1314eb1cae533", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f629d365407cac1de372a64abec046dce6d9bb1/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f629d365407cac1de372a64abec046dce6d9bb1/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=6f629d365407cac1de372a64abec046dce6d9bb1", "patch": "@@ -58,7 +58,7 @@ pub enum BoundRegion {\n     ///\n     /// The def-id is needed to distinguish free regions in\n     /// the event of shadowing.\n-    BrNamed(DefId, Name),\n+    BrNamed(DefId, InternedString),\n \n     /// Fresh bound identifiers created during GLB computations.\n     BrFresh(u32),\n@@ -1058,7 +1058,7 @@ impl<'tcx> serialize::UseSpecializedDecodable for Region<'tcx> {}\n pub struct EarlyBoundRegion {\n     pub def_id: DefId,\n     pub index: u32,\n-    pub name: Name,\n+    pub name: InternedString,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]"}, {"sha": "dd478967b185a3539762868eb3f91beb6c979771", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6f629d365407cac1de372a64abec046dce6d9bb1/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f629d365407cac1de372a64abec046dce6d9bb1/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=6f629d365407cac1de372a64abec046dce6d9bb1", "patch": "@@ -30,7 +30,7 @@ use std::usize;\n use rustc_data_structures::indexed_vec::Idx;\n use syntax::abi::Abi;\n use syntax::ast::CRATE_NODE_ID;\n-use syntax::symbol::Symbol;\n+use syntax::symbol::{Symbol, InternedString};\n use hir;\n \n macro_rules! gen_display_debug_body {\n@@ -130,7 +130,7 @@ macro_rules! print {\n }\n \n \n-struct LateBoundRegionNameCollector(FxHashSet<Symbol>);\n+struct LateBoundRegionNameCollector(FxHashSet<InternedString>);\n impl<'tcx> ty::fold::TypeVisitor<'tcx> for LateBoundRegionNameCollector {\n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n         match *r {\n@@ -148,7 +148,7 @@ pub struct PrintContext {\n     is_debug: bool,\n     is_verbose: bool,\n     identify_regions: bool,\n-    used_region_names: Option<FxHashSet<Symbol>>,\n+    used_region_names: Option<FxHashSet<InternedString>>,\n     region_index: usize,\n     binder_depth: usize,\n }\n@@ -440,12 +440,12 @@ impl PrintContext {\n                                           lifted: Option<ty::Binder<U>>) -> fmt::Result\n         where T: Print, U: Print + TypeFoldable<'tcx>, F: fmt::Write\n     {\n-        fn name_by_region_index(index: usize) -> Symbol {\n+        fn name_by_region_index(index: usize) -> InternedString {\n             match index {\n                 0 => Symbol::intern(\"'r\"),\n                 1 => Symbol::intern(\"'s\"),\n                 i => Symbol::intern(&format!(\"'t{}\", i-2)),\n-            }\n+            }.as_str()\n         }\n \n         // Replace any anonymous late-bound regions with named\n@@ -493,8 +493,7 @@ impl PrintContext {\n                         }\n                     };\n                     let _ = write!(f, \"{}\", name);\n-                    ty::BrNamed(tcx.hir.local_def_id(CRATE_NODE_ID),\n-                                name)\n+                    ty::BrNamed(tcx.hir.local_def_id(CRATE_NODE_ID), name)\n                 }\n             };\n             tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::new(1), br))\n@@ -510,7 +509,7 @@ impl PrintContext {\n         result\n     }\n \n-    fn is_name_used(&self, name: &Symbol) -> bool {\n+    fn is_name_used(&self, name: &InternedString) -> bool {\n         match self.used_region_names {\n             Some(ref names) => names.contains(name),\n             None => false,\n@@ -697,7 +696,7 @@ define_print! {\n                 BrAnon(n) => write!(f, \"BrAnon({:?})\", n),\n                 BrFresh(n) => write!(f, \"BrFresh({:?})\", n),\n                 BrNamed(did, name) => {\n-                    write!(f, \"BrNamed({:?}:{:?}, {:?})\",\n+                    write!(f, \"BrNamed({:?}:{:?}, {})\",\n                            did.krate, did.index, name)\n                 }\n                 BrEnv => write!(f, \"BrEnv\"),"}, {"sha": "5aae895ccc4d5e1bfe0b8c61459b1d12060293a3", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f629d365407cac1de372a64abec046dce6d9bb1/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f629d365407cac1de372a64abec046dce6d9bb1/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=6f629d365407cac1de372a64abec046dce6d9bb1", "patch": "@@ -307,7 +307,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn re_early_bound(&self, index: u32, name: &'static str) -> ty::Region<'tcx> {\n-        let name = Symbol::intern(name);\n+        let name = Symbol::intern(name).as_str();\n         self.infcx.tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n             def_id: self.infcx.tcx.hir.local_def_id(ast::CRATE_NODE_ID),\n             index,"}, {"sha": "36debf677da2b5873128fb4fc2223894843bb638", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f629d365407cac1de372a64abec046dce6d9bb1/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f629d365407cac1de372a64abec046dce6d9bb1/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=6f629d365407cac1de372a64abec046dce6d9bb1", "patch": "@@ -100,7 +100,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n     {\n         let tcx = self.tcx();\n         let lifetime_name = |def_id| {\n-            tcx.hir.name(tcx.hir.as_local_node_id(def_id).unwrap())\n+            tcx.hir.name(tcx.hir.as_local_node_id(def_id).unwrap()).as_str()\n         };\n \n         let hir_id = tcx.hir.node_to_hir_id(lifetime.id);"}, {"sha": "f386e1d8b825d4d355336e23bfdd6560bc64566e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f629d365407cac1de372a64abec046dce6d9bb1/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f629d365407cac1de372a64abec046dce6d9bb1/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=6f629d365407cac1de372a64abec046dce6d9bb1", "patch": "@@ -886,7 +886,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let early_lifetimes = early_bound_lifetimes_from_generics(tcx, ast_generics);\n     let regions = early_lifetimes.enumerate().map(|(i, l)| {\n         ty::RegionParameterDef {\n-            name: l.lifetime.name.name(),\n+            name: l.lifetime.name.name().as_str(),\n             index: own_start + i as u32,\n             def_id: tcx.hir.local_def_id(l.lifetime.id),\n             pure_wrt_drop: l.pure_wrt_drop,\n@@ -1427,7 +1427,7 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let region = tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n             def_id: tcx.hir.local_def_id(param.lifetime.id),\n             index,\n-            name: param.lifetime.name.name(),\n+            name: param.lifetime.name.name().as_str(),\n         }));\n         index += 1;\n "}, {"sha": "52d5dbe3f05891384af205b80851cb6dcb93f1ab", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f629d365407cac1de372a64abec046dce6d9bb1/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f629d365407cac1de372a64abec046dce6d9bb1/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=6f629d365407cac1de372a64abec046dce6d9bb1", "patch": "@@ -224,7 +224,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                     let name = if p.name == \"\" {\n                         hir::LifetimeName::Static\n                     } else {\n-                        hir::LifetimeName::Name(p.name)\n+                        hir::LifetimeName::Name(Symbol::intern(&p.name))\n                     };\n \n                     hir::Lifetime {\n@@ -407,7 +407,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n             let names_map: FxHashMap<String, Lifetime> = generics\n                 .regions\n                 .iter()\n-                .map(|l| (l.name.as_str().to_string(), l.clean(self.cx)))\n+                .map(|l| (l.name.to_string(), l.clean(self.cx)))\n                 .collect();\n \n             let body_ids: FxHashSet<_> = infcx\n@@ -728,7 +728,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n \n     fn region_name(&self, region: Region) -> Option<String> {\n         match region {\n-            &ty::ReEarlyBound(r) => Some(r.name.as_str().to_string()),\n+            &ty::ReEarlyBound(r) => Some(r.name.to_string()),\n             _ => None,\n         }\n     }\n@@ -1005,7 +1005,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                         // We only care about late bound regions, as we need to add them\n                         // to the 'for<>' section\n                         &ty::ReLateBound(_, ty::BoundRegion::BrNamed(_, name)) => {\n-                            Some(GenericParam::Lifetime(Lifetime(name.as_str().to_string())))\n+                            Some(GenericParam::Lifetime(Lifetime(name.to_string())))\n                         }\n                         &ty::ReVar(_) | &ty::ReEarlyBound(_) => None,\n                         _ => panic!(\"Unexpected region type {:?}\", r),"}]}