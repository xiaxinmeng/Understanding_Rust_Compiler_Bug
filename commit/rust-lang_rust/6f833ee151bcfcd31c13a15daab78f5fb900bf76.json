{"sha": "6f833ee151bcfcd31c13a15daab78f5fb900bf76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmODMzZWUxNTFiY2ZjZDMxYzEzYTE1ZGFhYjc4ZjVmYjkwMGJmNzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-31T09:31:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-31T09:31:37Z"}, "message": "auto merge of #16074 : nham/rust/bitflags_traits, r=alexcrichton\n\nI wanted to add an implementation of `Default` inside the bitflags macro, but `Default` isn't in the prelude, which means anyone who wants to use `bitflags!` needs to import it. This seems not nice, so I've just implemented for `FilePermission` instead.", "tree": {"sha": "8b6cd5bba124353216eefac21ffe7ae7fbf879f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b6cd5bba124353216eefac21ffe7ae7fbf879f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f833ee151bcfcd31c13a15daab78f5fb900bf76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f833ee151bcfcd31c13a15daab78f5fb900bf76", "html_url": "https://github.com/rust-lang/rust/commit/6f833ee151bcfcd31c13a15daab78f5fb900bf76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f833ee151bcfcd31c13a15daab78f5fb900bf76/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28ae6f53299495019b6bac8c1bba2bcbb19de15c", "url": "https://api.github.com/repos/rust-lang/rust/commits/28ae6f53299495019b6bac8c1bba2bcbb19de15c", "html_url": "https://github.com/rust-lang/rust/commit/28ae6f53299495019b6bac8c1bba2bcbb19de15c"}, {"sha": "96d6126f9bae9a9171b150fb9a6e26047229faaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/96d6126f9bae9a9171b150fb9a6e26047229faaa", "html_url": "https://github.com/rust-lang/rust/commit/96d6126f9bae9a9171b150fb9a6e26047229faaa"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "d231189aeded04f51b1968e0e4466508f1bbf917", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6f833ee151bcfcd31c13a15daab78f5fb900bf76/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f833ee151bcfcd31c13a15daab78f5fb900bf76/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=6f833ee151bcfcd31c13a15daab78f5fb900bf76", "patch": "@@ -113,7 +113,7 @@ macro_rules! bitflags(\n     ($(#[$attr:meta])* flags $BitFlags:ident: $T:ty {\n         $($(#[$Flag_attr:meta])* static $Flag:ident = $value:expr),+\n     }) => (\n-        #[deriving(PartialEq, Eq, Clone)]\n+        #[deriving(PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]\n         $(#[$attr])*\n         pub struct $BitFlags {\n             bits: $T,\n@@ -220,6 +220,7 @@ macro_rules! bitflags(\n \n #[cfg(test)]\n mod tests {\n+    use hash;\n     use option::{Some, None};\n     use ops::{BitOr, BitAnd, Sub, Not};\n \n@@ -336,4 +337,42 @@ mod tests {\n         assert!((e1 - e2) == FlagA);     // set difference\n         assert!(!e2 == FlagA);           // set complement\n     }\n+\n+    #[test]\n+    fn test_lt() {\n+        let mut a = Flags::empty();\n+        let mut b = Flags::empty();\n+\n+        assert!(!(a < b) && !(b < a));\n+        b = FlagB;\n+        assert!(a < b);\n+        a = FlagC;\n+        assert!(!(a < b) && b < a);\n+        b = FlagC | FlagB;\n+        assert!(a < b);\n+    }\n+\n+    #[test]\n+    fn test_ord() {\n+        let mut a = Flags::empty();\n+        let mut b = Flags::empty();\n+\n+        assert!(a <= b && a >= b);\n+        a = FlagA;\n+        assert!(a > b && a >= b);\n+        assert!(b < a && b <= a);\n+        b = FlagB;\n+        assert!(b > a && b >= a);\n+        assert!(a < b && a <= b);\n+    }\n+\n+    #[test]\n+    fn test_hash() {\n+      let mut x = Flags::empty();\n+      let mut y = Flags::empty();\n+      assert!(hash::hash(&x) == hash::hash(&y));\n+      x = Flags::all();\n+      y = FlagABC;\n+      assert!(hash::hash(&x) == hash::hash(&y));\n+    }\n }"}, {"sha": "f1b92b973c8bb1649a0e404882f11dd878423831", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f833ee151bcfcd31c13a15daab78f5fb900bf76/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f833ee151bcfcd31c13a15daab78f5fb900bf76/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=6f833ee151bcfcd31c13a15daab78f5fb900bf76", "patch": "@@ -223,6 +223,7 @@ responding to errors that may occur while attempting to read the numbers.\n \n use char::Char;\n use collections::Collection;\n+use default::Default;\n use fmt;\n use int;\n use iter::Iterator;\n@@ -1795,7 +1796,6 @@ pub struct UnstableFileStat {\n bitflags!(\n     #[doc=\"A set of permissions for a file or directory is represented\n by a set of flags which are or'd together.\"]\n-    #[deriving(Hash)]\n     #[deriving(Show)]\n     flags FilePermission: u32 {\n         static UserRead     = 0o400,\n@@ -1830,6 +1830,11 @@ on unix-like systems.\"]\n     }\n )\n \n+impl Default for FilePermission {\n+    #[inline]\n+    fn default() -> FilePermission { FilePermission::empty() }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::{IoResult, Reader, MemReader, NoProgress, InvalidInput};"}]}