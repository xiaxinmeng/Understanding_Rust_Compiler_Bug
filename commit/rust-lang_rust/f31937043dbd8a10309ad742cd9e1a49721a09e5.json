{"sha": "f31937043dbd8a10309ad742cd9e1a49721a09e5", "node_id": "C_kwDOAAsO6NoAKGYzMTkzNzA0M2RiZDhhMTAzMDlhZDc0MmNkOWUxYTQ5NzIxYTA5ZTU", "commit": {"author": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-07-26T23:32:34Z"}, "committer": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-07-26T23:32:34Z"}, "message": "Implicitly set `--type=cargo` when using `--category=cargo`", "tree": {"sha": "9209567c534099d24b65475132948f2fea39ceaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9209567c534099d24b65475132948f2fea39ceaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f31937043dbd8a10309ad742cd9e1a49721a09e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f31937043dbd8a10309ad742cd9e1a49721a09e5", "html_url": "https://github.com/rust-lang/rust/commit/f31937043dbd8a10309ad742cd9e1a49721a09e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f31937043dbd8a10309ad742cd9e1a49721a09e5/comments", "author": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8ee8c30f00214fcc3849d3124501e5e9768bb53", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8ee8c30f00214fcc3849d3124501e5e9768bb53", "html_url": "https://github.com/rust-lang/rust/commit/c8ee8c30f00214fcc3849d3124501e5e9768bb53"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "a417d3dd8a4e7b404d9eceb70fe3934b1ec0e8e3", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f31937043dbd8a10309ad742cd9e1a49721a09e5/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f31937043dbd8a10309ad742cd9e1a49721a09e5/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=f31937043dbd8a10309ad742cd9e1a49721a09e5", "patch": "@@ -36,8 +36,8 @@ fn main() {\n             match new_lint::create(\n                 matches.get_one::<String>(\"pass\"),\n                 matches.get_one::<String>(\"name\"),\n-                matches.get_one::<String>(\"category\"),\n-                matches.get_one::<String>(\"type\"),\n+                matches.get_one::<String>(\"category\").map(String::as_str),\n+                matches.get_one::<String>(\"type\").map(String::as_str),\n                 matches.contains_id(\"msrv\"),\n             ) {\n                 Ok(_) => update_lints::update(update_lints::UpdateMode::Change),"}, {"sha": "03d2ef3d19edd4406c4c0d86eb62ceff71f23d72", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f31937043dbd8a10309ad742cd9e1a49721a09e5/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f31937043dbd8a10309ad742cd9e1a49721a09e5/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=f31937043dbd8a10309ad742cd9e1a49721a09e5", "patch": "@@ -38,15 +38,20 @@ impl<T> Context for io::Result<T> {\n pub fn create(\n     pass: Option<&String>,\n     lint_name: Option<&String>,\n-    category: Option<&String>,\n-    ty: Option<&String>,\n+    category: Option<&str>,\n+    mut ty: Option<&str>,\n     msrv: bool,\n ) -> io::Result<()> {\n+    if category == Some(\"cargo\") && ty.is_none() {\n+        // `cargo` is a special category, these lints should always be in `clippy_lints/src/cargo`\n+        ty = Some(\"cargo\");\n+    }\n+\n     let lint = LintData {\n         pass: pass.map_or(\"\", String::as_str),\n         name: lint_name.expect(\"`name` argument is validated by clap\"),\n         category: category.expect(\"`category` argument is validated by clap\"),\n-        ty: ty.map(String::as_str),\n+        ty,\n         project_root: clippy_project_root(),\n     };\n \n@@ -95,7 +100,7 @@ fn create_test(lint: &LintData<'_>) -> io::Result<()> {\n         create_project_layout(lint.name, &test_dir, \"fail\", \"Content that triggers the lint goes here\")?;\n         create_project_layout(lint.name, &test_dir, \"pass\", \"This file should not trigger the lint\")?;\n \n-        println!(\"Generated test directories: `{}`, `{}`\", format!(\"{}/pass\", relative_test_dir), format!(\"{}/fail\", relative_test_dir));\n+        println!(\"Generated test directories: `{relative_test_dir}/pass`, `{relative_test_dir}/fail`\");\n     } else {\n         let test_path = format!(\"tests/ui/{}.rs\", lint.name);\n         let test_contents = get_test_file_contents(lint.name, None);\n@@ -341,7 +346,7 @@ fn create_lint_for_ty(lint: &LintData<'_>, enable_msrv: bool, ty: &str) -> io::R\n             \"Lints of type `cargo` must have the `cargo` category\"\n         ),\n         _ if lint.category == \"cargo\" => panic!(\"Lints of category `cargo` must have the `cargo` type\"),\n-        _ => {}\n+        _ => {},\n     }\n \n     let ty_dir = lint.project_root.join(format!(\"clippy_lints/src/{}\", ty));\n@@ -405,7 +410,10 @@ fn create_lint_for_ty(lint: &LintData<'_>, enable_msrv: bool, ty: &str) -> io::R\n \n     write_file(lint_file_path.as_path(), lint_file_contents)?;\n     println!(\"Generated lint file: `clippy_lints/src/{}/{}.rs`\", ty, lint.name);\n-    println!(\"Be sure to add a call to `{}::check` in `clippy_lints/src/{}/mod.rs`!\", lint.name, ty);\n+    println!(\n+        \"Be sure to add a call to `{}::check` in `clippy_lints/src/{}/mod.rs`!\",\n+        lint.name, ty\n+    );\n \n     Ok(())\n }"}]}