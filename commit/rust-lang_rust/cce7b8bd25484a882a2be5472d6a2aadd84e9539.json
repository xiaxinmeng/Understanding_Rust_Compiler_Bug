{"sha": "cce7b8bd25484a882a2be5472d6a2aadd84e9539", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZTdiOGJkMjU0ODRhODgyYTJiZTU0NzJkNmEyYWFkZDg0ZTk1Mzk=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-11-14T10:50:46Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-11-14T10:50:46Z"}, "message": "Check macro definition and do not expand invalid macros", "tree": {"sha": "caa3cf0d28c9a88e3469081743deb44caed3fbec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caa3cf0d28c9a88e3469081743deb44caed3fbec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cce7b8bd25484a882a2be5472d6a2aadd84e9539", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cce7b8bd25484a882a2be5472d6a2aadd84e9539", "html_url": "https://github.com/rust-lang/rust/commit/cce7b8bd25484a882a2be5472d6a2aadd84e9539", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cce7b8bd25484a882a2be5472d6a2aadd84e9539/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "289b1b400a01f9cc8a6b75b3083341c1a2170831", "url": "https://api.github.com/repos/rust-lang/rust/commits/289b1b400a01f9cc8a6b75b3083341c1a2170831", "html_url": "https://github.com/rust-lang/rust/commit/289b1b400a01f9cc8a6b75b3083341c1a2170831"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "323cc53ecefea77cf4674d83cb8d31e1b8e38215", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cce7b8bd25484a882a2be5472d6a2aadd84e9539/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cce7b8bd25484a882a2be5472d6a2aadd84e9539/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=cce7b8bd25484a882a2be5472d6a2aadd84e9539", "patch": "@@ -10,7 +10,7 @@\n \n use ast::{self, TokenTree};\n use codemap::{Span, DUMMY_SP};\n-use ext::base::{ExtCtxt, MacResult, SyntaxExtension};\n+use ext::base::{DummyResult, ExtCtxt, MacResult, SyntaxExtension};\n use ext::base::{NormalTT, TTMacroExpander};\n use ext::tt::macro_parser::{Success, Error, Failure};\n use ext::tt::macro_parser::{MatchedSeq, MatchedNonterminal};\n@@ -131,6 +131,7 @@ struct MacroRulesMacroExpander {\n     imported_from: Option<ast::Ident>,\n     lhses: Vec<TokenTree>,\n     rhses: Vec<TokenTree>,\n+    valid: bool,\n }\n \n impl TTMacroExpander for MacroRulesMacroExpander {\n@@ -139,6 +140,9 @@ impl TTMacroExpander for MacroRulesMacroExpander {\n                    sp: Span,\n                    arg: &[TokenTree])\n                    -> Box<MacResult+'cx> {\n+        if !self.valid {\n+            return DummyResult::any(sp);\n+        }\n         generic_extension(cx,\n                           sp,\n                           self.name,\n@@ -171,15 +175,15 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n     for (i, lhs) in lhses.iter().enumerate() { // try each arm's matchers\n         let lhs_tt = match *lhs {\n             TokenTree::Delimited(_, ref delim) => &delim.tts[..],\n-            _ => panic!(cx.span_fatal(sp, \"malformed macro lhs\"))\n+            _ => cx.span_bug(sp, \"malformed macro lhs\")\n         };\n \n         match TokenTree::parse(cx, lhs_tt, arg) {\n             Success(named_matches) => {\n                 let rhs = match rhses[i] {\n                     // ignore delimiters\n                     TokenTree::Delimited(_, ref delimed) => delimed.tts.clone(),\n-                    _ => panic!(cx.span_fatal(sp, \"macro rhs must be delimited\")),\n+                    _ => cx.span_bug(sp, \"malformed macro rhs\"),\n                 };\n                 // rhs has holes ( `$id` and `$(...)` that need filled)\n                 let trncbr = new_tt_reader(&cx.parse_sess().span_diagnostic,\n@@ -271,6 +275,8 @@ pub fn compile<'cx>(cx: &'cx mut ExtCtxt,\n         }\n     };\n \n+    let mut valid = true;\n+\n     // Extract the arguments:\n     let lhses = match **argument_map.get(&lhs_nm.name).unwrap() {\n         MatchedSeq(ref s, _) => {\n@@ -296,11 +302,16 @@ pub fn compile<'cx>(cx: &'cx mut ExtCtxt,\n         _ => cx.span_bug(def.span, \"wrong-structured rhs\")\n     };\n \n+    for rhs in &rhses {\n+        valid &= check_rhs(cx, rhs);\n+    }\n+\n     let exp: Box<_> = Box::new(MacroRulesMacroExpander {\n         name: def.ident,\n         imported_from: def.imported_from,\n         lhses: lhses,\n         rhses: rhses,\n+        valid: valid,\n     });\n \n     NormalTT(exp, Some(def.span), def.allow_internal_unstable)\n@@ -323,6 +334,14 @@ fn check_lhs_nt_follows(cx: &mut ExtCtxt, lhs: &TokenTree, sp: Span) {\n     // after parsing/expansion. we can report every error in every macro this way.\n }\n \n+fn check_rhs(cx: &mut ExtCtxt, rhs: &TokenTree) -> bool {\n+    match *rhs {\n+        TokenTree::Delimited(..) => return true,\n+        _ => cx.span_err(rhs.get_span(), \"macro rhs must be delimited\")\n+    }\n+    false\n+}\n+\n // returns the last token that was checked, for TokenTree::Sequence. this gets used later on.\n fn check_matcher<'a, I>(cx: &mut ExtCtxt, matcher: I, follow: &Token)\n -> Option<(Span, Token)> where I: Iterator<Item=&'a TokenTree> {"}, {"sha": "817b675aedfe8f3dc0707506ad9735ddbf870e63", "filename": "src/test/compile-fail/macro-error.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cce7b8bd25484a882a2be5472d6a2aadd84e9539/src%2Ftest%2Fcompile-fail%2Fmacro-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cce7b8bd25484a882a2be5472d6a2aadd84e9539/src%2Ftest%2Fcompile-fail%2Fmacro-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-error.rs?ref=cce7b8bd25484a882a2be5472d6a2aadd84e9539", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we report errors at macro definition, not expansion.\n+\n+macro_rules! foo {\n+    ($a:expr) => $a; //~ ERROR macro rhs must be delimited\n+}\n+\n+fn main() {\n+    foo!(0);\n+}"}, {"sha": "756f5d4547a16b19ee25f193e5a2337f6f78dc2f", "filename": "src/test/compile-fail/type-macros-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cce7b8bd25484a882a2be5472d6a2aadd84e9539/src%2Ftest%2Fcompile-fail%2Ftype-macros-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cce7b8bd25484a882a2be5472d6a2aadd84e9539/src%2Ftest%2Fcompile-fail%2Ftype-macros-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-macros-fail.rs?ref=cce7b8bd25484a882a2be5472d6a2aadd84e9539", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n macro_rules! Id {\n-    { $T:tt } => $T\n+    ($T:tt) => ($T);\n }\n \n struct Foo<T> {"}]}