{"sha": "1a24003eb6bc8377e76cd9f70bf6700bc842e99b", "node_id": "C_kwDOAAsO6NoAKDFhMjQwMDNlYjZiYzgzNzdlNzZjZDlmNzBiZjY3MDBiYzg0MmU5OWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-26T09:35:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-26T09:35:59Z"}, "message": "Auto merge of #13248 - harudagondi:unwrap-tuple, r=Veykril\n\nFeature: Add assist to unwrap tuple declarations\n\n> Implement #12923 for only tuples.\n>\n> Does not implement unwrapping for structs, as mentioned in the issue.\n\nAdd assist to unwrap tuples declarations to separate declarations.\n\n```rust\nfn main() {\n\t$0let (foo, bar, baz) = (1.0, \"example\", String::new())\n}\n```\n\nbecomes:\n\n```rust\nfn main() {\n\tlet foo = 1.0;\n\tlet bar = \"example\";\n\tlet baz = String::new();\n}\n```\n\n## Changelog\n\n### Feature\n\n- Added assist to unwrap tuple declarations.", "tree": {"sha": "c44013a47c1f8c769395da24566ab96fd088f7fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c44013a47c1f8c769395da24566ab96fd088f7fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a24003eb6bc8377e76cd9f70bf6700bc842e99b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a24003eb6bc8377e76cd9f70bf6700bc842e99b", "html_url": "https://github.com/rust-lang/rust/commit/1a24003eb6bc8377e76cd9f70bf6700bc842e99b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a24003eb6bc8377e76cd9f70bf6700bc842e99b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f929659acff378adad85fcea747f8b19a0f819f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f929659acff378adad85fcea747f8b19a0f819f", "html_url": "https://github.com/rust-lang/rust/commit/1f929659acff378adad85fcea747f8b19a0f819f"}, {"sha": "c2dc32c48e8a7027390738b63e88fe220e4e56d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2dc32c48e8a7027390738b63e88fe220e4e56d9", "html_url": "https://github.com/rust-lang/rust/commit/c2dc32c48e8a7027390738b63e88fe220e4e56d9"}], "stats": {"total": 180, "additions": 180, "deletions": 0}, "files": [{"sha": "25c58d086e977d71f3711fb2c09d65fdd26df653", "filename": "crates/ide-assists/src/handlers/unwrap_tuple.rs", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/1a24003eb6bc8377e76cd9f70bf6700bc842e99b/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funwrap_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a24003eb6bc8377e76cd9f70bf6700bc842e99b/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funwrap_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funwrap_tuple.rs?ref=1a24003eb6bc8377e76cd9f70bf6700bc842e99b", "patch": "@@ -0,0 +1,159 @@\n+use syntax::{\n+    ast::{self, edit::AstNodeEdit},\n+    AstNode, T,\n+};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: unwrap_tuple\n+//\n+// Unwrap the tuple to different variables.\n+//\n+// ```\n+// # //- minicore: result\n+// fn main() {\n+//     $0let (foo, bar) = (\"Foo\", \"Bar\");\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     let foo = \"Foo\";\n+//     let bar = \"Bar\";\n+// }\n+// ```\n+pub(crate) fn unwrap_tuple(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+    let let_kw = ctx.find_token_syntax_at_offset(T![let])?;\n+    let let_stmt = let_kw.parent().and_then(ast::LetStmt::cast)?;\n+    let indent_level = let_stmt.indent_level().0 as usize;\n+    let pat = let_stmt.pat()?;\n+    let ty = let_stmt.ty();\n+    let init = let_stmt.initializer()?;\n+\n+    // This only applies for tuple patterns, types, and initializers.\n+    let tuple_pat = match pat {\n+        ast::Pat::TuplePat(pat) => pat,\n+        _ => return None,\n+    };\n+    let tuple_ty = ty.and_then(|it| match it {\n+        ast::Type::TupleType(ty) => Some(ty),\n+        _ => None,\n+    });\n+    let tuple_init = match init {\n+        ast::Expr::TupleExpr(expr) => expr,\n+        _ => return None,\n+    };\n+\n+    if tuple_pat.fields().count() != tuple_init.fields().count() {\n+        return None;\n+    }\n+    if let Some(tys) = &tuple_ty {\n+        if tuple_pat.fields().count() != tys.fields().count() {\n+            return None;\n+        }\n+    }\n+\n+    let parent = let_kw.parent()?;\n+\n+    acc.add(\n+        AssistId(\"unwrap_tuple\", AssistKind::RefactorRewrite),\n+        \"Unwrap tuple\",\n+        let_kw.text_range(),\n+        |edit| {\n+            let indents = \"    \".repeat(indent_level);\n+\n+            // If there is an ascribed type, insert that type for each declaration,\n+            // otherwise, omit that type.\n+            if let Some(tys) = tuple_ty {\n+                let mut zipped_decls = String::new();\n+                for (pat, ty, expr) in\n+                    itertools::izip!(tuple_pat.fields(), tys.fields(), tuple_init.fields())\n+                {\n+                    zipped_decls.push_str(&format!(\"{}let {pat}: {ty} = {expr};\\n\", indents))\n+                }\n+                edit.replace(parent.text_range(), zipped_decls.trim());\n+            } else {\n+                let mut zipped_decls = String::new();\n+                for (pat, expr) in itertools::izip!(tuple_pat.fields(), tuple_init.fields()) {\n+                    zipped_decls.push_str(&format!(\"{}let {pat} = {expr};\\n\", indents));\n+                }\n+                edit.replace(parent.text_range(), zipped_decls.trim());\n+            }\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::check_assist;\n+\n+    use super::*;\n+\n+    #[test]\n+    fn unwrap_tuples() {\n+        check_assist(\n+            unwrap_tuple,\n+            r#\"\n+fn main() {\n+    $0let (foo, bar) = (\"Foo\", \"Bar\");\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let foo = \"Foo\";\n+    let bar = \"Bar\";\n+}\n+\"#,\n+        );\n+\n+        check_assist(\n+            unwrap_tuple,\n+            r#\"\n+fn main() {\n+    $0let (foo, bar, baz) = (\"Foo\", \"Bar\", \"Baz\");\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let foo = \"Foo\";\n+    let bar = \"Bar\";\n+    let baz = \"Baz\";\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn unwrap_tuple_with_types() {\n+        check_assist(\n+            unwrap_tuple,\n+            r#\"\n+fn main() {\n+    $0let (foo, bar): (u8, i32) = (5, 10);\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let foo: u8 = 5;\n+    let bar: i32 = 10;\n+}\n+\"#,\n+        );\n+\n+        check_assist(\n+            unwrap_tuple,\n+            r#\"\n+fn main() {\n+    $0let (foo, bar, baz): (u8, i32, f64) = (5, 10, 17.5);\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let foo: u8 = 5;\n+    let bar: i32 = 10;\n+    let baz: f64 = 17.5;\n+}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "82bcc3dfa5d9a97c03142218498b715a0b75318b", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a24003eb6bc8377e76cd9f70bf6700bc842e99b/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a24003eb6bc8377e76cd9f70bf6700bc842e99b/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=1a24003eb6bc8377e76cd9f70bf6700bc842e99b", "patch": "@@ -189,6 +189,7 @@ mod handlers {\n     mod replace_turbofish_with_explicit_type;\n     mod split_import;\n     mod unmerge_match_arm;\n+    mod unwrap_tuple;\n     mod sort_items;\n     mod toggle_ignore;\n     mod unmerge_use;\n@@ -291,6 +292,7 @@ mod handlers {\n             unnecessary_async::unnecessary_async,\n             unwrap_block::unwrap_block,\n             unwrap_result_return_type::unwrap_result_return_type,\n+            unwrap_tuple::unwrap_tuple,\n             wrap_return_type_in_result::wrap_return_type_in_result,\n             // These are manually sorted for better priorities. By default,\n             // priority is determined by the size of the target range (smaller"}, {"sha": "d403f86c6d8c9ff9cc20c1d2c51e2a5ebbb12d57", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1a24003eb6bc8377e76cd9f70bf6700bc842e99b/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a24003eb6bc8377e76cd9f70bf6700bc842e99b/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=1a24003eb6bc8377e76cd9f70bf6700bc842e99b", "patch": "@@ -2386,6 +2386,25 @@ fn foo() -> i32 { 42i32 }\n     )\n }\n \n+#[test]\n+fn doctest_unwrap_tuple() {\n+    check_doc_test(\n+        \"unwrap_tuple\",\n+        r#####\"\n+//- minicore: result\n+fn main() {\n+    $0let (foo, bar) = (\"Foo\", \"Bar\");\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    let foo = \"Foo\";\n+    let bar = \"Bar\";\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_wrap_return_type_in_result() {\n     check_doc_test("}]}