{"sha": "7f5c2dab9dfcf128336422bcefded78a99ff1c42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNWMyZGFiOWRmY2YxMjgzMzY0MjJiY2VmZGVkNzhhOTlmZjFjNDI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-24T15:23:23Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-26T09:30:39Z"}, "message": "Remove some unnecessary changes", "tree": {"sha": "e0a1460bc3ba1c51f98e464ad38a2e5976790935", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0a1460bc3ba1c51f98e464ad38a2e5976790935"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f5c2dab9dfcf128336422bcefded78a99ff1c42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f5c2dab9dfcf128336422bcefded78a99ff1c42", "html_url": "https://github.com/rust-lang/rust/commit/7f5c2dab9dfcf128336422bcefded78a99ff1c42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f5c2dab9dfcf128336422bcefded78a99ff1c42/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5180becc7c11573d267166437abf3d9951c6b0c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5180becc7c11573d267166437abf3d9951c6b0c7", "html_url": "https://github.com/rust-lang/rust/commit/5180becc7c11573d267166437abf3d9951c6b0c7"}], "stats": {"total": 118, "additions": 67, "deletions": 51}, "files": [{"sha": "191f465fb88919b2206a3d643824fa6fe96fb273", "filename": "example/mini_core.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f5c2dab9dfcf128336422bcefded78a99ff1c42/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5c2dab9dfcf128336422bcefded78a99ff1c42/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=7f5c2dab9dfcf128336422bcefded78a99ff1c42", "patch": "@@ -446,7 +446,6 @@ pub mod intrinsics {\n         pub fn needs_drop<T>() -> bool;\n         pub fn bitreverse<T>(x: T) -> T;\n         pub fn bswap<T>(x: T) -> T;\n-        pub fn unchecked_div<T>(lhs: T, rhs: T) -> T;\n     }\n }\n "}, {"sha": "bd51a37f29fab449c7fa24783dc2662d770a0d59", "filename": "example/std_example.rs", "status": "modified", "additions": 59, "deletions": 17, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/7f5c2dab9dfcf128336422bcefded78a99ff1c42/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5c2dab9dfcf128336422bcefded78a99ff1c42/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=7f5c2dab9dfcf128336422bcefded78a99ff1c42", "patch": "@@ -3,6 +3,65 @@\n use std::io::Write;\n use std::intrinsics;\n \n+fn main() {\n+    let _ = ::std::iter::repeat('a' as u8).take(10).collect::<Vec<_>>();\n+    let stderr = ::std::io::stderr();\n+    let mut stderr = stderr.lock();\n+\n+    writeln!(stderr, \"some {} text\", \"<unknown>\").unwrap();\n+\n+    let _ = std::process::Command::new(\"true\").env(\"c\", \"d\").spawn();\n+\n+    println!(\"cargo:rustc-link-lib=z\");\n+\n+    static ONCE: std::sync::Once = std::sync::ONCE_INIT;\n+    ONCE.call_once(|| {});\n+\n+    LoopState::Continue(()) == LoopState::Break(());\n+\n+    // Make sure ByValPair values with differently sized components are correctly passed\n+    map(None::<(u8, Box<Instruction>)>);\n+\n+    println!(\"{}\", 2.3f32.exp());\n+    println!(\"{}\", 2.3f32.exp2());\n+    println!(\"{}\", 2.3f32.abs());\n+    println!(\"{}\", 2.3f32.sqrt());\n+    println!(\"{}\", 2.3f32.floor());\n+    println!(\"{}\", 2.3f32.ceil());\n+    println!(\"{}\", 2.3f32.min(1.0));\n+    println!(\"{}\", 2.3f32.max(1.0));\n+\n+    assert_eq!(0b0000000000000000000000000010000010000000000000000000000000000000_0000000000100000000000000000000000001000000000000100000000000000u128.leading_zeros(), 26);\n+    assert_eq!(0b0000000000000000000000000010000000000000000000000000000000000000_0000000000000000000000000000000000001000000000000000000010000000u128.trailing_zeros(), 7);\n+\n+    checked_div_i128(0i128, 2i128);\n+    checked_div_u128(0u128, 2u128);\n+    assert_eq!(1u128 + 2, 3);\n+\n+    assert_eq!(0b100010000000000000000000000000000u128 >> 10, 0b10001000000000000000000u128);\n+    assert_eq!(0xFEDCBA987654321123456789ABCDEFu128 >> 64, 0xFEDCBA98765432u128);\n+    assert_eq!(0xFEDCBA987654321123456789ABCDEFu128 as i128 >> 64, 0xFEDCBA98765432i128);\n+    assert_eq!(353985398u128 * 932490u128, 330087843781020u128);\n+}\n+\n+#[derive(PartialEq)]\n+enum LoopState {\n+    Continue(()),\n+    Break(())\n+}\n+\n+pub enum Instruction {\n+    Increment,\n+    Loop,\n+}\n+\n+fn map(a: Option<(u8, Box<Instruction>)>) -> Option<Box<Instruction>> {\n+    match a {\n+        None => None,\n+        Some((_, instr)) => Some(instr),\n+    }\n+}\n+\n fn checked_div_i128(lhs: i128, rhs: i128) -> Option<i128> {\n     if rhs == 0 || (lhs == -170141183460469231731687303715884105728 && rhs == -1) {\n         None\n@@ -17,20 +76,3 @@ fn checked_div_u128(lhs: u128, rhs: u128) -> Option<u128> {\n         rhs => Some(unsafe { intrinsics::unchecked_div(lhs, rhs) })\n     }\n }\n-\n-fn main() {\n-    assert_eq!(0b0000000000000000000000000010000010000000000000000000000000000000_0000000000100000000000000000000000001000000000000100000000000000u128.leading_zeros(), 26);\n-    assert_eq!(0b0000000000000000000000000010000000000000000000000000000000000000_0000000000000000000000000000000000001000000000000000000010000000u128.trailing_zeros(), 7);\n-\n-    checked_div_i128(0i128, 2i128);\n-    checked_div_u128(0u128, 2u128);\n-    assert_eq!(1u128 + 2, 3);\n-\n-    // overflow panic\n-    // 0xFEDCBA987654321123456789ABCDEFu128 + 0xFEDCBA987654321123456789ABCDEFu128;\n-\n-    println!(\"{}\", 0b100010000000000000000000000000000u128 >> 10);\n-    println!(\"{}\", 0xFEDCBA987654321123456789ABCDEFu128 >> 64);\n-    println!(\"{} >> 64 == {}\", 0xFEDCBA987654321123456789ABCDEFu128 as i128, 0xFEDCBA987654321123456789ABCDEFu128 as i128 >> 64);\n-    println!(\"{}\", 353985398u128 * 932490u128);\n-}"}, {"sha": "a8b3a2954381f566d682d5dfda888a58aa3c06e5", "filename": "src/value_and_place.rs", "status": "modified", "additions": 8, "deletions": 33, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7f5c2dab9dfcf128336422bcefded78a99ff1c42/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5c2dab9dfcf128336422bcefded78a99ff1c42/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=7f5c2dab9dfcf128336422bcefded78a99ff1c42", "patch": "@@ -34,31 +34,6 @@ enum CValueInner {\n     ByValPair(Value, Value),\n }\n \n-fn store_scalar<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>, value: Value, addr: Value, offset: i32) {\n-    if fx.bcx.func.dfg.value_type(value) == types::I128 {\n-        let (a, b) = fx.bcx.ins().isplit(value);\n-        fx.bcx.ins().store(MemFlags::new(), a, addr, offset);\n-        fx.bcx.ins().store(MemFlags::new(), b, addr, offset + 8);\n-    } else {\n-        fx.bcx.ins().store(MemFlags::new(), value, addr, offset);\n-    }\n-}\n-\n-fn load_scalar<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n-    clif_ty: Type,\n-    addr: Value,\n-    offset: i32,\n-) -> Value {\n-    if clif_ty == types::I128 {\n-        let a = fx.bcx.ins().load(types::I64, MemFlags::new(), addr, offset);\n-        let b = fx.bcx.ins().load(types::I64, MemFlags::new(), addr, offset + 8);\n-        fx.bcx.ins().iconcat(a, b)\n-    } else {\n-        fx.bcx.ins().load(clif_ty, MemFlags::new(), addr, offset)\n-    }\n-}\n-\n impl<'tcx> CValue<'tcx> {\n     pub fn by_ref(value: Value, layout: TyLayout<'tcx>) -> CValue<'tcx> {\n         CValue(CValueInner::ByRef(value), layout)\n@@ -104,7 +79,7 @@ impl<'tcx> CValue<'tcx> {\n                     _ => unreachable!(),\n                 };\n                 let clif_ty = scalar_to_clif_type(fx.tcx, scalar);\n-                load_scalar(fx, clif_ty, addr, 0)\n+                fx.bcx.ins().load(clif_ty, MemFlags::new(), addr, 0)\n             }\n             CValueInner::ByVal(value) => value,\n             CValueInner::ByValPair(_, _) => bug!(\"Please use load_scalar_pair for ByValPair\"),\n@@ -126,10 +101,10 @@ impl<'tcx> CValue<'tcx> {\n                 let b_offset = scalar_pair_calculate_b_offset(fx.tcx, a_scalar, b_scalar);\n                 let clif_ty1 = scalar_to_clif_type(fx.tcx, a_scalar.clone());\n                 let clif_ty2 = scalar_to_clif_type(fx.tcx, b_scalar.clone());\n-                let val1 = load_scalar(fx, clif_ty1, addr, 0);\n-                let val2 = load_scalar(\n-                    fx,\n+                let val1 = fx.bcx.ins().load(clif_ty1, MemFlags::new(), addr, 0);\n+                let val2 = fx.bcx.ins().load(\n                     clif_ty2,\n+                    MemFlags::new(),\n                     addr,\n                     b_offset,\n                 );\n@@ -389,15 +364,15 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n \n         match from.0 {\n             CValueInner::ByVal(val) => {\n-                store_scalar(fx, val, addr, 0);\n+                fx.bcx.ins().store(MemFlags::new(), val, addr, 0);\n             }\n             CValueInner::ByValPair(value, extra) => {\n                 match dst_layout.abi {\n                     Abi::ScalarPair(ref a_scalar, ref b_scalar) => {\n                         let b_offset = scalar_pair_calculate_b_offset(fx.tcx, a_scalar, b_scalar);\n-                        store_scalar(fx, value, addr, 0);\n-                        store_scalar(\n-                            fx,\n+                        fx.bcx.ins().store(MemFlags::new(), value, addr, 0);\n+                        fx.bcx.ins().store(\n+                            MemFlags::new(),\n                             extra,\n                             addr,\n                             b_offset,"}]}