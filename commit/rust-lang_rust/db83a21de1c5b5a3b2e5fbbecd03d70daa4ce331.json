{"sha": "db83a21de1c5b5a3b2e5fbbecd03d70daa4ce331", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiODNhMjFkZTFjNWI1YTNiMmU1ZmJiZWNkMDNkNzBkYWE0Y2UzMzE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-24T17:01:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-24T17:01:38Z"}, "message": "Rollup merge of #74692 - Mark-Simulacrum:delay-bug, r=pnkfelix\n\ndelay_span_bug instead of silent ignore\n\nThis is a follow-up to #74557.\n\nr? @pnkfelix", "tree": {"sha": "ebdbb93b8813649198deb0a037ba9ba85c1f1618", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebdbb93b8813649198deb0a037ba9ba85c1f1618"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db83a21de1c5b5a3b2e5fbbecd03d70daa4ce331", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfGxPyCRBK7hj4Ov3rIwAAdHIIABiHuSPbq0VDmrsa1k47pr8W\n8adveOV3hADdmFimxLQ81QP26RxwGKFWJMG5y2ct7AdWnSRr4Hj2se34BCF5G61h\nFKIW35AQESJgsnit/VhBLNbVUAIxbI72iJyrF54DdmnGqeh/b3JhQrI0vOL6L8Lx\nWOHhGGu8WQ3jbLcwPTnfTT8pdxm3iBaGuHrhVLQVkW3mTckCKKKZCprGhjTdkLIC\nJLBHuSrkjw4GdaF8UjzJoH4wJFQifiPLG+/6gnF4Vlx5gOkVNCMI2ECror0Z1EKI\nbuQQ1ElKYXtvpQ9pjPIVXAQLjJKaYBgqScI3EhAw+occJvdNdtTsS8pJkMapcnY=\n=1kws\n-----END PGP SIGNATURE-----\n", "payload": "tree ebdbb93b8813649198deb0a037ba9ba85c1f1618\nparent ceaef731a9eb7156766ffb74f2bd6bec761adfc3\nparent 5a5846f4c7b4797e3a038cc1107688af8e7919ec\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595610098 -0700\ncommitter GitHub <noreply@github.com> 1595610098 -0700\n\nRollup merge of #74692 - Mark-Simulacrum:delay-bug, r=pnkfelix\n\ndelay_span_bug instead of silent ignore\n\nThis is a follow-up to #74557.\n\nr? @pnkfelix\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db83a21de1c5b5a3b2e5fbbecd03d70daa4ce331", "html_url": "https://github.com/rust-lang/rust/commit/db83a21de1c5b5a3b2e5fbbecd03d70daa4ce331", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db83a21de1c5b5a3b2e5fbbecd03d70daa4ce331/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ceaef731a9eb7156766ffb74f2bd6bec761adfc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceaef731a9eb7156766ffb74f2bd6bec761adfc3", "html_url": "https://github.com/rust-lang/rust/commit/ceaef731a9eb7156766ffb74f2bd6bec761adfc3"}, {"sha": "5a5846f4c7b4797e3a038cc1107688af8e7919ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a5846f4c7b4797e3a038cc1107688af8e7919ec", "html_url": "https://github.com/rust-lang/rust/commit/5a5846f4c7b4797e3a038cc1107688af8e7919ec"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "4b5ab03df4327a9df7af2cf74f851ab000c913f8", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/db83a21de1c5b5a3b2e5fbbecd03d70daa4ce331/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db83a21de1c5b5a3b2e5fbbecd03d70daa4ce331/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=db83a21de1c5b5a3b2e5fbbecd03d70daa4ce331", "patch": "@@ -1506,18 +1506,24 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         pat.walk(&mut |pat| {\n             debug!(\"resolve_pattern pat={:?} node={:?}\", pat, pat.kind);\n             match pat.kind {\n-                // In tuple struct patterns ignore the invalid `ident @ ...`.\n-                // It will be handled as an error by the AST lowering.\n-                PatKind::Ident(bmode, ident, ref sub)\n-                    if !(is_tuple_struct_pat && sub.as_ref().filter(|p| p.is_rest()).is_some()) =>\n-                {\n-                    // First try to resolve the identifier as some existing entity,\n-                    // then fall back to a fresh binding.\n-                    let has_sub = sub.is_some();\n-                    let res = self\n-                        .try_resolve_as_non_binding(pat_src, pat, bmode, ident, has_sub)\n-                        .unwrap_or_else(|| self.fresh_binding(ident, pat.id, pat_src, bindings));\n-                    self.r.record_partial_res(pat.id, PartialRes::new(res));\n+                PatKind::Ident(bmode, ident, ref sub) => {\n+                    if is_tuple_struct_pat && sub.as_ref().filter(|p| p.is_rest()).is_some() {\n+                        // In tuple struct patterns ignore the invalid `ident @ ...`.\n+                        // It will be handled as an error by the AST lowering.\n+                        self.r\n+                            .session\n+                            .delay_span_bug(ident.span, \"ident in tuple pattern is invalid\");\n+                    } else {\n+                        // First try to resolve the identifier as some existing entity,\n+                        // then fall back to a fresh binding.\n+                        let has_sub = sub.is_some();\n+                        let res = self\n+                            .try_resolve_as_non_binding(pat_src, pat, bmode, ident, has_sub)\n+                            .unwrap_or_else(|| {\n+                                self.fresh_binding(ident, pat.id, pat_src, bindings)\n+                            });\n+                        self.r.record_partial_res(pat.id, PartialRes::new(res));\n+                    }\n                 }\n                 PatKind::TupleStruct(ref path, ..) => {\n                     self.smart_resolve_path(pat.id, None, path, PathSource::TupleStruct(pat.span));"}]}