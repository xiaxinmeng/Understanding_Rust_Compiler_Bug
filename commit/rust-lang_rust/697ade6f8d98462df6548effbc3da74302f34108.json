{"sha": "697ade6f8d98462df6548effbc3da74302f34108", "node_id": "C_kwDOAAsO6NoAKDY5N2FkZTZmOGQ5ODQ2MmRmNjU0OGVmZmJjM2RhNzQzMDJmMzQxMDg", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-23T15:40:41Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-24T09:54:50Z"}, "message": "internal: Simplify DotAccess representation in completions", "tree": {"sha": "8eb0a09b07e0566c979476a5f7a7f4aa57a26ba3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eb0a09b07e0566c979476a5f7a7f4aa57a26ba3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/697ade6f8d98462df6548effbc3da74302f34108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/697ade6f8d98462df6548effbc3da74302f34108", "html_url": "https://github.com/rust-lang/rust/commit/697ade6f8d98462df6548effbc3da74302f34108", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/697ade6f8d98462df6548effbc3da74302f34108/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5965aa871e8967a4d49d3612126d596eca865d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5965aa871e8967a4d49d3612126d596eca865d8", "html_url": "https://github.com/rust-lang/rust/commit/d5965aa871e8967a4d49d3612126d596eca865d8"}], "stats": {"total": 110, "additions": 57, "deletions": 53}, "files": [{"sha": "1e0b7711667b1741bc77a8e85c3d8404c2c1c297", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/697ade6f8d98462df6548effbc3da74302f34108/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697ade6f8d98462df6548effbc3da74302f34108/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=697ade6f8d98462df6548effbc3da74302f34108", "patch": "@@ -3,30 +3,31 @@\n use ide_db::FxHashSet;\n \n use crate::{\n-    context::{CompletionContext, DotAccess, NameRefContext, PathCompletionCtx, PathKind},\n-    Completions,\n+    context::{\n+        CompletionContext, DotAccess, DotAccessKind, NameRefContext, PathCompletionCtx, PathKind,\n+    },\n+    CompletionItem, CompletionItemKind, Completions,\n };\n \n /// Complete dot accesses, i.e. fields or methods.\n pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (dot_access, dot_receiver) = match ctx.nameref_ctx() {\n+    let (dot_access, receiver_ty) = match ctx.nameref_ctx() {\n         Some(NameRefContext {\n-            dot_access:\n-                Some(\n-                    access @ (DotAccess::Method { receiver: Some(receiver), .. }\n-                    | DotAccess::Field { receiver: Some(receiver), .. }),\n-                ),\n+            dot_access: Some(access @ DotAccess { receiver_ty: Some(receiver_ty), .. }),\n             ..\n-        }) => (access, receiver),\n+        }) => (access, &receiver_ty.original),\n         _ => return complete_undotted_self(acc, ctx),\n     };\n \n-    let receiver_ty = match ctx.sema.type_of_expr(dot_receiver) {\n-        Some(ty) => ty.original,\n-        _ => return,\n-    };\n+    // Suggest .await syntax for types that implement Future trait\n+    if receiver_ty.impls_future(ctx.db) {\n+        let mut item =\n+            CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), \"await\");\n+        item.detail(\"expr.await\");\n+        item.add_to(acc);\n+    }\n \n-    if let DotAccess::Method { .. } = dot_access {\n+    if let DotAccessKind::Method { .. } = dot_access.kind {\n         cov_mark::hit!(test_no_struct_field_completion_for_method_call);\n     } else {\n         complete_fields("}, {"sha": "4868225ce35cd13a18485fa7389c26e842505178", "filename": "crates/ide-completion/src/completions/postfix.rs", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/697ade6f8d98462df6548effbc3da74302f34108/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697ade6f8d98462df6548effbc3da74302f34108/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=697ade6f8d98462df6548effbc3da74302f34108", "patch": "@@ -13,7 +13,7 @@ use text_edit::TextEdit;\n \n use crate::{\n     completions::postfix::format_like::add_format_like_completions,\n-    context::{CompletionContext, DotAccess, NameRefContext},\n+    context::{CompletionContext, DotAccess, DotAccessKind, NameRefContext},\n     item::{Builder, CompletionRelevancePostfixMatch},\n     CompletionItem, CompletionItemKind, CompletionRelevance, Completions, SnippetScope,\n };\n@@ -23,34 +23,25 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n         return;\n     }\n \n-    let (dot_receiver, receiver_is_ambiguous_float_literal) = match ctx.nameref_ctx() {\n+    let (dot_receiver, receiver_ty, receiver_is_ambiguous_float_literal) = match ctx.nameref_ctx() {\n         Some(NameRefContext {\n-            dot_access: Some(DotAccess::Method { receiver: Some(it), .. }),\n+            dot_access: Some(DotAccess { receiver_ty: Some(ty), receiver: Some(it), kind, .. }),\n             ..\n-        }) => (it, false),\n-        Some(NameRefContext {\n-            dot_access:\n-                Some(DotAccess::Field { receiver: Some(it), receiver_is_ambiguous_float_literal }),\n-            ..\n-        }) => (it, *receiver_is_ambiguous_float_literal),\n+        }) => (\n+            it,\n+            &ty.original,\n+            match *kind {\n+                DotAccessKind::Field { receiver_is_ambiguous_float_literal } => {\n+                    receiver_is_ambiguous_float_literal\n+                }\n+                DotAccessKind::Method { .. } => false,\n+            },\n+        ),\n         _ => return,\n     };\n \n     let receiver_text = get_receiver_text(dot_receiver, receiver_is_ambiguous_float_literal);\n \n-    let receiver_ty = match ctx.sema.type_of_expr(dot_receiver) {\n-        Some(it) => it.original,\n-        None => return,\n-    };\n-\n-    // Suggest .await syntax for types that implement Future trait\n-    if receiver_ty.impls_future(ctx.db) {\n-        let mut item =\n-            CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), \"await\");\n-        item.detail(\"expr.await\");\n-        item.add_to(acc);\n-    }\n-\n     let cap = match ctx.config.snippet_cap {\n         Some(it) => it,\n         None => return,"}, {"sha": "47b37f6d73b40c1a5ee9839810709c66320e5c05", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/697ade6f8d98462df6548effbc3da74302f34108/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697ade6f8d98462df6548effbc3da74302f34108/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=697ade6f8d98462df6548effbc3da74302f34108", "patch": "@@ -186,15 +186,20 @@ pub(super) enum IdentContext {\n }\n \n #[derive(Debug)]\n-pub(super) enum DotAccess {\n+pub(super) struct DotAccess {\n+    pub(super) receiver: Option<ast::Expr>,\n+    pub(super) receiver_ty: Option<TypeInfo>,\n+    pub(super) kind: DotAccessKind,\n+}\n+\n+#[derive(Debug)]\n+pub(super) enum DotAccessKind {\n     Field {\n-        receiver: Option<ast::Expr>,\n         /// True if the receiver is an integer and there is no ident in the original file after it yet\n         /// like `0.$0`\n         receiver_is_ambiguous_float_literal: bool,\n     },\n     Method {\n-        receiver: Option<ast::Expr>,\n         has_parens: bool,\n     },\n }\n@@ -298,11 +303,9 @@ impl<'a> CompletionContext<'a> {\n \n     pub(crate) fn dot_receiver(&self) -> Option<&ast::Expr> {\n         match self.nameref_ctx() {\n-            Some(NameRefContext {\n-                dot_access:\n-                    Some(DotAccess::Method { receiver, .. } | DotAccess::Field { receiver, .. }),\n-                ..\n-            }) => receiver.as_ref(),\n+            Some(NameRefContext { dot_access: Some(DotAccess { receiver, .. }), .. }) => {\n+                receiver.as_ref()\n+            }\n             _ => None,\n         }\n     }\n@@ -1073,16 +1076,20 @@ impl<'a> CompletionContext<'a> {\n                         },\n                         _ => false,\n                     };\n-                    nameref_ctx.dot_access = Some(DotAccess::Field { receiver, receiver_is_ambiguous_float_literal });\n+                    nameref_ctx.dot_access = Some(DotAccess {\n+                        receiver_ty: receiver.as_ref().and_then(|it| sema.type_of_expr(it)),\n+                        kind: DotAccessKind::Field { receiver_is_ambiguous_float_literal },\n+                        receiver\n+                    });\n                     return (nameref_ctx, None);\n                 },\n                 ast::MethodCallExpr(method) => {\n-                    nameref_ctx.dot_access = Some(\n-                        DotAccess::Method {\n-                            receiver: find_in_original_file(method.receiver(), original_file),\n-                            has_parens: method.arg_list().map_or(false, |it| it.l_paren_token().is_some())\n-                        }\n-                    );\n+                    let receiver = find_in_original_file(method.receiver(), original_file);\n+                    nameref_ctx.dot_access = Some(DotAccess {\n+                        receiver_ty: receiver.as_ref().and_then(|it| sema.type_of_expr(it)),\n+                        kind: DotAccessKind::Method { has_parens: method.arg_list().map_or(false, |it| it.l_paren_token().is_some()) },\n+                        receiver\n+                    });\n                     return (nameref_ctx, None);\n                 },\n                 _ => return (nameref_ctx, None),"}, {"sha": "5e1fbfa4a210f14bc60df737e882c286a6042390", "filename": "crates/ide-completion/src/render/function.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/697ade6f8d98462df6548effbc3da74302f34108/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/697ade6f8d98462df6548effbc3da74302f34108/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs?ref=697ade6f8d98462df6548effbc3da74302f34108", "patch": "@@ -7,7 +7,9 @@ use stdx::{format_to, to_lower_snake_case};\n use syntax::SmolStr;\n \n use crate::{\n-    context::{CompletionContext, DotAccess, NameRefContext, PathCompletionCtx, PathKind},\n+    context::{\n+        CompletionContext, DotAccess, DotAccessKind, NameRefContext, PathCompletionCtx, PathKind,\n+    },\n     item::{Builder, CompletionItem, CompletionItemKind, CompletionRelevance},\n     render::{compute_exact_name_match, compute_ref_match, compute_type_match, RenderContext},\n     CallableSnippets,\n@@ -209,7 +211,10 @@ fn should_add_parens(ctx: &CompletionContext) -> bool {\n \n     if matches!(\n         ctx.nameref_ctx(),\n-        Some(NameRefContext { dot_access: Some(DotAccess::Method { has_parens: true, .. }), .. })\n+        Some(NameRefContext {\n+            dot_access: Some(DotAccess { kind: DotAccessKind::Method { has_parens: true }, .. }),\n+            ..\n+        })\n     ) {\n         return false;\n     }"}]}