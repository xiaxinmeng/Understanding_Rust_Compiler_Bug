{"sha": "1260ad2138ef67dce982d55aa3afb5410be6f83e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNjBhZDIxMzhlZjY3ZGNlOTgyZDU1YWEzYWZiNTQxMGJlNmY4M2U=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-10-30T18:35:10Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-11-02T22:17:02Z"}, "message": "pass the Options struct instead of individual args", "tree": {"sha": "868fd455b593eedd3971a818f652b15b6b5871d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/868fd455b593eedd3971a818f652b15b6b5871d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1260ad2138ef67dce982d55aa3afb5410be6f83e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1260ad2138ef67dce982d55aa3afb5410be6f83e", "html_url": "https://github.com/rust-lang/rust/commit/1260ad2138ef67dce982d55aa3afb5410be6f83e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1260ad2138ef67dce982d55aa3afb5410be6f83e/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d6c2765e6904c3168b94012e83ae83b75251ab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d6c2765e6904c3168b94012e83ae83b75251ab6", "html_url": "https://github.com/rust-lang/rust/commit/4d6c2765e6904c3168b94012e83ae83b75251ab6"}], "stats": {"total": 340, "additions": 136, "deletions": 204}, "files": [{"sha": "0bd6f6bf8a2f42495640ebfee3ad3676a1783a26", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 36, "deletions": 41, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/1260ad2138ef67dce982d55aa3afb5410be6f83e/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1260ad2138ef67dce982d55aa3afb5410be6f83e/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=1260ad2138ef67dce982d55aa3afb5410be6f83e", "patch": "@@ -28,7 +28,6 @@ use rustc_target::spec::TargetTriple;\n \n use syntax::ast::{self, Ident, NodeId};\n use syntax::source_map;\n-use syntax::edition::Edition;\n use syntax::feature_gate::UnstableFeatures;\n use syntax::json::JsonEmitter;\n use syntax::ptr::P;\n@@ -43,9 +42,9 @@ use std::mem;\n use rustc_data_structures::sync::{self, Lrc};\n use std::rc::Rc;\n use std::sync::Arc;\n-use std::path::PathBuf;\n \n use visit_ast::RustdocVisitor;\n+use config::{Options as RustdocOptions, RenderOptions};\n use clean;\n use clean::{get_path_for_type, Clean, MAX_DEF_ID, AttributesExt};\n use html::render::RenderInfo;\n@@ -320,32 +319,33 @@ pub fn new_handler(error_format: ErrorOutputType,\n     )\n }\n \n-pub fn run_core(search_paths: SearchPaths,\n-                cfgs: Vec<String>,\n-                externs: config::Externs,\n-                input: Input,\n-                triple: Option<TargetTriple>,\n-                maybe_sysroot: Option<PathBuf>,\n-                allow_warnings: bool,\n-                crate_name: Option<String>,\n-                force_unstable_if_unmarked: bool,\n-                edition: Edition,\n-                cg: CodegenOptions,\n-                error_format: ErrorOutputType,\n-                cmd_lints: Vec<(String, lint::Level)>,\n-                lint_cap: Option<lint::Level>,\n-                describe_lints: bool,\n-                mut manual_passes: Vec<String>,\n-                mut default_passes: passes::DefaultPassOption,\n-                treat_err_as_bug: bool,\n-                ui_testing: bool,\n-) -> (clean::Crate, RenderInfo, Vec<String>) {\n+pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOptions, Vec<String>) {\n     // Parse, resolve, and typecheck the given crate.\n \n-    let cpath = match input {\n-        Input::File(ref p) => Some(p.clone()),\n-        _ => None\n-    };\n+    let RustdocOptions {\n+        input,\n+        crate_name,\n+        error_format,\n+        libs,\n+        externs,\n+        cfgs,\n+        codegen_options,\n+        debugging_options,\n+        target,\n+        edition,\n+        maybe_sysroot,\n+        lint_opts,\n+        describe_lints,\n+        lint_cap,\n+        mut default_passes,\n+        mut manual_passes,\n+        display_warnings,\n+        render_options,\n+        ..\n+    } = options;\n+\n+    let cpath = Some(input.clone());\n+    let input = Input::File(input);\n \n     let intra_link_resolution_failure_name = lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE.name;\n     let warnings_lint_name = lint::builtin::WARNINGS.name;\n@@ -359,7 +359,7 @@ pub fn run_core(search_paths: SearchPaths,\n                                      missing_docs.to_owned(),\n                                      missing_doc_example.to_owned()];\n \n-    whitelisted_lints.extend(cmd_lints.iter().map(|(lint, _)| lint).cloned());\n+    whitelisted_lints.extend(lint_opts.iter().map(|(lint, _)| lint).cloned());\n \n     let lints = lint::builtin::HardwiredLints.get_lints()\n                     .into_iter()\n@@ -372,33 +372,28 @@ pub fn run_core(search_paths: SearchPaths,\n                             Some((lint.name_lower(), lint::Allow))\n                         }\n                     })\n-                    .chain(cmd_lints.into_iter())\n+                    .chain(lint_opts.into_iter())\n                     .collect::<Vec<_>>();\n \n     let host_triple = TargetTriple::from_triple(config::host_triple());\n     // plays with error output here!\n     let sessopts = config::Options {\n         maybe_sysroot,\n-        search_paths,\n+        search_paths: libs,\n         crate_types: vec![config::CrateType::Rlib],\n-        lint_opts: if !allow_warnings {\n+        lint_opts: if !display_warnings {\n             lints\n         } else {\n             vec![]\n         },\n         lint_cap: Some(lint_cap.unwrap_or_else(|| lint::Forbid)),\n-        cg,\n+        cg: codegen_options,\n         externs,\n-        target_triple: triple.unwrap_or(host_triple),\n+        target_triple: target.unwrap_or(host_triple),\n         // Ensure that rustdoc works even if rustc is feature-staged\n         unstable_features: UnstableFeatures::Allow,\n         actually_rustdoc: true,\n-        debugging_opts: config::DebuggingOptions {\n-            force_unstable_if_unmarked,\n-            treat_err_as_bug,\n-            ui_testing,\n-            ..config::basic_debugging_options()\n-        },\n+        debugging_opts: debugging_options.clone(),\n         error_format,\n         edition,\n         describe_lints,\n@@ -408,8 +403,8 @@ pub fn run_core(search_paths: SearchPaths,\n         let source_map = Lrc::new(source_map::SourceMap::new(sessopts.file_path_mapping()));\n         let diagnostic_handler = new_handler(error_format,\n                                              Some(source_map.clone()),\n-                                             treat_err_as_bug,\n-                                             ui_testing);\n+                                             debugging_options.treat_err_as_bug,\n+                                             debugging_options.ui_testing);\n \n         let mut sess = session::build_session_(\n             sessopts, cpath, diagnostic_handler, source_map,\n@@ -621,7 +616,7 @@ pub fn run_core(search_paths: SearchPaths,\n \n             ctxt.sess().abort_if_errors();\n \n-            (krate, ctxt.renderinfo.into_inner(), passes)\n+            (krate, ctxt.renderinfo.into_inner(), render_options, passes)\n         }), &sess)\n     })\n }"}, {"sha": "14512e8adf5fdc1b64865b49340283018ea5a78f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 42, "deletions": 49, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/1260ad2138ef67dce982d55aa3afb5410be6f83e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1260ad2138ef67dce982d55aa3afb5410be6f83e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=1260ad2138ef67dce982d55aa3afb5410be6f83e", "patch": "@@ -52,10 +52,7 @@ use std::str;\n use std::sync::Arc;\n use std::rc::Rc;\n \n-use externalfiles::ExternalHtml;\n-\n use errors;\n-\n use serialize::json::{ToJson, Json, as_json};\n use syntax::ast;\n use syntax::ext::base::MacroKind;\n@@ -69,7 +66,7 @@ use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::flock;\n \n use clean::{self, AttributesExt, GetDefId, SelfTy, Mutability};\n-use config;\n+use config::RenderOptions;\n use doctree;\n use fold::DocFolder;\n use html::escape::Escape;\n@@ -109,8 +106,6 @@ struct Context {\n     /// The map used to ensure all generated 'id=' attributes are unique.\n     id_map: Rc<RefCell<IdMap>>,\n     pub shared: Arc<SharedContext>,\n-    pub enable_index_page: bool,\n-    pub index_page: Option<PathBuf>,\n }\n \n struct SharedContext {\n@@ -495,23 +490,25 @@ pub fn initial_ids() -> Vec<String> {\n \n /// Generates the documentation for `crate` into the directory `dst`\n pub fn run(mut krate: clean::Crate,\n-           extern_urls: BTreeMap<String, String>,\n-           external_html: &ExternalHtml,\n-           playground_url: Option<String>,\n-           dst: PathBuf,\n-           resource_suffix: String,\n+           options: RenderOptions,\n            passes: FxHashSet<String>,\n-           css_file_extension: Option<PathBuf>,\n            renderinfo: RenderInfo,\n-           sort_modules_alphabetically: bool,\n-           themes: Vec<PathBuf>,\n-           enable_minification: bool,\n-           id_map: IdMap,\n-           enable_index_page: bool,\n-           index_page: Option<PathBuf>,\n-           options: config::RenderOptions,\n-           diag: &errors::Handler,\n-) -> Result<(), Error> {\n+           diag: &errors::Handler) -> Result<(), Error> {\n+    // need to save a copy of the options for rendering the index page\n+    let md_opts = options.clone();\n+    let RenderOptions {\n+        output,\n+        external_html,\n+        id_map,\n+        playground_url,\n+        sort_modules_alphabetically,\n+        themes,\n+        extension_css,\n+        extern_html_root_urls,\n+        resource_suffix,\n+        ..\n+    } = options;\n+\n     let src_root = match krate.src {\n         FileName::Real(ref p) => match p.parent() {\n             Some(p) => p.to_path_buf(),\n@@ -528,10 +525,10 @@ pub fn run(mut krate: clean::Crate,\n         layout: layout::Layout {\n             logo: String::new(),\n             favicon: String::new(),\n-            external_html: external_html.clone(),\n+            external_html,\n             krate: krate.name.clone(),\n         },\n-        css_file_extension,\n+        css_file_extension: extension_css,\n         created_dirs: Default::default(),\n         sort_modules_alphabetically,\n         themes,\n@@ -573,6 +570,7 @@ pub fn run(mut krate: clean::Crate,\n             }\n         }\n     }\n+    let dst = output;\n     try_err!(fs::create_dir_all(&dst), &dst);\n     krate = render_sources(&dst, &mut scx, krate)?;\n     let cx = Context {\n@@ -582,8 +580,6 @@ pub fn run(mut krate: clean::Crate,\n         codes: ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build()),\n         id_map: Rc::new(RefCell::new(id_map)),\n         shared: Arc::new(scx),\n-        enable_index_page,\n-        index_page,\n     };\n \n     // Crawl the crate to build various caches used for the output\n@@ -637,7 +633,7 @@ pub fn run(mut krate: clean::Crate,\n             },\n             _ => PathBuf::new(),\n         };\n-        let extern_url = extern_urls.get(&e.name).map(|u| &**u);\n+        let extern_url = extern_html_root_urls.get(&e.name).map(|u| &**u);\n         cache.extern_locations.insert(n, (e.name.clone(), src_root,\n                                           extern_location(e, extern_url, &cx.dst)));\n \n@@ -678,7 +674,7 @@ pub fn run(mut krate: clean::Crate,\n     CACHE_KEY.with(|v| *v.borrow_mut() = cache.clone());\n     CURRENT_LOCATION_KEY.with(|s| s.borrow_mut().clear());\n \n-    write_shared(&cx, &krate, &*cache, index, enable_minification, &options, diag)?;\n+    write_shared(&cx, &krate, &*cache, index, &md_opts, diag)?;\n \n     // And finally render the whole crate's documentation\n     cx.krate(krate)\n@@ -759,8 +755,7 @@ fn write_shared(\n     krate: &clean::Crate,\n     cache: &Cache,\n     search_index: String,\n-    enable_minification: bool,\n-    options: &config::RenderOptions,\n+    options: &RenderOptions,\n     diag: &errors::Handler,\n ) -> Result<(), Error> {\n     // Write out the shared files. Note that these are shared among all rustdoc\n@@ -773,10 +768,10 @@ fn write_shared(\n \n     write_minify(cx.dst.join(&format!(\"rustdoc{}.css\", cx.shared.resource_suffix)),\n                  include_str!(\"static/rustdoc.css\"),\n-                 enable_minification)?;\n+                 options.enable_minification)?;\n     write_minify(cx.dst.join(&format!(\"settings{}.css\", cx.shared.resource_suffix)),\n                  include_str!(\"static/settings.css\"),\n-                 enable_minification)?;\n+                 options.enable_minification)?;\n \n     // To avoid \"light.css\" to be overwritten, we'll first run over the received themes and only\n     // then we'll run over the \"official\" styles.\n@@ -800,11 +795,11 @@ fn write_shared(\n           include_bytes!(\"static/wheel.svg\"))?;\n     write_minify(cx.dst.join(&format!(\"light{}.css\", cx.shared.resource_suffix)),\n                  include_str!(\"static/themes/light.css\"),\n-                 enable_minification)?;\n+                 options.enable_minification)?;\n     themes.insert(\"light\".to_owned());\n     write_minify(cx.dst.join(&format!(\"dark{}.css\", cx.shared.resource_suffix)),\n                  include_str!(\"static/themes/dark.css\"),\n-                 enable_minification)?;\n+                 options.enable_minification)?;\n     themes.insert(\"dark\".to_owned());\n \n     let mut themes: Vec<&String> = themes.iter().collect();\n@@ -860,35 +855,35 @@ themePicker.onblur = handleThemeButtonsBlur;\n \n     write_minify(cx.dst.join(&format!(\"main{}.js\", cx.shared.resource_suffix)),\n                  include_str!(\"static/main.js\"),\n-                 enable_minification)?;\n+                 options.enable_minification)?;\n     write_minify(cx.dst.join(&format!(\"settings{}.js\", cx.shared.resource_suffix)),\n                  include_str!(\"static/settings.js\"),\n-                 enable_minification)?;\n+                 options.enable_minification)?;\n \n     {\n         let mut data = format!(\"var resourcesSuffix = \\\"{}\\\";\\n\",\n                                cx.shared.resource_suffix);\n         data.push_str(include_str!(\"static/storage.js\"));\n         write_minify(cx.dst.join(&format!(\"storage{}.js\", cx.shared.resource_suffix)),\n                      &data,\n-                     enable_minification)?;\n+                     options.enable_minification)?;\n     }\n \n     if let Some(ref css) = cx.shared.css_file_extension {\n         let out = cx.dst.join(&format!(\"theme{}.css\", cx.shared.resource_suffix));\n-        if !enable_minification {\n+        if !options.enable_minification {\n             try_err!(fs::copy(css, out), css);\n         } else {\n             let mut f = try_err!(File::open(css), css);\n             let mut buffer = String::with_capacity(1000);\n \n             try_err!(f.read_to_string(&mut buffer), css);\n-            write_minify(out, &buffer, enable_minification)?;\n+            write_minify(out, &buffer, options.enable_minification)?;\n         }\n     }\n     write_minify(cx.dst.join(&format!(\"normalize{}.css\", cx.shared.resource_suffix)),\n                  include_str!(\"static/normalize.css\"),\n-                 enable_minification)?;\n+                 options.enable_minification)?;\n     write(cx.dst.join(\"FiraSans-Regular.woff\"),\n           include_bytes!(\"static/FiraSans-Regular.woff\"))?;\n     write(cx.dst.join(\"FiraSans-Medium.woff\"),\n@@ -984,21 +979,19 @@ themePicker.onblur = handleThemeButtonsBlur;\n     let mut w = try_err!(File::create(&dst), &dst);\n     try_err!(writeln!(&mut w, \"var N = null;var searchIndex = {{}};\"), &dst);\n     for index in &all_indexes {\n-        try_err!(write_minify_replacer(&mut w, &*index, enable_minification,\n+        try_err!(write_minify_replacer(&mut w, &*index, options.enable_minification,\n                                        &[(minifier::js::Keyword::Null, \"N\")]),\n                  &dst);\n     }\n     try_err!(writeln!(&mut w, \"initSearch(searchIndex);\"), &dst);\n \n-    if cx.enable_index_page == true {\n-        if let Some(ref index_page) = cx.index_page {\n-            ::markdown::render(index_page,\n-                               cx.dst.clone(),\n-                               &options.markdown_css.clone(),\n-                               options.markdown_playground_url.clone()\n-                                   .or_else(|| options.playground_url.clone()),\n-                               &(*cx.shared).layout.external_html,\n-                               !options.markdown_no_toc, diag);\n+    if options.enable_index_page {\n+        if let Some(index_page) = options.index_page.clone() {\n+            let mut md_opts = options.clone();\n+            md_opts.output = cx.dst.clone();\n+            md_opts.external_html = (*cx.shared).layout.external_html.clone();\n+\n+            ::markdown::render(index_page, md_opts, diag);\n         } else {\n             let dst = cx.dst.join(\"index.html\");\n             let mut w = BufWriter::new(try_err!(File::create(&dst), &dst));"}, {"sha": "f0f36f0355ed6bef960b767854a52b5b8abf9fae", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 9, "deletions": 53, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/1260ad2138ef67dce982d55aa3afb5410be6f83e/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1260ad2138ef67dce982d55aa3afb5410be6f83e/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=1260ad2138ef67dce982d55aa3afb5410be6f83e", "patch": "@@ -370,24 +370,9 @@ fn main_args(args: &[String]) -> isize {\n                                  options.debugging_options.ui_testing);\n \n     match (options.should_test, options.markdown_input()) {\n-        (true, true) => {\n-            return markdown::test(&options.input, options.cfgs, options.libs, options.externs,\n-                                  options.test_args, options.maybe_sysroot,\n-                                  options.display_warnings, options.linker, options.edition,\n-                                  options.codegen_options, &diag)\n-        }\n-        (true, false) => {\n-            return test::run(&options.input, options.cfgs, options.libs, options.externs,\n-                             options.test_args, options.crate_name, options.maybe_sysroot,\n-                             options.display_warnings, options.linker, options.edition,\n-                             options.codegen_options)\n-        }\n-        (false, true) => return markdown::render(&options.input, options.render_options.output,\n-                                                 &options.render_options.markdown_css,\n-                                                 options.render_options.markdown_playground_url\n-                                                    .or(options.render_options.playground_url),\n-                                                 &options.render_options.external_html,\n-                                                 !options.render_options.markdown_no_toc, &diag),\n+        (true, true) => return markdown::test(options, &diag),\n+        (true, false) => return test::run(options),\n+        (false, true) => return markdown::render(options.input, options.render_options, &diag),\n         (false, false) => {}\n     }\n \n@@ -401,19 +386,7 @@ fn main_args(args: &[String]) -> isize {\n         info!(\"going to format\");\n         let (error_format, treat_err_as_bug, ui_testing) = diag_opts;\n         let diag = core::new_handler(error_format, None, treat_err_as_bug, ui_testing);\n-        let html_opts = renderopts.clone();\n-        html::render::run(krate, renderopts.extern_html_root_urls, &renderopts.external_html,\n-                          renderopts.playground_url,\n-                          renderopts.output,\n-                          renderopts.resource_suffix,\n-                          passes.into_iter().collect(),\n-                          renderopts.extension_css,\n-                          renderinfo,\n-                          renderopts.sort_modules_alphabetically,\n-                          renderopts.themes,\n-                          renderopts.enable_minification, renderopts.id_map,\n-                          renderopts.enable_index_page, renderopts.index_page,\n-                          html_opts, &diag)\n+        html::render::run(krate, renderopts, passes.into_iter().collect(), renderinfo, &diag)\n             .expect(\"failed to generate documentation\");\n         0\n     })\n@@ -424,8 +397,7 @@ fn main_args(args: &[String]) -> isize {\n /// generated from the cleaned AST of the crate.\n ///\n /// This form of input will run all of the plug/cleaning passes\n-fn rust_input<R, F>(options: config::Options,\n-                    f: F) -> R\n+fn rust_input<R, F>(options: config::Options, f: F) -> R\n where R: 'static + Send,\n       F: 'static + Send + FnOnce(Output) -> R\n {\n@@ -435,25 +407,9 @@ where R: 'static + Send,\n     let (tx, rx) = channel();\n \n     let result = rustc_driver::monitor(move || syntax::with_globals(move || {\n-        use rustc::session::config::Input;\n-\n-        let paths = options.libs;\n-        let cfgs = options.cfgs;\n-        let triple = options.target;\n-        let maybe_sysroot = options.maybe_sysroot;\n-        let crate_name = options.crate_name;\n-        let crate_version = options.crate_version;\n-        let force_unstable_if_unmarked = options.debugging_options.force_unstable_if_unmarked;\n-        let treat_err_as_bug = options.debugging_options.treat_err_as_bug;\n-        let ui_testing = options.debugging_options.ui_testing;\n-\n-        let (mut krate, renderinfo, passes) =\n-            core::run_core(paths, cfgs, options.externs, Input::File(options.input), triple, maybe_sysroot,\n-                           options.display_warnings, crate_name.clone(),\n-                           force_unstable_if_unmarked, options.edition, options.codegen_options, options.error_format,\n-                           options.lint_opts, options.lint_cap, options.describe_lints,\n-                           options.manual_passes, options.default_passes, treat_err_as_bug,\n-                           ui_testing);\n+        let crate_name = options.crate_name.clone();\n+        let crate_version = options.crate_version.clone();\n+        let (mut krate, renderinfo, renderopts, passes) = core::run_core(options);\n \n         info!(\"finished with rustc\");\n \n@@ -488,7 +444,7 @@ where R: 'static + Send,\n         tx.send(f(Output {\n             krate: krate,\n             renderinfo: renderinfo,\n-            renderopts: options.render_options,\n+            renderopts,\n             passes: passes\n         })).unwrap();\n     }));"}, {"sha": "8008f8848d45d054f0c80b68820350005f8a6e98", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1260ad2138ef67dce982d55aa3afb5410be6f83e/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1260ad2138ef67dce982d55aa3afb5410be6f83e/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=1260ad2138ef67dce982d55aa3afb5410be6f83e", "patch": "@@ -11,19 +11,17 @@\n use std::default::Default;\n use std::fs::File;\n use std::io::prelude::*;\n-use std::path::{PathBuf, Path};\n+use std::path::PathBuf;\n use std::cell::RefCell;\n \n use errors;\n use testing;\n-use rustc::session::search_paths::SearchPaths;\n-use rustc::session::config::{Externs, CodegenOptions};\n use syntax::source_map::DUMMY_SP;\n use syntax::feature_gate::UnstableFeatures;\n-use syntax::edition::Edition;\n \n-use externalfiles::{ExternalHtml, LoadStringError, load_string};\n+use externalfiles::{LoadStringError, load_string};\n \n+use config::{Options, RenderOptions};\n use html::escape::Escape;\n use html::markdown;\n use html::markdown::{ErrorCodes, IdMap, Markdown, MarkdownWithToc, find_testable_code};\n@@ -50,23 +48,24 @@ fn extract_leading_metadata<'a>(s: &'a str) -> (Vec<&'a str>, &'a str) {\n \n /// Render `input` (e.g. \"foo.md\") into an HTML file in `output`\n /// (e.g. output = \"bar\" => \"bar/foo.html\").\n-pub fn render(input: &Path, mut output: PathBuf, markdown_css: &[String],\n-              playground_url: Option<String>, external_html: &ExternalHtml, include_toc: bool,\n-              diag: &errors::Handler) -> isize {\n+pub fn render(input: PathBuf, options: RenderOptions, diag: &errors::Handler) -> isize {\n+    let mut output = options.output;\n     output.push(input.file_stem().unwrap());\n     output.set_extension(\"html\");\n \n     let mut css = String::new();\n-    for name in markdown_css {\n+    for name in &options.markdown_css {\n         let s = format!(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{}\\\">\\n\", name);\n         css.push_str(&s)\n     }\n \n-    let input_str = match load_string(input, diag) {\n+    let input_str = match load_string(&input, diag) {\n         Ok(s) => s,\n         Err(LoadStringError::ReadFail) => return 1,\n         Err(LoadStringError::BadUtf8) => return 2,\n     };\n+    let playground_url = options.markdown_playground_url\n+                            .or(options.playground_url);\n     if let Some(playground) = playground_url {\n         markdown::PLAYGROUND.with(|s| { *s.borrow_mut() = Some((None, playground)); });\n     }\n@@ -88,7 +87,7 @@ pub fn render(input: &Path, mut output: PathBuf, markdown_css: &[String],\n \n     let mut ids = IdMap::new();\n     let error_codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n-    let text = if include_toc {\n+    let text = if !options.markdown_no_toc {\n         MarkdownWithToc(text, RefCell::new(&mut ids), error_codes).to_string()\n     } else {\n         Markdown(text, &[], RefCell::new(&mut ids), error_codes).to_string()\n@@ -123,10 +122,10 @@ pub fn render(input: &Path, mut output: PathBuf, markdown_css: &[String],\n </html>\"#,\n         title = Escape(title),\n         css = css,\n-        in_header = external_html.in_header,\n-        before_content = external_html.before_content,\n+        in_header = options.external_html.in_header,\n+        before_content = options.external_html.before_content,\n         text = text,\n-        after_content = external_html.after_content,\n+        after_content = options.external_html.after_content,\n     );\n \n     match err {\n@@ -139,31 +138,29 @@ pub fn render(input: &Path, mut output: PathBuf, markdown_css: &[String],\n }\n \n /// Run any tests/code examples in the markdown file `input`.\n-pub fn test(input: &Path, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n-            mut test_args: Vec<String>, maybe_sysroot: Option<PathBuf>,\n-            display_warnings: bool, linker: Option<PathBuf>, edition: Edition,\n-            cg: CodegenOptions, diag: &errors::Handler) -> isize {\n-    let input_str = match load_string(input, diag) {\n+pub fn test(mut options: Options, diag: &errors::Handler) -> isize {\n+    let input_str = match load_string(&options.input, diag) {\n         Ok(s) => s,\n         Err(LoadStringError::ReadFail) => return 1,\n         Err(LoadStringError::BadUtf8) => return 2,\n     };\n \n     let mut opts = TestOptions::default();\n     opts.no_crate_inject = true;\n-    opts.display_warnings = display_warnings;\n-    let mut collector = Collector::new(input.display().to_string(), cfgs, libs, cg, externs,\n-                                       true, opts, maybe_sysroot, None,\n-                                       Some(PathBuf::from(input)),\n-                                       linker, edition);\n+    opts.display_warnings = options.display_warnings;\n+    let mut collector = Collector::new(options.input.display().to_string(), options.cfgs,\n+                                       options.libs, options.codegen_options, options.externs,\n+                                       true, opts, options.maybe_sysroot, None,\n+                                       Some(options.input),\n+                                       options.linker, options.edition);\n     collector.set_position(DUMMY_SP);\n     let codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n     let res = find_testable_code(&input_str, &mut collector, codes);\n     if let Err(err) = res {\n         diag.span_warn(DUMMY_SP, &err.to_string());\n     }\n-    test_args.insert(0, \"rustdoctest\".to_string());\n-    testing::test_main(&test_args, collector.tests,\n-                       testing::Options::new().display_output(display_warnings));\n+    options.test_args.insert(0, \"rustdoctest\".to_string());\n+    testing::test_main(&options.test_args, collector.tests,\n+                       testing::Options::new().display_output(options.display_warnings));\n     0\n }"}, {"sha": "ebc26d73c4553cbc8d33cfdc7d716bdba5ba77ed", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 25, "deletions": 34, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/1260ad2138ef67dce982d55aa3afb5410be6f83e/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1260ad2138ef67dce982d55aa3afb5410be6f83e/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=1260ad2138ef67dce982d55aa3afb5410be6f83e", "patch": "@@ -12,7 +12,7 @@ use std::env;\n use std::ffi::OsString;\n use std::io::prelude::*;\n use std::io;\n-use std::path::{Path, PathBuf};\n+use std::path::PathBuf;\n use std::panic::{self, AssertUnwindSafe};\n use std::process::Command;\n use std::str;\n@@ -42,6 +42,7 @@ use errors;\n use errors::emitter::ColorConfig;\n \n use clean::Attributes;\n+use config::Options;\n use html::markdown::{self, ErrorCodes, LangString};\n \n #[derive(Clone, Default)]\n@@ -55,34 +56,23 @@ pub struct TestOptions {\n     pub attrs: Vec<String>,\n }\n \n-pub fn run(input_path: &Path,\n-           cfgs: Vec<String>,\n-           libs: SearchPaths,\n-           externs: Externs,\n-           mut test_args: Vec<String>,\n-           crate_name: Option<String>,\n-           maybe_sysroot: Option<PathBuf>,\n-           display_warnings: bool,\n-           linker: Option<PathBuf>,\n-           edition: Edition,\n-           cg: CodegenOptions)\n-           -> isize {\n-    let input = config::Input::File(input_path.to_owned());\n+pub fn run(mut options: Options) -> isize {\n+    let input = config::Input::File(options.input.clone());\n \n     let sessopts = config::Options {\n-        maybe_sysroot: maybe_sysroot.clone().or_else(\n+        maybe_sysroot: options.maybe_sysroot.clone().or_else(\n             || Some(env::current_exe().unwrap().parent().unwrap().parent().unwrap().to_path_buf())),\n-        search_paths: libs.clone(),\n+        search_paths: options.libs.clone(),\n         crate_types: vec![config::CrateType::Dylib],\n-        cg: cg.clone(),\n-        externs: externs.clone(),\n+        cg: options.codegen_options.clone(),\n+        externs: options.externs.clone(),\n         unstable_features: UnstableFeatures::from_environment(),\n         lint_cap: Some(::rustc::lint::Level::Allow),\n         actually_rustdoc: true,\n         debugging_opts: config::DebuggingOptions {\n             ..config::basic_debugging_options()\n         },\n-        edition,\n+        edition: options.edition,\n         ..config::Options::default()\n     };\n     driver::spawn_thread_pool(sessopts, |sessopts| {\n@@ -93,13 +83,14 @@ pub fn run(input_path: &Path,\n                                             Some(source_map.clone()));\n \n         let mut sess = session::build_session_(\n-            sessopts, Some(input_path.to_owned()), handler, source_map.clone(),\n+            sessopts, Some(options.input), handler, source_map.clone(),\n         );\n         let codegen_backend = rustc_driver::get_codegen_backend(&sess);\n         let cstore = CStore::new(codegen_backend.metadata_loader());\n         rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n \n-        let mut cfg = config::build_configuration(&sess, config::parse_cfgspecs(cfgs.clone()));\n+        let mut cfg = config::build_configuration(&sess,\n+                                                  config::parse_cfgspecs(options.cfgs.clone()));\n         target_features::add_configuration(&mut cfg, &sess, &*codegen_backend);\n         sess.parse_sess.config = cfg;\n \n@@ -119,24 +110,24 @@ pub fn run(input_path: &Path,\n             ).expect(\"phase_2_configure_and_expand aborted in rustdoc!\")\n         };\n \n-        let crate_name = crate_name.unwrap_or_else(|| {\n+        let crate_name = options.crate_name.unwrap_or_else(|| {\n             ::rustc_codegen_utils::link::find_crate_name(None, &hir_forest.krate().attrs, &input)\n         });\n         let mut opts = scrape_test_config(hir_forest.krate());\n-        opts.display_warnings |= display_warnings;\n+        opts.display_warnings |= options.display_warnings;\n         let mut collector = Collector::new(\n             crate_name,\n-            cfgs,\n-            libs,\n-            cg,\n-            externs,\n+            options.cfgs,\n+            options.libs,\n+            options.codegen_options,\n+            options.externs,\n             false,\n             opts,\n-            maybe_sysroot,\n+            options.maybe_sysroot,\n             Some(source_map),\n-             None,\n-            linker,\n-            edition\n+            None,\n+            options.linker,\n+            options.edition\n         );\n \n         {\n@@ -153,11 +144,11 @@ pub fn run(input_path: &Path,\n             });\n         }\n \n-        test_args.insert(0, \"rustdoctest\".to_string());\n+        options.test_args.insert(0, \"rustdoctest\".to_string());\n \n-        testing::test_main(&test_args,\n+        testing::test_main(&options.test_args,\n                         collector.tests.into_iter().collect(),\n-                        testing::Options::new().display_output(display_warnings));\n+                        testing::Options::new().display_output(options.display_warnings));\n         0\n     })\n }"}]}