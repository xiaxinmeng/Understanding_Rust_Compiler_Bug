{"sha": "2faef12b656d40522ca3b4a53b36299b4364e717", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYWVmMTJiNjU2ZDQwNTIyY2EzYjRhNTNiMzYyOTliNDM2NGU3MTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-16T13:46:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-16T13:46:01Z"}, "message": "Auto merge of #84241 - Dylan-DPC:rollup-jk9nt6k, r=Dylan-DPC\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #83337 (rustdoc: Hide item contents, not items)\n - #83944 (Fix a couple resolve bugs from binder refactor)\n - #84145 (Address comments for vecdeque_binary_search #78021)\n - #84172 (Compiler error messages: reduce assertiveness of message E0384)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "cd720d31399a713ad854b977cc401d72f5ccd02f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd720d31399a713ad854b977cc401d72f5ccd02f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2faef12b656d40522ca3b4a53b36299b4364e717", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2faef12b656d40522ca3b4a53b36299b4364e717", "html_url": "https://github.com/rust-lang/rust/commit/2faef12b656d40522ca3b4a53b36299b4364e717", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2faef12b656d40522ca3b4a53b36299b4364e717/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3833636446b670ee905fba5f8d18881b1739814e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3833636446b670ee905fba5f8d18881b1739814e", "html_url": "https://github.com/rust-lang/rust/commit/3833636446b670ee905fba5f8d18881b1739814e"}, {"sha": "c7c59d7c3b5ace6f47a48fb74c7114e1f60a4667", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7c59d7c3b5ace6f47a48fb74c7114e1f60a4667", "html_url": "https://github.com/rust-lang/rust/commit/c7c59d7c3b5ace6f47a48fb74c7114e1f60a4667"}], "stats": {"total": 720, "additions": 526, "deletions": 194}, "files": [{"sha": "df6f196392340d2e09fdb34248be1b1961d4769a", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -1681,7 +1681,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 if decl.can_be_made_mutable() {\n                     err.span_suggestion(\n                         decl.source_info.span,\n-                        \"make this binding mutable\",\n+                        \"consider making this binding mutable\",\n                         format!(\"mut {}\", name),\n                         Applicability::MachineApplicable,\n                     );"}, {"sha": "a93afedf7f62a148c4fe2f8e0167af927d2e00bc", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -2719,6 +2719,13 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 Some(next) => next,\n                 None => break None,\n             };\n+            // See issue #83753. If someone writes an associated type on a non-trait, just treat it as\n+            // there being no supertrait HRTBs.\n+            match tcx.def_kind(def_id) {\n+                DefKind::Trait | DefKind::TraitAlias | DefKind::Impl => {}\n+                _ => break None,\n+            }\n+\n             if trait_defines_associated_type_named(def_id) {\n                 break Some(bound_vars.into_iter().collect());\n             }\n@@ -2764,7 +2771,14 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 | Scope::TraitRefBoundary { ref s, .. } => {\n                     scope = *s;\n                 }\n-                Scope::Root => bug!(\"In fn_like_elision without appropriate scope above\"),\n+                Scope::Root => {\n+                    // See issue #83907. Just bail out from looking inside.\n+                    self.tcx.sess.delay_span_bug(\n+                        rustc_span::DUMMY_SP,\n+                        \"In fn_like_elision without appropriate scope above\",\n+                    );\n+                    return;\n+                }\n             }\n         };\n         // While not strictly necessary, we gather anon lifetimes *before* actually"}, {"sha": "7d6fbf1c438bfe19e5632657b0a5b0fedc14805d", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 69, "deletions": 3, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -2403,6 +2403,12 @@ impl<T> VecDeque<T> {\n     /// [`Result::Err`] is returned, containing the index where a matching\n     /// element could be inserted while maintaining sorted order.\n     ///\n+    /// See also [`binary_search_by`], [`binary_search_by_key`], and [`partition_point`].\n+    ///\n+    /// [`binary_search_by`]: VecDeque::binary_search_by\n+    /// [`binary_search_by_key`]: VecDeque::binary_search_by_key\n+    /// [`partition_point`]: VecDeque::partition_point\n+    ///\n     /// # Examples\n     ///\n     /// Looks up a series of four elements. The first is found, with a\n@@ -2457,6 +2463,12 @@ impl<T> VecDeque<T> {\n     /// [`Result::Err`] is returned, containing the index where a matching\n     /// element could be inserted while maintaining sorted order.\n     ///\n+    /// See also [`binary_search`], [`binary_search_by_key`], and [`partition_point`].\n+    ///\n+    /// [`binary_search`]: VecDeque::binary_search\n+    /// [`binary_search_by_key`]: VecDeque::binary_search_by_key\n+    /// [`partition_point`]: VecDeque::partition_point\n+    ///\n     /// # Examples\n     ///\n     /// Looks up a series of four elements. The first is found, with a\n@@ -2481,8 +2493,11 @@ impl<T> VecDeque<T> {\n         F: FnMut(&'a T) -> Ordering,\n     {\n         let (front, back) = self.as_slices();\n+        let cmp_back = back.first().map(|elem| f(elem));\n \n-        if let Some(Ordering::Less | Ordering::Equal) = back.first().map(|elem| f(elem)) {\n+        if let Some(Ordering::Equal) = cmp_back {\n+            Ok(front.len())\n+        } else if let Some(Ordering::Less) = cmp_back {\n             back.binary_search_by(f).map(|idx| idx + front.len()).map_err(|idx| idx + front.len())\n         } else {\n             front.binary_search_by(f)\n@@ -2492,15 +2507,21 @@ impl<T> VecDeque<T> {\n     /// Binary searches this sorted `VecDeque` with a key extraction function.\n     ///\n     /// Assumes that the `VecDeque` is sorted by the key, for instance with\n-    /// [`make_contiguous().sort_by_key()`](#method.make_contiguous) using the same\n-    /// key extraction function.\n+    /// [`make_contiguous().sort_by_key()`] using the same key extraction function.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n     /// one of the matches could be returned. If the value is not found then\n     /// [`Result::Err`] is returned, containing the index where a matching\n     /// element could be inserted while maintaining sorted order.\n     ///\n+    /// See also [`binary_search`], [`binary_search_by`], and [`partition_point`].\n+    ///\n+    /// [`make_contiguous().sort_by_key()`]: VecDeque::make_contiguous\n+    /// [`binary_search`]: VecDeque::binary_search\n+    /// [`binary_search_by`]: VecDeque::binary_search_by\n+    /// [`partition_point`]: VecDeque::partition_point\n+    ///\n     /// # Examples\n     ///\n     /// Looks up a series of four elements in a slice of pairs sorted by\n@@ -2531,6 +2552,51 @@ impl<T> VecDeque<T> {\n     {\n         self.binary_search_by(|k| f(k).cmp(b))\n     }\n+\n+    /// Returns the index of the partition point according to the given predicate\n+    /// (the index of the first element of the second partition).\n+    ///\n+    /// The deque is assumed to be partitioned according to the given predicate.\n+    /// This means that all elements for which the predicate returns true are at the start of the deque\n+    /// and all elements for which the predicate returns false are at the end.\n+    /// For example, [7, 15, 3, 5, 4, 12, 6] is a partitioned under the predicate x % 2 != 0\n+    /// (all odd numbers are at the start, all even at the end).\n+    ///\n+    /// If this deque is not partitioned, the returned result is unspecified and meaningless,\n+    /// as this method performs a kind of binary search.\n+    ///\n+    /// See also [`binary_search`], [`binary_search_by`], and [`binary_search_by_key`].\n+    ///\n+    /// [`binary_search`]: VecDeque::binary_search\n+    /// [`binary_search_by`]: VecDeque::binary_search_by\n+    /// [`binary_search_by_key`]: VecDeque::binary_search_by_key\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(vecdeque_binary_search)]\n+    /// use std::collections::VecDeque;\n+    ///\n+    /// let deque: VecDeque<_> = vec![1, 2, 3, 3, 5, 6, 7].into();\n+    /// let i = deque.partition_point(|&x| x < 5);\n+    ///\n+    /// assert_eq!(i, 4);\n+    /// assert!(deque.iter().take(i).all(|&x| x < 5));\n+    /// assert!(deque.iter().skip(i).all(|&x| !(x < 5)));\n+    /// ```\n+    #[unstable(feature = \"vecdeque_binary_search\", issue = \"78021\")]\n+    pub fn partition_point<P>(&self, mut pred: P) -> usize\n+    where\n+        P: FnMut(&T) -> bool,\n+    {\n+        let (front, back) = self.as_slices();\n+\n+        if let Some(true) = back.first().map(|v| pred(v)) {\n+            back.partition_point(pred) + front.len()\n+        } else {\n+            front.partition_point(pred)\n+        }\n+    }\n }\n \n impl<T: Clone> VecDeque<T> {"}, {"sha": "d7140cf97593cbd8f751c2fac4e022f18900c697", "filename": "library/alloc/tests/vec_deque.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/library%2Falloc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/library%2Falloc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec_deque.rs?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -1699,6 +1699,24 @@ fn test_binary_search_by_key() {\n     assert_eq!(deque.binary_search_by_key(&4, |&(v,)| v), Err(3));\n }\n \n+#[test]\n+fn test_partition_point() {\n+    // Contiguous (front only) search:\n+    let deque: VecDeque<_> = vec![1, 2, 3, 5, 6].into();\n+    assert!(deque.as_slices().1.is_empty());\n+    assert_eq!(deque.partition_point(|&v| v <= 3), 3);\n+\n+    // Split search (both front & back non-empty):\n+    let mut deque: VecDeque<_> = vec![5, 6].into();\n+    deque.push_front(3);\n+    deque.push_front(2);\n+    deque.push_front(1);\n+    deque.push_back(10);\n+    assert!(!deque.as_slices().0.is_empty());\n+    assert!(!deque.as_slices().1.is_empty());\n+    assert_eq!(deque.partition_point(|&v| v <= 5), 4);\n+}\n+\n #[test]\n fn test_zero_sized_push() {\n     const N: usize = 8;"}, {"sha": "9886b5ceeed391bc8ee6a5e5532908fa76cf76e4", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 26, "deletions": 38, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -43,7 +43,6 @@ use std::path::PathBuf;\n use std::str;\n use std::string::ToString;\n \n-use itertools::Itertools;\n use rustc_ast_pretty::pprust;\n use rustc_attr::{Deprecation, StabilityLevel};\n use rustc_data_structures::fx::FxHashSet;\n@@ -486,18 +485,7 @@ fn settings(root_path: &str, suffix: &str, themes: &[StylePath]) -> Result<Strin\n             ],\n         )\n             .into(),\n-        (\n-            \"Auto-hide item declarations\",\n-            vec![\n-                (\"auto-hide-struct\", \"Auto-hide structs declaration\", true),\n-                (\"auto-hide-enum\", \"Auto-hide enums declaration\", false),\n-                (\"auto-hide-union\", \"Auto-hide unions declaration\", true),\n-                (\"auto-hide-trait\", \"Auto-hide traits declaration\", true),\n-                (\"auto-hide-macro\", \"Auto-hide macros declaration\", false),\n-            ],\n-        )\n-            .into(),\n-        (\"auto-hide-attributes\", \"Auto-hide item attributes.\", true).into(),\n+        (\"auto-hide-large-items\", \"Auto-hide item contents for large items.\", true).into(),\n         (\"auto-hide-method-docs\", \"Auto-hide item methods' documentation\", false).into(),\n         (\"auto-hide-trait-implementations\", \"Auto-hide trait implementation documentation\", true)\n             .into(),\n@@ -947,19 +935,21 @@ fn render_assoc_item(\n             + name.as_str().len()\n             + generics_len;\n \n-        let (indent, end_newline) = if parent == ItemType::Trait {\n+        let (indent, indent_str, end_newline) = if parent == ItemType::Trait {\n             header_len += 4;\n-            (4, false)\n+            let indent_str = \"    \";\n+            render_attributes_in_pre(w, meth, indent_str);\n+            (4, indent_str, false)\n         } else {\n-            (0, true)\n+            render_attributes_in_code(w, meth);\n+            (0, \"\", true)\n         };\n-        render_attributes(w, meth, false);\n         w.reserve(header_len + \"<a href=\\\"\\\" class=\\\"fnname\\\">{\".len() + \"</a>\".len());\n         write!(\n             w,\n             \"{}{}{}{}{}{}{}fn <a href=\\\"{href}\\\" class=\\\"fnname\\\">{name}</a>\\\n              {generics}{decl}{notable_traits}{where_clause}\",\n-            if parent == ItemType::Trait { \"    \" } else { \"\" },\n+            indent_str,\n             vis,\n             constness,\n             asyncness,\n@@ -1015,35 +1005,33 @@ const ALLOWED_ATTRIBUTES: &[Symbol] = &[\n     sym::non_exhaustive,\n ];\n \n-// The `top` parameter is used when generating the item declaration to ensure it doesn't have a\n-// left padding. For example:\n-//\n-// #[foo] <----- \"top\" attribute\n-// struct Foo {\n-//     #[bar] <---- not \"top\" attribute\n-//     bar: usize,\n-// }\n-fn render_attributes(w: &mut Buffer, it: &clean::Item, top: bool) {\n-    let attrs = it\n-        .attrs\n+fn attributes(it: &clean::Item) -> Vec<String> {\n+    it.attrs\n         .other_attrs\n         .iter()\n         .filter_map(|attr| {\n             if ALLOWED_ATTRIBUTES.contains(&attr.name_or_empty()) {\n-                Some(pprust::attribute_to_string(&attr))\n+                Some(pprust::attribute_to_string(&attr).replace(\"\\n\", \"\").replace(\"  \", \" \"))\n             } else {\n                 None\n             }\n         })\n-        .join(\"\\n\");\n+        .collect()\n+}\n \n-    if !attrs.is_empty() {\n-        write!(\n-            w,\n-            \"<span class=\\\"docblock attributes{}\\\">{}</span>\",\n-            if top { \" top-attr\" } else { \"\" },\n-            &attrs\n-        );\n+// When an attribute is rendered inside a `<pre>` tag, it is formatted using\n+// a whitespace prefix and newline.\n+fn render_attributes_in_pre(w: &mut Buffer, it: &clean::Item, prefix: &str) {\n+    for a in attributes(it) {\n+        write!(w, \"{}{}\\n\", prefix, a);\n+    }\n+}\n+\n+// When an attribute is rendered inside a <code> tag, it is formatted using\n+// a div to produce a newline after it.\n+fn render_attributes_in_code(w: &mut Buffer, it: &clean::Item) {\n+    for a in attributes(it) {\n+        write!(w, \"<div class=\\\"code-attribute\\\">{}</div>\", a);\n     }\n }\n "}, {"sha": "ff9e4d031da18dd5abcfc9240720a26ed0f302ae", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 83, "deletions": 16, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -11,8 +11,8 @@ use rustc_span::symbol::{kw, sym, Symbol};\n \n use super::{\n     collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_strs, notable_traits_decl,\n-    render_assoc_item, render_assoc_items, render_attributes, render_impl,\n-    render_stability_since_raw, write_srclink, AssocItemLink, Context,\n+    render_assoc_item, render_assoc_items, render_attributes_in_code, render_attributes_in_pre,\n+    render_impl, render_stability_since_raw, write_srclink, AssocItemLink, Context,\n };\n use crate::clean::{self, GetDefId};\n use crate::formats::cache::Cache;\n@@ -131,6 +131,26 @@ pub(super) fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer)\n     }\n }\n \n+/// For large structs, enums, unions, etc, determine whether to hide their fields\n+fn should_hide_fields(n_fields: usize) -> bool {\n+    n_fields > 12\n+}\n+\n+fn toggle_open(w: &mut Buffer, text: &str) {\n+    write!(\n+        w,\n+        \"<details class=\\\"rustdoc-toggle type-contents-toggle\\\">\\\n+            <summary class=\\\"hideme\\\">\\\n+                <span>Show {}</span>\\\n+            </summary>\",\n+        text\n+    );\n+}\n+\n+fn toggle_close(w: &mut Buffer) {\n+    w.write_str(\"</details>\");\n+}\n+\n fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[clean::Item]) {\n     document(w, cx, item, None);\n \n@@ -377,7 +397,7 @@ fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::\n     )\n     .len();\n     w.write_str(\"<pre class=\\\"rust fn\\\">\");\n-    render_attributes(w, it, false);\n+    render_attributes_in_pre(w, it, \"\");\n     write!(\n         w,\n         \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n@@ -406,7 +426,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n     // Output the trait definition\n     wrap_into_docblock(w, |w| {\n         w.write_str(\"<pre class=\\\"rust trait\\\">\");\n-        render_attributes(w, it, true);\n+        render_attributes_in_pre(w, it, \"\");\n         write!(\n             w,\n             \"{}{}{}trait {}{}{}\",\n@@ -429,17 +449,36 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         } else {\n             // FIXME: we should be using a derived_id for the Anchors here\n             w.write_str(\"{\\n\");\n+            let mut toggle = false;\n+\n+            // If there are too many associated types, hide _everything_\n+            if should_hide_fields(types.len()) {\n+                toggle = true;\n+                toggle_open(w, \"associated items\");\n+            }\n             for t in &types {\n                 render_assoc_item(w, t, AssocItemLink::Anchor(None), ItemType::Trait, cx);\n                 w.write_str(\";\\n\");\n             }\n+            // If there are too many associated constants, hide everything after them\n+            // We also do this if the types + consts is large because otherwise we could\n+            // render a bunch of types and _then_ a bunch of consts just because both were\n+            // _just_ under the limit\n+            if !toggle && should_hide_fields(types.len() + consts.len()) {\n+                toggle = true;\n+                toggle_open(w, \"associated constants and methods\");\n+            }\n             if !types.is_empty() && !consts.is_empty() {\n                 w.write_str(\"\\n\");\n             }\n             for t in &consts {\n                 render_assoc_item(w, t, AssocItemLink::Anchor(None), ItemType::Trait, cx);\n                 w.write_str(\";\\n\");\n             }\n+            if !toggle && should_hide_fields(required.len() + provided.len()) {\n+                toggle = true;\n+                toggle_open(w, \"methods\");\n+            }\n             if !consts.is_empty() && !required.is_empty() {\n                 w.write_str(\"\\n\");\n             }\n@@ -470,6 +509,9 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n                     w.write_str(\"<div class=\\\"item-spacer\\\"></div>\");\n                 }\n             }\n+            if toggle {\n+                toggle_close(w);\n+            }\n             w.write_str(\"}\");\n         }\n         w.write_str(\"</pre>\")\n@@ -693,7 +735,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n \n fn item_trait_alias(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::TraitAlias) {\n     w.write_str(\"<pre class=\\\"rust trait-alias\\\">\");\n-    render_attributes(w, it, false);\n+    render_attributes_in_pre(w, it, \"\");\n     write!(\n         w,\n         \"trait {}{}{} = {};</pre>\",\n@@ -714,7 +756,7 @@ fn item_trait_alias(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clea\n \n fn item_opaque_ty(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::OpaqueTy) {\n     w.write_str(\"<pre class=\\\"rust opaque\\\">\");\n-    render_attributes(w, it, false);\n+    render_attributes_in_pre(w, it, \"\");\n     write!(\n         w,\n         \"type {}{}{where_clause} = impl {bounds};</pre>\",\n@@ -735,7 +777,7 @@ fn item_opaque_ty(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean:\n \n fn item_typedef(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Typedef) {\n     w.write_str(\"<pre class=\\\"rust typedef\\\">\");\n-    render_attributes(w, it, false);\n+    render_attributes_in_pre(w, it, \"\");\n     write!(\n         w,\n         \"type {}{}{where_clause} = {type_};</pre>\",\n@@ -757,7 +799,7 @@ fn item_typedef(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::T\n fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Union) {\n     wrap_into_docblock(w, |w| {\n         w.write_str(\"<pre class=\\\"rust union\\\">\");\n-        render_attributes(w, it, true);\n+        render_attributes_in_pre(w, it, \"\");\n         render_union(w, it, Some(&s.generics), &s.fields, \"\", true, cx);\n         w.write_str(\"</pre>\")\n     });\n@@ -803,7 +845,7 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum) {\n     wrap_into_docblock(w, |w| {\n         w.write_str(\"<pre class=\\\"rust enum\\\">\");\n-        render_attributes(w, it, true);\n+        render_attributes_in_pre(w, it, \"\");\n         write!(\n             w,\n             \"{}enum {}{}{}\",\n@@ -816,6 +858,10 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n             w.write_str(\" {}\");\n         } else {\n             w.write_str(\" {\\n\");\n+            let toggle = should_hide_fields(e.variants.len());\n+            if toggle {\n+                toggle_open(w, \"variants\");\n+            }\n             for v in &e.variants {\n                 w.write_str(\"    \");\n                 let name = v.name.as_ref().unwrap();\n@@ -844,6 +890,9 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n             if e.variants_stripped {\n                 w.write_str(\"    // some variants omitted\\n\");\n             }\n+            if toggle {\n+                toggle_close(w);\n+            }\n             w.write_str(\"}\");\n         }\n         w.write_str(\"</pre>\")\n@@ -976,7 +1025,7 @@ fn item_primitive(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n \n fn item_constant(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, c: &clean::Constant) {\n     w.write_str(\"<pre class=\\\"rust const\\\">\");\n-    render_attributes(w, it, false);\n+    render_attributes_in_code(w, it);\n \n     write!(\n         w,\n@@ -1015,7 +1064,7 @@ fn item_constant(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, c: &clean::\n fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Struct) {\n     wrap_into_docblock(w, |w| {\n         w.write_str(\"<pre class=\\\"rust struct\\\">\");\n-        render_attributes(w, it, true);\n+        render_attributes_in_code(w, it);\n         render_struct(w, it, Some(&s.generics), s.struct_type, &s.fields, \"\", true, cx);\n         w.write_str(\"</pre>\")\n     });\n@@ -1064,7 +1113,7 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n \n fn item_static(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Static) {\n     w.write_str(\"<pre class=\\\"rust static\\\">\");\n-    render_attributes(w, it, false);\n+    render_attributes_in_code(w, it);\n     write!(\n         w,\n         \"{vis}static {mutability}{name}: {typ}</pre>\",\n@@ -1078,7 +1127,7 @@ fn item_static(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n \n fn item_foreign_type(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n     w.write_str(\"<pre class=\\\"rust foreigntype\\\">extern {\\n\");\n-    render_attributes(w, it, false);\n+    render_attributes_in_code(w, it);\n     write!(\n         w,\n         \"    {}type {};\\n}}</pre>\",\n@@ -1171,7 +1220,7 @@ fn wrap_into_docblock<F>(w: &mut Buffer, f: F)\n where\n     F: FnOnce(&mut Buffer),\n {\n-    w.write_str(\"<div class=\\\"docblock type-decl hidden-by-usual-hider\\\">\");\n+    w.write_str(\"<div class=\\\"docblock type-decl\\\">\");\n     f(w);\n     w.write_str(\"</div>\")\n }\n@@ -1261,6 +1310,13 @@ fn render_union(\n     }\n \n     write!(w, \" {{\\n{}\", tab);\n+    let count_fields =\n+        fields.iter().filter(|f| matches!(*f.kind, clean::StructFieldItem(..))).count();\n+    let toggle = should_hide_fields(count_fields);\n+    if toggle {\n+        toggle_open(w, \"fields\");\n+    }\n+\n     for field in fields {\n         if let clean::StructFieldItem(ref ty) = *field.kind {\n             write!(\n@@ -1277,6 +1333,9 @@ fn render_union(\n     if it.has_stripped_fields().unwrap() {\n         write!(w, \"    // some fields omitted\\n{}\", tab);\n     }\n+    if toggle {\n+        toggle_close(w);\n+    }\n     w.write_str(\"}\");\n }\n \n@@ -1305,8 +1364,14 @@ fn render_struct(\n             if let Some(g) = g {\n                 write!(w, \"{}\", print_where_clause(g, cx.cache(), cx.tcx(), 0, true),)\n             }\n-            let mut has_visible_fields = false;\n             w.write_str(\" {\");\n+            let count_fields =\n+                fields.iter().filter(|f| matches!(*f.kind, clean::StructFieldItem(..))).count();\n+            let has_visible_fields = count_fields > 0;\n+            let toggle = should_hide_fields(count_fields);\n+            if toggle {\n+                toggle_open(w, \"fields\");\n+            }\n             for field in fields {\n                 if let clean::StructFieldItem(ref ty) = *field.kind {\n                     write!(\n@@ -1317,7 +1382,6 @@ fn render_struct(\n                         field.name.as_ref().unwrap(),\n                         ty.print(cx.cache(), cx.tcx()),\n                     );\n-                    has_visible_fields = true;\n                 }\n             }\n \n@@ -1331,6 +1395,9 @@ fn render_struct(\n                 // `{ /* fields omitted */ }` to save space.\n                 write!(w, \" /* fields omitted */ \");\n             }\n+            if toggle {\n+                toggle_close(w);\n+            }\n             w.write_str(\"}\");\n         }\n         CtorKind::Fn => {"}, {"sha": "d71cc15a4576f0cdb56f7496c1343a3ce3efe1f8", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 19, "deletions": 53, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -2316,6 +2316,9 @@ function hideThemeButtonState() {\n         if (hasClass(innerToggle, \"will-expand\")) {\n             updateLocalStorage(\"rustdoc-collapse\", \"false\");\n             removeClass(innerToggle, \"will-expand\");\n+            onEachLazy(document.getElementsByTagName(\"details\"), function(e) {\n+                e.open = true;\n+            });\n             onEveryMatchingChild(innerToggle, \"inner\", function(e) {\n                 e.innerHTML = labelForToggleButton(false);\n             });\n@@ -2328,6 +2331,9 @@ function hideThemeButtonState() {\n         } else {\n             updateLocalStorage(\"rustdoc-collapse\", \"true\");\n             addClass(innerToggle, \"will-expand\");\n+            onEachLazy(document.getElementsByTagName(\"details\"), function(e) {\n+                e.open = false;\n+            });\n             onEveryMatchingChild(innerToggle, \"inner\", function(e) {\n                 var parent = e.parentNode;\n                 var superParent = null;\n@@ -2569,6 +2575,7 @@ function hideThemeButtonState() {\n         var toggle = createSimpleToggle(false);\n         var hideMethodDocs = getSettingValue(\"auto-hide-method-docs\") === \"true\";\n         var hideImplementors = getSettingValue(\"auto-collapse-implementors\") !== \"false\";\n+        var hideLargeItemContents = getSettingValue(\"auto-hide-large-items\") !== \"false\";\n \n         var func = function(e) {\n             var next = e.nextElementSibling;\n@@ -2615,6 +2622,14 @@ function hideThemeButtonState() {\n         onEachLazy(document.getElementsByClassName(\"associatedconstant\"), func);\n         onEachLazy(document.getElementsByClassName(\"impl\"), funcImpl);\n         var impl_call = function() {};\n+        // Large items are hidden by default in the HTML. If the setting overrides that, show 'em.\n+        if (!hideLargeItemContents) {\n+            onEachLazy(document.getElementsByTagName(\"details\"), function (e) {\n+                if (hasClass(e, \"type-contents-toggle\")) {\n+                    e.open = true;\n+                }\n+            });\n+        }\n         if (hideMethodDocs === true) {\n             impl_call = function(e, newToggle) {\n                 if (e.id.match(/^impl(?:-\\d+)?$/) === null) {\n@@ -2683,18 +2698,7 @@ function hideThemeButtonState() {\n                 });\n             }\n         }\n-        var showItemDeclarations = getSettingValue(\"auto-hide-\" + className);\n-        if (showItemDeclarations === null) {\n-            if (className === \"enum\" || className === \"macro\") {\n-                showItemDeclarations = \"false\";\n-            } else if (className === \"struct\" || className === \"union\" || className === \"trait\") {\n-                showItemDeclarations = \"true\";\n-            } else {\n-                // In case we found an unknown type, we just use the \"parent\" value.\n-                showItemDeclarations = getSettingValue(\"auto-hide-declarations\");\n-            }\n-        }\n-        showItemDeclarations = showItemDeclarations === \"false\";\n+\n         function buildToggleWrapper(e) {\n             if (hasClass(e, \"autohide\")) {\n                 var wrap = e.previousElementSibling;\n@@ -2721,11 +2725,8 @@ function hideThemeButtonState() {\n                 var extraClass;\n \n                 if (hasClass(e, \"type-decl\")) {\n-                    fontSize = \"20px\";\n-                    otherMessage = \"&nbsp;Show&nbsp;declaration\";\n-                    if (showItemDeclarations === false) {\n-                        extraClass = \"collapsed\";\n-                    }\n+                    // We do something special for these\n+                    return;\n                 } else if (hasClass(e, \"sub-variant\")) {\n                     otherMessage = \"&nbsp;Show&nbsp;fields\";\n                 } else if (hasClass(e, \"non-exhaustive\")) {\n@@ -2750,11 +2751,8 @@ function hideThemeButtonState() {\n                         otherMessage,\n                         fontSize,\n                         extraClass,\n-                        hasClass(e, \"type-decl\") === false || showItemDeclarations === true),\n+                        true),\n                     e);\n-                if (hasClass(e, \"type-decl\") === true && showItemDeclarations === true) {\n-                    collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n-                }\n                 if (hasClass(e, \"non-exhaustive\") === true) {\n                     collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n                 }\n@@ -2772,38 +2770,6 @@ function hideThemeButtonState() {\n         }\n     }());\n \n-    function createToggleWrapper(tog) {\n-        var span = document.createElement(\"span\");\n-        span.className = \"toggle-label\";\n-        span.style.display = \"none\";\n-        span.innerHTML = \"&nbsp;Expand&nbsp;attributes\";\n-        tog.appendChild(span);\n-\n-        var wrapper = document.createElement(\"div\");\n-        wrapper.className = \"toggle-wrapper toggle-attributes\";\n-        wrapper.appendChild(tog);\n-        return wrapper;\n-    }\n-\n-    (function() {\n-        // To avoid checking on \"rustdoc-item-attributes\" value on every loop...\n-        var itemAttributesFunc = function() {};\n-        if (getSettingValue(\"auto-hide-attributes\") !== \"false\") {\n-            itemAttributesFunc = function(x) {\n-                collapseDocs(x.previousSibling.childNodes[0], \"toggle\");\n-            };\n-        }\n-        var attributesToggle = createToggleWrapper(createSimpleToggle(false));\n-        onEachLazy(main.getElementsByClassName(\"attributes\"), function(i_e) {\n-            var attr_tog = attributesToggle.cloneNode(true);\n-            if (hasClass(i_e, \"top-attr\") === true) {\n-                addClass(attr_tog, \"top-attr\");\n-            }\n-            i_e.parentNode.insertBefore(attr_tog, i_e);\n-            itemAttributesFunc(i_e);\n-        });\n-    }());\n-\n     (function() {\n         // To avoid checking on \"rustdoc-line-numbers\" value on every loop...\n         var lineNumbersFunc = function() {};"}, {"sha": "427564cd7794ae070d6f6039fc03f51cc3420534", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 47, "deletions": 35, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -1056,12 +1056,6 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \tmargin-top: 3px;\n }\n \n-.enum > .toggle-wrapper + .docblock, .struct > .toggle-wrapper + .docblock {\n-\tmargin-left: 30px;\n-\tmargin-bottom: 20px;\n-\tmargin-top: 5px;\n-}\n-\n .docblock > .section-header:first-child {\n \tmargin-left: 15px;\n \tmargin-top: 0;\n@@ -1071,30 +1065,10 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \tleft: -10px;\n }\n \n-.enum > .collapsed, .struct > .collapsed {\n-\tmargin-bottom: 25px;\n-}\n-\n #main > .variant, #main > .structfield {\n \tdisplay: block;\n }\n \n-.attributes {\n-\tdisplay: block;\n-\tmargin-top: 0px !important;\n-\tmargin-right: 0px;\n-\tmargin-bottom: 0px !important;\n-\tmargin-left: 30px;\n-}\n-.toggle-attributes.collapsed {\n-\tmargin-bottom: 0;\n-}\n-.impl-items > .toggle-attributes {\n-\tmargin-left: 20px;\n-}\n-.impl-items .attributes {\n-\tfont-weight: 500;\n-}\n \n :target > code {\n \topacity: 1;\n@@ -1781,16 +1755,54 @@ div.name.expand::before {\n \ttop: 2px;\n }\n \n-/* This part is to fix the \"Expand attributes\" part in the type declaration. */\n-.type-decl > pre > .toggle-wrapper.toggle-attributes.top-attr {\n-\tmargin-left: 0 !important;\n+/* The hideme class is used on summary tags that contain a span with\n+\tplaceholder text shown only when the toggle is closed. For instance,\n+\t\"Expand description\" or \"Show methods\". */\n+details.rustdoc-toggle > summary.hideme {\n+\tcursor: pointer;\n+}\n+\n+details.rustdoc-toggle > summary::-webkit-details-marker {\n+\tdisplay: none;\n+}\n+\n+details.rustdoc-toggle > summary.hideme > span {\n+\tmargin-left: 9px;\n }\n-.type-decl > pre > .docblock.attributes.top-attr {\n-\tmargin-left: 1.8em !important;\n+\n+details.rustdoc-toggle > summary::before {\n+\tcontent: \"[+]\";\n+\tfont-weight: 300;\n+\tfont-size: 0.8em;\n+\tletter-spacing: 1px;\n+}\n+\n+details.rustdoc-toggle > summary.hideme::before {\n+\tposition: relative;\n }\n-.type-decl > pre > .toggle-attributes {\n-\tmargin-left: 2.2em;\n+\n+details.rustdoc-toggle > summary:not(.hideme)::before {\n+\tfloat: left;\n }\n-.type-decl > pre > .docblock.attributes {\n-\tmargin-left: 4em;\n+\n+/* When a \"hideme\" summary is open and the \"Expand description\" or \"Show\n+\tmethods\" text is hidden, we want the [-] toggle that remains to not\n+\taffect the layout of the items to its right. To do that, we use\n+\tabsolute positioning. Note that we also set position: relative\n+\ton the parent <details> to make this work properly. */\n+details.rustdoc-toggle[open] > summary.hideme {\n+\tposition: absolute;\n+}\n+\n+details.rustdoc-toggle[open] {\n+\tposition: relative;\n+}\n+\n+details.rustdoc-toggle[open] > summary.hideme > span {\n+\tdisplay: none;\n+}\n+\n+details.rustdoc-toggle[open] > summary::before {\n+\tcontent: \"[\u2212]\";\n+\tdisplay: inline;\n }"}, {"sha": "2ed87fdedaec686616e46c3b6435bd5d3b63384d", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -1,6 +1,5 @@\n // From rust:\n /* global resourcesSuffix */\n-\n var darkThemes = [\"dark\", \"ayu\"];\n window.currentTheme = document.getElementById(\"themeStyle\");\n window.mainTheme = document.getElementById(\"mainThemeStyle\");"}, {"sha": "5f6f3d66e57573de9d4900effef55ce76eae80cd", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -224,7 +224,9 @@ a {\n \tcolor: #39AFD7;\n }\n \n-.collapse-toggle {\n+.collapse-toggle,\n+details.rustdoc-toggle > summary.hideme > span,\n+details.rustdoc-toggle > summary::before {\n \tcolor: #999;\n }\n "}, {"sha": "2ce6cf4cc45ca5aabe5a91a16a0f2c2e466955d7", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -186,7 +186,9 @@ a.test-arrow {\n \tcolor: #dedede;\n }\n \n-.collapse-toggle {\n+.collapse-toggle,\n+details.rustdoc-toggle > summary.hideme > span,\n+details.rustdoc-toggle > summary::before {\n \tcolor: #999;\n }\n "}, {"sha": "31b3562cfcb064aa61b0afa5bd185b0abbe639e6", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -184,7 +184,9 @@ a.test-arrow {\n \tcolor: #f5f5f5;\n }\n \n-.collapse-toggle {\n+.collapse-toggle,\n+details.rustdoc-toggle > summary.hideme > span,\n+details.rustdoc-toggle > summary::before {\n \tcolor: #999;\n }\n "}, {"sha": "51cd4a6cbfd12d6a7f9b7c21e19e3e394ab1145e", "filename": "src/test/rustdoc/attributes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Frustdoc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Frustdoc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fattributes.rs?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -1,21 +1,21 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/fn.f.html '//*[@class=\"docblock attributes\"]' '#[no_mangle]'\n+// @has foo/fn.f.html '//*[@class=\"rust fn\"]' '#[no_mangle]'\n #[no_mangle]\n pub extern \"C\" fn f() {}\n \n-// @has foo/fn.g.html '//*[@class=\"docblock attributes\"]' '#[export_name = \"bar\"]'\n+// @has foo/fn.g.html '//*[@class=\"rust fn\"]' '#[export_name = \"bar\"]'\n #[export_name = \"bar\"]\n pub extern \"C\" fn g() {}\n \n-// @matches foo/enum.Foo.html '//*[@class=\"docblock attributes top-attr\"]' \\\n-//      '(?m)\\A#\\[repr\\(i64\\)\\]\\n#\\[must_use\\]\\Z'\n+// @matches foo/enum.Foo.html '//*[@class=\"rust enum\"]' \\\n+//      '#\\[repr\\(i64\\)\\]\\n#\\[must_use\\]'\n #[repr(i64)]\n #[must_use]\n pub enum Foo {\n     Bar,\n }\n \n-// @has foo/struct.Repr.html '//*[@class=\"docblock attributes top-attr\"]' '#[repr(C, align(8))]'\n+// @has foo/struct.Repr.html '//*[@class=\"docblock type-decl\"]' '#[repr(C, align(8))]'\n #[repr(C, align(8))]\n pub struct Repr;"}, {"sha": "616eef95662ef365c82afadef2857fa75dd00132", "filename": "src/test/rustdoc/item-hide-threshold.rs", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Frustdoc%2Fitem-hide-threshold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Frustdoc%2Fitem-hide-threshold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fitem-hide-threshold.rs?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -0,0 +1,155 @@\n+#![allow(unused)]\n+\n+// @has 'item_hide_threshold/struct.PubStruct.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 0\n+pub struct PubStruct {\n+    pub a: usize,\n+    pub b: usize,\n+}\n+\n+// @has 'item_hide_threshold/struct.BigPubStruct.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show fields'\n+pub struct BigPubStruct {\n+    pub a: usize,\n+    pub b: usize,\n+    pub c: usize,\n+    pub d: usize,\n+    pub e: usize,\n+    pub f: usize,\n+    pub g: usize,\n+    pub h: usize,\n+    pub i: usize,\n+    pub j: usize,\n+    pub k: usize,\n+    pub l: usize,\n+    pub m: usize,\n+}\n+\n+// @has 'item_hide_threshold/union.BigUnion.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show fields'\n+pub union BigUnion {\n+    pub a: usize,\n+    pub b: usize,\n+    pub c: usize,\n+    pub d: usize,\n+    pub e: usize,\n+    pub f: usize,\n+    pub g: usize,\n+    pub h: usize,\n+    pub i: usize,\n+    pub j: usize,\n+    pub k: usize,\n+    pub l: usize,\n+    pub m: usize,\n+}\n+\n+// @has 'item_hide_threshold/union.Union.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 0\n+pub union Union {\n+    pub a: usize,\n+    pub b: usize,\n+    pub c: usize,\n+}\n+\n+// @has 'item_hide_threshold/struct.PrivStruct.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 0\n+// @has - '//div[@class=\"docblock type-decl\"]' 'fields omitted'\n+pub struct PrivStruct {\n+    a: usize,\n+    b: usize,\n+}\n+\n+// @has 'item_hide_threshold/enum.Enum.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 0\n+pub enum Enum {\n+    A, B, C,\n+    D {\n+        a: u8,\n+        b: u8\n+    }\n+}\n+\n+// @has 'item_hide_threshold/enum.LargeEnum.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show variants'\n+pub enum LargeEnum {\n+    A, B, C, D, E, F(u8), G, H, I, J, K, L, M\n+}\n+\n+// @has 'item_hide_threshold/trait.Trait.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 0\n+pub trait Trait {\n+    type A;\n+    #[must_use]\n+    fn foo();\n+    fn bar();\n+}\n+\n+// @has 'item_hide_threshold/trait.GinormousTrait.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show associated items'\n+pub trait GinormousTrait {\n+    type A;\n+    type B;\n+    type C;\n+    type D;\n+    type E;\n+    type F;\n+    type G;\n+    type H;\n+    type I;\n+    type J;\n+    type K;\n+    type L;\n+    type M;\n+    const N: usize = 1;\n+    #[must_use]\n+    fn foo();\n+    fn bar();\n+}\n+\n+// @has 'item_hide_threshold/trait.HugeTrait.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show associated constants and methods'\n+pub trait HugeTrait {\n+    type A;\n+    const M: usize = 1;\n+    const N: usize = 1;\n+    const O: usize = 1;\n+    const P: usize = 1;\n+    const Q: usize = 1;\n+    const R: usize = 1;\n+    const S: usize = 1;\n+    const T: usize = 1;\n+    const U: usize = 1;\n+    const V: usize = 1;\n+    const W: usize = 1;\n+    const X: usize = 1;\n+    #[must_use]\n+    fn foo();\n+    fn bar();\n+}\n+\n+// @has 'item_hide_threshold/trait.BigTrait.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show methods'\n+pub trait BigTrait {\n+    type A;\n+    #[must_use]\n+    fn foo();\n+    fn bar();\n+    fn baz();\n+    fn quux();\n+    fn frob();\n+    fn greeble();\n+    fn blap();\n+    fn whoop();\n+    fn pow();\n+    fn bang();\n+    fn oomph();\n+    fn argh();\n+    fn wap();\n+    fn ouch();\n+}"}, {"sha": "2bb24a82193feef3f87a96678743c3e6f701f49f", "filename": "src/test/rustdoc/trait-attributes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Frustdoc%2Ftrait-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Frustdoc%2Ftrait-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-attributes.rs?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -2,7 +2,7 @@\n \n \n pub trait Foo {\n-    // @has foo/trait.Foo.html '//h3[@id=\"tymethod.foo\"]//span[@class=\"docblock attributes\"]' '#[must_use]'\n+    // @has foo/trait.Foo.html '//h3[@id=\"tymethod.foo\"]//div[@class=\"code-attribute\"]' '#[must_use]'\n     #[must_use]\n     fn foo();\n }\n@@ -11,11 +11,11 @@ pub trait Foo {\n pub struct Bar;\n \n impl Bar {\n-    // @has foo/struct.Bar.html '//h4[@id=\"method.bar\"]//span[@class=\"docblock attributes\"]' '#[must_use]'\n+    // @has foo/struct.Bar.html '//h4[@id=\"method.bar\"]//div[@class=\"code-attribute\"]' '#[must_use]'\n     #[must_use]\n     pub fn bar() {}\n \n-    // @has foo/struct.Bar.html '//h4[@id=\"method.bar2\"]//span[@class=\"docblock attributes\"]' '#[must_use]'\n+    // @has foo/struct.Bar.html '//h4[@id=\"method.bar2\"]//div[@class=\"code-attribute\"]' '#[must_use]'\n     #[must_use]\n     pub fn bar2() {}\n }"}, {"sha": "b50f6ab5deb1569624f34c9bfddcb90e72be94be", "filename": "src/test/ui/assign-imm-local-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fassign-imm-local-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fassign-imm-local-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-imm-local-twice.rs?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -1,6 +1,6 @@\n fn test() {\n     let v: isize;\n-    //~^ HELP make this binding mutable\n+    //~^ HELP consider making this binding mutable\n     //~| SUGGESTION mut v\n     v = 1; //~ NOTE first assignment\n     println!(\"v={}\", v);"}, {"sha": "bba5d8dffe4bd8a2a26ec38245fb7f95ad33acc8", "filename": "src/test/ui/assign-imm-local-twice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fassign-imm-local-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fassign-imm-local-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-imm-local-twice.stderr?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -2,7 +2,7 @@ error[E0384]: cannot assign twice to immutable variable `v`\n   --> $DIR/assign-imm-local-twice.rs:7:5\n    |\n LL |     let v: isize;\n-   |         - help: make this binding mutable: `mut v`\n+   |         - help: consider making this binding mutable: `mut v`\n ...\n LL |     v = 1;\n    |     ----- first assignment to `v`"}, {"sha": "f2dec87baf08b446f558e43945e66c5de6055514", "filename": "src/test/ui/async-await/issue-61452.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.stderr?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -13,7 +13,7 @@ LL | pub async fn g(x: usize) {\n    |                -\n    |                |\n    |                first assignment to `x`\n-   |                help: make this binding mutable: `mut x`\n+   |                help: consider making this binding mutable: `mut x`\n LL |     x += 1;\n    |     ^^^^^^ cannot assign twice to immutable variable\n "}, {"sha": "74cf5a55b70ab214e31672310555b0274cea22da", "filename": "src/test/ui/borrowck/borrowck-asm.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -29,7 +29,7 @@ LL |         let x = 3;\n    |             -\n    |             |\n    |             first assignment to `x`\n-   |             help: make this binding mutable: `mut x`\n+   |             help: consider making this binding mutable: `mut x`\n LL |         unsafe {\n LL |             llvm_asm!(\"nop\" : \"=r\"(x));\n    |                                    ^ cannot assign twice to immutable variable\n@@ -41,7 +41,7 @@ LL |         let x = 3;\n    |             -\n    |             |\n    |             first assignment to `x`\n-   |             help: make this binding mutable: `mut x`\n+   |             help: consider making this binding mutable: `mut x`\n LL |         unsafe {\n LL |             llvm_asm!(\"nop\" : \"+r\"(x));\n    |                                    ^ cannot assign twice to immutable variable"}, {"sha": "dd22d7e2e2ed2986cfa1d023a750d91abae1936d", "filename": "src/test/ui/borrowck/borrowck-match-binding-is-assignment.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.stderr?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -5,7 +5,7 @@ LL |         x => {\n    |         -\n    |         |\n    |         first assignment to `x`\n-   |         help: make this binding mutable: `mut x`\n+   |         help: consider making this binding mutable: `mut x`\n LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n@@ -16,7 +16,7 @@ LL |         E::Foo(x) => {\n    |                -\n    |                |\n    |                first assignment to `x`\n-   |                help: make this binding mutable: `mut x`\n+   |                help: consider making this binding mutable: `mut x`\n LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n@@ -27,7 +27,7 @@ LL |         S { bar: x } => {\n    |                  -\n    |                  |\n    |                  first assignment to `x`\n-   |                  help: make this binding mutable: `mut x`\n+   |                  help: consider making this binding mutable: `mut x`\n LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n@@ -38,7 +38,7 @@ LL |         (x,) => {\n    |          -\n    |          |\n    |          first assignment to `x`\n-   |          help: make this binding mutable: `mut x`\n+   |          help: consider making this binding mutable: `mut x`\n LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n@@ -49,7 +49,7 @@ LL |         [x,_,_] => {\n    |          -\n    |          |\n    |          first assignment to `x`\n-   |          help: make this binding mutable: `mut x`\n+   |          help: consider making this binding mutable: `mut x`\n LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n "}, {"sha": "bddb0633a0b86ea716b8e244b9d11b0fc46b86f4", "filename": "src/test/ui/borrowck/immutable-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.stderr?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -2,7 +2,7 @@ error[E0384]: cannot assign to immutable argument `_x`\n   --> $DIR/immutable-arg.rs:2:5\n    |\n LL | fn foo(_x: u32) {\n-   |        -- help: make this binding mutable: `mut _x`\n+   |        -- help: consider making this binding mutable: `mut _x`\n LL |     _x = 4;\n    |     ^^^^^^ cannot assign to immutable argument\n "}, {"sha": "ded46e56e34514c8d9010dff9e0c203370091ab1", "filename": "src/test/ui/borrowck/issue-45199.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fborrowck%2Fissue-45199.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fborrowck%2Fissue-45199.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45199.rs?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -1,6 +1,6 @@\n fn test_drop_replace() {\n     let b: Box<isize>;\n-    //~^ HELP make this binding mutable\n+    //~^ HELP consider making this binding mutable\n     //~| SUGGESTION mut b\n     b = Box::new(1);    //~ NOTE first assignment\n     b = Box::new(2);    //~ ERROR cannot assign twice to immutable variable `b`\n@@ -9,13 +9,13 @@ fn test_drop_replace() {\n \n fn test_call() {\n     let b = Box::new(1);    //~ NOTE first assignment\n-                            //~| HELP make this binding mutable\n+                            //~| HELP consider making this binding mutable\n                             //~| SUGGESTION mut b\n     b = Box::new(2);        //~ ERROR cannot assign twice to immutable variable `b`\n                             //~| NOTE cannot assign twice to immutable\n }\n \n-fn test_args(b: Box<i32>) {  //~ HELP make this binding mutable\n+fn test_args(b: Box<i32>) {  //~ HELP consider making this binding mutable\n                                 //~| SUGGESTION mut b\n     b = Box::new(2);            //~ ERROR cannot assign to immutable argument `b`\n                                 //~| NOTE cannot assign to immutable argument"}, {"sha": "47aa30908270d91b7ac9107dcf7318ea259b5e6a", "filename": "src/test/ui/borrowck/issue-45199.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fborrowck%2Fissue-45199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fborrowck%2Fissue-45199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45199.stderr?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -2,7 +2,7 @@ error[E0384]: cannot assign twice to immutable variable `b`\n   --> $DIR/issue-45199.rs:6:5\n    |\n LL |     let b: Box<isize>;\n-   |         - help: make this binding mutable: `mut b`\n+   |         - help: consider making this binding mutable: `mut b`\n ...\n LL |     b = Box::new(1);\n    |     - first assignment to `b`\n@@ -16,7 +16,7 @@ LL |     let b = Box::new(1);\n    |         -\n    |         |\n    |         first assignment to `b`\n-   |         help: make this binding mutable: `mut b`\n+   |         help: consider making this binding mutable: `mut b`\n ...\n LL |     b = Box::new(2);\n    |     ^ cannot assign twice to immutable variable\n@@ -25,7 +25,7 @@ error[E0384]: cannot assign to immutable argument `b`\n   --> $DIR/issue-45199.rs:20:5\n    |\n LL | fn test_args(b: Box<i32>) {\n-   |              - help: make this binding mutable: `mut b`\n+   |              - help: consider making this binding mutable: `mut b`\n LL |\n LL |     b = Box::new(2);\n    |     ^ cannot assign to immutable argument"}, {"sha": "6223ad880d695661d50d4338b2dccb7751a47960", "filename": "src/test/ui/command-line-diagnostics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fcommand-line-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fcommand-line-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand-line-diagnostics.stderr?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -5,7 +5,7 @@ LL |     let x = 42;\n    |         -\n    |         |\n    |         first assignment to `x`\n-   |         help: make this binding mutable: `mut x`\n+   |         help: consider making this binding mutable: `mut x`\n LL |     x = 43;\n    |     ^^^^^^ cannot assign twice to immutable variable\n "}, {"sha": "7f0ea730dd37bc53bb1307cb9cc34b5bf5289860", "filename": "src/test/ui/lifetimes/issue-83753-invalid-associated-type-supertrait-hrtb.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Flifetimes%2Fissue-83753-invalid-associated-type-supertrait-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Flifetimes%2Fissue-83753-invalid-associated-type-supertrait-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-83753-invalid-associated-type-supertrait-hrtb.rs?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -0,0 +1,8 @@\n+// check-fail\n+\n+struct Foo {}\n+impl Foo {\n+    fn bar(foo: Foo<Target = usize>) {}\n+    //~^ associated type bindings are not allowed here\n+}\n+fn main() {}"}, {"sha": "f7bdee6336e2d3eb527ac66de3adf46d7b7329a8", "filename": "src/test/ui/lifetimes/issue-83753-invalid-associated-type-supertrait-hrtb.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Flifetimes%2Fissue-83753-invalid-associated-type-supertrait-hrtb.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Flifetimes%2Fissue-83753-invalid-associated-type-supertrait-hrtb.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-83753-invalid-associated-type-supertrait-hrtb.stderr?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -0,0 +1,9 @@\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/issue-83753-invalid-associated-type-supertrait-hrtb.rs:5:21\n+   |\n+LL |     fn bar(foo: Foo<Target = usize>) {}\n+   |                     ^^^^^^^^^^^^^^ associated type not allowed here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0229`."}, {"sha": "604687ce71126ed6fd748004f0e46672f3915b94", "filename": "src/test/ui/lifetimes/issue-83907-invalid-fn-like-path.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Flifetimes%2Fissue-83907-invalid-fn-like-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Flifetimes%2Fissue-83907-invalid-fn-like-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-83907-invalid-fn-like-path.rs?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -0,0 +1,7 @@\n+// check-fail\n+\n+static STATIC_VAR_FIVE: &One();\n+//~^ cannot find type\n+//~| free static item without body\n+\n+fn main() {}"}, {"sha": "e57933da558fd9e8dd287d7e2249811e7aa50668", "filename": "src/test/ui/lifetimes/issue-83907-invalid-fn-like-path.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Flifetimes%2Fissue-83907-invalid-fn-like-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Flifetimes%2Fissue-83907-invalid-fn-like-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-83907-invalid-fn-like-path.stderr?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -0,0 +1,17 @@\n+error: free static item without body\n+  --> $DIR/issue-83907-invalid-fn-like-path.rs:3:1\n+   |\n+LL | static STATIC_VAR_FIVE: &One();\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                               |\n+   |                               help: provide a definition for the static: `= <expr>;`\n+\n+error[E0412]: cannot find type `One` in this scope\n+  --> $DIR/issue-83907-invalid-fn-like-path.rs:3:26\n+   |\n+LL | static STATIC_VAR_FIVE: &One();\n+   |                          ^^^ not found in this scope\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "bbd62902d9f44c01a4d945863cfeff0532352000", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -12,7 +12,7 @@ error[E0384]: cannot assign to immutable argument `y`\n   --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:4:5\n    |\n LL | fn foo(mut x: Ref, y: &u32) {\n-   |                    - help: make this binding mutable: `mut y`\n+   |                    - help: consider making this binding mutable: `mut y`\n LL |     y = x.b;\n    |     ^^^^^^^ cannot assign to immutable argument\n "}, {"sha": "b47a47d631e5f35a7d7edee6c3a513c9a7d72c29", "filename": "src/test/ui/lifetimes/lifetime-errors/liveness-assign-imm-local-notes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.stderr?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -2,7 +2,7 @@ error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/liveness-assign-imm-local-notes.rs:10:9\n    |\n LL |     let x;\n-   |         - help: make this binding mutable: `mut x`\n+   |         - help: consider making this binding mutable: `mut x`\n ...\n LL |         x = 2;\n    |         ----- first assignment to `x`\n@@ -13,7 +13,7 @@ error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/liveness-assign-imm-local-notes.rs:21:13\n    |\n LL |         let x;\n-   |             - help: make this binding mutable: `mut x`\n+   |             - help: consider making this binding mutable: `mut x`\n ...\n LL |             x = 2;\n    |             ----- first assignment to `x`\n@@ -24,7 +24,7 @@ error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/liveness-assign-imm-local-notes.rs:30:13\n    |\n LL |     let x;\n-   |         - help: make this binding mutable: `mut x`\n+   |         - help: consider making this binding mutable: `mut x`\n ...\n LL |             x = 1;\n    |             ^^^^^ cannot assign twice to immutable variable\n@@ -33,7 +33,7 @@ error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/liveness-assign-imm-local-notes.rs:32:13\n    |\n LL |     let x;\n-   |         - help: make this binding mutable: `mut x`\n+   |         - help: consider making this binding mutable: `mut x`\n ...\n LL |             x = 1;\n    |             ----- first assignment to `x`"}, {"sha": "08911c5bde781f2601e946698c16433b14de9569", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.rs?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -1,6 +1,6 @@\n fn test() {\n     let v: isize;\n-    //~^ HELP make this binding mutable\n+    //~^ HELP consider making this binding mutable\n     //~| SUGGESTION mut v\n     loop {\n         v = 1; //~ ERROR cannot assign twice to immutable variable `v`"}, {"sha": "66cdce7dacf834a4797c4f9290b2c09f5db18bcc", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.stderr?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -2,7 +2,7 @@ error[E0384]: cannot assign twice to immutable variable `v`\n   --> $DIR/liveness-assign-imm-local-in-loop.rs:6:9\n    |\n LL |     let v: isize;\n-   |         - help: make this binding mutable: `mut v`\n+   |         - help: consider making this binding mutable: `mut v`\n ...\n LL |         v = 1;\n    |         ^^^^^ cannot assign twice to immutable variable"}, {"sha": "1752d969086e897e6c0a41cf0c2f24ac84cc4558", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-op-eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.rs?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -1,6 +1,6 @@\n fn test() {\n     let v: isize;\n-    //~^ HELP make this binding mutable\n+    //~^ HELP consider making this binding mutable\n     //~| SUGGESTION mut v\n     v = 2;  //~ NOTE first assignment\n     v += 1; //~ ERROR cannot assign twice to immutable variable `v`"}, {"sha": "5db9539cbf1e5d932de8efce614fa4fb38664c3f", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-op-eq.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.stderr?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -2,7 +2,7 @@ error[E0384]: cannot assign twice to immutable variable `v`\n   --> $DIR/liveness-assign-imm-local-in-op-eq.rs:6:5\n    |\n LL |     let v: isize;\n-   |         - help: make this binding mutable: `mut v`\n+   |         - help: consider making this binding mutable: `mut v`\n ...\n LL |     v = 2;\n    |     ----- first assignment to `v`"}, {"sha": "c9b16e43910e8e9f6215acc0ed4ed4b3ecca2c64", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.rs?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -1,6 +1,6 @@\n fn test() {\n     let b = Box::new(1); //~ NOTE first assignment\n-                         //~| HELP make this binding mutable\n+                         //~| HELP consider making this binding mutable\n                          //~| SUGGESTION mut b\n     drop(b);\n     b = Box::new(2); //~ ERROR cannot assign twice to immutable variable `b`"}, {"sha": "bb7e7e27a4ca004cae25829263f487619805562d", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.stderr?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -5,7 +5,7 @@ LL |     let b = Box::new(1);\n    |         -\n    |         |\n    |         first assignment to `b`\n-   |         help: make this binding mutable: `mut b`\n+   |         help: consider making this binding mutable: `mut b`\n ...\n LL |     b = Box::new(2);\n    |     ^ cannot assign twice to immutable variable"}, {"sha": "4bb2db27a165254332a01d35049c52a060bb7aba", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.rs?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -1,6 +1,6 @@\n fn test() {\n     let v: isize = 1; //~ NOTE first assignment\n-                      //~| HELP make this binding mutable\n+                      //~| HELP consider making this binding mutable\n                       //~| SUGGESTION mut v\n     v.clone();\n     v = 2; //~ ERROR cannot assign twice to immutable variable `v`"}, {"sha": "80458a70a0107b0bba94e7eb1ff17c72411dc9db", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-init.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.stderr?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -5,7 +5,7 @@ LL |     let v: isize = 1;\n    |         -\n    |         |\n    |         first assignment to `v`\n-   |         help: make this binding mutable: `mut v`\n+   |         help: consider making this binding mutable: `mut v`\n ...\n LL |     v = 2;\n    |     ^^^^^ cannot assign twice to immutable variable"}, {"sha": "3e5893f68b6c19219896a67a2a09eaa37d50a5ea", "filename": "src/test/ui/llvm-asm/llvm-asm-out-assign-imm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.stderr?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -2,7 +2,7 @@ error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/llvm-asm-out-assign-imm.rs:25:39\n    |\n LL |     let x: isize;\n-   |         - help: make this binding mutable: `mut x`\n+   |         - help: consider making this binding mutable: `mut x`\n LL |     x = 1;\n    |     ----- first assignment to `x`\n ..."}, {"sha": "6583546aa5c1fe70bbecdb12f294372a20dcdd7c", "filename": "src/test/ui/mut/mut-pattern-internal-mutability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-internal-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-internal-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-internal-mutability.stderr?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -5,7 +5,7 @@ LL |     let &mut x = foo;\n    |              -\n    |              |\n    |              first assignment to `x`\n-   |              help: make this binding mutable: `mut x`\n+   |              help: consider making this binding mutable: `mut x`\n LL |     x += 1;\n    |     ^^^^^^ cannot assign twice to immutable variable\n "}, {"sha": "d0726f05cc3be01d2a48f2a667d86d52afdeacc5", "filename": "src/test/ui/pattern/move-ref-patterns/borrowck-move-ref-pattern.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2faef12b656d40522ca3b4a53b36299b4364e717/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr?ref=2faef12b656d40522ca3b4a53b36299b4364e717", "patch": "@@ -16,7 +16,7 @@ LL |     let [ref _x0_hold, _x1, ref xs_hold @ ..] = arr;\n    |                        ---\n    |                        |\n    |                        first assignment to `_x1`\n-   |                        help: make this binding mutable: `mut _x1`\n+   |                        help: consider making this binding mutable: `mut _x1`\n LL |     _x1 = U;\n    |     ^^^^^^^ cannot assign twice to immutable variable\n \n@@ -74,7 +74,7 @@ LL |     let (ref _x0, _x1, ref _x2, ..) = tup;\n    |                   ---\n    |                   |\n    |                   first assignment to `_x1`\n-   |                   help: make this binding mutable: `mut _x1`\n+   |                   help: consider making this binding mutable: `mut _x1`\n LL |     _x1 = U;\n    |     ^^^^^^^ cannot assign twice to immutable variable\n "}]}