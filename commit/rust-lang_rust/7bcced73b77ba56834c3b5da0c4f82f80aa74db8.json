{"sha": "7bcced73b77ba56834c3b5da0c4f82f80aa74db8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiY2NlZDczYjc3YmE1NjgzNGMzYjVkYTBjNGY4MmY4MGFhNzRkYjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-05T01:00:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-05T01:00:31Z"}, "message": "Auto merge of #30865 - alexcrichton:mtime-system-time, r=aturon\n\nThese accessors are used to get at the last modification, last access, and\ncreation time of the underlying file. Currently not all platforms provide the\ncreation time, so that currently returns `Option`.", "tree": {"sha": "8c206d0720ab3138fd604ec031b04c6046f6082a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c206d0720ab3138fd604ec031b04c6046f6082a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bcced73b77ba56834c3b5da0c4f82f80aa74db8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bcced73b77ba56834c3b5da0c4f82f80aa74db8", "html_url": "https://github.com/rust-lang/rust/commit/7bcced73b77ba56834c3b5da0c4f82f80aa74db8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bcced73b77ba56834c3b5da0c4f82f80aa74db8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d8e3a024aec4985927687b19cbb1077a09022c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d8e3a024aec4985927687b19cbb1077a09022c2", "html_url": "https://github.com/rust-lang/rust/commit/9d8e3a024aec4985927687b19cbb1077a09022c2"}, {"sha": "d1681bbde563dff88ad8f32592e7d373f62a038d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1681bbde563dff88ad8f32592e7d373f62a038d", "html_url": "https://github.com/rust-lang/rust/commit/d1681bbde563dff88ad8f32592e7d373f62a038d"}], "stats": {"total": 191, "additions": 183, "deletions": 8}, "files": [{"sha": "343d71abb642992b08207feca559e68f8382724b", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/7bcced73b77ba56834c3b5da0c4f82f80aa74db8/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bcced73b77ba56834c3b5da0c4f82f80aa74db8/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=7bcced73b77ba56834c3b5da0c4f82f80aa74db8", "patch": "@@ -25,6 +25,7 @@ use sys::fs as fs_imp;\n use sys_common::io::read_to_end_uninitialized;\n use sys_common::{AsInnerMut, FromInner, AsInner, IntoInner};\n use vec::Vec;\n+use time::SystemTime;\n \n /// A reference to an open file on the filesystem.\n ///\n@@ -660,6 +661,52 @@ impl Metadata {\n     pub fn permissions(&self) -> Permissions {\n         Permissions(self.0.perm())\n     }\n+\n+    /// Returns the last modification time listed in this metadata.\n+    ///\n+    /// The returned value corresponds to the `mtime` field of `stat` on Unix\n+    /// platforms and the `ftLastWriteTime` field on Windows platforms.\n+    ///\n+    /// # Errors\n+    ///\n+    /// This field may not be available on all platforms, and will return an\n+    /// `Err` on platforms where it is not available.\n+    #[unstable(feature = \"fs_time\", issue = \"31399\")]\n+    pub fn modified(&self) -> io::Result<SystemTime> {\n+        self.0.modified().map(FromInner::from_inner)\n+    }\n+\n+    /// Returns the last access time of this metadata.\n+    ///\n+    /// The returned value corresponds to the `atime` field of `stat` on Unix\n+    /// platforms and the `ftLastAccessTime` field on Windows platforms.\n+    ///\n+    /// Note that not all platforms will keep this field update in a file's\n+    /// metadata, for example Windows has an option to disable updating this\n+    /// time when files are accessed and Linux similarly has `noatime`.\n+    ///\n+    /// # Errors\n+    ///\n+    /// This field may not be available on all platforms, and will return an\n+    /// `Err` on platforms where it is not available.\n+    #[unstable(feature = \"fs_time\", issue = \"31399\")]\n+    pub fn accessed(&self) -> io::Result<SystemTime> {\n+        self.0.accessed().map(FromInner::from_inner)\n+    }\n+\n+    /// Returns the creation time listed in the this metadata.\n+    ///\n+    /// The returned value corresponds to the `birthtime` field of `stat` on\n+    /// Unix platforms and the `ftCreationTime` field on Windows platforms.\n+    ///\n+    /// # Errors\n+    ///\n+    /// This field may not be available on all platforms, and will return an\n+    /// `Err` on platforms where it is not available.\n+    #[unstable(feature = \"fs_time\", issue = \"31399\")]\n+    pub fn created(&self) -> io::Result<SystemTime> {\n+        self.0.created().map(FromInner::from_inner)\n+    }\n }\n \n impl AsInner<fs_imp::FileAttr> for Metadata {\n@@ -2468,4 +2515,24 @@ mod tests {\n         assert!(link.is_dir());\n         assert!(d.exists());\n     }\n+\n+    #[test]\n+    fn metadata_access_times() {\n+        let tmpdir = tmpdir();\n+\n+        let b = tmpdir.join(\"b\");\n+        File::create(&b).unwrap();\n+\n+        let a = check!(fs::metadata(&tmpdir.path()));\n+        let b = check!(fs::metadata(&b));\n+\n+        assert_eq!(check!(a.accessed()), check!(a.accessed()));\n+        assert_eq!(check!(a.modified()), check!(a.modified()));\n+        assert_eq!(check!(b.accessed()), check!(b.modified()));\n+\n+        if cfg!(target_os = \"macos\") || cfg!(target_os = \"windows\") {\n+            check!(a.created());\n+            check!(b.created());\n+        }\n+    }\n }"}, {"sha": "e672d9f158666681b749c6bc520b898323ca7c2a", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/7bcced73b77ba56834c3b5da0c4f82f80aa74db8/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bcced73b77ba56834c3b5da0c4f82f80aa74db8/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=7bcced73b77ba56834c3b5da0c4f82f80aa74db8", "patch": "@@ -22,6 +22,7 @@ use ptr;\n use sync::Arc;\n use sys::fd::FileDesc;\n use sys::platform::raw;\n+use sys::time::SystemTime;\n use sys::{cvt, cvt_r};\n use sys_common::{AsInner, FromInner};\n \n@@ -86,6 +87,67 @@ impl FileAttr {\n     }\n }\n \n+#[cfg(any(target_os = \"ios\", target_os = \"macos\"))]\n+// FIXME: update SystemTime to store a timespec and don't lose precision\n+impl FileAttr {\n+    pub fn modified(&self) -> io::Result<SystemTime> {\n+        Ok(SystemTime::from(libc::timeval {\n+            tv_sec: self.stat.st_mtime,\n+            tv_usec: (self.stat.st_mtime_nsec / 1000) as libc::suseconds_t,\n+        }))\n+    }\n+\n+    pub fn accessed(&self) -> io::Result<SystemTime> {\n+        Ok(SystemTime::from(libc::timeval {\n+            tv_sec: self.stat.st_atime,\n+            tv_usec: (self.stat.st_atime_nsec / 1000) as libc::suseconds_t,\n+        }))\n+    }\n+\n+    pub fn created(&self) -> io::Result<SystemTime> {\n+        Ok(SystemTime::from(libc::timeval {\n+            tv_sec: self.stat.st_birthtime,\n+            tv_usec: (self.stat.st_birthtime_nsec / 1000) as libc::suseconds_t,\n+        }))\n+    }\n+}\n+\n+#[cfg(not(any(target_os = \"ios\", target_os = \"macos\")))]\n+impl FileAttr {\n+    pub fn modified(&self) -> io::Result<SystemTime> {\n+        Ok(SystemTime::from(libc::timespec {\n+            tv_sec: self.stat.st_mtime,\n+            tv_nsec: self.stat.st_mtime_nsec as libc::c_long,\n+        }))\n+    }\n+\n+    pub fn accessed(&self) -> io::Result<SystemTime> {\n+        Ok(SystemTime::from(libc::timespec {\n+            tv_sec: self.stat.st_atime,\n+            tv_nsec: self.stat.st_atime_nsec as libc::c_long,\n+        }))\n+    }\n+\n+    #[cfg(any(target_os = \"bitrig\",\n+              target_os = \"freebsd\",\n+              target_os = \"openbsd\"))]\n+    pub fn created(&self) -> io::Result<SystemTime> {\n+        Ok(SystemTime::from(libc::timespec {\n+            tv_sec: self.stat.st_birthtime,\n+            tv_nsec: self.stat.st_birthtime_nsec as libc::c_long,\n+        }))\n+    }\n+\n+    #[cfg(not(any(target_os = \"bitrig\",\n+                  target_os = \"freebsd\",\n+                  target_os = \"openbsd\")))]\n+    pub fn created(&self) -> io::Result<SystemTime> {\n+        Err(io::Error::new(io::ErrorKind::Other,\n+                           \"creation time is not available on this platform \\\n+                            currently\"))\n+    }\n+}\n+\n impl AsInner<raw::stat> for FileAttr {\n     fn as_inner(&self) -> &raw::stat { &self.stat }\n }"}, {"sha": "dd248416f84cfb98db616aec277918aa897a37ae", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7bcced73b77ba56834c3b5da0c4f82f80aa74db8/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bcced73b77ba56834c3b5da0c4f82f80aa74db8/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=7bcced73b77ba56834c3b5da0c4f82f80aa74db8", "patch": "@@ -146,6 +146,12 @@ mod inner {\n         }\n     }\n \n+    impl From<libc::timeval> for SystemTime {\n+        fn from(t: libc::timeval) -> SystemTime {\n+            SystemTime { t: t }\n+        }\n+    }\n+\n     impl PartialEq for SystemTime {\n         fn eq(&self, other: &SystemTime) -> bool {\n             self.t.tv_sec == other.t.tv_sec && self.t.tv_usec == other.t.tv_usec\n@@ -282,6 +288,12 @@ mod inner {\n         }\n     }\n \n+    impl From<libc::timespec> for SystemTime {\n+        fn from(t: libc::timespec) -> SystemTime {\n+            SystemTime { t: Timespec { t: t } }\n+        }\n+    }\n+\n     impl fmt::Debug for SystemTime {\n         fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n             f.debug_struct(\"SystemTime\")"}, {"sha": "d378a6853f3c7ec004b627c55a6d39f342d39d11", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7bcced73b77ba56834c3b5da0c4f82f80aa74db8/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bcced73b77ba56834c3b5da0c4f82f80aa74db8/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=7bcced73b77ba56834c3b5da0c4f82f80aa74db8", "patch": "@@ -196,9 +196,9 @@ pub trait MetadataExt {\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n impl MetadataExt for Metadata {\n     fn file_attributes(&self) -> u32 { self.as_inner().attrs() }\n-    fn creation_time(&self) -> u64 { self.as_inner().created() }\n-    fn last_access_time(&self) -> u64 { self.as_inner().accessed() }\n-    fn last_write_time(&self) -> u64 { self.as_inner().modified() }\n+    fn creation_time(&self) -> u64 { self.as_inner().created_u64() }\n+    fn last_access_time(&self) -> u64 { self.as_inner().accessed_u64() }\n+    fn last_write_time(&self) -> u64 { self.as_inner().modified_u64() }\n     fn file_size(&self) -> u64 { self.as_inner().size() }\n }\n "}, {"sha": "16d337fcc7073c2281765eaee29ce378341a3997", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7bcced73b77ba56834c3b5da0c4f82f80aa74db8/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bcced73b77ba56834c3b5da0c4f82f80aa74db8/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=7bcced73b77ba56834c3b5da0c4f82f80aa74db8", "patch": "@@ -20,6 +20,7 @@ use ptr;\n use slice;\n use sync::Arc;\n use sys::handle::Handle;\n+use sys::time::SystemTime;\n use sys::{c, cvt};\n use sys_common::FromInner;\n \n@@ -421,19 +422,39 @@ impl FileAttr {\n         FileType::new(self.data.dwFileAttributes, self.reparse_tag)\n     }\n \n-    pub fn created(&self) -> u64 { self.to_u64(&self.data.ftCreationTime) }\n-    pub fn accessed(&self) -> u64 { self.to_u64(&self.data.ftLastAccessTime) }\n-    pub fn modified(&self) -> u64 { self.to_u64(&self.data.ftLastWriteTime) }\n+    pub fn modified(&self) -> io::Result<SystemTime> {\n+        Ok(SystemTime::from(self.data.ftLastWriteTime))\n+    }\n+\n+    pub fn accessed(&self) -> io::Result<SystemTime> {\n+        Ok(SystemTime::from(self.data.ftLastAccessTime))\n+    }\n \n-    fn to_u64(&self, ft: &c::FILETIME) -> u64 {\n-        (ft.dwLowDateTime as u64) | ((ft.dwHighDateTime as u64) << 32)\n+    pub fn created(&self) -> io::Result<SystemTime> {\n+        Ok(SystemTime::from(self.data.ftCreationTime))\n+    }\n+\n+    pub fn modified_u64(&self) -> u64 {\n+        to_u64(&self.data.ftLastWriteTime)\n+    }\n+\n+    pub fn accessed_u64(&self) -> u64 {\n+        to_u64(&self.data.ftLastAccessTime)\n+    }\n+\n+    pub fn created_u64(&self) -> u64 {\n+        to_u64(&self.data.ftCreationTime)\n     }\n \n     fn is_reparse_point(&self) -> bool {\n         self.data.dwFileAttributes & c::FILE_ATTRIBUTE_REPARSE_POINT != 0\n     }\n }\n \n+fn to_u64(ft: &c::FILETIME) -> u64 {\n+    (ft.dwLowDateTime as u64) | ((ft.dwHighDateTime as u64) << 32)\n+}\n+\n impl FilePermissions {\n     pub fn readonly(&self) -> bool {\n         self.attrs & c::FILE_ATTRIBUTE_READONLY != 0"}, {"sha": "ef8ed606526da30ca0a784b4815a4340bf32ffa6", "filename": "src/libstd/sys/windows/time.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7bcced73b77ba56834c3b5da0c4f82f80aa74db8/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bcced73b77ba56834c3b5da0c4f82f80aa74db8/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs?ref=7bcced73b77ba56834c3b5da0c4f82f80aa74db8", "patch": "@@ -166,6 +166,12 @@ impl fmt::Debug for SystemTime {\n     }\n }\n \n+impl From<c::FILETIME> for SystemTime {\n+    fn from(t: c::FILETIME) -> SystemTime {\n+        SystemTime { t: t }\n+    }\n+}\n+\n fn dur2intervals(d: &Duration) -> i64 {\n     d.as_secs().checked_mul(INTERVALS_PER_SEC).and_then(|i| {\n         i.checked_add(d.subsec_nanos() as u64 / 100)"}, {"sha": "a0cf443c0c3fccf1d2dbae991021c9b111b84211", "filename": "src/libstd/time/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7bcced73b77ba56834c3b5da0c4f82f80aa74db8/src%2Flibstd%2Ftime%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bcced73b77ba56834c3b5da0c4f82f80aa74db8/src%2Flibstd%2Ftime%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fmod.rs?ref=7bcced73b77ba56834c3b5da0c4f82f80aa74db8", "patch": "@@ -16,6 +16,7 @@ use error::Error;\n use fmt;\n use ops::{Add, Sub};\n use sys::time;\n+use sys_common::FromInner;\n \n #[stable(feature = \"time\", since = \"1.3.0\")]\n pub use self::duration::Duration;\n@@ -227,6 +228,12 @@ impl fmt::Display for SystemTimeError {\n     }\n }\n \n+impl FromInner<time::SystemTime> for SystemTime {\n+    fn from_inner(time: time::SystemTime) -> SystemTime {\n+        SystemTime(time)\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::{Instant, SystemTime, Duration, UNIX_EPOCH};"}]}