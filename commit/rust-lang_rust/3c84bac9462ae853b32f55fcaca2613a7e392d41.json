{"sha": "3c84bac9462ae853b32f55fcaca2613a7e392d41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjODRiYWM5NDYyYWU4NTNiMzJmNTVmY2FjYTI2MTNhN2UzOTJkNDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-19T16:52:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-19T16:52:17Z"}, "message": "auto merge of #5112 : luqmana/rust/3469, r=graydon\n\nSo this is a partial fix for #3469. Partial because it only works for simple constant expressions like `32/2` and `2+2` and not for any actual constants.\r\n\r\nFor example:\r\n```\r\nconst FOO: uint = 2+2;\r\nlet v: [int * FOO];\r\n```\r\n\r\nresults in:\r\n```\r\nerror: expected constant expr for vector length: Non-constant path in constant expr\r\n```\r\n\r\nThis seems to be because at the point of error (`typeck::astconv`) the def_map doesn't contain the constant and thus it can't lookup the actual expression (`2+2` in this case).\r\n\r\nSo, feedback on what I have so far and suggestions for how to address the constant issue?", "tree": {"sha": "30290aecec90bcffd91a5d905256cd755e583bbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30290aecec90bcffd91a5d905256cd755e583bbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c84bac9462ae853b32f55fcaca2613a7e392d41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c84bac9462ae853b32f55fcaca2613a7e392d41", "html_url": "https://github.com/rust-lang/rust/commit/3c84bac9462ae853b32f55fcaca2613a7e392d41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c84bac9462ae853b32f55fcaca2613a7e392d41/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e67448d397ed8f468170d6fba95ceae081ece624", "url": "https://api.github.com/repos/rust-lang/rust/commits/e67448d397ed8f468170d6fba95ceae081ece624", "html_url": "https://github.com/rust-lang/rust/commit/e67448d397ed8f468170d6fba95ceae081ece624"}, {"sha": "d7d17dc14e653332848f7f6f994b34eb7fc923ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7d17dc14e653332848f7f6f994b34eb7fc923ec", "html_url": "https://github.com/rust-lang/rust/commit/d7d17dc14e653332848f7f6f994b34eb7fc923ec"}], "stats": {"total": 144, "additions": 115, "deletions": 29}, "files": [{"sha": "ccd7e35f817c0f88e2fe056c8264475329e64ea7", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=3c84bac9462ae853b32f55fcaca2613a7e392d41", "patch": "@@ -498,7 +498,12 @@ fn check_item(i: @ast::item, cx: ty::ctxt) {\n // not traverse into subitems, since that is handled by the outer\n // lint visitor.\n fn item_stopping_visitor<E>(v: visit::vt<E>) -> visit::vt<E> {\n-    visit::mk_vt(@visit::Visitor {visit_item: |_i, _e, _v| { },.. **v})\n+    visit::mk_vt(@visit::Visitor {visit_item: |_i, _e, _v| { },\n+        .. **(ty_stopping_visitor(v))})\n+}\n+\n+fn ty_stopping_visitor<E>(v: visit::vt<E>) -> visit::vt<E> {\n+    visit::mk_vt(@visit::Visitor {visit_ty: |_t, _e, _v| { },.. **v})\n }\n \n fn check_item_while_true(cx: ty::ctxt, it: @ast::item) {"}, {"sha": "2a70ba7d4c12922a412f69a8901b8a3cdc4727ef", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=3c84bac9462ae853b32f55fcaca2613a7e392d41", "patch": "@@ -54,6 +54,7 @@\n \n use core::prelude::*;\n \n+use middle::const_eval;\n use middle::ty::{arg, field, substs};\n use middle::ty::{ty_param_substs_and_ty};\n use middle::ty;\n@@ -412,9 +413,29 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + Durable>(\n           }\n         }\n       }\n-      ast::ty_fixed_length_vec(a_mt, u) => {\n-        ty::mk_evec(tcx, ast_mt_to_mt(self, rscope, a_mt),\n-                    ty::vstore_fixed(u))\n+      ast::ty_fixed_length_vec(a_mt, e) => {\n+        match const_eval::eval_const_expr_partial(tcx, e) {\n+          Ok(ref r) => {\n+            match *r {\n+              const_eval::const_int(i) =>\n+                ty::mk_evec(tcx, ast_mt_to_mt(self, rscope, a_mt),\n+                            ty::vstore_fixed(i as uint)),\n+              const_eval::const_uint(i) =>\n+                ty::mk_evec(tcx, ast_mt_to_mt(self, rscope, a_mt),\n+                            ty::vstore_fixed(i as uint)),\n+              _ => {\n+                tcx.sess.span_fatal(\n+                    ast_ty.span, ~\"expected constant expr for vector length\");\n+              }\n+            }\n+          }\n+          Err(ref r) => {\n+            tcx.sess.span_fatal(\n+                ast_ty.span,\n+                fmt!(\"expected constant expr for vector length: %s\",\n+                     *r));\n+          }\n+        }\n       }\n       ast::ty_infer => {\n         // ty_infer should only appear as the type of arguments or return"}, {"sha": "7a1beeca51368aed09829aac18eed832e502a2ac", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=3c84bac9462ae853b32f55fcaca2613a7e392d41", "patch": "@@ -2169,7 +2169,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n           }\n           ast::expr_repeat(element, count_expr, mutbl) => {\n             let count = ty::eval_repeat_count(tcx, count_expr);\n-            fcx.write_ty(count_expr.id, ty::mk_uint(tcx));\n+            check_expr_with_hint(fcx, count_expr, ty::mk_uint(tcx));\n             let tt = ast_expr_vstore_to_vstore(fcx, ev, count, vst);\n             let t: ty::t = fcx.infcx().next_ty_var();\n             bot |= check_expr_has_type(fcx, element, t);\n@@ -2537,7 +2537,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n       }\n       ast::expr_repeat(element, count_expr, mutbl) => {\n         let count = ty::eval_repeat_count(tcx, count_expr);\n-        fcx.write_ty(count_expr.id, ty::mk_uint(tcx));\n+        check_expr_with_hint(fcx, count_expr, ty::mk_uint(tcx));\n         let t: ty::t = fcx.infcx().next_ty_var();\n         bot |= check_expr_has_type(fcx, element, t);\n         let t = ty::mk_evec(tcx, ty::mt {ty: t, mutbl: mutbl},"}, {"sha": "65eeff5bbab389e63b2ef064da118f1362d4aa8b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=3c84bac9462ae853b32f55fcaca2613a7e392d41", "patch": "@@ -386,7 +386,6 @@ pub enum vstore {\n #[auto_decode]\n #[deriving_eq]\n pub enum expr_vstore {\n-    // FIXME (#3469): Change uint to @expr (actually only constant exprs)\n     expr_vstore_fixed(Option<uint>),   // [1,2,3,4]\n     expr_vstore_uniq,                  // ~[1,2,3,4]\n     expr_vstore_box,                   // @[1,2,3,4]\n@@ -916,7 +915,7 @@ pub enum ty_ {\n     ty_box(mt),\n     ty_uniq(mt),\n     ty_vec(mt),\n-    ty_fixed_length_vec(mt, uint),\n+    ty_fixed_length_vec(mt, @expr),\n     ty_ptr(mt),\n     ty_rptr(Option<@Lifetime>, mt),\n     ty_closure(@TyClosure),"}, {"sha": "159b23f4f9997d70227cc51699ba261e1868a43d", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=3c84bac9462ae853b32f55fcaca2613a7e392d41", "patch": "@@ -622,10 +622,10 @@ pub fn noop_fold_ty(t: &ty_, fld: @ast_fold) -> ty_ {\n         }\n         ty_tup(ref tys) => ty_tup(tys.map(|ty| fld.fold_ty(*ty))),\n         ty_path(path, id) => ty_path(fld.fold_path(path), fld.new_id(id)),\n-        ty_fixed_length_vec(ref mt, vs) => {\n+        ty_fixed_length_vec(ref mt, e) => {\n             ty_fixed_length_vec(\n                 fold_mt(mt, fld),\n-                vs\n+                fld.fold_expr(e)\n             )\n         }\n         ty_mac(ref mac) => ty_mac(fold_mac(*mac))"}, {"sha": "c7e93635d4c76c866df4357e571971aef5788325", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3c84bac9462ae853b32f55fcaca2613a7e392d41", "patch": "@@ -642,7 +642,8 @@ pub impl Parser {\n                 self.obsolete(*self.last_span, ObsoleteMutVector);\n             }\n \n-            // Parse the `* 3` in `[ int * 3 ]`\n+            // Parse the `* e` in `[ int * e ]`\n+            // where `e` is a const expression\n             let t = match self.maybe_parse_fixed_vstore_with_star() {\n                 None => ty_vec(mt),\n                 Some(suffix) => ty_fixed_length_vec(mt, suffix)\n@@ -814,23 +815,9 @@ pub impl Parser {\n         })\n     }\n \n-    fn maybe_parse_fixed_vstore_with_star(&self) -> Option<uint> {\n+    fn maybe_parse_fixed_vstore_with_star(&self) -> Option<@ast::expr> {\n         if self.eat(&token::BINOP(token::STAR)) {\n-            match *self.token {\n-                token::LIT_INT_UNSUFFIXED(i) if i >= 0i64 => {\n-                    self.bump();\n-                    Some(i as uint)\n-                }\n-                _ => {\n-                    self.fatal(\n-                        fmt!(\n-                            \"expected integral vector length \\\n-                            but found `%s`\",\n-                            token_to_str(self.reader, &copy *self.token)\n-                        )\n-                    );\n-                }\n-            }\n+            Some(self.parse_expr())\n         } else {\n             None\n         }"}, {"sha": "93583a1487a84b3280acfe21c620e6a8250651db", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=3c84bac9462ae853b32f55fcaca2613a7e392d41", "patch": "@@ -425,7 +425,7 @@ pub fn print_type_ex(s: @ps, &&ty: @ast::Ty, print_colons: bool) {\n         }\n         print_type(s, mt.ty);\n         word(s.s, ~\" * \");\n-        word(s.s, fmt!(\"%u\", v));\n+        print_expr(s, v);\n         word(s.s, ~\"]\");\n       }\n       ast::ty_mac(_) => {"}, {"sha": "a159c98d21b27537f4bc7b6fb22889222b8942fa", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=3c84bac9462ae853b32f55fcaca2613a7e392d41", "patch": "@@ -246,7 +246,10 @@ pub fn visit_ty<E>(t: @Ty, e: E, v: vt<E>) {\n             (v.visit_ty)(f.decl.output, e, v);\n         },\n         ty_path(p, _) => visit_path(p, e, v),\n-        ty_fixed_length_vec(ref mt, _) => (v.visit_ty)(mt.ty, e, v),\n+        ty_fixed_length_vec(ref mt, ex) => {\n+            (v.visit_ty)(mt.ty, e, v);\n+            (v.visit_expr)(ex, e, v);\n+        },\n         ty_nil | ty_bot | ty_mac(_) | ty_infer => ()\n     }\n }"}, {"sha": "86262008ff943246e72c0dba4199fb4dd10b68d7", "filename": "src/test/compile-fail/non-constant-expr-for-fixed-len-vec.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-fixed-len-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-fixed-len-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-fixed-len-vec.rs?ref=3c84bac9462ae853b32f55fcaca2613a7e392d41", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that non-constant exprs do fail as count in fixed length vec type\n+\n+fn main() {\n+    fn bar(n: int) {\n+        let _x: [int * n]; //~ ERROR expected constant expr for vector length: Non-constant path in constant expr\n+    }\n+}"}, {"sha": "2727db9d0422e803f5fe78e576b13d8e48274373", "filename": "src/test/compile-fail/non-constant-expr-for-vec-repeat.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-vec-repeat.rs?ref=3c84bac9462ae853b32f55fcaca2613a7e392d41", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that non constant exprs fail for vector repeat syntax\n+\n+fn main() {\n+    fn bar(n: int) {\n+        let _x = [0, ..n]; //~ ERROR expected constant integer for repeat count but found variable\n+    }\n+}"}, {"sha": "aa5c4cbbc1d0fdd9c80ca49d89f47d95f08bb6ab", "filename": "src/test/run-pass/const-expr-in-fixed-length-vec.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Ftest%2Frun-pass%2Fconst-expr-in-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Ftest%2Frun-pass%2Fconst-expr-in-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-expr-in-fixed-length-vec.rs?ref=3c84bac9462ae853b32f55fcaca2613a7e392d41", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that constant expressions can be used for declaring the \n+// type of a fixed length vector.\n+\n+fn main() {\n+\n+    const FOO: int = 2;\n+    let _v: [int * FOO*3];\n+\n+}"}, {"sha": "76952ef730fa16e71996c30b7519c78dc87cf313", "filename": "src/test/run-pass/const-expr-in-vec-repeat.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Ftest%2Frun-pass%2Fconst-expr-in-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c84bac9462ae853b32f55fcaca2613a7e392d41/src%2Ftest%2Frun-pass%2Fconst-expr-in-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-expr-in-vec-repeat.rs?ref=3c84bac9462ae853b32f55fcaca2613a7e392d41", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that constant expressions can be used in vec repeat syntax. \n+\n+fn main() {\n+\n+    const FOO: int = 2;\n+    let _v = [0, ..FOO*3*2/2];\n+\n+}"}]}