{"sha": "0157e6c0588902967c9606e31fefebfd0cf5d7fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNTdlNmMwNTg4OTAyOTY3Yzk2MDZlMzFmZWZlYmZkMGNmNWQ3ZmQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-12-14T23:12:08Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-12-14T23:12:08Z"}, "message": "Fix regression in resolution of primitive types", "tree": {"sha": "29aa6fc385b5d5379e21dda9b8df5264e73f29b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29aa6fc385b5d5379e21dda9b8df5264e73f29b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0157e6c0588902967c9606e31fefebfd0cf5d7fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0157e6c0588902967c9606e31fefebfd0cf5d7fd", "html_url": "https://github.com/rust-lang/rust/commit/0157e6c0588902967c9606e31fefebfd0cf5d7fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0157e6c0588902967c9606e31fefebfd0cf5d7fd/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b197e4a45f31849c29bf6de260531a8f85ba1bf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b197e4a45f31849c29bf6de260531a8f85ba1bf5", "html_url": "https://github.com/rust-lang/rust/commit/b197e4a45f31849c29bf6de260531a8f85ba1bf5"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "ea5aa5be0132ef90800e20b37cba7ed1276b0fb9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0157e6c0588902967c9606e31fefebfd0cf5d7fd/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0157e6c0588902967c9606e31fefebfd0cf5d7fd/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0157e6c0588902967c9606e31fefebfd0cf5d7fd", "patch": "@@ -754,7 +754,7 @@ impl<'a> LexicalScopeBinding<'a> {\n     }\n }\n \n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, PartialEq)]\n enum PathScope {\n     Global,\n     Lexical,\n@@ -2292,7 +2292,9 @@ impl<'a> Resolver<'a> {\n             //\n             // Such behavior is required for backward compatibility.\n             // The same fallback is used when `a` resolves to nothing.\n-            _ if self.primitive_type_table.primitive_types.contains_key(&path[0].name) => {\n+            PathResult::Module(..) | PathResult::Failed(..)\n+                    if scope == PathScope::Lexical && (ns == TypeNS || path.len() > 1) &&\n+                       self.primitive_type_table.primitive_types.contains_key(&path[0].name) => {\n                 PathResolution {\n                     base_def: Def::PrimTy(self.primitive_type_table.primitive_types[&path[0].name]),\n                     depth: segments.len() - 1,"}, {"sha": "1e43933ad0ab4356ccfd93746d9a99d6aa857669", "filename": "src/test/compile-fail/resolve-primitive-fallback.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0157e6c0588902967c9606e31fefebfd0cf5d7fd/src%2Ftest%2Fcompile-fail%2Fresolve-primitive-fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0157e6c0588902967c9606e31fefebfd0cf5d7fd/src%2Ftest%2Fcompile-fail%2Fresolve-primitive-fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-primitive-fallback.rs?ref=0157e6c0588902967c9606e31fefebfd0cf5d7fd", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    // Make sure primitive type fallback doesn't work in value namespace\n+    std::mem::size_of(u16);\n+    //~^ ERROR unresolved name `u16`\n+    //~| ERROR this function takes 0 parameters but 1 parameter was supplied\n+\n+    // Make sure primitive type fallback doesn't work with global paths\n+    let _: ::u8;\n+    //~^ ERROR type name `u8` is undefined or not in scope\n+}"}]}