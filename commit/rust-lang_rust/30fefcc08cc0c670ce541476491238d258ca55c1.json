{"sha": "30fefcc08cc0c670ce541476491238d258ca55c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZmVmY2MwOGNjMGM2NzBjZTU0MTQ3NjQ5MTIzOGQyNThjYTU1YzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-06T16:35:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-07T12:05:56Z"}, "message": "Store GenericParams in arena", "tree": {"sha": "998e7ddf231d0da32d08641fea17c1662f26f0e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/998e7ddf231d0da32d08641fea17c1662f26f0e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30fefcc08cc0c670ce541476491238d258ca55c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30fefcc08cc0c670ce541476491238d258ca55c1", "html_url": "https://github.com/rust-lang/rust/commit/30fefcc08cc0c670ce541476491238d258ca55c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30fefcc08cc0c670ce541476491238d258ca55c1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35fc983dd9e904ad4961b9c10be3397bad33da0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/35fc983dd9e904ad4961b9c10be3397bad33da0c", "html_url": "https://github.com/rust-lang/rust/commit/35fc983dd9e904ad4961b9c10be3397bad33da0c"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "abe749a4045f6c6438e3eb75d3eb0b15d11678e6", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/30fefcc08cc0c670ce541476491238d258ca55c1/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30fefcc08cc0c670ce541476491238d258ca55c1/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=30fefcc08cc0c670ce541476491238d258ca55c1", "patch": "@@ -5,18 +5,19 @@\n use std::sync::Arc;\n \n use hir_expand::name::{self, AsName, Name};\n+use ra_arena::Arena;\n use ra_syntax::ast::{self, NameOwner, TypeBoundsOwner, TypeParamsOwner};\n \n use crate::{\n     db::DefDatabase,\n     src::HasSource,\n     type_ref::{TypeBound, TypeRef},\n-    AdtId, AstItemDef, ContainerId, GenericDefId, Lookup,\n+    AdtId, AstItemDef, ContainerId, GenericDefId, LocalGenericParamId, Lookup,\n };\n \n /// Data about a generic parameter (to a function, struct, impl, ...).\n #[derive(Clone, PartialEq, Eq, Debug)]\n-pub struct GenericParam {\n+pub struct GenericParamData {\n     // FIXME: give generic params proper IDs\n     pub idx: u32,\n     pub name: Name,\n@@ -27,7 +28,7 @@ pub struct GenericParam {\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct GenericParams {\n     pub parent_params: Option<Arc<GenericParams>>,\n-    pub params: Vec<GenericParam>,\n+    pub params: Arena<LocalGenericParamId, GenericParamData>,\n     pub where_predicates: Vec<WherePredicate>,\n }\n \n@@ -56,7 +57,7 @@ impl GenericParams {\n         parent_params: Option<Arc<GenericParams>>,\n     ) -> GenericParams {\n         let mut generics =\n-            GenericParams { params: Vec::new(), parent_params, where_predicates: Vec::new() };\n+            GenericParams { params: Arena::default(), parent_params, where_predicates: Vec::new() };\n         let start = generics.parent_params.as_ref().map(|p| p.params.len()).unwrap_or(0) as u32;\n         // FIXME: add `: Sized` bound for everything except for `Self` in traits\n         match def {\n@@ -66,7 +67,7 @@ impl GenericParams {\n             GenericDefId::AdtId(AdtId::EnumId(it)) => generics.fill(&it.source(db).value, start),\n             GenericDefId::TraitId(it) => {\n                 // traits get the Self type as an implicit first type parameter\n-                generics.params.push(GenericParam {\n+                generics.params.alloc(GenericParamData {\n                     idx: start,\n                     name: name::SELF_TYPE,\n                     default: None,\n@@ -110,8 +111,8 @@ impl GenericParams {\n             let name = type_param.name().map_or_else(Name::missing, |it| it.as_name());\n             // FIXME: Use `Path::from_src`\n             let default = type_param.default_type().map(TypeRef::from_ast);\n-            let param = GenericParam { idx: idx as u32 + start, name: name.clone(), default };\n-            self.params.push(param);\n+            let param = GenericParamData { idx: idx as u32 + start, name: name.clone(), default };\n+            self.params.alloc(param);\n \n             let type_ref = TypeRef::Path(name.into());\n             self.fill_bounds(&type_param, type_ref);\n@@ -140,8 +141,8 @@ impl GenericParams {\n         self.where_predicates.push(WherePredicate { type_ref, bound });\n     }\n \n-    pub fn find_by_name(&self, name: &Name) -> Option<&GenericParam> {\n-        self.params.iter().find(|p| &p.name == name)\n+    pub fn find_by_name(&self, name: &Name) -> Option<&GenericParamData> {\n+        self.params.iter().map(|(_id, data)| data).find(|p| &p.name == name)\n     }\n \n     pub fn count_parent_params(&self) -> usize {\n@@ -153,14 +154,14 @@ impl GenericParams {\n         parent_count + self.params.len()\n     }\n \n-    fn for_each_param<'a>(&'a self, f: &mut impl FnMut(&'a GenericParam)) {\n+    fn for_each_param<'a>(&'a self, f: &mut impl FnMut(&'a GenericParamData)) {\n         if let Some(parent) = &self.parent_params {\n             parent.for_each_param(f);\n         }\n-        self.params.iter().for_each(f);\n+        self.params.iter().map(|(_id, data)| data).for_each(f);\n     }\n \n-    pub fn params_including_parent(&self) -> Vec<&GenericParam> {\n+    pub fn params_including_parent(&self) -> Vec<&GenericParamData> {\n         let mut vec = Vec::with_capacity(self.count_params_including_parent());\n         self.for_each_param(&mut |p| vec.push(p));\n         vec"}, {"sha": "b8dfc0ab1a977ef6286efa0341c33f8157fbd54c", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30fefcc08cc0c670ce541476491238d258ca55c1/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30fefcc08cc0c670ce541476491238d258ca55c1/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=30fefcc08cc0c670ce541476491238d258ca55c1", "patch": "@@ -317,6 +317,16 @@ macro_rules! impl_froms {\n     }\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct GenericParamId {\n+    pub parent: GenericDefId,\n+    pub local_id: LocalGenericParamId,\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct LocalGenericParamId(RawId);\n+impl_arena_id!(LocalGenericParamId);\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum ContainerId {\n     ModuleId(ModuleId),"}, {"sha": "ee19d79a760a21cc4df09878a5f3f74411424735", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30fefcc08cc0c670ce541476491238d258ca55c1/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30fefcc08cc0c670ce541476491238d258ca55c1/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=30fefcc08cc0c670ce541476491238d258ca55c1", "patch": "@@ -426,7 +426,7 @@ impl Scope {\n                 }\n             }\n             Scope::GenericParams { params, .. } => {\n-                for param in params.params.iter() {\n+                for (_id, param) in params.params.iter() {\n                     f(param.name.clone(), ScopeDef::GenericParam(param.idx))\n                 }\n             }"}, {"sha": "0c3428999314fb4022384fa7784d0bb19caefedf", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30fefcc08cc0c670ce541476491238d258ca55c1/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30fefcc08cc0c670ce541476491238d258ca55c1/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=30fefcc08cc0c670ce541476491238d258ca55c1", "patch": "@@ -662,7 +662,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         let mut substs = Vec::with_capacity(parent_param_count + param_count);\n         // Parent arguments are unknown, except for the receiver type\n         if let Some(parent_generics) = def_generics.and_then(|p| p.parent_params.clone()) {\n-            for param in &parent_generics.params {\n+            for (_id, param) in parent_generics.params.iter() {\n                 if param.name == name::SELF_TYPE {\n                     substs.push(receiver_ty.clone());\n                 } else {"}]}