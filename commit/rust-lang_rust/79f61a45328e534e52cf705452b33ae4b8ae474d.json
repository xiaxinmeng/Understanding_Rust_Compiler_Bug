{"sha": "79f61a45328e534e52cf705452b33ae4b8ae474d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZjYxYTQ1MzI4ZTUzNGU1MmNmNzA1NDUyYjMzYWU0YjhhZTQ3NGQ=", "commit": {"author": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-04-29T20:27:40Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-02T15:49:25Z"}, "message": "Finish up with 'old school' error mode", "tree": {"sha": "6843e958bfce7a295b1c532e63480b0689ef437e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6843e958bfce7a295b1c532e63480b0689ef437e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79f61a45328e534e52cf705452b33ae4b8ae474d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79f61a45328e534e52cf705452b33ae4b8ae474d", "html_url": "https://github.com/rust-lang/rust/commit/79f61a45328e534e52cf705452b33ae4b8ae474d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79f61a45328e534e52cf705452b33ae4b8ae474d/comments", "author": null, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84cb56f8ee11ba89914462e478f06e9c1e8e7971", "url": "https://api.github.com/repos/rust-lang/rust/commits/84cb56f8ee11ba89914462e478f06e9c1e8e7971", "html_url": "https://github.com/rust-lang/rust/commit/84cb56f8ee11ba89914462e478f06e9c1e8e7971"}], "stats": {"total": 78, "additions": 65, "deletions": 13}, "files": [{"sha": "10bcf83d7556f2aba52006cc6375bb5b1d976ec7", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79f61a45328e534e52cf705452b33ae4b8ae474d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79f61a45328e534e52cf705452b33ae4b8ae474d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=79f61a45328e534e52cf705452b33ae4b8ae474d", "patch": "@@ -106,7 +106,8 @@ impl CoreEmitter for SharedEmitter {\n                     msg: &str,\n                     code: Option<&str>,\n                     lvl: Level,\n-                    _is_header: bool) {\n+                    _is_header: bool,\n+                    _show_snippet: bool) {\n         self.buffer.lock().unwrap().push(Diagnostic {\n             msg: msg.to_string(),\n             code: code.map(|s| s.to_string()),"}, {"sha": "769f6b05397060713cd1571be93ee665a44548fc", "filename": "src/libsyntax/errors/emitter.rs", "status": "modified", "additions": 63, "deletions": 12, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/79f61a45328e534e52cf705452b33ae4b8ae474d/src%2Flibsyntax%2Ferrors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79f61a45328e534e52cf705452b33ae4b8ae474d/src%2Flibsyntax%2Ferrors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Femitter.rs?ref=79f61a45328e534e52cf705452b33ae4b8ae474d", "patch": "@@ -40,7 +40,8 @@ pub trait CoreEmitter {\n                     msg: &str,\n                     code: Option<&str>,\n                     lvl: Level,\n-                    is_header: bool);\n+                    is_header: bool,\n+                    show_snippet: bool);\n }\n \n impl<T: CoreEmitter> Emitter for T {\n@@ -53,25 +54,47 @@ impl<T: CoreEmitter> Emitter for T {\n                           msg,\n                           code,\n                           lvl,\n+                          true,\n                           true);\n     }\n \n     fn emit_struct(&mut self, db: &DiagnosticBuilder) {\n+        let old_school = match ::std::env::var(\"RUST_NEW_ERROR_FORMAT\") {\n+            Ok(_) => false,\n+            Err(_) => true,\n+        };\n+        let db_span = FullSpan(db.span.clone());\n         self.emit_message(&FullSpan(db.span.clone()),\n                           &db.message,\n                           db.code.as_ref().map(|s| &**s),\n                           db.level,\n+                          true,\n                           true);\n         for child in &db.children {\n             let render_span = child.render_span\n                                    .clone()\n                                    .unwrap_or_else(\n                                        || FullSpan(child.span.clone()));\n-            self.emit_message(&render_span,\n-                              &child.message,\n-                              None,\n-                              child.level,\n-                              false);\n+\n+            if !old_school {\n+                self.emit_message(&render_span,\n+                                    &child.message,\n+                                    None,\n+                                    child.level,\n+                                    false,\n+                                    true);\n+            } else {\n+                let (render_span, show_snippet) = match render_span.span().primary_span() {\n+                    None => (db_span.clone(), false),\n+                    _ => (render_span, true)\n+                };\n+                self.emit_message(&render_span,\n+                                    &child.message,\n+                                    None,\n+                                    child.level,\n+                                    false,\n+                                    show_snippet);\n+            }\n         }\n     }\n }\n@@ -108,7 +131,8 @@ impl CoreEmitter for BasicEmitter {\n                     msg: &str,\n                     code: Option<&str>,\n                     lvl: Level,\n-                    _is_header: bool) {\n+                    _is_header: bool,\n+                    _show_snippet: bool) {\n         // we ignore the span as we have no access to a codemap at this point\n         if let Err(e) = print_diagnostic(&mut self.dst, \"\", lvl, msg, code) {\n             panic!(\"failed to print diagnostics: {:?}\", e);\n@@ -146,8 +170,9 @@ impl CoreEmitter for EmitterWriter {\n                     msg: &str,\n                     code: Option<&str>,\n                     lvl: Level,\n-                    is_header: bool) {\n-        match self.emit_message_(rsp, msg, code, lvl, is_header) {\n+                    is_header: bool,\n+                    show_snippet: bool) {\n+        match self.emit_message_(rsp, msg, code, lvl, is_header, show_snippet) {\n             Ok(()) => { }\n             Err(e) => panic!(\"failed to emit error: {}\", e)\n         }\n@@ -213,7 +238,8 @@ impl EmitterWriter {\n                      msg: &str,\n                      code: Option<&str>,\n                      lvl: Level,\n-                     is_header: bool)\n+                     is_header: bool,\n+                     show_snippet: bool)\n                      -> io::Result<()> {\n         if is_header {\n             if self.first {\n@@ -243,10 +269,24 @@ impl EmitterWriter {\n                 }\n             }\n             _ => {\n-                print_diagnostic(&mut self.dst, \"\", lvl, msg, code)?\n+                if self.old_school {\n+                    let loc = match rsp.span().primary_span() {\n+                        Some(COMMAND_LINE_SP) | Some(DUMMY_SP) => \"\".to_string(),\n+                        Some(ps) => self.cm.span_to_string(ps),\n+                        None => \"\".to_string()\n+                    };\n+                    print_diagnostic(&mut self.dst, &loc, lvl, msg, code)?\n+                }\n+                else {\n+                    print_diagnostic(&mut self.dst, \"\", lvl, msg, code)?\n+                }\n             }\n         }\n \n+        if !show_snippet {\n+            return Ok(());\n+        }\n+\n         // Watch out for various nasty special spans; don't try to\n         // print any filename or anything for those.\n         match rsp.span().primary_span() {\n@@ -333,8 +373,10 @@ impl EmitterWriter {\n                                                 msp.primary_span());\n         if self.old_school {\n             let mut output_vec = vec![];\n+\n             for span_label in msp.span_labels() {\n                 let mut snippet_data = snippet_data.clone();\n+\n                 snippet_data.push(span_label.span,\n                                   span_label.is_primary,\n                                   span_label.label);\n@@ -412,7 +454,16 @@ fn print_diagnostic(dst: &mut Destination,\n                     code: Option<&str>)\n                     -> io::Result<()> {\n     if !topic.is_empty() {\n-        write!(dst, \"{}: \", topic)?;\n+        let old_school = match ::std::env::var(\"RUST_NEW_ERROR_FORMAT\") {\n+            Ok(_) => false,\n+            Err(_) => true,\n+        };\n+        if !old_school {\n+            write!(dst, \"{}: \", topic)?;\n+        }\n+        else {\n+            write!(dst, \"{} \", topic)?;\n+        }\n         dst.reset_attrs()?;\n     }\n     dst.start_attr(term::Attr::Bold)?;"}]}