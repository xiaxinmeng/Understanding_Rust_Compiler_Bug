{"sha": "fb0353b28d746108932ffb0a9ce8535c115c0acf", "node_id": "C_kwDOAAsO6NoAKGZiMDM1M2IyOGQ3NDYxMDg5MzJmZmIwYTljZTg1MzVjMTE1YzBhY2Y", "commit": {"author": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-10-02T23:22:37Z"}, "committer": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-10-02T23:22:37Z"}, "message": "Update documentation and name for non_send_fields_in_send_ty lint", "tree": {"sha": "79fe79709deff7bd8c22ce330fe28ad32d1b0bfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79fe79709deff7bd8c22ce330fe28ad32d1b0bfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb0353b28d746108932ffb0a9ce8535c115c0acf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb0353b28d746108932ffb0a9ce8535c115c0acf", "html_url": "https://github.com/rust-lang/rust/commit/fb0353b28d746108932ffb0a9ce8535c115c0acf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb0353b28d746108932ffb0a9ce8535c115c0acf/comments", "author": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef8df9df6811fc6597a40cf4cb853c30e9329206", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef8df9df6811fc6597a40cf4cb853c30e9329206", "html_url": "https://github.com/rust-lang/rust/commit/ef8df9df6811fc6597a40cf4cb853c30e9329206"}], "stats": {"total": 90, "additions": 45, "deletions": 45}, "files": [{"sha": "9a4424f50614664c3c515746a14885e1ef45045e", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0353b28d746108932ffb0a9ce8535c115c0acf/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/fb0353b28d746108932ffb0a9ce8535c115c0acf/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=fb0353b28d746108932ffb0a9ce8535c115c0acf", "patch": "@@ -2898,7 +2898,7 @@ Released 2018-09-13\n [`no_effect`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect\n [`non_ascii_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_ascii_literal\n [`non_octal_unix_permissions`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_octal_unix_permissions\n-[`non_send_field_in_send_ty`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_send_field_in_send_ty\n+[`non_send_fields_in_send_ty`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_send_fields_in_send_ty\n [`nonminimal_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool\n [`nonsensical_open_options`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonsensical_open_options\n [`nonstandard_macro_braces`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonstandard_macro_braces"}, {"sha": "7fd84783c22f55cf2af04af2b66604c6a4af3bc9", "filename": "clippy_lints/src/lib.mods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0353b28d746108932ffb0a9ce8535c115c0acf/clippy_lints%2Fsrc%2Flib.mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0353b28d746108932ffb0a9ce8535c115c0acf/clippy_lints%2Fsrc%2Flib.mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.mods.rs?ref=fb0353b28d746108932ffb0a9ce8535c115c0acf", "patch": "@@ -149,7 +149,7 @@ mod no_effect;\n mod non_copy_const;\n mod non_expressive_names;\n mod non_octal_unix_permissions;\n-mod non_send_field_in_send_ty;\n+mod non_send_fields_in_send_ty;\n mod nonstandard_macro_braces;\n mod open_options;\n mod option_env_unwrap;"}, {"sha": "28d54246fbbb27764c3a12247b32bcd69d240571", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0353b28d746108932ffb0a9ce8535c115c0acf/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0353b28d746108932ffb0a9ce8535c115c0acf/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=fb0353b28d746108932ffb0a9ce8535c115c0acf", "patch": "@@ -366,7 +366,7 @@ store.register_lints(&[\n     non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n     non_expressive_names::SIMILAR_NAMES,\n     non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS,\n-    non_send_field_in_send_ty::NON_SEND_FIELD_IN_SEND_TY,\n+    non_send_fields_in_send_ty::NON_SEND_FIELDS_IN_SEND_TY,\n     nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES,\n     open_options::NONSENSICAL_OPEN_OPTIONS,\n     option_env_unwrap::OPTION_ENV_UNWRAP,"}, {"sha": "32606e570d8c8417dcd88fa200b05efa713bcb6f", "filename": "clippy_lints/src/lib.register_nursery.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0353b28d746108932ffb0a9ce8535c115c0acf/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0353b28d746108932ffb0a9ce8535c115c0acf/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_nursery.rs?ref=fb0353b28d746108932ffb0a9ce8535c115c0acf", "patch": "@@ -16,7 +16,7 @@ store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n     LintId::of(missing_const_for_fn::MISSING_CONST_FOR_FN),\n     LintId::of(mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),\n     LintId::of(mutex_atomic::MUTEX_INTEGER),\n-    LintId::of(non_send_field_in_send_ty::NON_SEND_FIELD_IN_SEND_TY),\n+    LintId::of(non_send_fields_in_send_ty::NON_SEND_FIELDS_IN_SEND_TY),\n     LintId::of(nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES),\n     LintId::of(option_if_let_else::OPTION_IF_LET_ELSE),\n     LintId::of(path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE),"}, {"sha": "c3be6db6ffa836363981fc6ebc7ca4cc5389a7ad", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0353b28d746108932ffb0a9ce8535c115c0acf/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0353b28d746108932ffb0a9ce8535c115c0acf/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=fb0353b28d746108932ffb0a9ce8535c115c0acf", "patch": "@@ -536,7 +536,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(iter_not_returning_iterator::IterNotReturningIterator));\n     store.register_late_pass(move || Box::new(if_then_panic::IfThenPanic));\n     let enable_raw_pointer_heuristic_for_send = conf.enable_raw_pointer_heuristic_for_send;\n-    store.register_late_pass(move || Box::new(non_send_field_in_send_ty::NonSendFieldInSendTy::new(enable_raw_pointer_heuristic_for_send)));\n+    store.register_late_pass(move || Box::new(non_send_fields_in_send_ty::NonSendFieldInSendTy::new(enable_raw_pointer_heuristic_for_send)));\n }\n \n #[rustfmt::skip]"}, {"sha": "0dbf296c7142114e4a61c62d8692a881a3b9ee55", "filename": "clippy_lints/src/non_send_fields_in_send_ty.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fb0353b28d746108932ffb0a9ce8535c115c0acf/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0353b28d746108932ffb0a9ce8535c115c0acf/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs?ref=fb0353b28d746108932ffb0a9ce8535c115c0acf", "patch": "@@ -12,7 +12,7 @@ use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Warns about a field in a `Send` struct that is neither `Send` nor `Copy`.\n+    /// Warns about fields in struct implementing `Send` that are neither `Send` nor `Copy`.\n     ///\n     /// ### Why is this bad?\n     /// Sending the struct to another thread will transfer the ownership to\n@@ -43,7 +43,7 @@ declare_clippy_lint! {\n     /// ```\n     /// Use thread-safe types like [`std::sync::Arc`](https://doc.rust-lang.org/std/sync/struct.Arc.html)\n     /// or specify correct bounds on generic type parameters (`T: Send`).\n-    pub NON_SEND_FIELD_IN_SEND_TY,\n+    pub NON_SEND_FIELDS_IN_SEND_TY,\n     nursery,\n     \"there is field that does not implement `Send` in a `Send` struct\"\n }\n@@ -61,7 +61,7 @@ impl NonSendFieldInSendTy {\n     }\n }\n \n-impl_lint_pass!(NonSendFieldInSendTy => [NON_SEND_FIELD_IN_SEND_TY]);\n+impl_lint_pass!(NonSendFieldInSendTy => [NON_SEND_FIELDS_IN_SEND_TY]);\n \n impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n@@ -96,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n                                 .did\n                                 .as_local()\n                                 .map(|local_def_id| hir_map.local_def_id_to_hir_id(local_def_id));\n-                            if !is_lint_allowed(cx, NON_SEND_FIELD_IN_SEND_TY, field_hir_id);\n+                            if !is_lint_allowed(cx, NON_SEND_FIELDS_IN_SEND_TY, field_hir_id);\n                             if let field_ty = field.ty(cx.tcx, impl_trait_substs);\n                             if !ty_allowed_in_send(cx, field_ty, send_trait);\n                             if let Node::Field(field_def) = hir_map.get(field_hir_id);\n@@ -114,7 +114,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n                 if !non_send_fields.is_empty() {\n                     span_lint_and_then(\n                         cx,\n-                        NON_SEND_FIELD_IN_SEND_TY,\n+                        NON_SEND_FIELDS_IN_SEND_TY,\n                         item.span,\n                         &format!(\n                             \"this implementation is unsound, as some fields in `{}` are `!Send`\",", "previous_filename": "clippy_lints/src/non_send_field_in_send_ty.rs"}, {"sha": "6cbada4c1505b5374758d951ca2df152eec9a4d7", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb0353b28d746108932ffb0a9ce8535c115c0acf/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0353b28d746108932ffb0a9ce8535c115c0acf/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=fb0353b28d746108932ffb0a9ce8535c115c0acf", "patch": "@@ -284,9 +284,9 @@ define_Conf! {\n     ///\n     /// The list of unicode scripts allowed to be used in the scope.\n     (allowed_scripts: Vec<String> = vec![\"Latin\".to_string()]),\n-    /// Lint: NON_SEND_FIELD_IN_SEND_TY.\n+    /// Lint: NON_SEND_FIELDS_IN_SEND_TY.\n     ///\n-    /// Whether to apply the raw pointer heuristic in `non_send_field_in_send_ty` lint.\n+    /// Whether to apply the raw pointer heuristic to determine if a type is `Send`.\n     (enable_raw_pointer_heuristic_for_send: bool = true),\n }\n "}, {"sha": "a942709d14acc27da4706e23760346122169525f", "filename": "tests/ui-toml/strict_non_send_fields_in_send_ty/clippy.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fb0353b28d746108932ffb0a9ce8535c115c0acf/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fb0353b28d746108932ffb0a9ce8535c115c0acf/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Fclippy.toml?ref=fb0353b28d746108932ffb0a9ce8535c115c0acf", "previous_filename": "tests/ui-toml/strict_non_send_field_in_send_ty/clippy.toml"}, {"sha": "90c2439dc34f4556322f383bc0e672c6069618dc", "filename": "tests/ui-toml/strict_non_send_fields_in_send_ty/test.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0353b28d746108932ffb0a9ce8535c115c0acf/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0353b28d746108932ffb0a9ce8535c115c0acf/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.rs?ref=fb0353b28d746108932ffb0a9ce8535c115c0acf", "patch": "@@ -1,4 +1,4 @@\n-#![warn(clippy::non_send_field_in_send_ty)]\n+#![warn(clippy::non_send_fields_in_send_ty)]\n #![feature(extern_types)]\n \n use std::rc::Rc;", "previous_filename": "tests/ui-toml/strict_non_send_field_in_send_ty/test.rs"}, {"sha": "b07f9dd3df30e02b4ae6f95ac8d802905fe9855c", "filename": "tests/ui-toml/strict_non_send_fields_in_send_ty/test.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb0353b28d746108932ffb0a9ce8535c115c0acf/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb0353b28d746108932ffb0a9ce8535c115c0acf/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.stderr?ref=fb0353b28d746108932ffb0a9ce8535c115c0acf", "patch": "@@ -4,7 +4,7 @@ error: this implementation is unsound, as some fields in `NoGeneric` are `!Send`\n LL | unsafe impl Send for NoGeneric {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::non-send-field-in-send-ty` implied by `-D warnings`\n+   = note: `-D clippy::non-send-fields-in-send-ty` implied by `-D warnings`\n note: the type of field `rc_is_not_send` is `!Send`\n   --> $DIR/test.rs:8:5\n    |", "previous_filename": "tests/ui-toml/strict_non_send_field_in_send_ty/test.stderr"}, {"sha": "eca7f5e5655913785f3e98cf94d3a179549e74ba", "filename": "tests/ui/non_send_fields_in_send_ty.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fb0353b28d746108932ffb0a9ce8535c115c0acf/tests%2Fui%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb0353b28d746108932ffb0a9ce8535c115c0acf/tests%2Fui%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_send_fields_in_send_ty.rs?ref=fb0353b28d746108932ffb0a9ce8535c115c0acf", "patch": "@@ -1,4 +1,4 @@\n-#![warn(clippy::non_send_field_in_send_ty)]\n+#![warn(clippy::non_send_fields_in_send_ty)]\n #![feature(extern_types)]\n \n use std::cell::UnsafeCell;\n@@ -95,16 +95,16 @@ pub struct HeuristicTest {\n unsafe impl Send for HeuristicTest {}\n \n // Test attributes\n-#[allow(clippy::non_send_field_in_send_ty)]\n+#[allow(clippy::non_send_fields_in_send_ty)]\n pub struct AttrTest1<T>(T);\n \n pub struct AttrTest2<T> {\n-    #[allow(clippy::non_send_field_in_send_ty)]\n+    #[allow(clippy::non_send_fields_in_send_ty)]\n     field: T,\n }\n \n pub enum AttrTest3<T> {\n-    #[allow(clippy::non_send_field_in_send_ty)]\n+    #[allow(clippy::non_send_fields_in_send_ty)]\n     Enum1(T),\n     Enum2(T),\n }", "previous_filename": "tests/ui/non_send_field_in_send_ty.rs"}, {"sha": "8b8a1d16d9bb96172bd747f011814853230725b9", "filename": "tests/ui/non_send_fields_in_send_ty.stderr", "status": "renamed", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/fb0353b28d746108932ffb0a9ce8535c115c0acf/tests%2Fui%2Fnon_send_fields_in_send_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb0353b28d746108932ffb0a9ce8535c115c0acf/tests%2Fui%2Fnon_send_fields_in_send_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_send_fields_in_send_ty.stderr?ref=fb0353b28d746108932ffb0a9ce8535c115c0acf", "patch": "@@ -1,167 +1,167 @@\n error: this implementation is unsound, as some fields in `RingBuffer<T>` are `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:16:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:16:1\n    |\n LL | unsafe impl<T> Send for RingBuffer<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::non-send-field-in-send-ty` implied by `-D warnings`\n+   = note: `-D clippy::non-send-fields-in-send-ty` implied by `-D warnings`\n note: the type of field `data` is `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:11:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:11:5\n    |\n LL |     data: Vec<UnsafeCell<T>>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: add bounds on type parameter `T` that satisfy `Vec<UnsafeCell<T>>: Send`\n \n error: this implementation is unsound, as some fields in `MvccRwLock<T>` are `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:24:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:24:1\n    |\n LL | unsafe impl<T> Send for MvccRwLock<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the type of field `lock` is `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:21:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:21:5\n    |\n LL |     lock: Mutex<Box<T>>,\n    |     ^^^^^^^^^^^^^^^^^^^\n    = help: add bounds on type parameter `T` that satisfy `Mutex<Box<T>>: Send`\n \n error: this implementation is unsound, as some fields in `ArcGuard<RC, T>` are `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:32:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:32:1\n    |\n LL | unsafe impl<RC, T: Send> Send for ArcGuard<RC, T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the type of field `head` is `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:29:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:29:5\n    |\n LL |     head: Arc<RC>,\n    |     ^^^^^^^^^^^^^\n    = help: add bounds on type parameter `RC` that satisfy `Arc<RC>: Send`\n \n error: this implementation is unsound, as some fields in `DeviceHandle<T>` are `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:48:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:48:1\n    |\n LL | unsafe impl<T: UsbContext> Send for DeviceHandle<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the type of field `context` is `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:44:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:44:5\n    |\n LL |     context: T,\n    |     ^^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n \n error: this implementation is unsound, as some fields in `NoGeneric` are `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:55:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:55:1\n    |\n LL | unsafe impl Send for NoGeneric {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the type of field `rc_is_not_send` is `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:52:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:52:5\n    |\n LL |     rc_is_not_send: Rc<String>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use a thread-safe type that implements `Send`\n \n error: this implementation is unsound, as some fields in `MultiField<T>` are `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:63:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:63:1\n    |\n LL | unsafe impl<T> Send for MultiField<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the type of field `field1` is `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:58:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:58:5\n    |\n LL |     field1: T,\n    |     ^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n note: the type of field `field2` is `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:59:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:59:5\n    |\n LL |     field2: T,\n    |     ^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n note: the type of field `field3` is `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:60:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:60:5\n    |\n LL |     field3: T,\n    |     ^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n \n error: this implementation is unsound, as some fields in `MyOption<T>` are `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:70:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:70:1\n    |\n LL | unsafe impl<T> Send for MyOption<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the type of field `0` is `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:66:12\n+  --> $DIR/non_send_fields_in_send_ty.rs:66:12\n    |\n LL |     MySome(T),\n    |            ^\n    = help: add `T: Send` bound in `Send` impl\n \n error: this implementation is unsound, as some fields in `MultiParam<A, B>` are `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:77:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:77:1\n    |\n LL | unsafe impl<A, B> Send for MultiParam<A, B> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the type of field `vec` is `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:74:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:74:5\n    |\n LL |     vec: Vec<(A, B)>,\n    |     ^^^^^^^^^^^^^^^^\n    = help: add bounds on type parameters `A, B` that satisfy `Vec<(A, B)>: Send`\n \n error: this implementation is unsound, as some fields in `HeuristicTest` are `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:95:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:95:1\n    |\n LL | unsafe impl Send for HeuristicTest {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the type of field `field4` is `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:90:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:90:5\n    |\n LL |     field4: (*const NonSend, Rc<u8>),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use a thread-safe type that implements `Send`\n \n error: this implementation is unsound, as some fields in `AttrTest3<T>` are `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:114:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:114:1\n    |\n LL | unsafe impl<T> Send for AttrTest3<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the type of field `0` is `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:109:11\n+  --> $DIR/non_send_fields_in_send_ty.rs:109:11\n    |\n LL |     Enum2(T),\n    |           ^\n    = help: add `T: Send` bound in `Send` impl\n \n error: this implementation is unsound, as some fields in `Complex<P, u32>` are `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:122:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:122:1\n    |\n LL | unsafe impl<P> Send for Complex<P, u32> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the type of field `field1` is `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:118:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:118:5\n    |\n LL |     field1: A,\n    |     ^^^^^^^^^\n    = help: add `P: Send` bound in `Send` impl\n \n error: this implementation is unsound, as some fields in `Complex<Q, MutexGuard<'static, bool>>` are `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:125:1\n+  --> $DIR/non_send_fields_in_send_ty.rs:125:1\n    |\n LL | unsafe impl<Q: Send> Send for Complex<Q, MutexGuard<'static, bool>> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the type of field `field2` is `!Send`\n-  --> $DIR/non_send_field_in_send_ty.rs:119:5\n+  --> $DIR/non_send_fields_in_send_ty.rs:119:5\n    |\n LL |     field2: B,\n    |     ^^^^^^^^^", "previous_filename": "tests/ui/non_send_field_in_send_ty.stderr"}]}