{"sha": "2f52d1d568913f32a6bd24affeeb5ec594061a3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNTJkMWQ1Njg5MTNmMzJhNmJkMjRhZmZlZWI1ZWM1OTQwNjFhM2M=", "commit": {"author": {"name": "Phil Turnbull", "email": "philip.turnbull@gmail.com", "date": "2017-01-22T21:42:57Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-15T11:01:09Z"}, "message": "Return Spans instead of Cow<&str>'s", "tree": {"sha": "2865f3dd00cd4f7fcab2bb040a6b60afd478583b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2865f3dd00cd4f7fcab2bb040a6b60afd478583b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f52d1d568913f32a6bd24affeeb5ec594061a3c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJa0zD1AAoJELb6Bqbg4mZb/2UP/RRMw6//oZGwQKvtpwz5/aTV\nn4ysG6xhqaEehIYuSl4dHZ2gRRf+mmn0TjBTsZWFIvjpIYCp/94lUesTN6DaeQOC\npIH+97nesuqHxPgLa/V/7lYE4kMaXnfgLK4TuEPhT+7qM3WooolGgrxSQliOadvd\nPZshI+WL/PxBheXtnHOrH0S90Y5Js0rtLS0//MBVumlRhgA9W/MYRxOkalTjEgzb\nIDiXfauMGR4p3hbKV8uPNYXiy8zwzU2e8fzOCYBaeBBFSYF5vXgrE4TNCX7EZJY6\nNu8gXR5hSwwjO9K54C6/T+4mROdZYazuW9n/qjqcapqCf2+PGQFZiCyQNfUMyr75\nYK9XmXcnNZKiQthmt+HH/FTv4ddQGBMyPCUVG4no6ZxmyYScdRSfLNc0y2vAyvYb\n6suRZsEOOeALiChTVB6zE0t5vAtSdo8ZD2B38wErJAwEF6d6UUi1upoLOqD5uc07\ntMj6D5ZAaCkqAu8d9SsURfreZ+E5t6+zz8LuCHm1n4h28RCVm5BN8PKBxAoeo3aj\nGX5Yj9XV8xkvC0XY6PPqjMFxVr7mxArd20ugfOvraNlFKWYjoRxiTixqNRNW6uI5\nVN7DPcbMKAKbxleRC54wu+a7Wf5l8kybaR4pR9m6ozo9NgZ5xk1CYL9DMMFVhw+9\nSoWfco3gaNgRUdasXgSt\n=Jjs2\n-----END PGP SIGNATURE-----", "payload": "tree 2865f3dd00cd4f7fcab2bb040a6b60afd478583b\nparent 30f2480fd879359f8773d5c29807130c3a489785\nauthor Phil Turnbull <philip.turnbull@gmail.com> 1485121377 -0500\ncommitter Philipp Hansch <dev@phansch.net> 1523790069 +0200\n\nReturn Spans instead of Cow<&str>'s\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f52d1d568913f32a6bd24affeeb5ec594061a3c", "html_url": "https://github.com/rust-lang/rust/commit/2f52d1d568913f32a6bd24affeeb5ec594061a3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f52d1d568913f32a6bd24affeeb5ec594061a3c/comments", "author": {"login": "philipturnbull", "id": 45588, "node_id": "MDQ6VXNlcjQ1NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/45588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philipturnbull", "html_url": "https://github.com/philipturnbull", "followers_url": "https://api.github.com/users/philipturnbull/followers", "following_url": "https://api.github.com/users/philipturnbull/following{/other_user}", "gists_url": "https://api.github.com/users/philipturnbull/gists{/gist_id}", "starred_url": "https://api.github.com/users/philipturnbull/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philipturnbull/subscriptions", "organizations_url": "https://api.github.com/users/philipturnbull/orgs", "repos_url": "https://api.github.com/users/philipturnbull/repos", "events_url": "https://api.github.com/users/philipturnbull/events{/privacy}", "received_events_url": "https://api.github.com/users/philipturnbull/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30f2480fd879359f8773d5c29807130c3a489785", "url": "https://api.github.com/repos/rust-lang/rust/commits/30f2480fd879359f8773d5c29807130c3a489785", "html_url": "https://github.com/rust-lang/rust/commit/30f2480fd879359f8773d5c29807130c3a489785"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "4c85b3d8e7f32d76fbfa256853ded8c88f2be8af", "filename": "clippy_lints/src/map_nil_fn.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2f52d1d568913f32a6bd24affeeb5ec594061a3c/clippy_lints%2Fsrc%2Fmap_nil_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f52d1d568913f32a6bd24affeeb5ec594061a3c/clippy_lints%2Fsrc%2Fmap_nil_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_nil_fn.rs?ref=2f52d1d568913f32a6bd24affeeb5ec594061a3c", "patch": "@@ -1,7 +1,7 @@\n use rustc::hir;\n use rustc::lint::*;\n use rustc::ty;\n-use std::borrow::Cow;\n+use syntax::codemap::Span;\n use utils::{in_macro, iter_input_pats, match_type, method_chain_args, snippet, span_lint_and_then};\n use utils::paths;\n \n@@ -72,7 +72,7 @@ fn is_nil_expression(cx: &LateContext, expr: &hir::Expr) -> bool {\n // semicolons, which causes problems when generating a suggestion. Given an\n // expression that evaluates to '()' or '!', recursively remove useless braces\n // and semi-colons until is suitable for including in the suggestion template\n-fn reduce_nil_expression<'a>(cx: &LateContext, expr: &'a hir::Expr) -> Option<Cow<'a, str>> {\n+fn reduce_nil_expression<'a>(cx: &LateContext, expr: &'a hir::Expr) -> Option<Span> {\n     if !is_nil_expression(cx, expr) {\n         return None;\n     }\n@@ -81,7 +81,7 @@ fn reduce_nil_expression<'a>(cx: &LateContext, expr: &'a hir::Expr) -> Option<Co\n         hir::ExprCall(_, _) |\n         hir::ExprMethodCall(_, _, _) => {\n             // Calls can't be reduced any more\n-            Some(snippet(cx, expr.span, \"_\"))\n+            Some(expr.span)\n         },\n         hir::ExprBlock(ref block) => {\n             match (&block.stmts[..], block.expr.as_ref()) {\n@@ -92,8 +92,8 @@ fn reduce_nil_expression<'a>(cx: &LateContext, expr: &'a hir::Expr) -> Option<Co\n                 (&[ref inner_stmt], None) => {\n                     // Reduce `{ X; }` to `X` or `X;`\n                     match inner_stmt.node {\n-                        hir::StmtDecl(ref d, _) => Some(snippet(cx, d.span, \"_\")),\n-                        hir::StmtExpr(ref e, _) => Some(snippet(cx, e.span, \"_\")),\n+                        hir::StmtDecl(ref d, _) => Some(d.span),\n+                        hir::StmtExpr(ref e, _) => Some(e.span),\n                         hir::StmtSemi(ref e, _) => {\n                             if is_nil_expression(cx, e) {\n                                 // `X` returns nil so we can strip the\n@@ -102,7 +102,7 @@ fn reduce_nil_expression<'a>(cx: &LateContext, expr: &'a hir::Expr) -> Option<Co\n                             } else {\n                                 // `X` doesn't return nil so it needs a\n                                 // trailing semicolon\n-                                Some(snippet(cx, inner_stmt.span, \"_\"))\n+                                Some(inner_stmt.span)\n                             }\n                         },\n                     }\n@@ -114,20 +114,16 @@ fn reduce_nil_expression<'a>(cx: &LateContext, expr: &'a hir::Expr) -> Option<Co\n     }\n }\n \n-fn reduce_nil_closure<'a, 'tcx>(\n-    cx: &LateContext<'a, 'tcx>,\n-    expr: &'a hir::Expr\n-) -> Option<(Cow<'a, str>, Cow<'a, str>)> {\n+fn reduce_nil_closure<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'a hir::Expr) -> Option<(Span, Span)> {\n     if let hir::ExprClosure(_, ref decl, inner_expr_id, _) = expr.node {\n         let body = cx.tcx.map.body(inner_expr_id);\n \n         if_let_chain! {[\n             decl.inputs.len() == 1,\n             let Some(binding) = iter_input_pats(&decl, body).next(),\n-            let Some(expr_snippet) = reduce_nil_expression(cx, &body.value),\n+            let Some(expr_span) = reduce_nil_expression(cx, &body.value),\n         ], {\n-            let binding_snippet = snippet(cx, binding.pat.span, \"_\");\n-            return Some((binding_snippet, expr_snippet));\n+            return Some((binding.pat.span, expr_span))\n         }}\n     }\n     None\n@@ -152,12 +148,12 @@ fn lint_map_nil_fn(cx: &LateContext, stmt: &hir::Stmt, expr: &hir::Expr, map_arg\n                            expr.span,\n                            msg,\n                            |db| { db.span_suggestion(stmt.span, \"try this\", suggestion); });\n-    } else if let Some((binding_snippet, expr_snippet)) = reduce_nil_closure(cx, fn_arg) {\n+    } else if let Some((binding_span, expr_span)) = reduce_nil_closure(cx, fn_arg) {\n         let msg = \"called `map(f)` on an Option value where `f` is a nil closure\";\n         let suggestion = format!(\"if let Some({0}) = {1} {{ {2} }}\",\n-                                 binding_snippet,\n+                                 snippet(cx, binding_span, \"_\"),\n                                  snippet(cx, var_arg.span, \"_\"),\n-                                 expr_snippet);\n+                                 snippet(cx, expr_span, \"_\"));\n \n         span_lint_and_then(cx,\n                            OPTION_MAP_NIL_FN,"}]}