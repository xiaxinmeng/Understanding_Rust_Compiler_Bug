{"sha": "87ad6683d6cc3c1e2597a3a37e03fe4330414fd3", "node_id": "C_kwDOAAsO6NoAKDg3YWQ2NjgzZDZjYzNjMWUyNTk3YTNhMzdlMDNmZTQzMzA0MTRmZDM", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-02-23T23:46:09Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-03-07T17:43:27Z"}, "message": "Distinguish borrows of copies from other borrows", "tree": {"sha": "c8bac3c76149c7443d3de60b1cd3d74a4d921db0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8bac3c76149c7443d3de60b1cd3d74a4d921db0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87ad6683d6cc3c1e2597a3a37e03fe4330414fd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87ad6683d6cc3c1e2597a3a37e03fe4330414fd3", "html_url": "https://github.com/rust-lang/rust/commit/87ad6683d6cc3c1e2597a3a37e03fe4330414fd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87ad6683d6cc3c1e2597a3a37e03fe4330414fd3/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac804f27a8ce2e02fd3a9c5eff83098258b78da6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac804f27a8ce2e02fd3a9c5eff83098258b78da6", "html_url": "https://github.com/rust-lang/rust/commit/ac804f27a8ce2e02fd3a9c5eff83098258b78da6"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "b07e3a18e3fde1c10de62ea8ac5e02f6d851e942", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/87ad6683d6cc3c1e2597a3a37e03fe4330414fd3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ad6683d6cc3c1e2597a3a37e03fe4330414fd3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=87ad6683d6cc3c1e2597a3a37e03fe4330414fd3", "patch": "@@ -114,15 +114,31 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n             .borrowed\n             .insert(TrackedValue::from_place_with_projections_allowed(place_with_id));\n \n-        // XXX -- we need to distinguish \"consuming a copy\" from other borrows\n+        // Keep track of whether this is a borrowed temporary (i.e. a borrow of an RValue)\n+        // so that later in generator_interior we can use the correct scope.\n         //\n-        // XXX -- we need to distinguish `&*E` where `E: &T` which is not creating a temporary\n-        // even though the place-base E is an rvalue\n+        // We ignore borrows that are the result of an autoref because these will be\n+        // immediately consumed and should not extend the temporary's lifetime.\n         if let (false, PlaceBase::Rvalue) = (is_autoref, place_with_id.place.base) {\n             self.places.borrowed_temporaries.insert(place_with_id.hir_id);\n         }\n     }\n \n+    fn copy(\n+        &mut self,\n+        place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n+        _diag_expr_id: HirId,\n+    ) {\n+        debug!(\"copy: place_with_id = {place_with_id:?}\");\n+\n+        self.places\n+            .borrowed\n+            .insert(TrackedValue::from_place_with_projections_allowed(place_with_id));\n+\n+        // For copied we treat this mostly like a borrow except that we don't add the place\n+        // to borrowed_temporaries because the copy is consumed.\n+    }\n+\n     fn mutate(\n         &mut self,\n         assignee_place: &expr_use_visitor::PlaceWithHirId<'tcx>,"}, {"sha": "b15f7cf2889f1cd153dc6aa8c52de188126ebae8", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/87ad6683d6cc3c1e2597a3a37e03fe4330414fd3/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ad6683d6cc3c1e2597a3a37e03fe4330414fd3/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=87ad6683d6cc3c1e2597a3a37e03fe4330414fd3", "patch": "@@ -48,6 +48,14 @@ pub trait Delegate<'tcx> {\n         is_autoref: bool,\n     );\n \n+    /// The value found at `place` is being copied.\n+    /// `diag_expr_id` is the id used for diagnostics (see `consume` for more details).\n+    fn copy(&mut self, place_with_id: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId) {\n+        // In most cases, treating a copy as a borrow is the right thing, so we forward\n+        // this to the borrow callback by default.\n+        self.borrow(place_with_id, diag_expr_id, ty::BorrowKind::ImmBorrow, false)\n+    }\n+\n     /// The path at `assignee_place` is being assigned to.\n     /// `diag_expr_id` is the id used for diagnostics (see `consume` for more details).\n     fn mutate(&mut self, assignee_place: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId);\n@@ -598,7 +606,12 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n             adjustment::AutoBorrow::RawPtr(m) => {\n                 debug!(\"walk_autoref: expr.hir_id={} base_place={:?}\", expr.hir_id, base_place);\n \n-                self.delegate.borrow(base_place, base_place.hir_id, ty::BorrowKind::from_mutbl(m), true);\n+                self.delegate.borrow(\n+                    base_place,\n+                    base_place.hir_id,\n+                    ty::BorrowKind::from_mutbl(m),\n+                    true,\n+                );\n             }\n         }\n     }\n@@ -839,9 +852,7 @@ fn delegate_consume<'a, 'tcx>(\n \n     match mode {\n         ConsumeMode::Move => delegate.consume(place_with_id, diag_expr_id),\n-        ConsumeMode::Copy => {\n-            delegate.borrow(place_with_id, diag_expr_id, ty::BorrowKind::ImmBorrow, false)\n-        }\n+        ConsumeMode::Copy => delegate.copy(place_with_id, diag_expr_id),\n     }\n }\n "}]}