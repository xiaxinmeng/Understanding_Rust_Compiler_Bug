{"sha": "a929e6070777279ab326abd27efdc724afecd334", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MjllNjA3MDc3NzI3OWFiMzI2YWJkMjdlZmRjNzI0YWZlY2QzMzQ=", "commit": {"author": {"name": "tabokie", "email": "xy.tao@outlook.com", "date": "2021-09-08T03:46:20Z"}, "committer": {"name": "tabokie", "email": "xy.tao@outlook.com", "date": "2021-09-08T03:46:20Z"}, "message": "rearrange to be panic safe\n\nSigned-off-by: tabokie <xy.tao@outlook.com>", "tree": {"sha": "87fd575433a1c20f604ebc3d7accd94ddee25d58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87fd575433a1c20f604ebc3d7accd94ddee25d58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a929e6070777279ab326abd27efdc724afecd334", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a929e6070777279ab326abd27efdc724afecd334", "html_url": "https://github.com/rust-lang/rust/commit/a929e6070777279ab326abd27efdc724afecd334", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a929e6070777279ab326abd27efdc724afecd334/comments", "author": {"login": "tabokie", "id": 27005812, "node_id": "MDQ6VXNlcjI3MDA1ODEy", "avatar_url": "https://avatars.githubusercontent.com/u/27005812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tabokie", "html_url": "https://github.com/tabokie", "followers_url": "https://api.github.com/users/tabokie/followers", "following_url": "https://api.github.com/users/tabokie/following{/other_user}", "gists_url": "https://api.github.com/users/tabokie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tabokie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tabokie/subscriptions", "organizations_url": "https://api.github.com/users/tabokie/orgs", "repos_url": "https://api.github.com/users/tabokie/repos", "events_url": "https://api.github.com/users/tabokie/events{/privacy}", "received_events_url": "https://api.github.com/users/tabokie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tabokie", "id": 27005812, "node_id": "MDQ6VXNlcjI3MDA1ODEy", "avatar_url": "https://avatars.githubusercontent.com/u/27005812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tabokie", "html_url": "https://github.com/tabokie", "followers_url": "https://api.github.com/users/tabokie/followers", "following_url": "https://api.github.com/users/tabokie/following{/other_user}", "gists_url": "https://api.github.com/users/tabokie/gists{/gist_id}", "starred_url": "https://api.github.com/users/tabokie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tabokie/subscriptions", "organizations_url": "https://api.github.com/users/tabokie/orgs", "repos_url": "https://api.github.com/users/tabokie/repos", "events_url": "https://api.github.com/users/tabokie/events{/privacy}", "received_events_url": "https://api.github.com/users/tabokie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a456a55feaee9cdda257f80720c09a5dc731e5d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a456a55feaee9cdda257f80720c09a5dc731e5d4", "html_url": "https://github.com/rust-lang/rust/commit/a456a55feaee9cdda257f80720c09a5dc731e5d4"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "f703efd6fbe9785d122515722715015f5bf897bd", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a929e6070777279ab326abd27efdc724afecd334/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a929e6070777279ab326abd27efdc724afecd334/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=a929e6070777279ab326abd27efdc724afecd334", "patch": "@@ -417,24 +417,23 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         }\n     }\n \n-    /// Append all values from `src` to `self`, wrapping around if needed.\n+    /// Append all values from `src` to `dst`, wrapping around if needed.\n     /// Assumes capacity is sufficient.\n     #[inline]\n-    unsafe fn append_slice(&mut self, src: &[T]) {\n-        debug_assert!(self.len() + src.len() + 1 <= self.cap());\n-        let head_room = self.cap() - self.head;\n-        if self.head < self.tail || src.len() <= head_room {\n+    unsafe fn copy_slice(&mut self, dst: usize, src: &[T]) {\n+        debug_assert!(src.len() <= self.cap());\n+        let head_room = self.cap() - dst;\n+        if src.len() <= head_room {\n             unsafe {\n-                ptr::copy_nonoverlapping(src.as_ptr(), self.ptr().add(self.head), src.len());\n+                ptr::copy_nonoverlapping(src.as_ptr(), self.ptr().add(dst), src.len());\n             }\n         } else {\n             let (left, right) = src.split_at(head_room);\n             unsafe {\n-                ptr::copy_nonoverlapping(left.as_ptr(), self.ptr().add(self.head), left.len());\n+                ptr::copy_nonoverlapping(left.as_ptr(), self.ptr().add(dst), left.len());\n                 ptr::copy_nonoverlapping(right.as_ptr(), self.ptr(), right.len());\n             }\n         }\n-        self.head = self.wrap_add(self.head, src.len());\n     }\n \n     /// Frobs the head and tail sections around to handle the fact that we\n@@ -2111,9 +2110,12 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         self.reserve(other.len());\n         unsafe {\n             let (left, right) = other.as_slices();\n-            self.append_slice(left);\n-            self.append_slice(right);\n+            self.copy_slice(self.head, left);\n+            self.copy_slice(self.wrap_add(self.head, left.len()), right);\n         }\n+        // SAFETY: Update pointers after copying to avoid leaving doppelganger\n+        // in case of panics.\n+        self.head = self.wrap_add(self.head, other.len());\n         // Silently drop values in `other`.\n         other.tail = other.head;\n     }"}]}