{"sha": "8430042a49bbd49bbb4fbc54f457feb5fb614f56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MzAwNDJhNDliYmQ0OWJiYjRmYmM1NGY0NTdmZWI1ZmI2MTRmNTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-26T17:42:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-26T17:42:52Z"}, "message": "Auto merge of #39066 - arielb1:lifetime-extension-test, r=nikomatsakis\n\nEnd temporary lifetimes being extended by `let X: &_` hints\n\ncc #39283\n\nr? @nikomatsakis", "tree": {"sha": "a5fb7095092902f3168b86d671f0813d1228eaa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5fb7095092902f3168b86d671f0813d1228eaa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8430042a49bbd49bbb4fbc54f457feb5fb614f56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8430042a49bbd49bbb4fbc54f457feb5fb614f56", "html_url": "https://github.com/rust-lang/rust/commit/8430042a49bbd49bbb4fbc54f457feb5fb614f56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8430042a49bbd49bbb4fbc54f457feb5fb614f56/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "491b978822a56f23acf9ba46f90861958bc1e36c", "url": "https://api.github.com/repos/rust-lang/rust/commits/491b978822a56f23acf9ba46f90861958bc1e36c", "html_url": "https://github.com/rust-lang/rust/commit/491b978822a56f23acf9ba46f90861958bc1e36c"}, {"sha": "82a280597d967dc3ec8686f160a0afea4ad45837", "url": "https://api.github.com/repos/rust-lang/rust/commits/82a280597d967dc3ec8686f160a0afea4ad45837", "html_url": "https://github.com/rust-lang/rust/commit/82a280597d967dc3ec8686f160a0afea4ad45837"}], "stats": {"total": 286, "additions": 205, "deletions": 81}, "files": [{"sha": "ef93a10808bfdcb95a6520ac7a3e7f6f2c0736ba", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=8430042a49bbd49bbb4fbc54f457feb5fb614f56", "patch": "@@ -23,7 +23,6 @@ use hir;\n use middle::free_region::FreeRegionMap;\n use middle::mem_categorization as mc;\n use middle::mem_categorization::McResult;\n-use middle::region::CodeExtent;\n use middle::lang_items;\n use mir::tcx::LvalueTy;\n use ty::subst::{Kind, Subst, Substs};\n@@ -1622,10 +1621,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.tables.borrow().method_map.contains_key(&ty::MethodCall::expr(id))\n     }\n \n-    pub fn temporary_scope(&self, rvalue_id: ast::NodeId) -> Option<CodeExtent> {\n-        self.tcx.region_maps.temporary_scope(rvalue_id)\n-    }\n-\n     pub fn upvar_capture(&self, upvar_id: ty::UpvarId) -> Option<ty::UpvarCapture<'tcx>> {\n         self.tables.borrow().upvar_capture_map.get(&upvar_id).cloned()\n     }"}, {"sha": "2ca0069560cb7c1686b431861606d188cf5269c6", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=8430042a49bbd49bbb4fbc54f457feb5fb614f56", "patch": "@@ -296,6 +296,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 arg.id,\n                 arg.pat.span,\n                 fn_body_scope_r, // Args live only as long as the fn body.\n+                fn_body_scope_r,\n                 arg_ty);\n \n             self.walk_irrefutable_pat(arg_cmt, &arg.pat);"}, {"sha": "955bec00433129db7e703f92395134f402604957", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=8430042a49bbd49bbb4fbc54f457feb5fb614f56", "patch": "@@ -88,7 +88,8 @@ use std::rc::Rc;\n \n #[derive(Clone, PartialEq)]\n pub enum Categorization<'tcx> {\n-    Rvalue(&'tcx ty::Region),                    // temporary val, argument is its scope\n+    // temporary val, argument is its scope\n+    Rvalue(&'tcx ty::Region, &'tcx ty::Region),\n     StaticItem,\n     Upvar(Upvar),                          // upvar referenced by closure env\n     Local(ast::NodeId),                    // local variable\n@@ -760,11 +761,18 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n \n     /// Returns the lifetime of a temporary created by expr with id `id`.\n     /// This could be `'static` if `id` is part of a constant expression.\n-    pub fn temporary_scope(&self, id: ast::NodeId) -> &'tcx ty::Region {\n-        self.tcx().mk_region(match self.infcx.temporary_scope(id) {\n+    pub fn temporary_scope(&self, id: ast::NodeId) -> (&'tcx ty::Region, &'tcx ty::Region)\n+    {\n+        let (scope, old_scope) =\n+            self.tcx().region_maps.old_and_new_temporary_scope(id);\n+        (self.tcx().mk_region(match scope {\n+            Some(scope) => ty::ReScope(scope),\n+            None => ty::ReStatic\n+        }),\n+         self.tcx().mk_region(match old_scope {\n             Some(scope) => ty::ReScope(scope),\n             None => ty::ReStatic\n-        })\n+        }))\n     }\n \n     pub fn cat_rvalue_node(&self,\n@@ -785,12 +793,13 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         // Compute maximum lifetime of this rvalue. This is 'static if\n         // we can promote to a constant, otherwise equal to enclosing temp\n         // lifetime.\n-        let re = if promotable {\n-            self.tcx().mk_region(ty::ReStatic)\n+        let (re, old_re) = if promotable {\n+            (self.tcx().mk_region(ty::ReStatic),\n+             self.tcx().mk_region(ty::ReStatic))\n         } else {\n             self.temporary_scope(id)\n         };\n-        let ret = self.cat_rvalue(id, span, re, expr_ty);\n+        let ret = self.cat_rvalue(id, span, re, old_re, expr_ty);\n         debug!(\"cat_rvalue_node ret {:?}\", ret);\n         ret\n     }\n@@ -799,11 +808,12 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                       cmt_id: ast::NodeId,\n                       span: Span,\n                       temp_scope: &'tcx ty::Region,\n+                      old_temp_scope: &'tcx ty::Region,\n                       expr_ty: Ty<'tcx>) -> cmt<'tcx> {\n         let ret = Rc::new(cmt_ {\n             id:cmt_id,\n             span:span,\n-            cat:Categorization::Rvalue(temp_scope),\n+            cat:Categorization::Rvalue(temp_scope, old_temp_scope),\n             mutbl:McDeclared,\n             ty:expr_ty,\n             note: NoteNone\n@@ -1386,7 +1396,9 @@ impl<'tcx> fmt::Debug for Categorization<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             Categorization::StaticItem => write!(f, \"static\"),\n-            Categorization::Rvalue(r) => write!(f, \"rvalue({:?})\", r),\n+            Categorization::Rvalue(r, or) => {\n+                write!(f, \"rvalue({:?}, {:?})\", r, or)\n+            }\n             Categorization::Local(id) => {\n                let name = ty::tls::with(|tcx| tcx.local_var_name_str(id));\n                write!(f, \"local({})\", name)"}, {"sha": "a19f15a9329fbafe4fe9f421640fd8afe1a23589", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 52, "deletions": 10, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=8430042a49bbd49bbb4fbc54f457feb5fb614f56", "patch": "@@ -272,6 +272,13 @@ pub struct RegionMaps {\n     /// block (see `terminating_scopes`).\n     rvalue_scopes: RefCell<NodeMap<CodeExtent>>,\n \n+    /// Records the value of rvalue scopes before they were shrunk by\n+    /// #36082, for error reporting.\n+    ///\n+    /// FIXME: this should be temporary. Remove this by 1.18.0 or\n+    /// so.\n+    shrunk_rvalue_scopes: RefCell<NodeMap<CodeExtent>>,\n+\n     /// Encodes the hierarchy of fn bodies. Every fn body (including\n     /// closures) forms its own distinct region hierarchy, rooted in\n     /// the block that is the fn body. This map points from the id of\n@@ -419,11 +426,7 @@ impl RegionMaps {\n             e(child, parent)\n         }\n     }\n-    pub fn each_rvalue_scope<E>(&self, mut e:E) where E: FnMut(&ast::NodeId, &CodeExtent) {\n-        for (child, parent) in self.rvalue_scopes.borrow().iter() {\n-            e(child, parent)\n-        }\n-    }\n+\n     /// Records that `sub_fn` is defined within `sup_fn`. These ids\n     /// should be the id of the block that is the fn body, which is\n     /// also the root of the region hierarchy for that fn.\n@@ -457,6 +460,12 @@ impl RegionMaps {\n         self.rvalue_scopes.borrow_mut().insert(var, lifetime);\n     }\n \n+    fn record_shrunk_rvalue_scope(&self, var: ast::NodeId, lifetime: CodeExtent) {\n+        debug!(\"record_rvalue_scope(sub={:?}, sup={:?})\", var, lifetime);\n+        assert!(var != lifetime.node_id(self));\n+        self.shrunk_rvalue_scopes.borrow_mut().insert(var, lifetime);\n+    }\n+\n     pub fn opt_encl_scope(&self, id: CodeExtent) -> Option<CodeExtent> {\n         //! Returns the narrowest scope that encloses `id`, if any.\n         self.scope_map.borrow()[id.0 as usize].into_option()\n@@ -476,6 +485,30 @@ impl RegionMaps {\n         }\n     }\n \n+    pub fn temporary_scope2(&self, expr_id: ast::NodeId) -> (Option<CodeExtent>, bool) {\n+        let temporary_scope = self.temporary_scope(expr_id);\n+        let was_shrunk = match self.shrunk_rvalue_scopes.borrow().get(&expr_id) {\n+            Some(&s) => {\n+                info!(\"temporary_scope2({:?}, scope={:?}, shrunk={:?})\",\n+                      expr_id, temporary_scope, s);\n+                temporary_scope != Some(s)\n+            }\n+            _ => false\n+        };\n+        info!(\"temporary_scope2({:?}) - was_shrunk={:?}\", expr_id, was_shrunk);\n+        (temporary_scope, was_shrunk)\n+    }\n+\n+    pub fn old_and_new_temporary_scope(&self, expr_id: ast::NodeId) ->\n+        (Option<CodeExtent>, Option<CodeExtent>)\n+    {\n+        let temporary_scope = self.temporary_scope(expr_id);\n+        (temporary_scope,\n+         self.shrunk_rvalue_scopes\n+             .borrow().get(&expr_id).cloned()\n+             .or(temporary_scope))\n+    }\n+\n     pub fn temporary_scope(&self, expr_id: ast::NodeId) -> Option<CodeExtent> {\n         //! Returns the scope when temp created by expr_id will be cleaned up\n \n@@ -929,8 +962,10 @@ fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>,\n         let is_borrow =\n             if let Some(ref ty) = local.ty { is_borrowed_ty(&ty) } else { false };\n \n-        if is_binding_pat(&local.pat) || is_borrow {\n-            record_rvalue_scope(visitor, &expr, blk_scope);\n+        if is_binding_pat(&local.pat) {\n+            record_rvalue_scope(visitor, &expr, blk_scope, false);\n+        } else if is_borrow {\n+            record_rvalue_scope(visitor, &expr, blk_scope, true);\n         }\n     }\n \n@@ -995,7 +1030,7 @@ fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>,\n         match expr.node {\n             hir::ExprAddrOf(_, ref subexpr) => {\n                 record_rvalue_scope_if_borrow_expr(visitor, &subexpr, blk_id);\n-                record_rvalue_scope(visitor, &subexpr, blk_id);\n+                record_rvalue_scope(visitor, &subexpr, blk_id, false);\n             }\n             hir::ExprStruct(_, ref fields, _) => {\n                 for field in fields {\n@@ -1040,15 +1075,21 @@ fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>,\n     /// Note: ET is intended to match \"rvalues or lvalues based on rvalues\".\n     fn record_rvalue_scope<'a>(visitor: &mut RegionResolutionVisitor,\n                                expr: &'a hir::Expr,\n-                               blk_scope: CodeExtent) {\n+                               blk_scope: CodeExtent,\n+                               is_shrunk: bool) {\n         let mut expr = expr;\n         loop {\n             // Note: give all the expressions matching `ET` with the\n             // extended temporary lifetime, not just the innermost rvalue,\n             // because in trans if we must compile e.g. `*rvalue()`\n             // into a temporary, we request the temporary scope of the\n             // outer expression.\n-            visitor.region_maps.record_rvalue_scope(expr.id, blk_scope);\n+            if is_shrunk {\n+                // this changed because of #36082\n+                visitor.region_maps.record_shrunk_rvalue_scope(expr.id, blk_scope);\n+            } else {\n+                visitor.region_maps.record_rvalue_scope(expr.id, blk_scope);\n+            }\n \n             match expr.node {\n                 hir::ExprAddrOf(_, ref subexpr) |\n@@ -1225,6 +1266,7 @@ pub fn resolve_crate(sess: &Session, map: &hir_map::Map) -> RegionMaps {\n         scope_map: RefCell::new(vec![]),\n         var_map: RefCell::new(NodeMap()),\n         rvalue_scopes: RefCell::new(NodeMap()),\n+        shrunk_rvalue_scopes: RefCell::new(NodeMap()),\n         fn_tree: RefCell::new(NodeMap()),\n     };\n     let root_extent = maps.bogus_code_extent("}, {"sha": "bbfb7e5874ea0776d37a9504199acef93f79bfe4", "filename": "src/librustc_borrowck/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=8430042a49bbd49bbb4fbc54f457feb5fb614f56", "patch": "@@ -108,7 +108,7 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n         //! rooting etc, and presuming `cmt` is not mutated.\n \n         match cmt.cat {\n-            Categorization::Rvalue(temp_scope) => {\n+            Categorization::Rvalue(temp_scope, _) => {\n                 temp_scope\n             }\n             Categorization::Upvar(..) => {"}, {"sha": "4a92578fed512672a8ce20579bd3e4aad17b8f93", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=8430042a49bbd49bbb4fbc54f457feb5fb614f56", "patch": "@@ -967,7 +967,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             err_mutbl => self.note_and_explain_mutbl_error(db, &err, &error_span),\n             err_out_of_scope(super_scope, sub_scope, cause) => {\n                 let (value_kind, value_msg) = match err.cmt.cat {\n-                    mc::Categorization::Rvalue(_) =>\n+                    mc::Categorization::Rvalue(..) =>\n                         (\"temporary value\", \"temporary value created here\"),\n                     _ =>\n                         (\"borrowed value\", \"borrow occurs here\")\n@@ -1061,6 +1061,17 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 if let Some(_) = statement_scope_span(self.tcx, super_scope) {\n                     db.note(\"consider using a `let` binding to increase its lifetime\");\n                 }\n+\n+\n+\n+                match err.cmt.cat {\n+                    mc::Categorization::Rvalue(r, or) if r != or => {\n+                        db.note(\"\\\n+before rustc 1.16, this temporary lived longer - see issue #39283 \\\n+(https://github.com/rust-lang/rust/issues/39283)\");\n+                    }\n+                    _ => {}\n+                }\n             }\n \n             err_borrowed_pointer_too_short(loan_scope, ptr_scope) => {"}, {"sha": "7caf8a778d409d6b0a9a0417ade5c7d5d14d0f29", "filename": "src/librustc_mir/build/expr/as_constant.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs?ref=8430042a49bbd49bbb4fbc54f457feb5fb614f56", "patch": "@@ -26,7 +26,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n     fn expr_as_constant(&mut self, expr: Expr<'tcx>) -> Constant<'tcx> {\n         let this = self;\n-        let Expr { ty, temp_lifetime: _, span, kind } = expr;\n+        let Expr { ty, temp_lifetime: _, temp_lifetime_was_shrunk: _, span, kind }\n+            = expr;\n         match kind {\n             ExprKind::Scope { extent: _, value } =>\n                 this.as_constant(value),"}, {"sha": "0ae4bcc4205d4eed080a36cb4db19751952eaa00", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=8430042a49bbd49bbb4fbc54f457feb5fb614f56", "patch": "@@ -39,6 +39,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let expr_span = expr.span;\n         let source_info = this.source_info(expr_span);\n \n+        if expr.temp_lifetime_was_shrunk && this.hir.needs_drop(expr_ty) {\n+            this.hir.tcx().sess.span_warn(\n+                expr_span,\n+                \"this temporary used to live longer - see issue #39283 \\\n+(https://github.com/rust-lang/rust/issues/39283)\");\n+        }\n+\n         if temp_lifetime.is_some() {\n             this.cfg.push(block, Statement {\n                 source_info: source_info,"}, {"sha": "ba6b9361a83f41c9ec3dbc3bd94d67e9043b9f83", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=8430042a49bbd49bbb4fbc54f457feb5fb614f56", "patch": "@@ -83,10 +83,11 @@ pub fn to_expr_ref<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                    block: &'tcx hir::Block)\n                                    -> ExprRef<'tcx> {\n     let block_ty = cx.tables().node_id_to_type(block.id);\n-    let temp_lifetime = cx.tcx.region_maps.temporary_scope(block.id);\n+    let (temp_lifetime, was_shrunk) = cx.tcx.region_maps.temporary_scope2(block.id);\n     let expr = Expr {\n         ty: block_ty,\n         temp_lifetime: temp_lifetime,\n+        temp_lifetime_was_shrunk: was_shrunk,\n         span: block.span,\n         kind: ExprKind::Block { body: block },\n     };"}, {"sha": "477a1086e815e48a17484ebc44d0c9af46a5f141", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 72, "deletions": 49, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=8430042a49bbd49bbb4fbc54f457feb5fb614f56", "patch": "@@ -27,7 +27,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n     type Output = Expr<'tcx>;\n \n     fn make_mirror<'a, 'gcx>(self, cx: &mut Cx<'a, 'gcx, 'tcx>) -> Expr<'tcx> {\n-        let temp_lifetime = cx.tcx.region_maps.temporary_scope(self.id);\n+        let (temp_lifetime, was_shrunk) = cx.tcx.region_maps.temporary_scope2(self.id);\n         let expr_extent = cx.tcx.region_maps.node_extent(self.id);\n \n         debug!(\"Expr::make_mirror(): id={}, span={:?}\", self.id, self.span);\n@@ -45,6 +45,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n             Some((ty::adjustment::Adjust::ReifyFnPointer, adjusted_ty)) => {\n                 expr = Expr {\n                     temp_lifetime: temp_lifetime,\n+                    temp_lifetime_was_shrunk: was_shrunk,\n                     ty: adjusted_ty,\n                     span: self.span,\n                     kind: ExprKind::ReifyFnPointer { source: expr.to_ref() },\n@@ -53,6 +54,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n             Some((ty::adjustment::Adjust::UnsafeFnPointer, adjusted_ty)) => {\n                 expr = Expr {\n                     temp_lifetime: temp_lifetime,\n+                    temp_lifetime_was_shrunk: was_shrunk,\n                     ty: adjusted_ty,\n                     span: self.span,\n                     kind: ExprKind::UnsafeFnPointer { source: expr.to_ref() },\n@@ -61,6 +63,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n             Some((ty::adjustment::Adjust::NeverToAny, adjusted_ty)) => {\n                 expr = Expr {\n                     temp_lifetime: temp_lifetime,\n+                    temp_lifetime_was_shrunk: was_shrunk,\n                     ty: adjusted_ty,\n                     span: self.span,\n                     kind: ExprKind::NeverToAny { source: expr.to_ref() },\n@@ -69,6 +72,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n             Some((ty::adjustment::Adjust::MutToConstPointer, adjusted_ty)) => {\n                 expr = Expr {\n                     temp_lifetime: temp_lifetime,\n+                    temp_lifetime_was_shrunk: was_shrunk,\n                     ty: adjusted_ty,\n                     span: self.span,\n                     kind: ExprKind::Cast { source: expr.to_ref() },\n@@ -98,6 +102,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n \n                         expr = Expr {\n                             temp_lifetime: temp_lifetime,\n+                            temp_lifetime_was_shrunk: was_shrunk,\n                             ty: cx.tcx.mk_ref(region,\n                                               ty::TypeAndMut {\n                                                   ty: expr.ty,\n@@ -123,6 +128,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                     };\n                     expr = Expr {\n                         temp_lifetime: temp_lifetime,\n+                        temp_lifetime_was_shrunk: was_shrunk,\n                         ty: adjusted_ty,\n                         span: self.span,\n                         kind: kind,\n@@ -135,6 +141,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                         ty::adjustment::AutoBorrow::Ref(r, m) => {\n                             expr = Expr {\n                                 temp_lifetime: temp_lifetime,\n+                                temp_lifetime_was_shrunk: was_shrunk,\n                                 ty: adjusted_ty,\n                                 span: self.span,\n                                 kind: ExprKind::Borrow {\n@@ -152,6 +159,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                             let region = cx.tcx.mk_region(region);\n                             expr = Expr {\n                                 temp_lifetime: temp_lifetime,\n+                                temp_lifetime_was_shrunk: was_shrunk,\n                                 ty: cx.tcx.mk_ref(region,\n                                                   ty::TypeAndMut {\n                                                       ty: expr.ty,\n@@ -166,6 +174,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                             };\n                             expr = Expr {\n                                 temp_lifetime: temp_lifetime,\n+                                temp_lifetime_was_shrunk: was_shrunk,\n                                 ty: adjusted_ty,\n                                 span: self.span,\n                                 kind: ExprKind::Cast { source: expr.to_ref() },\n@@ -177,6 +186,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                 if unsize {\n                     expr = Expr {\n                         temp_lifetime: temp_lifetime,\n+                        temp_lifetime_was_shrunk: was_shrunk,\n                         ty: adjusted_ty,\n                         span: self.span,\n                         kind: ExprKind::Unsize { source: expr.to_ref() },\n@@ -188,6 +198,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n         // Next, wrap this up in the expr's scope.\n         expr = Expr {\n             temp_lifetime: temp_lifetime,\n+            temp_lifetime_was_shrunk: was_shrunk,\n             ty: expr.ty,\n             span: self.span,\n             kind: ExprKind::Scope {\n@@ -200,6 +211,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n         if let Some(extent) = cx.tcx.region_maps.opt_destruction_extent(self.id) {\n             expr = Expr {\n                 temp_lifetime: temp_lifetime,\n+                temp_lifetime_was_shrunk: was_shrunk,\n                 ty: expr.ty,\n                 span: self.span,\n                 kind: ExprKind::Scope {\n@@ -218,7 +230,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                           expr: &'tcx hir::Expr)\n                                           -> Expr<'tcx> {\n     let expr_ty = cx.tables().expr_ty(expr);\n-    let temp_lifetime = cx.tcx.region_maps.temporary_scope(expr.id);\n+    let (temp_lifetime, was_shrunk) = cx.tcx.region_maps.temporary_scope2(expr.id);\n \n     let kind = match expr.node {\n         // Here comes the interesting stuff:\n@@ -260,6 +272,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 let tupled_args = Expr {\n                     ty: sig.inputs()[1],\n                     temp_lifetime: temp_lifetime,\n+                    temp_lifetime_was_shrunk: was_shrunk,\n                     span: expr.span,\n                     kind: ExprKind::Tuple { fields: args.iter().map(ToRef::to_ref).collect() },\n                 };\n@@ -670,6 +683,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n     Expr {\n         temp_lifetime: temp_lifetime,\n+        temp_lifetime_was_shrunk: was_shrunk,\n         ty: expr_ty,\n         span: expr.span,\n         kind: kind,\n@@ -681,9 +695,10 @@ fn method_callee<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                  method_call: ty::MethodCall)\n                                  -> Expr<'tcx> {\n     let callee = cx.tables().method_map[&method_call];\n-    let temp_lifetime = cx.tcx.region_maps.temporary_scope(expr.id);\n+    let (temp_lifetime, was_shrunk) = cx.tcx.region_maps.temporary_scope2(expr.id);\n     Expr {\n         temp_lifetime: temp_lifetime,\n+        temp_lifetime_was_shrunk: was_shrunk,\n         ty: callee.ty,\n         span: expr.span,\n         kind: ExprKind::Literal {\n@@ -761,7 +776,7 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                expr: &'tcx hir::Expr,\n                                def: Def)\n                                -> ExprKind<'tcx> {\n-    let temp_lifetime = cx.tcx.region_maps.temporary_scope(expr.id);\n+    let (temp_lifetime, was_shrunk) = cx.tcx.region_maps.temporary_scope2(expr.id);\n \n     match def {\n         Def::Local(def_id) => {\n@@ -813,15 +828,17 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     Expr {\n                         ty: closure_ty,\n                         temp_lifetime: temp_lifetime,\n+                        temp_lifetime_was_shrunk: was_shrunk,\n                         span: expr.span,\n                         kind: ExprKind::Deref {\n                             arg: Expr {\n-                                    ty: ref_closure_ty,\n-                                    temp_lifetime: temp_lifetime,\n-                                    span: expr.span,\n-                                    kind: ExprKind::SelfRef,\n-                                }\n-                                .to_ref(),\n+                                ty: ref_closure_ty,\n+                                temp_lifetime: temp_lifetime,\n+                                temp_lifetime_was_shrunk: was_shrunk,\n+                                span: expr.span,\n+                                kind: ExprKind::SelfRef,\n+                            }\n+                            .to_ref(),\n                         },\n                     }\n                 }\n@@ -834,22 +851,24 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     Expr {\n                         ty: closure_ty,\n                         temp_lifetime: temp_lifetime,\n+                        temp_lifetime_was_shrunk: was_shrunk,\n                         span: expr.span,\n                         kind: ExprKind::Deref {\n                             arg: Expr {\n-                                    ty: ref_closure_ty,\n-                                    temp_lifetime: temp_lifetime,\n-                                    span: expr.span,\n-                                    kind: ExprKind::SelfRef,\n-                                }\n-                                .to_ref(),\n+                                ty: ref_closure_ty,\n+                                temp_lifetime: temp_lifetime,\n+                                temp_lifetime_was_shrunk: was_shrunk,\n+                                span: expr.span,\n+                                kind: ExprKind::SelfRef,\n+                            }.to_ref(),\n                         },\n                     }\n                 }\n                 ty::ClosureKind::FnOnce => {\n                     Expr {\n                         ty: closure_ty,\n                         temp_lifetime: temp_lifetime,\n+                        temp_lifetime_was_shrunk: was_shrunk,\n                         span: expr.span,\n                         kind: ExprKind::SelfRef,\n                     }\n@@ -879,16 +898,16 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 ty::UpvarCapture::ByRef(borrow) => {\n                     ExprKind::Deref {\n                         arg: Expr {\n-                                temp_lifetime: temp_lifetime,\n-                                ty: cx.tcx.mk_ref(borrow.region,\n-                                                  ty::TypeAndMut {\n-                                                      ty: var_ty,\n-                                                      mutbl: borrow.kind.to_mutbl_lossy(),\n-                                                  }),\n-                                span: expr.span,\n-                                kind: field_kind,\n-                            }\n-                            .to_ref(),\n+                            temp_lifetime: temp_lifetime,\n+                            temp_lifetime_was_shrunk: was_shrunk,\n+                            ty: cx.tcx.mk_ref(borrow.region,\n+                                              ty::TypeAndMut {\n+                                                  ty: var_ty,\n+                                                  mutbl: borrow.kind.to_mutbl_lossy(),\n+                                              }),\n+                            span: expr.span,\n+                            kind: field_kind,\n+                        }.to_ref(),\n                     }\n                 }\n             }\n@@ -944,7 +963,8 @@ fn overloaded_operator<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n         PassArgs::ByRef => {\n             let region = cx.tcx.node_scope_region(expr.id);\n-            let temp_lifetime = cx.tcx.region_maps.temporary_scope(expr.id);\n+            let (temp_lifetime, was_shrunk) =\n+                cx.tcx.region_maps.temporary_scope2(expr.id);\n             argrefs.extend(args.iter()\n                 .map(|arg| {\n                     let arg_ty = cx.tables().expr_ty_adjusted(arg);\n@@ -954,16 +974,17 @@ fn overloaded_operator<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                                         mutbl: hir::MutImmutable,\n                                                     });\n                     Expr {\n-                            temp_lifetime: temp_lifetime,\n-                            ty: adjusted_ty,\n-                            span: expr.span,\n-                            kind: ExprKind::Borrow {\n-                                region: region,\n-                                borrow_kind: BorrowKind::Shared,\n-                                arg: arg.to_ref(),\n-                            },\n-                        }\n-                        .to_ref()\n+                        temp_lifetime: temp_lifetime,\n+                        temp_lifetime_was_shrunk: was_shrunk,\n+                        ty: adjusted_ty,\n+                        span: expr.span,\n+                        kind: ExprKind::Borrow {\n+                            region: region,\n+                            borrow_kind: BorrowKind::Shared,\n+                            arg: arg.to_ref(),\n+                        },\n+                    }\n+                    .to_ref()\n                 }))\n         }\n     }\n@@ -995,10 +1016,11 @@ fn overloaded_lvalue<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n     // construct the complete expression `foo()` for the overloaded call,\n     // which will yield the &T type\n-    let temp_lifetime = cx.tcx.region_maps.temporary_scope(expr.id);\n+    let (temp_lifetime, was_shrunk) = cx.tcx.region_maps.temporary_scope2(expr.id);\n     let ref_kind = overloaded_operator(cx, expr, method_call, pass_args, receiver, args);\n     let ref_expr = Expr {\n         temp_lifetime: temp_lifetime,\n+        temp_lifetime_was_shrunk: was_shrunk,\n         ty: ref_ty,\n         span: expr.span,\n         kind: ref_kind,\n@@ -1019,10 +1041,11 @@ fn capture_freevar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         closure_expr_id: closure_expr.id,\n     };\n     let upvar_capture = cx.tables().upvar_capture(upvar_id).unwrap();\n-    let temp_lifetime = cx.tcx.region_maps.temporary_scope(closure_expr.id);\n+    let (temp_lifetime, was_shrunk) = cx.tcx.region_maps.temporary_scope2(closure_expr.id);\n     let var_ty = cx.tables().node_id_to_type(id_var);\n     let captured_var = Expr {\n         temp_lifetime: temp_lifetime,\n+        temp_lifetime_was_shrunk: was_shrunk,\n         ty: var_ty,\n         span: closure_expr.span,\n         kind: convert_var(cx, closure_expr, freevar.def),\n@@ -1036,16 +1059,16 @@ fn capture_freevar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 ty::BorrowKind::MutBorrow => BorrowKind::Mut,\n             };\n             Expr {\n-                    temp_lifetime: temp_lifetime,\n-                    ty: freevar_ty,\n-                    span: closure_expr.span,\n-                    kind: ExprKind::Borrow {\n-                        region: upvar_borrow.region,\n-                        borrow_kind: borrow_kind,\n-                        arg: captured_var.to_ref(),\n-                    },\n-                }\n-                .to_ref()\n+                temp_lifetime: temp_lifetime,\n+                temp_lifetime_was_shrunk: was_shrunk,\n+                ty: freevar_ty,\n+                span: closure_expr.span,\n+                kind: ExprKind::Borrow {\n+                    region: upvar_borrow.region,\n+                    borrow_kind: borrow_kind,\n+                    arg: captured_var.to_ref(),\n+                },\n+            }.to_ref()\n         }\n     }\n }"}, {"sha": "01dc01c5ecfd4b9147acb94a277dc03fffc15d99", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=8430042a49bbd49bbb4fbc54f457feb5fb614f56", "patch": "@@ -97,6 +97,9 @@ pub struct Expr<'tcx> {\n     /// temporary; should be None only if in a constant context\n     pub temp_lifetime: Option<CodeExtent>,\n \n+    /// whether this temp lifetime was shrunk by #36082.\n+    pub temp_lifetime_was_shrunk: bool,\n+\n     /// span of the expression in the source\n     pub span: Span,\n "}, {"sha": "7d515a36cfdffa0f23e1a2c5027e7178a5380227", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=8430042a49bbd49bbb4fbc54f457feb5fb614f56", "patch": "@@ -996,7 +996,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n                                                      cmt: mc::cmt<'tcx>,\n                                                      span: Span) {\n         match cmt.cat {\n-            Categorization::Rvalue(region) => {\n+            Categorization::Rvalue(region, _) => {\n                 match *region {\n                     ty::ReScope(rvalue_scope) => {\n                         let typ = self.resolve_type(cmt.ty);\n@@ -1113,7 +1113,8 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n         for arg in args {\n             let arg_ty = self.node_ty(arg.id);\n             let re_scope = self.tcx.mk_region(ty::ReScope(body_scope));\n-            let arg_cmt = mc.cat_rvalue(arg.id, arg.pat.span, re_scope, arg_ty);\n+            let arg_cmt = mc.cat_rvalue(\n+                arg.id, arg.pat.span, re_scope, re_scope, arg_ty);\n             debug!(\"arg_ty={:?} arg_cmt={:?} arg={:?}\",\n                    arg_ty,\n                    arg_cmt,"}, {"sha": "c2f64b1bd7906187da4c2ae583e3afaafe4ce074", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=8430042a49bbd49bbb4fbc54f457feb5fb614f56", "patch": "@@ -339,7 +339,7 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n \n             Categorization::Deref(.., mc::UnsafePtr(..)) |\n             Categorization::StaticItem |\n-            Categorization::Rvalue(_) |\n+            Categorization::Rvalue(..) |\n             Categorization::Local(_) |\n             Categorization::Upvar(..) => {\n                 return;\n@@ -371,7 +371,7 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n \n             Categorization::Deref(.., mc::UnsafePtr(..)) |\n             Categorization::StaticItem |\n-            Categorization::Rvalue(_) |\n+            Categorization::Rvalue(..) |\n             Categorization::Local(_) |\n             Categorization::Upvar(..) => {\n             }"}, {"sha": "cec4b2d15dcd30741bc9ea81fb3bdbd43ed7b8f5", "filename": "src/test/compile-fail/issue-36082.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Ftest%2Fcompile-fail%2Fissue-36082.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8430042a49bbd49bbb4fbc54f457feb5fb614f56/src%2Ftest%2Fcompile-fail%2Fissue-36082.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-36082.rs?ref=8430042a49bbd49bbb4fbc54f457feb5fb614f56", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::cell::RefCell;\n+\n+fn main() {\n+    let mut r = 0;\n+    let s = 0;\n+    let x = RefCell::new((&mut r,s));\n+\n+    let val: &_ = x.borrow().0;\n+    //~^ WARNING this temporary used to live longer - see issue #39283\n+    //~^^ ERROR borrowed value does not live long enough\n+    //~| temporary value dropped here while still borrowed\n+    //~| temporary value created here\n+    //~| consider using a `let` binding to increase its lifetime\n+    //~| before rustc 1.16, this temporary lived longer - see issue #39283\n+    println!(\"{}\", val);\n+}\n+//~^ temporary value needs to live until here"}]}