{"sha": "72df804d8e649950ef082034e147bd8fc5ee162d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZGY4MDRkOGU2NDk5NTBlZjA4MjAzNGUxNDdiZDhmYzVlZTE2MmQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-07-06T11:58:25Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-07-06T11:58:25Z"}, "message": "When doing linker-plugin based LTO, write LLVM bitcode obj-files\ninstead of embedding the bitcode into the regular object file.", "tree": {"sha": "06049af3a46a2c228c0db36916cb5b20d4ffd7a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06049af3a46a2c228c0db36916cb5b20d4ffd7a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72df804d8e649950ef082034e147bd8fc5ee162d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72df804d8e649950ef082034e147bd8fc5ee162d", "html_url": "https://github.com/rust-lang/rust/commit/72df804d8e649950ef082034e147bd8fc5ee162d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72df804d8e649950ef082034e147bd8fc5ee162d/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65ff4141a5ed69223b29634a49a499b9415993ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/65ff4141a5ed69223b29634a49a499b9415993ee", "html_url": "https://github.com/rust-lang/rust/commit/65ff4141a5ed69223b29634a49a499b9415993ee"}], "stats": {"total": 52, "additions": 24, "deletions": 28}, "files": [{"sha": "ba1249215cc4f56a02650e5fec424964454342ae", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72df804d8e649950ef082034e147bd8fc5ee162d/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72df804d8e649950ef082034e147bd8fc5ee162d/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=72df804d8e649950ef082034e147bd8fc5ee162d", "patch": "@@ -104,7 +104,7 @@ pub enum CrossLangLto {\n }\n \n impl CrossLangLto {\n-    pub fn embed_bitcode(&self) -> bool {\n+    pub fn enabled(&self) -> bool {\n         match *self {\n             CrossLangLto::LinkerPlugin(_) |\n             CrossLangLto::LinkerPluginAuto |"}, {"sha": "42b772b8a5d06aabbf0019ea5134c26e9e15fe3b", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72df804d8e649950ef082034e147bd8fc5ee162d/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72df804d8e649950ef082034e147bd8fc5ee162d/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=72df804d8e649950ef082034e147bd8fc5ee162d", "patch": "@@ -288,10 +288,10 @@ impl ModuleConfig {\n         self.no_builtins = no_builtins || sess.target.target.options.no_builtins;\n         self.time_passes = sess.time_passes();\n         self.inline_threshold = sess.opts.cg.inline_threshold;\n-        self.obj_is_bitcode = sess.target.target.options.obj_is_bitcode;\n+        self.obj_is_bitcode = sess.target.target.options.obj_is_bitcode ||\n+                              sess.opts.debugging_opts.cross_lang_lto.enabled();\n         let embed_bitcode = sess.target.target.options.embed_bitcode ||\n-                            sess.opts.debugging_opts.embed_bitcode ||\n-                            sess.opts.debugging_opts.cross_lang_lto.embed_bitcode();\n+                            sess.opts.debugging_opts.embed_bitcode;\n         if embed_bitcode {\n             match sess.opts.optimize {\n                 config::OptLevel::No |\n@@ -1365,7 +1365,7 @@ fn execute_work_item(cgcx: &CodegenContext,\n             // Don't run LTO passes when cross-lang LTO is enabled. The linker\n             // will do that for us in this case.\n             let needs_lto = needs_lto &&\n-                !cgcx.opts.debugging_opts.cross_lang_lto.embed_bitcode();\n+                !cgcx.opts.debugging_opts.cross_lang_lto.enabled();\n \n             if needs_lto {\n                 Ok(WorkItemResult::NeedsLTO(module))"}, {"sha": "cdc429d1f995e2f2831543c20c86abc50375ab6a", "filename": "src/test/run-make-fulldeps/cross-lang-lto/Makefile", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/72df804d8e649950ef082034e147bd8fc5ee162d/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/72df804d8e649950ef082034e147bd8fc5ee162d/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile?ref=72df804d8e649950ef082034e147bd8fc5ee162d", "patch": "@@ -1,53 +1,49 @@\n \n # min-llvm-version 4.0\n-# ignore-mingw\n+# ignore-msvc\n \n -include ../tools.mk\n \n-# This test makes sure that the expected .llvmbc sections for use by\n-# linker-based LTO are available in object files when compiling with\n-# -Z cross-lang-lto\n+# This test makes sure that the object files we generate are actually\n+# LLVM bitcode files (as used by linker LTO plugins) when compiling with\n+# -Z cross-lang-lto.\n \n-LLVMBC_SECTION_NAME=\\\\.llvmbc\n+ASSERT_IS_BITCODE_OBJ=llvm-bcanalyzer # this only succeeds for bitcode files\n+EXTRACT_OBJS=(cd $(TMPDIR); rm -f ./*.o; llvm-ar x $(1))\n \n-ifeq ($(UNAME),Darwin)\n-\tLLVMBC_SECTION_NAME=__bitcode\n-endif\n-\n-\n-OBJDUMP=llvm-objdump\n-SECTION_HEADERS=$(OBJDUMP) -section-headers\n-\n-BUILD_LIB=$(RUSTC) lib.rs -Copt-level=2 -Z cross-lang-lto=no-link -Ccodegen-units=1\n-\n-BUILD_EXE=$(RUSTC) main.rs -Copt-level=2 -Z cross-lang-lto=no-link -Ccodegen-units=1 --emit=obj\n+BUILD_LIB=$(RUSTC) lib.rs -Copt-level=2 -Z cross-lang-lto=on -Ccodegen-units=1\n+BUILD_EXE=$(RUSTC) main.rs -Copt-level=2 -Z cross-lang-lto=on -Ccodegen-units=1 --emit=obj\n \n all: staticlib staticlib-fat-lto staticlib-thin-lto rlib exe cdylib rdylib\n \n staticlib: lib.rs\n \t$(BUILD_LIB) --crate-type=staticlib -o $(TMPDIR)/liblib.a\n-\t[ \"$$($(SECTION_HEADERS) $(TMPDIR)/liblib.a | grep -c $(LLVMBC_SECTION_NAME))\" -ne \"0\" ]\n+\t$(call EXTRACT_OBJS, liblib.a)\n+\t$(ASSERT_IS_BITCODE_OBJ) $(TMPDIR)/liblib.lib0.rcgu.o\n \n staticlib-fat-lto: lib.rs\n \t$(BUILD_LIB) --crate-type=staticlib -o $(TMPDIR)/liblib-fat-lto.a -Clto=fat\n-\t[ \"$$($(SECTION_HEADERS) $(TMPDIR)/liblib-fat-lto.a | grep -c $(LLVMBC_SECTION_NAME))\" -ne \"0\" ]\n+\t$(call EXTRACT_OBJS, liblib-fat-lto.a)\n+\t$(ASSERT_IS_BITCODE_OBJ) $(TMPDIR)/liblib-fat-lto.lib0.rcgu.o\n \n staticlib-thin-lto: lib.rs\n \t$(BUILD_LIB) --crate-type=staticlib -o $(TMPDIR)/liblib-thin-lto.a -Clto=thin\n-\t[ \"$$($(SECTION_HEADERS) $(TMPDIR)/liblib-thin-lto.a | grep -c $(LLVMBC_SECTION_NAME))\" -ne \"0\" ]\n+\t$(call EXTRACT_OBJS, liblib-thin-lto.a)\n+\t$(ASSERT_IS_BITCODE_OBJ) $(TMPDIR)/liblib-thin-lto.lib0.rcgu.o\n \n rlib: lib.rs\n \t$(BUILD_LIB) --crate-type=rlib -o $(TMPDIR)/liblib.rlib\n-\t[ \"$$($(SECTION_HEADERS) $(TMPDIR)/liblib.rlib | grep -c $(LLVMBC_SECTION_NAME))\" -ne \"0\" ]\n+\t$(call EXTRACT_OBJS, liblib.rlib)\n+\t$(ASSERT_IS_BITCODE_OBJ) $(TMPDIR)/liblib.lib0.rcgu.o\n \n cdylib: lib.rs\n \t$(BUILD_LIB) --crate-type=cdylib --emit=obj -o $(TMPDIR)/cdylib.o\n-\t[ \"$$($(SECTION_HEADERS) $(TMPDIR)/cdylib.o | grep -c $(LLVMBC_SECTION_NAME))\" -ne \"0\" ]\n+\t$(ASSERT_IS_BITCODE_OBJ) $(TMPDIR)/cdylib.o\n \n rdylib: lib.rs\n \t$(BUILD_LIB) --crate-type=dylib --emit=obj -o $(TMPDIR)/rdylib.o\n-\t[ \"$$($(SECTION_HEADERS) $(TMPDIR)/rdylib.o | grep -c $(LLVMBC_SECTION_NAME))\" -ne \"0\" ]\n+\t$(ASSERT_IS_BITCODE_OBJ) $(TMPDIR)/rdylib.o\n \n exe: lib.rs\n \t$(BUILD_EXE) -o $(TMPDIR)/exe.o\n-\t[ \"$$($(SECTION_HEADERS) $(TMPDIR)/exe.o | grep -c $(LLVMBC_SECTION_NAME))\" -ne \"0\" ]\n+\t$(ASSERT_IS_BITCODE_OBJ) $(TMPDIR)/exe.o"}]}