{"sha": "4edc6f1a4e069dcb46d1fc583dccefba7e4aae44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZGM2ZjFhNGUwNjlkY2I0NmQxZmM1ODNkY2NlZmJhN2U0YWFlNDQ=", "commit": {"author": {"name": "Erik Johnston", "email": "erikj@jki.re", "date": "2016-04-07T19:01:16Z"}, "committer": {"name": "Erik Johnston", "email": "erikj@jki.re", "date": "2016-04-07T19:01:16Z"}, "message": "Add variant to fn_args_layout", "tree": {"sha": "ac59a80c82a4683ff911fb96682184a01740a13c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac59a80c82a4683ff911fb96682184a01740a13c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4edc6f1a4e069dcb46d1fc583dccefba7e4aae44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4edc6f1a4e069dcb46d1fc583dccefba7e4aae44", "html_url": "https://github.com/rust-lang/rust/commit/4edc6f1a4e069dcb46d1fc583dccefba7e4aae44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4edc6f1a4e069dcb46d1fc583dccefba7e4aae44/comments", "author": {"login": "erikjohnston", "id": 8428120, "node_id": "MDQ6VXNlcjg0MjgxMjA=", "avatar_url": "https://avatars.githubusercontent.com/u/8428120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikjohnston", "html_url": "https://github.com/erikjohnston", "followers_url": "https://api.github.com/users/erikjohnston/followers", "following_url": "https://api.github.com/users/erikjohnston/following{/other_user}", "gists_url": "https://api.github.com/users/erikjohnston/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikjohnston/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikjohnston/subscriptions", "organizations_url": "https://api.github.com/users/erikjohnston/orgs", "repos_url": "https://api.github.com/users/erikjohnston/repos", "events_url": "https://api.github.com/users/erikjohnston/events{/privacy}", "received_events_url": "https://api.github.com/users/erikjohnston/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikjohnston", "id": 8428120, "node_id": "MDQ6VXNlcjg0MjgxMjA=", "avatar_url": "https://avatars.githubusercontent.com/u/8428120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikjohnston", "html_url": "https://github.com/erikjohnston", "followers_url": "https://api.github.com/users/erikjohnston/followers", "following_url": "https://api.github.com/users/erikjohnston/following{/other_user}", "gists_url": "https://api.github.com/users/erikjohnston/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikjohnston/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikjohnston/subscriptions", "organizations_url": "https://api.github.com/users/erikjohnston/orgs", "repos_url": "https://api.github.com/users/erikjohnston/repos", "events_url": "https://api.github.com/users/erikjohnston/events{/privacy}", "received_events_url": "https://api.github.com/users/erikjohnston/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "615848339b0b4fd3bf6e41b4d1661cd17211fe54", "url": "https://api.github.com/repos/rust-lang/rust/commits/615848339b0b4fd3bf6e41b4d1661cd17211fe54", "html_url": "https://github.com/rust-lang/rust/commit/615848339b0b4fd3bf6e41b4d1661cd17211fe54"}], "stats": {"total": 410, "additions": 241, "deletions": 169}, "files": [{"sha": "84a23b6425d44e2caed3b86da7a715c7ce9b3179", "filename": "src/config.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4edc6f1a4e069dcb46d1fc583dccefba7e4aae44/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edc6f1a4e069dcb46d1fc583dccefba7e4aae44/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=4edc6f1a4e069dcb46d1fc583dccefba7e4aae44", "patch": "@@ -56,6 +56,17 @@ configuration_option_enum! { StructLitStyle:\n     // FIXME Maybe we should also have an option to align types.\n }\n \n+// How to style fn args.\n+configuration_option_enum! { FnArgLayoutStyle:\n+    // First line on the same line as the opening brace, all lines aligned with\n+    // the first line.\n+    Visual,\n+    // Put args on one line if they fit, or start a new line with block indent.\n+    Block,\n+    // First line is on a new line and all lines align with block indent.\n+    BlockAlways,\n+}\n+\n configuration_option_enum! { BlockIndentStyle:\n     // Same level as parent.\n     Inherit,\n@@ -309,9 +320,8 @@ create_config! {\n         \"Location of return type in function declaration\";\n     fn_args_paren_newline: bool, true, \"If function argument parenthesis goes on a newline\";\n     fn_args_density: Density, Density::Tall, \"Argument density in functions\";\n-    fn_args_layout: StructLitStyle, StructLitStyle::Visual, \"Layout of function arguments\";\n+    fn_args_layout: FnArgLayoutStyle, FnArgLayoutStyle::Visual, \"Layout of function arguments\";\n     fn_arg_indent: BlockIndentStyle, BlockIndentStyle::Visual, \"Indent on function arguments\";\n-    fn_arg_one_line: bool, false, \"Keep arguments on one line if they fit\";\n     type_punctuation_density: TypeDensity, TypeDensity::Wide,\n         \"Determines if '+' or '=' are wrapped in spaces in the punctuation of types\";\n     // Should we at least try to put the where clause on the same line as the rest of the"}, {"sha": "f3ba3872a9178f40dd67fef759cb85aa151bd493", "filename": "src/items.rs", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4edc6f1a4e069dcb46d1fc583dccefba7e4aae44/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edc6f1a4e069dcb46d1fc583dccefba7e4aae44/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=4edc6f1a4e069dcb46d1fc583dccefba7e4aae44", "patch": "@@ -19,7 +19,7 @@ use expr::{is_empty_block, is_simple_block_stmt, rewrite_assign_rhs};\n use comment::{FindUncommented, contains_comment};\n use visitor::FmtVisitor;\n use rewrite::{Rewrite, RewriteContext};\n-use config::{Config, BlockIndentStyle, Density, ReturnIndent, BraceStyle, StructLitStyle};\n+use config::{Config, BlockIndentStyle, Density, ReturnIndent, BraceStyle, FnArgLayoutStyle};\n \n use syntax::{ast, abi, ptr, codemap};\n use syntax::codemap::{Span, BytePos, mk_sp};\n@@ -651,8 +651,8 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n \n         let where_density = if (context.config.where_density == Density::Compressed &&\n                                 (!result.contains('\\n') ||\n-                                 context.config.fn_args_layout == StructLitStyle::Block)) ||\n-                               (context.config.fn_args_layout == StructLitStyle::Block &&\n+                                 context.config.fn_args_layout == FnArgLayoutStyle::Block)) ||\n+                               (context.config.fn_args_layout == FnArgLayoutStyle::Block &&\n                                 result.is_empty()) ||\n                                (context.config.where_density == Density::CompressedIfEmpty &&\n                                 !has_body &&\n@@ -1293,7 +1293,8 @@ fn rewrite_fn_base(context: &RewriteContext,\n     let (mut one_line_budget, multi_line_budget, mut arg_indent) =\n         compute_budgets_for_args(context, &result, indent, ret_str_len, newline_brace);\n \n-    if context.config.fn_args_layout == StructLitStyle::Block {\n+    if context.config.fn_args_layout == FnArgLayoutStyle::Block ||\n+       context.config.fn_args_layout == FnArgLayoutStyle::BlockAlways {\n         arg_indent = indent.block_indent(context.config);\n     }\n \n@@ -1339,11 +1340,13 @@ fn rewrite_fn_base(context: &RewriteContext,\n \n     let multi_line_arg_str = arg_str.contains('\\n');\n \n-    let should_put_args_in_block = context.config.fn_args_layout == StructLitStyle::Block &&\n-                                   (multi_line_arg_str || !context.config.fn_arg_one_line) &&\n-                                   fd.inputs.len() > 0;\n+    let put_args_in_block = match context.config.fn_args_layout {\n+        FnArgLayoutStyle::Block => multi_line_arg_str,\n+        FnArgLayoutStyle::BlockAlways => true,\n+        _ => false,\n+    } && fd.inputs.len() > 0;\n \n-    if should_put_args_in_block {\n+    if put_args_in_block {\n         arg_indent = indent.block_indent(context.config);\n         result.push('\\n');\n         result.push_str(&arg_indent.to_string(context.config));\n@@ -1358,14 +1361,17 @@ fn rewrite_fn_base(context: &RewriteContext,\n \n     // Return type.\n     if !ret_str.is_empty() {\n+        let ret_should_indent = match context.config.fn_args_layout {\n+            FnArgLayoutStyle::Block if put_args_in_block => false,\n+            FnArgLayoutStyle::BlockAlways => false,\n+            _ => {\n+                result.contains(\"\\n\") || multi_line_ret_str ||\n+                result.len() + indent.width() + ret_str_len > context.config.max_width\n+            }\n+        };\n         // If we've already gone multi-line, or the return type would push\n         // over the max width, then put the return type on a new line.\n-        // Unless we are formatting args like a block, in which case there\n-        // should always be room for the return type.\n-        let ret_indent = if (result.contains(\"\\n\") || multi_line_ret_str ||\n-                             result.len() + indent.width() + ret_str_len >\n-                             context.config.max_width) &&\n-                            context.config.fn_args_layout != StructLitStyle::Block {\n+        let ret_indent = if ret_should_indent {\n             let indent = match context.config.fn_return_indent {\n                 ReturnIndent::WithWhereClause => indent + 4,\n                 // Aligning with non-existent args looks silly.\n@@ -1416,13 +1422,13 @@ fn rewrite_fn_base(context: &RewriteContext,\n         }\n     }\n \n-    let where_density = if (context.config.where_density == Density::Compressed &&\n-                            (!result.contains('\\n') ||\n-                             context.config.fn_args_layout == StructLitStyle::Block)) ||\n-                           (context.config.fn_args_layout == StructLitStyle::Block &&\n-                            ret_str.is_empty()) ||\n-                           (context.config.where_density == Density::CompressedIfEmpty &&\n-                            !has_body && !result.contains('\\n')) {\n+    let where_compressed = match context.config.where_density {\n+        Density::Compressed => !result.contains('\\n') || put_args_in_block,\n+        Density::CompressedIfEmpty => !has_body && !result.contains('\\n'),\n+        _ => false,\n+    } || (put_args_in_block && ret_str.is_empty());\n+\n+    let where_density = if where_compressed {\n         Density::Compressed\n     } else {\n         Density::Tall\n@@ -1564,7 +1570,7 @@ fn rewrite_args(context: &RewriteContext,\n     };\n \n     let end_with_newline = match context.config.fn_args_layout {\n-        StructLitStyle::Block => true,\n+        FnArgLayoutStyle::Block | FnArgLayoutStyle::BlockAlways => true,\n         _ => false,\n     };\n "}, {"sha": "23aea2b58f766e28e28708eeb3387f0d10fa5381", "filename": "tests/source/fn_arg_one_line.rs", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/615848339b0b4fd3bf6e41b4d1661cd17211fe54/tests%2Fsource%2Ffn_arg_one_line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615848339b0b4fd3bf6e41b4d1661cd17211fe54/tests%2Fsource%2Ffn_arg_one_line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn_arg_one_line.rs?ref=615848339b0b4fd3bf6e41b4d1661cd17211fe54", "patch": "@@ -1,48 +0,0 @@\n-// rustfmt-fn_args_layout: Block\n-// rustfmt-fn_arg_one_line: true\n-\n-fn foo() {\n-    foo();\n-}\n-\n-fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) {\n-    foo();\n-}\n-\n-fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee) {\n-    bar();\n-}\n-\n-fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) -> String {\n-    foo();\n-}\n-\n-fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee) -> String {\n-    bar();\n-}\n-\n-fn foo(a: u8 /* Comment 1 */, b: u8 /* Comment 2 */) -> u8 {\n-    bar()\n-}\n-\n-fn foo(a: u8 /* Comment 1 */, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee /* Comment 2 */) -> u8 {\n-    bar()\n-}\n-\n-fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee) -> String where X: Fooooo, Y: Baaar  {\n-    bar();\n-}\n-\n-fn foo() -> T {\n-    foo();\n-}\n-\n-fn foo() -> T where X: Foooo, Y: Baaar {\n-    foo();\n-}\n-\n-trait Test {\n-    fn foo(a: u8) {}\n-\n-    fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee) -> String {}\n-}"}, {"sha": "983ccc60d2bd022b1f6c9e9003d5adac69c9ac5f", "filename": "tests/source/fn_args_layout-block.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4edc6f1a4e069dcb46d1fc583dccefba7e4aae44/tests%2Fsource%2Ffn_args_layout-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edc6f1a4e069dcb46d1fc583dccefba7e4aae44/tests%2Fsource%2Ffn_args_layout-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn_args_layout-block.rs?ref=4edc6f1a4e069dcb46d1fc583dccefba7e4aae44", "patch": "@@ -20,8 +20,54 @@ fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Ddddddddd\n     bar();\n }\n \n+fn foo(a: u8 /* Comment 1 */, b: u8 /* Comment 2 */) -> u8 {\n+    bar()\n+}\n+\n+fn foo(a: u8 /* Comment 1 */, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee /* Comment 2 */) -> u8 {\n+    bar()\n+}\n+\n+fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee) -> String where X: Fooooo, Y: Baaar  {\n+    bar();\n+}\n+\n+fn foo() -> T {\n+    foo();\n+}\n+\n+fn foo() -> T where X: Foooo, Y: Baaar {\n+    foo();\n+}\n+\n+fn foo() where X: Foooo {\n+}\n+\n+fn foo() where X: Foooo, Y: Baaar {\n+}\n+\n+fn foo() -> (Loooooooooooooooooooooong, Reeeeeeeeeeeeeeeeeeeeeeeeturn, iiiiiiiiis, Looooooooooooooooong) {\n+    foo();\n+}\n+\n+fn foo<g: G>() {\n+    foo();\n+}\n+\n+fn foo<L: Loooooooooooooooooooooong, G: Geeeeeeeeeeeneric, I: iiiiiiiiis, L: Looooooooooooooooong>() {\n+    foo();\n+}\n+\n+fn foo<L: Loooooooooooooooooooong, G: Geeeeeeeeeeneric, I: iiiiiiiiis, L: Loooooooooooooooong>() {\n+    foo();\n+}\n+\n+fn foo<L: Loooooooooooooooooooong, G: Geeeeeeeeeeneric, I: iiiiiiiiis, L: Loooooooooooooooong>(a: Aaaaaaaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd) {\n+    foo();\n+}\n+\n trait Test {\n     fn foo(a: u8) {}\n \n-    fn bar(a: u8) -> String {}\n+    fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee) -> String {}\n }"}, {"sha": "d4bb00b914277ecd8534b57acc9df3179d40f302", "filename": "tests/source/fn_args_layout-blockalways.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4edc6f1a4e069dcb46d1fc583dccefba7e4aae44/tests%2Fsource%2Ffn_args_layout-blockalways.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edc6f1a4e069dcb46d1fc583dccefba7e4aae44/tests%2Fsource%2Ffn_args_layout-blockalways.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn_args_layout-blockalways.rs?ref=4edc6f1a4e069dcb46d1fc583dccefba7e4aae44", "patch": "@@ -0,0 +1,27 @@\n+// rustfmt-fn_args_layout: BlockAlways\n+\n+fn foo() {\n+    foo();\n+}\n+\n+fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) {\n+    foo();\n+}\n+\n+fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee) {\n+    bar();\n+}\n+\n+fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) -> String {\n+    foo();\n+}\n+\n+fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee) -> String {\n+    bar();\n+}\n+\n+trait Test {\n+    fn foo(a: u8) {}\n+\n+    fn bar(a: u8) -> String {}\n+}"}, {"sha": "ef5eeea90bdada986adf7355813d50167dce8d14", "filename": "tests/target/fn_arg_one_line.rs", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/615848339b0b4fd3bf6e41b4d1661cd17211fe54/tests%2Ftarget%2Ffn_arg_one_line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615848339b0b4fd3bf6e41b4d1661cd17211fe54/tests%2Ftarget%2Ffn_arg_one_line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn_arg_one_line.rs?ref=615848339b0b4fd3bf6e41b4d1661cd17211fe54", "patch": "@@ -1,85 +0,0 @@\n-// rustfmt-fn_args_layout: Block\n-// rustfmt-fn_arg_one_line: true\n-\n-fn foo() {\n-    foo();\n-}\n-\n-fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) {\n-    foo();\n-}\n-\n-fn bar(\n-    a: Aaaaaaaaaaaaaa,\n-    b: Bbbbbbbbbbbbbb,\n-    c: Cccccccccccccccccc,\n-    d: Dddddddddddddddd,\n-    e: Eeeeeeeeeeeeeee\n-) {\n-    bar();\n-}\n-\n-fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) -> String {\n-    foo();\n-}\n-\n-fn bar(\n-    a: Aaaaaaaaaaaaaa,\n-    b: Bbbbbbbbbbbbbb,\n-    c: Cccccccccccccccccc,\n-    d: Dddddddddddddddd,\n-    e: Eeeeeeeeeeeeeee\n-) -> String {\n-    bar();\n-}\n-\n-fn foo(a: u8 /* Comment 1 */, b: u8 /* Comment 2 */) -> u8 {\n-    bar()\n-}\n-\n-fn foo(\n-    a: u8, // Comment 1\n-    b: Bbbbbbbbbbbbbb,\n-    c: Cccccccccccccccccc,\n-    d: Dddddddddddddddd,\n-    e: Eeeeeeeeeeeeeee // Comment 2\n-) -> u8 {\n-    bar()\n-}\n-\n-fn bar(\n-    a: Aaaaaaaaaaaaaa,\n-    b: Bbbbbbbbbbbbbb,\n-    c: Cccccccccccccccccc,\n-    d: Dddddddddddddddd,\n-    e: Eeeeeeeeeeeeeee\n-) -> String\n-    where X: Fooooo,\n-          Y: Baaar\n-{\n-    bar();\n-}\n-\n-fn foo() -> T {\n-    foo();\n-}\n-\n-fn foo() -> T\n-    where X: Foooo,\n-          Y: Baaar\n-{\n-    foo();\n-}\n-\n-trait Test {\n-    fn foo(a: u8) {}\n-\n-    fn bar(\n-        a: Aaaaaaaaaaaaaa,\n-        b: Bbbbbbbbbbbbbb,\n-        c: Cccccccccccccccccc,\n-        d: Dddddddddddddddd,\n-        e: Eeeeeeeeeeeeeee\n-    ) -> String {\n-    }\n-}"}, {"sha": "b2d30018abd48ae8594c4b15626cabc4a6c1ff8c", "filename": "tests/target/fn_args_layout-block.rs", "status": "modified", "additions": 78, "deletions": 11, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/4edc6f1a4e069dcb46d1fc583dccefba7e4aae44/tests%2Ftarget%2Ffn_args_layout-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edc6f1a4e069dcb46d1fc583dccefba7e4aae44/tests%2Ftarget%2Ffn_args_layout-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn_args_layout-block.rs?ref=4edc6f1a4e069dcb46d1fc583dccefba7e4aae44", "patch": "@@ -4,9 +4,7 @@ fn foo() {\n     foo();\n }\n \n-fn foo(\n-    a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb\n-) {\n+fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) {\n     foo();\n }\n \n@@ -20,9 +18,7 @@ fn bar(\n     bar();\n }\n \n-fn foo(\n-    a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb\n-) -> String {\n+fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) -> String {\n     foo();\n }\n \n@@ -36,14 +32,85 @@ fn bar(\n     bar();\n }\n \n+fn foo(a: u8 /* Comment 1 */, b: u8 /* Comment 2 */) -> u8 {\n+    bar()\n+}\n+\n+fn foo(\n+    a: u8, // Comment 1\n+    b: Bbbbbbbbbbbbbb,\n+    c: Cccccccccccccccccc,\n+    d: Dddddddddddddddd,\n+    e: Eeeeeeeeeeeeeee // Comment 2\n+) -> u8 {\n+    bar()\n+}\n+\n+fn bar(\n+    a: Aaaaaaaaaaaaaa,\n+    b: Bbbbbbbbbbbbbb,\n+    c: Cccccccccccccccccc,\n+    d: Dddddddddddddddd,\n+    e: Eeeeeeeeeeeeeee\n+) -> String\n+    where X: Fooooo,\n+          Y: Baaar\n+{\n+    bar();\n+}\n+\n+fn foo() -> T {\n+    foo();\n+}\n+\n+fn foo() -> T\n+    where X: Foooo,\n+          Y: Baaar\n+{\n+    foo();\n+}\n+\n+fn foo() where X: Foooo {}\n+\n+fn foo()\n+    where X: Foooo,\n+          Y: Baaar\n+{\n+}\n+\n+fn foo\n+    ()\n+    -> (Loooooooooooooooooooooong, Reeeeeeeeeeeeeeeeeeeeeeeeturn, iiiiiiiiis, Looooooooooooooooong)\n+{\n+    foo();\n+}\n+\n+fn foo<g: G>() {\n+    foo();\n+}\n+\n+fn foo<L: Loooooooooooooooooooooong, G: Geeeeeeeeeeeneric, I: iiiiiiiiis, L: Looooooooooooooooong>\n+    () {\n+    foo();\n+}\n+\n+fn foo<L: Loooooooooooooooooooong, G: Geeeeeeeeeeneric, I: iiiiiiiiis, L: Loooooooooooooooong>() {\n+    foo();\n+}\n+\n+fn foo<L: Loooooooooooooooooooong, G: Geeeeeeeeeeneric, I: iiiiiiiiis, L: Loooooooooooooooong>(a: Aaaaaaaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd) {\n+    foo();\n+}\n+\n trait Test {\n-    fn foo(\n-        a: u8\n-    ) {\n-    }\n+    fn foo(a: u8) {}\n \n     fn bar(\n-        a: u8\n+        a: Aaaaaaaaaaaaaa,\n+        b: Bbbbbbbbbbbbbb,\n+        c: Cccccccccccccccccc,\n+        d: Dddddddddddddddd,\n+        e: Eeeeeeeeeeeeeee\n     ) -> String {\n     }\n }"}, {"sha": "11f04d13ce6f3d6c8d0c5a9d9158a7c0081a4a2c", "filename": "tests/target/fn_args_layout-blockalways.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4edc6f1a4e069dcb46d1fc583dccefba7e4aae44/tests%2Ftarget%2Ffn_args_layout-blockalways.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edc6f1a4e069dcb46d1fc583dccefba7e4aae44/tests%2Ftarget%2Ffn_args_layout-blockalways.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn_args_layout-blockalways.rs?ref=4edc6f1a4e069dcb46d1fc583dccefba7e4aae44", "patch": "@@ -0,0 +1,49 @@\n+// rustfmt-fn_args_layout: BlockAlways\n+\n+fn foo() {\n+    foo();\n+}\n+\n+fn foo(\n+    a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb\n+) {\n+    foo();\n+}\n+\n+fn bar(\n+    a: Aaaaaaaaaaaaaa,\n+    b: Bbbbbbbbbbbbbb,\n+    c: Cccccccccccccccccc,\n+    d: Dddddddddddddddd,\n+    e: Eeeeeeeeeeeeeee\n+) {\n+    bar();\n+}\n+\n+fn foo(\n+    a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb\n+) -> String {\n+    foo();\n+}\n+\n+fn bar(\n+    a: Aaaaaaaaaaaaaa,\n+    b: Bbbbbbbbbbbbbb,\n+    c: Cccccccccccccccccc,\n+    d: Dddddddddddddddd,\n+    e: Eeeeeeeeeeeeeee\n+) -> String {\n+    bar();\n+}\n+\n+trait Test {\n+    fn foo(\n+        a: u8\n+    ) {\n+    }\n+\n+    fn bar(\n+        a: u8\n+    ) -> String {\n+    }\n+}"}]}