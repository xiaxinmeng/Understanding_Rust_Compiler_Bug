{"sha": "09991241fd75ec69281d06c8f907d2e9f61ac5e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5OTkxMjQxZmQ3NWVjNjkyODFkMDZjOGY5MDdkMmU5ZjYxYWM1ZTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-06T00:17:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-06T00:17:24Z"}, "message": "Auto merge of #38121 - jonathandturner:better_e0061, r=nikomatsakis\n\nPoint arg num mismatch errors back to their definition\n\nThis PR updates the arg num errors (like E0061) to point back at the function definition where they were defined.\n\nBefore:\n\n```\nerror[E0061]: this function takes 2 parameters but 1 parameter was supplied\n  --> E0061.rs:18:7\n   |\n18 |     f(0);\n   |       ^\n   |\n   = note: the following parameter types were expected:\n   = note: u16, &str\n```\n\nNow:\n\n```\nerror[E0061]: this function takes 2 parameters but 1 parameter was supplied\n  --> E0061.rs:18:7\n   |\n11 | fn f(a: u16, b: &str) {}\n   | ------------------------ defined here\n...\n18 |     f(0);\n   |       ^ expected 2 parameters\n```\n\nThis is an incremental improvement.  We probably want to underline only the function name and also have support for functions defined in crates outside of the current crate.\n\nr? @nikomatsakis", "tree": {"sha": "9a669760f99a625b7150987db9cac4d9f9107c86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a669760f99a625b7150987db9cac4d9f9107c86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09991241fd75ec69281d06c8f907d2e9f61ac5e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09991241fd75ec69281d06c8f907d2e9f61ac5e2", "html_url": "https://github.com/rust-lang/rust/commit/09991241fd75ec69281d06c8f907d2e9f61ac5e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09991241fd75ec69281d06c8f907d2e9f61ac5e2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daf8c1dfce3b448fc581cc319f64632ec22bd0e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/daf8c1dfce3b448fc581cc319f64632ec22bd0e1", "html_url": "https://github.com/rust-lang/rust/commit/daf8c1dfce3b448fc581cc319f64632ec22bd0e1"}, {"sha": "c735d7f2a53d6b3ecf9151e43066f8a30f42921c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c735d7f2a53d6b3ecf9151e43066f8a30f42921c", "html_url": "https://github.com/rust-lang/rust/commit/c735d7f2a53d6b3ecf9151e43066f8a30f42921c"}], "stats": {"total": 118, "additions": 59, "deletions": 59}, "files": [{"sha": "5b17b37e2795abc9f4245a5df1ddba029d2ea571", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=09991241fd75ec69281d06c8f907d2e9f61ac5e2", "patch": "@@ -193,9 +193,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             -> Ty<'tcx> {\n         let error_fn_sig;\n \n-        let fn_sig = match callee_ty.sty {\n-            ty::TyFnDef(.., &ty::BareFnTy {ref sig, ..}) |\n-            ty::TyFnPtr(&ty::BareFnTy {ref sig, ..}) => sig,\n+        let (fn_sig, def_span) = match callee_ty.sty {\n+            ty::TyFnDef(def_id, .., &ty::BareFnTy {ref sig, ..}) => {\n+                (sig, self.tcx.map.span_if_local(def_id))\n+            }\n+            ty::TyFnPtr(&ty::BareFnTy {ref sig, ..}) => (sig, None),\n             ref t => {\n                 let mut unit_variant = None;\n                 if let &ty::TyAdt(adt_def, ..) = t {\n@@ -241,7 +243,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     variadic: false,\n                 });\n \n-                &error_fn_sig\n+                (&error_fn_sig, None)\n             }\n         };\n \n@@ -266,7 +268,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                   &expected_arg_tys[..],\n                                   arg_exprs,\n                                   fn_sig.variadic,\n-                                  TupleArgumentsFlag::DontTupleArguments);\n+                                  TupleArgumentsFlag::DontTupleArguments,\n+                                  def_span);\n \n         fn_sig.output\n     }\n@@ -292,7 +295,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                   &expected_arg_tys,\n                                   arg_exprs,\n                                   fn_sig.variadic,\n-                                  TupleArgumentsFlag::TupleArguments);\n+                                  TupleArgumentsFlag::TupleArguments,\n+                                  None);\n \n         fn_sig.output\n     }"}, {"sha": "1950adf832977e19f6c2c5a9c4e9904dd905ddf6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=09991241fd75ec69281d06c8f907d2e9f61ac5e2", "patch": "@@ -2467,17 +2467,19 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             };\n \n             self.check_argument_types(sp, &err_inputs[..], &[], args_no_rcvr,\n-                                      false, tuple_arguments);\n+                                      false, tuple_arguments, None);\n             self.tcx.types.err\n         } else {\n             match method_fn_ty.sty {\n-                ty::TyFnDef(.., ref fty) => {\n+                ty::TyFnDef(def_id, .., ref fty) => {\n                     // HACK(eddyb) ignore self in the definition (see above).\n                     let expected_arg_tys = self.expected_types_for_fn_args(sp, expected,\n                                                                            fty.sig.0.output,\n                                                                            &fty.sig.0.inputs[1..]);\n+\n                     self.check_argument_types(sp, &fty.sig.0.inputs[1..], &expected_arg_tys[..],\n-                                              args_no_rcvr, fty.sig.0.variadic, tuple_arguments);\n+                                              args_no_rcvr, fty.sig.0.variadic, tuple_arguments,\n+                                              self.tcx.map.span_if_local(def_id));\n                     fty.sig.0.output\n                 }\n                 _ => {\n@@ -2495,7 +2497,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             expected_arg_tys: &[Ty<'tcx>],\n                             args: &'gcx [hir::Expr],\n                             variadic: bool,\n-                            tuple_arguments: TupleArgumentsFlag) {\n+                            tuple_arguments: TupleArgumentsFlag,\n+                            def_span: Option<Span>) {\n         let tcx = self.tcx;\n \n         // Grab the argument types, supplying fresh type variables\n@@ -2530,9 +2533,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             sp\n         };\n \n-        fn parameter_count_error<'tcx>(sess: &Session, sp: Span, fn_inputs: &[Ty<'tcx>],\n-                                       expected_count: usize, arg_count: usize, error_code: &str,\n-                                       variadic: bool) {\n+        fn parameter_count_error<'tcx>(sess: &Session, sp: Span, expected_count: usize,\n+                                       arg_count: usize, error_code: &str, variadic: bool,\n+                                       def_span: Option<Span>) {\n             let mut err = sess.struct_span_err_with_code(sp,\n                 &format!(\"this function takes {}{} parameter{} but {} parameter{} supplied\",\n                     if variadic {\"at least \"} else {\"\"},\n@@ -2542,18 +2545,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     if arg_count == 1 {\" was\"} else {\"s were\"}),\n                 error_code);\n \n-            let input_types = fn_inputs.iter().map(|i| format!(\"{:?}\", i)).collect::<Vec<String>>();\n-            if input_types.len() > 1 {\n-                err.note(\"the following parameter types were expected:\");\n-                err.note(&input_types.join(\", \"));\n-            } else if input_types.len() > 0 {\n-                err.note(&format!(\"the following parameter type was expected: {}\",\n-                                  input_types[0]));\n-            } else {\n-                err.span_label(sp, &format!(\"expected {}{} parameter{}\",\n-                                            if variadic {\"at least \"} else {\"\"},\n-                                            expected_count,\n-                                            if expected_count == 1 {\"\"} else {\"s\"}));\n+            err.span_label(sp, &format!(\"expected {}{} parameter{}\",\n+                                        if variadic {\"at least \"} else {\"\"},\n+                                        expected_count,\n+                                        if expected_count == 1 {\"\"} else {\"s\"}));\n+            if let Some(def_s) = def_span {\n+                err.span_label(def_s, &format!(\"defined here\"));\n             }\n             err.emit();\n         }\n@@ -2562,8 +2559,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let tuple_type = self.structurally_resolved_type(sp, fn_inputs[0]);\n             match tuple_type.sty {\n                 ty::TyTuple(arg_types) if arg_types.len() != args.len() => {\n-                    parameter_count_error(tcx.sess, sp_args, fn_inputs, arg_types.len(), args.len(),\n-                                          \"E0057\", false);\n+                    parameter_count_error(tcx.sess, sp_args, arg_types.len(), args.len(),\n+                                          \"E0057\", false, def_span);\n                     expected_arg_tys = &[];\n                     self.err_args(args.len())\n                 }\n@@ -2591,14 +2588,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             if supplied_arg_count >= expected_arg_count {\n                 fn_inputs.to_vec()\n             } else {\n-                parameter_count_error(tcx.sess, sp_args, fn_inputs, expected_arg_count,\n-                                      supplied_arg_count, \"E0060\", true);\n+                parameter_count_error(tcx.sess, sp_args, expected_arg_count,\n+                                      supplied_arg_count, \"E0060\", true, def_span);\n                 expected_arg_tys = &[];\n                 self.err_args(supplied_arg_count)\n             }\n         } else {\n-            parameter_count_error(tcx.sess, sp_args, fn_inputs, expected_arg_count,\n-                                  supplied_arg_count, \"E0061\", false);\n+            parameter_count_error(tcx.sess, sp_args, expected_arg_count,\n+                                  supplied_arg_count, \"E0061\", false, def_span);\n             expected_arg_tys = &[];\n             self.err_args(supplied_arg_count)\n         };"}, {"sha": "8246c42a4d4084398988cdc7f48562939cc0eb01", "filename": "src/test/compile-fail/E0060.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Ftest%2Fcompile-fail%2FE0060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Ftest%2Fcompile-fail%2FE0060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0060.rs?ref=09991241fd75ec69281d06c8f907d2e9f61ac5e2", "patch": "@@ -10,10 +10,11 @@\n \n extern \"C\" {\n     fn printf(_: *const u8, ...) -> u32;\n+    //~^ NOTE defined here\n }\n \n fn main() {\n     unsafe { printf(); }\n     //~^ ERROR E0060\n-    //~| NOTE the following parameter type was expected: *const u8\n+    //~| expected at least 1 parameter\n }"}, {"sha": "ebd4ad2e292aebd24c91cc20479b88a73fafd3e5", "filename": "src/test/compile-fail/E0061.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Ftest%2Fcompile-fail%2FE0061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Ftest%2Fcompile-fail%2FE0061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0061.rs?ref=09991241fd75ec69281d06c8f907d2e9f61ac5e2", "patch": "@@ -9,16 +9,17 @@\n // except according to those terms.\n \n fn f(a: u16, b: &str) {}\n+//~^ NOTE defined here\n \n fn f2(a: u16) {}\n+//~^ NOTE defined here\n \n fn main() {\n     f(0);\n     //~^ ERROR E0061\n-    //~| NOTE the following parameter types were expected:\n-    //~| NOTE u16, &str\n+    //~| expected 2 parameters\n \n     f2();\n     //~^ ERROR E0061\n-    //~| NOTE the following parameter type was expected: u16\n+    //~| expected 1 parameter\n }"}, {"sha": "148eea31ec6e3eb7cec41a597e93f6f45cecd7ee", "filename": "src/test/compile-fail/issue-18819.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Ftest%2Fcompile-fail%2Fissue-18819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Ftest%2Fcompile-fail%2Fissue-18819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18819.rs?ref=09991241fd75ec69281d06c8f907d2e9f61ac5e2", "patch": "@@ -19,12 +19,12 @@ impl Foo for X {\n }\n \n fn print_x(_: &Foo<Item=bool>, extra: &str) {\n+    //~^ NOTE defined here\n     println!(\"{}\", extra);\n }\n \n fn main() {\n     print_x(X);\n-    //~^ ERROR this function takes 2 parameters but 1 parameter was supplied\n-    //~| NOTE the following parameter types were expected:\n-    //~| NOTE &Foo<Item=bool>, &str\n+    //~^ ERROR E0061\n+    //~| NOTE expected 2 parameters\n }"}, {"sha": "4c63f7761a6dce3e488c0c2e7027b74ad7fc9316", "filename": "src/test/compile-fail/issue-3044.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs?ref=09991241fd75ec69281d06c8f907d2e9f61ac5e2", "patch": "@@ -14,7 +14,5 @@ fn main() {\n     needlesArr.iter().fold(|x, y| {\n     });\n     //~^^ ERROR this function takes 2 parameters but 1 parameter was supplied\n-    //~| NOTE the following parameter types were expected\n-    //~| NOTE _, _\n-    // the first error is, um, non-ideal.\n+    //~| NOTE expected 2 parameters\n }"}, {"sha": "e9f8367378a7737218d18274855d70b82165b4f3", "filename": "src/test/compile-fail/issue-4935.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Ftest%2Fcompile-fail%2Fissue-4935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Ftest%2Fcompile-fail%2Fissue-4935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4935.rs?ref=09991241fd75ec69281d06c8f907d2e9f61ac5e2", "patch": "@@ -11,6 +11,7 @@\n // Regression test for issue #4935\n \n fn foo(a: usize) {}\n+//~^ defined here\n fn main() { foo(5, 6) }\n //~^ ERROR this function takes 1 parameter but 2 parameters were supplied\n-//~| NOTE the following parameter type was expected\n+//~| NOTE expected 1 parameter"}, {"sha": "b8eb8434b350619ae28e38446843f579038da216", "filename": "src/test/compile-fail/method-call-err-msg.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Ftest%2Fcompile-fail%2Fmethod-call-err-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Ftest%2Fcompile-fail%2Fmethod-call-err-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-call-err-msg.rs?ref=09991241fd75ec69281d06c8f907d2e9f61ac5e2", "patch": "@@ -13,19 +13,21 @@\n pub struct Foo;\n impl Foo {\n     fn zero(self) -> Foo { self }\n+    //~^ NOTE defined here\n     fn one(self, _: isize) -> Foo { self }\n+    //~^ NOTE defined here\n     fn two(self, _: isize, _: isize) -> Foo { self }\n+    //~^ NOTE defined here\n }\n \n fn main() {\n     let x = Foo;\n     x.zero(0)   //~ ERROR this function takes 0 parameters but 1 parameter was supplied\n      //~^ NOTE expected 0 parameters\n      .one()     //~ ERROR this function takes 1 parameter but 0 parameters were supplied\n-     //~^ NOTE the following parameter type was expected\n+     //~^ NOTE expected 1 parameter\n      .two(0);   //~ ERROR this function takes 2 parameters but 1 parameter was supplied\n-     //~^ NOTE the following parameter types were expected\n-     //~| NOTE isize, isize\n+     //~^ NOTE expected 2 parameters\n \n     let y = Foo;\n     y.zero()"}, {"sha": "e13008df0d9b8f5c6ef344c1486f58dc1462ffb8", "filename": "src/test/compile-fail/not-enough-arguments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Ftest%2Fcompile-fail%2Fnot-enough-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Ftest%2Fcompile-fail%2Fnot-enough-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-enough-arguments.rs?ref=09991241fd75ec69281d06c8f907d2e9f61ac5e2", "patch": "@@ -13,12 +13,12 @@\n // unrelated errors.\n \n fn foo(a: isize, b: isize, c: isize, d:isize) {\n+  //~^ NOTE defined here\n   panic!();\n }\n \n fn main() {\n   foo(1, 2, 3);\n   //~^ ERROR this function takes 4 parameters but 3\n-  //~| NOTE the following parameter types were expected:\n-  //~| NOTE isize, isize, isize, isize\n+  //~| NOTE expected 4 parameters\n }"}, {"sha": "3295e2bebd231714d39e55e47daa9c4097b88ea0", "filename": "src/test/compile-fail/overloaded-calls-bad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foverloaded-calls-bad.rs?ref=09991241fd75ec69281d06c8f907d2e9f61ac5e2", "patch": "@@ -41,8 +41,8 @@ fn main() {\n     //~| NOTE found type\n     let ans = s();\n     //~^ ERROR this function takes 1 parameter but 0 parameters were supplied\n-    //~| NOTE the following parameter type was expected\n+    //~| NOTE expected 1 parameter\n     let ans = s(\"burma\", \"shave\");\n     //~^ ERROR this function takes 1 parameter but 2 parameters were supplied\n-    //~| NOTE the following parameter type was expected\n+    //~| NOTE expected 1 parameter\n }"}, {"sha": "565d8549b3729d38d11f9c63c40ab88a38e09753", "filename": "src/test/compile-fail/variadic-ffi-3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi-3.rs?ref=09991241fd75ec69281d06c8f907d2e9f61ac5e2", "patch": "@@ -10,18 +10,18 @@\n \n extern {\n     fn foo(f: isize, x: u8, ...);\n+    //~^ defined here\n+    //~| defined here\n }\n \n extern \"C\" fn bar(f: isize, x: u8) {}\n \n fn main() {\n     unsafe {\n         foo(); //~ ERROR: this function takes at least 2 parameters but 0 parameters were supplied\n-               //~^ NOTE the following parameter types were expected:\n-               //~| NOTE isize, u8\n+               //~| NOTE expected at least 2 parameters\n         foo(1); //~ ERROR: this function takes at least 2 parameters but 1 parameter was supplied\n-        //~^ NOTE the following parameter types were expected:\n-        //~| NOTE isize, u8\n+                //~| NOTE expected at least 2 parameters\n \n         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n         //~^ ERROR: mismatched types"}, {"sha": "0d6b0a552e4de981733df0af246a7dc0848b50cf", "filename": "src/test/ui/span/E0057.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Ftest%2Fui%2Fspan%2FE0057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09991241fd75ec69281d06c8f907d2e9f61ac5e2/src%2Ftest%2Fui%2Fspan%2FE0057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0057.stderr?ref=09991241fd75ec69281d06c8f907d2e9f61ac5e2", "patch": "@@ -2,17 +2,13 @@ error[E0057]: this function takes 1 parameter but 0 parameters were supplied\n   --> $DIR/E0057.rs:13:13\n    |\n 13 |     let a = f(); //~ ERROR E0057\n-   |             ^^^\n-   |\n-   = note: the following parameter type was expected: (_,)\n+   |             ^^^ expected 1 parameter\n \n error[E0057]: this function takes 1 parameter but 2 parameters were supplied\n   --> $DIR/E0057.rs:15:15\n    |\n 15 |     let c = f(2, 3); //~ ERROR E0057\n-   |               ^^^^\n-   |\n-   = note: the following parameter type was expected: (_,)\n+   |               ^^^^ expected 1 parameter\n \n error: aborting due to 2 previous errors\n "}]}