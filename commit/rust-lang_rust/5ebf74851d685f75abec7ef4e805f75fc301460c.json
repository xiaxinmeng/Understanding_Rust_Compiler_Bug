{"sha": "5ebf74851d685f75abec7ef4e805f75fc301460c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYmY3NDg1MWQ2ODVmNzVhYmVjN2VmNGU4MDVmNzVmYzMwMTQ2MGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-14T23:43:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-14T23:43:04Z"}, "message": "Auto merge of #47630 - canndrew:exhaustive-patterns, r=nikomatsakis\n\nStabilise feature(never_type). Introduce feature(exhaustive_patterns)\n\nThis stabilizes `!`, removing the feature gate as well as the old defaulting-to-`()` behavior. The pattern exhaustiveness checks which were covered by `feature(never_type)` have been moved behind a new `feature(exhaustive_patterns)` gate.", "tree": {"sha": "226dc784417a299554cc1ce7748f51d49797a2de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/226dc784417a299554cc1ce7748f51d49797a2de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ebf74851d685f75abec7ef4e805f75fc301460c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ebf74851d685f75abec7ef4e805f75fc301460c", "html_url": "https://github.com/rust-lang/rust/commit/5ebf74851d685f75abec7ef4e805f75fc301460c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ebf74851d685f75abec7ef4e805f75fc301460c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "521d91c6be76367d966df419677dd187f799b116", "url": "https://api.github.com/repos/rust-lang/rust/commits/521d91c6be76367d966df419677dd187f799b116", "html_url": "https://github.com/rust-lang/rust/commit/521d91c6be76367d966df419677dd187f799b116"}, {"sha": "a8a0c691914b72d1ca54057914b4cee2bd097ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8a0c691914b72d1ca54057914b4cee2bd097ae3", "html_url": "https://github.com/rust-lang/rust/commit/a8a0c691914b72d1ca54057914b4cee2bd097ae3"}], "stats": {"total": 842, "additions": 295, "deletions": 547}, "files": [{"sha": "67445daa436024b54b0bae004af0c440d7c3fcd2", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -882,24 +882,24 @@ mod impls {\n \n     ord_impl! { char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[stable(feature = \"never_type\", since = \"1.26.0\")]\n     impl PartialEq for ! {\n         fn eq(&self, _: &!) -> bool {\n             *self\n         }\n     }\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[stable(feature = \"never_type\", since = \"1.26.0\")]\n     impl Eq for ! {}\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[stable(feature = \"never_type\", since = \"1.26.0\")]\n     impl PartialOrd for ! {\n         fn partial_cmp(&self, _: &!) -> Option<Ordering> {\n             *self\n         }\n     }\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[stable(feature = \"never_type\", since = \"1.26.0\")]\n     impl Ord for ! {\n         fn cmp(&self, _: &!) -> Ordering {\n             *self"}, {"sha": "67126b496e211c5e1ddb6d44c396f567168a702e", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1711,14 +1711,14 @@ macro_rules! fmt_refs {\n \n fmt_refs! { Debug, Display, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperExp }\n \n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n+#[stable(feature = \"never_type\", since = \"1.26.0\")]\n impl Debug for ! {\n     fn fmt(&self, _: &mut Formatter) -> Result {\n         *self\n     }\n }\n \n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n+#[stable(feature = \"never_type\", since = \"1.26.0\")]\n impl Display for ! {\n     fn fmt(&self, _: &mut Formatter) -> Result {\n         *self"}, {"sha": "a947c9f0b7c1315fb80d102d79317603fa6dc33f", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -85,7 +85,7 @@\n #![feature(iterator_repeat_with)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n #![feature(no_core)]\n #![feature(on_unimplemented)]\n #![feature(optin_builtin_traits)]\n@@ -103,6 +103,7 @@\n #![feature(unwind_attributes)]\n \n #![cfg_attr(stage0, allow(unused_attributes))]\n+#![cfg_attr(stage0, feature(never_type))]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "bb3051b546e64d61e0131f9fec2789417f988a64", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -886,9 +886,8 @@ for ty::TypeVariants<'gcx>\n             TyGeneratorWitness(types) => {\n                 types.hash_stable(hcx, hasher)\n             }\n-            TyTuple(inner_tys, from_diverging_type_var) => {\n+            TyTuple(inner_tys) => {\n                 inner_tys.hash_stable(hcx, hasher);\n-                from_diverging_type_var.hash_stable(hcx, hasher);\n             }\n             TyProjection(ref projection_ty) => {\n                 projection_ty.hash_stable(hcx, hasher);"}, {"sha": "4e0cf59e8a7fd7dc6db068c5f4d60ac62feaab49", "filename": "src/librustc/infer/canonical.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -609,12 +609,6 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n                 bug!(\"encountered a canonical type during canonicalization\")\n             }\n \n-            // Replace a `()` that \"would've fallen back\" to `!` with just `()`.\n-            ty::TyTuple(ref tys, true) => {\n-                assert!(tys.is_empty());\n-                self.tcx().mk_nil()\n-            }\n-\n             ty::TyClosure(..)\n             | ty::TyGenerator(..)\n             | ty::TyGeneratorWitness(..)\n@@ -634,7 +628,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n             | ty::TyFnPtr(_)\n             | ty::TyDynamic(..)\n             | ty::TyNever\n-            | ty::TyTuple(_, false)\n+            | ty::TyTuple(..)\n             | ty::TyProjection(..)\n             | ty::TyForeign(..)\n             | ty::TyParam(..)"}, {"sha": "8bb3f4158ff5b8a56ec833bfbc3cc6135d61464a", "filename": "src/librustc/infer/outlives/bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Finfer%2Foutlives%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Finfer%2Foutlives%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fbounds.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -151,7 +151,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         // get solved *here*.\n         match fulfill_cx.select_all_or_error(self) {\n             Ok(()) => (),\n-            Err(errors) => self.report_fulfillment_errors(&errors, None),\n+            Err(errors) => self.report_fulfillment_errors(&errors, None, false),\n         }\n \n         implied_bounds"}, {"sha": "77b722c5695f86803465b0586d96ec7c2360c666", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -173,12 +173,6 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for FullTypeResolver<'a, 'gcx, 'tcx>\n                 ty::TyInfer(_) => {\n                     bug!(\"Unexpected type in full type resolver: {:?}\", t);\n                 }\n-                ty::TyTuple(tys, true) => {\n-                    // Un-default defaulted tuples - we are going to a\n-                    // different infcx, and the default will just cause\n-                    // pollution.\n-                    self.tcx().intern_tup(tys, false)\n-                }\n                 _ => {\n                     t.super_fold_with(self)\n                 }"}, {"sha": "51882385b2ef212cb5d920ffe78b29c3dc925ffb", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -60,7 +60,7 @@\n #![feature(match_default_bindings)]\n #![feature(macro_lifetime_matcher)]\n #![feature(macro_vis_matcher)]\n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n #![feature(non_exhaustive)]\n #![feature(nonzero)]\n #![feature(proc_macro_internals)]"}, {"sha": "b4ed9c269bd88334535b2b443c68b6206932f8cb", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -151,13 +151,6 @@ declare_lint! {\n     \"lints that have been renamed or removed\"\n }\n \n-declare_lint! {\n-    pub RESOLVE_TRAIT_ON_DEFAULTED_UNIT,\n-    Deny,\n-    \"attempt to resolve a trait on an expression whose type cannot be inferred but which \\\n-     currently defaults to ()\"\n-}\n-\n declare_lint! {\n     pub SAFE_EXTERN_STATICS,\n     Deny,\n@@ -237,12 +230,6 @@ declare_lint! {\n     \"detect mut variables which don't need to be mutable\"\n }\n \n-declare_lint! {\n-    pub COERCE_NEVER,\n-    Deny,\n-    \"detect coercion to !\"\n-}\n-\n declare_lint! {\n     pub SINGLE_USE_LIFETIME,\n     Allow,\n@@ -304,7 +291,6 @@ impl LintPass for HardwiredLints {\n             INVALID_TYPE_PARAM_DEFAULT,\n             CONST_ERR,\n             RENAMED_AND_REMOVED_LINTS,\n-            RESOLVE_TRAIT_ON_DEFAULTED_UNIT,\n             SAFE_EXTERN_STATICS,\n             SAFE_PACKED_BORROWS,\n             PATTERNS_IN_FNS_WITHOUT_BODY,\n@@ -318,7 +304,6 @@ impl LintPass for HardwiredLints {\n             DEPRECATED,\n             UNUSED_UNSAFE,\n             UNUSED_MUT,\n-            COERCE_NEVER,\n             SINGLE_USE_LIFETIME,\n             TYVAR_BEHIND_RAW_POINTER,\n             ELIDED_LIFETIME_IN_PATH,"}, {"sha": "6bf0c5d1ba3e39478389c9fa1d60b95fec599f37", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1298,7 +1298,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n           PatKind::Tuple(ref subpats, ddpos) => {\n             // (p1, ..., pN)\n             let expected_len = match self.pat_ty(&pat)?.sty {\n-                ty::TyTuple(ref tys, _) => tys.len(),\n+                ty::TyTuple(ref tys) => tys.len(),\n                 ref ty => span_bug!(pat.span, \"tuple pattern unexpected type {:?}\", ty),\n             };\n             for (i, subpat) in subpats.iter().enumerate_and_adjust(expected_len, ddpos) {"}, {"sha": "20902d9111019bd33c50ad11b927e7101e7317f2", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> Rvalue<'tcx> {\n                 let lhs_ty = lhs.ty(local_decls, tcx);\n                 let rhs_ty = rhs.ty(local_decls, tcx);\n                 let ty = op.ty(tcx, lhs_ty, rhs_ty);\n-                tcx.intern_tup(&[ty, tcx.types.bool], false)\n+                tcx.intern_tup(&[ty, tcx.types.bool])\n             }\n             Rvalue::UnaryOp(UnOp::Not, ref operand) |\n             Rvalue::UnaryOp(UnOp::Neg, ref operand) => {\n@@ -178,10 +178,7 @@ impl<'tcx> Rvalue<'tcx> {\n                         tcx.mk_array(ty, ops.len() as u64)\n                     }\n                     AggregateKind::Tuple => {\n-                        tcx.mk_tup(\n-                            ops.iter().map(|op| op.ty(local_decls, tcx)),\n-                            false\n-                        )\n+                        tcx.mk_tup(ops.iter().map(|op| op.ty(local_decls, tcx)))\n                     }\n                     AggregateKind::Adt(def, _, substs, _) => {\n                         tcx.type_of(def.did).subst(tcx, substs)"}, {"sha": "206a4bf668928f36857b335da18931ef570972d6", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 46, "deletions": 10, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -47,7 +47,8 @@ use syntax_pos::{DUMMY_SP, Span};\n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn report_fulfillment_errors(&self,\n                                      errors: &Vec<FulfillmentError<'tcx>>,\n-                                     body_id: Option<hir::BodyId>) {\n+                                     body_id: Option<hir::BodyId>,\n+                                     fallback_has_occurred: bool) {\n         #[derive(Debug)]\n         struct ErrorDescriptor<'tcx> {\n             predicate: ty::Predicate<'tcx>,\n@@ -107,7 +108,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         for (error, suppressed) in errors.iter().zip(is_suppressed) {\n             if !suppressed {\n-                self.report_fulfillment_error(error, body_id);\n+                self.report_fulfillment_error(error, body_id, fallback_has_occurred);\n             }\n         }\n     }\n@@ -151,11 +152,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn report_fulfillment_error(&self, error: &FulfillmentError<'tcx>,\n-                                body_id: Option<hir::BodyId>) {\n+                                body_id: Option<hir::BodyId>,\n+                                fallback_has_occurred: bool) {\n         debug!(\"report_fulfillment_errors({:?})\", error);\n         match error.code {\n             FulfillmentErrorCode::CodeSelectionError(ref e) => {\n-                self.report_selection_error(&error.obligation, e);\n+                self.report_selection_error(&error.obligation, e, fallback_has_occurred);\n             }\n             FulfillmentErrorCode::CodeProjectionError(ref e) => {\n                 self.report_projection_error(&error.obligation, e);\n@@ -533,7 +535,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn report_selection_error(&self,\n                                   obligation: &PredicateObligation<'tcx>,\n-                                  error: &SelectionError<'tcx>)\n+                                  error: &SelectionError<'tcx>,\n+                                  fallback_has_occurred: bool)\n     {\n         let span = obligation.cause.span;\n \n@@ -619,6 +622,39 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             self.report_similar_impl_candidates(impl_candidates, &mut err);\n                         }\n \n+                        // If this error is due to `!: Trait` not implemented but `(): Trait` is\n+                        // implemented, and fallback has occured, then it could be due to a\n+                        // variable that used to fallback to `()` now falling back to `!`. Issue a\n+                        // note informing about the change in behaviour.\n+                        if trait_predicate.skip_binder().self_ty().is_never()\n+                            && fallback_has_occurred\n+                        {\n+                            let predicate = trait_predicate.map_bound(|mut trait_pred| {\n+                                {\n+                                    let trait_ref = &mut trait_pred.trait_ref;\n+                                    let never_substs = trait_ref.substs;\n+                                    let mut unit_substs = Vec::with_capacity(never_substs.len());\n+                                    unit_substs.push(self.tcx.mk_nil().into());\n+                                    unit_substs.extend(&never_substs[1..]);\n+                                    trait_ref.substs = self.tcx.intern_substs(&unit_substs);\n+                                }\n+                                trait_pred\n+                            });\n+                            let unit_obligation = Obligation {\n+                                predicate: ty::Predicate::Trait(predicate),\n+                                .. obligation.clone()\n+                            };\n+                            let mut selcx = SelectionContext::new(self);\n+                            if selcx.evaluate_obligation(&unit_obligation) {\n+                                err.note(\"the trait is implemented for `()`. \\\n+                                         Possibly this error has been caused by changes to \\\n+                                         Rust's type-inference algorithm \\\n+                                         (see: https://github.com/rust-lang/rust/issues/48950 \\\n+                                         for more info). Consider whether you meant to use the \\\n+                                         type `()` here instead.\");\n+                            }\n+                        }\n+\n                         err\n                     }\n \n@@ -729,14 +765,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 }).map(|sp| self.tcx.sess.codemap().def_span(sp)); // the sp could be an fn def\n \n                 let found = match found_trait_ref.skip_binder().substs.type_at(1).sty {\n-                    ty::TyTuple(ref tys, _) => tys.iter()\n+                    ty::TyTuple(ref tys) => tys.iter()\n                         .map(|_| ArgKind::empty()).collect::<Vec<_>>(),\n                     _ => vec![ArgKind::empty()],\n                 };\n                 let expected = match expected_trait_ref.skip_binder().substs.type_at(1).sty {\n-                    ty::TyTuple(ref tys, _) => tys.iter()\n+                    ty::TyTuple(ref tys) => tys.iter()\n                         .map(|t| match t.sty {\n-                            ty::TypeVariants::TyTuple(ref tys, _) => ArgKind::Tuple(\n+                            ty::TypeVariants::TyTuple(ref tys) => ArgKind::Tuple(\n                                 Some(span),\n                                 tys.iter()\n                                     .map(|ty| (\"_\".to_owned(), format!(\"{}\", ty.sty)))\n@@ -986,7 +1022,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         fn build_fn_sig_string<'a, 'gcx, 'tcx>(tcx: ty::TyCtxt<'a, 'gcx, 'tcx>,\n                                                trait_ref: &ty::TraitRef<'tcx>) -> String {\n             let inputs = trait_ref.substs.type_at(1);\n-            let sig = if let ty::TyTuple(inputs, _) = inputs.sty {\n+            let sig = if let ty::TyTuple(inputs) = inputs.sty {\n                 tcx.mk_fn_sig(\n                     inputs.iter().map(|&x| x),\n                     tcx.mk_infer(ty::TyVar(ty::TyVid { index: 0 })),\n@@ -1422,7 +1458,7 @@ impl ArgKind {\n     /// argument. This has no name (`_`) and no source spans..\n     pub fn from_expected_ty(t: Ty<'_>) -> ArgKind {\n         match t.sty {\n-            ty::TyTuple(ref tys, _) => ArgKind::Tuple(\n+            ty::TyTuple(ref tys) => ArgKind::Tuple(\n                 None,\n                 tys.iter()\n                    .map(|ty| (\"_\".to_owned(), format!(\"{}\", ty.sty)))"}, {"sha": "150a2ead9e96d61f338796e357b2537edcc6aaae", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -330,11 +330,7 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n             if data.is_global() {\n                 // no type variables present, can use evaluation for better caching.\n                 // FIXME: consider caching errors too.\n-                if\n-                    // make defaulted unit go through the slow path for better warnings,\n-                    // please remove this when the warnings are removed.\n-                    !trait_obligation.predicate.skip_binder().self_ty().is_defaulted_unit() &&\n-                    selcx.evaluate_obligation_conservatively(&obligation) {\n+                if selcx.evaluate_obligation_conservatively(&obligation) {\n                     debug!(\"selecting trait `{:?}` at depth {} evaluated to holds\",\n                            data, obligation.recursion_depth);\n                     return Ok(Some(vec![]))"}, {"sha": "bd8f99780f9f12c8913f615d933a3fbeeee5a3f6", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -580,7 +580,7 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         ) {\n             Ok(predicates) => predicates,\n             Err(errors) => {\n-                infcx.report_fulfillment_errors(&errors, None);\n+                infcx.report_fulfillment_errors(&errors, None, false);\n                 // An unnormalized env is better than nothing.\n                 return elaborated_env;\n             }"}, {"sha": "1caab6fd89ef982da60af7ec036a874e46663b69", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -236,7 +236,7 @@ fn trivial_dropck_outlives<'cx, 'tcx>(tcx: TyCtxt<'cx, '_, 'tcx>, ty: Ty<'tcx>)\n \n         // (T1..Tn) and closures have same properties as T1..Tn --\n         // check if *any* of those are trivial.\n-        ty::TyTuple(ref tys, _) => tys.iter().cloned().all(|t| trivial_dropck_outlives(tcx, t)),\n+        ty::TyTuple(ref tys) => tys.iter().cloned().all(|t| trivial_dropck_outlives(tcx, t)),\n         ty::TyClosure(def_id, ref substs) => substs\n             .upvar_tys(def_id, tcx)\n             .all(|t| trivial_dropck_outlives(tcx, t)),"}, {"sha": "4db81cf1dec1d3827f9689f2366ee21cd2c56ce3", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 6, "deletions": 49, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -53,7 +53,6 @@ use std::mem;\n use std::rc::Rc;\n use syntax::abi::Abi;\n use hir;\n-use lint;\n use util::nodemap::{FxHashMap, FxHashSet};\n \n \n@@ -526,54 +525,12 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         debug!(\"select({:?})\", obligation);\n         assert!(!obligation.predicate.has_escaping_regions());\n \n-        let tcx = self.tcx();\n-\n         let stack = self.push_stack(TraitObligationStackList::empty(), obligation);\n         let ret = match self.candidate_from_obligation(&stack)? {\n             None => None,\n             Some(candidate) => Some(self.confirm_candidate(obligation, candidate)?)\n         };\n \n-        // Test whether this is a `()` which was produced by defaulting a\n-        // diverging type variable with `!` disabled. If so, we may need\n-        // to raise a warning.\n-        if obligation.predicate.skip_binder().self_ty().is_defaulted_unit() {\n-            let mut raise_warning = true;\n-            // Don't raise a warning if the trait is implemented for ! and only\n-            // permits a trivial implementation for !. This stops us warning\n-            // about (for example) `(): Clone` becoming `!: Clone` because such\n-            // a switch can't cause code to stop compiling or execute\n-            // differently.\n-            let mut never_obligation = obligation.clone();\n-            let def_id = never_obligation.predicate.skip_binder().trait_ref.def_id;\n-            never_obligation.predicate = never_obligation.predicate.map_bound(|mut trait_pred| {\n-                // Swap out () with ! so we can check if the trait is impld for !\n-                {\n-                    let trait_ref = &mut trait_pred.trait_ref;\n-                    let unit_substs = trait_ref.substs;\n-                    let mut never_substs = Vec::with_capacity(unit_substs.len());\n-                    never_substs.push(tcx.types.never.into());\n-                    never_substs.extend(&unit_substs[1..]);\n-                    trait_ref.substs = tcx.intern_substs(&never_substs);\n-                }\n-                trait_pred\n-            });\n-            if let Ok(Some(..)) = self.select(&never_obligation) {\n-                if !tcx.trait_relevant_for_never(def_id) {\n-                    // The trait is also implemented for ! and the resulting\n-                    // implementation cannot actually be invoked in any way.\n-                    raise_warning = false;\n-                }\n-            }\n-\n-            if raise_warning {\n-                tcx.lint_node(lint::builtin::RESOLVE_TRAIT_ON_DEFAULTED_UNIT,\n-                              obligation.cause.body_id,\n-                              obligation.cause.span,\n-                              &format!(\"code relies on type inference rules which are likely \\\n-                                        to change\"));\n-            }\n-        }\n         Ok(ret)\n     }\n \n@@ -1929,7 +1886,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n \n             // (.., T) -> (.., U).\n-            (&ty::TyTuple(tys_a, _), &ty::TyTuple(tys_b, _)) => {\n+            (&ty::TyTuple(tys_a), &ty::TyTuple(tys_b)) => {\n                 tys_a.len() == tys_b.len()\n             }\n \n@@ -2068,7 +2025,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n             ty::TyStr | ty::TySlice(_) | ty::TyDynamic(..) | ty::TyForeign(..) => Never,\n \n-            ty::TyTuple(tys, _) => {\n+            ty::TyTuple(tys) => {\n                 Where(ty::Binder(tys.last().into_iter().cloned().collect()))\n             }\n \n@@ -2122,7 +2079,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 Where(ty::Binder(vec![element_ty]))\n             }\n \n-            ty::TyTuple(tys, _) => {\n+            ty::TyTuple(tys) => {\n                 // (*) binder moved here\n                 Where(ty::Binder(tys.to_vec()))\n             }\n@@ -2215,7 +2172,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 vec![element_ty]\n             }\n \n-            ty::TyTuple(ref tys, _) => {\n+            ty::TyTuple(ref tys) => {\n                 // (T1, ..., Tn) -- meets any bound that all of T1...Tn meet\n                 tys.to_vec()\n             }\n@@ -3004,7 +2961,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n \n             // (.., T) -> (.., U).\n-            (&ty::TyTuple(tys_a, _), &ty::TyTuple(tys_b, _)) => {\n+            (&ty::TyTuple(tys_a), &ty::TyTuple(tys_b)) => {\n                 assert_eq!(tys_a.len(), tys_b.len());\n \n                 // The last field of the tuple has to exist.\n@@ -3017,7 +2974,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n                 // Check that the source tuple with the target's\n                 // last element is equal to the target.\n-                let new_tuple = tcx.mk_tup(a_mid.iter().chain(Some(b_last)), false);\n+                let new_tuple = tcx.mk_tup(a_mid.iter().chain(Some(b_last)));\n                 let InferOk { obligations, .. } =\n                     self.infcx.at(&obligation.cause, obligation.param_env)\n                               .eq(target, new_tuple)"}, {"sha": "8f7a24057472c1c2d65b48b4a52e13b366a393e6", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -503,7 +503,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let arguments_tuple = match tuple_arguments {\n             TupleArgumentsFlag::No => sig.skip_binder().inputs()[0],\n             TupleArgumentsFlag::Yes =>\n-                self.intern_tup(sig.skip_binder().inputs(), false),\n+                self.intern_tup(sig.skip_binder().inputs()),\n         };\n         let trait_ref = ty::TraitRef {\n             def_id: fn_trait_def_id,"}, {"sha": "fd3465f59ebf2c79661fc694f21dde7dff3f9072", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -2014,7 +2014,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn coerce_closure_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {\n         let converted_sig = sig.map_bound(|s| {\n             let params_iter = match s.inputs()[0].sty {\n-                ty::TyTuple(params, _) => {\n+                ty::TyTuple(params) => {\n                     params.into_iter().cloned()\n                 }\n                 _ => bug!(),\n@@ -2134,25 +2134,16 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_ty(TySlice(ty))\n     }\n \n-    pub fn intern_tup(self, ts: &[Ty<'tcx>], defaulted: bool) -> Ty<'tcx> {\n-        self.mk_ty(TyTuple(self.intern_type_list(ts), defaulted))\n+    pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {\n+        self.mk_ty(TyTuple(self.intern_type_list(ts)))\n     }\n \n-    pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I,\n-                                                     defaulted: bool) -> I::Output {\n-        iter.intern_with(|ts| self.mk_ty(TyTuple(self.intern_type_list(ts), defaulted)))\n+    pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {\n+        iter.intern_with(|ts| self.mk_ty(TyTuple(self.intern_type_list(ts))))\n     }\n \n     pub fn mk_nil(self) -> Ty<'tcx> {\n-        self.intern_tup(&[], false)\n-    }\n-\n-    pub fn mk_diverging_default(self) -> Ty<'tcx> {\n-        if self.features().never_type {\n-            self.types.never\n-        } else {\n-            self.intern_tup(&[], true)\n-        }\n+        self.intern_tup(&[])\n     }\n \n     pub fn mk_bool(self) -> Ty<'tcx> {"}, {"sha": "eb3924186472c57d9364ca1b551db96f7026bf87", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -177,7 +177,7 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n         match self.sty {\n             ty::TyBool | ty::TyChar | ty::TyInt(_) |\n             ty::TyUint(_) | ty::TyFloat(_) | ty::TyStr | ty::TyNever => self.to_string(),\n-            ty::TyTuple(ref tys, _) if tys.is_empty() => self.to_string(),\n+            ty::TyTuple(ref tys) if tys.is_empty() => self.to_string(),\n \n             ty::TyAdt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.item_path_str(def.did)),\n             ty::TyForeign(def_id) => format!(\"extern type `{}`\", tcx.item_path_str(def_id)),"}, {"sha": "6533a7440ac384a86ec3614da8f79f59773c511d", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -97,7 +97,7 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n             Some(GeneratorWitnessSimplifiedType(tys.skip_binder().len()))\n         }\n         ty::TyNever => Some(NeverSimplifiedType),\n-        ty::TyTuple(ref tys, _) => {\n+        ty::TyTuple(ref tys) => {\n             Some(TupleSimplifiedType(tys.len()))\n         }\n         ty::TyFnPtr(ref f) => {"}, {"sha": "086fc66c70f9d27e85bef68f93c77bade8f3231e", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -179,10 +179,7 @@ impl FlagComputation {\n                 self.add_ty(m.ty);\n             }\n \n-            &ty::TyTuple(ref ts, is_default) => {\n-                if is_default {\n-                    self.add_flags(TypeFlags::KEEP_IN_LOCAL_TCX);\n-                }\n+            &ty::TyTuple(ref ts) => {\n                 self.add_tys(&ts[..]);\n             }\n "}, {"sha": "325f8575fd0a792b922546a9277cc3d737fdb4c2", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -256,7 +256,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             },\n \n             TyNever => DefIdForest::full(tcx),\n-            TyTuple(ref tys, _) => {\n+            TyTuple(ref tys) => {\n                 DefIdForest::union(tcx, tys.iter().map(|ty| {\n                     ty.uninhabited_from(visited, tcx)\n                 }))"}, {"sha": "1f23b0a27e33de547d85402b0bf9301317978ce1", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -355,9 +355,9 @@ pub fn characteristic_def_id_of_type(ty: Ty) -> Option<DefId> {\n         ty::TyRawPtr(mt) |\n         ty::TyRef(_, mt) => characteristic_def_id_of_type(mt.ty),\n \n-        ty::TyTuple(ref tys, _) => tys.iter()\n-                                      .filter_map(|ty| characteristic_def_id_of_type(ty))\n-                                      .next(),\n+        ty::TyTuple(ref tys) => tys.iter()\n+                                   .filter_map(|ty| characteristic_def_id_of_type(ty))\n+                                   .next(),\n \n         ty::TyFnDef(def_id, _) |\n         ty::TyClosure(def_id, _) |"}, {"sha": "3a3f10cb87db4c6d5d74b56423fecf919079ff5e", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1318,7 +1318,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     StructKind::AlwaysSized)?\n             }\n \n-            ty::TyTuple(tys, _) => {\n+            ty::TyTuple(tys) => {\n                 let kind = if tys.len() == 0 {\n                     StructKind::AlwaysSized\n                 } else {\n@@ -2243,7 +2243,7 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n                 substs.field_tys(def_id, tcx).nth(i).unwrap()\n             }\n \n-            ty::TyTuple(tys, _) => tys[i],\n+            ty::TyTuple(tys) => tys[i],\n \n             // SIMD vector types.\n             ty::TyAdt(def, ..) if def.repr.simd() => {"}, {"sha": "09b11a36352e123a50ae532b68851df03dd8d2e2", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -2046,7 +2046,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                 vec![ty]\n             }\n \n-            TyTuple(ref tys, _) => {\n+            TyTuple(ref tys) => {\n                 match tys.last() {\n                     None => vec![],\n                     Some(ty) => self.sized_constraint_for_ty(tcx, ty)"}, {"sha": "36eb3e3f94cfa0c529750b954c27d160bd310f8a", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -529,11 +529,10 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n             Ok(tcx.mk_slice(t))\n         }\n \n-        (&ty::TyTuple(as_, a_defaulted), &ty::TyTuple(bs, b_defaulted)) =>\n+        (&ty::TyTuple(as_), &ty::TyTuple(bs)) =>\n         {\n             if as_.len() == bs.len() {\n-                let defaulted = a_defaulted || b_defaulted;\n-                Ok(tcx.mk_tup(as_.iter().zip(bs).map(|(a, b)| relation.relate(a, b)), defaulted)?)\n+                Ok(tcx.mk_tup(as_.iter().zip(bs).map(|(a, b)| relation.relate(a, b)))?)\n             } else if !(as_.is_empty() || bs.is_empty()) {\n                 Err(TypeError::TupleSize(\n                     expected_found(relation, &as_.len(), &bs.len())))"}, {"sha": "c9a69d5405c9a4e716ea0bcf159d777ff2cafa88", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -869,7 +869,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyAdt(tid, substs) => ty::TyAdt(tid, substs.fold_with(folder)),\n             ty::TyDynamic(ref trait_ty, ref region) =>\n                 ty::TyDynamic(trait_ty.fold_with(folder), region.fold_with(folder)),\n-            ty::TyTuple(ts, defaulted) => ty::TyTuple(ts.fold_with(folder), defaulted),\n+            ty::TyTuple(ts) => ty::TyTuple(ts.fold_with(folder)),\n             ty::TyFnDef(def_id, substs) => {\n                 ty::TyFnDef(def_id, substs.fold_with(folder))\n             }\n@@ -908,7 +908,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyAdt(_, substs) => substs.visit_with(visitor),\n             ty::TyDynamic(ref trait_ty, ref reg) =>\n                 trait_ty.visit_with(visitor) || reg.visit_with(visitor),\n-            ty::TyTuple(ts, _) => ts.visit_with(visitor),\n+            ty::TyTuple(ts) => ts.visit_with(visitor),\n             ty::TyFnDef(_, substs) => substs.visit_with(visitor),\n             ty::TyFnPtr(ref f) => f.visit_with(visitor),\n             ty::TyRef(r, ref tm) => r.visit_with(visitor) || tm.visit_with(visitor),"}, {"sha": "ae053d7f4f58db96dbe39d02edb1d0b729268b69", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -148,11 +148,7 @@ pub enum TypeVariants<'tcx> {\n     TyNever,\n \n     /// A tuple type.  For example, `(i32, bool)`.\n-    /// The bool indicates whether this is a unit tuple and was created by\n-    /// defaulting a diverging type variable with feature(never_type) disabled.\n-    /// It's only purpose is for raising future-compatibility warnings for when\n-    /// diverging type variables start defaulting to ! instead of ().\n-    TyTuple(&'tcx Slice<Ty<'tcx>>, bool),\n+    TyTuple(&'tcx Slice<Ty<'tcx>>),\n \n     /// The projection of an associated type.  For example,\n     /// `<T as Trait<..>>::N`.\n@@ -1274,7 +1270,7 @@ impl RegionKind {\n impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     pub fn is_nil(&self) -> bool {\n         match self.sty {\n-            TyTuple(ref tys, _) => tys.is_empty(),\n+            TyTuple(ref tys) => tys.is_empty(),\n             _ => false,\n         }\n     }\n@@ -1286,15 +1282,6 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    /// Test whether this is a `()` which was produced by defaulting a\n-    /// diverging type variable with feature(never_type) disabled.\n-    pub fn is_defaulted_unit(&self) -> bool {\n-        match self.sty {\n-            TyTuple(_, true) => true,\n-            _ => false,\n-        }\n-    }\n-\n     pub fn is_primitive(&self) -> bool {\n         match self.sty {\n             TyBool | TyChar | TyInt(_) | TyUint(_) | TyFloat(_) => true,"}, {"sha": "91d460a96f785725eea068e89dce00f6bbbe1567", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -269,7 +269,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 // Don't use `non_enum_variant`, this may be a univariant enum.\n                 adt.variants[0].fields.get(i).map(|f| f.ty(self, substs))\n             }\n-            (&TyTuple(ref v, _), None) => v.get(i).cloned(),\n+            (&TyTuple(ref v), None) => v.get(i).cloned(),\n             _ => None,\n         }\n     }\n@@ -307,7 +307,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 }\n \n-                ty::TyTuple(tys, _) => {\n+                ty::TyTuple(tys) => {\n                     if let Some((&last_ty, _)) = tys.split_last() {\n                         ty = last_ty;\n                     } else {\n@@ -344,7 +344,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                         break;\n                     }\n                 },\n-                (&TyTuple(a_tys, _), &TyTuple(b_tys, _))\n+                (&TyTuple(a_tys), &TyTuple(b_tys))\n                         if a_tys.len() == b_tys.len() => {\n                     if let Some(a_last) = a_tys.last() {\n                         a = a_last;\n@@ -709,9 +709,8 @@ impl<'a, 'gcx, 'tcx, W> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx, W>\n             TyGeneratorWitness(tys) => {\n                 self.hash(tys.skip_binder().len());\n             }\n-            TyTuple(tys, defaulted) => {\n+            TyTuple(tys) => {\n                 self.hash(tys.len());\n-                self.hash(defaulted);\n             }\n             TyParam(p) => {\n                 self.hash(p.idx);\n@@ -838,7 +837,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n             -> Representability\n         {\n             match ty.sty {\n-                TyTuple(ref ts, _) => {\n+                TyTuple(ref ts) => {\n                     // Find non representable\n                     fold_repr(ts.iter().map(|ty| {\n                         is_type_structurally_recursive(tcx, sp, seen, representable_cache, ty)\n@@ -1106,7 +1105,7 @@ fn needs_drop_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // state transformation pass\n         ty::TyGenerator(..) => true,\n \n-        ty::TyTuple(ref tys, _) => tys.iter().cloned().any(needs_drop),\n+        ty::TyTuple(ref tys) => tys.iter().cloned().any(needs_drop),\n \n         // unions don't have destructors regardless of the child types\n         ty::TyAdt(def, _) if def.is_union() => false,"}, {"sha": "46c048e839b4b9e422942b387f1e2f3e8169f4aa", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -125,7 +125,7 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n         ty::TyGeneratorWitness(ts) => {\n             stack.extend(ts.skip_binder().iter().cloned().rev());\n         }\n-        ty::TyTuple(ts, _) => {\n+        ty::TyTuple(ts) => {\n             stack.extend(ts.iter().cloned().rev());\n         }\n         ty::TyFnDef(_, substs) => {"}, {"sha": "f05d56c9d8371657ccb05c6d1b76cd422f425b6c", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -275,7 +275,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n                     self.compute_const(len);\n                 }\n \n-                ty::TyTuple(ref tys, _) => {\n+                ty::TyTuple(ref tys) => {\n                     if let Some((_last, rest)) = tys.split_last() {\n                         for elem in rest {\n                             self.require_sized(elem, traits::TupleElem);"}, {"sha": "2c3ee1ec285a9bd5d8f5b0cf80e6085ef5caa2db", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -340,7 +340,7 @@ impl PrintContext {\n \n         if !verbose && fn_trait_kind.is_some() && projections.len() == 1 {\n             let projection_ty = projections[0].ty;\n-            if let TyTuple(ref args, _) = substs.type_at(1).sty {\n+            if let TyTuple(ref args) = substs.type_at(1).sty {\n                 return self.fn_sig(f, args, false, projection_ty);\n             }\n         }\n@@ -1013,7 +1013,7 @@ define_print! {\n                     tm.print(f, cx)\n                 }\n                 TyNever => write!(f, \"!\"),\n-                TyTuple(ref tys, _) => {\n+                TyTuple(ref tys) => {\n                     write!(f, \"(\")?;\n                     let mut tys = tys.iter();\n                     if let Some(&ty) = tys.next() {"}, {"sha": "97577008377abd4d442369d8983e54efdaee5ee7", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -298,7 +298,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn t_pair(&self, ty1: Ty<'tcx>, ty2: Ty<'tcx>) -> Ty<'tcx> {\n-        self.infcx.tcx.intern_tup(&[ty1, ty2], false)\n+        self.infcx.tcx.intern_tup(&[ty1, ty2])\n     }\n \n     pub fn t_param(&self, index: u32) -> Ty<'tcx> {\n@@ -604,8 +604,8 @@ fn walk_ty() {\n         let tcx = env.infcx.tcx;\n         let int_ty = tcx.types.isize;\n         let usize_ty = tcx.types.usize;\n-        let tup1_ty = tcx.intern_tup(&[int_ty, usize_ty, int_ty, usize_ty], false);\n-        let tup2_ty = tcx.intern_tup(&[tup1_ty, tup1_ty, usize_ty], false);\n+        let tup1_ty = tcx.intern_tup(&[int_ty, usize_ty, int_ty, usize_ty]);\n+        let tup2_ty = tcx.intern_tup(&[tup1_ty, tup1_ty, usize_ty]);\n         let walked: Vec<_> = tup2_ty.walk().collect();\n         assert_eq!(walked,\n                    [tup2_ty, tup1_ty, int_ty, usize_ty, int_ty, usize_ty, tup1_ty, int_ty,\n@@ -619,8 +619,8 @@ fn walk_ty_skip_subtree() {\n         let tcx = env.infcx.tcx;\n         let int_ty = tcx.types.isize;\n         let usize_ty = tcx.types.usize;\n-        let tup1_ty = tcx.intern_tup(&[int_ty, usize_ty, int_ty, usize_ty], false);\n-        let tup2_ty = tcx.intern_tup(&[tup1_ty, tup1_ty, usize_ty], false);\n+        let tup1_ty = tcx.intern_tup(&[int_ty, usize_ty, int_ty, usize_ty]);\n+        let tup2_ty = tcx.intern_tup(&[tup1_ty, tup1_ty, usize_ty]);\n \n         // types we expect to see (in order), plus a boolean saying\n         // whether to skip the subtree."}, {"sha": "8b86c90548952b50b4de890f7aeea7bbb1e16df0", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -32,6 +32,7 @@\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_patterns)]\n+#![cfg_attr(stage0, feature(never_type))]\n \n #[macro_use]\n extern crate syntax;\n@@ -234,11 +235,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue #39207 <https://github.com/rust-lang/rust/issues/39207>\",\n             epoch: None,\n         },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(RESOLVE_TRAIT_ON_DEFAULTED_UNIT),\n-            reference: \"issue #39216 <https://github.com/rust-lang/rust/issues/39216>\",\n-            epoch: None,\n-        },\n         FutureIncompatibleInfo {\n             id: LintId::of(MISSING_FRAGMENT_SPECIFIER),\n             reference: \"issue #40107 <https://github.com/rust-lang/rust/issues/40107>\",\n@@ -274,11 +270,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue #46205 <https://github.com/rust-lang/rust/issues/46205>\",\n             epoch: None,\n         },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(COERCE_NEVER),\n-            reference: \"issue #46325 <https://github.com/rust-lang/rust/issues/46325>\",\n-            epoch: None,\n-        },\n         FutureIncompatibleInfo {\n             id: LintId::of(TYVAR_BEHIND_RAW_POINTER),\n             reference: \"issue #46906 <https://github.com/rust-lang/rust/issues/46906>\",\n@@ -315,4 +306,8 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/36892\");\n     store.register_removed(\"extra_requirement_in_impl\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/37166\");\n+    store.register_removed(\"coerce_never\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/48950\");\n+    store.register_removed(\"resolve_trait_on_defaulted_unit\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/48950\");\n }"}, {"sha": "d777f6f19b0ffd8ca7af3aa916ec0f13780533a5", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -58,7 +58,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n \n         let t = cx.tables.expr_ty(&expr);\n         let ty_warned = match t.sty {\n-            ty::TyTuple(ref tys, _) if tys.is_empty() => return,\n+            ty::TyTuple(ref tys) if tys.is_empty() => return,\n             ty::TyNever => return,\n             ty::TyAdt(def, _) => {\n                 if def.variants.is_empty() {"}, {"sha": "56371d809b26abbd07b09c02c5d7cba64cf056fd", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -789,7 +789,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 } else {\n                     format!(\"{}\", def.non_enum_variant().fields[field.index()].name)\n                 },\n-                ty::TyTuple(_, _) => format!(\"{}\", field.index()),\n+                ty::TyTuple(_) => format!(\"{}\", field.index()),\n                 ty::TyRef(_, tnm) | ty::TyRawPtr(tnm) => {\n                     self.describe_field_from_ty(&tnm.ty, field)\n                 }"}, {"sha": "022831b5a9259db2286d7cfc672d43b8e8b7f61a", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -542,7 +542,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                         }),\n                     };\n                 }\n-                ty::TyTuple(tys, _) => {\n+                ty::TyTuple(tys) => {\n                     return match tys.get(field.index()) {\n                         Some(&ty) => Ok(ty),\n                         None => Err(FieldAccessError::OutOfRange {"}, {"sha": "afd338581392d8c6f8761df754acba455097b9c1", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -635,7 +635,7 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n                         let (&output, tuplized_inputs) = inputs_and_output.split_last().unwrap();\n                         assert_eq!(tuplized_inputs.len(), 1, \"multiple closure inputs\");\n                         let inputs = match tuplized_inputs[0].sty {\n-                            ty::TyTuple(inputs, _) => inputs,\n+                            ty::TyTuple(inputs) => inputs,\n                             _ => bug!(\"closure inputs not a tuple: {:?}\", tuplized_inputs[0]),\n                         };\n "}, {"sha": "b7f402f61a9c1d5ac8f56a6bd4ab927168f13c31", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -298,7 +298,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let source_info = self.source_info(span);\n         let bool_ty = self.hir.bool_ty();\n         if self.hir.check_overflow() && op.is_checkable() && ty.is_integral() {\n-            let result_tup = self.hir.tcx().intern_tup(&[ty, bool_ty], false);\n+            let result_tup = self.hir.tcx().intern_tup(&[ty, bool_ty]);\n             let result_value = self.temp(result_tup, span);\n \n             self.cfg.push_assign(block, source_info,"}, {"sha": "4e95ee6444dcf956754807bb61380204c2bf9c44", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             PatternKind::Variant { adt_def, substs, variant_index, ref subpatterns } => {\n                 let irrefutable = adt_def.variants.iter().enumerate().all(|(i, v)| {\n                     i == variant_index || {\n-                        self.hir.tcx().features().never_type &&\n+                        self.hir.tcx().features().exhaustive_patterns &&\n                         self.hir.tcx().is_variant_uninhabited_from_all_modules(v, substs)\n                     }\n                 });"}, {"sha": "62d1b43d625706a3cc262f4fbd5437f3b8e19c26", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -227,7 +227,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n                 let arg_tys = args.iter().map(|e| cx.tables().expr_ty_adjusted(e));\n                 let tupled_args = Expr {\n-                    ty: cx.tcx.mk_tup(arg_tys, false),\n+                    ty: cx.tcx.mk_tup(arg_tys),\n                     temp_lifetime,\n                     span: expr.span,\n                     kind: ExprKind::Tuple { fields: args.iter().map(ToRef::to_ref).collect() },"}, {"sha": "6f8b1f8e799403bd2d5497425a05f98f5c795284", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -219,7 +219,7 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n     }\n \n     fn is_uninhabited(&self, ty: Ty<'tcx>) -> bool {\n-        if self.tcx.features().never_type {\n+        if self.tcx.features().exhaustive_patterns {\n             self.tcx.is_ty_uninhabited_from(self.module, ty)\n         } else {\n             false\n@@ -245,7 +245,7 @@ impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n                               substs: &'tcx ty::subst::Substs<'tcx>)\n                               -> bool\n     {\n-        if self.tcx.features().never_type {\n+        if self.tcx.features().exhaustive_patterns {\n             self.tcx.is_enum_variant_uninhabited_from(self.module, variant, substs)\n         } else {\n             false\n@@ -694,7 +694,7 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         // test for details.\n         //\n         // FIXME: currently the only way I know of something can\n-        // be a privately-empty enum is when the never_type\n+        // be a privately-empty enum is when the exhaustive_patterns\n         // feature flag is not present, so this is only\n         // needed for that case.\n \n@@ -877,7 +877,7 @@ fn pat_constructors<'tcx>(_cx: &mut MatchCheckCtxt,\n fn constructor_arity(_cx: &MatchCheckCtxt, ctor: &Constructor, ty: Ty) -> u64 {\n     debug!(\"constructor_arity({:#?}, {:?})\", ctor, ty);\n     match ty.sty {\n-        ty::TyTuple(ref fs, _) => fs.len() as u64,\n+        ty::TyTuple(ref fs) => fs.len() as u64,\n         ty::TySlice(..) | ty::TyArray(..) => match *ctor {\n             Slice(length) => length,\n             ConstantValue(_) => 0,\n@@ -901,7 +901,7 @@ fn constructor_sub_pattern_tys<'a, 'tcx: 'a>(cx: &MatchCheckCtxt<'a, 'tcx>,\n {\n     debug!(\"constructor_sub_pattern_tys({:#?}, {:?})\", ctor, ty);\n     match ty.sty {\n-        ty::TyTuple(ref fs, _) => fs.into_iter().map(|t| *t).collect(),\n+        ty::TyTuple(ref fs) => fs.into_iter().map(|t| *t).collect(),\n         ty::TySlice(ty) | ty::TyArray(ty, _) => match *ctor {\n             Slice(length) => (0..length).map(|_| ty).collect(),\n             ConstantValue(_) => vec![],"}, {"sha": "d924baaf0052139421800caaff7efe1dcbb46722", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -222,7 +222,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n             let pat_ty = self.tables.node_id_to_type(scrut.hir_id);\n             let module = self.tcx.hir.get_module_parent(scrut.id);\n             if inlined_arms.is_empty() {\n-                let scrutinee_is_uninhabited = if self.tcx.features().never_type {\n+                let scrutinee_is_uninhabited = if self.tcx.features().exhaustive_patterns {\n                     self.tcx.is_ty_uninhabited_from(module, pat_ty)\n                 } else {\n                     self.conservative_is_uninhabited(pat_ty)"}, {"sha": "eb87d5b044b4569feb6a5bbfefea6044e2f963dc", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -449,7 +449,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             PatKind::Tuple(ref subpatterns, ddpos) => {\n                 let ty = self.tables.node_id_to_type(pat.hir_id);\n                 match ty.sty {\n-                    ty::TyTuple(ref tys, _) => {\n+                    ty::TyTuple(ref tys) => {\n                         let subpatterns =\n                             subpatterns.iter()\n                                        .enumerate_and_adjust(tys.len(), ddpos)\n@@ -879,7 +879,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                     subpatterns: adt_subpatterns(struct_var.fields.len(), None),\n                 }\n             }\n-            ty::TyTuple(fields, _) => {\n+            ty::TyTuple(fields) => {\n                 PatternKind::Leaf {\n                     subpatterns: adt_subpatterns(fields.len(), None),\n                 }"}, {"sha": "851fac532e366d9f726727a04c2269c10d88dd46", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -234,7 +234,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                     // Second argument must be a tuple matching the argument list of sig\n                     let snd_ty = real_sig.inputs_and_output[1];\n                     match snd_ty.sty {\n-                        ty::TyTuple(tys, _) if sig.inputs().len() == tys.len() =>\n+                        ty::TyTuple(tys) if sig.inputs().len() == tys.len() =>\n                             if sig.inputs().iter().zip(tys).all(|(ty, real_ty)| check_ty_compat(ty, real_ty)) {\n                                 return Ok(true)\n                             },"}, {"sha": "5510e219780608402914881d51d2e47f271ba619", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -32,13 +32,14 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(inclusive_range)]\n #![feature(macro_vis_matcher)]\n #![feature(match_default_bindings)]\n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n #![feature(range_contains)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(placement_in_syntax)]\n #![feature(collection_placement)]\n #![feature(nonzero)]\n #![feature(underscore_lifetimes)]\n+#![cfg_attr(stage0, feature(never_type))]\n \n extern crate arena;\n #[macro_use]"}, {"sha": "c2f4359c0082b005d1eaff0b3b71ee448b1fd169", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -281,7 +281,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                 self.push_def_path(adt_def.did, output);\n                 self.push_type_params(substs, iter::empty(), output);\n             },\n-            ty::TyTuple(component_types, _) => {\n+            ty::TyTuple(component_types) => {\n                 output.push('(');\n                 for &component_type in component_types {\n                     self.push_type_name(component_type, output);"}, {"sha": "6a0f42c6dbb6659ca9bcf3d1f01a6a0e4eb958a6", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -312,7 +312,7 @@ fn build_clone_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 substs.upvar_tys(def_id, tcx)\n             )\n         }\n-        ty::TyTuple(tys, _) => builder.tuple_like_shim(dest, src, tys.iter().cloned()),\n+        ty::TyTuple(tys) => builder.tuple_like_shim(dest, src, tys.iter().cloned()),\n         _ => {\n             bug!(\"clone shim for `{:?}` which is not `Copy` and is not an aggregate\", self_ty)\n         }"}, {"sha": "2dd805ccf9b59696a9067101886c9b95a4a2eb9e", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -599,7 +599,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n             assert!(args.next().is_none());\n \n             let tuple = Place::Local(tuple);\n-            let tuple_tys = if let ty::TyTuple(s, _) = tuple.ty(caller_mir, tcx).to_ty(tcx).sty {\n+            let tuple_tys = if let ty::TyTuple(s) = tuple.ty(caller_mir, tcx).to_ty(tcx).sty {\n                 s\n             } else {\n                 bug!(\"Closure arguments are not passed as a tuple\");"}, {"sha": "59a872a23b060f15d979665f51e2f4ebdd166da5", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1246,7 +1246,7 @@ impl MirPass for QualifyAndPromoteConstants {\n                                               tcx.require_lang_item(lang_items::SyncTraitLangItem),\n                                               cause);\n                 if let Err(err) = fulfillment_cx.select_all_or_error(&infcx) {\n-                    infcx.report_fulfillment_errors(&err, None);\n+                    infcx.report_fulfillment_errors(&err, None, false);\n                 }\n             });\n         }"}, {"sha": "e95126c8a1a0f555daf24fe575bf0f6743b14db7", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -788,7 +788,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n                 let tys : Vec<_> = substs.upvar_tys(def_id, self.tcx()).collect();\n                 self.open_drop_for_tuple(&tys)\n             }\n-            ty::TyTuple(tys, _) => {\n+            ty::TyTuple(tys) => {\n                 self.open_drop_for_tuple(tys)\n             }\n             ty::TyAdt(def, _) if def.is_box() => {"}, {"sha": "2a8cfe5cc06b37ceb4cbbfaee70b02a8f4a69fe8", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -184,7 +184,7 @@ fn dtorck_constraint_for_ty<'a, 'gcx, 'tcx>(\n             dtorck_constraint_for_ty(tcx, span, for_ty, depth + 1, ety)\n         }\n \n-        ty::TyTuple(tys, _) => tys.iter()\n+        ty::TyTuple(tys) => tys.iter()\n             .map(|ty| dtorck_constraint_for_ty(tcx, span, for_ty, depth + 1, ty))\n             .collect(),\n "}, {"sha": "4a98fff6af76dab76d4cc501db790524cdcf547f", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -722,7 +722,7 @@ impl<'a, 'tcx> FnType<'tcx> {\n             assert!(!sig.variadic && extra_args.is_empty());\n \n             match sig.inputs().last().unwrap().sty {\n-                ty::TyTuple(ref tupled_arguments, _) => {\n+                ty::TyTuple(ref tupled_arguments) => {\n                     inputs = &sig.inputs()[0..sig.inputs().len() - 1];\n                     tupled_arguments\n                 }"}, {"sha": "f3d95cf794babc101891650882d441cafbea29b5", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -362,7 +362,7 @@ fn subroutine_type_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n     // return type\n     signature_metadata.push(match signature.output().sty {\n-        ty::TyTuple(ref tys, _) if tys.is_empty() => ptr::null_mut(),\n+        ty::TyTuple(ref tys) if tys.is_empty() => ptr::null_mut(),\n         _ => type_metadata(cx, signature.output(), span)\n     });\n \n@@ -533,7 +533,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         ty::TyFloat(_) => {\n             MetadataCreationResult::new(basic_type_metadata(cx, t), false)\n         }\n-        ty::TyTuple(ref elements, _) if elements.is_empty() => {\n+        ty::TyTuple(ref elements) if elements.is_empty() => {\n             MetadataCreationResult::new(basic_type_metadata(cx, t), false)\n         }\n         ty::TyArray(typ, _) |\n@@ -621,7 +621,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                                     usage_site_span).finalize(cx)\n             }\n         },\n-        ty::TyTuple(ref elements, _) => {\n+        ty::TyTuple(ref elements) => {\n             prepare_tuple_metadata(cx,\n                                    t,\n                                    &elements[..],\n@@ -731,7 +731,7 @@ fn basic_type_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n     let (name, encoding) = match t.sty {\n         ty::TyNever => (\"!\", DW_ATE_unsigned),\n-        ty::TyTuple(ref elements, _) if elements.is_empty() =>\n+        ty::TyTuple(ref elements) if elements.is_empty() =>\n             (\"()\", DW_ATE_unsigned),\n         ty::TyBool => (\"bool\", DW_ATE_boolean),\n         ty::TyChar => (\"char\", DW_ATE_unsigned_char),"}, {"sha": "7664c88679e0e2db53e96489e24e467617bed0c3", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -312,7 +312,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n         // Return type -- llvm::DIBuilder wants this at index 0\n         signature.push(match sig.output().sty {\n-            ty::TyTuple(ref tys, _) if tys.is_empty() => ptr::null_mut(),\n+            ty::TyTuple(ref tys) if tys.is_empty() => ptr::null_mut(),\n             _ => type_metadata(cx, sig.output(), syntax_pos::DUMMY_SP)\n         });\n \n@@ -351,7 +351,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         }\n \n         if sig.abi == Abi::RustCall && !sig.inputs().is_empty() {\n-            if let ty::TyTuple(args, _) = sig.inputs()[sig.inputs().len() - 1].sty {\n+            if let ty::TyTuple(args) = sig.inputs()[sig.inputs().len() - 1].sty {\n                 for &argument_type in args {\n                     signature.push(type_metadata(cx, argument_type, syntax_pos::DUMMY_SP));\n                 }"}, {"sha": "96ed4e884711583b529345d696b577d135b31588", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -53,7 +53,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             push_item_name(cx, def.did, qualified, output);\n             push_type_params(cx, substs, output);\n         },\n-        ty::TyTuple(component_types, _) => {\n+        ty::TyTuple(component_types) => {\n             output.push('(');\n             for &component_type in component_types {\n                 push_debuginfo_type_name(cx, component_type, true, output);"}, {"sha": "93bc89f0914f57af49db44949639a3ea9fe77c29", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -710,7 +710,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n             let layout = cx.layout_of(cx.tcx.intern_tup(&[\n                 cx.tcx.mk_mut_ptr(cx.tcx.types.u8),\n                 cx.tcx.types.i32\n-            ], false));\n+            ]));\n             let slot = PlaceRef::alloca(bx, layout, \"personalityslot\");\n             self.personality_slot = Some(slot);\n             slot"}, {"sha": "11dabbeae7430145be4d82e249cf30f880ccd243", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -448,7 +448,7 @@ fn arg_local_refs<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n \n             let arg_ty = fx.monomorphize(&arg_decl.ty);\n             let tupled_arg_tys = match arg_ty.sty {\n-                ty::TyTuple(ref tys, _) => tys,\n+                ty::TyTuple(ref tys) => tys,\n                 _ => bug!(\"spread argument isn't a tuple?!\")\n             };\n "}, {"sha": "93702bfbbf3b1a00bb292c8cf9c7c0bd96ea3b17", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -399,7 +399,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                                                              lhs.immediate(), rhs.immediate(),\n                                                              lhs.layout.ty);\n                 let val_ty = op.ty(bx.tcx(), lhs.layout.ty, rhs.layout.ty);\n-                let operand_ty = bx.tcx().intern_tup(&[val_ty, bx.tcx().types.bool], false);\n+                let operand_ty = bx.tcx().intern_tup(&[val_ty, bx.tcx().types.bool]);\n                 let operand = OperandRef {\n                     val: result,\n                     layout: bx.cx.layout_of(operand_ty)"}, {"sha": "827ca79334cbe53b94533fe14cbf933883846dca", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1050,7 +1050,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 tcx.types.never\n             },\n             hir::TyTup(ref fields) => {\n-                tcx.mk_tup(fields.iter().map(|t| self.ast_ty_to_ty(&t)), false)\n+                tcx.mk_tup(fields.iter().map(|t| self.ast_ty_to_ty(&t)))\n             }\n             hir::TyBareFn(ref bf) => {\n                 require_c_abi_if_variadic(tcx, &bf.decl, bf.abi, ast_ty.span);"}, {"sha": "379fd93ba2bd6ebb31bb8ab2ab46c971a21e4a6a", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -319,7 +319,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let mut expected_len = elements.len();\n                 if ddpos.is_some() {\n                     // Require known type only when `..` is present\n-                    if let ty::TyTuple(ref tys, _) =\n+                    if let ty::TyTuple(ref tys) =\n                             self.structurally_resolved_type(pat.span, expected).sty {\n                         expected_len = tys.len();\n                     }\n@@ -332,7 +332,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     ty::UniverseIndex::ROOT,\n                     TypeVariableOrigin::TypeInference(pat.span)));\n                 let element_tys = tcx.mk_type_list(element_tys_iter);\n-                let pat_ty = tcx.mk_ty(ty::TyTuple(element_tys, false));\n+                let pat_ty = tcx.mk_ty(ty::TyTuple(element_tys));\n                 self.demand_eqtype(pat.span, expected, pat_ty);\n                 for (i, elem) in elements.iter().enumerate_and_adjust(max_len, ddpos) {\n                     self.check_pat_walk(elem, &element_tys[i], def_bm, true);"}, {"sha": "e4bad8349ea2b5e39b5f2b1eeaa9cee8e411548a", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -38,7 +38,7 @@\n //! expression, `e as U2` is not necessarily so (in fact it will only be valid if\n //! `U1` coerces to `U2`).\n \n-use super::{Diverges, FnCtxt};\n+use super::FnCtxt;\n \n use errors::DiagnosticBuilder;\n use hir::def_id::DefId;\n@@ -59,7 +59,6 @@ use util::common::ErrorReported;\n pub struct CastCheck<'tcx> {\n     expr: &'tcx hir::Expr,\n     expr_ty: Ty<'tcx>,\n-    expr_diverges: Diverges,\n     cast_ty: Ty<'tcx>,\n     cast_span: Span,\n     span: Span,\n@@ -115,7 +114,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 }\n             }\n-            ty::TyTuple(fields, _) => match fields.last() {\n+            ty::TyTuple(fields) => match fields.last() {\n                 None => Some(PointerKind::Thin),\n                 Some(f) => self.pointer_kind(f, span)?\n             },\n@@ -183,15 +182,13 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n     pub fn new(fcx: &FnCtxt<'a, 'gcx, 'tcx>,\n                expr: &'tcx hir::Expr,\n                expr_ty: Ty<'tcx>,\n-               expr_diverges: Diverges,\n                cast_ty: Ty<'tcx>,\n                cast_span: Span,\n                span: Span)\n                -> Result<CastCheck<'tcx>, ErrorReported> {\n         let check = CastCheck {\n             expr,\n             expr_ty,\n-            expr_diverges,\n             cast_ty,\n             cast_span,\n             span,\n@@ -437,7 +434,6 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                     let f = self.expr_ty.fn_sig(fcx.tcx);\n                     let res = fcx.try_coerce(self.expr,\n                                              self.expr_ty,\n-                                             self.expr_diverges,\n                                              fcx.tcx.mk_fn_ptr(f));\n                     if !res.is_ok() {\n                         return Err(CastError::NonScalar);\n@@ -620,7 +616,7 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n     }\n \n     fn try_coercion_cast(&self, fcx: &FnCtxt<'a, 'gcx, 'tcx>) -> bool {\n-        fcx.try_coerce(self.expr, self.expr_ty, self.expr_diverges, self.cast_ty).is_ok()\n+        fcx.try_coerce(self.expr, self.expr_ty, self.cast_ty).is_ok()\n     }\n }\n "}, {"sha": "562c0cb1b8d0eab7fa724e2c2ad5acdbe7cc6230", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -140,7 +140,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // the `closures` table.\n         let sig = bound_sig.map_bound(|sig| {\n             self.tcx.mk_fn_sig(\n-                iter::once(self.tcx.intern_tup(sig.inputs(), false)),\n+                iter::once(self.tcx.intern_tup(sig.inputs())),\n                 sig.output(),\n                 sig.variadic,\n                 sig.unsafety,\n@@ -312,7 +312,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         );\n \n         let input_tys = match arg_param_ty.sty {\n-            ty::TyTuple(tys, _) => tys.into_iter(),\n+            ty::TyTuple(tys) => tys.into_iter(),\n             _ => {\n                 return None;\n             }"}, {"sha": "269ee49f38e70e5bdda4601772ee1fc0d0431624", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -66,7 +66,6 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::infer::{Coercion, InferResult, InferOk};\n use rustc::infer::type_variable::TypeVariableOrigin;\n-use rustc::lint;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::{self, TypeAndMut, Ty, ClosureSubsts};\n@@ -572,7 +571,7 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n \n                 // Object safety violations or miscellaneous.\n                 Err(err) => {\n-                    self.report_selection_error(&obligation, &err);\n+                    self.report_selection_error(&obligation, &err, false);\n                     // Treat this like an obligation and follow through\n                     // with the unsizing - the lack of a coercion should\n                     // be silent, as it causes a type mismatch later.\n@@ -752,27 +751,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn try_coerce(&self,\n                       expr: &hir::Expr,\n                       expr_ty: Ty<'tcx>,\n-                      expr_diverges: Diverges,\n                       target: Ty<'tcx>)\n                       -> RelateResult<'tcx, Ty<'tcx>> {\n         let source = self.resolve_type_vars_with_obligations(expr_ty);\n         debug!(\"coercion::try({:?}: {:?} -> {:?})\", expr, source, target);\n \n-        // Special-ish case: we can coerce any type `T` into the `!`\n-        // type, but only if the source expression diverges.\n-        if target.is_never() && expr_diverges.always() {\n-            debug!(\"permit coercion to `!` because expr diverges\");\n-            if self.can_eq(self.param_env, source, target).is_err() {\n-                self.tcx.lint_node(\n-                    lint::builtin::COERCE_NEVER,\n-                    expr.id,\n-                    expr.span,\n-                    &format!(\"cannot coerce `{}` to !\", source)\n-                );\n-                return Ok(target);\n-            }\n-        }\n-\n         let cause = self.cause(expr.span, ObligationCauseCode::ExprAssignable);\n         let coerce = Coerce::new(self, cause);\n         let ok = self.commit_if_ok(|_| coerce.coerce(source, target))?;\n@@ -1123,7 +1106,7 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n             if self.pushed == 0 {\n                 // Special-case the first expression we are coercing.\n                 // To be honest, I'm not entirely sure why we do this.\n-                fcx.try_coerce(expression, expression_ty, expression_diverges, self.expected_ty)\n+                fcx.try_coerce(expression, expression_ty, self.expected_ty)\n             } else {\n                 match self.expressions {\n                     Expressions::Dynamic(ref exprs) =>"}, {"sha": "60ac31ac8eba8f5029b2d7c46d51b5325d2f1ca7", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -334,7 +334,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // Check that all obligations are satisfied by the implementation's\n         // version.\n         if let Err(ref errors) = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx) {\n-            infcx.report_fulfillment_errors(errors, None);\n+            infcx.report_fulfillment_errors(errors, None, false);\n             return Err(ErrorReported);\n         }\n \n@@ -839,7 +839,7 @@ pub fn compare_const_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // Check that all obligations are satisfied by the implementation's\n         // version.\n         if let Err(ref errors) = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx) {\n-            infcx.report_fulfillment_errors(errors, None);\n+            infcx.report_fulfillment_errors(errors, None, false);\n             return;\n         }\n "}, {"sha": "634a7ee569917055345d8181840f9dc0585832e6", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -100,7 +100,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                               -> (Ty<'tcx>, Option<DiagnosticBuilder<'tcx>>) {\n         let expected = self.resolve_type_vars_with_obligations(expected);\n \n-        let e = match self.try_coerce(expr, checked_ty, self.diverges.get(), expected) {\n+        let e = match self.try_coerce(expr, checked_ty, expected) {\n             Ok(ty) => return (ty, None),\n             Err(e) => e\n         };"}, {"sha": "596381d7ea676612081e8310a67b2f083367201f", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -112,7 +112,7 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n \n         if let Err(ref errors) = fulfillment_cx.select_all_or_error(&infcx) {\n             // this could be reached when we get lazy normalization\n-            infcx.report_fulfillment_errors(errors, None);\n+            infcx.report_fulfillment_errors(errors, None, false);\n             return Err(ErrorReported);\n         }\n "}, {"sha": "59cf8a0358efac01de1b1d6c50f67a41d521543a", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -87,7 +87,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             \"cxchg\" | \"cxchgweak\" => (1, vec![tcx.mk_mut_ptr(param(0)),\n                                               param(0),\n                                               param(0)],\n-                                      tcx.intern_tup(&[param(0), tcx.types.bool], false)),\n+                                      tcx.intern_tup(&[param(0), tcx.types.bool])),\n             \"load\" => (1, vec![tcx.mk_imm_ptr(param(0))],\n                        param(0)),\n             \"store\" => (1, vec![tcx.mk_mut_ptr(param(0)), param(0)],\n@@ -281,7 +281,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             \"add_with_overflow\" | \"sub_with_overflow\"  | \"mul_with_overflow\" =>\n                 (1, vec![param(0), param(0)],\n-                tcx.intern_tup(&[param(0), tcx.types.bool], false)),\n+                tcx.intern_tup(&[param(0), tcx.types.bool])),\n \n             \"unchecked_div\" | \"unchecked_rem\" =>\n                 (1, vec![param(0), param(0)], param(0)),\n@@ -441,7 +441,7 @@ fn match_intrinsic_type_to_type<'a, 'tcx>(\n \n     match *expected {\n         Void => match t.sty {\n-            ty::TyTuple(ref v, _) if v.is_empty() => {},\n+            ty::TyTuple(ref v) if v.is_empty() => {},\n             _ => simple_error(&format!(\"`{}`\", t), \"()\"),\n         },\n         // (The width we pass to LLVM doesn't concern the type checker.)\n@@ -515,7 +515,7 @@ fn match_intrinsic_type_to_type<'a, 'tcx>(\n         }\n         Aggregate(_flatten, ref expected_contents) => {\n             match t.sty {\n-                ty::TyTuple(contents, _) => {\n+                ty::TyTuple(contents) => {\n                     if contents.len() != expected_contents.len() {\n                         simple_error(&format!(\"tuple with length {}\", contents.len()),\n                                      &format!(\"tuple with length {}\", expected_contents.len()));"}, {"sha": "18de8d1bee74ee95e619c6afcf959e22440a784b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -873,11 +873,12 @@ fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         };\n \n         // All type checking constraints were added, try to fallback unsolved variables.\n-        fcx.select_obligations_where_possible();\n+        fcx.select_obligations_where_possible(false);\n+        let mut fallback_has_occurred = false;\n         for ty in &fcx.unsolved_variables() {\n-            fcx.fallback_if_possible(ty);\n+            fallback_has_occurred |= fcx.fallback_if_possible(ty);\n         }\n-        fcx.select_obligations_where_possible();\n+        fcx.select_obligations_where_possible(fallback_has_occurred);\n \n         // Even though coercion casts provide type hints, we check casts after fallback for\n         // backwards compatibility. This makes fallback a stronger type hint than a cast coercion.\n@@ -1837,7 +1838,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // possible. This can help substantially when there are\n         // indirect dependencies that don't seem worth tracking\n         // precisely.\n-        self.select_obligations_where_possible();\n+        self.select_obligations_where_possible(false);\n         ty = self.resolve_type_vars_if_possible(&ty);\n \n         debug!(\"resolve_type_vars_with_obligations: ty={:?}\", ty);\n@@ -2154,18 +2155,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     fn resolve_generator_interiors(&self, def_id: DefId) {\n         let mut generators = self.deferred_generator_interiors.borrow_mut();\n         for (body_id, interior) in generators.drain(..) {\n-            self.select_obligations_where_possible();\n+            self.select_obligations_where_possible(false);\n             generator_interior::resolve_interior(self, def_id, body_id, interior);\n         }\n     }\n \n     // Tries to apply a fallback to `ty` if it is an unsolved variable.\n-    // Non-numerics get replaced with ! or () (depending on whether\n-    // feature(never_type) is enabled), unconstrained ints with i32,\n+    // Non-numerics get replaced with !, unconstrained ints with i32,\n     // unconstrained floats with f64.\n     // Fallback becomes very dubious if we have encountered type-checking errors.\n     // In that case, fallback to TyError.\n-    fn fallback_if_possible(&self, ty: Ty<'tcx>) {\n+    // The return value indicates whether fallback has occured.\n+    fn fallback_if_possible(&self, ty: Ty<'tcx>) -> bool {\n         use rustc::ty::error::UnconstrainedNumeric::Neither;\n         use rustc::ty::error::UnconstrainedNumeric::{UnconstrainedInt, UnconstrainedFloat};\n \n@@ -2174,25 +2175,28 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             _ if self.is_tainted_by_errors() => self.tcx().types.err,\n             UnconstrainedInt => self.tcx.types.i32,\n             UnconstrainedFloat => self.tcx.types.f64,\n-            Neither if self.type_var_diverges(ty) => self.tcx.mk_diverging_default(),\n-            Neither => return\n+            Neither if self.type_var_diverges(ty) => self.tcx.types.never,\n+            Neither => return false,\n         };\n         debug!(\"default_type_parameters: defaulting `{:?}` to `{:?}`\", ty, fallback);\n         self.demand_eqtype(syntax_pos::DUMMY_SP, ty, fallback);\n+        true\n     }\n \n     fn select_all_obligations_or_error(&self) {\n         debug!(\"select_all_obligations_or_error\");\n         if let Err(errors) = self.fulfillment_cx.borrow_mut().select_all_or_error(&self) {\n-            self.report_fulfillment_errors(&errors, self.inh.body_id);\n+            self.report_fulfillment_errors(&errors, self.inh.body_id, false);\n         }\n     }\n \n     /// Select as many obligations as we can at present.\n-    fn select_obligations_where_possible(&self) {\n+    fn select_obligations_where_possible(&self, fallback_has_occurred: bool) {\n         match self.fulfillment_cx.borrow_mut().select_where_possible(self) {\n             Ok(()) => { }\n-            Err(errors) => { self.report_fulfillment_errors(&errors, self.inh.body_id); }\n+            Err(errors) => {\n+                self.report_fulfillment_errors(&errors, self.inh.body_id, fallback_has_occurred);\n+            },\n         }\n     }\n \n@@ -2438,7 +2442,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n             let err_inputs = match tuple_arguments {\n                 DontTupleArguments => err_inputs,\n-                TupleArguments => vec![self.tcx.intern_tup(&err_inputs[..], false)],\n+                TupleArguments => vec![self.tcx.intern_tup(&err_inputs[..])],\n             };\n \n             self.check_argument_types(sp, expr_sp, &err_inputs[..], &[], args_no_rcvr,\n@@ -2531,16 +2535,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let formal_tys = if tuple_arguments == TupleArguments {\n             let tuple_type = self.structurally_resolved_type(sp, fn_inputs[0]);\n             match tuple_type.sty {\n-                ty::TyTuple(arg_types, _) if arg_types.len() != args.len() => {\n+                ty::TyTuple(arg_types) if arg_types.len() != args.len() => {\n                     parameter_count_error(tcx.sess, sp, expr_sp, arg_types.len(), args.len(),\n                                           \"E0057\", false, def_span, false);\n                     expected_arg_tys = &[];\n                     self.err_args(args.len())\n                 }\n-                ty::TyTuple(arg_types, _) => {\n+                ty::TyTuple(arg_types) => {\n                     expected_arg_tys = match expected_arg_tys.get(0) {\n                         Some(&ty) => match ty.sty {\n-                            ty::TyTuple(ref tys, _) => &tys,\n+                            ty::TyTuple(ref tys) => &tys,\n                             _ => &[]\n                         },\n                         None => &[]\n@@ -2596,7 +2600,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             // an \"opportunistic\" vtable resolution of any trait bounds on\n             // the call. This helps coercions.\n             if check_closures {\n-                self.select_obligations_where_possible();\n+                self.select_obligations_where_possible(false);\n             }\n \n             // For variadic functions, we don't have a declared type for all of\n@@ -3193,7 +3197,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         None\n                     }\n                 }\n-                ty::TyTuple(ref v, _) => {\n+                ty::TyTuple(ref v) => {\n                     tuple_like = true;\n                     v.get(idx.node).cloned()\n                 }\n@@ -3945,15 +3949,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let t_cast = self.resolve_type_vars_if_possible(&t_cast);\n             let t_expr = self.check_expr_with_expectation(e, ExpectCastableToType(t_cast));\n             let t_cast = self.resolve_type_vars_if_possible(&t_cast);\n-            let diverges = self.diverges.get();\n \n             // Eagerly check for some obvious errors.\n             if t_expr.references_error() || t_cast.references_error() {\n                 tcx.types.err\n             } else {\n                 // Defer other checks until we're done type checking.\n                 let mut deferred_cast_checks = self.deferred_cast_checks.borrow_mut();\n-                match cast::CastCheck::new(self, e, t_expr, diverges, t_cast, t.span, expr.span) {\n+                match cast::CastCheck::new(self, e, t_expr, t_cast, t.span, expr.span) {\n                     Ok(cast_check) => {\n                         deferred_cast_checks.push(cast_check);\n                         t_cast\n@@ -4060,7 +4063,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let flds = expected.only_has_type(self).and_then(|ty| {\n                 let ty = self.resolve_type_vars_with_obligations(ty);\n                 match ty.sty {\n-                    ty::TyTuple(ref flds, _) => Some(&flds[..]),\n+                    ty::TyTuple(ref flds) => Some(&flds[..]),\n                     _ => None\n                 }\n             });\n@@ -4078,7 +4081,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 };\n                 t\n             });\n-            let tuple = tcx.mk_tup(elt_ts_iter, false);\n+            let tuple = tcx.mk_tup(elt_ts_iter);\n             if tuple.references_error() {\n                 tcx.types.err\n             } else {"}, {"sha": "eae692f4cdad9c8b8b7d196ea067dc5315483d5e", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -479,7 +479,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         match method {\n             Some(ok) => {\n                 let method = self.register_infer_ok_obligations(ok);\n-                self.select_obligations_where_possible();\n+                self.select_obligations_where_possible(false);\n \n                 Ok(method)\n             }"}, {"sha": "9493c36fe95a50a57ccfc7ba1ecd198f31758c25", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -386,7 +386,7 @@ pub fn coerce_unsized_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         // Check that all transitive obligations are satisfied.\n         if let Err(errors) = fulfill_cx.select_all_or_error(&infcx) {\n-            infcx.report_fulfillment_errors(&errors, None);\n+            infcx.report_fulfillment_errors(&errors, None, false);\n         }\n \n         // Finally, resolve all regions."}, {"sha": "964c0021133aae5100f55ac49de349abf7934948", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -80,13 +80,14 @@ This API is completely unstable and subject to change.\n #![feature(crate_visibility_modifier)]\n #![feature(from_ref)]\n #![feature(match_default_bindings)]\n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n #![feature(option_filter)]\n #![feature(quote)]\n #![feature(refcell_replace_swap)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_patterns)]\n #![feature(i128_type)]\n+#![cfg_attr(stage0, feature(never_type))]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n@@ -173,7 +174,7 @@ fn require_same_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         match fulfill_cx.select_all_or_error(infcx) {\n             Ok(()) => true,\n             Err(errors) => {\n-                infcx.report_fulfillment_errors(&errors, None);\n+                infcx.report_fulfillment_errors(&errors, None, false);\n                 false\n             }\n         }"}, {"sha": "a24e501aba95015aed46eddc69b2d32e641ee2da", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -287,7 +287,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_mt(current, mt, variance);\n             }\n \n-            ty::TyTuple(subtys, _) => {\n+            ty::TyTuple(subtys) => {\n                 for &subty in subtys {\n                     self.add_constraints_from_ty(current, subty, variance);\n                 }"}, {"sha": "904c24815cb7f3d4c36b033a044f087e66c9901e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1322,7 +1322,7 @@ fn external_path_params(cx: &DocContext, trait_did: Option<DefId>, has_self: boo\n         Some(did) if cx.tcx.lang_items().fn_trait_kind(did).is_some() => {\n             assert_eq!(types.len(), 1);\n             let inputs = match types[0].sty {\n-                ty::TyTuple(ref tys, _) => tys.iter().map(|t| t.clean(cx)).collect(),\n+                ty::TyTuple(ref tys) => tys.iter().map(|t| t.clean(cx)).collect(),\n                 _ => {\n                     return PathParameters::AngleBracketed {\n                         lifetimes,\n@@ -1334,7 +1334,7 @@ fn external_path_params(cx: &DocContext, trait_did: Option<DefId>, has_self: boo\n             let output = None;\n             // FIXME(#20299) return type comes from a projection now\n             // match types[1].sty {\n-            //     ty::TyTuple(ref v, _) if v.is_empty() => None, // -> ()\n+            //     ty::TyTuple(ref v) if v.is_empty() => None, // -> ()\n             //     _ => Some(types[1].clean(cx))\n             // };\n             PathParameters::Parenthesized {\n@@ -1377,7 +1377,7 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n         // collect any late bound regions\n         let mut late_bounds = vec![];\n         for ty_s in self.input_types().skip(1) {\n-            if let ty::TyTuple(ts, _) = ty_s.sty {\n+            if let ty::TyTuple(ts) = ty_s.sty {\n                 for &ty_s in ts {\n                     if let ty::TyRef(ref reg, _) = ty_s.sty {\n                         if let &ty::RegionKind::ReLateBound(..) = *reg {\n@@ -2731,7 +2731,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     Never\n                 }\n             }\n-            ty::TyTuple(ref t, _) => Tuple(t.clean(cx)),\n+            ty::TyTuple(ref t) => Tuple(t.clean(cx)),\n \n             ty::TyProjection(ref data) => data.clean(cx),\n "}, {"sha": "f8dbe193fed27133df5c0f4ac76556affa768e55", "filename": "src/libstd/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -234,7 +234,7 @@ impl<'a> From<Cow<'a, str>> for Box<Error> {\n     }\n }\n \n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n+#[stable(feature = \"never_type\", since = \"1.26.0\")]\n impl Error for ! {\n     fn description(&self) -> &str { *self }\n }"}, {"sha": "eea0e6b67527940c303a7511f8fb6da5c8ca2891", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -282,7 +282,7 @@\n #![feature(macro_reexport)]\n #![feature(macro_vis_matcher)]\n #![feature(needs_panic_runtime)]\n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n #![feature(num_bits_bytes)]\n #![feature(old_wrapping)]\n #![feature(on_unimplemented)]\n@@ -324,6 +324,7 @@\n #![feature(doc_spotlight)]\n #![cfg_attr(test, feature(update_panic_count))]\n #![cfg_attr(windows, feature(used))]\n+#![cfg_attr(stage0, feature(never_type))]\n \n #![default_lib_allocator]\n "}, {"sha": "e6e6be2e45379a9ab39b9188fac28ef114433d3e", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -79,7 +79,6 @@ mod prim_bool { }\n /// write:\n ///\n /// ```\n-/// #![feature(never_type)]\n /// # fn foo() -> u32 {\n /// let x: ! = {\n ///     return 123\n@@ -131,13 +130,15 @@ mod prim_bool { }\n /// [`Result<String, !>`] which we can unpack like this:\n ///\n /// ```ignore (string-from-str-error-type-is-not-never-yet)\n+/// #[feature(exhaustive_patterns)]\n /// // NOTE: This does not work today!\n /// let Ok(s) = String::from_str(\"hello\");\n /// ```\n ///\n-/// Since the [`Err`] variant contains a `!`, it can never occur. So we can exhaustively match on\n-/// [`Result<T, !>`] by just taking the [`Ok`] variant. This illustrates another behaviour of `!` -\n-/// it can be used to \"delete\" certain enum variants from generic types like `Result`.\n+/// Since the [`Err`] variant contains a `!`, it can never occur. If the `exhaustive_patterns`\n+/// feature is present this means we can exhaustively match on [`Result<T, !>`] by just taking the\n+/// [`Ok`] variant. This illustrates another behaviour of `!` - it can be used to \"delete\" certain\n+/// enum variants from generic types like `Result`.\n ///\n /// [`String::from_str`]: str/trait.FromStr.html#tymethod.from_str\n /// [`Result<String, !>`]: result/enum.Result.html\n@@ -154,7 +155,6 @@ mod prim_bool { }\n /// for example:\n ///\n /// ```\n-/// # #![feature(never_type)]\n /// # use std::fmt;\n /// # trait Debug {\n /// # fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result;\n@@ -192,7 +192,6 @@ mod prim_bool { }\n /// [`Default`]: default/trait.Default.html\n /// [`default()`]: default/trait.Default.html#tymethod.default\n ///\n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n mod prim_never { }\n \n #[doc(primitive = \"char\")]"}, {"sha": "91364fe6ed48eb2cb8638475473bc215c34cc2fc", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -286,8 +286,8 @@ declare_features! (\n     // Allows `impl Trait` in function arguments.\n     (active, universal_impl_trait, \"1.23.0\", Some(34511), None),\n \n-    // The `!` type\n-    (active, never_type, \"1.13.0\", Some(35121), None),\n+    // Allows exhaustive pattern matching on types that contain uninhabited types.\n+    (active, exhaustive_patterns, \"1.13.0\", None, None),\n \n     // Allows all literals in attribute lists and values of key-value pairs.\n     (active, attr_literals, \"1.13.0\", Some(34981), None),\n@@ -1566,10 +1566,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::TyKind::BareFn(ref bare_fn_ty) => {\n                 self.check_abi(bare_fn_ty.abi, ty.span);\n             }\n-            ast::TyKind::Never => {\n-                gate_feature_post!(&self, never_type, ty.span,\n-                                   \"The `!` type is experimental\");\n-            },\n             ast::TyKind::TraitObject(_, ast::TraitObjectSyntax::Dyn) => {\n                 gate_feature_post!(&self, dyn_trait, ty.span,\n                                    \"`dyn Trait` syntax is unstable\");"}, {"sha": "c2f157cd35cce82942e077ba8dbf7f63217322a8", "filename": "src/test/compile-fail/call-fn-never-arg-wrong-type.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Fcall-fn-never-arg-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Fcall-fn-never-arg-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcall-fn-never-arg-wrong-type.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -10,8 +10,6 @@\n \n // Test that we can't pass other types for !\n \n-#![feature(never_type)]\n-\n fn foo(x: !) -> ! {\n     x\n }"}, {"sha": "5efb4dadc64bdafdcf02482ad3949f5d3e521483", "filename": "src/test/compile-fail/coerce-to-bang-cast.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang-cast.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -8,15 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type)]\n-\n fn foo(x: usize, y: !, z: usize) { }\n \n-#[deny(coerce_never)]\n fn cast_a() {\n     let y = {return; 22} as !;\n-    //~^ ERROR cannot coerce `i32` to !\n-    //~| hard error\n+    //~^ ERROR non-primitive cast\n }\n \n fn cast_b() {"}, {"sha": "15049232a4d3f4450a63795a444f5be2a674b583", "filename": "src/test/compile-fail/coerce-to-bang.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -8,18 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type)]\n-#![deny(coerce_never)]\n-\n fn foo(x: usize, y: !, z: usize) { }\n \n fn call_foo_a() {\n-    // FIXME(#40800) -- accepted because divergence happens **before**\n-    // the coercion to `!`, but within same expression. Not clear that\n-    // these are the rules we want.\n     foo(return, 22, 44);\n-    //~^ ERROR cannot coerce `{integer}` to !\n-    //~| hard error\n+    //~^ ERROR mismatched types\n }\n \n fn call_foo_b() {\n@@ -39,8 +32,7 @@ fn call_foo_d() {\n     let b = 22;\n     let c = 44;\n     foo(a, b, c); // ... and hence a reference to `a` is expected to diverge.\n-    //~^ ERROR cannot coerce `{integer}` to !\n-    //~| hard error\n+    //~^ ERROR mismatched types\n }\n \n fn call_foo_e() {\n@@ -80,8 +72,7 @@ fn tuple_a() {\n fn tuple_b() {\n     // Divergence happens before coercion: OK\n     let x: (usize, !, usize) = (return, 44, 66);\n-    //~^ ERROR cannot coerce `{integer}` to !\n-    //~| hard error\n+    //~^ ERROR mismatched types\n }\n \n fn tuple_c() {"}, {"sha": "798544f164932a59f84baab5e8ee6fb21c8f39a1", "filename": "src/test/compile-fail/defaulted-never-note.rs", "status": "renamed", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Fdefaulted-never-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Fdefaulted-never-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdefaulted-never-note.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -25,14 +25,17 @@ trait ImplementedForUnitButNotNever {}\n impl ImplementedForUnitButNotNever for () {}\n \n fn foo<T: ImplementedForUnitButNotNever>(_t: T) {}\n+//~^ NOTE required by `foo`\n \n fn smeg() {\n     let _x = return;\n     foo(_x);\n-    //~^ ERROR code relies on type\n-    //~| WARNING previously accepted\n+    //~^ ERROR the trait bound\n+    //~| NOTE the trait `ImplementedForUnitButNotNever` is not implemented\n+    //~| NOTE the trait is implemented for `()`\n }\n \n fn main() {\n     smeg();\n }\n+", "previous_filename": "src/test/compile-fail/defaulted-unit-warning.rs"}, {"sha": "9ef5159cb771c4a7d2b6cc32ea6e47d088ab81cd", "filename": "src/test/compile-fail/diverging-fn-tail-35849.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Fdiverging-fn-tail-35849.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Fdiverging-fn-tail-35849.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdiverging-fn-tail-35849.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -8,12 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deny(coerce_never)]\n fn assert_sizeof() -> ! {\n     unsafe {\n         ::std::mem::transmute::<f64, [u8; 8]>(panic!())\n-            //~^ ERROR cannot coerce `[u8; 8]` to !\n-            //~| hard error\n+            //~^ ERROR mismatched types\n     }\n }\n "}, {"sha": "b9741e0add61ce17ea6325257bd474b37121a592", "filename": "src/test/compile-fail/inhabitedness-infinite-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Finhabitedness-infinite-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Finhabitedness-infinite-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finhabitedness-infinite-loop.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:reached recursion limit\n \n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n \n struct Foo<'a, T: 'a> {\n     ph: std::marker::PhantomData<T>,"}, {"sha": "5ef46bb27fd60a4a772978a3abeee3e9e85adc14", "filename": "src/test/compile-fail/loop-break-value.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floop-break-value.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type)]\n-\n fn main() {\n     let val: ! = loop { break break; };\n     //~^ ERROR mismatched types"}, {"sha": "e18c7d77ce366ce974dd48046a07e8ed458ac010", "filename": "src/test/compile-fail/match-privately-empty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Fmatch-privately-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Fmatch-privately-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-privately-empty.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n \n mod private {\n     pub struct Private {"}, {"sha": "4e987d1ddce577a9c7548a76d16cf5e72b6d3c7c", "filename": "src/test/compile-fail/never-assign-dead-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Fnever-assign-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Fnever-assign-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnever-assign-dead-code.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -10,7 +10,7 @@\n \n // Test that an assignment of type ! makes the rest of the block dead code.\n \n-#![feature(never_type, rustc_attrs)]\n+#![feature(rustc_attrs)]\n #![warn(unused)]\n \n #[rustc_error]"}, {"sha": "8c2de7d68d3de334dc849d08b1f0bdc07d0c955a", "filename": "src/test/compile-fail/never-assign-wrong-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Fnever-assign-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Fnever-assign-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnever-assign-wrong-type.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -10,7 +10,6 @@\n \n // Test that we can't use another type in place of !\n \n-#![feature(never_type)]\n #![deny(warnings)]\n \n fn main() {"}, {"sha": "fa936697072243a2b1092c1f39b39db99b92fff3", "filename": "src/test/compile-fail/recursive-types-are-not-uninhabited.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Frecursive-types-are-not-uninhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Frecursive-types-are-not-uninhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecursive-types-are-not-uninhabited.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//#![feature(never_type)]\n-\n struct R<'a> {\n     r: &'a R<'a>,\n }"}, {"sha": "72b0afa6bd3eea8bc04ddc24b49bdaad4c406f79", "filename": "src/test/compile-fail/uninhabited-irrefutable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Funinhabited-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Funinhabited-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funinhabited-irrefutable.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n \n mod foo {\n     pub struct SecretlyEmpty {"}, {"sha": "9f943f08232d673470cde1b68e5bec664b202ae4", "filename": "src/test/compile-fail/uninhabited-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Funinhabited-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Funinhabited-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funinhabited-patterns.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_patterns)]\n #![feature(slice_patterns)]\n #![feature(box_syntax)]\n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n #![deny(unreachable_patterns)]\n \n mod foo {"}, {"sha": "dca79bdfb87f755e5d8490b5a23baba83e50776a", "filename": "src/test/compile-fail/unreachable-loop-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Funreachable-loop-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Funreachable-loop-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-loop-patterns.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n #![deny(unreachable_patterns)]\n \n fn main() {"}, {"sha": "0caf7d51234918b7c25eb1b148448b1d4ddd2cb6", "filename": "src/test/compile-fail/unreachable-try-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Funreachable-try-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fcompile-fail%2Funreachable-try-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-try-pattern.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type, rustc_attrs)]\n+#![feature(exhaustive_patterns, rustc_attrs)]\n #![warn(unreachable_code)]\n #![warn(unreachable_patterns)]\n "}, {"sha": "7a4b5e59eeb75ddad5474202c4af1d1fee0b9fc5", "filename": "src/test/run-fail/adjust_never.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-fail%2Fadjust_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-fail%2Fadjust_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fadjust_never.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -10,8 +10,6 @@\n \n // Test that a variable of type ! can coerce to another type.\n \n-#![feature(never_type)]\n-\n // error-pattern:explicit\n fn main() {\n     let x: ! = panic!();"}, {"sha": "56454586bb95773ef21bd88a848894c0d9812031", "filename": "src/test/run-fail/call-fn-never-arg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-fail%2Fcall-fn-never-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-fail%2Fcall-fn-never-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fcall-fn-never-arg.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -12,7 +12,6 @@\n \n // error-pattern:wowzers!\n \n-#![feature(never_type)]\n #![allow(unreachable_code)]\n \n fn foo(x: !) -> ! {"}, {"sha": "0155332c51d1b374676376aedf87b16de7b94b9c", "filename": "src/test/run-fail/cast-never.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-fail%2Fcast-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-fail%2Fcast-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fcast-never.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -10,8 +10,6 @@\n \n // Test that we can explicitly cast ! to another type\n \n-#![feature(never_type)]\n-\n // error-pattern:explicit\n fn main() {\n     let x: ! = panic!();"}, {"sha": "d9b8461a1d07c4b2239daf7607d88bf14245dd73", "filename": "src/test/run-fail/never-associated-type.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-fail%2Fnever-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-fail%2Fnever-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fnever-associated-type.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -10,8 +10,6 @@\n \n // Test that we can use ! as an associated type.\n \n-#![feature(never_type)]\n-\n // error-pattern:kapow!\n \n trait Foo {"}, {"sha": "0fe10d43910bfbf961e2dd8db234279bc5d114e8", "filename": "src/test/run-fail/never-type-arg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-fail%2Fnever-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-fail%2Fnever-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fnever-type-arg.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -12,8 +12,6 @@\n \n // error-pattern:oh no!\n \n-#![feature(never_type)]\n-\n struct Wub;\n \n impl PartialEq<!> for Wub {"}, {"sha": "a96f98b9efda96bed1c5d770d9e0f8c04a091345", "filename": "src/test/run-pass/diverging-fallback-control-flow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-pass%2Fdiverging-fallback-control-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-pass%2Fdiverging-fallback-control-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdiverging-fallback-control-flow.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -14,8 +14,6 @@\n // These represent current behavior, but are pretty dubious.  I would\n // like to revisit these and potentially change them. --nmatsakis\n \n-#![feature(never_type)]\n-\n trait BadDefault {\n     fn default() -> Self;\n }"}, {"sha": "87db440192984d3ea55709c771a8b0027c9eaf09", "filename": "src/test/run-pass/empty-types-in-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-pass%2Fempty-types-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-pass%2Fempty-types-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-types-in-patterns.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n #![feature(slice_patterns)]\n #![allow(unreachable_patterns)]\n #![allow(unreachable_code)]"}, {"sha": "cf54e1c3bd598d6b4346c92dcc3a4c624b240412", "filename": "src/test/run-pass/impl-for-never.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-pass%2Fimpl-for-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-pass%2Fimpl-for-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-for-never.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -10,8 +10,6 @@\n \n // Test that we can call static methods on ! both directly and when it appears in a generic\n \n-#![feature(never_type)]\n-\n trait StringifyType {\n     fn stringify_type() -> &'static str;\n }"}, {"sha": "d5df84e0fb083d9f51952cdb11341ce84706cb5c", "filename": "src/test/run-pass/issue-38972.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/521d91c6be76367d966df419677dd187f799b116/src%2Ftest%2Frun-pass%2Fissue-38972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521d91c6be76367d966df419677dd187f799b116/src%2Ftest%2Frun-pass%2Fissue-38972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-38972.rs?ref=521d91c6be76367d966df419677dd187f799b116", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// This issue tracks a regression (a new warning) without\n-// feature(never_type). When we make that the default, please\n-// remove this test.\n-\n-enum Foo { }\n-\n-fn make_foo() -> Option<Foo> { None }\n-\n-#[deny(warnings)]\n-fn main() {\n-    match make_foo() {\n-        None => {},\n-        Some(_) => {}\n-    }\n-}"}, {"sha": "a5a0a5a57944782c423033944f566f426ee28166", "filename": "src/test/run-pass/issue-44402.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-pass%2Fissue-44402.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-pass%2Fissue-44402.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-44402.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type)]\n+#![feature(exhaustive_patterns)]\n \n // Regression test for inhabitedness check. The old\n // cache used to cause us to incorrectly decide"}, {"sha": "ffdd99ebf6e5cf6688fea86109dd2c5d280866a6", "filename": "src/test/run-pass/loop-break-value.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-pass%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-pass%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-break-value.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type)]\n-\n #[allow(unused)]\n fn never_returns() {\n     loop {"}, {"sha": "dda7a46f325850fb1e863f5b59e86cf609d14fc8", "filename": "src/test/run-pass/mir_calls_to_shims.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-pass%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-pass%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_calls_to_shims.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -11,7 +11,6 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(fn_traits)]\n-#![feature(never_type)]\n \n use std::panic;\n "}, {"sha": "8aa2a13ed8c8d810b6a3cdb6ca405de69513cea7", "filename": "src/test/run-pass/never-result.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-pass%2Fnever-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Frun-pass%2Fnever-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnever-result.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -10,8 +10,6 @@\n \n // Test that we can extract a ! through pattern matching then use it as several different types.\n \n-#![feature(never_type)]\n-\n fn main() {\n     let x: Result<u32, !> = Ok(123);\n     match x {"}, {"sha": "052575de4c267944372854ee0be5b0d2943aa1d6", "filename": "src/test/ui/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -31,5 +31,5 @@ trait Add<RHS=Self> {\n fn ice<A>(a: A) {\n     let r = loop {};\n     r = r + a;\n-    //~^ ERROR the trait bound `(): Add<A>` is not satisfied\n+    //~^ ERROR the trait bound `!: Add<A>` is not satisfied\n }"}, {"sha": "c22a645385adede474544b3b89c35359a6c50684", "filename": "src/test/ui/associated-types-ICE-when-projecting-out-of-err.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.stderr?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `(): Add<A>` is not satisfied\n+error[E0277]: the trait bound `!: Add<A>` is not satisfied\n   --> $DIR/associated-types-ICE-when-projecting-out-of-err.rs:33:11\n    |\n LL |     r = r + a;\n-   |           ^ the trait `Add<A>` is not implemented for `()`\n+   |           ^ the trait `Add<A>` is not implemented for `!`\n \n error: aborting due to previous error\n "}, {"sha": "477dd1b38eb0d7c6e4ca29150935d32f44a4da77", "filename": "src/test/ui/feature-gate-exhaustive-patterns.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Ffeature-gate-exhaustive-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Ffeature-gate-exhaustive-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-exhaustive-patterns.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(coerce_never)]\n-fn assert_sizeof() -> ! {\n-    unsafe {\n-        ::std::mem::transmute::<f64, [u8; 8]>(panic!())\n-    }\n+fn foo() -> Result<u32, !> {\n+    Ok(123)\n+}\n+\n+fn main() {\n+    let Ok(_x) = foo(); //~ ERROR refutable pattern in local binding\n }\n \n-fn main() { }", "previous_filename": "src/test/run-pass/diverging-fn-tail-35849.rs"}, {"sha": "4afe5b5d5e0117ef001313b16b2fc6c7bfe47c96", "filename": "src/test/ui/feature-gate-exhaustive-patterns.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Ffeature-gate-exhaustive-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Ffeature-gate-exhaustive-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-exhaustive-patterns.stderr?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -0,0 +1,9 @@\n+error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n+  --> $DIR/feature-gate-exhaustive-patterns.rs:16:9\n+   |\n+LL |     let Ok(_x) = foo(); //~ ERROR refutable pattern in local binding\n+   |         ^^^^^^ pattern `Err(_)` not covered\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0005`."}, {"sha": "11b9f412957eb52c2ef5c5da3241c942a13733bd", "filename": "src/test/ui/feature-gate-never_type.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/521d91c6be76367d966df419677dd187f799b116/src%2Ftest%2Fui%2Ffeature-gate-never_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521d91c6be76367d966df419677dd187f799b116/src%2Ftest%2Fui%2Ffeature-gate-never_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-never_type.rs?ref=521d91c6be76367d966df419677dd187f799b116", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that ! errors when used in illegal positions with feature(never_type) disabled\n-\n-trait Foo {\n-    type Wub;\n-}\n-\n-type Ma = (u32, !, i32); //~ ERROR type is experimental\n-type Meeshka = Vec<!>; //~ ERROR type is experimental\n-type Mow = &fn(!) -> !; //~ ERROR type is experimental\n-type Skwoz = &mut !; //~ ERROR type is experimental\n-\n-impl Foo for Meeshka {\n-    type Wub = !; //~ ERROR type is experimental\n-}\n-\n-fn main() {\n-}\n-"}, {"sha": "187be6d829137ab5324e99f17eff68aff58daef9", "filename": "src/test/ui/feature-gate-never_type.stderr", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/521d91c6be76367d966df419677dd187f799b116/src%2Ftest%2Fui%2Ffeature-gate-never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/521d91c6be76367d966df419677dd187f799b116/src%2Ftest%2Fui%2Ffeature-gate-never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-never_type.stderr?ref=521d91c6be76367d966df419677dd187f799b116", "patch": "@@ -1,43 +0,0 @@\n-error[E0658]: The `!` type is experimental (see issue #35121)\n-  --> $DIR/feature-gate-never_type.rs:17:17\n-   |\n-LL | type Ma = (u32, !, i32); //~ ERROR type is experimental\n-   |                 ^\n-   |\n-   = help: add #![feature(never_type)] to the crate attributes to enable\n-\n-error[E0658]: The `!` type is experimental (see issue #35121)\n-  --> $DIR/feature-gate-never_type.rs:18:20\n-   |\n-LL | type Meeshka = Vec<!>; //~ ERROR type is experimental\n-   |                    ^\n-   |\n-   = help: add #![feature(never_type)] to the crate attributes to enable\n-\n-error[E0658]: The `!` type is experimental (see issue #35121)\n-  --> $DIR/feature-gate-never_type.rs:19:16\n-   |\n-LL | type Mow = &fn(!) -> !; //~ ERROR type is experimental\n-   |                ^\n-   |\n-   = help: add #![feature(never_type)] to the crate attributes to enable\n-\n-error[E0658]: The `!` type is experimental (see issue #35121)\n-  --> $DIR/feature-gate-never_type.rs:20:19\n-   |\n-LL | type Skwoz = &mut !; //~ ERROR type is experimental\n-   |                   ^\n-   |\n-   = help: add #![feature(never_type)] to the crate attributes to enable\n-\n-error[E0658]: The `!` type is experimental (see issue #35121)\n-  --> $DIR/feature-gate-never_type.rs:23:16\n-   |\n-LL |     type Wub = !; //~ ERROR type is experimental\n-   |                ^\n-   |\n-   = help: add #![feature(never_type)] to the crate attributes to enable\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "7e8eff02c20a16ccbe86df2fc75bd2305e9d03df", "filename": "src/test/ui/print_type_sizes/uninhabited.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -11,7 +11,6 @@\n // compile-flags: -Z print-type-sizes\n // must-compile-successfully\n \n-#![feature(never_type)]\n #![feature(start)]\n \n #[start]"}, {"sha": "3e39b75d8c0f33010564f2699e87a188c5bbbba1", "filename": "src/test/ui/reachable/expr_add.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_add.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(never_type)]\n #![allow(unused_variables)]\n #![deny(unreachable_code)]\n "}, {"sha": "f49a781ce336af5e5722d8aaaba4471a7b8f2c09", "filename": "src/test/ui/reachable/expr_add.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1,11 +1,11 @@\n error: unreachable expression\n-  --> $DIR/expr_add.rs:27:13\n+  --> $DIR/expr_add.rs:26:13\n    |\n LL |     let x = Foo + return; //~ ERROR unreachable\n    |             ^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/expr_add.rs:13:9\n+  --> $DIR/expr_add.rs:12:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "323a5752e220e772d769c5af143294f2038af7f3", "filename": "src/test/ui/reachable/expr_array.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_array.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n #![feature(type_ascription)]\n \n fn a() {\n@@ -21,7 +20,7 @@ fn a() {\n }\n \n fn b() {\n-    // the `array is unreachable:\n+    // the array is unreachable:\n     let x: [usize; 2] = [22, return]; //~ ERROR unreachable\n }\n "}, {"sha": "78ac76a6137f4dbc5c96f354754abab88caf5d67", "filename": "src/test/ui/reachable/expr_array.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_array.stderr?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_array.rs:20:34\n+  --> $DIR/expr_array.rs:19:34\n    |\n LL |     let x: [usize; 2] = [return, 22]; //~ ERROR unreachable\n    |                                  ^^\n@@ -11,7 +11,7 @@ LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable expression\n-  --> $DIR/expr_array.rs:25:25\n+  --> $DIR/expr_array.rs:24:25\n    |\n LL |     let x: [usize; 2] = [22, return]; //~ ERROR unreachable\n    |                         ^^^^^^^^^^^^"}, {"sha": "73083af34d97d3ddab8f162a42667273ab050a75", "filename": "src/test/ui/reachable/expr_assign.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n \n fn foo() {\n     // No error here."}, {"sha": "628bfbf62171683f60086ba667533283ba1eef80", "filename": "src/test/ui/reachable/expr_assign.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_assign.rs:20:5\n+  --> $DIR/expr_assign.rs:19:5\n    |\n LL |     x = return; //~ ERROR unreachable\n    |     ^^^^^^^^^^\n@@ -11,13 +11,13 @@ LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable expression\n-  --> $DIR/expr_assign.rs:30:14\n+  --> $DIR/expr_assign.rs:29:14\n    |\n LL |         *p = return; //~ ERROR unreachable\n    |              ^^^^^^\n \n error: unreachable expression\n-  --> $DIR/expr_assign.rs:36:15\n+  --> $DIR/expr_assign.rs:35:15\n    |\n LL |     *{return; &mut i} = 22; //~ ERROR unreachable\n    |               ^^^^^^"}, {"sha": "93bce43f76d911f624e48b2d8a03e6f7dbf69698", "filename": "src/test/ui/reachable/expr_block.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_block.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n \n fn a() {\n     // Here the tail expression is considered unreachable:"}, {"sha": "5f5696aadb37cd7b26419296ffa2ec4c13a9977e", "filename": "src/test/ui/reachable/expr_block.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_block.rs:21:9\n+  --> $DIR/expr_block.rs:20:9\n    |\n LL |         22 //~ ERROR unreachable\n    |         ^^\n@@ -11,7 +11,7 @@ LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable statement\n-  --> $DIR/expr_block.rs:36:9\n+  --> $DIR/expr_block.rs:35:9\n    |\n LL |         println!(\"foo\");\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "2772dd429d184275d4b97c65892f4d4f4083ce56", "filename": "src/test/ui/reachable/expr_call.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_call.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n \n fn foo(x: !, y: usize) { }\n "}, {"sha": "414d29ec2a73411c0a62c09b137160fd15d923ba", "filename": "src/test/ui/reachable/expr_call.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_call.rs:23:17\n+  --> $DIR/expr_call.rs:22:17\n    |\n LL |     foo(return, 22); //~ ERROR unreachable\n    |                 ^^\n@@ -11,7 +11,7 @@ LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable expression\n-  --> $DIR/expr_call.rs:28:5\n+  --> $DIR/expr_call.rs:27:5\n    |\n LL |     bar(return); //~ ERROR unreachable\n    |     ^^^^^^^^^^^"}, {"sha": "88846b638416a5a9da4ea22622003f4fb6365413", "filename": "src/test/ui/reachable/expr_cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n #![feature(type_ascription)]\n \n fn a() {"}, {"sha": "458334e2af9670e5e1399ecdb9be9e52d25b52b6", "filename": "src/test/ui/reachable/expr_cast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.stderr?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_cast.rs:20:13\n+  --> $DIR/expr_cast.rs:19:13\n    |\n LL |     let x = {return} as !; //~ ERROR unreachable\n    |             ^^^^^^^^^^^^^"}, {"sha": "d2fb1044e48b12816880c30e9e3281b5dd7529b7", "filename": "src/test/ui/reachable/expr_if.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_if.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n \n fn foo() {\n     if {return} {"}, {"sha": "6e8afd1c5be823a1249a8f62230995bca6eb9fe9", "filename": "src/test/ui/reachable/expr_if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1,5 +1,5 @@\n error: unreachable statement\n-  --> $DIR/expr_if.rs:38:5\n+  --> $DIR/expr_if.rs:37:5\n    |\n LL |     println!(\"But I am.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "533cdac0968b388450f7ee5c7e010b351846a550", "filename": "src/test/ui/reachable/expr_loop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n \n fn a() {\n     loop { return; }"}, {"sha": "a51ef293acf1575d5e7ff7d6050c68ed59852be1", "filename": "src/test/ui/reachable/expr_loop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1,5 +1,5 @@\n error: unreachable statement\n-  --> $DIR/expr_loop.rs:19:5\n+  --> $DIR/expr_loop.rs:18:5\n    |\n LL |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -12,15 +12,15 @@ LL | #![deny(unreachable_code)]\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n-  --> $DIR/expr_loop.rs:31:5\n+  --> $DIR/expr_loop.rs:30:5\n    |\n LL |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n-  --> $DIR/expr_loop.rs:41:5\n+  --> $DIR/expr_loop.rs:40:5\n    |\n LL |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "193edd7743572924e9ad44bc2c20345a613a6571", "filename": "src/test/ui/reachable/expr_match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_match.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n \n fn a() {\n     // The match is considered unreachable here, because the `return`"}, {"sha": "dfc1417f3d2946a7d45fc1d4ec4cc9c9f08c535c", "filename": "src/test/ui/reachable/expr_match.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_match.rs:20:5\n+  --> $DIR/expr_match.rs:19:5\n    |\n LL |     match {return} { } //~ ERROR unreachable\n    |     ^^^^^^^^^^^^^^^^^^\n@@ -11,15 +11,15 @@ LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable statement\n-  --> $DIR/expr_match.rs:25:5\n+  --> $DIR/expr_match.rs:24:5\n    |\n LL |     println!(\"I am dead\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n-  --> $DIR/expr_match.rs:35:5\n+  --> $DIR/expr_match.rs:34:5\n    |\n LL |     println!(\"I am dead\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "7dabb307097622859232eef056fb7d510dcb61ce", "filename": "src/test/ui/reachable/expr_method.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_method.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n \n struct Foo;\n "}, {"sha": "6d67bfcd54a7a313403723c78c11b7553a7ea3ce", "filename": "src/test/ui/reachable/expr_method.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_method.rs:26:21\n+  --> $DIR/expr_method.rs:25:21\n    |\n LL |     Foo.foo(return, 22); //~ ERROR unreachable\n    |                     ^^\n@@ -11,7 +11,7 @@ LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable expression\n-  --> $DIR/expr_method.rs:31:5\n+  --> $DIR/expr_method.rs:30:5\n    |\n LL |     Foo.bar(return); //~ ERROR unreachable\n    |     ^^^^^^^^^^^^^^^"}, {"sha": "fd9fca413a7f2d1512ea2c8c839107064832eaa4", "filename": "src/test/ui/reachable/expr_repeat.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n #![feature(type_ascription)]\n \n fn a() {"}, {"sha": "36393de90b7cdbfeda9cf7769cb8dd049121b574", "filename": "src/test/ui/reachable/expr_repeat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.stderr?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_repeat.rs:20:25\n+  --> $DIR/expr_repeat.rs:19:25\n    |\n LL |     let x: [usize; 2] = [return; 2]; //~ ERROR unreachable\n    |                         ^^^^^^^^^^^"}, {"sha": "9bbbe6f909986cf16c26a6b02074ee7abc3653fd", "filename": "src/test/ui/reachable/expr_return.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_return.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n #![feature(type_ascription)]\n \n fn a() {"}, {"sha": "2dcc50944c5d71b95d2d602bfa6ce6c6a0d87095", "filename": "src/test/ui/reachable/expr_return.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_return.stderr?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_return.rs:21:22\n+  --> $DIR/expr_return.rs:20:22\n    |\n LL |     let x = {return {return {return;}}}; //~ ERROR unreachable\n    |                      ^^^^^^^^^^^^^^^^"}, {"sha": "66414f6084b818538760bd39f74f21199c878b85", "filename": "src/test/ui/reachable/expr_struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n #![feature(type_ascription)]\n \n struct Foo {"}, {"sha": "3f0ecb204798b33c8268ce1794d2a6606e68aa10", "filename": "src/test/ui/reachable/expr_struct.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.stderr?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_struct.rs:25:13\n+  --> $DIR/expr_struct.rs:24:13\n    |\n LL |     let x = Foo { a: 22, b: 33, ..return }; //~ ERROR unreachable\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -11,19 +11,19 @@ LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable expression\n-  --> $DIR/expr_struct.rs:30:33\n+  --> $DIR/expr_struct.rs:29:33\n    |\n LL |     let x = Foo { a: return, b: 33, ..return }; //~ ERROR unreachable\n    |                                 ^^\n \n error: unreachable expression\n-  --> $DIR/expr_struct.rs:35:39\n+  --> $DIR/expr_struct.rs:34:39\n    |\n LL |     let x = Foo { a: 22, b: return, ..return }; //~ ERROR unreachable\n    |                                       ^^^^^^\n \n error: unreachable expression\n-  --> $DIR/expr_struct.rs:40:13\n+  --> $DIR/expr_struct.rs:39:13\n    |\n LL |     let x = Foo { a: 22, b: return }; //~ ERROR unreachable\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e2c100902489179427713b8feda025d379e002b7", "filename": "src/test/ui/reachable/expr_tup.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n #![feature(type_ascription)]\n \n fn a() {"}, {"sha": "d372373ced0f2e46654f238dd78417835ca92bb8", "filename": "src/test/ui/reachable/expr_tup.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.stderr?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_tup.rs:20:38\n+  --> $DIR/expr_tup.rs:19:38\n    |\n LL |     let x: (usize, usize) = (return, 2); //~ ERROR unreachable\n    |                                      ^\n@@ -11,7 +11,7 @@ LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unreachable expression\n-  --> $DIR/expr_tup.rs:25:29\n+  --> $DIR/expr_tup.rs:24:29\n    |\n LL |     let x: (usize, usize) = (2, return); //~ ERROR unreachable\n    |                             ^^^^^^^^^^^"}, {"sha": "2381ea2ac7a1b0b727cb2f99e57251e8242e4f5d", "filename": "src/test/ui/reachable/expr_type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_type.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n #![feature(type_ascription)]\n \n fn a() {"}, {"sha": "9b165d6b3ee196c716dc7b5eff1aa121b6c30110", "filename": "src/test/ui/reachable/expr_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_type.stderr?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1,5 +1,5 @@\n error: unreachable expression\n-  --> $DIR/expr_type.rs:20:13\n+  --> $DIR/expr_type.rs:19:13\n    |\n LL |     let x = {return}: !; //~ ERROR unreachable\n    |             ^^^^^^^^^^^"}, {"sha": "4096865f4c6705fb4f0f06552de80f3b3961bde2", "filename": "src/test/ui/reachable/expr_unary.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -12,13 +12,9 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![deny(coerce_never)]\n-#![feature(never_type)]\n \n fn foo() {\n-    let x: ! = ! { return; 22 }; //~ ERROR unreachable\n-    //~^ ERROR cannot coerce\n-    //~| hard error\n+    let x: ! = ! { return; }; //~ ERROR unreachable\n     //~| ERROR cannot apply unary operator `!` to type `!`\n }\n "}, {"sha": "165eccd42396b2e8310ffcc4b6d6a734d44363ec", "filename": "src/test/ui/reachable/expr_unary.stderr", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1,35 +1,21 @@\n+error[E0600]: cannot apply unary operator `!` to type `!`\n+  --> $DIR/expr_unary.rs:17:16\n+   |\n+LL |     let x: ! = ! { return; }; //~ ERROR unreachable\n+   |                ^^^^^^^^^^^^^\n+\n error: unreachable expression\n-  --> $DIR/expr_unary.rs:19:28\n+  --> $DIR/expr_unary.rs:17:16\n    |\n-LL |     let x: ! = ! { return; 22 }; //~ ERROR unreachable\n-   |                            ^^\n+LL |     let x: ! = ! { return; }; //~ ERROR unreachable\n+   |                ^^^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/expr_unary.rs:14:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: cannot coerce `{integer}` to !\n-  --> $DIR/expr_unary.rs:19:28\n-   |\n-LL |     let x: ! = ! { return; 22 }; //~ ERROR unreachable\n-   |                            ^^\n-   |\n-note: lint level defined here\n-  --> $DIR/expr_unary.rs:15:9\n-   |\n-LL | #![deny(coerce_never)]\n-   |         ^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #46325 <https://github.com/rust-lang/rust/issues/46325>\n-\n-error[E0600]: cannot apply unary operator `!` to type `!`\n-  --> $DIR/expr_unary.rs:19:16\n-   |\n-LL |     let x: ! = ! { return; 22 }; //~ ERROR unreachable\n-   |                ^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0600`."}, {"sha": "79fa69a9289bb7a6efc2bca711559cf10971f2f2", "filename": "src/test/ui/reachable/expr_while.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_while.rs?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_assignments)]\n #![allow(dead_code)]\n #![deny(unreachable_code)]\n-#![feature(never_type)]\n \n fn foo() {\n     while {return} {"}, {"sha": "90c35bfaa7acd08be10682c372b0c7d81ab10843", "filename": "src/test/ui/reachable/expr_while.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebf74851d685f75abec7ef4e805f75fc301460c/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr?ref=5ebf74851d685f75abec7ef4e805f75fc301460c", "patch": "@@ -1,5 +1,5 @@\n error: unreachable statement\n-  --> $DIR/expr_while.rs:19:9\n+  --> $DIR/expr_while.rs:18:9\n    |\n LL |         println!(\"Hello, world!\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -12,15 +12,15 @@ LL | #![deny(unreachable_code)]\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n-  --> $DIR/expr_while.rs:33:9\n+  --> $DIR/expr_while.rs:32:9\n    |\n LL |         println!(\"I am dead.\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n-  --> $DIR/expr_while.rs:35:5\n+  --> $DIR/expr_while.rs:34:5\n    |\n LL |     println!(\"I am, too.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^"}]}