{"sha": "bbdff1fff49a6f816aa35d9b84c79b2603f0961b", "node_id": "C_kwDOAAsO6NoAKGJiZGZmMWZmZjQ5YTZmODE2YWEzNWQ5Yjg0Yzc5YjI2MDNmMDk2MWI", "commit": {"author": {"name": "Ross MacArthur", "email": "ross@macarthur.io", "date": "2022-06-21T06:57:02Z"}, "committer": {"name": "Ross MacArthur", "email": "ross@macarthur.io", "date": "2022-06-21T06:57:02Z"}, "message": "Add `Iterator::next_chunk`", "tree": {"sha": "9b349fa18b4f3b5febb9e30a32ffc257cebfefd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b349fa18b4f3b5febb9e30a32ffc257cebfefd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbdff1fff49a6f816aa35d9b84c79b2603f0961b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVCaKXH7ieVMY/WsnBtDcOZhSdYQFAmKxa74ACgkQBtDcOZhS\ndYTLFQ//Tlz+aW/vsKatTCSMT4hIlnyIhf0DNQWfFho8eRgOYnTGH98q9o54C9fm\nPwyM8LgNSr4Srk/3A5dGy305A9XoPAIwx7LJlYlbpE+wBeDoFIgv8qdkHmXBhwqY\n9XnVITTtOUgS4xMei9PpdRtwvnScAvl2nWKLfRgXF6cPLidU2gXH8gbZuvoxCiYx\n+CeLX8AZpqBQ9ZZQJqVSYW+Som0JjZdyPJKCz9VALcFUs8xo/cu1HvLSiXg6t/cu\nJozQUQR33dy1WxQLcNISgd9UOS9OXSOUmympvEtjkc3pOZwkJA0nCzs6ZsiWu8YI\nFj+qXvoy+f8ZFDlLs8ieM3oWbBgvweDhdbceMgQm5pAXs6hB2Yk8OLmAo/oegkTB\nwewGizTBrGJkMfWNfeehCx+W2BfXrBpYxY+heTQWqSPdMlFLkp03Jy/BrC0SfX0F\n/epl/q4sh8uyzGm4ACBAkOcXVa3jUECgCJ+ANJNbwogWUdSlAAs+Y/VttIuG1V70\ncF+3ryc2uaseW1pP+WxTjqz63f+jUIeGg/iqxoL4klrw4vDo4YWVAFFCqqSg+tGQ\npfprArhiE45dpQsgOM4o0GFX2QrPrAGNtwEEYM9cqBonpYhXu6Hcfg4AOfQyIm/U\nmpq2xwO2/L0rYLspkaIxNm2DQN51kgFeF+ftJFzOwdTE18AdWVc=\n=VeOZ\n-----END PGP SIGNATURE-----", "payload": "tree 9b349fa18b4f3b5febb9e30a32ffc257cebfefd8\nparent b12708f7f40463b2131f0c47d1e8a4ffb543a422\nauthor Ross MacArthur <ross@macarthur.io> 1655794622 +0200\ncommitter Ross MacArthur <ross@macarthur.io> 1655794622 +0200\n\nAdd `Iterator::next_chunk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbdff1fff49a6f816aa35d9b84c79b2603f0961b", "html_url": "https://github.com/rust-lang/rust/commit/bbdff1fff49a6f816aa35d9b84c79b2603f0961b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbdff1fff49a6f816aa35d9b84c79b2603f0961b/comments", "author": {"login": "rossmacarthur", "id": 17109887, "node_id": "MDQ6VXNlcjE3MTA5ODg3", "avatar_url": "https://avatars.githubusercontent.com/u/17109887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rossmacarthur", "html_url": "https://github.com/rossmacarthur", "followers_url": "https://api.github.com/users/rossmacarthur/followers", "following_url": "https://api.github.com/users/rossmacarthur/following{/other_user}", "gists_url": "https://api.github.com/users/rossmacarthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/rossmacarthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rossmacarthur/subscriptions", "organizations_url": "https://api.github.com/users/rossmacarthur/orgs", "repos_url": "https://api.github.com/users/rossmacarthur/repos", "events_url": "https://api.github.com/users/rossmacarthur/events{/privacy}", "received_events_url": "https://api.github.com/users/rossmacarthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rossmacarthur", "id": 17109887, "node_id": "MDQ6VXNlcjE3MTA5ODg3", "avatar_url": "https://avatars.githubusercontent.com/u/17109887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rossmacarthur", "html_url": "https://github.com/rossmacarthur", "followers_url": "https://api.github.com/users/rossmacarthur/followers", "following_url": "https://api.github.com/users/rossmacarthur/following{/other_user}", "gists_url": "https://api.github.com/users/rossmacarthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/rossmacarthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rossmacarthur/subscriptions", "organizations_url": "https://api.github.com/users/rossmacarthur/orgs", "repos_url": "https://api.github.com/users/rossmacarthur/repos", "events_url": "https://api.github.com/users/rossmacarthur/events{/privacy}", "received_events_url": "https://api.github.com/users/rossmacarthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b12708f7f40463b2131f0c47d1e8a4ffb543a422", "url": "https://api.github.com/repos/rust-lang/rust/commits/b12708f7f40463b2131f0c47d1e8a4ffb543a422", "html_url": "https://github.com/rust-lang/rust/commit/b12708f7f40463b2131f0c47d1e8a4ffb543a422"}], "stats": {"total": 131, "additions": 100, "deletions": 31}, "files": [{"sha": "c9823a136bc4214dd6d918dab330497c0537c735", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 48, "deletions": 31, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/bbdff1fff49a6f816aa35d9b84c79b2603f0961b/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdff1fff49a6f816aa35d9b84c79b2603f0961b/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=bbdff1fff49a6f816aa35d9b84c79b2603f0961b", "patch": "@@ -780,24 +780,27 @@ where\n }\n \n /// Pulls `N` items from `iter` and returns them as an array. If the iterator\n-/// yields fewer than `N` items, `None` is returned and all already yielded\n-/// items are dropped.\n+/// yields fewer than `N` items, `Err` is returned containing an iterator over\n+/// the already yielded items.\n ///\n /// Since the iterator is passed as a mutable reference and this function calls\n /// `next` at most `N` times, the iterator can still be used afterwards to\n /// retrieve the remaining items.\n ///\n /// If `iter.next()` panicks, all items already yielded by the iterator are\n /// dropped.\n-fn try_collect_into_array<I, T, R, const N: usize>(iter: &mut I) -> Option<R::TryType>\n+#[inline]\n+fn try_collect_into_array<I, T, R, const N: usize>(\n+    iter: &mut I,\n+) -> Result<R::TryType, IntoIter<T, N>>\n where\n     I: Iterator,\n     I::Item: Try<Output = T, Residual = R>,\n     R: Residual<[T; N]>,\n {\n     if N == 0 {\n         // SAFETY: An empty array is always inhabited and has no validity invariants.\n-        return unsafe { Some(Try::from_output(mem::zeroed())) };\n+        return Ok(Try::from_output(unsafe { mem::zeroed() }));\n     }\n \n     struct Guard<'a, T, const N: usize> {\n@@ -821,35 +824,49 @@ where\n     let mut array = MaybeUninit::uninit_array::<N>();\n     let mut guard = Guard { array_mut: &mut array, initialized: 0 };\n \n-    while let Some(item_rslt) = iter.next() {\n-        let item = match item_rslt.branch() {\n-            ControlFlow::Break(r) => {\n-                return Some(FromResidual::from_residual(r));\n+    for _ in 0..N {\n+        match iter.next() {\n+            Some(item_rslt) => {\n+                let item = match item_rslt.branch() {\n+                    ControlFlow::Break(r) => {\n+                        return Ok(FromResidual::from_residual(r));\n+                    }\n+                    ControlFlow::Continue(elem) => elem,\n+                };\n+\n+                // SAFETY: `guard.initialized` starts at 0, is increased by one in the\n+                // loop and the loop is aborted once it reaches N (which is\n+                // `array.len()`).\n+                unsafe {\n+                    guard.array_mut.get_unchecked_mut(guard.initialized).write(item);\n+                }\n+                guard.initialized += 1;\n+            }\n+            None => {\n+                let alive = 0..guard.initialized;\n+                mem::forget(guard);\n+                // SAFETY: `array` was initialized with exactly `initialized`\n+                // number of elements.\n+                return Err(unsafe { IntoIter::new_unchecked(array, alive) });\n             }\n-            ControlFlow::Continue(elem) => elem,\n-        };\n-\n-        // SAFETY: `guard.initialized` starts at 0, is increased by one in the\n-        // loop and the loop is aborted once it reaches N (which is\n-        // `array.len()`).\n-        unsafe {\n-            guard.array_mut.get_unchecked_mut(guard.initialized).write(item);\n-        }\n-        guard.initialized += 1;\n-\n-        // Check if the whole array was initialized.\n-        if guard.initialized == N {\n-            mem::forget(guard);\n-\n-            // SAFETY: the condition above asserts that all elements are\n-            // initialized.\n-            let out = unsafe { MaybeUninit::array_assume_init(array) };\n-            return Some(Try::from_output(out));\n         }\n     }\n \n-    // This is only reached if the iterator is exhausted before\n-    // `guard.initialized` reaches `N`. Also note that `guard` is dropped here,\n-    // dropping all already initialized elements.\n-    None\n+    mem::forget(guard);\n+    // SAFETY: All elements of the array were populated in the loop above.\n+    let output = unsafe { MaybeUninit::array_assume_init(array) };\n+    Ok(Try::from_output(output))\n+}\n+\n+/// Returns the next chunk of `N` items from the iterator or errors with an\n+/// iterator over the remainder. Used for `Iterator::next_chunk`.\n+#[inline]\n+pub(crate) fn iter_next_chunk<I, const N: usize>(\n+    iter: &mut I,\n+) -> Result<[I::Item; N], IntoIter<I::Item, N>>\n+where\n+    I: Iterator,\n+{\n+    let mut map = iter.map(NeverShortCircuit);\n+    try_collect_into_array(&mut map).map(|NeverShortCircuit(arr)| arr)\n }"}, {"sha": "326b98ec947d20756b9a4b61aa1c27888575e701", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bbdff1fff49a6f816aa35d9b84c79b2603f0961b/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdff1fff49a6f816aa35d9b84c79b2603f0961b/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=bbdff1fff49a6f816aa35d9b84c79b2603f0961b", "patch": "@@ -1,3 +1,4 @@\n+use crate::array;\n use crate::cmp::{self, Ordering};\n use crate::ops::{ChangeOutputType, ControlFlow, FromResidual, Residual, Try};\n \n@@ -102,6 +103,47 @@ pub trait Iterator {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn next(&mut self) -> Option<Self::Item>;\n \n+    /// Advances the iterator and returns an array containing the next `N` values.\n+    ///\n+    /// If there are not enough elements to fill the array then `Err` is returned\n+    /// containing an iterator over the remaining elements.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iter_next_chunk)]\n+    ///\n+    /// let mut iter = \"lorem\".chars();\n+    ///\n+    /// assert_eq!(iter.next_chunk().unwrap(), ['l', 'o']);              // N is inferred as 2\n+    /// assert_eq!(iter.next_chunk().unwrap(), ['r', 'e', 'm']);         // N is inferred as 3\n+    /// assert_eq!(iter.next_chunk::<4>().unwrap_err().as_slice(), &[]); // N is explicitly 4\n+    /// ```\n+    ///\n+    /// Split a string and get the first three items.\n+    ///\n+    /// ```\n+    /// #![feature(iter_next_chunk)]\n+    ///\n+    /// let quote = \"not all those who wander are lost\";\n+    /// let [first, second, third] = quote.split_whitespace().next_chunk().unwrap();\n+    /// assert_eq!(first, \"not\");\n+    /// assert_eq!(second, \"all\");\n+    /// assert_eq!(third, \"those\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iter_next_chunk\", reason = \"recently added\", issue = \"98326\")]\n+    fn next_chunk<const N: usize>(\n+        &mut self,\n+    ) -> Result<[Self::Item; N], array::IntoIter<Self::Item, N>>\n+    where\n+        Self: Sized,\n+    {\n+        array::iter_next_chunk(self)\n+    }\n+\n     /// Returns the bounds on the remaining length of the iterator.\n     ///\n     /// Specifically, `size_hint()` returns a tuple where the first element"}, {"sha": "37345c1d3814218d101c4773ffb90720051d09b7", "filename": "library/core/tests/iter/traits/iterator.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbdff1fff49a6f816aa35d9b84c79b2603f0961b/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdff1fff49a6f816aa35d9b84c79b2603f0961b/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs?ref=bbdff1fff49a6f816aa35d9b84c79b2603f0961b", "patch": "@@ -575,6 +575,15 @@ fn iter_try_collect_uses_try_fold_not_next() {\n     // validation is just that it didn't panic.\n }\n \n+#[test]\n+fn test_next_chunk() {\n+    let mut it = 0..12;\n+    assert_eq!(it.next_chunk().unwrap(), [0, 1, 2, 3]);\n+    assert_eq!(it.next_chunk().unwrap(), []);\n+    assert_eq!(it.next_chunk().unwrap(), [4, 5, 6, 7, 8, 9]);\n+    assert_eq!(it.next_chunk::<4>().unwrap_err().as_slice(), &[10, 11]);\n+}\n+\n // just tests by whether or not this compiles\n fn _empty_impl_all_auto_traits<T>() {\n     use std::panic::{RefUnwindSafe, UnwindSafe};"}, {"sha": "9611e197a41c487c2a84cdecf0cb331d2ff55372", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbdff1fff49a6f816aa35d9b84c79b2603f0961b/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbdff1fff49a6f816aa35d9b84c79b2603f0961b/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=bbdff1fff49a6f816aa35d9b84c79b2603f0961b", "patch": "@@ -67,6 +67,7 @@\n #![feature(iter_partition_in_place)]\n #![feature(iter_intersperse)]\n #![feature(iter_is_partitioned)]\n+#![feature(iter_next_chunk)]\n #![feature(iter_order_by)]\n #![feature(iterator_try_collect)]\n #![feature(iterator_try_reduce)]"}]}