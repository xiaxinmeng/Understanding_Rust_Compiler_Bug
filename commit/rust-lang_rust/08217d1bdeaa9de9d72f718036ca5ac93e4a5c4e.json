{"sha": "08217d1bdeaa9de9d72f718036ca5ac93e4a5c4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MjE3ZDFiZGVhYTlkZTlkNzJmNzE4MDM2Y2E1YWM5M2U0YTVjNGU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-11-15T20:32:52Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-16T11:07:12Z"}, "message": "Emit DW_TAG_structure_type including fields for structs", "tree": {"sha": "338b6583aba4ac5d93300b23e35efa83f9a7003f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/338b6583aba4ac5d93300b23e35efa83f9a7003f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08217d1bdeaa9de9d72f718036ca5ac93e4a5c4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08217d1bdeaa9de9d72f718036ca5ac93e4a5c4e", "html_url": "https://github.com/rust-lang/rust/commit/08217d1bdeaa9de9d72f718036ca5ac93e4a5c4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08217d1bdeaa9de9d72f718036ca5ac93e4a5c4e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab7ad2caebff43356df1b2060021945dfc6ced4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab7ad2caebff43356df1b2060021945dfc6ced4e", "html_url": "https://github.com/rust-lang/rust/commit/ab7ad2caebff43356df1b2060021945dfc6ced4e"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "c636906afdf2800a903378b345b2e62b086a3a25", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/08217d1bdeaa9de9d72f718036ca5ac93e4a5c4e/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08217d1bdeaa9de9d72f718036ca5ac93e4a5c4e/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=08217d1bdeaa9de9d72f718036ca5ac93e4a5c4e", "patch": "@@ -107,19 +107,22 @@ impl<'tcx> DebugContext<'tcx> {\n \n         let new_entry = |dwarf: &mut DwarfUnit, tag| dwarf.unit.add(dwarf.unit.root(), tag);\n \n-        let primtive = |dwarf: &mut DwarfUnit, ate| {\n+        let primitive = |dwarf: &mut DwarfUnit, ate| {\n             let type_id = new_entry(dwarf, gimli::DW_TAG_base_type);\n             let type_entry = dwarf.unit.get_mut(type_id);\n             type_entry.set(gimli::DW_AT_encoding, AttributeValue::Encoding(ate));\n             type_id\n         };\n \n+        let name = format!(\"{}\", ty);\n+        let layout = self.tcx.layout_of(ParamEnv::reveal_all().and(ty)).unwrap();\n+\n         let type_id = match ty.kind {\n-            ty::Bool => primtive(&mut self.dwarf, gimli::DW_ATE_boolean),\n-            ty::Char => primtive(&mut self.dwarf, gimli::DW_ATE_UTF),\n-            ty::Uint(_) => primtive(&mut self.dwarf, gimli::DW_ATE_unsigned),\n-            ty::Int(_) => primtive(&mut self.dwarf, gimli::DW_ATE_signed),\n-            ty::Float(_) => primtive(&mut self.dwarf, gimli::DW_ATE_float),\n+            ty::Bool => primitive(&mut self.dwarf, gimli::DW_ATE_boolean),\n+            ty::Char => primitive(&mut self.dwarf, gimli::DW_ATE_UTF),\n+            ty::Uint(_) => primitive(&mut self.dwarf, gimli::DW_ATE_unsigned),\n+            ty::Int(_) => primitive(&mut self.dwarf, gimli::DW_ATE_signed),\n+            ty::Float(_) => primitive(&mut self.dwarf, gimli::DW_ATE_float),\n             ty::Ref(_, pointee_ty, mutbl)\n             | ty::RawPtr(ty::TypeAndMut {\n                 ty: pointee_ty,\n@@ -139,10 +142,35 @@ impl<'tcx> DebugContext<'tcx> {\n \n                 type_id\n             }\n+            ty::Adt(adt_def, _substs) if adt_def.is_struct() && !layout.is_unsized() => {\n+                let type_id = new_entry(&mut self.dwarf, gimli::DW_TAG_structure_type);\n+\n+                // Ensure that type is inserted before recursing to avoid duplicates\n+                self.types.insert(ty, type_id);\n+\n+                let variant = adt_def.non_enum_variant();\n+\n+                for (field_idx, field_def) in variant.fields.iter().enumerate() {\n+                    let field_offset = layout.fields.offset(field_idx);\n+                    let field_layout = layout.field(&layout::LayoutCx {\n+                        tcx: self.tcx,\n+                        param_env: ParamEnv::reveal_all(),\n+                    }, field_idx).unwrap();\n+\n+                    let field_type = self.dwarf_ty(field_layout.ty);\n+\n+                    let field_id = self.dwarf.unit.add(type_id, gimli::DW_TAG_member);\n+                    let field_entry = self.dwarf.unit.get_mut(field_id);\n+\n+                    field_entry.set(gimli::DW_AT_name, AttributeValue::String(field_def.ident.as_str().to_string().into_bytes()));\n+                    field_entry.set(gimli::DW_AT_data_member_location, AttributeValue::Udata(field_offset.bytes()));\n+                    field_entry.set(gimli::DW_AT_type, AttributeValue::ThisUnitEntryRef(field_type));\n+                }\n+\n+                type_id\n+            }\n             _ => new_entry(&mut self.dwarf, gimli::DW_TAG_structure_type),\n         };\n-        let name = format!(\"{}\", ty);\n-        let layout = self.tcx.layout_of(ParamEnv::reveal_all().and(ty)).unwrap();\n \n         let type_entry = self.dwarf.unit.get_mut(type_id);\n "}]}