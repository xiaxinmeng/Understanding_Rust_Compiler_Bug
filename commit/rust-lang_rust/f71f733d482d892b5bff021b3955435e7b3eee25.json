{"sha": "f71f733d482d892b5bff021b3955435e7b3eee25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MWY3MzNkNDgyZDg5MmI1YmZmMDIxYjM5NTU0MzVlN2IzZWVlMjU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-23T09:43:14Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-24T22:33:13Z"}, "message": "Add a MIR transform to remove fake reads\n\nAs we are now creating borrows of places that may not be valid for\nborrow checking matches, these have to be removed to avoid generating\nbroken code.", "tree": {"sha": "163045eabfcf8451464b38fef4495c6ae3ef1a3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/163045eabfcf8451464b38fef4495c6ae3ef1a3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f71f733d482d892b5bff021b3955435e7b3eee25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f71f733d482d892b5bff021b3955435e7b3eee25", "html_url": "https://github.com/rust-lang/rust/commit/f71f733d482d892b5bff021b3955435e7b3eee25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f71f733d482d892b5bff021b3955435e7b3eee25/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a6ed0271e7cc8864e6030d945b92aaa850e4afe", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6ed0271e7cc8864e6030d945b92aaa850e4afe", "html_url": "https://github.com/rust-lang/rust/commit/1a6ed0271e7cc8864e6030d945b92aaa850e4afe"}], "stats": {"total": 191, "additions": 188, "deletions": 3}, "files": [{"sha": "a2d70bc05c1d49c9eb7ee18556a961a153fabdf1", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f71f733d482d892b5bff021b3955435e7b3eee25/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71f733d482d892b5bff021b3955435e7b3eee25/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=f71f733d482d892b5bff021b3955435e7b3eee25", "patch": "@@ -14,7 +14,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n \n */\n \n-#![cfg_attr(not(stage0), feature(nll))]\n+#![feature(nll)]\n #![feature(in_band_lifetimes)]\n #![feature(impl_header_lifetime_elision)]\n #![feature(slice_patterns)]"}, {"sha": "aaba7ab8418f539ded32e4974d91a73b02dbd00e", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f71f733d482d892b5bff021b3955435e7b3eee25/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71f733d482d892b5bff021b3955435e7b3eee25/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=f71f733d482d892b5bff021b3955435e7b3eee25", "patch": "@@ -33,7 +33,8 @@\n use rustc_data_structures::fx::FxHashSet;\n \n use rustc::middle::region;\n-use rustc::mir::{BasicBlock, Location, Mir, Rvalue, Statement, StatementKind};\n+use rustc::mir::{BasicBlock, FakeReadCause, Local, Location, Mir, Place};\n+use rustc::mir::{Rvalue, Statement, StatementKind};\n use rustc::mir::visit::{MutVisitor, Visitor, TyContext};\n use rustc::ty::{Ty, RegionKind, TyCtxt};\n use transform::{MirPass, MirSource};\n@@ -135,3 +136,62 @@ impl<'tcx> MutVisitor<'tcx> for DeleteAscribeUserType {\n         self.super_statement(block, statement, location);\n     }\n }\n+\n+pub struct CleanFakeReadsAndBorrows;\n+\n+pub struct DeleteAndRecordFakeReads {\n+    fake_borrow_temporaries: FxHashSet<Local>,\n+}\n+\n+pub struct DeleteFakeBorrows {\n+    fake_borrow_temporaries: FxHashSet<Local>,\n+}\n+\n+// Removes any FakeReads from the MIR\n+impl MirPass for CleanFakeReadsAndBorrows {\n+    fn run_pass<'a, 'tcx>(&self,\n+                          _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          _source: MirSource,\n+                          mir: &mut Mir<'tcx>) {\n+        let mut delete_reads = DeleteAndRecordFakeReads {\n+            fake_borrow_temporaries: FxHashSet(),\n+        };\n+        delete_reads.visit_mir(mir);\n+        let mut delete_borrows = DeleteFakeBorrows {\n+            fake_borrow_temporaries: delete_reads.fake_borrow_temporaries,\n+        };\n+        delete_borrows.visit_mir(mir);\n+    }\n+}\n+\n+impl<'tcx> MutVisitor<'tcx> for DeleteAndRecordFakeReads {\n+    fn visit_statement(&mut self,\n+                       block: BasicBlock,\n+                       statement: &mut Statement<'tcx>,\n+                       location: Location) {\n+        if let StatementKind::FakeRead(cause, ref place) = statement.kind {\n+            if let FakeReadCause::ForMatchGuard = cause {\n+                match *place {\n+                    Place::Local(local) => self.fake_borrow_temporaries.insert(local),\n+                    _ => bug!(\"Fake match guard read of non-local: {:?}\", place),\n+                };\n+            }\n+            statement.make_nop();\n+        }\n+        self.super_statement(block, statement, location);\n+    }\n+}\n+\n+impl<'tcx> MutVisitor<'tcx> for DeleteFakeBorrows {\n+    fn visit_statement(&mut self,\n+                       block: BasicBlock,\n+                       statement: &mut Statement<'tcx>,\n+                       location: Location) {\n+        if let StatementKind::Assign(Place::Local(local), _) = statement.kind {\n+            if self.fake_borrow_temporaries.contains(&local) {\n+                statement.make_nop();\n+            }\n+        }\n+        self.super_statement(block, statement, location);\n+    }\n+}"}, {"sha": "d18836999dccfe7629c1c8221274c6a161571443", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f71f733d482d892b5bff021b3955435e7b3eee25/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71f733d482d892b5bff021b3955435e7b3eee25/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=f71f733d482d892b5bff021b3955435e7b3eee25", "patch": "@@ -237,9 +237,12 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n         no_landing_pads::NoLandingPads,\n         simplify_branches::SimplifyBranches::new(\"initial\"),\n         remove_noop_landing_pads::RemoveNoopLandingPads,\n-        simplify::SimplifyCfg::new(\"early-opt\"),\n         // Remove all `AscribeUserType` statements.\n         cleanup_post_borrowck::CleanAscribeUserType,\n+        // Remove all `FakeRead` statements and the borrows that are only\n+        // used for checking matches\n+        cleanup_post_borrowck::CleanFakeReadsAndBorrows,\n+        simplify::SimplifyCfg::new(\"early-opt\"),\n \n         // These next passes must be executed together\n         add_call_guards::CriticalCallEdges,"}, {"sha": "8411fba02e97766244669818182bd50866855617", "filename": "src/test/mir-opt/remove_fake_borrows.rs", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/f71f733d482d892b5bff021b3955435e7b3eee25/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71f733d482d892b5bff021b3955435e7b3eee25/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs?ref=f71f733d482d892b5bff021b3955435e7b3eee25", "patch": "@@ -0,0 +1,122 @@\n+// Test that the fake borrows for matches are removed after borrow checking.\n+\n+// ignore-wasm32-bare\n+\n+#![feature(nll)]\n+\n+fn match_guard(x: Option<&&i32>) -> i32 {\n+    match x {\n+        Some(0) if true => 0,\n+        _ => 1,\n+    }\n+}\n+\n+fn main() {\n+    match_guard(None);\n+}\n+\n+// END RUST SOURCE\n+\n+// START rustc.match_guard.CleanFakeReadsAndBorrows.before.mir\n+// bb0: {\n+//     FakeRead(ForMatchedPlace, _1);\n+//     _2 = discriminant(_1);\n+//     _3 = &shallow _1;\n+//     _4 = &shallow ((_1 as Some).0: &'<empty> &'<empty> i32);\n+//     _5 = &shallow (*((_1 as Some).0: &'<empty> &'<empty> i32));\n+//     _6 = &shallow (*(*((_1 as Some).0: &'<empty> &'<empty> i32)));\n+//     switchInt(move _2) -> [1isize: bb6, otherwise: bb4];\n+// }\n+// bb1: {\n+//     _0 = const 0i32;\n+//     goto -> bb9;\n+// }\n+// bb2: {\n+//     _0 = const 1i32;\n+//     goto -> bb9;\n+// }\n+// bb3: {\n+//     FakeRead(ForMatchGuard, _3);\n+//     FakeRead(ForMatchGuard, _4);\n+//     FakeRead(ForMatchGuard, _5);\n+//     FakeRead(ForMatchGuard, _6);\n+//     goto -> bb7;\n+// }\n+// bb4: {\n+//     FakeRead(ForMatchGuard, _3);\n+//     FakeRead(ForMatchGuard, _4);\n+//     FakeRead(ForMatchGuard, _5);\n+//     FakeRead(ForMatchGuard, _6);\n+//     goto -> bb2;\n+// }\n+// bb5: {\n+//     unreachable;\n+// }\n+// bb6: {\n+//     switchInt((*(*((_1 as Some).0: &'<empty> &'<empty> i32)))) -> [0i32: bb3, otherwise: bb4];\n+// }\n+// bb7: {\n+//     goto -> bb1;\n+// }\n+// bb8: {\n+//     goto -> bb4;\n+// }\n+// bb9: {\n+//     return;\n+// }\n+// bb10: {\n+//     resume;\n+// }\n+// END rustc.match_guard.CleanFakeReadsAndBorrows.before.mir\n+\n+// START rustc.match_guard.CleanFakeReadsAndBorrows.after.mir\n+// bb0: {\n+//     nop;\n+//     _2 = discriminant(_1);\n+//     nop;\n+//     nop;\n+//     nop;\n+//     nop;\n+//     switchInt(move _2) -> [1isize: bb6, otherwise: bb4];\n+// }\n+// bb1: {\n+//     _0 = const 0i32;\n+//     goto -> bb9;\n+// }\n+// bb2: {\n+//     _0 = const 1i32;\n+//     goto -> bb9;\n+// }\n+// bb3: {\n+//     nop;\n+//     nop;\n+//     nop;\n+//     nop;\n+//     goto -> bb7;\n+// }\n+// bb4: {\n+//     nop;\n+//     nop;\n+//     nop;\n+//     nop;\n+//     goto -> bb2;\n+// }\n+// bb5: {\n+//     unreachable;\n+// }\n+// bb6: {\n+//     switchInt((*(*((_1 as Some).0: &'<empty> &'<empty> i32)))) -> [0i32: bb3, otherwise: bb4];\n+// }\n+// bb7: {\n+//     goto -> bb1;\n+// }\n+// bb8: {\n+//     goto -> bb4;\n+// }\n+// bb9: {\n+//     return;\n+// }\n+// bb10: {\n+//     resume;\n+// }\n+// END rustc.match_guard.CleanFakeReadsAndBorrows.after.mir"}]}