{"sha": "c26c461c0c0f4ee81616a794b1ac3cb41a3f17a6", "node_id": "C_kwDOAAsO6NoAKGMyNmM0NjFjMGMwZjRlZTgxNjE2YTc5NGIxYWMzY2I0MWEzZjE3YTY", "commit": {"author": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-04-28T01:55:04Z"}, "committer": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-07-02T13:51:42Z"}, "message": "construct EncodedMetadata in encode_and_write_metadata", "tree": {"sha": "9a9ca4d12b48fbacf3ed57e6c08814061e200bec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a9ca4d12b48fbacf3ed57e6c08814061e200bec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c26c461c0c0f4ee81616a794b1ac3cb41a3f17a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c26c461c0c0f4ee81616a794b1ac3cb41a3f17a6", "html_url": "https://github.com/rust-lang/rust/commit/c26c461c0c0f4ee81616a794b1ac3cb41a3f17a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c26c461c0c0f4ee81616a794b1ac3cb41a3f17a6/comments", "author": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb75c4b46aff4a610d2c78949d06e3d9e8110731", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb75c4b46aff4a610d2c78949d06e3d9e8110731", "html_url": "https://github.com/rust-lang/rust/commit/bb75c4b46aff4a610d2c78949d06e3d9e8110731"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "950009397ceda4f1b8bff9ebb3926a935a17101f", "filename": "compiler/rustc_metadata/src/fs.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c26c461c0c0f4ee81616a794b1ac3cb41a3f17a6/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26c461c0c0f4ee81616a794b1ac3cb41a3f17a6/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs?ref=c26c461c0c0f4ee81616a794b1ac3cb41a3f17a6", "patch": "@@ -68,11 +68,9 @@ pub fn encode_and_write_metadata(\n         .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"couldn't create a temp dir: {}\", err)));\n     let metadata_tmpdir = MaybeTempDir::new(metadata_tmpdir, tcx.sess.opts.cg.save_temps);\n     let metadata_filename = metadata_tmpdir.as_ref().join(METADATA_FILENAME);\n-    let metadata = match metadata_kind {\n+    match metadata_kind {\n         MetadataKind::None => {\n-            let metadata = EncodedMetadata::new();\n-            let _ = emit_metadata(tcx.sess, metadata.raw_data(), &metadata_tmpdir);\n-            metadata\n+            let _ = emit_metadata(tcx.sess, &[], &metadata_tmpdir);\n         }\n         MetadataKind::Uncompressed | MetadataKind::Compressed => {\n             encode_metadata(tcx, &metadata_filename)\n@@ -82,7 +80,7 @@ pub fn encode_and_write_metadata(\n     let _prof_timer = tcx.sess.prof.generic_activity(\"write_crate_metadata\");\n \n     let need_metadata_file = tcx.sess.opts.output_types.contains_key(&OutputType::Metadata);\n-    if need_metadata_file {\n+    let metadata_filename = if need_metadata_file {\n         if let Err(e) = non_durable_rename(&metadata_filename, &out_filename) {\n             tcx.sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));\n         }\n@@ -92,7 +90,12 @@ pub fn encode_and_write_metadata(\n                 .span_diagnostic\n                 .emit_artifact_notification(&out_filename, \"metadata\");\n         }\n-    }\n+        out_filename\n+    } else {\n+        metadata_filename\n+    };\n+    let raw_data = std::fs::read(metadata_filename).unwrap();\n+    let metadata = EncodedMetadata::from_raw_data(raw_data);\n \n     let need_metadata_module = metadata_kind == MetadataKind::Compressed;\n "}, {"sha": "f18a05fcb1d25d10186ec090ad9889c4dc4d4398", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c26c461c0c0f4ee81616a794b1ac3cb41a3f17a6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26c461c0c0f4ee81616a794b1ac3cb41a3f17a6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=c26c461c0c0f4ee81616a794b1ac3cb41a3f17a6", "patch": "@@ -2146,13 +2146,18 @@ impl EncodedMetadata {\n         EncodedMetadata { raw_data: Vec::new() }\n     }\n \n+    #[inline]\n+    pub fn from_raw_data(raw_data: Vec<u8>) -> Self {\n+        Self { raw_data }\n+    }\n+\n     #[inline]\n     pub fn raw_data(&self) -> &[u8] {\n         &self.raw_data\n     }\n }\n \n-pub fn encode_metadata(tcx: TyCtxt<'_>, path: impl AsRef<Path>) -> EncodedMetadata {\n+pub fn encode_metadata(tcx: TyCtxt<'_>, path: impl AsRef<Path>) {\n     let _prof_timer = tcx.prof.verbose_generic_activity(\"generate_crate_metadata\");\n \n     // Since encoding metadata is not in a query, and nothing is cached,\n@@ -2170,11 +2175,10 @@ pub fn encode_metadata(tcx: TyCtxt<'_>, path: impl AsRef<Path>) -> EncodedMetada\n             // It can be removed if it turns out to cause trouble or be detrimental to performance.\n             join(|| prefetch_mir(tcx), || tcx.exported_symbols(LOCAL_CRATE));\n         },\n-    )\n-    .0\n+    );\n }\n \n-fn encode_metadata_impl(tcx: TyCtxt<'_>, path: impl AsRef<Path>) -> EncodedMetadata {\n+fn encode_metadata_impl(tcx: TyCtxt<'_>, path: impl AsRef<Path>) {\n     let mut encoder = opaque::FileEncoder::new(path.as_ref())\n         .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"failed to create file encoder: {}\", err)));\n     encoder.emit_raw_bytes(METADATA_HEADER);\n@@ -2226,8 +2230,6 @@ fn encode_metadata_impl(tcx: TyCtxt<'_>, path: impl AsRef<Path>) -> EncodedMetad\n \n     // Record metadata size for self-profiling\n     tcx.prof.artifact_size(\"crate_metadata\", \"crate_metadata\", result.len() as u64);\n-\n-    EncodedMetadata { raw_data: result }\n }\n \n pub fn provide(providers: &mut Providers) {"}]}