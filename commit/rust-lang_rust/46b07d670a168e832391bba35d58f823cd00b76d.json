{"sha": "46b07d670a168e832391bba35d58f823cd00b76d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YjA3ZDY3MGExNjhlODMyMzkxYmJhMzVkNThmODIzY2QwMGI3NmQ=", "commit": {"author": {"name": "Kevin Leimkuhler", "email": "kevin@kleimkuhler.com", "date": "2018-10-06T02:09:14Z"}, "committer": {"name": "Kevin Leimkuhler", "email": "kevin@kleimkuhler.com", "date": "2018-10-10T04:10:27Z"}, "message": "Simply unused_parens check and add tests", "tree": {"sha": "7cb520e72503de447f99f3e63851e2c77907465a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cb520e72503de447f99f3e63851e2c77907465a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46b07d670a168e832391bba35d58f823cd00b76d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46b07d670a168e832391bba35d58f823cd00b76d", "html_url": "https://github.com/rust-lang/rust/commit/46b07d670a168e832391bba35d58f823cd00b76d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46b07d670a168e832391bba35d58f823cd00b76d/comments", "author": {"login": "kleimkuhler", "id": 4572153, "node_id": "MDQ6VXNlcjQ1NzIxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/4572153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kleimkuhler", "html_url": "https://github.com/kleimkuhler", "followers_url": "https://api.github.com/users/kleimkuhler/followers", "following_url": "https://api.github.com/users/kleimkuhler/following{/other_user}", "gists_url": "https://api.github.com/users/kleimkuhler/gists{/gist_id}", "starred_url": "https://api.github.com/users/kleimkuhler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kleimkuhler/subscriptions", "organizations_url": "https://api.github.com/users/kleimkuhler/orgs", "repos_url": "https://api.github.com/users/kleimkuhler/repos", "events_url": "https://api.github.com/users/kleimkuhler/events{/privacy}", "received_events_url": "https://api.github.com/users/kleimkuhler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kleimkuhler", "id": 4572153, "node_id": "MDQ6VXNlcjQ1NzIxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/4572153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kleimkuhler", "html_url": "https://github.com/kleimkuhler", "followers_url": "https://api.github.com/users/kleimkuhler/followers", "following_url": "https://api.github.com/users/kleimkuhler/following{/other_user}", "gists_url": "https://api.github.com/users/kleimkuhler/gists{/gist_id}", "starred_url": "https://api.github.com/users/kleimkuhler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kleimkuhler/subscriptions", "organizations_url": "https://api.github.com/users/kleimkuhler/orgs", "repos_url": "https://api.github.com/users/kleimkuhler/repos", "events_url": "https://api.github.com/users/kleimkuhler/events{/privacy}", "received_events_url": "https://api.github.com/users/kleimkuhler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5217527a5b2e09342e00cf8571e8af22f50546c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5217527a5b2e09342e00cf8571e8af22f50546c3", "html_url": "https://github.com/rust-lang/rust/commit/5217527a5b2e09342e00cf8571e8af22f50546c3"}], "stats": {"total": 113, "additions": 95, "deletions": 18}, "files": [{"sha": "0ef46e77280db99c8e457d0589b35f24e4b32efe", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/46b07d670a168e832391bba35d58f823cd00b76d/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b07d670a168e832391bba35d58f823cd00b76d/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=46b07d670a168e832391bba35d58f823cd00b76d", "patch": "@@ -274,21 +274,18 @@ impl UnusedParens {\n                             parser::contains_exterior_struct_lit(&inner);\n             if !necessary {\n                 let pattern = pprust::expr_to_string(value);\n-                Self::remove_outer_parens(cx, value.span, &pattern, msg)\n+                Self::remove_outer_parens(cx, value.span, &pattern, msg);\n             }\n         }\n     }\n \n     fn check_unused_parens_pat(&self,\n                                 cx: &EarlyContext,\n                                 value: &ast::Pat,\n-                                msg: &str,\n-                                struct_lit_needs_parens: bool) {\n+                                msg: &str) {\n         if let ast::PatKind::Paren(_) = value.node {\n-            if !struct_lit_needs_parens {\n-                let pattern = pprust::pat_to_string(value);\n-                Self::remove_outer_parens(cx, value.span, &pattern, msg)\n-            }\n+            let pattern = pprust::pat_to_string(value);\n+            Self::remove_outer_parens(cx, value.span, &pattern, msg);\n         }\n     }\n \n@@ -355,7 +352,9 @@ impl EarlyLintPass for UnusedParens {\n                     // first \"argument\" is self (which sometimes needs parens)\n                     MethodCall(_, ref args) => (&args[1..], \"method\"),\n                     // actual catch-all arm\n-                    _ => { return; }\n+                    _ => {\n+                        return;\n+                    }\n                 };\n                 // Don't lint if this is a nested macro expansion: otherwise, the lint could\n                 // trigger in situations that macro authors shouldn't have to care about, e.g.,\n@@ -377,15 +376,9 @@ impl EarlyLintPass for UnusedParens {\n     }\n \n     fn check_pat(&mut self, cx: &EarlyContext, p: &ast::Pat) {\n-        use ast::PatKind::*;\n-        let (value, msg, struct_lit_needs_parens) = match p.node {\n-            Ident(.., Some(ref pat)) => (pat, \"optional subpattern\", false),\n-            Ref(ref pat, _) => (pat, \"reference pattern\", false),\n-            Slice(_, Some(ref pat), _) => (pat, \"optional position pattern\", false),\n-            Paren(_) => (p, \"pattern\", false),\n-            _ => return,\n-        };\n-        self.check_unused_parens_pat(cx, &value, msg, struct_lit_needs_parens);\n+        if let ast::PatKind::Paren(_) = p.node {\n+            self.check_unused_parens_pat(cx, &p, \"pattern\");\n+        }\n     }\n \n     fn check_stmt(&mut self, cx: &EarlyContext, s: &ast::Stmt) {"}, {"sha": "f02e3198984f42959542f9a24087ef7904c76f3e", "filename": "src/test/run-pass/binding/pat-tuple-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b07d670a168e832391bba35d58f823cd00b76d/src%2Ftest%2Frun-pass%2Fbinding%2Fpat-tuple-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b07d670a168e832391bba35d58f823cd00b76d/src%2Ftest%2Frun-pass%2Fbinding%2Fpat-tuple-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fpat-tuple-7.rs?ref=46b07d670a168e832391bba35d58f823cd00b76d", "patch": "@@ -12,6 +12,6 @@\n \n fn main() {\n     match 0 {\n-        (pat) => assert_eq!(pat, 0)\n+        pat => assert_eq!(pat, 0)\n     }\n }"}, {"sha": "5702a8941d4663f45c0732c782355cecb4cac0b1", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/46b07d670a168e832391bba35d58f823cd00b76d/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b07d670a168e832391bba35d58f823cd00b76d/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs?ref=46b07d670a168e832391bba35d58f823cd00b76d", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#![allow(unreachable_patterns)]\n+#![allow(unused_variables)]\n+#![warn(unused_parens)]\n+\n+struct A {\n+    field: Option<String>,\n+}\n+\n+fn main() {\n+    let x = 3;\n+    match x {\n+        (_) => {}     //~ WARNING: unnecessary parentheses around pattern\n+        (y) => {}     //~ WARNING: unnecessary parentheses around pattern\n+        (ref r) => {} //~ WARNING: unnecessary parentheses around pattern\n+        e @ 1...2 | (e @ (3...4)) => {}\n+        //~^ WARNING: unnecessary parentheses around pattern (3 ... 4)\n+        //~^ WARNING: unnecessary parentheses around pattern (e @ _)\n+    }\n+\n+    let field = \"foo\".to_string();\n+    let x: Option<A> = Some(A { field: Some(field) });\n+    match x {\n+        Some(A {\n+            field: (ref a @ Some(_)),\n+            //~^ WARNING: unnecessary parentheses around pattern\n+            ..\n+        }) => {}\n+        _ => {}\n+    }\n+}"}, {"sha": "7d9eb697fd7ea88afa88596f60188b7df3ba91b7", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/46b07d670a168e832391bba35d58f823cd00b76d/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46b07d670a168e832391bba35d58f823cd00b76d/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr?ref=46b07d670a168e832391bba35d58f823cd00b76d", "patch": "@@ -0,0 +1,42 @@\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:24:9\n+   |\n+LL |         (_) => {}     //~ WARNING: unnecessary parentheses around pattern\n+   |         ^^^ help: remove these parentheses\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-54538-unused-parens-lint.rs:15:9\n+   |\n+LL | #![warn(unused_parens)]\n+   |         ^^^^^^^^^^^^^\n+\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:25:9\n+   |\n+LL |         (y) => {}     //~ WARNING: unnecessary parentheses around pattern\n+   |         ^^^ help: remove these parentheses\n+\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:26:9\n+   |\n+LL |         (ref r) => {} //~ WARNING: unnecessary parentheses around pattern\n+   |         ^^^^^^^ help: remove these parentheses\n+\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:27:21\n+   |\n+LL |         e @ 1...2 | (e @ (3...4)) => {}\n+   |                     ^^^^^^^^^^^^^ help: remove these parentheses\n+\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:27:26\n+   |\n+LL |         e @ 1...2 | (e @ (3...4)) => {}\n+   |                          ^^^^^^^ help: remove these parentheses\n+\n+warning: unnecessary parentheses around pattern\n+  --> $DIR/issue-54538-unused-parens-lint.rs:36:20\n+   |\n+LL |             field: (ref a @ Some(_)),\n+   |                    ^^^^^^^^^^^^^^^^^ help: remove these parentheses\n+"}]}