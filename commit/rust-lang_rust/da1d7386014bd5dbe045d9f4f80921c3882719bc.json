{"sha": "da1d7386014bd5dbe045d9f4f80921c3882719bc", "node_id": "C_kwDOAAsO6NoAKGRhMWQ3Mzg2MDE0YmQ1ZGJlMDQ1ZDlmNGY4MDkyMWMzODgyNzE5YmM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-01T19:37:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-01T19:37:07Z"}, "message": "Rollup merge of #94467 - ibraheemdev:master, r=pnkfelix\n\nAdd `special_module_name` lint\n\nDeclaring `lib` as a module is one of the most common beginner mistakes when trying to setup a binary and library target in the same crate. `special_module_name` lints against it, as well as `mod main;`\n```\nwarning: found module declaration for main.rs\n  --> $DIR/special_module_name.rs:4:1\n   |\nLL | mod main;\n   | ^^^^^^^^^\n   |\n   = note: a binary crate cannot be used as library\n\nwarning: found module declaration for lib.rs\n  --> $DIR/special_module_name.rs:1:1\n   |\nLL | mod lib;\n   | ^^^^^^^^\n   |\n   = note: `#[warn(special_module_name)]` on by default\n   = note: lib.rs is the root of this crate's library target\n   = help: to refer to it from other targets, use the library's name as the path\n   ```\n\nNote that the help message is not the best in that it doesn't provide an example of an import path (`the_actual_crate_name::`), and doesn't check whether the current file is part of a library/binary target to provide more specific error messages. I'm not sure where this lint would have to be run to access that information.", "tree": {"sha": "9aa46333bc7a17a0f6f812fb6c2fbc355f1899e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aa46333bc7a17a0f6f812fb6c2fbc355f1899e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da1d7386014bd5dbe045d9f4f80921c3882719bc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjEQnjCRBK7hj4Ov3rIwAA734IAHqwNyE+UTOmsJd+quFAS9jC\nINWAipZBZ0QXseYe28NKCu8SieKhAG5a//VnsOY39hkPvfItgmvuiIpQDyo1zMOi\nb5cP5tTW3t5FwQeK0tmEyDneOI+cbs3nzKxKbOv5Ii5hOQBr76UTtvSOrNDBiDCB\njtvZdqicLKzAeVPwCH1c2g62BQHAbwFl52n2iA3mGFwyU9eCJDh0+iw9P4TTi6QU\nf8+O2y34GGeovHH61tOMcRIczgnOILRAF0gGAGgNoPfdK1maT4yrQ9jrp05bFQ/0\nWJHPfm1jYDijsNyDf9vIGo8QwnXmeRAzKSc6yxSxhEFKZrcKBlIoJEq3XLZZjGw=\n=iGYp\n-----END PGP SIGNATURE-----\n", "payload": "tree 9aa46333bc7a17a0f6f812fb6c2fbc355f1899e1\nparent 9af618b62e91b45d61f41548f24ba60b834e362b\nparent 4fdf43f23fbd4fb69960c9136dc796d8e64be785\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1662061027 +0200\ncommitter GitHub <noreply@github.com> 1662061027 +0200\n\nRollup merge of #94467 - ibraheemdev:master, r=pnkfelix\n\nAdd `special_module_name` lint\n\nDeclaring `lib` as a module is one of the most common beginner mistakes when trying to setup a binary and library target in the same crate. `special_module_name` lints against it, as well as `mod main;`\n```\nwarning: found module declaration for main.rs\n  --> $DIR/special_module_name.rs:4:1\n   |\nLL | mod main;\n   | ^^^^^^^^^\n   |\n   = note: a binary crate cannot be used as library\n\nwarning: found module declaration for lib.rs\n  --> $DIR/special_module_name.rs:1:1\n   |\nLL | mod lib;\n   | ^^^^^^^^\n   |\n   = note: `#[warn(special_module_name)]` on by default\n   = note: lib.rs is the root of this crate's library target\n   = help: to refer to it from other targets, use the library's name as the path\n   ```\n\nNote that the help message is not the best in that it doesn't provide an example of an import path (`the_actual_crate_name::`), and doesn't check whether the current file is part of a library/binary target to provide more specific error messages. I'm not sure where this lint would have to be run to access that information.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da1d7386014bd5dbe045d9f4f80921c3882719bc", "html_url": "https://github.com/rust-lang/rust/commit/da1d7386014bd5dbe045d9f4f80921c3882719bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da1d7386014bd5dbe045d9f4f80921c3882719bc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9af618b62e91b45d61f41548f24ba60b834e362b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9af618b62e91b45d61f41548f24ba60b834e362b", "html_url": "https://github.com/rust-lang/rust/commit/9af618b62e91b45d61f41548f24ba60b834e362b"}, {"sha": "4fdf43f23fbd4fb69960c9136dc796d8e64be785", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fdf43f23fbd4fb69960c9136dc796d8e64be785", "html_url": "https://github.com/rust-lang/rust/commit/4fdf43f23fbd4fb69960c9136dc796d8e64be785"}], "stats": {"total": 135, "additions": 135, "deletions": 0}, "files": [{"sha": "4e9c209a58400aa176d13cf336cf7c01e1cc4a86", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/da1d7386014bd5dbe045d9f4f80921c3882719bc/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da1d7386014bd5dbe045d9f4f80921c3882719bc/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=da1d7386014bd5dbe045d9f4f80921c3882719bc", "patch": "@@ -3172,3 +3172,81 @@ impl<'tcx> LateLintPass<'tcx> for NamedAsmLabels {\n         }\n     }\n }\n+\n+declare_lint! {\n+    /// The `special_module_name` lint detects module\n+    /// declarations for files that have a special meaning.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// mod lib;\n+    ///\n+    /// fn main() {\n+    ///     lib::run();\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Cargo recognizes `lib.rs` and `main.rs` as the root of a\n+    /// library or binary crate, so declaring them as modules\n+    /// will lead to miscompilation of the crate unless configured\n+    /// explicitly.\n+    ///\n+    /// To access a library from a binary target within the same crate,\n+    /// use `your_crate_name::` as the path path instead of `lib::`:\n+    ///\n+    /// ```rust,compile_fail\n+    /// // bar/src/lib.rs\n+    /// fn run() {\n+    ///     // ...\n+    /// }\n+    ///\n+    /// // bar/src/main.rs\n+    /// fn main() {\n+    ///     bar::run();\n+    /// }\n+    /// ```\n+    ///\n+    /// Binary targets cannot be used as libraries and so declaring\n+    /// one as a module is not allowed.\n+    pub SPECIAL_MODULE_NAME,\n+    Warn,\n+    \"module declarations for files with a special meaning\",\n+}\n+\n+declare_lint_pass!(SpecialModuleName => [SPECIAL_MODULE_NAME]);\n+\n+impl EarlyLintPass for SpecialModuleName {\n+    fn check_crate(&mut self, cx: &EarlyContext<'_>, krate: &ast::Crate) {\n+        for item in &krate.items {\n+            if let ast::ItemKind::Mod(\n+                _,\n+                ast::ModKind::Unloaded | ast::ModKind::Loaded(_, ast::Inline::No, _),\n+            ) = item.kind\n+            {\n+                if item.attrs.iter().any(|a| a.has_name(sym::path)) {\n+                    continue;\n+                }\n+\n+                match item.ident.name.as_str() {\n+                    \"lib\" => cx.struct_span_lint(SPECIAL_MODULE_NAME, item.span, |lint| {\n+                        lint.build(\"found module declaration for lib.rs\")\n+                            .note(\"lib.rs is the root of this crate's library target\")\n+                            .help(\"to refer to it from other targets, use the library's name as the path\")\n+                            .emit()\n+                    }),\n+                    \"main\" => cx.struct_span_lint(SPECIAL_MODULE_NAME, item.span, |lint| {\n+                        lint.build(\"found module declaration for main.rs\")\n+                            .note(\"a binary crate cannot be used as library\")\n+                            .emit()\n+                    }),\n+                    _ => continue\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "3478be1ed5d92c4c5bc4e1c9830b777e3ae65200", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da1d7386014bd5dbe045d9f4f80921c3882719bc/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da1d7386014bd5dbe045d9f4f80921c3882719bc/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=da1d7386014bd5dbe045d9f4f80921c3882719bc", "patch": "@@ -133,6 +133,7 @@ macro_rules! early_lint_passes {\n                 UnusedBraces: UnusedBraces,\n                 UnusedImportBraces: UnusedImportBraces,\n                 UnsafeCode: UnsafeCode,\n+                SpecialModuleName: SpecialModuleName,\n                 AnonymousParameters: AnonymousParameters,\n                 EllipsisInclusiveRangePatterns: EllipsisInclusiveRangePatterns::default(),\n                 NonCamelCaseTypes: NonCamelCaseTypes,"}, {"sha": "ef805c1f0203149dd8b7239d099991986638ca75", "filename": "src/test/ui/modules/auxiliary/dummy_lib.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da1d7386014bd5dbe045d9f4f80921c3882719bc/src%2Ftest%2Fui%2Fmodules%2Fauxiliary%2Fdummy_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da1d7386014bd5dbe045d9f4f80921c3882719bc/src%2Ftest%2Fui%2Fmodules%2Fauxiliary%2Fdummy_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fauxiliary%2Fdummy_lib.rs?ref=da1d7386014bd5dbe045d9f4f80921c3882719bc", "patch": "@@ -0,0 +1,2 @@\n+#[allow(dead_code)]\n+pub struct Dummy;"}, {"sha": "15c59b2da828ca33dd668274da54d1b1fd04ad07", "filename": "src/test/ui/modules/special_module_name.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da1d7386014bd5dbe045d9f4f80921c3882719bc/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da1d7386014bd5dbe045d9f4f80921c3882719bc/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name.rs?ref=da1d7386014bd5dbe045d9f4f80921c3882719bc", "patch": "@@ -0,0 +1,8 @@\n+mod lib;\n+//~^ WARN found module declaration for lib.rs\n+//~| ERROR file not found for module `lib`\n+mod main;\n+//~^ WARN found module declaration for main.rs\n+//~| ERROR file not found for module `main`\n+\n+fn main() {}"}, {"sha": "8b3da29386df2b7b0aba84e98dfcb2d809581773", "filename": "src/test/ui/modules/special_module_name.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/da1d7386014bd5dbe045d9f4f80921c3882719bc/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da1d7386014bd5dbe045d9f4f80921c3882719bc/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name.stderr?ref=da1d7386014bd5dbe045d9f4f80921c3882719bc", "patch": "@@ -0,0 +1,37 @@\n+error[E0583]: file not found for module `lib`\n+  --> $DIR/special_module_name.rs:1:1\n+   |\n+LL | mod lib;\n+   | ^^^^^^^^\n+   |\n+   = help: to create the module `lib`, create file \"$DIR/lib.rs\" or \"$DIR/lib/mod.rs\"\n+\n+error[E0583]: file not found for module `main`\n+  --> $DIR/special_module_name.rs:4:1\n+   |\n+LL | mod main;\n+   | ^^^^^^^^^\n+   |\n+   = help: to create the module `main`, create file \"$DIR/main.rs\" or \"$DIR/main/mod.rs\"\n+\n+warning: found module declaration for lib.rs\n+  --> $DIR/special_module_name.rs:1:1\n+   |\n+LL | mod lib;\n+   | ^^^^^^^^\n+   |\n+   = note: `#[warn(special_module_name)]` on by default\n+   = note: lib.rs is the root of this crate's library target\n+   = help: to refer to it from other targets, use the library's name as the path\n+\n+warning: found module declaration for main.rs\n+  --> $DIR/special_module_name.rs:4:1\n+   |\n+LL | mod main;\n+   | ^^^^^^^^^\n+   |\n+   = note: a binary crate cannot be used as library\n+\n+error: aborting due to 2 previous errors; 2 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0583`."}, {"sha": "07cea9b2b05a18db30ee926f7bfa5349b1fb0c86", "filename": "src/test/ui/modules/special_module_name_ignore.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da1d7386014bd5dbe045d9f4f80921c3882719bc/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da1d7386014bd5dbe045d9f4f80921c3882719bc/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fspecial_module_name_ignore.rs?ref=da1d7386014bd5dbe045d9f4f80921c3882719bc", "patch": "@@ -0,0 +1,9 @@\n+// run-pass\n+\n+#[path = \"auxiliary/dummy_lib.rs\"]\n+mod lib;\n+\n+#[path = \"auxiliary/dummy_lib.rs\"]\n+mod main;\n+\n+fn main() {}"}]}