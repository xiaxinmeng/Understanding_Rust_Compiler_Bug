{"sha": "9b4a630baaba9bc36bce91d0721886f38ad1b182", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNGE2MzBiYWFiYTliYzM2YmNlOTFkMDcyMTg4NmYzOGFkMWIxODI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-12T00:00:06Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-12T00:00:06Z"}, "message": "syntax::parse::parser: convert unnecessary '&mut self's to '&self'.", "tree": {"sha": "00bd32d2629f6c40b582d1a89a41186524fbf08a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00bd32d2629f6c40b582d1a89a41186524fbf08a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b4a630baaba9bc36bce91d0721886f38ad1b182", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b4a630baaba9bc36bce91d0721886f38ad1b182", "html_url": "https://github.com/rust-lang/rust/commit/9b4a630baaba9bc36bce91d0721886f38ad1b182", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b4a630baaba9bc36bce91d0721886f38ad1b182/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0535e42678d45084e2cff03dbd63f5168731564c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0535e42678d45084e2cff03dbd63f5168731564c", "html_url": "https://github.com/rust-lang/rust/commit/0535e42678d45084e2cff03dbd63f5168731564c"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "36ee1949ad587e65a491edd8944900a5d5b023b5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9b4a630baaba9bc36bce91d0721886f38ad1b182/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b4a630baaba9bc36bce91d0721886f38ad1b182/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9b4a630baaba9bc36bce91d0721886f38ad1b182", "patch": "@@ -1877,7 +1877,7 @@ impl<'a> Parser<'a> {\n         Ok(MutTy { ty: t, mutbl: mutbl })\n     }\n \n-    fn is_named_argument(&mut self) -> bool {\n+    fn is_named_argument(&self) -> bool {\n         let offset = match self.token {\n             token::Interpolated(ref nt) => match **nt {\n                 token::NtPat(..) => return self.look_ahead(1, |t| t == &token::Colon),\n@@ -2471,27 +2471,27 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    fn mk_expr(&mut self, span: Span, node: ExprKind, attrs: ThinVec<Attribute>) -> P<Expr> {\n+    fn mk_expr(&self, span: Span, node: ExprKind, attrs: ThinVec<Attribute>) -> P<Expr> {\n         P(Expr { node, span, attrs, id: ast::DUMMY_NODE_ID })\n     }\n \n-    fn mk_unary(&mut self, unop: ast::UnOp, expr: P<Expr>) -> ast::ExprKind {\n+    fn mk_unary(&self, unop: ast::UnOp, expr: P<Expr>) -> ast::ExprKind {\n         ExprKind::Unary(unop, expr)\n     }\n \n-    fn mk_binary(&mut self, binop: ast::BinOp, lhs: P<Expr>, rhs: P<Expr>) -> ast::ExprKind {\n+    fn mk_binary(&self, binop: ast::BinOp, lhs: P<Expr>, rhs: P<Expr>) -> ast::ExprKind {\n         ExprKind::Binary(binop, lhs, rhs)\n     }\n \n-    fn mk_call(&mut self, f: P<Expr>, args: Vec<P<Expr>>) -> ast::ExprKind {\n+    fn mk_call(&self, f: P<Expr>, args: Vec<P<Expr>>) -> ast::ExprKind {\n         ExprKind::Call(f, args)\n     }\n \n-    fn mk_index(&mut self, expr: P<Expr>, idx: P<Expr>) -> ast::ExprKind {\n+    fn mk_index(&self, expr: P<Expr>, idx: P<Expr>) -> ast::ExprKind {\n         ExprKind::Index(expr, idx)\n     }\n \n-    fn mk_range(&mut self,\n+    fn mk_range(&self,\n                     start: Option<P<Expr>>,\n                     end: Option<P<Expr>>,\n                     limits: RangeLimits)\n@@ -2503,7 +2503,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn mk_assign_op(&mut self, binop: ast::BinOp,\n+    fn mk_assign_op(&self, binop: ast::BinOp,\n                         lhs: P<Expr>, rhs: P<Expr>) -> ast::ExprKind {\n         ExprKind::AssignOp(binop, lhs, rhs)\n     }\n@@ -3840,7 +3840,7 @@ impl<'a> Parser<'a> {\n     /// Produce an error if comparison operators are chained (RFC #558).\n     /// We only need to check lhs, not rhs, because all comparison ops\n     /// have same precedence and are left-associative\n-    fn check_no_chained_comparison(&mut self, lhs: &Expr, outer_op: &AssocOp) {\n+    fn check_no_chained_comparison(&self, lhs: &Expr, outer_op: &AssocOp) {\n         debug_assert!(outer_op.is_comparison(),\n                       \"check_no_chained_comparison: {:?} is not comparison\",\n                       outer_op);\n@@ -5137,7 +5137,7 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    fn is_async_block(&mut self) -> bool {\n+    fn is_async_block(&self) -> bool {\n         self.token.is_keyword(keywords::Async) &&\n         (\n             ( // `async move {`\n@@ -5149,19 +5149,19 @@ impl<'a> Parser<'a> {\n         )\n     }\n \n-    fn is_async_fn(&mut self) -> bool {\n+    fn is_async_fn(&self) -> bool {\n         self.token.is_keyword(keywords::Async) &&\n             self.look_ahead(1, |t| t.is_keyword(keywords::Fn))\n     }\n \n-    fn is_do_catch_block(&mut self) -> bool {\n+    fn is_do_catch_block(&self) -> bool {\n         self.token.is_keyword(keywords::Do) &&\n         self.look_ahead(1, |t| t.is_keyword(keywords::Catch)) &&\n         self.look_ahead(2, |t| *t == token::OpenDelim(token::Brace)) &&\n         !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL)\n     }\n \n-    fn is_try_block(&mut self) -> bool {\n+    fn is_try_block(&self) -> bool {\n         self.token.is_keyword(keywords::Try) &&\n         self.look_ahead(1, |t| *t == token::OpenDelim(token::Brace)) &&\n         self.span.rust_2018() &&\n@@ -5183,7 +5183,7 @@ impl<'a> Parser<'a> {\n         self.look_ahead(1, |t| t.is_keyword(keywords::Type))\n     }\n \n-    fn is_auto_trait_item(&mut self) -> bool {\n+    fn is_auto_trait_item(&self) -> bool {\n         // auto trait\n         (self.token.is_keyword(keywords::Auto)\n             && self.look_ahead(1, |t| t.is_keyword(keywords::Trait)))\n@@ -5445,7 +5445,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Checks if this expression is a successfully parsed statement.\n-    fn expr_is_complete(&mut self, e: &Expr) -> bool {\n+    fn expr_is_complete(&self, e: &Expr) -> bool {\n         self.restrictions.contains(Restrictions::STMT_EXPR) &&\n             !classify::expr_requires_semi_to_be_stmt(e)\n     }\n@@ -6517,7 +6517,7 @@ impl<'a> Parser<'a> {\n         Ok((id, generics))\n     }\n \n-    fn mk_item(&mut self, span: Span, ident: Ident, node: ItemKind, vis: Visibility,\n+    fn mk_item(&self, span: Span, ident: Ident, node: ItemKind, vis: Visibility,\n                attrs: Vec<Attribute>) -> P<Item> {\n         P(Item {\n             ident,\n@@ -6549,7 +6549,7 @@ impl<'a> Parser<'a> {\n \n     /// Returns `true` if we are looking at `const ID`\n     /// (returns `false` for things like `const fn`, etc.).\n-    fn is_const_item(&mut self) -> bool {\n+    fn is_const_item(&self) -> bool {\n         self.token.is_keyword(keywords::Const) &&\n             !self.look_ahead(1, |t| t.is_keyword(keywords::Fn)) &&\n             !self.look_ahead(1, |t| t.is_keyword(keywords::Unsafe))\n@@ -6657,7 +6657,7 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    fn complain_if_pub_macro(&mut self, vis: &VisibilityKind, sp: Span) {\n+    fn complain_if_pub_macro(&self, vis: &VisibilityKind, sp: Span) {\n         match *vis {\n             VisibilityKind::Inherited => {}\n             _ => {\n@@ -6686,7 +6686,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn missing_assoc_item_kind_err(&mut self, item_type: &str, prev_span: Span)\n+    fn missing_assoc_item_kind_err(&self, item_type: &str, prev_span: Span)\n                                    -> DiagnosticBuilder<'a>\n     {\n         let expected_kinds = if item_type == \"extern\" {"}]}