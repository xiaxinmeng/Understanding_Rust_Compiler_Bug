{"sha": "0d27eb13415d442a4f643c8cf4c0d839c0460744", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMjdlYjEzNDE1ZDQ0MmE0ZjY0M2M4Y2Y0YzBkODM5YzA0NjA3NDQ=", "commit": {"author": {"name": "Rafael Avila de Espindola", "email": "espindola@dream.(none)", "date": "2011-02-10T23:39:55Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-11T00:22:08Z"}, "message": "Add type checking for native types.", "tree": {"sha": "82b085a364409e53b07c8a58f342336d96c5c486", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82b085a364409e53b07c8a58f342336d96c5c486"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d27eb13415d442a4f643c8cf4c0d839c0460744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d27eb13415d442a4f643c8cf4c0d839c0460744", "html_url": "https://github.com/rust-lang/rust/commit/0d27eb13415d442a4f643c8cf4c0d839c0460744", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d27eb13415d442a4f643c8cf4c0d839c0460744/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b669008a8bcfcf0d1ed41cecd243e59cded4ded", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b669008a8bcfcf0d1ed41cecd243e59cded4ded", "html_url": "https://github.com/rust-lang/rust/commit/2b669008a8bcfcf0d1ed41cecd243e59cded4ded"}], "stats": {"total": 160, "additions": 126, "deletions": 34}, "files": [{"sha": "6dd229fbbb6cca7f61502687790d2af2532cf18a", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d27eb13415d442a4f643c8cf4c0d839c0460744/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d27eb13415d442a4f643c8cf4c0d839c0460744/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=0d27eb13415d442a4f643c8cf4c0d839c0460744", "patch": "@@ -43,6 +43,7 @@ tag sty {\n     ty_local(ast.def_id);                           // type of a local var\n     ty_param(ast.def_id);                           // fn type param\n     ty_type;\n+    ty_native;\n     // TODO: ty_fn_arg(@t), for a possibly-aliased function argument\n }\n \n@@ -286,6 +287,7 @@ fn fold_ty(ty_fold fld, @t ty) -> @t {\n         case (ty_str)           { ret fld.fold_simple_ty(ty); }\n         case (ty_tag(_))        { ret fld.fold_simple_ty(ty); }\n         case (ty_type)          { ret fld.fold_simple_ty(ty); }\n+        case (ty_native)        { ret fld.fold_simple_ty(ty); }\n         case (ty_box(?subty)) {\n             ret rewrap(ty, ty_box(fold_ty(fld, subty)));\n         }"}, {"sha": "d21d4ed2a08ea2440f1966d573d7157084038c27", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 124, "deletions": 34, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/0d27eb13415d442a4f643c8cf4c0d839c0460744/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d27eb13415d442a4f643c8cf4c0d839c0460744/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=0d27eb13415d442a4f643c8cf4c0d839c0460744", "patch": "@@ -31,7 +31,13 @@ import std.option.none;\n import std.option.some;\n \n type ty_table = hashmap[ast.def_id, @ty.t];\n-type ty_item_table = hashmap[ast.def_id,@ast.item];\n+\n+tag any_item {\n+    any_item_rust(@ast.item);\n+    any_item_native(@ast.native_item);\n+}\n+\n+type ty_item_table = hashmap[ast.def_id,any_item];\n \n type crate_ctxt = rec(session.session sess,\n                       @ty_table item_types,\n@@ -161,6 +167,9 @@ fn ast_ty_to_ty(ty_getter getter, &@ast.ty ast_ty) -> @ty.t {\n                 case (ast.def_ty(?id)) {\n                     sty = instantiate(getter, id, path.node.types).struct;\n                 }\n+                case (ast.def_native_ty(?id)) {\n+                    sty = instantiate(getter, id, path.node.types).struct;\n+                }\n                 case (ast.def_obj(?id))     {\n                     sty = instantiate(getter, id, path.node.types).struct;\n                 }\n@@ -196,23 +205,36 @@ fn ast_ty_to_ty(ty_getter getter, &@ast.ty ast_ty) -> @ty.t {\n     ret @rec(struct=sty, mut=mut, cname=cname);\n }\n \n+fn actual_type(@ty.t t, @ast.item item) -> @ty.t {\n+    alt (item.node) {\n+        case (ast.item_obj(_,_,_,_,_)) {\n+            // An obj used as a type name refers to the output type of the\n+            // item (constructor).\n+            ret middle.ty.ty_fn_ret(t);\n+        }\n+        case (_) { }\n+    }\n+\n+    ret t;\n+}\n+\n // A convenience function to use a crate_ctxt to resolve names for\n // ast_ty_to_ty.\n fn ast_ty_to_ty_crate(@crate_ctxt ccx, &@ast.ty ast_ty) -> @ty.t {\n     fn getter(@crate_ctxt ccx, ast.def_id id) -> ty_and_params {\n         check (ccx.item_items.contains_key(id));\n         check (ccx.item_types.contains_key(id));\n-        auto item = ccx.item_items.get(id);\n+        auto it = ccx.item_items.get(id);\n         auto ty = ccx.item_types.get(id);\n-        auto params = ty_params_of_item(item);\n-\n-        alt (item.node) {\n-            case (ast.item_obj(_,_,_,_,_)) {\n-                // An obj used as a type name refers to the output type of the\n-                // item (constructor).\n-                ty = middle.ty.ty_fn_ret(ty);\n+        auto params;\n+        alt (it) {\n+            case (any_item_rust(?item)) {\n+                ty = actual_type(ty, item);\n+                params = ty_params_of_item(item);\n             }\n-            case (_) { }\n+            case (any_item_native(?native_item)) {\n+                params = ty_params_of_native_item(native_item);\n+           }\n         }\n \n         ret rec(params = params, ty = ty);\n@@ -242,6 +264,18 @@ fn ty_params_of_item(@ast.item item) -> vec[ast.ty_param] {\n     }\n }\n \n+fn ty_params_of_native_item(@ast.native_item item) -> vec[ast.ty_param] {\n+    alt (item.node) {\n+        case (ast.native_item_fn(_, _, ?p, _)) {\n+            ret p;\n+        }\n+        case (_) {\n+            let vec[ast.ty_param] r = vec();\n+            ret r;\n+        }\n+    }\n+}\n+\n // Item collection - a pair of bootstrap passes:\n //\n // 1. Collect the IDs of all type items (typedefs) and store them in a table.\n@@ -253,24 +287,40 @@ fn ty_params_of_item(@ast.item item) -> vec[ast.ty_param] {\n // We then annotate the AST with the resulting types and return the annotated\n // AST, along with a table mapping item IDs to their types.\n \n+fn ty_of_fn_decl(@ty_item_table id_to_ty_item,\n+                 @ty_table item_to_ty,\n+                 fn(&@ast.ty ast_ty) -> @ty.t convert,\n+                 fn(&ast.arg a) -> arg ty_of_arg,\n+                 &ast.fn_decl decl,\n+                 ast.def_id def_id) -> @ty.t {\n+    auto input_tys = _vec.map[ast.arg,arg](ty_of_arg, decl.inputs);\n+    auto output_ty = convert(decl.output);\n+    auto t_fn = plain_ty(ty.ty_fn(input_tys, output_ty));\n+    item_to_ty.insert(def_id, t_fn);\n+    ret t_fn;\n+}\n+\n fn collect_item_types(session.session sess, @ast.crate crate)\n     -> tup(@ast.crate, @ty_table, @ty_item_table) {\n \n     fn getter(@ty_item_table id_to_ty_item,\n               @ty_table item_to_ty,\n               ast.def_id id) -> ty_and_params {\n         check (id_to_ty_item.contains_key(id));\n-        auto item = id_to_ty_item.get(id);\n-        auto ty = ty_of_item(id_to_ty_item, item_to_ty, item);\n-        auto params = ty_params_of_item(item);\n-\n-        alt (item.node) {\n-            case (ast.item_obj(_,_,_,_,_)) {\n-                // An obj used as a type name refers to the output type of the\n-                // item (constructor).\n-                ty = middle.ty.ty_fn_ret(ty);\n+        auto it = id_to_ty_item.get(id);\n+        auto ty;\n+        auto params;\n+        alt (it) {\n+            case (any_item_rust(?item)) {\n+                ty = ty_of_item(id_to_ty_item, item_to_ty, item);\n+                ty = actual_type(ty, item);\n+                params = ty_params_of_item(item);\n+            }\n+            case (any_item_native(?native_item)) {\n+                ty = ty_of_native_item(id_to_ty_item, item_to_ty,\n+                                       native_item);\n+                params = ty_params_of_native_item(native_item);\n             }\n-            case (_) { }\n         }\n \n         ret rec(params = params, ty = ty);\n@@ -340,16 +390,9 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n             }\n \n             case (ast.item_fn(?ident, ?fn_info, _, ?def_id, _)) {\n-                // TODO: handle ty-params\n-\n                 auto f = bind ty_of_arg(id_to_ty_item, item_to_ty, _);\n-                auto input_tys = _vec.map[ast.arg,arg](f,\n-                                                       fn_info.decl.inputs);\n-                auto output_ty = convert(fn_info.decl.output);\n-\n-                auto t_fn = plain_ty(ty.ty_fn(input_tys, output_ty));\n-                item_to_ty.insert(def_id, t_fn);\n-                ret t_fn;\n+                ret ty_of_fn_decl(id_to_ty_item, item_to_ty, convert, f,\n+                                  fn_info.decl, def_id);\n             }\n \n             case (ast.item_obj(?ident, ?obj_info, _, ?def_id, _)) {\n@@ -385,6 +428,30 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n         }\n     }\n \n+    fn ty_of_native_item(@ty_item_table id_to_ty_item,\n+                         @ty_table item_to_ty,\n+                         @ast.native_item it) -> @ty.t {\n+        alt (it.node) {\n+            case (ast.native_item_fn(?ident, ?fn_decl, ?params, ?def_id)) {\n+                auto get = bind getter(id_to_ty_item, item_to_ty, _);\n+                auto convert = bind ast_ty_to_ty(get, _);\n+                auto f = bind ty_of_arg(id_to_ty_item, item_to_ty, _);\n+                ret ty_of_fn_decl(id_to_ty_item, item_to_ty, convert, f,\n+                                  fn_decl, def_id);\n+            }\n+            case (ast.native_item_ty(_, ?def_id)) {\n+                if (item_to_ty.contains_key(def_id)) {\n+                    // Avoid repeating work.\n+                    ret item_to_ty.get(def_id);\n+                }\n+                auto x =\n+                    @rec(struct=ty.ty_native, mut=ast.imm, cname=none[str]);\n+                item_to_ty.insert(def_id, x);\n+                ret x;\n+            }\n+        }\n+    }\n+\n     fn get_tag_variant_types(@ty_item_table id_to_ty_item,\n                              @ty_table item_to_ty,\n                              &ast.def_id tag_id,\n@@ -422,25 +489,38 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n \n     // First pass: collect all type item IDs.\n     auto module = crate.node.module;\n-    auto id_to_ty_item = @common.new_def_hash[@ast.item]();\n+    auto id_to_ty_item = @common.new_def_hash[any_item]();\n     fn collect(&@ty_item_table id_to_ty_item, @ast.item i)\n         -> @ty_item_table {\n         alt (i.node) {\n             case (ast.item_ty(_, _, _, ?def_id, _)) {\n-                id_to_ty_item.insert(def_id, i);\n+                id_to_ty_item.insert(def_id, any_item_rust(i));\n             }\n             case (ast.item_tag(_, _, _, ?def_id)) {\n-                id_to_ty_item.insert(def_id, i);\n+                id_to_ty_item.insert(def_id, any_item_rust(i));\n             }\n             case (ast.item_obj(_, _, _, ?def_id, _)) {\n-                id_to_ty_item.insert(def_id, i);\n+                id_to_ty_item.insert(def_id, any_item_rust(i));\n             }\n             case (_) { /* empty */ }\n         }\n         ret id_to_ty_item;\n     }\n+    fn collect_native(&@ty_item_table id_to_ty_item, @ast.native_item i)\n+        -> @ty_item_table {\n+        alt (i.node) {\n+            case (ast.native_item_ty(_, ?def_id)) {\n+                id_to_ty_item.insert(def_id, any_item_native(i));\n+            }\n+            case (ast.native_item_fn(_, _, _, ?def_id)) {\n+                id_to_ty_item.insert(def_id, any_item_native(i));\n+            }\n+        }\n+        ret id_to_ty_item;\n+    }\n     auto fld_1 = fold.new_identity_fold[@ty_item_table]();\n-    fld_1 = @rec(update_env_for_item = bind collect(_, _)\n+    fld_1 = @rec(update_env_for_item = bind collect(_, _),\n+                 update_env_for_native_item = bind collect_native(_, _)\n                  with *fld_1);\n     fold.fold_crate[@ty_item_table](id_to_ty_item, fld_1, crate);\n \n@@ -473,6 +553,11 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n         ret e;\n     }\n \n+    fn convert_native(&@env e, @ast.native_item i) -> @env {\n+        ty_of_native_item(e.id_to_ty_item, e.item_to_ty, i);\n+        ret e;\n+    }\n+\n     fn fold_item_const(&@env e, &span sp, ast.ident i,\n                        @ast.ty t, @ast.expr ex,\n                        ast.def_id id, ast.ann a) -> @ast.item {\n@@ -575,6 +660,7 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n     auto fld_2 = fold.new_identity_fold[@env]();\n     fld_2 =\n         @rec(update_env_for_item = bind convert(_,_),\n+             update_env_for_native_item = bind convert_native(_,_),\n              fold_item_const = bind fold_item_const(_,_,_,_,_,_,_),\n              fold_item_fn    = bind fold_item_fn(_,_,_,_,_,_,_),\n              fold_item_obj   = bind fold_item_obj(_,_,_,_,_,_,_),\n@@ -1150,6 +1236,10 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n                     check (fcx.ccx.item_types.contains_key(id));\n                     t = generalize_ty(fcx.ccx, fcx.ccx.item_types.get(id));\n                 }\n+                case (ast.def_native_fn(?id)) {\n+                    check (fcx.ccx.item_types.contains_key(id));\n+                    t = generalize_ty(fcx.ccx, fcx.ccx.item_types.get(id));\n+                }\n                 case (ast.def_const(?id)) {\n                     check (fcx.ccx.item_types.contains_key(id));\n                     t = fcx.ccx.item_types.get(id);"}]}