{"sha": "8499c77cee3b745dfde576d1dbd03f292ab3c00f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0OTljNzdjZWUzYjc0NWRmZGU1NzZkMWRiZDAzZjI5MmFiM2MwMGY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-05T19:38:53Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-05T19:43:44Z"}, "message": "Parse attributes for native items. Closes #609", "tree": {"sha": "6e196eedfa412f629cb2d78b8b3eb26005dce900", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e196eedfa412f629cb2d78b8b3eb26005dce900"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8499c77cee3b745dfde576d1dbd03f292ab3c00f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8499c77cee3b745dfde576d1dbd03f292ab3c00f", "html_url": "https://github.com/rust-lang/rust/commit/8499c77cee3b745dfde576d1dbd03f292ab3c00f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8499c77cee3b745dfde576d1dbd03f292ab3c00f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10a4737d34e4b5112daaa80455ac671b87006c6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/10a4737d34e4b5112daaa80455ac671b87006c6b", "html_url": "https://github.com/rust-lang/rust/commit/10a4737d34e4b5112daaa80455ac671b87006c6b"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "7d1bb124c4e534a70cfa0897208ee30e5ad0693e", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8499c77cee3b745dfde576d1dbd03f292ab3c00f/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8499c77cee3b745dfde576d1dbd03f292ab3c00f/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=8499c77cee3b745dfde576d1dbd03f292ab3c00f", "patch": "@@ -542,6 +542,7 @@ tag item_ {\n }\n \n type native_item = rec(ident ident,\n+                       vec[attribute] attrs,\n                        native_item_ node,\n                        node_id id,\n                        span span);"}, {"sha": "f36eeddeeb673ddfe77c5c9bef132a6ad2045176", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8499c77cee3b745dfde576d1dbd03f292ab3c00f/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8499c77cee3b745dfde576d1dbd03f292ab3c00f/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=8499c77cee3b745dfde576d1dbd03f292ab3c00f", "patch": "@@ -161,8 +161,11 @@ fn noop_fold_view_item(&view_item_ vi, ast_fold fld) -> view_item_ {\n \n fn noop_fold_native_item(&@native_item ni, ast_fold fld) -> @native_item {\n     auto fold_arg = bind fold_arg_(_, fld);\n+    auto fold_meta_item = bind fold_meta_item_(_,fld);\n+    auto fold_attribute = bind fold_attribute_(_,fold_meta_item);\n \n     ret @rec(ident=fld.fold_ident(ni.ident),\n+             attrs=map(fold_attribute, ni.attrs),\n              node=alt (ni.node) {\n                  case (native_item_ty) { native_item_ty }\n                  case (native_item_fn(?st, ?fdec, ?typms)) {"}, {"sha": "e852fdcb0af926c6e51b00252ffbb3137f3325a8", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8499c77cee3b745dfde576d1dbd03f292ab3c00f/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8499c77cee3b745dfde576d1dbd03f292ab3c00f/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=8499c77cee3b745dfde576d1dbd03f292ab3c00f", "patch": "@@ -1870,17 +1870,20 @@ fn parse_item_mod(&parser p, vec[ast::attribute] attrs) -> @ast::item {\n     ret mk_item(p, lo, hi, id, ast::item_mod(m), attrs + inner_attrs._0);\n }\n \n-fn parse_item_native_type(&parser p) -> @ast::native_item {\n+fn parse_item_native_type(&parser p,\n+                          &vec[ast::attribute] attrs) -> @ast::native_item {\n     auto t = parse_type_decl(p);\n     auto hi = p.get_hi_pos();\n     expect(p, token::SEMI);\n     ret @rec(ident=t._1,\n+             attrs=attrs,\n              node=ast::native_item_ty,\n              id=p.get_id(),\n              span=rec(lo=t._0, hi=hi));\n }\n \n-fn parse_item_native_fn(&parser p) -> @ast::native_item {\n+fn parse_item_native_fn(&parser p,\n+                        &vec[ast::attribute] attrs) -> @ast::native_item {\n     auto lo = p.get_last_lo_pos();\n     auto t = parse_fn_header(p);\n     auto decl = parse_fn_decl(p, ast::impure_fn);\n@@ -1892,25 +1895,38 @@ fn parse_item_native_fn(&parser p) -> @ast::native_item {\n     auto hi = p.get_hi_pos();\n     expect(p, token::SEMI);\n     ret @rec(ident=t._0,\n+             attrs=attrs,\n              node=ast::native_item_fn(link_name, decl, t._1),\n              id=p.get_id(),\n              span=rec(lo=lo, hi=hi));\n }\n \n-fn parse_native_item(&parser p) -> @ast::native_item {\n+fn parse_native_item(&parser p,\n+                     &vec[ast::attribute] attrs) -> @ast::native_item {\n     parse_layer(p);\n     if (eat_word(p, \"type\")) {\n-        ret parse_item_native_type(p);\n+        ret parse_item_native_type(p, attrs);\n     } else if (eat_word(p, \"fn\")) {\n-        ret parse_item_native_fn(p);\n+        ret parse_item_native_fn(p, attrs);\n     } else { unexpected(p, p.peek()); fail; }\n }\n \n-fn parse_native_mod_items(&parser p, &str native_name, ast::native_abi abi) ->\n+fn parse_native_mod_items(&parser p, &str native_name, ast::native_abi abi,\n+                          &vec[ast::attribute] first_item_attrs) ->\n    ast::native_mod {\n+    auto view_items = if (vec::len(first_item_attrs) == 0u) {\n+        parse_native_view(p)\n+    } else {\n+        // Shouldn't be any view items since we've already parsed an item attr\n+        []\n+    };\n     let vec[@ast::native_item] items = [];\n-    auto view_items = parse_native_view(p);\n-    while (p.peek() != token::RBRACE) { items += [parse_native_item(p)]; }\n+    auto initial_attrs = first_item_attrs;\n+    while (p.peek() != token::RBRACE) {\n+        auto attrs = initial_attrs + parse_outer_attributes(p);\n+        initial_attrs = [];\n+        items += [parse_native_item(p, attrs)];\n+    }\n     ret rec(native_name=native_name,\n             abi=abi,\n             view_items=view_items,\n@@ -1941,10 +1957,14 @@ fn parse_item_native_mod(&parser p, vec[ast::attribute] attrs) -> @ast::item {\n         native_name = id;\n     }\n     expect(p, token::LBRACE);\n-    auto m = parse_native_mod_items(p, native_name, abi);\n+    auto more_attrs = parse_inner_attrs_and_next(p);\n+    auto inner_attrs = more_attrs._0;\n+    auto first_item_outer_attrs = more_attrs._1;\n+    auto m = parse_native_mod_items(p, native_name, abi,\n+                                    first_item_outer_attrs);\n     auto hi = p.get_hi_pos();\n     expect(p, token::RBRACE);\n-    ret mk_item(p, lo, hi, id, ast::item_native_mod(m), attrs);\n+    ret mk_item(p, lo, hi, id, ast::item_native_mod(m), attrs + inner_attrs);\n }\n \n fn parse_type_decl(&parser p) -> tup(uint, ast::ident) {"}, {"sha": "d4806cccbb33bf96dbcf4773d718b18d06146d25", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8499c77cee3b745dfde576d1dbd03f292ab3c00f/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8499c77cee3b745dfde576d1dbd03f292ab3c00f/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=8499c77cee3b745dfde576d1dbd03f292ab3c00f", "patch": "@@ -383,8 +383,10 @@ fn print_item(&ps s, &@ast::item item) {\n             word_nbsp(s, \"mod\");\n             word_nbsp(s, item.ident);\n             bopen(s);\n+            print_inner_attributes(s, item.attrs);\n             for (@ast::native_item item in nmod.items) {\n                 hardbreak_if_not_bol(s);\n+                print_outer_attributes(s, item.attrs);\n                 ibox(s, indent_unit);\n                 maybe_print_comment(s, item.span.lo);\n                 alt (item.node) {"}, {"sha": "c66a41e8d0be7e5205c2bdf90533f2b1418c5c0e", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8499c77cee3b745dfde576d1dbd03f292ab3c00f/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8499c77cee3b745dfde576d1dbd03f292ab3c00f/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=8499c77cee3b745dfde576d1dbd03f292ab3c00f", "patch": "@@ -192,6 +192,18 @@ mod test_other_forms {\n     }\n }\n \n+mod test_native_items {\n+    native \"rust\" mod rustrt {\n+        #[attr];\n+\n+        #[attr]\n+        type vbuf;\n+\n+        #[attr]\n+        fn vec_len[T](vec[T] v) -> uint;\n+    }\n+}\n+\n fn main() {\n }\n "}]}