{"sha": "0b7af2668a80fb2fa720a06ca44aff4dd1e9de38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiN2FmMjY2OGE4MGZiMmZhNzIwYTA2Y2E0NGFmZjRkZDFlOWRlMzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-10T20:03:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-10T20:03:03Z"}, "message": "Auto merge of #58129 - RalfJung:maybe-uninit, r=cramertj\n\nMaybeUninit: some docs, rename into_inner -> into_initialized, return &mut from set", "tree": {"sha": "41114c4ae8ddaf8f0d7ac4bbd6bce36006310fa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41114c4ae8ddaf8f0d7ac4bbd6bce36006310fa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b7af2668a80fb2fa720a06ca44aff4dd1e9de38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7af2668a80fb2fa720a06ca44aff4dd1e9de38", "html_url": "https://github.com/rust-lang/rust/commit/0b7af2668a80fb2fa720a06ca44aff4dd1e9de38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b7af2668a80fb2fa720a06ca44aff4dd1e9de38/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3d2490433aa675b850d54cac3beed0977074637", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3d2490433aa675b850d54cac3beed0977074637", "html_url": "https://github.com/rust-lang/rust/commit/c3d2490433aa675b850d54cac3beed0977074637"}, {"sha": "4833074a9a47c12bcfeee4435bf981981ede689c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4833074a9a47c12bcfeee4435bf981981ede689c", "html_url": "https://github.com/rust-lang/rust/commit/4833074a9a47c12bcfeee4435bf981981ede689c"}], "stats": {"total": 81, "additions": 65, "deletions": 16}, "files": [{"sha": "664490c1997eff19c0dcf520ca8b2209da33fe2f", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b7af2668a80fb2fa720a06ca44aff4dd1e9de38/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7af2668a80fb2fa720a06ca44aff4dd1e9de38/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=0b7af2668a80fb2fa720a06ca44aff4dd1e9de38", "patch": "@@ -555,12 +555,12 @@ macro_rules! unimplemented {\n #[macro_export]\n #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n macro_rules! uninitialized_array {\n-    // This `into_inner` is safe because an array of `MaybeUninit` does not\n+    // This `into_initialized` is safe because an array of `MaybeUninit` does not\n     // require initialization.\n     // FIXME(#49147): Could be replaced by an array initializer, once those can\n     // be any const expression.\n     ($t:ty; $size:expr) => (unsafe {\n-        MaybeUninit::<[MaybeUninit<$t>; $size]>::uninitialized().into_inner()\n+        MaybeUninit::<[MaybeUninit<$t>; $size]>::uninitialized().into_initialized()\n     });\n }\n "}, {"sha": "2f86e13b938166fd719228c3951323028d7b1300", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 53, "deletions": 7, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0b7af2668a80fb2fa720a06ca44aff4dd1e9de38/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7af2668a80fb2fa720a06ca44aff4dd1e9de38/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=0b7af2668a80fb2fa720a06ca44aff4dd1e9de38", "patch": "@@ -1035,7 +1035,42 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n     }\n }\n \n-/// A newtype to construct uninitialized instances of `T`\n+/// A newtype to construct uninitialized instances of `T`.\n+///\n+/// The compiler, in general, assumes that variables are properly initialized\n+/// at their respective type.  For example, a variable of reference type must\n+/// be aligned and non-NULL.  This is an invariant that must *always* be upheld,\n+/// even in unsafe code.  As a consequence, 0-initializing a variable of reference\n+/// type causes instantaneous undefined behavior, no matter whether that reference\n+/// ever gets used to access memory:\n+/// ```rust,no_run\n+/// use std::mem;\n+///\n+/// let x: &i32 = unsafe { mem::zeroed() }; // undefined behavior!\n+/// ```\n+/// This is exploited by the compiler for various optimizations, such as eliding\n+/// run-time checks and optimizing `enum` layout.\n+///\n+/// Not initializing memory at all (instead of 0-initializing it) causes the same\n+/// issue: after all, the initial value of the variable might just happen to be\n+/// one that violates the invariant.\n+///\n+/// `MaybeUninit` serves to enable unsafe code to deal with uninitialized data:\n+/// it is a signal to the compiler indicating that the data here might *not*\n+/// be initialized:\n+/// ```rust\n+/// #![feature(maybe_uninit)]\n+/// use std::mem::MaybeUninit;\n+///\n+/// // Create an explicitly uninitialized reference.\n+/// let mut x = MaybeUninit::<&i32>::uninitialized();\n+/// // Set it to a valid value.\n+/// x.set(&0);\n+/// // Extract the initialized data -- this is only allowed *after* properly\n+/// // initializing `x`!\n+/// let x = unsafe { x.into_initialized() };\n+/// ```\n+/// The compiler then knows to not optimize this code.\n #[allow(missing_debug_implementations)]\n #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n // NOTE after stabilizing `MaybeUninit` proceed to deprecate `mem::{uninitialized,zeroed}`\n@@ -1084,11 +1119,14 @@ impl<T> MaybeUninit<T> {\n     }\n \n     /// Set the value of the `MaybeUninit`. This overwrites any previous value without dropping it.\n+    /// For your convenience, this also returns a mutable reference to the (now\n+    /// safely initialized) content of `self`.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n-    pub fn set(&mut self, val: T) {\n+    pub fn set(&mut self, val: T) -> &mut T {\n         unsafe {\n             self.value = ManuallyDrop::new(val);\n+            self.get_mut()\n         }\n     }\n \n@@ -1102,11 +1140,19 @@ impl<T> MaybeUninit<T> {\n     /// state, otherwise this will immediately cause undefined behavior.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n-    pub unsafe fn into_inner(self) -> T {\n+    pub unsafe fn into_initialized(self) -> T {\n         intrinsics::panic_if_uninhabited::<T>();\n         ManuallyDrop::into_inner(self.value)\n     }\n \n+    /// Deprecated alternative to `into_initialized`.  Will never get stabilized.\n+    /// Exists only to transition stdsimd to `into_initialized`.\n+    #[inline(always)]\n+    #[allow(unused)]\n+    pub(crate) unsafe fn into_inner(self) -> T {\n+        self.into_initialized()\n+    }\n+\n     /// Get a reference to the contained value.\n     ///\n     /// # Unsafety\n@@ -1134,16 +1180,16 @@ impl<T> MaybeUninit<T> {\n         &mut *self.value\n     }\n \n-    /// Get a pointer to the contained value. Reading from this pointer will be undefined\n-    /// behavior unless the `MaybeUninit` is initialized.\n+    /// Get a pointer to the contained value. Reading from this pointer or turning it\n+    /// into a reference will be undefined behavior unless the `MaybeUninit` is initialized.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n     pub fn as_ptr(&self) -> *const T {\n         unsafe { &*self.value as *const T }\n     }\n \n-    /// Get a mutable pointer to the contained value. Reading from this pointer will be undefined\n-    /// behavior unless the `MaybeUninit` is initialized.\n+    /// Get a mutable pointer to the contained value. Reading from this pointer or turning it\n+    /// into a reference will be undefined behavior unless the `MaybeUninit` is initialized.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n     pub fn as_mut_ptr(&mut self) -> *mut T {"}, {"sha": "537aa92c2cf4edc279945238c762998948e15b1e", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b7af2668a80fb2fa720a06ca44aff4dd1e9de38/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7af2668a80fb2fa720a06ca44aff4dd1e9de38/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=0b7af2668a80fb2fa720a06ca44aff4dd1e9de38", "patch": "@@ -573,7 +573,7 @@ pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n pub unsafe fn read<T>(src: *const T) -> T {\n     let mut tmp = MaybeUninit::<T>::uninitialized();\n     copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-    tmp.into_inner()\n+    tmp.into_initialized()\n }\n \n /// Reads the value from `src` without moving it. This leaves the\n@@ -642,7 +642,7 @@ pub unsafe fn read_unaligned<T>(src: *const T) -> T {\n     copy_nonoverlapping(src as *const u8,\n                         tmp.as_mut_ptr() as *mut u8,\n                         mem::size_of::<T>());\n-    tmp.into_inner()\n+    tmp.into_initialized()\n }\n \n /// Overwrites a memory location with the given value without reading or"}, {"sha": "97f7d9181a53906c5a023c07c990fb14eda4d8d8", "filename": "src/libstd/sys/sgx/ext/arch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b7af2668a80fb2fa720a06ca44aff4dd1e9de38/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Farch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7af2668a80fb2fa720a06ca44aff4dd1e9de38/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Farch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fext%2Farch.rs?ref=0b7af2668a80fb2fa720a06ca44aff4dd1e9de38", "patch": "@@ -41,7 +41,7 @@ pub fn egetkey(request: &Align512<[u8; 512]>) -> Result<Align16<[u8; 16]>, u32>\n         );\n \n         match error {\n-            0 => Ok(out.into_inner()),\n+            0 => Ok(out.into_initialized()),\n             err => Err(err),\n         }\n     }\n@@ -69,6 +69,6 @@ pub fn ereport(\n               \"{rdx}\"(report.as_mut_ptr())\n         );\n \n-        report.into_inner()\n+        report.into_initialized()\n     }\n }"}, {"sha": "ad1d259a0da21e3c8607db64ec4156e3db11354c", "filename": "src/test/codegen/box-maybe-uninit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b7af2668a80fb2fa720a06ca44aff4dd1e9de38/src%2Ftest%2Fcodegen%2Fbox-maybe-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7af2668a80fb2fa720a06ca44aff4dd1e9de38/src%2Ftest%2Fcodegen%2Fbox-maybe-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fbox-maybe-uninit.rs?ref=0b7af2668a80fb2fa720a06ca44aff4dd1e9de38", "patch": "@@ -9,5 +9,8 @@ use std::mem::MaybeUninit;\n pub fn box_uninitialized() -> Box<MaybeUninit<usize>> {\n     // CHECK-LABEL: @box_uninitialized\n     // CHECK-NOT: store\n+    // CHECK-NOT: alloca\n+    // CHECK-NOT: memcpy\n+    // CHECK-NOT: memset\n     Box::new(MaybeUninit::uninitialized())\n }"}, {"sha": "31c0d2994d4150584d80a8c6c08c8703c4095c72", "filename": "src/test/run-pass/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b7af2668a80fb2fa720a06ca44aff4dd1e9de38/src%2Ftest%2Frun-pass%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7af2668a80fb2fa720a06ca44aff4dd1e9de38/src%2Ftest%2Frun-pass%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-uninitialized-zeroed.rs?ref=0b7af2668a80fb2fa720a06ca44aff4dd1e9de38", "patch": "@@ -36,7 +36,7 @@ fn main() {\n \n         assert_eq!(\n             panic::catch_unwind(|| {\n-                mem::MaybeUninit::<!>::uninitialized().into_inner()\n+                mem::MaybeUninit::<!>::uninitialized().into_initialized()\n             }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n                 s == \"Attempted to instantiate uninhabited type !\"\n             })),\n@@ -63,7 +63,7 @@ fn main() {\n \n         assert_eq!(\n             panic::catch_unwind(|| {\n-                mem::MaybeUninit::<Foo>::uninitialized().into_inner()\n+                mem::MaybeUninit::<Foo>::uninitialized().into_initialized()\n             }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n                 s == \"Attempted to instantiate uninhabited type Foo\"\n             })),\n@@ -90,7 +90,7 @@ fn main() {\n \n         assert_eq!(\n             panic::catch_unwind(|| {\n-                mem::MaybeUninit::<Bar>::uninitialized().into_inner()\n+                mem::MaybeUninit::<Bar>::uninitialized().into_initialized()\n             }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n                 s == \"Attempted to instantiate uninhabited type Bar\"\n             })),"}]}