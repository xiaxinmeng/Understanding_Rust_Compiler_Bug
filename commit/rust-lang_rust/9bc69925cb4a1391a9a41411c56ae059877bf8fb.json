{"sha": "9bc69925cb4a1391a9a41411c56ae059877bf8fb", "node_id": "C_kwDOAAsO6NoAKDliYzY5OTI1Y2I0YTEzOTFhOWE0MTQxMWM1NmFlMDU5ODc3YmY4ZmI", "commit": {"author": {"name": "KaDiWa", "email": "kalle.wachsmuth@gmail.com", "date": "2022-08-09T00:14:43Z"}, "committer": {"name": "KaDiWa", "email": "kalle.wachsmuth@gmail.com", "date": "2022-12-10T17:45:34Z"}, "message": "compiler: remove unnecessary imports and qualified paths", "tree": {"sha": "1fc65519e8e94f6b36d1fe27e6be25136db3dc22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fc65519e8e94f6b36d1fe27e6be25136db3dc22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bc69925cb4a1391a9a41411c56ae059877bf8fb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEcFQWTVq3UZxSk8EiC1KuORxnTOUFAmOUxb4ACgkQC1KuORxn\nTOWz9A/+OEZNd+0QrbVlcjb4k3pWI3otxdjFGU6zrsWpELmGFTuv83pJms+3v9+k\noFgiO0ugSHbPCzeDqU5BahLM+MSjNvrqp/8ooEjIvfz3bG8C3RcVAI8n7BBdv1lp\nzYUFHaNWifz8hGFWikS7lqyp3S4ZTtZDZg5HjDxQ09HTzfuuS/iZ2sIT7IRwLGCO\nbg7ocPCcqcmnIEfClW98hH/EJmCx/eQGssDBZqx878luk+Yw6DDzFgu6k7ytt/Fa\na6UIqS9ApwRkurOKmMl+fxJfVBQXkKxY3wqQ6JKC8bKGkz+nBai48KBVaeJF3LG8\nG7mvv2sjqk9dRxkWnqwq0hht+UOlN3tUBBhaZ28kCBZkfFaQvbO4A+f3mCIc71Q/\ndB7J0O3nCjWf7Lxz0mf7zLBeEbNpqXHLYpeJIeR2N0r9ITrbLRVK/swQN7hTkz39\nMaKn47+sPs/AFkMy3PZvq7GScWZbBocAmScmZdyWo4tBgTonlBJB8wQrrDv9lpet\nSCscRn37ZV3jwFlxvbYxRXuMlSaztdpQ62jhgjAOkmvWEg0oNK9ECS5dd+cS1b0f\nrYcAj2T5+tUREsCcSYIFzHfA+pcxk5b371v4/X0jONxVyWVy2mIl5WneSx1w8lFh\nnTrxjyF1TJSdEM4IynFdRz5yhNdX4SMRfLCaRzo3ska+DZtPHmI=\n=XKL9\n-----END PGP SIGNATURE-----", "payload": "tree 1fc65519e8e94f6b36d1fe27e6be25136db3dc22\nparent a161a7b654083a881b22908a475988bcc3221a79\nauthor KaDiWa <kalle.wachsmuth@gmail.com> 1660004083 +0200\ncommitter KaDiWa <kalle.wachsmuth@gmail.com> 1670694334 +0100\n\ncompiler: remove unnecessary imports and qualified paths\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bc69925cb4a1391a9a41411c56ae059877bf8fb", "html_url": "https://github.com/rust-lang/rust/commit/9bc69925cb4a1391a9a41411c56ae059877bf8fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bc69925cb4a1391a9a41411c56ae059877bf8fb/comments", "author": {"login": "kadiwa4", "id": 25464294, "node_id": "MDQ6VXNlcjI1NDY0Mjk0", "avatar_url": "https://avatars.githubusercontent.com/u/25464294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kadiwa4", "html_url": "https://github.com/kadiwa4", "followers_url": "https://api.github.com/users/kadiwa4/followers", "following_url": "https://api.github.com/users/kadiwa4/following{/other_user}", "gists_url": "https://api.github.com/users/kadiwa4/gists{/gist_id}", "starred_url": "https://api.github.com/users/kadiwa4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kadiwa4/subscriptions", "organizations_url": "https://api.github.com/users/kadiwa4/orgs", "repos_url": "https://api.github.com/users/kadiwa4/repos", "events_url": "https://api.github.com/users/kadiwa4/events{/privacy}", "received_events_url": "https://api.github.com/users/kadiwa4/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kadiwa4", "id": 25464294, "node_id": "MDQ6VXNlcjI1NDY0Mjk0", "avatar_url": "https://avatars.githubusercontent.com/u/25464294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kadiwa4", "html_url": "https://github.com/kadiwa4", "followers_url": "https://api.github.com/users/kadiwa4/followers", "following_url": "https://api.github.com/users/kadiwa4/following{/other_user}", "gists_url": "https://api.github.com/users/kadiwa4/gists{/gist_id}", "starred_url": "https://api.github.com/users/kadiwa4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kadiwa4/subscriptions", "organizations_url": "https://api.github.com/users/kadiwa4/orgs", "repos_url": "https://api.github.com/users/kadiwa4/repos", "events_url": "https://api.github.com/users/kadiwa4/events{/privacy}", "received_events_url": "https://api.github.com/users/kadiwa4/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a161a7b654083a881b22908a475988bcc3221a79", "url": "https://api.github.com/repos/rust-lang/rust/commits/a161a7b654083a881b22908a475988bcc3221a79", "html_url": "https://github.com/rust-lang/rust/commit/a161a7b654083a881b22908a475988bcc3221a79"}], "stats": {"total": 122, "additions": 24, "deletions": 98}, "files": [{"sha": "4ca59144b29902ebf2377ae220e5c9f8678f9a10", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -1,6 +1,5 @@\n #![cfg_attr(feature = \"nightly\", feature(step_trait, rustc_attrs, min_specialization))]\n \n-use std::convert::{TryFrom, TryInto};\n use std::fmt;\n #[cfg(feature = \"nightly\")]\n use std::iter::Step;"}, {"sha": "2286712f02565974f2623901844c82328e562ff6", "filename": "compiler/rustc_apfloat/src/ieee.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -2,7 +2,6 @@ use crate::{Category, ExpInt, IEK_INF, IEK_NAN, IEK_ZERO};\n use crate::{Float, FloatConvert, ParseError, Round, Status, StatusAnd};\n \n use core::cmp::{self, Ordering};\n-use core::convert::TryFrom;\n use core::fmt::{self, Write};\n use core::marker::PhantomData;\n use core::mem;"}, {"sha": "4fae5ef845f7d95a2cfb947a25daeada6e46cdf7", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -28,7 +28,7 @@ use smallvec::SmallVec;\n use std::alloc::Layout;\n use std::cell::{Cell, RefCell};\n use std::cmp;\n-use std::marker::{PhantomData, Send};\n+use std::marker::PhantomData;\n use std::mem::{self, MaybeUninit};\n use std::ptr::{self, NonNull};\n use std::slice;"}, {"sha": "74a0c13b23f7424b8408403661b28bebbea8a568", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -33,7 +33,6 @@ use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-use std::convert::TryFrom;\n use std::fmt;\n use std::mem;\n use thin_vec::{thin_vec, ThinVec};"}, {"sha": "4b2850336a03db2479ec59804de725eb26ff23ae", "filename": "compiler/rustc_ast/src/ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_ast%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_ast%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fptr.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -22,7 +22,6 @@\n //!   Moreover, a switch to, e.g., `P<'a, T>` would be easy and mostly automated.\n \n use std::fmt::{self, Debug, Display};\n-use std::iter::FromIterator;\n use std::ops::{Deref, DerefMut};\n use std::{slice, vec};\n "}, {"sha": "29a5eb4b7c509260a9034296eec158af8abcb123", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -362,7 +362,7 @@ impl TokenStream {\n     }\n }\n \n-impl iter::FromIterator<TokenTree> for TokenStream {\n+impl FromIterator<TokenTree> for TokenStream {\n     fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {\n         TokenStream::new(iter.into_iter().collect::<Vec<TokenTree>>())\n     }"}, {"sha": "5d7397977e9849f79f1a2ea680ca0cb0c8697a2c", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -456,8 +456,8 @@ pub fn lower_to_hir<'hir>(tcx: TyCtxt<'hir>, (): ()) -> hir::Crate<'hir> {\n     }\n \n     // Drop AST to free memory\n-    std::mem::drop(ast_index);\n-    sess.time(\"drop_ast\", || std::mem::drop(krate));\n+    drop(ast_index);\n+    sess.time(\"drop_ast\", || drop(krate));\n \n     // Discard hygiene data, which isn't required after lowering to HIR.\n     if !sess.opts.unstable_opts.keep_hygiene_data {"}, {"sha": "c9dc6b847cdb525f3458e40277f1adf54a029866", "filename": "compiler/rustc_builtin_macros/src/concat.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -4,8 +4,6 @@ use rustc_expand::base::{self, DummyResult};\n use rustc_session::errors::report_lit_error;\n use rustc_span::symbol::Symbol;\n \n-use std::string::String;\n-\n pub fn expand_concat(\n     cx: &mut base::ExtCtxt<'_>,\n     sp: rustc_span::Span,"}, {"sha": "664697e0edaa406f5018d4a014fe7973730785f8", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -41,7 +41,6 @@ use rustc_span::{DebuggerVisualizerFile, DebuggerVisualizerType};\n use rustc_target::abi::{Align, Size, VariantIdx};\n \n use std::collections::BTreeSet;\n-use std::convert::TryFrom;\n use std::time::{Duration, Instant};\n \n use itertools::Itertools;"}, {"sha": "319f2b2c25ebf320f71c6d0fe83bca042fe3f191", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -1,5 +1,4 @@\n use std::borrow::Cow;\n-use std::convert::TryInto;\n \n use either::{Left, Right};\n "}, {"sha": "b1fdeb01b100abd58f5b0b44c678b07ffc2ebe75", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -1,5 +1,4 @@\n use std::assert_matches::assert_matches;\n-use std::convert::TryFrom;\n \n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::{Float, FloatConvert};"}, {"sha": "b9be7fa48000be54ddef02808aa26b3a100ec2fb", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -2,8 +2,6 @@\n //! looking at their MIR. Intrinsics/functions supported here are shared by CTFE\n //! and miri.\n \n-use std::convert::TryFrom;\n-\n use rustc_hir::def_id::DefId;\n use rustc_middle::mir::{\n     self,"}, {"sha": "77c7b4bacb8c8a96d68b42704478166e754d0772", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -1,5 +1,3 @@\n-use std::convert::TryFrom;\n-\n use rustc_ast::Mutability;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::mir::TerminatorKind;"}, {"sha": "949f95c5fa81c2a8909ac6fd353b8578946b9535", "filename": "compiler/rustc_const_eval/src/interpret/operator.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -1,5 +1,3 @@\n-use std::convert::TryFrom;\n-\n use rustc_apfloat::Float;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{InterpResult, Scalar};"}, {"sha": "e4f716c31945c68aacdfce6490c13a7116824508", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -1,6 +1,5 @@\n use rustc_middle::mir::interpret::InterpResult;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n-use std::convert::TryInto;\n use std::ops::ControlFlow;\n \n /// Checks whether a type contains generic parameters which require substitution."}, {"sha": "fc65306e440a9912ead726d9d4ca871cd5eae3be", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -4,7 +4,6 @@\n //! That's useful because it means other passes (e.g. promotion) can rely on `const`s\n //! to be const-safe.\n \n-use std::convert::TryFrom;\n use std::fmt::{Display, Write};\n use std::num::NonZeroUsize;\n "}, {"sha": "10783c5ed1d1cd7389fd67f5aa72e83f74763108", "filename": "compiler/rustc_const_eval/src/util/aggregate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -3,7 +3,6 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_target::abi::VariantIdx;\n \n-use std::convert::TryFrom;\n use std::iter::TrustedLen;\n \n /// Expand `lhs = Rvalue::Aggregate(kind, operands)` into assignments to the fields."}, {"sha": "b6e866f15efe3c576285798a16b4d9ce9d051afb", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -1,6 +1,5 @@\n use crate::stable_hasher;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n-use std::convert::TryInto;\n use std::hash::{Hash, Hasher};\n \n #[cfg(test)]"}, {"sha": "b31092eca9837bb0a0c5536b1be7e05c188fcbf5", "filename": "compiler/rustc_data_structures/src/graph/scc/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -9,7 +9,6 @@ use crate::fx::FxHashSet;\n use crate::graph::vec_graph::VecGraph;\n use crate::graph::{DirectedGraph, GraphSuccessors, WithNumEdges, WithNumNodes, WithSuccessors};\n use rustc_index::vec::{Idx, IndexVec};\n-use std::cmp::Ord;\n use std::ops::Range;\n \n #[cfg(test)]"}, {"sha": "94232bb7626ec885327699322d6d1357b4a9da40", "filename": "compiler/rustc_data_structures/src/graph/vec_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Fmod.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -1,5 +1,3 @@\n-use std::cmp::Ord;\n-\n use crate::graph::{DirectedGraph, GraphSuccessors, WithNumEdges, WithNumNodes, WithSuccessors};\n use rustc_index::vec::{Idx, IndexVec};\n "}, {"sha": "d1d92b905b82e0b9da4db953f10c263d8bce4838", "filename": "compiler/rustc_data_structures/src/owning_ref/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Fmod.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -867,11 +867,9 @@ where\n /////////////////////////////////////////////////////////////////////////////\n \n use std::borrow::Borrow;\n-use std::cmp::{Eq, Ord, Ordering, PartialEq, PartialOrd};\n-use std::convert::From;\n+use std::cmp::Ordering;\n use std::fmt::{self, Debug};\n use std::hash::{Hash, Hasher};\n-use std::marker::{Send, Sync};\n \n impl<O, T: ?Sized> Deref for OwningRef<O, T> {\n     type Target = T;\n@@ -1096,7 +1094,6 @@ where\n // std types integration and convenience type defs\n /////////////////////////////////////////////////////////////////////////////\n \n-use std::boxed::Box;\n use std::cell::{Ref, RefCell, RefMut};\n use std::rc::Rc;\n use std::sync::Arc;"}, {"sha": "a9b187c4ce0a79f979ae4c562ebe56ab598c40bb", "filename": "compiler/rustc_data_structures/src/owning_ref/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fowning_ref%2Ftests.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -3,7 +3,7 @@\n mod owning_ref {\n     use super::super::OwningRef;\n     use super::super::{BoxRef, Erased, ErasedBoxRef, RcRef};\n-    use std::cmp::{Ord, Ordering, PartialEq, PartialOrd};\n+    use std::cmp::Ordering;\n     use std::collections::hash_map::DefaultHasher;\n     use std::collections::HashMap;\n     use std::hash::{Hash, Hasher};\n@@ -368,7 +368,7 @@ mod owning_handle {\n mod owning_ref_mut {\n     use super::super::BoxRef;\n     use super::super::{BoxRefMut, Erased, ErasedBoxRefMut, OwningRefMut};\n-    use std::cmp::{Ord, Ordering, PartialEq, PartialOrd};\n+    use std::cmp::Ordering;\n     use std::collections::hash_map::DefaultHasher;\n     use std::collections::HashMap;\n     use std::hash::{Hash, Hasher};"}, {"sha": "1d4014f05acdc3e5a208d301ebd534a504fb411c", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -86,7 +86,6 @@ use crate::fx::FxHashMap;\n \n use std::borrow::Borrow;\n use std::collections::hash_map::Entry;\n-use std::convert::Into;\n use std::error::Error;\n use std::fs;\n use std::path::Path;"}, {"sha": "03ff5e5b3751fe502d5c1c3c0265dc9c07c74aa8", "filename": "compiler/rustc_data_structures/src/sorted_map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -1,7 +1,6 @@\n use crate::stable_hasher::{HashStable, StableHasher, StableOrd};\n use std::borrow::Borrow;\n use std::cmp::Ordering;\n-use std::iter::FromIterator;\n use std::mem;\n use std::ops::{Bound, Index, IndexMut, RangeBounds};\n "}, {"sha": "7af5c14942adf8c30ac0c0bc898655b97251a708", "filename": "compiler/rustc_data_structures/src/sorted_map/index_map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -1,7 +1,6 @@\n //! A variant of `SortedMap` that preserves insertion order.\n \n use std::hash::{Hash, Hasher};\n-use std::iter::FromIterator;\n \n use crate::stable_hasher::{HashStable, StableHasher};\n use rustc_index::vec::{Idx, IndexVec};"}, {"sha": "bca6c0955b905f8732fb72b598fc75e62d924152", "filename": "compiler/rustc_data_structures/src/sso/either_iter.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Feither_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Feither_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Feither_iter.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -1,7 +1,5 @@\n use std::fmt;\n-use std::iter::ExactSizeIterator;\n use std::iter::FusedIterator;\n-use std::iter::Iterator;\n \n /// Iterator which may contain instance of\n /// one of two specific implementations."}, {"sha": "7cdac58197714840081099415c7fadd866b76f75", "filename": "compiler/rustc_data_structures/src/sso/map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -3,7 +3,6 @@ use crate::fx::FxHashMap;\n use arrayvec::ArrayVec;\n use std::fmt;\n use std::hash::Hash;\n-use std::iter::FromIterator;\n use std::ops::Index;\n \n // For pointer-sized arguments arrays"}, {"sha": "a4b40138933dedc2cf12c370df798509f1aca3f7", "filename": "compiler/rustc_data_structures/src/sso/set.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -1,6 +1,5 @@\n use std::fmt;\n use std::hash::Hash;\n-use std::iter::FromIterator;\n \n use super::map::SsoHashMap;\n "}, {"sha": "ed5341c40ef08b70ee2fae389ad86b949f80ba8b", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -138,7 +138,7 @@ cfg_if! {\n             }\n         }\n \n-        pub use std::iter::Iterator as ParallelIterator;\n+        pub use Iterator as ParallelIterator;\n \n         pub fn par_iter<T: IntoIterator>(t: T) -> T::IntoIter {\n             t.into_iter()"}, {"sha": "b0315c93d934d7a359266dd89ddfa86268c5d4a4", "filename": "compiler/rustc_data_structures/src/tagged_ptr/drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fdrop.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -76,7 +76,7 @@ where\n     fn drop(&mut self) {\n         // No need to drop the tag, as it's Copy\n         unsafe {\n-            std::mem::drop(P::from_usize(self.raw.pointer_raw()));\n+            drop(P::from_usize(self.raw.pointer_raw()));\n         }\n     }\n }"}, {"sha": "2417df66bb9d8a2b0dd0d4ac09744a0d8dba0cdc", "filename": "compiler/rustc_data_structures/src/vec_map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -1,6 +1,5 @@\n use std::borrow::Borrow;\n use std::fmt::Debug;\n-use std::iter::FromIterator;\n use std::slice::Iter;\n use std::vec::IntoIter;\n "}, {"sha": "711eed2b2723118a11a64ceeb11f01ca651f30da", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -45,7 +45,6 @@ use rustc_target::json::ToJson;\n \n use std::borrow::Cow;\n use std::cmp::max;\n-use std::default::Default;\n use std::env;\n use std::ffi::OsString;\n use std::fs;"}, {"sha": "7c0719dc217d06089d726acca31a965d7a99a69f", "filename": "compiler/rustc_error_codes/src/error_codes/E0492.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0492.md", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0492.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0492.md?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -55,7 +55,6 @@ wrapper:\n \n ```\n use std::cell::Cell;\n-use std::marker::Sync;\n \n struct NotThreadSafe<T> {\n     value: Cell<T>,"}, {"sha": "88b4fffd46f616df7f31c53a78014cd3bda5d0ec", "filename": "compiler/rustc_errors/src/diagnostic_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -59,7 +59,7 @@ into_diagnostic_arg_using_display!(\n     i128,\n     u128,\n     std::io::Error,\n-    std::boxed::Box<dyn std::error::Error>,\n+    Box<dyn std::error::Error>,\n     std::num::NonZeroU32,\n     hir::Target,\n     Edition,"}, {"sha": "321c43a1aba8df714bcf30786b9a121d603190de", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -26,7 +26,6 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, FileName, RealFileName, Span, DUMMY_SP};\n use smallvec::{smallvec, SmallVec};\n \n-use std::default::Default;\n use std::iter;\n use std::path::PathBuf;\n use std::rc::Rc;"}, {"sha": "e870aa543d0b5ce9737ae0deb2b0ae7de088714e", "filename": "compiler/rustc_hir/src/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_hir%2Fsrc%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_hir%2Fsrc%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fpat_util.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -6,7 +6,7 @@ use rustc_span::hygiene::DesugaringKind;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n-use std::iter::{Enumerate, ExactSizeIterator};\n+use std::iter::Enumerate;\n \n pub struct EnumerateAndAdjust<I> {\n     enumerate: Enumerate<I>,"}, {"sha": "69eb96fe8e9251871a8031c05f8278c5e2965dd3", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -31,7 +31,6 @@ use rustc_trait_selection::traits::{\n };\n \n use std::cell::LazyCell;\n-use std::convert::TryInto;\n use std::iter;\n use std::ops::{ControlFlow, Deref};\n "}, {"sha": "d1d328128bc15a145f7b60835cdfe62f7733beae", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -30,8 +30,6 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n-use std::iter::FromIterator;\n-use std::vec::Vec;\n \n const LOADED_FROM_DISK: Symbol = sym::loaded_from_disk;\n const EXCEPT: Symbol = sym::except;"}, {"sha": "1fd2b9b0d7b7b5a58b4d291cf039575a08715e48", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -113,7 +113,6 @@ use rustc_span::Symbol;\n \n use std::fs as std_fs;\n use std::io::{self, ErrorKind};\n-use std::mem;\n use std::path::{Path, PathBuf};\n use std::time::{Duration, SystemTime, UNIX_EPOCH};\n \n@@ -305,7 +304,7 @@ pub fn prepare_session_directory(\n             }\n \n             delete_session_dir_lock_file(sess, &lock_file_path);\n-            mem::drop(directory_lock);\n+            drop(directory_lock);\n         }\n     }\n }\n@@ -864,7 +863,7 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n \n                     // Let's make it explicit that the file lock is released at this point,\n                     // or rather, that we held on to it until here\n-                    mem::drop(lock);\n+                    drop(lock);\n                 }\n                 Err(_) => {\n                     debug!(\n@@ -898,7 +897,7 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n \n         // Let's make it explicit that the file lock is released at this point,\n         // or rather, that we held on to it until here\n-        mem::drop(lock);\n+        drop(lock);\n     }\n \n     Ok(())"}, {"sha": "c18a911b2fbcd4db06dfe417f9efbfee8579a4a2", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -4,7 +4,6 @@ use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::fmt;\n use std::fmt::Debug;\n use std::hash::Hash;\n-use std::iter::FromIterator;\n use std::marker::PhantomData;\n use std::ops::{Index, IndexMut, RangeBounds};\n use std::slice;"}, {"sha": "e903cb86dd20438a9264fcdf67bfedf6f3783cb4", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -25,7 +25,6 @@ use rustc_target::spec::{CodeModel, LinkerFlavorCli, MergeFunctions, PanicStrate\n use rustc_target::spec::{RelroLevel, SanitizerSet, SplitDebuginfo, StackProtector, TlsModel};\n \n use std::collections::{BTreeMap, BTreeSet};\n-use std::iter::FromIterator;\n use std::num::NonZeroUsize;\n use std::path::{Path, PathBuf};\n "}, {"sha": "50d6d5b9bab91a0bc08807c708ad7f02858d2842", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -34,7 +34,6 @@ pub use crate::cursor::Cursor;\n use self::LiteralKind::*;\n use self::TokenKind::*;\n use crate::cursor::EOF_CHAR;\n-use std::convert::TryFrom;\n \n /// Parsed token.\n /// It doesn't contain information about data that has been parsed,"}, {"sha": "8446da6098ee9641764fa423412368ebbbd524c4", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -16,7 +16,6 @@ use rustc_target::abi::{Abi, Size, WrappingRange};\n use rustc_target::abi::{Integer, TagEncoding, Variants};\n use rustc_target::spec::abi::Abi as SpecAbi;\n \n-use std::cmp;\n use std::iter;\n use std::ops::ControlFlow;\n \n@@ -531,7 +530,7 @@ impl<'tcx> LateLintPass<'tcx> for TypeLimits {\n             _ => {}\n         };\n \n-        fn is_valid<T: cmp::PartialOrd>(binop: hir::BinOp, v: T, min: T, max: T) -> bool {\n+        fn is_valid<T: PartialOrd>(binop: hir::BinOp, v: T, min: T, max: T) -> bool {\n             match binop.node {\n                 hir::BinOpKind::Lt => v > min && v <= max,\n                 hir::BinOpKind::Le => v >= min && v < max,"}, {"sha": "716655c7f144d7de62e0d5c1bc64ee9a703c5b55", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -7,7 +7,6 @@ use rustc_middle::ty::ParameterizedOverTcx;\n use rustc_serialize::opaque::FileEncoder;\n use rustc_serialize::Encoder as _;\n use rustc_span::hygiene::MacroKind;\n-use std::convert::TryInto;\n use std::marker::PhantomData;\n use std::num::NonZeroUsize;\n "}, {"sha": "0b55757eb038298d32ee3598e9a07fe5732e0d15", "filename": "compiler/rustc_middle/src/mir/coverage.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -3,7 +3,6 @@\n use rustc_macros::HashStable;\n use rustc_span::Symbol;\n \n-use std::cmp::Ord;\n use std::fmt::{self, Debug, Formatter};\n \n rustc_index::newtype_index! {"}, {"sha": "8fe349d9640dafd776814d0feb5f9b8175a7e92f", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -95,7 +95,6 @@ mod pointer;\n mod queries;\n mod value;\n \n-use std::convert::TryFrom;\n use std::fmt;\n use std::io;\n use std::io::{Read, Write};"}, {"sha": "b0830991076206930b030985cdab10732d551744", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -3,7 +3,6 @@ use super::{AllocId, InterpResult};\n use rustc_macros::HashStable;\n use rustc_target::abi::{HasDataLayout, Size};\n \n-use std::convert::{TryFrom, TryInto};\n use std::fmt;\n \n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "88fb14eb359424e468ac55f953092fbc18cae2ee", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -1,4 +1,3 @@\n-use std::convert::{TryFrom, TryInto};\n use std::fmt;\n \n use either::{Either, Left, Right};"}, {"sha": "db4fe6f886b2549044777dd6f0e7b399fc0c3bfc", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -36,7 +36,6 @@ use rustc_span::{Span, DUMMY_SP};\n use either::Either;\n \n use std::borrow::Cow;\n-use std::convert::TryInto;\n use std::fmt::{self, Debug, Display, Formatter, Write};\n use std::ops::{ControlFlow, Index, IndexMut};\n use std::{iter, mem};"}, {"sha": "d40d7de5f315fc3a18194348caf84fe05baeb8c4", "filename": "compiler/rustc_middle/src/traits/query.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -12,7 +12,6 @@ use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir::def_id::DefId;\n use rustc_span::source_map::Span;\n-use std::iter::FromIterator;\n \n pub mod type_op {\n     use crate::ty::fold::TypeFoldable;"}, {"sha": "2a8a4d598882d0c0cd1b83abed69dd574fdc866d", "filename": "compiler/rustc_middle/src/ty/consts/int.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -2,7 +2,6 @@ use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_target::abi::Size;\n-use std::convert::{TryFrom, TryInto};\n use std::fmt;\n use std::num::NonZeroU8;\n "}, {"sha": "d9721863a58c801fa49c21594cfc26309a2dc47d", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -1,5 +1,3 @@\n-use std::convert::TryInto;\n-\n use super::Const;\n use crate::mir;\n use crate::mir::interpret::{AllocId, ConstValue, Scalar};"}, {"sha": "01e96fa5c7ade50d8ffe3df700378abde35c9fbc", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -23,7 +23,6 @@ use smallvec::SmallVec;\n use std::cell::Cell;\n use std::char;\n use std::collections::BTreeMap;\n-use std::convert::TryFrom;\n use std::fmt::{self, Write as _};\n use std::iter;\n use std::ops::{ControlFlow, Deref, DerefMut};"}, {"sha": "802925dfb043e3eafb4f70304a50cf359f0cb78b", "filename": "compiler/rustc_middle/src/ty/vtable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -1,4 +1,3 @@\n-use std::convert::TryFrom;\n use std::fmt;\n \n use crate::mir::interpret::{alloc_range, AllocId, Allocation, Pointer, Scalar};"}, {"sha": "ba6bc41c6675cdaa28463b34e4c443cc2b4a00cd", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -30,7 +30,6 @@ mod test;\n mod util;\n \n use std::borrow::Borrow;\n-use std::convert::TryFrom;\n use std::mem;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {"}, {"sha": "cbd494862a01f09ee0debdb8d4bd0eacae39f3d9", "filename": "compiler/rustc_mir_build/src/build/matches/util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -7,7 +7,6 @@ use rustc_middle::thir::*;\n use rustc_middle::ty;\n use rustc_middle::ty::TypeVisitable;\n use smallvec::SmallVec;\n-use std::convert::TryInto;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub(crate) fn field_match_pairs<'pat>("}, {"sha": "18e9c69c4870e3b8796c5b01e1e2b73c3c6c0d18", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -45,7 +45,7 @@\n use std::cell::Cell;\n use std::cmp::{self, max, min, Ordering};\n use std::fmt;\n-use std::iter::{once, IntoIterator};\n+use std::iter::once;\n use std::ops::RangeInclusive;\n \n use smallvec::{smallvec, SmallVec};"}, {"sha": "8fdac7b2cf501e1540a526392a1cde97c7397216", "filename": "compiler/rustc_mir_dataflow/src/framework/lattice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Flattice.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -26,7 +26,7 @@\n //! ## `PartialOrd`\n //!\n //! Given that they represent partially ordered sets, you may be surprised that [`JoinSemiLattice`]\n-//! and [`MeetSemiLattice`] do not have [`PartialOrd`][std::cmp::PartialOrd] as a supertrait. This\n+//! and [`MeetSemiLattice`] do not have [`PartialOrd`] as a supertrait. This\n //! is because most standard library types use lexicographic ordering instead of set inclusion for\n //! their `PartialOrd` impl. Since we do not actually need to compare lattice elements to run a\n //! dataflow analysis, there's no need for a newtype wrapper with a custom `PartialOrd` impl. The"}, {"sha": "8212a7b523bbc98d5d1e4d8d76e57864432d61df", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -35,7 +35,6 @@ use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Vis\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n use smallvec::SmallVec;\n-use std::convert::TryInto;\n \n pub struct SimplifyCfg {\n     label: String,"}, {"sha": "703ed09a254a96899d2019a1d29afba864a4bb97", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -20,7 +20,6 @@ use rustc_middle::ty::{\n     Const, Ty, TyCtxt,\n };\n use rustc_span::symbol::sym;\n-use std::convert::TryInto;\n use std::ops::ControlFlow;\n \n use crate::errors::UnusedGenericParams;"}, {"sha": "686454a8f18117f1323fa6dcea384719770e604f", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -6,7 +6,6 @@ use rustc_ast::attr;\n use rustc_ast::token::{self, Delimiter, Nonterminal};\n use rustc_errors::{error_code, fluent, Diagnostic, IntoDiagnostic, PResult};\n use rustc_span::{sym, BytePos, Span};\n-use std::convert::TryInto;\n \n // Public for rustfmt usage\n #[derive(Debug)]"}, {"sha": "b97f22417cb7bdcc82482abf2a6314d4ff664c03", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -8,7 +8,6 @@ use rustc_errors::PResult;\n use rustc_session::parse::ParseSess;\n use rustc_span::{sym, Span, DUMMY_SP};\n \n-use std::convert::TryInto;\n use std::ops::Range;\n \n /// A wrapper type to ensure that the parser handles outer attributes correctly."}, {"sha": "7ebcda249e23ae5fd9862a445c5753dd40931d4b", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -21,7 +21,6 @@ use rustc_span::lev_distance::lev_distance;\n use rustc_span::source_map::{self, Span};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::DUMMY_SP;\n-use std::convert::TryFrom;\n use std::mem;\n use thin_vec::ThinVec;\n use tracing::debug;"}, {"sha": "0e7d628c1eb630c030946079bfaa9259a3785c01", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -46,7 +46,7 @@ impl DepNodeIndex {\n     pub const FOREVER_RED_NODE: DepNodeIndex = DepNodeIndex::from_u32(1);\n }\n \n-impl std::convert::From<DepNodeIndex> for QueryInvocationId {\n+impl From<DepNodeIndex> for QueryInvocationId {\n     #[inline]\n     fn from(dep_node_index: DepNodeIndex) -> Self {\n         QueryInvocationId(dep_node_index.as_u32())"}, {"sha": "d292f4beef2ebccc33f0bebfa0894a7d756e5a1a", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -22,7 +22,6 @@ use rustc_index::vec::{Idx, IndexVec};\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder, IntEncodedWithFixedSize, MemDecoder};\n use rustc_serialize::{Decodable, Decoder, Encodable};\n use smallvec::SmallVec;\n-use std::convert::TryInto;\n \n // The maximum value of `SerializedDepNodeIndex` leaves the upper two bits\n // unused so that we can store multiple index types in `CompressedHybridIndex`,"}, {"sha": "f65846fc77f6e5114bfd384ce37c013c61e10e62", "filename": "compiler/rustc_query_system/src/query/caches.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -9,7 +9,6 @@ use rustc_data_structures::sharded::Sharded;\n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::sync::WorkerLocal;\n use rustc_index::vec::{Idx, IndexVec};\n-use std::default::Default;\n use std::fmt::Debug;\n use std::hash::Hash;\n use std::marker::PhantomData;"}, {"sha": "701bbde6ad23f92d89169ce3aa3e3c7bc278685c", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -22,8 +22,8 @@ use {\n     rustc_data_structures::{jobserver, OnDrop},\n     rustc_rayon_core as rayon_core,\n     rustc_span::DUMMY_SP,\n-    std::iter::{self, FromIterator},\n-    std::{mem, process},\n+    std::iter,\n+    std::process,\n };\n \n /// Represents a span and a query key.\n@@ -247,7 +247,7 @@ impl QueryLatch {\n             jobserver::release_thread();\n             waiter.condvar.wait(&mut info);\n             // Release the lock before we potentially block in `acquire_thread`\n-            mem::drop(info);\n+            drop(info);\n             jobserver::acquire_thread();\n         }\n     }"}, {"sha": "6c310abf10ac537f78b66ef160e7acd5466eb19a", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -36,7 +36,6 @@ use rustc_span::symbol::Ident;\n use rustc_span::*;\n \n use std::cell::Cell;\n-use std::default::Default;\n use std::env;\n use std::fs::File;\n use std::io::BufWriter;"}, {"sha": "0e0ebc79eb2e3dfdb7c65855491987d8724ee200", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -1,6 +1,5 @@\n use crate::leb128::{self, largest_max_leb128_len};\n use crate::serialize::{Decodable, Decoder, Encodable, Encoder};\n-use std::convert::TryInto;\n use std::fs::File;\n use std::io::{self, Write};\n use std::mem::MaybeUninit;"}, {"sha": "6de564a3a069225ebee1f06be5418c9de0e1cac1", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -32,7 +32,7 @@ use std::collections::btree_map::{\n use std::collections::{BTreeMap, BTreeSet};\n use std::fmt;\n use std::hash::Hash;\n-use std::iter::{self, FromIterator};\n+use std::iter;\n use std::path::{Path, PathBuf};\n use std::str::{self, FromStr};\n "}, {"sha": "1855a49c1ecdf36b331a92e362feaa3f54eec1d5", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -3,7 +3,6 @@\n use smallvec::{smallvec, SmallVec};\n use std::env;\n use std::fs;\n-use std::iter::FromIterator;\n use std::path::{Path, PathBuf};\n \n use crate::search_paths::{PathKind, SearchPath};"}, {"sha": "43a3172270733ffebdc86005de630265f1b206a3", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -15,11 +15,10 @@ pub use crate::*;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{AtomicU32, Lrc, MappedReadGuard, ReadGuard, RwLock};\n+use std::cmp;\n use std::hash::Hash;\n use std::path::{Path, PathBuf};\n use std::sync::atomic::Ordering;\n-use std::{clone::Clone, cmp};\n-use std::{convert::TryFrom, unreachable};\n \n use std::fs;\n use std::io;"}, {"sha": "d0fe598ce086e89cbec966c1924baef30de064a7", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -9,7 +9,6 @@ use rustc_data_structures::sync::Lock;\n use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n \n-use std::cmp::{Ord, PartialEq, PartialOrd};\n use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::str;\n@@ -1974,7 +1973,6 @@ pub mod kw {\n /// For example `sym::rustfmt` or `sym::u8`.\n pub mod sym {\n     use super::Symbol;\n-    use std::convert::TryInto;\n \n     #[doc(inline)]\n     pub use super::sym_generated::*;"}, {"sha": "dc2cc23ffb1e40c61448af0651d18615c59eb8c9", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -18,7 +18,6 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n \n-use std::iter::FromIterator;\n use std::path::{Path, PathBuf};\n \n #[macro_use]"}, {"sha": "be994eda14c004aecca3d9e0c7e3e5bf7d8f5eb0", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -45,9 +45,7 @@ use rustc_span::symbol::{sym, Symbol};\n use serde_json::Value;\n use std::borrow::Cow;\n use std::collections::BTreeMap;\n-use std::convert::TryFrom;\n use std::hash::{Hash, Hasher};\n-use std::iter::FromIterator;\n use std::ops::{Deref, DerefMut};\n use std::path::{Path, PathBuf};\n use std::str::FromStr;"}, {"sha": "9aa2be124e294871f24d11a82d2d168755d5fc00", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc69925cb4a1391a9a41411c56ae059877bf8fb/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=9bc69925cb4a1391a9a41411c56ae059877bf8fb", "patch": "@@ -1,6 +1,6 @@\n #![allow(rustc::usage_of_ty_tykind)]\n \n-use std::cmp::{Eq, Ord, Ordering, PartialEq, PartialOrd};\n+use std::cmp::Ordering;\n use std::{fmt, hash};\n \n use crate::DebruijnIndex;"}]}