{"sha": "728fe775a28b780d2bb26982992d5aab7623ba13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyOGZlNzc1YTI4Yjc4MGQyYmIyNjk4Mjk5MmQ1YWFiNzYyM2JhMTM=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-18T06:27:54Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-18T07:29:12Z"}, "message": "Use pattern-matching instead of conditionals where appropriate to improve code clarity", "tree": {"sha": "fbd5c027ae51692177b3eee14599803f992f108c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbd5c027ae51692177b3eee14599803f992f108c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/728fe775a28b780d2bb26982992d5aab7623ba13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/728fe775a28b780d2bb26982992d5aab7623ba13", "html_url": "https://github.com/rust-lang/rust/commit/728fe775a28b780d2bb26982992d5aab7623ba13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/728fe775a28b780d2bb26982992d5aab7623ba13/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a10974da2db2e483f21e337f0c9a8a1e1c4c81ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/a10974da2db2e483f21e337f0c9a8a1e1c4c81ed", "html_url": "https://github.com/rust-lang/rust/commit/a10974da2db2e483f21e337f0c9a8a1e1c4c81ed"}], "stats": {"total": 194, "additions": 81, "deletions": 113}, "files": [{"sha": "b3c0b8cad7a4e4ba9d8aaa4d780e6cc89231442f", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/728fe775a28b780d2bb26982992d5aab7623ba13/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728fe775a28b780d2bb26982992d5aab7623ba13/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=728fe775a28b780d2bb26982992d5aab7623ba13", "patch": "@@ -49,12 +49,10 @@ pub fn is_false(v: bool) -> bool { !v }\n /// Parse logic value from `s`\n impl FromStr for bool {\n     fn from_str(s: &str) -> Option<bool> {\n-        if s == \"true\" {\n-            Some(true)\n-        } else if s == \"false\" {\n-            Some(false)\n-        } else {\n-            None\n+        match s {\n+            \"true\"  => Some(true),\n+            \"false\" => Some(false),\n+            _       => None,\n         }\n     }\n }"}, {"sha": "c359b657cd3d714f2b92a910efa2d2beb7861a8c", "filename": "src/libcore/path.rs", "status": "modified", "additions": 42, "deletions": 58, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/728fe775a28b780d2bb26982992d5aab7623ba13/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728fe775a28b780d2bb26982992d5aab7623ba13/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=728fe775a28b780d2bb26982992d5aab7623ba13", "patch": "@@ -311,9 +311,10 @@ pub impl Path {\n         unsafe {\n              do str::as_c_str(self.to_str()) |buf| {\n                 let mut st = stat::arch::default_stat();\n-                let r = libc::stat(buf, &mut st);\n-\n-                if r == 0 { Some(st) } else { None }\n+                match libc::stat(buf, &mut st) {\n+                    0 => Some(st),\n+                    _ => None,\n+                }\n             }\n         }\n     }\n@@ -323,9 +324,10 @@ pub impl Path {\n         unsafe {\n             do str::as_c_str(self.to_str()) |buf| {\n                 let mut st = stat::arch::default_stat();\n-                let r = libc::lstat(buf, &mut st);\n-\n-                if r == 0 { Some(st) } else { None }\n+                match libc::lstat(buf, &mut st) {\n+                    0 => Some(st),\n+                    _ => None,\n+                }\n             }\n         }\n     }\n@@ -456,10 +458,9 @@ impl GenericPath for PosixPath {\n \n     fn dirname(&self) -> ~str {\n         let s = self.dir_path().to_str();\n-        if s.len() == 0 {\n-            ~\".\"\n-        } else {\n-            s\n+        match s.len() {\n+            0 => ~\".\",\n+            _ => s,\n         }\n     }\n \n@@ -515,25 +516,18 @@ impl GenericPath for PosixPath {\n     }\n \n     fn with_filetype(&self, t: &str) -> PosixPath {\n-        if t.len() == 0 {\n-            match self.filestem() {\n-              None => copy *self,\n-              Some(ref s) => self.with_filename(*s)\n-            }\n-        } else {\n-            let t = ~\".\" + str::to_owned(t);\n-            match self.filestem() {\n-              None => self.with_filename(t),\n-              Some(ref s) => self.with_filename(*s + t)\n-            }\n+        match (t.len(), self.filestem()) {\n+            (0, None)        => copy *self,\n+            (0, Some(ref s)) => self.with_filename(*s),\n+            (_, None)        => self.with_filename(fmt!(\".%s\", t)),\n+            (_, Some(ref s)) => self.with_filename(fmt!(\"%s.%s\", *s, t)),\n         }\n     }\n \n     fn dir_path(&self) -> PosixPath {\n-        if self.components.len() != 0 {\n-            self.pop()\n-        } else {\n-            copy *self\n+        match self.components.len() {\n+            0 => copy *self,\n+            _ => self.pop(),\n         }\n     }\n \n@@ -638,26 +632,25 @@ impl GenericPath for WindowsPath {\n         let device;\n         let rest;\n \n-        match windows::extract_drive_prefix(s) {\n-          Some((ref d, ref r)) => {\n-            host = None;\n-            device = Some(copy *d);\n-            rest = copy *r;\n-          }\n-          None => {\n-            match windows::extract_unc_prefix(s) {\n-              Some((ref h, ref r)) => {\n+        match (\n+            windows::extract_drive_prefix(s),\n+            windows::extract_unc_prefix(s),\n+        ) {\n+            (Some((ref d, ref r)), _) => {\n+                host = None;\n+                device = Some(copy *d);\n+                rest = copy *r;\n+            }\n+            (None, Some((ref h, ref r))) => {\n                 host = Some(copy *h);\n                 device = None;\n                 rest = copy *r;\n-              }\n-              None => {\n+            }\n+            (None, None) => {\n                 host = None;\n                 device = None;\n                 rest = str::to_owned(s);\n-              }\n             }\n-          }\n         }\n \n         let mut components = ~[];\n@@ -673,10 +666,9 @@ impl GenericPath for WindowsPath {\n \n     fn dirname(&self) -> ~str {\n         let s = self.dir_path().to_str();\n-        if s.len() == 0 {\n-            ~\".\"\n-        } else {\n-            s\n+        match s.len() {\n+            0 => ~\".\",\n+            _ => s,\n         }\n     }\n \n@@ -732,26 +724,18 @@ impl GenericPath for WindowsPath {\n     }\n \n     fn with_filetype(&self, t: &str) -> WindowsPath {\n-        if t.len() == 0 {\n-            match self.filestem() {\n-              None => copy *self,\n-              Some(ref s) => self.with_filename(*s)\n-            }\n-        } else {\n-            let t = ~\".\" + str::to_owned(t);\n-            match self.filestem() {\n-              None => self.with_filename(t),\n-              Some(ref s) =>\n-              self.with_filename(*s + t)\n-            }\n+        match (t.len(), self.filestem()) {\n+            (0, None)        => copy *self,\n+            (0, Some(ref s)) => self.with_filename(*s),\n+            (_, None)        => self.with_filename(fmt!(\".%s\", t)),\n+            (_, Some(ref s)) => self.with_filename(fmt!(\"%s.%s\", *s, t)),\n         }\n     }\n \n     fn dir_path(&self) -> WindowsPath {\n-        if self.components.len() != 0 {\n-            self.pop()\n-        } else {\n-            copy *self\n+        match self.components.len() {\n+            0 => copy *self,\n+            _ => self.pop(),\n         }\n     }\n "}, {"sha": "59f769fd92d42e0de142dc9d3e61bab3a6f539f8", "filename": "src/libcore/str.rs", "status": "modified", "additions": 35, "deletions": 49, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/728fe775a28b780d2bb26982992d5aab7623ba13/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728fe775a28b780d2bb26982992d5aab7623ba13/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=728fe775a28b780d2bb26982992d5aab7623ba13", "patch": "@@ -128,57 +128,43 @@ pub fn push_char(s: &mut ~str, ch: char) {\n         let off = len;\n         do as_buf(*s) |buf, _len| {\n             let buf: *mut u8 = ::cast::transmute(buf);\n-            if nb == 1u {\n-                *ptr::mut_offset(buf, off) =\n-                    code as u8;\n-            } else if nb == 2u {\n-                *ptr::mut_offset(buf, off) =\n-                    (code >> 6u & 31u | tag_two_b) as u8;\n-                *ptr::mut_offset(buf, off + 1u) =\n-                    (code & 63u | tag_cont) as u8;\n-            } else if nb == 3u {\n-                *ptr::mut_offset(buf, off) =\n-                    (code >> 12u & 15u | tag_three_b) as u8;\n-                *ptr::mut_offset(buf, off + 1u) =\n-                    (code >> 6u & 63u | tag_cont) as u8;\n-                *ptr::mut_offset(buf, off + 2u) =\n-                    (code & 63u | tag_cont) as u8;\n-            } else if nb == 4u {\n-                *ptr::mut_offset(buf, off) =\n-                    (code >> 18u & 7u | tag_four_b) as u8;\n-                *ptr::mut_offset(buf, off + 1u) =\n-                    (code >> 12u & 63u | tag_cont) as u8;\n-                *ptr::mut_offset(buf, off + 2u) =\n-                    (code >> 6u & 63u | tag_cont) as u8;\n-                *ptr::mut_offset(buf, off + 3u) =\n-                    (code & 63u | tag_cont) as u8;\n-            } else if nb == 5u {\n-                *ptr::mut_offset(buf, off) =\n-                    (code >> 24u & 3u | tag_five_b) as u8;\n-                *ptr::mut_offset(buf, off + 1u) =\n-                    (code >> 18u & 63u | tag_cont) as u8;\n-                *ptr::mut_offset(buf, off + 2u) =\n-                    (code >> 12u & 63u | tag_cont) as u8;\n-                *ptr::mut_offset(buf, off + 3u) =\n-                    (code >> 6u & 63u | tag_cont) as u8;\n-                *ptr::mut_offset(buf, off + 4u) =\n-                    (code & 63u | tag_cont) as u8;\n-            } else if nb == 6u {\n-                *ptr::mut_offset(buf, off) =\n-                    (code >> 30u & 1u | tag_six_b) as u8;\n-                *ptr::mut_offset(buf, off + 1u) =\n-                    (code >> 24u & 63u | tag_cont) as u8;\n-                *ptr::mut_offset(buf, off + 2u) =\n-                    (code >> 18u & 63u | tag_cont) as u8;\n-                *ptr::mut_offset(buf, off + 3u) =\n-                    (code >> 12u & 63u | tag_cont) as u8;\n-                *ptr::mut_offset(buf, off + 4u) =\n-                    (code >> 6u & 63u | tag_cont) as u8;\n-                *ptr::mut_offset(buf, off + 5u) =\n-                    (code & 63u | tag_cont) as u8;\n+            match nb {\n+                1u => {\n+                    *ptr::mut_offset(buf, off) = code as u8;\n+                }\n+                2u => {\n+                    *ptr::mut_offset(buf, off) = (code >> 6u & 31u | tag_two_b) as u8;\n+                    *ptr::mut_offset(buf, off + 1u) = (code & 63u | tag_cont) as u8;\n+                }\n+                3u => {\n+                    *ptr::mut_offset(buf, off) = (code >> 12u & 15u | tag_three_b) as u8;\n+                    *ptr::mut_offset(buf, off + 1u) = (code >> 6u & 63u | tag_cont) as u8;\n+                    *ptr::mut_offset(buf, off + 2u) = (code & 63u | tag_cont) as u8;\n+                }\n+                4u => {\n+                    *ptr::mut_offset(buf, off) = (code >> 18u & 7u | tag_four_b) as u8;\n+                    *ptr::mut_offset(buf, off + 1u) = (code >> 12u & 63u | tag_cont) as u8;\n+                    *ptr::mut_offset(buf, off + 2u) = (code >> 6u & 63u | tag_cont) as u8;\n+                    *ptr::mut_offset(buf, off + 3u) = (code & 63u | tag_cont) as u8;\n+                }\n+                5u => {\n+                    *ptr::mut_offset(buf, off) = (code >> 24u & 3u | tag_five_b) as u8;\n+                    *ptr::mut_offset(buf, off + 1u) = (code >> 18u & 63u | tag_cont) as u8;\n+                    *ptr::mut_offset(buf, off + 2u) = (code >> 12u & 63u | tag_cont) as u8;\n+                    *ptr::mut_offset(buf, off + 3u) = (code >> 6u & 63u | tag_cont) as u8;\n+                    *ptr::mut_offset(buf, off + 4u) = (code & 63u | tag_cont) as u8;\n+                }\n+                6u => {\n+                    *ptr::mut_offset(buf, off) = (code >> 30u & 1u | tag_six_b) as u8;\n+                    *ptr::mut_offset(buf, off + 1u) = (code >> 24u & 63u | tag_cont) as u8;\n+                    *ptr::mut_offset(buf, off + 2u) = (code >> 18u & 63u | tag_cont) as u8;\n+                    *ptr::mut_offset(buf, off + 3u) = (code >> 12u & 63u | tag_cont) as u8;\n+                    *ptr::mut_offset(buf, off + 4u) = (code >> 6u & 63u | tag_cont) as u8;\n+                    *ptr::mut_offset(buf, off + 5u) = (code & 63u | tag_cont) as u8;\n+                }\n+                _ => {}\n             }\n         }\n-\n         raw::set_len(s, new_len);\n     }\n }"}]}