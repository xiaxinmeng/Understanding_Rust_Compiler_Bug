{"sha": "5f73085f925cd008fc28eed302f8bc026e7fb71c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNzMwODVmOTI1Y2QwMDhmYzI4ZWVkMzAyZjhiYzAyNmU3ZmI3MWM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-08-18T16:29:11Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-09-14T11:56:33Z"}, "message": "Rename DefPathHashMap in rustc_metadata so its name does not clash with DefPathHashMap in rustc_hir.", "tree": {"sha": "41bc1d875f12dae96475b2502407487713229e92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41bc1d875f12dae96475b2502407487713229e92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f73085f925cd008fc28eed302f8bc026e7fb71c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f73085f925cd008fc28eed302f8bc026e7fb71c", "html_url": "https://github.com/rust-lang/rust/commit/5f73085f925cd008fc28eed302f8bc026e7fb71c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f73085f925cd008fc28eed302f8bc026e7fb71c/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "021c0520e3ec4ddecac425f99db5749942785e65", "url": "https://api.github.com/repos/rust-lang/rust/commits/021c0520e3ec4ddecac425f99db5749942785e65", "html_url": "https://github.com/rust-lang/rust/commit/021c0520e3ec4ddecac425f99db5749942785e65"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "8bb36103cd099dc773e850dac84990ae6c4b7062", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f73085f925cd008fc28eed302f8bc026e7fb71c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f73085f925cd008fc28eed302f8bc026e7fb71c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=5f73085f925cd008fc28eed302f8bc026e7fb71c", "patch": "@@ -55,7 +55,7 @@ mod cstore_impl;\n crate struct MetadataBlob(Lrc<MetadataRef>);\n \n // This is needed so we can create an OwningRef into the blob.\n-// The data behind a `MetadataBlob` has a stable address because it\n+// The data behind a `MetadataBlob` has a stable address because it is\n // contained within an Rc/Arc.\n unsafe impl rustc_data_structures::owning_ref::StableAddress for MetadataBlob {}\n \n@@ -96,7 +96,7 @@ crate struct CrateMetadata {\n     /// Source maps for code from the crate.\n     source_map_import_info: OnceCell<Vec<ImportedSourceFile>>,\n     /// For every definition in this crate, maps its `DefPathHash` to its `DefIndex`.\n-    def_path_hash_map: DefPathHashMap<'static>,\n+    def_path_hash_map: DefPathHashMapRef<'static>,\n     /// Likewise for ExpnHash.\n     expn_hash_map: OnceCell<UnhashMap<ExpnHash, ExpnIndex>>,\n     /// Used for decoding interpret::AllocIds in a cached & thread-safe manner."}, {"sha": "d6435bb649d6dcbe8eefed4343bed02b53b5b17f", "filename": "compiler/rustc_metadata/src/rmeta/def_path_hash_map.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5f73085f925cd008fc28eed302f8bc026e7fb71c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f73085f925cd008fc28eed302f8bc026e7fb71c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs?ref=5f73085f925cd008fc28eed302f8bc026e7fb71c", "patch": "@@ -2,46 +2,44 @@ use crate::rmeta::DecodeContext;\n use crate::rmeta::EncodeContext;\n use crate::rmeta::MetadataBlob;\n use rustc_data_structures::owning_ref::OwningRef;\n-use rustc_hir::def_path_hash_map::{\n-    Config as HashMapConfig, DefPathHashMap as DefPathHashMapInner,\n-};\n+use rustc_hir::def_path_hash_map::{Config as HashMapConfig, DefPathHashMap};\n use rustc_serialize::{opaque, Decodable, Decoder, Encodable, Encoder};\n use rustc_span::def_id::{DefIndex, DefPathHash};\n \n-crate enum DefPathHashMap<'tcx> {\n+crate enum DefPathHashMapRef<'tcx> {\n     OwnedFromMetadata(odht::HashTable<HashMapConfig, OwningRef<MetadataBlob, [u8]>>),\n-    BorrowedFromTcx(&'tcx DefPathHashMapInner),\n+    BorrowedFromTcx(&'tcx DefPathHashMap),\n }\n \n-impl DefPathHashMap<'tcx> {\n+impl DefPathHashMapRef<'tcx> {\n     #[inline]\n     pub fn def_path_hash_to_def_index(&self, def_path_hash: &DefPathHash) -> DefIndex {\n         match *self {\n-            DefPathHashMap::OwnedFromMetadata(ref map) => map.get(def_path_hash).unwrap(),\n-            DefPathHashMap::BorrowedFromTcx(_) => {\n+            DefPathHashMapRef::OwnedFromMetadata(ref map) => map.get(def_path_hash).unwrap(),\n+            DefPathHashMapRef::BorrowedFromTcx(_) => {\n                 panic!(\"DefPathHashMap::BorrowedFromTcx variant only exists for serialization\")\n             }\n         }\n     }\n }\n \n-impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for DefPathHashMap<'tcx> {\n+impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for DefPathHashMapRef<'tcx> {\n     fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {\n         match *self {\n-            DefPathHashMap::BorrowedFromTcx(def_path_hash_map) => {\n+            DefPathHashMapRef::BorrowedFromTcx(def_path_hash_map) => {\n                 let bytes = def_path_hash_map.raw_bytes();\n                 e.emit_usize(bytes.len())?;\n                 e.emit_raw_bytes(bytes)\n             }\n-            DefPathHashMap::OwnedFromMetadata(_) => {\n+            DefPathHashMapRef::OwnedFromMetadata(_) => {\n                 panic!(\"DefPathHashMap::OwnedFromMetadata variant only exists for deserialization\")\n             }\n         }\n     }\n }\n \n-impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefPathHashMap<'static> {\n-    fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Result<DefPathHashMap<'static>, String> {\n+impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefPathHashMapRef<'static> {\n+    fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Result<DefPathHashMapRef<'static>, String> {\n         // Import TyDecoder so we can access the DecodeContext::position() method\n         use crate::rustc_middle::ty::codec::TyDecoder;\n \n@@ -55,6 +53,6 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefPathHashMap<'static> {\n         let _ = d.read_raw_bytes(len);\n \n         let inner = odht::HashTable::from_raw_bytes(o).map_err(|e| format!(\"{}\", e))?;\n-        Ok(DefPathHashMap::OwnedFromMetadata(inner))\n+        Ok(DefPathHashMapRef::OwnedFromMetadata(inner))\n     }\n }"}, {"sha": "a50c4549d3d3fbe8a1334e73c3801d79ca08ee34", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f73085f925cd008fc28eed302f8bc026e7fb71c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f73085f925cd008fc28eed302f8bc026e7fb71c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=5f73085f925cd008fc28eed302f8bc026e7fb71c", "patch": "@@ -1,4 +1,4 @@\n-use crate::rmeta::def_path_hash_map::DefPathHashMap;\n+use crate::rmeta::def_path_hash_map::DefPathHashMapRef;\n use crate::rmeta::table::{FixedSizeEncoding, TableBuilder};\n use crate::rmeta::*;\n \n@@ -473,8 +473,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn encode_def_path_hash_map(&mut self) -> Lazy<DefPathHashMap<'tcx>> {\n-        self.lazy(DefPathHashMap::BorrowedFromTcx(\n+    fn encode_def_path_hash_map(&mut self) -> Lazy<DefPathHashMapRef<'tcx>> {\n+        self.lazy(DefPathHashMapRef::BorrowedFromTcx(\n             self.tcx.resolutions(()).definitions.def_path_hash_to_def_index_map(),\n         ))\n     }"}, {"sha": "eb2bd80f46e64686715184798f10db490e3935e0", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f73085f925cd008fc28eed302f8bc026e7fb71c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f73085f925cd008fc28eed302f8bc026e7fb71c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=5f73085f925cd008fc28eed302f8bc026e7fb71c", "patch": "@@ -1,5 +1,5 @@\n use decoder::Metadata;\n-use def_path_hash_map::DefPathHashMap;\n+use def_path_hash_map::DefPathHashMapRef;\n use table::{Table, TableBuilder};\n \n use rustc_ast::{self as ast, MacroDef};\n@@ -233,7 +233,7 @@ crate struct CrateRoot<'tcx> {\n     expn_data: ExpnDataTable,\n     expn_hashes: ExpnHashTable,\n \n-    def_path_hash_map: Lazy<DefPathHashMap<'tcx>>,\n+    def_path_hash_map: Lazy<DefPathHashMapRef<'tcx>>,\n \n     source_map: Lazy<[rustc_span::SourceFile]>,\n "}]}