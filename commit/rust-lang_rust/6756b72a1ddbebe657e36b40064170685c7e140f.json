{"sha": "6756b72a1ddbebe657e36b40064170685c7e140f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NTZiNzJhMWRkYmViZTY1N2UzNmI0MDA2NDE3MDY4NWM3ZTE0MGY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-01-23T21:46:18Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-03T10:08:20Z"}, "message": "Create new flag to test rustdoc --test", "tree": {"sha": "1b743c03c43a0ce5be7a24e2195d3374e6dc2f95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b743c03c43a0ce5be7a24e2195d3374e6dc2f95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6756b72a1ddbebe657e36b40064170685c7e140f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6756b72a1ddbebe657e36b40064170685c7e140f", "html_url": "https://github.com/rust-lang/rust/commit/6756b72a1ddbebe657e36b40064170685c7e140f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6756b72a1ddbebe657e36b40064170685c7e140f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44b59be0f2ad38c39b67a6c8ebfe826c4c30cbd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/44b59be0f2ad38c39b67a6c8ebfe826c4c30cbd9", "html_url": "https://github.com/rust-lang/rust/commit/44b59be0f2ad38c39b67a6c8ebfe826c4c30cbd9"}], "stats": {"total": 108, "additions": 55, "deletions": 53}, "files": [{"sha": "39288a7ae490753fa30c690b314e730c8ca6f582", "filename": ".gitmodules", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6756b72a1ddbebe657e36b40064170685c7e140f/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/6756b72a1ddbebe657e36b40064170685c7e140f/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=6756b72a1ddbebe657e36b40064170685c7e140f", "patch": "@@ -7,7 +7,7 @@\n \turl = https://github.com/rust-lang/compiler-rt.git\n [submodule \"src/rt/hoedown\"]\n \tpath = src/rt/hoedown\n-\turl = https://github.com/GuillaumeGomez/hoedown.git\n+\turl = https://github.com/rust-lang/hoedown.git\n [submodule \"src/jemalloc\"]\n \tpath = src/jemalloc\n \turl = https://github.com/rust-lang/jemalloc.git"}, {"sha": "6b6330ef12a94dea6a53da36ebbaa08dfbae69df", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6756b72a1ddbebe657e36b40064170685c7e140f/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6756b72a1ddbebe657e36b40064170685c7e140f/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=6756b72a1ddbebe657e36b40064170685c7e140f", "patch": "@@ -467,7 +467,8 @@ impl Collector {\n \n     pub fn get_line(&self) -> usize {\n         if let Some(ref codemap) = self.codemap{\n-            codemap.lookup_char_pos(BytePos(self.start_line as u32)).line - 1\n+            let line = codemap.lookup_char_pos(BytePos(self.start_line as u32)).line;\n+            if line > 0 { line - 1 } else { line }\n         } else {\n             self.start_line\n         }"}, {"sha": "a3736a0a1907cbc8bf619708738815a5fd789c80", "filename": "src/rt/hoedown", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fhoedown?ref=6756b72a1ddbebe657e36b40064170685c7e140f", "patch": "@@ -1 +1 @@\n-Subproject commit 78e7b6f69d3fa0cb6ae6e7fb9278c3fd167ec0d1\n+Subproject commit a3736a0a1907cbc8bf619708738815a5fd789c80"}, {"sha": "b2afe43204d41d811c28f679d97226c495bb9a8f", "filename": "src/test/rustdoc/test_option_check/test.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6756b72a1ddbebe657e36b40064170685c7e140f/src%2Ftest%2Frustdoc%2Ftest_option_check%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6756b72a1ddbebe657e36b40064170685c7e140f/src%2Ftest%2Frustdoc%2Ftest_option_check%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftest_option_check%2Ftest.rs?ref=6756b72a1ddbebe657e36b40064170685c7e140f", "patch": "@@ -8,15 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:--test\n-// check-stdout\n+// compile-flags: --test\n+// check-test-line-numbers-match\n \n /// This is a Foo;\n ///\n /// ```\n /// println!(\"baaaaaar\");\n /// ```\n-#[unstable]\n pub struct Foo;\n \n /// This is a Bar;"}, {"sha": "71d8d62c75b698adb47cf5c9f96989c3faf4fb2c", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6756b72a1ddbebe657e36b40064170685c7e140f/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6756b72a1ddbebe657e36b40064170685c7e140f/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=6756b72a1ddbebe657e36b40064170685c7e140f", "patch": "@@ -224,6 +224,8 @@ pub struct TestProps {\n     pub incremental_dir: Option<PathBuf>,\n     // Specifies that a cfail test must actually compile without errors.\n     pub must_compile_successfully: bool,\n+    // rustdoc will test the output of the `--test` option\n+    pub check_test_line_numbers_match: bool,\n }\n \n impl TestProps {\n@@ -248,6 +250,7 @@ impl TestProps {\n             forbid_output: vec![],\n             incremental_dir: None,\n             must_compile_successfully: false,\n+            check_test_line_numbers_match: false,\n         }\n     }\n \n@@ -347,6 +350,10 @@ impl TestProps {\n             if !self.must_compile_successfully {\n                 self.must_compile_successfully = parse_must_compile_successfully(ln);\n             }\n+\n+            if !self.check_test_line_numbers_match {\n+                self.check_test_line_numbers_match = parse_check_test_line_numbers_match(ln);\n+            }\n         });\n \n         for key in vec![\"RUST_TEST_NOCAPTURE\", \"RUST_TEST_THREADS\"] {\n@@ -458,6 +465,10 @@ fn parse_must_compile_successfully(line: &str) -> bool {\n     parse_name_directive(line, \"must-compile-successfully\")\n }\n \n+fn parse_check_test_line_numbers_match(line: &str) -> bool {\n+    parse_name_directive(line, \"check-test-line-numbers-match\")\n+}\n+\n fn parse_env(line: &str, name: &str) -> Option<(String, String)> {\n     parse_name_value_directive(line, name).map(|nv| {\n         // nv is either FOO or FOO=BAR"}, {"sha": "a8c46722e163b97956fd27f3e173c3adfb315ba6", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 38, "deletions": 47, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/6756b72a1ddbebe657e36b40064170685c7e140f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6756b72a1ddbebe657e36b40064170685c7e140f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=6756b72a1ddbebe657e36b40064170685c7e140f", "patch": "@@ -1879,20 +1879,19 @@ actual:\\n\\\n     fn run_rustdoc_test(&self) {\n         assert!(self.revision.is_none(), \"revisions not relevant here\");\n \n-        if self.props.compile_flags.contains(&\"--test\".to_owned()) &&\n-           self.props.check_stdout == true {\n-            self.check_rustdoc_test_option();\n-        } else {\n-            let out_dir = self.output_base_name();\n-            let _ = fs::remove_dir_all(&out_dir);\n-            self.create_dir_racy(&out_dir);\n+        let out_dir = self.output_base_name();\n+        let _ = fs::remove_dir_all(&out_dir);\n+        self.create_dir_racy(&out_dir);\n \n-            let proc_res = self.document(&out_dir);\n-            if !proc_res.status.success() {\n-                self.fatal_proc_rec(\"rustdoc failed!\", &proc_res);\n-            }\n-            let root = self.find_rust_src_root().unwrap();\n+        let proc_res = self.document(&out_dir);\n+        if !proc_res.status.success() {\n+            self.fatal_proc_rec(\"rustdoc failed!\", &proc_res);\n+        }\n \n+        if self.props.check_test_line_numbers_match == true {\n+            self.check_rustdoc_test_option(proc_res);\n+        } else {\n+            let root = self.find_rust_src_root().unwrap();\n             let res = self.cmd2procres(Command::new(&self.config.docck_python)\n                                        .arg(root.join(\"src/etc/htmldocck.py\"))\n                                        .arg(out_dir)\n@@ -1903,21 +1902,20 @@ actual:\\n\\\n         }\n     }\n \n-    fn check_rustdoc_test_option(&self) {\n+    fn check_rustdoc_test_option(&self, res: ProcRes) {\n         let mut file = fs::File::open(&self.testpaths.file)\n                                 .expect(\"markdown_test_output_check_entry File::open failed\");\n         let mut content = String::new();\n         file.read_to_string(&mut content)\n             .expect(\"markdown_test_output_check_entry read_to_string failed\");\n         let mut ignore = false;\n         let mut v: Vec<usize> =\n-            content.split(\"\\n\")\n+            content.lines()\n                    .enumerate()\n                    .filter_map(|(line_nb, line)| {\n                        let sline = line.split(\"///\").last().unwrap_or(\"\");\n                        let line = sline.trim_left();\n-                       if line.starts_with(\"```\") &&\n-                          !line.contains(\"ignore\") {\n+                       if line.starts_with(\"```\") {\n                            if ignore {\n                                ignore = false;\n                                None\n@@ -1931,37 +1929,30 @@ actual:\\n\\\n                    })\n                    .collect();\n \n-        let args = ProcArgs {\n-            prog: self.config.rustdoc_path.to_str().unwrap().to_owned(),\n-            args: vec![\"--test\".to_owned(), self.testpaths.file.to_str().unwrap().to_owned()],\n-        };\n-        let env = self.props.exec_env.clone();\n-        let res = self.compose_and_run(args,\n-                                       env,\n-                                       self.config.run_lib_path.to_str().unwrap(),\n-                                       None,\n-                                       None);\n-\n-        res.stdout.split(\"\\n\")\n-                  .filter(|s| s.starts_with(\"test \"))\n-                  .inspect(|s| {\n-                      let tmp: Vec<&str> = s.split(\" - line \").collect();\n-                      if tmp.len() == 2 {\n-                          let line = usize::from_str_radix(tmp[1].split(\" ...\")\n-                                                                 .next()\n-                                                                 .unwrap_or(\"0\"), 10)\n-                                         .unwrap_or(0);\n-                          if let Ok(pos) = v.binary_search(&line) {\n-                              v.remove(pos);\n-                          } else {\n-                              self.fatal_proc_rec(&format!(\"Not found doc test: \\\"{}\\\" in {:?}\",\n-                                                           s, v),\n-                                                  &res);\n-                          }\n-                      }\n-                  })\n-                  .all(|_| true);\n-        if v.len() != 0 {\n+        let mut tested = 0;\n+        for _ in res.stdout.split(\"\\n\")\n+                           .filter(|s| s.starts_with(\"test \"))\n+                           .inspect(|s| {\n+                               let tmp: Vec<&str> = s.split(\" - line \").collect();\n+                               if tmp.len() == 2 {\n+                                   tested += 1;\n+                                   let line = tmp[1].split(\" ...\")\n+                                                    .next()\n+                                                    .unwrap_or(\"0\")\n+                                                    .parse()\n+                                                    .unwrap_or(0);\n+                                   if let Ok(pos) = v.binary_search(&line) {\n+                                       v.remove(pos);\n+                                   } else {\n+                                       self.fatal_proc_rec(\n+                                           &format!(\"Not found doc test: \\\"{}\\\" in {:?}\", s, v),\n+                                           &res);\n+                                   }\n+                               }\n+                           }) {}\n+        if tested == 0 {\n+            self.fatal_proc_rec(\"No test has been found\", &res);\n+        } else if v.len() != 0 {\n             self.fatal_proc_rec(&format!(\"Not found test at line{} {:?}\",\n                                          if v.len() > 1 { \"s\" } else { \"\" }, v),\n                                 &res);"}]}