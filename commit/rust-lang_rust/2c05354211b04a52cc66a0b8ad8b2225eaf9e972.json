{"sha": "2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMDUzNTQyMTFiMDRhNTJjYzY2YTBiOGFkOGIyMjI1ZWFmOWU5NzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-05T15:22:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-05T15:22:48Z"}, "message": "Auto merge of #21843 - japaric:kindless, r=alexcrichton\n\nThis needs a snapshot that includes #21805 before it can be merged.\r\n\r\nThere are some places where type inference regressed after I removed the annotations (see `FIXME`s). cc @nikomatsakis.\r\n\r\nr? @eddyb or anyone\r\n(I'll remove the `FIXME`s before merging, as they are only intended to point out regressions)", "tree": {"sha": "d9e86702774074efe4d9f44aba0fad8355e1655e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9e86702774074efe4d9f44aba0fad8355e1655e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "html_url": "https://github.com/rust-lang/rust/commit/2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bd8ec2d197809fc0f0efccf1de14419ffb17b2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd8ec2d197809fc0f0efccf1de14419ffb17b2b", "html_url": "https://github.com/rust-lang/rust/commit/2bd8ec2d197809fc0f0efccf1de14419ffb17b2b"}, {"sha": "92f11e938a80a719badcd2168a2e38a2a800fcb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/92f11e938a80a719badcd2168a2e38a2a800fcb6", "html_url": "https://github.com/rust-lang/rust/commit/92f11e938a80a719badcd2168a2e38a2a800fcb6"}], "stats": {"total": 803, "additions": 408, "deletions": 395}, "files": [{"sha": "a5512b30424363b1e96cfc562f938ad7b1791f79", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -359,7 +359,7 @@ pub fn make_metrics_test_closure(config: &Config, testfile: &Path) -> test::Test\n     let config = (*config).clone();\n     // FIXME (#9639): This needs to handle non-utf8 paths\n     let testfile = testfile.as_str().unwrap().to_string();\n-    test::DynMetricFn(box move |: mm: &mut test::MetricMap| {\n+    test::DynMetricFn(box move |mm: &mut test::MetricMap| {\n         runtest::run_metrics(config, testfile, mm)\n     })\n }"}, {"sha": "396b14f564fc2deea3a77497f3f04065589a3a8a", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -199,7 +199,7 @@ impl<'a> Iterator for Decompositions<'a> {\n                 let buffer = &mut self.buffer;\n                 let sorted = &mut self.sorted;\n                 {\n-                    let callback = |&mut: d| {\n+                    let callback = |d| {\n                         let class =\n                             unicode::char::canonical_combining_class(d);\n                         if class == 0 && !*sorted {\n@@ -592,7 +592,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// let v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\n     /// assert_eq!(v, vec![\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n     ///\n-    /// let v: Vec<&str> = \"abc1def2ghi\".split(|&: c: char| c.is_numeric()).collect();\n+    /// let v: Vec<&str> = \"abc1def2ghi\".split(|c: char| c.is_numeric()).collect();\n     /// assert_eq!(v, vec![\"abc\", \"def\", \"ghi\"]);\n     ///\n     /// let v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\n@@ -616,7 +616,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// let v: Vec<&str> = \"Mary had a little lambda\".splitn(2, ' ').collect();\n     /// assert_eq!(v, vec![\"Mary\", \"had\", \"a little lambda\"]);\n     ///\n-    /// let v: Vec<&str> = \"abc1def2ghi\".splitn(1, |&: c: char| c.is_numeric()).collect();\n+    /// let v: Vec<&str> = \"abc1def2ghi\".splitn(1, |c: char| c.is_numeric()).collect();\n     /// assert_eq!(v, vec![\"abc\", \"def2ghi\"]);\n     ///\n     /// let v: Vec<&str> = \"lionXXtigerXleopard\".splitn(2, 'X').collect();\n@@ -651,7 +651,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// let v: Vec<&str> = \"Mary had a little lamb\".split(' ').rev().collect();\n     /// assert_eq!(v, vec![\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n     ///\n-    /// let v: Vec<&str> = \"abc1def2ghi\".split(|&: c: char| c.is_numeric()).rev().collect();\n+    /// let v: Vec<&str> = \"abc1def2ghi\".split(|c: char| c.is_numeric()).rev().collect();\n     /// assert_eq!(v, vec![\"ghi\", \"def\", \"abc\"]);\n     ///\n     /// let v: Vec<&str> = \"lionXXtigerXleopard\".split('X').rev().collect();\n@@ -672,7 +672,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// let v: Vec<&str> = \"Mary had a little lamb\".rsplitn(2, ' ').collect();\n     /// assert_eq!(v, vec![\"lamb\", \"little\", \"Mary had a\"]);\n     ///\n-    /// let v: Vec<&str> = \"abc1def2ghi\".rsplitn(1, |&: c: char| c.is_numeric()).collect();\n+    /// let v: Vec<&str> = \"abc1def2ghi\".rsplitn(1, |c: char| c.is_numeric()).collect();\n     /// assert_eq!(v, vec![\"ghi\", \"abc1def\"]);\n     ///\n     /// let v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(2, 'X').collect();\n@@ -853,7 +853,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// assert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\n     /// let x: &[_] = &['1', '2'];\n     /// assert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n-    /// assert_eq!(\"123foo1bar123\".trim_matches(|&: c: char| c.is_numeric()), \"foo1bar\");\n+    /// assert_eq!(\"123foo1bar123\".trim_matches(|c: char| c.is_numeric()), \"foo1bar\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn trim_matches<P: CharEq>(&self, pat: P) -> &str {\n@@ -873,7 +873,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// assert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\n     /// let x: &[_] = &['1', '2'];\n     /// assert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n-    /// assert_eq!(\"123foo1bar123\".trim_left_matches(|&: c: char| c.is_numeric()), \"foo1bar123\");\n+    /// assert_eq!(\"123foo1bar123\".trim_left_matches(|c: char| c.is_numeric()), \"foo1bar123\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn trim_left_matches<P: CharEq>(&self, pat: P) -> &str {\n@@ -893,7 +893,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// assert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\n     /// let x: &[_] = &['1', '2'];\n     /// assert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n-    /// assert_eq!(\"123foo1bar123\".trim_right_matches(|&: c: char| c.is_numeric()), \"123foo1bar\");\n+    /// assert_eq!(\"123foo1bar123\".trim_right_matches(|c: char| c.is_numeric()), \"123foo1bar\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn trim_right_matches<P: CharEq>(&self, pat: P) -> &str {\n@@ -1066,7 +1066,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// assert_eq!(s.find('\u00e9'), Some(14));\n     ///\n     /// // the first space\n-    /// assert_eq!(s.find(|&: c: char| c.is_whitespace()), Some(5));\n+    /// assert_eq!(s.find(|c: char| c.is_whitespace()), Some(5));\n     ///\n     /// // neither are found\n     /// let x: &[_] = &['1', '2'];\n@@ -1094,7 +1094,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// assert_eq!(s.rfind('\u00e9'), Some(14));\n     ///\n     /// // the second space\n-    /// assert_eq!(s.rfind(|&: c: char| c.is_whitespace()), Some(12));\n+    /// assert_eq!(s.rfind(|c: char| c.is_whitespace()), Some(12));\n     ///\n     /// // searches for an occurrence of either `1` or `2`, but neither are found\n     /// let x: &[_] = &['1', '2'];\n@@ -1387,21 +1387,21 @@ mod tests {\n     #[test]\n     fn test_find() {\n         assert_eq!(\"hello\".find('l'), Some(2u));\n-        assert_eq!(\"hello\".find(|&: c:char| c == 'o'), Some(4u));\n+        assert_eq!(\"hello\".find(|c:char| c == 'o'), Some(4u));\n         assert!(\"hello\".find('x').is_none());\n-        assert!(\"hello\".find(|&: c:char| c == 'x').is_none());\n+        assert!(\"hello\".find(|c:char| c == 'x').is_none());\n         assert_eq!(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".find('\u534e'), Some(30u));\n-        assert_eq!(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".find(|&: c: char| c == '\u534e'), Some(30u));\n+        assert_eq!(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".find(|c: char| c == '\u534e'), Some(30u));\n     }\n \n     #[test]\n     fn test_rfind() {\n         assert_eq!(\"hello\".rfind('l'), Some(3u));\n-        assert_eq!(\"hello\".rfind(|&: c:char| c == 'o'), Some(4u));\n+        assert_eq!(\"hello\".rfind(|c:char| c == 'o'), Some(4u));\n         assert!(\"hello\".rfind('x').is_none());\n-        assert!(\"hello\".rfind(|&: c:char| c == 'x').is_none());\n+        assert!(\"hello\".rfind(|c:char| c == 'x').is_none());\n         assert_eq!(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".rfind('\u534e'), Some(30u));\n-        assert_eq!(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".rfind(|&: c: char| c == '\u534e'), Some(30u));\n+        assert_eq!(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".rfind(|c: char| c == '\u534e'), Some(30u));\n     }\n \n     #[test]\n@@ -1723,7 +1723,7 @@ mod tests {\n         assert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\n         let chars: &[char] = &['1', '2'];\n         assert_eq!(\"12foo1bar12\".trim_left_matches(chars), \"foo1bar12\");\n-        assert_eq!(\"123foo1bar123\".trim_left_matches(|&: c: char| c.is_numeric()), \"foo1bar123\");\n+        assert_eq!(\"123foo1bar123\".trim_left_matches(|c: char| c.is_numeric()), \"foo1bar123\");\n     }\n \n     #[test]\n@@ -1738,7 +1738,7 @@ mod tests {\n         assert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\n         let chars: &[char] = &['1', '2'];\n         assert_eq!(\"12foo1bar12\".trim_right_matches(chars), \"12foo1bar\");\n-        assert_eq!(\"123foo1bar123\".trim_right_matches(|&: c: char| c.is_numeric()), \"123foo1bar\");\n+        assert_eq!(\"123foo1bar123\".trim_right_matches(|c: char| c.is_numeric()), \"123foo1bar\");\n     }\n \n     #[test]\n@@ -1753,7 +1753,7 @@ mod tests {\n         assert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\n         let chars: &[char] = &['1', '2'];\n         assert_eq!(\"12foo1bar12\".trim_matches(chars), \"foo1bar\");\n-        assert_eq!(\"123foo1bar123\".trim_matches(|&: c: char| c.is_numeric()), \"foo1bar\");\n+        assert_eq!(\"123foo1bar123\".trim_matches(|c: char| c.is_numeric()), \"foo1bar\");\n     }\n \n     #[test]\n@@ -2222,14 +2222,14 @@ mod tests {\n         let split: Vec<&str> = data.splitn(3, ' ').collect();\n         assert_eq!(split, vec![\"\\nM\u00e4ry\", \"h\u00e4d\", \"\u00e4\", \"little l\u00e4mb\\nLittle l\u00e4mb\\n\"]);\n \n-        let split: Vec<&str> = data.splitn(3, |&: c: char| c == ' ').collect();\n+        let split: Vec<&str> = data.splitn(3, |c: char| c == ' ').collect();\n         assert_eq!(split, vec![\"\\nM\u00e4ry\", \"h\u00e4d\", \"\u00e4\", \"little l\u00e4mb\\nLittle l\u00e4mb\\n\"]);\n \n         // Unicode\n         let split: Vec<&str> = data.splitn(3, '\u00e4').collect();\n         assert_eq!(split, vec![\"\\nM\", \"ry h\", \"d \", \" little l\u00e4mb\\nLittle l\u00e4mb\\n\"]);\n \n-        let split: Vec<&str> = data.splitn(3, |&: c: char| c == '\u00e4').collect();\n+        let split: Vec<&str> = data.splitn(3, |c: char| c == '\u00e4').collect();\n         assert_eq!(split, vec![\"\\nM\", \"ry h\", \"d \", \" little l\u00e4mb\\nLittle l\u00e4mb\\n\"]);\n     }\n \n@@ -2940,7 +2940,7 @@ mod bench {\n         let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n         let len = s.split(' ').count();\n \n-        b.iter(|| assert_eq!(s.split(|&: c: char| c == ' ').count(), len));\n+        b.iter(|| assert_eq!(s.split(|c: char| c == ' ').count(), len));\n     }\n \n     #[bench]"}, {"sha": "182851002d9426bc35d49a3dd7ae2e42231e4d59", "filename": "src/libcore/finally.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibcore%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibcore%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffinally.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -23,7 +23,7 @@\n //!\n //! use std::finally::Finally;\n //!\n-//! (|&mut:| {\n+//! (|| {\n //!     // ...\n //! }).finally(|| {\n //!     // this code is always run"}, {"sha": "25bb959b9b3aa9db02d12d0dbc894c151077555f", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -225,10 +225,10 @@ pub fn float_to_str_bytes_common<T: Float, U, F>(\n         // cut off the one extra digit, and depending on its value\n         // round the remaining ones.\n         if limit_digits && dig == digit_count {\n-            let ascii2value = |&: chr: u8| {\n+            let ascii2value = |chr: u8| {\n                 (chr as char).to_digit(radix).unwrap()\n             };\n-            let value2ascii = |&: val: uint| {\n+            let value2ascii = |val: uint| {\n                 char::from_digit(val, radix).unwrap() as u8\n             };\n "}, {"sha": "0357b723b3c7aa29af0f9ff43ae9b4cf519d309a", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -483,7 +483,7 @@ impl<'a> Formatter<'a> {\n         }\n \n         // Writes the sign if it exists, and then the prefix if it was requested\n-        let write_prefix = |&: f: &mut Formatter| {\n+        let write_prefix = |f: &mut Formatter| {\n             if let Some(c) = sign {\n                 let mut b = [0; 4];\n                 let n = c.encode_utf8(&mut b).unwrap_or(0);"}, {"sha": "673ab1e094a8612bf9ea56908dc00e3d6aca00eb", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -1518,11 +1518,11 @@ impl StrExt for str {\n \n     #[inline]\n     fn trim_matches<P: CharEq>(&self, mut pat: P) -> &str {\n-        let cur = match self.find(|&mut: c: char| !pat.matches(c)) {\n+        let cur = match self.find(|c: char| !pat.matches(c)) {\n             None => \"\",\n             Some(i) => unsafe { self.slice_unchecked(i, self.len()) }\n         };\n-        match cur.rfind(|&mut: c: char| !pat.matches(c)) {\n+        match cur.rfind(|c: char| !pat.matches(c)) {\n             None => \"\",\n             Some(i) => {\n                 let right = cur.char_range_at(i).next;\n@@ -1533,15 +1533,15 @@ impl StrExt for str {\n \n     #[inline]\n     fn trim_left_matches<P: CharEq>(&self, mut pat: P) -> &str {\n-        match self.find(|&mut: c: char| !pat.matches(c)) {\n+        match self.find(|c: char| !pat.matches(c)) {\n             None => \"\",\n             Some(first) => unsafe { self.slice_unchecked(first, self.len()) }\n         }\n     }\n \n     #[inline]\n     fn trim_right_matches<P: CharEq>(&self, mut pat: P) -> &str {\n-        match self.rfind(|&mut: c: char| !pat.matches(c)) {\n+        match self.rfind(|c: char| !pat.matches(c)) {\n             None => \"\",\n             Some(last) => {\n                 let next = self.char_range_at(last).next;"}, {"sha": "42c2dfbda082af112e9b208bc1839428f792eee8", "filename": "src/libcoretest/finally.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibcoretest%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibcoretest%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffinally.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -47,8 +47,9 @@ fn test_fail() {\n \n #[test]\n fn test_retval() {\n-    let mut closure = |&mut:| 10;\n-    let i = closure.finally(|| { });\n+    let mut closure = || 10;\n+    // FIXME(#16640) `: i32` annotation shouldn't be necessary\n+    let i: i32 = closure.finally(|| { });\n     assert_eq!(i, 10);\n }\n "}, {"sha": "375564c39bb5b1846f5a4d0f7fd27310ead2cb07", "filename": "src/libcoretest/str.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibcoretest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibcoretest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fstr.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -54,7 +54,7 @@ fn test_rsplitn_char_iterator() {\n     split.reverse();\n     assert_eq!(split, vec![\"\\nM\u00e4ry h\u00e4d \u00e4\", \"little\", \"l\u00e4mb\\nLittle\", \"l\u00e4mb\\n\"]);\n \n-    let mut split: Vec<&str> = data.rsplitn(3, |&: c: char| c == ' ').collect();\n+    let mut split: Vec<&str> = data.rsplitn(3, |c: char| c == ' ').collect();\n     split.reverse();\n     assert_eq!(split, vec![\"\\nM\u00e4ry h\u00e4d \u00e4\", \"little\", \"l\u00e4mb\\nLittle\", \"l\u00e4mb\\n\"]);\n \n@@ -63,7 +63,7 @@ fn test_rsplitn_char_iterator() {\n     split.reverse();\n     assert_eq!(split, vec![\"\\nM\u00e4ry h\u00e4d \", \" little l\", \"mb\\nLittle l\", \"mb\\n\"]);\n \n-    let mut split: Vec<&str> = data.rsplitn(3, |&: c: char| c == '\u00e4').collect();\n+    let mut split: Vec<&str> = data.rsplitn(3, |c: char| c == '\u00e4').collect();\n     split.reverse();\n     assert_eq!(split, vec![\"\\nM\u00e4ry h\u00e4d \", \" little l\", \"mb\\nLittle l\", \"mb\\n\"]);\n }\n@@ -79,10 +79,10 @@ fn test_split_char_iterator() {\n     rsplit.reverse();\n     assert_eq!(rsplit, vec![\"\\nM\u00e4ry\", \"h\u00e4d\", \"\u00e4\", \"little\", \"l\u00e4mb\\nLittle\", \"l\u00e4mb\\n\"]);\n \n-    let split: Vec<&str> = data.split(|&: c: char| c == ' ').collect();\n+    let split: Vec<&str> = data.split(|c: char| c == ' ').collect();\n     assert_eq!( split, vec![\"\\nM\u00e4ry\", \"h\u00e4d\", \"\u00e4\", \"little\", \"l\u00e4mb\\nLittle\", \"l\u00e4mb\\n\"]);\n \n-    let mut rsplit: Vec<&str> = data.split(|&: c: char| c == ' ').rev().collect();\n+    let mut rsplit: Vec<&str> = data.split(|c: char| c == ' ').rev().collect();\n     rsplit.reverse();\n     assert_eq!(rsplit, vec![\"\\nM\u00e4ry\", \"h\u00e4d\", \"\u00e4\", \"little\", \"l\u00e4mb\\nLittle\", \"l\u00e4mb\\n\"]);\n \n@@ -94,10 +94,10 @@ fn test_split_char_iterator() {\n     rsplit.reverse();\n     assert_eq!(rsplit, vec![\"\\nM\", \"ry h\", \"d \", \" little l\", \"mb\\nLittle l\", \"mb\\n\"]);\n \n-    let split: Vec<&str> = data.split(|&: c: char| c == '\u00e4').collect();\n+    let split: Vec<&str> = data.split(|c: char| c == '\u00e4').collect();\n     assert_eq!( split, vec![\"\\nM\", \"ry h\", \"d \", \" little l\", \"mb\\nLittle l\", \"mb\\n\"]);\n \n-    let mut rsplit: Vec<&str> = data.split(|&: c: char| c == '\u00e4').rev().collect();\n+    let mut rsplit: Vec<&str> = data.split(|c: char| c == '\u00e4').rev().collect();\n     rsplit.reverse();\n     assert_eq!(rsplit, vec![\"\\nM\", \"ry h\", \"d \", \" little l\", \"mb\\nLittle l\", \"mb\\n\"]);\n }"}, {"sha": "322f572ee0dda988db7c56ec494ea04d63bdfdf7", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -889,7 +889,7 @@ fn each_split_within<F>(ss: &str, lim: uint, mut it: F) -> bool where\n         lim = fake_i;\n     }\n \n-    let mut machine = |&mut: cont: &mut bool, (i, c): (uint, char)| -> bool {\n+    let mut machine = |cont: &mut bool, (i, c): (uint, char)| -> bool {\n         let whitespace = if c.is_whitespace() { Ws }       else { Cr };\n         let limit      = if (i - slice_start + 1) <= lim  { UnderLim } else { OverLim };\n "}, {"sha": "15f50188919b02d8060ddd41f18e54af6b705eb7", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -428,7 +428,7 @@ fn init() {\n         DIRECTIVES = mem::transmute(box directives);\n \n         // Schedule the cleanup for the globals for when the runtime exits.\n-        rt::at_exit(move |:| {\n+        rt::at_exit(move || {\n             assert!(!DIRECTIVES.is_null());\n             let _directives: Box<Vec<directive::LogDirective>> =\n                 mem::transmute(DIRECTIVES);"}, {"sha": "c2de380d094e6047950ad72b5dae2e41bf311522", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -949,7 +949,7 @@ impl NonSnakeCase {\n     fn to_snake_case(mut str: &str) -> String {\n         let mut words = vec![];\n         // Preserve leading underscores\n-        str = str.trim_left_matches(|&mut: c: char| {\n+        str = str.trim_left_matches(|c: char| {\n             if c == '_' {\n                 words.push(String::new());\n                 true"}, {"sha": "34bd1724e521b5eed6576c57b57525090c705bfc", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -72,7 +72,7 @@ struct CrateInfo {\n }\n \n pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) {\n-    let err = |&: s: &str| {\n+    let err = |s: &str| {\n         match (sp, sess) {\n             (_, None) => panic!(\"{}\", s),\n             (Some(sp), Some(sess)) => sess.span_err(sp, s),"}, {"sha": "9eab0af558379476143fed8b7abaa16f7386e0c1", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -59,7 +59,7 @@ pub fn each_child_of_item<F>(cstore: &cstore::CStore,\n     F: FnMut(decoder::DefLike, ast::Name, ast::Visibility),\n {\n     let crate_data = cstore.get_crate_data(def_id.krate);\n-    let get_crate_data = |&mut: cnum| {\n+    let get_crate_data = |cnum| {\n         cstore.get_crate_data(cnum)\n     };\n     decoder::each_child_of_item(cstore.intr.clone(),\n@@ -76,7 +76,7 @@ pub fn each_top_level_item_of_crate<F>(cstore: &cstore::CStore,\n     F: FnMut(decoder::DefLike, ast::Name, ast::Visibility),\n {\n     let crate_data = cstore.get_crate_data(cnum);\n-    let get_crate_data = |&mut: cnum| {\n+    let get_crate_data = |cnum| {\n         cstore.get_crate_data(cnum)\n     };\n     decoder::each_top_level_item_of_crate(cstore.intr.clone(),"}, {"sha": "df5732e2f65fc0b3e7b83f62e59ab4b792c6fbfc", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -1409,7 +1409,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             encode_parent_sort(rbml_w, 't');\n \n             let trait_item = &ms[i];\n-            let encode_trait_item = |&: rbml_w: &mut Encoder| {\n+            let encode_trait_item = |rbml_w: &mut Encoder| {\n                 // If this is a static method, we've already\n                 // encoded this.\n                 if is_nonstatic_method {"}, {"sha": "b558f838a51cba5d86f0caed48ddafe6922459d5", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -138,7 +138,7 @@ fn check_expr(v: &mut CheckCrateVisitor, e: &ast::Expr) {\n         ast::ExprBlock(ref block) => {\n             // Check all statements in the block\n             for stmt in &block.stmts {\n-                let block_span_err = |&: span|\n+                let block_span_err = |span|\n                     span_err!(v.tcx.sess, span, E0016,\n                               \"blocks in constants are limited to items and \\\n                                tail expressions\");"}, {"sha": "418cdf957183f829efdb8d43d3554fe3e8b0d191", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -1024,7 +1024,7 @@ fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,\n         })\n     }\n \n-    let check_move = |&: p: &Pat, sub: Option<&Pat>| {\n+    let check_move = |p: &Pat, sub: Option<&Pat>| {\n         // check legality of moving out of the enum\n \n         // x @ Foo(..) is legal, but x @ Foo(y) isn't."}, {"sha": "64fdd45e363473af391dcf4ae197290a19cebc3d", "filename": "src/librustc/middle/infer/region_inference/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'tcx> ConstraintGraph<'a, 'tcx> {\n         let mut i = 0;\n         let mut node_ids = FnvHashMap();\n         {\n-            let mut add_node = |&mut : node| {\n+            let mut add_node = |node| {\n                 if let Vacant(e) = node_ids.entry(node) {\n                     e.insert(i);\n                     i += 1;"}, {"sha": "e8215eb5660c0399edea4958a5f6e1482be60acd", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -666,7 +666,7 @@ fn resolve_expr(visitor: &mut RegionResolutionVisitor, expr: &ast::Expr) {\n \n     {\n         let region_maps = &mut visitor.region_maps;\n-        let terminating = |&: id| {\n+        let terminating = |id| {\n             let scope = CodeExtent::from_node_id(id);\n             region_maps.mark_as_terminating_scope(scope)\n         };"}, {"sha": "5f4880fb2660b70295f6fc8aefe73bd4bc1a7af9", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -6087,7 +6087,7 @@ pub fn hash_crate_independent<'tcx>(tcx: &ctxt<'tcx>, ty: Ty<'tcx>, svh: &Svh) -\n         macro_rules! byte { ($b:expr) => { ($b as u8).hash(state) } }\n         macro_rules! hash { ($e:expr) => { $e.hash(state) }  }\n \n-        let region = |&: state: &mut SipHasher, r: Region| {\n+        let region = |state: &mut SipHasher, r: Region| {\n             match r {\n                 ReStatic => {}\n                 ReLateBound(db, BrAnon(i)) => {\n@@ -6104,7 +6104,7 @@ pub fn hash_crate_independent<'tcx>(tcx: &ctxt<'tcx>, ty: Ty<'tcx>, svh: &Svh) -\n                 }\n             }\n         };\n-        let did = |&: state: &mut SipHasher, did: DefId| {\n+        let did = |state: &mut SipHasher, did: DefId| {\n             let h = if ast_util::is_local(did) {\n                 svh.clone()\n             } else {\n@@ -6113,10 +6113,10 @@ pub fn hash_crate_independent<'tcx>(tcx: &ctxt<'tcx>, ty: Ty<'tcx>, svh: &Svh) -\n             h.as_str().hash(state);\n             did.node.hash(state);\n         };\n-        let mt = |&: state: &mut SipHasher, mt: mt| {\n+        let mt = |state: &mut SipHasher, mt: mt| {\n             mt.mutbl.hash(state);\n         };\n-        let fn_sig = |&: state: &mut SipHasher, sig: &Binder<FnSig<'tcx>>| {\n+        let fn_sig = |state: &mut SipHasher, sig: &Binder<FnSig<'tcx>>| {\n             let sig = anonymize_late_bound_regions(tcx, sig).0;\n             for a in &sig.inputs { helper(tcx, *a, svh, state); }\n             if let ty::FnConverging(output) = sig.output {"}, {"sha": "d3d0f56c3ce904b7836f4f51ea80c4d4e39d2267", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -187,8 +187,8 @@ pub fn can_reach<T, S>(edges_map: &HashMap<T, Vec<T>, S>, source: T,\n /// ```\n /// pub fn memoized<T: Clone, U: Clone, M: MutableMap<T, U>>(\n ///    cache: &RefCell<M>,\n-///    f: &|&: T| -> U\n-/// ) -> impl |&: T| -> U {\n+///    f: &|T| -> U\n+/// ) -> impl |T| -> U {\n /// ```\n /// but currently it is not possible.\n ///"}, {"sha": "ff80bc550cb7800dc850be314c508de82297bf51", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -86,7 +86,7 @@ pub fn explain_region_and_span(cx: &ctxt, region: ty::Region)\n     return match region {\n       ReScope(scope) => {\n         let new_string;\n-        let on_unknown_scope = |&:| {\n+        let on_unknown_scope = || {\n           (format!(\"unknown scope: {:?}.  Please report a bug.\", scope), None)\n         };\n         let span = match scope.span(&cx.map) {"}, {"sha": "afb5c948f188542b20cb63c72c03b15d38d9be0e", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -227,7 +227,7 @@ impl Target {\n \n         let handler = diagnostic::default_handler(diagnostic::Auto, None, true);\n \n-        let get_req_field = |&: name: &str| {\n+        let get_req_field = |name: &str| {\n             match obj.find(name)\n                      .map(|s| s.as_string())\n                      .and_then(|os| os.map(|s| s.to_string())) {"}, {"sha": "ecbf3a4366d4a28af28b1dfb7c83fc42db7d94cb", "filename": "src/librustc_borrowck/borrowck/fragments.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -43,7 +43,7 @@ enum Fragment {\n \n impl Fragment {\n     fn loan_path_repr<'tcx>(&self, move_data: &MoveData<'tcx>, tcx: &ty::ctxt<'tcx>) -> String {\n-        let repr = |&: mpi| move_data.path_loan_path(mpi).repr(tcx);\n+        let repr = |mpi| move_data.path_loan_path(mpi).repr(tcx);\n         match *self {\n             Just(mpi) => repr(mpi),\n             AllButOneFrom(mpi) => format!(\"$(allbutone {})\", repr(mpi)),\n@@ -53,7 +53,7 @@ impl Fragment {\n     fn loan_path_user_string<'tcx>(&self,\n                                    move_data: &MoveData<'tcx>,\n                                    tcx: &ty::ctxt<'tcx>) -> String {\n-        let user_string = |&: mpi| move_data.path_loan_path(mpi).user_string(tcx);\n+        let user_string = |mpi| move_data.path_loan_path(mpi).user_string(tcx);\n         match *self {\n             Just(mpi) => user_string(mpi),\n             AllButOneFrom(mpi) => format!(\"$(allbutone {})\", user_string(mpi)),\n@@ -139,9 +139,9 @@ pub fn instrument_move_fragments<'tcx>(this: &MoveData<'tcx>,\n \n     if !span_err && !print { return; }\n \n-    let instrument_all_paths = |&: kind, vec_rc: &Vec<MovePathIndex>| {\n+    let instrument_all_paths = |kind, vec_rc: &Vec<MovePathIndex>| {\n         for (i, mpi) in vec_rc.iter().enumerate() {\n-            let render = |&:| this.path_loan_path(*mpi).user_string(tcx);\n+            let render = || this.path_loan_path(*mpi).user_string(tcx);\n             if span_err {\n                 tcx.sess.span_err(sp, &format!(\"{}: `{}`\", kind, render())[]);\n             }\n@@ -151,9 +151,9 @@ pub fn instrument_move_fragments<'tcx>(this: &MoveData<'tcx>,\n         }\n     };\n \n-    let instrument_all_fragments = |&: kind, vec_rc: &Vec<Fragment>| {\n+    let instrument_all_fragments = |kind, vec_rc: &Vec<Fragment>| {\n         for (i, f) in vec_rc.iter().enumerate() {\n-            let render = |&:| f.loan_path_user_string(this, tcx);\n+            let render = || f.loan_path_user_string(this, tcx);\n             if span_err {\n                 tcx.sess.span_err(sp, &format!(\"{}: `{}`\", kind, render())[]);\n             }\n@@ -186,11 +186,11 @@ pub fn fixup_fragment_sets<'tcx>(this: &MoveData<'tcx>, tcx: &ty::ctxt<'tcx>) {\n     let mut moved = mem::replace(&mut fragments.moved_leaf_paths, vec![]);\n     let mut assigned = mem::replace(&mut fragments.assigned_leaf_paths, vec![]);\n \n-    let path_lps = |&: mpis: &[MovePathIndex]| -> Vec<String> {\n+    let path_lps = |mpis: &[MovePathIndex]| -> Vec<String> {\n         mpis.iter().map(|mpi| this.path_loan_path(*mpi).repr(tcx)).collect()\n     };\n \n-    let frag_lps = |&: fs: &[Fragment]| -> Vec<String> {\n+    let frag_lps = |fs: &[Fragment]| -> Vec<String> {\n         fs.iter().map(|f| f.loan_path_repr(this, tcx)).collect()\n     };\n \n@@ -343,7 +343,7 @@ fn add_fragment_siblings_for_extension<'tcx>(this: &MoveData<'tcx>,\n                                                                         Rc<LoanPath<'tcx>>)>) {\n     let parent_ty = parent_lp.to_type();\n \n-    let mut add_fragment_sibling_local = |&mut : field_name, variant_did| {\n+    let mut add_fragment_sibling_local = |field_name, variant_did| {\n         add_fragment_sibling_core(\n             this, tcx, gathered_fragments, parent_lp.clone(), mc, field_name, origin_lp,\n             variant_did);"}, {"sha": "ac1e097be6ff23fb780f8b4e946027f1feb5e28d", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -58,7 +58,7 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                 cmt: mc::cmt<'tcx>) -> RestrictionResult<'tcx> {\n         debug!(\"restrict(cmt={})\", cmt.repr(self.bccx.tcx));\n \n-        let new_lp = |&: v: LoanPathKind<'tcx>| Rc::new(LoanPath::new(v, cmt.ty));\n+        let new_lp = |v: LoanPathKind<'tcx>| Rc::new(LoanPath::new(v, cmt.ty));\n \n         match cmt.cat.clone() {\n             mc::cat_rvalue(..) => {"}, {"sha": "824518009802e5738876b86387d771b365cafd71", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -422,7 +422,7 @@ pub fn opt_loan_path<'tcx>(cmt: &mc::cmt<'tcx>) -> Option<Rc<LoanPath<'tcx>>> {\n     //! which allows it to share common loan path pieces as it\n     //! traverses the CMT.\n \n-    let new_lp = |&: v: LoanPathKind<'tcx>| Rc::new(LoanPath::new(v, cmt.ty));\n+    let new_lp = |v: LoanPathKind<'tcx>| Rc::new(LoanPath::new(v, cmt.ty));\n \n     match cmt.cat {\n         mc::cat_rvalue(..) |"}, {"sha": "56bf3ae7fd5a30ad536bf4d537c8465b93727a68", "filename": "src/librustc_borrowck/graphviz.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_borrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_borrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fgraphviz.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -99,7 +99,7 @@ impl<'a, 'tcx> DataflowLabeller<'a, 'tcx> {\n \n     fn dataflow_loans_for(&self, e: EntryOrExit, cfgidx: CFGIndex) -> String {\n         let dfcx = &self.analysis_data.loans;\n-        let loan_index_to_path = |&mut: loan_index| {\n+        let loan_index_to_path = |loan_index| {\n             let all_loans = &self.analysis_data.all_loans;\n             let l: &borrowck::Loan = &all_loans[loan_index];\n             l.loan_path()\n@@ -109,7 +109,7 @@ impl<'a, 'tcx> DataflowLabeller<'a, 'tcx> {\n \n     fn dataflow_moves_for(&self, e: EntryOrExit, cfgidx: CFGIndex) -> String {\n         let dfcx = &self.analysis_data.move_data.dfcx_moves;\n-        let move_index_to_path = |&mut: move_index| {\n+        let move_index_to_path = |move_index| {\n             let move_data = &self.analysis_data.move_data.move_data;\n             let moves = move_data.moves.borrow();\n             let the_move: &borrowck::move_data::Move = &(*moves)[move_index];\n@@ -120,7 +120,7 @@ impl<'a, 'tcx> DataflowLabeller<'a, 'tcx> {\n \n     fn dataflow_assigns_for(&self, e: EntryOrExit, cfgidx: CFGIndex) -> String {\n         let dfcx = &self.analysis_data.move_data.dfcx_assign;\n-        let assign_index_to_path = |&mut: assign_index| {\n+        let assign_index_to_path = |assign_index| {\n             let move_data = &self.analysis_data.move_data.move_data;\n             let assignments = move_data.var_assignments.borrow();\n             let assignment: &borrowck::move_data::Assignment = &(*assignments)[assign_index];"}, {"sha": "5894c52886a32ac01d0e6308fe1560730f6190f8", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -214,7 +214,7 @@ impl<'a> PhaseController<'a> {\n     pub fn basic() -> PhaseController<'a> {\n         PhaseController {\n             stop: false,\n-            callback: box |&: _| {},\n+            callback: box |_| {},\n         }\n     }\n }\n@@ -794,7 +794,7 @@ fn write_out_deps(sess: &Session,\n         _ => return,\n     };\n \n-    let result = (|&:| -> old_io::IoResult<()> {\n+    let result = (|| -> old_io::IoResult<()> {\n         // Build a list of files used to compile the output and\n         // write Makefile-compatible dependency rules\n         let files: Vec<String> = sess.codemap().files.borrow()"}, {"sha": "fd51d2f3b8ff32b7132e141d1e27b36577074e72", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -93,7 +93,7 @@ pub mod driver;\n pub mod pretty;\n \n pub fn run(args: Vec<String>) -> int {\n-    monitor(move |:| run_compiler(args.as_slice()));\n+    monitor(move || run_compiler(args.as_slice()));\n     0\n }\n \n@@ -362,7 +362,7 @@ Available lint options:\n     let max_name_len = plugin.iter().chain(builtin.iter())\n         .map(|&s| s.name.width(true))\n         .max().unwrap_or(0);\n-    let padded = |&: x: &str| {\n+    let padded = |x: &str| {\n         let mut s = repeat(\" \").take(max_name_len - x.chars().count())\n                                .collect::<String>();\n         s.push_str(x);\n@@ -373,7 +373,7 @@ Available lint options:\n     println!(\"    {}  {:7.7}  {}\", padded(\"name\"), \"default\", \"meaning\");\n     println!(\"    {}  {:7.7}  {}\", padded(\"----\"), \"-------\", \"-------\");\n \n-    let print_lints = |&: lints: Vec<&Lint>| {\n+    let print_lints = |lints: Vec<&Lint>| {\n         for lint in lints {\n             let name = lint.name_lower().replace(\"_\", \"-\");\n             println!(\"    {}  {:7.7}  {}\",\n@@ -389,7 +389,7 @@ Available lint options:\n     let max_name_len = plugin_groups.iter().chain(builtin_groups.iter())\n         .map(|&(s, _)| s.width(true))\n         .max().unwrap_or(0);\n-    let padded = |&: x: &str| {\n+    let padded = |x: &str| {\n         let mut s = repeat(\" \").take(max_name_len - x.chars().count())\n                                .collect::<String>();\n         s.push_str(x);\n@@ -400,7 +400,7 @@ Available lint options:\n     println!(\"    {}  {}\", padded(\"name\"), \"sub-lints\");\n     println!(\"    {}  {}\", padded(\"----\"), \"---------\");\n \n-    let print_lint_groups = |&: lints: Vec<(&'static str, Vec<lint::LintId>)>| {\n+    let print_lint_groups = |lints: Vec<(&'static str, Vec<lint::LintId>)>| {\n         for (name, to) in lints {\n             let name = name.chars().map(|x| x.to_lowercase())\n                            .collect::<String>().replace(\"_\", \"-\");"}, {"sha": "27e607dad59a86b5881f1662cdddd7846109e5c6", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -388,7 +388,7 @@ impl UserIdentifiedItem {\n     }\n \n     fn to_one_node_id(self, user_option: &str, sess: &Session, map: &ast_map::Map) -> ast::NodeId {\n-        let fail_because = |&: is_wrong_because| -> ast::NodeId {\n+        let fail_because = |is_wrong_because| -> ast::NodeId {\n             let message =\n                 format!(\"{} needs NodeId (int) or unique \\\n                          path suffix (b::c::d); got {}, which {}\","}, {"sha": "aa9b6c479bb78f9b56e57dd5f5339a9f8c04c9f8", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -719,8 +719,8 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n     fn check_path(&mut self, span: Span, path_id: ast::NodeId, path: &ast::Path) {\n         debug!(\"privacy - path {}\", self.nodestr(path_id));\n         let orig_def = self.tcx.def_map.borrow()[path_id].clone();\n-        let ck = |&: tyname: &str| {\n-            let ck_public = |&: def: ast::DefId| {\n+        let ck = |tyname: &str| {\n+            let ck_public = |def: ast::DefId| {\n                 debug!(\"privacy - ck_public {:?}\", def);\n                 let name = token::get_ident(path.segments.last().unwrap().identifier);\n                 let origdid = orig_def.def_id();\n@@ -924,7 +924,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n                 }\n             }\n             ast::ExprPath(_) | ast::ExprQPath(_) => {\n-                let guard = |&: did: ast::DefId| {\n+                let guard = |did: ast::DefId| {\n                     let fields = ty::lookup_struct_fields(self.tcx, did);\n                     let any_priv = fields.iter().any(|f| {\n                         f.vis != ast::Public && (\n@@ -1076,7 +1076,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n     /// later on down the road...\n     fn check_sane_privacy(&self, item: &ast::Item) {\n         let tcx = self.tcx;\n-        let check_inherited = |&: sp: Span, vis: ast::Visibility, note: &str| {\n+        let check_inherited = |sp: Span, vis: ast::Visibility, note: &str| {\n             if vis != ast::Inherited {\n                 tcx.sess.span_err(sp, \"unnecessary visibility qualifier\");\n                 if note.len() > 0 {\n@@ -1156,7 +1156,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n                 tcx.sess.span_err(sp, \"visibility has no effect inside functions\");\n             }\n         }\n-        let check_struct = |&: def: &ast::StructDef| {\n+        let check_struct = |def: &ast::StructDef| {\n             for f in &def.fields {\n                match f.node.kind {\n                     ast::NamedField(_, p) => check_inherited(tcx, f.span, p),"}, {"sha": "27ab1cdbdded7287ac8ba154b1cbebe34ee9ac4b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -1475,7 +1475,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let mut import_resolutions = module_.import_resolutions.borrow_mut();\n         let import_resolution = &mut (*import_resolutions)[target];\n         {\n-            let mut check_and_write_import = |&mut: namespace, result: &_, used_public: &mut bool| {\n+            let mut check_and_write_import = |namespace, result: &_, used_public: &mut bool| {\n                 let namespace_name = match namespace {\n                     TypeNS => \"type\",\n                     ValueNS => \"value\",\n@@ -1714,7 +1714,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         // Merge the child item into the import resolution.\n         {\n-            let mut merge_child_item = |&mut : namespace| {\n+            let mut merge_child_item = |namespace| {\n                 if name_bindings.defined_in_namespace_with(namespace, IMPORTABLE | PUBLIC) {\n                     let namespace_name = match namespace {\n                         TypeNS => \"type\","}, {"sha": "89e7f1104ad3ad3d8fb639da329ad36903c834d2", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -126,7 +126,7 @@ pub const RLIB_BYTECODE_OBJECT_V1_DATA_OFFSET: uint =\n pub fn find_crate_name(sess: Option<&Session>,\n                        attrs: &[ast::Attribute],\n                        input: &Input) -> String {\n-    let validate = |&: s: String, span: Option<Span>| {\n+    let validate = |s: String, span: Option<Span>| {\n         creader::validate_crate_name(sess, &s[], span);\n         s\n     };\n@@ -1006,7 +1006,7 @@ fn link_args(cmd: &mut Command,\n     if sess.opts.cg.rpath {\n         let sysroot = sess.sysroot();\n         let target_triple = &sess.opts.target_triple[];\n-        let get_install_prefix_lib_path = |:| {\n+        let get_install_prefix_lib_path = || {\n             let install_prefix = option_env!(\"CFG_PREFIX\").expect(\"CFG_PREFIX\");\n             let tlib = filesearch::relative_target_lib_path(sysroot, target_triple);\n             let mut path = Path::new(install_prefix);"}, {"sha": "8cd2e5905606d5607c97abe352adea0e31ee967a", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -439,7 +439,7 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n \n             // If we're verifying or linting, add them to the function pass\n             // manager.\n-            let addpass = |&: pass: &str| {\n+            let addpass = |pass: &str| {\n                 let pass = CString::from_slice(pass.as_bytes());\n                 llvm::LLVMRustAddPass(fpm, pass.as_ptr())\n             };\n@@ -660,7 +660,7 @@ pub fn run_passes(sess: &Session,\n \n     // Produce final compile outputs.\n \n-    let copy_if_one_unit = |&: ext: &str, output_type: config::OutputType, keep_numbered: bool| {\n+    let copy_if_one_unit = |ext: &str, output_type: config::OutputType, keep_numbered: bool| {\n         // Three cases:\n         if sess.opts.cg.codegen_units == 1 {\n             // 1) Only one codegen unit.  In this case it's no difficulty\n@@ -685,7 +685,7 @@ pub fn run_passes(sess: &Session,\n         }\n     };\n \n-    let link_obj = |&: output_path: &Path| {\n+    let link_obj = |output_path: &Path| {\n         // Running `ld -r` on a single input is kind of pointless.\n         if sess.opts.cg.codegen_units == 1 {\n             fs::copy(&crate_output.with_extension(\"0.o\"),\n@@ -910,7 +910,7 @@ fn run_work_multithreaded(sess: &Session,\n         let mut tx = Some(tx);\n         futures.push(rx);\n \n-        thread::Builder::new().name(format!(\"codegen-{}\", i)).spawn(move |:| {\n+        thread::Builder::new().name(format!(\"codegen-{}\", i)).spawn(move || {\n             let diag_handler = mk_handler(true, box diag_emitter);\n \n             // Must construct cgcx inside the proc because it has non-Send\n@@ -1001,7 +1001,7 @@ unsafe fn configure_llvm(sess: &Session) {\n     let mut llvm_c_strs = Vec::new();\n     let mut llvm_args = Vec::new();\n     {\n-        let mut add = |&mut : arg: &str| {\n+        let mut add = |arg: &str| {\n             let s = CString::from_slice(arg.as_bytes());\n             llvm_args.push(s.as_ptr());\n             llvm_c_strs.push(s);"}, {"sha": "04d2fe7627ace37b8ecdce225d8662d76f89a0e9", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -747,7 +747,7 @@ fn pick_column_to_specialize(def_map: &DefMap, m: &[Match]) -> Option<uint> {\n         }\n     }\n \n-    let column_score = |&: m: &[Match], col: uint| -> uint {\n+    let column_score = |m: &[Match], col: uint| -> uint {\n         let total_score = m.iter()\n             .map(|row| row.pats[col])\n             .map(|pat| pat_score(def_map, pat))\n@@ -761,7 +761,7 @@ fn pick_column_to_specialize(def_map: &DefMap, m: &[Match]) -> Option<uint> {\n         }\n     };\n \n-    let column_contains_any_nonwild_patterns = |&: &col: &uint| -> bool {\n+    let column_contains_any_nonwild_patterns = |&col: &uint| -> bool {\n         m.iter().any(|row| match row.pats[col].node {\n             ast::PatWild(_) => false,\n             _ => true"}, {"sha": "062a21dffa8addd92167eb37aa006e686cdc834f", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -540,7 +540,7 @@ pub fn compare_scalar_types<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                                         t: Ty<'tcx>,\n                                         op: ast::BinOp_)\n                                         -> Result<'blk, 'tcx> {\n-    let f = |&: a| Result::new(cx, compare_scalar_values(cx, lhs, rhs, a, op));\n+    let f = |a| Result::new(cx, compare_scalar_values(cx, lhs, rhs, a, op));\n \n     match t.sty {\n         ty::ty_tup(ref tys) if tys.is_empty() => f(nil_type),\n@@ -2757,7 +2757,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n     let val = match item {\n         ast_map::NodeItem(i) => {\n             let ty = ty::node_id_to_type(ccx.tcx(), i.id);\n-            let sym = |&:| exported_name(ccx, id, ty, &i.attrs[]);\n+            let sym = || exported_name(ccx, id, ty, &i.attrs[]);\n \n             let v = match i.node {\n                 ast::ItemStatic(_, _, ref expr) => {\n@@ -3016,14 +3016,14 @@ fn internalize_symbols(cx: &SharedCrateContext, reachable: &HashSet<String>) {\n     unsafe {\n         let mut declared = HashSet::new();\n \n-        let iter_globals = |&: llmod| {\n+        let iter_globals = |llmod| {\n             ValueIter {\n                 cur: llvm::LLVMGetFirstGlobal(llmod),\n                 step: llvm::LLVMGetNextGlobal,\n             }\n         };\n \n-        let iter_functions = |&: llmod| {\n+        let iter_functions = |llmod| {\n             ValueIter {\n                 cur: llvm::LLVMGetFirstFunction(llmod),\n                 step: llvm::LLVMGetNextFunction,"}, {"sha": "17a92fe649d28da03897c5c413532471f84f9be5", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -289,7 +289,7 @@ pub fn const_expr<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, e: &ast::Expr)\n // the bool returned is whether this expression can be inlined into other crates\n // if it's assigned to a static.\n fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr) -> ValueRef {\n-    let map_list = |&: exprs: &[P<ast::Expr>]| {\n+    let map_list = |exprs: &[P<ast::Expr>]| {\n         exprs.iter().map(|e| const_expr(cx, &**e).0)\n              .fold(Vec::new(), |mut l, val| { l.push(val); l })\n     };"}, {"sha": "1100c873e0fa2c5b046059e63f1952f7b40fbdf0", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -2453,7 +2453,7 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         })\n         .collect();\n \n-    let discriminant_type_metadata = |&: inttype| {\n+    let discriminant_type_metadata = |inttype| {\n         // We can reuse the type of the discriminant for all monomorphized\n         // instances of an enum because it doesn't depend on any type parameters.\n         // The def_id, uniquely identifying the enum's polytype acts as key in"}, {"sha": "332f85f116b46e7b26cc9029c1d7cc59874e200a", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -350,7 +350,7 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         debug!(\"dest_ty={}\", unsized_ty.repr(bcx.tcx()));\n         // Closures for extracting and manipulating the data and payload parts of\n         // the fat pointer.\n-        let info = |: bcx, _val| unsized_info(bcx,\n+        let info = |bcx, _val| unsized_info(bcx,\n                                               k,\n                                               expr.id,\n                                               datum_ty,\n@@ -382,8 +382,8 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                -> DatumBlock<'blk, 'tcx, Expr> {\n         let tcx = bcx.tcx();\n         let dest_ty = ty::close_type(tcx, datum.ty);\n-        let base = |: bcx, val| Load(bcx, get_dataptr(bcx, val));\n-        let len = |: bcx, val| Load(bcx, get_len(bcx, val));\n+        let base = |bcx, val| Load(bcx, get_dataptr(bcx, val));\n+        let len = |bcx, val| Load(bcx, get_len(bcx, val));\n         into_fat_ptr(bcx, expr, datum, dest_ty, base, len)\n     }\n "}, {"sha": "f2d80f36297f76e00c6d329bf9442239e4506b99", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -431,7 +431,7 @@ pub fn trans_native_call<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n // ABIs are handled at all correctly.\n fn gate_simd_ffi(tcx: &ty::ctxt, decl: &ast::FnDecl, ty: &ty::BareFnTy) {\n     if !tcx.sess.features.borrow().simd_ffi {\n-        let check = |&: ast_ty: &ast::Ty, ty: ty::Ty| {\n+        let check = |ast_ty: &ast::Ty, ty: ty::Ty| {\n             if ty::type_is_simd(tcx, ty) {\n                 tcx.sess.span_err(ast_ty.span,\n                               &format!(\"use of SIMD type `{}` in FFI is highly experimental and \\\n@@ -649,7 +649,7 @@ pub fn trans_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         // Array for the arguments we will pass to the rust function.\n         let mut llrust_args = Vec::new();\n         let mut next_foreign_arg_counter: c_uint = 0;\n-        let mut next_foreign_arg = |&mut : pad: bool| -> c_uint {\n+        let mut next_foreign_arg = |pad: bool| -> c_uint {\n             next_foreign_arg_counter += if pad {\n                 2\n             } else {"}, {"sha": "be8a4ec89e06549796ccb9184b278d34665cd00e", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -183,7 +183,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                 // This should be caught by the intrinsicck pass\n                 assert_eq!(in_type_size, out_type_size);\n \n-                let nonpointer_nonaggregate = |&: llkind: TypeKind| -> bool {\n+                let nonpointer_nonaggregate = |llkind: TypeKind| -> bool {\n                     use llvm::TypeKind::*;\n                     match llkind {\n                         Half | Float | Double | X86_FP80 | FP128 |"}, {"sha": "5796e72a61018e126d43f7cc6c32a6c8ad1313c3", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -139,7 +139,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     // This shouldn't need to option dance.\n     let mut hash_id = Some(hash_id);\n-    let mut mk_lldecl = |&mut : abi: abi::Abi| {\n+    let mut mk_lldecl = |abi: abi::Abi| {\n         let lldecl = if abi != abi::Rust {\n             foreign::decl_rust_fn_with_foreign_abi(ccx, mono_ty, &s[])\n         } else {\n@@ -149,7 +149,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         ccx.monomorphized().borrow_mut().insert(hash_id.take().unwrap(), lldecl);\n         lldecl\n     };\n-    let setup_lldecl = |&: lldecl, attrs: &[ast::Attribute]| {\n+    let setup_lldecl = |lldecl, attrs: &[ast::Attribute]| {\n         base::update_linkage(ccx, lldecl, None, base::OriginalTranslation);\n         set_llvm_fn_attrs(ccx, attrs, lldecl);\n "}, {"sha": "063300a1d72803778be778f1febfaf6036da028a", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -342,7 +342,7 @@ pub fn all_traits<'a>(ccx: &'a CrateCtxt) -> AllTraits<'a> {\n             }\n         }\n         let cstore = &ccx.tcx.sess.cstore;\n-        cstore.iter_crate_data(|&mut: cnum, _| {\n+        cstore.iter_crate_data(|cnum, _| {\n             csearch::each_top_level_item_of_crate(cstore, cnum, |dl, _, _| {\n                 handle_external_def(&mut traits, ccx, cstore, dl)\n             })"}, {"sha": "fdb2f64732fcea5283c9c011da5049de06c61996", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -801,7 +801,7 @@ pub fn check_item<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx ast::Item) {\n fn check_trait_on_unimplemented<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                generics: &ast::Generics,\n                                item: &ast::Item) {\n-    if let Some(ref attr) = item.attrs.iter().find(|&: a| {\n+    if let Some(ref attr) = item.attrs.iter().find(|a| {\n         a.check_name(\"rustc_on_unimplemented\")\n     }) {\n         if let Some(ref istring) = attr.value_str() {\n@@ -1715,7 +1715,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     {\n         let raw_ty = self.expr_ty(expr);\n         let raw_ty = self.infcx().shallow_resolve(raw_ty);\n-        let resolve_ty = |&: ty: Ty<'tcx>| self.infcx().resolve_type_vars_if_possible(&ty);\n+        let resolve_ty = |ty: Ty<'tcx>| self.infcx().resolve_type_vars_if_possible(&ty);\n         ty::adjust_ty(self.tcx(),\n                       expr.span,\n                       expr.id,"}, {"sha": "2596f90bfc6262fa792b84127187fa48e8eea652", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -597,7 +597,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n         // parameter (by inspecting parent of its binding declaration\n         // to see if it is introduced by a type or by a fn/impl).\n \n-        let check_result = |&: this:&ConstraintContext| -> bool {\n+        let check_result = |this:&ConstraintContext| -> bool {\n             let tcx = this.terms_cx.tcx;\n             let decl_id = this.find_binding_for_lifetime(param_id);\n             // Currently only called on lifetimes; double-checking that."}, {"sha": "8c0ab654ce49817252e5c73b36210f4801ecd89d", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -61,7 +61,7 @@ fn doit(sess: &parse::ParseSess, mut lexer: lexer::StringReader,\n     loop {\n         let next = lexer.next_token();\n \n-        let snip = |&: sp| sess.span_diagnostic.cm.span_to_snippet(sp).unwrap();\n+        let snip = |sp| sess.span_diagnostic.cm.span_to_snippet(sp).unwrap();\n \n         if next.tok == token::Eof { break }\n "}, {"sha": "415d4903902c2108d7c95277b34db01bb7f81b6f", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -420,7 +420,7 @@ impl LangString {\n         let mut seen_other_tags = false;\n         let mut data = LangString::all_false();\n \n-        let tokens = string.split(|&: c: char|\n+        let tokens = string.split(|c: char|\n             !(c == '_' || c == '-' || c.is_alphanumeric())\n         );\n "}, {"sha": "a820fd4d50a123fb3f55edee10ec2a6687c05b68", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -365,7 +365,7 @@ fn rust_input(cratefile: &str, externs: core::Externs, matches: &getopts::Matche\n     let cr = Path::new(cratefile);\n     info!(\"starting to run rustc\");\n \n-    let (mut krate, analysis) = std::thread::Thread::scoped(move |:| {\n+    let (mut krate, analysis) = std::thread::Thread::scoped(move || {\n         use rustc::session::config::Input;\n \n         let cr = cr;"}, {"sha": "aa5cdb9da5fc04fcf498f077dd24769241310dd7", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -148,7 +148,7 @@ fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n     let w1 = old_io::ChanWriter::new(tx);\n     let w2 = w1.clone();\n     let old = old_io::stdio::set_stderr(box w1);\n-    Thread::spawn(move |:| {\n+    Thread::spawn(move || {\n         let mut p = old_io::ChanReader::new(rx);\n         let mut err = match old {\n             Some(old) => {"}, {"sha": "4ae7d3437fd93f689f8bdaeb67257f05c50641aa", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -321,10 +321,10 @@ pub fn float_to_str_bytes_common<T: Float>(\n         // cut off the one extra digit, and depending on its value\n         // round the remaining ones.\n         if limit_digits && dig == digit_count {\n-            let ascii2value = |&: chr: u8| {\n+            let ascii2value = |chr: u8| {\n                 (chr as char).to_digit(radix).unwrap()\n             };\n-            let value2ascii = |&: val: uint| {\n+            let value2ascii = |val: uint| {\n                 char::from_digit(val, radix).unwrap() as u8\n             };\n "}, {"sha": "9c89c943994630f46c1b7633ec24cabe5dc8fb6a", "filename": "src/libstd/old_io/net/ip.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -323,25 +323,25 @@ impl<'a> Parser<'a> {\n     }\n \n     fn read_ip_addr(&mut self) -> Option<IpAddr> {\n-        let ipv4_addr = |&mut: p: &mut Parser| p.read_ipv4_addr();\n-        let ipv6_addr = |&mut: p: &mut Parser| p.read_ipv6_addr();\n+        let ipv4_addr = |p: &mut Parser| p.read_ipv4_addr();\n+        let ipv6_addr = |p: &mut Parser| p.read_ipv6_addr();\n         self.read_or(&mut [box ipv4_addr, box ipv6_addr])\n     }\n \n     fn read_socket_addr(&mut self) -> Option<SocketAddr> {\n-        let ip_addr = |&: p: &mut Parser| {\n-            let ipv4_p = |&mut: p: &mut Parser| p.read_ip_addr();\n-            let ipv6_p = |&mut: p: &mut Parser| {\n-                let open_br = |&: p: &mut Parser| p.read_given_char('[');\n-                let ip_addr = |&: p: &mut Parser| p.read_ipv6_addr();\n-                let clos_br = |&: p: &mut Parser| p.read_given_char(']');\n+        let ip_addr = |p: &mut Parser| {\n+            let ipv4_p = |p: &mut Parser| p.read_ip_addr();\n+            let ipv6_p = |p: &mut Parser| {\n+                let open_br = |p: &mut Parser| p.read_given_char('[');\n+                let ip_addr = |p: &mut Parser| p.read_ipv6_addr();\n+                let clos_br = |p: &mut Parser| p.read_given_char(']');\n                 p.read_seq_3::<char, IpAddr, char, _, _, _>(open_br, ip_addr, clos_br)\n                         .map(|t| match t { (_, ip, _) => ip })\n             };\n             p.read_or(&mut [box ipv4_p, box ipv6_p])\n         };\n-        let colon = |&: p: &mut Parser| p.read_given_char(':');\n-        let port  = |&: p: &mut Parser| p.read_number(10, 5, 0x10000).map(|n| n as u16);\n+        let colon = |p: &mut Parser| p.read_given_char(':');\n+        let port  = |p: &mut Parser| p.read_number(10, 5, 0x10000).map(|n| n as u16);\n \n         // host, colon, port\n         self.read_seq_3::<IpAddr, char, u16, _, _, _>(ip_addr, colon, port)"}, {"sha": "9039514249493da9b6801a0cf585b251d42a0d00", "filename": "src/libstd/old_io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fold_io%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fold_io%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fprocess.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -703,7 +703,7 @@ impl Process {\n             let (tx, rx) = channel();\n             match stream {\n                 Some(stream) => {\n-                    Thread::spawn(move |:| {\n+                    Thread::spawn(move || {\n                         let mut stream = stream;\n                         tx.send(stream.read_to_end()).unwrap();\n                     });"}, {"sha": "c2f5133eaf3fe5547a3fd450274d0948d127cee4", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -125,7 +125,7 @@ mod imp {\n             assert!(take() == Some(expected.clone()));\n             assert!(take() == None);\n \n-            (|&mut:| {\n+            (|| {\n             }).finally(|| {\n                 // Restore the actual global state.\n                 match saved_value {"}, {"sha": "a230e35dac8c3db163a46ba7b4e56713c3f804b0", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -126,7 +126,7 @@ impl<A:Send> Future<A> {\n          * waiting for the result to be received on the port.\n          */\n \n-        Future::from_fn(move |:| {\n+        Future::from_fn(move || {\n             rx.recv().unwrap()\n         })\n     }\n@@ -143,7 +143,7 @@ impl<A:Send> Future<A> {\n \n         let (tx, rx) = channel();\n \n-        Thread::spawn(move |:| {\n+        Thread::spawn(move || {\n             // Don't panic if the other end has hung up\n             let _ = tx.send(blk());\n         });"}, {"sha": "684a46fd6ff5fa51fde077b0540c2c7a604491b5", "filename": "src/libstd/sync/task_pool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fsync%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fsync%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ftask_pool.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -112,7 +112,7 @@ impl TaskPool {\n }\n \n fn spawn_in_pool(jobs: Arc<Mutex<Receiver<Thunk>>>) {\n-    Thread::spawn(move |:| {\n+    Thread::spawn(move || {\n         // Will spawn a new thread on panic unless it is cancelled.\n         let sentinel = Sentinel::new(&jobs);\n "}, {"sha": "255f474d4f4afb42bca461c9a0fad3f5013dee20", "filename": "src/libstd/sys/common/helper_thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -95,14 +95,14 @@ impl<M: Send> Helper<M> {\n                 let receive = RaceBox(receive);\n \n                 let t = f();\n-                Thread::spawn(move |:| {\n+                Thread::spawn(move || {\n                     helper(receive.0, rx, t);\n                     let _g = self.lock.lock().unwrap();\n                     *self.shutdown.get() = true;\n                     self.cond.notify_one()\n                 });\n \n-                rt::at_exit(move|:| { self.shutdown() });\n+                rt::at_exit(move|| { self.shutdown() });\n                 *self.initialized.get() = true;\n             }\n         }"}, {"sha": "7325e0a5ac8ddfaeb3726aeca06be0c723b5d987", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -723,8 +723,8 @@ impl TcpStream {\n \n     pub fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {\n         let fd = self.fd();\n-        let dolock = |&:| self.lock_nonblocking();\n-        let doread = |&mut: nb| unsafe {\n+        let dolock = || self.lock_nonblocking();\n+        let doread = |nb| unsafe {\n             let flags = if nb {c::MSG_DONTWAIT} else {0};\n             libc::recv(fd,\n                        buf.as_mut_ptr() as *mut libc::c_void,\n@@ -736,8 +736,8 @@ impl TcpStream {\n \n     pub fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n         let fd = self.fd();\n-        let dolock = |&:| self.lock_nonblocking();\n-        let dowrite = |&: nb: bool, buf: *const u8, len: uint| unsafe {\n+        let dolock = || self.lock_nonblocking();\n+        let dowrite = |nb: bool, buf: *const u8, len: uint| unsafe {\n             let flags = if nb {c::MSG_DONTWAIT} else {0};\n             libc::send(fd,\n                        buf as *const _,\n@@ -871,7 +871,7 @@ impl UdpSocket {\n         let mut addrlen: libc::socklen_t =\n                 mem::size_of::<libc::sockaddr_storage>() as libc::socklen_t;\n \n-        let dolock = |&:| self.lock_nonblocking();\n+        let dolock = || self.lock_nonblocking();\n         let n = try!(read(fd, self.read_deadline, dolock, |nb| unsafe {\n             let flags = if nb {c::MSG_DONTWAIT} else {0};\n             libc::recvfrom(fd,\n@@ -892,8 +892,8 @@ impl UdpSocket {\n         let dstp = &storage as *const _ as *const libc::sockaddr;\n \n         let fd = self.fd();\n-        let dolock = |&: | self.lock_nonblocking();\n-        let dowrite = |&mut: nb, buf: *const u8, len: uint| unsafe {\n+        let dolock = || self.lock_nonblocking();\n+        let dowrite = |nb, buf: *const u8, len: uint| unsafe {\n             let flags = if nb {c::MSG_DONTWAIT} else {0};\n             libc::sendto(fd,\n                          buf as *const libc::c_void,"}, {"sha": "45d5b1506c3aaf13145740f055c5f78075b2d0d3", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -151,8 +151,8 @@ impl UnixStream {\n \n     pub fn read(&mut self, buf: &mut [u8]) -> IoResult<uint> {\n         let fd = self.fd();\n-        let dolock = |&:| self.lock_nonblocking();\n-        let doread = |&mut: nb| unsafe {\n+        let dolock = || self.lock_nonblocking();\n+        let doread = |nb| unsafe {\n             let flags = if nb {c::MSG_DONTWAIT} else {0};\n             libc::recv(fd,\n                        buf.as_mut_ptr() as *mut libc::c_void,\n@@ -164,8 +164,8 @@ impl UnixStream {\n \n     pub fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n         let fd = self.fd();\n-        let dolock = |&: | self.lock_nonblocking();\n-        let dowrite = |&: nb: bool, buf: *const u8, len: uint| unsafe {\n+        let dolock = || self.lock_nonblocking();\n+        let dowrite = |nb: bool, buf: *const u8, len: uint| unsafe {\n             let flags = if nb {c::MSG_DONTWAIT} else {0};\n             libc::send(fd,\n                        buf as *const _,"}, {"sha": "52a8ac9c338e0d4a58ba1a7f32a4b37af2bbea92", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -84,8 +84,8 @@ impl Process {\n             mem::transmute::<&ProcessConfig<K,V>,&'static ProcessConfig<K,V>>(cfg)\n         };\n \n-        with_envp(cfg.env(), move|: envp: *const c_void| {\n-            with_argv(cfg.program(), cfg.args(), move|: argv: *const *const libc::c_char| unsafe {\n+        with_envp(cfg.env(), move|envp: *const c_void| {\n+            with_argv(cfg.program(), cfg.args(), move|argv: *const *const libc::c_char| unsafe {\n                 let (input, mut output) = try!(sys::os::pipe());\n \n                 // We may use this in the child, so perform allocations before the\n@@ -185,7 +185,7 @@ impl Process {\n                 // up /dev/null into that file descriptor. Otherwise, the first file\n                 // descriptor opened up in the child would be numbered as one of the\n                 // stdio file descriptors, which is likely to wreak havoc.\n-                let setup = |&: src: Option<P>, dst: c_int| {\n+                let setup = |src: Option<P>, dst: c_int| {\n                     let src = match src {\n                         None => {\n                             let flags = if dst == libc::STDIN_FILENO {"}, {"sha": "839263f1f1720bb60227e9c8edd59dbfbd9a92bb", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -169,7 +169,7 @@ impl Process {\n             // Similarly to unix, we don't actually leave holes for the stdio file\n             // descriptors, but rather open up /dev/null equivalents. These\n             // equivalents are drawn from libuv's windows process spawning.\n-            let set_fd = |&: fd: &Option<P>, slot: &mut HANDLE,\n+            let set_fd = |fd: &Option<P>, slot: &mut HANDLE,\n                           is_stdin: bool| {\n                 match *fd {\n                     None => {"}, {"sha": "52399ff771e8dbfbaec47d7956bfce126c2a90c6", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -246,7 +246,7 @@ impl Builder {\n     {\n         let my_packet = Packet(Arc::new(UnsafeCell::new(None)));\n         let their_packet = Packet(my_packet.0.clone());\n-        let (native, thread) = self.spawn_inner(Thunk::new(f), Thunk::with_arg(move |: ret| unsafe {\n+        let (native, thread) = self.spawn_inner(Thunk::new(f), Thunk::with_arg(move |ret| unsafe {\n             *their_packet.0.get() = Some(ret);\n         }));\n \n@@ -273,7 +273,7 @@ impl Builder {\n         // because by the time that this function is executing we've already\n         // consumed at least a little bit of stack (we don't know the exact byte\n         // address at which our stack started).\n-        let main = move |:| {\n+        let main = move || {\n             let something_around_the_top_of_the_stack = 1;\n             let addr = &something_around_the_top_of_the_stack as *const int;\n             let my_stack_top = addr as uint;\n@@ -289,7 +289,7 @@ impl Builder {\n \n             let mut output = None;\n             let f: Thunk<(), T> = if stdout.is_some() || stderr.is_some() {\n-                Thunk::new(move |:| {\n+                Thunk::new(move || {\n                     let _ = stdout.map(stdio::set_stdout);\n                     let _ = stderr.map(stdio::set_stderr);\n                     f.invoke(())"}, {"sha": "0831242f954cf0e95b12ecae70766a3dc991554c", "filename": "src/libstd/thunk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fthunk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibstd%2Fthunk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthunk.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -24,7 +24,7 @@ impl<R> Thunk<(),R> {\n     pub fn new<F>(func: F) -> Thunk<(),R>\n         where F : FnOnce() -> R, F : Send\n     {\n-        Thunk::with_arg(move|: ()| func())\n+        Thunk::with_arg(move|()| func())\n     }\n }\n "}, {"sha": "1a537c7a5b8f89fdd7f5b3623c3750c6c714eed4", "filename": "src/libsyntax/ast_map/blocks.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fblocks.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -179,13 +179,13 @@ impl<'a> FnLikeNode<'a> {\n     }\n \n     pub fn kind(self) -> visit::FnKind<'a> {\n-        let item = |: p: ItemFnParts<'a>| -> visit::FnKind<'a> {\n+        let item = |p: ItemFnParts<'a>| -> visit::FnKind<'a> {\n             visit::FkItemFn(p.ident, p.generics, p.unsafety, p.abi)\n         };\n-        let closure = |: _: ClosureParts| {\n+        let closure = |_: ClosureParts| {\n             visit::FkFnBlock\n         };\n-        let method = |: m: &'a ast::Method| {\n+        let method = |m: &'a ast::Method| {\n             visit::FkMethod(m.pe_ident(), m.pe_generics(), m)\n         };\n         self.handle(item, method, closure)"}, {"sha": "6eb18e290238e679df6463d847ed87fc60c36b57", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -63,7 +63,7 @@ fn cs_clone(\n         cx.ident_of(\"Clone\"),\n         cx.ident_of(\"clone\"),\n     ];\n-    let subcall = |&: field: &FieldInfo| {\n+    let subcall = |field: &FieldInfo| {\n         let args = vec![cx.expr_addr_of(field.span, field.self_.clone())];\n \n         cx.expr_call_global(field.span, fn_path.clone(), args)"}, {"sha": "df5e1863d551dd84236b2c96d975e69d8f4a0e1b", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -57,7 +57,7 @@ fn default_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructur\n         cx.ident_of(\"Default\"),\n         cx.ident_of(\"default\")\n     );\n-    let default_call = |&: span| cx.expr_call_global(span, default_ident.clone(), Vec::new());\n+    let default_call = |span| cx.expr_call_global(span, default_ident.clone(), Vec::new());\n \n     return match *substr.fields {\n         StaticStruct(_, ref summary) => {"}, {"sha": "7d72a7ec358c8a03b99465960591c7ba6ba9a6ea", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -957,7 +957,7 @@ impl<'a> MethodDef<'a> {\n         // where each tuple has length = self_args.len()\n         let mut match_arms: Vec<ast::Arm> = variants.iter().enumerate()\n             .map(|(index, variant)| {\n-                let mk_self_pat = |&: cx: &mut ExtCtxt, self_arg_name: &str| {\n+                let mk_self_pat = |cx: &mut ExtCtxt, self_arg_name: &str| {\n                     let (p, idents) = trait_.create_enum_variant_pattern(cx, type_ident,\n                                                                          &**variant,\n                                                                          self_arg_name,"}, {"sha": "f8a7af3aa91701a1d202f157a196b489933a43e5", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -66,7 +66,7 @@ fn hash_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n         [ref state_expr] => state_expr,\n         _ => cx.span_bug(trait_span, \"incorrect number of arguments in `derive(Hash)`\")\n     };\n-    let call_hash = |&: span, thing_expr| {\n+    let call_hash = |span, thing_expr| {\n         let hash_path = {\n             let strs = vec![\n                 cx.ident_of(\"std\"),"}, {"sha": "c708a09b53c9bbf825a03126a55710bd499a8928", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -70,7 +70,7 @@ fn rand_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n         cx.ident_of(\"Rand\"),\n         cx.ident_of(\"rand\")\n     );\n-    let rand_call = |&: cx: &mut ExtCtxt, span| {\n+    let rand_call = |cx: &mut ExtCtxt, span| {\n         cx.expr_call_global(span,\n                             rand_ident.clone(),\n                             vec!(rng.clone()))"}, {"sha": "fbacc750390051a92296e2318611b5c7ec16a758", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -1089,7 +1089,7 @@ fn expand_annotatable(a: Annotatable,\n                     // but that double-mut-borrows fld\n                     let mut items: SmallVector<P<ast::Item>> = SmallVector::zero();\n                     dec.expand(fld.cx, attr.span, &*attr.node.value, &**it,\n-                               box |&mut: item| items.push(item));\n+                               box |item| items.push(item));\n                     decorator_items.extend(items.into_iter()\n                         .flat_map(|item| expand_item(item, fld).into_iter()));\n \n@@ -1850,7 +1850,7 @@ mod test {\n             assert!((shouldmatch.len() == 0) ||\n                     (varrefs.len() > *shouldmatch.iter().max().unwrap()));\n             for (idx,varref) in varrefs.iter().enumerate() {\n-                let print_hygiene_debug_info = |&:| {\n+                let print_hygiene_debug_info = || {\n                     // good lord, you can't make a path with 0 segments, can you?\n                     let final_varref_ident = match varref.segments.last() {\n                         Some(pathsegment) => pathsegment.identifier,"}, {"sha": "56da24de8bbe2891554c673676662592550f54bd", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -307,7 +307,7 @@ impl<'a, 'b> Context<'a, 'b> {\n \n     fn trans_count(&self, c: parse::Count) -> P<ast::Expr> {\n         let sp = self.fmtsp;\n-        let count = |: c, arg| {\n+        let count = |c, arg| {\n             let mut path = Context::rtpath(self.ecx, \"Count\");\n             path.push(self.ecx.ident_of(c));\n             match arg {\n@@ -353,7 +353,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             parse::NextArgument(ref arg) => {\n                 // Translate the position\n                 let pos = {\n-                    let pos = |: c, arg| {\n+                    let pos = |c, arg| {\n                         let mut path = Context::rtpath(self.ecx, \"Position\");\n                         path.push(self.ecx.ident_of(c));\n                         match arg {\n@@ -404,7 +404,7 @@ impl<'a, 'b> Context<'a, 'b> {\n \n                 // Translate the format\n                 let fill = self.ecx.expr_lit(sp, ast::LitChar(fill));\n-                let align = |:name| {\n+                let align = |name| {\n                     let mut p = Context::rtpath(self.ecx, \"Alignment\");\n                     p.push(self.ecx.ident_of(name));\n                     self.ecx.path_global(sp, p)"}, {"sha": "7376b2352388a81c5d439123512b4c6b38abd3f2", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -791,11 +791,11 @@ fn expand_parse_call(cx: &ExtCtxt,\n                      tts: &[ast::TokenTree]) -> P<ast::Expr> {\n     let (cx_expr, tts_expr) = expand_tts(cx, sp, tts);\n \n-    let cfg_call = |&:| cx.expr_method_call(\n+    let cfg_call = || cx.expr_method_call(\n         sp, cx.expr_ident(sp, id_ext(\"ext_cx\")),\n         id_ext(\"cfg\"), Vec::new());\n \n-    let parse_sess_call = |&:| cx.expr_method_call(\n+    let parse_sess_call = || cx.expr_method_call(\n         sp, cx.expr_ident(sp, id_ext(\"ext_cx\")),\n         id_ext(\"parse_sess\"), Vec::new());\n "}, {"sha": "6ea2ffa507d7c0de2d4ceaf0d5dab29814602b56", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -244,7 +244,7 @@ pub fn new_parser_from_tts<'a>(sess: &'a ParseSess,\n /// add the path to the session's codemap and return the new filemap.\n pub fn file_to_filemap(sess: &ParseSess, path: &Path, spanopt: Option<Span>)\n     -> Rc<FileMap> {\n-    let err = |&: msg: &str| {\n+    let err = |msg: &str| {\n         match spanopt {\n             Some(sp) => sess.span_diagnostic.span_fatal(sp, msg),\n             None => sess.span_diagnostic.handler().fatal(msg),\n@@ -406,7 +406,7 @@ pub fn char_lit(lit: &str) -> (char, isize) {\n         .map(|x| (x, len as isize))\n     }\n \n-    let unicode_escape = |&: | -> Option<(char, isize)>\n+    let unicode_escape = || -> Option<(char, isize)>\n         if lit.as_bytes()[2] == b'{' {\n             let idx = lit.find('}').expect(msg2);\n             let subslice = &lit[3..idx];\n@@ -433,7 +433,7 @@ pub fn str_lit(lit: &str) -> String {\n     let mut res = String::with_capacity(lit.len());\n \n     // FIXME #8372: This could be a for-loop if it didn't borrow the iterator\n-    let error = |&: i| format!(\"lexer should have rejected {} at {}\", lit, i);\n+    let error = |i| format!(\"lexer should have rejected {} at {}\", lit, i);\n \n     /// Eat everything up to a non-whitespace\n     fn eat<'a>(it: &mut iter::Peekable<str::CharIndices<'a>>) {\n@@ -568,7 +568,7 @@ pub fn float_lit(s: &str, suffix: Option<&str>, sd: &SpanHandler, sp: Span) -> a\n \n /// Parse a string representing a byte literal into its final form. Similar to `char_lit`\n pub fn byte_lit(lit: &str) -> (u8, usize) {\n-    let err = |&: i| format!(\"lexer accepted invalid byte literal {} step {}\", lit, i);\n+    let err = |i| format!(\"lexer accepted invalid byte literal {} step {}\", lit, i);\n \n     if lit.len() == 1 {\n         (lit.as_bytes()[0], 1)\n@@ -602,7 +602,7 @@ pub fn binary_lit(lit: &str) -> Rc<Vec<u8>> {\n     let mut res = Vec::with_capacity(lit.len());\n \n     // FIXME #8372: This could be a for-loop if it didn't borrow the iterator\n-    let error = |&: i| format!(\"lexer should have rejected {} at {}\", lit, i);\n+    let error = |i| format!(\"lexer should have rejected {} at {}\", lit, i);\n \n     /// Eat everything up to a non-whitespace\n     fn eat<'a, I: Iterator<Item=(usize, u8)>>(it: &mut iter::Peekable<I>) {"}, {"sha": "26433d0648272e7e2e2079bb9be26c4805a79297", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -1139,7 +1139,7 @@ impl<'a> Parser<'a> {\n \n     /// Parses an obsolete closure kind (`&:`, `&mut:`, or `:`).\n     pub fn parse_obsolete_closure_kind(&mut self) {\n-        // let lo = self.span.lo;\n+         let lo = self.span.lo;\n         if\n             self.check(&token::BinOp(token::And)) &&\n             self.look_ahead(1, |t| t.is_keyword(keywords::Mut)) &&\n@@ -1163,10 +1163,8 @@ impl<'a> Parser<'a> {\n             return;\n         }\n \n-        // SNAP 474b324\n-        // Enable these obsolete errors after snapshot:\n-        // let span = mk_sp(lo, self.span.hi);\n-        // self.obsolete(span, ObsoleteSyntax::ClosureKind);\n+         let span = mk_sp(lo, self.span.hi);\n+         self.obsolete(span, ObsoleteSyntax::ClosureKind);\n     }\n \n     pub fn parse_ty_bare_fn_or_ty_closure(&mut self, lifetime_defs: Vec<LifetimeDef>) -> Ty_ {"}, {"sha": "d9d5688951288d6ba15de734d44c413387d4e6f2", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -609,11 +609,11 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> {\n     let test_id = ecx.ident_of(\"test\");\n \n     // creates self::test::$name\n-    let test_path = |&: name| {\n+    let test_path = |name| {\n         ecx.path(span, vec![self_id, test_id, ecx.ident_of(name)])\n     };\n     // creates $name: $expr\n-    let field = |&: name, expr| ecx.field_imm(span, ecx.ident_of(name), expr);\n+    let field = |name, expr| ecx.field_imm(span, ecx.ident_of(name), expr);\n \n     debug!(\"encoding {}\", ast_util::path_name_i(&path[]));\n \n@@ -627,7 +627,7 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> {\n                                   vec![name_expr]);\n \n     let ignore_expr = ecx.expr_bool(span, test.ignore);\n-    let should_fail_path = |&: name| {\n+    let should_fail_path = |name| {\n         ecx.path(span, vec![self_id, test_id, ecx.ident_of(\"ShouldFail\"), ecx.ident_of(name)])\n     };\n     let fail_expr = match test.should_fail {"}, {"sha": "a89fcbee25bc72396b87b3fdfae1f9ce714002ae", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -89,12 +89,12 @@ impl UnicodeStr for str {\n \n     #[inline]\n     fn trim_left(&self) -> &str {\n-        self.trim_left_matches(|&: c: char| c.is_whitespace())\n+        self.trim_left_matches(|c: char| c.is_whitespace())\n     }\n \n     #[inline]\n     fn trim_right(&self) -> &str {\n-        self.trim_right_matches(|&: c: char| c.is_whitespace())\n+        self.trim_right_matches(|c: char| c.is_whitespace())\n     }\n }\n "}, {"sha": "56948ea1219ea437dff3933d31db71dcc80ccfec", "filename": "src/snapshots.txt", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -1,3 +1,12 @@\n+S 2015-02-04 ac134f7\n+  freebsd-x86_64 483e37a02a7ebc12a872e3146145e342ba4a5c04\n+  linux-i386 8af64e5df839cc945399484380a8b2ebe05a6751\n+  linux-x86_64 9f485d79c1f0d273ed864eddadb1707f3e2df489\n+  macos-i386 800f86abd589a1d46c37a8700211c7ba6b05decb\n+  macos-x86_64 b9961faccf79dcfdc0b7a6909bef8b6769798d08\n+  winnt-i386 2c56a7573f8d0f78271dab1c8e29d3ced7a44ed8\n+  winnt-x86_64 f1736f47de2a6fad1ff881e51c176f71db5dc2a5\n+\n S 2015-01-31 474b324\n   freebsd-x86_64 c5b55eb488790ff8425d74afa3b37c49517bc55f\n   linux-i386 319f2f3573c058cb2c4dfc75faaf8ea3ae86ef11"}, {"sha": "a29dcc00cddf8ed0272758a9ea2bd8a45910ccdb", "filename": "src/test/auxiliary/issue-18711.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fauxiliary%2Fissue-18711.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fauxiliary%2Fissue-18711.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-18711.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -12,5 +12,5 @@\n #![crate_type = \"rlib\"]\n \n pub fn inner<F>(f: F) -> F {\n-    (move |:| f)()\n+    (move || f)()\n }"}, {"sha": "bf4ab975cedd8c97a66dfd89a45a30488e732cdf", "filename": "src/test/auxiliary/logging_right_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -12,5 +12,5 @@\n \n pub fn foo<T>() {\n     fn death() -> int { panic!() }\n-    debug!(\"{}\", (|&:|{ death() })());\n+    debug!(\"{}\", (||{ death() })());\n }"}, {"sha": "f03bcb41fafe8bd1f31ef25735699dcd0eb6ca81", "filename": "src/test/auxiliary/unboxed-closures-cross-crate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fauxiliary%2Funboxed-closures-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fauxiliary%2Funboxed-closures-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Funboxed-closures-cross-crate.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -15,14 +15,14 @@ use std::ops::Add;\n #[inline]\n pub fn has_closures() -> uint {\n     let x = 1u;\n-    let mut f = move |&mut:| x;\n+    let mut f = move || x;\n     let y = 1u;\n-    let g = |:| y;\n+    let g = || y;\n     f() + g()\n }\n \n pub fn has_generic_closures<T: Add<Output=T> + Copy>(x: T, y: T) -> T {\n-    let mut f = move |&mut:| x;\n-    let g = |:| y;\n+    let mut f = move || x;\n+    let g = || y;\n     f() + g()\n }"}, {"sha": "dd8e7fdfbdeecff30e867f645a82065a8cc75a37", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -251,6 +251,6 @@ fn parallel<'a, I, T, F>(iter: I, f: F)\n fn main() {\n     let mut data = read_to_end(&mut stdin_raw()).unwrap();\n     let tables = &Tables::new();\n-    parallel(mut_dna_seqs(data.as_mut_slice()), |&: seq| reverse_complement(seq, tables));\n+    parallel(mut_dna_seqs(data.as_mut_slice()), |seq| reverse_complement(seq, tables));\n     stdout_raw().write(data.as_mut_slice()).unwrap();\n }"}, {"sha": "b8aba7c483db943ea34227d32b4d1f6154d1de37", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -27,5 +27,5 @@ fn cat(in_x : usize, in_y : isize) -> cat {\n \n fn main() {\n   let nyan : cat = cat(52us, 99);\n-  nyan.speak = |&:| println!(\"meow\"); //~ ERROR attempted to take value of method\n+  nyan.speak = || println!(\"meow\"); //~ ERROR attempted to take value of method\n }"}, {"sha": "5cc087cb66e3c5d9f66316df9559d7f25390efbe", "filename": "src/test/compile-fail/blind-item-local-shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fblind-item-local-shadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fblind-item-local-shadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblind-item-local-shadow.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -13,7 +13,7 @@ mod bar {\n }\n \n fn main() {\n-    let foo = |&:| false;\n+    let foo = || false;\n     use bar::foo;\n     //~^ ERROR imports are not allowed after non-item statements\n     assert_eq!(foo(), false);"}, {"sha": "9ea5fbbdb1af08e72e83750025961b6652fbfe72", "filename": "src/test/compile-fail/borrowck-call-is-borrow-issue-12224.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -49,15 +49,15 @@ fn test5(f: &mut Test) {\n }\n \n fn test6() {\n-    let mut f = |&mut:| {};\n-    (|&mut:| {\n+    let mut f = || {};\n+    (|| {\n         f();\n     })();\n }\n \n fn test7() {\n     fn foo<F>(_: F) where F: FnMut(Box<FnMut(isize)>, isize) {}\n-    let mut f = |&mut: g: Box<FnMut(isize)>, b: isize| {};\n+    let mut f = |g: Box<FnMut(isize)>, b: isize| {};\n     f(box |a| {\n         foo(f);\n         //~^ ERROR cannot move `f` into closure because it is borrowed"}, {"sha": "851b11fac2b9d1949f9eb09f3e5a15a82c5afe33", "filename": "src/test/compile-fail/borrowck-closures-mut-and-imm.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -23,37 +23,37 @@ fn set(x: &mut isize) {\n \n fn a() {\n     let mut x = 3;\n-    let c1 = |&mut:| x = 4;\n-    let c2 = |&mut:| x * 5; //~ ERROR cannot borrow `x`\n+    let c1 = || x = 4;\n+    let c2 = || x * 5; //~ ERROR cannot borrow `x`\n }\n \n fn b() {\n     let mut x = 3;\n-    let c1 = |&mut:| set(&mut x);\n-    let c2 = |&mut:| get(&x); //~ ERROR cannot borrow `x`\n+    let c1 = || set(&mut x);\n+    let c2 = || get(&x); //~ ERROR cannot borrow `x`\n }\n \n fn c() {\n     let mut x = 3;\n-    let c1 = |&mut:| set(&mut x);\n-    let c2 = |&mut:| x * 5; //~ ERROR cannot borrow `x`\n+    let c1 = || set(&mut x);\n+    let c2 = || x * 5; //~ ERROR cannot borrow `x`\n }\n \n fn d() {\n     let mut x = 3;\n-    let c2 = |&mut:| x * 5;\n+    let c2 = || x * 5;\n     x = 5; //~ ERROR cannot assign\n }\n \n fn e() {\n     let mut x = 3;\n-    let c1 = |&mut:| get(&x);\n+    let c1 = || get(&x);\n     x = 5; //~ ERROR cannot assign\n }\n \n fn f() {\n     let mut x = box 3;\n-    let c1 = |&mut:| get(&*x);\n+    let c1 = || get(&*x);\n     *x = 5; //~ ERROR cannot assign\n }\n \n@@ -63,7 +63,7 @@ fn g() {\n     }\n \n     let mut x = box Foo { f: box 3 };\n-    let c1 = |&mut:| get(&*x.f);\n+    let c1 = || get(&*x.f);\n     *x.f = 5; //~ ERROR cannot assign to `*x.f`\n }\n \n@@ -73,8 +73,8 @@ fn h() {\n     }\n \n     let mut x = box Foo { f: box 3 };\n-    let c1 = |&mut:| get(&*x.f);\n-    let c2 = |&mut:| *x.f = 5; //~ ERROR cannot borrow `x` as mutable\n+    let c1 = || get(&*x.f);\n+    let c2 = || *x.f = 5; //~ ERROR cannot borrow `x` as mutable\n }\n \n fn main() {"}, {"sha": "40f9be2dd8230fcb82f80831b698013c703c4db5", "filename": "src/test/compile-fail/borrowck-closures-mut-of-imm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-of-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-of-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-of-imm.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -20,9 +20,9 @@ fn set(x: &mut isize) {\n }\n \n fn a(x: &isize) {\n-    let c1 = |&mut:| set(&mut *x);\n+    let c1 = || set(&mut *x);\n     //~^ ERROR cannot borrow\n-    let c2 = |&mut:| set(&mut *x);\n+    let c2 = || set(&mut *x);\n     //~^ ERROR cannot borrow\n     //~| ERROR closure requires unique access\n }"}, {"sha": "8ab4e257b0626d35a76eca6239519d5e2072e8f4", "filename": "src/test/compile-fail/borrowck-closures-two-mut.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -14,10 +14,12 @@\n \n #![feature(box_syntax)]\n \n+fn to_fn_mut<F: FnMut()>(f: F) -> F { f }\n+\n fn a() {\n     let mut x = 3;\n-    let c1 = |&mut:| x = 4;\n-    let c2 = |&mut:| x = 5; //~ ERROR cannot borrow `x` as mutable more than once\n+    let c1 = to_fn_mut(|| x = 4);\n+    let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable more than once\n }\n \n fn set(x: &mut isize) {\n@@ -26,20 +28,20 @@ fn set(x: &mut isize) {\n \n fn b() {\n     let mut x = 3;\n-    let c1 = |&mut:| set(&mut x);\n-    let c2 = |&mut:| set(&mut x); //~ ERROR cannot borrow `x` as mutable more than once\n+    let c1 = to_fn_mut(|| set(&mut x));\n+    let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n }\n \n fn c() {\n     let mut x = 3;\n-    let c1 = |&mut:| x = 5;\n-    let c2 = |&mut:| set(&mut x); //~ ERROR cannot borrow `x` as mutable more than once\n+    let c1 = to_fn_mut(|| x = 5);\n+    let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n }\n \n fn d() {\n     let mut x = 3;\n-    let c1 = |&mut:| x = 5;\n-    let c2 = |&mut:| { let _y = |&mut:| set(&mut x); }; // (nested closure)\n+    let c1 = to_fn_mut(|| x = 5);\n+    let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n     //~^ ERROR cannot borrow `x` as mutable more than once\n }\n \n@@ -49,8 +51,8 @@ fn g() {\n     }\n \n     let mut x = box Foo { f: box 3 };\n-    let c1 = |&mut:| set(&mut *x.f);\n-    let c2 = |&mut:| set(&mut *x.f);\n+    let c1 = to_fn_mut(|| set(&mut *x.f));\n+    let c2 = to_fn_mut(|| set(&mut *x.f));\n     //~^ ERROR cannot borrow `x` as mutable more than once\n }\n "}, {"sha": "dcf43c01e1775635612f4b2e7f8d46c90ef69ac8", "filename": "src/test/compile-fail/borrowck-closures-unique-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique-imm.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n     let mut this = &mut Foo {\n         x: 1,\n     };\n-    let mut r = |&mut:| {\n+    let mut r = || {\n         let p = &this.x;\n         &mut this.x; //~ ERROR cannot borrow\n     };"}, {"sha": "9410181659c1a229a73adf620d88c2863091d913", "filename": "src/test/compile-fail/borrowck-closures-unique.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -23,27 +23,27 @@ fn set(x: &mut isize) -> isize {\n }\n \n fn a(x: &mut isize) {\n-    let c1 = |&mut:| get(x);\n-    let c2 = |&mut:| get(x);\n+    let c1 = || get(x);\n+    let c2 = || get(x);\n }\n \n fn b(x: &mut isize) {\n-    let c1 = |&mut:| get(x);\n-    let c2 = |&mut:| set(x); //~ ERROR closure requires unique access to `x`\n+    let c1 = || get(x);\n+    let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n }\n \n fn c(x: &mut isize) {\n-    let c1 = |&mut:| get(x);\n-    let c2 = |&mut:| { get(x); set(x); }; //~ ERROR closure requires unique access to `x`\n+    let c1 = || get(x);\n+    let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique access to `x`\n }\n \n fn d(x: &mut isize) {\n-    let c1 = |&mut:| set(x);\n-    let c2 = |&mut:| set(x); //~ ERROR closure requires unique access to `x`\n+    let c1 = || set(x);\n+    let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n }\n \n fn e(x: &mut isize) {\n-    let c1 = |&mut:| x = panic!(); //~ ERROR closure cannot assign to immutable local variable\n+    let c1 = || x = panic!(); //~ ERROR closure cannot assign to immutable local variable\n }\n \n fn main() {"}, {"sha": "32cd364d1f2d644ad18917d46514eeaa30e795b1", "filename": "src/test/compile-fail/borrowck-closures-use-after-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -26,7 +26,7 @@ impl Drop for Foo {\n \n fn main() {\n   let mut ptr = box Foo { x: 0 };\n-  let mut test = |&mut: foo: &Foo| {\n+  let mut test = |foo: &Foo| {\n     ptr = box Foo { x: ptr.x + 1 };\n   };\n   test(&*ptr); //~ ERROR cannot borrow `*ptr`"}, {"sha": "5b32fd2d1987245ed1e7f76f58f142873fb801a7", "filename": "src/test/compile-fail/borrowck-init-in-called-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-called-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-called-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-called-fn-expr.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let j = |&:| -> isize {\n+    let j = || -> isize {\n         let i: isize;\n         i //~ ERROR use of possibly uninitialized variable: `i`\n     };"}, {"sha": "65f1a1fa098aeee2fbf521b420c4e5d18ba9fcca", "filename": "src/test/compile-fail/borrowck-init-in-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let f  = |&:| -> isize {\n+    let f  = || -> isize {\n         let i: isize;\n         i //~ ERROR use of possibly uninitialized variable: `i`\n     };"}, {"sha": "7093da6803ca5754d69aa7a93749d6a4ac9c42fa", "filename": "src/test/compile-fail/borrowck-report-with-custom-diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -32,7 +32,7 @@ fn foo() {\n \n fn bar() {\n     // Original borrow ends at end of closure\n-    |&:| {\n+    || {\n         let mut x = 1us;\n         let y = &mut x;\n         let z = &mut x; //~ ERROR cannot borrow"}, {"sha": "e59bd62d178549133ae66fe02cd04cc1cb21bbba", "filename": "src/test/compile-fail/cannot-mutate-captured-non-mut-var.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -14,10 +14,10 @@ fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n \n fn main() {\n     let x = 1;\n-    to_fn_once(move|:| { x = 2; });\n+    to_fn_once(move|| { x = 2; });\n     //~^ ERROR: cannot assign to immutable captured outer variable\n \n     let s = std::old_io::stdin();\n-    to_fn_once(move|:| { s.read_to_end(); });\n+    to_fn_once(move|| { s.read_to_end(); });\n     //~^ ERROR: cannot borrow immutable captured outer variable\n }"}, {"sha": "d2295eba6d7a41f99fc288e116dcbf2ab72d669d", "filename": "src/test/compile-fail/closure-reform-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fclosure-reform-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fclosure-reform-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-reform-bad.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -17,7 +17,7 @@ fn call_bare(f: fn(&str)) {\n \n fn main() {\n     let string = \"world!\";\n-    let f = |&: s: &str| println!(\"{}{}\", s, string);\n+    let f = |s: &str| println!(\"{}{}\", s, string);\n     call_bare(f)    //~ ERROR mismatched types\n }\n "}, {"sha": "280e2ed095266f54f943de374503a38a86bc62f7", "filename": "src/test/compile-fail/dead-code-closure-bang.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fdead-code-closure-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fdead-code-closure-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdead-code-closure-bang.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -13,7 +13,7 @@\n #![deny(unreachable_code)]\n \n fn main() {\n-    let x = |:| panic!();\n+    let x = || panic!();\n     x();\n     std::io::println(\"Foo bar\"); //~ ERROR: unreachable statement\n }"}, {"sha": "71e1f7091b2c99094e9459e64ba25fe261906ecc", "filename": "src/test/compile-fail/fn-trait-formatting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -14,20 +14,20 @@\n fn needs_fn<F>(x: F) where F: Fn(isize) -> isize {}\n \n fn main() {\n-    let _: () = (box |:_: isize| {}) as Box<FnOnce(isize)>;\n+    let _: () = (box |_: isize| {}) as Box<FnOnce(isize)>;\n     //~^ ERROR object-safe\n     //~| ERROR mismatched types\n     //~| expected `()`\n     //~| found `Box<core::ops::FnOnce(isize)>`\n     //~| expected ()\n     //~| found box\n-    let _: () = (box |&:_: isize, isize| {}) as Box<Fn(isize, isize)>;\n+    let _: () = (box |_: isize, isize| {}) as Box<Fn(isize, isize)>;\n     //~^ ERROR mismatched types\n     //~| expected `()`\n     //~| found `Box<core::ops::Fn(isize, isize)>`\n     //~| expected ()\n     //~| found box\n-    let _: () = (box |&mut:| -> isize unimplemented!()) as Box<FnMut() -> isize>;\n+    let _: () = (box || -> isize unimplemented!()) as Box<FnMut() -> isize>;\n     //~^ ERROR mismatched types\n     //~| expected `()`\n     //~| found `Box<core::ops::FnMut() -> isize>`"}, {"sha": "949c1c0d9c436759fdbf78576794d92e4422ff7a", "filename": "src/test/compile-fail/immut-function-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -14,7 +14,7 @@ fn f(y: Box<isize>) {\n }\n \n fn g() {\n-    let _frob = |&: q: Box<isize>| { *q = 2; }; //~ ERROR cannot assign\n+    let _frob = |q: Box<isize>| { *q = 2; }; //~ ERROR cannot assign\n \n }\n "}, {"sha": "736f9630127121e23bd24340114c5700f4102656", "filename": "src/test/compile-fail/issue-10398.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -12,7 +12,7 @@\n \n fn main() {\n     let x = box 1;\n-    let f = move|:| {\n+    let f = move|| {\n         let _a = x;\n         drop(x);\n         //~^ ERROR: use of moved value: `x`"}, {"sha": "a95bcc73a9c473adf98a2ac38839dfdeaf42ee73", "filename": "src/test/compile-fail/issue-11192.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -22,7 +22,7 @@ impl Drop for Foo {\n \n fn main() {\n     let mut ptr = box Foo { x: 0 };\n-    let mut test = |&mut: foo: &Foo| {\n+    let mut test = |foo: &Foo| {\n         println!(\"access {}\", foo.x);\n         ptr = box Foo { x: ptr.x + 1 };\n         println!(\"access {}\", foo.x);"}, {"sha": "38956944f63e637a06eb70a445125ccd10b40084", "filename": "src/test/compile-fail/issue-11873.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let mut v = vec!(1);\n-    let mut f = |&mut:| v.push(2);\n+    let mut f = || v.push(2);\n     let _w = v; //~ ERROR: cannot move out of `v`\n \n     f();"}, {"sha": "7ec3fef5c878eb05a060356e60fa5b169b03392c", "filename": "src/test/compile-fail/issue-16939.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-16939.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-16939.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16939.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -14,7 +14,7 @@\n // wrong arity.\n \n fn _foo<F: Fn()> (f: F) {\n-    |&: t| f(t); //~ ERROR E0057\n+    |t| f(t); //~ ERROR E0057\n }\n \n fn main() {}"}, {"sha": "b19a7703b85605e49bbc807bec3c1edd0159ff02", "filename": "src/test/compile-fail/issue-17551.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -14,5 +14,5 @@ struct B<T>;\n \n fn main() {\n     let foo = B;\n-    let closure = |:| foo; //~ ERROR unable to infer enough type information\n+    let closure = || foo; //~ ERROR unable to infer enough type information\n }"}, {"sha": "1cdf48e291c755e6efb727f780d31a727e26a315", "filename": "src/test/compile-fail/issue-17651.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -14,7 +14,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    (|&:| box *[0us].as_slice())();\n+    (|| box *[0us].as_slice())();\n     //~^ ERROR cannot move out of borrowed content\n     //~^^ ERROR cannot move a value of type [usize]\n }"}, {"sha": "37dbcaf39bd10ba17c99dfdc6c30f9a243a3a851", "filename": "src/test/compile-fail/issue-2149.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -20,6 +20,6 @@ impl<A> vec_monad<A> for Vec<A> {\n    }\n }\n fn main() {\n-    [\"hi\"].bind(|&mut: x| [x] );\n+    [\"hi\"].bind(|x| [x] );\n     //~^ ERROR type `[&str; 1]` does not implement any method in scope named `bind`\n }"}, {"sha": "0f7cc2cb72b8e2b05b73dcb6456119e3ade48d33", "filename": "src/test/compile-fail/issue-3044.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -11,7 +11,7 @@\n \n fn main() {\n     let needlesArr: Vec<char> = vec!('a', 'f');\n-    needlesArr.iter().fold(|&: x, y| {\n+    needlesArr.iter().fold(|x, y| {\n     });\n     //~^^ ERROR this function takes 2 parameters but 1 parameter was supplied\n     //"}, {"sha": "0e1cc18dba910f373767b697787be67bfe32a3e2", "filename": "src/test/compile-fail/issue-3563.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-3563.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-3563.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3563.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -10,7 +10,7 @@\n \n trait A {\n     fn a(&self) {\n-        |&:| self.b()\n+        || self.b()\n         //~^ ERROR type `&Self` does not implement any method in scope named `b`\n         //~| ERROR mismatched types\n         //~| expected `()`"}, {"sha": "d0da51373d926fe599ee84da402673be3913f5d9", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -14,7 +14,7 @@\n fn id<T>(t: T) -> T { t }\n \n fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {\n-    id(box |&mut:| *v) //~ ERROR cannot infer\n+    id(box || *v) //~ ERROR cannot infer\n }\n \n fn main() {"}, {"sha": "49a43ee37adca88d9ec5224a79b161945a0354f0", "filename": "src/test/compile-fail/issue-5239-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-5239-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-5239-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5239-1.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -11,6 +11,6 @@\n // Regression test for issue #5239\n \n fn main() {\n-    let x = |&: ref x: isize| -> isize { x += 1; };\n+    let x = |ref x: isize| -> isize { x += 1; };\n     //~^ ERROR binary assignment operation `+=` cannot be applied to type `&isize`\n }"}, {"sha": "9e797019392450e201d0958e24809a6e031e03a8", "filename": "src/test/compile-fail/issue-6801.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -24,7 +24,7 @@ fn invoke<F>(f: F) where F: FnOnce() -> usize {\n \n fn main() {\n       let x  : Box<usize>  = box 9;\n-      let sq =  |:| { *x * *x };\n+      let sq =  || { *x * *x };\n \n       twice(x); //~ ERROR: cannot move out of\n       invoke(sq);"}, {"sha": "2d1cea1d44b746698ff438f6db9d2edc3d69161d", "filename": "src/test/compile-fail/issue-7573.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -25,7 +25,7 @@ impl CrateId {\n \n pub fn remove_package_from_database() {\n     let mut lines_to_use: Vec<&CrateId> = Vec::new();\n-    let push_id = |&mut: installed_id: &CrateId| {\n+    let push_id = |installed_id: &CrateId| {\n         lines_to_use.push(installed_id);\n         //~^ ERROR cannot infer an appropriate lifetime for automatic coercion due to\n         // conflicting requirements"}, {"sha": "dcc82b8920ff5b51245b6fb52880011da181e6fb", "filename": "src/test/compile-fail/lint-unused-mut-variables.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -35,7 +35,7 @@ fn main() {\n       _ => {}\n     }\n \n-    let x = |&: mut y: isize| 10; //~ ERROR: variable does not need to be mutable\n+    let x = |mut y: isize| 10; //~ ERROR: variable does not need to be mutable\n     fn what(mut foo: isize) {} //~ ERROR: variable does not need to be mutable\n \n     // positive cases\n@@ -65,7 +65,7 @@ fn main() {\n       _ => {}\n     }\n \n-    let x = |&mut: mut y: isize| y = 32;\n+    let x = |mut y: isize| y = 32;\n     fn nothing(mut foo: isize) { foo = 37; }\n \n     // leading underscore should avoid the warning, just like the"}, {"sha": "be42f0f0ed8837dd5f4c7d6c7b57d34098658554", "filename": "src/test/compile-fail/refutable-pattern-in-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-in-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-in-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-in-fn-arg.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let f = |&: 3: isize| println!(\"hello\");\n+    let f = |3: isize| println!(\"hello\");\n     //~^ ERROR refutable pattern in function argument: `_` not covered\n     f(4);\n }"}, {"sha": "9f35c636b4526e18a95dd3b3c22ffd1e52dd9cf1", "filename": "src/test/compile-fail/region-bound-on-closure-outlives-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fregion-bound-on-closure-outlives-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fregion-bound-on-closure-outlives-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-bound-on-closure-outlives-call.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn call_rec<F>(mut f: F) -> usize where F: FnMut(usize) -> usize {\n-    (|&mut: x| f(x))(call_rec(f)) //~ ERROR cannot move out of `f`\n+    (|x| f(x))(call_rec(f)) //~ ERROR cannot move out of `f`\n }\n \n fn main() {}"}, {"sha": "9418156ffcd086ee6560431c84ac400f9b42de33", "filename": "src/test/compile-fail/regionck-unboxed-closure-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fregionck-unboxed-closure-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fregionck-unboxed-closure-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregionck-unboxed-closure-lifetimes.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -17,7 +17,7 @@ fn main() {\n     {\n         let c = 1;\n         let c_ref = &c; //~ ERROR `c` does not live long enough\n-        f = move |&mut: a: isize, b: isize| { a + b + *c_ref };\n+        f = move |a: isize, b: isize| { a + b + *c_ref };\n     }\n }\n "}, {"sha": "70d5fe83055d35bf9ad03437bbdc4aa0044de9ae", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -16,7 +16,7 @@ struct dog {\n \n impl dog {\n     pub fn chase_cat(&mut self) {\n-        let _f = |&:| {\n+        let _f = || {\n             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n             *p = 3us;\n         };"}, {"sha": "abbefd254888b3b8d8264cf36955bb89a7b643da", "filename": "src/test/compile-fail/regions-escape-unboxed-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fregions-escape-unboxed-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fregions-escape-unboxed-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-unboxed-closure.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -15,5 +15,5 @@ fn with_int(f: &mut FnMut(&isize)) {\n \n fn main() {\n     let mut x: Option<&isize> = None;\n-    with_int(&mut |&mut: y| x = Some(y));   //~ ERROR cannot infer\n+    with_int(&mut |y| x = Some(y));   //~ ERROR cannot infer\n }"}, {"sha": "2e3531a2e8f2637ab661aa159731172ea4263bca", "filename": "src/test/compile-fail/regions-return-ref-to-upvar-issue-17403.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -16,7 +16,7 @@ fn main() {\n     // Unboxed closure case\n     {\n         let mut x = 0us;\n-        let mut f = |&mut:| &mut x; //~ ERROR cannot infer\n+        let mut f = || &mut x; //~ ERROR cannot infer\n         let x = f();\n         let y = f();\n     }"}, {"sha": "145b2bfaeddfd70185844d794d5b5dd50245eaa8", "filename": "src/test/compile-fail/unboxed-closure-immutable-capture.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -18,14 +18,14 @@ fn set(x: &mut usize) { *x = 0; }\n \n fn main() {\n     let x = 0us;\n-    move |&mut:| x = 1; //~ ERROR cannot assign\n-    move |&mut:| set(&mut x); //~ ERROR cannot borrow\n-    move |:| x = 1; //~ ERROR cannot assign\n-    move |:| set(&mut x); //~ ERROR cannot borrow\n-    |&mut:| x = 1; //~ ERROR cannot assign\n+    move || x = 1; //~ ERROR cannot assign\n+    move || set(&mut x); //~ ERROR cannot borrow\n+    move || x = 1; //~ ERROR cannot assign\n+    move || set(&mut x); //~ ERROR cannot borrow\n+    || x = 1; //~ ERROR cannot assign\n     // FIXME: this should be `cannot borrow` (issue #18330)\n-    |&mut:| set(&mut x); //~ ERROR cannot assign\n-    |:| x = 1; //~ ERROR cannot assign\n+    || set(&mut x); //~ ERROR cannot assign\n+    || x = 1; //~ ERROR cannot assign\n     // FIXME: this should be `cannot borrow` (issue #18330)\n-    |:| set(&mut x); //~ ERROR cannot assign\n+    || set(&mut x); //~ ERROR cannot assign\n }"}, {"sha": "98ac54de8ad78e6ec5279198210f5196745ebfda", "filename": "src/test/compile-fail/unboxed-closure-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Funboxed-closure-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Funboxed-closure-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-region.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -15,6 +15,6 @@\n fn main() {\n     let _f = {\n         let x = 0us;\n-        |:| x //~ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n+        || x //~ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n     };\n }"}, {"sha": "0bdc261e8c88d35b08b1423a81326e63083dddfc", "filename": "src/test/compile-fail/unboxed-closures-borrow-conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Funboxed-closures-borrow-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Funboxed-closures-borrow-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-borrow-conflict.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -15,6 +15,6 @@\n \n fn main() {\n     let mut x = 0us;\n-    let f = |:| x += 1;\n+    let f = || x += 1;\n     let _y = x; //~ ERROR cannot use `x` because it was mutably borrowed\n }"}, {"sha": "3dd5779914d06b63d26432eb66a69ab045c2ebd5", "filename": "src/test/compile-fail/unboxed-closures-infer-argument-types-two-region-pointers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-argument-types-two-region-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-argument-types-two-region-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-argument-types-two-region-pointers.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -23,7 +23,7 @@ fn doit<T,F>(val: T, f: &F)\n }\n \n pub fn main() {\n-    doit(0, &|&: x, y| {\n+    doit(0, &|x, y| {\n         x.set(y); //~ ERROR cannot infer\n     });\n }"}, {"sha": "e1192b22485c6450dfc4f4d3e3ba03723408d3d6", "filename": "src/test/compile-fail/unboxed-closures-type-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -13,7 +13,7 @@\n use std::ops::FnMut;\n \n pub fn main() {\n-    let mut f = |&mut: x: isize, y: isize| -> isize { x + y };\n+    let mut f = |x: isize, y: isize| -> isize { x + y };\n     let z = f(1us, 2);    //~ ERROR mismatched types\n     println!(\"{}\", z);\n }"}, {"sha": "d4dc58864ad827d9e5ea28e426c7319d8beadc6b", "filename": "src/test/compile-fail/unused-mut-warning-captured-var.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Funused-mut-warning-captured-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fcompile-fail%2Funused-mut-warning-captured-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-mut-warning-captured-var.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -13,5 +13,5 @@\n fn main() {\n     let mut x = 1;\n     //~^ ERROR: variable does not need to be mutable\n-    move|:| { println!(\"{}\", x); };\n+    move|| { println!(\"{}\", x); };\n }"}, {"sha": "ea684b1d69c523b97f48d68a6c57c10d620d5e83", "filename": "src/test/debuginfo/closure-in-generic-function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -51,7 +51,7 @@\n \n fn some_generic_fun<T1, T2>(a: T1, b: T2) -> (T2, T1) {\n \n-    let closure = |&: x, y| {\n+    let closure = |x, y| {\n         zzz(); // #break\n         (y, x)\n     };"}, {"sha": "fb4378d5e8beca68a11c3a6ec569ccb2c7dec547", "filename": "src/test/debuginfo/lexical-scope-in-parameterless-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -18,7 +18,7 @@\n \n // Nothing to do here really, just make sure it compiles. See issue #8513.\n fn main() {\n-    let _ = |&:|();\n+    let _ = ||();\n     let _ = (1u..3).map(|_| 5);\n }\n "}, {"sha": "6cb1218c1233a718f372ddcce6a4d93b7c7f111d", "filename": "src/test/debuginfo/lexical-scope-in-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-stack-closure.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -79,7 +79,7 @@ fn main() {\n     zzz(); // #break\n     sentinel();\n \n-    let closure = |&: x: int| {\n+    let closure = |x: int| {\n         zzz(); // #break\n         sentinel();\n "}, {"sha": "ba660deeca01a25738224e848a5c2a05bd74d2e8", "filename": "src/test/debuginfo/lexical-scope-in-unique-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unique-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unique-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-unique-closure.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -80,7 +80,7 @@ fn main() {\n     zzz(); // #break\n     sentinel();\n \n-    let unique_closure = |: x:int| {\n+    let unique_closure = |x:int| {\n         zzz(); // #break\n         sentinel();\n "}, {"sha": "dd0d86bf742e6415adadd180bc6e836bfee08d05", "filename": "src/test/debuginfo/multi-byte-chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fdebuginfo%2Fmulti-byte-chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fdebuginfo%2Fmulti-byte-chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmulti-byte-chars.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -24,5 +24,5 @@ struct C { \u03b8: u8 }\n \n fn main() {\n     let x =  C { \u03b8: 0 };\n-    (|&: c: C| c.\u03b8 )(x);\n+    (|c: C| c.\u03b8 )(x);\n }"}, {"sha": "e41c69fa65dba9689b8e8d15f32f7038101a4a33", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -322,8 +322,8 @@ fn main() {\n     // how that maps to rustc's internal representation of these forms.\n     // Once closures have reached their 1.0 form, the tests below should\n     // probably be expanded.\n-    let closure1 = (|&: x:isize| {}, 0u);\n-    let closure2 = (|&: x:i8, y: f32| { (x as f32) + y }, 0u);\n+    let closure1 = (|x:isize| {}, 0u);\n+    let closure2 = (|x:i8, y: f32| { (x as f32) + y }, 0u);\n \n     zzz(); // #break\n }"}, {"sha": "512df3605bfcdf2ef353c49a839d5555606a6d41", "filename": "src/test/debuginfo/var-captured-in-nested-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -101,10 +101,10 @@ fn main() {\n     let struct_ref = &a_struct;\n     let owned = box 6;\n \n-    let mut closure = |&mut:| {\n+    let mut closure = || {\n         let closure_local = 8;\n \n-        let mut nested_closure = |&mut:| {\n+        let mut nested_closure = || {\n             zzz(); // #break\n             variable = constant + a_struct.a + struct_ref.a + *owned + closure_local;\n         };"}, {"sha": "b07c8ffde7f8ff1310340b9ed97459c6da046dd5", "filename": "src/test/debuginfo/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -61,7 +61,7 @@ fn main() {\n \n     let owned = box 5;\n \n-    let closure = move |:| {\n+    let closure = move || {\n         zzz(); // #break\n         do_something(&constant, &a_struct.a, &*owned);\n     };\n@@ -73,7 +73,7 @@ fn main() {\n     // The `self` argument of the following closure should be passed by value\n     // to FnOnce::call_once(self, args), which gets translated a bit differently\n     // than the regular case. Let's make sure this is supported too.\n-    let immedate_env = move |:| {\n+    let immedate_env = move || {\n         zzz(); // #break\n         return constant2;\n     };"}, {"sha": "ee706c13634f0113aec3ea6ba1fa10d208807459", "filename": "src/test/debuginfo/var-captured-in-stack-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -94,7 +94,7 @@ fn main() {\n     let owned = box 6;\n \n     {\n-        let mut first_closure = |&mut:| {\n+        let mut first_closure = || {\n             zzz(); // #break\n             variable = constant + a_struct.a + struct_ref.a + *owned;\n         };\n@@ -103,7 +103,7 @@ fn main() {\n     }\n \n     {\n-        let mut second_closure = |&mut:| {\n+        let mut second_closure = || {\n             zzz(); // #break\n             variable = constant + a_struct.a + struct_ref.a + *owned;\n         };"}, {"sha": "25f7c64b5ab822b1131074506960a7eed47f2588", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -269,7 +269,7 @@ fn hello<X: SomeTrait>((z, a) : (u32, String), ex: X) {\n     s4.provided_method();\n     s2.prov(45);\n \n-    let closure = |&: x: u32, s: &SomeTrait| {\n+    let closure = |x: u32, s: &SomeTrait| {\n         s.Method(23);\n         return x + y;\n     };"}, {"sha": "f3c874a5afcec13b801d006a754704754ea55b32", "filename": "src/test/run-pass/block-fn-coerce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -13,6 +13,6 @@ fn force<F>(f: F) -> int where F: FnOnce() -> int { return f(); }\n pub fn main() {\n     fn f() -> int { return 7; }\n     assert_eq!(force(f), 7);\n-    let g = {|&:|force(f)};\n+    let g = {||force(f)};\n     assert_eq!(g(), 7);\n }"}, {"sha": "c907778339ec50b64e72f42343c9b25321975bd1", "filename": "src/test/run-pass/borrowck-closures-two-imm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -17,8 +17,8 @@\n fn a() -> i32 {\n     let mut x = 3i32;\n     x += 1;\n-    let c1 = |&:| x * 4;\n-    let c2 = |&:| x * 5;\n+    let c1 = || x * 4;\n+    let c2 = || x * 5;\n     c1() * c2() * x\n }\n \n@@ -29,16 +29,16 @@ fn get(x: &i32) -> i32 {\n fn b() -> i32 {\n     let mut x = 3i32;\n     x += 1;\n-    let c1 = |&:| get(&x);\n-    let c2 = |&:| get(&x);\n+    let c1 = || get(&x);\n+    let c2 = || get(&x);\n     c1() * c2() * x\n }\n \n fn c() -> i32 {\n     let mut x = 3i32;\n     x += 1;\n-    let c1 = |&:| x * 5;\n-    let c2 = |&:| get(&x);\n+    let c1 = || x * 5;\n+    let c2 = || get(&x);\n     c1() * c2() * x\n }\n "}, {"sha": "1be57674fa1ff4ad9c981e3bd59c924029011e39", "filename": "src/test/run-pass/borrowck-move-by-capture-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -14,7 +14,7 @@\n \n pub fn main() {\n     let bar = box 3;\n-    let h = |:| -> int *bar;\n+    let h = || -> int *bar;\n     assert_eq!(h(), 3);\n }\n "}, {"sha": "ca315b7a9f1dbb05f6436899606e9a27a26e5934", "filename": "src/test/run-pass/capture-clauses-unboxed-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -19,6 +19,6 @@ fn each<'a,T,F:FnMut(&'a T)>(x: &'a [T], mut f: F) {\n fn main() {\n     let mut sum = 0u;\n     let elems = [ 1u, 2, 3, 4, 5 ];\n-    each(&elems, |&mut: val: &uint| sum += *val);\n+    each(&elems, |val: &uint| sum += *val);\n     assert_eq!(sum, 15);\n }"}, {"sha": "fa16ea001452c79a52e825264ed202193dd55ace", "filename": "src/test/run-pass/closure-inference2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -11,7 +11,7 @@\n // Test a rather underspecified example:\n \n pub fn main() {\n-    let f = {|&: i| i};\n+    let f = {|i| i};\n     assert_eq!(f(2), 2);\n     assert_eq!(f(5), 5);\n }"}, {"sha": "95af729e5e16545d88022e321a1b84e4d4bdde11", "filename": "src/test/run-pass/empty-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-tag.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -23,6 +23,6 @@ fn wrapper3(i: chan) {\n }\n \n pub fn main() {\n-    let wrapped = {|&:|wrapper3(chan::chan_t)};\n+    let wrapped = {||wrapper3(chan::chan_t)};\n     wrapped();\n }"}, {"sha": "3e81ca5125ba4b84fa16383770577d52027dd7ce", "filename": "src/test/run-pass/fn-pattern-expected-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let f = |&: (x, y): (int, int)| {\n+    let f = |(x, y): (int, int)| {\n         assert_eq!(x, 1);\n         assert_eq!(y, 2);\n     };"}, {"sha": "34417891197a422dd6db05cf34c80eabec933198", "filename": "src/test/run-pass/fn-type-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -12,7 +12,7 @@\n \n pub fn main() {\n     // We should be able to type infer inside of ||s.\n-    let _f = |&:| {\n+    let _f = || {\n         let i = 10;\n     };\n }"}, {"sha": "b59e7b67d4eddb4ad11b80ede4fe0193feb0ad4e", "filename": "src/test/run-pass/hrtb-precedence-of-plus.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -17,7 +17,7 @@\n // cause a compilation error. Issue #18772.\n \n fn adder(y: int) -> Box<Fn(int) -> int + 'static> {\n-    box move |&: x| y + x\n+    box move |x| y + x\n }\n \n fn main() {}"}, {"sha": "c34e1a4862f828502032508d0af68fe704b1f1a2", "filename": "src/test/run-pass/hrtb-unboxed-closure-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fhrtb-unboxed-closure-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fhrtb-unboxed-closure-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-unboxed-closure-trait.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -18,5 +18,5 @@ fn foo<F:Fn(&int)>(f: F) {\n }\n \n fn main() {\n-    foo(|&: x: &int| println!(\"{}\", *x));\n+    foo(|x: &int| println!(\"{}\", *x));\n }"}, {"sha": "c3ec3fc40e30a77559d095e4d16ddef29ff17fbe", "filename": "src/test/run-pass/issue-10718.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-10718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-10718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10718.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -15,6 +15,6 @@ fn f<F:FnOnce()>(p: F) {\n }\n \n pub fn main() {\n-    let p = |:| ();\n+    let p = || ();\n     f(p);\n }"}, {"sha": "5d7a84d80d4c33910210469ef503108cb677bd0a", "filename": "src/test/run-pass/issue-13434.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-13434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-13434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13434.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -26,5 +26,5 @@ fn do_stuff<R: Repro>(r: R) -> String {\n }\n \n pub fn main() {\n-  assert_eq!(\"MyStruct\".to_string(), do_stuff(|: s: MyStruct| format!(\"{:?}\", s)));\n+  assert_eq!(\"MyStruct\".to_string(), do_stuff(|s: MyStruct| format!(\"{:?}\", s)));\n }"}, {"sha": "44465fe5f80ee493fdacb95d5c2245638483c9f6", "filename": "src/test/run-pass/issue-1460.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-1460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-1460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1460.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -10,5 +10,5 @@\n \n \n pub fn main() {\n-    {|&: i| if 1 == i { }};\n+    {|i| if 1 == i { }};\n }"}, {"sha": "933e7e40f06d34ce23ae96de299da6a594acb62b", "filename": "src/test/run-pass/issue-14919.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14919.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -58,6 +58,6 @@ fn match_indices<'a, M, T: IntoMatcher<'a, M>>(s: &'a str, from: T) -> MatchIndi\n \n fn main() {\n     let s = \"abcbdef\";\n-    match_indices(s, |&mut: c: char| c == 'b')\n+    match_indices(s, |c: char| c == 'b')\n         .collect::<Vec<(uint, uint)>>();\n }"}, {"sha": "ab9554f65d4c89d93aa6c813b883551d737809ea", "filename": "src/test/run-pass/issue-15571.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-15571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-15571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15571.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -48,7 +48,7 @@ fn match_on_binding() {\n \n fn match_on_upvar() {\n     let mut foo = Some(box 8i32);\n-    let f = move|:| {\n+    let f = move|| {\n         match foo {\n             None => {},\n             Some(x) => {"}, {"sha": "48ea3a93296e3194420f2e9c79c05e23c907cade", "filename": "src/test/run-pass/issue-16256.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-16256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-16256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16256.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let mut buf = Vec::new();\n-    |&mut: c: u8| buf.push(c);\n+    |c: u8| buf.push(c);\n }"}, {"sha": "ca40b2fe4c7d06fce8db083777c5aa4c88454ab5", "filename": "src/test/run-pass/issue-16560.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-16560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-16560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16560.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -15,7 +15,7 @@ use std::mem;\n \n fn main() {\n     let y = 0u8;\n-    let closure = move |&: x| y + x;\n+    let closure = move |x| y + x;\n \n     // Check that both closures are capturing by value\n     assert_eq!(1, mem::size_of_val(&closure));"}, {"sha": "daf09047bef723649a519d9d5a952376ce28b4ec", "filename": "src/test/run-pass/issue-16668.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16668.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -21,7 +21,7 @@ struct Parser<'a, I, O> {\n impl<'a, I: 'a, O: 'a> Parser<'a, I, O> {\n     fn compose<K: 'a>(mut self, mut rhs: Parser<'a, O, K>) -> Parser<'a, I, K> {\n         Parser {\n-            parse: box move |&mut: x: I| {\n+            parse: box move |x: I| {\n                 match (self.parse)(x) {\n                     Ok(r) => (rhs.parse)(r),\n                     Err(e) => Err(e)"}, {"sha": "cc427dd941b73d7b67d90f986d7e216efb3e37e5", "filename": "src/test/run-pass/issue-16774.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16774.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -47,7 +47,7 @@ fn main() {\n     {\n         let mut test = X(box 5);\n         {\n-            let mut change = |&mut:| { *test = 10 };\n+            let mut change = || { *test = 10 };\n             change();\n         }\n         assert_eq!(*test, 10);"}, {"sha": "f8fbd680dcb9ecfddc59a9668fb9a5be4a065d8d", "filename": "src/test/run-pass/issue-17816.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-17816.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-17816.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17816.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -12,7 +12,7 @@\n \n fn main() {\n     struct Symbol<'a, F: Fn(Vec<&'a str>) -> &'a str> { function: F }\n-    let f = |&: x: Vec<&str>| -> &str \"foobar\";\n+    let f = |x: Vec<&str>| -> &str \"foobar\";\n     let sym = Symbol { function: f };\n     (sym.function)(vec![]);\n }"}, {"sha": "3774aaa190333b97e687a0e4d76842c3e5781cfb", "filename": "src/test/run-pass/issue-17897.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-17897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-17897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17897.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -17,5 +17,5 @@ fn action(cb: Thunk<uint, uint>) -> uint {\n }\n \n pub fn main() {\n-    println!(\"num: {}\", action(Thunk::with_arg(move |:u| u)));\n+    println!(\"num: {}\", action(Thunk::with_arg(move |u| u)));\n }"}, {"sha": "7a5a86822afda0233e98aa0e2222b44804994ae8", "filename": "src/test/run-pass/issue-18188.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-18188.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-18188.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18188.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -20,7 +20,7 @@ pub fn propagate<T, E, F, G>(action: F) -> Thunk<Result<T, E>, Result<T, E>>\n         E: Promisable + Clone,\n         F: FnOnce(&T) -> Result<T, E> + Send,\n         G: FnOnce(Result<T, E>) -> Result<T, E> {\n-    Thunk::with_arg(move |: result: Result<T, E>| {\n+    Thunk::with_arg(move |result: Result<T, E>| {\n         match result {\n             Ok(ref t) => action(t),\n             Err(ref e) => Err(e.clone()),"}, {"sha": "8f560258d9f4795fe0aae54431c215b2df1d184b", "filename": "src/test/run-pass/issue-18652.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-18652.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-18652.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18652.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -17,5 +17,5 @@\n fn main() {\n     let x = 2u8;\n     let y = 3u8;\n-    assert_eq!((move |:| x + y)(), 5);\n+    assert_eq!((move || x + y)(), 5);\n }"}, {"sha": "bb2907241c2c6bfc06c5754f46f79e04c2f7bc09", "filename": "src/test/run-pass/issue-18661.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-18661.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-18661.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18661.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -20,7 +20,7 @@ pub fn inside<F: Fn()>(c: F) {\n // Use different number of type parameters and closure type to trigger\n // an obvious ICE when param environments are mixed up\n pub fn outside<A,B>() {\n-    inside(|&:| {});\n+    inside(|| {});\n }\n \n fn main() {"}, {"sha": "698b61e5759ad98268aece46d4ccec0bbf109963", "filename": "src/test/run-pass/issue-18685.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-18685.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-18685.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18685.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -17,7 +17,7 @@ trait Tr {\n     fn foo(&self);\n \n     fn bar(&self) {\n-        (|:| { self.foo() })()\n+        (|| { self.foo() })()\n     }\n }\n "}, {"sha": "0338a4eff22389e2ac1dc9a88dc51459437dcddd", "filename": "src/test/run-pass/issue-18711.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-18711.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-18711.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18711.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -17,5 +17,5 @@\n extern crate \"issue-18711\" as issue;\n \n fn main() {\n-    (|:| issue::inner(()))();\n+    (|| issue::inner(()))();\n }"}, {"sha": "031a63ba474c181ae7b2a81438decc4a1c6a2627", "filename": "src/test/run-pass/issue-19135.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-19135.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-19135.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19135.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -14,7 +14,7 @@\n struct LifetimeStruct<'a>;\n \n fn main() {\n-    takes_hrtb_closure(|&mut: lts| println!(\"{:?}\", lts));\n+    takes_hrtb_closure(|lts| println!(\"{:?}\", lts));\n }\n \n fn takes_hrtb_closure<F: for<'a>FnMut(LifetimeStruct<'a>)>(mut f: F) {"}, {"sha": "5f2805ed354553f58dfd5d28847b20adea5cc15d", "filename": "src/test/run-pass/issue-2074.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-2074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-2074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2074.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -11,11 +11,11 @@\n #![allow(non_camel_case_types)]\n \n pub fn main() {\n-    let one = |&:| {\n+    let one = || {\n         enum r { a };\n         r::a as uint\n     };\n-    let two = |&:| {\n+    let two = || {\n         enum r { a };\n         r::a as uint\n     };"}, {"sha": "ca2a4e546b7c8abd8aa9ada2868c2c34dccc3a41", "filename": "src/test/run-pass/issue-21306.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-21306.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-21306.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21306.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -12,6 +12,6 @@ use std::sync::Arc;\n \n fn main() {\n     let x = 5us;\n-    let command = Arc::new(Box::new(|&:| { x*2 }));\n+    let command = Arc::new(Box::new(|| { x*2 }));\n     assert_eq!(command(), 10);\n }"}, {"sha": "3e7deee6ec10720b4690df4336df72e1beae4bca", "filename": "src/test/run-pass/issue-3052.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3052.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -14,7 +14,7 @@\n type Connection = Box<FnMut(Vec<u8>) + 'static>;\n \n fn f() -> Option<Connection> {\n-    let mock_connection: Connection = box |&mut: _| {};\n+    let mock_connection: Connection = box |_| {};\n     Some(mock_connection)\n }\n "}, {"sha": "6fc8c9c6843ee2cb3eeea4536f508e31221e4282", "filename": "src/test/run-pass/issue-3429.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-3429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-3429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3429.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -10,6 +10,6 @@\n \n pub fn main() {\n   let x = 1u;\n-  let y = |&:| x;\n+  let y = || x;\n   let _z = y();\n }"}, {"sha": "dd9a6fb35439e99929ab417e0e8a3ce46e6cd1c8", "filename": "src/test/run-pass/issue-5239-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-5239-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-5239-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5239-2.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -11,7 +11,7 @@\n // Regression test for issue #5239\n \n pub fn main() {\n-    let _f = |&: ref x: int| { *x };\n+    let _f = |ref x: int| { *x };\n     let foo = 10;\n     assert!(_f(foo) == 10);\n }"}, {"sha": "39f387afaba048905de543623e8600b6f4c7b14b", "filename": "src/test/run-pass/issue-6157.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-6157.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-6157.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6157.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -21,7 +21,7 @@ fn squarei<'a>(x: int, op: &'a mut OpInt) -> int { op.call(x, x) }\n fn muli(x:int, y:int) -> int { x * y }\n \n pub fn main() {\n-    let mut f = |&mut: x, y| muli(x, y);\n+    let mut f = |x, y| muli(x, y);\n     {\n         let g = &mut f;\n         let h = g as &mut OpInt;"}, {"sha": "e47999fc468607c2dc3a13ff6df57c67c76554a2", "filename": "src/test/run-pass/issue-868.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-868.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-868.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-868.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -20,5 +20,5 @@ pub fn main() {\n     let _: () = f(| | { });\n     // empty block with no type info should compile too\n     let _ = f(||{});\n-    let _ = (|&:|{});\n+    let _ = (||{});\n }"}, {"sha": "6c843993040f38d65dcf0a77c0bb90801c982265", "filename": "src/test/run-pass/issue-9129.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-9129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fissue-9129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9129.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -29,7 +29,7 @@ fn Ident_new() -> Ident {\n \n pub fn light_fuse(fld: Box<bomb>) {\n     int3!();\n-    let f = |&:| {\n+    let f = || {\n         int3!();\n         fld.boom(Ident_new()); // *** 1\n     };"}, {"sha": "009dc562d56fce0850b13328d7e711a5aaf192de", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -16,7 +16,7 @@ struct Refs { refs: Vec<int> , n: int }\n \n pub fn main() {\n     let mut e = Refs{refs: vec!(), n: 0};\n-    let _f = |&:| println!(\"{}\", e.n);\n+    let _f = || println!(\"{}\", e.n);\n     let x: &[int] = e.refs.as_slice();\n     assert_eq!(x.len(), 0);\n }"}, {"sha": "4231e5dba9f0f416b86b2f61b7713551a7a68a3b", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -19,7 +19,8 @@ struct A { a: Box<isize> }\n fn foo() -> Box<FnMut() -> isize + 'static> {\n     let k = box 22;\n     let _u = A {a: k.clone()};\n-    let result  = |&mut:| 22;\n+    // FIXME(#16640) suffix in `22i` suffix shouldn't be necessary\n+    let result  = || 22i;\n     box result\n }\n "}, {"sha": "b1f7da17c8f80767bee34c713ab15627319fe355", "filename": "src/test/run-pass/mut-function-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -17,7 +17,7 @@ fn f(mut y: Box<int>) {\n }\n \n fn g() {\n-    let frob = |&: mut q: Box<int>| { *q = 2; assert!(*q == 2); };\n+    let frob = |mut q: Box<int>| { *q = 2; assert!(*q == 2); };\n     let w = box 37;\n     frob(w);\n "}, {"sha": "d3ae80861f231c5f29aaa57ed211104b7c59c5b8", "filename": "src/test/run-pass/mut-in-ident-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fmut-in-ident-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fmut-in-ident-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmut-in-ident-patterns.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -75,6 +75,6 @@ pub fn main() {\n     x = 30;\n     assert_eq!(x, 30);\n \n-    (|&: A { x: mut t }: A| { t = t+1; t })(A { x: 34 });\n+    (|A { x: mut t }: A| { t = t+1; t })(A { x: 34 });\n \n }"}, {"sha": "e4f1df2d6376df916c553f21a2e8ec7abbaf7d17", "filename": "src/test/run-pass/pattern-in-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fpattern-in-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fpattern-in-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpattern-in-closure.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -14,8 +14,8 @@ struct Foo {\n }\n \n pub fn main() {\n-    let f = |&: (x, _): (int, int)| println!(\"{}\", x + 1);\n-    let g = |&: Foo { x: x, y: _y }: Foo| println!(\"{}\", x + 1);\n+    let f = |(x, _): (int, int)| println!(\"{}\", x + 1);\n+    let g = |Foo { x: x, y: _y }: Foo| println!(\"{}\", x + 1);\n     f((2, 3));\n     g(Foo { x: 1, y: 2 });\n }"}, {"sha": "6ebef9f34ad6619d54bd1798288acd183bf532d1", "filename": "src/test/run-pass/regions-copy-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -24,7 +24,7 @@ pub fn main() {\n     let mut i = 3i32;\n     assert_eq!(i, 3);\n     {\n-        let cl = |&mut:| i += 1;\n+        let cl = || i += 1;\n         let mut cl_box = box_it(box cl);\n         cl_box.cl.call_mut(());\n     }"}, {"sha": "a2b6d569ac9a72f0937219612d86e43c47a0a1be", "filename": "src/test/run-pass/regions-lifetime-nonfree-late-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -28,14 +28,14 @@\n pub fn main() {\n     fn explicit() {\n         fn test<F>(_x: Option<Box<F>>) where F: FnMut(Box<for<'a> FnMut(&'a int)>) {}\n-        test(Some(box |&mut: _f: Box<for<'a> FnMut(&'a int)>| {}));\n+        test(Some(box |_f: Box<for<'a> FnMut(&'a int)>| {}));\n     }\n \n     // The code below is shorthand for the code above (and more likely\n     // to represent what one encounters in practice).\n     fn implicit() {\n         fn test<F>(_x: Option<Box<F>>) where F: FnMut(Box<        FnMut(&   int)>) {}\n-        test(Some(box |&mut: _f: Box<        FnMut(&   int)>| {}));\n+        test(Some(box |_f: Box<        FnMut(&   int)>| {}));\n     }\n \n     explicit();"}, {"sha": "7198c35944f9a0f5b0e764cb55108a5346375ca0", "filename": "src/test/run-pass/regions-static-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -25,6 +25,6 @@ fn call_static_closure(mut cl: closure_box<'static>) {\n }\n \n pub fn main() {\n-    let cl_box = box_it(box |&mut:| println!(\"Hello, world!\"));\n+    let cl_box = box_it(box || println!(\"Hello, world!\"));\n     call_static_closure(cl_box);\n }"}, {"sha": "60856ee60425b310f1441f41b5960099f596b7ee", "filename": "src/test/run-pass/return-from-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Freturn-from-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Freturn-from-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freturn-from-closure.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -13,7 +13,7 @@\n static mut calls: uint = 0;\n \n fn surrounding() {\n-    let return_works = |&: n: int| {\n+    let return_works = |n: int| {\n         unsafe { calls += 1 }\n \n         if n >= 0 { return; }\n@@ -23,7 +23,7 @@ fn surrounding() {\n     return_works(10);\n     return_works(20);\n \n-    let return_works_proc = |: n: int| {\n+    let return_works_proc = |n: int| {\n         unsafe { calls += 1 }\n \n         if n >= 0 { return; }"}, {"sha": "6c9707103b9bb91d8026e11eeb7b73e3b807a44d", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -21,7 +21,7 @@ fn test05_start<F:FnOnce(int)>(f: F) {\n \n fn test05() {\n     let three = box 3;\n-    let fn_to_send = move|: n:int| {\n+    let fn_to_send = move|n:int| {\n         println!(\"{}\", *three + n); // will copy x into the closure\n         assert_eq!(*three, 3);\n     };"}, {"sha": "4df1ff1481042a91b78430029642ee11b0505e09", "filename": "src/test/run-pass/tempfile.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -37,7 +37,7 @@ fn test_tempdir() {\n \n fn test_rm_tempdir() {\n     let (tx, rx) = channel();\n-    let f = move|:| -> () {\n+    let f = move|| -> () {\n         let tmp = TempDir::new(\"test_rm_tempdir\").unwrap();\n         tx.send(tmp.path().clone()).unwrap();\n         panic!(\"panic to unwind past `tmp`\");\n@@ -48,7 +48,7 @@ fn test_rm_tempdir() {\n \n     let tmp = TempDir::new(\"test_rm_tempdir\").unwrap();\n     let path = tmp.path().clone();\n-    let f = move|:| -> () {\n+    let f = move|| -> () {\n         let _tmp = tmp;\n         panic!(\"panic to unwind past `tmp`\");\n     };\n@@ -57,10 +57,11 @@ fn test_rm_tempdir() {\n \n     let path;\n     {\n-        let f = move|:| {\n+        let f = move || {\n             TempDir::new(\"test_rm_tempdir\").unwrap()\n         };\n-        let tmp = Thread::scoped(f).join().ok().expect(\"test_rm_tmdir\");\n+        // FIXME(#16640) `: TempDir` annotation shouldn't be necessary\n+        let tmp: TempDir = Thread::scoped(f).join().ok().expect(\"test_rm_tmdir\");\n         path = tmp.path().clone();\n         assert!(path.exists());\n     }\n@@ -78,7 +79,7 @@ fn test_rm_tempdir() {\n \n fn test_rm_tempdir_close() {\n     let (tx, rx) = channel();\n-    let f = move|:| -> () {\n+    let f = move|| -> () {\n         let tmp = TempDir::new(\"test_rm_tempdir\").unwrap();\n         tx.send(tmp.path().clone()).unwrap();\n         tmp.close();\n@@ -90,7 +91,7 @@ fn test_rm_tempdir_close() {\n \n     let tmp = TempDir::new(\"test_rm_tempdir\").unwrap();\n     let path = tmp.path().clone();\n-    let f = move|:| -> () {\n+    let f = move|| -> () {\n         let tmp = tmp;\n         tmp.close();\n         panic!(\"panic when unwinding past `tmp`\");\n@@ -100,10 +101,11 @@ fn test_rm_tempdir_close() {\n \n     let path;\n     {\n-        let f = move|:| {\n+        let f = move || {\n             TempDir::new(\"test_rm_tempdir\").unwrap()\n         };\n-        let tmp = Thread::scoped(f).join().ok().expect(\"test_rm_tmdir\");\n+        // FIXME(#16640) `: TempDir` annotation shouldn't be necessary\n+        let tmp: TempDir = Thread::scoped(f).join().ok().expect(\"test_rm_tmdir\");\n         path = tmp.path().clone();\n         assert!(path.exists());\n         tmp.close();"}, {"sha": "d33ebeadba86e7008e586df25ab1a99c366b3c96", "filename": "src/test/run-pass/type-id-higher-rank.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -56,8 +56,8 @@ fn main() {\n     // Note that every unboxed closure has its own anonymous type,\n     // so no two IDs should equal each other, even when compatible\n     {\n-        let a = id(|&: _: &int, _: &int| {});\n-        let b = id(|&: _: &int, _: &int| {});\n+        let a = id(|_: &int, _: &int| {});\n+        let b = id(|_: &int, _: &int| {});\n         assert!(a != b);\n     }\n "}, {"sha": "7e71e1da462fd1efc71fc771507939ec6b21723d", "filename": "src/test/run-pass/unboxed-closures-all-traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -24,8 +24,8 @@ fn c<F:FnOnce(int, int) -> int>(f: F) -> int {\n \n fn main() {\n     let z: int = 7;\n-    assert_eq!(a(move |&: x: int, y| x + y + z), 10);\n-    assert_eq!(b(move |&mut: x: int, y| x + y + z), 14);\n-    assert_eq!(c(move |: x: int, y| x + y + z), 18);\n+    assert_eq!(a(move |x: int, y| x + y + z), 10);\n+    assert_eq!(b(move |x: int, y| x + y + z), 14);\n+    assert_eq!(c(move |x: int, y| x + y + z), 18);\n }\n "}, {"sha": "d515ccf2ec0a50ca8e4367210004e298b2850a05", "filename": "src/test/run-pass/unboxed-closures-boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -15,7 +15,7 @@\n use std::ops::FnMut;\n \n  fn make_adder(x: i32) -> Box<FnMut(i32)->i32+'static> {\n-    (box move |&mut: y: i32| -> i32 { x + y }) as\n+    (box move |y: i32| -> i32 { x + y }) as\n         Box<FnMut(i32)->i32+'static>\n }\n "}, {"sha": "f1435b43f80179d6c0f2f4af7ae25b3ea781e624", "filename": "src/test/run-pass/unboxed-closures-by-ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-by-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-by-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-by-ref.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -28,8 +28,8 @@ fn main() {\n     let mut x = 0u;\n     let y = 2u;\n \n-    call_fn(|&:| assert_eq!(x, 0));\n-    call_fn_mut(|&mut:| x += y);\n-    call_fn_once(|:| x += y);\n+    call_fn(|| assert_eq!(x, 0));\n+    call_fn_mut(|| x += y);\n+    call_fn_once(|| x += y);\n     assert_eq!(x, y * 2);\n }"}, {"sha": "0c49c8151708625ac095a0a639a9410240a6ffe4", "filename": "src/test/run-pass/unboxed-closures-direct-sugary-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-direct-sugary-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-direct-sugary-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-direct-sugary-call.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -11,7 +11,7 @@\n #![feature(unboxed_closures)]\n \n fn main() {\n-    let mut unboxed = |&mut:| {};\n+    let mut unboxed = || {};\n     unboxed();\n }\n "}, {"sha": "f4a24c17e6e99834736346f868bb66bd8a46df9b", "filename": "src/test/run-pass/unboxed-closures-drop.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-drop.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -55,65 +55,65 @@ fn c<F:FnOnce(int, int) -> int>(f: F) -> int {\n \n fn test_fn() {\n     {\n-        a(move |&: a: int, b| { a + b });\n+        a(move |a: int, b| { a + b });\n     }\n     assert_eq!(drop_count(), 0);\n \n     {\n         let z = &Droppable::new();\n-        a(move |&: a: int, b| { z; a + b });\n+        a(move |a: int, b| { z; a + b });\n         assert_eq!(drop_count(), 0);\n     }\n     assert_eq!(drop_count(), 1);\n \n     {\n         let z = &Droppable::new();\n         let zz = &Droppable::new();\n-        a(move |&: a: int, b| { z; zz; a + b });\n+        a(move |a: int, b| { z; zz; a + b });\n         assert_eq!(drop_count(), 1);\n     }\n     assert_eq!(drop_count(), 3);\n }\n \n fn test_fn_mut() {\n     {\n-        b(move |&mut: a: int, b| { a + b });\n+        b(move |a: int, b| { a + b });\n     }\n     assert_eq!(drop_count(), 3);\n \n     {\n         let z = &Droppable::new();\n-        b(move |&mut: a: int, b| { z; a + b });\n+        b(move |a: int, b| { z; a + b });\n         assert_eq!(drop_count(), 3);\n     }\n     assert_eq!(drop_count(), 4);\n \n     {\n         let z = &Droppable::new();\n         let zz = &Droppable::new();\n-        b(move |&mut: a: int, b| { z; zz; a + b });\n+        b(move |a: int, b| { z; zz; a + b });\n         assert_eq!(drop_count(), 4);\n     }\n     assert_eq!(drop_count(), 6);\n }\n \n fn test_fn_once() {\n     {\n-        c(move |: a: int, b| { a + b });\n+        c(move |a: int, b| { a + b });\n     }\n     assert_eq!(drop_count(), 6);\n \n     {\n         let z = Droppable::new();\n-        c(move |: a: int, b| { z; a + b });\n+        c(move |a: int, b| { z; a + b });\n         assert_eq!(drop_count(), 7);\n     }\n     assert_eq!(drop_count(), 7);\n \n     {\n         let z = Droppable::new();\n         let zz = Droppable::new();\n-        c(move |: a: int, b| { z; zz; a + b });\n+        c(move |a: int, b| { z; zz; a + b });\n         assert_eq!(drop_count(), 9);\n     }\n     assert_eq!(drop_count(), 9);"}, {"sha": "f4af42a866b6d6a83c478c60311f7b46165f3c2e", "filename": "src/test/run-pass/unboxed-closures-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-generic.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -17,7 +17,7 @@ fn call_it<F:FnMut(i32,i32)->i32>(y: i32, mut f: F) -> i32 {\n }\n \n pub fn main() {\n-    let f = |&mut: x: i32, y: i32| -> i32 { x + y };\n+    let f = |x: i32, y: i32| -> i32 { x + y };\n     let z = call_it(3, f);\n     println!(\"{}\", z);\n     assert_eq!(z, 5);"}, {"sha": "56de15961101f063f9da4785c6e6eb1c0086a919", "filename": "src/test/run-pass/unboxed-closures-infer-argument-types-from-expected-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-argument-types-from-expected-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-argument-types-from-expected-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-argument-types-from-expected-bound.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -22,5 +22,5 @@ fn doit<T,F>(val: T, f: &F)\n }\n \n pub fn main() {\n-    doit(0, &|&: x /*: int*/ | { x.to_int(); });\n+    doit(0, &|x /*: int*/ | { x.to_int(); });\n }"}, {"sha": "c74ed665e7a071d9d70f6c98c306a5e44538245b", "filename": "src/test/run-pass/unboxed-closures-infer-argument-types-from-expected-object-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-argument-types-from-expected-object-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-argument-types-from-expected-object-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-argument-types-from-expected-object-type.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -18,5 +18,5 @@ use std::num::ToPrimitive;\n fn doit<T>(val: T, f: &Fn(T)) { f.call((val,)) }\n \n pub fn main() {\n-    doit(0, &|&: x /*: int*/ | { x.to_int(); });\n+    doit(0, &|x /*: int*/ | { x.to_int(); });\n }"}, {"sha": "a61dd095a0d4da2e6792afcc1bfeef3bb8637e8a", "filename": "src/test/run-pass/unboxed-closures-infer-argument-types-with-bound-regions-from-expected-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-argument-types-with-bound-regions-from-expected-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-argument-types-with-bound-regions-from-expected-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-argument-types-with-bound-regions-from-expected-bound.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -22,5 +22,5 @@ fn doit<T,F>(val: T, f: &F)\n }\n \n pub fn main() {\n-    doit(0, &|&: x /*: int*/ | { x.to_int(); });\n+    doit(0, &|x /*: int*/ | { x.to_int(); });\n }"}, {"sha": "535c4562362c0d3ba9620e768aa66a9855ba4ad3", "filename": "src/test/run-pass/unboxed-closures-monomorphization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -17,7 +17,7 @@\n \n fn main(){\n     fn bar<'a, T:Clone+'a> (t: T) -> Box<FnMut()->T + 'a> {\n-        box move |&mut:| t.clone()\n+        box move || t.clone()\n     }\n \n     let mut f = bar(42_u32);"}, {"sha": "0d04aee2a1519dc3e885b794416c7f4e3df4abce", "filename": "src/test/run-pass/unboxed-closures-move-mutable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-move-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-move-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-move-mutable.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -21,18 +21,18 @@ fn set(x: &mut uint) { *x = 42; }\n fn main() {\n     {\n         let mut x = 0u;\n-        move |&mut:| x += 1;\n+        move || x += 1;\n     }\n     {\n         let mut x = 0u;\n-        move |:| x += 1;\n+        move || x += 1;\n     }\n     {\n         let mut x = 0u;\n-        move |&mut:| set(&mut x);\n+        move || set(&mut x);\n     }\n     {\n         let mut x = 0u;\n-        move |:| set(&mut x);\n+        move || set(&mut x);\n     }\n }"}, {"sha": "c8f0d5fde45efea490bee262988152a5cd764987", "filename": "src/test/run-pass/unboxed-closures-prelude.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -15,13 +15,13 @@\n #![feature(unboxed_closures)]\n \n fn main() {\n-    let task: Box<Fn(int) -> int> = box |&: x| x;\n+    let task: Box<Fn(int) -> int> = box |x| x;\n     task.call((0, ));\n \n-    let mut task: Box<FnMut(int) -> int> = box |&mut: x| x;\n+    let mut task: Box<FnMut(int) -> int> = box |x| x;\n     task(0);\n \n-    call(|:x| x, 22);\n+    call(|x| x, 22);\n }\n \n fn call<F:FnOnce(int) -> int>(f: F, x: int) -> int {"}, {"sha": "9f29e75be7ccaec301935a0a4b14b38188291fec", "filename": "src/test/run-pass/unboxed-closures-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-simple.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -13,7 +13,7 @@\n use std::ops::FnMut;\n \n pub fn main() {\n-    let mut f = |&mut: x: int, y: int| -> int { x + y };\n+    let mut f = |x: int, y: int| -> int { x + y };\n     let z = f(1, 2);\n     assert_eq!(z, 3);\n }"}, {"sha": "9e543f925f82e2acdc60e1f1f5e0eb6b9a8be197", "filename": "src/test/run-pass/unboxed-closures-single-word-env.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-single-word-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-single-word-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-single-word-env.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -27,8 +27,8 @@ fn c<F:FnOnce(int, int) -> int>(f: F) -> int {\n \n fn main() {\n     let z = 10;\n-    assert_eq!(a(move |&: x: int, y| x + y + z), 13);\n-    assert_eq!(b(move |&mut: x: int, y| x + y + z), 17);\n-    assert_eq!(c(move |: x: int, y| x + y + z), 21);\n+    assert_eq!(a(move |x: int, y| x + y + z), 13);\n+    assert_eq!(b(move |x: int, y| x + y + z), 17);\n+    assert_eq!(c(move |x: int, y| x + y + z), 21);\n }\n "}, {"sha": "7a6b68a5e09ec27113ad716f830cf6e5d120f68a", "filename": "src/test/run-pass/unboxed-closures-static-call-fn-once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-static-call-fn-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-static-call-fn-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-static-call-fn-once.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -11,7 +11,7 @@\n #![feature(unboxed_closures)]\n \n fn main() {\n-    let onetime = |: x| x;\n+    let onetime = |x| x;\n     onetime(0);\n }\n "}, {"sha": "2871b5c68620396c9e1815e832084724bb30f9a2", "filename": "src/test/run-pass/unboxed-closures-unique-type-id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-unique-type-id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funboxed-closures-unique-type-id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-unique-type-id.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -30,6 +30,6 @@ pub fn replace_map<'a, T, F>(src: &mut T, prod: F) where F: FnOnce(T) -> T {\n pub fn main() {\n     let mut a = 7u;\n     let b = &mut a;\n-    replace_map(b, |: x: uint| x * 2);\n+    replace_map(b, |x: uint| x * 2);\n     assert_eq!(*b, 14u);\n }"}, {"sha": "4e8fdda95631185c9fc4541c41e4af2b947c3491", "filename": "src/test/run-pass/unused-move-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funused-move-capture.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -13,6 +13,6 @@\n \n pub fn main() {\n     let _x = box 1;\n-    let lam_move = |&:| {};\n+    let lam_move = || {};\n     lam_move();\n }"}, {"sha": "c9f070a279c76f30becf5bfe8aab65c151282de3", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -26,7 +26,7 @@ fn what() {\n         return while !x.get() { x.set(true); };\n     }\n     let i = &Cell::new(false);\n-    let dont = {|&:|the(i)};\n+    let dont = {||the(i)};\n     dont();\n     assert!((i.get()));\n }"}, {"sha": "7edcdf6429223d960d5c09df113f4e1b259e8c74", "filename": "src/test/run-pass/where-clauses-unboxed-closures.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fwhere-clauses-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c05354211b04a52cc66a0b8ad8b2225eaf9e972/src%2Ftest%2Frun-pass%2Fwhere-clauses-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhere-clauses-unboxed-closures.rs?ref=2c05354211b04a52cc66a0b8ad8b2225eaf9e972", "patch": "@@ -18,9 +18,9 @@ fn warm_up<'a, F>(f: F) where F: Fn(&'a mut Bencher) {\n \n fn main() {\n     // ICE trigger\n-    warm_up(|&: b: &mut Bencher| () );\n+    warm_up(|b: &mut Bencher| () );\n \n     // OK\n-    warm_up(|&: b| () );\n+    warm_up(|b| () );\n }\n "}]}