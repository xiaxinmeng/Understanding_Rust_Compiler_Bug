{"sha": "07a1194edf01d0a070506f69dc7d70bdc025cdf9", "node_id": "C_kwDOAAsO6NoAKDA3YTExOTRlZGYwMWQwYTA3MDUwNmY2OWRjN2Q3MGJkYzAyNWNkZjk", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-03-03T11:45:35Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-03-14T15:52:47Z"}, "message": "debuginfo: Refactor debuginfo generation for types -- Run x.py fmt", "tree": {"sha": "d3c1f169c4065b18615541bb3707b99ff07f9fb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3c1f169c4065b18615541bb3707b99ff07f9fb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07a1194edf01d0a070506f69dc7d70bdc025cdf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07a1194edf01d0a070506f69dc7d70bdc025cdf9", "html_url": "https://github.com/rust-lang/rust/commit/07a1194edf01d0a070506f69dc7d70bdc025cdf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07a1194edf01d0a070506f69dc7d70bdc025cdf9/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5144661d6bebdfcff7571c5251796f1b00447506", "url": "https://api.github.com/repos/rust-lang/rust/commits/5144661d6bebdfcff7571c5251796f1b00447506", "html_url": "https://github.com/rust-lang/rust/commit/5144661d6bebdfcff7571c5251796f1b00447506"}], "stats": {"total": 52, "additions": 13, "deletions": 39}, "files": [{"sha": "5a8976c61662b3d3a4983f15cd9d5657f86d11e1", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/doc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07a1194edf01d0a070506f69dc7d70bdc025cdf9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/07a1194edf01d0a070506f69dc7d70bdc025cdf9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fdoc.md?ref=07a1194edf01d0a070506f69dc7d70bdc025cdf9", "patch": "@@ -128,4 +128,4 @@ in the middle of the prologue, however, they are ignored by LLVM's prologue\n detection. The `create_argument_metadata()` and related functions take care\n of linking the `llvm.dbg.declare` instructions to the correct source\n locations even while source location emission is still disabled, so there\n-is no need to do anything special with source location handling here.\n\\ No newline at end of file\n+is no need to do anything special with source location handling here."}, {"sha": "3e2beaecc31edef7f4e7120b661b898a32bead45", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07a1194edf01d0a070506f69dc7d70bdc025cdf9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a1194edf01d0a070506f69dc7d70bdc025cdf9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=07a1194edf01d0a070506f69dc7d70bdc025cdf9", "patch": "@@ -1022,9 +1022,11 @@ fn build_upvar_field_di_nodes<'ll, 'tcx>(\n         }\n     };\n \n-    debug_assert!(up_var_tys\n-        .iter()\n-        .all(|&t| t == cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), t)));\n+    debug_assert!(\n+        up_var_tys\n+            .iter()\n+            .all(|&t| t == cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), t))\n+    );\n \n     let capture_names = closure_saved_names_of_captured_variables(cx.tcx, def_id);\n     let layout = cx.layout_of(closure_or_generator_ty);"}, {"sha": "4740a9e8e9d544ce12e65ce1e6132c76757c61d3", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 7, "deletions": 35, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/07a1194edf01d0a070506f69dc7d70bdc025cdf9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a1194edf01d0a070506f69dc7d70bdc025cdf9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=07a1194edf01d0a070506f69dc7d70bdc025cdf9", "patch": "@@ -263,19 +263,11 @@ impl<'test> TestCx<'test> {\n             Ui | MirOpt => false,\n             mode => panic!(\"unimplemented for mode {:?}\", mode),\n         };\n-        if test_should_run {\n-            self.run_if_enabled()\n-        } else {\n-            WillExecute::No\n-        }\n+        if test_should_run { self.run_if_enabled() } else { WillExecute::No }\n     }\n \n     fn run_if_enabled(&self) -> WillExecute {\n-        if self.config.run_enabled() {\n-            WillExecute::Yes\n-        } else {\n-            WillExecute::Disabled\n-        }\n+        if self.config.run_enabled() { WillExecute::Yes } else { WillExecute::Disabled }\n     }\n \n     fn should_run_successfully(&self, pm: Option<PassMode>) -> bool {\n@@ -2029,11 +2021,7 @@ impl<'test> TestCx<'test> {\n             Some(ref s) => s\n                 .split(' ')\n                 .filter_map(|s| {\n-                    if s.chars().all(|c| c.is_whitespace()) {\n-                        None\n-                    } else {\n-                        Some(s.to_owned())\n-                    }\n+                    if s.chars().all(|c| c.is_whitespace()) { None } else { Some(s.to_owned()) }\n                 })\n                 .collect(),\n             None => Vec::new(),\n@@ -2092,11 +2080,7 @@ impl<'test> TestCx<'test> {\n     /// The revision, ignored for incremental compilation since it wants all revisions in\n     /// the same directory.\n     fn safe_revision(&self) -> Option<&str> {\n-        if self.config.mode == Incremental {\n-            None\n-        } else {\n-            self.revision\n-        }\n+        if self.config.mode == Incremental { None } else { self.revision }\n     }\n \n     /// Gets the absolute path to the directory where all output for the given\n@@ -2251,11 +2235,7 @@ impl<'test> TestCx<'test> {\n \n     fn charset() -> &'static str {\n         // FreeBSD 10.1 defaults to GDB 6.1.1 which doesn't support \"auto\" charset\n-        if cfg!(target_os = \"freebsd\") {\n-            \"ISO-8859-1\"\n-        } else {\n-            \"UTF-8\"\n-        }\n+        if cfg!(target_os = \"freebsd\") { \"ISO-8859-1\" } else { \"UTF-8\" }\n     }\n \n     fn run_rustdoc_test(&self) {\n@@ -3045,11 +3025,7 @@ impl<'test> TestCx<'test> {\n         let (stderr_kind, stdout_kind) = match output_kind {\n             TestOutput::Compile => (\n                 {\n-                    if self.props.stderr_per_bitwidth {\n-                        &stderr_bits\n-                    } else {\n-                        UI_STDERR\n-                    }\n+                    if self.props.stderr_per_bitwidth { &stderr_bits } else { UI_STDERR }\n                 },\n                 UI_STDOUT,\n             ),\n@@ -3746,11 +3722,7 @@ impl<'test> TestCx<'test> {\n         for output_file in files {\n             println!(\"Actual {} saved to {}\", kind, output_file.display());\n         }\n-        if self.config.bless {\n-            0\n-        } else {\n-            1\n-        }\n+        if self.config.bless { 0 } else { 1 }\n     }\n \n     fn prune_duplicate_output(&self, mode: CompareMode, kind: &str, canon_content: &str) {"}]}