{"sha": "4176888c98e119914fe2820f3f5cb22feaeaec8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNzY4ODhjOThlMTE5OTE0ZmUyODIwZjNmNWNiMjJmZWFlYWVjOGU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-07T08:55:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-07T08:55:36Z"}, "message": "Rollup merge of #52885 - Mark-Simulacrum:cleanup-typeck, r=nikomatsakis\n\nRemove some unused method arguments from typeck\n\nNone", "tree": {"sha": "5bea1947ec76d7fa3de30268b10b6dea248824a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bea1947ec76d7fa3de30268b10b6dea248824a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4176888c98e119914fe2820f3f5cb22feaeaec8e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbaV6ICRBK7hj4Ov3rIwAAdHIIACOvqmrb7VC140+y1Zv+hFmI\nKFm4RrgmLGwAg4giy584prwHgbACUTUonez5OE2MenVnafjJXidKhgdliL8wIdsu\nGpF2zbzJ8ZlhjDMIfqVz/SqUbdR7QcD1Ywi4Z0Lfn6gt6tTPa0SJr45N1n5eRkrd\n/lg0BiYmyiEf8VnU1m3hR+EMwJzsuSaLHUbzcNDB4kKKGIbeGrM4j4Zoh+BELhmF\nbYk/nMNmfOp5nwnjnLTLvywzEb6ywLajbOmKgC6qAaxH28AWJndJtDzhZvm+1JBU\nY/tYQCowacYiTrTRl4gk6SAQEaeJNfo3a1rQhKbxCo1BVktbvtCeDrAJfpIqQm8=\n=G29N\n-----END PGP SIGNATURE-----\n", "payload": "tree 5bea1947ec76d7fa3de30268b10b6dea248824a2\nparent 11a902431b8e66da8486b3b9a2d8527746c6ab1a\nparent 4897820a16b162ff19f8d8eaf6515732caaf0a35\nauthor kennytm <kennytm@gmail.com> 1533632136 +0800\ncommitter GitHub <noreply@github.com> 1533632136 +0800\n\nRollup merge of #52885 - Mark-Simulacrum:cleanup-typeck, r=nikomatsakis\n\nRemove some unused method arguments from typeck\n\nNone\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4176888c98e119914fe2820f3f5cb22feaeaec8e", "html_url": "https://github.com/rust-lang/rust/commit/4176888c98e119914fe2820f3f5cb22feaeaec8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4176888c98e119914fe2820f3f5cb22feaeaec8e/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11a902431b8e66da8486b3b9a2d8527746c6ab1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/11a902431b8e66da8486b3b9a2d8527746c6ab1a", "html_url": "https://github.com/rust-lang/rust/commit/11a902431b8e66da8486b3b9a2d8527746c6ab1a"}, {"sha": "4897820a16b162ff19f8d8eaf6515732caaf0a35", "url": "https://api.github.com/repos/rust-lang/rust/commits/4897820a16b162ff19f8d8eaf6515732caaf0a35", "html_url": "https://github.com/rust-lang/rust/commit/4897820a16b162ff19f8d8eaf6515732caaf0a35"}], "stats": {"total": 25, "additions": 7, "deletions": 18}, "files": [{"sha": "546553ac2455de6dd5ad1e038b6c2a3fa8fb59e2", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4176888c98e119914fe2820f3f5cb22feaeaec8e/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4176888c98e119914fe2820f3f5cb22feaeaec8e/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=4176888c98e119914fe2820f3f5cb22feaeaec8e", "patch": "@@ -68,9 +68,7 @@ pub fn compare_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     if let Err(ErrorReported) = compare_synthetic_generics(tcx,\n                                                            impl_m,\n-                                                           impl_m_span,\n-                                                           trait_m,\n-                                                           trait_item_span) {\n+                                                           trait_m) {\n         return;\n     }\n \n@@ -729,14 +727,11 @@ fn compare_number_of_method_arguments<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         impl_m: &ty::AssociatedItem,\n-                                        _impl_m_span: Span, // FIXME necessary?\n-                                        trait_m: &ty::AssociatedItem,\n-                                        _trait_item_span: Option<Span>) // FIXME necessary?\n+                                        trait_m: &ty::AssociatedItem)\n                                         -> Result<(), ErrorReported> {\n     // FIXME(chrisvittal) Clean up this function, list of FIXME items:\n     //     1. Better messages for the span labels\n     //     2. Explanation as to what is going on\n-    //     3. Correct the function signature for what we actually use\n     // If we get here, we already have the same number of generics, so the zip will\n     // be okay.\n     let mut error_found = false;"}, {"sha": "ba65d0606b37267ee00a4f837b1b420628b707e6", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4176888c98e119914fe2820f3f5cb22feaeaec8e/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4176888c98e119914fe2820f3f5cb22feaeaec8e/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=4176888c98e119914fe2820f3f5cb22feaeaec8e", "patch": "@@ -41,21 +41,19 @@ struct Checker<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> Checker<'a, 'tcx> {\n     fn check<F>(&self, trait_def_id: Option<DefId>, mut f: F) -> &Self\n-        where F: FnMut(TyCtxt<'a, 'tcx, 'tcx>, DefId, DefId)\n+        where F: FnMut(TyCtxt<'a, 'tcx, 'tcx>, DefId)\n     {\n         if Some(self.trait_def_id) == trait_def_id {\n             for &impl_id in self.tcx.hir.trait_impls(self.trait_def_id) {\n                 let impl_def_id = self.tcx.hir.local_def_id(impl_id);\n-                f(self.tcx, self.trait_def_id, impl_def_id);\n+                f(self.tcx, impl_def_id);\n             }\n         }\n         self\n     }\n }\n \n-fn visit_implementation_of_drop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                          _drop_did: DefId,\n-                                          impl_did: DefId) {\n+fn visit_implementation_of_drop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_did: DefId) {\n     match tcx.type_of(impl_did).sty {\n         ty::TyAdt(..) => {}\n         _ => {\n@@ -87,9 +85,7 @@ fn visit_implementation_of_drop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-fn visit_implementation_of_copy<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                          _copy_did: DefId,\n-                                          impl_did: DefId) {\n+fn visit_implementation_of_copy<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_did: DefId) {\n     debug!(\"visit_implementation_of_copy: impl_did={:?}\", impl_did);\n \n     let impl_node_id = if let Some(n) = tcx.hir.as_local_node_id(impl_did) {\n@@ -157,9 +153,7 @@ fn visit_implementation_of_copy<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-fn visit_implementation_of_coerce_unsized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                                    _: DefId,\n-                                                    impl_did: DefId) {\n+fn visit_implementation_of_coerce_unsized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_did: DefId) {\n     debug!(\"visit_implementation_of_coerce_unsized: impl_did={:?}\",\n            impl_did);\n "}]}