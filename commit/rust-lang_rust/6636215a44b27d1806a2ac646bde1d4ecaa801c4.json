{"sha": "6636215a44b27d1806a2ac646bde1d4ecaa801c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MzYyMTVhNDRiMjdkMTgwNmEyYWM2NDZiZGUxZDRlY2FhODAxYzQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-01T04:11:17Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-07T15:14:56Z"}, "message": "core: Inherit the bool module", "tree": {"sha": "0a002b5354f600d18c277d51153874fef7ecd1d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a002b5354f600d18c277d51153874fef7ecd1d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6636215a44b27d1806a2ac646bde1d4ecaa801c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6636215a44b27d1806a2ac646bde1d4ecaa801c4", "html_url": "https://github.com/rust-lang/rust/commit/6636215a44b27d1806a2ac646bde1d4ecaa801c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6636215a44b27d1806a2ac646bde1d4ecaa801c4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92095d125ab4353a7bae002b893c2bd1bd06e379", "url": "https://api.github.com/repos/rust-lang/rust/commits/92095d125ab4353a7bae002b893c2bd1bd06e379", "html_url": "https://github.com/rust-lang/rust/commit/92095d125ab4353a7bae002b893c2bd1bd06e379"}], "stats": {"total": 77, "additions": 41, "deletions": 36}, "files": [{"sha": "0ccb7f938373681acd1da24a2823e21d017394c5", "filename": "src/libcore/bool.rs", "status": "renamed", "additions": 4, "deletions": 33, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6636215a44b27d1806a2ac646bde1d4ecaa801c4/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6636215a44b27d1806a2ac646bde1d4ecaa801c4/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=6636215a44b27d1806a2ac646bde1d4ecaa801c4", "patch": "@@ -14,7 +14,6 @@\n //!\n //! Implementations of the following traits:\n //!\n-//! * `FromStr`\n //! * `Not`\n //! * `Ord`\n //! * `TotalOrd`\n@@ -24,11 +23,9 @@\n //!\n //! A `to_bit` conversion function.\n \n-use from_str::FromStr;\n use num::{Int, one, zero};\n-use option::{None, Option, Some};\n \n-#[cfg(not(test))] use cmp::{Eq, Ord, TotalOrd, Ordering};\n+#[cfg(not(test))] use cmp::{Eq, Ord, TotalOrd, Ordering, TotalEq};\n #[cfg(not(test))] use ops::{Not, BitAnd, BitOr, BitXor};\n #[cfg(not(test))] use default::Default;\n \n@@ -55,28 +52,6 @@ pub fn to_bit<N: Int>(p: bool) -> N {\n // Trait impls on `bool`\n /////////////////////////////////////////////////////////////////////////////\n \n-impl FromStr for bool {\n-    /// Parse a `bool` from a string.\n-    ///\n-    /// Yields an `Option<bool>`, because `s` may or may not actually be parseable.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```rust\n-    /// assert_eq!(from_str::<bool>(\"true\"), Some(true));\n-    /// assert_eq!(from_str::<bool>(\"false\"), Some(false));\n-    /// assert_eq!(from_str::<bool>(\"not even a boolean\"), None);\n-    /// ```\n-    #[inline]\n-    fn from_str(s: &str) -> Option<bool> {\n-        match s {\n-            \"true\"  => Some(true),\n-            \"false\" => Some(false),\n-            _       => None,\n-        }\n-    }\n-}\n-\n #[cfg(not(test))]\n impl Not<bool> for bool {\n     /// The logical complement of a boolean value.\n@@ -190,6 +165,9 @@ impl Eq for bool {\n     fn eq(&self, other: &bool) -> bool { (*self) == (*other) }\n }\n \n+#[cfg(not(test))]\n+impl TotalEq for bool {}\n+\n #[cfg(not(test))]\n impl Default for bool {\n     fn default() -> bool { false }\n@@ -260,13 +238,6 @@ mod tests {\n         assert_eq!(!false, true);\n     }\n \n-    #[test]\n-    fn test_from_str() {\n-        assert_eq!(from_str::<bool>(\"true\"), Some(true));\n-        assert_eq!(from_str::<bool>(\"false\"), Some(false));\n-        assert_eq!(from_str::<bool>(\"not even a boolean\"), None);\n-    }\n-\n     #[test]\n     fn test_to_str() {\n         assert_eq!(false.to_str(), \"false\".to_owned());", "previous_filename": "src/libstd/bool.rs"}, {"sha": "666e5b813c958ea1d135658d0b43aa12e4966607", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6636215a44b27d1806a2ac646bde1d4ecaa801c4/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6636215a44b27d1806a2ac646bde1d4ecaa801c4/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=6636215a44b27d1806a2ac646bde1d4ecaa801c4", "patch": "@@ -41,6 +41,7 @@ pub mod container;\n \n mod unit;\n pub mod any;\n+pub mod bool;\n pub mod finally;\n pub mod raw;\n pub mod char;"}, {"sha": "62bb8e4d969f0221b580552b94dcef7da313e04e", "filename": "src/libstd/from_str.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6636215a44b27d1806a2ac646bde1d4ecaa801c4/src%2Flibstd%2Ffrom_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6636215a44b27d1806a2ac646bde1d4ecaa801c4/src%2Flibstd%2Ffrom_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffrom_str.rs?ref=6636215a44b27d1806a2ac646bde1d4ecaa801c4", "patch": "@@ -10,7 +10,7 @@\n \n //! The `FromStr` trait for types that can be created from strings\n \n-use option::Option;\n+use option::{Option, Some, None};\n \n /// A trait to abstract the idea of creating a new instance of a type from a\n /// string.\n@@ -24,3 +24,37 @@ pub trait FromStr {\n pub fn from_str<A: FromStr>(s: &str) -> Option<A> {\n     FromStr::from_str(s)\n }\n+\n+impl FromStr for bool {\n+    /// Parse a `bool` from a string.\n+    ///\n+    /// Yields an `Option<bool>`, because `s` may or may not actually be parseable.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// assert_eq!(from_str::<bool>(\"true\"), Some(true));\n+    /// assert_eq!(from_str::<bool>(\"false\"), Some(false));\n+    /// assert_eq!(from_str::<bool>(\"not even a boolean\"), None);\n+    /// ```\n+    #[inline]\n+    fn from_str(s: &str) -> Option<bool> {\n+        match s {\n+            \"true\"  => Some(true),\n+            \"false\" => Some(false),\n+            _       => None,\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use prelude::*;\n+\n+    #[test]\n+    fn test_bool_from_str() {\n+        assert_eq!(from_str::<bool>(\"true\"), Some(true));\n+        assert_eq!(from_str::<bool>(\"false\"), Some(false));\n+        assert_eq!(from_str::<bool>(\"not even a boolean\"), None);\n+    }\n+}"}, {"sha": "9e74a291eef8399d64557cd190ec992f9cad9ffd", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6636215a44b27d1806a2ac646bde1d4ecaa801c4/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6636215a44b27d1806a2ac646bde1d4ecaa801c4/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=6636215a44b27d1806a2ac646bde1d4ecaa801c4", "patch": "@@ -138,6 +138,7 @@ extern crate core;\n #[cfg(not(test))] pub use ty = core::ty;\n \n pub use core::any;\n+pub use core::bool;\n pub use core::cast;\n pub use core::char;\n pub use core::clone;\n@@ -192,8 +193,6 @@ pub mod prelude;\n #[path = \"num/f32.rs\"]   pub mod f32;\n #[path = \"num/f64.rs\"]   pub mod f64;\n \n-pub mod bool;\n-\n pub mod slice;\n pub mod vec;\n pub mod str;"}]}