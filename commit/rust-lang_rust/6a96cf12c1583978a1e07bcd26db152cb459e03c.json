{"sha": "6a96cf12c1583978a1e07bcd26db152cb459e03c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhOTZjZjEyYzE1ODM5NzhhMWUwN2JjZDI2ZGIxNTJjYjQ1OWUwM2M=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-02T17:09:14Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-19T19:02:34Z"}, "message": "Clean match statement", "tree": {"sha": "ecfd13376d66722e6055c1392df3a16982f68bfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecfd13376d66722e6055c1392df3a16982f68bfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a96cf12c1583978a1e07bcd26db152cb459e03c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a96cf12c1583978a1e07bcd26db152cb459e03c", "html_url": "https://github.com/rust-lang/rust/commit/6a96cf12c1583978a1e07bcd26db152cb459e03c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a96cf12c1583978a1e07bcd26db152cb459e03c/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e79bc410bf5f8d07121cc685d611ca72c21b28d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e79bc410bf5f8d07121cc685d611ca72c21b28d0", "html_url": "https://github.com/rust-lang/rust/commit/e79bc410bf5f8d07121cc685d611ca72c21b28d0"}], "stats": {"total": 58, "additions": 27, "deletions": 31}, "files": [{"sha": "6b8844a7de3899f798cd7bbd12f9136ae967b706", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 27, "deletions": 31, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6a96cf12c1583978a1e07bcd26db152cb459e03c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a96cf12c1583978a1e07bcd26db152cb459e03c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=6a96cf12c1583978a1e07bcd26db152cb459e03c", "patch": "@@ -274,39 +274,35 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                 // input. We try to handle both sensibly.\n                 'args: for arg in &generic_args.args {\n                     while let Some(param) = next_param {\n-                        match param.kind {\n-                            GenericParamDefKind::Lifetime => match arg {\n-                                GenericArg::Lifetime(_) => {\n-                                    push_kind(&mut substs, provided_kind(param, arg));\n-                                    next_param = params.next();\n-                                    continue 'args;\n-                                }\n-                                GenericArg::Type(_) => {\n-                                    // We expected a lifetime argument, but got a type\n-                                    // argument. That means we're inferring the lifetimes.\n-                                    push_kind(&mut substs, inferred_kind(None, param, infer_types));\n-                                    next_param = params.next();\n-                                }\n+                        match (&param.kind, arg) {\n+                            (GenericParamDefKind::Lifetime, GenericArg::Lifetime(_)) => {\n+                                push_kind(&mut substs, provided_kind(param, arg));\n+                                next_param = params.next();\n+                                continue 'args;\n                             }\n-                            GenericParamDefKind::Type { .. } => match arg {\n-                                GenericArg::Type(_) => {\n-                                    push_kind(&mut substs, provided_kind(param, arg));\n-                                    next_param = params.next();\n-                                    continue 'args;\n-                                }\n-                                GenericArg::Lifetime(_) => {\n-                                    // We expected a type argument, but got a lifetime\n-                                    // argument. This is an error, but we need to handle it\n-                                    // gracefully so we can report sensible errors. In this\n-                                    // case, we're simply going to infer the remaining\n-                                    // arguments.\n-                                    if err_if_invalid {\n-                                        tcx.sess.delay_span_bug(span,\n-                                            \"found a GenericArg::Lifetime where a \\\n-                                            GenericArg::Type was expected\");\n-                                    }\n-                                    break 'args;\n+                            (GenericParamDefKind::Lifetime, GenericArg::Type(_)) => {\n+                                // We expected a lifetime argument, but got a type\n+                                // argument. That means we're inferring the lifetimes.\n+                                push_kind(&mut substs, inferred_kind(None, param, infer_types));\n+                                next_param = params.next();\n+                            }\n+                            (GenericParamDefKind::Type { .. }, GenericArg::Type(_)) => {\n+                                push_kind(&mut substs, provided_kind(param, arg));\n+                                next_param = params.next();\n+                                continue 'args;\n+                            }\n+                            (GenericParamDefKind::Type { .. }, GenericArg::Lifetime(_)) => {\n+                                // We expected a type argument, but got a lifetime\n+                                // argument. This is an error, but we need to handle it\n+                                // gracefully so we can report sensible errors. In this\n+                                // case, we're simply going to infer the remaining\n+                                // arguments.\n+                                if err_if_invalid {\n+                                    tcx.sess.delay_span_bug(span,\n+                                        \"found a GenericArg::Lifetime where a \\\n+                                        GenericArg::Type was expected\");\n                                 }\n+                                break 'args;\n                             }\n                         }\n                     }"}]}