{"sha": "1bef90fb25c9d3d608df8983c01ce3cb63639a11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZWY5MGZiMjVjOWQzZDYwOGRmODk4M2MwMWNlM2NiNjM2MzlhMTE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-06-06T23:06:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-06T23:06:52Z"}, "message": "Rollup merge of #86010 - FabianWolff:ICE-parser, r=varkor\n\nFix two ICEs in the parser\n\nThis pull request fixes #84104 and fixes #84148. The latter is caused by an invalid `assert_ne!()` in the parser, which I have simply removed because the error is then caught in another part of the parser.\n\n#84104 is somewhat more subtle and has to do with a suggestion to remove extraneous `<` characters; for instance:\n```rust\nfn main() {\n    foo::<Ty<<<i32>();\n}\n```\ncurrently leads to\n```\nerror: unmatched angle brackets\n --> unmatched-langle.rs:2:10\n  |\n2 |     foo::<Ty<<<i32>();\n  |          ^^^ help: remove extra angle brackets\n```\nwhich is obviously wrong and stems from the fact that the code for issuing the above suggestion does not consider the possibility that there might be other tokens in between the opening angle brackets. In #84104, this has led to a span being generated that ends in the middle of a multi-byte character (because the code issuing the suggestion thought that it was only skipping over `<`, which are single-byte), causing an ICE.", "tree": {"sha": "15e7ebc25db1ca953025db24e4e67d5ab2532612", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15e7ebc25db1ca953025db24e4e67d5ab2532612"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bef90fb25c9d3d608df8983c01ce3cb63639a11", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgvVUNCRBK7hj4Ov3rIwAAoNMIAFYnMpJ875PjGHogJclzNnJT\ntfOAjBu1ikpBGqa5JU2ltFCClQRGOx2xUVU5s3fovh7CLgV810xr7YkEZVUX46Ym\nyXxds+329m+h6nAG0EGaL/BO40r58Yzje/Ybt2SBlHbgRfnHMf69R6k3lQfEPDwA\ngGcRGcCS8G01W7HvAGyF/Zz8tlV1WJtZE4blyxD+IPzXAFGb1oXMRprDeM6YOsFN\nBoc3VwhsR3vJu2oiBcejgxkoYFRk4cC7CoFvfxQDx4Y+iVH7aVQEr45lMO8px0D9\n4UBnAC9xQLavjAm8wjNVAeOF7Du22LSIVjb7UD0qxIusjLCBmBU4cMu/+C6Dn+w=\n=uBJC\n-----END PGP SIGNATURE-----\n", "payload": "tree 15e7ebc25db1ca953025db24e4e67d5ab2532612\nparent a3c76f6d98d6a8161419582c3663638687acae12\nparent 6a6a605a61dfacfa974582484236155ce041a21d\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1623020812 +0200\ncommitter GitHub <noreply@github.com> 1623020812 +0200\n\nRollup merge of #86010 - FabianWolff:ICE-parser, r=varkor\n\nFix two ICEs in the parser\n\nThis pull request fixes #84104 and fixes #84148. The latter is caused by an invalid `assert_ne!()` in the parser, which I have simply removed because the error is then caught in another part of the parser.\n\n#84104 is somewhat more subtle and has to do with a suggestion to remove extraneous `<` characters; for instance:\n```rust\nfn main() {\n    foo::<Ty<<<i32>();\n}\n```\ncurrently leads to\n```\nerror: unmatched angle brackets\n --> unmatched-langle.rs:2:10\n  |\n2 |     foo::<Ty<<<i32>();\n  |          ^^^ help: remove extra angle brackets\n```\nwhich is obviously wrong and stems from the fact that the code for issuing the above suggestion does not consider the possibility that there might be other tokens in between the opening angle brackets. In #84104, this has led to a span being generated that ends in the middle of a multi-byte character (because the code issuing the suggestion thought that it was only skipping over `<`, which are single-byte), causing an ICE.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bef90fb25c9d3d608df8983c01ce3cb63639a11", "html_url": "https://github.com/rust-lang/rust/commit/1bef90fb25c9d3d608df8983c01ce3cb63639a11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bef90fb25c9d3d608df8983c01ce3cb63639a11/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3c76f6d98d6a8161419582c3663638687acae12", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3c76f6d98d6a8161419582c3663638687acae12", "html_url": "https://github.com/rust-lang/rust/commit/a3c76f6d98d6a8161419582c3663638687acae12"}, {"sha": "6a6a605a61dfacfa974582484236155ce041a21d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a6a605a61dfacfa974582484236155ce041a21d", "html_url": "https://github.com/rust-lang/rust/commit/6a6a605a61dfacfa974582484236155ce041a21d"}], "stats": {"total": 220, "additions": 182, "deletions": 38}, "files": [{"sha": "953c6915068afd49409201f91b0ad485cb94c953", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 47, "deletions": 37, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/1bef90fb25c9d3d608df8983c01ce3cb63639a11/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bef90fb25c9d3d608df8983c01ce3cb63639a11/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=1bef90fb25c9d3d608df8983c01ce3cb63639a11", "patch": "@@ -352,49 +352,59 @@ impl<'a> Parser<'a> {\n         debug!(\"parse_generic_args_with_leading_angle_bracket_recovery: (snapshotting)\");\n         match self.parse_angle_args() {\n             Ok(args) => Ok(args),\n-            Err(ref mut e) if is_first_invocation && self.unmatched_angle_bracket_count > 0 => {\n-                // Cancel error from being unable to find `>`. We know the error\n-                // must have been this due to a non-zero unmatched angle bracket\n-                // count.\n-                e.cancel();\n-\n+            Err(mut e) if is_first_invocation && self.unmatched_angle_bracket_count > 0 => {\n                 // Swap `self` with our backup of the parser state before attempting to parse\n                 // generic arguments.\n                 let snapshot = mem::replace(self, snapshot.unwrap());\n \n-                debug!(\n-                    \"parse_generic_args_with_leading_angle_bracket_recovery: (snapshot failure) \\\n-                     snapshot.count={:?}\",\n-                    snapshot.unmatched_angle_bracket_count,\n-                );\n-\n                 // Eat the unmatched angle brackets.\n-                for _ in 0..snapshot.unmatched_angle_bracket_count {\n-                    self.eat_lt();\n-                }\n-\n-                // Make a span over ${unmatched angle bracket count} characters.\n-                let span = lo.with_hi(lo.lo() + BytePos(snapshot.unmatched_angle_bracket_count));\n-                self.struct_span_err(\n-                    span,\n-                    &format!(\n-                        \"unmatched angle bracket{}\",\n-                        pluralize!(snapshot.unmatched_angle_bracket_count)\n-                    ),\n-                )\n-                .span_suggestion(\n-                    span,\n-                    &format!(\n-                        \"remove extra angle bracket{}\",\n-                        pluralize!(snapshot.unmatched_angle_bracket_count)\n-                    ),\n-                    String::new(),\n-                    Applicability::MachineApplicable,\n-                )\n-                .emit();\n+                let all_angle_brackets = (0..snapshot.unmatched_angle_bracket_count)\n+                    .fold(true, |a, _| a && self.eat_lt());\n+\n+                if !all_angle_brackets {\n+                    // If there are other tokens in between the extraneous `<`s, we cannot simply\n+                    // suggest to remove them. This check also prevents us from accidentally ending\n+                    // up in the middle of a multibyte character (issue #84104).\n+                    let _ = mem::replace(self, snapshot);\n+                    Err(e)\n+                } else {\n+                    // Cancel error from being unable to find `>`. We know the error\n+                    // must have been this due to a non-zero unmatched angle bracket\n+                    // count.\n+                    e.cancel();\n+\n+                    debug!(\n+                        \"parse_generic_args_with_leading_angle_bracket_recovery: (snapshot failure) \\\n+                         snapshot.count={:?}\",\n+                        snapshot.unmatched_angle_bracket_count,\n+                    );\n+\n+                    // Make a span over ${unmatched angle bracket count} characters.\n+                    // This is safe because `all_angle_brackets` ensures that there are only `<`s,\n+                    // i.e. no multibyte characters, in this range.\n+                    let span =\n+                        lo.with_hi(lo.lo() + BytePos(snapshot.unmatched_angle_bracket_count));\n+                    self.struct_span_err(\n+                        span,\n+                        &format!(\n+                            \"unmatched angle bracket{}\",\n+                            pluralize!(snapshot.unmatched_angle_bracket_count)\n+                        ),\n+                    )\n+                    .span_suggestion(\n+                        span,\n+                        &format!(\n+                            \"remove extra angle bracket{}\",\n+                            pluralize!(snapshot.unmatched_angle_bracket_count)\n+                        ),\n+                        String::new(),\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n \n-                // Try again without unmatched angle bracket characters.\n-                self.parse_angle_args()\n+                    // Try again without unmatched angle bracket characters.\n+                    self.parse_angle_args()\n+                }\n             }\n             Err(e) => Err(e),\n         }"}, {"sha": "de5a5632600e4ee39a1f6c0dd90d01f92fb5ed46", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bef90fb25c9d3d608df8983c01ce3cb63639a11/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bef90fb25c9d3d608df8983c01ce3cb63639a11/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=1bef90fb25c9d3d608df8983c01ce3cb63639a11", "patch": "@@ -334,7 +334,6 @@ impl<'a> Parser<'a> {\n         mut bounds: GenericBounds,\n         plus: bool,\n     ) -> PResult<'a, TyKind> {\n-        assert_ne!(self.token, token::Question);\n         if plus {\n             self.eat_plus(); // `+`, or `+=` gets split and `+` is discarded\n             bounds.append(&mut self.parse_generic_bounds(Some(self.prev_token.span))?);"}, {"sha": "998949b94a4baf1456b6c1cfc77306c642a45dfc", "filename": "src/test/ui/parser/issue-84104.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1bef90fb25c9d3d608df8983c01ce3cb63639a11/src%2Ftest%2Fui%2Fparser%2Fissue-84104.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bef90fb25c9d3d608df8983c01ce3cb63639a11/src%2Ftest%2Fui%2Fparser%2Fissue-84104.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-84104.rs?ref=1bef90fb25c9d3d608df8983c01ce3cb63639a11", "patch": "@@ -0,0 +1,3 @@\n+// error-pattern: this file contains an unclosed delimiter\n+// error-pattern: expected one of\n+#[i=i::<\u069a\u0716<"}, {"sha": "aff31f2c97149210580a801c7d96b7da442aa065", "filename": "src/test/ui/parser/issue-84104.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1bef90fb25c9d3d608df8983c01ce3cb63639a11/src%2Ftest%2Fui%2Fparser%2Fissue-84104.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bef90fb25c9d3d608df8983c01ce3cb63639a11/src%2Ftest%2Fui%2Fparser%2Fissue-84104.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-84104.stderr?ref=1bef90fb25c9d3d608df8983c01ce3cb63639a11", "patch": "@@ -0,0 +1,16 @@\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-84104.rs:3:13\n+   |\n+LL | #[i=i::<\u069a\u0716<\n+   |  -          ^\n+   |  |\n+   |  unclosed delimiter\n+\n+error: expected one of `>`, a const expression, lifetime, or type, found `]`\n+  --> $DIR/issue-84104.rs:3:13\n+   |\n+LL | #[i=i::<\u069a\u0716<\n+   |             ^ expected one of `>`, a const expression, lifetime, or type\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "25f7ba4d1f88e8920b6beb754c9fb3d3ad97b24c", "filename": "src/test/ui/parser/issue-84148-1.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bef90fb25c9d3d608df8983c01ce3cb63639a11/src%2Ftest%2Fui%2Fparser%2Fissue-84148-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bef90fb25c9d3d608df8983c01ce3cb63639a11/src%2Ftest%2Fui%2Fparser%2Fissue-84148-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-84148-1.rs?ref=1bef90fb25c9d3d608df8983c01ce3cb63639a11", "patch": "@@ -0,0 +1,4 @@\n+fn f(t:for<>t?)\n+//~^ ERROR: expected parameter name\n+//~| ERROR: expected one of\n+//~| ERROR: expected one of"}, {"sha": "98506568d82c233519b4d7f75b908925a1bce198", "filename": "src/test/ui/parser/issue-84148-1.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1bef90fb25c9d3d608df8983c01ce3cb63639a11/src%2Ftest%2Fui%2Fparser%2Fissue-84148-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bef90fb25c9d3d608df8983c01ce3cb63639a11/src%2Ftest%2Fui%2Fparser%2Fissue-84148-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-84148-1.stderr?ref=1bef90fb25c9d3d608df8983c01ce3cb63639a11", "patch": "@@ -0,0 +1,23 @@\n+error: expected parameter name, found `?`\n+  --> $DIR/issue-84148-1.rs:1:14\n+   |\n+LL | fn f(t:for<>t?)\n+   |              ^ expected parameter name\n+\n+error: expected one of `(`, `)`, `+`, `,`, `::`, or `<`, found `?`\n+  --> $DIR/issue-84148-1.rs:1:14\n+   |\n+LL | fn f(t:for<>t?)\n+   |              ^\n+   |              |\n+   |              expected one of `(`, `)`, `+`, `,`, `::`, or `<`\n+   |              help: missing `,`\n+\n+error: expected one of `->`, `;`, `where`, or `{`, found `<eof>`\n+  --> $DIR/issue-84148-1.rs:1:15\n+   |\n+LL | fn f(t:for<>t?)\n+   |               ^ expected one of `->`, `;`, `where`, or `{`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "257a3fd67207ec2bd1a045fc7d88117eb787d5fe", "filename": "src/test/ui/parser/issue-84148-2.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bef90fb25c9d3d608df8983c01ce3cb63639a11/src%2Ftest%2Fui%2Fparser%2Fissue-84148-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bef90fb25c9d3d608df8983c01ce3cb63639a11/src%2Ftest%2Fui%2Fparser%2Fissue-84148-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-84148-2.rs?ref=1bef90fb25c9d3d608df8983c01ce3cb63639a11", "patch": "@@ -0,0 +1,4 @@\n+// error-pattern: this file contains an unclosed delimiter\n+// error-pattern: expected parameter name\n+// error-pattern: expected one of\n+fn f(t:for<>t?"}, {"sha": "6f314da436070371a5f23f93b12aa709dbabe576", "filename": "src/test/ui/parser/issue-84148-2.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1bef90fb25c9d3d608df8983c01ce3cb63639a11/src%2Ftest%2Fui%2Fparser%2Fissue-84148-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bef90fb25c9d3d608df8983c01ce3cb63639a11/src%2Ftest%2Fui%2Fparser%2Fissue-84148-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-84148-2.stderr?ref=1bef90fb25c9d3d608df8983c01ce3cb63639a11", "patch": "@@ -0,0 +1,31 @@\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-84148-2.rs:4:16\n+   |\n+LL | fn f(t:for<>t?\n+   |     -          ^\n+   |     |\n+   |     unclosed delimiter\n+\n+error: expected parameter name, found `?`\n+  --> $DIR/issue-84148-2.rs:4:14\n+   |\n+LL | fn f(t:for<>t?\n+   |              ^ expected parameter name\n+\n+error: expected one of `(`, `)`, `+`, `,`, `::`, or `<`, found `?`\n+  --> $DIR/issue-84148-2.rs:4:14\n+   |\n+LL | fn f(t:for<>t?\n+   |              ^\n+   |              |\n+   |              expected one of `(`, `)`, `+`, `,`, `::`, or `<`\n+   |              help: missing `,`\n+\n+error: expected one of `->`, `;`, `where`, or `{`, found `<eof>`\n+  --> $DIR/issue-84148-2.rs:4:16\n+   |\n+LL | fn f(t:for<>t?\n+   |                ^ expected one of `->`, `;`, `where`, or `{`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "fdf2ae398014b4e22716eca583dd301ba37f9809", "filename": "src/test/ui/parser/unmatched-langle-1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1bef90fb25c9d3d608df8983c01ce3cb63639a11/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bef90fb25c9d3d608df8983c01ce3cb63639a11/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-1.rs?ref=1bef90fb25c9d3d608df8983c01ce3cb63639a11", "patch": "@@ -0,0 +1,9 @@\n+// Check that a suggestion is issued if there are too many `<`s in a\n+// generic argument list, and that the parser recovers properly.\n+\n+fn main() {\n+    foo::<<<<Ty<i32>>();\n+    //~^ ERROR: unmatched angle brackets\n+    //~| ERROR: cannot find function `foo` in this scope [E0425]\n+    //~| ERROR: cannot find type `Ty` in this scope [E0412]\n+}"}, {"sha": "c8072b4c59ad279f2c4863efe6546e29879fea78", "filename": "src/test/ui/parser/unmatched-langle-1.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1bef90fb25c9d3d608df8983c01ce3cb63639a11/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bef90fb25c9d3d608df8983c01ce3cb63639a11/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-1.stderr?ref=1bef90fb25c9d3d608df8983c01ce3cb63639a11", "patch": "@@ -0,0 +1,22 @@\n+error: unmatched angle brackets\n+  --> $DIR/unmatched-langle-1.rs:5:10\n+   |\n+LL |     foo::<<<<Ty<i32>>();\n+   |          ^^^ help: remove extra angle brackets\n+\n+error[E0425]: cannot find function `foo` in this scope\n+  --> $DIR/unmatched-langle-1.rs:5:5\n+   |\n+LL |     foo::<<<<Ty<i32>>();\n+   |     ^^^ not found in this scope\n+\n+error[E0412]: cannot find type `Ty` in this scope\n+  --> $DIR/unmatched-langle-1.rs:5:14\n+   |\n+LL |     foo::<<<<Ty<i32>>();\n+   |              ^^ not found in this scope\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0412, E0425.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "8de0d7d89e4e72b2134b7e140b142c46a4f363a7", "filename": "src/test/ui/parser/unmatched-langle-2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1bef90fb25c9d3d608df8983c01ce3cb63639a11/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bef90fb25c9d3d608df8983c01ce3cb63639a11/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-2.rs?ref=1bef90fb25c9d3d608df8983c01ce3cb63639a11", "patch": "@@ -0,0 +1,15 @@\n+// When there are too many opening `<`s, the compiler would previously\n+// suggest nonsense if the `<`s were interspersed with other tokens:\n+//\n+//   error: unmatched angle brackets\n+//    --> unmatched-langle.rs:2:10\n+//     |\n+//   2 |     foo::<Ty<<<i32>();\n+//     |          ^^^ help: remove extra angle brackets\n+//\n+// This test makes sure that this is no longer happening.\n+\n+fn main() {\n+    foo::<Ty<<<i32>();\n+    //~^ ERROR: expected `::`, found `(`\n+}"}, {"sha": "773bb33d8d3f3956b15850baf503bd62625b1b60", "filename": "src/test/ui/parser/unmatched-langle-2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bef90fb25c9d3d608df8983c01ce3cb63639a11/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bef90fb25c9d3d608df8983c01ce3cb63639a11/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-2.stderr?ref=1bef90fb25c9d3d608df8983c01ce3cb63639a11", "patch": "@@ -0,0 +1,8 @@\n+error: expected `::`, found `(`\n+  --> $DIR/unmatched-langle-2.rs:13:20\n+   |\n+LL |     foo::<Ty<<<i32>();\n+   |                    ^ expected `::`\n+\n+error: aborting due to previous error\n+"}]}