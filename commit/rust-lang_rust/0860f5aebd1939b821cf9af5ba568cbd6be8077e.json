{"sha": "0860f5aebd1939b821cf9af5ba568cbd6be8077e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NjBmNWFlYmQxOTM5YjgyMWNmOWFmNWJhNTY4Y2JkNmJlODA3N2U=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-26T01:07:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-26T01:07:05Z"}, "message": "Rollup merge of #67637 - Mark-Simulacrum:primitive-mod, r=dtolnay\n\nAdd primitive module to libcore\n\nThis re-exports the primitive types from libcore at `core::primitive` to allow\nmacro authors to have a reliable location to use them from.\n\nFixes #44865", "tree": {"sha": "803b98b762167a21f0a72ccb14bf5b02a167a11a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/803b98b762167a21f0a72ccb14bf5b02a167a11a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0860f5aebd1939b821cf9af5ba568cbd6be8077e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeVcS5CRBK7hj4Ov3rIwAAdHIIAHC1tcgC+cxtzgSUOGtG8Xqa\nDt+8CRWsjprpz5vdX9QiQRyyE/gNXfkSJdzDMLGdWiuuykqPFICV0REQGmKT9mdt\npBt8hSUHxZXcXC2yXib487IDcLDIRDjo3jyWHItaGi9JdZpGCHyNxoQjS1P0idpq\nORCXtjVmLNx2wJq1jWmuQYqr/plPdY+gpetn2nkYW9pC5j/ZhOJKMj3zesqkJKkI\nq9P9Vd2WvXPQTL897fvep1rlkKbIPuSKJ1U2bDNfkzUix0M83sRYWHCp40QI/tD3\nDRkpWqeY+utH1iw3yO+69KV2qHA0yZCvFUnMVo8xHDVSY31CCjZGAmZyWefFeSA=\n=p8vO\n-----END PGP SIGNATURE-----\n", "payload": "tree 803b98b762167a21f0a72ccb14bf5b02a167a11a\nparent 6fd8798f4de63328d743eb2a9a9c12e202a4a182\nparent 9c3ee1bc351fcfabcfd47947dc44b0c020427181\nauthor Dylan DPC <dylan.dpc@gmail.com> 1582679225 +0100\ncommitter GitHub <noreply@github.com> 1582679225 +0100\n\nRollup merge of #67637 - Mark-Simulacrum:primitive-mod, r=dtolnay\n\nAdd primitive module to libcore\n\nThis re-exports the primitive types from libcore at `core::primitive` to allow\nmacro authors to have a reliable location to use them from.\n\nFixes #44865\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0860f5aebd1939b821cf9af5ba568cbd6be8077e", "html_url": "https://github.com/rust-lang/rust/commit/0860f5aebd1939b821cf9af5ba568cbd6be8077e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0860f5aebd1939b821cf9af5ba568cbd6be8077e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fd8798f4de63328d743eb2a9a9c12e202a4a182", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fd8798f4de63328d743eb2a9a9c12e202a4a182", "html_url": "https://github.com/rust-lang/rust/commit/6fd8798f4de63328d743eb2a9a9c12e202a4a182"}, {"sha": "9c3ee1bc351fcfabcfd47947dc44b0c020427181", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c3ee1bc351fcfabcfd47947dc44b0c020427181", "html_url": "https://github.com/rust-lang/rust/commit/9c3ee1bc351fcfabcfd47947dc44b0c020427181"}], "stats": {"total": 98, "additions": 97, "deletions": 1}, "files": [{"sha": "7bd1d00e84ca1e184339949ecbdea7c120e31b44", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0860f5aebd1939b821cf9af5ba568cbd6be8077e/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0860f5aebd1939b821cf9af5ba568cbd6be8077e/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=0860f5aebd1939b821cf9af5ba568cbd6be8077e", "patch": "@@ -267,6 +267,9 @@ mod bool;\n mod tuple;\n mod unit;\n \n+#[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n+pub mod primitive;\n+\n // Pull in the `core_arch` crate directly into libcore. The contents of\n // `core_arch` are in a different repository: rust-lang/stdarch.\n //"}, {"sha": "e20b2c5c9382a116b35385d680195eef3b4e17d0", "filename": "src/libcore/primitive.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/0860f5aebd1939b821cf9af5ba568cbd6be8077e/src%2Flibcore%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0860f5aebd1939b821cf9af5ba568cbd6be8077e/src%2Flibcore%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprimitive.rs?ref=0860f5aebd1939b821cf9af5ba568cbd6be8077e", "patch": "@@ -0,0 +1,67 @@\n+//! This module reexports the primitive types to allow usage that is not\n+//! possibly shadowed by other declared types.\n+//!\n+//! This is normally only useful in macro generated code.\n+//!\n+//! An example of this is when generating a new struct and an impl for it:\n+//!\n+//! ```rust,compile_fail\n+//! pub struct bool;\n+//!\n+//! impl QueryId for bool {\n+//!     const SOME_PROPERTY: bool = true;\n+//! }\n+//!\n+//! # trait QueryId { const SOME_PROPERTY: core::primitive::bool; }\n+//! ```\n+//!\n+//! Note that the `SOME_PROPERTY` associated constant would not compile, as its\n+//! type `bool` refers to the struct, rather than to the primitive bool type.\n+//!\n+//! A correct implementation could look like:\n+//!\n+//! ```rust\n+//! # #[allow(non_camel_case_types)]\n+//! pub struct bool;\n+//!\n+//! impl QueryId for bool {\n+//!     const SOME_PROPERTY: core::primitive::bool = true;\n+//! }\n+//!\n+//! # trait QueryId { const SOME_PROPERTY: core::primitive::bool; }\n+//! ```\n+\n+#[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n+pub use bool;\n+#[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n+pub use char;\n+#[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n+pub use f32;\n+#[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n+pub use f64;\n+#[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n+pub use i128;\n+#[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n+pub use i16;\n+#[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n+pub use i32;\n+#[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n+pub use i64;\n+#[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n+pub use i8;\n+#[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n+pub use isize;\n+#[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n+pub use str;\n+#[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n+pub use u128;\n+#[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n+pub use u16;\n+#[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n+pub use u32;\n+#[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n+pub use u64;\n+#[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n+pub use u8;\n+#[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n+pub use usize;"}, {"sha": "7b3c702b929c0b9a3cfa0e355220545b6fc1b103", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0860f5aebd1939b821cf9af5ba568cbd6be8077e/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0860f5aebd1939b821cf9af5ba568cbd6be8077e/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=0860f5aebd1939b821cf9af5ba568cbd6be8077e", "patch": "@@ -233,12 +233,12 @@\n #![feature(allocator_internals)]\n #![feature(allow_internal_unsafe)]\n #![feature(allow_internal_unstable)]\n-#![feature(atomic_mut_ptr)]\n #![feature(arbitrary_self_types)]\n #![feature(array_error_internals)]\n #![feature(asm)]\n #![feature(assoc_int_consts)]\n #![feature(associated_type_bounds)]\n+#![feature(atomic_mut_ptr)]\n #![feature(box_syntax)]\n #![feature(c_variadic)]\n #![feature(cfg_target_has_atomic)]\n@@ -551,6 +551,9 @@ pub use core::{\n     trace_macros,\n };\n \n+#[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n+pub use core::primitive;\n+\n // Include a number of private modules that exist solely to provide\n // the rustdoc documentation for primitive types. Using `include!`\n // because rustdoc only looks for these modules at the crate level."}, {"sha": "9d381a8a94e3f488ee7c8ff9147171cb0c930a2b", "filename": "src/test/ui/resolve/resolve-primitive-fallback.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0860f5aebd1939b821cf9af5ba568cbd6be8077e/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0860f5aebd1939b821cf9af5ba568cbd6be8077e/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr?ref=0860f5aebd1939b821cf9af5ba568cbd6be8077e", "patch": "@@ -9,6 +9,11 @@ error[E0412]: cannot find type `u8` in the crate root\n    |\n LL |     let _: ::u8;\n    |              ^^ not found in the crate root\n+   |\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+LL | use std::primitive::u8;\n+   |\n \n error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/resolve-primitive-fallback.rs:3:5"}, {"sha": "f290a329eaac298575d6981faa0ae3adbf694dcf", "filename": "src/test/ui/shadow-bool.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0860f5aebd1939b821cf9af5ba568cbd6be8077e/src%2Ftest%2Fui%2Fshadow-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0860f5aebd1939b821cf9af5ba568cbd6be8077e/src%2Ftest%2Fui%2Fshadow-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshadow-bool.rs?ref=0860f5aebd1939b821cf9af5ba568cbd6be8077e", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+\n+mod bar {\n+    pub trait QueryId {\n+        const SOME_PROPERTY: bool;\n+    }\n+}\n+\n+use bar::QueryId;\n+\n+#[allow(non_camel_case_types)]\n+pub struct bool;\n+\n+impl QueryId for bool {\n+    const SOME_PROPERTY: core::primitive::bool = true;\n+}\n+\n+fn main() {}"}]}