{"sha": "865d83e87ab489f2915802e70a5c4a3f2424ff67", "node_id": "C_kwDOAAsO6NoAKDg2NWQ4M2U4N2FiNDg5ZjI5MTU4MDJlNzBhNWM0YTNmMjQyNGZmNjc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-11T20:08:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-11T20:08:09Z"}, "message": "Rollup merge of #106705 - compiler-errors:new-solver-err-properly, r=lcnr\n\nReport fulfillment errors in new trait solver\n\nCauses fewer ICEs when testing the new solver :smile:", "tree": {"sha": "8a9881668006bda5f9df7045fe0873ef06fda32d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a9881668006bda5f9df7045fe0873ef06fda32d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/865d83e87ab489f2915802e70a5c4a3f2424ff67", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjvxcpCRBK7hj4Ov3rIwAAisQIAE1i0hyHms2ARJ6aYhA1QNh7\nl4LXCzAuqF54NS1HDhdreeCS9oJdK8xk43sN08tISxlDR0QHVggyg9cQ3kN5LMsQ\n8Fv+mnDgmRBxgGmgwu4usJFHB5pe/gBZMwRfaBhcbcuuIdt05Lf9/bA4J4tqcX4o\nHOztRlYXiYwK05jwq0lXvjuf8TN9LzFLh20VAsr2NFLuj3d/IVVP0KKZH6cX2UJz\nXe54qe3zXwp129DZi8KUz86plD4Z3t3am5a+MgrNzMHL3Hc98xqDd7mrLanHn13s\nWR42fjRz1yVIz/5Fs5sWNqz5NdGYcOSnrzIbhuwBhsIeT9utlPuKxO1YP2yyD+8=\n=1fDj\n-----END PGP SIGNATURE-----\n", "payload": "tree 8a9881668006bda5f9df7045fe0873ef06fda32d\nparent 90f9c681d44b91ed41425284dd748604268cdc4e\nparent 104ec48c649987685e385b7f64a19921403ece63\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673467689 +0100\ncommitter GitHub <noreply@github.com> 1673467689 +0100\n\nRollup merge of #106705 - compiler-errors:new-solver-err-properly, r=lcnr\n\nReport fulfillment errors in new trait solver\n\nCauses fewer ICEs when testing the new solver :smile:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/865d83e87ab489f2915802e70a5c4a3f2424ff67", "html_url": "https://github.com/rust-lang/rust/commit/865d83e87ab489f2915802e70a5c4a3f2424ff67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/865d83e87ab489f2915802e70a5c4a3f2424ff67/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90f9c681d44b91ed41425284dd748604268cdc4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/90f9c681d44b91ed41425284dd748604268cdc4e", "html_url": "https://github.com/rust-lang/rust/commit/90f9c681d44b91ed41425284dd748604268cdc4e"}, {"sha": "104ec48c649987685e385b7f64a19921403ece63", "url": "https://api.github.com/repos/rust-lang/rust/commits/104ec48c649987685e385b7f64a19921403ece63", "html_url": "https://github.com/rust-lang/rust/commit/104ec48c649987685e385b7f64a19921403ece63"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "c014d682a9aaabcdb269168dd6e050f4dae2784c", "filename": "compiler/rustc_trait_selection/src/solve/fulfill.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/865d83e87ab489f2915802e70a5c4a3f2424ff67/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/865d83e87ab489f2915802e70a5c4a3f2424ff67/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs?ref=865d83e87ab489f2915802e70a5c4a3f2424ff67", "patch": "@@ -3,7 +3,10 @@ use std::mem;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_infer::{\n     infer::InferCtxt,\n-    traits::{query::NoSolution, FulfillmentError, PredicateObligation, TraitEngine},\n+    traits::{\n+        query::NoSolution, FulfillmentError, FulfillmentErrorCode, PredicateObligation,\n+        SelectionError, TraitEngine,\n+    },\n };\n use rustc_middle::ty;\n \n@@ -45,32 +48,43 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n             return errors;\n         }\n \n-        if self.obligations.is_empty() {\n-            Vec::new()\n-        } else {\n-            unimplemented!(\"ambiguous obligations\")\n-        }\n+        self.obligations\n+            .drain(..)\n+            .map(|obligation| FulfillmentError {\n+                obligation: obligation.clone(),\n+                code: FulfillmentErrorCode::CodeSelectionError(SelectionError::Unimplemented),\n+                root_obligation: obligation,\n+            })\n+            .collect()\n     }\n \n     fn select_where_possible(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>> {\n-        let errors = Vec::new();\n+        let mut errors = Vec::new();\n         for i in 0.. {\n             if !infcx.tcx.recursion_limit().value_within_limit(i) {\n                 unimplemented!(\"overflow\")\n             }\n \n             let mut has_changed = false;\n-            for o in mem::take(&mut self.obligations) {\n+            for obligation in mem::take(&mut self.obligations) {\n                 let mut cx = EvalCtxt::new(infcx.tcx);\n-                let (changed, certainty) = match cx.evaluate_goal(infcx, o.clone().into()) {\n+                let (changed, certainty) = match cx.evaluate_goal(infcx, obligation.clone().into())\n+                {\n                     Ok(result) => result,\n-                    Err(NoSolution) => unimplemented!(\"error\"),\n+                    Err(NoSolution) => {\n+                        errors.push(FulfillmentError {\n+                            obligation: obligation.clone(),\n+                            code: FulfillmentErrorCode::CodeAmbiguity,\n+                            root_obligation: obligation,\n+                        });\n+                        continue;\n+                    }\n                 };\n \n                 has_changed |= changed;\n                 match certainty {\n                     Certainty::Yes => {}\n-                    Certainty::Maybe(_) => self.obligations.push(o),\n+                    Certainty::Maybe(_) => self.obligations.push(obligation),\n                 }\n             }\n "}]}