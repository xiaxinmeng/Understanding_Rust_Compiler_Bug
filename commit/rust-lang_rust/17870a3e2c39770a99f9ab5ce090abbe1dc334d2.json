{"sha": "17870a3e2c39770a99f9ab5ce090abbe1dc334d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ODcwYTNlMmMzOTc3MGE5OWY5YWI1Y2UwOTBhYmJlMWRjMzM0ZDI=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-09-03T20:18:23Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-09-09T22:42:20Z"}, "message": "Better API", "tree": {"sha": "85e98d57518fd2735820e9b70f16a7e2ab54d082", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85e98d57518fd2735820e9b70f16a7e2ab54d082"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17870a3e2c39770a99f9ab5ce090abbe1dc334d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17870a3e2c39770a99f9ab5ce090abbe1dc334d2", "html_url": "https://github.com/rust-lang/rust/commit/17870a3e2c39770a99f9ab5ce090abbe1dc334d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17870a3e2c39770a99f9ab5ce090abbe1dc334d2/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bed588001a1d6cd5c83a3eefc6ef77c439de40b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bed588001a1d6cd5c83a3eefc6ef77c439de40b", "html_url": "https://github.com/rust-lang/rust/commit/4bed588001a1d6cd5c83a3eefc6ef77c439de40b"}], "stats": {"total": 88, "additions": 64, "deletions": 24}, "files": [{"sha": "37a8432bd729e6e0b44a2b8f9e07090508a1dcc5", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/17870a3e2c39770a99f9ab5ce090abbe1dc334d2/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17870a3e2c39770a99f9ab5ce090abbe1dc334d2/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=17870a3e2c39770a99f9ab5ce090abbe1dc334d2", "patch": "@@ -96,7 +96,7 @@ pub trait FileLoader {\n     /// `#[path = \"C://no/way\"]`\n     fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId>;\n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>>;\n-    fn list_some_random_files_todo(&self, anchor: FileId) -> Vec<(FileId, String)>;\n+    fn possible_sudmobules(&self, module_file: FileId) -> Vec<(FileId, String)>;\n }\n \n /// Database which stores all significant input facts: source code and project\n@@ -166,8 +166,25 @@ impl<T: SourceDatabaseExt> FileLoader for FileLoaderDelegate<&'_ T> {\n         self.0.source_root_crates(source_root)\n     }\n \n-    fn list_some_random_files_todo(&self, anchor: FileId) -> Vec<(FileId, String)> {\n-        self.source_root(anchor).file_set.list_some_random_files_todo(anchor)\n+    fn possible_sudmobules(&self, module_file: FileId) -> Vec<(FileId, String)> {\n+        fn possible_sudmobules_opt(\n+            module_files: &FileSet,\n+            module_file: FileId,\n+        ) -> Option<Vec<(FileId, String)>> {\n+            // TODO kb resolve path thinks that the input is a file...\n+            let directory_with_module_file = module_files.resolve_path(module_file, \"/../\")?;\n+            let directory_with_applicable_modules =\n+                match module_files.file_name_and_extension(module_file)? {\n+                    (\"mod\", \"rs\") | (\"lib\", \"rs\") => Some(directory_with_module_file),\n+                    (directory_with_module_name, \"rs\") => module_files\n+                        .resolve_path(directory_with_module_file, directory_with_module_name),\n+                    _ => None,\n+                }?;\n+            Some(module_files.list_files(directory_with_applicable_modules))\n+        }\n+\n+        possible_sudmobules_opt(&self.source_root(module_file).file_set, module_file)\n+            .unwrap_or_default()\n     }\n }\n "}, {"sha": "a35ed4f3c3e41caaf26bfadb05be5140296d6b55", "filename": "crates/hir_def/src/test_db.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17870a3e2c39770a99f9ab5ce090abbe1dc334d2/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17870a3e2c39770a99f9ab5ce090abbe1dc334d2/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftest_db.rs?ref=17870a3e2c39770a99f9ab5ce090abbe1dc334d2", "patch": "@@ -63,6 +63,9 @@ impl FileLoader for TestDB {\n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n+    fn possible_sudmobules(&self, module_file: FileId) -> Vec<(FileId, String)> {\n+        FileLoaderDelegate(self).possible_sudmobules(module_file)\n+    }\n }\n \n impl TestDB {"}, {"sha": "a0d1525b00b1393dcdc590db70b3ac5ea6d90d04", "filename": "crates/hir_expand/src/test_db.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17870a3e2c39770a99f9ab5ce090abbe1dc334d2/crates%2Fhir_expand%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17870a3e2c39770a99f9ab5ce090abbe1dc334d2/crates%2Fhir_expand%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Ftest_db.rs?ref=17870a3e2c39770a99f9ab5ce090abbe1dc334d2", "patch": "@@ -46,4 +46,7 @@ impl FileLoader for TestDB {\n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n+    fn possible_sudmobules(&self, module_file: FileId) -> Vec<(FileId, String)> {\n+        FileLoaderDelegate(self).possible_sudmobules(module_file)\n+    }\n }"}, {"sha": "6f61e7dfed7a34ed078d207209fde29ac9e650cf", "filename": "crates/hir_ty/src/test_db.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17870a3e2c39770a99f9ab5ce090abbe1dc334d2/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17870a3e2c39770a99f9ab5ce090abbe1dc334d2/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs?ref=17870a3e2c39770a99f9ab5ce090abbe1dc334d2", "patch": "@@ -73,6 +73,9 @@ impl FileLoader for TestDB {\n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n+    fn possible_sudmobules(&self, module_file: FileId) -> Vec<(FileId, String)> {\n+        FileLoaderDelegate(self).possible_sudmobules(module_file)\n+    }\n }\n \n impl TestDB {"}, {"sha": "cbfc77a461eb4e0af3f95444eeee34d7442313f5", "filename": "crates/ide/src/completion/completion_context.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17870a3e2c39770a99f9ab5ce090abbe1dc334d2/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17870a3e2c39770a99f9ab5ce090abbe1dc334d2/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=17870a3e2c39770a99f9ab5ce090abbe1dc334d2", "patch": "@@ -120,11 +120,10 @@ impl<'a> CompletionContext<'a> {\n                     if !matches!(definition_source.value, ModuleSource::SourceFile(_)) {\n                         return None;\n                     }\n-                    let definition_source_file = definition_source.file_id.original_file(db);\n-\n-                    // TODO kb for all possible candidates\n-                    let zz = db.list_some_random_files_todo(definition_source_file);\n-                    dbg!(zz);\n+                    let module_definition_source_file = definition_source.file_id.original_file(db);\n+                    let mod_declaration_candidates =\n+                        db.possible_sudmobules(module_definition_source_file);\n+                    dbg!(mod_declaration_candidates);\n                     // TODO kb exlude existing children from the candidates\n                     let existing_children = current_module.children(db).collect::<Vec<_>>();\n                     dbg!(existing_children);"}, {"sha": "dc1d2b9fe200c2e6f35273512f099c813d547ebf", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17870a3e2c39770a99f9ab5ce090abbe1dc334d2/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17870a3e2c39770a99f9ab5ce090abbe1dc334d2/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=17870a3e2c39770a99f9ab5ce090abbe1dc334d2", "patch": "@@ -74,8 +74,8 @@ impl FileLoader for RootDatabase {\n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n-    fn list_some_random_files_todo(&self, anchor: FileId) -> Vec<(FileId, String)> {\n-        FileLoaderDelegate(self).list_some_random_files_todo(anchor)\n+    fn possible_sudmobules(&self, module_file: FileId) -> Vec<(FileId, String)> {\n+        FileLoaderDelegate(self).possible_sudmobules(module_file)\n     }\n }\n "}, {"sha": "0caddc3bc216275dfce19736f1a36b0c68e6d5ae", "filename": "crates/vfs/src/file_set.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/17870a3e2c39770a99f9ab5ce090abbe1dc334d2/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17870a3e2c39770a99f9ab5ce090abbe1dc334d2/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Ffile_set.rs?ref=17870a3e2c39770a99f9ab5ce090abbe1dc334d2", "patch": "@@ -20,15 +20,24 @@ impl FileSet {\n         self.files.len()\n     }\n     pub fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n-        let mut base = self.paths[&anchor].clone();\n+        let mut base = dbg!(self.paths[&anchor].clone());\n         base.pop();\n-        let path = base.join(path)?;\n+        let path = dbg!(base).join(dbg!(path))?;\n         self.files.get(&path).copied()\n     }\n-    pub fn list_some_random_files_todo(&self, anchor: FileId) -> Vec<(FileId, String)> {\n-        let anchor_path = self.paths[&anchor].clone();\n+\n+    pub fn file_name_and_extension(&self, file: FileId) -> Option<(&str, &str)> {\n+        self.paths[&file].file_name_and_extension()\n+    }\n+\n+    pub fn list_files(&self, directory: FileId) -> Vec<(FileId, String)> {\n+        // TODO kb determine the ways to list all applicable files\n+        // Maybe leave list directory here only and the move the rest of the logic into the database impl?\n+        // cache results in Salsa?\n+\n+        dbg!(directory);\n         /*\n-        [crates/vfs/src/file_set.rs:30] anchor_path = \"/Users/someonetoignore/Downloads/tmp_dir/zzzz/src/lib.rs\"\n+        [crates/vfs/src/file_set.rs:30] directory = \"/Users/someonetoignore/Downloads/tmp_dir/zzzz/src/\"\n         [crates/vfs/src/file_set.rs:31] self.files.keys() = [\n             \"/Users/someonetoignore/Downloads/tmp_dir/zzzz/src/test_mod_1/test_mod_2/test_mod_3.rs\",\n             \"/Users/someonetoignore/Downloads/tmp_dir/zzzz/src/test_mod_1/test_mod_2.rs\",\n@@ -38,15 +47,6 @@ impl FileSet {\n             \"/Users/someonetoignore/Downloads/tmp_dir/zzzz/src/test_mod_3.rs\",\n         ]\n         */\n-\n-        // TODO kb determine the ways to list all applicable files\n-        // Maybe leave list directory here only and the move the rest of the logic into the database impl?\n-\n-        // Need to get the following things:\n-        // * name of the anchor_path file (file_name, validate that it's a file!)\n-        // * list of all files in the file's contai/ning directory (file_dir)\n-        // * list of all files in `file_dir/file_name` or just `file_dir/`, for lib.rs or mod.rs\n-        // * consider special case for /src/bin/foo.rs as a mod<|> source\n         Vec::new()\n     }\n     pub fn insert(&mut self, file_id: FileId, path: VfsPath) {"}, {"sha": "7b965bb4cdb8f4548c476cfc34bd446565886319", "filename": "crates/vfs/src/vfs_path.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/17870a3e2c39770a99f9ab5ce090abbe1dc334d2/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17870a3e2c39770a99f9ab5ce090abbe1dc334d2/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Fvfs_path.rs?ref=17870a3e2c39770a99f9ab5ce090abbe1dc334d2", "patch": "@@ -49,6 +49,16 @@ impl VfsPath {\n         }\n     }\n \n+    pub fn file_name_and_extension(&self) -> Option<(&str, &str)> {\n+        match &self.0 {\n+            VfsPathRepr::PathBuf(p) => p\n+                .file_stem()\n+                .zip(p.extension())\n+                .and_then(|(name, extension)| Some((name.to_str()?, extension.to_str()?))),\n+            VfsPathRepr::VirtualPath(p) => p.file_name_and_extension(),\n+        }\n+    }\n+\n     // Don't make this `pub`\n     pub(crate) fn encode(&self, buf: &mut Vec<u8>) {\n         let tag = match &self.0 {\n@@ -268,4 +278,9 @@ impl VirtualPath {\n         res.0 = format!(\"{}/{}\", res.0, path);\n         Some(res)\n     }\n+\n+    pub fn file_name_and_extension(&self) -> Option<(&str, &str)> {\n+        // TODO kb check if is a file\n+        Some((\"test_mod_1\", \"rs\"))\n+    }\n }"}]}