{"sha": "8ffbe86dfd24ffcc11ec37bceca9102260d59db2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZmJlODZkZmQyNGZmY2MxMWVjMzdiY2VjYTkxMDIyNjBkNTlkYjI=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2020-01-29T12:40:27Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2020-01-29T12:40:27Z"}, "message": "Parse cargo output a line at a time.\n\nWe previously used serde's stream deserializer to read json blobs from\nthe cargo output. It has an issue though: If the deserializer encounters\ninvalid input, it gets stuck reporting the same error again and again\nbecause it is unable to foward over the input until it reaches a new\nvalid object.\n\nReading a line at a time and manually deserializing fixes this issue,\nbecause cargo makes sure to only outpu one json blob per line, so should\nwe encounter invalid input, we can just skip a line and continue.\n\nThe main reason this would happen is stray printf-debugging in\nprocedural macros, so we still report that an error occured, but we\nhandle it gracefully now.\n\nFixes #2935", "tree": {"sha": "9b21617545fc358ebf2a47c8f28bf663a5a9afbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b21617545fc358ebf2a47c8f28bf663a5a9afbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ffbe86dfd24ffcc11ec37bceca9102260d59db2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ffbe86dfd24ffcc11ec37bceca9102260d59db2", "html_url": "https://github.com/rust-lang/rust/commit/8ffbe86dfd24ffcc11ec37bceca9102260d59db2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ffbe86dfd24ffcc11ec37bceca9102260d59db2/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fd29651b4f2bca8a36685a49d35cd349692984a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fd29651b4f2bca8a36685a49d35cd349692984a", "html_url": "https://github.com/rust-lang/rust/commit/6fd29651b4f2bca8a36685a49d35cd349692984a"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "dd814fc9d9acadcedd993e7f5dc0eea834c656b6", "filename": "crates/ra_cargo_watch/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ffbe86dfd24ffcc11ec37bceca9102260d59db2/crates%2Fra_cargo_watch%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8ffbe86dfd24ffcc11ec37bceca9102260d59db2/crates%2Fra_cargo_watch%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2FCargo.toml?ref=8ffbe86dfd24ffcc11ec37bceca9102260d59db2", "patch": "@@ -11,6 +11,7 @@ log = \"0.4.3\"\n cargo_metadata = \"0.9.1\"\n jod-thread = \"0.1.0\"\n parking_lot = \"0.10.0\"\n+serde_json = \"1.0.45\"\n \n [dev-dependencies]\n insta = \"0.13.0\""}, {"sha": "e015692fa989b40c82a2c7062a9e5f7082e71fea", "filename": "crates/ra_cargo_watch/src/lib.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8ffbe86dfd24ffcc11ec37bceca9102260d59db2/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ffbe86dfd24ffcc11ec37bceca9102260d59db2/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs?ref=8ffbe86dfd24ffcc11ec37bceca9102260d59db2", "patch": "@@ -9,7 +9,7 @@ use lsp_types::{\n };\n use std::{\n     collections::HashMap,\n-    io::BufReader,\n+    io::{BufRead, BufReader},\n     path::PathBuf,\n     process::{Command, Stdio},\n     sync::Arc,\n@@ -350,13 +350,29 @@ impl WatchThread {\n             // which will break out of the loop, and continue the shutdown\n             let _ = message_send.send(CheckEvent::Begin);\n \n-            for message in\n-                cargo_metadata::parse_messages(BufReader::new(command.stdout.take().unwrap()))\n-            {\n+            // We manually read a line at a time, instead of using serde's\n+            // stream deserializers, because the deserializer cannot recover\n+            // from an error, resulting in it getting stuck, because we try to\n+            // be resillient against failures.\n+            //\n+            // Because cargo only outputs one JSON object per line, we can\n+            // simply skip a line if it doesn't parse, which just ignores any\n+            // erroneus output.\n+            let stdout = BufReader::new(command.stdout.take().unwrap());\n+            for line in stdout.lines() {\n+                let line = match line {\n+                    Ok(line) => line,\n+                    Err(err) => {\n+                        log::error!(\"Couldn't read line from cargo: {:?}\", err);\n+                        continue;\n+                    }\n+                };\n+\n+                let message = serde_json::from_str::<cargo_metadata::Message>(&line);\n                 let message = match message {\n                     Ok(message) => message,\n                     Err(err) => {\n-                        log::error!(\"Invalid json from cargo check, ignoring: {}\", err);\n+                        log::error!(\"Invalid json from cargo check, ignoring ({}): {} \", err, line);\n                         continue;\n                     }\n                 };"}]}