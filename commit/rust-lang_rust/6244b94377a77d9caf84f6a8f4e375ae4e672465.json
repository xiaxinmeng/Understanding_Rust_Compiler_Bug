{"sha": "6244b94377a77d9caf84f6a8f4e375ae4e672465", "node_id": "C_kwDOAAsO6NoAKDYyNDRiOTQzNzdhNzdkOWNhZjg0ZjZhOGY0ZTM3NWFlNGU2NzI0NjU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-22T19:08:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-22T19:08:05Z"}, "message": "Rollup merge of #109494 - spastorino:new-rpitit-18, r=compiler-errors\n\nDo not feed param_env for RPITITs impl side\n\nr? `@compiler-errors`\n\nI don't think this needs more comments or things that we already have but please let me know if you want some comments or something else in this PR.", "tree": {"sha": "ef391cfeb7fd98b88e8649bebba9b38856934fad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef391cfeb7fd98b88e8649bebba9b38856934fad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6244b94377a77d9caf84f6a8f4e375ae4e672465", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkG1IVCRBK7hj4Ov3rIwAAMO8IADHJPttOYIwuCHixudMRRLKb\nXVUxyXlxp/WIq4O5cr2yTco0DAoLMaEWuI1h+wNDeCX1YMsHTgGh8/Yy7uIVZs5c\nskyYbgH+0PSx1FaVAhKtP0ySERw0jeti+Ty3CiHRtFoS9A7TK+U8QP6l+PeORMyt\n0v6HK+njQW2gVlrzzY5WEATm5c1EebNZuvc8X/lBGKSWdeK2ZLR5XCRRsPfrW2Qo\nhHiZrD69qhMIYQZgj/onRWuQDeKw8HWgNlQKshqvTlB70qJiL1BoT3H9Ejy2yicw\nraG3h7L36b78sLxL1jL9HI1QRL/BaS0mAbd/J1elyPOLWUtqmBZkq6vrfU609iU=\n=Rj2e\n-----END PGP SIGNATURE-----\n", "payload": "tree ef391cfeb7fd98b88e8649bebba9b38856934fad\nparent 9629156fc7be5970c3a1d3c12cda952042966c04\nparent 1c9ad28dd2d5284dddbbdfd99539f0f2a98a8f0f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679512085 +0100\ncommitter GitHub <noreply@github.com> 1679512085 +0100\n\nRollup merge of #109494 - spastorino:new-rpitit-18, r=compiler-errors\n\nDo not feed param_env for RPITITs impl side\n\nr? `@compiler-errors`\n\nI don't think this needs more comments or things that we already have but please let me know if you want some comments or something else in this PR.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6244b94377a77d9caf84f6a8f4e375ae4e672465", "html_url": "https://github.com/rust-lang/rust/commit/6244b94377a77d9caf84f6a8f4e375ae4e672465", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6244b94377a77d9caf84f6a8f4e375ae4e672465/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9629156fc7be5970c3a1d3c12cda952042966c04", "url": "https://api.github.com/repos/rust-lang/rust/commits/9629156fc7be5970c3a1d3c12cda952042966c04", "html_url": "https://github.com/rust-lang/rust/commit/9629156fc7be5970c3a1d3c12cda952042966c04"}, {"sha": "1c9ad28dd2d5284dddbbdfd99539f0f2a98a8f0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c9ad28dd2d5284dddbbdfd99539f0f2a98a8f0f", "html_url": "https://github.com/rust-lang/rust/commit/1c9ad28dd2d5284dddbbdfd99539f0f2a98a8f0f"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "4462b8aef1271363a21aa9f9fcb3fbfd3874e288", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6244b94377a77d9caf84f6a8f4e375ae4e672465/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6244b94377a77d9caf84f6a8f4e375ae4e672465/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=6244b94377a77d9caf84f6a8f4e375ae4e672465", "patch": "@@ -384,10 +384,6 @@ fn associated_type_for_impl_trait_in_impl(\n         opt_rpitit_info: Some(ImplTraitInTraitData::Impl { fn_def_id: impl_fn_def_id.to_def_id() }),\n     });\n \n-    // Copy param_env of the containing function. The synthesized associated type doesn't have\n-    // extra predicates to assume.\n-    impl_assoc_ty.param_env(tcx.param_env(impl_fn_def_id));\n-\n     // Copy visility of the containing function.\n     impl_assoc_ty.visibility(tcx.visibility(impl_fn_def_id));\n "}, {"sha": "50aeb7f440faf204aaaa24b6a5e8e0d23f634b70", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6244b94377a77d9caf84f6a8f4e375ae4e672465/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6244b94377a77d9caf84f6a8f4e375ae4e672465/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=6244b94377a77d9caf84f6a8f4e375ae4e672465", "patch": "@@ -130,7 +130,9 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty): I don't like this, we should\n     // at least be making sure that the generics in RPITITs and their parent fn don't\n     // get out of alignment, or else we do actually need to substitute these predicates.\n-    if let Some(ImplTraitInTraitData::Trait { fn_def_id, .. }) = tcx.opt_rpitit_info(def_id) {\n+    if let Some(ImplTraitInTraitData::Trait { fn_def_id, .. })\n+    | Some(ImplTraitInTraitData::Impl { fn_def_id, .. }) = tcx.opt_rpitit_info(def_id)\n+    {\n         predicates = tcx.predicates_of(fn_def_id).instantiate_identity(tcx).predicates;\n     }\n "}, {"sha": "3d010f18009d1102f05d084561f093132e17ae8d", "filename": "tests/ui/async-await/in-trait/issue-104678.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6244b94377a77d9caf84f6a8f4e375ae4e672465/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-104678.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6244b94377a77d9caf84f6a8f4e375ae4e672465/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-104678.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-104678.rs?ref=6244b94377a77d9caf84f6a8f4e375ae4e672465", "patch": "@@ -1,5 +1,7 @@\n // edition:2021\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}]}