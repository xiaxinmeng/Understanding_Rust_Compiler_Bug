{"sha": "4b9f5cc4c10a161047475cb9bbe02c4fda57fb07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiOWY1Y2M0YzEwYTE2MTA0NzQ3NWNiOWJiZTAyYzRmZGE1N2ZiMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-09T04:33:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-09T04:33:43Z"}, "message": "Auto merge of #82356 - camelid:render-cleanup, r=GuillaumeGomez\n\nrustdoc: Cleanup `html::render::Context`\n\n- Move most shared fields to `SharedContext` (except for `cache`, which\n  isn't mutated anyway)\n- Replace a use of `Arc` with `Rc`\n- Make a bunch of fields private\n- Add static size assertion for `Context`\n- Don't share `id_map` and `deref_id_map`", "tree": {"sha": "6198a7632b7769f9f8442b6670739774a60bddae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6198a7632b7769f9f8442b6670739774a60bddae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b9f5cc4c10a161047475cb9bbe02c4fda57fb07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9f5cc4c10a161047475cb9bbe02c4fda57fb07", "html_url": "https://github.com/rust-lang/rust/commit/4b9f5cc4c10a161047475cb9bbe02c4fda57fb07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b9f5cc4c10a161047475cb9bbe02c4fda57fb07/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb3afe1e609b70ef2a8e75072e6eb5828416c012", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb3afe1e609b70ef2a8e75072e6eb5828416c012", "html_url": "https://github.com/rust-lang/rust/commit/bb3afe1e609b70ef2a8e75072e6eb5828416c012"}, {"sha": "5b7409797555b8fcfb50dc92fcda9bd1298d70c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b7409797555b8fcfb50dc92fcda9bd1298d70c4", "html_url": "https://github.com/rust-lang/rust/commit/5b7409797555b8fcfb50dc92fcda9bd1298d70c4"}], "stats": {"total": 144, "additions": 84, "deletions": 60}, "files": [{"sha": "9095faf676145e9b416f21b007889ee9f78e8713", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4b9f5cc4c10a161047475cb9bbe02c4fda57fb07/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9f5cc4c10a161047475cb9bbe02c4fda57fb07/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=4b9f5cc4c10a161047475cb9bbe02c4fda57fb07", "patch": "@@ -9,7 +9,7 @@ use crate::formats::cache::Cache;\n /// Allows for different backends to rustdoc to be used with the `run_format()` function. Each\n /// backend renderer has hooks for initialization, documenting an item, entering and exiting a\n /// module, and cleanup/finalizing output.\n-crate trait FormatRenderer<'tcx>: Clone {\n+crate trait FormatRenderer<'tcx>: Sized {\n     /// Gives a description of the renderer. Used for performance profiling.\n     fn descr() -> &'static str;\n \n@@ -23,6 +23,9 @@ crate trait FormatRenderer<'tcx>: Clone {\n         tcx: TyCtxt<'tcx>,\n     ) -> Result<(Self, clean::Crate), Error>;\n \n+    /// Make a new renderer to render a child of the item currently being rendered.\n+    fn make_child_renderer(&self) -> Self;\n+\n     /// Renders a single non-module item. This means no recursive sub-item rendering is required.\n     fn item(&mut self, item: clean::Item) -> Result<(), Error>;\n \n@@ -67,7 +70,7 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n     item.name = Some(krate.name);\n \n     // Render the crate documentation\n-    let mut work = vec![(format_renderer.clone(), item)];\n+    let mut work = vec![(format_renderer.make_child_renderer(), item)];\n \n     let unknown = rustc_span::Symbol::intern(\"<unknown item>\");\n     while let Some((mut cx, item)) = work.pop() {\n@@ -87,7 +90,7 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n             };\n             for it in module.items {\n                 debug!(\"Adding {:?} to worklist\", it.name);\n-                work.push((cx.clone(), it));\n+                work.push((cx.make_child_renderer(), it));\n             }\n \n             cx.mod_item_out(&name)?;"}, {"sha": "ccc51c243ad8b7a28760882f328616f5233f20f9", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b9f5cc4c10a161047475cb9bbe02c4fda57fb07/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9f5cc4c10a161047475cb9bbe02c4fda57fb07/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=4b9f5cc4c10a161047475cb9bbe02c4fda57fb07", "patch": "@@ -1373,10 +1373,6 @@ impl IdMap {\n         }\n     }\n \n-    crate fn reset(&mut self) {\n-        self.map = init_id_map();\n-    }\n-\n     crate fn derive<S: AsRef<str> + ToString>(&mut self, candidate: S) -> String {\n         let id = match self.map.get_mut(candidate.as_ref()) {\n             None => candidate.to_string(),"}, {"sha": "e2ce9ad23f478d214852359bb2ce0c843828b496", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4b9f5cc4c10a161047475cb9bbe02c4fda57fb07/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9f5cc4c10a161047475cb9bbe02c4fda57fb07/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=4b9f5cc4c10a161047475cb9bbe02c4fda57fb07", "patch": "@@ -1,7 +1,6 @@\n use super::{plain_text_summary, short_markdown_summary};\n use super::{ErrorCodes, IdMap, Ignore, LangString, Markdown, MarkdownHtml};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n-use std::cell::RefCell;\n \n #[test]\n fn test_unique_id() {\n@@ -38,15 +37,9 @@ fn test_unique_id() {\n         \"assoc_type.Item-1\",\n     ];\n \n-    let map = RefCell::new(IdMap::new());\n-    let test = || {\n-        let mut map = map.borrow_mut();\n-        let actual: Vec<String> = input.iter().map(|s| map.derive(s.to_string())).collect();\n-        assert_eq!(&actual[..], expected);\n-    };\n-    test();\n-    map.borrow_mut().reset();\n-    test();\n+    let mut map = IdMap::new();\n+    let actual: Vec<String> = input.iter().map(|s| map.derive(s.to_string())).collect();\n+    assert_eq!(&actual[..], expected);\n }\n \n #[test]"}, {"sha": "864fbccbcc45172e85051686f0933a2876380bd2", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 56, "deletions": 38, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/4b9f5cc4c10a161047475cb9bbe02c4fda57fb07/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9f5cc4c10a161047475cb9bbe02c4fda57fb07/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=4b9f5cc4c10a161047475cb9bbe02c4fda57fb07", "patch": "@@ -3,8 +3,7 @@ use std::collections::BTreeMap;\n use std::io;\n use std::path::PathBuf;\n use std::rc::Rc;\n-use std::sync::mpsc::{channel, Receiver};\n-use std::sync::Arc;\n+use std::sync::mpsc::channel;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n@@ -41,35 +40,44 @@ use crate::html::{layout, sources};\n /// It is intended that this context is a lightweight object which can be fairly\n /// easily cloned because it is cloned per work-job (about once per item in the\n /// rustdoc tree).\n-#[derive(Clone)]\n crate struct Context<'tcx> {\n     /// Current hierarchy of components leading down to what's currently being\n     /// rendered\n-    crate current: Vec<String>,\n+    pub(super) current: Vec<String>,\n     /// The current destination folder of where HTML artifacts should be placed.\n     /// This changes as the context descends into the module hierarchy.\n-    crate dst: PathBuf,\n+    pub(super) dst: PathBuf,\n     /// A flag, which when `true`, will render pages which redirect to the\n     /// real location of an item. This is used to allow external links to\n     /// publicly reused items to redirect to the right location.\n-    crate render_redirect_pages: bool,\n-    /// `None` by default, depends on the `generate-redirect-map` option flag. If this field is set\n-    /// to `Some(...)`, it'll store redirections and then generate a JSON file at the top level of\n-    /// the crate.\n-    crate redirections: Option<Rc<RefCell<FxHashMap<String, String>>>>,\n+    pub(super) render_redirect_pages: bool,\n     /// The map used to ensure all generated 'id=' attributes are unique.\n-    pub(super) id_map: Rc<RefCell<IdMap>>,\n+    pub(super) id_map: RefCell<IdMap>,\n     /// Tracks section IDs for `Deref` targets so they match in both the main\n     /// body and the sidebar.\n-    pub(super) deref_id_map: Rc<RefCell<FxHashMap<DefId, String>>>,\n-    crate shared: Arc<SharedContext<'tcx>>,\n-    all: Rc<RefCell<AllTypes>>,\n-    /// Storage for the errors produced while generating documentation so they\n-    /// can be printed together at the end.\n-    crate errors: Rc<Receiver<String>>,\n-    crate cache: Rc<Cache>,\n+    pub(super) deref_id_map: RefCell<FxHashMap<DefId, String>>,\n+    /// Shared mutable state.\n+    ///\n+    /// Issue for improving the situation: [#82381][]\n+    ///\n+    /// [#82381]: https://github.com/rust-lang/rust/issues/82381\n+    pub(super) shared: Rc<SharedContext<'tcx>>,\n+    /// The [`Cache`] used during rendering.\n+    ///\n+    /// Ideally the cache would be in [`SharedContext`], but it's mutated\n+    /// between when the `SharedContext` is created and when `Context`\n+    /// is created, so more refactoring would be needed.\n+    ///\n+    /// It's immutable once in `Context`, so it's not as bad that it's not in\n+    /// `SharedContext`.\n+    // FIXME: move `cache` to `SharedContext`\n+    pub(super) cache: Rc<Cache>,\n }\n \n+// `Context` is cloned a lot, so we don't want the size to grow unexpectedly.\n+#[cfg(target_arch = \"x86_64\")]\n+rustc_data_structures::static_assert_size!(Context<'_>, 152);\n+\n impl<'tcx> Context<'tcx> {\n     pub(super) fn path(&self, filename: &str) -> PathBuf {\n         // We use splitn vs Path::extension here because we might get a filename\n@@ -148,11 +156,6 @@ impl<'tcx> Context<'tcx> {\n             static_extra_scripts: &[],\n         };\n \n-        {\n-            self.id_map.borrow_mut().reset();\n-            self.id_map.borrow_mut().populate(&INITIAL_IDS);\n-        }\n-\n         if !self.render_redirect_pages {\n             layout::render(\n                 &self.shared.layout,\n@@ -169,7 +172,7 @@ impl<'tcx> Context<'tcx> {\n                     path.push('/');\n                 }\n                 path.push_str(&item_path(ty, names.last().unwrap()));\n-                match self.redirections {\n+                match self.shared.redirections {\n                     Some(ref redirections) => {\n                         let mut current_path = String::new();\n                         for name in &self.current {\n@@ -383,6 +386,9 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             edition,\n             codes: ErrorCodes::from(unstable_features.is_nightly_build()),\n             playground,\n+            all: RefCell::new(AllTypes::new()),\n+            errors: receiver,\n+            redirections: if generate_redirect_map { Some(Default::default()) } else { None },\n         };\n \n         // Add the default themes to the `Vec` of stylepaths\n@@ -409,24 +415,36 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             current: Vec::new(),\n             dst,\n             render_redirect_pages: false,\n-            id_map: Rc::new(RefCell::new(id_map)),\n-            deref_id_map: Rc::new(RefCell::new(FxHashMap::default())),\n-            shared: Arc::new(scx),\n-            all: Rc::new(RefCell::new(AllTypes::new())),\n-            errors: Rc::new(receiver),\n+            id_map: RefCell::new(id_map),\n+            deref_id_map: RefCell::new(FxHashMap::default()),\n+            shared: Rc::new(scx),\n             cache: Rc::new(cache),\n-            redirections: if generate_redirect_map { Some(Default::default()) } else { None },\n         };\n \n         CURRENT_DEPTH.with(|s| s.set(0));\n \n         // Write shared runs within a flock; disable thread dispatching of IO temporarily.\n-        Arc::get_mut(&mut cx.shared).unwrap().fs.set_sync_only(true);\n+        Rc::get_mut(&mut cx.shared).unwrap().fs.set_sync_only(true);\n         write_shared(&cx, &krate, index, &md_opts)?;\n-        Arc::get_mut(&mut cx.shared).unwrap().fs.set_sync_only(false);\n+        Rc::get_mut(&mut cx.shared).unwrap().fs.set_sync_only(false);\n         Ok((cx, krate))\n     }\n \n+    fn make_child_renderer(&self) -> Self {\n+        let mut id_map = IdMap::new();\n+        id_map.populate(&INITIAL_IDS);\n+\n+        Self {\n+            current: self.current.clone(),\n+            dst: self.dst.clone(),\n+            render_redirect_pages: self.render_redirect_pages,\n+            id_map: RefCell::new(id_map),\n+            deref_id_map: RefCell::new(FxHashMap::default()),\n+            shared: Rc::clone(&self.shared),\n+            cache: Rc::clone(&self.cache),\n+        }\n+    }\n+\n     fn after_krate(\n         &mut self,\n         krate: &clean::Crate,\n@@ -464,7 +482,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         } else {\n             String::new()\n         };\n-        let all = self.all.replace(AllTypes::new());\n+        let all = self.shared.all.replace(AllTypes::new());\n         let v = layout::render(\n             &self.shared.layout,\n             &page,\n@@ -494,7 +512,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             &style_files,\n         );\n         self.shared.fs.write(&settings_file, v.as_bytes())?;\n-        if let Some(redirections) = self.redirections.take() {\n+        if let Some(ref redirections) = self.shared.redirections {\n             if !redirections.borrow().is_empty() {\n                 let redirect_map_path =\n                     self.dst.join(&*krate.name.as_str()).join(\"redirect-map.json\");\n@@ -505,8 +523,8 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         }\n \n         // Flush pending errors.\n-        Arc::get_mut(&mut self.shared).unwrap().fs.close();\n-        let nb_errors = self.errors.iter().map(|err| diag.struct_err(&err).emit()).count();\n+        Rc::get_mut(&mut self.shared).unwrap().fs.close();\n+        let nb_errors = self.shared.errors.iter().map(|err| diag.struct_err(&err).emit()).count();\n         if nb_errors > 0 {\n             Err(Error::new(io::Error::new(io::ErrorKind::Other, \"I/O error\"), \"\"))\n         } else {\n@@ -585,13 +603,13 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             self.shared.fs.write(&joint_dst, buf.as_bytes())?;\n \n             if !self.render_redirect_pages {\n-                self.all.borrow_mut().append(full_path(self, &item), &item_type);\n+                self.shared.all.borrow_mut().append(full_path(self, &item), &item_type);\n             }\n             // If the item is a macro, redirect from the old macro URL (with !)\n             // to the new one (without).\n             if item_type == ItemType::Macro {\n                 let redir_name = format!(\"{}.{}!.html\", item_type, name);\n-                if let Some(ref redirections) = self.redirections {\n+                if let Some(ref redirections) = self.shared.redirections {\n                     let crate_name = &self.shared.layout.krate;\n                     redirections.borrow_mut().insert(\n                         format!(\"{}/{}\", crate_name, redir_name),"}, {"sha": "2331f4d20a84f61f5b490391fde0840c0443a876", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4b9f5cc4c10a161047475cb9bbe02c4fda57fb07/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9f5cc4c10a161047475cb9bbe02c4fda57fb07/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=4b9f5cc4c10a161047475cb9bbe02c4fda57fb07", "patch": "@@ -42,6 +42,7 @@ use std::fmt;\n use std::path::{Path, PathBuf};\n use std::str;\n use std::string::ToString;\n+use std::sync::mpsc::Receiver;\n \n use itertools::Itertools;\n use rustc_ast_pretty::pprust;\n@@ -81,6 +82,7 @@ crate fn ensure_trailing_slash(v: &str) -> impl fmt::Display + '_ {\n     })\n }\n \n+/// Shared mutable state used in [`Context`] and elsewhere.\n crate struct SharedContext<'tcx> {\n     crate tcx: TyCtxt<'tcx>,\n     /// The path to the crate root source minus the file name.\n@@ -96,16 +98,16 @@ crate struct SharedContext<'tcx> {\n     /// The local file sources we've emitted and their respective url-paths.\n     crate local_sources: FxHashMap<PathBuf, String>,\n     /// Whether the collapsed pass ran\n-    crate collapsed: bool,\n+    collapsed: bool,\n     /// The base-URL of the issue tracker for when an item has been tagged with\n     /// an issue number.\n-    crate issue_tracker_base_url: Option<String>,\n+    issue_tracker_base_url: Option<String>,\n     /// The directories that have already been created in this doc run. Used to reduce the number\n     /// of spurious `create_dir_all` calls.\n-    crate created_dirs: RefCell<FxHashSet<PathBuf>>,\n+    created_dirs: RefCell<FxHashSet<PathBuf>>,\n     /// This flag indicates whether listings of modules (in the side bar and documentation itself)\n     /// should be ordered alphabetically or in order of appearance (in the source code).\n-    crate sort_modules_alphabetically: bool,\n+    sort_modules_alphabetically: bool,\n     /// Additional CSS files to be added to the generated docs.\n     crate style_files: Vec<StylePath>,\n     /// Suffix to be added on resource files (if suffix is \"-v2\" then \"light.css\" becomes\n@@ -118,8 +120,16 @@ crate struct SharedContext<'tcx> {\n     crate fs: DocFS,\n     /// The default edition used to parse doctests.\n     crate edition: Edition,\n-    crate codes: ErrorCodes,\n+    codes: ErrorCodes,\n     playground: Option<markdown::Playground>,\n+    all: RefCell<AllTypes>,\n+    /// Storage for the errors produced while generating documentation so they\n+    /// can be printed together at the end.\n+    errors: Receiver<String>,\n+    /// `None` by default, depends on the `generate-redirect-map` option flag. If this field is set\n+    /// to `Some(...)`, it'll store redirections and then generate a JSON file at the top level of\n+    /// the crate.\n+    redirections: Option<RefCell<FxHashMap<String, String>>>,\n }\n \n impl SharedContext<'_> {"}, {"sha": "b762fd7e18bd7aba4702d87cf9bf7bbd07db4a75", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b9f5cc4c10a161047475cb9bbe02c4fda57fb07/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9f5cc4c10a161047475cb9bbe02c4fda57fb07/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=4b9f5cc4c10a161047475cb9bbe02c4fda57fb07", "patch": "@@ -148,6 +148,10 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         ))\n     }\n \n+    fn make_child_renderer(&self) -> Self {\n+        self.clone()\n+    }\n+\n     /// Inserts an item into the index. This should be used rather than directly calling insert on\n     /// the hashmap because certain items (traits and types) need to have their mappings for trait\n     /// implementations filled out before they're inserted."}]}