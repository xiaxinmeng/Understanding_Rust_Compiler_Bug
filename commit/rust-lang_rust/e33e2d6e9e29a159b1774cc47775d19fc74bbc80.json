{"sha": "e33e2d6e9e29a159b1774cc47775d19fc74bbc80", "node_id": "C_kwDOAAsO6NoAKGUzM2UyZDZlOWUyOWExNTliMTc3NGNjNDc3NzVkMTlmYzc0YmJjODA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-12-11T09:27:59Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-28T11:47:15Z"}, "message": "Attempt to reduce perf impact.", "tree": {"sha": "2235200e1e3ea5b87278eb1830af8db71519aeaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2235200e1e3ea5b87278eb1830af8db71519aeaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e33e2d6e9e29a159b1774cc47775d19fc74bbc80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e33e2d6e9e29a159b1774cc47775d19fc74bbc80", "html_url": "https://github.com/rust-lang/rust/commit/e33e2d6e9e29a159b1774cc47775d19fc74bbc80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e33e2d6e9e29a159b1774cc47775d19fc74bbc80/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87644d85a2e91c285af9e3159a70581afd6a70bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/87644d85a2e91c285af9e3159a70581afd6a70bd", "html_url": "https://github.com/rust-lang/rust/commit/87644d85a2e91c285af9e3159a70581afd6a70bd"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "b7381326fcb5d382f0cb9128a5603b9229bacf0d", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e33e2d6e9e29a159b1774cc47775d19fc74bbc80/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e2d6e9e29a159b1774cc47775d19fc74bbc80/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=e33e2d6e9e29a159b1774cc47775d19fc74bbc80", "patch": "@@ -676,28 +676,35 @@ impl<K: DepKind> DepGraph<K> {\n             None => {}\n         }\n \n-        let mut stack =\n-            MarkingStack { stack: vec![prev_index], sess: qcx.dep_context().sess(), graph: data };\n+        let mut stack = smallvec![prev_index];\n+        let _backtrace_print =\n+            MarkingStack { stack: &mut stack, sess: qcx.dep_context().sess(), graph: data };\n \n         // This DepNode and the corresponding query invocation existed\n         // in the previous compilation session too, so we can try to\n         // mark it as green by recursively marking all of its\n         // dependencies green.\n-        return self\n-            .try_mark_previous_green(qcx, data, prev_index, &dep_node, &mut stack.stack)\n+        let ret = self\n+            .try_mark_previous_green(qcx, data, prev_index, &dep_node, _backtrace_print.stack)\n             .map(|dep_node_index| (prev_index, dep_node_index));\n \n+        // We succeeded, no backtrace.\n+        std::mem::forget(_backtrace_print);\n+        return ret;\n+\n         /// Remember the stack of queries we are forcing in the event of an incr. comp. panic.\n-        struct MarkingStack<'a, K: DepKind> {\n-            stack: Vec<SerializedDepNodeIndex>,\n+        struct MarkingStack<'a, 'v, K: DepKind> {\n+            stack: &'v mut SmallVec<[SerializedDepNodeIndex; 8]>,\n             sess: &'a rustc_session::Session,\n             graph: &'a DepGraphData<K>,\n         }\n \n-        impl<'a, K: DepKind> Drop for MarkingStack<'a, K> {\n+        impl<'a, 'v, K: DepKind> Drop for MarkingStack<'a, 'v, K> {\n             /// Print the forcing backtrace.\n+            #[inline(never)]\n+            #[cold]\n             fn drop(&mut self) {\n-                for &frame in self.stack.iter().skip(1).rev() {\n+                for &frame in self.stack.iter().rev() {\n                     let node = self.graph.previous.index_to_node(frame);\n                     // Do not try to rely on DepNode's Debug implementation,\n                     // since it may panic.\n@@ -721,7 +728,7 @@ impl<K: DepKind> DepGraph<K> {\n         data: &DepGraphData<K>,\n         parent_dep_node_index: SerializedDepNodeIndex,\n         dep_node: &DepNode<K>,\n-        stack: &mut Vec<SerializedDepNodeIndex>,\n+        stack: &mut SmallVec<[SerializedDepNodeIndex; 8]>,\n     ) -> Option<()> {\n         let dep_dep_node_color = data.colors.get(parent_dep_node_index);\n         let dep_dep_node = &data.previous.index_to_node(parent_dep_node_index);\n@@ -810,7 +817,7 @@ impl<K: DepKind> DepGraph<K> {\n         data: &DepGraphData<K>,\n         prev_dep_node_index: SerializedDepNodeIndex,\n         dep_node: &DepNode<K>,\n-        stack: &mut Vec<SerializedDepNodeIndex>,\n+        stack: &mut SmallVec<[SerializedDepNodeIndex; 8]>,\n     ) -> Option<DepNodeIndex> {\n         #[cfg(not(parallel_compiler))]\n         {"}]}