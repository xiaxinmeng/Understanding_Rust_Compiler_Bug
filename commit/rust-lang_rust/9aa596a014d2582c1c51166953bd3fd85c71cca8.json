{"sha": "9aa596a014d2582c1c51166953bd3fd85c71cca8", "node_id": "C_kwDOAAsO6NoAKDlhYTU5NmEwMTRkMjU4MmMxYzUxMTY2OTUzYmQzZmQ4NWM3MWNjYTg", "commit": {"author": {"name": "James Dietz", "email": "jamesthespeedy@gmail.com", "date": "2023-04-28T21:23:40Z"}, "committer": {"name": "James Dietz", "email": "jamesthespeedy@gmail.com", "date": "2023-05-05T00:29:38Z"}, "message": "moved default CPU message inline", "tree": {"sha": "75801813d18bc867dd994014adfc0ff3783b9416", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75801813d18bc867dd994014adfc0ff3783b9416"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9aa596a014d2582c1c51166953bd3fd85c71cca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9aa596a014d2582c1c51166953bd3fd85c71cca8", "html_url": "https://github.com/rust-lang/rust/commit/9aa596a014d2582c1c51166953bd3fd85c71cca8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9aa596a014d2582c1c51166953bd3fd85c71cca8/comments", "author": {"login": "mj10021", "id": 5280405, "node_id": "MDQ6VXNlcjUyODA0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5280405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mj10021", "html_url": "https://github.com/mj10021", "followers_url": "https://api.github.com/users/mj10021/followers", "following_url": "https://api.github.com/users/mj10021/following{/other_user}", "gists_url": "https://api.github.com/users/mj10021/gists{/gist_id}", "starred_url": "https://api.github.com/users/mj10021/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mj10021/subscriptions", "organizations_url": "https://api.github.com/users/mj10021/orgs", "repos_url": "https://api.github.com/users/mj10021/repos", "events_url": "https://api.github.com/users/mj10021/events{/privacy}", "received_events_url": "https://api.github.com/users/mj10021/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mj10021", "id": 5280405, "node_id": "MDQ6VXNlcjUyODA0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5280405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mj10021", "html_url": "https://github.com/mj10021", "followers_url": "https://api.github.com/users/mj10021/followers", "following_url": "https://api.github.com/users/mj10021/following{/other_user}", "gists_url": "https://api.github.com/users/mj10021/gists{/gist_id}", "starred_url": "https://api.github.com/users/mj10021/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mj10021/subscriptions", "organizations_url": "https://api.github.com/users/mj10021/orgs", "repos_url": "https://api.github.com/users/mj10021/repos", "events_url": "https://api.github.com/users/mj10021/events{/privacy}", "received_events_url": "https://api.github.com/users/mj10021/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea17aa9141cde9f26ec09b423ca2efe8aa08cc33", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea17aa9141cde9f26ec09b423ca2efe8aa08cc33", "html_url": "https://github.com/rust-lang/rust/commit/ea17aa9141cde9f26ec09b423ca2efe8aa08cc33"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "53d97f352010637c0b06710eb9fd6c113a530a9f", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aa596a014d2582c1c51166953bd3fd85c71cca8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa596a014d2582c1c51166953bd3fd85c71cca8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=9aa596a014d2582c1c51166953bd3fd85c71cca8", "patch": "@@ -2249,7 +2249,7 @@ extern \"C\" {\n \n     pub fn LLVMRustHasFeature(T: &TargetMachine, s: *const c_char) -> bool;\n \n-    pub fn LLVMRustPrintTargetCPUs(T: &TargetMachine);\n+    pub fn LLVMRustPrintTargetCPUs(T: &TargetMachine, cpu: *const c_char);\n     pub fn LLVMRustGetTargetFeaturesCount(T: &TargetMachine) -> size_t;\n     pub fn LLVMRustGetTargetFeature(\n         T: &TargetMachine,"}, {"sha": "1baef931ff9b728f0bf7bb3c2ca3bed950176990", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9aa596a014d2582c1c51166953bd3fd85c71cca8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa596a014d2582c1c51166953bd3fd85c71cca8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=9aa596a014d2582c1c51166953bd3fd85c71cca8", "patch": "@@ -330,11 +330,9 @@ pub(crate) fn print(req: PrintRequest, sess: &Session) {\n     let tm = create_informational_target_machine(sess);\n     match req {\n         PrintRequest::TargetCPUs => {\n-            println!(\n-                \"Default CPU for this target:\\n    {}\",\n-                handle_native(sess.target.cpu.as_ref())\n-            );\n-            unsafe { llvm::LLVMRustPrintTargetCPUs(tm, handle_native(sess.target.cpu.as_ref())) };\n+            let cpu_cstring = CString::new(handle_native(sess.target.cpu.as_ref()))\n+                .expect(\"failed to convert to cstring\");\n+            unsafe { llvm::LLVMRustPrintTargetCPUs(tm, cpu_cstring.as_ptr()) };\n         }\n         PrintRequest::TargetFeatures => print_target_features(sess, tm),\n         _ => bug!(\"rustc_codegen_llvm can't handle print request: {:?}\", req),"}, {"sha": "03e76380c246c75c3466d9d8a7630868d77dd624", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9aa596a014d2582c1c51166953bd3fd85c71cca8/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9aa596a014d2582c1c51166953bd3fd85c71cca8/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=9aa596a014d2582c1c51166953bd3fd85c71cca8", "patch": "@@ -307,7 +307,7 @@ static size_t getLongestEntryLength(ArrayRef<KV> Table) {\n   return MaxLen;\n }\n \n-extern \"C\" void LLVMRustPrintTargetCPUs(LLVMTargetMachineRef TM, &Char[]) {\n+extern \"C\" void LLVMRustPrintTargetCPUs(LLVMTargetMachineRef TM, const char* TargetCPU) {\n   const TargetMachine *Target = unwrap(TM);\n   const MCSubtargetInfo *MCInfo = Target->getMCSubtargetInfo();\n   const Triple::ArchType HostArch = Triple(sys::getDefaultTargetTriple()).getArch();\n@@ -323,16 +323,14 @@ extern \"C\" void LLVMRustPrintTargetCPUs(LLVMTargetMachineRef TM, &Char[]) {\n     printf(\"    %-*s - Select the CPU of the current host (currently %.*s).\\n\",\n       MaxCPULen, \"native\", (int)HostCPU.size(), HostCPU.data());\n   }\n-  for (auto &CPU : CPUTable)\n-\n+  for (auto &CPU : CPUTable) {\n     printf(\"    %-*s\", MaxCPULen, CPU.Key);\n-    if (CPU.Key == Target->getTargetTriple().getArch()) {\n-      printf(\"  default target\\n\");\n-    }\n-    else {\n-      printf(\"\\n\");\n+    // Compare cpu against current target to label the default\n+    if (strcmp(CPU.Key, TargetCPU) == 0) {\n+      printf(\"   - this is the default target cpu for the current target\");\n     }\n-  printf(\"\\n\");\n+    printf(\"\\n\");\n+  }\n }\n \n extern \"C\" size_t LLVMRustGetTargetFeaturesCount(LLVMTargetMachineRef TM) {"}]}