{"sha": "9650b7868e64971f6a154c87ddd13e9cc33f1589", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NTBiNzg2OGU2NDk3MWY2YTE1NGM4N2RkZDEzZTljYzMzZjE1ODk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-09-29T15:43:50Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-09-29T15:43:50Z"}, "message": "more align_offset tests", "tree": {"sha": "701e04667b7f749baffc41f2a61c7179f54f4eef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/701e04667b7f749baffc41f2a61c7179f54f4eef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9650b7868e64971f6a154c87ddd13e9cc33f1589", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9650b7868e64971f6a154c87ddd13e9cc33f1589", "html_url": "https://github.com/rust-lang/rust/commit/9650b7868e64971f6a154c87ddd13e9cc33f1589", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9650b7868e64971f6a154c87ddd13e9cc33f1589/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6258120927c3518e3f9b747fb86da5ebfd9051c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6258120927c3518e3f9b747fb86da5ebfd9051c", "html_url": "https://github.com/rust-lang/rust/commit/b6258120927c3518e3f9b747fb86da5ebfd9051c"}], "stats": {"total": 76, "additions": 70, "deletions": 6}, "files": [{"sha": "f3464a012f027a09da35dd938219ecf010fc3192", "filename": "tests/run-pass/align_offset.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/9650b7868e64971f6a154c87ddd13e9cc33f1589/tests%2Frun-pass%2Falign_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9650b7868e64971f6a154c87ddd13e9cc33f1589/tests%2Frun-pass%2Falign_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Falign_offset.rs?ref=9650b7868e64971f6a154c87ddd13e9cc33f1589", "patch": "@@ -0,0 +1,70 @@\n+fn test_align_offset() {\n+    let d = Box::new([0u32; 4]);\n+    // Get u8 pointer to base\n+    let raw = d.as_ptr() as *const u8;\n+\n+    assert_eq!(raw.align_offset(2), 0);\n+    assert_eq!(raw.align_offset(4), 0);\n+    assert_eq!(raw.align_offset(8), usize::max_value());\n+\n+    assert_eq!(raw.wrapping_offset(1).align_offset(2), 1);\n+    assert_eq!(raw.wrapping_offset(1).align_offset(4), 3);\n+    assert_eq!(raw.wrapping_offset(1).align_offset(8), usize::max_value());\n+\n+    assert_eq!(raw.wrapping_offset(2).align_offset(2), 0);\n+    assert_eq!(raw.wrapping_offset(2).align_offset(4), 2);\n+    assert_eq!(raw.wrapping_offset(2).align_offset(8), usize::max_value());\n+}\n+\n+fn test_align_to() {\n+    const N: usize = 4;\n+    let d = Box::new([0u32; N]);\n+    // Get u8 slice covering the entire thing\n+    let s = unsafe { std::slice::from_raw_parts(d.as_ptr() as *const u8, 4 * N) };\n+    let raw = s.as_ptr();\n+\n+    {\n+        let (l, m, r) = unsafe { s.align_to::<u32>() };\n+        assert_eq!(l.len(), 0);\n+        assert_eq!(r.len(), 0);\n+        assert_eq!(m.len(), N);\n+        assert_eq!(raw, m.as_ptr() as *const u8);\n+    }\n+\n+    {\n+        let (l, m, r) = unsafe { s[1..].align_to::<u32>() };\n+        assert_eq!(l.len(), 3);\n+        assert_eq!(m.len(), N-1);\n+        assert_eq!(r.len(), 0);\n+        assert_eq!(raw.wrapping_offset(4), m.as_ptr() as *const u8);\n+    }\n+\n+    {\n+        let (l, m, r) = unsafe { s[..4*N - 1].align_to::<u32>() };\n+        assert_eq!(l.len(), 0);\n+        assert_eq!(m.len(), N-1);\n+        assert_eq!(r.len(), 3);\n+        assert_eq!(raw, m.as_ptr() as *const u8);\n+    }\n+\n+    {\n+        let (l, m, r) = unsafe { s[1..4*N - 1].align_to::<u32>() };\n+        assert_eq!(l.len(), 3);\n+        assert_eq!(m.len(), N-2);\n+        assert_eq!(r.len(), 3);\n+        assert_eq!(raw.wrapping_offset(4), m.as_ptr() as *const u8);\n+    }\n+}\n+\n+fn test_from_utf8() {\n+    const N: usize = 10;\n+    let vec = vec![0x4141414141414141u64; N];\n+    let content = unsafe { std::slice::from_raw_parts(vec.as_ptr() as *const u8, 8 * N) };\n+    println!(\"{:?}\", std::str::from_utf8(content).unwrap());\n+}\n+\n+fn main() {\n+    test_align_offset();\n+    test_align_to();\n+    test_from_utf8();\n+}"}, {"sha": "66d439948159632e13543778e040edd9f3cfca17", "filename": "tests/run-pass/align_offset.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9650b7868e64971f6a154c87ddd13e9cc33f1589/tests%2Frun-pass%2Falign_offset.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/9650b7868e64971f6a154c87ddd13e9cc33f1589/tests%2Frun-pass%2Falign_offset.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Falign_offset.stdout?ref=9650b7868e64971f6a154c87ddd13e9cc33f1589", "previous_filename": "tests/run-pass/aligned_utf8_check.stdout"}, {"sha": "6c6ff6b6173cb8b0a2ad98d35f922246feb4712e", "filename": "tests/run-pass/aligned_utf8_check.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6258120927c3518e3f9b747fb86da5ebfd9051c/tests%2Frun-pass%2Faligned_utf8_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6258120927c3518e3f9b747fb86da5ebfd9051c/tests%2Frun-pass%2Faligned_utf8_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Faligned_utf8_check.rs?ref=b6258120927c3518e3f9b747fb86da5ebfd9051c", "patch": "@@ -1,6 +0,0 @@\n-fn main() {\n-    const N: usize = 10;\n-    let vec = vec![0x4141414141414141u64; N];\n-    let content = unsafe { std::slice::from_raw_parts(vec.as_ptr() as *const u8, 8 * N) };\n-    println!(\"{:?}\", std::str::from_utf8(content).unwrap());\n-}"}]}