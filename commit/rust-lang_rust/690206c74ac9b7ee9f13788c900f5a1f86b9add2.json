{"sha": "690206c74ac9b7ee9f13788c900f5a1f86b9add2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MDIwNmM3NGFjOWI3ZWU5ZjEzNzg4YzkwMGY1YTFmODZiOWFkZDI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-10-28T20:42:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-10-28T22:48:49Z"}, "message": "Do some slight refactoring, leave the rest for #29436", "tree": {"sha": "949b1e982666edce9e67f7c8c7372877ef1f7e71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/949b1e982666edce9e67f7c8c7372877ef1f7e71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/690206c74ac9b7ee9f13788c900f5a1f86b9add2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/690206c74ac9b7ee9f13788c900f5a1f86b9add2", "html_url": "https://github.com/rust-lang/rust/commit/690206c74ac9b7ee9f13788c900f5a1f86b9add2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/690206c74ac9b7ee9f13788c900f5a1f86b9add2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ef241656fe087a28faba738568ac56219fe586b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ef241656fe087a28faba738568ac56219fe586b", "html_url": "https://github.com/rust-lang/rust/commit/9ef241656fe087a28faba738568ac56219fe586b"}], "stats": {"total": 66, "additions": 25, "deletions": 41}, "files": [{"sha": "279ab9d5f30b2ff3765dc984449def282afed985", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 25, "deletions": 41, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/690206c74ac9b7ee9f13788c900f5a1f86b9add2/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/690206c74ac9b7ee9f13788c900f5a1f86b9add2/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=690206c74ac9b7ee9f13788c900f5a1f86b9add2", "patch": "@@ -47,6 +47,8 @@ pub enum Constraint {\n     ConstrainRegSubVar(Region, RegionVid),\n \n     // Region variable is subregion of concrete region\n+    //\n+    // FIXME(#29436) -- should be remove in favor of a Verify\n     ConstrainVarSubReg(RegionVid, Region),\n }\n \n@@ -972,6 +974,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n         }\n     }\n \n+    // FIXME(#29436) -- this fn would just go away if we removed ConstrainVarSubReg\n     fn contraction(&self,\n                    free_regions: &FreeRegionMap,\n                    var_data: &mut [VarData]) {\n@@ -983,50 +986,31 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n                                    .unwrap()\n                                    );\n             match *constraint {\n-              ConstrainRegSubVar(..) |\n-              ConstrainVarSubVar(..) => {\n-                  // Expansion will ensure that these constraints hold. Ignore.\n-                  false\n-              }\n-              ConstrainVarSubReg(a_vid, b_region) => {\n-                let a_data = &mut var_data[a_vid.index as usize];\n-                self.contract_node(free_regions, a_vid, a_data, b_region)\n-              }\n+                ConstrainRegSubVar(..) |\n+                ConstrainVarSubVar(..) => {\n+                    // Expansion will ensure that these constraints hold. Ignore.\n+                }\n+                ConstrainVarSubReg(a_vid, b_region) => {\n+                    let a_data = &mut var_data[a_vid.index as usize];\n+                    debug!(\"contraction: {:?} == {:?}, {:?}\", a_vid, a_data.value, b_region);\n+\n+                    let a_region = match a_data.value {\n+                        ErrorValue => return false,\n+                        Value(a_region) => a_region,\n+                    };\n+\n+                    if !free_regions.is_subregion_of(self.tcx, a_region, b_region) {\n+                        debug!(\"Setting {:?} to ErrorValue: {:?} not subregion of {:?}\",\n+                            a_vid,\n+                            a_region,\n+                            b_region);\n+                        a_data.value = ErrorValue;\n+                    }\n+                }\n             }\n-        })\n-    }\n-\n-    fn contract_node(&self,\n-                     free_regions: &FreeRegionMap,\n-                     a_vid: RegionVid,\n-                     a_data: &mut VarData,\n-                     b_region: Region)\n-                     -> bool {\n-        debug!(\"contract_node({:?} == {:?}, {:?})\",\n-               a_vid, a_data.value, b_region);\n-\n-        return match a_data.value {\n-            ErrorValue => false, // no change\n-            Value(a_region) => check_node(self, free_regions, a_vid, a_data, a_region, b_region),\n-        };\n \n-        fn check_node(this: &RegionVarBindings,\n-                      free_regions: &FreeRegionMap,\n-                      a_vid: RegionVid,\n-                      a_data: &mut VarData,\n-                      a_region: Region,\n-                      b_region: Region)\n-                      -> bool\n-        {\n-            if !free_regions.is_subregion_of(this.tcx, a_region, b_region) {\n-                debug!(\"Setting {:?} to ErrorValue: {:?} not subregion of {:?}\",\n-                       a_vid,\n-                       a_region,\n-                       b_region);\n-                a_data.value = ErrorValue;\n-            }\n             false\n-        }\n+        })\n     }\n \n     fn collect_concrete_region_errors(&self,"}]}