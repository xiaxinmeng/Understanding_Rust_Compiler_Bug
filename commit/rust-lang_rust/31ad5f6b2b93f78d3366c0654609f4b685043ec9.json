{"sha": "31ad5f6b2b93f78d3366c0654609f4b685043ec9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYWQ1ZjZiMmI5M2Y3OGQzMzY2YzA2NTQ2MDlmNGI2ODUwNDNlYzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-20T12:36:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-20T12:36:25Z"}, "message": "Auto merge of #1454 - RalfJung:test-raw-ptr, r=RalfJung\n\nTest raw_ptr macro\n\nMake sure it can create pointers to packed fields, but *cannot* deref dangling or unaligned (raw) pointers.", "tree": {"sha": "360c2c9ce9291b656fd255e6f72693311468e0a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/360c2c9ce9291b656fd255e6f72693311468e0a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31ad5f6b2b93f78d3366c0654609f4b685043ec9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31ad5f6b2b93f78d3366c0654609f4b685043ec9", "html_url": "https://github.com/rust-lang/rust/commit/31ad5f6b2b93f78d3366c0654609f4b685043ec9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31ad5f6b2b93f78d3366c0654609f4b685043ec9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59619775ee44a5e0c875efffc4ca55ae96fca7dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/59619775ee44a5e0c875efffc4ca55ae96fca7dc", "html_url": "https://github.com/rust-lang/rust/commit/59619775ee44a5e0c875efffc4ca55ae96fca7dc"}, {"sha": "8d1d5724727ee5a6862881bc97da86b9c90f9b21", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1d5724727ee5a6862881bc97da86b9c90f9b21", "html_url": "https://github.com/rust-lang/rust/commit/8d1d5724727ee5a6862881bc97da86b9c90f9b21"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "5df5b324f4579dc61dad580c4f7fa887a02cb30e", "filename": "tests/compile-fail/dangling_pointers/dangling_pointer_addr_of.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/31ad5f6b2b93f78d3366c0654609f4b685043ec9/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_pointer_addr_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31ad5f6b2b93f78d3366c0654609f4b685043ec9/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_pointer_addr_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fdangling_pointer_addr_of.rs?ref=31ad5f6b2b93f78d3366c0654609f4b685043ec9", "patch": "@@ -0,0 +1,13 @@\n+// Make sure we find these even with many checks disabled.\n+// compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n+#![feature(raw_ref_macros)]\n+use std::ptr;\n+\n+fn main() {\n+    let p = {\n+        let b = Box::new(42);\n+        &*b as *const i32\n+    };\n+    let x = unsafe { ptr::raw_const!(*p) }; //~ ERROR dereferenced after this allocation got freed\n+    panic!(\"this should never print: {:?}\", x);\n+}"}, {"sha": "cd52cd44c2b2cc3b2914a35dc6f1a89ee75e223a", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr_addr_of.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31ad5f6b2b93f78d3366c0654609f4b685043ec9/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31ad5f6b2b93f78d3366c0654609f4b685043ec9/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs?ref=31ad5f6b2b93f78d3366c0654609f4b685043ec9", "patch": "@@ -0,0 +1,12 @@\n+// This should fail even without validation or Stacked Borrows.\n+// compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n+#![feature(raw_ref_macros)]\n+use std::ptr;\n+\n+fn main() {\n+    let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error.\n+    let x = &x[0] as *const _ as *const u32;\n+    // This must fail because alignment is violated: the allocation's base is not sufficiently aligned.\n+    // The deref is UB even if we just put the result into a raw pointer.\n+    let _x = unsafe { ptr::raw_const!(*x) }; //~ ERROR memory with alignment 2, but alignment 4 is required\n+}"}, {"sha": "43419695ba044758a216b4463496dce7bf46bea4", "filename": "tests/run-pass/packed_struct.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31ad5f6b2b93f78d3366c0654609f4b685043ec9/tests%2Frun-pass%2Fpacked_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31ad5f6b2b93f78d3366c0654609f4b685043ec9/tests%2Frun-pass%2Fpacked_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpacked_struct.rs?ref=31ad5f6b2b93f78d3366c0654609f4b685043ec9", "patch": "@@ -1,7 +1,8 @@\n-#![feature(unsize, coerce_unsized, raw_ref_op)]\n+#![feature(unsize, coerce_unsized, raw_ref_op, raw_ref_macros)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::Hash;\n+use std::ptr;\n \n fn test_basic() {\n     #[repr(packed)]\n@@ -45,7 +46,9 @@ fn test_basic() {\n     assert_eq!({x.b}, 99);\n     // but we *can* take a raw pointer!\n     assert_eq!(unsafe { (&raw const x.a).read_unaligned() }, 42);\n+    assert_eq!(unsafe { ptr::raw_const!(x.a).read_unaligned() }, 42);\n     assert_eq!(unsafe { (&raw const x.b).read_unaligned() }, 99);\n+    assert_eq!(unsafe { ptr::raw_const!(x.b).read_unaligned() }, 99);\n \n     x.b = 77;\n     assert_eq!({x.b}, 77);"}]}