{"sha": "71ebc6182012d80e076e4aaa03e0dbe44132fcbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZWJjNjE4MjAxMmQ4MGUwNzZlNGFhYTAzZTBkYmU0NDEzMmZjYmY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-07T15:39:16Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-11T18:17:32Z"}, "message": "resolve: Simplify `fn report_privacy_error`\n\nby factoring out `fn ctor_fields_span` into a separate function", "tree": {"sha": "ab72553530946e97ead823503ad0e22ffdb413b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab72553530946e97ead823503ad0e22ffdb413b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71ebc6182012d80e076e4aaa03e0dbe44132fcbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71ebc6182012d80e076e4aaa03e0dbe44132fcbf", "html_url": "https://github.com/rust-lang/rust/commit/71ebc6182012d80e076e4aaa03e0dbe44132fcbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71ebc6182012d80e076e4aaa03e0dbe44132fcbf/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c20d7eecbc0928b57da8fe30b2ef8528e2bdd5be", "url": "https://api.github.com/repos/rust-lang/rust/commits/c20d7eecbc0928b57da8fe30b2ef8528e2bdd5be", "html_url": "https://github.com/rust-lang/rust/commit/c20d7eecbc0928b57da8fe30b2ef8528e2bdd5be"}], "stats": {"total": 67, "additions": 31, "deletions": 36}, "files": [{"sha": "edbb2db3868d4a92b37a0df5539e8c753076b2a5", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 31, "deletions": 36, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/71ebc6182012d80e076e4aaa03e0dbe44132fcbf/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ebc6182012d80e076e4aaa03e0dbe44132fcbf/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=71ebc6182012d80e076e4aaa03e0dbe44132fcbf", "patch": "@@ -916,51 +916,46 @@ impl<'a> Resolver<'a> {\n         err.emit();\n     }\n \n-    crate fn report_privacy_error(&self, privacy_error: &PrivacyError<'_>) {\n-        let PrivacyError { ident, binding, .. } = *privacy_error;\n-        let session = &self.session;\n-        let mk_struct_span_error = |is_constructor| {\n-            let mut descr = binding.res().descr().to_string();\n-            if is_constructor {\n-                descr += \" constructor\";\n-            }\n-            if binding.is_import() {\n-                descr += \" import\";\n-            }\n-\n-            let mut err =\n-                struct_span_err!(session, ident.span, E0603, \"{} `{}` is private\", descr, ident);\n-\n-            err.span_label(ident.span, &format!(\"this {} is private\", descr));\n-            err.span_note(\n-                session.source_map().def_span(binding.span),\n-                &format!(\"the {} `{}` is defined here\", descr, ident),\n-            );\n-\n-            err\n-        };\n-\n-        let mut err = if let NameBindingKind::Res(\n+    /// If the binding refers to a tuple struct constructor with fields,\n+    /// returns the span of its fields.\n+    fn ctor_fields_span(&self, binding: &NameBinding<'_>) -> Option<Span> {\n+        if let NameBindingKind::Res(\n             Res::Def(DefKind::Ctor(CtorOf::Struct, CtorKind::Fn), ctor_def_id),\n             _,\n         ) = binding.kind\n         {\n             let def_id = (&*self).parent(ctor_def_id).expect(\"no parent for a constructor\");\n             if let Some(fields) = self.field_names.get(&def_id) {\n-                let mut err = mk_struct_span_error(true);\n                 let first_field = fields.first().expect(\"empty field list in the map\");\n-                err.span_label(\n-                    fields.iter().fold(first_field.span, |acc, field| acc.to(field.span)),\n-                    \"a constructor is private if any of the fields is private\",\n-                );\n-                err\n-            } else {\n-                mk_struct_span_error(false)\n+                return Some(fields.iter().fold(first_field.span, |acc, field| acc.to(field.span)));\n             }\n-        } else {\n-            mk_struct_span_error(false)\n-        };\n+        }\n+        None\n+    }\n+\n+    crate fn report_privacy_error(&self, privacy_error: &PrivacyError<'_>) {\n+        let PrivacyError { ident, binding, .. } = *privacy_error;\n+\n+        let ctor_fields_span = self.ctor_fields_span(binding);\n+        let mut descr = binding.res().descr().to_string();\n+        if ctor_fields_span.is_some() {\n+            descr += \" constructor\";\n+        }\n+        if binding.is_import() {\n+            descr += \" import\";\n+        }\n \n+        let mut err =\n+            struct_span_err!(self.session, ident.span, E0603, \"{} `{}` is private\", descr, ident);\n+        err.span_label(ident.span, &format!(\"this {} is private\", descr));\n+        if let Some(span) = ctor_fields_span {\n+            err.span_label(span, \"a constructor is private if any of the fields is private\");\n+        }\n+\n+        err.span_note(\n+            self.session.source_map().def_span(binding.span),\n+            &format!(\"the {} `{}` is defined here\", descr, ident),\n+        );\n         err.emit();\n     }\n }"}]}