{"sha": "6d949112f624616db58ecf12b8acb08b82d22758", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkOTQ5MTEyZjYyNDYxNmRiNThlY2YxMmI4YWNiMDhiODJkMjI3NTg=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-11-02T19:59:24Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-11-02T20:05:00Z"}, "message": "addressed feedback", "tree": {"sha": "dfd63d323a066868a10e8bb7371b0b101d6a560f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfd63d323a066868a10e8bb7371b0b101d6a560f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d949112f624616db58ecf12b8acb08b82d22758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d949112f624616db58ecf12b8acb08b82d22758", "html_url": "https://github.com/rust-lang/rust/commit/6d949112f624616db58ecf12b8acb08b82d22758", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d949112f624616db58ecf12b8acb08b82d22758/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8dfb26b620c71756251d65db14ff7cbdfc7439c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8dfb26b620c71756251d65db14ff7cbdfc7439c", "html_url": "https://github.com/rust-lang/rust/commit/a8dfb26b620c71756251d65db14ff7cbdfc7439c"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "1dd7272e0f92a972d0d8be5bf67477b128d45304", "filename": "src/doc/unstable-book/src/compiler-flags/source-based-code-coverage.md", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6d949112f624616db58ecf12b8acb08b82d22758/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d949112f624616db58ecf12b8acb08b82d22758/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md?ref=6d949112f624616db58ecf12b8acb08b82d22758", "patch": "@@ -26,9 +26,11 @@ When running a coverage-instrumented program, the counter values are written to\n \n ## Enable coverage profiling in the Rust compiler\n \n-*IMPORTANT:* Rust's coverage profiling features may not be enabled, by default. To enable them, you may need to build a version of the Rust compiler with the `profiler` feature enabled.\n+Rust's source-based code coverage requires the Rust \"profiler runtime\". Without it, compiling with `-Zinstrument-coverage` generates an error that the profiler runtime is missing.\n \n-First, edit the `config.toml` file, and find the `profiler` feature entry. Uncomment it and set it to `true`:\n+The Rust `nightly` distribution channel should include the profiler runtime, by default.\n+\n+*IMPORTANT:* If you are building the Rust compiler from the source distribution, the profiler runtime is *not* enabled in the default `config.toml.example`, and may not be enabled in your `config.toml`. Edit the `config.toml` file, and find the `profiler` feature entry. Uncomment it and set it to `true`:\n \n ```toml\n # Build the profiler runtime (required when compiling with options that depend\n@@ -40,7 +42,15 @@ Then rebuild the Rust compiler (see [rustc-dev-guide-how-to-build-and-run]).\n \n ### Building the demangler\n \n-LLVM coverage reporting tools generate results that can include function names and other symbol references, and the raw coverage results report symbols using the compiler's \"mangled\" version of the symbol names, which can be difficult to interpret. To work around this issue, LLVM coverage tools also support a user-specified symbol name demangler. Rust's symbol name demangler can be built with:\n+LLVM coverage reporting tools generate results that can include function names and other symbol references, and the raw coverage results report symbols using the compiler's \"mangled\" version of the symbol names, which can be difficult to interpret. To work around this issue, LLVM coverage tools also support a user-specified symbol name demangler.\n+\n+One option for a Rust demangler is [`rustfilt`](https://crates.io/crates/rustfilt), which can be installed with:\n+\n+```shell\n+cargo install rustfilt\n+```\n+\n+Another option, if you are building from the Rust compiler source distribution, is to use the `rust-demangler` tool included in the Rust source distribution, which can be built with:\n \n ```shell\n $ ./x.py build rust-demangler\n@@ -102,25 +112,24 @@ If `LLVM_PROFILE_FILE` contains a path to a non-existent directory, the missing\n \n ## Creating coverage reports\n \n-LLVM's tools to process coverage data and coverage maps have some version dependencies. If you encounter a version mismatch, try updating your LLVM tools, or use the LLVM tools bundled with the same Rust distrubition used to rebuild the Rust compiler (as shown in the following examples).\n+LLVM's tools to process coverage data and coverage maps have some version dependencies. If you encounter a version mismatch, try updating your LLVM tools.\n+\n+If you are building the Rust compiler from source, you can optionally use the bundled LLVM tools, built from source. Those tool binaries can typically be found in your build platform directory at something like: `rust/build/x86_64-unknown-linux-gnu/llvm/bin/llvm-*`. (Look for `llvm-profdata` and `llvm-cov`.)\n \n Raw profiles have to be indexed before they can be used to generate coverage reports. This is done using [`llvm-profdata merge`] (which can combine multiple raw profiles and index them at the same time):\n \n ```shell\n-$ $HOME/rust/build/x86_64-unknown-linux-gnu/llvm/bin/llvm-profdata merge \\\n-    -sparse formatjson5.profraw -o formatjson5.profdata\n+$ llvm-profdata merge -sparse formatjson5.profraw -o formatjson5.profdata\n ```\n \n Finally, the `.profdata` file is used, in combination with the coverage map (from the program binary) to generate coverage reports using [`llvm-cov report`]--for a coverage summaries--and [`llvm-cov show`]--to see detailed coverage of lines and regions (character ranges), overlaid on the original source code.\n \n These commands have several display and filtering options. For example:\n \n ```shell\n-$ $HOME/rust/build/x86_64-unknown-linux-gnu/llvm/bin/llvm-cov show \\\n+$ llvm-cov show -Xdemangler=rustfilt target/debug/examples/formatjson5 \\\n     -instr-profile=formatjson5.profdata \\\n-    target/debug/examples/formatjson5 \\\n     -show-line-counts-or-regions \\\n-    -Xdemangler=$HOME/rust/build/x86_64-unknown-linux-gnu/stage0-tools-bin/rust-demangler \\\n     -show-instantiations \\\n     -name=add_quoted_string\n ```\n@@ -131,9 +140,9 @@ $ $HOME/rust/build/x86_64-unknown-linux-gnu/llvm/bin/llvm-cov show \\\n \n Some of the more notable options in this example include:\n \n-* `--instr-profile=<path-to-file>.profdata` - the location of the `.profdata` file created by `llvm-profdata merge`\n-* `target/debug/examples/formatjson5` - the binary that generated the coverage profiling data (originally as a `.profraw` file)\n-* `--Xdemangler=<path-to>/rust-demangler` - the location of the `rust-demangler` tool\n+* `--Xdemangler=rustfilt` - the command name or path used to demangle Rust symbols (`rustfilt` in the example, but this could also be a path to the `rust-demangler` tool)\n+* `target/debug/examples/formatjson5` - the instrumented binary (from which to extract the coverage map)\n+* `--instr-profile=<path-to-file>.profdata` - the location of the `.profdata` file created by `llvm-profdata merge` (from the `.profraw` file generated by the instrumented binary)\n * `--name=<exact-function-name>` - to show coverage for a specific function (or, consider using another filter option, such as `--name-regex=<pattern>`)\n \n ## Interpreting reports\n@@ -155,6 +164,6 @@ Rust's implementation and workflow for source-based code coverage is based on th\n [`llvm.instrprof.increment`]: https://llvm.org/docs/LangRef.html#llvm-instrprof-increment-intrinsic\n [LLVM Code Coverage Mapping Format]: https://llvm.org/docs/CoverageMappingFormat.html\n [rustc-dev-guide-how-to-build-and-run]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html\n-[`llvm-profdata merge`]: https://llvm.org/docs/CommandGuide/llvm-profdata.html#profdata-merge \n-[`llvm-cov report`]: https://llvm.org/docs/CommandGuide/llvm-cov.html#llvm-cov-report \n-[`llvm-cov show`]: https://llvm.org/docs/CommandGuide/llvm-cov.html#llvm-cov-show \n+[`llvm-profdata merge`]: https://llvm.org/docs/CommandGuide/llvm-profdata.html#profdata-merge\n+[`llvm-cov report`]: https://llvm.org/docs/CommandGuide/llvm-cov.html#llvm-cov-report\n+[`llvm-cov show`]: https://llvm.org/docs/CommandGuide/llvm-cov.html#llvm-cov-show"}]}