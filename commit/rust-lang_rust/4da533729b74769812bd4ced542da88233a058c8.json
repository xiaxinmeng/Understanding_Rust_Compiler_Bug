{"sha": "4da533729b74769812bd4ced542da88233a058c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYTUzMzcyOWI3NDc2OTgxMmJkNGNlZDU0MmRhODgyMzNhMDU4Yzg=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-19T03:51:36Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-19T03:51:36Z"}, "message": "Dump local values on Lvalue creation.", "tree": {"sha": "6966388365d777f5a87d064fe2147097b0bc6ff8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6966388365d777f5a87d064fe2147097b0bc6ff8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4da533729b74769812bd4ced542da88233a058c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4da533729b74769812bd4ced542da88233a058c8", "html_url": "https://github.com/rust-lang/rust/commit/4da533729b74769812bd4ced542da88233a058c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4da533729b74769812bd4ced542da88233a058c8/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e363952c0a7ce705fa5627a789fe6e199e6fb5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e363952c0a7ce705fa5627a789fe6e199e6fb5f", "html_url": "https://github.com/rust-lang/rust/commit/9e363952c0a7ce705fa5627a789fe6e199e6fb5f"}], "stats": {"total": 33, "additions": 4, "deletions": 29}, "files": [{"sha": "51aac69d2c5d7f214103b8a452381bec6f1ab013", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4da533729b74769812bd4ced542da88233a058c8/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da533729b74769812bd4ced542da88233a058c8/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=4da533729b74769812bd4ced542da88233a058c8", "patch": "@@ -892,7 +892,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Projection(ref proj) => return self.eval_lvalue_projection(proj),\n         };\n \n-        self.dump_local(lvalue);\n+        if log_enabled!(::log::LogLevel::Debug) {\n+            self.dump_local(lvalue);\n+        }\n \n         Ok(lvalue)\n     }\n@@ -1443,27 +1445,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n         }\n     }\n-\n-    fn dump_locals(&self, limit: usize) {\n-        for (frame_index, frame) in self.stack.iter().enumerate() {\n-            trace!(\"frame[{}]:\", frame_index);\n-\n-            let locals: Vec<(mir::Local, Value)> = frame.mir.local_decls\n-                .indices()\n-                .filter_map(|i| {\n-                    if i == mir::RETURN_POINTER { return None; }\n-                    frame.get_local(i).map(|local| (i, local))\n-                })\n-                .collect();\n-\n-            for &(i, v) in locals.iter().take(limit) {\n-                trace!(\"  {:?}: {:?}\", i, v);\n-            }\n-            if locals.len() > limit {\n-                trace!(\"  ...\");\n-            }\n-        }\n-    }\n }\n \n impl<'a, 'tcx: 'a> Frame<'a, 'tcx> {\n@@ -1545,13 +1526,7 @@ pub fn eval_main<'a, 'tcx: 'a>(\n \n     for _ in 0..step_limit {\n         match ecx.step() {\n-            Ok(true) => {\n-                use std::env::var;\n-                let limit_opt = var(\"MIRI_LOG_LOCALS_LIMIT\").ok().and_then(|s| s.parse().ok());\n-                if let Some(limit) = limit_opt {\n-                    ecx.dump_locals(limit);\n-                }\n-            }\n+            Ok(true) => {}\n             Ok(false) => return,\n             Err(e) => {\n                 report(tcx, &ecx, e);"}]}