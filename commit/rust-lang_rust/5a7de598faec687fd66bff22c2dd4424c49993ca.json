{"sha": "5a7de598faec687fd66bff22c2dd4424c49993ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhN2RlNTk4ZmFlYzY4N2ZkNjZiZmYyMmMyZGQ0NDI0YzQ5OTkzY2E=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-10-25T07:48:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-25T07:48:08Z"}, "message": "Rollup merge of #45361 - GuillaumeGomez:fs-docs, r=QuietMisdreavus\n\nAdd missing code examples\n\nr? @rust-lang/docs", "tree": {"sha": "972ee0d8cf3f1a51cf7c639c4af9c3c8001ff0a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/972ee0d8cf3f1a51cf7c639c4af9c3c8001ff0a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a7de598faec687fd66bff22c2dd4424c49993ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7de598faec687fd66bff22c2dd4424c49993ca", "html_url": "https://github.com/rust-lang/rust/commit/5a7de598faec687fd66bff22c2dd4424c49993ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a7de598faec687fd66bff22c2dd4424c49993ca/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2478052f88db8c8526ee2dc4a382da91eefc76c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2478052f88db8c8526ee2dc4a382da91eefc76c", "html_url": "https://github.com/rust-lang/rust/commit/b2478052f88db8c8526ee2dc4a382da91eefc76c"}, {"sha": "e42da901a8f1192aa66ee8d8fbf3ebd9ade95062", "url": "https://api.github.com/repos/rust-lang/rust/commits/e42da901a8f1192aa66ee8d8fbf3ebd9ade95062", "html_url": "https://github.com/rust-lang/rust/commit/e42da901a8f1192aa66ee8d8fbf3ebd9ade95062"}], "stats": {"total": 242, "additions": 241, "deletions": 1}, "files": [{"sha": "5d37d970e89b64494b737def563516eb305c1b4f", "filename": "src/libstd/os/linux/fs.rs", "status": "modified", "additions": 241, "deletions": 1, "changes": 242, "blob_url": "https://github.com/rust-lang/rust/blob/5a7de598faec687fd66bff22c2dd4424c49993ca/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7de598faec687fd66bff22c2dd4424c49993ca/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Ffs.rs?ref=5a7de598faec687fd66bff22c2dd4424c49993ca", "patch": "@@ -24,9 +24,25 @@ pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains\n     /// the raw information returned by the OS.\n     ///\n-    /// The contents of the returned `stat` are **not** consistent across\n+    /// The contents of the returned [`stat`] are **not** consistent across\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n+    ///\n+    /// [`stat`]: ../../../../std/os/linux/raw/struct.stat.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let stat = meta.as_raw_stat();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     #[rustc_deprecated(since = \"1.8.0\",\n                        reason = \"deprecated in favor of the accessor \\\n@@ -35,54 +51,278 @@ pub trait MetadataExt {\n     fn as_raw_stat(&self) -> &raw::stat;\n \n     /// Returns the device ID on which this file resides.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_dev());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_dev(&self) -> u64;\n     /// Returns the inode number.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_ino());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_ino(&self) -> u64;\n     /// Returns the file type and mode.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_mode());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_mode(&self) -> u32;\n     /// Returns the number of hard links to file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_nlink());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_nlink(&self) -> u64;\n     /// Returns the user ID of the file owner.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_uid());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_uid(&self) -> u32;\n     /// Returns the group ID of the file owner.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_gid());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_gid(&self) -> u32;\n     /// Returns the device ID that this file represents. Only relevant for special file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_rdev());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_rdev(&self) -> u64;\n     /// Returns the size of the file (if it is a regular file or a symbolic link) in bytes.\n     ///\n     /// The size of a symbolic link is the length of the pathname it contains,\n     /// without a terminating null byte.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_size());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_size(&self) -> u64;\n     /// Returns the last access time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_atime());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_atime(&self) -> i64;\n     /// Returns the last access time, nano seconds part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_atime_nsec());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_atime_nsec(&self) -> i64;\n     /// Returns the last modification time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_mtime());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_mtime(&self) -> i64;\n     /// Returns the last modification time, nano seconds part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_mtime_nsec());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_mtime_nsec(&self) -> i64;\n     /// Returns the last status change time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_ctime());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_ctime(&self) -> i64;\n     /// Returns the last status change time, nano seconds part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_ctime_nsec());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_ctime_nsec(&self) -> i64;\n     /// Returns the \"preferred\" blocksize for efficient filesystem I/O.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_blksize());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_blksize(&self) -> u64;\n     /// Returns the number of blocks allocated to the file, 512-byte units.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_blocks());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_blocks(&self) -> u64;\n }"}]}