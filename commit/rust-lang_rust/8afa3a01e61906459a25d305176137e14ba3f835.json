{"sha": "8afa3a01e61906459a25d305176137e14ba3f835", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZmEzYTAxZTYxOTA2NDU5YTI1ZDMwNTE3NjEzN2UxNGJhM2Y4MzU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-06-25T09:42:55Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-19T00:14:28Z"}, "message": "rustc_trans: always insert alignment padding, even before the first field.", "tree": {"sha": "d41af664e548e4364deb5cbf662fb15137ae1c3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d41af664e548e4364deb5cbf662fb15137ae1c3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8afa3a01e61906459a25d305176137e14ba3f835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8afa3a01e61906459a25d305176137e14ba3f835", "html_url": "https://github.com/rust-lang/rust/commit/8afa3a01e61906459a25d305176137e14ba3f835", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8afa3a01e61906459a25d305176137e14ba3f835/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a1fcc32a65c87646fe1613ea00c9447f04a646b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a1fcc32a65c87646fe1613ea00c9447f04a646b", "html_url": "https://github.com/rust-lang/rust/commit/0a1fcc32a65c87646fe1613ea00c9447f04a646b"}], "stats": {"total": 108, "additions": 66, "deletions": 42}, "files": [{"sha": "c1242f57139717c513a57c4d7532ab7ec7ed687a", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8afa3a01e61906459a25d305176137e14ba3f835/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa3a01e61906459a25d305176137e14ba3f835/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=8afa3a01e61906459a25d305176137e14ba3f835", "patch": "@@ -202,9 +202,9 @@ fn union_fill(cx: &CrateContext, size: Size, align: Align) -> Type {\n     Type::array(&elem_ty, size / abi_align)\n }\n \n-/// Double an index to account for padding.\n+/// Double an index and add 1 to account for padding.\n pub fn memory_index_to_gep(index: u64) -> u64 {\n-    index * 2\n+    1 + index * 2\n }\n \n pub fn struct_llfields<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n@@ -213,9 +213,8 @@ pub fn struct_llfields<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                  discr: Option<Ty<'tcx>>) -> Vec<Type> {\n     let field_count = (discr.is_some() as usize) + layout.field_count();\n     debug!(\"struct_llfields: variant: {:?}\", variant);\n-    let mut first_field = true;\n     let mut offset = Size::from_bytes(0);\n-    let mut result: Vec<Type> = Vec::with_capacity(field_count * 2);\n+    let mut result: Vec<Type> = Vec::with_capacity(1 + field_count * 2);\n     let field_iter = variant.field_index_by_increasing_offset().map(|i| {\n         let ty = if i == 0 && discr.is_some() {\n             cx.layout_of(discr.unwrap())\n@@ -229,13 +228,9 @@ pub fn struct_llfields<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             index, field, offset, target_offset);\n         assert!(target_offset >= offset);\n         let padding = target_offset - offset;\n-        if first_field {\n-            assert_eq!(padding.bytes(), 0);\n-            first_field = false;\n-        } else {\n-            result.push(Type::array(&Type::i8(cx), padding.bytes()));\n-            debug!(\"    padding before: {:?}\", padding);\n-        }\n+        result.push(Type::array(&Type::i8(cx), padding.bytes()));\n+        debug!(\"    padding before: {:?}\", padding);\n+\n         let llty = cx.llvm_type_of(field.ty);\n         result.push(llty);\n \n@@ -259,7 +254,7 @@ pub fn struct_llfields<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         debug!(\"struct_llfields: pad_bytes: {:?} offset: {:?} min_size: {:?} stride: {:?}\",\n             padding, offset, variant.min_size, variant.stride());\n         result.push(Type::array(&Type::i8(cx), padding.bytes()));\n-        assert!(result.len() == (field_count * 2));\n+        assert!(result.len() == 1 + field_count * 2);\n     } else {\n         debug!(\"struct_llfields: offset: {:?} min_size: {:?} stride: {:?}\",\n                offset, variant.min_size, variant.stride());"}, {"sha": "2e010ccee4824c8bdbaeab1927cfc4ba3eaebad1", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8afa3a01e61906459a25d305176137e14ba3f835/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa3a01e61906459a25d305176137e14ba3f835/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=8afa3a01e61906459a25d305176137e14ba3f835", "patch": "@@ -18,6 +18,7 @@ use llvm::{True, False, Bool, OperandBundleDef};\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::DefPathData;\n use rustc::middle::lang_items::LangItem;\n+use abi;\n use base;\n use builder::Builder;\n use consts;\n@@ -267,7 +268,29 @@ pub fn C_str_slice(cx: &CrateContext, s: InternedString) -> ValueRef {\n     let len = s.len();\n     let cs = consts::ptrcast(C_cstr(cx, s, false),\n         cx.llvm_type_of(cx.tcx().mk_str()).ptr_to());\n-    C_named_struct(cx.str_slice_type(), &[cs, C_usize(cx, len as u64)])\n+    let empty = C_array(Type::i8(cx), &[]);\n+    assert_eq!(abi::FAT_PTR_ADDR, 0);\n+    assert_eq!(abi::FAT_PTR_EXTRA, 1);\n+    C_named_struct(cx.str_slice_type(), &[\n+        empty,\n+        cs,\n+        empty,\n+        C_usize(cx, len as u64),\n+        empty\n+    ])\n+}\n+\n+pub fn C_fat_ptr(cx: &CrateContext, ptr: ValueRef, meta: ValueRef) -> ValueRef {\n+    let empty = C_array(Type::i8(cx), &[]);\n+    assert_eq!(abi::FAT_PTR_ADDR, 0);\n+    assert_eq!(abi::FAT_PTR_EXTRA, 1);\n+    C_struct(cx, &[\n+        empty,\n+        ptr,\n+        empty,\n+        meta,\n+        empty\n+    ], false)\n }\n \n pub fn C_struct(cx: &CrateContext, elts: &[ValueRef], packed: bool) -> ValueRef {"}, {"sha": "ac5f43722867179182539e5de01a4d7ef421c8f5", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8afa3a01e61906459a25d305176137e14ba3f835/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa3a01e61906459a25d305176137e14ba3f835/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=8afa3a01e61906459a25d305176137e14ba3f835", "patch": "@@ -395,11 +395,13 @@ impl<'a, 'tcx> LocalCrateContext<'a, 'tcx> {\n                     let dummy_ccx = LocalCrateContext::dummy_ccx(shared,\n                                                                  local_ccxs.as_mut_slice());\n                     let mut str_slice_ty = Type::named_struct(&dummy_ccx, \"str_slice\");\n-\n-                    let llptrty = dummy_ccx.llvm_type_of(shared.tcx.mk_str()).ptr_to();\n-                    str_slice_ty.set_struct_body(&[llptrty,\n-                                                   Type::isize(&dummy_ccx)],\n-                                                 false);\n+                    str_slice_ty.set_struct_body(&[\n+                        Type::array(&Type::i8(&dummy_ccx), 0),\n+                        dummy_ccx.llvm_type_of(shared.tcx.mk_str()).ptr_to(),\n+                        Type::array(&Type::i8(&dummy_ccx), 0),\n+                        Type::isize(&dummy_ccx),\n+                        Type::array(&Type::i8(&dummy_ccx), 0)\n+                    ], false);\n                     (Type::isize(&dummy_ccx), str_slice_ty)\n                 };\n                 (isize_ty, str_slice_ty, local_ccxs.pop().unwrap())"}, {"sha": "1b3559a50e30565e911d8dc02f98e47779bf90fd", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8afa3a01e61906459a25d305176137e14ba3f835/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa3a01e61906459a25d305176137e14ba3f835/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=8afa3a01e61906459a25d305176137e14ba3f835", "patch": "@@ -29,7 +29,7 @@ use callee;\n use builder::Builder;\n use common::{self, CrateContext, const_get_elt, val_ty};\n use common::{C_array, C_bool, C_bytes, C_int, C_uint, C_big_integral, C_u32, C_u64};\n-use common::{C_null, C_struct, C_str_slice, C_undef, C_usize, C_vector};\n+use common::{C_null, C_struct, C_str_slice, C_undef, C_usize, C_vector, C_fat_ptr};\n use common::const_to_opt_u128;\n use consts;\n use type_of::{self, LayoutLlvmExt};\n@@ -675,9 +675,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                                                      .insert(base, operand.llval);\n                             assert!(prev_const.is_none() || prev_const == Some(operand.llval));\n                         }\n-                        assert_eq!(abi::FAT_PTR_ADDR, 0);\n-                        assert_eq!(abi::FAT_PTR_EXTRA, 1);\n-                        C_struct(self.ccx, &[base, info], false)\n+                        C_fat_ptr(self.ccx, base, info)\n                     }\n                     mir::CastKind::Misc if common::type_is_immediate(self.ccx, operand.ty) => {\n                         debug_assert!(common::type_is_immediate(self.ccx, cast_ty));\n@@ -734,7 +732,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                             if common::type_is_fat_ptr(self.ccx, cast_ty) {\n                                 let llcast_ty = type_of::fat_ptr_base_ty(self.ccx, cast_ty);\n                                 let data_cast = consts::ptrcast(data_ptr, llcast_ty);\n-                                C_struct(self.ccx, &[data_cast, meta], false)\n+                                C_fat_ptr(self.ccx, data_cast, meta)\n                             } else { // cast to thin-ptr\n                                 // Cast of fat-ptr to thin-ptr is an extraction of data-ptr and\n                                 // pointer-cast of that pointer to desired pointer type.\n@@ -777,7 +775,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                 let ptr = if self.ccx.shared().type_is_sized(ty) {\n                     base\n                 } else {\n-                    C_struct(self.ccx, &[base, tr_lvalue.llextra], false)\n+                    C_fat_ptr(self.ccx, base, tr_lvalue.llextra)\n                 };\n                 Const::new(ptr, ref_ty)\n             }\n@@ -1176,14 +1174,8 @@ fn build_const_struct<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let parts = st.field_index_by_increasing_offset().map(|i| {\n         (vals[i], st.offsets[i])\n     });\n-    let mut first_field = true;\n     for (val, target_offset) in parts {\n-        if first_field {\n-            first_field = false;\n-            assert_eq!(target_offset.bytes(), 0);\n-        } else {\n-            cfields.push(padding(ccx, target_offset - offset));\n-        }\n+        cfields.push(padding(ccx, target_offset - offset));\n         cfields.push(val.llval);\n         offset = target_offset + ccx.size_of(val.ty);\n     }"}, {"sha": "f86bc17d20aac2d72b0da45d2ccf7271c09b19a6", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8afa3a01e61906459a25d305176137e14ba3f835/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa3a01e61906459a25d305176137e14ba3f835/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=8afa3a01e61906459a25d305176137e14ba3f835", "patch": "@@ -76,7 +76,13 @@ fn compute_llvm_type<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type\n             } else {\n                 let ptr_ty = cx.llvm_type_of(ty).ptr_to();\n                 let info_ty = unsized_info_ty(cx, ty);\n-                Type::struct_(cx, &[ptr_ty, info_ty], false)\n+                Type::struct_(cx, &[\n+                    Type::array(&Type::i8(cx), 0),\n+                    ptr_ty,\n+                    Type::array(&Type::i8(cx), 0),\n+                    info_ty,\n+                    Type::array(&Type::i8(cx), 0)\n+                ], false)\n             }\n         } else {\n             cx.llvm_type_of(ty).ptr_to()\n@@ -240,11 +246,14 @@ impl<'tcx> LayoutLlvmExt for TyLayout<'tcx> {\n             }\n \n             Layout::Vector { .. } |\n-            Layout::Array { .. } |\n-            Layout::FatPointer { .. } => {\n+            Layout::Array { .. } => {\n                 index as u64\n             }\n \n+            Layout::FatPointer { .. } => {\n+                adt::memory_index_to_gep(index as u64)\n+            }\n+\n             Layout::Univariant { ref variant, .. } => {\n                 adt::memory_index_to_gep(variant.memory_index[index] as u64)\n             }"}, {"sha": "8a680f1c9d69800755593947aeb6d93f6c7673e6", "filename": "src/test/codegen/adjustments.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8afa3a01e61906459a25d305176137e14ba3f835/src%2Ftest%2Fcodegen%2Fadjustments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa3a01e61906459a25d305176137e14ba3f835/src%2Ftest%2Fcodegen%2Fadjustments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fadjustments.rs?ref=8afa3a01e61906459a25d305176137e14ba3f835", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags: -C no-prepopulate-passes\n+// ignore-tidy-linelength\n \n #![crate_type = \"lib\"]\n \n@@ -24,9 +25,9 @@ pub fn no_op_slice_adjustment(x: &[u8]) -> &[u8] {\n     // We used to generate an extra alloca and memcpy for the block's trailing expression value, so\n     // check that we copy directly to the return value slot\n // CHECK: %x.ptr = bitcast i8* %0 to [0 x i8]*\n-// CHECK: %1 = insertvalue { [0 x i8]*, [[USIZE]] } undef, [0 x i8]* %x.ptr, 0\n-// CHECK: %2 = insertvalue { [0 x i8]*, [[USIZE]] } %1, [[USIZE]] %x.meta, 1\n-// CHECK: ret { [0 x i8]*, [[USIZE]] } %2\n+// CHECK: %1 = insertvalue { [0 x i8], [0 x i8]*, [0 x i8], [[USIZE]], [0 x i8] } undef, [0 x i8]* %x.ptr, 1\n+// CHECK: %2 = insertvalue { [0 x i8], [0 x i8]*, [0 x i8], [[USIZE]], [0 x i8] } %1, [[USIZE]] %x.meta, 3\n+// CHECK: ret { [0 x i8], [0 x i8]*, [0 x i8], [[USIZE]], [0 x i8] } %2\n     { x }\n }\n "}, {"sha": "705488b7757cc9a0fba3d4c320d9055a72de8b47", "filename": "src/test/codegen/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8afa3a01e61906459a25d305176137e14ba3f835/src%2Ftest%2Fcodegen%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa3a01e61906459a25d305176137e14ba3f835/src%2Ftest%2Fcodegen%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fconsts.rs?ref=8afa3a01e61906459a25d305176137e14ba3f835", "patch": "@@ -54,14 +54,14 @@ pub fn inline_enum_const() -> E<i8, i16> {\n #[no_mangle]\n pub fn low_align_const() -> E<i16, [i16; 3]> {\n // Check that low_align_const and high_align_const use the same constant\n-// CHECK: load {{.*}} bitcast ({ i16, [0 x i8], i16, [4 x i8] }** [[LOW_HIGH_REF]]\n+// CHECK: load {{.*}} bitcast ({ [0 x i8], i16, [0 x i8], i16, [4 x i8] }** [[LOW_HIGH_REF]]\n     *&E::A(0)\n }\n \n // CHECK-LABEL: @high_align_const\n #[no_mangle]\n pub fn high_align_const() -> E<i16, i32> {\n // Check that low_align_const and high_align_const use the same constant\n-// CHECK: load {{.*}} bitcast ({ i16, [0 x i8], i16, [4 x i8] }** [[LOW_HIGH_REF]]\n+// CHECK: load {{.*}} bitcast ({ [0 x i8], i16, [0 x i8], i16, [4 x i8] }** [[LOW_HIGH_REF]]\n     *&E::A(0)\n }"}, {"sha": "5d073670d865c96df0641569fc3141ec728160e9", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8afa3a01e61906459a25d305176137e14ba3f835/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa3a01e61906459a25d305176137e14ba3f835/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=8afa3a01e61906459a25d305176137e14ba3f835", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags: -C no-prepopulate-passes\n+// ignore-tidy-linelength\n \n #![crate_type = \"lib\"]\n #![feature(custom_attribute)]\n@@ -132,7 +133,7 @@ pub fn trait_borrow(_: &Drop) {\n pub fn trait_box(_: Box<Drop>) {\n }\n \n-// CHECK: { [0 x i16]*, [[USIZE]] } @return_slice(i16* noalias nonnull readonly %x.ptr, [[USIZE]] %x.meta)\n+// CHECK: { [0 x i8], [0 x i16]*, [0 x i8], [[USIZE]], [0 x i8] } @return_slice(i16* noalias nonnull readonly %x.ptr, [[USIZE]] %x.meta)\n #[no_mangle]\n pub fn return_slice(x: &[u16]) -> &[u16] {\n   x"}, {"sha": "ad799247f598b2fcbde1ad156c4c695ff8877379", "filename": "src/test/codegen/refs.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8afa3a01e61906459a25d305176137e14ba3f835/src%2Ftest%2Fcodegen%2Frefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afa3a01e61906459a25d305176137e14ba3f835/src%2Ftest%2Fcodegen%2Frefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frefs.rs?ref=8afa3a01e61906459a25d305176137e14ba3f835", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-flags: -C no-prepopulate-passes\n+// ignore-tidy-linelength\n \n #![crate_type = \"lib\"]\n \n@@ -23,9 +24,9 @@ pub fn helper(_: usize) {\n pub fn ref_dst(s: &[u8]) {\n     // We used to generate an extra alloca and memcpy to ref the dst, so check that we copy\n     // directly to the alloca for \"x\"\n-// CHECK: [[X0:%[0-9]+]] = getelementptr {{.*}} { [0 x i8]*, [[USIZE]] }* %x, i32 0, i32 0\n+// CHECK: [[X0:%[0-9]+]] = getelementptr {{.*}} { [0 x i8], [0 x i8]*, [0 x i8], [[USIZE]], [0 x i8] }* %x, i32 0, i32 1\n // CHECK: store [0 x i8]* %s.ptr, [0 x i8]** [[X0]]\n-// CHECK: [[X1:%[0-9]+]] = getelementptr {{.*}} { [0 x i8]*, [[USIZE]] }* %x, i32 0, i32 1\n+// CHECK: [[X1:%[0-9]+]] = getelementptr {{.*}} { [0 x i8], [0 x i8]*, [0 x i8], [[USIZE]], [0 x i8] }* %x, i32 0, i32 3\n // CHECK: store [[USIZE]] %s.meta, [[USIZE]]* [[X1]]\n \n     let x = &*s;"}]}