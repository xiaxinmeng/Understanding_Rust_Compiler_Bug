{"sha": "87532e99e5ff2d63e78d7b67cae8c65d12ce5995", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NTMyZTk5ZTVmZjJkNjNlNzhkN2I2N2NhZThjNjVkMTJjZTU5OTU=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-26T00:07:31Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-26T21:54:18Z"}, "message": "Minor clean-up", "tree": {"sha": "ebe2bfb22f293da234ce9f6e5143b6288b4c1899", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebe2bfb22f293da234ce9f6e5143b6288b4c1899"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87532e99e5ff2d63e78d7b67cae8c65d12ce5995", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87532e99e5ff2d63e78d7b67cae8c65d12ce5995", "html_url": "https://github.com/rust-lang/rust/commit/87532e99e5ff2d63e78d7b67cae8c65d12ce5995", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87532e99e5ff2d63e78d7b67cae8c65d12ce5995/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67a30d2d7038f5a2667d93205ba5341ca7566dff", "url": "https://api.github.com/repos/rust-lang/rust/commits/67a30d2d7038f5a2667d93205ba5341ca7566dff", "html_url": "https://github.com/rust-lang/rust/commit/67a30d2d7038f5a2667d93205ba5341ca7566dff"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "80583a5855864e8390c63086f614c7df26bcf590", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/87532e99e5ff2d63e78d7b67cae8c65d12ce5995/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87532e99e5ff2d63e78d7b67cae8c65d12ce5995/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=87532e99e5ff2d63e78d7b67cae8c65d12ce5995", "patch": "@@ -569,7 +569,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n \n         let has_self = generic_params.has_self;\n         let (_, potential_assoc_types) = Self::check_generic_arg_count(\n-            self.tcx(),\n+            tcx,\n             span,\n             &generic_params,\n             &generic_args,\n@@ -594,7 +594,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         };\n \n         let substs = Self::create_substs_for_generic_args(\n-            self.tcx(),\n+            tcx,\n             def_id,\n             &[][..],\n             self_ty.is_some(),\n@@ -1293,8 +1293,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         self.prohibit_generics(slice::from_ref(item_segment));\n \n         // Check if we have an enum variant here.\n-        if let ty::Adt(adt_def, _) = ty.sty {\n-            if adt_def.is_enum() {\n+        match ty.sty {\n+            ty::Adt(adt_def, _) if adt_def.is_enum() => {\n                 let variant_def = adt_def.variants.iter().find(|vd| {\n                     tcx.hygienic_eq(assoc_name, vd.ident, adt_def.did)\n                 });\n@@ -1305,7 +1305,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                     tcx.check_stability(def.def_id(), Some(ref_id), span);\n                     return (ty, def);\n                 }\n-            }\n+            },\n+            _ => (),\n         }\n \n         // Find the type of the associated item, and the trait where the associated\n@@ -1339,7 +1340,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             }\n             (&ty::Adt(adt_def, _substs), Def::Enum(_did)) => {\n                 let ty_str = ty.to_string();\n-                // Incorrect enum variant\n+                // Incorrect enum variant.\n                 let mut err = tcx.sess.struct_span_err(\n                     span,\n                     &format!(\"no variant `{}` on enum `{}`\", &assoc_name.as_str(), ty_str),\n@@ -1669,23 +1670,24 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 tcx.mk_ty_param(index, tcx.hir().name(node_id).as_interned_str())\n             }\n             Def::SelfTy(_, Some(def_id)) => {\n-                // `Self` in impl (we know the concrete type)\n+                // `Self` in impl (we know the concrete type).\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_generics(&path.segments);\n                 tcx.at(span).type_of(def_id)\n             }\n             Def::SelfTy(Some(_), None) => {\n-                // `Self` in trait\n+                // `Self` in trait.\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_generics(&path.segments);\n                 tcx.mk_self_type()\n             }\n             Def::AssociatedTy(def_id) => {\n-                self.prohibit_generics(&path.segments[..path.segments.len()-2]);\n+                debug_assert!(path.segments.len() >= 2);\n+                self.prohibit_generics(&path.segments[..path.segments.len() - 2]);\n                 self.qpath_to_ty(span,\n                                  opt_self_ty,\n                                  def_id,\n-                                 &path.segments[path.segments.len()-2],\n+                                 &path.segments[path.segments.len() - 2],\n                                  path.segments.last().unwrap())\n             }\n             Def::PrimTy(prim_ty) => {"}, {"sha": "a039835b88f81a3e3d90c46f24d31e26126790d0", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/87532e99e5ff2d63e78d7b67cae8c65d12ce5995/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87532e99e5ff2d63e78d7b67cae8c65d12ce5995/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=87532e99e5ff2d63e78d7b67cae8c65d12ce5995", "patch": "@@ -372,8 +372,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let tcx = self.tcx;\n \n         // Check if we have an enum variant here.\n-        if let ty::Adt(adt_def, _) = self_ty.sty {\n-            if adt_def.is_enum() {\n+        match self_ty.sty {\n+            ty::Adt(adt_def, _) if adt_def.is_enum() => {\n                 let variant_def = adt_def.variants.iter().find(|vd| {\n                     tcx.hygienic_eq(method_name, vd.ident, adt_def.did)\n                 });\n@@ -384,7 +384,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     tcx.check_stability(def.def_id(), Some(expr_id), span);\n                     return Ok(def);\n                 }\n-            }\n+            },\n+            _ => (),\n         }\n \n         let mode = probe::Mode::Path;"}]}