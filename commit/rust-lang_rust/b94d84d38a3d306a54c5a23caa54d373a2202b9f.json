{"sha": "b94d84d38a3d306a54c5a23caa54d373a2202b9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NGQ4NGQzOGEzZDMwNmE1NGM1YTIzY2FhNTRkMzczYTIyMDJiOWY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-30T04:36:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-30T04:36:43Z"}, "message": "Rollup merge of #80886 - RalfJung:stable-raw-ref-macros, r=m-ou-se\n\nStabilize raw ref macros\n\nThis stabilizes `raw_ref_macros` (https://github.com/rust-lang/rust/issues/73394), which is possible now that https://github.com/rust-lang/rust/issues/74355 is fixed.\n\nHowever, as I already said in https://github.com/rust-lang/rust/issues/73394#issuecomment-751342185, I am not particularly happy with the current names of the macros. So I propose we also change them, which means I am proposing to stabilize the following in `core::ptr`:\n```rust\npub macro const_addr_of($e:expr) {\n    &raw const $e\n}\n\npub macro mut_addr_of($e:expr) {\n    &raw mut $e\n}\n```\n\nThe macro name change means we need another round of FCP. Cc `````@rust-lang/libs`````\nFixes #73394", "tree": {"sha": "0daf7654afdf3201f4a7372934092399a5251146", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0daf7654afdf3201f4a7372934092399a5251146"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b94d84d38a3d306a54c5a23caa54d373a2202b9f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgFOJbCRBK7hj4Ov3rIwAAdHIIAAfA2/86RIkCufUKWh96JlFb\nFaqIhbForrEIf2Vw2HFd0bVWGTx6x2AvkdhlqtGX2YBQxYdD4MKOyY2ogYsTcUza\nE/JP5+8C1nFYty89DGUxF1qi/WdT1znuNvoGHt+FhZVlLui1ykXDe31ZM9oQ7Ood\nG8j0uJ4JVpfM36HPitFSajEliy3znTkzMOTYO38KbFf47i6DMNCSnC7KySZGtyOG\nggHfToZKZT3oxnOpKdm3z5oJXu1Dh7yhv+uZ7UqfddwiOaI6/rqEKlC2rTvoCR3B\nEo9Q3BY3dGlBWO2QQ/EiQeKYAoOudS9Z3doyqIN64N7kqjaF9CyAjuEZ2fnAkCE=\n=I7qi\n-----END PGP SIGNATURE-----\n", "payload": "tree 0daf7654afdf3201f4a7372934092399a5251146\nparent a5c12ea75f18232eef4721a1a20210f5f2c25b75\nparent 13ffa43bbb910b5484874f15e7bda824b8fe6782\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1611981403 +0900\ncommitter GitHub <noreply@github.com> 1611981403 +0900\n\nRollup merge of #80886 - RalfJung:stable-raw-ref-macros, r=m-ou-se\n\nStabilize raw ref macros\n\nThis stabilizes `raw_ref_macros` (https://github.com/rust-lang/rust/issues/73394), which is possible now that https://github.com/rust-lang/rust/issues/74355 is fixed.\n\nHowever, as I already said in https://github.com/rust-lang/rust/issues/73394#issuecomment-751342185, I am not particularly happy with the current names of the macros. So I propose we also change them, which means I am proposing to stabilize the following in `core::ptr`:\n```rust\npub macro const_addr_of($e:expr) {\n    &raw const $e\n}\n\npub macro mut_addr_of($e:expr) {\n    &raw mut $e\n}\n```\n\nThe macro name change means we need another round of FCP. Cc `````@rust-lang/libs`````\nFixes #73394\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b94d84d38a3d306a54c5a23caa54d373a2202b9f", "html_url": "https://github.com/rust-lang/rust/commit/b94d84d38a3d306a54c5a23caa54d373a2202b9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b94d84d38a3d306a54c5a23caa54d373a2202b9f/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5c12ea75f18232eef4721a1a20210f5f2c25b75", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c12ea75f18232eef4721a1a20210f5f2c25b75", "html_url": "https://github.com/rust-lang/rust/commit/a5c12ea75f18232eef4721a1a20210f5f2c25b75"}, {"sha": "13ffa43bbb910b5484874f15e7bda824b8fe6782", "url": "https://api.github.com/repos/rust-lang/rust/commits/13ffa43bbb910b5484874f15e7bda824b8fe6782", "html_url": "https://github.com/rust-lang/rust/commit/13ffa43bbb910b5484874f15e7bda824b8fe6782"}], "stats": {"total": 67, "additions": 30, "deletions": 37}, "files": [{"sha": "1d632512c78b46785a13e34ead7a81d76a732baa", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b94d84d38a3d306a54c5a23caa54d373a2202b9f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94d84d38a3d306a54c5a23caa54d373a2202b9f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=b94d84d38a3d306a54c5a23caa54d373a2202b9f", "patch": "@@ -545,8 +545,8 @@ impl<'a, K, V, Type> NodeRef<marker::ValMut<'a>, K, V, Type> {\n         // to avoid aliasing with outstanding references to other elements,\n         // in particular, those returned to the caller in earlier iterations.\n         let leaf = Self::as_leaf_ptr(&mut self);\n-        let keys = unsafe { &raw const (*leaf).keys };\n-        let vals = unsafe { &raw mut (*leaf).vals };\n+        let keys = unsafe { ptr::addr_of!((*leaf).keys) };\n+        let vals = unsafe { ptr::addr_of_mut!((*leaf).vals) };\n         // We must coerce to unsized array pointers because of Rust issue #74679.\n         let keys: *const [_] = keys;\n         let vals: *mut [_] = vals;"}, {"sha": "0f9c5af4744190a8ac149683b47732e4673043b5", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b94d84d38a3d306a54c5a23caa54d373a2202b9f/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94d84d38a3d306a54c5a23caa54d373a2202b9f/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=b94d84d38a3d306a54c5a23caa54d373a2202b9f", "patch": "@@ -116,7 +116,6 @@\n #![feature(pattern)]\n #![feature(ptr_internals)]\n #![feature(range_bounds_assert_len)]\n-#![feature(raw_ref_op)]\n #![feature(rustc_attrs)]\n #![feature(receiver_trait)]\n #![cfg_attr(bootstrap, feature(min_const_generics))]"}, {"sha": "f67f5fc533b49f686541cdff2001dd6d5838acb8", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b94d84d38a3d306a54c5a23caa54d373a2202b9f/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94d84d38a3d306a54c5a23caa54d373a2202b9f/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=b94d84d38a3d306a54c5a23caa54d373a2202b9f", "patch": "@@ -398,7 +398,7 @@ impl<T> Rc<T> {\n \n         unsafe {\n             let inner = init_ptr.as_ptr();\n-            ptr::write(&raw mut (*inner).value, data);\n+            ptr::write(ptr::addr_of_mut!((*inner).value), data);\n \n             let prev_value = (*inner).strong.get();\n             debug_assert_eq!(prev_value, 0, \"No prior strong references should exist\");\n@@ -804,7 +804,7 @@ impl<T: ?Sized> Rc<T> {\n         // SAFETY: This cannot go through Deref::deref or Rc::inner because\n         // this is required to retain raw/mut provenance such that e.g. `get_mut` can\n         // write through the pointer after the Rc is recovered through `from_raw`.\n-        unsafe { &raw const (*ptr).value }\n+        unsafe { ptr::addr_of_mut!((*ptr).value) }\n     }\n \n     /// Constructs an `Rc<T>` from a raw pointer.\n@@ -1917,7 +1917,7 @@ impl<T: ?Sized> Weak<T> {\n             // SAFETY: if is_dangling returns false, then the pointer is dereferencable.\n             // The payload may be dropped at this point, and we have to maintain provenance,\n             // so use raw pointer manipulation.\n-            unsafe { &raw const (*ptr).value }\n+            unsafe { ptr::addr_of_mut!((*ptr).value) }\n         }\n     }\n "}, {"sha": "d0081097fe10a663e5d4ce2fa04b5a41a36b36da", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b94d84d38a3d306a54c5a23caa54d373a2202b9f/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94d84d38a3d306a54c5a23caa54d373a2202b9f/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=b94d84d38a3d306a54c5a23caa54d373a2202b9f", "patch": "@@ -384,7 +384,7 @@ impl<T> Arc<T> {\n         // reference into a strong reference.\n         unsafe {\n             let inner = init_ptr.as_ptr();\n-            ptr::write(&raw mut (*inner).data, data);\n+            ptr::write(ptr::addr_of_mut!((*inner).data), data);\n \n             // The above write to the data field must be visible to any threads which\n             // observe a non-zero strong count. Therefore we need at least \"Release\" ordering\n@@ -800,7 +800,7 @@ impl<T: ?Sized> Arc<T> {\n         // SAFETY: This cannot go through Deref::deref or RcBoxPtr::inner because\n         // this is required to retain raw/mut provenance such that e.g. `get_mut` can\n         // write through the pointer after the Rc is recovered through `from_raw`.\n-        unsafe { &raw const (*ptr).data }\n+        unsafe { ptr::addr_of_mut!((*ptr).data) }\n     }\n \n     /// Constructs an `Arc<T>` from a raw pointer.\n@@ -1677,7 +1677,7 @@ impl<T: ?Sized> Weak<T> {\n             // SAFETY: if is_dangling returns false, then the pointer is dereferencable.\n             // The payload may be dropped at this point, and we have to maintain provenance,\n             // so use raw pointer manipulation.\n-            unsafe { &raw mut (*ptr).data }\n+            unsafe { ptr::addr_of_mut!((*ptr).data) }\n         }\n     }\n "}, {"sha": "a69b840e4bf147a0c04f80eb0ae6a61f0d0b665c", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b94d84d38a3d306a54c5a23caa54d373a2202b9f/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94d84d38a3d306a54c5a23caa54d373a2202b9f/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=b94d84d38a3d306a54c5a23caa54d373a2202b9f", "patch": "@@ -126,7 +126,6 @@\n #![feature(auto_traits)]\n #![feature(or_patterns)]\n #![feature(prelude_import)]\n-#![feature(raw_ref_macros)]\n #![feature(repr_simd, platform_intrinsics)]\n #![feature(rustc_attrs)]\n #![feature(simd_ffi)]"}, {"sha": "c0108c0f82e81e2a195592698d6f355e617d50e7", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b94d84d38a3d306a54c5a23caa54d373a2202b9f/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94d84d38a3d306a54c5a23caa54d373a2202b9f/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=b94d84d38a3d306a54c5a23caa54d373a2202b9f", "patch": "@@ -1501,7 +1501,6 @@ fnptr_impls_args! { A, B, C, D, E, F, G, H, I, J, K, L }\n /// # Example\n ///\n /// ```\n-/// #![feature(raw_ref_macros)]\n /// use std::ptr;\n ///\n /// #[repr(packed)]\n@@ -1512,14 +1511,14 @@ fnptr_impls_args! { A, B, C, D, E, F, G, H, I, J, K, L }\n ///\n /// let packed = Packed { f1: 1, f2: 2 };\n /// // `&packed.f2` would create an unaligned reference, and thus be Undefined Behavior!\n-/// let raw_f2 = ptr::raw_const!(packed.f2);\n+/// let raw_f2 = ptr::addr_of!(packed.f2);\n /// assert_eq!(unsafe { raw_f2.read_unaligned() }, 2);\n /// ```\n-#[unstable(feature = \"raw_ref_macros\", issue = \"73394\")]\n+#[stable(feature = \"raw_ref_macros\", since = \"1.51.0\")]\n #[rustc_macro_transparency = \"semitransparent\"]\n #[allow_internal_unstable(raw_ref_op)]\n-pub macro raw_const($e:expr) {\n-    &raw const $e\n+pub macro addr_of($place:expr) {\n+    &raw const $place\n }\n \n /// Create a `mut` raw pointer to a place, without creating an intermediate reference.\n@@ -1534,7 +1533,6 @@ pub macro raw_const($e:expr) {\n /// # Example\n ///\n /// ```\n-/// #![feature(raw_ref_macros)]\n /// use std::ptr;\n ///\n /// #[repr(packed)]\n@@ -1545,13 +1543,13 @@ pub macro raw_const($e:expr) {\n ///\n /// let mut packed = Packed { f1: 1, f2: 2 };\n /// // `&mut packed.f2` would create an unaligned reference, and thus be Undefined Behavior!\n-/// let raw_f2 = ptr::raw_mut!(packed.f2);\n+/// let raw_f2 = ptr::addr_of_mut!(packed.f2);\n /// unsafe { raw_f2.write_unaligned(42); }\n /// assert_eq!({packed.f2}, 42); // `{...}` forces copying the field instead of creating a reference.\n /// ```\n-#[unstable(feature = \"raw_ref_macros\", issue = \"73394\")]\n+#[stable(feature = \"raw_ref_macros\", since = \"1.51.0\")]\n #[rustc_macro_transparency = \"semitransparent\"]\n #[allow_internal_unstable(raw_ref_op)]\n-pub macro raw_mut($e:expr) {\n-    &raw mut $e\n+pub macro addr_of_mut($place:expr) {\n+    &raw mut $place\n }"}, {"sha": "315df83115d8cc370a7e3f4786915e38d29c8c65", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b94d84d38a3d306a54c5a23caa54d373a2202b9f/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94d84d38a3d306a54c5a23caa54d373a2202b9f/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=b94d84d38a3d306a54c5a23caa54d373a2202b9f", "patch": "@@ -543,8 +543,8 @@ impl<T> [T] {\n     #[inline]\n     pub fn swap(&mut self, a: usize, b: usize) {\n         // Can't take two mutable loans from one vector, so instead use raw pointers.\n-        let pa = ptr::raw_mut!(self[a]);\n-        let pb = ptr::raw_mut!(self[b]);\n+        let pa = ptr::addr_of_mut!(self[a]);\n+        let pb = ptr::addr_of_mut!(self[b]);\n         // SAFETY: `pa` and `pb` have been created from safe mutable references and refer\n         // to elements in the slice and therefore are guaranteed to be valid and aligned.\n         // Note that accessing the elements behind `a` and `b` is checked and will"}, {"sha": "c1b79ff716c725af30fe8e271670e08ff44e4b09", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b94d84d38a3d306a54c5a23caa54d373a2202b9f/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94d84d38a3d306a54c5a23caa54d373a2202b9f/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=b94d84d38a3d306a54c5a23caa54d373a2202b9f", "patch": "@@ -299,7 +299,6 @@\n #![feature(prelude_import)]\n #![feature(ptr_internals)]\n #![feature(raw)]\n-#![feature(raw_ref_macros)]\n #![feature(ready_macro)]\n #![feature(rustc_attrs)]\n #![feature(rustc_private)]"}, {"sha": "f4279e6b825e2d26ef15a75bef7d471b250f2558", "filename": "src/test/ui/consts/min_const_fn/allow_raw_ptr_dereference_const_fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b94d84d38a3d306a54c5a23caa54d373a2202b9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_raw_ptr_dereference_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94d84d38a3d306a54c5a23caa54d373a2202b9f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_raw_ptr_dereference_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_raw_ptr_dereference_const_fn.rs?ref=b94d84d38a3d306a54c5a23caa54d373a2202b9f", "patch": "@@ -1,11 +1,10 @@\n // check-pass\n #![feature(const_raw_ptr_deref)]\n-#![feature(raw_ref_macros)]\n \n use std::ptr;\n \n const fn test_fn(x: *const i32) {\n-    let x2 = unsafe { ptr::raw_const!(*x) };\n+    let x2 = unsafe { ptr::addr_of!(*x) };\n }\n \n fn main() {}"}, {"sha": "f16f6fd6de4bae8a247387fc5bc59bfc08d16ca7", "filename": "src/test/ui/consts/ptr_comparisons.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b94d84d38a3d306a54c5a23caa54d373a2202b9f/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94d84d38a3d306a54c5a23caa54d373a2202b9f/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs?ref=b94d84d38a3d306a54c5a23caa54d373a2202b9f", "patch": "@@ -9,8 +9,7 @@\n     core_intrinsics,\n     const_raw_ptr_comparison,\n     const_ptr_offset,\n-    const_raw_ptr_deref,\n-    raw_ref_macros\n+    const_raw_ptr_deref\n )]\n \n const FOO: &usize = &42;\n@@ -64,7 +63,7 @@ const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n \n const _: *const u8 =\n //~^ NOTE\n-    unsafe { std::ptr::raw_const!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n+    unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n //~^ ERROR any use of this value will cause an error\n //~| NOTE\n "}, {"sha": "96b63c0acb0a108e19592ceec05cfd3670f8ce30", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b94d84d38a3d306a54c5a23caa54d373a2202b9f/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b94d84d38a3d306a54c5a23caa54d373a2202b9f/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=b94d84d38a3d306a54c5a23caa54d373a2202b9f", "patch": "@@ -6,35 +6,35 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  |\n    |                  inbounds test failed: pointer must be in-bounds at offset $TWO_WORDS, but is outside bounds of alloc2 which has size $WORD\n    |                  inside `ptr::const_ptr::<impl *const usize>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |                  inside `_` at $DIR/ptr_comparisons.rs:62:34\n+   |                  inside `_` at $DIR/ptr_comparisons.rs:61:34\n    | \n-  ::: $DIR/ptr_comparisons.rs:62:1\n+  ::: $DIR/ptr_comparisons.rs:61:1\n    |\n LL | const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n    | -------------------------------------------------------------------\n    |\n    = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:67:35\n+  --> $DIR/ptr_comparisons.rs:66:33\n    |\n LL | / const _: *const u8 =\n LL | |\n-LL | |     unsafe { std::ptr::raw_const!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n-   | |___________________________________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^___-\n-   |                                     |\n-   |                                     memory access failed: pointer must be in-bounds at offset 1000, but is outside bounds of alloc2 which has size $WORD\n+LL | |     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n+   | |_________________________________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^___-\n+   |                                   |\n+   |                                   memory access failed: pointer must be in-bounds at offset 1000, but is outside bounds of alloc2 which has size $WORD\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:71:27\n+  --> $DIR/ptr_comparisons.rs:70:27\n    |\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                           |\n    |                           \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:76:27\n+  --> $DIR/ptr_comparisons.rs:75:27\n    |\n LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---"}]}