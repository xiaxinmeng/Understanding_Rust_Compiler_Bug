{"sha": "bf0b194fed03d88b1217e921799638cb80bb9df8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMGIxOTRmZWQwM2Q4OGIxMjE3ZTkyMTc5OTYzOGNiODBiYjlkZjg=", "commit": {"author": {"name": "Nathan Whitaker", "email": "nathan.whitaker01@gmail.com", "date": "2020-09-09T16:55:38Z"}, "committer": {"name": "Nathan Whitaker", "email": "nathan.whitaker01@gmail.com", "date": "2020-09-09T16:55:38Z"}, "message": "Tweak interner for chalk", "tree": {"sha": "e4b4bfcd0a99d209bf582d158811078758e7ed45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4b4bfcd0a99d209bf582d158811078758e7ed45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf0b194fed03d88b1217e921799638cb80bb9df8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf0b194fed03d88b1217e921799638cb80bb9df8", "html_url": "https://github.com/rust-lang/rust/commit/bf0b194fed03d88b1217e921799638cb80bb9df8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf0b194fed03d88b1217e921799638cb80bb9df8/comments", "author": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20663a2a8b8960097ee71d9ed66d9227368c93f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/20663a2a8b8960097ee71d9ed66d9227368c93f1", "html_url": "https://github.com/rust-lang/rust/commit/20663a2a8b8960097ee71d9ed66d9227368c93f1"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "eb35db3ffc14d06d262703741cdd939161eb8590", "filename": "crates/hir_ty/src/traits/chalk/interner.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bf0b194fed03d88b1217e921799638cb80bb9df8/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0b194fed03d88b1217e921799638cb80bb9df8/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs?ref=bf0b194fed03d88b1217e921799638cb80bb9df8", "patch": "@@ -26,15 +26,15 @@ pub type OpaqueTyId = chalk_ir::OpaqueTyId<Interner>;\n pub type OpaqueTyDatum = chalk_solve::rust_ir::OpaqueTyDatum<Interner>;\n \n impl chalk_ir::interner::Interner for Interner {\n-    type InternedType = Box<chalk_ir::TyData<Self>>; // FIXME use Arc?\n+    type InternedType = Arc<chalk_ir::TyData<Self>>;\n     type InternedLifetime = chalk_ir::LifetimeData<Self>;\n     type InternedConst = Arc<chalk_ir::ConstData<Self>>;\n     type InternedConcreteConst = ();\n     type InternedGenericArg = chalk_ir::GenericArgData<Self>;\n     type InternedGoal = Arc<GoalData<Self>>;\n     type InternedGoals = Vec<Goal<Self>>;\n     type InternedSubstitution = Vec<GenericArg<Self>>;\n-    type InternedProgramClause = chalk_ir::ProgramClauseData<Self>;\n+    type InternedProgramClause = Arc<chalk_ir::ProgramClauseData<Self>>;\n     type InternedProgramClauses = Arc<[chalk_ir::ProgramClause<Self>]>;\n     type InternedQuantifiedWhereClauses = Vec<chalk_ir::QuantifiedWhereClause<Self>>;\n     type InternedVariableKinds = Vec<chalk_ir::VariableKind<Self>>;\n@@ -197,11 +197,11 @@ impl chalk_ir::interner::Interner for Interner {\n         tls::with_current_program(|prog| Some(prog?.debug_quantified_where_clauses(clauses, fmt)))\n     }\n \n-    fn intern_ty(&self, ty: chalk_ir::TyData<Self>) -> Box<chalk_ir::TyData<Self>> {\n-        Box::new(ty)\n+    fn intern_ty(&self, ty: chalk_ir::TyData<Self>) -> Arc<chalk_ir::TyData<Self>> {\n+        Arc::new(ty)\n     }\n \n-    fn ty_data<'a>(&self, ty: &'a Box<chalk_ir::TyData<Self>>) -> &'a chalk_ir::TyData<Self> {\n+    fn ty_data<'a>(&self, ty: &'a Arc<chalk_ir::TyData<Self>>) -> &'a chalk_ir::TyData<Self> {\n         ty\n     }\n \n@@ -230,7 +230,7 @@ impl chalk_ir::interner::Interner for Interner {\n         constant\n     }\n \n-    fn const_eq(&self, _ty: &Box<chalk_ir::TyData<Self>>, _c1: &(), _c2: &()) -> bool {\n+    fn const_eq(&self, _ty: &Arc<chalk_ir::TyData<Self>>, _c1: &(), _c2: &()) -> bool {\n         true\n     }\n \n@@ -284,13 +284,13 @@ impl chalk_ir::interner::Interner for Interner {\n     fn intern_program_clause(\n         &self,\n         data: chalk_ir::ProgramClauseData<Self>,\n-    ) -> chalk_ir::ProgramClauseData<Self> {\n-        data\n+    ) -> Arc<chalk_ir::ProgramClauseData<Self>> {\n+        Arc::new(data)\n     }\n \n     fn program_clause_data<'a>(\n         &self,\n-        clause: &'a chalk_ir::ProgramClauseData<Self>,\n+        clause: &'a Arc<chalk_ir::ProgramClauseData<Self>>,\n     ) -> &'a chalk_ir::ProgramClauseData<Self> {\n         clause\n     }"}]}