{"sha": "e268c7fcc58593d71962a49a147c21edfa702f20", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNjhjN2ZjYzU4NTkzZDcxOTYyYTQ5YTE0N2MyMWVkZmE3MDJmMjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-21T03:26:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-21T03:26:02Z"}, "message": "auto merge of #9350 : pnkfelix/rust/fsk-issue-4691-catch-bad-fsu-during-compute-moves, r=nikomatsakis\n\nResolves third bullet of #4691: if the functional-struct-update (FSU) expression `{ a: b, ..s }` causes `s` to move and `s` has a destructor, then the expression is illegal.\r\n\r\nr? @nikomatsakis", "tree": {"sha": "6c2949882bc663b832039141e29d0f2bfa5cf79b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c2949882bc663b832039141e29d0f2bfa5cf79b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e268c7fcc58593d71962a49a147c21edfa702f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e268c7fcc58593d71962a49a147c21edfa702f20", "html_url": "https://github.com/rust-lang/rust/commit/e268c7fcc58593d71962a49a147c21edfa702f20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e268c7fcc58593d71962a49a147c21edfa702f20/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58424ebcb9b3feed97eb4bd2aa043df30ef4e7bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/58424ebcb9b3feed97eb4bd2aa043df30ef4e7bc", "html_url": "https://github.com/rust-lang/rust/commit/58424ebcb9b3feed97eb4bd2aa043df30ef4e7bc"}, {"sha": "4e543f7a935b58bdb343980543db173e26b5e31a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e543f7a935b58bdb343980543db173e26b5e31a", "html_url": "https://github.com/rust-lang/rust/commit/4e543f7a935b58bdb343980543db173e26b5e31a"}], "stats": {"total": 149, "additions": 147, "deletions": 2}, "files": [{"sha": "a9527831d3a165bbfb7fc9b1bcdc0d5fe511acc1", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e268c7fcc58593d71962a49a147c21edfa702f20/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e268c7fcc58593d71962a49a147c21edfa702f20/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=e268c7fcc58593d71962a49a147c21edfa702f20", "patch": "@@ -134,6 +134,7 @@ use middle::typeck::{method_map};\n use util::ppaux;\n use util::ppaux::Repr;\n use util::common::indenter;\n+use util::ppaux::UserString;\n \n use std::at_vec;\n use std::hashmap::{HashSet, HashMap};\n@@ -433,7 +434,21 @@ impl VisitContext {\n                             ty::type_moves_by_default(self.tcx, tf.mt.ty)\n                     });\n \n+                    fn has_dtor(tcx: ty::ctxt, ty: ty::t) -> bool {\n+                        use middle::ty::{get,ty_struct,ty_enum};\n+                        match get(ty).sty {\n+                            ty_struct(did, _) | ty_enum(did, _) => ty::has_dtor(tcx, did),\n+                            _ => false,\n+                        }\n+                    }\n+\n                     if consume_with {\n+                        if has_dtor(self.tcx, with_ty) {\n+                            self.tcx.sess.span_err(with_expr.span,\n+                                                   fmt!(\"cannot move out of type `%s`, \\\n+                                                         which defines the `Drop` trait\",\n+                                                        with_ty.user_string(self.tcx)));\n+                        }\n                         self.consume_expr(*with_expr, visitor);\n                     } else {\n                         self.use_expr(*with_expr, Read, visitor);"}, {"sha": "5a0dae676f1350a1590e23a4bbe92e2255530bdc", "filename": "src/test/compile-fail/borrowck-struct-update-with-dtor.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e268c7fcc58593d71962a49a147c21edfa702f20/src%2Ftest%2Fcompile-fail%2Fborrowck-struct-update-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e268c7fcc58593d71962a49a147c21edfa702f20/src%2Ftest%2Fcompile-fail%2Fborrowck-struct-update-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-struct-update-with-dtor.rs?ref=e268c7fcc58593d71962a49a147c21edfa702f20", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue 4691: Ensure that functional-struct-update can only copy, not\n+// move, when the struct implements Drop.\n+\n+use NC = std::util::NonCopyable;\n+struct S { a: int, nc: NC }\n+impl Drop for S { fn drop(&mut self) { } }\n+\n+struct T { a: int, mv: ~int }\n+impl Drop for T { fn drop(&mut self) { } }\n+\n+fn f(s0:S) {\n+    let _s2 = S{a: 2, ..s0}; //~error: cannot move out of type `S`, which defines the `Drop` trait\n+}\n+\n+fn g(s0:T) {\n+    let _s2 = T{a: 2, ..s0}; //~error: cannot move out of type `T`, which defines the `Drop` trait\n+}\n+\n+fn main() { }"}, {"sha": "7fccdba172353f5da5e8b9e0421e5713370e60fe", "filename": "src/test/compile-fail/functional-struct-update-noncopyable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e268c7fcc58593d71962a49a147c21edfa702f20/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e268c7fcc58593d71962a49a147c21edfa702f20/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs?ref=e268c7fcc58593d71962a49a147c21edfa702f20", "patch": "@@ -21,6 +21,6 @@ impl Drop for A {\n }\n fn main() {\n     let a = A { y: Arc::new(1), x: Arc::new(2) };\n-    let _b = A { y: Arc::new(3), ..a };\n-    let _c = a; //~ ERROR use of moved value\n+    let _b = A { y: Arc::new(3), ..a }; //~ ERROR cannot move out of type `A`\n+    let _c = a;\n }"}, {"sha": "f257b9ac0dee7190f75d7ff3fc7d7332aa47a8e1", "filename": "src/test/run-pass/struct-update-moves-and-copies.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/e268c7fcc58593d71962a49a147c21edfa702f20/src%2Ftest%2Frun-pass%2Fstruct-update-moves-and-copies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e268c7fcc58593d71962a49a147c21edfa702f20/src%2Ftest%2Frun-pass%2Fstruct-update-moves-and-copies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-update-moves-and-copies.rs?ref=e268c7fcc58593d71962a49a147c21edfa702f20", "patch": "@@ -0,0 +1,101 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue 4691: Ensure that functional-struct-updates operates\n+// correctly and moves rather than copy when appropriate.\n+\n+use NC = std::util::NonCopyable;\n+\n+struct ncint { nc: NC, v: int }\n+fn ncint(v: int) -> ncint { ncint { nc: NC, v: v } }\n+\n+struct NoFoo { copied: int, noncopy: ncint, }\n+impl NoFoo {\n+    fn new(x:int,y:int) -> NoFoo { NoFoo { copied: x, noncopy: ncint(y) } }\n+}\n+\n+struct MoveFoo { copied: int, moved: ~int, }\n+impl MoveFoo {\n+    fn new(x:int,y:int) -> MoveFoo { MoveFoo { copied: x, moved: ~y } }\n+}\n+\n+struct DropNoFoo { inner: NoFoo }\n+impl DropNoFoo {\n+    fn new(x:int,y:int) -> DropNoFoo { DropNoFoo { inner: NoFoo::new(x,y) } }\n+}\n+impl Drop for DropNoFoo { fn drop(&mut self) { } }\n+\n+struct DropMoveFoo { inner: MoveFoo }\n+impl DropMoveFoo {\n+    fn new(x:int,y:int) -> DropMoveFoo { DropMoveFoo { inner: MoveFoo::new(x,y) } }\n+}\n+impl Drop for DropMoveFoo { fn drop(&mut self) { } }\n+\n+\n+fn test0() {\n+    // just copy implicitly copyable fields from `f`, no moves\n+    // (and thus it is okay that these are Drop; compare against\n+    // compile-fail test: borrowck-struct-update-with-dtor.rs).\n+\n+    // Case 1: NonCopyable\n+    let f = DropNoFoo::new(1, 2);\n+    let b = DropNoFoo { inner: NoFoo { noncopy: ncint(3), ..f.inner }};\n+    let c = DropNoFoo { inner: NoFoo { noncopy: ncint(4), ..f.inner }};\n+    assert_eq!(f.inner.copied,    1);\n+    assert_eq!(f.inner.noncopy.v, 2);\n+\n+    assert_eq!(b.inner.copied,    1);\n+    assert_eq!(b.inner.noncopy.v, 3);\n+\n+    assert_eq!(c.inner.copied,    1);\n+    assert_eq!(c.inner.noncopy.v, 4);\n+\n+    // Case 2: Owned\n+    let f = DropMoveFoo::new(5, 6);\n+    let b = DropMoveFoo { inner: MoveFoo { moved: ~7, ..f.inner }};\n+    let c = DropMoveFoo { inner: MoveFoo { moved: ~8, ..f.inner }};\n+    assert_eq!(f.inner.copied,    5);\n+    assert_eq!(*f.inner.moved,    6);\n+\n+    assert_eq!(b.inner.copied,    5);\n+    assert_eq!(*b.inner.moved,    7);\n+\n+    assert_eq!(c.inner.copied,    5);\n+    assert_eq!(*c.inner.moved,    8);\n+}\n+\n+fn test1() {\n+    // copying move-by-default fields from `f`, so it moves:\n+    let f = MoveFoo::new(11, 12);\n+\n+    let b = MoveFoo {moved: ~13, ..f};\n+    let c = MoveFoo {copied: 14, ..f};\n+    assert_eq!(b.copied,    11);\n+    assert_eq!(*b.moved,    13);\n+    assert_eq!(c.copied,    14);\n+    assert_eq!(*c.moved,    12);\n+}\n+\n+fn test2() {\n+    // move non-copyable field\n+    let f = NoFoo::new(21, 22);\n+    let b = NoFoo {noncopy: ncint(23), ..f};\n+    let c = NoFoo {copied: 24, ..f};\n+    assert_eq!(b.copied,    21);\n+    assert_eq!(b.noncopy.v, 23);\n+    assert_eq!(c.copied,    24);\n+    assert_eq!(c.noncopy.v, 22);\n+}\n+\n+fn main() {\n+    test0();\n+    test1();\n+    test2();\n+}"}]}