{"sha": "a0e0849a3b1710139d84be846a444c12297cfd2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZTA4NDlhM2IxNzEwMTM5ZDg0YmU4NDZhNDQ0YzEyMjk3Y2ZkMmI=", "commit": {"author": {"name": "Wim Looman", "email": "wim@nemo157.com", "date": "2019-04-21T11:27:36Z"}, "committer": {"name": "Wim Looman", "email": "wim@nemo157.com", "date": "2019-04-24T19:19:41Z"}, "message": "Add Pin::{into_inner,into_inner_unchecked}", "tree": {"sha": "693288ef0be0af829334882a63fdac8eaaa26fc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/693288ef0be0af829334882a63fdac8eaaa26fc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0e0849a3b1710139d84be846a444c12297cfd2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e0849a3b1710139d84be846a444c12297cfd2b", "html_url": "https://github.com/rust-lang/rust/commit/a0e0849a3b1710139d84be846a444c12297cfd2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0e0849a3b1710139d84be846a444c12297cfd2b/comments", "author": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "url": "https://api.github.com/repos/rust-lang/rust/commits/316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "html_url": "https://github.com/rust-lang/rust/commit/316a391dcb7d66dc25f1f9a4ec9d368ef7615005"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "e74ed9b7889cb31b311dfee52b40283d430f555e", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a0e0849a3b1710139d84be846a444c12297cfd2b/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e0849a3b1710139d84be846a444c12297cfd2b/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=a0e0849a3b1710139d84be846a444c12297cfd2b", "patch": "@@ -349,6 +349,18 @@ where\n         // around pinning.\n         unsafe { Pin::new_unchecked(pointer) }\n     }\n+\n+    /// Unwraps this `Pin<P>` returning the underlying pointer.\n+    ///\n+    /// This requires that the data inside this `Pin` is [`Unpin`] so that we\n+    /// can ignore the pinning invariants when unwrapping it.\n+    ///\n+    /// [`Unpin`]: ../../std/marker/trait.Unpin.html\n+    #[unstable(feature = \"pin_into_inner\", issue = \"60245\")]\n+    #[inline(always)]\n+    pub fn into_inner(pin: Pin<P>) -> P {\n+        pin.pointer\n+    }\n }\n \n impl<P: Deref> Pin<P> {\n@@ -434,6 +446,28 @@ impl<P: Deref> Pin<P> {\n     pub fn as_ref(self: &Pin<P>) -> Pin<&P::Target> {\n         unsafe { Pin::new_unchecked(&*self.pointer) }\n     }\n+\n+    /// Unwraps this `Pin<P>` returning the underlying pointer.\n+    ///\n+    /// # Safety\n+    ///\n+    /// This function is unsafe. You must guarantee that you will continue to\n+    /// treat the pointer `P` as pinned after you call this function, so that\n+    /// the invariants on the `Pin` type can be upheld. If the code using the\n+    /// resulting `P` does not continue to maintain the pinning invariants that\n+    /// is a violation of the API contract and may lead to undefined behavior in\n+    /// later (safe) operations.\n+    ///\n+    /// If the underlying data is [`Unpin`], [`Pin::into_inner`] should be used\n+    /// instead.\n+    ///\n+    /// [`Unpin`]: ../../std/marker/trait.Unpin.html\n+    /// [`Pin::into_inner`]: #method.into_inner\n+    #[unstable(feature = \"pin_into_inner\", issue = \"60245\")]\n+    #[inline(always)]\n+    pub unsafe fn into_inner_unchecked(pin: Pin<P>) -> P {\n+        pin.pointer\n+    }\n }\n \n impl<P: DerefMut> Pin<P> {"}]}