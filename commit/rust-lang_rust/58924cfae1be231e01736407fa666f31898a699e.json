{"sha": "58924cfae1be231e01736407fa666f31898a699e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4OTI0Y2ZhZTFiZTIzMWUwMTczNjQwN2ZhNjY2ZjMxODk4YTY5OWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-05T02:29:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-05T02:29:09Z"}, "message": "Merge #8334\n\n8334: Intern and shrink more data to reduce memory usage r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "b5786d42ad1fa6dd64863079a00150ec7e426fa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5786d42ad1fa6dd64863079a00150ec7e426fa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58924cfae1be231e01736407fa666f31898a699e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJganX1CRBK7hj4Ov3rIwAAdHIIABATf/j+xBz9USUWhPuRWmCG\nKHZtb3/kA9+ltM4B4x+QfyATfi3ayJiXlEg7PUofwFeLN7+5kz/TUkeY1h3bxA3+\nsupNkn7Z7xuRYKfy1R1I+VQqDx8xVBHQVLtfkczf3Vniw+KZFkfpqPfDD07zvG4i\neJDIFyBkGVn/0HgQhGlnzLWQMHo5cg8PXhv8THxh2vU6+8lYlohPi2qZ+cAR2dZQ\n8JHduhIe5lUFnjjqD63zlB1Fc9q5juU+n2aSrm7B6QnE8f4rQ650dDN4of6VfzIG\naiTo2iZ0h/16QAlo0wldcQJyGkb4seczTJTrfNAvtumgtswQtVObvS2o2uiUIKw=\n=/CeG\n-----END PGP SIGNATURE-----\n", "payload": "tree b5786d42ad1fa6dd64863079a00150ec7e426fa6\nparent 19e09a4a54c75312aeaac04577f2d0e067463ab6\nparent 6f1ee9a7f4987d5286e6d875f544ce11f02465f3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617589749 +0000\ncommitter GitHub <noreply@github.com> 1617589749 +0000\n\nMerge #8334\n\n8334: Intern and shrink more data to reduce memory usage r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58924cfae1be231e01736407fa666f31898a699e", "html_url": "https://github.com/rust-lang/rust/commit/58924cfae1be231e01736407fa666f31898a699e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58924cfae1be231e01736407fa666f31898a699e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19e09a4a54c75312aeaac04577f2d0e067463ab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/19e09a4a54c75312aeaac04577f2d0e067463ab6", "html_url": "https://github.com/rust-lang/rust/commit/19e09a4a54c75312aeaac04577f2d0e067463ab6"}, {"sha": "6f1ee9a7f4987d5286e6d875f544ce11f02465f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f1ee9a7f4987d5286e6d875f544ce11f02465f3", "html_url": "https://github.com/rust-lang/rust/commit/6f1ee9a7f4987d5286e6d875f544ce11f02465f3"}], "stats": {"total": 174, "additions": 75, "deletions": 99}, "files": [{"sha": "9b7a213a12e560c8b0cf22124b54659f0e3979c8", "filename": "crates/hir_def/src/db.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdb.rs?ref=58924cfae1be231e01736407fa666f31898a699e", "patch": "@@ -13,6 +13,7 @@ use crate::{\n     data::{ConstData, FunctionData, ImplData, StaticData, TraitData, TypeAliasData},\n     generics::GenericParams,\n     import_map::ImportMap,\n+    intern::Interned,\n     item_tree::ItemTree,\n     lang_item::{LangItemTarget, LangItems},\n     nameres::DefMap,\n@@ -113,7 +114,7 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n     fn expr_scopes(&self, def: DefWithBodyId) -> Arc<ExprScopes>;\n \n     #[salsa::invoke(GenericParams::generic_params_query)]\n-    fn generic_params(&self, def: GenericDefId) -> Arc<GenericParams>;\n+    fn generic_params(&self, def: GenericDefId) -> Interned<GenericParams>;\n \n     #[salsa::invoke(Attrs::variants_attrs_query)]\n     fn variants_attrs(&self, def: EnumId) -> Arc<ArenaMap<LocalEnumVariantId, Attrs>>;"}, {"sha": "de5acced8cfdd7413eb5d2cadf6db52377c9b10b", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 37, "deletions": 25, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=58924cfae1be231e01736407fa666f31898a699e", "patch": "@@ -2,7 +2,6 @@\n //! structs, impls, traits, etc. This module provides a common HIR for these\n //! generic parameters. See also the `Generics` type and the `generics_of` query\n //! in rustc.\n-use std::sync::Arc;\n \n use base_db::FileId;\n use either::Either;\n@@ -18,6 +17,7 @@ use crate::{\n     child_by_source::ChildBySource,\n     db::DefDatabase,\n     dyn_map::DynMap,\n+    intern::Interned,\n     keys,\n     src::{HasChildSource, HasSource},\n     type_ref::{LifetimeRef, TypeBound, TypeRef},\n@@ -26,35 +26,35 @@ use crate::{\n };\n \n /// Data about a generic type parameter (to a function, struct, impl, ...).\n-#[derive(Clone, PartialEq, Eq, Debug)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct TypeParamData {\n     pub name: Option<Name>,\n-    pub default: Option<TypeRef>,\n+    pub default: Option<Interned<TypeRef>>,\n     pub provenance: TypeParamProvenance,\n }\n \n /// Data about a generic lifetime parameter (to a function, struct, impl, ...).\n-#[derive(Clone, PartialEq, Eq, Debug)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct LifetimeParamData {\n     pub name: Name,\n }\n \n /// Data about a generic const parameter (to a function, struct, impl, ...).\n-#[derive(Clone, PartialEq, Eq, Debug)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct ConstParamData {\n     pub name: Name,\n-    pub ty: TypeRef,\n+    pub ty: Interned<TypeRef>,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug, Hash)]\n pub enum TypeParamProvenance {\n     TypeParamList,\n     TraitSelf,\n     ArgumentImplTrait,\n }\n \n /// Data about the generic parameters of a function, struct, impl, etc.\n-#[derive(Clone, PartialEq, Eq, Debug, Default)]\n+#[derive(Clone, PartialEq, Eq, Debug, Default, Hash)]\n pub struct GenericParams {\n     pub types: Arena<TypeParamData>,\n     pub lifetimes: Arena<LifetimeParamData>,\n@@ -66,16 +66,16 @@ pub struct GenericParams {\n /// where clauses like `where T: Foo + Bar` are turned into multiple of these.\n /// It might still result in multiple actual predicates though, because of\n /// associated type bindings like `Iterator<Item = u32>`.\n-#[derive(Clone, PartialEq, Eq, Debug)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum WherePredicate {\n     TypeBound { target: WherePredicateTypeTarget, bound: TypeBound },\n     Lifetime { target: LifetimeRef, bound: LifetimeRef },\n     ForLifetime { lifetimes: Box<[Name]>, target: WherePredicateTypeTarget, bound: TypeBound },\n }\n \n-#[derive(Clone, PartialEq, Eq, Debug)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum WherePredicateTypeTarget {\n-    TypeRef(TypeRef),\n+    TypeRef(Interned<TypeRef>),\n     /// For desugared where predicates that can directly refer to a type param.\n     TypeParam(LocalTypeParamId),\n }\n@@ -91,55 +91,57 @@ impl GenericParams {\n     pub(crate) fn generic_params_query(\n         db: &dyn DefDatabase,\n         def: GenericDefId,\n-    ) -> Arc<GenericParams> {\n+    ) -> Interned<GenericParams> {\n         let _p = profile::span(\"generic_params_query\");\n \n         let generics = match def {\n             GenericDefId::FunctionId(id) => {\n                 let id = id.lookup(db).id;\n                 let tree = id.item_tree(db);\n                 let item = &tree[id.value];\n-                tree[item.generic_params].clone()\n+                item.generic_params.clone()\n             }\n             GenericDefId::AdtId(AdtId::StructId(id)) => {\n                 let id = id.lookup(db).id;\n                 let tree = id.item_tree(db);\n                 let item = &tree[id.value];\n-                tree[item.generic_params].clone()\n+                item.generic_params.clone()\n             }\n             GenericDefId::AdtId(AdtId::EnumId(id)) => {\n                 let id = id.lookup(db).id;\n                 let tree = id.item_tree(db);\n                 let item = &tree[id.value];\n-                tree[item.generic_params].clone()\n+                item.generic_params.clone()\n             }\n             GenericDefId::AdtId(AdtId::UnionId(id)) => {\n                 let id = id.lookup(db).id;\n                 let tree = id.item_tree(db);\n                 let item = &tree[id.value];\n-                tree[item.generic_params].clone()\n+                item.generic_params.clone()\n             }\n             GenericDefId::TraitId(id) => {\n                 let id = id.lookup(db).id;\n                 let tree = id.item_tree(db);\n                 let item = &tree[id.value];\n-                tree[item.generic_params].clone()\n+                item.generic_params.clone()\n             }\n             GenericDefId::TypeAliasId(id) => {\n                 let id = id.lookup(db).id;\n                 let tree = id.item_tree(db);\n                 let item = &tree[id.value];\n-                tree[item.generic_params].clone()\n+                item.generic_params.clone()\n             }\n             GenericDefId::ImplId(id) => {\n                 let id = id.lookup(db).id;\n                 let tree = id.item_tree(db);\n                 let item = &tree[id.value];\n-                tree[item.generic_params].clone()\n+                item.generic_params.clone()\n+            }\n+            GenericDefId::EnumVariantId(_) | GenericDefId::ConstId(_) => {\n+                Interned::new(GenericParams::default())\n             }\n-            GenericDefId::EnumVariantId(_) | GenericDefId::ConstId(_) => GenericParams::default(),\n         };\n-        Arc::new(generics)\n+        generics\n     }\n \n     fn new(db: &dyn DefDatabase, def: GenericDefId) -> (GenericParams, InFile<SourceMap>) {\n@@ -217,6 +219,7 @@ impl GenericParams {\n             GenericDefId::EnumVariantId(_) | GenericDefId::ConstId(_) => FileId(!0).into(),\n         };\n \n+        generics.shrink_to_fit();\n         (generics, InFile::new(file_id, sm))\n     }\n \n@@ -256,7 +259,8 @@ impl GenericParams {\n         for type_param in params.type_params() {\n             let name = type_param.name().map_or_else(Name::missing, |it| it.as_name());\n             // FIXME: Use `Path::from_src`\n-            let default = type_param.default_type().map(|it| TypeRef::from_ast(lower_ctx, it));\n+            let default =\n+                type_param.default_type().map(|it| Interned::new(TypeRef::from_ast(lower_ctx, it)));\n             let param = TypeParamData {\n                 name: Some(name.clone()),\n                 default,\n@@ -280,7 +284,7 @@ impl GenericParams {\n         for const_param in params.const_params() {\n             let name = const_param.name().map_or_else(Name::missing, |it| it.as_name());\n             let ty = const_param.ty().map_or(TypeRef::Error, |it| TypeRef::from_ast(lower_ctx, it));\n-            let param = ConstParamData { name, ty };\n+            let param = ConstParamData { name, ty: Interned::new(ty) };\n             let param_id = self.consts.alloc(param);\n             sm.const_params.insert(param_id, const_param.clone());\n         }\n@@ -334,11 +338,11 @@ impl GenericParams {\n             (Either::Left(type_ref), bound) => match hrtb_lifetimes {\n                 Some(hrtb_lifetimes) => WherePredicate::ForLifetime {\n                     lifetimes: hrtb_lifetimes.clone(),\n-                    target: WherePredicateTypeTarget::TypeRef(type_ref),\n+                    target: WherePredicateTypeTarget::TypeRef(Interned::new(type_ref)),\n                     bound,\n                 },\n                 None => WherePredicate::TypeBound {\n-                    target: WherePredicateTypeTarget::TypeRef(type_ref),\n+                    target: WherePredicateTypeTarget::TypeRef(Interned::new(type_ref)),\n                     bound,\n                 },\n             },\n@@ -369,6 +373,14 @@ impl GenericParams {\n         });\n     }\n \n+    pub(crate) fn shrink_to_fit(&mut self) {\n+        let Self { consts, lifetimes, types, where_predicates } = self;\n+        consts.shrink_to_fit();\n+        lifetimes.shrink_to_fit();\n+        types.shrink_to_fit();\n+        where_predicates.shrink_to_fit();\n+    }\n+\n     pub fn find_type_by_name(&self, name: &Name) -> Option<LocalTypeParamId> {\n         self.types\n             .iter()"}, {"sha": "2467e9299f0ea5d61e1bee489720b48401d6446c", "filename": "crates/hir_def/src/intern.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_def%2Fsrc%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_def%2Fsrc%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fintern.rs?ref=58924cfae1be231e01736407fa666f31898a699e", "patch": "@@ -14,6 +14,8 @@ use dashmap::{lock::RwLockWriteGuard, DashMap, SharedValue};\n use once_cell::sync::OnceCell;\n use rustc_hash::FxHasher;\n \n+use crate::generics::GenericParams;\n+\n type InternMap<T> = DashMap<Arc<T>, (), BuildHasherDefault<FxHasher>>;\n type Guard<T> =\n     RwLockWriteGuard<'static, HashMap<Arc<T>, SharedValue<()>, BuildHasherDefault<FxHasher>>>;\n@@ -194,4 +196,10 @@ macro_rules! impl_internable {\n     )+ };\n }\n \n-impl_internable!(crate::type_ref::TypeRef, crate::type_ref::TraitRef, crate::path::ModPath, str);\n+impl_internable!(\n+    crate::type_ref::TypeRef,\n+    crate::type_ref::TraitRef,\n+    crate::path::ModPath,\n+    GenericParams,\n+    str\n+);"}, {"sha": "2406624862d58f1fffe43b9c9534cae7f5ba031b", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 7, "deletions": 54, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=58924cfae1be231e01736407fa666f31898a699e", "patch": "@@ -58,13 +58,6 @@ impl fmt::Debug for RawVisibilityId {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, Eq, PartialEq)]\n-pub struct GenericParamsId(u32);\n-\n-impl GenericParamsId {\n-    pub const EMPTY: Self = GenericParamsId(u32::max_value());\n-}\n-\n /// The item tree of a source file.\n #[derive(Debug, Default, Eq, PartialEq)]\n pub struct ItemTree {\n@@ -146,7 +139,6 @@ impl ItemTree {\n                 macro_rules,\n                 macro_defs,\n                 vis,\n-                generics,\n                 inner_items,\n             } = &mut **data;\n \n@@ -170,7 +162,6 @@ impl ItemTree {\n             macro_defs.shrink_to_fit();\n \n             vis.arena.shrink_to_fit();\n-            generics.arena.shrink_to_fit();\n \n             inner_items.shrink_to_fit();\n         }\n@@ -241,32 +232,6 @@ static VIS_PUB: RawVisibility = RawVisibility::Public;\n static VIS_PRIV: RawVisibility = RawVisibility::Module(ModPath::from_kind(PathKind::Super(0)));\n static VIS_PUB_CRATE: RawVisibility = RawVisibility::Module(ModPath::from_kind(PathKind::Crate));\n \n-#[derive(Default, Debug, Eq, PartialEq)]\n-struct GenericParamsStorage {\n-    arena: Arena<GenericParams>,\n-}\n-\n-impl GenericParamsStorage {\n-    fn alloc(&mut self, params: GenericParams) -> GenericParamsId {\n-        if params.types.is_empty()\n-            && params.lifetimes.is_empty()\n-            && params.consts.is_empty()\n-            && params.where_predicates.is_empty()\n-        {\n-            return GenericParamsId::EMPTY;\n-        }\n-\n-        GenericParamsId(self.arena.alloc(params).into_raw().into())\n-    }\n-}\n-\n-static EMPTY_GENERICS: GenericParams = GenericParams {\n-    types: Arena::new(),\n-    lifetimes: Arena::new(),\n-    consts: Arena::new(),\n-    where_predicates: Vec::new(),\n-};\n-\n #[derive(Default, Debug, Eq, PartialEq)]\n struct ItemTreeData {\n     imports: Arena<Import>,\n@@ -289,7 +254,6 @@ struct ItemTreeData {\n     macro_defs: Arena<MacroDef>,\n \n     vis: ItemVisibilities,\n-    generics: GenericParamsStorage,\n \n     inner_items: FxHashMap<FileAstId<ast::BlockExpr>, SmallVec<[ModItem; 1]>>,\n }\n@@ -508,17 +472,6 @@ impl Index<RawVisibilityId> for ItemTree {\n     }\n }\n \n-impl Index<GenericParamsId> for ItemTree {\n-    type Output = GenericParams;\n-\n-    fn index(&self, index: GenericParamsId) -> &Self::Output {\n-        match index {\n-            GenericParamsId::EMPTY => &EMPTY_GENERICS,\n-            _ => &self.data().generics.arena[Idx::from_raw(index.0.into())],\n-        }\n-    }\n-}\n-\n impl<N: ItemTreeNode> Index<FileItemTreeId<N>> for ItemTree {\n     type Output = N;\n     fn index(&self, id: FileItemTreeId<N>) -> &N {\n@@ -555,7 +508,7 @@ pub struct ExternCrate {\n pub struct Function {\n     pub name: Name,\n     pub visibility: RawVisibilityId,\n-    pub generic_params: GenericParamsId,\n+    pub generic_params: Interned<GenericParams>,\n     pub abi: Option<Interned<str>>,\n     pub params: IdRange<Param>,\n     pub ret_type: Interned<TypeRef>,\n@@ -590,7 +543,7 @@ impl FnFlags {\n pub struct Struct {\n     pub name: Name,\n     pub visibility: RawVisibilityId,\n-    pub generic_params: GenericParamsId,\n+    pub generic_params: Interned<GenericParams>,\n     pub fields: Fields,\n     pub ast_id: FileAstId<ast::Struct>,\n     pub kind: StructDefKind,\n@@ -610,7 +563,7 @@ pub enum StructDefKind {\n pub struct Union {\n     pub name: Name,\n     pub visibility: RawVisibilityId,\n-    pub generic_params: GenericParamsId,\n+    pub generic_params: Interned<GenericParams>,\n     pub fields: Fields,\n     pub ast_id: FileAstId<ast::Union>,\n }\n@@ -619,7 +572,7 @@ pub struct Union {\n pub struct Enum {\n     pub name: Name,\n     pub visibility: RawVisibilityId,\n-    pub generic_params: GenericParamsId,\n+    pub generic_params: Interned<GenericParams>,\n     pub variants: IdRange<Variant>,\n     pub ast_id: FileAstId<ast::Enum>,\n }\n@@ -648,7 +601,7 @@ pub struct Static {\n pub struct Trait {\n     pub name: Name,\n     pub visibility: RawVisibilityId,\n-    pub generic_params: GenericParamsId,\n+    pub generic_params: Interned<GenericParams>,\n     pub is_auto: bool,\n     pub is_unsafe: bool,\n     pub bounds: Box<[TypeBound]>,\n@@ -658,7 +611,7 @@ pub struct Trait {\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Impl {\n-    pub generic_params: GenericParamsId,\n+    pub generic_params: Interned<GenericParams>,\n     pub target_trait: Option<Interned<TraitRef>>,\n     pub self_ty: Interned<TypeRef>,\n     pub is_negative: bool,\n@@ -672,7 +625,7 @@ pub struct TypeAlias {\n     pub visibility: RawVisibilityId,\n     /// Bounds on the type alias itself. Only valid in trait declarations, eg. `type Assoc: Copy;`.\n     pub bounds: Box<[TypeBound]>,\n-    pub generic_params: GenericParamsId,\n+    pub generic_params: Interned<GenericParams>,\n     pub type_ref: Option<Interned<TypeRef>>,\n     pub is_extern: bool,\n     pub ast_id: FileAstId<ast::TypeAlias>,"}, {"sha": "c5629af2401cf4d5dc19eb4ad33d2e6e1d93831d", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=58924cfae1be231e01736407fa666f31898a699e", "patch": "@@ -434,7 +434,7 @@ impl Ctx {\n         let mut res = Function {\n             name,\n             visibility,\n-            generic_params: GenericParamsId::EMPTY,\n+            generic_params: Interned::new(GenericParams::default()),\n             abi,\n             params,\n             ret_type: Interned::new(ret_type),\n@@ -682,7 +682,7 @@ impl Ctx {\n         &mut self,\n         owner: GenericsOwner<'_>,\n         node: &impl ast::GenericParamsOwner,\n-    ) -> GenericParamsId {\n+    ) -> Interned<GenericParams> {\n         // Generics are part of item headers and may contain inner items we need to collect.\n         if let Some(params) = node.generic_param_list() {\n             self.collect_inner_items(params.syntax());\n@@ -698,7 +698,7 @@ impl Ctx {\n         &mut self,\n         owner: GenericsOwner<'_>,\n         node: &impl ast::GenericParamsOwner,\n-    ) -> GenericParamsId {\n+    ) -> Interned<GenericParams> {\n         let mut sm = &mut Default::default();\n         let mut generics = GenericParams::default();\n         match owner {\n@@ -739,7 +739,8 @@ impl Ctx {\n             }\n         }\n \n-        self.data().generics.alloc(generics)\n+        generics.shrink_to_fit();\n+        Interned::new(generics)\n     }\n \n     fn lower_type_bounds(&mut self, node: &impl ast::TypeBoundsOwner) -> Vec<TypeBound> {"}, {"sha": "be9a5e1a0e7e61d62f5f94ad648d4a1ebf586d32", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=58924cfae1be231e01736407fa666f31898a699e", "patch": "@@ -27,6 +27,7 @@ pub mod dyn_map;\n pub mod keys;\n \n pub mod item_tree;\n+pub mod intern;\n \n pub mod adt;\n pub mod data;\n@@ -49,7 +50,6 @@ pub mod import_map;\n \n #[cfg(test)]\n mod test_db;\n-mod intern;\n \n use std::{\n     hash::{Hash, Hasher},"}, {"sha": "f9c8328f06463bedaa7c1225ab81105bddb03fb3", "filename": "crates/hir_def/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath.rs?ref=58924cfae1be231e01736407fa666f31898a699e", "patch": "@@ -122,7 +122,7 @@ impl ModPath {\n pub struct Path {\n     /// Type based path like `<T>::foo`.\n     /// Note that paths like `<Type as Trait>::foo` are desugard to `Trait::<Self=Type>::foo`.\n-    type_anchor: Option<Box<TypeRef>>,\n+    type_anchor: Option<Interned<TypeRef>>,\n     mod_path: Interned<ModPath>,\n     /// Invariant: the same len as `self.mod_path.segments`\n     generic_args: Vec<Option<Arc<GenericArgs>>>,"}, {"sha": "7b29d9d4fbad282781da6b315b34d86913fb1db8", "filename": "crates/hir_def/src/path/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs?ref=58924cfae1be231e01736407fa666f31898a699e", "patch": "@@ -69,7 +69,7 @@ pub(super) fn lower_path(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path>\n                 match trait_ref {\n                     // <T>::foo\n                     None => {\n-                        type_anchor = Some(Box::new(self_type));\n+                        type_anchor = Some(Interned::new(self_type));\n                         kind = PathKind::Plain;\n                     }\n                     // <T as Trait<A>>::Foo desugars to Trait<Self=T, A>::Foo"}, {"sha": "0391cc49b6466f9197324d3d9c912303697182ec", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=58924cfae1be231e01736407fa666f31898a699e", "patch": "@@ -14,6 +14,7 @@ use crate::{\n     db::DefDatabase,\n     expr::{ExprId, LabelId, PatId},\n     generics::GenericParams,\n+    intern::Interned,\n     item_scope::{BuiltinShadowMode, BUILTIN_SCOPE},\n     nameres::DefMap,\n     path::{ModPath, PathKind},\n@@ -50,7 +51,7 @@ enum Scope {\n     /// All the items and imported names of a module\n     ModuleScope(ModuleItemMap),\n     /// Brings the generic parameters of an item into scope\n-    GenericParams { def: GenericDefId, params: Arc<GenericParams> },\n+    GenericParams { def: GenericDefId, params: Interned<GenericParams> },\n     /// Brings `Self` in `impl` block into scope\n     ImplDefScope(ImplId),\n     /// Brings `Self` in enum, struct and union definitions into scope"}, {"sha": "9908cd92654c214cb3e31838f4b840c772b5cbbb", "filename": "crates/hir_def/src/visibility.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fvisibility.rs?ref=58924cfae1be231e01736407fa666f31898a699e", "patch": "@@ -11,7 +11,7 @@ use crate::{\n     nameres::DefMap,\n     path::{ModPath, PathKind},\n     resolver::HasResolver,\n-    FunctionId, HasModule, LocalFieldId, ModuleDefId, ModuleId, VariantId,\n+    FunctionId, HasModule, LocalFieldId, ModuleId, VariantId,\n };\n \n /// Visibility of an item, not yet resolved.\n@@ -25,7 +25,7 @@ pub enum RawVisibility {\n }\n \n impl RawVisibility {\n-    pub(crate) const fn private() -> RawVisibility {\n+    pub(crate) fn private() -> RawVisibility {\n         RawVisibility::Module(ModPath::from_kind(PathKind::Super(0)))\n     }\n \n@@ -217,6 +217,6 @@ pub(crate) fn field_visibilities_query(\n \n /// Resolve visibility of a function.\n pub(crate) fn function_visibility_query(db: &dyn DefDatabase, def: FunctionId) -> Visibility {\n-    let resolver = ModuleDefId::from(def).module(db).unwrap().resolver(db);\n+    let resolver = def.resolver(db);\n     db.function_data(def).visibility.resolve(db, &resolver)\n }"}, {"sha": "df0ea4368af8214e15f4a49a471b5d485ec71a51", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58924cfae1be231e01736407fa666f31898a699e/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=58924cfae1be231e01736407fa666f31898a699e", "patch": "@@ -9,6 +9,7 @@ use hir_def::{\n     generics::{\n         GenericParams, TypeParamData, TypeParamProvenance, WherePredicate, WherePredicateTypeTarget,\n     },\n+    intern::Interned,\n     path::Path,\n     resolver::{HasResolver, TypeNs},\n     type_ref::TypeRef,\n@@ -32,11 +33,10 @@ fn direct_super_traits(db: &dyn DefDatabase, trait_: TraitId) -> Vec<TraitId> {\n         .filter_map(|pred| match pred {\n             WherePredicate::ForLifetime { target, bound, .. }\n             | WherePredicate::TypeBound { target, bound } => match target {\n-                WherePredicateTypeTarget::TypeRef(TypeRef::Path(p))\n-                    if p == &Path::from(name![Self]) =>\n-                {\n-                    bound.as_path()\n-                }\n+                WherePredicateTypeTarget::TypeRef(type_ref) => match &**type_ref {\n+                    TypeRef::Path(p) if p == &Path::from(name![Self]) => bound.as_path(),\n+                    _ => None,\n+                },\n                 WherePredicateTypeTarget::TypeParam(local_id) if Some(*local_id) == trait_self => {\n                     bound.as_path()\n                 }\n@@ -159,7 +159,7 @@ pub(crate) fn generics(db: &dyn DefDatabase, def: GenericDefId) -> Generics {\n #[derive(Debug)]\n pub(crate) struct Generics {\n     def: GenericDefId,\n-    pub(crate) params: Arc<GenericParams>,\n+    pub(crate) params: Interned<GenericParams>,\n     parent_generics: Option<Box<Generics>>,\n }\n "}, {"sha": "1720537cb6e886d2f771d4842a5a8fef60ee7fc9", "filename": "lib/arena/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58924cfae1be231e01736407fa666f31898a699e/lib%2Farena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58924cfae1be231e01736407fa666f31898a699e/lib%2Farena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Farena%2Fsrc%2Flib.rs?ref=58924cfae1be231e01736407fa666f31898a699e", "patch": "@@ -90,7 +90,7 @@ impl<T> Idx<T> {\n }\n \n /// Yet another index-based arena.\n-#[derive(Clone, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq, Hash)]\n pub struct Arena<T> {\n     data: Vec<T>,\n }"}]}