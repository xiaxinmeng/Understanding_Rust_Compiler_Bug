{"sha": "19356453cbfb734bc60a1853c10e3095d05e0342", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MzU2NDUzY2JmYjczNGJjNjBhMTg1M2MxMGUzMDk1ZDA1ZTAzNDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-21T11:22:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-21T11:22:17Z"}, "message": "Auto merge of #78178 - JohnTitor:rollup-dslazzj, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #77726 (Add Pin::static_ref, static_mut.)\n - #78002 (Tweak \"object unsafe\" errors)\n - #78056 (BTreeMap: split off most code of remove and split_off)\n - #78063 (Improve wording of \"cannot multiply\" type error)\n - #78094 (rustdoc: Show the correct source filename in page titles, without `.html`)\n - #78101 (fix static_ptr_ty for foreign statics)\n - #78118 (Inline const followups)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "7b4db815ca111d129ecda5f620695fff51563a2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b4db815ca111d129ecda5f620695fff51563a2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19356453cbfb734bc60a1853c10e3095d05e0342", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19356453cbfb734bc60a1853c10e3095d05e0342", "html_url": "https://github.com/rust-lang/rust/commit/19356453cbfb734bc60a1853c10e3095d05e0342", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19356453cbfb734bc60a1853c10e3095d05e0342/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f965120ad3dbe7d4d6b90a16cc7028eb6363b983", "url": "https://api.github.com/repos/rust-lang/rust/commits/f965120ad3dbe7d4d6b90a16cc7028eb6363b983", "html_url": "https://github.com/rust-lang/rust/commit/f965120ad3dbe7d4d6b90a16cc7028eb6363b983"}, {"sha": "de24210ebf40b5700908d0a6613f82afe1995b52", "url": "https://api.github.com/repos/rust-lang/rust/commits/de24210ebf40b5700908d0a6613f82afe1995b52", "html_url": "https://github.com/rust-lang/rust/commit/de24210ebf40b5700908d0a6613f82afe1995b52"}], "stats": {"total": 1843, "additions": 1102, "deletions": 741}, "files": [{"sha": "1cd4ddad5783a528e5d9e18bff2de66ef7f79588", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1138,9 +1138,7 @@ impl<'a> State<'a> {\n     fn print_expr_anon_const(&mut self, anon_const: &hir::AnonConst) {\n         self.ibox(INDENT_UNIT);\n         self.s.word_space(\"const\");\n-        self.s.word(\"{\");\n         self.print_anon_const(anon_const);\n-        self.s.word(\"}\");\n         self.end()\n     }\n "}, {"sha": "835f75ec8ef06e3e68caad708ba542863783678b", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -2,12 +2,12 @@ use super::ObjectSafetyViolation;\n \n use crate::infer::InferCtxt;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::Symbol;\n-use rustc_span::Span;\n+use rustc_span::{MultiSpan, Span};\n use std::fmt;\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n@@ -54,10 +54,11 @@ pub fn report_object_safety_error(\n         \"the trait `{}` cannot be made into an object\",\n         trait_str\n     );\n-    err.span_label(span, format!(\"the trait `{}` cannot be made into an object\", trait_str));\n+    err.span_label(span, format!(\"`{}` cannot be made into an object\", trait_str));\n \n     let mut reported_violations = FxHashSet::default();\n-    let mut had_span_label = false;\n+    let mut multi_span = vec![];\n+    let mut messages = vec![];\n     for violation in violations {\n         if let ObjectSafetyViolation::SizedSelf(sp) = &violation {\n             if !sp.is_empty() {\n@@ -71,31 +72,37 @@ pub fn report_object_safety_error(\n             let msg = if trait_span.is_none() || spans.is_empty() {\n                 format!(\"the trait cannot be made into an object because {}\", violation.error_msg())\n             } else {\n-                had_span_label = true;\n                 format!(\"...because {}\", violation.error_msg())\n             };\n             if spans.is_empty() {\n                 err.note(&msg);\n             } else {\n                 for span in spans {\n-                    err.span_label(span, &msg);\n+                    multi_span.push(span);\n+                    messages.push(msg.clone());\n                 }\n             }\n-            match (trait_span, violation.solution()) {\n-                (Some(_), Some((note, None))) => {\n-                    err.help(&note);\n-                }\n-                (Some(_), Some((note, Some((sugg, span))))) => {\n-                    err.span_suggestion(span, &note, sugg, Applicability::MachineApplicable);\n-                }\n+            if trait_span.is_some() {\n                 // Only provide the help if its a local trait, otherwise it's not actionable.\n-                _ => {}\n+                violation.solution(&mut err);\n             }\n         }\n     }\n-    if let (Some(trait_span), true) = (trait_span, had_span_label) {\n-        err.span_label(trait_span, \"this trait cannot be made into an object...\");\n+    let has_multi_span = !multi_span.is_empty();\n+    let mut note_span = MultiSpan::from_spans(multi_span.clone());\n+    if let (Some(trait_span), true) = (trait_span, has_multi_span) {\n+        note_span\n+            .push_span_label(trait_span, \"this trait cannot be made into an object...\".to_string());\n     }\n+    for (span, msg) in multi_span.into_iter().zip(messages.into_iter()) {\n+        note_span.push_span_label(span, msg);\n+    }\n+    err.span_note(\n+        note_span,\n+        \"for a trait to be \\\"object safe\\\" it needs to allow building a vtable to allow the call \\\n+         to be resolvable dynamically; for more information visit \\\n+         <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\",\n+    );\n \n     if tcx.sess.trait_methods_not_found.borrow().contains(&span) {\n         // Avoid emitting error caused by non-existing method (#58734)"}, {"sha": "fa40995407f4f81e60ed0df3cb999dd32e52ff4a", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -821,9 +821,6 @@ pub struct LocalDecl<'tcx> {\n     /// flag drop flags to avoid triggering this check as they are introduced\n     /// after typeck.\n     ///\n-    /// Unsafety checking will also ignore dereferences of these locals,\n-    /// so they can be used for raw pointers only used in a desugaring.\n-    ///\n     /// This should be sound because the drop flags are fully algebraic, and\n     /// therefore don't affect the OIBIT or outlives properties of the\n     /// generator.\n@@ -1010,13 +1007,13 @@ impl<'tcx> LocalDecl<'tcx> {\n     }\n \n     /// Returns `Some` if this is a reference to a static item that is used to\n-    /// access that static\n+    /// access that static.\n     pub fn is_ref_to_static(&self) -> bool {\n         matches!(self.local_info, Some(box LocalInfo::StaticRef { .. }))\n     }\n \n-    /// Returns `Some` if this is a reference to a static item that is used to\n-    /// access that static\n+    /// Returns `Some` if this is a reference to a thread-local static item that is used to\n+    /// access that static.\n     pub fn is_ref_to_thread_local(&self) -> bool {\n         match self.local_info {\n             Some(box LocalInfo::StaticRef { is_thread_local, .. }) => is_thread_local,"}, {"sha": "f0bfdae261c643bdf2b6801ea8728aeba82a77e1", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -152,10 +152,14 @@ impl<'tcx> Rvalue<'tcx> {\n                 tcx.mk_ty(ty::Array(operand.ty(local_decls, tcx), count))\n             }\n             Rvalue::ThreadLocalRef(did) => {\n+                let static_ty = tcx.type_of(did);\n                 if tcx.is_mutable_static(did) {\n-                    tcx.mk_mut_ptr(tcx.type_of(did))\n+                    tcx.mk_mut_ptr(static_ty)\n+                } else if tcx.is_foreign_item(did) {\n+                    tcx.mk_imm_ptr(static_ty)\n                 } else {\n-                    tcx.mk_imm_ref(tcx.lifetimes.re_static, tcx.type_of(did))\n+                    // FIXME: These things don't *really* have 'static lifetime.\n+                    tcx.mk_imm_ref(tcx.lifetimes.re_static, static_ty)\n                 }\n             }\n             Rvalue::Ref(reg, bk, ref place) => {"}, {"sha": "26962aa108342f0b17a366ca4b1407756feac2f4", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 55, "deletions": 21, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -13,6 +13,7 @@ use crate::mir::interpret::ErrorHandled;\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, AdtKind, Ty, TyCtxt};\n \n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::Symbol;\n@@ -646,13 +647,13 @@ impl ObjectSafetyViolation {\n             ObjectSafetyViolation::SizedSelf(_) => \"it requires `Self: Sized`\".into(),\n             ObjectSafetyViolation::SupertraitSelf(ref spans) => {\n                 if spans.iter().any(|sp| *sp != DUMMY_SP) {\n-                    \"it uses `Self` as a type parameter in this\".into()\n+                    \"it uses `Self` as a type parameter\".into()\n                 } else {\n                     \"it cannot use `Self` as a type parameter in a supertrait or `where`-clause\"\n                         .into()\n                 }\n             }\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod(_), _) => {\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod(_, _, _), _) => {\n                 format!(\"associated function `{}` has no `self` parameter\", name).into()\n             }\n             ObjectSafetyViolation::Method(\n@@ -686,32 +687,65 @@ impl ObjectSafetyViolation {\n         }\n     }\n \n-    pub fn solution(&self) -> Option<(String, Option<(String, Span)>)> {\n-        Some(match *self {\n-            ObjectSafetyViolation::SizedSelf(_) | ObjectSafetyViolation::SupertraitSelf(_) => {\n-                return None;\n+    pub fn solution(&self, err: &mut DiagnosticBuilder<'_>) {\n+        match *self {\n+            ObjectSafetyViolation::SizedSelf(_) | ObjectSafetyViolation::SupertraitSelf(_) => {}\n+            ObjectSafetyViolation::Method(\n+                name,\n+                MethodViolationCode::StaticMethod(sugg, self_span, has_args),\n+                _,\n+            ) => {\n+                err.span_suggestion(\n+                    self_span,\n+                    &format!(\n+                        \"consider turning `{}` into a method by giving it a `&self` argument\",\n+                        name\n+                    ),\n+                    format!(\"&self{}\", if has_args { \", \" } else { \"\" }),\n+                    Applicability::MaybeIncorrect,\n+                );\n+                match sugg {\n+                    Some((sugg, span)) => {\n+                        err.span_suggestion(\n+                            span,\n+                            &format!(\n+                                \"alternatively, consider constraining `{}` so it does not apply to \\\n+                                 trait objects\",\n+                                name\n+                            ),\n+                            sugg.to_string(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                    None => {\n+                        err.help(&format!(\n+                            \"consider turning `{}` into a method by giving it a `&self` \\\n+                             argument or constraining it so it does not apply to trait objects\",\n+                            name\n+                        ));\n+                    }\n+                }\n             }\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod(sugg), _) => (\n-                format!(\n-                    \"consider turning `{}` into a method by giving it a `&self` argument or \\\n-                     constraining it so it does not apply to trait objects\",\n-                    name\n-                ),\n-                sugg.map(|(sugg, sp)| (sugg.to_string(), sp)),\n-            ),\n             ObjectSafetyViolation::Method(\n                 name,\n                 MethodViolationCode::UndispatchableReceiver,\n                 span,\n-            ) => (\n-                format!(\"consider changing method `{}`'s `self` parameter to be `&self`\", name),\n-                Some((\"&Self\".to_string(), span)),\n-            ),\n+            ) => {\n+                err.span_suggestion(\n+                    span,\n+                    &format!(\n+                        \"consider changing method `{}`'s `self` parameter to be `&self`\",\n+                        name\n+                    ),\n+                    \"&Self\".to_string(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n             ObjectSafetyViolation::AssocConst(name, _)\n             | ObjectSafetyViolation::Method(name, ..) => {\n-                (format!(\"consider moving `{}` to another trait\", name), None)\n+                err.help(&format!(\"consider moving `{}` to another trait\", name));\n             }\n-        })\n+        }\n     }\n \n     pub fn spans(&self) -> SmallVec<[Span; 1]> {\n@@ -735,7 +769,7 @@ impl ObjectSafetyViolation {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n pub enum MethodViolationCode {\n     /// e.g., `fn foo()`\n-    StaticMethod(Option<(&'static str, Span)>),\n+    StaticMethod(Option<(&'static str, Span)>, Span, bool /* has args */),\n \n     /// e.g., `fn foo(&self, x: Self)`\n     ReferencesSelfInput(usize),"}, {"sha": "4a20e1c32f99e4c0bb4c0455e928187dbe911b8c", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -529,8 +529,12 @@ impl<'tcx> TyCtxt<'tcx> {\n         // Make sure that any constants in the static's type are evaluated.\n         let static_ty = self.normalize_erasing_regions(ty::ParamEnv::empty(), self.type_of(def_id));\n \n+        // Make sure that accesses to unsafe statics end up using raw pointers.\n+        // For thread-locals, this needs to be kept in sync with `Rvalue::ty`.\n         if self.is_mutable_static(def_id) {\n             self.mk_mut_ptr(static_ty)\n+        } else if self.is_foreign_item(def_id) {\n+            self.mk_imm_ptr(static_ty)\n         } else {\n             self.mk_imm_ref(self.lifetimes.re_erased, static_ty)\n         }"}, {"sha": "3d68b862df2d096138b5e9d30ac6c6c275869824", "filename": "compiler/rustc_mir/src/transform/check_unsafety.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -204,6 +204,9 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             if let [] = proj_base {\n                 let decl = &self.body.local_decls[place.local];\n                 if decl.internal {\n+                    // If the projection root is an artifical local that we introduced when\n+                    // desugaring `static`, give a more specific error message\n+                    // (avoid the general \"raw pointer\" clause below, that would only be confusing).\n                     if let Some(box LocalInfo::StaticRef { def_id, .. }) = decl.local_info {\n                         if self.tcx.is_mutable_static(def_id) {\n                             self.require_unsafe("}, {"sha": "5176db82d3b410cf26827f85a1ab24aaa28ebc2d", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -548,7 +548,11 @@ impl<'a> Parser<'a> {\n \n     fn check_inline_const(&mut self) -> bool {\n         self.check_keyword(kw::Const)\n-            && self.look_ahead(1, |t| t == &token::OpenDelim(DelimToken::Brace))\n+            && self.look_ahead(1, |t| match t.kind {\n+                token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),\n+                token::OpenDelim(DelimToken::Brace) => true,\n+                _ => false,\n+            })\n     }\n \n     /// Checks to see if the next token is either `+` or `+=`."}, {"sha": "d1647e686a84f9b225acf62c4104157c96f4a87f", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 63, "deletions": 48, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -13,15 +13,15 @@ use super::elaborate_predicates;\n use crate::infer::TyCtxtInferExt;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::{self, Obligation, ObligationCause};\n-use rustc_errors::{Applicability, FatalError};\n+use rustc_errors::FatalError;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts, Subst};\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeVisitor, WithConstness};\n use rustc_middle::ty::{Predicate, ToPredicate};\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n use rustc_span::symbol::Symbol;\n-use rustc_span::Span;\n+use rustc_span::{MultiSpan, Span};\n use smallvec::SmallVec;\n \n use std::array;\n@@ -100,49 +100,7 @@ fn object_safety_violations_for_trait(\n                 span,\n             ) = violation\n             {\n-                // Using `CRATE_NODE_ID` is wrong, but it's hard to get a more precise id.\n-                // It's also hard to get a use site span, so we use the method definition span.\n-                tcx.struct_span_lint_hir(\n-                    WHERE_CLAUSES_OBJECT_SAFETY,\n-                    hir::CRATE_HIR_ID,\n-                    *span,\n-                    |lint| {\n-                        let mut err = lint.build(&format!(\n-                            \"the trait `{}` cannot be made into an object\",\n-                            tcx.def_path_str(trait_def_id)\n-                        ));\n-                        let node = tcx.hir().get_if_local(trait_def_id);\n-                        let msg = if let Some(hir::Node::Item(item)) = node {\n-                            err.span_label(\n-                                item.ident.span,\n-                                \"this trait cannot be made into an object...\",\n-                            );\n-                            format!(\"...because {}\", violation.error_msg())\n-                        } else {\n-                            format!(\n-                                \"the trait cannot be made into an object because {}\",\n-                                violation.error_msg()\n-                            )\n-                        };\n-                        err.span_label(*span, &msg);\n-                        match (node, violation.solution()) {\n-                            (Some(_), Some((note, None))) => {\n-                                err.help(&note);\n-                            }\n-                            (Some(_), Some((note, Some((sugg, span))))) => {\n-                                err.span_suggestion(\n-                                    span,\n-                                    &note,\n-                                    sugg,\n-                                    Applicability::MachineApplicable,\n-                                );\n-                            }\n-                            // Only provide the help if its a local trait, otherwise it's not actionable.\n-                            _ => {}\n-                        }\n-                        err.emit();\n-                    },\n-                );\n+                lint_object_unsafe_trait(tcx, *span, trait_def_id, violation);\n                 false\n             } else {\n                 true\n@@ -180,6 +138,51 @@ fn object_safety_violations_for_trait(\n     violations\n }\n \n+/// Lint object-unsafe trait.\n+fn lint_object_unsafe_trait(\n+    tcx: TyCtxt<'_>,\n+    span: Span,\n+    trait_def_id: DefId,\n+    violation: &ObjectSafetyViolation,\n+) {\n+    // Using `CRATE_NODE_ID` is wrong, but it's hard to get a more precise id.\n+    // It's also hard to get a use site span, so we use the method definition span.\n+    tcx.struct_span_lint_hir(WHERE_CLAUSES_OBJECT_SAFETY, hir::CRATE_HIR_ID, span, |lint| {\n+        let mut err = lint.build(&format!(\n+            \"the trait `{}` cannot be made into an object\",\n+            tcx.def_path_str(trait_def_id)\n+        ));\n+        let node = tcx.hir().get_if_local(trait_def_id);\n+        let mut spans = MultiSpan::from_span(span);\n+        if let Some(hir::Node::Item(item)) = node {\n+            spans.push_span_label(\n+                item.ident.span,\n+                \"this trait cannot be made into an object...\".into(),\n+            );\n+            spans.push_span_label(span, format!(\"...because {}\", violation.error_msg()));\n+        } else {\n+            spans.push_span_label(\n+                span,\n+                format!(\n+                    \"the trait cannot be made into an object because {}\",\n+                    violation.error_msg()\n+                ),\n+            );\n+        };\n+        err.span_note(\n+            spans,\n+            \"for a trait to be \\\"object safe\\\" it needs to allow building a vtable to allow the \\\n+             call to be resolvable dynamically; for more information visit \\\n+             <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\",\n+        );\n+        if node.is_some() {\n+            // Only provide the help if its a local trait, otherwise it's not\n+            violation.solution(&mut err);\n+        }\n+        err.emit();\n+    });\n+}\n+\n fn sized_trait_bound_spans<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     bounds: hir::GenericBounds<'tcx>,\n@@ -385,6 +388,8 @@ fn virtual_call_violation_for_method<'tcx>(\n     trait_def_id: DefId,\n     method: &ty::AssocItem,\n ) -> Option<MethodViolationCode> {\n+    let sig = tcx.fn_sig(method.def_id);\n+\n     // The method's first parameter must be named `self`\n     if !method.fn_has_self_parameter {\n         // We'll attempt to provide a structured suggestion for `Self: Sized`.\n@@ -395,11 +400,21 @@ fn virtual_call_violation_for_method<'tcx>(\n                     [.., pred] => (\", Self: Sized\", pred.span().shrink_to_hi()),\n                 },\n             );\n-        return Some(MethodViolationCode::StaticMethod(sugg));\n+        // Get the span pointing at where the `self` receiver should be.\n+        let sm = tcx.sess.source_map();\n+        let self_span = method.ident.span.to(tcx\n+            .hir()\n+            .span_if_local(method.def_id)\n+            .unwrap_or_else(|| sm.next_point(method.ident.span))\n+            .shrink_to_hi());\n+        let self_span = sm.span_through_char(self_span, '(').shrink_to_hi();\n+        return Some(MethodViolationCode::StaticMethod(\n+            sugg,\n+            self_span,\n+            !sig.inputs().skip_binder().is_empty(),\n+        ));\n     }\n \n-    let sig = tcx.fn_sig(method.def_id);\n-\n     for (i, input_ty) in sig.skip_binder().inputs()[1..].iter().enumerate() {\n         if contains_illegal_self_type_reference(tcx, trait_def_id, input_ty) {\n             return Some(MethodViolationCode::ReferencesSelfInput(i));"}, {"sha": "02268b11a7a8eb21a2428f67577be5041241c916", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -302,7 +302,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 true,\n                             ),\n                             hir::BinOpKind::Mul => (\n-                                format!(\"cannot multiply `{}` to `{}`\", rhs_ty, lhs_ty),\n+                                format!(\"cannot multiply `{}` by `{}`\", lhs_ty, rhs_ty),\n                                 Some(\"std::ops::Mul\"),\n                                 true,\n                             ),"}, {"sha": "20c6ebd22928bb59c52d2af5056585ea4158117f", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 222, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -13,8 +13,6 @@ use super::node::{self, marker, ForceResult::*, Handle, NodeRef};\n use super::search::{self, SearchResult::*};\n use super::unwrap_unchecked;\n \n-use UnderflowResult::*;\n-\n mod entry;\n pub use entry::{Entry, OccupiedEntry, VacantEntry};\n use Entry::*;\n@@ -1154,40 +1152,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n \n         let mut right = Self::new();\n         let right_root = Self::ensure_is_owned(&mut right.root);\n-        for _ in 0..left_root.height() {\n-            right_root.push_internal_level();\n-        }\n-\n-        {\n-            let mut left_node = left_root.node_as_mut();\n-            let mut right_node = right_root.node_as_mut();\n-\n-            loop {\n-                let mut split_edge = match search::search_node(left_node, key) {\n-                    // key is going to the right tree\n-                    Found(handle) => handle.left_edge(),\n-                    GoDown(handle) => handle,\n-                };\n \n-                split_edge.move_suffix(&mut right_node);\n-\n-                match (split_edge.force(), right_node.force()) {\n-                    (Internal(edge), Internal(node)) => {\n-                        left_node = edge.descend();\n-                        right_node = node.first_edge().descend();\n-                    }\n-                    (Leaf(_), Leaf(_)) => {\n-                        break;\n-                    }\n-                    _ => {\n-                        unreachable!();\n-                    }\n-                }\n-            }\n-        }\n-\n-        left_root.fix_right_border();\n-        right_root.fix_left_border();\n+        left_root.split_off(right_root, key);\n \n         if left_root.height() < right_root.height() {\n             self.length = left_root.node_as_ref().calc_length();\n@@ -2250,193 +2216,6 @@ impl<K, V> BTreeMap<K, V> {\n     }\n }\n \n-impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::KV> {\n-    /// Removes a key/value-pair from the map, and returns that pair, as well as\n-    /// the leaf edge corresponding to that former pair.\n-    fn remove_kv_tracking<F: FnOnce()>(\n-        self,\n-        handle_emptied_internal_root: F,\n-    ) -> ((K, V), Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>) {\n-        let (old_kv, mut pos, was_internal) = match self.force() {\n-            Leaf(leaf) => {\n-                let (old_kv, pos) = leaf.remove();\n-                (old_kv, pos, false)\n-            }\n-            Internal(mut internal) => {\n-                // Replace the location freed in the internal node with an\n-                // adjacent KV, and remove that adjacent KV from its leaf.\n-                // Always choose the adjacent KV on the left side because\n-                // it is typically faster to pop an element from the end\n-                // of the KV arrays without needing to shift other elements.\n-\n-                let key_loc = internal.kv_mut().0 as *mut K;\n-                let val_loc = internal.kv_mut().1 as *mut V;\n-\n-                let to_remove = internal.left_edge().descend().last_leaf_edge().left_kv().ok();\n-                let to_remove = unsafe { unwrap_unchecked(to_remove) };\n-\n-                let (kv, pos) = to_remove.remove();\n-\n-                let old_key = unsafe { mem::replace(&mut *key_loc, kv.0) };\n-                let old_val = unsafe { mem::replace(&mut *val_loc, kv.1) };\n-\n-                ((old_key, old_val), pos, true)\n-            }\n-        };\n-\n-        // Handle underflow\n-        let mut cur_node = unsafe { ptr::read(&pos).into_node().forget_type() };\n-        let mut at_leaf = true;\n-        while cur_node.len() < node::MIN_LEN {\n-            match handle_underfull_node(cur_node) {\n-                AtRoot => break,\n-                Merged(edge, merged_with_left, offset) => {\n-                    // If we merged with our right sibling then our tracked\n-                    // position has not changed. However if we merged with our\n-                    // left sibling then our tracked position is now dangling.\n-                    if at_leaf && merged_with_left {\n-                        let idx = pos.idx() + offset;\n-                        let node = match unsafe { ptr::read(&edge).descend().force() } {\n-                            Leaf(leaf) => leaf,\n-                            Internal(_) => unreachable!(),\n-                        };\n-                        pos = unsafe { Handle::new_edge(node, idx) };\n-                    }\n-\n-                    let parent = edge.into_node();\n-                    if parent.len() == 0 {\n-                        // The parent that was just emptied must be the root,\n-                        // because nodes on a lower level would not have been\n-                        // left with a single child.\n-                        handle_emptied_internal_root();\n-                        break;\n-                    } else {\n-                        cur_node = parent.forget_type();\n-                        at_leaf = false;\n-                    }\n-                }\n-                Stole(stole_from_left) => {\n-                    // Adjust the tracked position if we stole from a left sibling\n-                    if stole_from_left && at_leaf {\n-                        // SAFETY: This is safe since we just added an element to our node.\n-                        unsafe {\n-                            pos.move_next_unchecked();\n-                        }\n-                    }\n-                    break;\n-                }\n-            }\n-        }\n-\n-        // If we deleted from an internal node then we need to compensate for\n-        // the earlier swap and adjust the tracked position to point to the\n-        // next element.\n-        if was_internal {\n-            pos = unsafe { unwrap_unchecked(pos.next_kv().ok()).next_leaf_edge() };\n-        }\n-\n-        (old_kv, pos)\n-    }\n-}\n-\n-impl<K, V> node::Root<K, V> {\n-    /// Removes empty levels on the top, but keep an empty leaf if the entire tree is empty.\n-    fn fix_top(&mut self) {\n-        while self.height() > 0 && self.node_as_ref().len() == 0 {\n-            self.pop_internal_level();\n-        }\n-    }\n-\n-    fn fix_right_border(&mut self) {\n-        self.fix_top();\n-\n-        {\n-            let mut cur_node = self.node_as_mut();\n-\n-            while let Internal(node) = cur_node.force() {\n-                let mut last_kv = node.last_kv();\n-\n-                if last_kv.can_merge() {\n-                    cur_node = last_kv.merge().descend();\n-                } else {\n-                    let right_len = last_kv.reborrow().right_edge().descend().len();\n-                    // `MINLEN + 1` to avoid readjust if merge happens on the next level.\n-                    if right_len < node::MIN_LEN + 1 {\n-                        last_kv.bulk_steal_left(node::MIN_LEN + 1 - right_len);\n-                    }\n-                    cur_node = last_kv.right_edge().descend();\n-                }\n-            }\n-        }\n-\n-        self.fix_top();\n-    }\n-\n-    /// The symmetric clone of `fix_right_border`.\n-    fn fix_left_border(&mut self) {\n-        self.fix_top();\n-\n-        {\n-            let mut cur_node = self.node_as_mut();\n-\n-            while let Internal(node) = cur_node.force() {\n-                let mut first_kv = node.first_kv();\n-\n-                if first_kv.can_merge() {\n-                    cur_node = first_kv.merge().descend();\n-                } else {\n-                    let left_len = first_kv.reborrow().left_edge().descend().len();\n-                    if left_len < node::MIN_LEN + 1 {\n-                        first_kv.bulk_steal_right(node::MIN_LEN + 1 - left_len);\n-                    }\n-                    cur_node = first_kv.left_edge().descend();\n-                }\n-            }\n-        }\n-\n-        self.fix_top();\n-    }\n-}\n-\n-enum UnderflowResult<'a, K, V> {\n-    AtRoot,\n-    Merged(Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge>, bool, usize),\n-    Stole(bool),\n-}\n-\n-fn handle_underfull_node<'a, K: 'a, V: 'a>(\n-    node: NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>,\n-) -> UnderflowResult<'_, K, V> {\n-    let parent = match node.ascend() {\n-        Ok(parent) => parent,\n-        Err(_) => return AtRoot,\n-    };\n-\n-    // Prefer the left KV if it exists. Merging with the left side is faster,\n-    // since merging happens towards the left and `node` has fewer elements.\n-    // Stealing from the left side is faster, since we can pop from the end of\n-    // the KV arrays.\n-    let (is_left, mut handle) = match parent.left_kv() {\n-        Ok(left) => (true, left),\n-        Err(parent) => {\n-            let right = unsafe { unwrap_unchecked(parent.right_kv().ok()) };\n-            (false, right)\n-        }\n-    };\n-\n-    if handle.can_merge() {\n-        let offset = if is_left { handle.reborrow().left_edge().descend().len() + 1 } else { 0 };\n-        Merged(handle.merge(), is_left, offset)\n-    } else {\n-        if is_left {\n-            handle.steal_left();\n-        } else {\n-            handle.steal_right();\n-        }\n-        Stole(is_left)\n-    }\n-}\n-\n impl<K: Ord, V, I: Iterator<Item = (K, V)>> Iterator for MergeIter<K, V, I> {\n     type Item = (K, V);\n "}, {"sha": "bcc50ed56158710cbff6af424d33d0eecef3639f", "filename": "library/alloc/src/collections/btree/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -2,8 +2,10 @@ mod borrow;\n pub mod map;\n mod navigate;\n mod node;\n+mod remove;\n mod search;\n pub mod set;\n+mod split;\n \n #[doc(hidden)]\n trait Recover<Q: ?Sized> {"}, {"sha": "9733b7d608425eff05919461b9d7a8720b50fd83", "filename": "library/alloc/src/collections/btree/remove.rs", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -0,0 +1,132 @@\n+use super::node::{self, marker, ForceResult, Handle, NodeRef};\n+use super::unwrap_unchecked;\n+use core::mem;\n+use core::ptr;\n+\n+impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::KV> {\n+    /// Removes a key/value-pair from the map, and returns that pair, as well as\n+    /// the leaf edge corresponding to that former pair.\n+    pub fn remove_kv_tracking<F: FnOnce()>(\n+        self,\n+        handle_emptied_internal_root: F,\n+    ) -> ((K, V), Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>) {\n+        let (old_kv, mut pos, was_internal) = match self.force() {\n+            ForceResult::Leaf(leaf) => {\n+                let (old_kv, pos) = leaf.remove();\n+                (old_kv, pos, false)\n+            }\n+            ForceResult::Internal(mut internal) => {\n+                // Replace the location freed in the internal node with an\n+                // adjacent KV, and remove that adjacent KV from its leaf.\n+                // Always choose the adjacent KV on the left side because\n+                // it is typically faster to pop an element from the end\n+                // of the KV arrays without needing to shift other elements.\n+\n+                let key_loc = internal.kv_mut().0 as *mut K;\n+                let val_loc = internal.kv_mut().1 as *mut V;\n+\n+                let to_remove = internal.left_edge().descend().last_leaf_edge().left_kv().ok();\n+                let to_remove = unsafe { unwrap_unchecked(to_remove) };\n+\n+                let (kv, pos) = to_remove.remove();\n+\n+                let old_key = unsafe { mem::replace(&mut *key_loc, kv.0) };\n+                let old_val = unsafe { mem::replace(&mut *val_loc, kv.1) };\n+\n+                ((old_key, old_val), pos, true)\n+            }\n+        };\n+\n+        // Handle underflow\n+        let mut cur_node = unsafe { ptr::read(&pos).into_node().forget_type() };\n+        let mut at_leaf = true;\n+        while cur_node.len() < node::MIN_LEN {\n+            match handle_underfull_node(cur_node) {\n+                UnderflowResult::AtRoot => break,\n+                UnderflowResult::Merged(edge, merged_with_left, offset) => {\n+                    // If we merged with our right sibling then our tracked\n+                    // position has not changed. However if we merged with our\n+                    // left sibling then our tracked position is now dangling.\n+                    if at_leaf && merged_with_left {\n+                        let idx = pos.idx() + offset;\n+                        let node = match unsafe { ptr::read(&edge).descend().force() } {\n+                            ForceResult::Leaf(leaf) => leaf,\n+                            ForceResult::Internal(_) => unreachable!(),\n+                        };\n+                        pos = unsafe { Handle::new_edge(node, idx) };\n+                    }\n+\n+                    let parent = edge.into_node();\n+                    if parent.len() == 0 {\n+                        // The parent that was just emptied must be the root,\n+                        // because nodes on a lower level would not have been\n+                        // left with a single child.\n+                        handle_emptied_internal_root();\n+                        break;\n+                    } else {\n+                        cur_node = parent.forget_type();\n+                        at_leaf = false;\n+                    }\n+                }\n+                UnderflowResult::Stole(stole_from_left) => {\n+                    // Adjust the tracked position if we stole from a left sibling\n+                    if stole_from_left && at_leaf {\n+                        // SAFETY: This is safe since we just added an element to our node.\n+                        unsafe {\n+                            pos.move_next_unchecked();\n+                        }\n+                    }\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // If we deleted from an internal node then we need to compensate for\n+        // the earlier swap and adjust the tracked position to point to the\n+        // next element.\n+        if was_internal {\n+            pos = unsafe { unwrap_unchecked(pos.next_kv().ok()).next_leaf_edge() };\n+        }\n+\n+        (old_kv, pos)\n+    }\n+}\n+\n+enum UnderflowResult<'a, K, V> {\n+    AtRoot,\n+    Merged(Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge>, bool, usize),\n+    Stole(bool),\n+}\n+\n+fn handle_underfull_node<'a, K: 'a, V: 'a>(\n+    node: NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>,\n+) -> UnderflowResult<'_, K, V> {\n+    let parent = match node.ascend() {\n+        Ok(parent) => parent,\n+        Err(_) => return UnderflowResult::AtRoot,\n+    };\n+\n+    // Prefer the left KV if it exists. Merging with the left side is faster,\n+    // since merging happens towards the left and `node` has fewer elements.\n+    // Stealing from the left side is faster, since we can pop from the end of\n+    // the KV arrays.\n+    let (is_left, mut handle) = match parent.left_kv() {\n+        Ok(left) => (true, left),\n+        Err(parent) => {\n+            let right = unsafe { unwrap_unchecked(parent.right_kv().ok()) };\n+            (false, right)\n+        }\n+    };\n+\n+    if handle.can_merge() {\n+        let offset = if is_left { handle.reborrow().left_edge().descend().len() + 1 } else { 0 };\n+        UnderflowResult::Merged(handle.merge(), is_left, offset)\n+    } else {\n+        if is_left {\n+            handle.steal_left();\n+        } else {\n+            handle.steal_right();\n+        }\n+        UnderflowResult::Stole(is_left)\n+    }\n+}"}, {"sha": "0e6e213f6e87d9f8581899d641d6dae9a92e27c9", "filename": "library/alloc/src/collections/btree/split.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsplit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsplit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsplit.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -0,0 +1,104 @@\n+use super::node::{self, ForceResult::*, Root};\n+use super::search::{self, SearchResult::*};\n+use core::borrow::Borrow;\n+\n+impl<K, V> Root<K, V> {\n+    pub fn split_off<Q: ?Sized + Ord>(&mut self, right_root: &mut Self, key: &Q)\n+    where\n+        K: Borrow<Q>,\n+    {\n+        debug_assert!(right_root.height() == 0);\n+        debug_assert!(right_root.node_as_ref().len() == 0);\n+\n+        let left_root = self;\n+        for _ in 0..left_root.height() {\n+            right_root.push_internal_level();\n+        }\n+\n+        {\n+            let mut left_node = left_root.node_as_mut();\n+            let mut right_node = right_root.node_as_mut();\n+\n+            loop {\n+                let mut split_edge = match search::search_node(left_node, key) {\n+                    // key is going to the right tree\n+                    Found(handle) => handle.left_edge(),\n+                    GoDown(handle) => handle,\n+                };\n+\n+                split_edge.move_suffix(&mut right_node);\n+\n+                match (split_edge.force(), right_node.force()) {\n+                    (Internal(edge), Internal(node)) => {\n+                        left_node = edge.descend();\n+                        right_node = node.first_edge().descend();\n+                    }\n+                    (Leaf(_), Leaf(_)) => {\n+                        break;\n+                    }\n+                    _ => unreachable!(),\n+                }\n+            }\n+        }\n+\n+        left_root.fix_right_border();\n+        right_root.fix_left_border();\n+    }\n+\n+    /// Removes empty levels on the top, but keeps an empty leaf if the entire tree is empty.\n+    fn fix_top(&mut self) {\n+        while self.height() > 0 && self.node_as_ref().len() == 0 {\n+            self.pop_internal_level();\n+        }\n+    }\n+\n+    fn fix_right_border(&mut self) {\n+        self.fix_top();\n+\n+        {\n+            let mut cur_node = self.node_as_mut();\n+\n+            while let Internal(node) = cur_node.force() {\n+                let mut last_kv = node.last_kv();\n+\n+                if last_kv.can_merge() {\n+                    cur_node = last_kv.merge().descend();\n+                } else {\n+                    let right_len = last_kv.reborrow().right_edge().descend().len();\n+                    // `MINLEN + 1` to avoid readjust if merge happens on the next level.\n+                    if right_len < node::MIN_LEN + 1 {\n+                        last_kv.bulk_steal_left(node::MIN_LEN + 1 - right_len);\n+                    }\n+                    cur_node = last_kv.right_edge().descend();\n+                }\n+            }\n+        }\n+\n+        self.fix_top();\n+    }\n+\n+    /// The symmetric clone of `fix_right_border`.\n+    fn fix_left_border(&mut self) {\n+        self.fix_top();\n+\n+        {\n+            let mut cur_node = self.node_as_mut();\n+\n+            while let Internal(node) = cur_node.force() {\n+                let mut first_kv = node.first_kv();\n+\n+                if first_kv.can_merge() {\n+                    cur_node = first_kv.merge().descend();\n+                } else {\n+                    let left_len = first_kv.reborrow().left_edge().descend().len();\n+                    if left_len < node::MIN_LEN + 1 {\n+                        first_kv.bulk_steal_right(node::MIN_LEN + 1 - left_len);\n+                    }\n+                    cur_node = first_kv.left_edge().descend();\n+                }\n+            }\n+        }\n+\n+        self.fix_top();\n+    }\n+}"}, {"sha": "92090d8e6fca7fe875ede962cd77d024f911169c", "filename": "library/core/src/ops/arith.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Farith.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -302,7 +302,7 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[lang = \"mul\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(\n-    message = \"cannot multiply `{Rhs}` to `{Self}`\",\n+    message = \"cannot multiply `{Self}` by `{Rhs}`\",\n     label = \"no implementation for `{Self} * {Rhs}`\"\n )]\n #[doc(alias = \"*\")]\n@@ -826,7 +826,7 @@ sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[lang = \"mul_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(\n-    message = \"cannot multiply-assign `{Rhs}` to `{Self}`\",\n+    message = \"cannot multiply-assign `{Self}` by `{Rhs}`\",\n     label = \"no implementation for `{Self} *= {Rhs}`\"\n )]\n #[doc(alias = \"*\")]"}, {"sha": "b73cd046e5a6558baddd1d2d35306c48372937d0", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -781,6 +781,34 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     }\n }\n \n+impl<T: ?Sized> Pin<&'static T> {\n+    /// Get a pinned reference from a static reference.\n+    ///\n+    /// This is safe, because `T` is borrowed for the `'static` lifetime, which\n+    /// never ends.\n+    #[unstable(feature = \"pin_static_ref\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n+    pub const fn static_ref(r: &'static T) -> Pin<&'static T> {\n+        // SAFETY: The 'static borrow guarantees the data will not be\n+        // moved/invalidated until it gets dropped (which is never).\n+        unsafe { Pin::new_unchecked(r) }\n+    }\n+}\n+\n+impl<T: ?Sized> Pin<&'static mut T> {\n+    /// Get a pinned mutable reference from a static mutable reference.\n+    ///\n+    /// This is safe, because `T` is borrowed for the `'static` lifetime, which\n+    /// never ends.\n+    #[unstable(feature = \"pin_static_ref\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n+    pub const fn static_mut(r: &'static mut T) -> Pin<&'static mut T> {\n+        // SAFETY: The 'static borrow guarantees the data will not be\n+        // moved/invalidated until it gets dropped (which is never).\n+        unsafe { Pin::new_unchecked(r) }\n+    }\n+}\n+\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<P: Deref> Deref for Pin<P> {\n     type Target = P::Target;"}, {"sha": "b487b39952174790d93702ad450406504b7efdbb", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -84,7 +84,7 @@ impl<'a> SourceCollector<'a> {\n         };\n \n         // Remove the utf-8 BOM if any\n-        if contents.starts_with(\"\\u{feff}\") {\n+        if contents.starts_with('\\u{feff}') {\n             contents.drain(..3);\n         }\n \n@@ -99,16 +99,15 @@ impl<'a> SourceCollector<'a> {\n             href.push('/');\n         });\n         self.scx.ensure_dir(&cur)?;\n-        let mut fname = p.file_name().expect(\"source has no filename\").to_os_string();\n+\n+        let src_fname = p.file_name().expect(\"source has no filename\").to_os_string();\n+        let mut fname = src_fname.clone();\n         fname.push(\".html\");\n         cur.push(&fname);\n         href.push_str(&fname.to_string_lossy());\n \n-        let title = format!(\n-            \"{} -- source\",\n-            cur.file_name().expect(\"failed to get file name\").to_string_lossy()\n-        );\n-        let desc = format!(\"Source to the Rust file `{}`.\", filename);\n+        let title = format!(\"{} - source\", src_fname.to_string_lossy());\n+        let desc = format!(\"Source of the Rust file `{}`.\", filename);\n         let page = layout::Page {\n             title: &title,\n             css_class: \"source\","}, {"sha": "88d583b815adba1c8c196f496a1d366aeb35a79a", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO-promoted[0].ConstProp.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.ConstProp.after.mir?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -4,17 +4,17 @@ promoted[0] in FOO: &[&i32; 1] = {\n     let mut _0: &[&i32; 1];              // return place in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n     let mut _1: [&i32; 1];               // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n     let mut _2: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:13:32: 13:45\n-    let mut _3: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+    let mut _3: *const i32;              // in scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n \n     bb0: {\n-        _3 = const {alloc2: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+        _3 = const {alloc2: *const i32}; // scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n                                          // ty::Const\n-                                         // + ty: &i32\n+                                         // + ty: *const i32\n                                          // + val: Value(Scalar(alloc2))\n                                          // mir::Constant\n                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n-                                         // + literal: Const { ty: &i32, val: Value(Scalar(alloc2)) }\n-        _2 = _3;                         // scope 0 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n+                                         // + literal: Const { ty: *const i32, val: Value(Scalar(alloc2)) }\n+        _2 = &(*_3);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n         _1 = [move _2];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n         _0 = &_1;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n         return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46"}, {"sha": "82277b2a21cbef3515c527e46a6b18f860c37626", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -7,7 +7,7 @@\n       let mut _2: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n       let _3: [&i32; 1];                   // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n       let mut _4: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:13:32: 13:45\n-      let _5: &i32;                        // in scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+      let _5: *const i32;                  // in scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n +     let mut _6: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n       scope 1 {\n       }\n@@ -18,16 +18,16 @@\n -         StorageLive(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         StorageLive(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:32: 13:45\n -         StorageLive(_5);                 // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n--         _5 = const {alloc2: &i32};       // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+-         _5 = const {alloc2: *const i32}; // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n +         _6 = const FOO::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n                                            // ty::Const\n--                                          // + ty: &i32\n+-                                          // + ty: *const i32\n -                                          // + val: Value(Scalar(alloc2))\n +                                          // + ty: &[&i32; 1]\n +                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n--                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc2)) }\n+-                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc2)) }\n -         _4 = &(*_5);                     // scope 1 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46"}, {"sha": "7b4594108246b9b1eec19431cf5cd22ac97f7435", "filename": "src/test/ui/associated-consts/associated-const-in-trait.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,15 +1,17 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/associated-const-in-trait.rs:9:6\n    |\n-LL | trait Trait {\n-   |       ----- this trait cannot be made into an object...\n-LL |     const N: usize;\n-   |           - ...because it contains this associated `const`\n-...\n LL | impl dyn Trait {\n-   |      ^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |      ^^^^^^^^^ `Trait` cannot be made into an object\n    |\n    = help: consider moving `N` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/associated-const-in-trait.rs:6:11\n+   |\n+LL | trait Trait {\n+   |       ----- this trait cannot be made into an object...\n+LL |     const N: usize;\n+   |           ^ ...because it contains this associated `const`\n \n error: aborting due to previous error\n "}, {"sha": "92d74e38cfa8db81a4164e62c0a3374b293a02df", "filename": "src/test/ui/associated-item/issue-48027.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,15 +1,17 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-48027.rs:6:6\n    |\n-LL | trait Bar {\n-   |       --- this trait cannot be made into an object...\n-LL |     const X: usize;\n-   |           - ...because it contains this associated `const`\n-...\n LL | impl dyn Bar {}\n-   |      ^^^^^^^ the trait `Bar` cannot be made into an object\n+   |      ^^^^^^^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `X` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-48027.rs:2:11\n+   |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n+LL |     const X: usize;\n+   |           ^ ...because it contains this associated `const`\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-48027.rs:3:32"}, {"sha": "41494c7a017eda5c10d59278b9de6380990e3462", "filename": "src/test/ui/binop/binop-mul-bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:cannot multiply `bool` to `bool`\n+// error-pattern:cannot multiply `bool` by `bool`\n \n fn main() { let x = true * false; }"}, {"sha": "8b5cde63c9991ec65d3dafed7c5fd8d28c57d30f", "filename": "src/test/ui/binop/binop-mul-bool.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: cannot multiply `bool` to `bool`\n+error[E0369]: cannot multiply `bool` by `bool`\n   --> $DIR/binop-mul-bool.rs:3:26\n    |\n LL | fn main() { let x = true * false; }"}, {"sha": "d18be51a45f6fc4904d75ec4f673abf53209e2c3", "filename": "src/test/ui/binop/binop-mul-i32-f32.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -0,0 +1,5 @@\n+fn foo(x: i32, y: f32) -> f32 {\n+    x * y //~ ERROR cannot multiply `i32` by `f32`\n+}\n+\n+fn main() {}"}, {"sha": "4a67fe2379b8d0c6afd6f0658f87371e708f1594", "filename": "src/test/ui/binop/binop-mul-i32-f32.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-i32-f32.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: cannot multiply `i32` by `f32`\n+  --> $DIR/binop-mul-i32-f32.rs:2:7\n+   |\n+LL |     x * y\n+   |       ^ no implementation for `i32 * f32`\n+   |\n+   = help: the trait `Mul<f32>` is not implemented for `i32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a2b779e29540b8f4353604b7d044a4426f13057e", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,14 +1,17 @@\n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:7:24\n    |\n-LL | trait NotObjectSafe { fn eq(&self, other: Self); }\n-   |       -------------                       ---- ...because method `eq` references the `Self` type in this parameter\n-   |       |\n-   |       this trait cannot be made into an object...\n LL | impl NotObjectSafe for dyn NotObjectSafe { }\n-   |                        ^^^^^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n+   |                        ^^^^^^^^^^^^^^^^^ `NotObjectSafe` cannot be made into an object\n    |\n    = help: consider moving `eq` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:6:43\n+   |\n+LL | trait NotObjectSafe { fn eq(&self, other: Self); }\n+   |       -------------                       ^^^^ ...because method `eq` references the `Self` type in this parameter\n+   |       |\n+   |       this trait cannot be made into an object...\n \n error: aborting due to previous error\n "}, {"sha": "68734cd4ccd6b1b1c2cbe76e915a07fabb3f555b", "filename": "src/test/ui/did_you_mean/trait-object-reference-without-parens-suggestion.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -14,9 +14,10 @@ error[E0038]: the trait `Copy` cannot be made into an object\n   --> $DIR/trait-object-reference-without-parens-suggestion.rs:4:12\n    |\n LL |     let _: &Copy + 'static;\n-   |            ^^^^^ the trait `Copy` cannot be made into an object\n+   |            ^^^^^ `Copy` cannot be made into an object\n    |\n    = note: the trait cannot be made into an object because it requires `Self: Sized`\n+   = note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n \n error: aborting due to 3 previous errors\n "}, {"sha": "513fda3097c145feadadf69c43375a228ba8673c", "filename": "src/test/ui/error-codes/E0033-teach.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -7,15 +7,21 @@ LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n error[E0038]: the trait `SomeTrait` cannot be made into an object\n   --> $DIR/E0033-teach.rs:8:20\n    |\n+LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n+   |                    ^^^^^^^^^^^^^^ `SomeTrait` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/E0033-teach.rs:4:8\n+   |\n LL | trait SomeTrait {\n    |       --------- this trait cannot be made into an object...\n LL |     fn foo();\n-   |        --- ...because associated function `foo` has no `self` parameter\n-...\n-LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n-   |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n+   |        ^^^ ...because associated function `foo` has no `self` parameter\n+help: consider turning `foo` into a method by giving it a `&self` argument\n    |\n-help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+LL |     fn foo(&self);\n+   |            ^^^^^\n+help: alternatively, consider constraining `foo` so it does not apply to trait objects\n    |\n LL |     fn foo() where Self: Sized;\n    |              ^^^^^^^^^^^^^^^^^"}, {"sha": "fc1248440d0437354f912022a0c13157576af237", "filename": "src/test/ui/error-codes/E0033.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -7,15 +7,21 @@ LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n error[E0038]: the trait `SomeTrait` cannot be made into an object\n   --> $DIR/E0033.rs:6:20\n    |\n+LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n+   |                    ^^^^^^^^^^^^^^ `SomeTrait` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/E0033.rs:2:8\n+   |\n LL | trait SomeTrait {\n    |       --------- this trait cannot be made into an object...\n LL |     fn foo();\n-   |        --- ...because associated function `foo` has no `self` parameter\n-...\n-LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n-   |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n+   |        ^^^ ...because associated function `foo` has no `self` parameter\n+help: consider turning `foo` into a method by giving it a `&self` argument\n    |\n-help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+LL |     fn foo(&self);\n+   |            ^^^^^\n+help: alternatively, consider constraining `foo` so it does not apply to trait objects\n    |\n LL |     fn foo() where Self: Sized;\n    |              ^^^^^^^^^^^^^^^^^"}, {"sha": "eb68a6298d1ac1217a3deca57ec8d270478359df", "filename": "src/test/ui/error-codes/E0038.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,15 +1,17 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/E0038.rs:5:16\n    |\n-LL | trait Trait {\n-   |       ----- this trait cannot be made into an object...\n-LL |     fn foo(&self) -> Self;\n-   |                      ---- ...because method `foo` references the `Self` type in its return type\n-...\n LL | fn call_foo(x: Box<dyn Trait>) {\n-   |                ^^^^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |                ^^^^^^^^^^^^^^ `Trait` cannot be made into an object\n    |\n    = help: consider moving `foo` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/E0038.rs:2:22\n+   |\n+LL | trait Trait {\n+   |       ----- this trait cannot be made into an object...\n+LL |     fn foo(&self) -> Self;\n+   |                      ^^^^ ...because method `foo` references the `Self` type in its return type\n \n error: aborting due to previous error\n "}, {"sha": "b61d5604455827c9752b70992bd52ee9d6dc894c", "filename": "src/test/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr", "status": "modified", "additions": 41, "deletions": 25, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,66 +1,82 @@\n error[E0038]: the trait `NonObjectSafe1` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:18:38\n    |\n+LL | fn takes_non_object_safe_ref<T>(obj: &dyn NonObjectSafe1) {\n+   |                                      ^^^^^^^^^^^^^^^^^^^ `NonObjectSafe1` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:4:23\n+   |\n LL | trait NonObjectSafe1: Sized {}\n-   |       --------------  ----- ...because it requires `Self: Sized`\n+   |       --------------  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-...\n-LL | fn takes_non_object_safe_ref<T>(obj: &dyn NonObjectSafe1) {\n-   |                                      ^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe1` cannot be made into an object\n \n error[E0038]: the trait `NonObjectSafe2` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:22:36\n    |\n+LL | fn return_non_object_safe_ref() -> &'static dyn NonObjectSafe2 {\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `NonObjectSafe2` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:7:8\n+   |\n LL | trait NonObjectSafe2 {\n    |       -------------- this trait cannot be made into an object...\n LL |     fn static_fn() {}\n-   |        --------- ...because associated function `static_fn` has no `self` parameter\n-...\n-LL | fn return_non_object_safe_ref() -> &'static dyn NonObjectSafe2 {\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe2` cannot be made into an object\n+   |        ^^^^^^^^^ ...because associated function `static_fn` has no `self` parameter\n+help: consider turning `static_fn` into a method by giving it a `&self` argument\n    |\n-help: consider turning `static_fn` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+LL |     fn static_fn(&self) {}\n+   |                  ^^^^^\n+help: alternatively, consider constraining `static_fn` so it does not apply to trait objects\n    |\n LL |     fn static_fn() where Self: Sized {}\n    |                    ^^^^^^^^^^^^^^^^^\n \n error[E0038]: the trait `NonObjectSafe3` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:27:35\n    |\n-LL | trait NonObjectSafe3 {\n-   |       -------------- this trait cannot be made into an object...\n-LL |     fn foo<T>(&self);\n-   |        --- ...because method `foo` has generic type parameters\n-...\n LL | fn takes_non_object_safe_box(obj: Box<dyn NonObjectSafe3>) {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe3` cannot be made into an object\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^ `NonObjectSafe3` cannot be made into an object\n    |\n    = help: consider moving `foo` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:11:8\n+   |\n+LL | trait NonObjectSafe3 {\n+   |       -------------- this trait cannot be made into an object...\n+LL |     fn foo<T>(&self);\n+   |        ^^^ ...because method `foo` has generic type parameters\n \n error[E0038]: the trait `NonObjectSafe4` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:31:35\n    |\n-LL | trait NonObjectSafe4 {\n-   |       -------------- this trait cannot be made into an object...\n-LL |     fn foo(&self, &Self);\n-   |                   ----- ...because method `foo` references the `Self` type in this parameter\n-...\n LL | fn return_non_object_safe_rc() -> std::rc::Rc<dyn NonObjectSafe4> {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe4` cannot be made into an object\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `NonObjectSafe4` cannot be made into an object\n    |\n    = help: consider moving `foo` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:15:19\n+   |\n+LL | trait NonObjectSafe4 {\n+   |       -------------- this trait cannot be made into an object...\n+LL |     fn foo(&self, &Self);\n+   |                   ^^^^^ ...because method `foo` references the `Self` type in this parameter\n \n error[E0038]: the trait `NonObjectSafe1` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:38:16\n    |\n+LL | impl Trait for dyn NonObjectSafe1 {}\n+   |                ^^^^^^^^^^^^^^^^^^ `NonObjectSafe1` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/feature-gate-object_safe_for_dispatch.rs:4:23\n+   |\n LL | trait NonObjectSafe1: Sized {}\n-   |       --------------  ----- ...because it requires `Self: Sized`\n+   |       --------------  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-...\n-LL | impl Trait for dyn NonObjectSafe1 {}\n-   |                ^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe1` cannot be made into an object\n \n error: aborting due to 5 previous errors\n "}, {"sha": "2f3726bdb33a825dffb2ad4408414ca749d34242", "filename": "src/test/ui/impl-trait/object-unsafe-trait-in-return-position-dyn-trait.stderr", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,31 +1,43 @@\n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/object-unsafe-trait-in-return-position-dyn-trait.rs:21:13\n    |\n+LL | fn car() -> dyn NotObjectSafe {\n+   |             ^^^^^^^^^^^^^^^^^ `NotObjectSafe` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-unsafe-trait-in-return-position-dyn-trait.rs:3:8\n+   |\n LL | trait NotObjectSafe {\n    |       ------------- this trait cannot be made into an object...\n LL |     fn foo() -> Self;\n-   |        --- ...because associated function `foo` has no `self` parameter\n-...\n-LL | fn car() -> dyn NotObjectSafe {\n-   |             ^^^^^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n+   |        ^^^ ...because associated function `foo` has no `self` parameter\n+help: consider turning `foo` into a method by giving it a `&self` argument\n    |\n-help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+LL |     fn foo(&self) -> Self;\n+   |            ^^^^^\n+help: alternatively, consider constraining `foo` so it does not apply to trait objects\n    |\n LL |     fn foo() -> Self where Self: Sized;\n    |                      ^^^^^^^^^^^^^^^^^\n \n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/object-unsafe-trait-in-return-position-dyn-trait.rs:28:13\n    |\n+LL | fn cat() -> Box<dyn NotObjectSafe> {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ `NotObjectSafe` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-unsafe-trait-in-return-position-dyn-trait.rs:3:8\n+   |\n LL | trait NotObjectSafe {\n    |       ------------- this trait cannot be made into an object...\n LL |     fn foo() -> Self;\n-   |        --- ...because associated function `foo` has no `self` parameter\n-...\n-LL | fn cat() -> Box<dyn NotObjectSafe> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n+   |        ^^^ ...because associated function `foo` has no `self` parameter\n+help: consider turning `foo` into a method by giving it a `&self` argument\n    |\n-help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+LL |     fn foo(&self) -> Self;\n+   |            ^^^^^\n+help: alternatively, consider constraining `foo` so it does not apply to trait objects\n    |\n LL |     fn foo() -> Self where Self: Sized;\n    |                      ^^^^^^^^^^^^^^^^^"}, {"sha": "66b58571751ceb6b5660092d84aa167e2e4c9857", "filename": "src/test/ui/inline-const/const-expr-macro.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-expr-macro.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -0,0 +1,12 @@\n+// run-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(inline_const)]\n+macro_rules! do_const_block{\n+    ($val:block) => { const $val }\n+}\n+\n+fn main() {\n+    let s = do_const_block!({ 22 });\n+    assert_eq!(s, 22);\n+}"}, {"sha": "86b530e85a80ac8091e6d411ab9d1bf7fb9d5e34", "filename": "src/test/ui/issues/issue-18959.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,15 +1,17 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-18959.rs:11:11\n    |\n-LL | pub trait Foo { fn foo<T>(&self, ext_thing: &T); }\n-   |                    --- ...because method `foo` has generic type parameters\n-LL | pub trait Bar: Foo { }\n-   |           --- this trait cannot be made into an object...\n-...\n LL | fn foo(b: &dyn Bar) {\n-   |           ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |           ^^^^^^^^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `foo` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-18959.rs:1:20\n+   |\n+LL | pub trait Foo { fn foo<T>(&self, ext_thing: &T); }\n+   |                    ^^^ ...because method `foo` has generic type parameters\n+LL | pub trait Bar: Foo { }\n+   |           --- this trait cannot be made into an object...\n \n error: aborting due to previous error\n "}, {"sha": "c3a5d3dfeee7ddcfd68ce29bafba5aeef6acf117", "filename": "src/test/ui/issues/issue-19380.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,15 +1,21 @@\n error[E0038]: the trait `Qiz` cannot be made into an object\n   --> $DIR/issue-19380.rs:11:9\n    |\n+LL |   foos: &'static [&'static (dyn Qiz + 'static)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Qiz` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-19380.rs:2:6\n+   |\n LL | trait Qiz {\n    |       --- this trait cannot be made into an object...\n LL |   fn qiz();\n-   |      --- ...because associated function `qiz` has no `self` parameter\n-...\n-LL |   foos: &'static [&'static (dyn Qiz + 'static)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Qiz` cannot be made into an object\n+   |      ^^^ ...because associated function `qiz` has no `self` parameter\n+help: consider turning `qiz` into a method by giving it a `&self` argument\n    |\n-help: consider turning `qiz` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+LL |   fn qiz(&self);\n+   |          ^^^^^\n+help: alternatively, consider constraining `qiz` so it does not apply to trait objects\n    |\n LL |   fn qiz() where Self: Sized;\n    |            ^^^^^^^^^^^^^^^^^"}, {"sha": "555d0ff0dc787c71f92fce52d3dea6df749bf055", "filename": "src/test/ui/issues/issue-19538.stderr", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,30 +1,34 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-19538.rs:17:15\n    |\n+LL |     let test: &mut dyn Bar = &mut thing;\n+   |               ^^^^^^^^^^^^ `Bar` cannot be made into an object\n+   |\n+   = help: consider moving `foo` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-19538.rs:2:8\n+   |\n LL |     fn foo<T>(&self, val: T);\n-   |        --- ...because method `foo` has generic type parameters\n+   |        ^^^ ...because method `foo` has generic type parameters\n ...\n LL | trait Bar: Foo { }\n    |       --- this trait cannot be made into an object...\n-...\n-LL |     let test: &mut dyn Bar = &mut thing;\n-   |               ^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = help: consider moving `foo` to another trait\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-19538.rs:17:30\n    |\n+LL |     let test: &mut dyn Bar = &mut thing;\n+   |                              ^^^^^^^^^^ `Bar` cannot be made into an object\n+   |\n+   = help: consider moving `foo` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-19538.rs:2:8\n+   |\n LL |     fn foo<T>(&self, val: T);\n-   |        --- ...because method `foo` has generic type parameters\n+   |        ^^^ ...because method `foo` has generic type parameters\n ...\n LL | trait Bar: Foo { }\n    |       --- this trait cannot be made into an object...\n-...\n-LL |     let test: &mut dyn Bar = &mut thing;\n-   |                              ^^^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = help: consider moving `foo` to another trait\n    = note: required because of the requirements on the impl of `CoerceUnsized<&mut dyn Bar>` for `&mut Thing`\n    = note: required by cast to type `&mut dyn Bar`\n "}, {"sha": "1d7f252e5566ddc1d5475dbf60e27653bd95a605", "filename": "src/test/ui/issues/issue-20692.stderr", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,27 +1,32 @@\n error[E0038]: the trait `Array` cannot be made into an object\n   --> $DIR/issue-20692.rs:7:5\n    |\n+LL |     &dyn Array;\n+   |     ^^^^^^^^^^ `Array` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-20692.rs:1:14\n+   |\n LL | trait Array: Sized + Copy {}\n-   |       -----  -----   ---- ...because it requires `Self: Sized`\n+   |       -----  ^^^^^   ^^^^ ...because it requires `Self: Sized`\n    |       |      |\n    |       |      ...because it requires `Self: Sized`\n    |       this trait cannot be made into an object...\n-...\n-LL |     &dyn Array;\n-   |     ^^^^^^^^^^ the trait `Array` cannot be made into an object\n \n error[E0038]: the trait `Array` cannot be made into an object\n   --> $DIR/issue-20692.rs:4:13\n    |\n+LL |     let _ = x\n+   |             ^ `Array` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-20692.rs:1:14\n+   |\n LL | trait Array: Sized + Copy {}\n-   |       -----  -----   ---- ...because it requires `Self: Sized`\n+   |       -----  ^^^^^   ^^^^ ...because it requires `Self: Sized`\n    |       |      |\n    |       |      ...because it requires `Self: Sized`\n    |       this trait cannot be made into an object...\n-...\n-LL |     let _ = x\n-   |             ^ the trait `Array` cannot be made into an object\n-   |\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Array>` for `&T`\n    = note: required by cast to type `&dyn Array`\n "}, {"sha": "2c873243fe9e4d97fa35996962fdd525cd23b7f9", "filename": "src/test/ui/issues/issue-26056.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-26056.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-26056.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26056.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,13 +1,16 @@\n error[E0038]: the trait `Map` cannot be made into an object\n   --> $DIR/issue-26056.rs:20:13\n    |\n+LL |         as &dyn Map<Key=u32,MapValue=u32>;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Map` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-26056.rs:9:12\n+   |\n LL | trait Map: MapLookup<<Self as Map>::Key> {\n-   |       ---  ----------------------------- ...because it uses `Self` as a type parameter in this\n+   |       ---  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because it uses `Self` as a type parameter\n    |       |\n    |       this trait cannot be made into an object...\n-...\n-LL |         as &dyn Map<Key=u32,MapValue=u32>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Map` cannot be made into an object\n \n error: aborting due to previous error\n "}, {"sha": "203cd0630ebd006af0c87b6c7b83e54c1aec7964", "filename": "src/test/ui/issues/issue-28576.stderr", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-28576.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-28576.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28576.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,16 +1,19 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-28576.rs:7:12\n    |\n-LL |   pub trait Bar: Foo<Assoc=()> {\n-   |             ---  -------------\n-   |             |    |   |\n-   |             |    |   ...because it uses `Self` as a type parameter in this\n-   |             |    ...because it uses `Self` as a type parameter in this\n-   |             this trait cannot be made into an object...\n-LL |       fn new(&self, b: &\n LL | /            dyn Bar\n LL | |               <Assoc=()>\n-   | |________________________^ the trait `Bar` cannot be made into an object\n+   | |________________________^ `Bar` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-28576.rs:5:16\n+   |\n+LL | pub trait Bar: Foo<Assoc=()> {\n+   |           ---  ^^^^^^^^^^^^^\n+   |           |    |   |\n+   |           |    |   ...because it uses `Self` as a type parameter\n+   |           |    ...because it uses `Self` as a type parameter\n+   |           this trait cannot be made into an object...\n \n error: aborting due to previous error\n "}, {"sha": "9719c3afa68c13fb5347f9b23edfd4830460a861", "filename": "src/test/ui/issues/issue-28837.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-28837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-28837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28837.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -7,7 +7,7 @@ fn main() {\n \n     a - a; //~ ERROR cannot subtract `A` from `A`\n \n-    a * a; //~ ERROR cannot multiply `A` to `A`\n+    a * a; //~ ERROR cannot multiply `A` by `A`\n \n     a / a; //~ ERROR cannot divide `A` by `A`\n "}, {"sha": "07f67bc3de79d6bc4cda38cf2d42b959cacb227a", "filename": "src/test/ui/issues/issue-28837.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-28837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-28837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28837.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -18,7 +18,7 @@ LL |     a - a;\n    |\n    = note: an implementation of `std::ops::Sub` might be missing for `A`\n \n-error[E0369]: cannot multiply `A` to `A`\n+error[E0369]: cannot multiply `A` by `A`\n   --> $DIR/issue-28837.rs:10:7\n    |\n LL |     a * a;"}, {"sha": "c970163fcab2c65281b2f4bfbff92c28b87b1260", "filename": "src/test/ui/issues/issue-35668.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-35668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-35668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35668.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,6 +1,6 @@\n fn func<'a, T>(a: &'a [T]) -> impl Iterator<Item=&'a T> {\n     a.iter().map(|a| a*a)\n-    //~^ ERROR cannot multiply `&T` to `&T`\n+    //~^ ERROR cannot multiply `&T` by `&T`\n }\n \n fn main() {"}, {"sha": "81a2bb88c89a38a9a196e82dfb4816af85feef66", "filename": "src/test/ui/issues/issue-35668.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-35668.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-35668.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35668.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: cannot multiply `&T` to `&T`\n+error[E0369]: cannot multiply `&T` by `&T`\n   --> $DIR/issue-35668.rs:2:23\n    |\n LL |     a.iter().map(|a| a*a)"}, {"sha": "b987a90b28baabcf50f5085d1e4fbc777972e3f3", "filename": "src/test/ui/issues/issue-3820.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-3820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-3820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3820.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -11,5 +11,5 @@ impl Thing {\n fn main() {\n     let u = Thing {x: 2};\n     let _v = u.mul(&3); // This is ok\n-    let w = u * 3; //~ ERROR cannot multiply `{integer}` to `Thing`\n+    let w = u * 3; //~ ERROR cannot multiply `Thing` by `{integer}`\n }"}, {"sha": "84f8f9bd14786845c21a90437004b3c0e3795180", "filename": "src/test/ui/issues/issue-3820.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-3820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-3820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3820.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: cannot multiply `{integer}` to `Thing`\n+error[E0369]: cannot multiply `Thing` by `{integer}`\n   --> $DIR/issue-3820.rs:14:15\n    |\n LL |     let w = u * 3;"}, {"sha": "d7721d7e69cd47539e9123c999c7f510b37f5915", "filename": "src/test/ui/issues/issue-38404.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-38404.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-38404.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38404.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,12 +1,16 @@\n error[E0038]: the trait `B` cannot be made into an object\n   --> $DIR/issue-38404.rs:3:15\n    |\n+LL | trait C<T>: A<dyn B<T, Output=usize>> {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^ `B` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-38404.rs:1:13\n+   |\n LL | trait A<T>: std::ops::Add<Self> + Sized {}\n-   |             ------------------- ...because it uses `Self` as a type parameter in this\n+   |             ^^^^^^^^^^^^^^^^^^^ ...because it uses `Self` as a type parameter\n LL | trait B<T>: A<T> {}\n    |       - this trait cannot be made into an object...\n-LL | trait C<T>: A<dyn B<T, Output=usize>> {}\n-   |               ^^^^^^^^^^^^^^^^^^^^^^ the trait `B` cannot be made into an object\n \n error: aborting due to previous error\n "}, {"sha": "d41488c15f737b9b524396fe220c780fa3ad4f28", "filename": "src/test/ui/issues/issue-38604.stderr", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-38604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-38604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38604.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,25 +1,30 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/issue-38604.rs:14:13\n    |\n+LL |     let _f: Box<dyn Foo> =\n+   |             ^^^^^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-38604.rs:2:22\n+   |\n LL | trait Foo where u32: Q<Self> {\n-   |       ---            ------- ...because it uses `Self` as a type parameter in this\n+   |       ---            ^^^^^^^ ...because it uses `Self` as a type parameter\n    |       |\n    |       this trait cannot be made into an object...\n-...\n-LL |     let _f: Box<dyn Foo> =\n-   |             ^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/issue-38604.rs:15:9\n    |\n+LL |         Box::new(());\n+   |         ^^^^^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-38604.rs:2:22\n+   |\n LL | trait Foo where u32: Q<Self> {\n-   |       ---            ------- ...because it uses `Self` as a type parameter in this\n+   |       ---            ^^^^^^^ ...because it uses `Self` as a type parameter\n    |       |\n    |       this trait cannot be made into an object...\n-...\n-LL |         Box::new(());\n-   |         ^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n-   |\n    = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn Foo>>` for `Box<()>`\n    = note: required by cast to type `Box<dyn Foo>`\n "}, {"sha": "93bd951d3fa1e5035f73eeb2009529eca79b85e5", "filename": "src/test/ui/issues/issue-50781.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,10 +1,8 @@\n error: the trait `X` cannot be made into an object\n   --> $DIR/issue-50781.rs:6:8\n    |\n-LL | trait X {\n-   |       - this trait cannot be made into an object...\n LL |     fn foo(&self) where Self: Trait;\n-   |        ^^^ ...because method `foo` references the `Self` type in its `where` clause\n+   |        ^^^\n    |\n note: the lint level is defined here\n   --> $DIR/issue-50781.rs:1:9\n@@ -13,6 +11,13 @@ LL | #![deny(where_clauses_object_safety)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #51443 <https://github.com/rust-lang/rust/issues/51443>\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-50781.rs:6:8\n+   |\n+LL | trait X {\n+   |       - this trait cannot be made into an object...\n+LL |     fn foo(&self) where Self: Trait;\n+   |        ^^^ ...because method `foo` references the `Self` type in its `where` clause\n    = help: consider moving `foo` to another trait\n \n error: aborting due to previous error"}, {"sha": "64e56f8c7904340075e79b0c3c273fb9618e98f9", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.curr.stderr", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -12,25 +12,30 @@ LL |     take_param(&x);\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:28:19\n    |\n+LL |     let z = &x as &dyn Foo;\n+   |                   ^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/kindck-inherited-copy-bound.rs:10:13\n+   |\n LL | trait Foo : Copy {\n-   |       ---   ---- ...because it requires `Self: Sized`\n+   |       ---   ^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-...\n-LL |     let z = &x as &dyn Foo;\n-   |                   ^^^^^^^^ the trait `Foo` cannot be made into an object\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:28:13\n    |\n+LL |     let z = &x as &dyn Foo;\n+   |             ^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/kindck-inherited-copy-bound.rs:10:13\n+   |\n LL | trait Foo : Copy {\n-   |       ---   ---- ...because it requires `Self: Sized`\n+   |       ---   ^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-...\n-LL |     let z = &x as &dyn Foo;\n-   |             ^^ the trait `Foo` cannot be made into an object\n-   |\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Foo>` for `&Box<{integer}>`\n    = note: required by cast to type `&dyn Foo`\n "}, {"sha": "57f7551fd4018a6b8de5dc2542d6625822901b51", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -12,14 +12,16 @@ LL |     take_param(&x);\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:28:13\n    |\n+LL |     let z = &x as &dyn Foo;\n+   |             ^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/kindck-inherited-copy-bound.rs:10:13\n+   |\n LL | trait Foo : Copy {\n-   |       ---   ---- ...because it requires `Self: Sized`\n+   |       ---   ^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-...\n-LL |     let z = &x as &dyn Foo;\n-   |             ^^ the trait `Foo` cannot be made into an object\n-   |\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Foo>` for `&Box<i32>`\n    = note: required by cast to type `&dyn Foo`\n "}, {"sha": "4be7420e33c17246f9f633b61fd5fdd8a447b6aa", "filename": "src/test/ui/mismatched_types/binops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     1 + Some(1); //~ ERROR cannot add `Option<{integer}>` to `{integer}`\n     2 as usize - Some(1); //~ ERROR cannot subtract `Option<{integer}>` from `usize`\n-    3 * (); //~ ERROR cannot multiply `()` to `{integer}`\n+    3 * (); //~ ERROR cannot multiply `{integer}` by `()`\n     4 / \"\"; //~ ERROR cannot divide `{integer}` by `&str`\n     5 < String::new(); //~ ERROR can't compare `{integer}` with `String`\n     6 == Ok(1); //~ ERROR can't compare `{integer}` with `std::result::Result<{integer}, _>`"}, {"sha": "f2bfb12ee9c8031d347f21305159d8816158c846", "filename": "src/test/ui/mismatched_types/binops.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -14,7 +14,7 @@ LL |     2 as usize - Some(1);\n    |\n    = help: the trait `Sub<Option<{integer}>>` is not implemented for `usize`\n \n-error[E0277]: cannot multiply `()` to `{integer}`\n+error[E0277]: cannot multiply `{integer}` by `()`\n   --> $DIR/binops.rs:4:7\n    |\n LL |     3 * ();"}, {"sha": "35ec586892c05b13e2934aba8465dfee635f9a2e", "filename": "src/test/ui/object-safety/object-safety-associated-consts.curr.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,15 +1,17 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-associated-consts.rs:12:30\n    |\n-LL | trait Bar {\n-   |       --- this trait cannot be made into an object...\n-LL |     const X: usize;\n-   |           - ...because it contains this associated `const`\n-...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                              ^^^^^^^^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `X` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety-associated-consts.rs:9:11\n+   |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n+LL |     const X: usize;\n+   |           ^ ...because it contains this associated `const`\n \n error: aborting due to previous error\n "}, {"sha": "d51734ed2316bbf1627a665e82fd338801617f28", "filename": "src/test/ui/object-safety/object-safety-associated-consts.object_safe_for_dispatch.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,15 +1,17 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-associated-consts.rs:14:5\n    |\n-LL | trait Bar {\n-   |       --- this trait cannot be made into an object...\n-LL |     const X: usize;\n-   |           - ...because it contains this associated `const`\n-...\n LL |     t\n-   |     ^ the trait `Bar` cannot be made into an object\n+   |     ^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `X` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety-associated-consts.rs:9:11\n+   |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n+LL |     const X: usize;\n+   |           ^ ...because it contains this associated `const`\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n "}, {"sha": "89c4f8ced79f6ce77c9ee6fd5fb5eb1939566329", "filename": "src/test/ui/object-safety/object-safety-bounds.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-bounds.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,13 +1,16 @@\n error[E0038]: the trait `X` cannot be made into an object\n   --> $DIR/object-safety-bounds.rs:7:11\n    |\n+LL | fn f() -> Box<dyn X<U = u32>> {\n+   |           ^^^^^^^^^^^^^^^^^^^ `X` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety-bounds.rs:4:13\n+   |\n LL | trait X {\n    |       - this trait cannot be made into an object...\n LL |     type U: PartialEq<Self>;\n-   |             --------------- ...because it uses `Self` as a type parameter in this\n-...\n-LL | fn f() -> Box<dyn X<U = u32>> {\n-   |           ^^^^^^^^^^^^^^^^^^^ the trait `X` cannot be made into an object\n+   |             ^^^^^^^^^^^^^^^ ...because it uses `Self` as a type parameter\n \n error: aborting due to previous error\n "}, {"sha": "8d6094c5144290c68ca2bc0def7f61368b4fa25f", "filename": "src/test/ui/object-safety/object-safety-generics.curr.stderr", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,28 +1,32 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:18:30\n    |\n-LL | trait Bar {\n-   |       --- this trait cannot be made into an object...\n-LL |     fn bar<T>(&self, t: T);\n-   |        --- ...because method `bar` has generic type parameters\n-...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                              ^^^^^^^^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `bar` to another trait\n-\n-error[E0038]: the trait `Bar` cannot be made into an object\n-  --> $DIR/object-safety-generics.rs:24:39\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety-generics.rs:10:8\n    |\n LL | trait Bar {\n    |       --- this trait cannot be made into an object...\n LL |     fn bar<T>(&self, t: T);\n-   |        --- ...because method `bar` has generic type parameters\n-...\n+   |        ^^^ ...because method `bar` has generic type parameters\n+\n+error[E0038]: the trait `Bar` cannot be made into an object\n+  --> $DIR/object-safety-generics.rs:24:39\n+   |\n LL | fn make_bar_explicit<T:Bar>(t: &T) -> &dyn Bar {\n-   |                                       ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                                       ^^^^^^^^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `bar` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety-generics.rs:10:8\n+   |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn bar<T>(&self, t: T);\n+   |        ^^^ ...because method `bar` has generic type parameters\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3d2b2bb228cb529395c185dc71bbaf897a77d2ea", "filename": "src/test/ui/object-safety/object-safety-generics.object_safe_for_dispatch.stderr", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,30 +1,34 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:20:5\n    |\n-LL | trait Bar {\n-   |       --- this trait cannot be made into an object...\n-LL |     fn bar<T>(&self, t: T);\n-   |        --- ...because method `bar` has generic type parameters\n-...\n LL |     t\n-   |     ^ the trait `Bar` cannot be made into an object\n+   |     ^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `bar` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety-generics.rs:10:8\n+   |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn bar<T>(&self, t: T);\n+   |        ^^^ ...because method `bar` has generic type parameters\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:26:5\n    |\n-LL | trait Bar {\n-   |       --- this trait cannot be made into an object...\n-LL |     fn bar<T>(&self, t: T);\n-   |        --- ...because method `bar` has generic type parameters\n-...\n LL |     t as &dyn Bar\n-   |     ^ the trait `Bar` cannot be made into an object\n+   |     ^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `bar` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety-generics.rs:10:8\n+   |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn bar<T>(&self, t: T);\n+   |        ^^^ ...because method `bar` has generic type parameters\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n "}, {"sha": "0262d536246dc16ccd4b09fbe9ce670ab7f734f9", "filename": "src/test/ui/object-safety/object-safety-issue-22040.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-issue-22040.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-issue-22040.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-issue-22040.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,13 +1,16 @@\n error[E0038]: the trait `Expr` cannot be made into an object\n   --> $DIR/object-safety-issue-22040.rs:12:23\n    |\n+LL |     elements: Vec<Box<dyn Expr + 'x>>,\n+   |                       ^^^^^^^^^^^^^ `Expr` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety-issue-22040.rs:5:21\n+   |\n LL | trait Expr: Debug + PartialEq {\n-   |       ----          --------- ...because it uses `Self` as a type parameter in this\n+   |       ----          ^^^^^^^^^ ...because it uses `Self` as a type parameter\n    |       |\n    |       this trait cannot be made into an object...\n-...\n-LL |     elements: Vec<Box<dyn Expr + 'x>>,\n-   |                       ^^^^^^^^^^^^^ the trait `Expr` cannot be made into an object\n \n error: aborting due to previous error\n "}, {"sha": "336929702e6cd3d032a9f24efa3cbd7356df1d41", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.curr.stderr", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,28 +1,32 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:22:30\n    |\n-LL | trait Bar {\n-   |       --- this trait cannot be made into an object...\n-LL |     fn bar(&self, x: &Self);\n-   |                      ----- ...because method `bar` references the `Self` type in this parameter\n-...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                              ^^^^^^^^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `bar` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety-mentions-Self.rs:11:22\n+   |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn bar(&self, x: &Self);\n+   |                      ^^^^^ ...because method `bar` references the `Self` type in this parameter\n \n error[E0038]: the trait `Baz` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:28:30\n    |\n-LL | trait Baz {\n-   |       --- this trait cannot be made into an object...\n-LL |     fn baz(&self) -> Self;\n-   |                      ---- ...because method `baz` references the `Self` type in its return type\n-...\n LL | fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n-   |                              ^^^^^^^^ the trait `Baz` cannot be made into an object\n+   |                              ^^^^^^^^ `Baz` cannot be made into an object\n    |\n    = help: consider moving `baz` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety-mentions-Self.rs:15:22\n+   |\n+LL | trait Baz {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn baz(&self) -> Self;\n+   |                      ^^^^ ...because method `baz` references the `Self` type in its return type\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6e7896e309cc691ec9b20182800625b587f2e29a", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.object_safe_for_dispatch.stderr", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,30 +1,34 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:24:5\n    |\n-LL | trait Bar {\n-   |       --- this trait cannot be made into an object...\n-LL |     fn bar(&self, x: &Self);\n-   |                      ----- ...because method `bar` references the `Self` type in this parameter\n-...\n LL |     t\n-   |     ^ the trait `Bar` cannot be made into an object\n+   |     ^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `bar` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety-mentions-Self.rs:11:22\n+   |\n+LL | trait Bar {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn bar(&self, x: &Self);\n+   |                      ^^^^^ ...because method `bar` references the `Self` type in this parameter\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n \n error[E0038]: the trait `Baz` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:30:5\n    |\n-LL | trait Baz {\n-   |       --- this trait cannot be made into an object...\n-LL |     fn baz(&self) -> Self;\n-   |                      ---- ...because method `baz` references the `Self` type in its return type\n-...\n LL |     t\n-   |     ^ the trait `Baz` cannot be made into an object\n+   |     ^ `Baz` cannot be made into an object\n    |\n    = help: consider moving `baz` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety-mentions-Self.rs:15:22\n+   |\n+LL | trait Baz {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn baz(&self) -> Self;\n+   |                      ^^^^ ...because method `baz` references the `Self` type in its return type\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Baz>` for `&T`\n    = note: required by cast to type `&dyn Baz`\n "}, {"sha": "e00d6bb2f4a36bc5eda071146ad32a44309c1705", "filename": "src/test/ui/object-safety/object-safety-no-static.curr.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,15 +1,21 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/object-safety-no-static.rs:12:18\n    |\n+LL | fn diverges() -> Box<dyn Foo> {\n+   |                  ^^^^^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety-no-static.rs:9:8\n+   |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn foo() {}\n-   |        --- ...because associated function `foo` has no `self` parameter\n-...\n-LL | fn diverges() -> Box<dyn Foo> {\n-   |                  ^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |        ^^^ ...because associated function `foo` has no `self` parameter\n+help: consider turning `foo` into a method by giving it a `&self` argument\n    |\n-help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+LL |     fn foo(&self) {}\n+   |            ^^^^^\n+help: alternatively, consider constraining `foo` so it does not apply to trait objects\n    |\n LL |     fn foo() where Self: Sized {}\n    |              ^^^^^^^^^^^^^^^^^"}, {"sha": "91a071f567813c8e4978c03485b1380576b8c1b2", "filename": "src/test/ui/object-safety/object-safety-no-static.object_safe_for_dispatch.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,17 +1,23 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/object-safety-no-static.rs:22:27\n    |\n+LL |     let b: Box<dyn Foo> = Box::new(Bar);\n+   |                           ^^^^^^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety-no-static.rs:9:8\n+   |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn foo() {}\n-   |        --- ...because associated function `foo` has no `self` parameter\n-...\n-LL |     let b: Box<dyn Foo> = Box::new(Bar);\n-   |                           ^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n-   |\n+   |        ^^^ ...because associated function `foo` has no `self` parameter\n    = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn Foo>>` for `Box<Bar>`\n    = note: required by cast to type `Box<dyn Foo>`\n-help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+help: consider turning `foo` into a method by giving it a `&self` argument\n+   |\n+LL |     fn foo(&self) {}\n+   |            ^^^^^\n+help: alternatively, consider constraining `foo` so it does not apply to trait objects\n    |\n LL |     fn foo() where Self: Sized {}\n    |              ^^^^^^^^^^^^^^^^^"}, {"sha": "71236c8e3843805cc6980a4a65d8284f4a0d59a3", "filename": "src/test/ui/object-safety/object-safety-sized-2.curr.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,13 +1,16 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-sized-2.rs:14:30\n    |\n+LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n+   |                              ^^^^^^^^ `Bar` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety-sized-2.rs:9:18\n+   |\n LL | trait Bar\n    |       --- this trait cannot be made into an object...\n LL |     where Self : Sized\n-   |                  ----- ...because it requires `Self: Sized`\n-...\n-LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                  ^^^^^ ...because it requires `Self: Sized`\n \n error: aborting due to previous error\n "}, {"sha": "b6e4903b0790ba51c28a65a235bb087c33066ba7", "filename": "src/test/ui/object-safety/object-safety-sized-2.object_safe_for_dispatch.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,14 +1,16 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-sized-2.rs:16:5\n    |\n+LL |     t\n+   |     ^ `Bar` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety-sized-2.rs:9:18\n+   |\n LL | trait Bar\n    |       --- this trait cannot be made into an object...\n LL |     where Self : Sized\n-   |                  ----- ...because it requires `Self: Sized`\n-...\n-LL |     t\n-   |     ^ the trait `Bar` cannot be made into an object\n-   |\n+   |                  ^^^^^ ...because it requires `Self: Sized`\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n "}, {"sha": "94b06ee934d44bf69368786b98bbb12c66d9f918", "filename": "src/test/ui/object-safety/object-safety-sized.curr.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,13 +1,16 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-sized.rs:12:30\n    |\n+LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n+   |                              ^^^^^^^^ `Bar` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety-sized.rs:8:13\n+   |\n LL | trait Bar : Sized {\n-   |       ---   ----- ...because it requires `Self: Sized`\n+   |       ---   ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-...\n-LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n \n error: aborting due to previous error\n "}, {"sha": "645852c7e71c2f1536d2bce6d2ffcf937dfe72e4", "filename": "src/test/ui/object-safety/object-safety-sized.object_safe_for_dispatch.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,14 +1,16 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-sized.rs:14:5\n    |\n+LL |     t\n+   |     ^ `Bar` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety-sized.rs:8:13\n+   |\n LL | trait Bar : Sized {\n-   |       ---   ----- ...because it requires `Self: Sized`\n+   |       ---   ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-...\n-LL |     t\n-   |     ^ the trait `Bar` cannot be made into an object\n-   |\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n "}, {"sha": "a106ab995b0a5160106a82680a6bdd47794a51c0", "filename": "src/test/ui/object-safety/object-safety-supertrait-mentions-Self.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-Self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-Self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-Self.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,13 +1,16 @@\n error[E0038]: the trait `Baz` cannot be made into an object\n   --> $DIR/object-safety-supertrait-mentions-Self.rs:15:31\n    |\n+LL | fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n+   |                               ^^^^^^^ `Baz` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety-supertrait-mentions-Self.rs:8:13\n+   |\n LL | trait Baz : Bar<Self> {\n-   |       ---   --------- ...because it uses `Self` as a type parameter in this\n+   |       ---   ^^^^^^^^^ ...because it uses `Self` as a type parameter\n    |       |\n    |       this trait cannot be made into an object...\n-...\n-LL | fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n-   |                               ^^^^^^^ the trait `Baz` cannot be made into an object\n \n error: aborting due to previous error\n "}, {"sha": "7647c766ef914e64ba93a5fd6212362002440f43", "filename": "src/test/ui/pattern/pattern-tyvar-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,6 +1,6 @@\n enum Bar { T1((), Option<Vec<isize>>), T2, }\n \n fn foo(t: Bar) -> isize { match t { Bar::T1(_, Some(x)) => { return x * 3; } _ => { panic!(); } } }\n-//~^ ERROR cannot multiply `{integer}` to `Vec<isize>`\n+//~^ ERROR cannot multiply `Vec<isize>` by `{integer}`\n \n fn main() { }"}, {"sha": "121817e705690498c24df59721f0f2524931b781", "filename": "src/test/ui/pattern/pattern-tyvar-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: cannot multiply `{integer}` to `Vec<isize>`\n+error[E0369]: cannot multiply `Vec<isize>` by `{integer}`\n   --> $DIR/pattern-tyvar-2.rs:3:71\n    |\n LL | fn foo(t: Bar) -> isize { match t { Bar::T1(_, Some(x)) => { return x * 3; } _ => { panic!(); } } }"}, {"sha": "782cfeec4bcaf3f2e0a82d131f114f485e5db819", "filename": "src/test/ui/resolve/issue-3907-2.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -2,12 +2,13 @@ error[E0038]: the trait `issue_3907::Foo` cannot be made into an object\n   --> $DIR/issue-3907-2.rs:11:12\n    |\n LL | fn bar(_x: Foo) {}\n-   |            ^^^ the trait `issue_3907::Foo` cannot be made into an object\n-   | \n-  ::: $DIR/auxiliary/issue-3907.rs:2:8\n+   |            ^^^ `issue_3907::Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/auxiliary/issue-3907.rs:2:8\n    |\n LL |     fn bar();\n-   |        --- the trait cannot be made into an object because associated function `bar` has no `self` parameter\n+   |        ^^^ the trait cannot be made into an object because associated function `bar` has no `self` parameter\n \n error: aborting due to previous error\n "}, {"sha": "35a65facb57e62ddff0474c4851b8a009d544bfb", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.curr.stderr", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,31 +1,36 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:33:32\n    |\n-LL | trait Foo {\n-   |       --- this trait cannot be made into an object...\n LL |     fn foo(self: &Rc<Self>) -> usize;\n-   |                  ---------\n-   |                  |\n-   |                  ...because method `foo`'s `self` parameter cannot be dispatched on\n-   |                  help: consider changing method `foo`'s `self` parameter to be `&self`: `&Self`\n+   |                  --------- help: consider changing method `foo`'s `self` parameter to be `&self`: `&Self`\n ...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n-   |                                ^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |                                ^^^^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/arbitrary-self-types-not-object-safe.rs:8:18\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn foo(self: &Rc<Self>) -> usize;\n+   |                  ^^^^^^^^^ ...because method `foo`'s `self` parameter cannot be dispatched on\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:33:13\n    |\n-LL | trait Foo {\n-   |       --- this trait cannot be made into an object...\n LL |     fn foo(self: &Rc<Self>) -> usize;\n-   |                  ---------\n-   |                  |\n-   |                  ...because method `foo`'s `self` parameter cannot be dispatched on\n-   |                  help: consider changing method `foo`'s `self` parameter to be `&self`: `&Self`\n+   |                  --------- help: consider changing method `foo`'s `self` parameter to be `&self`: `&Self`\n ...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n-   |             ^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |             ^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/arbitrary-self-types-not-object-safe.rs:8:18\n    |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn foo(self: &Rc<Self>) -> usize;\n+   |                  ^^^^^^^^^ ...because method `foo`'s `self` parameter cannot be dispatched on\n    = note: required because of the requirements on the impl of `CoerceUnsized<Rc<dyn Foo>>` for `Rc<usize>`\n    = note: required by cast to type `Rc<dyn Foo>`\n "}, {"sha": "a74752cf840f22a96c2170ed6bee691d3ffaf4a1", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,17 +1,19 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:33:13\n    |\n-LL | trait Foo {\n-   |       --- this trait cannot be made into an object...\n LL |     fn foo(self: &Rc<Self>) -> usize;\n-   |                  ---------\n-   |                  |\n-   |                  ...because method `foo`'s `self` parameter cannot be dispatched on\n-   |                  help: consider changing method `foo`'s `self` parameter to be `&self`: `&Self`\n+   |                  --------- help: consider changing method `foo`'s `self` parameter to be `&self`: `&Self`\n ...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n-   |             ^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |             ^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/arbitrary-self-types-not-object-safe.rs:8:18\n    |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     fn foo(self: &Rc<Self>) -> usize;\n+   |                  ^^^^^^^^^ ...because method `foo`'s `self` parameter cannot be dispatched on\n    = note: required because of the requirements on the impl of `CoerceUnsized<Rc<dyn Foo>>` for `Rc<usize>`\n    = note: required by cast to type `Rc<dyn Foo>`\n "}, {"sha": "797406f869fe6b6b149b6e228a5352638ec64499", "filename": "src/test/ui/suggestions/object-unsafe-trait-references-self.stderr", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,29 +1,34 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/object-unsafe-trait-references-self.rs:6:11\n    |\n-LL | trait Trait {\n-   |       ----- this trait cannot be made into an object...\n-LL |     fn baz(&self, _: Self) {}\n-   |                      ---- ...because method `baz` references the `Self` type in this parameter\n-LL |     fn bat(&self) -> Self {}\n-   |                      ---- ...because method `bat` references the `Self` type in its return type\n-...\n LL | fn bar(x: &dyn Trait) {}\n-   |           ^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |           ^^^^^^^^^^ `Trait` cannot be made into an object\n    |\n    = help: consider moving `baz` to another trait\n    = help: consider moving `bat` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-unsafe-trait-references-self.rs:2:22\n+   |\n+LL | trait Trait {\n+   |       ----- this trait cannot be made into an object...\n+LL |     fn baz(&self, _: Self) {}\n+   |                      ^^^^ ...because method `baz` references the `Self` type in this parameter\n+LL |     fn bat(&self) -> Self {}\n+   |                      ^^^^ ...because method `bat` references the `Self` type in its return type\n \n error[E0038]: the trait `Other` cannot be made into an object\n   --> $DIR/object-unsafe-trait-references-self.rs:10:11\n    |\n+LL | fn foo(x: &dyn Other) {}\n+   |           ^^^^^^^^^^ `Other` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-unsafe-trait-references-self.rs:8:14\n+   |\n LL | trait Other: Sized {}\n-   |       -----  ----- ...because it requires `Self: Sized`\n+   |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-LL | \n-LL | fn foo(x: &dyn Other) {}\n-   |           ^^^^^^^^^^ the trait `Other` cannot be made into an object\n \n error: aborting due to 2 previous errors\n "}, {"sha": "67491b0446f90d7ba2f39bd4da78331ef53d3048", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-self.stderr", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -14,12 +14,16 @@ LL |     fn f(a: Self) -> Self;\n error[E0038]: the trait `A` cannot be made into an object\n   --> $DIR/object-unsafe-trait-should-use-self.rs:3:13\n    |\n+LL |     fn f(a: A) -> A;\n+   |             ^ `A` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-unsafe-trait-should-use-self.rs:2:10\n+   |\n LL | trait A: Sized {\n-   |       -  ----- ...because it requires `Self: Sized`\n+   |       -  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-LL |     fn f(a: A) -> A;\n-   |             ^ the trait `A` cannot be made into an object\n \n error: associated item referring to unboxed trait object for its own trait\n   --> $DIR/object-unsafe-trait-should-use-self.rs:8:13\n@@ -37,14 +41,21 @@ LL |     fn f(a: Self) -> Self;\n error[E0038]: the trait `B` cannot be made into an object\n   --> $DIR/object-unsafe-trait-should-use-self.rs:8:13\n    |\n+LL |     fn f(a: B) -> B;\n+   |             ^ `B` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-unsafe-trait-should-use-self.rs:8:8\n+   |\n LL | trait B {\n    |       - this trait cannot be made into an object...\n LL |     fn f(a: B) -> B;\n-   |        -    ^ the trait `B` cannot be made into an object\n-   |        |\n-   |        ...because associated function `f` has no `self` parameter\n+   |        ^ ...because associated function `f` has no `self` parameter\n+help: consider turning `f` into a method by giving it a `&self` argument\n    |\n-help: consider turning `f` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+LL |     fn f(&self, a: B) -> B;\n+   |          ^^^^^^\n+help: alternatively, consider constraining `f` so it does not apply to trait objects\n    |\n LL |     fn f(a: B) -> B where Self: Sized;\n    |                     ^^^^^^^^^^^^^^^^^"}, {"sha": "73bb6725f5a72e4b7d21ec3deedafa9a4ca05074", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-where-sized.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.fixed?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused_variables, dead_code)]\n \n trait Trait {\n-    fn foo() where Self: Other, Self: Sized, { }\n+    fn foo(&self) where Self: Other, Self: Sized, { }\n     fn bar(self: &Self) {} //~ ERROR invalid `self` parameter type\n }\n "}, {"sha": "a2caf846cc5febe6a3a4e7ea5650b39a9a54ae1d", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-where-sized.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,17 +1,23 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/object-unsafe-trait-should-use-where-sized.rs:9:11\n    |\n+LL | fn bar(x: &dyn Trait) {}\n+   |           ^^^^^^^^^^ `Trait` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-unsafe-trait-should-use-where-sized.rs:5:8\n+   |\n LL | trait Trait {\n    |       ----- this trait cannot be made into an object...\n LL |     fn foo() where Self: Other, { }\n-   |        --- ...because associated function `foo` has no `self` parameter\n+   |        ^^^ ...because associated function `foo` has no `self` parameter\n LL |     fn bar(self: ()) {}\n-   |                  -- ...because method `bar`'s `self` parameter cannot be dispatched on\n-...\n-LL | fn bar(x: &dyn Trait) {}\n-   |           ^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |                  ^^ ...because method `bar`'s `self` parameter cannot be dispatched on\n+help: consider turning `foo` into a method by giving it a `&self` argument\n    |\n-help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+LL |     fn foo(&self) where Self: Other, { }\n+   |            ^^^^^\n+help: alternatively, consider constraining `foo` so it does not apply to trait objects\n    |\n LL |     fn foo() where Self: Other, Self: Sized, { }\n    |                               ^^^^^^^^^^^^^"}, {"sha": "c91d1db4d764abc0ddba1a1bf711d17e0b336ed6", "filename": "src/test/ui/traits/issue-72410.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ftraits%2Fissue-72410.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ftraits%2Fissue-72410.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-72410.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,14 +1,21 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-72410.rs:14:19\n    |\n+LL |     where for<'a> &'a mut [dyn Bar]: ;\n+   |                   ^^^^^^^^^^^^^^^^^ `Bar` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-72410.rs:13:8\n+   |\n LL | pub trait Bar {\n    |           --- this trait cannot be made into an object...\n LL |     fn map()\n-   |        --- ...because associated function `map` has no `self` parameter\n-LL |     where for<'a> &'a mut [dyn Bar]: ;\n-   |                   ^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |        ^^^ ...because associated function `map` has no `self` parameter\n+help: consider turning `map` into a method by giving it a `&self` argument\n    |\n-help: consider turning `map` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+LL |     fn map(&self)\n+   |            ^^^^^\n+help: alternatively, consider constraining `map` so it does not apply to trait objects\n    |\n LL |     where for<'a> &'a mut [dyn Bar]:, Self: Sized ;\n    |                                     ^^^^^^^^^^^^^"}, {"sha": "1118a75e0850e764613238ae30ba908c23e98cb5", "filename": "src/test/ui/traits/trait-alias/trait-alias-object-fail.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -2,12 +2,13 @@ error[E0038]: the trait `Eq` cannot be made into an object\n   --> $DIR/trait-alias-object-fail.rs:7:13\n    |\n LL |     let _: &dyn EqAlias = &123;\n-   |             ^^^^^^^^^^^ the trait `Eq` cannot be made into an object\n-   | \n-  ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |             ^^^^^^^^^^^ `Eq` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n LL | pub trait Eq: PartialEq<Self> {\n-   |               --------------- the trait cannot be made into an object because it uses `Self` as a type parameter in this\n+   |               ^^^^^^^^^^^^^^^ the trait cannot be made into an object because it uses `Self` as a type parameter\n \n error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n   --> $DIR/trait-alias-object-fail.rs:9:17"}, {"sha": "4d97d934376bfd6a9b266bd2448489e705539770", "filename": "src/test/ui/traits/trait-item-privacy.stderr", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -112,23 +112,25 @@ LL |     C::A;\n error[E0038]: the trait `assoc_const::C` cannot be made into an object\n   --> $DIR/trait-item-privacy.rs:101:5\n    |\n+LL |     C::A;\n+   |     ^^^^ `assoc_const::C` cannot be made into an object\n+   |\n+   = help: consider moving `C` to another trait\n+   = help: consider moving `B` to another trait\n+   = help: consider moving `A` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/trait-item-privacy.rs:25:15\n+   |\n LL |         const A: u8 = 0;\n-   |               - ...because it contains this associated `const`\n+   |               ^ ...because it contains this associated `const`\n ...\n LL |         const B: u8 = 0;\n-   |               - ...because it contains this associated `const`\n+   |               ^ ...because it contains this associated `const`\n ...\n LL |     pub trait C: A + B {\n    |               - this trait cannot be made into an object...\n LL |         const C: u8 = 0;\n-   |               - ...because it contains this associated `const`\n-...\n-LL |     C::A;\n-   |     ^^^^ the trait `assoc_const::C` cannot be made into an object\n-   |\n-   = help: consider moving `C` to another trait\n-   = help: consider moving `B` to another trait\n-   = help: consider moving `A` to another trait\n+   |               ^ ...because it contains this associated `const`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/trait-item-privacy.rs:115:12"}, {"sha": "335eeb8f1515be3259d2fd16395f526dd7c840e1", "filename": "src/test/ui/traits/trait-object-macro-matcher.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-macro-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-macro-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-macro-matcher.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -8,9 +8,10 @@ error[E0038]: the trait `Copy` cannot be made into an object\n   --> $DIR/trait-object-macro-matcher.rs:8:8\n    |\n LL |     m!(dyn Copy + Send + 'static);\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` cannot be made into an object\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^ `Copy` cannot be made into an object\n    |\n    = note: the trait cannot be made into an object because it requires `Self: Sized`\n+   = note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "16f60962cc1d7e08d76b257cde29d27441f5ea82", "filename": "src/test/ui/traits/trait-object-safety.stderr", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,33 +1,45 @@\n error[E0038]: the trait `Tr` cannot be made into an object\n   --> $DIR/trait-object-safety.rs:15:22\n    |\n+LL |     let _: &dyn Tr = &St;\n+   |                      ^^^ `Tr` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/trait-object-safety.rs:4:8\n+   |\n LL | trait Tr {\n    |       -- this trait cannot be made into an object...\n LL |     fn foo();\n-   |        --- ...because associated function `foo` has no `self` parameter\n-...\n-LL |     let _: &dyn Tr = &St;\n-   |                      ^^^ the trait `Tr` cannot be made into an object\n-   |\n+   |        ^^^ ...because associated function `foo` has no `self` parameter\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Tr>` for `&St`\n    = note: required by cast to type `&dyn Tr`\n-help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+help: consider turning `foo` into a method by giving it a `&self` argument\n+   |\n+LL |     fn foo(&self);\n+   |            ^^^^^\n+help: alternatively, consider constraining `foo` so it does not apply to trait objects\n    |\n LL |     fn foo() where Self: Sized;\n    |              ^^^^^^^^^^^^^^^^^\n \n error[E0038]: the trait `Tr` cannot be made into an object\n   --> $DIR/trait-object-safety.rs:15:12\n    |\n+LL |     let _: &dyn Tr = &St;\n+   |            ^^^^^^^ `Tr` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/trait-object-safety.rs:4:8\n+   |\n LL | trait Tr {\n    |       -- this trait cannot be made into an object...\n LL |     fn foo();\n-   |        --- ...because associated function `foo` has no `self` parameter\n-...\n-LL |     let _: &dyn Tr = &St;\n-   |            ^^^^^^^ the trait `Tr` cannot be made into an object\n+   |        ^^^ ...because associated function `foo` has no `self` parameter\n+help: consider turning `foo` into a method by giving it a `&self` argument\n    |\n-help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+LL |     fn foo(&self);\n+   |            ^^^^^\n+help: alternatively, consider constraining `foo` so it does not apply to trait objects\n    |\n LL |     fn foo() where Self: Sized;\n    |              ^^^^^^^^^^^^^^^^^"}, {"sha": "a9bacc357bc03413be2c57a1bb364e542c833f20", "filename": "src/test/ui/traits/trait-resolution-in-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.rs?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -5,7 +5,7 @@ trait MyMul<Rhs, Res> {\n }\n \n fn foo<T: MyMul<f64, f64>>(a: &T, b: f64) -> f64 {\n-    a * b //~ ERROR cannot multiply `f64` to `&T`\n+    a * b //~ ERROR cannot multiply `&T` by `f64`\n }\n \n fn main() {}"}, {"sha": "ada76cd8b77203b3f6c43773201940a5d1436ae3", "filename": "src/test/ui/traits/trait-resolution-in-overloaded-op.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: cannot multiply `f64` to `&T`\n+error[E0369]: cannot multiply `&T` by `f64`\n   --> $DIR/trait-resolution-in-overloaded-op.rs:8:7\n    |\n LL |     a * b"}, {"sha": "a06f6a49194ffa9dcd97e29b35f16ab6198f2e7b", "filename": "src/test/ui/traits/trait-test-2.stderr", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -13,32 +13,36 @@ LL |     10.blah::<i32, i32>();\n error[E0038]: the trait `bar` cannot be made into an object\n   --> $DIR/trait-test-2.rs:11:16\n    |\n-LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n-   |       ---                    ----     ---- ...because method `blah` has generic type parameters\n-   |       |                      |\n-   |       |                      ...because method `dup` references the `Self` type in its return type\n-   |       this trait cannot be made into an object...\n-...\n LL |     (box 10 as Box<dyn bar>).dup();\n-   |                ^^^^^^^^^^^^ the trait `bar` cannot be made into an object\n+   |                ^^^^^^^^^^^^ `bar` cannot be made into an object\n    |\n    = help: consider moving `dup` to another trait\n    = help: consider moving `blah` to another trait\n-\n-error[E0038]: the trait `bar` cannot be made into an object\n-  --> $DIR/trait-test-2.rs:11:6\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/trait-test-2.rs:4:30\n    |\n LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n-   |       ---                    ----     ---- ...because method `blah` has generic type parameters\n+   |       ---                    ^^^^     ^^^^ ...because method `blah` has generic type parameters\n    |       |                      |\n    |       |                      ...because method `dup` references the `Self` type in its return type\n    |       this trait cannot be made into an object...\n-...\n+\n+error[E0038]: the trait `bar` cannot be made into an object\n+  --> $DIR/trait-test-2.rs:11:6\n+   |\n LL |     (box 10 as Box<dyn bar>).dup();\n-   |      ^^^^^^ the trait `bar` cannot be made into an object\n+   |      ^^^^^^ `bar` cannot be made into an object\n    |\n    = help: consider moving `dup` to another trait\n    = help: consider moving `blah` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/trait-test-2.rs:4:30\n+   |\n+LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n+   |       ---                    ^^^^     ^^^^ ...because method `blah` has generic type parameters\n+   |       |                      |\n+   |       |                      ...because method `dup` references the `Self` type in its return type\n+   |       this trait cannot be made into an object...\n    = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn bar>>` for `Box<{integer}>`\n    = note: required by cast to type `Box<dyn bar>`\n "}, {"sha": "2de5f6eb0f03aa25ed69a9d7971d3248bc1d201a", "filename": "src/test/ui/type/type-parameter-defaults-referencing-Self-ppaux.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -13,15 +13,17 @@ LL |     let y = x as dyn MyAdd<i32>;\n error[E0038]: the trait `MyAdd` cannot be made into an object\n   --> $DIR/type-parameter-defaults-referencing-Self-ppaux.rs:14:18\n    |\n-LL | trait MyAdd<Rhs=Self> { fn add(&self, other: &Rhs) -> Self; }\n-   |       -----                                           ---- ...because method `add` references the `Self` type in its return type\n-   |       |\n-   |       this trait cannot be made into an object...\n-...\n LL |     let y = x as dyn MyAdd<i32>;\n-   |                  ^^^^^^^^^^^^^^ the trait `MyAdd` cannot be made into an object\n+   |                  ^^^^^^^^^^^^^^ `MyAdd` cannot be made into an object\n    |\n    = help: consider moving `add` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/type-parameter-defaults-referencing-Self-ppaux.rs:6:55\n+   |\n+LL | trait MyAdd<Rhs=Self> { fn add(&self, other: &Rhs) -> Self; }\n+   |       -----                                           ^^^^ ...because method `add` references the `Self` type in its return type\n+   |       |\n+   |       this trait cannot be made into an object...\n \n error: aborting due to 2 previous errors\n "}, {"sha": "29dfb585ac68290dc9e5a4cd54ef567b71add190", "filename": "src/test/ui/wf/wf-convert-unsafe-trait-obj-box.stderr", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,42 +1,48 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:16:33\n    |\n+LL |     let t_box: Box<dyn Trait> = Box::new(S);\n+   |                                 ^^^^^^^^^^^ `Trait` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/wf-convert-unsafe-trait-obj-box.rs:6:14\n+   |\n LL | trait Trait: Sized {}\n-   |       -----  ----- ...because it requires `Self: Sized`\n+   |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-...\n-LL |     let t_box: Box<dyn Trait> = Box::new(S);\n-   |                                 ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n-   |\n    = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn Trait>>` for `Box<S>`\n    = note: required by cast to type `Box<dyn Trait>`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:17:15\n    |\n+LL |     takes_box(Box::new(S));\n+   |               ^^^^^^^^^^^ `Trait` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/wf-convert-unsafe-trait-obj-box.rs:6:14\n+   |\n LL | trait Trait: Sized {}\n-   |       -----  ----- ...because it requires `Self: Sized`\n+   |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-...\n-LL |     takes_box(Box::new(S));\n-   |               ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n-   |\n    = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn Trait>>` for `Box<S>`\n    = note: required by cast to type `Box<(dyn Trait + 'static)>`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:15:5\n    |\n+LL |     Box::new(S) as Box<dyn Trait>;\n+   |     ^^^^^^^^^^^ `Trait` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/wf-convert-unsafe-trait-obj-box.rs:6:14\n+   |\n LL | trait Trait: Sized {}\n-   |       -----  ----- ...because it requires `Self: Sized`\n+   |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-...\n-LL |     Box::new(S) as Box<dyn Trait>;\n-   |     ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n-   |\n    = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn Trait>>` for `Box<S>`\n    = note: required by cast to type `Box<dyn Trait>`\n "}, {"sha": "02169f26f903466967b37676d7e2078a3970cab2", "filename": "src/test/ui/wf/wf-convert-unsafe-trait-obj.stderr", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,42 +1,48 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:16:25\n    |\n+LL |     let t: &dyn Trait = &S;\n+   |                         ^^ `Trait` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/wf-convert-unsafe-trait-obj.rs:6:14\n+   |\n LL | trait Trait: Sized {}\n-   |       -----  ----- ...because it requires `Self: Sized`\n+   |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-...\n-LL |     let t: &dyn Trait = &S;\n-   |                         ^^ the trait `Trait` cannot be made into an object\n-   |\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Trait>` for `&S`\n    = note: required by cast to type `&dyn Trait`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:17:17\n    |\n+LL |     takes_trait(&S);\n+   |                 ^^ `Trait` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/wf-convert-unsafe-trait-obj.rs:6:14\n+   |\n LL | trait Trait: Sized {}\n-   |       -----  ----- ...because it requires `Self: Sized`\n+   |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-...\n-LL |     takes_trait(&S);\n-   |                 ^^ the trait `Trait` cannot be made into an object\n-   |\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Trait>` for `&S`\n    = note: required by cast to type `&dyn Trait`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:15:5\n    |\n+LL |     &S as &dyn Trait;\n+   |     ^^ `Trait` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/wf-convert-unsafe-trait-obj.rs:6:14\n+   |\n LL | trait Trait: Sized {}\n-   |       -----  ----- ...because it requires `Self: Sized`\n+   |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-...\n-LL |     &S as &dyn Trait;\n-   |     ^^ the trait `Trait` cannot be made into an object\n-   |\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Trait>` for `&S`\n    = note: required by cast to type `&dyn Trait`\n "}, {"sha": "988cb2fa5480c75dbbc3c31e56345cb16f00920f", "filename": "src/test/ui/wf/wf-fn-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -34,9 +34,10 @@ error[E0038]: the trait `Copy` cannot be made into an object\n   --> $DIR/wf-fn-where-clause.rs:12:16\n    |\n LL | fn bar() where Vec<dyn Copy>:, {}\n-   |                ^^^^^^^^^^^^^ the trait `Copy` cannot be made into an object\n+   |                ^^^^^^^^^^^^^ `Copy` cannot be made into an object\n    |\n    = note: the trait cannot be made into an object because it requires `Self: Sized`\n+   = note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9b749f88fb810e173271052f63cddd6118da9771", "filename": "src/test/ui/wf/wf-object-safe.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -1,15 +1,17 @@\n error[E0038]: the trait `A` cannot be made into an object\n   --> $DIR/wf-object-safe.rs:9:13\n    |\n-LL | trait A {\n-   |       - this trait cannot be made into an object...\n-LL |     fn foo(&self, _x: &Self);\n-   |                       ----- ...because method `foo` references the `Self` type in this parameter\n-...\n LL |     let _x: &dyn A;\n-   |             ^^^^^^ the trait `A` cannot be made into an object\n+   |             ^^^^^^ `A` cannot be made into an object\n    |\n    = help: consider moving `foo` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/wf-object-safe.rs:5:23\n+   |\n+LL | trait A {\n+   |       - this trait cannot be made into an object...\n+LL |     fn foo(&self, _x: &Self);\n+   |                       ^^^^^ ...because method `foo` references the `Self` type in this parameter\n \n error: aborting due to previous error\n "}, {"sha": "9dbd41ca368a18a123b8a745fb520dc4ddf12bc4", "filename": "src/test/ui/wf/wf-unsafe-trait-obj-match.stderr", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19356453cbfb734bc60a1853c10e3095d05e0342/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr?ref=19356453cbfb734bc60a1853c10e3095d05e0342", "patch": "@@ -15,28 +15,32 @@ LL | |     }\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-unsafe-trait-obj-match.rs:26:21\n    |\n+LL |         Some(()) => &S,\n+   |                     ^^ `Trait` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/wf-unsafe-trait-obj-match.rs:6:14\n+   |\n LL | trait Trait: Sized {}\n-   |       -----  ----- ...because it requires `Self: Sized`\n+   |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-...\n-LL |         Some(()) => &S,\n-   |                     ^^ the trait `Trait` cannot be made into an object\n-   |\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Trait>` for `&S`\n    = note: required by cast to type `&dyn Trait`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-unsafe-trait-obj-match.rs:25:25\n    |\n+LL |     let t: &dyn Trait = match opt() {\n+   |                         ^^^^^^^^^^^ `Trait` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/wf-unsafe-trait-obj-match.rs:6:14\n+   |\n LL | trait Trait: Sized {}\n-   |       -----  ----- ...because it requires `Self: Sized`\n+   |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-...\n-LL |     let t: &dyn Trait = match opt() {\n-   |                         ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n-   |\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Trait>` for `&R`\n    = note: required by cast to type `&dyn Trait`\n "}]}