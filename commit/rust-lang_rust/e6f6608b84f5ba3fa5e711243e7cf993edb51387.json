{"sha": "e6f6608b84f5ba3fa5e711243e7cf993edb51387", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZjY2MDhiODRmNWJhM2ZhNWU3MTEyNDNlN2NmOTkzZWRiNTEzODc=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-11T18:38:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-11T18:38:46Z"}, "message": "Rollup merge of #52254 - ljedrz:dyn_librustc_metadata, r=cramertj\n\nDeny bare trait objects in in src/librustc_metadata\n\nEnforce `#![deny(bare_trait_objects)]` in `src/librustc_metadata`.", "tree": {"sha": "615079ad2aa6c8423308889853aa90035e709bd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/615079ad2aa6c8423308889853aa90035e709bd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6f6608b84f5ba3fa5e711243e7cf993edb51387", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbRk62CRBK7hj4Ov3rIwAAdHIIAG313pKBsiCKElp9pV1+VYKz\nhSQzWWMWqyX8Yk2MQ6giQvFmMcmcs1oEMmYBI7B2kb8/RV7sb04WM3tkdk0vGm9R\nAZQyUNBzfg9S+CjRrZk5w9T3tHN5L/O9JNcsRJ+gjprEbCeSwwqmCCpNlGdc2gbB\n+OWhRWcHeu5gdPRlhY39WLdq8ruUkV2ycr49bVSbrb0XL9ZYPmJpXjhktzsHmbu8\nFzU3pg1YwPRylMjFWXQFcGbK06x9KKW8p4WDp3jeMsFK1XA+BvfLhYL5pFKF/2zX\n2r9oXJltzqqDtXBANSTPP810aHQ/jUQxBH66Akd3ZGlT9KqpI2asqix88LXxNI8=\n=/1sI\n-----END PGP SIGNATURE-----\n", "payload": "tree 615079ad2aa6c8423308889853aa90035e709bd8\nparent 59fb178ad95cd1ee63c7f63135a7ac119c9bda78\nparent 9cffe90fd02c1bfcf39a43613e996baac5b34c73\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1531334326 -0600\ncommitter GitHub <noreply@github.com> 1531334326 -0600\n\nRollup merge of #52254 - ljedrz:dyn_librustc_metadata, r=cramertj\n\nDeny bare trait objects in in src/librustc_metadata\n\nEnforce `#![deny(bare_trait_objects)]` in `src/librustc_metadata`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6f6608b84f5ba3fa5e711243e7cf993edb51387", "html_url": "https://github.com/rust-lang/rust/commit/e6f6608b84f5ba3fa5e711243e7cf993edb51387", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6f6608b84f5ba3fa5e711243e7cf993edb51387/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59fb178ad95cd1ee63c7f63135a7ac119c9bda78", "url": "https://api.github.com/repos/rust-lang/rust/commits/59fb178ad95cd1ee63c7f63135a7ac119c9bda78", "html_url": "https://github.com/rust-lang/rust/commit/59fb178ad95cd1ee63c7f63135a7ac119c9bda78"}, {"sha": "9cffe90fd02c1bfcf39a43613e996baac5b34c73", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cffe90fd02c1bfcf39a43613e996baac5b34c73", "html_url": "https://github.com/rust-lang/rust/commit/9cffe90fd02c1bfcf39a43613e996baac5b34c73"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "1e227b8a1a6596b08aa2170dc3435da77418a8fb", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6608b84f5ba3fa5e711243e7cf993edb51387/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6608b84f5ba3fa5e711243e7cf993edb51387/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=e6f6608b84f5ba3fa5e711243e7cf993edb51387", "patch": "@@ -536,7 +536,7 @@ impl<'a> CrateLoader<'a> {\n                 Ok(f) => f,\n                 Err(err) => self.sess.span_fatal(span, &err),\n             };\n-            mem::transmute::<*mut u8, fn(&mut Registry)>(sym)\n+            mem::transmute::<*mut u8, fn(&mut dyn Registry)>(sym)\n         };\n \n         struct MyRegistrar {\n@@ -1019,7 +1019,7 @@ impl<'a> CrateLoader<'a> {\n     fn inject_dependency_if(&self,\n                             krate: CrateNum,\n                             what: &str,\n-                            needs_dep: &Fn(&cstore::CrateMetadata) -> bool) {\n+                            needs_dep: &dyn Fn(&cstore::CrateMetadata) -> bool) {\n         // don't perform this validation if the session has errors, as one of\n         // those errors may indicate a circular dependency which could cause\n         // this to stack overflow."}, {"sha": "d93a7f9526e1aed9377d69d89acba136b4d24de8", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6608b84f5ba3fa5e711243e7cf993edb51387/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6608b84f5ba3fa5e711243e7cf993edb51387/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=e6f6608b84f5ba3fa5e711243e7cf993edb51387", "patch": "@@ -90,11 +90,11 @@ pub struct CStore {\n     metas: RwLock<IndexVec<CrateNum, Option<Lrc<CrateMetadata>>>>,\n     /// Map from NodeId's of local extern crate statements to crate numbers\n     extern_mod_crate_map: Lock<NodeMap<CrateNum>>,\n-    pub metadata_loader: Box<MetadataLoader + Sync>,\n+    pub metadata_loader: Box<dyn MetadataLoader + Sync>,\n }\n \n impl CStore {\n-    pub fn new(metadata_loader: Box<MetadataLoader + Sync>) -> CStore {\n+    pub fn new(metadata_loader: Box<dyn MetadataLoader + Sync>) -> CStore {\n         CStore {\n             // We add an empty entry for LOCAL_CRATE (which maps to zero) in\n             // order to make array indices in `metas` match with the"}, {"sha": "d5078642147681488abb37c11e75d9a027217306", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6608b84f5ba3fa5e711243e7cf993edb51387/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6608b84f5ba3fa5e711243e7cf993edb51387/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=e6f6608b84f5ba3fa5e711243e7cf993edb51387", "patch": "@@ -413,11 +413,11 @@ pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n }\n \n impl CrateStore for cstore::CStore {\n-    fn crate_data_as_rc_any(&self, krate: CrateNum) -> Lrc<Any> {\n+    fn crate_data_as_rc_any(&self, krate: CrateNum) -> Lrc<dyn Any> {\n         self.get_crate_data(krate)\n     }\n \n-    fn metadata_loader(&self) -> &MetadataLoader {\n+    fn metadata_loader(&self) -> &dyn MetadataLoader {\n         &*self.metadata_loader\n     }\n "}, {"sha": "b8c643839506637b85f504285dc858e9bbed6086", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6608b84f5ba3fa5e711243e7cf993edb51387/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6608b84f5ba3fa5e711243e7cf993edb51387/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=e6f6608b84f5ba3fa5e711243e7cf993edb51387", "patch": "@@ -391,7 +391,7 @@ impl<'a, 'tcx> MetadataBlob {\n     }\n \n     pub fn list_crate_metadata(&self,\n-                               out: &mut io::Write) -> io::Result<()> {\n+                               out: &mut dyn io::Write) -> io::Result<()> {\n         write!(out, \"=External Dependencies=\\n\")?;\n         let root = self.get_root();\n         for (i, dep) in root.crate_deps"}, {"sha": "5c9915e94e56d34a15b5a3eee3234cc3d43df5c6", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6608b84f5ba3fa5e711243e7cf993edb51387/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6608b84f5ba3fa5e711243e7cf993edb51387/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=e6f6608b84f5ba3fa5e711243e7cf993edb51387", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(bare_trait_objects)]\n+\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "b747624338c83c8208e8eef55739019fa583de66", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e6f6608b84f5ba3fa5e711243e7cf993edb51387/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f6608b84f5ba3fa5e711243e7cf993edb51387/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=e6f6608b84f5ba3fa5e711243e7cf993edb51387", "patch": "@@ -273,7 +273,7 @@ pub struct Context<'a> {\n     pub rejected_via_filename: Vec<CrateMismatch>,\n     pub should_match_name: bool,\n     pub is_proc_macro: Option<bool>,\n-    pub metadata_loader: &'a MetadataLoader,\n+    pub metadata_loader: &'a dyn MetadataLoader,\n }\n \n pub struct CratePaths {\n@@ -842,7 +842,7 @@ impl<'a> Context<'a> {\n fn get_metadata_section(target: &Target,\n                         flavor: CrateFlavor,\n                         filename: &Path,\n-                        loader: &MetadataLoader)\n+                        loader: &dyn MetadataLoader)\n                         -> Result<MetadataBlob, String> {\n     let start = Instant::now();\n     let ret = get_metadata_section_imp(target, flavor, filename, loader);\n@@ -855,7 +855,7 @@ fn get_metadata_section(target: &Target,\n fn get_metadata_section_imp(target: &Target,\n                             flavor: CrateFlavor,\n                             filename: &Path,\n-                            loader: &MetadataLoader)\n+                            loader: &dyn MetadataLoader)\n                             -> Result<MetadataBlob, String> {\n     if !filename.exists() {\n         return Err(format!(\"no such file: '{}'\", filename.display()));\n@@ -904,8 +904,8 @@ fn get_metadata_section_imp(target: &Target,\n // A diagnostic function for dumping crate metadata to an output stream\n pub fn list_file_metadata(target: &Target,\n                           path: &Path,\n-                          loader: &MetadataLoader,\n-                          out: &mut io::Write)\n+                          loader: &dyn MetadataLoader,\n+                          out: &mut dyn io::Write)\n                           -> io::Result<()> {\n     let filename = path.file_name().unwrap().to_str().unwrap();\n     let flavor = if filename.ends_with(\".rlib\") {"}]}