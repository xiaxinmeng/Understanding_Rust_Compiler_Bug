{"sha": "3c43b61b870add2daddbd8e480477e5a8aa409c2", "node_id": "C_kwDOAAsO6NoAKDNjNDNiNjFiODcwYWRkMmRhZGRiZDhlNDgwNDc3ZTVhOGFhNDA5YzI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-26T18:30:12Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-09T17:59:35Z"}, "message": "Do not consider borrowed Freeze locals as SSA.", "tree": {"sha": "98d08f5870eb061ef56eb4f93a9faf795a165658", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98d08f5870eb061ef56eb4f93a9faf795a165658"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c43b61b870add2daddbd8e480477e5a8aa409c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c43b61b870add2daddbd8e480477e5a8aa409c2", "html_url": "https://github.com/rust-lang/rust/commit/3c43b61b870add2daddbd8e480477e5a8aa409c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c43b61b870add2daddbd8e480477e5a8aa409c2/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34903755701a5595ee4bab3bb89de15c5469cd3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/34903755701a5595ee4bab3bb89de15c5469cd3e", "html_url": "https://github.com/rust-lang/rust/commit/34903755701a5595ee4bab3bb89de15c5469cd3e"}], "stats": {"total": 112, "additions": 69, "deletions": 43}, "files": [{"sha": "c565d6f13b17f7b2799d6423cbdf2d124539fdeb", "filename": "compiler/rustc_mir_transform/src/copy_prop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c43b61b870add2daddbd8e480477e5a8aa409c2/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c43b61b870add2daddbd8e480477e5a8aa409c2/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs?ref=3c43b61b870add2daddbd8e480477e5a8aa409c2", "patch": "@@ -33,9 +33,8 @@ impl<'tcx> MirPass<'tcx> for CopyProp {\n }\n \n fn propagate_ssa<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-    let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n     let borrowed_locals = borrowed_locals(body);\n-    let ssa = SsaLocals::new(tcx, param_env, body, &borrowed_locals);\n+    let ssa = SsaLocals::new(body);\n \n     let fully_moved = fully_moved_locals(&ssa, body);\n     debug!(?fully_moved);"}, {"sha": "3d61d33ce3536acf49e7827533c36d5e43d43b07", "filename": "compiler/rustc_mir_transform/src/normalize_array_len.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c43b61b870add2daddbd8e480477e5a8aa409c2/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c43b61b870add2daddbd8e480477e5a8aa409c2/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs?ref=3c43b61b870add2daddbd8e480477e5a8aa409c2", "patch": "@@ -7,7 +7,6 @@ use rustc_index::IndexVec;\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_mir_dataflow::impls::borrowed_locals;\n \n pub struct NormalizeArrayLen;\n \n@@ -24,9 +23,7 @@ impl<'tcx> MirPass<'tcx> for NormalizeArrayLen {\n }\n \n fn normalize_array_len_calls<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-    let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n-    let borrowed_locals = borrowed_locals(body);\n-    let ssa = SsaLocals::new(tcx, param_env, body, &borrowed_locals);\n+    let ssa = SsaLocals::new(body);\n \n     let slice_lengths = compute_slice_length(tcx, &ssa, body);\n     debug!(?slice_lengths);"}, {"sha": "a2e7651007337c13774d36a0657b72288c5e1064", "filename": "compiler/rustc_mir_transform/src/ref_prop.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c43b61b870add2daddbd8e480477e5a8aa409c2/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c43b61b870add2daddbd8e480477e5a8aa409c2/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs?ref=3c43b61b870add2daddbd8e480477e5a8aa409c2", "patch": "@@ -4,7 +4,7 @@ use rustc_index::IndexVec;\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n-use rustc_mir_dataflow::impls::{borrowed_locals, MaybeStorageDead};\n+use rustc_mir_dataflow::impls::MaybeStorageDead;\n use rustc_mir_dataflow::storage::always_storage_live_locals;\n use rustc_mir_dataflow::Analysis;\n \n@@ -82,9 +82,7 @@ impl<'tcx> MirPass<'tcx> for ReferencePropagation {\n }\n \n fn propagate_ssa<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-    let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n-    let borrowed_locals = borrowed_locals(body);\n-    let ssa = SsaLocals::new(tcx, param_env, body, &borrowed_locals);\n+    let ssa = SsaLocals::new(body);\n \n     let mut replacer = compute_replacement(tcx, body, &ssa);\n     debug!(?replacer.targets, ?replacer.allowed_replacements, ?replacer.storage_to_remove);"}, {"sha": "d7fc6e2f6c3024dcec8641ec55f71cabe8d538c7", "filename": "compiler/rustc_mir_transform/src/ssa.rs", "status": "modified", "additions": 30, "deletions": 19, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3c43b61b870add2daddbd8e480477e5a8aa409c2/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c43b61b870add2daddbd8e480477e5a8aa409c2/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs?ref=3c43b61b870add2daddbd8e480477e5a8aa409c2", "patch": "@@ -1,11 +1,23 @@\n+//! We denote as \"SSA\" the set of locals that verify the following properties:\n+//! 1/ They are only assigned-to once, either as a function parameter, or in an assign statement;\n+//! 2/ This single assignment dominates all uses;\n+//!\n+//! As a consequence of rule 2, we consider that borrowed locals are not SSA, even if they are\n+//! `Freeze`, as we do not track that the assignment dominates all uses of the borrow.\n+//!\n+//! We say a local has a stable address if its address has SSA-like properties:\n+//! 1/ It has a single `StorageLive` statement, or none at all (always-live);\n+//! 2/ All its uses dominate this `StorageLive` statement.\n+//!\n+//! We do not discard borrowed locals from this analysis, as we cannot take their address' address.\n+\n use either::Either;\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_index::bit_set::BitSet;\n use rustc_index::{IndexSlice, IndexVec};\n use rustc_middle::middle::resolve_bound_vars::Set1;\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{ParamEnv, TyCtxt};\n use rustc_mir_dataflow::storage::always_storage_live_locals;\n \n #[derive(Debug)]\n@@ -62,12 +74,7 @@ impl SmallDominators {\n }\n \n impl SsaLocals {\n-    pub fn new<'tcx>(\n-        tcx: TyCtxt<'tcx>,\n-        param_env: ParamEnv<'tcx>,\n-        body: &Body<'tcx>,\n-        borrowed_locals: &BitSet<Local>,\n-    ) -> SsaLocals {\n+    pub fn new<'tcx>(body: &Body<'tcx>) -> SsaLocals {\n         let assignment_order = Vec::with_capacity(body.local_decls.len());\n \n         let assignments = IndexVec::from_elem(Set1::Empty, &body.local_decls);\n@@ -80,13 +87,8 @@ impl SsaLocals {\n         let mut visitor =\n             SsaVisitor { assignments, assignment_order, dominators, direct_uses, storage_live };\n \n-        for (local, decl) in body.local_decls.iter_enumerated() {\n-            if matches!(body.local_kind(local), LocalKind::Arg) {\n-                visitor.assignments[local] = Set1::One(LocationExtended::Arg);\n-            }\n-            if borrowed_locals.contains(local) && !decl.ty.is_freeze(tcx, param_env) {\n-                visitor.assignments[local] = Set1::Many;\n-            }\n+        for local in body.args_iter() {\n+            visitor.assignments[local] = Set1::One(LocationExtended::Arg);\n         }\n \n         for local in always_storage_live_locals(body).iter() {\n@@ -237,6 +239,8 @@ struct SsaVisitor {\n impl<'tcx> Visitor<'tcx> for SsaVisitor {\n     fn visit_local(&mut self, local: Local, ctxt: PlaceContext, loc: Location) {\n         match ctxt {\n+            PlaceContext::MutatingUse(MutatingUseContext::Projection)\n+            | PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection) => bug!(),\n             PlaceContext::MutatingUse(MutatingUseContext::Store) => {\n                 self.assignments[local].insert(LocationExtended::Plain(loc));\n                 if let Set1::One(_) = self.assignments[local] {\n@@ -246,13 +250,18 @@ impl<'tcx> Visitor<'tcx> for SsaVisitor {\n                 self.dominators.check_dominates(&mut self.storage_live[local], loc);\n             }\n             // Anything can happen with raw pointers, so remove them.\n-            PlaceContext::NonMutatingUse(NonMutatingUseContext::AddressOf)\n+            // We do not verify that all uses of the borrow dominate the assignment to `local`,\n+            // so we have to remove them too.\n+            PlaceContext::NonMutatingUse(\n+                NonMutatingUseContext::SharedBorrow\n+                | NonMutatingUseContext::ShallowBorrow\n+                | NonMutatingUseContext::UniqueBorrow\n+                | NonMutatingUseContext::AddressOf,\n+            )\n             | PlaceContext::MutatingUse(_) => {\n                 self.assignments[local] = Set1::Many;\n                 self.dominators.check_dominates(&mut self.storage_live[local], loc);\n             }\n-            // Immutable borrows are taken into account in `SsaLocals::new` by\n-            // removing non-freeze locals.\n             PlaceContext::NonMutatingUse(_) => {\n                 self.dominators.check_dominates(&mut self.assignments[local], loc);\n                 self.dominators.check_dominates(&mut self.storage_live[local], loc);\n@@ -270,15 +279,17 @@ impl<'tcx> Visitor<'tcx> for SsaVisitor {\n             // Do not do anything for storage statements and debuginfo.\n             if ctxt.is_use() {\n                 // Only change the context if it is a real use, not a \"use\" in debuginfo.\n-                let new_ctxt = PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection);\n+                let new_ctxt = PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy);\n \n                 self.visit_projection(place.as_ref(), new_ctxt, loc);\n                 self.dominators.check_dominates(&mut self.assignments[place.local], loc);\n                 self.dominators.check_dominates(&mut self.storage_live[place.local], loc);\n             }\n             return;\n+        } else {\n+            self.visit_projection(place.as_ref(), ctxt, loc);\n+            self.visit_local(place.local, ctxt, loc);\n         }\n-        self.super_place(place, ctxt, loc);\n     }\n }\n "}, {"sha": "51707e71661c5e7b872d78b2e4b2a450583ae3da", "filename": "tests/mir-opt/copy-prop/borrowed_local.f.CopyProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c43b61b870add2daddbd8e480477e5a8aa409c2/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3c43b61b870add2daddbd8e480477e5a8aa409c2/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.diff?ref=3c43b61b870add2daddbd8e480477e5a8aa409c2", "patch": "@@ -20,8 +20,7 @@\n       }\n   \n       bb1: {\n--         _0 = opaque::<u8>(_3) -> bb2;    // scope 0 at $DIR/borrowed_local.rs:+12:13: +12:38\n-+         _0 = opaque::<u8>(_1) -> bb2;    // scope 0 at $DIR/borrowed_local.rs:+12:13: +12:38\n+          _0 = opaque::<u8>(_3) -> bb2;    // scope 0 at $DIR/borrowed_local.rs:+12:13: +12:38\n                                            // mir::Constant\n                                            // + span: $DIR/borrowed_local.rs:28:28: 28:34\n                                            // + literal: Const { ty: fn(u8) -> bool {opaque::<u8>}, val: Value(<ZST>) }"}, {"sha": "9a9d5d652346a8d0aa0b97548b47bed1b88efe0e", "filename": "tests/mir-opt/reference_prop.reference_propagation.ReferencePropagation.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c43b61b870add2daddbd8e480477e5a8aa409c2/tests%2Fmir-opt%2Freference_prop.reference_propagation.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3c43b61b870add2daddbd8e480477e5a8aa409c2/tests%2Fmir-opt%2Freference_prop.reference_propagation.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation.ReferencePropagation.diff?ref=3c43b61b870add2daddbd8e480477e5a8aa409c2", "patch": "@@ -178,9 +178,8 @@\n           StorageLive(_17);                // scope 9 at $DIR/reference_prop.rs:+22:13: +22:14\n           _17 = &_16;                      // scope 9 at $DIR/reference_prop.rs:+22:17: +22:19\n           StorageLive(_18);                // scope 10 at $DIR/reference_prop.rs:+23:13: +23:14\n--         _18 = (*_16);                    // scope 10 at $DIR/reference_prop.rs:+23:17: +23:19\n+          _18 = (*_16);                    // scope 10 at $DIR/reference_prop.rs:+23:17: +23:19\n -         _14 = const ();                  // scope 0 at $DIR/reference_prop.rs:+19:5: +24:6\n-+         _18 = _15;                       // scope 10 at $DIR/reference_prop.rs:+23:17: +23:19\n           StorageDead(_18);                // scope 10 at $DIR/reference_prop.rs:+24:5: +24:6\n           StorageDead(_17);                // scope 9 at $DIR/reference_prop.rs:+24:5: +24:6\n           StorageDead(_16);                // scope 8 at $DIR/reference_prop.rs:+24:5: +24:6"}, {"sha": "8edc8104f82736ad3aa4481367264a87c7956a18", "filename": "tests/mir-opt/reference_prop.reference_propagation_const_ptr.ReferencePropagation.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c43b61b870add2daddbd8e480477e5a8aa409c2/tests%2Fmir-opt%2Freference_prop.reference_propagation_const_ptr.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3c43b61b870add2daddbd8e480477e5a8aa409c2/tests%2Fmir-opt%2Freference_prop.reference_propagation_const_ptr.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation_const_ptr.ReferencePropagation.diff?ref=3c43b61b870add2daddbd8e480477e5a8aa409c2", "patch": "@@ -207,9 +207,8 @@\n           StorageLive(_16);                // scope 12 at $DIR/reference_prop.rs:+22:13: +22:14\n           _16 = &_15;                      // scope 12 at $DIR/reference_prop.rs:+22:17: +22:19\n           StorageLive(_17);                // scope 13 at $DIR/reference_prop.rs:+23:13: +23:14\n--         _17 = (*_15);                    // scope 13 at $DIR/reference_prop.rs:+23:17: +23:19\n+          _17 = (*_15);                    // scope 13 at $DIR/reference_prop.rs:+23:17: +23:19\n -         _13 = const ();                  // scope 10 at $DIR/reference_prop.rs:+19:5: +24:6\n-+         _17 = _14;                       // scope 13 at $DIR/reference_prop.rs:+23:17: +23:19\n           StorageDead(_17);                // scope 13 at $DIR/reference_prop.rs:+24:5: +24:6\n           StorageDead(_16);                // scope 12 at $DIR/reference_prop.rs:+24:5: +24:6\n           StorageDead(_15);                // scope 11 at $DIR/reference_prop.rs:+24:5: +24:6"}, {"sha": "60e5056c7a92609f677aeda7b7a6fac661d753c1", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.CopyProp.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3c43b61b870add2daddbd8e480477e5a8aa409c2/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3c43b61b870add2daddbd8e480477e5a8aa409c2/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff?ref=3c43b61b870add2daddbd8e480477e5a8aa409c2", "patch": "@@ -101,16 +101,16 @@\n       }\n   \n       bb0: {\n--         StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n           _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n           _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n--         StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n           _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n           _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n--         StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n           _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n           _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n--         StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n@@ -184,10 +184,10 @@\n       bb3: {\n           StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n           return;                          // scope 0 at $DIR/slice_filter.rs:+0:76: +0:76\n       }\n   "}, {"sha": "7ad1ccf28a607bbfe42375b4119e90ac7d912e66", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.DestinationPropagation.diff", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3c43b61b870add2daddbd8e480477e5a8aa409c2/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3c43b61b870add2daddbd8e480477e5a8aa409c2/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff?ref=3c43b61b870add2daddbd8e480477e5a8aa409c2", "patch": "@@ -89,15 +89,23 @@\n       }\n   \n       bb0: {\n+-         StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n++         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n           _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n -         _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+-         StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n +         _20 = &((*_25).0: usize);        // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n++         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n           _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n -         _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+-         StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n +         _15 = &((*_26).1: usize);        // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n++         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n           _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n -         _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+-         StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n +         _11 = &((*_27).2: usize);        // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n++         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n -         _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n -         StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n@@ -162,8 +170,16 @@\n       bb3: {\n -         StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n -         StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n++         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n++         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n++         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n++         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n           return;                          // scope 0 at $DIR/slice_filter.rs:+0:76: +0:76\n       }\n   "}, {"sha": "f6350b3812a2ae1225ba2eb500e8278302537f02", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.ReferencePropagation.diff", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c43b61b870add2daddbd8e480477e5a8aa409c2/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3c43b61b870add2daddbd8e480477e5a8aa409c2/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.ReferencePropagation.diff?ref=3c43b61b870add2daddbd8e480477e5a8aa409c2", "patch": "@@ -93,12 +93,16 @@\n       }\n   \n       bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n           _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n           _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n           _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n           _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n           _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n           _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n@@ -160,6 +164,10 @@\n       bb3: {\n           StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n           return;                          // scope 0 at $DIR/slice_filter.rs:+0:76: +0:76\n       }\n   "}]}