{"sha": "f4ea3928aca448788e0d3abc05d7ece832278f80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZWEzOTI4YWNhNDQ4Nzg4ZTBkM2FiYzA1ZDdlY2U4MzIyNzhmODA=", "commit": {"author": {"name": "Garming Sam", "email": "garming_sam@outlook.com", "date": "2015-05-14T11:40:16Z"}, "committer": {"name": "Garming Sam", "email": "garming_sam@outlook.com", "date": "2015-08-09T08:53:57Z"}, "message": "Introduce callback to resolver\n\nSets a flag to pass through the rest of the walker.", "tree": {"sha": "f0940c917820b4acdcaa73ca431de91cf5129636", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0940c917820b4acdcaa73ca431de91cf5129636"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4ea3928aca448788e0d3abc05d7ece832278f80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ea3928aca448788e0d3abc05d7ece832278f80", "html_url": "https://github.com/rust-lang/rust/commit/f4ea3928aca448788e0d3abc05d7ece832278f80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4ea3928aca448788e0d3abc05d7ece832278f80/comments", "author": {"login": "GSam", "id": 1924133, "node_id": "MDQ6VXNlcjE5MjQxMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1924133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GSam", "html_url": "https://github.com/GSam", "followers_url": "https://api.github.com/users/GSam/followers", "following_url": "https://api.github.com/users/GSam/following{/other_user}", "gists_url": "https://api.github.com/users/GSam/gists{/gist_id}", "starred_url": "https://api.github.com/users/GSam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GSam/subscriptions", "organizations_url": "https://api.github.com/users/GSam/orgs", "repos_url": "https://api.github.com/users/GSam/repos", "events_url": "https://api.github.com/users/GSam/events{/privacy}", "received_events_url": "https://api.github.com/users/GSam/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GSam", "id": 1924133, "node_id": "MDQ6VXNlcjE5MjQxMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1924133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GSam", "html_url": "https://github.com/GSam", "followers_url": "https://api.github.com/users/GSam/followers", "following_url": "https://api.github.com/users/GSam/following{/other_user}", "gists_url": "https://api.github.com/users/GSam/gists{/gist_id}", "starred_url": "https://api.github.com/users/GSam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GSam/subscriptions", "organizations_url": "https://api.github.com/users/GSam/orgs", "repos_url": "https://api.github.com/users/GSam/repos", "events_url": "https://api.github.com/users/GSam/events{/privacy}", "received_events_url": "https://api.github.com/users/GSam/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea5cc76aac7094abfe01657db8312c8450b15200", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea5cc76aac7094abfe01657db8312c8450b15200", "html_url": "https://github.com/rust-lang/rust/commit/ea5cc76aac7094abfe01657db8312c8450b15200"}], "stats": {"total": 108, "additions": 92, "deletions": 16}, "files": [{"sha": "b6e9619129ba2888e4e6b826011ca65c7ab163e6", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 92, "deletions": 16, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/f4ea3928aca448788e0d3abc05d7ece832278f80/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ea3928aca448788e0d3abc05d7ece832278f80/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f4ea3928aca448788e0d3abc05d7ece832278f80", "patch": "@@ -397,7 +397,7 @@ enum PatternBindingMode {\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n-enum Namespace {\n+pub enum Namespace {\n     TypeNS,\n     ValueNS\n }\n@@ -445,18 +445,38 @@ enum NameDefinition {\n \n impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n     fn visit_item(&mut self, item: &Item) {\n+        if let Some(ref callback) = self.callback {\n+            if callback(ast_map::Node::NodeItem(item), &mut self.resolved) {\n+                return;\n+            }\n+        }\n         self.resolve_item(item);\n     }\n     fn visit_arm(&mut self, arm: &Arm) {\n         self.resolve_arm(arm);\n     }\n     fn visit_block(&mut self, block: &Block) {\n+        if let Some(ref callback) = self.callback {\n+            if callback(ast_map::Node::NodeBlock(block), &mut self.resolved) {\n+                return;\n+            }\n+        }\n         self.resolve_block(block);\n     }\n     fn visit_expr(&mut self, expr: &Expr) {\n+        if let Some(ref callback) = self.callback {\n+            if callback(ast_map::Node::NodeExpr(expr), &mut self.resolved) {\n+                return;\n+            }\n+        }\n         self.resolve_expr(expr);\n     }\n     fn visit_local(&mut self, local: &Local) {\n+        if let Some(ref callback) = self.callback {\n+            if callback(ast_map::Node::NodeLocal(&*local.pat), &mut self.resolved) {\n+                return;\n+            }\n+        }\n         self.resolve_local(local);\n     }\n     fn visit_ty(&mut self, ty: &Ty) {\n@@ -475,6 +495,11 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n         visit::walk_poly_trait_ref(self, tref, m);\n     }\n     fn visit_variant(&mut self, variant: &ast::Variant, generics: &Generics) {\n+        if let Some(ref callback) = self.callback {\n+            if callback(ast_map::Node::NodeVariant(variant), &mut self.resolved) {\n+                return;\n+            }\n+        }\n         if let Some(ref dis_expr) = variant.node.disr_expr {\n             // resolve the discriminator expr as a constant\n             self.with_constant_rib(|this| {\n@@ -498,6 +523,11 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n         }\n     }\n     fn visit_foreign_item(&mut self, foreign_item: &ast::ForeignItem) {\n+        if let Some(ref callback) = self.callback {\n+            if callback(ast_map::Node::NodeForeignItem(foreign_item), &mut self.resolved) {\n+                return;\n+            }\n+        }\n         let type_parameters = match foreign_item.node {\n             ForeignItemFn(_, ref generics) => {\n                 HasTypeParameters(generics, FnSpace, ItemRibKind)\n@@ -1110,6 +1140,13 @@ pub struct Resolver<'a, 'tcx:'a> {\n \n     used_imports: HashSet<(NodeId, Namespace)>,\n     used_crates: HashSet<CrateNum>,\n+\n+    // Callback function for intercepting walks\n+    callback: Option<Box<Fn(ast_map::Node, &mut bool) -> bool>>,\n+    // The intention is that the callback modifies this flag.\n+    // Once set, the resolver falls out of the walk, preserving the ribs.\n+    resolved: bool,\n+\n }\n \n #[derive(PartialEq)]\n@@ -1171,6 +1208,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             emit_errors: true,\n             make_glob_map: make_glob_map == MakeGlobMap::Yes,\n             glob_map: HashMap::new(),\n+\n+            callback: None,\n+            resolved: false,\n+\n         }\n     }\n \n@@ -2207,7 +2248,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         f(self);\n \n         match type_parameters {\n-            HasTypeParameters(..) => { self.type_ribs.pop(); }\n+            HasTypeParameters(..) => { if !self.resolved { self.type_ribs.pop(); } }\n             NoTypeParameters => { }\n         }\n     }\n@@ -2217,7 +2258,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     {\n         self.label_ribs.push(Rib::new(NormalRibKind));\n         f(self);\n-        self.label_ribs.pop();\n+        if !self.resolved {\n+            self.label_ribs.pop();\n+        }\n     }\n \n     fn with_constant_rib<F>(&mut self, f: F) where\n@@ -2226,8 +2269,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         self.value_ribs.push(Rib::new(ConstantItemRibKind));\n         self.type_ribs.push(Rib::new(ConstantItemRibKind));\n         f(self);\n-        self.type_ribs.pop();\n-        self.value_ribs.pop();\n+        if !self.resolved {\n+            self.type_ribs.pop();\n+            self.value_ribs.pop();\n+        }\n     }\n \n     fn resolve_function(&mut self,\n@@ -2258,8 +2303,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         debug!(\"(resolving function) leaving function\");\n \n-        self.label_ribs.pop();\n-        self.value_ribs.pop();\n+        if !self.resolved {\n+            self.label_ribs.pop();\n+            self.value_ribs.pop();\n+        }\n     }\n \n     fn resolve_trait_reference(&mut self,\n@@ -2362,7 +2409,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         self_type_rib.bindings.insert(name, DlDef(self_def));\n         self.type_ribs.push(self_type_rib);\n         f(self);\n-        self.type_ribs.pop();\n+        if !self.resolved {\n+            self.type_ribs.pop();\n+        }\n     }\n \n     fn resolve_implementation(&mut self,\n@@ -2531,7 +2580,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         visit::walk_expr_opt(self, &arm.guard);\n         self.visit_expr(&*arm.body);\n \n-        self.value_ribs.pop();\n+        if !self.resolved {\n+            self.value_ribs.pop();\n+        }\n     }\n \n     fn resolve_block(&mut self, block: &Block) {\n@@ -2575,7 +2626,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         // Move back up.\n         self.current_module = orig_module;\n \n-        self.value_ribs.pop();\n+        if !self.resolved {\n+            self.value_ribs.pop();\n+        }\n         debug!(\"(resolving block) leaving block\");\n     }\n \n@@ -3017,12 +3070,12 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     /// doesn't skip straight to the containing module.\n     /// Skips `path_depth` trailing segments, which is also reflected in the\n     /// returned value. See `middle::def::PathResolution` for more info.\n-    fn resolve_path(&mut self,\n-                    id: NodeId,\n-                    path: &Path,\n-                    path_depth: usize,\n-                    namespace: Namespace,\n-                    check_ribs: bool) -> Option<PathResolution> {\n+    pub fn resolve_path(&mut self,\n+                        id: NodeId,\n+                        path: &Path,\n+                        path_depth: usize,\n+                        namespace: Namespace,\n+                        check_ribs: bool) -> Option<PathResolution> {\n         let span = path.span;\n         let segments = &path.segments[..path.segments.len()-path_depth];\n \n@@ -3991,4 +4044,27 @@ pub fn resolve_crate<'a, 'tcx>(session: &'a Session,\n     }\n }\n \n+pub fn create_resolver<'a, 'tcx>(session: &'a Session,\n+                                 ast_map: &'a ast_map::Map<'tcx>,\n+                                 _: &LanguageItems,\n+                                 krate: &'a Crate,\n+                                 make_glob_map: MakeGlobMap,\n+                                 callback: Option<Box<Fn(ast_map::Node, &mut bool) -> bool>>)\n+                                 -> Resolver<'a, 'tcx> {\n+    let mut resolver = Resolver::new(session, ast_map, krate.span, make_glob_map);\n+\n+    resolver.callback = callback;\n+\n+    build_reduced_graph::build_reduced_graph(&mut resolver, krate);\n+    session.abort_if_errors();\n+\n+    resolve_imports::resolve_imports(&mut resolver);\n+    session.abort_if_errors();\n+\n+    record_exports::record(&mut resolver);\n+    session.abort_if_errors();\n+\n+    resolver\n+}\n+\n __build_diagnostic_array! { librustc_resolve, DIAGNOSTICS }"}]}