{"sha": "e17748e4b21bb8731151219111880dcf7ac71227", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNzc0OGU0YjIxYmI4NzMxMTUxMjE5MTExODgwZGNmN2FjNzEyMjc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-04T17:37:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-04T17:37:09Z"}, "message": "Merge #8727\n\n8727: minor: use standard import style r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "212a05f87effc9175e30299fe5b60263d8ab268e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/212a05f87effc9175e30299fe5b60263d8ab268e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e17748e4b21bb8731151219111880dcf7ac71227", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgkYZFCRBK7hj4Ov3rIwAAeWAIAIJOoJVxhnjv3S5KgYcXxoiu\n9h1+O+uJCtca6URNU0bD1FK3d+4S3FHlj9D7hgJYhEVMoiaIa2Lbac5NbSg5bQMa\nQrVPtnehH0kiPYWB+GE1m88hjovDkc/y8egZxBvqvXteCSbKtLL7LrStCexHDfPM\nJtwTDCwhj7bXR62r+jQtSF3PEa46+FWnjWlozUOi1on5jREBUetP3xpWyHBtzAZi\nBr8dh/yxHxQU2E5Cs5iGqMyZXoxTAP4mf/8rFgVFysx296hZnC/UP9ekcslhAzyS\n/5AhkO9rUNkIpZM0RcABTLuheL5c9TFzET82uaPBOIAHeeOxtGuLpQKLnkNTvlE=\n=K2Kf\n-----END PGP SIGNATURE-----\n", "payload": "tree 212a05f87effc9175e30299fe5b60263d8ab268e\nparent 5e87f842116005d0d75364147de0f412739af622\nparent 2e97dbcbb82dbcc0561d7f0bb9a225eb4d2845fc\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1620149829 +0000\ncommitter GitHub <noreply@github.com> 1620149829 +0000\n\nMerge #8727\n\n8727: minor: use standard import style r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e17748e4b21bb8731151219111880dcf7ac71227", "html_url": "https://github.com/rust-lang/rust/commit/e17748e4b21bb8731151219111880dcf7ac71227", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e17748e4b21bb8731151219111880dcf7ac71227/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e87f842116005d0d75364147de0f412739af622", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e87f842116005d0d75364147de0f412739af622", "html_url": "https://github.com/rust-lang/rust/commit/5e87f842116005d0d75364147de0f412739af622"}, {"sha": "2e97dbcbb82dbcc0561d7f0bb9a225eb4d2845fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e97dbcbb82dbcc0561d7f0bb9a225eb4d2845fc", "html_url": "https://github.com/rust-lang/rust/commit/2e97dbcbb82dbcc0561d7f0bb9a225eb4d2845fc"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "1389e30db62f86b9454131f248554df25fef6e48", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e17748e4b21bb8731151219111880dcf7ac71227/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17748e4b21bb8731151219111880dcf7ac71227/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=e17748e4b21bb8731151219111880dcf7ac71227", "patch": "@@ -3,14 +3,14 @@\n use std::sync::Arc;\n \n use base_db::{salsa, SourceDatabase};\n-use mbe::{ExpandError, ExpandResult, MacroDef, MacroRules};\n+use mbe::{ExpandError, ExpandResult};\n use parser::FragmentKind;\n use syntax::{\n     algo::diff,\n-    ast::{MacroStmts, NameOwner},\n+    ast::{self, NameOwner},\n     AstNode, GreenNode, Parse,\n     SyntaxKind::*,\n-    SyntaxNode,\n+    SyntaxNode, SyntaxToken,\n };\n \n use crate::{\n@@ -120,9 +120,9 @@ pub trait AstDatabase: SourceDatabase {\n pub fn expand_hypothetical(\n     db: &dyn AstDatabase,\n     actual_macro_call: MacroCallId,\n-    hypothetical_args: &syntax::ast::TokenTree,\n-    token_to_map: syntax::SyntaxToken,\n-) -> Option<(SyntaxNode, syntax::SyntaxToken)> {\n+    hypothetical_args: &ast::TokenTree,\n+    token_to_map: SyntaxToken,\n+) -> Option<(SyntaxNode, SyntaxToken)> {\n     let macro_file = MacroFile { macro_call_id: actual_macro_call };\n     let (tt, tmap_1) = mbe::syntax_node_to_token_tree(hypothetical_args.syntax());\n     let range =\n@@ -146,10 +146,10 @@ fn ast_id_map(db: &dyn AstDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<(TokenExpander, mbe::TokenMap)>> {\n     match id.kind {\n         MacroDefKind::Declarative(ast_id) => match ast_id.to_node(db) {\n-            syntax::ast::Macro::MacroRules(macro_rules) => {\n+            ast::Macro::MacroRules(macro_rules) => {\n                 let arg = macro_rules.token_tree()?;\n                 let (tt, tmap) = mbe::ast_to_token_tree(&arg);\n-                let rules = match MacroRules::parse(&tt) {\n+                let rules = match mbe::MacroRules::parse(&tt) {\n                     Ok(it) => it,\n                     Err(err) => {\n                         let name = macro_rules.name().map(|n| n.to_string()).unwrap_or_default();\n@@ -159,10 +159,10 @@ fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<(TokenExpander,\n                 };\n                 Some(Arc::new((TokenExpander::MacroRules(rules), tmap)))\n             }\n-            syntax::ast::Macro::MacroDef(macro_def) => {\n+            ast::Macro::MacroDef(macro_def) => {\n                 let arg = macro_def.body()?;\n                 let (tt, tmap) = mbe::ast_to_token_tree(&arg);\n-                let rules = match MacroDef::parse(&tt) {\n+                let rules = match mbe::MacroDef::parse(&tt) {\n                     Ok(it) => it,\n                     Err(err) => {\n                         let name = macro_def.name().map(|n| n.to_string()).unwrap_or_default();\n@@ -408,7 +408,7 @@ fn is_self_replicating(from: &SyntaxNode, to: &SyntaxNode) -> bool {\n     if diff(from, to).is_empty() {\n         return true;\n     }\n-    if let Some(stmts) = MacroStmts::cast(from.clone()) {\n+    if let Some(stmts) = ast::MacroStmts::cast(from.clone()) {\n         if stmts.statements().any(|stmt| diff(stmt.syntax(), to).is_empty()) {\n             return true;\n         }"}]}