{"sha": "ee8cc77b32e5480c92b0259347f32f9a4bef6f92", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlOGNjNzdiMzJlNTQ4MGM5MmIwMjU5MzQ3ZjMyZjlhNGJlZjZmOTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-15T08:30:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-15T08:30:36Z"}, "message": "Auto merge of #52361 - QuietMisdreavus:proc-macro-doc, r=ollie27\n\nrustdoc: don't panic when the cross-re-export handler sees a proc-macro\n\nWhen i moved the macro cross-re-export inlining code into `clean::inline`, i thought that if a macro had a `Def` that said it was a bang macro, it wouldn't be a proc macro. I thought wrong. Turns out, the `quote!()` in `libproc_macro` is actually a proc-macro, and when the `quote!()` macro is re-exported, this proc-macro is accessed in its place. This causes any `proc_macro::*` glob re-export to pull in this proc-macro, causing the assertion i added to fire, leading to an ICE. This replaces that with an Option that ignores proc-macros for the time being.\n\nFixes https://github.com/rust-lang/rust/issues/52129", "tree": {"sha": "e8b1959783538c6881328f4af13c727bc827d5f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8b1959783538c6881328f4af13c727bc827d5f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee8cc77b32e5480c92b0259347f32f9a4bef6f92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8cc77b32e5480c92b0259347f32f9a4bef6f92", "html_url": "https://github.com/rust-lang/rust/commit/ee8cc77b32e5480c92b0259347f32f9a4bef6f92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee8cc77b32e5480c92b0259347f32f9a4bef6f92/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb09c39f4454577c9346fcce24db0f53ca49dce7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb09c39f4454577c9346fcce24db0f53ca49dce7", "html_url": "https://github.com/rust-lang/rust/commit/bb09c39f4454577c9346fcce24db0f53ca49dce7"}, {"sha": "e78fb9bad0e9137c75147c4469806fe0e61154c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e78fb9bad0e9137c75147c4469806fe0e61154c2", "html_url": "https://github.com/rust-lang/rust/commit/e78fb9bad0e9137c75147c4469806fe0e61154c2"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "0117e4fde842d412fd5c2bdeca3c5d74751622c4", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee8cc77b32e5480c92b0259347f32f9a4bef6f92/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8cc77b32e5480c92b0259347f32f9a4bef6f92/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=ee8cc77b32e5480c92b0259347f32f9a4bef6f92", "patch": "@@ -104,7 +104,11 @@ pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name, visited: &mut FxHa\n         // separately\n         Def::Macro(did, MacroKind::Bang) => {\n             record_extern_fqn(cx, did, clean::TypeKind::Macro);\n-            clean::MacroItem(build_macro(cx, did, name))\n+            if let Some(mac) = build_macro(cx, did, name) {\n+                clean::MacroItem(mac)\n+            } else {\n+                return None;\n+            }\n         }\n         _ => return None,\n     };\n@@ -466,12 +470,12 @@ fn build_static(cx: &DocContext, did: DefId, mutable: bool) -> clean::Static {\n     }\n }\n \n-fn build_macro(cx: &DocContext, did: DefId, name: ast::Name) -> clean::Macro {\n+fn build_macro(cx: &DocContext, did: DefId, name: ast::Name) -> Option<clean::Macro> {\n     let imported_from = cx.tcx.original_crate_name(did.krate);\n     let def = match cx.cstore.load_macro_untracked(did, cx.sess()) {\n         LoadedMacro::MacroDef(macro_def) => macro_def,\n         // FIXME(jseyfried): document proc macro re-exports\n-        LoadedMacro::ProcMacro(..) => panic!(\"attempting to document proc-macro re-export\"),\n+        LoadedMacro::ProcMacro(..) => return None,\n     };\n \n     let matchers: hir::HirVec<Span> = if let ast::ItemKind::MacroDef(ref def) = def.node {\n@@ -487,10 +491,10 @@ fn build_macro(cx: &DocContext, did: DefId, name: ast::Name) -> clean::Macro {\n                              format!(\"    {} => {{ ... }};\\n\", span.to_src(cx))\n                          }).collect::<String>());\n \n-    clean::Macro {\n+    Some(clean::Macro {\n         source,\n         imported_from: Some(imported_from).clean(cx),\n-    }\n+    })\n }\n \n /// A trait's generics clause actually contains all of the predicates for all of"}, {"sha": "b3b403a7b86aa921de44438b216ed1e7dcc8aef8", "filename": "src/test/rustdoc/doc-proc-macro.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee8cc77b32e5480c92b0259347f32f9a4bef6f92/src%2Ftest%2Frustdoc%2Fdoc-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee8cc77b32e5480c92b0259347f32f9a4bef6f92/src%2Ftest%2Frustdoc%2Fdoc-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-proc-macro.rs?ref=ee8cc77b32e5480c92b0259347f32f9a4bef6f92", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #52129: ICE when trying to document the `quote` proc-macro from proc_macro\n+\n+// As of this writing, we don't currently attempt to document proc-macros. However, we shouldn't\n+// crash when we try.\n+\n+extern crate proc_macro;\n+\n+pub use proc_macro::*;"}]}