{"sha": "db01c945fc96fa5f2d68dbd73d75a282a07576b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMDFjOTQ1ZmM5NmZhNWYyZDY4ZGJkNzNkNzVhMjgyYTA3NTc2YjU=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-05-19T20:16:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-19T20:16:17Z"}, "message": "Rollup merge of #42037 - nagisa:charpat, r=sfackler\n\nMinor optimisation of the string operations\n\nThe interesting benchmarks are\n\n<table cellspacing=\"0\" border=\"0\">\n\t<tr>\n\t\t<th height=\"17\" align=\"right\"><b> (&lt;100% \u2192 better than original )</b></th>\n\t\t<th align=\"left\" sdnum=\"2057;0;0.00%\">Delta</th>\n\t\t<th align=\"left\">Original ns/i</th>\n\t\t<th align=\"left\">This Patch ns/i</th>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::contains_bang_char::long_lorem_ipsum</td>\n\t\t<td align=\"right\" sdval=\"0.249775381850854\" sdnum=\"2057;0;0.00%\">24.98%</td>\n\t\t<td align=\"right\" sdval=\"5565\" sdnum=\"2057;\">5565</td>\n\t\t<td align=\"right\" sdval=\"1390\" sdnum=\"2057;\">1390</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::contains_bang_char::short_ascii</td>\n\t\t<td align=\"right\" sdval=\"0.277777777777778\" sdnum=\"2057;0;0.00%\">27.78%</td>\n\t\t<td align=\"right\" sdval=\"144\" sdnum=\"2057;\">144</td>\n\t\t<td align=\"right\" sdval=\"40\" sdnum=\"2057;\">40</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::contains_bang_char::short_mixed</td>\n\t\t<td align=\"right\" sdval=\"0.333333333333333\" sdnum=\"2057;0;0.00%\">33.33%</td>\n\t\t<td align=\"right\" sdval=\"120\" sdnum=\"2057;\">120</td>\n\t\t<td align=\"right\" sdval=\"40\" sdnum=\"2057;\">40</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::contains_bang_char::short_pile_of_poo</td>\n\t\t<td align=\"right\" sdval=\"0.594202898550725\" sdnum=\"2057;0;0.00%\">59.42%</td>\n\t\t<td align=\"right\" sdval=\"69\" sdnum=\"2057;\">69</td>\n\t\t<td align=\"right\" sdval=\"41\" sdnum=\"2057;\">41</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::ends_with_ascii_char::long_lorem_ipsum</td>\n\t\t<td align=\"right\" sdval=\"0.452629649990837\" sdnum=\"2057;0;0.00%\">45.26%</td>\n\t\t<td align=\"right\" sdval=\"5457\" sdnum=\"2057;\">5457</td>\n\t\t<td align=\"right\" sdval=\"2470\" sdnum=\"2057;\">2470</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::ends_with_ascii_char::short_ascii</td>\n\t\t<td align=\"right\" sdval=\"0.450054684651841\" sdnum=\"2057;0;0.00%\">45.01%</td>\n\t\t<td align=\"right\" sdval=\"5486\" sdnum=\"2057;\">5486</td>\n\t\t<td align=\"right\" sdval=\"2469\" sdnum=\"2057;\">2469</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::ends_with_ascii_char::short_mixed</td>\n\t\t<td align=\"right\" sdval=\"0.463132795304475\" sdnum=\"2057;0;0.00%\">46.31%</td>\n\t\t<td align=\"right\" sdval=\"5452\" sdnum=\"2057;\">5452</td>\n\t\t<td align=\"right\" sdval=\"2525\" sdnum=\"2057;\">2525</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::ends_with_ascii_char::short_pile_of_poo</td>\n\t\t<td align=\"right\" sdval=\"0.453426419254088\" sdnum=\"2057;0;0.00%\">45.34%</td>\n\t\t<td align=\"right\" sdval=\"5443\" sdnum=\"2057;\">5443</td>\n\t\t<td align=\"right\" sdval=\"2468\" sdnum=\"2057;\">2468</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::ends_with_unichar::long_lorem_ipsum</td>\n\t\t<td align=\"right\" sdval=\"0.459385290889133\" sdnum=\"2057;0;0.00%\">45.94%</td>\n\t\t<td align=\"right\" sdval=\"5466\" sdnum=\"2057;\">5466</td>\n\t\t<td align=\"right\" sdval=\"2511\" sdnum=\"2057;\">2511</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::ends_with_unichar::short_ascii</td>\n\t\t<td align=\"right\" sdval=\"0.460593841642229\" sdnum=\"2057;0;0.00%\">46.06%</td>\n\t\t<td align=\"right\" sdval=\"5456\" sdnum=\"2057;\">5456</td>\n\t\t<td align=\"right\" sdval=\"2513\" sdnum=\"2057;\">2513</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::ends_with_unichar::short_mixed</td>\n\t\t<td align=\"right\" sdval=\"0.454976303317536\" sdnum=\"2057;0;0.00%\">45.50%</td>\n\t\t<td align=\"right\" sdval=\"5486\" sdnum=\"2057;\">5486</td>\n\t\t<td align=\"right\" sdval=\"2496\" sdnum=\"2057;\">2496</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::ends_with_unichar::short_pile_of_poo</td>\n\t\t<td align=\"right\" sdval=\"0.456497797356828\" sdnum=\"2057;0;0.00%\">45.65%</td>\n\t\t<td align=\"right\" sdval=\"5448\" sdnum=\"2057;\">5448</td>\n\t\t<td align=\"right\" sdval=\"2487\" sdnum=\"2057;\">2487</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::find_underscore_char::long_lorem_ipsum</td>\n\t\t<td align=\"right\" sdval=\"0.622058559367703\" sdnum=\"2057;0;0.00%\">62.21%</td>\n\t\t<td align=\"right\" sdval=\"5567\" sdnum=\"2057;\">5567</td>\n\t\t<td align=\"right\" sdval=\"3463\" sdnum=\"2057;\">3463</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::find_underscore_char::short_ascii</td>\n\t\t<td align=\"right\" sdval=\"0.664383561643836\" sdnum=\"2057;0;0.00%\">66.44%</td>\n\t\t<td align=\"right\" sdval=\"146\" sdnum=\"2057;\">146</td>\n\t\t<td align=\"right\" sdval=\"97\" sdnum=\"2057;\">97</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::find_underscore_char::short_mixed</td>\n\t\t<td align=\"right\" sdval=\"0.762295081967213\" sdnum=\"2057;0;0.00%\">76.23%</td>\n\t\t<td align=\"right\" sdval=\"122\" sdnum=\"2057;\">122</td>\n\t\t<td align=\"right\" sdval=\"93\" sdnum=\"2057;\">93</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::find_underscore_str::short_pile_of_poo</td>\n\t\t<td align=\"right\" sdval=\"0.476190476190476\" sdnum=\"2057;0;0.00%\">47.62%</td>\n\t\t<td align=\"right\" sdval=\"252\" sdnum=\"2057;\">252</td>\n\t\t<td align=\"right\" sdval=\"120\" sdnum=\"2057;\">120</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::find_zzz_char::long_lorem_ipsum</td>\n\t\t<td align=\"right\" sdval=\"0.621655593463818\" sdnum=\"2057;0;0.00%\">62.17%</td>\n\t\t<td align=\"right\" sdval=\"5569\" sdnum=\"2057;\">5569</td>\n\t\t<td align=\"right\" sdval=\"3462\" sdnum=\"2057;\">3462</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::find_zzz_char::short_ascii</td>\n\t\t<td align=\"right\" sdval=\"0.666666666666667\" sdnum=\"2057;0;0.00%\">66.67%</td>\n\t\t<td align=\"right\" sdval=\"147\" sdnum=\"2057;\">147</td>\n\t\t<td align=\"right\" sdval=\"98\" sdnum=\"2057;\">98</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::find_zzz_char::short_mixed</td>\n\t\t<td align=\"right\" sdval=\"0.754098360655738\" sdnum=\"2057;0;0.00%\">75.41%</td>\n\t\t<td align=\"right\" sdval=\"122\" sdnum=\"2057;\">122</td>\n\t\t<td align=\"right\" sdval=\"92\" sdnum=\"2057;\">92</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::find_zzz_str::long_lorem_ipsum</td>\n\t\t<td align=\"right\" sdval=\"0.728648648648649\" sdnum=\"2057;0;0.00%\">72.86%</td>\n\t\t<td align=\"right\" sdval=\"925\" sdnum=\"2057;\">925</td>\n\t\t<td align=\"right\" sdval=\"674\" sdnum=\"2057;\">674</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::rfind_underscore_char::long_lorem_ipsum</td>\n\t\t<td align=\"right\" sdval=\"0.3418911335578\" sdnum=\"2057;0;0.00%\">34.19%</td>\n\t\t<td align=\"right\" sdval=\"7128\" sdnum=\"2057;\">7128</td>\n\t\t<td align=\"right\" sdval=\"2437\" sdnum=\"2057;\">2437</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::rfind_underscore_char::short_ascii</td>\n\t\t<td align=\"right\" sdval=\"0.373056994818653\" sdnum=\"2057;0;0.00%\">37.31%</td>\n\t\t<td align=\"right\" sdval=\"193\" sdnum=\"2057;\">193</td>\n\t\t<td align=\"right\" sdval=\"72\" sdnum=\"2057;\">72</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::rfind_underscore_char::short_mixed</td>\n\t\t<td align=\"right\" sdval=\"0.414201183431953\" sdnum=\"2057;0;0.00%\">41.42%</td>\n\t\t<td align=\"right\" sdval=\"169\" sdnum=\"2057;\">169</td>\n\t\t<td align=\"right\" sdval=\"70\" sdnum=\"2057;\">70</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::rfind_underscore_char::short_pile_of_poo</td>\n\t\t<td align=\"right\" sdval=\"0.505050505050505\" sdnum=\"2057;0;0.00%\">50.51%</td>\n\t\t<td align=\"right\" sdval=\"99\" sdnum=\"2057;\">99</td>\n\t\t<td align=\"right\" sdval=\"50\" sdnum=\"2057;\">50</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::rfind_zzz_char::long_lorem_ipsum</td>\n\t\t<td align=\"right\" sdval=\"0.341983447888904\" sdnum=\"2057;0;0.00%\">34.20%</td>\n\t\t<td align=\"right\" sdval=\"7129\" sdnum=\"2057;\">7129</td>\n\t\t<td align=\"right\" sdval=\"2438\" sdnum=\"2057;\">2438</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::rfind_zzz_char::short_ascii</td>\n\t\t<td align=\"right\" sdval=\"0.371134020618557\" sdnum=\"2057;0;0.00%\">37.11%</td>\n\t\t<td align=\"right\" sdval=\"194\" sdnum=\"2057;\">194</td>\n\t\t<td align=\"right\" sdval=\"72\" sdnum=\"2057;\">72</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::rfind_zzz_char::short_mixed</td>\n\t\t<td align=\"right\" sdval=\"0.409356725146199\" sdnum=\"2057;0;0.00%\">40.94%</td>\n\t\t<td align=\"right\" sdval=\"171\" sdnum=\"2057;\">171</td>\n\t\t<td align=\"right\" sdval=\"70\" sdnum=\"2057;\">70</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::rfind_zzz_char::short_pile_of_poo</td>\n\t\t<td align=\"right\" sdval=\"0.548076923076923\" sdnum=\"2057;0;0.00%\">54.81%</td>\n\t\t<td align=\"right\" sdval=\"104\" sdnum=\"2057;\">104</td>\n\t\t<td align=\"right\" sdval=\"57\" sdnum=\"2057;\">57</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">str::trim_right_ascii_char::short_mixed</td>\n\t\t<td align=\"right\" sdval=\"1.10416666666667\" sdnum=\"2057;0;0.00%\">110.42%</td>\n\t\t<td align=\"right\" sdval=\"48\" sdnum=\"2057;\">48</td>\n\t\t<td align=\"right\" sdval=\"53\" sdnum=\"2057;\">53</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">string::bench_from</td>\n\t\t<td align=\"right\" sdval=\"1.17241379310345\" sdnum=\"2057;0;0.00%\">117.24%</td>\n\t\t<td align=\"right\" sdval=\"58\" sdnum=\"2057;\">58</td>\n\t\t<td align=\"right\" sdval=\"68\" sdnum=\"2057;\">68</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">string::bench_from_str</td>\n\t\t<td align=\"right\" sdval=\"1.17241379310345\" sdnum=\"2057;0;0.00%\">117.24%</td>\n\t\t<td align=\"right\" sdval=\"58\" sdnum=\"2057;\">58</td>\n\t\t<td align=\"right\" sdval=\"68\" sdnum=\"2057;\">68</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">string::bench_push_str</td>\n\t\t<td align=\"right\" sdval=\"1.11111111111111\" sdnum=\"2057;0;0.00%\">111.11%</td>\n\t\t<td align=\"right\" sdval=\"54\" sdnum=\"2057;\">54</td>\n\t\t<td align=\"right\" sdval=\"60\" sdnum=\"2057;\">60</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">string::bench_to_string</td>\n\t\t<td align=\"right\" sdval=\"1.12068965517241\" sdnum=\"2057;0;0.00%\">112.07%</td>\n\t\t<td align=\"right\" sdval=\"58\" sdnum=\"2057;\">58</td>\n\t\t<td align=\"right\" sdval=\"65\" sdnum=\"2057;\">65</td>\n\t</tr>\n\t<tr>\n\t\t<td height=\"17\" align=\"left\">string::from_utf8_lossy_100_invalid</td>\n\t\t<td align=\"right\" sdval=\"1.1131458469588\" sdnum=\"2057;0;0.00%\">111.31%</td>\n\t\t<td align=\"right\" sdval=\"1529\" sdnum=\"2057;\">1529</td>\n\t\t<td align=\"right\" sdval=\"1702\" sdnum=\"2057;\">1702</td>\n\t</tr>\n</table>", "tree": {"sha": "5f2a8048e8ea7880a4eeb3397ecb7fbad750d13d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f2a8048e8ea7880a4eeb3397ecb7fbad750d13d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db01c945fc96fa5f2d68dbd73d75a282a07576b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db01c945fc96fa5f2d68dbd73d75a282a07576b5", "html_url": "https://github.com/rust-lang/rust/commit/db01c945fc96fa5f2d68dbd73d75a282a07576b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db01c945fc96fa5f2d68dbd73d75a282a07576b5/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "862e7d4af89a694301e3c5eca49e3d5ed77fbf3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/862e7d4af89a694301e3c5eca49e3d5ed77fbf3d", "html_url": "https://github.com/rust-lang/rust/commit/862e7d4af89a694301e3c5eca49e3d5ed77fbf3d"}, {"sha": "41debc365e398b95742d9e6910705495e93c0ec6", "url": "https://api.github.com/repos/rust-lang/rust/commits/41debc365e398b95742d9e6910705495e93c0ec6", "html_url": "https://github.com/rust-lang/rust/commit/41debc365e398b95742d9e6910705495e93c0ec6"}], "stats": {"total": 65, "additions": 58, "deletions": 7}, "files": [{"sha": "fc4063fae927754353d5e736099f0a365b0dd2d7", "filename": "src/libcollections/benches/str.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/db01c945fc96fa5f2d68dbd73d75a282a07576b5/src%2Flibcollections%2Fbenches%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db01c945fc96fa5f2d68dbd73d75a282a07576b5/src%2Flibcollections%2Fbenches%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbenches%2Fstr.rs?ref=db01c945fc96fa5f2d68dbd73d75a282a07576b5", "patch": "@@ -195,30 +195,34 @@ fn bench_contains_equal(b: &mut Bencher) {\n     })\n }\n \n+\n macro_rules! make_test_inner {\n-    ($s:ident, $code:expr, $name:ident, $str:expr) => {\n+    ($s:ident, $code:expr, $name:ident, $str:expr, $iters:expr) => {\n         #[bench]\n         fn $name(bencher: &mut Bencher) {\n             let mut $s = $str;\n             black_box(&mut $s);\n-            bencher.iter(|| $code);\n+            bencher.iter(|| for _ in 0..$iters { black_box($code); });\n         }\n     }\n }\n \n macro_rules! make_test {\n     ($name:ident, $s:ident, $code:expr) => {\n+        make_test!($name, $s, $code, 1);\n+    };\n+    ($name:ident, $s:ident, $code:expr, $iters:expr) => {\n         mod $name {\n             use test::Bencher;\n             use test::black_box;\n \n             // Short strings: 65 bytes each\n             make_test_inner!($s, $code, short_ascii,\n-                \"Mary had a little lamb, Little lamb Mary had a littl lamb, lamb!\");\n+                \"Mary had a little lamb, Little lamb Mary had a littl lamb, lamb!\", $iters);\n             make_test_inner!($s, $code, short_mixed,\n-                \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lam!\");\n+                \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lam!\", $iters);\n             make_test_inner!($s, $code, short_pile_of_poo,\n-                \"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9!\");\n+                \"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9!\", $iters);\n             make_test_inner!($s, $code, long_lorem_ipsum,\"\\\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse quis lorem sit amet dolor \\\n ultricies condimentum. Praesent iaculis purus elit, ac malesuada quam malesuada in. Duis sed orci \\\n@@ -253,7 +257,7 @@ Nam lectus enim, dapibus non nisi tempor, consectetur convallis massa. Maecenas\n feugiat. Etiam quis mauris vel risus luctus mattis a a nunc. Nullam orci quam, imperdiet id \\\n vehicula in, porttitor ut nibh. Duis sagittis adipiscing nisl vitae congue. Donec mollis risus eu \\\n leo suscipit, varius porttitor nulla porta. Pellentesque ut sem nec nisi euismod vehicula. Nulla \\\n-malesuada sollicitudin quam eu fermentum!\");\n+malesuada sollicitudin quam eu fermentum!\", $iters);\n         }\n     }\n }\n@@ -288,6 +292,13 @@ make_test!(find_zzz_char, s, s.find('\\u{1F4A4}'));\n make_test!(rfind_zzz_char, s, s.rfind('\\u{1F4A4}'));\n make_test!(find_zzz_str, s, s.find(\"\\u{1F4A4}\"));\n \n+make_test!(starts_with_ascii_char, s, s.starts_with('/'), 1024);\n+make_test!(ends_with_ascii_char, s, s.ends_with('/'), 1024);\n+make_test!(starts_with_unichar, s, s.starts_with('\\u{1F4A4}'), 1024);\n+make_test!(ends_with_unichar, s, s.ends_with('\\u{1F4A4}'), 1024);\n+make_test!(starts_with_str, s, s.starts_with(\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\"), 1024);\n+make_test!(ends_with_str, s, s.ends_with(\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\"), 1024);\n+\n make_test!(split_space_char, s, s.split(' ').count());\n make_test!(split_terminator_space_char, s, s.split_terminator(' ').count());\n "}, {"sha": "7e67befb700dbcd16a5039cf6bdb26716417744b", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/db01c945fc96fa5f2d68dbd73d75a282a07576b5/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db01c945fc96fa5f2d68dbd73d75a282a07576b5/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=db01c945fc96fa5f2d68dbd73d75a282a07576b5", "patch": "@@ -813,6 +813,7 @@ impl str {\n     /// assert!(!bananas.contains(\"apples\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn contains<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool {\n         core_str::StrExt::contains(self, pat)\n     }\n@@ -900,6 +901,7 @@ impl str {\n     /// assert_eq!(s.find(x), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> {\n         core_str::StrExt::find(self, pat)\n     }\n@@ -944,6 +946,7 @@ impl str {\n     /// assert_eq!(s.rfind(x), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn rfind<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1057,6 +1060,7 @@ impl str {\n     ///\n     /// [`split_whitespace`]: #method.split_whitespace\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn split<'a, P: Pattern<'a>>(&'a self, pat: P) -> Split<'a, P> {\n         core_str::StrExt::split(self, pat)\n     }\n@@ -1106,6 +1110,7 @@ impl str {\n     /// assert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn rsplit<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplit<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1152,6 +1157,7 @@ impl str {\n     /// assert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn split_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitTerminator<'a, P> {\n         core_str::StrExt::split_terminator(self, pat)\n     }\n@@ -1195,6 +1201,7 @@ impl str {\n     /// assert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn rsplit_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplitTerminator<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1247,6 +1254,7 @@ impl str {\n     /// assert_eq!(v, [\"abc\", \"defXghi\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn splitn<'a, P: Pattern<'a>>(&'a self, n: usize, pat: P) -> SplitN<'a, P> {\n         core_str::StrExt::splitn(self, n, pat)\n     }\n@@ -1294,6 +1302,7 @@ impl str {\n     /// assert_eq!(v, [\"ghi\", \"abc1def\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn rsplitn<'a, P: Pattern<'a>>(&'a self, n: usize, pat: P) -> RSplitN<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1334,6 +1343,7 @@ impl str {\n     /// assert_eq!(v, [\"1\", \"2\", \"3\"]);\n     /// ```\n     #[stable(feature = \"str_matches\", since = \"1.2.0\")]\n+    #[inline]\n     pub fn matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> Matches<'a, P> {\n         core_str::StrExt::matches(self, pat)\n     }\n@@ -1370,6 +1380,7 @@ impl str {\n     /// assert_eq!(v, [\"3\", \"2\", \"1\"]);\n     /// ```\n     #[stable(feature = \"str_matches\", since = \"1.2.0\")]\n+    #[inline]\n     pub fn rmatches<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatches<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1415,6 +1426,7 @@ impl str {\n     /// assert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n     /// ```\n     #[stable(feature = \"str_match_indices\", since = \"1.5.0\")]\n+    #[inline]\n     pub fn match_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> MatchIndices<'a, P> {\n         core_str::StrExt::match_indices(self, pat)\n     }\n@@ -1457,6 +1469,7 @@ impl str {\n     /// assert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n     /// ```\n     #[stable(feature = \"str_match_indices\", since = \"1.5.0\")]\n+    #[inline]\n     pub fn rmatch_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatchIndices<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n@@ -1737,6 +1750,7 @@ impl str {\n     /// assert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn replace<'a, P: Pattern<'a>>(&'a self, from: P, to: &str) -> String {\n         let mut result = String::new();\n         let mut last_end = 0;"}, {"sha": "4918e37eb35f08a266122920a2def0a07bb2ea81", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/db01c945fc96fa5f2d68dbd73d75a282a07576b5/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db01c945fc96fa5f2d68dbd73d75a282a07576b5/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=db01c945fc96fa5f2d68dbd73d75a282a07576b5", "patch": "@@ -429,7 +429,33 @@ impl<'a> DoubleEndedSearcher<'a> for CharSearcher<'a> {}\n \n /// Searches for chars that are equal to a given char\n impl<'a> Pattern<'a> for char {\n-    pattern_methods!(CharSearcher<'a>, CharEqPattern, CharSearcher);\n+    type Searcher = CharSearcher<'a>;\n+\n+    #[inline]\n+    fn into_searcher(self, haystack: &'a str) -> Self::Searcher {\n+        CharSearcher(CharEqPattern(self).into_searcher(haystack))\n+    }\n+\n+    #[inline]\n+    fn is_contained_in(self, haystack: &'a str) -> bool {\n+        if (self as u32) < 128 {\n+            haystack.as_bytes().contains(&(self as u8))\n+        } else {\n+            let mut buffer = [0u8; 4];\n+            self.encode_utf8(&mut buffer).is_contained_in(haystack)\n+        }\n+    }\n+\n+    #[inline]\n+    fn is_prefix_of(self, haystack: &'a str) -> bool {\n+        CharEqPattern(self).is_prefix_of(haystack)\n+    }\n+\n+    #[inline]\n+    fn is_suffix_of(self, haystack: &'a str) -> bool where Self::Searcher: ReverseSearcher<'a>\n+    {\n+        CharEqPattern(self).is_suffix_of(haystack)\n+    }\n }\n \n /////////////////////////////////////////////////////////////////////////////"}]}