{"sha": "e617025e96fa95f074291a1cc284235a80824eaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MTcwMjVlOTZmYTk1ZjA3NDI5MWExY2MyODQyMzVhODA4MjRlYWY=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2019-04-05T21:13:44Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2019-04-23T22:55:31Z"}, "message": "Add rustc_allow_const_fn_ptr", "tree": {"sha": "d9f75d2704ed6ef7d0dbb6b4ef1e2cbc3dfd357c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9f75d2704ed6ef7d0dbb6b4ef1e2cbc3dfd357c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e617025e96fa95f074291a1cc284235a80824eaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e617025e96fa95f074291a1cc284235a80824eaf", "html_url": "https://github.com/rust-lang/rust/commit/e617025e96fa95f074291a1cc284235a80824eaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e617025e96fa95f074291a1cc284235a80824eaf/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6", "html_url": "https://github.com/rust-lang/rust/commit/e938c2b9aae7e0c37c382e4e22bdc360e9a4f0b6"}], "stats": {"total": 99, "additions": 93, "deletions": 6}, "files": [{"sha": "40cce8e77c0e049028d51d44bc9f8879ef43d226", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e617025e96fa95f074291a1cc284235a80824eaf/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e617025e96fa95f074291a1cc284235a80824eaf/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=e617025e96fa95f074291a1cc284235a80824eaf", "patch": "@@ -121,6 +121,7 @@ impl_stable_hash_for!(struct ::syntax::attr::Stability {\n     feature,\n     rustc_depr,\n     promotable,\n+    allow_const_fn_ptr,\n     const_stability\n });\n "}, {"sha": "8ce86f70a551f929047f774c79f79bad228dc42e", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e617025e96fa95f074291a1cc284235a80824eaf/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e617025e96fa95f074291a1cc284235a80824eaf/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=e617025e96fa95f074291a1cc284235a80824eaf", "patch": "@@ -441,6 +441,7 @@ impl<'a, 'tcx> Index<'tcx> {\n                     rustc_depr: None,\n                     const_stability: None,\n                     promotable: false,\n+                    allow_const_fn_ptr: false,\n                 });\n                 annotator.parent_stab = Some(stability);\n             }"}, {"sha": "1861420b408b6ccf79494c8e2aa3d0161ae68abb", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e617025e96fa95f074291a1cc284235a80824eaf/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e617025e96fa95f074291a1cc284235a80824eaf/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=e617025e96fa95f074291a1cc284235a80824eaf", "patch": "@@ -235,6 +235,8 @@ rustc_queries! {\n         /// constructor function).\n         query is_promotable_const_fn(_: DefId) -> bool {}\n \n+        query const_fn_is_allowed_fn_ptr(_: DefId) -> bool {}\n+\n         /// True if this is a foreign item (i.e., linked via `extern { ... }`).\n         query is_foreign_item(_: DefId) -> bool {}\n "}, {"sha": "7298b548f3197ab248581f3d9fa70aacffef76cb", "filename": "src/librustc/ty/constness.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e617025e96fa95f074291a1cc284235a80824eaf/src%2Flibrustc%2Fty%2Fconstness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e617025e96fa95f074291a1cc284235a80824eaf/src%2Flibrustc%2Fty%2Fconstness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fconstness.rs?ref=e617025e96fa95f074291a1cc284235a80824eaf", "patch": "@@ -95,9 +95,16 @@ pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n         }\n     }\n \n+    fn const_fn_is_allowed_fn_ptr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+        tcx.is_const_fn(def_id) &&\n+            tcx.lookup_stability(def_id)\n+                .map(|stab| stab.allow_const_fn_ptr).unwrap_or(false)\n+    }\n+\n     *providers = Providers {\n         is_const_fn_raw,\n         is_promotable_const_fn,\n+        const_fn_is_allowed_fn_ptr,\n         ..*providers\n     };\n }"}, {"sha": "d5f04ca64e4c4ecb8907fe909aa0461b89ea03cc", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e617025e96fa95f074291a1cc284235a80824eaf/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e617025e96fa95f074291a1cc284235a80824eaf/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=e617025e96fa95f074291a1cc284235a80824eaf", "patch": "@@ -60,13 +60,14 @@ pub fn is_min_const_fn(\n     }\n \n     for local in &mir.local_decls {\n-        check_ty(tcx, local.ty, local.source_info.span)?;\n+        check_ty(tcx, local.ty, local.source_info.span, def_id)?;\n     }\n     // impl trait is gone in MIR, so check the return type manually\n     check_ty(\n         tcx,\n         tcx.fn_sig(def_id).output().skip_binder(),\n         mir.local_decls.iter().next().unwrap().source_info.span,\n+        def_id,\n     )?;\n \n     for bb in mir.basic_blocks() {\n@@ -82,6 +83,7 @@ fn check_ty(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     ty: ty::Ty<'tcx>,\n     span: Span,\n+    fn_def_id: DefId,\n ) -> McfResult {\n     for ty in ty.walk() {\n         match ty.sty {\n@@ -91,7 +93,9 @@ fn check_ty(\n             )),\n             ty::Opaque(..) => return Err((span, \"`impl Trait` in const fn is unstable\".into())),\n             ty::FnPtr(..) => {\n-                return Err((span, \"function pointers in const fn are unstable\".into()))\n+                if !tcx.const_fn_is_allowed_fn_ptr(fn_def_id) {\n+                    return Err((span, \"function pointers in const fn are unstable\".into()))\n+                }\n             }\n             ty::Dynamic(preds, _) => {\n                 for pred in preds.iter() {"}, {"sha": "db821f4e5369d2b0c971a6aca7d37988878fddba", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e617025e96fa95f074291a1cc284235a80824eaf/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e617025e96fa95f074291a1cc284235a80824eaf/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=e617025e96fa95f074291a1cc284235a80824eaf", "patch": "@@ -114,6 +114,8 @@ pub struct Stability {\n     pub const_stability: Option<Symbol>,\n     /// whether the function has a `#[rustc_promotable]` attribute\n     pub promotable: bool,\n+    /// whether the function has a `#[rustc_allow_const_fn_ptr]` attribute\n+    pub allow_const_fn_ptr: bool,\n }\n \n /// The available stability levels.\n@@ -178,6 +180,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n     let mut rustc_depr: Option<RustcDeprecation> = None;\n     let mut rustc_const_unstable: Option<Symbol> = None;\n     let mut promotable = false;\n+    let mut allow_const_fn_ptr = false;\n     let diagnostic = &sess.span_diagnostic;\n \n     'outer: for attr in attrs_iter {\n@@ -187,6 +190,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n             \"unstable\",\n             \"stable\",\n             \"rustc_promotable\",\n+            \"rustc_allow_const_fn_ptr\",\n         ].iter().any(|&s| attr.path == s) {\n             continue // not a stability level\n         }\n@@ -198,6 +202,9 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n         if attr.path == \"rustc_promotable\" {\n             promotable = true;\n         }\n+        if attr.path == \"rustc_allow_const_fn_ptr\" {\n+            allow_const_fn_ptr = true;\n+        }\n         // attributes with data\n         else if let Some(MetaItem { node: MetaItemKind::List(ref metas), .. }) = meta {\n             let meta = meta.as_ref().unwrap();\n@@ -354,6 +361,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                                 rustc_depr: None,\n                                 const_stability: None,\n                                 promotable: false,\n+                                allow_const_fn_ptr: false,\n                             })\n                         }\n                         (None, _, _) => {\n@@ -418,6 +426,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                                 rustc_depr: None,\n                                 const_stability: None,\n                                 promotable: false,\n+                                allow_const_fn_ptr: false,\n                             })\n                         }\n                         (None, _) => {\n@@ -458,13 +467,14 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n     }\n \n     // Merge the const-unstable info into the stability info\n-    if promotable {\n+    if promotable || allow_const_fn_ptr {\n         if let Some(ref mut stab) = stab {\n-            stab.promotable = true;\n+            stab.promotable = promotable;\n+            stab.allow_const_fn_ptr = allow_const_fn_ptr;\n         } else {\n             span_err!(diagnostic, item_sp, E0717,\n-                      \"rustc_promotable attribute must be paired with \\\n-                       either stable or unstable attribute\");\n+                      \"rustc_promotable and rustc_allow_const_fn_ptr attributes \\\n+                      must be paired with either stable or unstable attribute\");\n         }\n     }\n "}, {"sha": "3992607c387e11acb8a958d47aa6924b3146e6cc", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e617025e96fa95f074291a1cc284235a80824eaf/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e617025e96fa95f074291a1cc284235a80824eaf/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs?ref=e617025e96fa95f074291a1cc284235a80824eaf", "patch": "@@ -0,0 +1,10 @@\n+#![feature(rustc_attrs, staged_api)]\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+const fn error(_: fn()) {} //~ ERROR function pointers in const fn are unstable\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_allow_const_fn_ptr]\n+const fn compiles(_: fn()) {}\n+\n+fn main() {}"}, {"sha": "ed9cba9fa2fc45ce33d173e35d1453099220cb32", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e617025e96fa95f074291a1cc284235a80824eaf/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e617025e96fa95f074291a1cc284235a80824eaf/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr?ref=e617025e96fa95f074291a1cc284235a80824eaf", "patch": "@@ -0,0 +1,11 @@\n+error[E0723]: function pointers in const fn are unstable (see issue #57563)\n+  --> $DIR/allow_const_fn_ptr.rs:4:16\n+   |\n+LL | const fn error(_: fn()) {}\n+   |                ^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0723`."}, {"sha": "0395795ef7bfe03e84f18e75f38dd384ae88c24d", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr_feature_gate.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e617025e96fa95f074291a1cc284235a80824eaf/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e617025e96fa95f074291a1cc284235a80824eaf/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.rs?ref=e617025e96fa95f074291a1cc284235a80824eaf", "patch": "@@ -0,0 +1,11 @@\n+#![feature(staged_api)]\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+const fn error(_: fn()) {}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_allow_const_fn_ptr]\n+//~^ ERROR unless otherwise specified, attributes with the prefix `rustc_` are reserved\n+const fn compiles(_: fn()) {}\n+\n+fn main() {}"}, {"sha": "c934307e918b931a1a779ac8eb1f42f00ddf4e87", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr_feature_gate.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e617025e96fa95f074291a1cc284235a80824eaf/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e617025e96fa95f074291a1cc284235a80824eaf/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.stderr?ref=e617025e96fa95f074291a1cc284235a80824eaf", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics\n+  --> $DIR/allow_const_fn_ptr_feature_gate.rs:7:3\n+   |\n+LL | #[rustc_allow_const_fn_ptr]\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "1d8b95ab1a2fdeddb1ab8061ea5268e5d966ab65", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr_run_pass.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e617025e96fa95f074291a1cc284235a80824eaf/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e617025e96fa95f074291a1cc284235a80824eaf/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs?ref=e617025e96fa95f074291a1cc284235a80824eaf", "patch": "@@ -0,0 +1,18 @@\n+// run-pass\n+\n+#![feature(rustc_attrs, staged_api)]\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_allow_const_fn_ptr]\n+const fn takes_fn_ptr(_: fn()) {}\n+\n+const FN: fn() = || ();\n+\n+const fn gives_fn_ptr() {\n+    takes_fn_ptr(FN)\n+}\n+\n+fn main() {\n+    gives_fn_ptr();\n+}"}]}