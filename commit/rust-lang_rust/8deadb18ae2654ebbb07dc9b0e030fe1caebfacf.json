{"sha": "8deadb18ae2654ebbb07dc9b0e030fe1caebfacf", "node_id": "C_kwDOAAsO6NoAKDhkZWFkYjE4YWUyNjU0ZWJiYjA3ZGM5YjBlMDMwZmUxY2FlYmZhY2Y", "commit": {"author": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-14T01:18:03Z"}, "committer": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-14T01:32:12Z"}, "message": "refpat & slicepat", "tree": {"sha": "d7b4e994d3feceb339b1d44247f2286133f644a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7b4e994d3feceb339b1d44247f2286133f644a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8deadb18ae2654ebbb07dc9b0e030fe1caebfacf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEEzoFOOQgvfPzrDpfeO9fUvOMSb0FAmHg0pwACgkQeO9fUvOM\nSb2r7wwAzABpGhkjN4qHJldG1l2t70Z03Ux4eZ5LNFeDv9kuSbWk8B4RmZSqbphf\nzu7P+YwXcLoWFy3ueqDbfvvCw6z1zFsK1g7sm8mAjlncV//OM80ao+ZtJGDBMTpP\nf6PW3zk1IYhPMJATO+kcsHTIqQdDEec8LXi7rbraFCqyIThtkWXbRqr6vka6obhu\nYAzPUEgygGh2DtNiknqiqSUDkqYg+5U1elHx+3LTPH5NPjpl7vNwxLXte3SSTQvh\n0Rz361Ai3iWPYFYcuUr4rEXpJ/R9BPEyZ0FjJ/JWZq3OQpFE1a5dX7KwQTwBXWtx\nlTNr0cAA6fbt65+idZt6qWWQmiypOwvv8S8k1ew8I4rDG/Fmq+LbKWnmqb9astGp\ntD804NKejKYAvchTh2lvCOmgPTaJnwV+P/1z6+apqHut4CjRBdieQFCjXx/U0L9N\n+WTEjgnl4Jf36U+/owgrw18Fhm6eFba06Xcu03Qbu8GSX7fSUQPai0HWYX4D5wS7\nsft6exPG\n=Ftdl\n-----END PGP SIGNATURE-----", "payload": "tree d7b4e994d3feceb339b1d44247f2286133f644a2\nparent 82d3238da8f6c33dc1beb07f3ec945d218615ab8\nauthor Jeroen Vannevel <jer_vannevel@outlook.com> 1642123083 +0000\ncommitter Jeroen Vannevel <jer_vannevel@outlook.com> 1642123932 +0000\n\nrefpat & slicepat\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8deadb18ae2654ebbb07dc9b0e030fe1caebfacf", "html_url": "https://github.com/rust-lang/rust/commit/8deadb18ae2654ebbb07dc9b0e030fe1caebfacf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8deadb18ae2654ebbb07dc9b0e030fe1caebfacf/comments", "author": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82d3238da8f6c33dc1beb07f3ec945d218615ab8", "url": "https://api.github.com/repos/rust-lang/rust/commits/82d3238da8f6c33dc1beb07f3ec945d218615ab8", "html_url": "https://github.com/rust-lang/rust/commit/82d3238da8f6c33dc1beb07f3ec945d218615ab8"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "209d352c78d49401d1c4dd3568e840ed66751185", "filename": "crates/ide_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8deadb18ae2654ebbb07dc9b0e030fe1caebfacf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8deadb18ae2654ebbb07dc9b0e030fe1caebfacf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=8deadb18ae2654ebbb07dc9b0e030fe1caebfacf", "patch": "@@ -146,6 +146,11 @@ fn get_arm_types(context: &AssistContext, arm: &MatchArm) -> HashMap<String, Opt\n                 Some(ast::Pat::ParenPat(parentheses)) => {\n                     recurse(&parentheses.pat(), map, ctx);\n                 }\n+                Some(ast::Pat::SlicePat(slice)) => {\n+                    for slice_pat in slice.pats() {\n+                        recurse(&Some(slice_pat), map, ctx);\n+                    }\n+                }\n                 Some(ast::Pat::IdentPat(ident_pat)) => {\n                     if let Some(name) = ident_pat.name() {\n                         let pat_type = ctx.sema.type_of_pat(local_pat);\n@@ -747,6 +752,41 @@ fn func(x: i32) {\n         ((((variable)))) => \"\",\n         _ => \"other\"\n     };\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn merge_match_arms_refpat() {\n+        check_assist_not_applicable(\n+            merge_match_arms,\n+            r#\"\n+fn func() {\n+    let name = Some(String::from(\"\"));\n+    let n = String::from(\"\");\n+    match name {\n+        Some(ref n) => $0\"\",\n+        Some(n) => \"\",\n+        _ => \"other\",\n+    };\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn merge_match_arms_slice() {\n+        check_assist_not_applicable(\n+            merge_match_arms,\n+            r#\"\n+fn func(binary: &[u8]) {\n+    let space = b' ';\n+    match binary {\n+        [0x7f, b'E', b'L', b'F', ..] => $0\"\",\n+        [space] => \"\",\n+        _ => \"other\",\n+    };\n }\n         \"#,\n         )"}]}