{"sha": "90041d638b1363d3ed89dde8245563bac4c4062c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMDQxZDYzOGIxMzYzZDNlZDg5ZGRlODI0NTU2M2JhYzRjNDA2MmM=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-10-21T23:45:24Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-11-03T04:09:34Z"}, "message": "Added support for trait aliases as object types.", "tree": {"sha": "e239a81f029a8e2418d06924db986a0794e210df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e239a81f029a8e2418d06924db986a0794e210df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90041d638b1363d3ed89dde8245563bac4c4062c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90041d638b1363d3ed89dde8245563bac4c4062c", "html_url": "https://github.com/rust-lang/rust/commit/90041d638b1363d3ed89dde8245563bac4c4062c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90041d638b1363d3ed89dde8245563bac4c4062c/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34792d9f6a831027a9c21ba2439b4a008a5ab1ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/34792d9f6a831027a9c21ba2439b4a008a5ab1ad", "html_url": "https://github.com/rust-lang/rust/commit/34792d9f6a831027a9c21ba2439b4a008a5ab1ad"}], "stats": {"total": 77, "additions": 43, "deletions": 34}, "files": [{"sha": "e558d945516713d2f690d4b698cbadc6a3c6a886", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/90041d638b1363d3ed89dde8245563bac4c4062c/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90041d638b1363d3ed89dde8245563bac4c4062c/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=90041d638b1363d3ed89dde8245563bac4c4062c", "patch": "@@ -4875,23 +4875,24 @@ impl<'a> LoweringContext<'a> {\n         let node = match qpath {\n             hir::QPath::Resolved(None, path) => {\n                 // Turn trait object paths into `TyKind::TraitObject` instead.\n-                if let Def::Trait(_) = path.def {\n-                    let principal = hir::PolyTraitRef {\n-                        bound_generic_params: hir::HirVec::new(),\n-                        trait_ref: hir::TraitRef {\n-                            path: path.and_then(|path| path),\n-                            ref_id: id.node_id,\n-                            hir_ref_id: id.hir_id,\n-                        },\n-                        span,\n-                    };\n+                match path.def {\n+                    Def::Trait(_) | Def::TraitAlias(_) => {\n+                        let principal = hir::PolyTraitRef {\n+                            bound_generic_params: hir::HirVec::new(),\n+                            trait_ref: hir::TraitRef {\n+                                path: path.and_then(|path| path),\n+                                ref_id: id.node_id,\n+                                hir_ref_id: id.hir_id,\n+                            },\n+                            span,\n+                        };\n \n-                    // The original ID is taken by the `PolyTraitRef`,\n-                    // so the `Ty` itself needs a different one.\n-                    id = self.next_id();\n-                    hir::TyKind::TraitObject(hir_vec![principal], self.elided_dyn_bound(span))\n-                } else {\n-                    hir::TyKind::Path(hir::QPath::Resolved(None, path))\n+                        // The original ID is taken by the `PolyTraitRef`,\n+                        // so the `Ty` itself needs a different one.\n+                        id = self.next_id();\n+                        hir::TyKind::TraitObject(hir_vec![principal], self.elided_dyn_bound(span))\n+                    }\n+                    _ => hir::TyKind::Path(hir::QPath::Resolved(None, path)),\n                 }\n             }\n             _ => hir::TyKind::Path(qpath),"}, {"sha": "17ca8c275c3cb39e48c20be846f1914f11e09f10", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/90041d638b1363d3ed89dde8245563bac4c4062c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90041d638b1363d3ed89dde8245563bac4c4062c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=90041d638b1363d3ed89dde8245563bac4c4062c", "patch": "@@ -538,9 +538,9 @@ impl<'a> PathSource<'a> {\n         match self {\n             PathSource::Type => match def {\n                 Def::Struct(..) | Def::Union(..) | Def::Enum(..) |\n-                Def::Trait(..) | Def::TyAlias(..) | Def::AssociatedTy(..) |\n-                Def::PrimTy(..) | Def::TyParam(..) | Def::SelfTy(..) |\n-                Def::Existential(..) |\n+                Def::Trait(..) | Def::TraitAlias(..) | Def::TyAlias(..) |\n+                Def::AssociatedTy(..) | Def::PrimTy(..) | Def::TyParam(..) |\n+                Def::SelfTy(..) | Def::Existential(..) |\n                 Def::ForeignTy(..) => true,\n                 _ => false,\n             },\n@@ -3122,7 +3122,10 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                         return (err, candidates);\n                     }\n                     (Def::TyAlias(..), PathSource::Trait(_)) => {\n-                        err.span_label(span, \"type aliases cannot be used for traits\");\n+                        err.span_label(span, \"type aliases cannot be used as traits\");\n+                        if nightly_options::is_nightly_build() {\n+                            err.note(\"did you mean to use a trait alias?\");\n+                        }\n                         return (err, candidates);\n                     }\n                     (Def::Mod(..), PathSource::Expr(Some(parent))) => match parent.node {"}, {"sha": "e8a502d6ca88822800cc18dd015c3714c9d7d428", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/90041d638b1363d3ed89dde8245563bac4c4062c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90041d638b1363d3ed89dde8245563bac4c4062c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=90041d638b1363d3ed89dde8245563bac4c4062c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Conversion from AST representation of types to the ty.rs\n+//! Conversion from AST representation of types to the `ty.rs`\n //! representation.  The main routine here is `ast_ty_to_ty()`: each use\n //! is parameterized by an instance of `AstConv`.\n \n@@ -181,7 +181,6 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         item_segment: &hir::PathSegment)\n         -> &'tcx Substs<'tcx>\n     {\n-\n         let (substs, assoc_bindings) = item_segment.with_generic_args(|generic_args| {\n             self.create_substs_for_ast_path(\n                 span,\n@@ -948,8 +947,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         )\n     }\n \n-    /// Transform a PolyTraitRef into a PolyExistentialTraitRef by\n-    /// removing the dummy Self type (TRAIT_OBJECT_DUMMY_SELF).\n+    /// Transform a `PolyTraitRef` into a `PolyExistentialTraitRef` by\n+    /// removing the dummy `Self` type (`TRAIT_OBJECT_DUMMY_SELF`).\n     fn trait_ref_to_existential(&self, trait_ref: ty::TraitRef<'tcx>)\n                                 -> ty::ExistentialTraitRef<'tcx> {\n         assert_eq!(trait_ref.self_ty().sty, TRAIT_OBJECT_DUMMY_SELF);\n@@ -1347,7 +1346,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         err.span_label(span, \"associated type not allowed here\").emit();\n     }\n \n-    // Check a type Path and convert it to a Ty.\n+    // Check a type `Path` and convert it to a `Ty`.\n     pub fn def_to_ty(&self,\n                      opt_self_ty: Option<Ty<'tcx>>,\n                      path: &hir::Path,\n@@ -1442,8 +1441,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n     /// Parses the programmer's textual representation of a type into our\n     /// internal notion of a type.\n     pub fn ast_ty_to_ty(&self, ast_ty: &hir::Ty) -> Ty<'tcx> {\n-        debug!(\"ast_ty_to_ty(id={:?}, ast_ty={:?})\",\n-               ast_ty.id, ast_ty);\n+        debug!(\"ast_ty_to_ty(id={:?}, ast_ty={:?} ty_ty={:?})\",\n+               ast_ty.id, ast_ty, ast_ty.node);\n \n         let tcx = self.tcx();\n "}, {"sha": "cfedda18a7e22886e2e972cc30d82a36157976a5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90041d638b1363d3ed89dde8245563bac4c4062c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90041d638b1363d3ed89dde8245563bac4c4062c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=90041d638b1363d3ed89dde8245563bac4c4062c", "patch": "@@ -288,9 +288,9 @@ pub enum TraitBoundModifier {\n }\n \n /// The AST represents all type param bounds as types.\n-/// typeck::collect::compute_bounds matches these against\n-/// the \"special\" built-in traits (see middle::lang_items) and\n-/// detects Copy, Send and Sync.\n+/// `typeck::collect::compute_bounds` matches these against\n+/// the \"special\" built-in traits (see `middle::lang_items`) and\n+/// detects `Copy`, `Send` and `Sync`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum GenericBound {\n     Trait(PolyTraitRef, TraitBoundModifier),"}, {"sha": "a148a6496656a4a13047a03836ea14c14e48c742", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90041d638b1363d3ed89dde8245563bac4c4062c/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90041d638b1363d3ed89dde8245563bac4c4062c/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=90041d638b1363d3ed89dde8245563bac4c4062c", "patch": "@@ -252,7 +252,7 @@ impl Invocation {\n \n pub struct MacroExpander<'a, 'b:'a> {\n     pub cx: &'a mut ExtCtxt<'b>,\n-    monotonic: bool, // c.f. `cx.monotonic_expander()`\n+    monotonic: bool, // cf. `cx.monotonic_expander()`\n }\n \n impl<'a, 'b> MacroExpander<'a, 'b> {"}, {"sha": "6018744215b7dd87568ac18ddaa7e190b1006c44", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90041d638b1363d3ed89dde8245563bac4c4062c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90041d638b1363d3ed89dde8245563bac4c4062c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=90041d638b1363d3ed89dde8245563bac4c4062c", "patch": "@@ -1532,7 +1532,7 @@ impl<'a> Parser<'a> {\n                             if maybe_bounds && bounds.len() == 1 && !trailing_plus => {\n                         let path = match bounds[0] {\n                             GenericBound::Trait(ref pt, ..) => pt.trait_ref.path.clone(),\n-                            _ => self.bug(\"unexpected lifetime bound\"),\n+                            GenericBound::Outlives(..) => self.bug(\"unexpected lifetime bound\"),\n                         };\n                         self.parse_remaining_bounds(Vec::new(), path, lo, true)?\n                     }"}, {"sha": "604344c93c2f843229f6b69abf1a2bcec145fc7b", "filename": "src/test/run-pass/traits/trait-alias.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90041d638b1363d3ed89dde8245563bac4c4062c/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90041d638b1363d3ed89dde8245563bac4c4062c/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-alias.rs?ref=90041d638b1363d3ed89dde8245563bac4c4062c", "patch": "@@ -10,13 +10,19 @@\n \n #![feature(trait_alias)]\n \n-trait Foo = std::fmt::Debug;\n+type Foo = std::fmt::Debug;\n+type Bar = Foo;\n \n fn foo<T: Foo>(v: &T) {\n     println!(\"{:?}\", v);\n }\n \n pub fn main() {\n     foo(&12345);\n-    let foo: &Foo = &0i32;\n+\n+    let bar1: &Bar = &54321;\n+    println!(\"{:?}\", bar1);\n+\n+    let bar2 = Box::new(42) as Box<dyn Foo>;\n+    println!(\"{:?}\", bar2);\n }"}]}