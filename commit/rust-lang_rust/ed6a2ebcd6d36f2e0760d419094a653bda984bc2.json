{"sha": "ed6a2ebcd6d36f2e0760d419094a653bda984bc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNmEyZWJjZDZkMzZmMmUwNzYwZDQxOTA5NGE2NTNiZGE5ODRiYzI=", "commit": {"author": {"name": "bobtwinkles", "email": "srkoser+GitHub@gmail.com", "date": "2018-01-26T23:25:25Z"}, "committer": {"name": "bobtwinkles", "email": "srkoser+GitHub@gmail.com", "date": "2018-02-05T20:00:40Z"}, "message": "mir: Add false edge cleanup out of infinite loops\n\nFixes #46036", "tree": {"sha": "bd57d5e7217d3eddf00b4bd20970a998b736c127", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd57d5e7217d3eddf00b4bd20970a998b736c127"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed6a2ebcd6d36f2e0760d419094a653bda984bc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed6a2ebcd6d36f2e0760d419094a653bda984bc2", "html_url": "https://github.com/rust-lang/rust/commit/ed6a2ebcd6d36f2e0760d419094a653bda984bc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed6a2ebcd6d36f2e0760d419094a653bda984bc2/comments", "author": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdc37aa05722818e8edb5d93825a62921f351913", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdc37aa05722818e8edb5d93825a62921f351913", "html_url": "https://github.com/rust-lang/rust/commit/bdc37aa05722818e8edb5d93825a62921f351913"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "089ce3f71a5baef569e8e690800a534c4c527170", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ed6a2ebcd6d36f2e0760d419094a653bda984bc2/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6a2ebcd6d36f2e0760d419094a653bda984bc2/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=ed6a2ebcd6d36f2e0760d419094a653bda984bc2", "patch": "@@ -156,11 +156,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 //\n                 // If `opt_cond_expr` is `None`, then the graph is somewhat simplified:\n                 //\n-                // [block] --> [loop_block / body_block ] ~~> [body_block_end]    [exit_block]\n-                //                         ^                          |\n-                //                         |                          |\n-                //                         +--------------------------+\n+                // [block] --> [loop_block] ~~> [loop_block_end]\n+                //               |  ^                   |\n+                //      false link  |                   |\n+                //               |  +-------------------+\n+                //               v\n+                //        [cleanup_block]\n                 //\n+                // The false link is required in case something results in\n+                // unwinding through the body.\n \n                 let loop_block = this.cfg.start_new_block();\n                 let exit_block = this.cfg.start_new_block();\n@@ -174,6 +178,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     move |this| {\n                         // conduct the test, if necessary\n                         let body_block;\n+                        let out_terminator;\n                         if let Some(cond_expr) = opt_cond_expr {\n                             let loop_block_end;\n                             let cond = unpack!(\n@@ -187,8 +192,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             // we have to do it; this overwrites any `break`-assigned value but it's\n                             // always `()` anyway\n                             this.cfg.push_assign_unit(exit_block, source_info, destination);\n+\n+                            out_terminator = TerminatorKind::Goto { target: loop_block };\n                         } else {\n                             body_block = loop_block;\n+                            let diverge_cleanup = this.diverge_cleanup();\n+                            out_terminator = TerminatorKind::FalseUnwind {\n+                                real_target: loop_block,\n+                                unwind: Some(diverge_cleanup)\n+                            }\n                         }\n \n                         // The \u201creturn\u201d value of the loop body must always be an unit. We therefore\n@@ -197,7 +209,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         // Execute the body, branching back to the test.\n                         let body_block_end = unpack!(this.into(&tmp, body_block, body));\n                         this.cfg.terminate(body_block_end, source_info,\n-                                           TerminatorKind::Goto { target: loop_block });\n+                                           out_terminator);\n                     }\n                 );\n                 exit_block.unit()"}]}