{"sha": "f7d18b92f80e52462a5c086bb47252817e6b1b3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZDE4YjkyZjgwZTUyNDYyYTVjMDg2YmI0NzI1MjgxN2U2YjFiM2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-07T04:12:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-07T04:12:20Z"}, "message": "auto merge of #19407 : frewsxcv/rust/rm-reexports, r=cmr\n\nIn regards to:\r\n\r\nhttps://github.com/rust-lang/rust/issues/19253#issuecomment-64836729\r\n\r\nThis commit:\r\n\r\n* Changes the #deriving code so that it generates code that utilizes fewer\r\n  reexports (in particur Option::\\*, Result::\\*, and Ordering::\\*), which is necessary to\r\n  remove those reexports in the future\r\n* Changes other areas of the codebase so that fewer reexports are utilized", "tree": {"sha": "be5d317a9a4a5807342b348c42cc78243c620eaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be5d317a9a4a5807342b348c42cc78243c620eaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7d18b92f80e52462a5c086bb47252817e6b1b3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7d18b92f80e52462a5c086bb47252817e6b1b3d", "html_url": "https://github.com/rust-lang/rust/commit/f7d18b92f80e52462a5c086bb47252817e6b1b3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7d18b92f80e52462a5c086bb47252817e6b1b3d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a31ad6bfcd55fd58218ab005be5eb7229de88ef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a31ad6bfcd55fd58218ab005be5eb7229de88ef9", "html_url": "https://github.com/rust-lang/rust/commit/a31ad6bfcd55fd58218ab005be5eb7229de88ef9"}, {"sha": "4ef16741e355754abd446acbd80e5afb784864c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ef16741e355754abd446acbd80e5afb784864c7", "html_url": "https://github.com/rust-lang/rust/commit/4ef16741e355754abd446acbd80e5afb784864c7"}], "stats": {"total": 472, "additions": 277, "deletions": 195}, "files": [{"sha": "9ac4469d549838e828b7ddfa16cbcfe58adda26c", "filename": "src/doc/reference.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -994,7 +994,7 @@ An example of `use` declarations:\n \n ```\n use std::iter::range_step;\n-use std::option::{Some, None};\n+use std::option::Option::{Some, None};\n use std::collections::hash_map::{mod, HashMap};\n \n fn foo<T>(_: T){}\n@@ -1004,8 +1004,8 @@ fn main() {\n     // Equivalent to 'std::iter::range_step(0u, 10u, 2u);'\n     range_step(0u, 10u, 2u);\n \n-    // Equivalent to 'foo(vec![std::option::Some(1.0f64),\n-    // std::option::None]);'\n+    // Equivalent to 'foo(vec![std::option::Option::Some(1.0f64),\n+    // std::option::Option::None]);'\n     foo(vec![Some(1.0f64), None]);\n \n     // Both `hash_map` and `HashMap` are in scope."}, {"sha": "20edf9418f1486c7cdd871da888cbb1ed753b716", "filename": "src/etc/unicode.py", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -292,7 +292,7 @@ def escape_char(c):\n def emit_bsearch_range_table(f):\n     f.write(\"\"\"\n fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n-    use core::cmp::{Equal, Less, Greater};\n+    use core::cmp::Ordering::{Equal, Less, Greater};\n     use core::slice::SlicePrelude;\n     r.binary_search(|&(lo,hi)| {\n         if lo <= c && c <= hi { Equal }\n@@ -350,10 +350,11 @@ def emit_regex_module(f, cats, w_data):\n def emit_conversions_module(f, lowerupper, upperlower):\n     f.write(\"pub mod conversions {\")\n     f.write(\"\"\"\n-    use core::cmp::{Equal, Less, Greater};\n+    use core::cmp::Ordering::{Equal, Less, Greater};\n     use core::slice::SlicePrelude;\n     use core::tuple::Tuple2;\n-    use core::option::{Option, Some, None};\n+    use core::option::Option;\n+    use core::option::Option::{Some, None};\n     use core::slice;\n \n     pub fn to_lower(c: char) -> char {\n@@ -403,7 +404,7 @@ def emit_grapheme_module(f, grapheme_table, grapheme_cats):\n     f.write(\"\"\"    }\n \n     fn bsearch_range_value_table(c: char, r: &'static [(char, char, GraphemeCat)]) -> GraphemeCat {\n-        use core::cmp::{Equal, Less, Greater};\n+        use core::cmp::Ordering::{Equal, Less, Greater};\n         match r.binary_search(|&(lo, hi, _)| {\n             if lo <= c && c <= hi { Equal }\n             else if hi < c { Less }\n@@ -430,12 +431,13 @@ def emit_grapheme_module(f, grapheme_table, grapheme_cats):\n \n def emit_charwidth_module(f, width_table):\n     f.write(\"pub mod charwidth {\\n\")\n-    f.write(\"    use core::option::{Option, Some, None};\\n\")\n+    f.write(\"    use core::option::Option;\\n\")\n+    f.write(\"    use core::option::Option::{Some, None};\\n\")\n     f.write(\"    use core::slice::SlicePrelude;\\n\")\n     f.write(\"    use core::slice;\\n\")\n     f.write(\"\"\"\n     fn bsearch_range_value_table(c: char, is_cjk: bool, r: &'static [(char, char, u8, u8)]) -> u8 {\n-        use core::cmp::{Equal, Less, Greater};\n+        use core::cmp::Ordering::{Equal, Less, Greater};\n         match r.binary_search(|&(lo, hi, _, _)| {\n             if lo <= c && c <= hi { Equal }\n             else if hi < c { Less }\n@@ -530,7 +532,7 @@ def comp_pfun(char):\n \n     f.write(\"\"\"\n     fn bsearch_range_value_table(c: char, r: &'static [(char, char, u8)]) -> u8 {\n-        use core::cmp::{Equal, Less, Greater};\n+        use core::cmp::Ordering::{Equal, Less, Greater};\n         use core::slice::SlicePrelude;\n         use core::slice;\n         match r.binary_search(|&(lo, hi, _)| {"}, {"sha": "ef05279e825eaad799ae0c4aea4a4114d1f47da5", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -22,7 +22,8 @@ use core::kinds::{Sync, Send};\n use core::mem::{min_align_of, size_of, drop};\n use core::mem;\n use core::ops::{Drop, Deref};\n-use core::option::{Some, None, Option};\n+use core::option::Option;\n+use core::option::Option::{Some, None};\n use core::ptr::RawPtr;\n use core::ptr;\n use heap::deallocate;\n@@ -326,7 +327,8 @@ mod tests {\n     use std::comm::channel;\n     use std::mem::drop;\n     use std::ops::Drop;\n-    use std::option::{Option, Some, None};\n+    use std::option::Option;\n+    use std::option::Option::{Some, None};\n     use std::str::Str;\n     use std::sync::atomic;\n     use std::task;"}, {"sha": "eb483498998c5f3beaf177d35910152347fb60df", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -19,7 +19,8 @@ use core::kinds::Sized;\n use core::mem;\n use core::option::Option;\n use core::raw::TraitObject;\n-use core::result::{Ok, Err, Result};\n+use core::result::Result;\n+use core::result::Result::{Ok, Err};\n \n /// A value that represents the global exchange heap. This is the default\n /// place that the `box` keyword allocates into when no place is supplied."}, {"sha": "c6b6a784f06e3f912f085a9f1d0cc0e6f3f30426", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -177,7 +177,8 @@ mod imp {\n \n #[cfg(all(not(external_funcs), not(external_crate), jemalloc))]\n mod imp {\n-    use core::option::{None, Option};\n+    use core::option::Option;\n+    use core::option::Option::None;\n     use core::ptr::{null_mut, null};\n     use core::num::Int;\n     use libc::{c_char, c_int, c_void, size_t};"}, {"sha": "53891583edb20c768fa2068498511b8a76b2c5b8", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -149,10 +149,12 @@ use core::fmt;\n use core::kinds::marker;\n use core::mem::{transmute, min_align_of, size_of, forget};\n use core::ops::{Deref, Drop};\n-use core::option::{Option, Some, None};\n+use core::option::Option;\n+use core::option::Option::{Some, None};\n use core::ptr;\n use core::ptr::RawPtr;\n-use core::result::{Result, Ok, Err};\n+use core::result::Result;\n+use core::result::Result::{Ok, Err};\n \n use heap::deallocate;\n \n@@ -739,8 +741,9 @@ impl<T> RcBoxPtr<T> for Weak<T> {\n mod tests {\n     use super::{Rc, Weak, weak_count, strong_count};\n     use std::cell::RefCell;\n-    use std::option::{Option, Some, None};\n-    use std::result::{Err, Ok};\n+    use std::option::Option;\n+    use std::option::Option::{Some, None};\n+    use std::result::Result::{Err, Ok};\n     use std::mem::drop;\n     use std::clone::Clone;\n "}, {"sha": "78cdda61104f1a8107cf775b255af07f7a4563b6", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -833,8 +833,10 @@ mod tests {\n     use std::default::Default;\n     use std::char::Char;\n     use std::clone::Clone;\n-    use std::cmp::{Equal, Greater, Less, Ord, PartialOrd, Equiv};\n-    use std::option::{Some, None};\n+    use std::cmp::{Ord, PartialOrd, Equiv};\n+    use std::cmp::Ordering::{Equal, Greater, Less};\n+    use std::option::Option;\n+    use std::option::Option::{Some, None};\n     use std::ptr::RawPtr;\n     use std::iter::{Iterator, IteratorExt, DoubleEndedIteratorExt};\n "}, {"sha": "75feb4d88289e5faf1343176b6eb3c1f3b7327ee", "filename": "src/libcore/any.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -72,7 +72,8 @@\n #![stable]\n \n use mem::{transmute};\n-use option::{Option, Some, None};\n+use option::Option;\n+use option::Option::{Some, None};\n use raw::TraitObject;\n use intrinsics::TypeId;\n "}, {"sha": "1ec2efaf801a41c9bb3ba94740b3a7245df33848", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -160,7 +160,8 @@ use cmp::PartialEq;\n use default::Default;\n use kinds::{marker, Copy};\n use ops::{Deref, DerefMut, Drop};\n-use option::{None, Option, Some};\n+use option::Option;\n+use option::Option::{None, Some};\n \n /// A mutable memory location that admits only `Copy` data.\n #[unstable = \"likely to be renamed; otherwise stable\"]"}, {"sha": "2bebe87a14ce4e1772fdc78a05227f562c6262fa", "filename": "src/libcore/char.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -16,7 +16,8 @@\n #![doc(primitive = \"char\")]\n \n use mem::transmute;\n-use option::{None, Option, Some};\n+use option::Option;\n+use option::Option::{None, Some};\n use iter::{range_step, Iterator, RangeStep};\n use slice::SlicePrelude;\n "}, {"sha": "a5ba2b03b1565b2b8fa0158a9e26ab71e1534bdf", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -44,7 +44,8 @@\n pub use self::Ordering::*;\n \n use kinds::Sized;\n-use option::{Option, Some, None};\n+use option::Option;\n+use option::Option::{Some, None};\n \n /// Trait for values that can be compared for equality and inequality.\n ///\n@@ -288,10 +289,11 @@ pub fn partial_max<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n \n // Implementation of PartialEq, Eq, PartialOrd and Ord for primitive types\n mod impls {\n-    use cmp::{PartialOrd, Ord, PartialEq, Eq, Ordering,\n-              Less, Greater, Equal};\n+    use cmp::{PartialOrd, Ord, PartialEq, Eq, Ordering};\n+    use cmp::Ordering::{Less, Greater, Equal};\n     use kinds::Sized;\n-    use option::{Option, Some, None};\n+    use option::Option;\n+    use option::Option::{Some, None};\n \n     macro_rules! partial_eq_impl(\n         ($($t:ty)*) => ($("}, {"sha": "400ce76baa0d27a865a2f1051c6bb36070f363d4", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -20,7 +20,7 @@ use fmt;\n use iter::{range, DoubleEndedIteratorExt};\n use num::{Float, FPNaN, FPInfinite, ToPrimitive};\n use num::cast;\n-use result::Ok;\n+use result::Result::Ok;\n use slice::{mod, SlicePrelude};\n use str::StrPrelude;\n "}, {"sha": "9b67cdd3e1275dd1a3dfe5eb75075a3c89115c48", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -17,9 +17,10 @@ use cell::{Cell, Ref, RefMut};\n use iter::{Iterator, IteratorExt, range};\n use kinds::{Copy, Sized};\n use mem;\n-use option::{Option, Some, None};\n+use option::Option;\n+use option::Option::{Some, None};\n use ops::Deref;\n-use result::{Ok, Err};\n+use result::Result::{Ok, Err};\n use result;\n use slice::SlicePrelude;\n use slice;"}, {"sha": "49865bd3c7d5726117db086f6086f14bb6b542ea", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -62,7 +62,8 @@ use cmp::Ord;\n use mem;\n use num::{ToPrimitive, Int};\n use ops::{Add, Deref};\n-use option::{Option, Some, None};\n+use option::Option;\n+use option::Option::{Some, None};\n use uint;\n \n #[deprecated = \"renamed to Extend\"] pub use self::Extend as Extendable;\n@@ -2458,7 +2459,9 @@ pub fn repeat<T: Clone>(elt: T) -> Repeat<T> {\n pub mod order {\n     use cmp;\n     use cmp::{Eq, Ord, PartialOrd, PartialEq};\n-    use option::{Option, Some, None};\n+    use cmp::Ordering::{Equal, Less, Greater};\n+    use option::Option;\n+    use option::Option::{Some, None};\n     use super::Iterator;\n \n     /// Compare `a` and `b` for equality using `Eq`\n@@ -2476,11 +2479,11 @@ pub mod order {\n     pub fn cmp<A: Ord, T: Iterator<A>, S: Iterator<A>>(mut a: T, mut b: S) -> cmp::Ordering {\n         loop {\n             match (a.next(), b.next()) {\n-                (None, None) => return cmp::Equal,\n-                (None, _   ) => return cmp::Less,\n-                (_   , None) => return cmp::Greater,\n+                (None, None) => return Equal,\n+                (None, _   ) => return Less,\n+                (_   , None) => return Greater,\n                 (Some(x), Some(y)) => match x.cmp(&y) {\n-                    cmp::Equal => (),\n+                    Equal => (),\n                     non_eq => return non_eq,\n                 },\n             }\n@@ -2492,11 +2495,11 @@ pub mod order {\n             -> Option<cmp::Ordering> {\n         loop {\n             match (a.next(), b.next()) {\n-                (None, None) => return Some(cmp::Equal),\n-                (None, _   ) => return Some(cmp::Less),\n-                (_   , None) => return Some(cmp::Greater),\n+                (None, None) => return Some(Equal),\n+                (None, _   ) => return Some(Less),\n+                (_   , None) => return Some(Greater),\n                 (Some(x), Some(y)) => match x.partial_cmp(&y) {\n-                    Some(cmp::Equal) => (),\n+                    Some(Equal) => (),\n                     non_eq => return non_eq,\n                 },\n             }"}, {"sha": "e6946c83cebdfc46af3e2c25b95807c7acfa7598", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -30,7 +30,8 @@ use kinds::Copy;\n use mem::size_of;\n use ops::{Add, Sub, Mul, Div, Rem, Neg};\n use ops::{Not, BitAnd, BitOr, BitXor, Shl, Shr};\n-use option::{Option, Some, None};\n+use option::Option;\n+use option::Option::{Some, None};\n use str::{FromStr, from_str, StrPrelude};\n \n /// Simultaneous division and remainder"}, {"sha": "8ba41c3575fff5cb2afa11b87b71d63899cc128c", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -149,7 +149,8 @@ use cmp::{Eq, Ord};\n use default::Default;\n use iter::{Iterator, IteratorExt, DoubleEndedIterator, FromIterator, ExactSizeIterator};\n use mem;\n-use result::{Result, Ok, Err};\n+use result::Result;\n+use result::Result::{Ok, Err};\n use slice;\n use slice::AsSlice;\n use clone::Clone;"}, {"sha": "3f6ac49786d2e393e41c583fabc0357ce5701648", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -90,9 +90,12 @@\n use mem;\n use clone::Clone;\n use intrinsics;\n-use option::{Some, None, Option};\n+use option::Option;\n+use option::Option::{Some, None};\n \n-use cmp::{PartialEq, Eq, PartialOrd, Equiv, Ordering, Less, Equal, Greater};\n+use cmp::{PartialEq, Eq, PartialOrd, Equiv};\n+use cmp::Ordering;\n+use cmp::Ordering::{Less, Equal, Greater};\n \n pub use intrinsics::copy_memory;\n pub use intrinsics::copy_nonoverlapping_memory;"}, {"sha": "0cf8e6affd71e0a18121e5f03b4013299a51f153", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -236,7 +236,8 @@ use std::fmt::Show;\n use slice;\n use slice::AsSlice;\n use iter::{Iterator, IteratorExt, DoubleEndedIterator, FromIterator, ExactSizeIterator};\n-use option::{None, Option, Some};\n+use option::Option;\n+use option::Option::{None, Some};\n \n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n ///"}, {"sha": "b8df36c91bc3e699852c9065849ec582ad86fa7c", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -36,13 +36,15 @@\n \n use mem::transmute;\n use clone::Clone;\n-use cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering, Less, Equal, Greater, Equiv};\n+use cmp::{Ordering, PartialEq, PartialOrd, Eq, Ord, Equiv};\n+use cmp::Ordering::{Less, Equal, Greater};\n use cmp;\n use default::Default;\n use iter::*;\n use num::Int;\n use ops;\n-use option::{None, Option, Some};\n+use option::Option;\n+use option::Option::{None, Some};\n use ptr;\n use ptr::RawPtr;\n use mem;\n@@ -1702,7 +1704,8 @@ pub mod raw {\n     use mem::transmute;\n     use ptr::RawPtr;\n     use raw::Slice;\n-    use option::{None, Option, Some};\n+    use option::Option;\n+    use option::Option::{None, Some};\n \n     /// Form a slice from a pointer and length (as a number of units,\n     /// not bytes)."}, {"sha": "1d59567cbe4474d7dc4c862fa58310262129aaf1", "filename": "src/libcore/str.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -29,7 +29,8 @@ use iter::range;\n use kinds::Sized;\n use mem;\n use num::Int;\n-use option::{Option, None, Some};\n+use option::Option;\n+use option::Option::{None, Some};\n use ptr::RawPtr;\n use raw::{Repr, Slice};\n use slice::{mod, SlicePrelude};\n@@ -1209,9 +1210,11 @@ Section: Trait implementations\n \n #[allow(missing_docs)]\n pub mod traits {\n-    use cmp::{Ord, Ordering, Less, Equal, Greater, PartialEq, PartialOrd, Equiv, Eq};\n+    use cmp::{Ordering, Ord, PartialEq, PartialOrd, Equiv, Eq};\n+    use cmp::Ordering::{Less, Equal, Greater};\n     use iter::IteratorExt;\n-    use option::{Option, Some};\n+    use option::Option;\n+    use option::Option::Some;\n     use ops;\n     use str::{Str, StrPrelude, eq_slice};\n "}, {"sha": "5ad01ae67442e6b4abf91bbfe48f43467c8dc80d", "filename": "src/libcore/tuple/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Ftuple%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcore%2Ftuple%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple%2Fmod.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -69,7 +69,8 @@ pub use unit;\n use clone::Clone;\n use cmp::*;\n use default::Default;\n-use option::{Option, Some};\n+use option::Option;\n+use option::Option::Some;\n \n // macro for implementing n-ary tuple functions and operations\n macro_rules! tuple_impls {"}, {"sha": "6ee3633d36c14dc64e81d68c217c23737ca2a657", "filename": "src/libcoretest/num/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcoretest%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibcoretest%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fmod.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -48,7 +48,8 @@ pub fn test_num<T>(ten: T, two: T) where\n \n #[cfg(test)]\n mod test {\n-    use core::option::{Option, Some, None};\n+    use core::option::Option;\n+    use core::option::Option::{Some, None};\n     use core::num::Float;\n     use core::num::from_str_radix;\n "}, {"sha": "e146e3c76eb2f22cb582d7e694e2ccfa8ca4f287", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -99,7 +99,7 @@ use self::Fail::*;\n use self::Optval::*;\n \n use std::fmt;\n-use std::result::{Err, Ok};\n+use std::result::Result::{Err, Ok};\n use std::result;\n use std::string::String;\n \n@@ -951,7 +951,7 @@ mod tests {\n     use super::*;\n     use super::Fail::*;\n \n-    use std::result::{Err, Ok};\n+    use std::result::Result::{Err, Ok};\n     use std::result;\n \n     // Tests for reqopt\n@@ -1392,8 +1392,8 @@ mod tests {\n         let args_single = vec!(\"-e\".to_string(), \"foo\".to_string());\n         let matches_single = &match getopts(args_single.as_slice(),\n                                             opts.as_slice()) {\n-          result::Ok(m) => m,\n-          result::Err(_) => panic!()\n+          result::Result::Ok(m) => m,\n+          result::Result::Err(_) => panic!()\n         };\n         assert!(matches_single.opts_present(&[\"e\".to_string()]));\n         assert!(matches_single.opts_present(&[\"encrypt\".to_string(), \"e\".to_string()]));\n@@ -1412,8 +1412,8 @@ mod tests {\n                              \"foo\".to_string());\n         let matches_both = &match getopts(args_both.as_slice(),\n                                           opts.as_slice()) {\n-          result::Ok(m) => m,\n-          result::Err(_) => panic!()\n+          result::Result::Ok(m) => m,\n+          result::Result::Err(_) => panic!()\n         };\n         assert!(matches_both.opts_present(&[\"e\".to_string()]));\n         assert!(matches_both.opts_present(&[\"encrypt\".to_string()]));\n@@ -1437,8 +1437,8 @@ mod tests {\n         let opts = vec!(optmulti(\"L\", \"\", \"library directory\", \"LIB\"),\n                      optmulti(\"M\", \"\", \"something\", \"MMMM\"));\n         let matches = &match getopts(args.as_slice(), opts.as_slice()) {\n-          result::Ok(m) => m,\n-          result::Err(_) => panic!()\n+          result::Result::Ok(m) => m,\n+          result::Result::Err(_) => panic!()\n         };\n         assert!(matches.opts_present(&[\"L\".to_string()]));\n         assert_eq!(matches.opts_str(&[\"L\".to_string()]).unwrap(), \"foo\".to_string());\n@@ -1453,8 +1453,8 @@ mod tests {\n         let opts = vec!(optmulti(\"L\", \"\", \"library directory\", \"LIB\"),\n                      optflagmulti(\"v\", \"verbose\", \"Verbose\"));\n         let matches = &match getopts(args.as_slice(), opts.as_slice()) {\n-          result::Ok(m) => m,\n-          result::Err(e) => panic!( \"{}\", e )\n+          result::Result::Ok(m) => m,\n+          result::Result::Err(e) => panic!( \"{}\", e )\n         };\n         assert!(matches.opts_present(&[\"L\".to_string()]));\n         assert_eq!(matches.opts_str(&[\"L\".to_string()]).unwrap(), \"verbose\".to_string());"}, {"sha": "f65c4f4e3edcc06cc890b90da0b5bc23b53eec62", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -120,7 +120,8 @@ pub mod reader {\n     use std::io::extensions::u64_from_be_bytes;\n     use std::mem::transmute;\n     use std::num::Int;\n-    use std::option::{None, Option, Some};\n+    use std::option::Option;\n+    use std::option::Option::{None, Some};\n \n     use serialize;\n \n@@ -1060,7 +1061,8 @@ mod tests {\n \n     use serialize::{Encodable, Decodable};\n \n-    use std::option::{None, Option, Some};\n+    use std::option::Option;\n+    use std::option::Option::{None, Some};\n \n     #[test]\n     fn test_vuint_at() {"}, {"sha": "518b0ba73f8b745744f5010384768bb5b11786e1", "filename": "src/librustc_trans/trans/cabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -65,8 +65,8 @@ impl ArgType {\n         ArgType {\n             kind: Indirect,\n             ty: ty,\n-            cast: option::None,\n-            pad: option::None,\n+            cast: option::Option::None,\n+            pad: option::Option::None,\n             attr: attr\n         }\n     }"}, {"sha": "9eb0e17b8e5beafe3fd7efafcb8b01094f6766c1", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -15,8 +15,7 @@ use middle::infer;\n use middle::infer::resolve_type;\n use middle::infer::resolve::try_resolve_tvar_shallow;\n \n-use std::result::{Err, Ok};\n-use std::result;\n+use std::result::Result::{Err, Ok};\n use syntax::ast;\n use syntax::codemap::Span;\n use util::ppaux::Repr;\n@@ -38,8 +37,8 @@ pub fn suptype_with_fn<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     // n.b.: order of actual, expected is reversed\n     match infer::mk_subty(fcx.infcx(), b_is_expected, infer::Misc(sp),\n                           ty_b, ty_a) {\n-      result::Ok(()) => { /* ok */ }\n-      result::Err(ref err) => {\n+      Ok(()) => { /* ok */ }\n+      Err(ref err) => {\n           handle_err(sp, ty_a, ty_b, err);\n       }\n     }\n@@ -69,8 +68,8 @@ pub fn coerce<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, sp: Span,\n                      try_resolve_tvar_shallow).unwrap_or(expected)\n     } else { expected };\n     match fcx.mk_assignty(expr, expr_ty, expected) {\n-      result::Ok(()) => { /* ok */ }\n-      result::Err(ref err) => {\n+      Ok(()) => { /* ok */ }\n+      Err(ref err) => {\n         fcx.report_mismatched_types(sp, expected, expr_ty, err);\n       }\n     }"}, {"sha": "8fc3c23e88f153dc203ef25a77b5984b2615a3a1", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -19,7 +19,8 @@ use core::kinds::Sized;\n use fmt;\n use iter::IteratorExt;\n use mem;\n-use option::{Option, Some, None};\n+use option::Option;\n+use option::Option::{Some, None};\n use slice::{SlicePrelude, AsSlice};\n use str::{Str, StrPrelude};\n use string::{String, IntoString};"}, {"sha": "8a90c06f0385c1395cc04dabd84af37a56e7defa", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -149,9 +149,9 @@ macro_rules! bitflags {\n             #[inline]\n             pub fn from_bits(bits: $T) -> ::std::option::Option<$BitFlags> {\n                 if (bits & !$BitFlags::all().bits()) != 0 {\n-                    ::std::option::None\n+                    ::std::option::Option::None\n                 } else {\n-                    ::std::option::Some($BitFlags { bits: bits })\n+                    ::std::option::Option::Some($BitFlags { bits: bits })\n                 }\n             }\n \n@@ -261,7 +261,7 @@ macro_rules! bitflags {\n #[allow(non_upper_case_globals)]\n mod tests {\n     use hash;\n-    use option::{Some, None};\n+    use option::Option::{Some, None};\n     use ops::{BitOr, BitAnd, BitXor, Sub, Not};\n \n     bitflags! {"}, {"sha": "f89876f7245e60c861a73df35ce717f58d1df24e", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -38,7 +38,8 @@\n use kinds::Send;\n use mem;\n use ops::Drop;\n-use option::{Option, Some, None};\n+use option::Option;\n+use option::Option::{Some, None};\n use ptr::RawPtr;\n use ptr;\n use raw;"}, {"sha": "8f879bd50d0b3944acbcc41e79b24a6c9a7e8e08", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -25,8 +25,10 @@ use kinds::Sized;\n use mem::{mod, replace};\n use num::{Int, UnsignedInt};\n use ops::{Deref, Index, IndexMut};\n-use option::{Some, None, Option};\n-use result::{Result, Ok, Err};\n+use option::Option;\n+use option::Option::{Some, None};\n+use result::Result;\n+use result::Result::{Ok, Err};\n \n use super::table;\n use super::table::{"}, {"sha": "fd32d207e79e095ad94f14b94d819678c6b67ab8", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -19,8 +19,8 @@ use fmt;\n use hash::{Hash, Hasher, RandomSipHasher};\n use iter::{Iterator, IteratorExt, FromIterator, FilterMap, Chain, Repeat, Zip, Extend, repeat};\n use iter;\n-use option::{Some, None};\n-use result::{Ok, Err};\n+use option::Option::{Some, None};\n+use result::Result::{Ok, Err};\n \n use super::map::{HashMap, Entries, MoveEntries, INITIAL_CAPACITY};\n "}, {"sha": "de06a1e0bbd6e5bb33b99a4d1fcd285cdd9c9db3", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -21,7 +21,8 @@ use mem::{min_align_of, size_of};\n use mem;\n use num::{Int, UnsignedInt};\n use ops::{Deref, DerefMut, Drop};\n-use option::{Some, None, Option};\n+use option::Option;\n+use option::Option::{Some, None};\n use ptr::{RawPtr, copy_nonoverlapping_memory, zero_memory};\n use ptr;\n use rt::heap::{allocate, deallocate};"}, {"sha": "adbc135364be7fc73e8f6b5103414943fcbc7596", "filename": "src/libstd/collections/lru_cache.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fcollections%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fcollections%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Flru_cache.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -44,10 +44,11 @@ use hash::Hash;\n use iter::{range, Iterator, Extend};\n use mem;\n use ops::Drop;\n-use option::{Some, None, Option};\n+use option::Option;\n+use option::Option::{Some, None};\n use boxed::Box;\n use ptr;\n-use result::{Ok, Err};\n+use result::Result::{Ok, Err};\n \n // FIXME(conventions): implement iterators?\n // FIXME(conventions): implement indexing?"}, {"sha": "aa0c8b53c2e897f4d123337156df11d828404a87", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -280,7 +280,8 @@ pub mod dl {\n     use libc;\n     use os;\n     use ptr;\n-    use result::{Ok, Err, Result};\n+    use result::Result;\n+    use result::Result::{Ok, Err};\n     use slice::SlicePrelude;\n     use str::StrPrelude;\n     use str;"}, {"sha": "9ad2655f6e9dbd30e08b5b64cb49839754e767d2", "filename": "src/libstd/error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -78,7 +78,8 @@\n //! }\n //! ```\n \n-use option::{Option, None};\n+use option::Option;\n+use option::Option::None;\n use kinds::Send;\n use string::String;\n "}, {"sha": "58a41f4d7d5a1cfab71b25ea2f35bdd2e922870e", "filename": "src/libstd/failure.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffailure.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -16,8 +16,9 @@ use cell::RefCell;\n use fmt;\n use io::{Writer, IoResult};\n use kinds::Send;\n-use option::{Some, None, Option};\n-use result::Ok;\n+use option::Option;\n+use option::Option::{Some, None};\n+use result::Result::Ok;\n use rt::backtrace;\n use rustrt::{Stderr, Stdio};\n use rustrt::local::Local;"}, {"sha": "6a2047d1cef30dffe4383168dd65084ac645cbd5", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -406,7 +406,7 @@\n \n use io::Writer;\n use io;\n-use result::{Ok, Err};\n+use result::Result::{Ok, Err};\n use string;\n use vec::Vec;\n "}, {"sha": "0b2c6843c968e33c22566313cc8eac64b4e940b4", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -16,8 +16,9 @@ use cmp;\n use io::{Reader, Writer, Stream, Buffer, DEFAULT_BUF_SIZE, IoResult};\n use iter::ExactSizeIterator;\n use ops::Drop;\n-use option::{Some, None, Option};\n-use result::{Ok, Err};\n+use option::Option;\n+use option::Option::{Some, None};\n+use result::Result::{Ok, Err};\n use slice::{SlicePrelude};\n use slice;\n use vec::Vec;"}, {"sha": "3de0a7be95e8bc8500d5db75dbe5c3584a8c7119", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -12,8 +12,8 @@ use clone::Clone;\n use cmp;\n use comm::{Sender, Receiver};\n use io;\n-use option::{None, Some};\n-use result::{Ok, Err};\n+use option::Option::{None, Some};\n+use result::Result::{Ok, Err};\n use slice::{bytes, CloneSliceAllocPrelude, SlicePrelude};\n use super::{Buffer, Reader, Writer, IoResult};\n use vec::Vec;"}, {"sha": "1bdf99f6d6dce82d1048c0a1173fdd209df641e8", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -19,9 +19,10 @@ use io::{IoError, IoResult, Reader};\n use io;\n use iter::Iterator;\n use num::Int;\n-use option::{Option, Some, None};\n+use option::Option;\n+use option::Option::{Some, None};\n use ptr::RawPtr;\n-use result::{Ok, Err};\n+use result::Result::{Ok, Err};\n use slice::{SlicePrelude, AsSlice};\n \n /// An iterator that reads a single byte on each iteration,"}, {"sha": "86b2dc4d94053a8bba0c6efb709970d29157fd1e", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -59,10 +59,11 @@ use io::{Read, Truncate, ReadWrite, Append};\n use io::UpdateIoError;\n use io;\n use iter::{Iterator, Extend};\n-use option::{Some, None, Option};\n+use option::Option;\n+use option::Option::{Some, None};\n use path::{Path, GenericPath};\n use path;\n-use result::{Err, Ok};\n+use result::Result::{Err, Ok};\n use slice::SlicePrelude;\n use string::String;\n use vec::Vec;"}, {"sha": "43e02d62b0b5aa800e754b4f7ca1c9510c922166", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -15,8 +15,8 @@\n #![allow(deprecated)]\n \n use cmp::min;\n-use option::None;\n-use result::{Err, Ok};\n+use option::Option::None;\n+use result::Result::{Err, Ok};\n use io;\n use io::{Reader, Writer, Seek, Buffer, IoError, SeekStyle, IoResult};\n use slice::{mod, AsSlice, SlicePrelude};"}, {"sha": "e0857fd27ffdf35a0649cd60dedd87bfdbda3d2e", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -233,10 +233,12 @@ use int;\n use iter::{Iterator, IteratorExt};\n use mem::transmute;\n use ops::{BitOr, BitXor, BitAnd, Sub, Not};\n-use option::{Option, Some, None};\n+use option::Option;\n+use option::Option::{Some, None};\n use os;\n use boxed::Box;\n-use result::{Ok, Err, Result};\n+use result::Result;\n+use result::Result::{Ok, Err};\n use sys;\n use slice::{AsSlice, SlicePrelude};\n use str::{Str, StrPrelude};"}, {"sha": "fea8372733c29d7833f338b13c025d543f53dd46", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -22,7 +22,8 @@ pub use self::Protocol::*;\n use iter::IteratorExt;\n use io::{IoResult};\n use io::net::ip::{SocketAddr, IpAddr};\n-use option::{Option, Some, None};\n+use option::Option;\n+use option::Option::{Some, None};\n use sys;\n use vec::Vec;\n "}, {"sha": "9c0fbbe274b3eb5bbeee9b1c884861f8a6b7a445", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -21,8 +21,9 @@ use fmt;\n use io::{mod, IoResult, IoError};\n use io::net;\n use iter::{Iterator, IteratorExt};\n-use option::{Option, None, Some};\n-use result::{Ok, Err};\n+use option::Option;\n+use option::Option::{None, Some};\n+use result::Result::{Ok, Err};\n use str::{FromStr, StrPrelude};\n use slice::{CloneSlicePrelude, SlicePrelude};\n use vec::Vec;"}, {"sha": "09e5639bea9440424c339f8ae5bf97286a0e8c76", "filename": "src/libstd/io/net/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fmod.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -11,8 +11,8 @@\n //! Networking I/O\n \n use io::{IoError, IoResult, InvalidInput};\n-use option::None;\n-use result::{Ok, Err};\n+use option::Option::None;\n+use result::Result::{Ok, Err};\n use self::ip::{SocketAddr, ToSocketAddr};\n \n pub use self::addrinfo::get_host_addresses;"}, {"sha": "a7b1b077eff0b1b46cc7d88828a38c6ccbaabe4c", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -19,11 +19,12 @@\n \n use clone::Clone;\n use io::IoResult;\n-use result::Err;\n+use result::Result::Err;\n use io::net::ip::{SocketAddr, ToSocketAddr};\n use io::{Reader, Writer, Listener, Acceptor};\n use io::{standard_error, TimedOut};\n-use option::{None, Some, Option};\n+use option::Option;\n+use option::Option::{None, Some};\n use time::Duration;\n \n use sys::tcp::TcpStream as TcpStreamImp;"}, {"sha": "a2ad365dd2a0e2f64ff02eb0c36a06b614687ee6", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -19,7 +19,7 @@ use clone::Clone;\n use io::net::ip::{SocketAddr, IpAddr, ToSocketAddr};\n use io::{Reader, Writer, IoResult};\n use option::Option;\n-use result::{Ok, Err};\n+use result::Result::{Ok, Err};\n use sys::udp::UdpSocket as UdpSocketImp;\n use sys_common;\n "}, {"sha": "32965d23971ed132de3376e702d907d6bc9d1b60", "filename": "src/libstd/io/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fresult.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -15,7 +15,7 @@\n //! as a `Reader` without unwrapping the result first.\n \n use clone::Clone;\n-use result::{Ok, Err};\n+use result::Result::{Ok, Err};\n use super::{Reader, Writer, Listener, Acceptor, Seek, SeekStyle, IoResult};\n \n impl<W: Writer> Writer for IoResult<W> {"}, {"sha": "cf2df0da7fe7b05befb242baa4024bc8d5b583ae", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -37,9 +37,10 @@ use io::{Reader, Writer, IoResult, IoError, OtherIoError, Buffer,\n use kinds::Send;\n use libc;\n use mem;\n-use option::{Option, Some, None};\n+use option::Option;\n+use option::Option::{Some, None};\n use ops::{Deref, DerefMut};\n-use result::{Ok, Err};\n+use result::Result::{Ok, Err};\n use rustrt;\n use rustrt::local::Local;\n use rustrt::task::Task;"}, {"sha": "f3a119399952d7c1ee02fc0a840eef26bb288d08", "filename": "src/libstd/io/tempfile.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fio%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftempfile.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -14,10 +14,11 @@ use io::{fs, IoResult};\n use io;\n use libc;\n use ops::Drop;\n-use option::{Option, None, Some};\n+use option::Option;\n+use option::Option::{None, Some};\n use os;\n use path::{Path, GenericPath};\n-use result::{Ok, Err};\n+use result::Result::{Ok, Err};\n use sync::atomic;\n \n /// A wrapper for a path to temporary directory implementing automatic"}, {"sha": "ba9bcc05546cd4d0786d981bd98fae03de0d1a9d", "filename": "src/libstd/os.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -40,14 +40,16 @@ use libc::{c_void, c_int};\n use libc;\n use boxed::Box;\n use ops::Drop;\n-use option::{Some, None, Option};\n+use option::Option;\n+use option::Option::{Some, None};\n use os;\n use path::{Path, GenericPath, BytesContainer};\n use sys;\n use sys::os as os_imp;\n use ptr::RawPtr;\n use ptr;\n-use result::{Err, Ok, Result};\n+use result::Result;\n+use result::Result::{Err, Ok};\n use slice::{AsSlice, SlicePrelude, PartialEqSlicePrelude};\n use slice::CloneSliceAllocPrelude;\n use str::{Str, StrPrelude, StrAllocating};\n@@ -160,7 +162,8 @@ pub fn getcwd() -> IoResult<Path> {\n pub mod windows {\n     use libc::types::os::arch::extra::DWORD;\n     use libc;\n-    use option::{None, Option};\n+    use option::Option;\n+    use option::Option::None;\n     use option;\n     use os::TMPBUF_SZ;\n     use slice::{SlicePrelude};\n@@ -196,7 +199,7 @@ pub mod windows {\n                     // set `res` to None and continue.\n                     let s = String::from_utf16(sub)\n                         .expect(\"fill_utf16_buf_and_decode: closure created invalid UTF-16\");\n-                    res = option::Some(s)\n+                    res = option::Option::Some(s)\n                 }\n             }\n             return res;\n@@ -1797,15 +1800,15 @@ mod tests {\n     fn test_setenv() {\n         let n = make_rand_name();\n         setenv(n.as_slice(), \"VALUE\");\n-        assert_eq!(getenv(n.as_slice()), option::Some(\"VALUE\".to_string()));\n+        assert_eq!(getenv(n.as_slice()), option::Option::Some(\"VALUE\".to_string()));\n     }\n \n     #[test]\n     fn test_unsetenv() {\n         let n = make_rand_name();\n         setenv(n.as_slice(), \"VALUE\");\n         unsetenv(n.as_slice());\n-        assert_eq!(getenv(n.as_slice()), option::None);\n+        assert_eq!(getenv(n.as_slice()), option::Option::None);\n     }\n \n     #[test]\n@@ -1814,9 +1817,9 @@ mod tests {\n         let n = make_rand_name();\n         setenv(n.as_slice(), \"1\");\n         setenv(n.as_slice(), \"2\");\n-        assert_eq!(getenv(n.as_slice()), option::Some(\"2\".to_string()));\n+        assert_eq!(getenv(n.as_slice()), option::Option::Some(\"2\".to_string()));\n         setenv(n.as_slice(), \"\");\n-        assert_eq!(getenv(n.as_slice()), option::Some(\"\".to_string()));\n+        assert_eq!(getenv(n.as_slice()), option::Option::Some(\"\".to_string()));\n     }\n \n     // Windows GetEnvironmentVariable requires some extra work to make sure\n@@ -1833,7 +1836,7 @@ mod tests {\n         let n = make_rand_name();\n         setenv(n.as_slice(), s.as_slice());\n         debug!(\"{}\", s.clone());\n-        assert_eq!(getenv(n.as_slice()), option::Some(s));\n+        assert_eq!(getenv(n.as_slice()), option::Option::Some(s));\n     }\n \n     #[test]\n@@ -1870,7 +1873,7 @@ mod tests {\n             // MingW seems to set some funky environment variables like\n             // \"=C:=C:\\MinGW\\msys\\1.0\\bin\" and \"!::=::\\\" that are returned\n             // from env() but not visible from getenv().\n-            assert!(v2.is_none() || v2 == option::Some(v));\n+            assert!(v2.is_none() || v2 == option::Option::Some(v));\n         }\n     }\n \n@@ -1957,7 +1960,7 @@ mod tests {\n \n     #[test]\n     fn memory_map_rw() {\n-        use result::{Ok, Err};\n+        use result::Result::{Ok, Err};\n \n         let chunk = match os::MemoryMap::new(16, &[\n             os::MapReadable,\n@@ -1976,7 +1979,7 @@ mod tests {\n \n     #[test]\n     fn memory_map_file() {\n-        use result::{Ok, Err};\n+        use result::Result::{Ok, Err};\n         use os::*;\n         use libc::*;\n         use io::fs;"}, {"sha": "01b42395471fc5ea6630dd92a9fba32add809f6f", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -66,7 +66,8 @@ use c_str::CString;\n use clone::Clone;\n use fmt;\n use iter::IteratorExt;\n-use option::{Option, None, Some};\n+use option::Option;\n+use option::Option::{None, Some};\n use str;\n use str::{CowString, MaybeOwned, Str, StrPrelude};\n use string::String;"}, {"sha": "d6d27daf4ae8bd5770ca71ddffc5d55669a5060a", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -17,7 +17,8 @@ use hash;\n use io::Writer;\n use iter::{DoubleEndedIteratorExt, AdditiveIterator, Extend};\n use iter::{Iterator, IteratorExt, Map};\n-use option::{Option, None, Some};\n+use option::Option;\n+use option::Option::{None, Some};\n use kinds::Sized;\n use str::{FromStr, Str};\n use str;"}, {"sha": "08e318d32b9fc8ca42ce7b661b99381c0c33c26a", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -23,7 +23,8 @@ use io::Writer;\n use iter::{AdditiveIterator, DoubleEndedIteratorExt, Extend};\n use iter::{Iterator, IteratorExt, Map};\n use mem;\n-use option::{Option, Some, None};\n+use option::Option;\n+use option::Option::{Some, None};\n use slice::{AsSlice, SlicePrelude};\n use str::{CharSplits, FromStr, Str, StrAllocating, StrVector, StrPrelude};\n use string::String;"}, {"sha": "413d9267152ebdcc07323c3e654a2a20145c800d", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -227,7 +227,7 @@ use io::IoResult;\n use iter::{Iterator, IteratorExt};\n use mem;\n use rc::Rc;\n-use result::{Ok, Err};\n+use result::Result::{Ok, Err};\n use vec::Vec;\n \n #[cfg(not(target_word_size=\"64\"))]"}, {"sha": "37628b65388e7d20266838e50c06072e7fd0fd50", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -23,7 +23,7 @@ mod imp {\n     use path::Path;\n     use rand::Rng;\n     use rand::reader::ReaderRng;\n-    use result::{Ok, Err};\n+    use result::Result::{Ok, Err};\n     use slice::SlicePrelude;\n     use mem;\n     use os::errno;\n@@ -173,7 +173,7 @@ mod imp {\n     use mem;\n     use os;\n     use rand::Rng;\n-    use result::{Ok};\n+    use result::Result::{Ok};\n     use self::libc::{c_int, size_t};\n     use slice::{SlicePrelude};\n \n@@ -240,7 +240,7 @@ mod imp {\n     use ops::Drop;\n     use os;\n     use rand::Rng;\n-    use result::{Ok, Err};\n+    use result::Result::{Ok, Err};\n     use self::libc::{DWORD, BYTE, LPCSTR, BOOL};\n     use self::libc::types::os::arch::extra::{LONG_PTR};\n     use slice::{SlicePrelude};"}, {"sha": "ca6322247c2ab0a3bc60cae03e9b9819781fae5c", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -12,7 +12,7 @@\n \n use io::Reader;\n use rand::Rng;\n-use result::{Ok, Err};\n+use result::Result::{Ok, Err};\n use slice::SlicePrelude;\n \n /// An RNG that reads random bytes straight from a `Reader`. This will"}, {"sha": "3698a91855cd621fcf664ec0386eaa7956f159c6", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -14,9 +14,9 @@\n \n use io::{IoResult, Writer};\n use iter::{Iterator, IteratorExt};\n-use option::{Some, None};\n+use option::Option::{Some, None};\n use os;\n-use result::{Ok, Err};\n+use result::Result::{Ok, Err};\n use str::{StrPrelude, from_str};\n use sync::atomic;\n use unicode::char::UnicodeChar;\n@@ -236,8 +236,9 @@ mod imp {\n     use io::{IoResult, Writer};\n     use libc;\n     use mem;\n-    use option::{Some, None, Option};\n-    use result::{Ok, Err};\n+    use option::Option;\n+    use option::Option::{Some, None};\n+    use result::Result::{Ok, Err};\n     use sync::{StaticMutex, MUTEX_INIT};\n \n     /// As always - iOS on arm uses SjLj exceptions and\n@@ -664,9 +665,9 @@ mod imp {\n     use libc;\n     use mem;\n     use ops::Drop;\n-    use option::{Some, None};\n+    use option::Option::{Some, None};\n     use path::Path;\n-    use result::{Ok, Err};\n+    use result::Result::{Ok, Err};\n     use sync::{StaticMutex, MUTEX_INIT};\n     use slice::SlicePrelude;\n     use str::StrPrelude;"}, {"sha": "ce359c7b0e00630cb00380ab4261ac80a5eca55a", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n use libc::uintptr_t;\n-use option::{Some, None, Option};\n+use option::Option;\n+use option::Option::{Some, None};\n use os;\n use str::{FromStr, from_str, Str};\n use sync::atomic;"}, {"sha": "a773ef7e31747c9c1623ee4657de672b4e48616b", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -20,7 +20,7 @@ use prelude::*;\n use io::{FilePermission, Write, UnstableFileStat, Open, FileAccess, FileMode};\n use io::{IoResult, FileStat, SeekStyle, Reader};\n use io::{Read, Truncate, SeekCur, SeekSet, ReadWrite, SeekEnd, Append};\n-use result::{Ok, Err};\n+use result::Result::{Ok, Err};\n use sys::retry;\n use sys_common::{keep_going, eof, mkerr_libc};\n "}, {"sha": "8b4dbf61c181d448291b0f2bfb30c88cfa375b3f", "filename": "src/libstd/task.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -49,7 +49,8 @@ use boxed::Box;\n use comm::channel;\n use io::{Writer, stdio};\n use kinds::{Send, marker};\n-use option::{None, Some, Option};\n+use option::Option;\n+use option::Option::{None, Some};\n use result::Result;\n use rustrt::local::Local;\n use rustrt::task::Task;\n@@ -172,9 +173,10 @@ impl TaskBuilder {\n     /// # Return value\n     ///\n     /// If the child task executes successfully (without panicking) then the\n-    /// future returns `result::Ok` containing the value returned by the\n-    /// function. If the child task panics then the future returns `result::Err`\n-    /// containing the argument to `panic!(...)` as an `Any` trait object.\n+    /// future returns `result::Result::Ok` containing the value returned by the\n+    /// function. If the child task panics then the future returns\n+    /// `result::Result::Err` containing the argument to `panic!(...)` as an\n+    /// `Any` trait object.\n     #[experimental = \"Futures are experimental.\"]\n     pub fn try_future<T:Send>(self, f: proc():Send -> T)\n                               -> Future<Result<T, Box<Any + Send>>> {\n@@ -268,7 +270,7 @@ mod test {\n     use borrow::IntoCow;\n     use boxed::BoxAny;\n     use prelude::*;\n-    use result::{Ok, Err};\n+    use result::Result::{Ok, Err};\n     use result;\n     use std::io::{ChanReader, ChanWriter};\n     use string::String;\n@@ -330,7 +332,7 @@ mod test {\n         match try(proc() {\n             \"Success!\".to_string()\n         }).as_ref().map(|s| s.as_slice()) {\n-            result::Ok(\"Success!\") => (),\n+            result::Result::Ok(\"Success!\") => (),\n             _ => panic!()\n         }\n     }\n@@ -340,8 +342,8 @@ mod test {\n         match try(proc() {\n             panic!()\n         }) {\n-            result::Err(_) => (),\n-            result::Ok(()) => panic!()\n+            result::Result::Err(_) => (),\n+            result::Result::Ok(()) => panic!()\n         }\n     }\n "}, {"sha": "029b8bf1138779a6fab4b2c15e01317c125df14f", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -115,7 +115,7 @@ macro_rules! thread_local(\n             use std::cell::UnsafeCell as __UnsafeCell;\n             use std::thread_local::KeyInner as __KeyInner;\n             use std::option::Option as __Option;\n-            use std::option::None as __None;\n+            use std::option::Option::None as __None;\n \n             __thread_local_inner!(static __KEY: __UnsafeCell<__Option<$t>> = {\n                 __UnsafeCell { value: __None }\n@@ -132,7 +132,7 @@ macro_rules! thread_local(\n             use std::cell::UnsafeCell as __UnsafeCell;\n             use std::thread_local::KeyInner as __KeyInner;\n             use std::option::Option as __Option;\n-            use std::option::None as __None;\n+            use std::option::Option::None as __None;\n \n             __thread_local_inner!(static __KEY: __UnsafeCell<__Option<$t>> = {\n                 __UnsafeCell { value: __None }\n@@ -198,7 +198,7 @@ macro_rules! __thread_local_inner(\n                 inner: ::std::cell::UnsafeCell { value: $init },\n                 os: ::std::thread_local::OsStaticKey {\n                     inner: ::std::thread_local::OS_INIT_INNER,\n-                    dtor: ::std::option::Some(__destroy),\n+                    dtor: ::std::option::Option::Some(__destroy),\n                 },\n             }\n         };"}, {"sha": "63eb9a9873624a4d580e0bdc01a06b0ea7f62564", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -14,9 +14,11 @@\n \n use {fmt, i64};\n use ops::{Add, Sub, Mul, Div, Neg};\n-use option::{Option, Some, None};\n+use option::Option;\n+use option::Option::{Some, None};\n use num::Int;\n-use result::{Result, Ok, Err};\n+use result::Result;\n+use result::Result::{Ok, Err};\n \n /// The number of nanoseconds in a microsecond.\n const NANOS_PER_MICRO: i32 = 1000;\n@@ -387,7 +389,7 @@ fn div_rem_64(this: i64, other: i64) -> (i64, i64) {\n mod tests {\n     use super::{Duration, MIN, MAX};\n     use {i32, i64};\n-    use option::{Some, None};\n+    use option::Option::{Some, None};\n     use string::ToString;\n \n     #[test]"}, {"sha": "b4bb1a1a52963cbdeff903363e5316c7129166ad", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -680,6 +680,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let some = vec!(\n             self.ident_of(\"std\"),\n             self.ident_of(\"option\"),\n+            self.ident_of(\"Option\"),\n             self.ident_of(\"Some\"));\n         self.expr_call_global(sp, some, vec!(expr))\n     }\n@@ -688,6 +689,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let none = self.path_global(sp, vec!(\n             self.ident_of(\"std\"),\n             self.ident_of(\"option\"),\n+            self.ident_of(\"Option\"),\n             self.ident_of(\"None\")));\n         self.expr_path(none)\n     }\n@@ -732,6 +734,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let ok = vec!(\n             self.ident_of(\"std\"),\n             self.ident_of(\"result\"),\n+            self.ident_of(\"Result\"),\n             self.ident_of(\"Ok\"));\n         self.expr_call_global(sp, ok, vec!(expr))\n     }\n@@ -740,6 +743,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let err = vec!(\n             self.ident_of(\"std\"),\n             self.ident_of(\"result\"),\n+            self.ident_of(\"Result\"),\n             self.ident_of(\"Err\"));\n         self.expr_call_global(sp, err, vec!(expr))\n     }\n@@ -810,6 +814,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let some = vec!(\n             self.ident_of(\"std\"),\n             self.ident_of(\"option\"),\n+            self.ident_of(\"Option\"),\n             self.ident_of(\"Some\"));\n         let path = self.path_global(span, some);\n         self.pat_enum(span, path, vec!(pat))\n@@ -819,6 +824,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let some = vec!(\n             self.ident_of(\"std\"),\n             self.ident_of(\"option\"),\n+            self.ident_of(\"Option\"),\n             self.ident_of(\"None\"));\n         let path = self.path_global(span, some);\n         self.pat_enum(span, path, vec!())\n@@ -828,6 +834,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let some = vec!(\n             self.ident_of(\"std\"),\n             self.ident_of(\"result\"),\n+            self.ident_of(\"Result\"),\n             self.ident_of(\"Ok\"));\n         let path = self.path_global(span, some);\n         self.pat_enum(span, path, vec!(pat))\n@@ -837,6 +844,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let some = vec!(\n             self.ident_of(\"std\"),\n             self.ident_of(\"result\"),\n+            self.ident_of(\"Result\"),\n             self.ident_of(\"Err\"));\n         let path = self.path_global(span, some);\n         self.pat_enum(span, path, vec!(pat))"}, {"sha": "787c6e844d5141e53f87059d6fe70ab890e3af66", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -105,6 +105,7 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span,\n     let ordering = cx.path_global(span,\n                                   vec!(cx.ident_of(\"std\"),\n                                        cx.ident_of(\"cmp\"),\n+                                       cx.ident_of(\"Ordering\"),\n                                        cx.ident_of(\"Equal\")));\n     let ordering = cx.expr_path(ordering);\n     let equals_expr = cx.expr_some(span, ordering);\n@@ -120,9 +121,9 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span,\n     Builds:\n \n     let __test = ::std::cmp::PartialOrd::partial_cmp(&self_field1, &other_field1);\n-    if __test == ::std::option::Some(::std::cmp::Equal) {\n+    if __test == ::std::option::Option::Some(::std::cmp::Ordering::Equal) {\n         let __test = ::std::cmp::PartialOrd::partial_cmp(&self_field2, &other_field2);\n-        if __test == ::std::option::Some(::std::cmp::Equal) {\n+        if __test == ::std::option::Option::Some(::std::cmp::Ordering::Equal) {\n             ...\n         } else {\n             __test\n@@ -139,7 +140,7 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span,\n         false,\n         |cx, span, old, self_f, other_fs| {\n             // let __test = new;\n-            // if __test == Some(::std::cmp::Equal) {\n+            // if __test == Some(::std::cmp::Ordering::Equal) {\n             //    old\n             // } else {\n             //    __test"}, {"sha": "83af45462ec6e212a3cac37da74dc15222ed459b", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -70,9 +70,9 @@ pub fn cs_cmp(cx: &mut ExtCtxt, span: Span,\n     Builds:\n \n     let __test = self_field1.cmp(&other_field2);\n-    if other == ::std::cmp::Equal {\n+    if other == ::std::cmp::Ordering::Equal {\n         let __test = self_field2.cmp(&other_field2);\n-        if __test == ::std::cmp::Equal {\n+        if __test == ::std::cmp::Ordering::Equal {\n             ...\n         } else {\n             __test\n@@ -89,7 +89,7 @@ pub fn cs_cmp(cx: &mut ExtCtxt, span: Span,\n         false,\n         |cx, span, old, new| {\n             // let __test = new;\n-            // if __test == ::std::cmp::Equal {\n+            // if __test == ::std::cmp::Ordering::Equal {\n             //    old\n             // } else {\n             //    __test"}, {"sha": "e6a44c57f1b6581a8cc810ae559160ef20401b4f", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -36,6 +36,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenT\n                                    true,\n                                    vec!(cx.ident_of(\"std\"),\n                                         cx.ident_of(\"option\"),\n+                                        cx.ident_of(\"Option\"),\n                                         cx.ident_of(\"None\")),\n                                    Vec::new(),\n                                    vec!(cx.ty_rptr(sp,\n@@ -50,6 +51,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenT\n           cx.expr_call_global(sp,\n                               vec!(cx.ident_of(\"std\"),\n                                    cx.ident_of(\"option\"),\n+                                   cx.ident_of(\"Option\"),\n                                    cx.ident_of(\"Some\")),\n                               vec!(cx.expr_str(sp,\n                                                token::intern_and_get_ident("}, {"sha": "3c909a3c708429ee34d969df83187911fb7e7b50", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -576,7 +576,7 @@ fn format(val: Param, op: FormatOp, flags: Flags) -> Result<Vec<u8> ,String> {\n #[cfg(test)]\n mod test {\n     use super::{expand,Param,Words,Variables,Number};\n-    use std::result::Ok;\n+    use std::result::Result::Ok;\n \n     #[test]\n     fn test_basic_setabf() {"}, {"sha": "06a0df852b93623e24db19a3090ddb493d050121", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -1262,7 +1262,7 @@ mod tests {\n                 InvalidFormatSpecifier};\n \n     use std::f64;\n-    use std::result::{Err, Ok};\n+    use std::result::Result::{Err, Ok};\n     use std::time::Duration;\n     use self::test::Bencher;\n "}, {"sha": "29a8b1204b85603640436cc12d8b57b33fcfb798", "filename": "src/libunicode/normalize.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibunicode%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibunicode%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fnormalize.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -10,8 +10,9 @@\n \n //! Functions for computing canonical and compatible decompositions for Unicode characters.\n \n-use core::cmp::{Equal, Less, Greater};\n-use core::option::{Option, Some, None};\n+use core::cmp::Ordering::{Equal, Less, Greater};\n+use core::option::Option;\n+use core::option::Option::{Some, None};\n use core::slice;\n use core::slice::SlicePrelude;\n use tables::normalization::{canonical_table, compatibility_table, composition_table};"}, {"sha": "c91ce5c6464e854fd2aa5087f5aba9e2b12a7408", "filename": "src/libunicode/tables.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibunicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibunicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Ftables.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -17,7 +17,7 @@\n pub const UNICODE_VERSION: (uint, uint, uint) = (7, 0, 0);\n \n fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n-    use core::cmp::{Equal, Less, Greater};\n+    use core::cmp::Ordering::{Equal, Less, Greater};\n     use core::slice::SlicePrelude;\n     r.binary_search(|&(lo,hi)| {\n         if lo <= c && c <= hi { Equal }\n@@ -6241,7 +6241,7 @@ pub mod normalization {\n \n \n     fn bsearch_range_value_table(c: char, r: &'static [(char, char, u8)]) -> u8 {\n-        use core::cmp::{Equal, Less, Greater};\n+        use core::cmp::Ordering::{Equal, Less, Greater};\n         use core::slice::SlicePrelude;\n         use core::slice;\n         match r.binary_search(|&(lo, hi, _)| {\n@@ -6366,10 +6366,11 @@ pub mod normalization {\n }\n \n pub mod conversions {\n-    use core::cmp::{Equal, Less, Greater};\n+    use core::cmp::Ordering::{Equal, Less, Greater};\n     use core::slice::SlicePrelude;\n     use core::tuple::Tuple2;\n-    use core::option::{Option, Some, None};\n+    use core::option::Option;\n+    use core::option::Option::{Some, None};\n     use core::slice;\n \n     pub fn to_lower(c: char) -> char {\n@@ -6934,12 +6935,13 @@ pub mod conversions {\n }\n \n pub mod charwidth {\n-    use core::option::{Option, Some, None};\n+    use core::option::Option;\n+    use core::option::Option::{Some, None};\n     use core::slice::SlicePrelude;\n     use core::slice;\n \n     fn bsearch_range_value_table(c: char, is_cjk: bool, r: &'static [(char, char, u8, u8)]) -> u8 {\n-        use core::cmp::{Equal, Less, Greater};\n+        use core::cmp::Ordering::{Equal, Less, Greater};\n         match r.binary_search(|&(lo, hi, _, _)| {\n             if lo <= c && c <= hi { Equal }\n             else if hi < c { Less }\n@@ -7154,7 +7156,7 @@ pub mod grapheme {\n     }\n \n     fn bsearch_range_value_table(c: char, r: &'static [(char, char, GraphemeCat)]) -> GraphemeCat {\n-        use core::cmp::{Equal, Less, Greater};\n+        use core::cmp::Ordering::{Equal, Less, Greater};\n         match r.binary_search(|&(lo, hi, _)| {\n             if lo <= c && c <= hi { Equal }\n             else if hi < c { Less }"}, {"sha": "e4b2b682b2cffddbe62419edd58436f44d7226a4", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -21,7 +21,8 @@ use core::slice::SlicePrelude;\n use core::iter::{Filter, AdditiveIterator, Iterator, IteratorExt};\n use core::iter::{DoubleEndedIterator, DoubleEndedIteratorExt};\n use core::kinds::Sized;\n-use core::option::{Option, None, Some};\n+use core::option::Option;\n+use core::option::Option::{None, Some};\n use core::str::{CharSplits, StrPrelude};\n use u_char::UnicodeChar;\n use tables::grapheme::GraphemeCat;"}, {"sha": "45d2cbea8fad985d7f52a8d3bd9b25a788998c9d", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -77,8 +77,8 @@ fn sort_and_fmt(mm: &HashMap<Vec<u8> , uint>, total: uint) -> String {\n fn find(mm: &HashMap<Vec<u8> , uint>, key: String) -> uint {\n    let key = key.into_ascii().as_slice().to_lowercase().into_string();\n    match mm.get(key.as_bytes()) {\n-      option::None      => { return 0u; }\n-      option::Some(&num) => { return num; }\n+      option::Option::None      => { return 0u; }\n+      option::Option::Some(&num) => { return num; }\n    }\n }\n \n@@ -190,8 +190,8 @@ fn main() {\n            // start processing if this is the one\n            ('>', false) => {\n                match line.as_slice().slice_from(1).find_str(\"THREE\") {\n-                   option::Some(_) => { proc_mode = true; }\n-                   option::None    => { }\n+                   option::Option::Some(_) => { proc_mode = true; }\n+                   option::Option::None    => { }\n                }\n            }\n "}, {"sha": "15a5cb0c9bfffcbf01f95c2a2544805443541086", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -21,7 +21,7 @@\n extern crate getopts;\n \n use std::os;\n-use std::result::{Ok, Err};\n+use std::result::Result::{Ok, Err};\n use std::task;\n use std::time::Duration;\n "}, {"sha": "b1a6c82a734fe20003c2f342cc03dbd3dccf8eee", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -18,8 +18,8 @@ use std::mem::*;            // shouldn't get errors for not using\n                             // everything imported\n \n // Should get errors for both 'Some' and 'None'\n-use std::option::{Some, None}; //~ ERROR unused import\n-                                //~^ ERROR unused import\n+use std::option::Option::{Some, None}; //~ ERROR unused import\n+                                     //~^ ERROR unused import\n \n use test::A;       //~ ERROR unused import\n // Be sure that if we just bring some methods into scope that they're also"}, {"sha": "df14efd6c3a97a1ea46e0260c2f7f221f2d2348f", "filename": "src/test/run-fail/result-get-panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Frun-fail%2Fresult-get-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Frun-fail%2Fresult-get-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fresult-get-panic.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -10,8 +10,8 @@\n \n // error-pattern:called `Result::unwrap()` on an `Err` value\n \n-use std::result;\n+use std::result::Result::Err;\n \n fn main() {\n-    println!(\"{}\", result::Err::<int,String>(\"kitty\".to_string()).unwrap());\n+    println!(\"{}\", Err::<int,String>(\"kitty\".to_string()).unwrap());\n }"}, {"sha": "b68d8058381d2322c67c3e97ee6787db203b4972", "filename": "src/test/run-pass/deriving-cmp-shortcircuit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -39,5 +39,5 @@ pub fn main() {\n \n     assert!(a != b);\n     assert!(a < b);\n-    assert_eq!(a.cmp(&b), ::std::cmp::Less);\n+    assert_eq!(a.cmp(&b), ::std::cmp::Ordering::Less);\n }"}, {"sha": "d63c264479a93b9cf1012b2fd939fd31473fb979", "filename": "src/test/run-pass/deriving-self-lifetime-totalord-totaleq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime-totalord-totaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime-totalord-totaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime-totalord-totaleq.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-test FIXME #11820: & is unreliable in deriving\n \n-use std::cmp::{Less,Equal,Greater};\n+use std::cmp::Ordering::{Less,Equal,Greater};\n \n #[deriving(Eq,Ord)]\n struct A<'a> {"}, {"sha": "4b839d740fc7aeaecf574b9adf9f7394b734c0d4", "filename": "src/test/run-pass/enum-nullable-const-null-with-fields.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Frun-pass%2Fenum-nullable-const-null-with-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Frun-pass%2Fenum-nullable-const-null-with-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-nullable-const-null-with-fields.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::result::{Result,Ok};\n+use std::result::Result;\n+use std::result::Result::Ok;\n \n static C: Result<(), Box<int>> = Ok(());\n "}, {"sha": "6f1f2cea8ec3ce3182840f057878d2918f0a8347", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -24,14 +24,14 @@ enum object {\n fn lookup(table: json::Object, key: String, default: String) -> String\n {\n     match table.find(&key.to_string()) {\n-        option::Some(&Json::String(ref s)) => {\n+        option::Option::Some(&Json::String(ref s)) => {\n             s.to_string()\n         }\n-        option::Some(value) => {\n+        option::Option::Some(value) => {\n             println!(\"{} was expected to be a string but is a {}\", key, value);\n             default\n         }\n-        option::None => {\n+        option::Option::None => {\n             default\n         }\n     }"}, {"sha": "81efacb9bcbadb876ce1d95cb02b84e42ea16800", "filename": "src/test/run-pass/issue-3424.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3424.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -20,7 +20,7 @@ type rsrc_loader = proc(path: &Path):'static -> result::Result<String, String>;\n fn tester()\n {\n     let loader: rsrc_loader = proc(_path) {\n-        result::Ok(\"more blah\".to_string())\n+        result::Result::Ok(\"more blah\".to_string())\n     };\n \n     let path = path::Path::new(\"blah\");"}, {"sha": "da1ad094df6a035effb8e693b581bd3d393bc310", "filename": "src/test/run-pass/nullable-pointer-iotareduction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -41,9 +41,9 @@ macro_rules! check_option {\n         check_option!($e: $T, |ptr| assert!(*ptr == $e));\n     }};\n     ($e:expr: $T:ty, |$v:ident| $chk:expr) => {{\n-        assert!(option::None::<$T>.is_none());\n+        assert!(option::Option::None::<$T>.is_none());\n         let e = $e;\n-        let s_ = option::Some::<$T>(e);\n+        let s_ = option::Option::Some::<$T>(e);\n         let $v = s_.as_ref().unwrap();\n         $chk\n     }}"}, {"sha": "1b0f2ec0a327f72390f321ad9e116841a7e1113d", "filename": "src/test/run-pass/send_str_hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -11,7 +11,7 @@\n extern crate collections;\n \n use std::collections::HashMap;\n-use std::option::Some;\n+use std::option::Option::Some;\n use std::str::SendStr;\n \n pub fn main() {"}, {"sha": "9334b673b515e9630527a0e21c44ec39f80b3563", "filename": "src/test/run-pass/send_str_treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d18b92f80e52462a5c086bb47252817e6b1b3d/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs?ref=f7d18b92f80e52462a5c086bb47252817e6b1b3d", "patch": "@@ -11,7 +11,7 @@\n extern crate collections;\n \n use self::collections::TreeMap;\n-use std::option::Some;\n+use std::option::Option::Some;\n use std::str::SendStr;\n use std::string::ToString;\n "}]}