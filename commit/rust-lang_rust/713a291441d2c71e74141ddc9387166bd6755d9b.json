{"sha": "713a291441d2c71e74141ddc9387166bd6755d9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxM2EyOTE0NDFkMmM3MWU3NDE0MWRkYzkzODcxNjZiZDY3NTVkOWI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-03-05T23:39:35Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-03-05T23:39:35Z"}, "message": "review comments", "tree": {"sha": "2edbd5b7649f1908b739f404d5a6aa769b87efac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2edbd5b7649f1908b739f404d5a6aa769b87efac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/713a291441d2c71e74141ddc9387166bd6755d9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/713a291441d2c71e74141ddc9387166bd6755d9b", "html_url": "https://github.com/rust-lang/rust/commit/713a291441d2c71e74141ddc9387166bd6755d9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/713a291441d2c71e74141ddc9387166bd6755d9b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91525fd078bb6f3ec833aa42141ea027b37b26a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/91525fd078bb6f3ec833aa42141ea027b37b26a0", "html_url": "https://github.com/rust-lang/rust/commit/91525fd078bb6f3ec833aa42141ea027b37b26a0"}], "stats": {"total": 122, "additions": 65, "deletions": 57}, "files": [{"sha": "d90e9c4df269c309adab5b188d390323e218664e", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/713a291441d2c71e74141ddc9387166bd6755d9b/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713a291441d2c71e74141ddc9387166bd6755d9b/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=713a291441d2c71e74141ddc9387166bd6755d9b", "patch": "@@ -801,6 +801,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                             E0198,\n                             \"negative impls cannot be unsafe\"\n                         )\n+                        .span_label(sp, \"negative because of this\")\n                         .span_label(span, \"unsafe because of this\")\n                         .emit();\n                     }\n@@ -819,45 +820,40 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 ref self_ty,\n                 items: _,\n             } => {\n+                let error = |annotation_span, annotation, note, code| {\n+                    let mut err = self.err_handler().struct_span_err(\n+                        self_ty.span,\n+                        &format!(\"inherent impls cannot be {}\", annotation),\n+                    );\n+                    err.span_label(annotation_span, &format!(\"{} because of this\", annotation));\n+                    err.span_label(self_ty.span, \"inherent impl for this type\");\n+                    if note {\n+                        err.note(&format!(\n+                            \"only trait implementations may be annotated with {}\",\n+                            annotation\n+                        ));\n+                    }\n+                    if code {\n+                        err.code(error_code!(E0197));\n+                    }\n+                    err.emit();\n+                };\n+\n                 self.invalid_visibility(\n                     &item.vis,\n                     Some(\"place qualifiers on individual impl items instead\"),\n                 );\n                 if let Unsafe::Yes(span) = unsafety {\n-                    struct_span_err!(\n-                        self.session,\n-                        vec![span, self_ty.span],\n-                        E0197,\n-                        \"inherent impls cannot be unsafe\"\n-                    )\n-                    .span_label(span, \"unsafe because of this\")\n-                    .span_label(self_ty.span, \"inherent impl for this type\")\n-                    .emit();\n+                    error(span, \"unsafe\", false, true)\n                 }\n                 if let ImplPolarity::Negative(span) = polarity {\n-                    self.err_handler().span_err(span, \"inherent impls cannot be negative\");\n+                    error(span, \"negative\", false, false);\n                 }\n                 if let Defaultness::Default(def_span) = defaultness {\n-                    self.err_handler()\n-                        .struct_span_err(\n-                            vec![def_span, self_ty.span],\n-                            \"inherent impls cannot be `default`\",\n-                        )\n-                        .span_label(def_span, \"`default` because of this\")\n-                        .span_label(self_ty.span, \"inherent impl for this type\")\n-                        .note(\"only trait implementations may be annotated with `default`\")\n-                        .emit();\n+                    error(def_span, \"`default`\", true, false);\n                 }\n                 if let Const::Yes(span) = constness {\n-                    self.err_handler()\n-                        .struct_span_err(\n-                            vec![span, self_ty.span],\n-                            \"inherent impls cannot be `const`\",\n-                        )\n-                        .span_label(span, \"`const` because of this\")\n-                        .span_label(self_ty.span, \"inherent impl for this type\")\n-                        .note(\"only trait implementations may be annotated with `const`\")\n-                        .emit();\n+                    error(span, \"`const`\", true, false);\n                 }\n             }\n             ItemKind::Fn(def, ref sig, ref generics, ref body) => {"}, {"sha": "85bb546b74806ccda953587c62e1f05bb2ffdf23", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/713a291441d2c71e74141ddc9387166bd6755d9b/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/713a291441d2c71e74141ddc9387166bd6755d9b/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=713a291441d2c71e74141ddc9387166bd6755d9b", "patch": "@@ -373,6 +373,16 @@ impl<'a> Parser<'a> {\n         self.token.is_keyword(kw::Async) && self.is_keyword_ahead(1, &[kw::Fn])\n     }\n \n+    fn parse_polarity(&mut self) -> ast::ImplPolarity {\n+        // Disambiguate `impl !Trait for Type { ... }` and `impl ! { ... }` for the never type.\n+        if self.check(&token::Not) && self.look_ahead(1, |t| t.can_begin_type()) {\n+            self.bump(); // `!`\n+            ast::ImplPolarity::Negative(self.prev_token.span)\n+        } else {\n+            ast::ImplPolarity::Positive\n+        }\n+    }\n+\n     /// Parses an implementation item.\n     ///\n     /// ```\n@@ -411,13 +421,7 @@ impl<'a> Parser<'a> {\n             self.sess.gated_spans.gate(sym::const_trait_impl, span);\n         }\n \n-        // Disambiguate `impl !Trait for Type { ... }` and `impl ! { ... }` for the never type.\n-        let polarity = if self.check(&token::Not) && self.look_ahead(1, |t| t.can_begin_type()) {\n-            self.bump(); // `!`\n-            ast::ImplPolarity::Negative(self.prev_token.span)\n-        } else {\n-            ast::ImplPolarity::Positive\n-        };\n+        let polarity = self.parse_polarity();\n \n         // Parse both types and traits as a type, then reinterpret if necessary.\n         let err_path = |span| ast::Path::from_ident(Ident::new(kw::Invalid, span));"}, {"sha": "1bd37f395902a287e532460cf11a3409fce3cfcd", "filename": "src/test/ui/coherence/coherence-negative-impls-safe.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/713a291441d2c71e74141ddc9387166bd6755d9b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/713a291441d2c71e74141ddc9387166bd6755d9b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.stderr?ref=713a291441d2c71e74141ddc9387166bd6755d9b", "patch": "@@ -2,8 +2,9 @@ error[E0198]: negative impls cannot be unsafe\n   --> $DIR/coherence-negative-impls-safe.rs:7:13\n    |\n LL | unsafe impl !Send for TestType {}\n-   | ------      ^^^^^\n-   | |\n+   | ------      -^^^^\n+   | |           |\n+   | |           negative because of this\n    | unsafe because of this\n \n error: aborting due to previous error"}, {"sha": "35e1042649ef9e382e40b324b5e71d158a9e172d", "filename": "src/test/ui/error-codes/E0197.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713a291441d2c71e74141ddc9387166bd6755d9b/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/713a291441d2c71e74141ddc9387166bd6755d9b/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0197.stderr?ref=713a291441d2c71e74141ddc9387166bd6755d9b", "patch": "@@ -1,8 +1,8 @@\n error[E0197]: inherent impls cannot be unsafe\n-  --> $DIR/E0197.rs:3:1\n+  --> $DIR/E0197.rs:3:13\n    |\n LL | unsafe impl Foo { }\n-   | ^^^^^^      ^^^ inherent impl for this type\n+   | ------      ^^^ inherent impl for this type\n    | |\n    | unsafe because of this\n "}, {"sha": "bb2efefb427bad08dff28f7c81b1450fb58b7179", "filename": "src/test/ui/error-codes/E0198.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/713a291441d2c71e74141ddc9387166bd6755d9b/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/713a291441d2c71e74141ddc9387166bd6755d9b/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0198.stderr?ref=713a291441d2c71e74141ddc9387166bd6755d9b", "patch": "@@ -2,8 +2,9 @@ error[E0198]: negative impls cannot be unsafe\n   --> $DIR/E0198.rs:5:13\n    |\n LL | unsafe impl !Send for Foo { }\n-   | ------      ^^^^^\n-   | |\n+   | ------      -^^^^\n+   | |           |\n+   | |           negative because of this\n    | unsafe because of this\n \n error: aborting due to previous error"}, {"sha": "834f6a409f5b69bcbf8c1410a51f6c365880c05f", "filename": "src/test/ui/rfc-2632-const-trait-impl/inherent-impl.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/713a291441d2c71e74141ddc9387166bd6755d9b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/713a291441d2c71e74141ddc9387166bd6755d9b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr?ref=713a291441d2c71e74141ddc9387166bd6755d9b", "patch": "@@ -1,18 +1,18 @@\n error: inherent impls cannot be `const`\n-  --> $DIR/inherent-impl.rs:9:6\n+  --> $DIR/inherent-impl.rs:9:12\n    |\n LL | impl const S {}\n-   |      ^^^^^ ^ inherent impl for this type\n+   |      ----- ^ inherent impl for this type\n    |      |\n    |      `const` because of this\n    |\n    = note: only trait implementations may be annotated with `const`\n \n error: inherent impls cannot be `const`\n-  --> $DIR/inherent-impl.rs:12:6\n+  --> $DIR/inherent-impl.rs:12:12\n    |\n LL | impl const T {}\n-   |      ^^^^^ ^ inherent impl for this type\n+   |      ----- ^ inherent impl for this type\n    |      |\n    |      `const` because of this\n    |"}, {"sha": "6e19d79e48f6b136e02150e6a6154c2cceb8fbb6", "filename": "src/test/ui/specialization/defaultimpl/validation.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713a291441d2c71e74141ddc9387166bd6755d9b/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/713a291441d2c71e74141ddc9387166bd6755d9b/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr?ref=713a291441d2c71e74141ddc9387166bd6755d9b", "patch": "@@ -1,8 +1,8 @@\n error: inherent impls cannot be `default`\n-  --> $DIR/validation.rs:7:1\n+  --> $DIR/validation.rs:7:14\n    |\n LL | default impl S {}\n-   | ^^^^^^^      ^ inherent impl for this type\n+   | -------      ^ inherent impl for this type\n    | |\n    | `default` because of this\n    |"}, {"sha": "5777e0ade908eb315ecf16ab0b6311ab9b747f57", "filename": "src/test/ui/syntax-trait-polarity.stderr", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/713a291441d2c71e74141ddc9387166bd6755d9b/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/713a291441d2c71e74141ddc9387166bd6755d9b/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr?ref=713a291441d2c71e74141ddc9387166bd6755d9b", "patch": "@@ -1,29 +1,35 @@\n error: inherent impls cannot be negative\n-  --> $DIR/syntax-trait-polarity.rs:7:6\n+  --> $DIR/syntax-trait-polarity.rs:7:7\n    |\n LL | impl !TestType {}\n-   |      ^\n+   |      -^^^^^^^^ inherent impl for this type\n+   |      |\n+   |      negative because of this\n \n error[E0198]: negative impls cannot be unsafe\n   --> $DIR/syntax-trait-polarity.rs:12:13\n    |\n LL | unsafe impl !Send for TestType {}\n-   | ------      ^^^^^\n-   | |\n+   | ------      -^^^^\n+   | |           |\n+   | |           negative because of this\n    | unsafe because of this\n \n error: inherent impls cannot be negative\n-  --> $DIR/syntax-trait-polarity.rs:19:9\n+  --> $DIR/syntax-trait-polarity.rs:19:10\n    |\n LL | impl<T> !TestType2<T> {}\n-   |         ^\n+   |         -^^^^^^^^^^^^ inherent impl for this type\n+   |         |\n+   |         negative because of this\n \n error[E0198]: negative impls cannot be unsafe\n   --> $DIR/syntax-trait-polarity.rs:22:16\n    |\n LL | unsafe impl<T> !Send for TestType2<T> {}\n-   | ------         ^^^^^\n-   | |\n+   | ------         -^^^^\n+   | |              |\n+   | |              negative because of this\n    | unsafe because of this\n \n error[E0192]: negative impls are only allowed for auto traits (e.g., `Send` and `Sync`)"}, {"sha": "0738d2973e2d7585ff28efa876e207ac43eaf0a4", "filename": "src/test/ui/traits/trait-safety-inherent-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/713a291441d2c71e74141ddc9387166bd6755d9b/src%2Ftest%2Fui%2Ftraits%2Ftrait-safety-inherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/713a291441d2c71e74141ddc9387166bd6755d9b/src%2Ftest%2Fui%2Ftraits%2Ftrait-safety-inherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-safety-inherent-impl.stderr?ref=713a291441d2c71e74141ddc9387166bd6755d9b", "patch": "@@ -1,8 +1,8 @@\n error[E0197]: inherent impls cannot be unsafe\n-  --> $DIR/trait-safety-inherent-impl.rs:5:1\n+  --> $DIR/trait-safety-inherent-impl.rs:5:13\n    |\n LL | unsafe impl SomeStruct {\n-   | ^^^^^^      ^^^^^^^^^^ inherent impl for this type\n+   | ------      ^^^^^^^^^^ inherent impl for this type\n    | |\n    | unsafe because of this\n "}]}