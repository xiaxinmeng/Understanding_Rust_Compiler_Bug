{"sha": "cbf5f7d23c4c0c91580245f36fda3ba1b6a12069", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZjVmN2QyM2M0YzBjOTE1ODAyNDVmMzZmZGEzYmExYjZhMTIwNjk=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-29T12:28:32Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-29T12:28:32Z"}, "message": "Use TypeRelating for instantiating query responses", "tree": {"sha": "c0ffec445664550b1debdf816fa2042971e63023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0ffec445664550b1debdf816fa2042971e63023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbf5f7d23c4c0c91580245f36fda3ba1b6a12069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbf5f7d23c4c0c91580245f36fda3ba1b6a12069", "html_url": "https://github.com/rust-lang/rust/commit/cbf5f7d23c4c0c91580245f36fda3ba1b6a12069", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbf5f7d23c4c0c91580245f36fda3ba1b6a12069/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04e7f96dd89b1f0ad615dff1c85d11d4c4c64cb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/04e7f96dd89b1f0ad615dff1c85d11d4c4c64cb4", "html_url": "https://github.com/rust-lang/rust/commit/04e7f96dd89b1f0ad615dff1c85d11d4c4c64cb4"}], "stats": {"total": 118, "additions": 111, "deletions": 7}, "files": [{"sha": "2873618cfadc1f92b648f55eebcd5e51b23d5677", "filename": "src/librustc_infer/infer/canonical/query_response.rs", "status": "modified", "additions": 78, "deletions": 7, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/cbf5f7d23c4c0c91580245f36fda3ba1b6a12069/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf5f7d23c4c0c91580245f36fda3ba1b6a12069/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs?ref=cbf5f7d23c4c0c91580245f36fda3ba1b6a12069", "patch": "@@ -12,14 +12,15 @@ use crate::infer::canonical::{\n     Canonical, CanonicalVarValues, CanonicalizedQueryResponse, Certainty, OriginalQueryValues,\n     QueryOutlivesConstraint, QueryRegionConstraints, QueryResponse,\n };\n+use crate::infer::nll_relate::{NormalizationStrategy, TypeRelating, TypeRelatingDelegate};\n use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n-use crate::infer::InferCtxtBuilder;\n-use crate::infer::{InferCtxt, InferOk, InferResult};\n+use crate::infer::{InferCtxt, InferCtxtBuilder, InferOk, InferResult, NLLRegionVariableOrigin};\n use crate::traits::query::{Fallible, NoSolution};\n-use crate::traits::TraitEngine;\n+use crate::traits::{DomainGoal, TraitEngine};\n use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n use rustc::arena::ArenaAllocatable;\n use rustc::ty::fold::TypeFoldable;\n+use rustc::ty::relate::TypeRelation;\n use rustc::ty::subst::{GenericArg, GenericArgKind};\n use rustc::ty::{self, BoundVar, Ty, TyCtxt};\n use rustc_data_structures::captures::Captures;\n@@ -304,13 +305,31 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 }\n \n                 (GenericArgKind::Type(v1), GenericArgKind::Type(v2)) => {\n-                    let ok = self.at(cause, param_env).eq(v1, v2)?;\n-                    obligations.extend(ok.into_obligations());\n+                    TypeRelating::new(\n+                        self,\n+                        QueryTypeRelatingDelegate {\n+                            infcx: self,\n+                            param_env,\n+                            cause,\n+                            obligations: &mut obligations,\n+                        },\n+                        ty::Variance::Invariant,\n+                    )\n+                    .relate(&v1, &v2)?;\n                 }\n \n                 (GenericArgKind::Const(v1), GenericArgKind::Const(v2)) => {\n-                    let ok = self.at(cause, param_env).eq(v1, v2)?;\n-                    obligations.extend(ok.into_obligations());\n+                    TypeRelating::new(\n+                        self,\n+                        QueryTypeRelatingDelegate {\n+                            infcx: self,\n+                            param_env,\n+                            cause,\n+                            obligations: &mut obligations,\n+                        },\n+                        ty::Variance::Invariant,\n+                    )\n+                    .relate(&v1, &v2)?;\n                 }\n \n                 _ => {\n@@ -656,3 +675,55 @@ pub fn make_query_region_constraints<'tcx>(\n \n     QueryRegionConstraints { outlives, member_constraints: member_constraints.clone() }\n }\n+\n+struct QueryTypeRelatingDelegate<'a, 'tcx> {\n+    infcx: &'a InferCtxt<'a, 'tcx>,\n+    obligations: &'a mut Vec<PredicateObligation<'tcx>>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    cause: &'a ObligationCause<'tcx>,\n+}\n+\n+impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n+    fn create_next_universe(&mut self) -> ty::UniverseIndex {\n+        self.infcx.create_next_universe()\n+    }\n+\n+    fn next_existential_region_var(&mut self, from_forall: bool) -> ty::Region<'tcx> {\n+        let origin = NLLRegionVariableOrigin::Existential { from_forall };\n+        self.infcx.next_nll_region_var(origin)\n+    }\n+\n+    fn next_placeholder_region(&mut self, placeholder: ty::PlaceholderRegion) -> ty::Region<'tcx> {\n+        self.infcx.tcx.mk_region(ty::RePlaceholder(placeholder))\n+    }\n+\n+    fn generalize_existential(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx> {\n+        self.infcx.next_nll_region_var_in_universe(\n+            NLLRegionVariableOrigin::Existential { from_forall: false },\n+            universe,\n+        )\n+    }\n+\n+    fn push_outlives(&mut self, sup: ty::Region<'tcx>, sub: ty::Region<'tcx>) {\n+        self.obligations.push(Obligation {\n+            cause: self.cause.clone(),\n+            param_env: self.param_env,\n+            predicate: ty::Predicate::RegionOutlives(ty::Binder::dummy(ty::OutlivesPredicate(\n+                sup, sub,\n+            ))),\n+            recursion_depth: 0,\n+        });\n+    }\n+\n+    fn push_domain_goal(&mut self, _: DomainGoal<'tcx>) {\n+        bug!(\"should never be invoked with eager normalization\")\n+    }\n+\n+    fn normalization() -> NormalizationStrategy {\n+        NormalizationStrategy::Eager\n+    }\n+\n+    fn forbid_inference_vars() -> bool {\n+        true\n+    }\n+}"}, {"sha": "1f7c060386bd0a27a1373b03d44ddd4ef24c2fdb", "filename": "src/test/ui/nll/user-annotations/type-annotation-with-hrtb.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cbf5f7d23c4c0c91580245f36fda3ba1b6a12069/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ftype-annotation-with-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf5f7d23c4c0c91580245f36fda3ba1b6a12069/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ftype-annotation-with-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ftype-annotation-with-hrtb.rs?ref=cbf5f7d23c4c0c91580245f36fda3ba1b6a12069", "patch": "@@ -0,0 +1,33 @@\n+// Regression test for issue #69490\n+\n+// check-pass\n+\n+pub trait Trait<T> {\n+    const S: &'static str;\n+}\n+\n+impl<T> Trait<()> for T\n+where\n+    T: for<'a> Trait<&'a ()>,\n+{\n+    // Use of `T::S` here caused an ICE\n+    const S: &'static str = T::S;\n+}\n+\n+// Some similar cases that didn't ICE:\n+\n+impl<'a, T> Trait<()> for (T,)\n+where\n+    T: Trait<&'a ()>,\n+{\n+    const S: &'static str = T::S;\n+}\n+\n+impl<T> Trait<()> for [T; 1]\n+where\n+    T: Trait<for<'a> fn(&'a ())>,\n+{\n+    const S: &'static str = T::S;\n+}\n+\n+fn main() {}"}]}