{"sha": "528ab1fe9b51228daf41c7110216c33a93cfa341", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyOGFiMWZlOWI1MTIyOGRhZjQxYzcxMTAyMTZjMzNhOTNjZmEzNDE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-05-29T23:23:29Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-06-02T08:37:45Z"}, "message": "Hack the move_val_init intrinsic to trans directly into the destination address.\n\nremove dead code further down for intrinsic.", "tree": {"sha": "e246af2c48cb440aff0e223a0b542a225b6f9737", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e246af2c48cb440aff0e223a0b542a225b6f9737"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/528ab1fe9b51228daf41c7110216c33a93cfa341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/528ab1fe9b51228daf41c7110216c33a93cfa341", "html_url": "https://github.com/rust-lang/rust/commit/528ab1fe9b51228daf41c7110216c33a93cfa341", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/528ab1fe9b51228daf41c7110216c33a93cfa341/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e561f05c00cd180ec02db4ccab2840a4aba93d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e561f05c00cd180ec02db4ccab2840a4aba93d2", "html_url": "https://github.com/rust-lang/rust/commit/3e561f05c00cd180ec02db4ccab2840a4aba93d2"}], "stats": {"total": 58, "additions": 42, "deletions": 16}, "files": [{"sha": "4a7268f5dfe490e1f2e99e025a59494066b8da7c", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/528ab1fe9b51228daf41c7110216c33a93cfa341/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/528ab1fe9b51228daf41c7110216c33a93cfa341/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=528ab1fe9b51228daf41c7110216c33a93cfa341", "patch": "@@ -265,6 +265,48 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         }\n     }\n \n+    // For `move_val_init` we can evaluate the destination address\n+    // (the first argument) and then trans the source value (the\n+    // second argument) directly into the resulting destination\n+    // address.\n+    if &name[..] == \"move_val_init\" {\n+        if let callee::ArgExprs(ref exprs) = args {\n+            let (dest_expr, source_expr) = if exprs.len() != 2 {\n+                ccx.sess().bug(\"expected two exprs as arguments for `move_val_init` intrinsic\");\n+            } else {\n+                (&exprs[0], &exprs[1])\n+            };\n+            let arg_tys = ty::erase_late_bound_regions(bcx.tcx(), &ty::ty_fn_args(callee_ty));\n+\n+            // evaluate destination address\n+            let lldest_addr = unpack_result!(bcx, {\n+                let dest_datum = unpack_datum!(bcx, expr::trans(bcx, dest_expr));\n+                callee::trans_arg_datum(bcx,\n+                                        arg_tys[0],\n+                                        dest_datum,\n+                                        cleanup::CustomScope(cleanup_scope),\n+                                        callee::DontAutorefArg)\n+            });\n+\n+            // `expr::trans_into(bcx, expr, dest)` is equiv to\n+            //\n+            //    `trans(bcx, expr).store_to_dest(dest)`,\n+            //\n+            // which for `dest == expr::SaveIn(addr)`, is equivalent to:\n+            //\n+            //    `trans(bcx, expr).store_to(bcx, addr)`.\n+            let lldest = expr::Dest::SaveIn(lldest_addr);\n+            bcx = expr::trans_into(bcx, source_expr, lldest);\n+\n+            let llresult = C_nil(ccx);\n+            fcx.pop_and_trans_custom_cleanup_scope(bcx, cleanup_scope);\n+\n+            return Result::new(bcx, llresult);\n+        } else {\n+            ccx.sess().bug(\"expected two exprs as arguments for `move_val_init` intrinsic\");\n+        }\n+    }\n+\n     // Push the arguments.\n     let mut llargs = Vec::new();\n     bcx = callee::trans_args(bcx,\n@@ -356,22 +398,6 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n             let lltp_ty = type_of::type_of(ccx, tp_ty);\n             C_uint(ccx, machine::llalign_of_pref(ccx, lltp_ty))\n         }\n-        (_, \"move_val_init\") => {\n-            // Create a datum reflecting the value being moved.\n-            // Use `appropriate_mode` so that the datum is by ref\n-            // if the value is non-immediate. Note that, with\n-            // intrinsics, there are no argument cleanups to\n-            // concern ourselves with, so we can use an rvalue datum.\n-            let tp_ty = *substs.types.get(FnSpace, 0);\n-            let mode = appropriate_rvalue_mode(ccx, tp_ty);\n-            let src = Datum {\n-                val: llargs[1],\n-                ty: tp_ty,\n-                kind: Rvalue::new(mode)\n-            };\n-            bcx = src.store_to(bcx, llargs[0]);\n-            C_nil(ccx)\n-        }\n         (_, \"drop_in_place\") => {\n             let tp_ty = *substs.types.get(FnSpace, 0);\n             glue::drop_ty(bcx, llargs[0], tp_ty, call_debug_location);"}]}