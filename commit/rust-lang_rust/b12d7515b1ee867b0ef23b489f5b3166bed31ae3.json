{"sha": "b12d7515b1ee867b0ef23b489f5b3166bed31ae3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMmQ3NTE1YjFlZTg2N2IwZWYyM2I0ODlmNWIzMTY2YmVkMzFhZTM=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-09T02:44:52Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-09T03:39:59Z"}, "message": "Move cast_lossless to its own module", "tree": {"sha": "d8fc6a97ddc23a9cb8b5e02d31940dc9fc4c0050", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8fc6a97ddc23a9cb8b5e02d31940dc9fc4c0050"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b12d7515b1ee867b0ef23b489f5b3166bed31ae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b12d7515b1ee867b0ef23b489f5b3166bed31ae3", "html_url": "https://github.com/rust-lang/rust/commit/b12d7515b1ee867b0ef23b489f5b3166bed31ae3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b12d7515b1ee867b0ef23b489f5b3166bed31ae3/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2cbcd32299270487388442e3dc684619279ae6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2cbcd32299270487388442e3dc684619279ae6b", "html_url": "https://github.com/rust-lang/rust/commit/c2cbcd32299270487388442e3dc684619279ae6b"}], "stats": {"total": 166, "additions": 92, "deletions": 74}, "files": [{"sha": "478832a5164a08e61920e8cb314acb826e637c0c", "filename": "clippy_lints/src/casts/cast_lossless.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/b12d7515b1ee867b0ef23b489f5b3166bed31ae3/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b12d7515b1ee867b0ef23b489f5b3166bed31ae3/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs?ref=b12d7515b1ee867b0ef23b489f5b3166bed31ae3", "patch": "@@ -0,0 +1,87 @@\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::{self, FloatTy, Ty};\n+\n+use crate::utils::{in_constant, is_isize_or_usize, snippet_opt, span_lint_and_sugg};\n+\n+use super::{utils, CAST_LOSSLESS};\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_op: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n+    if !should_lint(cx, expr, cast_from, cast_to) {\n+        return;\n+    }\n+\n+    // The suggestion is to use a function call, so if the original expression\n+    // has parens on the outside, they are no longer needed.\n+    let mut applicability = Applicability::MachineApplicable;\n+    let opt = snippet_opt(cx, cast_op.span);\n+    let sugg = opt.as_ref().map_or_else(\n+        || {\n+            applicability = Applicability::HasPlaceholders;\n+            \"..\"\n+        },\n+        |snip| {\n+            if should_strip_parens(cast_op, snip) {\n+                &snip[1..snip.len() - 1]\n+            } else {\n+                snip.as_str()\n+            }\n+        },\n+    );\n+\n+    span_lint_and_sugg(\n+        cx,\n+        CAST_LOSSLESS,\n+        expr.span,\n+        &format!(\n+            \"casting `{}` to `{}` may become silently lossy if you later change the type\",\n+            cast_from, cast_to\n+        ),\n+        \"try\",\n+        format!(\"{}::from({})\", cast_to, sugg),\n+        applicability,\n+    );\n+}\n+\n+fn should_lint(cx: &LateContext<'_>, expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) -> bool {\n+    // Do not suggest using From in consts/statics until it is valid to do so (see #2267).\n+    if in_constant(cx, expr.hir_id) {\n+        return false;\n+    }\n+\n+    match (cast_from.is_integral(), cast_to.is_integral()) {\n+        (true, true) => {\n+            let cast_signed_to_unsigned = cast_from.is_signed() && !cast_to.is_signed();\n+            let from_nbits = utils::int_ty_to_nbits(cast_from, cx.tcx);\n+            let to_nbits = utils::int_ty_to_nbits(cast_to, cx.tcx);\n+            !is_isize_or_usize(cast_from)\n+                && !is_isize_or_usize(cast_to)\n+                && from_nbits < to_nbits\n+                && !cast_signed_to_unsigned\n+        },\n+\n+        (true, false) => {\n+            let from_nbits = utils::int_ty_to_nbits(cast_from, cx.tcx);\n+            let to_nbits = if let ty::Float(FloatTy::F32) = cast_to.kind() {\n+                32\n+            } else {\n+                64\n+            };\n+            from_nbits < to_nbits\n+        },\n+\n+        (_, _) => {\n+            matches!(cast_from.kind(), ty::Float(FloatTy::F32)) && matches!(cast_to.kind(), ty::Float(FloatTy::F64))\n+        },\n+    }\n+}\n+\n+fn should_strip_parens(cast_expr: &Expr<'_>, snip: &str) -> bool {\n+    if let ExprKind::Binary(_, _, _) = cast_expr.kind {\n+        if snip.starts_with('(') && snip.ends_with(')') {\n+            return true;\n+        }\n+    }\n+    false\n+}"}, {"sha": "6c2464e0090b7d32266f53bc2c0747806d1df672", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 5, "deletions": 74, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/b12d7515b1ee867b0ef23b489f5b3166bed31ae3/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b12d7515b1ee867b0ef23b489f5b3166bed31ae3/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=b12d7515b1ee867b0ef23b489f5b3166bed31ae3", "patch": "@@ -1,3 +1,4 @@\n+mod cast_lossless;\n mod cast_precision_loss;\n mod utils;\n \n@@ -18,9 +19,8 @@ use rustc_target::abi::LayoutOf;\n use crate::consts::{constant, Constant};\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    in_constant, is_hir_ty_cfg_dependant, is_isize_or_usize, meets_msrv, method_chain_args,\n-    numeric_literal::NumericLiteral, sext, snippet_opt, snippet_with_applicability, span_lint, span_lint_and_sugg,\n-    span_lint_and_then,\n+    is_hir_ty_cfg_dependant, is_isize_or_usize, meets_msrv, method_chain_args, numeric_literal::NumericLiteral, sext,\n+    snippet_opt, snippet_with_applicability, span_lint, span_lint_and_sugg, span_lint_and_then,\n };\n \n use utils::int_ty_to_nbits;\n@@ -254,52 +254,6 @@ declare_clippy_lint! {\n     \"casting a function pointer to a numeric type not wide enough to store the address\"\n }\n \n-fn should_strip_parens(op: &Expr<'_>, snip: &str) -> bool {\n-    if let ExprKind::Binary(_, _, _) = op.kind {\n-        if snip.starts_with('(') && snip.ends_with(')') {\n-            return true;\n-        }\n-    }\n-    false\n-}\n-\n-fn span_lossless_lint(cx: &LateContext<'_>, expr: &Expr<'_>, op: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n-    // Do not suggest using From in consts/statics until it is valid to do so (see #2267).\n-    if in_constant(cx, expr.hir_id) {\n-        return;\n-    }\n-    // The suggestion is to use a function call, so if the original expression\n-    // has parens on the outside, they are no longer needed.\n-    let mut applicability = Applicability::MachineApplicable;\n-    let opt = snippet_opt(cx, op.span);\n-    let sugg = opt.as_ref().map_or_else(\n-        || {\n-            applicability = Applicability::HasPlaceholders;\n-            \"..\"\n-        },\n-        |snip| {\n-            if should_strip_parens(op, snip) {\n-                &snip[1..snip.len() - 1]\n-            } else {\n-                snip.as_str()\n-            }\n-        },\n-    );\n-\n-    span_lint_and_sugg(\n-        cx,\n-        CAST_LOSSLESS,\n-        expr.span,\n-        &format!(\n-            \"casting `{}` to `{}` may become silently lossy if you later change the type\",\n-            cast_from, cast_to\n-        ),\n-        \"try\",\n-        format!(\"{}::from({})\", cast_to, sugg),\n-        applicability,\n-    );\n-}\n-\n enum ArchSuffix {\n     _32,\n     _64,\n@@ -423,16 +377,6 @@ fn check_truncation_and_wrapping(cx: &LateContext<'_>, expr: &Expr<'_>, cast_fro\n     }\n }\n \n-fn check_lossless(cx: &LateContext<'_>, expr: &Expr<'_>, op: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n-    let cast_signed_to_unsigned = cast_from.is_signed() && !cast_to.is_signed();\n-    let from_nbits = int_ty_to_nbits(cast_from, cx.tcx);\n-    let to_nbits = int_ty_to_nbits(cast_to, cx.tcx);\n-    if !is_isize_or_usize(cast_from) && !is_isize_or_usize(cast_to) && from_nbits < to_nbits && !cast_signed_to_unsigned\n-    {\n-        span_lossless_lint(cx, expr, op, cast_from, cast_to);\n-    }\n-}\n-\n declare_lint_pass!(Casts => [\n     CAST_PRECISION_LOSS,\n     CAST_SIGN_LOSS,\n@@ -584,18 +528,8 @@ fn lint_numeric_casts<'tcx>(\n     cast_to: Ty<'tcx>,\n ) {\n     cast_precision_loss::check(cx, expr, cast_from, cast_to);\n+    cast_lossless::check(cx, expr, cast_expr, cast_from, cast_to);\n     match (cast_from.is_integral(), cast_to.is_integral()) {\n-        (true, false) => {\n-            let from_nbits = int_ty_to_nbits(cast_from, cx.tcx);\n-            let to_nbits = if let ty::Float(FloatTy::F32) = cast_to.kind() {\n-                32\n-            } else {\n-                64\n-            };\n-            if from_nbits < to_nbits {\n-                span_lossless_lint(cx, expr, cast_expr, cast_from, cast_to);\n-            }\n-        },\n         (false, true) => {\n             span_lint(\n                 cx,\n@@ -618,7 +552,6 @@ fn lint_numeric_casts<'tcx>(\n         (true, true) => {\n             check_loss_of_sign(cx, expr, cast_expr, cast_from, cast_to);\n             check_truncation_and_wrapping(cx, expr, cast_from, cast_to);\n-            check_lossless(cx, expr, cast_expr, cast_from, cast_to);\n         },\n         (false, false) => {\n             if let (&ty::Float(FloatTy::F64), &ty::Float(FloatTy::F32)) = (&cast_from.kind(), &cast_to.kind()) {\n@@ -629,10 +562,8 @@ fn lint_numeric_casts<'tcx>(\n                     \"casting `f64` to `f32` may truncate the value\",\n                 );\n             }\n-            if let (&ty::Float(FloatTy::F32), &ty::Float(FloatTy::F64)) = (&cast_from.kind(), &cast_to.kind()) {\n-                span_lossless_lint(cx, expr, cast_expr, cast_from, cast_to);\n-            }\n         },\n+        (_, _) => {},\n     }\n }\n "}]}