{"sha": "10f511daa01d98e4c8f524cbdf38e9dd6c3ea9e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZjUxMWRhYTAxZDk4ZTRjOGY1MjRjYmRmMzhlOWRkNmMzZWE5ZTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-22T21:17:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-22T21:37:54Z"}, "message": "misc tweaks", "tree": {"sha": "e8f4d8ee308fb1fcee91de28912cdceba46750ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8f4d8ee308fb1fcee91de28912cdceba46750ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10f511daa01d98e4c8f524cbdf38e9dd6c3ea9e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10f511daa01d98e4c8f524cbdf38e9dd6c3ea9e3", "html_url": "https://github.com/rust-lang/rust/commit/10f511daa01d98e4c8f524cbdf38e9dd6c3ea9e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10f511daa01d98e4c8f524cbdf38e9dd6c3ea9e3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc570fb3f26b45d101440bb4fe57121ca06884d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc570fb3f26b45d101440bb4fe57121ca06884d3", "html_url": "https://github.com/rust-lang/rust/commit/dc570fb3f26b45d101440bb4fe57121ca06884d3"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "556f8a9e8a2af182a9ddbe3cffda938f0156979d", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/10f511daa01d98e4c8f524cbdf38e9dd6c3ea9e3/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f511daa01d98e4c8f524cbdf38e9dd6c3ea9e3/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=10f511daa01d98e4c8f524cbdf38e9dd6c3ea9e3", "patch": "@@ -1056,12 +1056,22 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n /// This is exploited by the compiler for various optimizations, such as eliding\n /// run-time checks and optimizing `enum` layout.\n ///\n-/// Not initializing memory at all (instead of zero-initializing it) causes the same\n-/// issue: after all, the initial value of the variable might just happen to be\n-/// one that violates the invariant. Moreover, uninitialized memory is special\n-/// in that the compiler knows that it does not have a fixed value. This makes\n-/// it undefined behavior to have uninitialized data in a variable even if that\n-/// variable has otherwise no restrictions about which values are valid:\n+/// Similarly, entirely uninitialized memory may have any content, while a `bool` must\n+/// always be `true` or `false`. Hence, creating an uninitialized `bool` is undefined behavior:\n+///\n+/// ```rust,no_run\n+/// #![feature(maybe_uninit)]\n+/// use std::mem::{self, MaybeUninit};\n+///\n+/// let b: bool = unsafe { mem::uninitialized() }; // undefined behavior!\n+/// // equivalent code with `MaybeUninit`\n+/// let b: bool = unsafe { MaybeUninit::uninitialized().into_initialized() }; // undefined behavior!\n+/// ```\n+///\n+/// Moreover, uninitialized memory is special in that the compiler knows that\n+/// it does not have a fixed value. This makes it undefined behavior to have\n+/// uninitialized data in a variable even if that variable has integer type,\n+/// which otherwise can hold any bit pattern:\n ///\n /// ```rust,no_run\n /// #![feature(maybe_uninit)]\n@@ -1074,8 +1084,8 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n /// (Notice that the rules around uninitialized integers are not finalized yet, but\n /// until they are, it is advisable to avoid them.)\n ///\n-/// `MaybeUninit` serves to enable unsafe code to deal with uninitialized data:\n-/// it is a signal to the compiler indicating that the data here might *not*\n+/// `MaybeUninit` serves to enable unsafe code to deal with uninitialized data.\n+/// It is a signal to the compiler indicating that the data here might *not*\n /// be initialized:\n ///\n /// ```rust\n@@ -1092,11 +1102,11 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n /// let x = unsafe { x.into_initialized() };\n /// ```\n ///\n-/// The compiler then knows to not optimize this code.\n+/// The compiler then knows to not make any incorrect assumptions or optimizations on this code.\n // FIXME before stabilizing, explain how to initialize a struct field-by-field.\n #[allow(missing_debug_implementations)]\n #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n-// NOTE after stabilizing `MaybeUninit` proceed to deprecate `mem::{uninitialized,zeroed}`\n+// NOTE after stabilizing `MaybeUninit` proceed to deprecate `mem::uninitialized`\n pub union MaybeUninit<T> {\n     uninit: (),\n     value: ManuallyDrop<T>,\n@@ -1154,15 +1164,15 @@ impl<T> MaybeUninit<T> {\n     }\n \n     /// Gets a pointer to the contained value. Reading from this pointer or turning it\n-    /// into a reference will be undefined behavior unless the `MaybeUninit` is initialized.\n+    /// into a reference is undefined behavior unless the `MaybeUninit` is initialized.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n     pub fn as_ptr(&self) -> *const T {\n         unsafe { &*self.value as *const T }\n     }\n \n     /// Gets a mutable pointer to the contained value. Reading from this pointer or turning it\n-    /// into a reference will be undefined behavior unless the `MaybeUninit` is initialized.\n+    /// into a reference is undefined behavior unless the `MaybeUninit` is initialized.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n     pub fn as_mut_ptr(&mut self) -> *mut T {"}]}