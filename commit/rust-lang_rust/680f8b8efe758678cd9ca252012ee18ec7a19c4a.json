{"sha": "680f8b8efe758678cd9ca252012ee18ec7a19c4a", "node_id": "C_kwDOAAsO6NoAKDY4MGY4YjhlZmU3NTg2NzhjZDljYTI1MjAxMmVlMThlYzdhMTljNGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-24T19:36:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-24T19:36:58Z"}, "message": "Rollup merge of #111863 - compiler-errors:check-more-mir, r=b-naber\n\nDon't skip mir typeck if body has errors\n\nComment says:\n\n```\n// if verifier failed, don't do further checks to avoid ICEs\n```\n\nBut there are no ICEs to be found. The comment is quite old, so perhaps something fixed it... maybe because the MIR typechecker is delaying span bugs rather than panicking via eager bugs? IDK\n\nI'm generally inclined to fix the ICEs themselves that were to arise from this, rather than just totally skipping large parts of the compiler that have impacts on downstream logic (namely, our opaque type results are affected). Anyways, this happens on the error path, so it shouldn't really matter.\n\nFixes this hack: https://github.com/rust-lang/rust/pull/111853/files#r1201501540", "tree": {"sha": "f45eff794993b7043dafa219ace8bdb8861579f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f45eff794993b7043dafa219ace8bdb8861579f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/680f8b8efe758678cd9ca252012ee18ec7a19c4a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkbmdaCRBK7hj4Ov3rIwAAVBwIAAOHoprbv/wwHjoTJoKHXNdg\nqcvfrSZvYGFZcc4z3tP6WChGZUlDytG1K3ihJkUP3YpEyhQxTcPnKFUGCGqAmwcw\njrCAhLP9mXBWTYljwL2UUwaXE42IKLz1avv9rR0J2T4/CDNMC0PsblUT+lFwnzQx\nR50axK1BBqOA6UMiY0WfjeUnI2XdP6xHwzD1K068uErQxFm/s0lg6frjE55rhmUw\npBr2kSz76GaolR6vfutYYS8p+g/38bi2ornGis76dPGdqNfD82LUaHRJ4A9/a2yt\np9OljHp7ntXe4FZ9U5EDKJkWjfCl/gCNNgWM6AggmHGQ0jOfnR/oO8pcLiTYzK4=\n=KrY1\n-----END PGP SIGNATURE-----\n", "payload": "tree f45eff794993b7043dafa219ace8bdb8861579f3\nparent d09ee575eec35b9796bd43cd6bfd67ea35df06e1\nparent b1387e776c011766e12f6d3ae72e4fa3f59f0fe9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1684957018 +0200\ncommitter GitHub <noreply@github.com> 1684957018 +0200\n\nRollup merge of #111863 - compiler-errors:check-more-mir, r=b-naber\n\nDon't skip mir typeck if body has errors\n\nComment says:\n\n```\n// if verifier failed, don't do further checks to avoid ICEs\n```\n\nBut there are no ICEs to be found. The comment is quite old, so perhaps something fixed it... maybe because the MIR typechecker is delaying span bugs rather than panicking via eager bugs? IDK\n\nI'm generally inclined to fix the ICEs themselves that were to arise from this, rather than just totally skipping large parts of the compiler that have impacts on downstream logic (namely, our opaque type results are affected). Anyways, this happens on the error path, so it shouldn't really matter.\n\nFixes this hack: https://github.com/rust-lang/rust/pull/111853/files#r1201501540\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/680f8b8efe758678cd9ca252012ee18ec7a19c4a", "html_url": "https://github.com/rust-lang/rust/commit/680f8b8efe758678cd9ca252012ee18ec7a19c4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/680f8b8efe758678cd9ca252012ee18ec7a19c4a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d09ee575eec35b9796bd43cd6bfd67ea35df06e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d09ee575eec35b9796bd43cd6bfd67ea35df06e1", "html_url": "https://github.com/rust-lang/rust/commit/d09ee575eec35b9796bd43cd6bfd67ea35df06e1"}, {"sha": "b1387e776c011766e12f6d3ae72e4fa3f59f0fe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1387e776c011766e12f6d3ae72e4fa3f59f0fe9", "html_url": "https://github.com/rust-lang/rust/commit/b1387e776c011766e12f6d3ae72e4fa3f59f0fe9"}], "stats": {"total": 36, "additions": 9, "deletions": 27}, "files": [{"sha": "b42d5c3d18c97795b4f707018afe2961f5521680", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/680f8b8efe758678cd9ca252012ee18ec7a19c4a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680f8b8efe758678cd9ca252012ee18ec7a19c4a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=680f8b8efe758678cd9ca252012ee18ec7a19c4a", "patch": "@@ -183,17 +183,10 @@ pub(crate) fn type_check<'mir, 'tcx>(\n         &mut borrowck_context,\n     );\n \n-    let errors_reported = {\n-        let mut verifier = TypeVerifier::new(&mut checker, promoted);\n-        verifier.visit_body(&body);\n-        verifier.errors_reported\n-    };\n-\n-    if !errors_reported {\n-        // if verifier failed, don't do further checks to avoid ICEs\n-        checker.typeck_mir(body);\n-    }\n+    let mut verifier = TypeVerifier::new(&mut checker, promoted);\n+    verifier.visit_body(&body);\n \n+    checker.typeck_mir(body);\n     checker.equate_inputs_and_outputs(&body, universal_regions, &normalized_inputs_and_output);\n     checker.check_signature_annotation(&body);\n \n@@ -294,7 +287,6 @@ struct TypeVerifier<'a, 'b, 'tcx> {\n     cx: &'a mut TypeChecker<'b, 'tcx>,\n     promoted: &'b IndexSlice<Promoted, Body<'tcx>>,\n     last_span: Span,\n-    errors_reported: bool,\n }\n \n impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n@@ -383,13 +375,11 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                         };\n                     };\n \n-                    if !self.errors_reported {\n-                        let promoted_body = &self.promoted[promoted];\n-                        self.sanitize_promoted(promoted_body, location);\n+                    let promoted_body = &self.promoted[promoted];\n+                    self.sanitize_promoted(promoted_body, location);\n \n-                        let promoted_ty = promoted_body.return_ty();\n-                        check_err(self, promoted_body, ty, promoted_ty);\n-                    }\n+                    let promoted_ty = promoted_body.return_ty();\n+                    check_err(self, promoted_body, ty, promoted_ty);\n                 } else {\n                     self.cx.ascribe_user_type(\n                         constant.literal.ty(),\n@@ -483,9 +473,6 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n         for local_decl in &body.local_decls {\n             self.sanitize_type(local_decl, local_decl.ty);\n         }\n-        if self.errors_reported {\n-            return;\n-        }\n         self.super_body(body);\n     }\n }\n@@ -495,7 +482,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         cx: &'a mut TypeChecker<'b, 'tcx>,\n         promoted: &'b IndexSlice<Promoted, Body<'tcx>>,\n     ) -> Self {\n-        TypeVerifier { promoted, last_span: cx.body.span, cx, errors_reported: false }\n+        TypeVerifier { promoted, last_span: cx.body.span, cx }\n     }\n \n     fn body(&self) -> &Body<'tcx> {\n@@ -529,7 +516,6 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         for elem in place.projection.iter() {\n             if place_ty.variant_index.is_none() {\n                 if let Err(guar) = place_ty.ty.error_reported() {\n-                    assert!(self.errors_reported);\n                     return PlaceTy::from_ty(self.tcx().ty_error(guar));\n                 }\n             }\n@@ -593,10 +579,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n         self.visit_body(&promoted_body);\n \n-        if !self.errors_reported {\n-            // if verifier failed, don't do further checks to avoid ICEs\n-            self.cx.typeck_mir(promoted_body);\n-        }\n+        self.cx.typeck_mir(promoted_body);\n \n         self.cx.body = parent_body;\n         // Merge the outlives constraints back in, at the given location.\n@@ -762,7 +745,6 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n     }\n \n     fn error(&mut self) -> Ty<'tcx> {\n-        self.errors_reported = true;\n         self.tcx().ty_error_misc()\n     }\n "}]}