{"sha": "4bed588001a1d6cd5c83a3eefc6ef77c439de40b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZWQ1ODgwMDFhMWQ2Y2Q1YzgzYTNlZWZjNmVmNzdjNDM5ZGU0MGI=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-08-28T18:28:30Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-09-09T22:42:20Z"}, "message": "First steps for mod<|> completion", "tree": {"sha": "92552f2af9a6aefcd4fffc20d7cbd06d1bc74d3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92552f2af9a6aefcd4fffc20d7cbd06d1bc74d3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bed588001a1d6cd5c83a3eefc6ef77c439de40b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bed588001a1d6cd5c83a3eefc6ef77c439de40b", "html_url": "https://github.com/rust-lang/rust/commit/4bed588001a1d6cd5c83a3eefc6ef77c439de40b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bed588001a1d6cd5c83a3eefc6ef77c439de40b/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c336e266fe09ae9ae6e634513d441cbcde63696", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c336e266fe09ae9ae6e634513d441cbcde63696", "html_url": "https://github.com/rust-lang/rust/commit/5c336e266fe09ae9ae6e634513d441cbcde63696"}], "stats": {"total": 71, "additions": 65, "deletions": 6}, "files": [{"sha": "71e85c6ac767a5a68aa078226fea0fb36bc7ca0b", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4bed588001a1d6cd5c83a3eefc6ef77c439de40b/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed588001a1d6cd5c83a3eefc6ef77c439de40b/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=4bed588001a1d6cd5c83a3eefc6ef77c439de40b", "patch": "@@ -96,6 +96,7 @@ pub trait FileLoader {\n     /// `#[path = \"C://no/way\"]`\n     fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId>;\n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>>;\n+    fn list_some_random_files_todo(&self, anchor: FileId) -> Vec<(FileId, String)>;\n }\n \n /// Database which stores all significant input facts: source code and project\n@@ -155,13 +156,24 @@ impl<T: SourceDatabaseExt> FileLoader for FileLoaderDelegate<&'_ T> {\n     }\n     fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n         // FIXME: this *somehow* should be platform agnostic...\n-        let source_root = self.0.file_source_root(anchor);\n-        let source_root = self.0.source_root(source_root);\n+        // self.source_root(anchor)\n+        let source_root = self.source_root(anchor);\n         source_root.file_set.resolve_path(anchor, path)\n     }\n \n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         let source_root = self.0.file_source_root(file_id);\n         self.0.source_root_crates(source_root)\n     }\n+\n+    fn list_some_random_files_todo(&self, anchor: FileId) -> Vec<(FileId, String)> {\n+        self.source_root(anchor).file_set.list_some_random_files_todo(anchor)\n+    }\n+}\n+\n+impl<T: SourceDatabaseExt> FileLoaderDelegate<&'_ T> {\n+    fn source_root(&self, anchor: FileId) -> Arc<SourceRoot> {\n+        let source_root = self.0.file_source_root(anchor);\n+        self.0.source_root(source_root)\n+    }\n }"}, {"sha": "4d8b3670b3eed47d3d2c546f67b73a5c40fda166", "filename": "crates/ide/src/completion/completion_context.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4bed588001a1d6cd5c83a3eefc6ef77c439de40b/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed588001a1d6cd5c83a3eefc6ef77c439de40b/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=4bed588001a1d6cd5c83a3eefc6ef77c439de40b", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n-use base_db::SourceDatabase;\n-use hir::{Semantics, SemanticsScope, Type};\n+use base_db::{FileLoader, SourceDatabase};\n+use hir::{ModuleSource, Semantics, SemanticsScope, Type};\n use ide_db::RootDatabase;\n use syntax::{\n     algo::{find_covering_element, find_node_at_offset},\n@@ -112,6 +112,27 @@ impl<'a> CompletionContext<'a> {\n         };\n         let fake_ident_token =\n             file_with_fake_ident.syntax().token_at_offset(position.offset).right_biased().unwrap();\n+        {\n+            let module_names_for_import = sema\n+                .to_module_def(position.file_id)\n+                .and_then(|current_module| {\n+                    let definition_source = current_module.definition_source(db);\n+                    if !matches!(definition_source.value, ModuleSource::SourceFile(_)) {\n+                        return None;\n+                    }\n+                    let definition_source_file = definition_source.file_id.original_file(db);\n+\n+                    // TODO kb for all possible candidates\n+                    let zz = db.list_some_random_files_todo(definition_source_file);\n+                    dbg!(zz);\n+                    // TODO kb exlude existing children from the candidates\n+                    let existing_children = current_module.children(db).collect::<Vec<_>>();\n+                    dbg!(existing_children);\n+                    None::<Vec<String>>\n+                })\n+                .unwrap_or_default();\n+            dbg!(module_names_for_import);\n+        };\n \n         let krate = sema.to_module_def(position.file_id).map(|m| m.krate());\n         let original_token ="}, {"sha": "f3197cc397bd3e87671ac2d8da198cc3fdeb8bc1", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bed588001a1d6cd5c83a3eefc6ef77c439de40b/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed588001a1d6cd5c83a3eefc6ef77c439de40b/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=4bed588001a1d6cd5c83a3eefc6ef77c439de40b", "patch": "@@ -74,6 +74,9 @@ impl FileLoader for RootDatabase {\n     fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n+    fn list_some_random_files_todo(&self, anchor: FileId) -> Vec<(FileId, String)> {\n+        FileLoaderDelegate(self).list_some_random_files_todo(anchor)\n+    }\n }\n \n impl salsa::Database for RootDatabase {"}, {"sha": "8bce17bc09145f055263aab23b0c8463f13fe102", "filename": "crates/vfs/src/file_set.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4bed588001a1d6cd5c83a3eefc6ef77c439de40b/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed588001a1d6cd5c83a3eefc6ef77c439de40b/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Ffile_set.rs?ref=4bed588001a1d6cd5c83a3eefc6ef77c439de40b", "patch": "@@ -23,8 +23,31 @@ impl FileSet {\n         let mut base = self.paths[&anchor].clone();\n         base.pop();\n         let path = base.join(path)?;\n-        let res = self.files.get(&path).copied();\n-        res\n+        self.files.get(&path).copied()\n+    }\n+    pub fn list_some_random_files_todo(&self, anchor: FileId) -> Vec<(FileId, String)> {\n+        let anchor_path = self.paths[&anchor].clone();\n+        /*\n+        [crates/vfs/src/file_set.rs:30] anchor_path = \"/Users/someonetoignore/Downloads/tmp_dir/zzzz/src/lib.rs\"\n+        [crates/vfs/src/file_set.rs:31] self.files.keys() = [\n+            \"/Users/someonetoignore/Downloads/tmp_dir/zzzz/src/test_mod_1/test_mod_2/test_mod_3.rs\",\n+            \"/Users/someonetoignore/Downloads/tmp_dir/zzzz/src/test_mod_1/test_mod_2.rs\",\n+            \"/Users/someonetoignore/Downloads/tmp_dir/zzzz/src/test_mod_1.rs\",\n+            \"/Users/someonetoignore/Downloads/tmp_dir/zzzz/src/lib.rs\",\n+            \"/Users/someonetoignore/Downloads/tmp_dir/zzzz/src/test_mod_3/test_mod_3_1.rs\",\n+            \"/Users/someonetoignore/Downloads/tmp_dir/zzzz/src/test_mod_3.rs\",\n+        ]\n+        */\n+\n+        // TODO kb determine the ways to list all applicable files\n+        // Maybe leave list directory here only and the move the rest of the logic into the database impl?\n+\n+        // Need to get the following things:\n+        // * name of the anchor_path file (file_name, validate that it's a file!)\n+        // * list of all files in the file's contai/ning directory (file_dir)\n+        // * list of all files in `file_dir/file_name` or just `file_dir/`, for lib.rs or mod.rs\n+        // * consider special case for /src/bin/foo.rs as a mod<|> source\n+        Vec::new()\n     }\n     pub fn insert(&mut self, file_id: FileId, path: VfsPath) {\n         self.files.insert(path.clone(), file_id);"}]}