{"sha": "b164dbc2715aa15be5c9f363a00d71e0847b2e77", "node_id": "C_kwDOAAsO6NoAKGIxNjRkYmMyNzE1YWExNWJlNWM5ZjM2M2EwMGQ3MWUwODQ3YjJlNzc", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-02T03:20:17Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-10T01:20:12Z"}, "message": "Don't create a new `try_load_from_disk` closure for each query\n\nInstead, define a single function, parameterized only by the return type.", "tree": {"sha": "420810f46226211efb07001fb2eb7616fc2e2bb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/420810f46226211efb07001fb2eb7616fc2e2bb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b164dbc2715aa15be5c9f363a00d71e0847b2e77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b164dbc2715aa15be5c9f363a00d71e0847b2e77", "html_url": "https://github.com/rust-lang/rust/commit/b164dbc2715aa15be5c9f363a00d71e0847b2e77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b164dbc2715aa15be5c9f363a00d71e0847b2e77/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "112419c9f0b7f369df149e002429c85fc05f5e86", "url": "https://api.github.com/repos/rust-lang/rust/commits/112419c9f0b7f369df149e002429c85fc05f5e86", "html_url": "https://github.com/rust-lang/rust/commit/112419c9f0b7f369df149e002429c85fc05f5e86"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "55d23ba1c672292561757b921a567d65189a7e3f", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b164dbc2715aa15be5c9f363a00d71e0847b2e77/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b164dbc2715aa15be5c9f363a00d71e0847b2e77/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=b164dbc2715aa15be5c9f363a00d71e0847b2e77", "patch": "@@ -255,7 +255,7 @@ fn add_query_description_impl(query: &Query, impls: &mut proc_macro2::TokenStrea\n             }\n \n             const TRY_LOAD_FROM_DISK: Option<fn(QueryCtxt<'tcx>, SerializedDepNodeIndex) -> Option<Self::Value>>\n-                = Some(|tcx, id| tcx.on_disk_cache().as_ref()?.try_load_query_result(*tcx, id));\n+                = Some(crate::plumbing::try_load_from_disk::<Self::Value>);\n         }\n     } else {\n         quote! {"}, {"sha": "8148f8e017c0d8219f07ab16b63d8bb3443bbcef", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b164dbc2715aa15be5c9f363a00d71e0847b2e77/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b164dbc2715aa15be5c9f363a00d71e0847b2e77/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=b164dbc2715aa15be5c9f363a00d71e0847b2e77", "patch": "@@ -17,7 +17,7 @@ extern crate rustc_middle;\n \n use rustc_data_structures::sync::AtomicU64;\n use rustc_middle::arena::Arena;\n-use rustc_middle::dep_graph::{self, DepKindStruct, SerializedDepNodeIndex};\n+use rustc_middle::dep_graph::{self, DepKindStruct};\n use rustc_middle::ty::query::{query_keys, query_storage, query_stored, query_values};\n use rustc_middle::ty::query::{ExternProviders, Providers, QueryEngine};\n use rustc_middle::ty::{self, TyCtxt};\n@@ -34,6 +34,7 @@ pub use rustc_query_system::query::{deadlock, QueryContext};\n mod keys;\n use keys::Key;\n \n+use rustc_query_system::dep_graph::SerializedDepNodeIndex;\n pub use rustc_query_system::query::QueryConfig;\n pub(crate) use rustc_query_system::query::{QueryDescription, QueryVTable};\n "}, {"sha": "48539d580c7caee549b33601a5d73908b56c6d54", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b164dbc2715aa15be5c9f363a00d71e0847b2e77/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b164dbc2715aa15be5c9f363a00d71e0847b2e77/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=b164dbc2715aa15be5c9f363a00d71e0847b2e77", "patch": "@@ -3,6 +3,7 @@\n //! manage the caches, and so forth.\n \n use crate::keys::Key;\n+use crate::on_disk_cache::CacheDecoder;\n use crate::{on_disk_cache, Queries};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lock;\n@@ -19,6 +20,7 @@ use rustc_query_system::query::{\n     QuerySideEffects, QueryStackFrame,\n };\n use rustc_query_system::Value;\n+use rustc_serialize::Decodable;\n use std::any::Any;\n use std::num::NonZeroU64;\n use thin_vec::ThinVec;\n@@ -253,6 +255,18 @@ macro_rules! get_provider {\n     };\n }\n \n+macro_rules! should_ever_cache_on_disk {\n+    ([]) => {{\n+        None\n+    }};\n+    ([(cache) $($rest:tt)*]) => {{\n+        Some($crate::plumbing::try_load_from_disk::<Self::Value>)\n+    }};\n+    ([$other:tt $($modifiers:tt)*]) => {\n+        should_ever_cache_on_disk!([$($modifiers)*])\n+    };\n+}\n+\n pub(crate) fn create_query_frame<\n     'tcx,\n     K: Copy + Key + for<'a> HashStable<StableHashingContext<'a>>,\n@@ -313,6 +327,16 @@ where\n     }\n }\n \n+pub(crate) fn try_load_from_disk<'tcx, V>(\n+    tcx: QueryCtxt<'tcx>,\n+    id: SerializedDepNodeIndex,\n+) -> Option<V>\n+where\n+    V: for<'a> Decodable<CacheDecoder<'a, 'tcx>>,\n+{\n+    tcx.on_disk_cache().as_ref()?.try_load_query_result(*tcx, id)\n+}\n+\n fn force_from_dep_node<'tcx, Q>(tcx: TyCtxt<'tcx>, dep_node: DepNode) -> bool\n where\n     Q: QueryDescription<QueryCtxt<'tcx>>,"}]}