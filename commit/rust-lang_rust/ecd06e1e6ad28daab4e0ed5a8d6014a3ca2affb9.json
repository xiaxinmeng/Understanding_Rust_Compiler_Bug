{"sha": "ecd06e1e6ad28daab4e0ed5a8d6014a3ca2affb9", "node_id": "C_kwDOAAsO6NoAKGVjZDA2ZTFlNmFkMjhkYWFiNGUwZWQ1YThkNjAxNGEzY2EyYWZmYjk", "commit": {"author": {"name": "threadexception", "email": "hannes.gaumann@outlook.de", "date": "2022-01-18T16:09:17Z"}, "committer": {"name": "threadexception", "email": "hannes.gaumann@outlook.de", "date": "2022-01-26T08:47:52Z"}, "message": "Don't suggest inaccessible fields", "tree": {"sha": "60cf758dc2db6c0121d382e4b256c0f40fc84e81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60cf758dc2db6c0121d382e4b256c0f40fc84e81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecd06e1e6ad28daab4e0ed5a8d6014a3ca2affb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd06e1e6ad28daab4e0ed5a8d6014a3ca2affb9", "html_url": "https://github.com/rust-lang/rust/commit/ecd06e1e6ad28daab4e0ed5a8d6014a3ca2affb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecd06e1e6ad28daab4e0ed5a8d6014a3ca2affb9/comments", "author": {"login": "terrarier2111", "id": 58695553, "node_id": "MDQ6VXNlcjU4Njk1NTUz", "avatar_url": "https://avatars.githubusercontent.com/u/58695553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terrarier2111", "html_url": "https://github.com/terrarier2111", "followers_url": "https://api.github.com/users/terrarier2111/followers", "following_url": "https://api.github.com/users/terrarier2111/following{/other_user}", "gists_url": "https://api.github.com/users/terrarier2111/gists{/gist_id}", "starred_url": "https://api.github.com/users/terrarier2111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terrarier2111/subscriptions", "organizations_url": "https://api.github.com/users/terrarier2111/orgs", "repos_url": "https://api.github.com/users/terrarier2111/repos", "events_url": "https://api.github.com/users/terrarier2111/events{/privacy}", "received_events_url": "https://api.github.com/users/terrarier2111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "terrarier2111", "id": 58695553, "node_id": "MDQ6VXNlcjU4Njk1NTUz", "avatar_url": "https://avatars.githubusercontent.com/u/58695553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terrarier2111", "html_url": "https://github.com/terrarier2111", "followers_url": "https://api.github.com/users/terrarier2111/followers", "following_url": "https://api.github.com/users/terrarier2111/following{/other_user}", "gists_url": "https://api.github.com/users/terrarier2111/gists{/gist_id}", "starred_url": "https://api.github.com/users/terrarier2111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terrarier2111/subscriptions", "organizations_url": "https://api.github.com/users/terrarier2111/orgs", "repos_url": "https://api.github.com/users/terrarier2111/repos", "events_url": "https://api.github.com/users/terrarier2111/events{/privacy}", "received_events_url": "https://api.github.com/users/terrarier2111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bc7be860f99f4a40d45b0f74e2d01b02e072357", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc7be860f99f4a40d45b0f74e2d01b02e072357", "html_url": "https://github.com/rust-lang/rust/commit/7bc7be860f99f4a40d45b0f74e2d01b02e072357"}], "stats": {"total": 58, "additions": 49, "deletions": 9}, "files": [{"sha": "af2ac9bb2ee53354560a39f175a7b81f2d78b3d3", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ecd06e1e6ad28daab4e0ed5a8d6014a3ca2affb9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd06e1e6ad28daab4e0ed5a8d6014a3ca2affb9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=ecd06e1e6ad28daab4e0ed5a8d6014a3ca2affb9", "patch": "@@ -31,7 +31,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n-use rustc_hir::{ExprKind, QPath};\n+use rustc_hir::{ExprKind, HirId, QPath};\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::InferOk;\n@@ -1948,7 +1948,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             \"ban_nonexisting_field: field={:?}, base={:?}, expr={:?}, expr_ty={:?}\",\n             field, base, expr, expr_t\n         );\n-        let mut err = self.no_such_field_err(field, expr_t);\n+        let mut err = self.no_such_field_err(field, expr_t, base.hir_id);\n \n         match *expr_t.peel_refs().kind() {\n             ty::Array(_, len) => {\n@@ -2186,6 +2186,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         field: Ident,\n         expr_t: &'tcx ty::TyS<'tcx>,\n+        id: HirId,\n     ) -> DiagnosticBuilder<'_> {\n         let span = field.span;\n         debug!(\"no_such_field_err(span: {:?}, field: {:?}, expr_t: {:?})\", span, field, expr_t);\n@@ -2203,9 +2204,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // try to add a suggestion in case the field is a nested field of a field of the Adt\n         if let Some((fields, substs)) = self.get_field_candidates(span, &expr_t) {\n             for candidate_field in fields.iter() {\n-                if let Some(field_path) =\n-                    self.check_for_nested_field(span, field, candidate_field, substs, vec![])\n-                {\n+                if let Some(field_path) = self.check_for_nested_field(\n+                    span,\n+                    field,\n+                    candidate_field,\n+                    substs,\n+                    vec![],\n+                    self.tcx.parent_module(id).to_def_id(),\n+                ) {\n                     let field_path_str = field_path\n                         .iter()\n                         .map(|id| id.name.to_ident_string())\n@@ -2257,6 +2263,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         candidate_field: &ty::FieldDef,\n         subst: SubstsRef<'tcx>,\n         mut field_path: Vec<Ident>,\n+        id: DefId,\n     ) -> Option<Vec<Ident>> {\n         debug!(\n             \"check_for_nested_field(span: {:?}, candidate_field: {:?}, field_path: {:?}\",\n@@ -2276,17 +2283,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let field_ty = candidate_field.ty(self.tcx, subst);\n             if let Some((nested_fields, subst)) = self.get_field_candidates(span, &field_ty) {\n                 for field in nested_fields.iter() {\n-                    let ident = field.ident(self.tcx).normalize_to_macros_2_0();\n-                    if ident == target_field {\n-                        return Some(field_path);\n-                    } else {\n+                    let accessible = field.vis.is_accessible_from(id, self.tcx);\n+                    if accessible {\n+                        let ident = field.ident(self.tcx).normalize_to_macros_2_0();\n+                        if ident == target_field {\n+                            return Some(field_path);\n+                        }\n                         let field_path = field_path.clone();\n                         if let Some(path) = self.check_for_nested_field(\n                             span,\n                             target_field,\n                             field,\n                             subst,\n                             field_path,\n+                            id,\n                         ) {\n                             return Some(path);\n                         }"}, {"sha": "1cc4d2a4d066e72a77804380b7d24afb29a4d0a2", "filename": "src/test/ui/suggestions/private-field.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ecd06e1e6ad28daab4e0ed5a8d6014a3ca2affb9/src%2Ftest%2Fui%2Fsuggestions%2Fprivate-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd06e1e6ad28daab4e0ed5a8d6014a3ca2affb9/src%2Ftest%2Fui%2Fsuggestions%2Fprivate-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fprivate-field.rs?ref=ecd06e1e6ad28daab4e0ed5a8d6014a3ca2affb9", "patch": "@@ -0,0 +1,19 @@\n+// compile-flags: --crate-type lib\n+pub struct S {\n+    pub val: string::MyString,\n+}\n+\n+pub fn test(s: S) {\n+    dbg!(s.cap) //~ ERROR: no field `cap` on type `S` [E0609]\n+}\n+\n+pub(crate) mod string {\n+\n+    pub struct MyString {\n+        buf: MyVec,\n+    }\n+\n+    struct MyVec {\n+        cap: usize,\n+    }\n+}"}, {"sha": "c38c795e07ae84bcdcd37ab457fa1e035aa97fe9", "filename": "src/test/ui/suggestions/private-field.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ecd06e1e6ad28daab4e0ed5a8d6014a3ca2affb9/src%2Ftest%2Fui%2Fsuggestions%2Fprivate-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecd06e1e6ad28daab4e0ed5a8d6014a3ca2affb9/src%2Ftest%2Fui%2Fsuggestions%2Fprivate-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fprivate-field.stderr?ref=ecd06e1e6ad28daab4e0ed5a8d6014a3ca2affb9", "patch": "@@ -0,0 +1,11 @@\n+error[E0609]: no field `cap` on type `S`\n+  --> $DIR/private-field.rs:7:12\n+   |\n+LL |     dbg!(s.cap)\n+   |            ^^^ unknown field\n+   |\n+   = note: available fields are: `val`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0609`."}]}