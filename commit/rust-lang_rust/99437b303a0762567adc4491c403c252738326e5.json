{"sha": "99437b303a0762567adc4491c403c252738326e5", "node_id": "C_kwDOAAsO6NoAKDk5NDM3YjMwM2EwNzYyNTY3YWRjNDQ5MWM0MDNjMjUyNzM4MzI2ZTU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-16T22:07:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-16T22:07:26Z"}, "message": "Rollup merge of #96112 - niluxv:strict-provenance-lint-improvements, r=nagisa\n\nStrict provenance lint diagnostics improvements\n\nUse `multipart_suggestion` instead of `span_suggestion` and getting a snippet for the expression. Also don't suggest unnecessary parenthesis in `lossy_provenance_casts`.\ncc ``@estebank``\n``@rustbot`` label A-diagnostics", "tree": {"sha": "8b4bac5a8f44adef5391013fbddce6f8b2972814", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b4bac5a8f44adef5391013fbddce6f8b2972814"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99437b303a0762567adc4491c403c252738326e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiWz4eCRBK7hj4Ov3rIwAAsZUIAIHJ5DeVBqwW00yMPApM7zQy\nejUoNh4beSvw+xoqiMabfNSXW5HqEWgdIXBA7uvoRysiG0su+mbK8inVRdjT1a9I\nqw4pm0qvPfbRS334IWDv9ltRVahqKDBnSmmeYycJRb9xvPg2lEv/CgxVGgOqZhib\n1I1Xga007zpC0UWFu6naKshuT2bMJu7dgzw9MyQtjTxd4aqsJyqWRKpatLXZ+Wyj\nyeK3qqltUmLHwujQu3wqewSkY9poUcD4+OucS7pHD0WmWgAz10aDVlX1NQwlARgv\n498NZPVobdWybol0x8fdtJKO8t4t+e19FC3GN8OqKxzPbukAZHWLfsSVGnSUido=\n=FwaP\n-----END PGP SIGNATURE-----\n", "payload": "tree 8b4bac5a8f44adef5391013fbddce6f8b2972814\nparent ff91155d0abbe6bbbffdca487cec574c8aa2c2a5\nparent 1d63d6db558b1ff6cd02cb471b51957657c2d71f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650146846 +0200\ncommitter GitHub <noreply@github.com> 1650146846 +0200\n\nRollup merge of #96112 - niluxv:strict-provenance-lint-improvements, r=nagisa\n\nStrict provenance lint diagnostics improvements\n\nUse `multipart_suggestion` instead of `span_suggestion` and getting a snippet for the expression. Also don't suggest unnecessary parenthesis in `lossy_provenance_casts`.\ncc ``@estebank``\n``@rustbot`` label A-diagnostics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99437b303a0762567adc4491c403c252738326e5", "html_url": "https://github.com/rust-lang/rust/commit/99437b303a0762567adc4491c403c252738326e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99437b303a0762567adc4491c403c252738326e5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff91155d0abbe6bbbffdca487cec574c8aa2c2a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff91155d0abbe6bbbffdca487cec574c8aa2c2a5", "html_url": "https://github.com/rust-lang/rust/commit/ff91155d0abbe6bbbffdca487cec574c8aa2c2a5"}, {"sha": "1d63d6db558b1ff6cd02cb471b51957657c2d71f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d63d6db558b1ff6cd02cb471b51957657c2d71f", "html_url": "https://github.com/rust-lang/rust/commit/1d63d6db558b1ff6cd02cb471b51957657c2d71f"}], "stats": {"total": 92, "additions": 68, "deletions": 24}, "files": [{"sha": "a153997599aba5dafb5822172b1bc1ffbd1c8ccd", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/99437b303a0762567adc4491c403c252738326e5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99437b303a0762567adc4491c403c252738326e5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=99437b303a0762567adc4491c403c252738326e5", "patch": "@@ -993,20 +993,33 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 ));\n \n                 let msg = \"use `.addr()` to obtain the address of a pointer\";\n-                if let Ok(snippet) = fcx.tcx.sess.source_map().span_to_snippet(self.expr_span) {\n-                    let scalar_cast = match t_c {\n-                        ty::cast::IntTy::U(ty::UintTy::Usize) => String::new(),\n-                        _ => format!(\" as {}\", self.cast_ty),\n-                    };\n+\n+                let expr_prec = self.expr.precedence().order();\n+                let needs_parens = expr_prec < rustc_ast::util::parser::PREC_POSTFIX;\n+\n+                let scalar_cast = match t_c {\n+                    ty::cast::IntTy::U(ty::UintTy::Usize) => String::new(),\n+                    _ => format!(\" as {}\", self.cast_ty),\n+                };\n+\n+                let cast_span = self.expr_span.shrink_to_hi().to(self.cast_span);\n+\n+                if needs_parens {\n+                    let suggestions = vec![\n+                        (self.expr_span.shrink_to_lo(), String::from(\"(\")),\n+                        (cast_span, format!(\").addr(){scalar_cast}\")),\n+                    ];\n+\n+                    err.multipart_suggestion(msg, suggestions, Applicability::MaybeIncorrect);\n+                } else {\n                     err.span_suggestion(\n-                        self.span,\n+                        cast_span,\n                         msg,\n-                        format!(\"({snippet}).addr(){scalar_cast}\"),\n-                        Applicability::MaybeIncorrect\n+                        format!(\".addr(){scalar_cast}\"),\n+                        Applicability::MaybeIncorrect,\n                     );\n-                } else {\n-                    err.help(msg);\n                 }\n+\n                 err.help(\n                     \"if you can't comply with strict provenance and need to expose the pointer \\\n                     provenance you can use `.expose_addr()` instead\"\n@@ -1028,16 +1041,12 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     self.expr_ty, self.cast_ty\n                 ));\n                 let msg = \"use `.with_addr()` to adjust a valid pointer in the same allocation, to this address\";\n-                if let Ok(snippet) = fcx.tcx.sess.source_map().span_to_snippet(self.expr_span) {\n-                    err.span_suggestion(\n-                        self.span,\n-                        msg,\n-                        format!(\"(...).with_addr({snippet})\"),\n-                        Applicability::HasPlaceholders,\n-                    );\n-                } else {\n-                    err.help(msg);\n-                }\n+                let suggestions = vec![\n+                    (self.expr_span.shrink_to_lo(), String::from(\"(...).with_addr(\")),\n+                    (self.expr_span.shrink_to_hi().to(self.cast_span), String::from(\")\")),\n+                ];\n+\n+                err.multipart_suggestion(msg, suggestions, Applicability::MaybeIncorrect);\n                 err.help(\n                     \"if you can't comply with strict provenance and don't have a pointer with \\\n                     the correct provenance you can use `std::ptr::from_exposed_addr()` instead\""}, {"sha": "c85934aa3ba153f0f1f22dbc91c2bc2afeb61029", "filename": "src/test/ui/lint/lint-strict-provenance-fuzzy-casts.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99437b303a0762567adc4491c403c252738326e5/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-fuzzy-casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99437b303a0762567adc4491c403c252738326e5/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-fuzzy-casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-fuzzy-casts.stderr?ref=99437b303a0762567adc4491c403c252738326e5", "patch": "@@ -13,7 +13,7 @@ LL | #![deny(fuzzy_provenance_casts)]\n help: use `.with_addr()` to adjust a valid pointer in the same allocation, to this address\n    |\n LL |     let dangling = (...).with_addr(16_usize);\n-   |                    ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                    ++++++++++++++++        ~\n \n error: aborting due to previous error\n "}, {"sha": "9799a05375682729832a496ced23d7957a0800a6", "filename": "src/test/ui/lint/lint-strict-provenance-lossy-casts.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99437b303a0762567adc4491c403c252738326e5/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99437b303a0762567adc4491c403c252738326e5/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.rs?ref=99437b303a0762567adc4491c403c252738326e5", "patch": "@@ -8,4 +8,11 @@ fn main() {\n \n     let addr_32bit = &x as *const u8 as u32;\n     //~^ ERROR under strict provenance it is considered bad style to cast pointer `*const u8` to integer `u32`\n+\n+    // don't add unnecessary parens in the suggestion\n+    let ptr = &x as *const u8;\n+    let ptr_addr = ptr as usize;\n+    //~^ ERROR under strict provenance it is considered bad style to cast pointer `*const u8` to integer `usize`\n+    let ptr_addr_32bit = ptr as u32;\n+    //~^ ERROR under strict provenance it is considered bad style to cast pointer `*const u8` to integer `u32`\n }"}, {"sha": "05178b34b11462738b2df489f468f90d683f0b32", "filename": "src/test/ui/lint/lint-strict-provenance-lossy-casts.stderr", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/99437b303a0762567adc4491c403c252738326e5/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99437b303a0762567adc4491c403c252738326e5/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.stderr?ref=99437b303a0762567adc4491c403c252738326e5", "patch": "@@ -2,22 +2,50 @@ error: under strict provenance it is considered bad style to cast pointer `*cons\n   --> $DIR/lint-strict-provenance-lossy-casts.rs:6:23\n    |\n LL |     let addr: usize = &x as *const u8 as usize;\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.addr()` to obtain the address of a pointer: `(&x as *const u8).addr()`\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/lint-strict-provenance-lossy-casts.rs:2:9\n    |\n LL | #![deny(lossy_provenance_casts)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    = help: if you can't comply with strict provenance and need to expose the pointer provenance you can use `.expose_addr()` instead\n+help: use `.addr()` to obtain the address of a pointer\n+   |\n+LL |     let addr: usize = (&x as *const u8).addr();\n+   |                       +               ~~~~~~~~\n \n error: under strict provenance it is considered bad style to cast pointer `*const u8` to integer `u32`\n   --> $DIR/lint-strict-provenance-lossy-casts.rs:9:22\n    |\n LL |     let addr_32bit = &x as *const u8 as u32;\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^ help: use `.addr()` to obtain the address of a pointer: `(&x as *const u8).addr() as u32`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you can't comply with strict provenance and need to expose the pointer provenance you can use `.expose_addr()` instead\n+help: use `.addr()` to obtain the address of a pointer\n+   |\n+LL |     let addr_32bit = (&x as *const u8).addr() as u32;\n+   |                      +               ~~~~~~~~~~~~~~~\n+\n+error: under strict provenance it is considered bad style to cast pointer `*const u8` to integer `usize`\n+  --> $DIR/lint-strict-provenance-lossy-casts.rs:14:20\n+   |\n+LL |     let ptr_addr = ptr as usize;\n+   |                    ^^^---------\n+   |                       |\n+   |                       help: use `.addr()` to obtain the address of a pointer: `.addr()`\n+   |\n+   = help: if you can't comply with strict provenance and need to expose the pointer provenance you can use `.expose_addr()` instead\n+\n+error: under strict provenance it is considered bad style to cast pointer `*const u8` to integer `u32`\n+  --> $DIR/lint-strict-provenance-lossy-casts.rs:16:26\n+   |\n+LL |     let ptr_addr_32bit = ptr as u32;\n+   |                          ^^^-------\n+   |                             |\n+   |                             help: use `.addr()` to obtain the address of a pointer: `.addr() as u32`\n    |\n    = help: if you can't comply with strict provenance and need to expose the pointer provenance you can use `.expose_addr()` instead\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n "}]}