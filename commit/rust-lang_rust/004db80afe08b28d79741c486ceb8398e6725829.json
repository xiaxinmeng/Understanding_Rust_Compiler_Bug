{"sha": "004db80afe08b28d79741c486ceb8398e6725829", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNGRiODBhZmUwOGIyOGQ3OTc0MWM0ODZjZWI4Mzk4ZTY3MjU4Mjk=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-04T23:31:46Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-20T08:05:00Z"}, "message": "libcore: DST-ify AsSlice\n\nThis commit changes `AsSlice` to work on unsized types, and changes the\n`impl` for `&[T]` to `[T]`. Aside from making the trait more general,\nthis also helps some ongoing work with method resolution changes.\n\nThis is a breaking change: code that uses generics bounded by `AsSlice`\nwill have to change. In particular, such code previously often took\narguments of type `V` where `V: AsSlice<T>` by value. These should now\nbe taken by reference:\n\n```rust\nfn foo<Sized? V: AsSlice<T>>(v: &V) { .. }\n```\n\nA few std lib functions have been changed accordingly.\n\n[breaking-change]", "tree": {"sha": "d365766bb4558d1339ad6bbbef51ea6e969a9304", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d365766bb4558d1339ad6bbbef51ea6e969a9304"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/004db80afe08b28d79741c486ceb8398e6725829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/004db80afe08b28d79741c486ceb8398e6725829", "html_url": "https://github.com/rust-lang/rust/commit/004db80afe08b28d79741c486ceb8398e6725829", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/004db80afe08b28d79741c486ceb8398e6725829/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "793624261a221aa4592381fa8067e1f597b90c22", "url": "https://api.github.com/repos/rust-lang/rust/commits/793624261a221aa4592381fa8067e1f597b90c22", "html_url": "https://github.com/rust-lang/rust/commit/793624261a221aa4592381fa8067e1f597b90c22"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "e077f7f6021bde6f0a2aef46c8b339f62198265e", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/004db80afe08b28d79741c486ceb8398e6725829/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004db80afe08b28d79741c486ceb8398e6725829/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=004db80afe08b28d79741c486ceb8398e6725829", "patch": "@@ -121,7 +121,7 @@ pub trait VectorVector<T> for Sized? {\n     fn connect_vec(&self, sep: &T) -> Vec<T>;\n }\n \n-impl<T: Clone, V: AsSlice<T>> VectorVector<T> for [V] {\n+impl<'a, T: Clone, V: AsSlice<T>> VectorVector<T> for [V] {\n     fn concat_vec(&self) -> Vec<T> {\n         let size = self.iter().fold(0u, |acc, v| acc + v.as_slice().len());\n         let mut result = Vec::with_capacity(size);"}, {"sha": "d6a21ef19a28b6c27eef8ee52049ea0cdd65df50", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/004db80afe08b28d79741c486ceb8398e6725829/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004db80afe08b28d79741c486ceb8398e6725829/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=004db80afe08b28d79741c486ceb8398e6725829", "patch": "@@ -20,6 +20,7 @@ use core::cmp::max;\n use core::default::Default;\n use core::fmt;\n use core::kinds::marker::{ContravariantLifetime, InvariantType};\n+use core::kinds::Sized;\n use core::mem;\n use core::num::{Int, UnsignedInt};\n use core::ops;\n@@ -516,7 +517,7 @@ impl<T: PartialOrd> PartialOrd for Vec<T> {\n impl<T: Eq> Eq for Vec<T> {}\n \n #[experimental]\n-impl<T: PartialEq, V: AsSlice<T>> Equiv<V> for Vec<T> {\n+impl<T: PartialEq, Sized? V: AsSlice<T>> Equiv<V> for Vec<T> {\n     #[inline]\n     fn equiv(&self, other: &V) -> bool { self.as_slice() == other.as_slice() }\n }\n@@ -1181,7 +1182,7 @@ impl<T> AsSlice<T> for Vec<T> {\n     }\n }\n \n-impl<T: Clone, V: AsSlice<T>> Add<V, Vec<T>> for Vec<T> {\n+impl<T: Clone, Sized? V: AsSlice<T>> Add<V, Vec<T>> for Vec<T> {\n     #[inline]\n     fn add(&self, rhs: &V) -> Vec<T> {\n         let mut res = Vec::with_capacity(self.len() + rhs.as_slice().len());"}, {"sha": "7a3e06e7eb40de6b4e2062ca03790af9fe5d888b", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/004db80afe08b28d79741c486ceb8398e6725829/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004db80afe08b28d79741c486ceb8398e6725829/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=004db80afe08b28d79741c486ceb8398e6725829", "patch": "@@ -1008,15 +1008,25 @@ impl<T: Clone> CloneSlicePrelude<T> for [T] {\n \n /// Data that is viewable as a slice.\n #[unstable = \"may merge with other traits\"]\n-pub trait AsSlice<T> {\n+pub trait AsSlice<T> for Sized? {\n     /// Work with `self` as a slice.\n     fn as_slice<'a>(&'a self) -> &'a [T];\n }\n \n #[unstable = \"trait is unstable\"]\n-impl<'a,T> AsSlice<T> for &'a [T] {\n+impl<T> AsSlice<T> for [T] {\n     #[inline(always)]\n-    fn as_slice<'a>(&'a self) -> &'a [T] { *self }\n+    fn as_slice<'a>(&'a self) -> &'a [T] { self }\n+}\n+\n+impl<'a, T, Sized? U: AsSlice<T>> AsSlice<T> for &'a U {\n+    #[inline(always)]\n+    fn as_slice<'a>(&'a self) -> &'a [T] { AsSlice::as_slice(*self) }\n+}\n+\n+impl<'a, T, Sized? U: AsSlice<T>> AsSlice<T> for &'a mut U {\n+    #[inline(always)]\n+    fn as_slice<'a>(&'a self) -> &'a [T] { AsSlice::as_slice(*self) }\n }\n \n #[unstable = \"waiting for DST\"]\n@@ -1681,13 +1691,13 @@ impl<T: PartialEq> PartialEq for [T] {\n impl<T: Eq> Eq for [T] {}\n \n #[unstable = \"waiting for DST\"]\n-impl<T: PartialEq, V: AsSlice<T>> Equiv<V> for [T] {\n+impl<T: PartialEq, Sized? V: AsSlice<T>> Equiv<V> for [T] {\n     #[inline]\n     fn equiv(&self, other: &V) -> bool { self.as_slice() == other.as_slice() }\n }\n \n #[unstable = \"waiting for DST\"]\n-impl<'a,T:PartialEq, V: AsSlice<T>> Equiv<V> for &'a mut [T] {\n+impl<'a,T:PartialEq, Sized? V: AsSlice<T>> Equiv<V> for &'a mut [T] {\n     #[inline]\n     fn equiv(&self, other: &V) -> bool { self.as_slice() == other.as_slice() }\n }"}, {"sha": "70b3971c6b8058e87f5b8dd8e7ba71358cb3f9ca", "filename": "src/libgraphviz/maybe_owned_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/004db80afe08b28d79741c486ceb8398e6725829/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004db80afe08b28d79741c486ceb8398e6725829/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Fmaybe_owned_vec.rs?ref=004db80afe08b28d79741c486ceb8398e6725829", "patch": "@@ -89,7 +89,7 @@ impl<'a, T: Ord> Ord for MaybeOwnedVector<'a, T> {\n     }\n }\n \n-impl<'a, T: PartialEq, V: AsSlice<T>> Equiv<V> for MaybeOwnedVector<'a, T> {\n+impl<'a, T: PartialEq, Sized? V: AsSlice<T>> Equiv<V> for MaybeOwnedVector<'a, T> {\n     fn equiv(&self, other: &V) -> bool {\n         self.as_slice() == other.as_slice()\n     }"}, {"sha": "2b444fdc32bab28174cc8edd9c54fe74737f1984", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/004db80afe08b28d79741c486ceb8398e6725829/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/004db80afe08b28d79741c486ceb8398e6725829/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=004db80afe08b28d79741c486ceb8398e6725829", "patch": "@@ -16,6 +16,7 @@ use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use hash;\n use io::Writer;\n use iter::{DoubleEndedIterator, AdditiveIterator, Extend, Iterator, Map};\n+use kinds::Sized;\n use option::{Option, None, Some};\n use str::{FromStr, Str};\n use str;\n@@ -342,7 +343,7 @@ impl Path {\n \n     /// Returns a normalized byte vector representation of a path, by removing all empty\n     /// components, and unnecessary . and .. components.\n-    fn normalize<V: AsSlice<u8>>(v: V) -> Vec<u8> {\n+    fn normalize<Sized? V: AsSlice<u8>>(v: &V) -> Vec<u8> {\n         // borrowck is being very picky\n         let val = {\n             let is_abs = !v.as_slice().is_empty() && v.as_slice()[0] == SEP_BYTE;"}]}