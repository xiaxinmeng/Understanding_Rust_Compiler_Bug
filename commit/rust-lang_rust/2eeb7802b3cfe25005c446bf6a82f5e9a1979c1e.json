{"sha": "2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e", "node_id": "C_kwDOAAsO6NoAKDJlZWI3ODAyYjNjZmUyNTAwNWM0NDZiZjZhODJmNWU5YTE5NzljMWU", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-10-22T15:21:11Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-10-26T13:04:09Z"}, "message": "Remove #[suggestion_*] attributes", "tree": {"sha": "b6bcfb7b18a9d886a4f4d3d5bbcba52d7d98b316", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6bcfb7b18a9d886a4f4d3d5bbcba52d7d98b316"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e", "html_url": "https://github.com/rust-lang/rust/commit/2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd621be7821834e5322f0acfb9a7826d4397401d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd621be7821834e5322f0acfb9a7826d4397401d", "html_url": "https://github.com/rust-lang/rust/commit/cd621be7821834e5322f0acfb9a7826d4397401d"}], "stats": {"total": 208, "additions": 121, "deletions": 87}, "files": [{"sha": "ba06f61299f37d22a18d86fd291b21757bc60e3a", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e", "patch": "@@ -12,7 +12,7 @@ use syn::{spanned::Spanned, Attribute, Field, Meta, Type, TypeTuple};\n use syn::{MetaList, MetaNameValue, NestedMeta, Path};\n use synstructure::{BindingInfo, VariantInfo};\n \n-use super::error::invalid_nested_attr;\n+use super::error::{invalid_attr, invalid_nested_attr};\n \n thread_local! {\n     pub static CODE_IDENT_COUNT: RefCell<u32> = RefCell::new(0);\n@@ -496,6 +496,18 @@ impl FromStr for SuggestionKind {\n     }\n }\n \n+impl fmt::Display for SuggestionKind {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            SuggestionKind::Normal => write!(f, \"normal\"),\n+            SuggestionKind::Short => write!(f, \"short\"),\n+            SuggestionKind::Hidden => write!(f, \"hidden\"),\n+            SuggestionKind::Verbose => write!(f, \"verbose\"),\n+            SuggestionKind::ToolOnly => write!(f, \"tool-only\"),\n+        }\n+    }\n+}\n+\n impl SuggestionKind {\n     pub fn to_suggestion_style(&self) -> TokenStream {\n         match self {\n@@ -577,21 +589,24 @@ impl SubdiagnosticKind {\n \n         let meta = attr.parse_meta()?;\n \n-        let mut opt_suggestion_kind = None;\n         let mut kind = match name {\n             \"label\" => SubdiagnosticKind::Label,\n             \"note\" => SubdiagnosticKind::Note,\n             \"help\" => SubdiagnosticKind::Help,\n             \"warning\" => SubdiagnosticKind::Warn,\n             _ => {\n-                // FIXME(#100717): remove #[suggestion_{short,verbose,hidden}] attributes, use\n-                // #[suggestion(style = \"...\")] instead\n+                // Recover old `#[(multipart_)suggestion_*]` syntaxes\n+                // FIXME(#100717): remove\n                 if let Some(suggestion_kind) =\n                     name.strip_prefix(\"suggestion\").and_then(SuggestionKind::from_suffix)\n                 {\n                     if suggestion_kind != SuggestionKind::Normal {\n-                        // Plain `#[suggestion]` can have a `style = \"...\"` attribute later, so don't set it here\n-                        opt_suggestion_kind.set_once(suggestion_kind, attr.path.span().unwrap());\n+                        invalid_attr(attr, &meta)\n+                            .help(format!(\n+                                r#\"Use `#[suggestion(..., style = \"{}\")]` instead\"#,\n+                                suggestion_kind\n+                            ))\n+                            .emit();\n                     }\n \n                     SubdiagnosticKind::Suggestion {\n@@ -604,8 +619,12 @@ impl SubdiagnosticKind {\n                     name.strip_prefix(\"multipart_suggestion\").and_then(SuggestionKind::from_suffix)\n                 {\n                     if suggestion_kind != SuggestionKind::Normal {\n-                        // Plain `#[multipart_suggestion]` can have a `style = \"...\"` attribute later, so don't set it here\n-                        opt_suggestion_kind.set_once(suggestion_kind, attr.path.span().unwrap());\n+                        invalid_attr(attr, &meta)\n+                            .help(format!(\n+                                r#\"Use `#[multipart_suggestion(..., style = \"{}\")]` instead\"#,\n+                                suggestion_kind\n+                            ))\n+                            .emit();\n                     }\n \n                     SubdiagnosticKind::MultipartSuggestion {\n@@ -649,6 +668,7 @@ impl SubdiagnosticKind {\n         };\n \n         let mut code = None;\n+        let mut suggestion_kind = None;\n \n         let mut nested_iter = nested.into_iter().peekable();\n \n@@ -727,7 +747,7 @@ impl SubdiagnosticKind {\n                         SuggestionKind::Normal\n                     });\n \n-                    opt_suggestion_kind.set_once(value, span);\n+                    suggestion_kind.set_once(value, span);\n                 }\n \n                 // Invalid nested attribute\n@@ -753,11 +773,11 @@ impl SubdiagnosticKind {\n             SubdiagnosticKind::Suggestion {\n                 ref code_field,\n                 ref mut code_init,\n-                ref mut suggestion_kind,\n+                suggestion_kind: ref mut kind_field,\n                 ..\n             } => {\n-                if let Some(kind) = opt_suggestion_kind.value() {\n-                    *suggestion_kind = kind;\n+                if let Some(kind) = suggestion_kind.value() {\n+                    *kind_field = kind;\n                 }\n \n                 *code_init = if let Some(init) = code.value() {\n@@ -767,9 +787,11 @@ impl SubdiagnosticKind {\n                     quote! { let #code_field = std::iter::empty(); }\n                 };\n             }\n-            SubdiagnosticKind::MultipartSuggestion { ref mut suggestion_kind, .. } => {\n-                if let Some(kind) = opt_suggestion_kind.value() {\n-                    *suggestion_kind = kind;\n+            SubdiagnosticKind::MultipartSuggestion {\n+                suggestion_kind: ref mut kind_field, ..\n+            } => {\n+                if let Some(kind) = suggestion_kind.value() {\n+                    *kind_field = kind;\n                 }\n             }\n             SubdiagnosticKind::Label"}, {"sha": "411eb3fba483aa507b01f0298aec79c1972d43b2", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e", "patch": "@@ -211,9 +211,10 @@ struct LabelOnNonSpan {\n #[diag(compiletest_example, code = \"E0123\")]\n struct Suggest {\n     #[suggestion(suggestion, code = \"This is the suggested code\")]\n-    #[suggestion_short(suggestion, code = \"This is the suggested code\")]\n-    #[suggestion_hidden(suggestion, code = \"This is the suggested code\")]\n-    #[suggestion_verbose(suggestion, code = \"This is the suggested code\")]\n+    #[suggestion(suggestion, code = \"This is the suggested code\", style = \"normal\")]\n+    #[suggestion(suggestion, code = \"This is the suggested code\", style = \"short\")]\n+    #[suggestion(suggestion, code = \"This is the suggested code\", style = \"hidden\")]\n+    #[suggestion(suggestion, code = \"This is the suggested code\", style = \"verbose\")]\n     suggestion: (Span, Applicability),\n }\n \n@@ -730,7 +731,7 @@ struct SubdiagnosticEagerCorrect {\n // after the `span_suggestion` call - which breaks eager translation.\n \n #[derive(Subdiagnostic)]\n-#[suggestion_short(use_instead, applicability = \"machine-applicable\", code = \"{correct}\")]\n+#[suggestion(use_instead, applicability = \"machine-applicable\", code = \"{correct}\")]\n pub(crate) struct SubdiagnosticWithSuggestion {\n     #[primary_span]\n     span: Span,"}, {"sha": "b4c211db47cd9e090bdc8e6f5fc3e8be399628d9", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e", "patch": "@@ -261,41 +261,41 @@ LL |     #[label(label)]\n    |     ^^^^^^^^^^^^^^^\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:223:5\n+  --> $DIR/diagnostic-derive.rs:224:5\n    |\n LL |     #[suggestion(suggestion)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:231:18\n+  --> $DIR/diagnostic-derive.rs:232:18\n    |\n LL |     #[suggestion(nonsense = \"bar\")]\n    |                  ^^^^^^^^^^^^^^^^\n    |\n    = help: only `style`, `code` and `applicability` are valid nested attributes\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:231:5\n+  --> $DIR/diagnostic-derive.rs:232:5\n    |\n LL |     #[suggestion(nonsense = \"bar\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion(msg = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:240:18\n+  --> $DIR/diagnostic-derive.rs:241:18\n    |\n LL |     #[suggestion(msg = \"bar\")]\n    |                  ^^^^^^^^^^^\n    |\n    = help: only `style`, `code` and `applicability` are valid nested attributes\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:240:5\n+  --> $DIR/diagnostic-derive.rs:241:5\n    |\n LL |     #[suggestion(msg = \"bar\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: wrong field type for suggestion\n-  --> $DIR/diagnostic-derive.rs:263:5\n+  --> $DIR/diagnostic-derive.rs:264:5\n    |\n LL | /     #[suggestion(suggestion, code = \"This is suggested code\")]\n LL | |\n@@ -305,89 +305,89 @@ LL | |     suggestion: Applicability,\n    = help: `#[suggestion(...)]` should be applied to fields of type `Span` or `(Span, Applicability)`\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:279:24\n+  --> $DIR/diagnostic-derive.rs:280:24\n    |\n LL |     suggestion: (Span, Span, Applicability),\n    |                        ^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:279:18\n+  --> $DIR/diagnostic-derive.rs:280:18\n    |\n LL |     suggestion: (Span, Span, Applicability),\n    |                  ^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:287:33\n+  --> $DIR/diagnostic-derive.rs:288:33\n    |\n LL |     suggestion: (Applicability, Applicability, Span),\n    |                                 ^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:287:18\n+  --> $DIR/diagnostic-derive.rs:288:18\n    |\n LL |     suggestion: (Applicability, Applicability, Span),\n    |                  ^^^^^^^^^^^^^\n \n error: `#[label = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:294:5\n+  --> $DIR/diagnostic-derive.rs:295:5\n    |\n LL |     #[label = \"bar\"]\n    |     ^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:445:44\n+  --> $DIR/diagnostic-derive.rs:446:44\n    |\n LL |     #[suggestion(suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:447:24\n+  --> $DIR/diagnostic-derive.rs:448:24\n    |\n LL |     suggestion: (Span, Applicability),\n    |                        ^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/diagnostic-derive.rs:453:44\n+  --> $DIR/diagnostic-derive.rs:454:44\n    |\n LL |     #[suggestion(suggestion, code = \"...\", applicability = \"batman\")]\n    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[label(foo)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:516:20\n+  --> $DIR/diagnostic-derive.rs:517:20\n    |\n LL |     #[label(label, foo)]\n    |                    ^^^\n    |\n    = help: a diagnostic slug must be the first argument to the attribute\n \n error: `#[label(foo = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:524:20\n+  --> $DIR/diagnostic-derive.rs:525:20\n    |\n LL |     #[label(label, foo = \"...\")]\n    |                    ^^^^^^^^^^^\n \n error: `#[label(foo(...))]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:532:20\n+  --> $DIR/diagnostic-derive.rs:533:20\n    |\n LL |     #[label(label, foo(\"...\"))]\n    |                    ^^^^^^^^^^\n \n error: `#[primary_span]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:544:5\n+  --> $DIR/diagnostic-derive.rs:545:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: the `primary_span` field attribute is not valid for lint diagnostics\n \n error: `#[error(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:564:1\n+  --> $DIR/diagnostic-derive.rs:565:1\n    |\n LL | #[error(compiletest_example, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:564:1\n+  --> $DIR/diagnostic-derive.rs:565:1\n    |\n LL | / #[error(compiletest_example, code = \"E0123\")]\n LL | |\n@@ -399,13 +399,13 @@ LL | | struct ErrorAttribute {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[warn_(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:571:1\n+  --> $DIR/diagnostic-derive.rs:572:1\n    |\n LL | #[warn_(compiletest_example, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:571:1\n+  --> $DIR/diagnostic-derive.rs:572:1\n    |\n LL | / #[warn_(compiletest_example, code = \"E0123\")]\n LL | |\n@@ -417,13 +417,13 @@ LL | | struct WarnAttribute {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[lint(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:578:1\n+  --> $DIR/diagnostic-derive.rs:579:1\n    |\n LL | #[lint(compiletest_example, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:578:1\n+  --> $DIR/diagnostic-derive.rs:579:1\n    |\n LL | / #[lint(compiletest_example, code = \"E0123\")]\n LL | |\n@@ -435,19 +435,19 @@ LL | | struct LintAttributeOnSessionDiag {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[lint(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:585:1\n+  --> $DIR/diagnostic-derive.rs:586:1\n    |\n LL | #[lint(compiletest_example, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[lint(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:585:1\n+  --> $DIR/diagnostic-derive.rs:586:1\n    |\n LL | #[lint(compiletest_example, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:585:1\n+  --> $DIR/diagnostic-derive.rs:586:1\n    |\n LL | / #[lint(compiletest_example, code = \"E0123\")]\n LL | |\n@@ -460,133 +460,133 @@ LL | | struct LintAttributeOnLintDiag {}\n    = help: specify the slug as the first argument to the attribute, such as `#[diag(compiletest_example)]`\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:595:44\n+  --> $DIR/diagnostic-derive.rs:596:44\n    |\n LL |     #[suggestion(suggestion, code = \"...\", code = \",,,\")]\n    |                                            ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:595:30\n+  --> $DIR/diagnostic-derive.rs:596:30\n    |\n LL |     #[suggestion(suggestion, code = \"...\", code = \",,,\")]\n    |                              ^^^^^^^^^^^^\n \n error: wrong types for suggestion\n-  --> $DIR/diagnostic-derive.rs:604:24\n+  --> $DIR/diagnostic-derive.rs:605:24\n    |\n LL |     suggestion: (Span, usize),\n    |                        ^^^^^\n    |\n    = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`\n \n error: wrong types for suggestion\n-  --> $DIR/diagnostic-derive.rs:612:17\n+  --> $DIR/diagnostic-derive.rs:613:17\n    |\n LL |     suggestion: (Span,),\n    |                 ^^^^^^^\n    |\n    = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:619:5\n+  --> $DIR/diagnostic-derive.rs:620:5\n    |\n LL |     #[suggestion(suggestion)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[multipart_suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:626:1\n+  --> $DIR/diagnostic-derive.rs:627:1\n    |\n LL | #[multipart_suggestion(suggestion)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n error: `#[multipart_suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:629:1\n+  --> $DIR/diagnostic-derive.rs:630:1\n    |\n LL | #[multipart_suggestion()]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n error: `#[multipart_suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:633:5\n+  --> $DIR/diagnostic-derive.rs:634:5\n    |\n LL |     #[multipart_suggestion(suggestion)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n error: `#[suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:641:1\n+  --> $DIR/diagnostic-derive.rs:642:1\n    |\n LL | #[suggestion(suggestion, code = \"...\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `#[label]` and `#[suggestion]` can only be applied to fields\n \n error: `#[label]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:650:1\n+  --> $DIR/diagnostic-derive.rs:651:1\n    |\n LL | #[label]\n    | ^^^^^^^^\n    |\n    = help: `#[label]` and `#[suggestion]` can only be applied to fields\n \n error: `#[subdiagnostic(bad)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:684:21\n+  --> $DIR/diagnostic-derive.rs:685:21\n    |\n LL |     #[subdiagnostic(bad)]\n    |                     ^^^\n    |\n    = help: `eager` is the only supported nested attribute for `subdiagnostic`\n \n error: `#[subdiagnostic = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:692:5\n+  --> $DIR/diagnostic-derive.rs:693:5\n    |\n LL |     #[subdiagnostic = \"bad\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `eager` is the only supported nested attribute for `subdiagnostic`\n \n error: `#[subdiagnostic(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:700:5\n+  --> $DIR/diagnostic-derive.rs:701:5\n    |\n LL |     #[subdiagnostic(bad, bad)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `eager` is the only supported nested attribute for `subdiagnostic`\n \n error: `#[subdiagnostic(\"...\")]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:708:21\n+  --> $DIR/diagnostic-derive.rs:709:21\n    |\n LL |     #[subdiagnostic(\"bad\")]\n    |                     ^^^^^\n    |\n    = help: `eager` is the only supported nested attribute for `subdiagnostic`\n \n error: `#[subdiagnostic(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:716:5\n+  --> $DIR/diagnostic-derive.rs:717:5\n    |\n LL |     #[subdiagnostic(eager)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: eager subdiagnostics are not supported on lints\n \n error: expected at least one string literal for `code(...)`\n-  --> $DIR/diagnostic-derive.rs:774:18\n+  --> $DIR/diagnostic-derive.rs:775:18\n    |\n LL |     #[suggestion(code())]\n    |                  ^^^^^^\n \n error: `code(...)` must contain only string literals\n-  --> $DIR/diagnostic-derive.rs:782:23\n+  --> $DIR/diagnostic-derive.rs:783:23\n    |\n LL |     #[suggestion(code(foo))]\n    |                       ^^^\n \n error: `code = \"...\"`/`code(...)` must contain only string literals\n-  --> $DIR/diagnostic-derive.rs:790:18\n+  --> $DIR/diagnostic-derive.rs:791:18\n    |\n LL |     #[suggestion(code = 3)]\n    |                  ^^^^^^^^\n@@ -604,43 +604,43 @@ LL |     #[nonsense]\n    |       ^^^^^^^^\n \n error: cannot find attribute `error` in this scope\n-  --> $DIR/diagnostic-derive.rs:564:3\n+  --> $DIR/diagnostic-derive.rs:565:3\n    |\n LL | #[error(compiletest_example, code = \"E0123\")]\n    |   ^^^^^\n \n error: cannot find attribute `warn_` in this scope\n-  --> $DIR/diagnostic-derive.rs:571:3\n+  --> $DIR/diagnostic-derive.rs:572:3\n    |\n LL | #[warn_(compiletest_example, code = \"E0123\")]\n    |   ^^^^^ help: a built-in attribute with a similar name exists: `warn`\n \n error: cannot find attribute `lint` in this scope\n-  --> $DIR/diagnostic-derive.rs:578:3\n+  --> $DIR/diagnostic-derive.rs:579:3\n    |\n LL | #[lint(compiletest_example, code = \"E0123\")]\n    |   ^^^^ help: a built-in attribute with a similar name exists: `link`\n \n error: cannot find attribute `lint` in this scope\n-  --> $DIR/diagnostic-derive.rs:585:3\n+  --> $DIR/diagnostic-derive.rs:586:3\n    |\n LL | #[lint(compiletest_example, code = \"E0123\")]\n    |   ^^^^ help: a built-in attribute with a similar name exists: `link`\n \n error: cannot find attribute `multipart_suggestion` in this scope\n-  --> $DIR/diagnostic-derive.rs:626:3\n+  --> $DIR/diagnostic-derive.rs:627:3\n    |\n LL | #[multipart_suggestion(suggestion)]\n    |   ^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find attribute `multipart_suggestion` in this scope\n-  --> $DIR/diagnostic-derive.rs:629:3\n+  --> $DIR/diagnostic-derive.rs:630:3\n    |\n LL | #[multipart_suggestion()]\n    |   ^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find attribute `multipart_suggestion` in this scope\n-  --> $DIR/diagnostic-derive.rs:633:7\n+  --> $DIR/diagnostic-derive.rs:634:7\n    |\n LL |     #[multipart_suggestion(suggestion)]\n    |       ^^^^^^^^^^^^^^^^^^^^\n@@ -652,7 +652,7 @@ LL | #[diag(nonsense, code = \"E0123\")]\n    |        ^^^^^^^^ not found in `rustc_errors::fluent`\n \n error[E0277]: the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n-  --> $DIR/diagnostic-derive.rs:338:10\n+  --> $DIR/diagnostic-derive.rs:339:10\n    |\n LL | #[derive(Diagnostic)]\n    |          ^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `Hello`"}, {"sha": "078ec3baac9fc71f359b45062f80c40bebae95bc", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e", "patch": "@@ -751,11 +751,18 @@ struct SuggestionStyleTwice {\n     sub: Span,\n }\n \n+#[derive(Subdiagnostic)]\n+#[suggestion_hidden(parser_add_paren, code = \"\")]\n+//~^ ERROR #[suggestion_hidden(...)]` is not a valid attribute\n+struct SuggestionStyleOldSyntax {\n+    #[primary_span]\n+    sub: Span,\n+}\n+\n #[derive(Subdiagnostic)]\n #[suggestion_hidden(parser_add_paren, code = \"\", style = \"normal\")]\n-//~^ ERROR specified multiple times\n-//~| NOTE previously specified here\n-struct SuggestionStyleTwiceExplicit {\n+//~^ ERROR #[suggestion_hidden(...)]` is not a valid attribute\n+struct SuggestionStyleOldAndNewSyntax {\n     #[primary_span]\n     sub: Span,\n }"}, {"sha": "8e06c43e6d0ad79ee48988234182c5b4a1470ce9", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.stderr", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr?ref=2eeb7802b3cfe25005c446bf6a82f5e9a1979c1e", "patch": "@@ -457,42 +457,46 @@ note: previously specified here\n LL | #[suggestion(parser_add_paren, code = \"\", style = \"hidden\", style = \"normal\")]\n    |                                           ^^^^^^^^^^^^^^^^\n \n-error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:755:50\n+error: `#[suggestion_hidden(...)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:755:1\n    |\n-LL | #[suggestion_hidden(parser_add_paren, code = \"\", style = \"normal\")]\n-   |                                                  ^^^^^^^^^^^^^^^^\n+LL | #[suggestion_hidden(parser_add_paren, code = \"\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:755:3\n+   = help: Use `#[suggestion(..., style = \"hidden\")]` instead\n+\n+error: `#[suggestion_hidden(...)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:763:1\n    |\n LL | #[suggestion_hidden(parser_add_paren, code = \"\", style = \"normal\")]\n-   |   ^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Use `#[suggestion(..., style = \"hidden\")]` instead\n \n error: invalid suggestion style\n-  --> $DIR/subdiagnostic-derive.rs:764:51\n+  --> $DIR/subdiagnostic-derive.rs:771:51\n    |\n LL | #[suggestion(parser_add_paren, code = \"\", style = \"foo\")]\n    |                                                   ^^^^^\n    |\n    = help: valid styles are `normal`, `short`, `hidden`, `verbose` and `tool-only`\n \n error: `#[suggestion(style = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:772:43\n+  --> $DIR/subdiagnostic-derive.rs:779:43\n    |\n LL | #[suggestion(parser_add_paren, code = \"\", style = 42)]\n    |                                           ^^^^^^^^^^\n \n error: `#[suggestion(style)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:780:43\n+  --> $DIR/subdiagnostic-derive.rs:787:43\n    |\n LL | #[suggestion(parser_add_paren, code = \"\", style)]\n    |                                           ^^^^^\n    |\n    = help: a diagnostic slug must be the first argument to the attribute\n \n error: `#[suggestion(style(...))]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:788:43\n+  --> $DIR/subdiagnostic-derive.rs:795:43\n    |\n LL | #[suggestion(parser_add_paren, code = \"\", style(\"foo\"))]\n    |                                           ^^^^^^^^^^^^\n@@ -557,6 +561,6 @@ error[E0425]: cannot find value `slug` in module `rustc_errors::fluent`\n LL | #[label(slug)]\n    |         ^^^^ not found in `rustc_errors::fluent`\n \n-error: aborting due to 78 previous errors\n+error: aborting due to 79 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}]}