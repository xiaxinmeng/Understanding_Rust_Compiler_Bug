{"sha": "19840793e57e4903e00edac963f30c9de34b1ea3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ODQwNzkzZTU3ZTQ5MDNlMDBlZGFjOTYzZjMwYzlkZTM0YjFlYTM=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-09-16T12:03:44Z"}, "committer": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-09-16T12:06:31Z"}, "message": "lint to change numeric literal instead of into", "tree": {"sha": "e710d983e1a8cf5384ac204c9d58d2c0579fd3d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e710d983e1a8cf5384ac204c9d58d2c0579fd3d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19840793e57e4903e00edac963f30c9de34b1ea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19840793e57e4903e00edac963f30c9de34b1ea3", "html_url": "https://github.com/rust-lang/rust/commit/19840793e57e4903e00edac963f30c9de34b1ea3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19840793e57e4903e00edac963f30c9de34b1ea3/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "html_url": "https://github.com/rust-lang/rust/commit/e4ba1d41e3c2a66215943e43de70f93bb195b1f0"}], "stats": {"total": 90, "additions": 72, "deletions": 18}, "files": [{"sha": "2f80edd5433dc09812c8d69c1462cdf1e07891e2", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 72, "deletions": 18, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/19840793e57e4903e00edac963f30c9de34b1ea3/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19840793e57e4903e00edac963f30c9de34b1ea3/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=19840793e57e4903e00edac963f30c9de34b1ea3", "patch": "@@ -419,6 +419,21 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                           if needs_paren { \"(\" } else { \"\" },\n                                           src,\n                                           if needs_paren { \")\" } else { \"\" });\n+            let suffix_suggestion = format!(\n+                \"{}{}{}{}\",\n+                if needs_paren { \"(\" } else { \"\" },\n+                src,\n+                expected_ty,\n+                if needs_paren { \")\" } else { \"\" },\n+            );\n+\n+            let is_suffixed = |expr: &hir::Expr| {\n+                if let hir::ExprKind::Lit(lit) = &expr.node {\n+                    lit.node.is_suffixed()\n+                } else {\n+                    false\n+                }\n+            };\n \n             match (&expected_ty.sty, &checked_ty.sty) {\n                 (&ty::Int(ref exp), &ty::Int(ref found)) => {\n@@ -444,12 +459,25 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             }\n                         }\n                         _ => {\n-                            err.span_suggestion_with_applicability(\n-                                expr.span,\n-                                &format!(\"{}, which {}\", msg, will_sign_extend),\n-                                into_suggestion,\n-                                Applicability::MachineApplicable\n-                            );\n+                            if is_suffixed(expr) {\n+                                err.span_suggestion_with_applicability(\n+                                    expr.span,\n+                                    &format!(\n+                                        \"change the type of the numeric literal from `{}` to `{}`\",\n+                                        checked_ty,\n+                                        expected_ty,\n+                                    ),\n+                                    suffix_suggestion,\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            } else {\n+                                err.span_suggestion_with_applicability(\n+                                    expr.span,\n+                                    &format!(\"{}, which {}\", msg, will_sign_extend),\n+                                    into_suggestion,\n+                                    Applicability::MachineApplicable\n+                                );\n+                            }\n                         }\n                     }\n                     true\n@@ -477,12 +505,25 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             }\n                         }\n                         _ => {\n-                            err.span_suggestion_with_applicability(\n-                                expr.span,\n-                                &format!(\"{}, which {}\", msg, will_zero_extend),\n-                                into_suggestion,\n-                                Applicability::MachineApplicable\n-                            );\n+                            if is_suffixed(expr) {\n+                                err.span_suggestion_with_applicability(\n+                                    expr.span,\n+                                    &format!(\n+                                        \"change the type of the numeric literal from `{}` to `{}`\",\n+                                        checked_ty,\n+                                        expected_ty,\n+                                    ),\n+                                    suffix_suggestion,\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            } else {\n+                                err.span_suggestion_with_applicability(\n+                                    expr.span,\n+                                    &format!(\"{}, which {}\", msg, will_zero_extend),\n+                                    into_suggestion,\n+                                    Applicability::MachineApplicable\n+                                );\n+                            }\n                         }\n                     }\n                     true\n@@ -583,12 +624,25 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n                 (&ty::Float(ref exp), &ty::Float(ref found)) => {\n                     if found.bit_width() < exp.bit_width() {\n-                        err.span_suggestion_with_applicability(\n-                            expr.span,\n-                            &format!(\"{} in a lossless way\", msg),\n-                            into_suggestion,\n-                            Applicability::MachineApplicable\n-                        );\n+                        if is_suffixed(expr) {\n+                            err.span_suggestion_with_applicability(\n+                                expr.span,\n+                                &format!(\n+                                    \"change the type of the numeric literal from `{}` to `{}`\",\n+                                    checked_ty,\n+                                    expected_ty,\n+                                ),\n+                                suffix_suggestion,\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        } else {\n+                            err.span_suggestion_with_applicability(\n+                                expr.span,\n+                                &format!(\"{} in a lossless way\", msg),\n+                                into_suggestion,\n+                                Applicability::MachineApplicable\n+                            );\n+                        }\n                     } else if can_cast {\n                         err.span_suggestion_with_applicability(\n                             expr.span,"}]}