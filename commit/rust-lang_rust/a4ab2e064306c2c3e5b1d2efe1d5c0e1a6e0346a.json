{"sha": "a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a", "node_id": "C_kwDOAAsO6NoAKGE0YWIyZTA2NDMwNmMyYzNlNWIxZDJlZmUxZDVjMGUxYTZlMDM0NmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-06T02:21:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-06T02:21:34Z"}, "message": "Auto merge of #103975 - oli-obk:tracing, r=jackh726\n\nSome tracing and comment cleanups\n\nPulled out of https://github.com/rust-lang/rust/pull/101900 to see if that is the perf impact", "tree": {"sha": "f4e5e4326d62286bf7cd7643960202edb9c6c589", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4e5e4326d62286bf7cd7643960202edb9c6c589"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a", "html_url": "https://github.com/rust-lang/rust/commit/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6fead46dc21ba017f7c1a5130ff3d31535acb16", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6fead46dc21ba017f7c1a5130ff3d31535acb16", "html_url": "https://github.com/rust-lang/rust/commit/e6fead46dc21ba017f7c1a5130ff3d31535acb16"}, {"sha": "44d1936d003cf393fb69c47d5c316f94850eb403", "url": "https://api.github.com/repos/rust-lang/rust/commits/44d1936d003cf393fb69c47d5c316f94850eb403", "html_url": "https://github.com/rust-lang/rust/commit/44d1936d003cf393fb69c47d5c316f94850eb403"}], "stats": {"total": 79, "additions": 23, "deletions": 56}, "files": [{"sha": "d995d533ca3e434ff9da5b25aba08375bfd50c61", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a", "patch": "@@ -146,6 +146,7 @@ impl Qualif for NeedsNonConstDrop {\n         qualifs.needs_non_const_drop\n     }\n \n+    #[instrument(level = \"trace\", skip(cx), ret)]\n     fn in_any_value_of_ty<'tcx>(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {\n         // Avoid selecting for simple cases, such as builtin types.\n         if ty::util::is_trivially_const_drop(ty) {\n@@ -174,6 +175,8 @@ impl Qualif for NeedsNonConstDrop {\n             return true;\n         };\n \n+        trace!(?impl_src);\n+\n         if !matches!(\n             impl_src,\n             ImplSource::ConstDestruct(_) | ImplSource::Param(_, ty::BoundConstness::ConstIfConst)"}, {"sha": "82e260d158bc468acb5ec56372e53e49e1a4fb82", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a", "patch": "@@ -388,6 +388,8 @@ impl<'hir> GenericArgs<'hir> {\n     }\n \n     #[inline]\n+    /// This function returns the number of type and const generic params.\n+    /// It should only be used for diagnostics.\n     pub fn num_generic_params(&self) -> usize {\n         self.args.iter().filter(|arg| !matches!(arg, GenericArg::Lifetime(_))).count()\n     }"}, {"sha": "000f4c9b684279f1552e8c9bb2741caca3f02254", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a", "patch": "@@ -129,6 +129,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         output\n     }\n \n+    #[instrument(level = \"debug\", skip(self, call_expr, callee_expr, arg_exprs, autoderef), ret)]\n     fn try_overloaded_call_step(\n         &self,\n         call_expr: &'tcx hir::Expr<'tcx>,\n@@ -138,10 +139,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Option<CallStep<'tcx>> {\n         let adjusted_ty =\n             self.structurally_resolved_type(autoderef.span(), autoderef.final_ty(false));\n-        debug!(\n-            \"try_overloaded_call_step(call_expr={:?}, adjusted_ty={:?})\",\n-            call_expr, adjusted_ty\n-        );\n \n         // If the callee is a bare function or a closure, then we're all set.\n         match *adjusted_ty.kind() {"}, {"sha": "aa44d582fd6ce7acad3bc55b07db218af1d84840", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a", "patch": "@@ -495,7 +495,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n             }\n             ty::ConstKind::Bound(debruijn, _) => {\n                 if debruijn >= self.binder_index {\n-                    bug!(\"escaping bound type during canonicalization\")\n+                    bug!(\"escaping bound const during canonicalization\")\n                 } else {\n                     return ct;\n                 }"}, {"sha": "ae0f158ede99a17e1ed5f6362b98f8c41898e3d8", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a", "patch": "@@ -511,12 +511,12 @@ impl<'tcx> Instance<'tcx> {\n         Instance::resolve(tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap().unwrap()\n     }\n \n+    #[instrument(level = \"debug\", skip(tcx), ret)]\n     pub fn fn_once_adapter_instance(\n         tcx: TyCtxt<'tcx>,\n         closure_did: DefId,\n         substs: ty::SubstsRef<'tcx>,\n     ) -> Option<Instance<'tcx>> {\n-        debug!(\"fn_once_adapter_shim({:?}, {:?})\", closure_did, substs);\n         let fn_once = tcx.require_lang_item(LangItem::FnOnce, None);\n         let call_once = tcx\n             .associated_items(fn_once)\n@@ -536,7 +536,7 @@ impl<'tcx> Instance<'tcx> {\n         assert_eq!(sig.inputs().len(), 1);\n         let substs = tcx.mk_substs_trait(self_ty, &[sig.inputs()[0].into()]);\n \n-        debug!(\"fn_once_adapter_shim: self_ty={:?} sig={:?}\", self_ty, sig);\n+        debug!(?self_ty, ?sig);\n         Some(Instance { def, substs })\n     }\n "}, {"sha": "14d265a402ef8a6bef72e9dc7129c2000148c463", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a", "patch": "@@ -407,9 +407,8 @@ where\n         self.drop_ladder(fields, succ, unwind).0\n     }\n \n+    #[instrument(level = \"debug\", ret)]\n     fn open_drop_for_box(&mut self, adt: ty::AdtDef<'tcx>, substs: SubstsRef<'tcx>) -> BasicBlock {\n-        debug!(\"open_drop_for_box({:?}, {:?}, {:?})\", self, adt, substs);\n-\n         // drop glue is sent straight to codegen\n         // box cannot be directly dereferenced\n         let unique_ty = adt.non_enum_variant().fields[0].ty(self.tcx(), substs);\n@@ -431,8 +430,8 @@ where\n         self.drop_subpath(interior, interior_path, succ, unwind_succ)\n     }\n \n+    #[instrument(level = \"debug\", ret)]\n     fn open_drop_for_adt(&mut self, adt: ty::AdtDef<'tcx>, substs: SubstsRef<'tcx>) -> BasicBlock {\n-        debug!(\"open_drop_for_adt({:?}, {:?}, {:?})\", self, adt, substs);\n         if adt.variants().is_empty() {\n             return self.elaborator.patch().new_block(BasicBlockData {\n                 statements: vec![],"}, {"sha": "a0ff7550faeb8226f057eaae989265bd931f7016", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a", "patch": "@@ -569,17 +569,13 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n \n /// Builds a \"call\" shim for `instance`. The shim calls the function specified by `call_kind`,\n /// first adjusting its first argument according to `rcvr_adjustment`.\n+#[instrument(level = \"debug\", skip(tcx), ret)]\n fn build_call_shim<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: ty::InstanceDef<'tcx>,\n     rcvr_adjustment: Option<Adjustment>,\n     call_kind: CallKind<'tcx>,\n ) -> Body<'tcx> {\n-    debug!(\n-        \"build_call_shim(instance={:?}, rcvr_adjustment={:?}, call_kind={:?})\",\n-        instance, rcvr_adjustment, call_kind\n-    );\n-\n     // `FnPtrShim` contains the fn pointer type that a call shim is being built for - this is used\n     // to substitute into the signature of the shim. It is not necessary for users of this\n     // MIR body to perform further substitutions (see `InstanceDef::has_polymorphic_mir_body`).\n@@ -641,7 +637,7 @@ fn build_call_shim<'tcx>(\n \n     let span = tcx.def_span(def_id);\n \n-    debug!(\"build_call_shim: sig={:?}\", sig);\n+    debug!(?sig);\n \n     let mut local_decls = local_decls_for_sig(&sig, span);\n     let source_info = SourceInfo::outermost(span);"}, {"sha": "0f2e22604dc7ed285a018370358a350c7e144d2d", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a", "patch": "@@ -93,6 +93,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n \n     /// Normalizes associated types in `value`, potentially returning\n     /// new obligations that must further be processed.\n+    #[instrument(level = \"debug\", skip(self, cause, param_env), ret)]\n     fn partially_normalize_associated_types_in<T>(\n         &self,\n         cause: ObligationCause<'tcx>,\n@@ -102,29 +103,20 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        debug!(\"partially_normalize_associated_types_in(value={:?})\", value);\n         let mut selcx = traits::SelectionContext::new(self);\n         let traits::Normalized { value, obligations } =\n             traits::normalize(&mut selcx, param_env, cause, value);\n-        debug!(\n-            \"partially_normalize_associated_types_in: result={:?} predicates={:?}\",\n-            value, obligations\n-        );\n         InferOk { value, obligations }\n     }\n \n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn type_implements_trait(\n         &self,\n         trait_def_id: DefId,\n         ty: Ty<'tcx>,\n         params: SubstsRef<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> traits::EvaluationResult {\n-        debug!(\n-            \"type_implements_trait: trait_def_id={:?}, type={:?}, params={:?}, param_env={:?}\",\n-            trait_def_id, ty, params, param_env\n-        );\n-\n         let trait_ref =\n             ty::TraitRef { def_id: trait_def_id, substs: self.tcx.mk_substs_trait(ty, params) };\n "}, {"sha": "3417bb87c2049b03d1005ea3c29b5f00d19a4f1e", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a", "patch": "@@ -117,14 +117,12 @@ pub enum TraitQueryMode {\n }\n \n /// Creates predicate obligations from the generic bounds.\n+#[instrument(level = \"debug\", skip(cause, param_env))]\n pub fn predicates_for_generics<'tcx>(\n     cause: impl Fn(usize, Span) -> ObligationCause<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     generic_bounds: ty::InstantiatedPredicates<'tcx>,\n ) -> impl Iterator<Item = PredicateObligation<'tcx>> {\n-    let generic_bounds = generic_bounds;\n-    debug!(\"predicates_for_generics(generic_bounds={:?})\", generic_bounds);\n-\n     std::iter::zip(generic_bounds.predicates, generic_bounds.spans).enumerate().map(\n         move |(idx, (predicate, span))| Obligation {\n             cause: cause(idx, span),\n@@ -140,19 +138,14 @@ pub fn predicates_for_generics<'tcx>(\n /// `bound` or is not known to meet bound (note that this is\n /// conservative towards *no impl*, which is the opposite of the\n /// `evaluate` methods).\n+#[instrument(level = \"debug\", skip(infcx, param_env, span), ret)]\n pub fn type_known_to_meet_bound_modulo_regions<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     ty: Ty<'tcx>,\n     def_id: DefId,\n     span: Span,\n ) -> bool {\n-    debug!(\n-        \"type_known_to_meet_bound_modulo_regions(ty={:?}, bound={:?})\",\n-        ty,\n-        infcx.tcx.def_path_str(def_id)\n-    );\n-\n     let trait_ref =\n         ty::Binder::dummy(ty::TraitRef { def_id, substs: infcx.tcx.mk_substs_trait(ty, &[]) });\n     let obligation = Obligation {\n@@ -163,12 +156,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'tcx>(\n     };\n \n     let result = infcx.predicate_must_hold_modulo_regions(&obligation);\n-    debug!(\n-        \"type_known_to_meet_ty={:?} bound={} => {:?}\",\n-        ty,\n-        infcx.tcx.def_path_str(def_id),\n-        result\n-    );\n+    debug!(?result);\n \n     if result && ty.has_non_region_infer() {\n         // Because of inference \"guessing\", selection can sometimes claim\n@@ -190,21 +178,9 @@ pub fn type_known_to_meet_bound_modulo_regions<'tcx>(\n         // *definitively* show that it implements `Copy`. Otherwise,\n         // assume it is move; linear is always ok.\n         match &errors[..] {\n-            [] => {\n-                debug!(\n-                    \"type_known_to_meet_bound_modulo_regions: ty={:?} bound={} success\",\n-                    ty,\n-                    infcx.tcx.def_path_str(def_id)\n-                );\n-                true\n-            }\n+            [] => true,\n             errors => {\n-                debug!(\n-                    ?ty,\n-                    bound = %infcx.tcx.def_path_str(def_id),\n-                    ?errors,\n-                    \"type_known_to_meet_bound_modulo_regions\"\n-                );\n+                debug!(?errors);\n                 false\n             }\n         }"}, {"sha": "84be1ced520febd20370d7188a7252ad12c377ba", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=a4ab2e064306c2c3e5b1d2efe1d5c0e1a6e0346a", "patch": "@@ -1132,12 +1132,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     /// filter_impls filters constant trait obligations and candidates that have a positive impl\n     /// for a negative goal and a negative impl for a positive goal\n-    #[instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self, candidates))]\n     fn filter_impls(\n         &mut self,\n         candidates: Vec<SelectionCandidate<'tcx>>,\n         obligation: &TraitObligation<'tcx>,\n     ) -> Vec<SelectionCandidate<'tcx>> {\n+        trace!(\"{candidates:#?}\");\n         let tcx = self.tcx();\n         let mut result = Vec::with_capacity(candidates.len());\n \n@@ -1177,6 +1178,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n         }\n \n+        trace!(\"{result:#?}\");\n         result\n     }\n "}]}