{"sha": "5253b0a0a1f366fad0ebed57597fcf2703b9e893", "node_id": "C_kwDOAAsO6NoAKDUyNTNiMGEwYTFmMzY2ZmFkMGViZWQ1NzU5N2ZjZjI3MDNiOWU4OTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-17T22:04:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-17T22:04:28Z"}, "message": "Auto merge of #101949 - matthiaskrgr:rollup-xu5cqnd, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #101093 (Initial version of 1.64 release notes)\n - #101713 (change AccessLevels representation)\n - #101821 (Bump Unicode to version 15.0.0, regenerate tables)\n - #101826 (Enforce \"joined()\" and \"joined_with_noop()\" test)\n - #101835 (Allow using vendoring when running bootstrap from outside the source root)\n - #101942 (Revert \"Copy stage0 binaries into stage0-sysroot\")\n - #101943 (rustdoc: remove unused CSS `.non-exhaustive { margin-bottom }`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8111bda03a6a21e62ba5c5ae16ac54619f21cbd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8111bda03a6a21e62ba5c5ae16ac54619f21cbd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5253b0a0a1f366fad0ebed57597fcf2703b9e893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5253b0a0a1f366fad0ebed57597fcf2703b9e893", "html_url": "https://github.com/rust-lang/rust/commit/5253b0a0a1f366fad0ebed57597fcf2703b9e893", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5253b0a0a1f366fad0ebed57597fcf2703b9e893/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98ad6a5519651af36e246c0335c964dd52c554ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/98ad6a5519651af36e246c0335c964dd52c554ba", "html_url": "https://github.com/rust-lang/rust/commit/98ad6a5519651af36e246c0335c964dd52c554ba"}, {"sha": "5ba52ca002bd1ee2d7f9fe1969c21e8faaf9edac", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba52ca002bd1ee2d7f9fe1969c21e8faaf9edac", "html_url": "https://github.com/rust-lang/rust/commit/5ba52ca002bd1ee2d7f9fe1969c21e8faaf9edac"}], "stats": {"total": 970, "additions": 597, "deletions": 373}, "files": [{"sha": "51c25030cad64d363aecabb50567ac3ab7cf287b", "filename": "RELEASES.md", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -1,3 +1,155 @@\n+Version 1.64.0 (2022-09-22)\n+===========================\n+\n+Language\n+--------\n+- [make `const_err` show up in future breakage reports](https://github.com/rust-lang/rust/pull/97743/)\n+- [allow unions with mutable references and tuples of allowed types](https://github.com/rust-lang/rust/pull/97995/)\n+- It is now considered valid to deallocate memory pointed to by a shared reference `&T` [if every byte in `T` is inside an `UnsafeCell`](https://github.com/rust-lang/rust/pull/98017/)\n+- Unused tuple struct fields are now warned against in an allow-by-default lint, [`unused_tuple_struct_fields`](https://github.com/rust-lang/rust/pull/95977/), similar to the existing warning for unused struct fields. This lint will become warn-by-default in the future.\n+\n+Compiler\n+--------\n+- The minimum required versions for all `-linux-gnu` targets are now at least kernel 3.2 and glibc 2.17, for targets that previously supported older versions: [Increase the minimum linux-gnu versions](https://github.com/rust-lang/rust/pull/95026/)\n+- [Keep unstable target features for asm feature checking](https://github.com/rust-lang/rust/pull/99155/)\n+- [Add Nintendo Switch as tier 3 target](https://github.com/rust-lang/rust/pull/88991/)\n+  - Refer to Rust's [platform support page][platform-support-doc] for more\n+    information on Rust's tiered platform support.\n+- [Only compile #[used] as llvm.compiler.used for ELF targets](https://github.com/rust-lang/rust/pull/93718/)\n+- [sess: stabilize `-Zterminal-width` as `--diagnostic-width`](https://github.com/rust-lang/rust/pull/95635/)\n+- [Fix repr(align) enum handling](https://github.com/rust-lang/rust/pull/96814/)\n+- [Suggest defining variable as mutable on `&mut _` type mismatch in pats](https://github.com/rust-lang/rust/pull/98431/)\n+- [Emit warning when named arguments are used positionally in format](https://github.com/rust-lang/rust/pull/98580/)\n+- [Add support for link-flavor rust-lld for iOS, tvOS and watchOS](https://github.com/rust-lang/rust/pull/98771/)\n+- [Do not mention private types from other crates as impl candidates](https://github.com/rust-lang/rust/pull/99091/)\n+\n+Libraries\n+---------\n+- [Implement network primitives with ideal Rust layout, not C system layout](https://github.com/rust-lang/rust/pull/78802/)\n+- [Remove restrictions on compare-exchange memory ordering.](https://github.com/rust-lang/rust/pull/98383/)\n+- You can now `write!` or `writeln!` into an `OsString`: [Implement `fmt::Write` for `OsString`](https://github.com/rust-lang/rust/pull/97915/)\n+- [Enforce that layout size fits in isize in Layout](https://github.com/rust-lang/rust/pull/95295/)\n+- [Make RwLockReadGuard covariant](https://github.com/rust-lang/rust/pull/96820/)\n+- [Implement `FusedIterator` for `std::net::[Into]Incoming`](https://github.com/rust-lang/rust/pull/97300/)\n+- [`impl<T: AsRawFd> AsRawFd for {Arc,Box}<T>`](https://github.com/rust-lang/rust/pull/97437/)\n+- [ptr::copy and ptr::swap are doing untyped copies](https://github.com/rust-lang/rust/pull/97712/)\n+- [Add assertion that `transmute_copy`'s U is not larger than T](https://github.com/rust-lang/rust/pull/98839/)\n+- [A soundness bug in `BTreeMap` was fixed](https://github.com/rust-lang/rust/pull/99413/) that allowed data it was borrowing to be dropped before the container.\n+- [Add cgroupv1 support to `available_parallelism`](https://github.com/rust-lang/rust/pull/97925/)\n+- [mem::uninitialized: mitigate many incorrect uses of this function](https://github.com/rust-lang/rust/pull/99182/)\n+\n+Stabilized APIs\n+---------------\n+\n+- [`ffi::CStr`](https://doc.rust-lang.org/stable/std/ffi/struct.CStr.html)\n+- [`ffi::CString`](https://doc.rust-lang.org/stable/std/ffi/struct.CString.html)\n+- [`ffi::FromBytesWithNulError`](https://doc.rust-lang.org/stable/std/ffi/struct.FromBytesWithNulError.html)\n+- [`ffi::FromVecWithNulError`](https://doc.rust-lang.org/stable/std/ffi/struct.FromVecWithNulError.html)\n+- [`ffi::IntoStringError`](https://doc.rust-lang.org/stable/std/ffi/struct.IntoStringError.html)\n+- [`ffi::NulError`](https://doc.rust-lang.org/stable/std/ffi/struct.NulError.html)\n+- [`ffi::c_char`](https://doc.rust-lang.org/stable/std/ffi/type.c_char.html)\n+- [`ffi::c_double`](https://doc.rust-lang.org/stable/std/ffi/type.c_double.html)\n+- [`ffi::c_float`](https://doc.rust-lang.org/stable/std/ffi/type.c_float.html)\n+- [`ffi::c_int`](https://doc.rust-lang.org/stable/std/ffi/type.c_int.html)\n+- [`ffi::c_long`](https://doc.rust-lang.org/stable/std/ffi/type.c_long.html)\n+- [`ffi::c_longlong`](https://doc.rust-lang.org/stable/std/ffi/type.c_longlong.html)\n+- [`ffi::c_schar`](https://doc.rust-lang.org/stable/std/ffi/type.c_schar.html)\n+- [`ffi::c_short`](https://doc.rust-lang.org/stable/std/ffi/type.c_short.html)\n+- [`ffi::c_uchar`](https://doc.rust-lang.org/stable/std/ffi/type.c_uchar.html)\n+- [`ffi::c_uint`](https://doc.rust-lang.org/stable/std/ffi/type.c_uint.html)\n+- [`ffi::c_ulong`](https://doc.rust-lang.org/stable/std/ffi/type.c_ulong.html)\n+- [`ffi::c_ulonglong`](https://doc.rust-lang.org/stable/std/ffi/type.c_ulonglong.html)\n+- [`ffi::c_ushort`](https://doc.rust-lang.org/stable/std/ffi/type.c_ushort.html)\n+- [`future::IntoFuture`](https://doc.rust-lang.org/stable/std/future/trait.IntoFuture.html)\n+- [`future::poll_fn`](https://doc.rust-lang.org/stable/std/future/fn.poll_fn.html)\n+- [`task::ready!`](https://doc.rust-lang.org/stable/std/task/macro.ready.html)\n+- [`num::NonZero*::checked_mul`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.checked_mul)\n+- [`num::NonZero*::checked_pow`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.checked_pow)\n+- [`num::NonZero*::saturating_mul`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.saturating_mul)\n+- [`num::NonZero*::saturating_pow`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.saturating_pow)\n+- [`num::NonZeroI*::abs`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.abs)\n+- [`num::NonZeroI*::checked_abs`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.checked_abs)\n+- [`num::NonZeroI*::overflowing_abs`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.overflowing_abs)\n+- [`num::NonZeroI*::saturating_abs`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.saturating_abs)\n+- [`num::NonZeroI*::unsigned_abs`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.unsigned_abs)\n+- [`num::NonZeroI*::wrapping_abs`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroIsize.html#method.wrapping_abs)\n+- [`num::NonZeroU*::checked_add`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.checked_add)\n+- [`num::NonZeroU*::checked_next_power_of_two`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.checked_next_power_of_two)\n+- [`num::NonZeroU*::saturating_add`](https://doc.rust-lang.org/stable/std/num/struct.NonZeroUsize.html#method.saturating_add)\n+- [`os::unix::process::CommandExt::process_group`](https://doc.rust-lang.org/stable/std/os/unix/process/trait.CommandExt.html#tymethod.process_group)\n+- [`os::windows::fs::FileTypeExt::is_symlink_dir`](https://doc.rust-lang.org/stable/std/os/windows/fs/trait.FileTypeExt.html#tymethod.is_symlink_dir)\n+- [`os::windows::fs::FileTypeExt::is_symlink_file`](https://doc.rust-lang.org/stable/std/os/windows/fs/trait.FileTypeExt.html#tymethod.is_symlink_file)\n+\n+These APIs are now usable in const contexts:\n+\n+- [`slice::from_raw_parts`](https://doc.rust-lang.org/stable/core/slice/fn.from_raw_parts.html)\n+\n+Cargo\n+-----\n+- Packages can now inherit settings from the workspace so that the settings\n+  can be centralized in one place. See\n+  [`workspace.package`](https://doc.rust-lang.org/nightly/cargo/reference/workspaces.html#the-workspacepackage-table)\n+  and\n+  [`workspace.dependencies`](https://doc.rust-lang.org/nightly/cargo/reference/workspaces.html#the-workspacedependencies-table)\n+  for more details on how to define these common settings.\n+  [#10859](https://github.com/rust-lang/cargo/pull/10859)\n+- Cargo commands can now accept multiple `--target` flags to build for\n+  multiple targets at once, and the\n+  [`build.target`](https://doc.rust-lang.org/nightly/cargo/reference/config.html#buildtarget)\n+  config option may now take an array of multiple targets.\n+  [#10766](https://github.com/rust-lang/cargo/pull/10766)\n+- The `--jobs` argument can now take a negative number to count backwards from\n+  the max CPUs.\n+  [#10844](https://github.com/rust-lang/cargo/pull/10844)\n+- `cargo add` will now update `Cargo.lock`.\n+  [#10902](https://github.com/rust-lang/cargo/pull/10902)\n+- Added the\n+  [`--crate-type`](https://doc.rust-lang.org/nightly/cargo/commands/cargo-rustc.html#option-cargo-rustc---crate-type)\n+  flag to `cargo rustc` to override the crate type.\n+  [#10838](https://github.com/rust-lang/cargo/pull/10838)\n+- Significantly improved the performance fetching git dependencies from GitHub\n+  when using a hash in the `rev` field.\n+  [#10079](https://github.com/rust-lang/cargo/pull/10079)\n+\n+Misc\n+----\n+- [Let rust-analyzer ship on stable, non-preview](https://github.com/rust-lang/rust/pull/98640/)\n+\n+Compatibility Notes\n+-------------------\n+- The minimum required versions for all `-linux-gnu` targets are now at least kernel 3.2 and glibc 2.17, for targets that previously supported older versions: [Increase the minimum linux-gnu versions](https://github.com/rust-lang/rust/pull/95026/)\n+- [Implement network primitives with ideal Rust layout, not C system layout](https://github.com/rust-lang/rust/pull/78802/)\n+- [Add assertion that `transmute_copy`'s U is not larger than T](https://github.com/rust-lang/rust/pull/98839/)\n+- [A soundness bug in `BTreeMap` was fixed](https://github.com/rust-lang/rust/pull/99413/) that allowed data it was borrowing to be dropped before the container.\n+- [The Drop behavior of C-like enums cast to ints has changed](https://github.com/rust-lang/rust/pull/96862/). These are already discouraged by a compiler warning.\n+- [Relate late-bound closure lifetimes to parent fn in NLL](https://github.com/rust-lang/rust/pull/98835/)\n+- [Errors at const-eval time are now in future incompatibility reports](https://github.com/rust-lang/rust/pull/97743/)\n+- On the `thumbv6m-none-eabi` target, some incorrect `asm!` statements were erroneously accepted if they used the high registers (r8 to r14) as an input/output operand. [This is no longer accepted](https://github.com/rust-lang/rust/pull/99155/).\n+- [`impl Trait` was accidentally accepted as the associated type value of return-position `impl Trait`](https://github.com/rust-lang/rust/pull/97346/), without fulfilling all the trait bounds of that associated type, as long as the hidden type satisfies said bounds. This has been fixed.\n+\n+Internal Changes\n+----------------\n+\n+These changes do not affect any public interfaces of Rust, but they represent\n+significant improvements to the performance or internals of rustc and related\n+tools.\n+\n+- Windows builds now use profile-guided optimization, providing 10-20% improvements to compiler performance: [Utilize PGO for windows x64 rustc dist builds](https://github.com/rust-lang/rust/pull/96978/)\n+- [Stop keeping metadata in memory before writing it to disk](https://github.com/rust-lang/rust/pull/96544/)\n+- [compiletest: strip debuginfo by default for mode=ui](https://github.com/rust-lang/rust/pull/98140/)\n+- Many improvements to generated code for derives, including performance improvements:\n+  - [Don't use match-destructuring for derived ops on structs.](https://github.com/rust-lang/rust/pull/98446/)\n+  - [Many small deriving cleanups](https://github.com/rust-lang/rust/pull/98741/)\n+  - [More derive output improvements](https://github.com/rust-lang/rust/pull/98758/)\n+  - [Clarify deriving code](https://github.com/rust-lang/rust/pull/98915/)\n+  - [Final derive output improvements](https://github.com/rust-lang/rust/pull/99046/)\n+  - [Stop injecting `#[allow(unused_qualifications)]` in generated `derive` implementations](https://github.com/rust-lang/rust/pull/99485/)\n+  - [Improve `derive(Debug)`](https://github.com/rust-lang/rust/pull/98190/)\n+- [Bump to clap 3](https://github.com/rust-lang/rust/pull/98213/)\n+- [fully move dropck to mir](https://github.com/rust-lang/rust/pull/98641/)\n+- [Optimize `Vec::insert` for the case where `index == len`.](https://github.com/rust-lang/rust/pull/98755/)\n+- [Convert rust-analyzer to an in-tree tool](https://github.com/rust-lang/rust/pull/99603/)\n+\n Version 1.63.0 (2022-08-11)\n ==========================\n "}, {"sha": "a26d1b2b381e83024f1bd110aab18d0e3753821d", "filename": "compiler/rustc_error_messages/locales/en-US/privacy.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -11,7 +11,7 @@ privacy_in_public_interface = {$vis_descr} {$kind} `{$descr}` in public interfac\n     .label = can't leak {$vis_descr} {$kind}\n     .visibility_label = `{$descr}` declared as {$vis_descr}\n \n-privacy_report_access_level = {$descr}\n+privacy_report_effective_visibility = {$descr}\n \n privacy_from_private_dep_in_public_interface =\n     {$kind} `{$descr}` from private dependency '{$krate}' in public interface"}, {"sha": "0f6d7ed9edc1627156fb4a9b1c05eedaed701126", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -762,7 +762,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Internal attributes, Testing:\n     // ==========================================================================\n \n-    rustc_attr!(TEST, rustc_access_level, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_effective_visibility, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_outlives, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_capture_analysis, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_insignificant_dtor, Normal, template!(Word), WarnFollowing),"}, {"sha": "c595fbec0dd5c7b0d95d4356bd583d8dbed3d224", "filename": "compiler/rustc_middle/src/middle/privacy.rs", "status": "modified", "additions": 87, "deletions": 6, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -1,7 +1,7 @@\n //! A pass that checks to make sure private fields and methods aren't used\n //! outside their scopes. This pass will also generate a set of exported items\n //! which are available for use externally when compiled as a library.\n-\n+use crate::ty::Visibility;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_macros::HashStable;\n@@ -27,26 +27,107 @@ pub enum AccessLevel {\n     Public,\n }\n \n+#[derive(Clone, Copy, PartialEq, Eq, Debug, HashStable, Default)]\n+pub struct EffectiveVisibility {\n+    public: Option<Visibility>,\n+    exported: Option<Visibility>,\n+    reachable: Option<Visibility>,\n+    reachable_from_impl_trait: Option<Visibility>,\n+}\n+\n+impl EffectiveVisibility {\n+    pub fn get(&self, tag: AccessLevel) -> Option<&Visibility> {\n+        match tag {\n+            AccessLevel::Public => &self.public,\n+            AccessLevel::Exported => &self.exported,\n+            AccessLevel::Reachable => &self.reachable,\n+            AccessLevel::ReachableFromImplTrait => &self.reachable_from_impl_trait,\n+        }\n+        .as_ref()\n+    }\n+\n+    fn get_mut(&mut self, tag: AccessLevel) -> &mut Option<Visibility> {\n+        match tag {\n+            AccessLevel::Public => &mut self.public,\n+            AccessLevel::Exported => &mut self.exported,\n+            AccessLevel::Reachable => &mut self.reachable,\n+            AccessLevel::ReachableFromImplTrait => &mut self.reachable_from_impl_trait,\n+        }\n+    }\n+\n+    pub fn is_public_at_level(&self, tag: AccessLevel) -> bool {\n+        self.get(tag).map_or(false, |vis| vis.is_public())\n+    }\n+}\n+\n /// Holds a map of accessibility levels for reachable HIR nodes.\n #[derive(Debug, Clone)]\n pub struct AccessLevels<Id = LocalDefId> {\n-    pub map: FxHashMap<Id, AccessLevel>,\n+    map: FxHashMap<Id, EffectiveVisibility>,\n }\n \n-impl<Id: Hash + Eq> AccessLevels<Id> {\n+impl<Id: Hash + Eq + Copy> AccessLevels<Id> {\n+    pub fn is_public_at_level(&self, id: Id, tag: AccessLevel) -> bool {\n+        self.get_effective_vis(id)\n+            .map_or(false, |effective_vis| effective_vis.is_public_at_level(tag))\n+    }\n+\n     /// See `AccessLevel::Reachable`.\n     pub fn is_reachable(&self, id: Id) -> bool {\n-        self.map.get(&id) >= Some(&AccessLevel::Reachable)\n+        self.is_public_at_level(id, AccessLevel::Reachable)\n     }\n \n     /// See `AccessLevel::Exported`.\n     pub fn is_exported(&self, id: Id) -> bool {\n-        self.map.get(&id) >= Some(&AccessLevel::Exported)\n+        self.is_public_at_level(id, AccessLevel::Exported)\n     }\n \n     /// See `AccessLevel::Public`.\n     pub fn is_public(&self, id: Id) -> bool {\n-        self.map.get(&id) >= Some(&AccessLevel::Public)\n+        self.is_public_at_level(id, AccessLevel::Public)\n+    }\n+\n+    pub fn get_access_level(&self, id: Id) -> Option<AccessLevel> {\n+        self.get_effective_vis(id).and_then(|effective_vis| {\n+            for level in [\n+                AccessLevel::Public,\n+                AccessLevel::Exported,\n+                AccessLevel::Reachable,\n+                AccessLevel::ReachableFromImplTrait,\n+            ] {\n+                if effective_vis.is_public_at_level(level) {\n+                    return Some(level);\n+                }\n+            }\n+            None\n+        })\n+    }\n+\n+    pub fn set_access_level(&mut self, id: Id, tag: AccessLevel) {\n+        let mut effective_vis = self.get_effective_vis(id).copied().unwrap_or_default();\n+        for level in [\n+            AccessLevel::Public,\n+            AccessLevel::Exported,\n+            AccessLevel::Reachable,\n+            AccessLevel::ReachableFromImplTrait,\n+        ] {\n+            if level <= tag {\n+                *effective_vis.get_mut(level) = Some(Visibility::Public);\n+            }\n+        }\n+        self.map.insert(id, effective_vis);\n+    }\n+\n+    pub fn get_effective_vis(&self, id: Id) -> Option<&EffectiveVisibility> {\n+        self.map.get(&id)\n+    }\n+\n+    pub fn iter(&self) -> impl Iterator<Item = (&Id, &EffectiveVisibility)> {\n+        self.map.iter()\n+    }\n+\n+    pub fn map_id<OutId: Hash + Eq + Copy>(&self, f: impl Fn(Id) -> OutId) -> AccessLevels<OutId> {\n+        AccessLevels { map: self.map.iter().map(|(k, v)| (f(*k), *v)).collect() }\n     }\n }\n "}, {"sha": "57f7c379d04907d991ee2e551cc74a72381afaf8", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Node, PatKind, TyKind};\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n-use rustc_middle::middle::privacy;\n+use rustc_middle::middle::privacy::AccessLevel;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_session::lint;\n@@ -619,13 +619,10 @@ fn create_and_seed_worklist<'tcx>(\n     // see `MarkSymbolVisitor::struct_constructors`\n     let mut struct_constructors = Default::default();\n     let mut worklist = access_levels\n-        .map\n         .iter()\n-        .filter_map(\n-            |(&id, &level)| {\n-                if level >= privacy::AccessLevel::Reachable { Some(id) } else { None }\n-            },\n-        )\n+        .filter_map(|(&id, effective_vis)| {\n+            effective_vis.is_public_at_level(AccessLevel::Reachable).then_some(id)\n+        })\n         // Seed entry point\n         .chain(tcx.entry_fn(()).and_then(|(def_id, _)| def_id.as_local()))\n         .collect::<Vec<_>>();"}, {"sha": "75244124e20ef45d6dd9955c5a87ad5effc2fb28", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -12,7 +12,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::Node;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n-use rustc_middle::middle::privacy;\n+use rustc_middle::middle::privacy::{self, AccessLevel};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_session::config::CrateType;\n@@ -373,7 +373,13 @@ fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> FxHashSet<LocalDefId> {\n     //         If other crates link to us, they're going to expect to be able to\n     //         use the lang items, so we need to be sure to mark them as\n     //         exported.\n-    reachable_context.worklist.extend(access_levels.map.keys());\n+    reachable_context.worklist = access_levels\n+        .iter()\n+        .filter_map(|(&id, effective_vis)| {\n+            effective_vis.is_public_at_level(AccessLevel::ReachableFromImplTrait).then_some(id)\n+        })\n+        .collect::<Vec<_>>();\n+\n     for item in tcx.lang_items().items().iter() {\n         if let Some(def_id) = *item {\n             if let Some(def_id) = def_id.as_local() {"}, {"sha": "705ad567aa779f945bf797ab580e8f27e8dcaf3f", "filename": "compiler/rustc_privacy/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -76,8 +76,8 @@ pub struct InPublicInterface<'a> {\n }\n \n #[derive(SessionDiagnostic)]\n-#[diag(privacy::report_access_level)]\n-pub struct ReportAccessLevel {\n+#[diag(privacy::report_effective_visibility)]\n+pub struct ReportEffectiveVisibility {\n     #[primary_span]\n     pub span: Span,\n     pub descr: String,"}, {"sha": "8f5ee51e6cfbb0966d53847b8736c49e19a5b8f6", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -42,7 +42,7 @@ use std::{cmp, fmt, mem};\n \n use errors::{\n     FieldIsPrivate, FieldIsPrivateLabel, FromPrivateDependencyInPublicInterface, InPublicInterface,\n-    InPublicInterfaceTraits, ItemIsPrivate, PrivateInPublicLint, ReportAccessLevel,\n+    InPublicInterfaceTraits, ItemIsPrivate, PrivateInPublicLint, ReportEffectiveVisibility,\n     UnnamedItemIsPrivate,\n };\n \n@@ -376,7 +376,7 @@ impl VisibilityLike for Option<AccessLevel> {\n     // (which require reaching the `DefId`s in them).\n     const SHALLOW: bool = true;\n     fn new_min(find: &FindMin<'_, '_, Self>, def_id: LocalDefId) -> Self {\n-        cmp::min(find.access_levels.map.get(&def_id).copied(), find.min)\n+        cmp::min(find.access_levels.get_access_level(def_id), find.min)\n     }\n }\n \n@@ -416,7 +416,7 @@ struct ReachEverythingInTheInterfaceVisitor<'a, 'tcx> {\n \n impl<'tcx> EmbargoVisitor<'tcx> {\n     fn get(&self, def_id: LocalDefId) -> Option<AccessLevel> {\n-        self.access_levels.map.get(&def_id).copied()\n+        self.access_levels.get_access_level(def_id)\n     }\n \n     fn update_with_hir_id(\n@@ -433,7 +433,7 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n         let old_level = self.get(def_id);\n         // Accessibility levels can only grow.\n         if level > old_level {\n-            self.access_levels.map.insert(def_id, level.unwrap());\n+            self.access_levels.set_access_level(def_id, level.unwrap());\n             self.changed = true;\n             level\n         } else {\n@@ -914,10 +914,31 @@ pub struct TestReachabilityVisitor<'tcx, 'a> {\n \n impl<'tcx, 'a> TestReachabilityVisitor<'tcx, 'a> {\n     fn access_level_diagnostic(&mut self, def_id: LocalDefId) {\n-        if self.tcx.has_attr(def_id.to_def_id(), sym::rustc_access_level) {\n-            let access_level = format!(\"{:?}\", self.access_levels.map.get(&def_id));\n-            let span = self.tcx.def_span(def_id.to_def_id());\n-            self.tcx.sess.emit_err(ReportAccessLevel { span, descr: access_level });\n+        let span = self.tcx.def_span(def_id.to_def_id());\n+        if self.tcx.has_attr(def_id.to_def_id(), sym::rustc_effective_visibility) {\n+            let mut error_msg = String::new();\n+\n+            let effective_vis =\n+                self.access_levels.get_effective_vis(def_id).copied().unwrap_or_default();\n+            for level in [\n+                AccessLevel::Public,\n+                AccessLevel::Exported,\n+                AccessLevel::Reachable,\n+                AccessLevel::ReachableFromImplTrait,\n+            ] {\n+                let vis_str = match effective_vis.get(level) {\n+                    Some(ty::Visibility::Restricted(restricted_id)) => {\n+                        format!(\"pub({})\", self.tcx.item_name(restricted_id.to_def_id()))\n+                    }\n+                    Some(ty::Visibility::Public) => \"pub\".to_string(),\n+                    None => \"pub(self)\".to_string(),\n+                };\n+                if level != AccessLevel::Public {\n+                    error_msg.push_str(\", \");\n+                }\n+                error_msg.push_str(&format!(\"{:?}: {}\", level, vis_str));\n+            }\n+            self.tcx.sess.emit_err(ReportEffectiveVisibility { span, descr: error_msg });\n         }\n     }\n }"}, {"sha": "9b1111c02c73f3bbf84dc1d8221f0656fdbb4f41", "filename": "compiler/rustc_resolve/src/access_levels.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -46,7 +46,7 @@ impl<'r, 'a> AccessLevelsVisitor<'r, 'a> {\n     /// This will also follow `use` chains (see PrivacyVisitor::set_import_binding_access_level).\n     fn set_bindings_access_level(&mut self, module_id: LocalDefId) {\n         assert!(self.r.module_map.contains_key(&&module_id.to_def_id()));\n-        let module_level = self.r.access_levels.map.get(&module_id).copied();\n+        let module_level = self.r.access_levels.get_access_level(module_id);\n         if !module_level.is_some() {\n             return;\n         }\n@@ -103,9 +103,9 @@ impl<'r, 'a> AccessLevelsVisitor<'r, 'a> {\n         def_id: LocalDefId,\n         access_level: Option<AccessLevel>,\n     ) -> Option<AccessLevel> {\n-        let old_level = self.r.access_levels.map.get(&def_id).copied();\n+        let old_level = self.r.access_levels.get_access_level(def_id);\n         if old_level < access_level {\n-            self.r.access_levels.map.insert(def_id, access_level.unwrap());\n+            self.r.access_levels.set_access_level(def_id, access_level.unwrap());\n             self.changed = true;\n             access_level\n         } else {\n@@ -131,7 +131,7 @@ impl<'r, 'ast> Visitor<'ast> for AccessLevelsVisitor<'ast, 'r> {\n             // Foreign modules inherit level from parents.\n             ast::ItemKind::ForeignMod(..) => {\n                 let parent_level =\n-                    self.r.access_levels.map.get(&self.r.local_parent(def_id)).copied();\n+                    self.r.access_levels.get_access_level(self.r.local_parent(def_id));\n                 self.set_access_level(item.id, parent_level);\n             }\n \n@@ -151,15 +151,15 @@ impl<'r, 'ast> Visitor<'ast> for AccessLevelsVisitor<'ast, 'r> {\n                 self.set_bindings_access_level(def_id);\n                 for variant in variants {\n                     let variant_def_id = self.r.local_def_id(variant.id);\n-                    let variant_level = self.r.access_levels.map.get(&variant_def_id).copied();\n+                    let variant_level = self.r.access_levels.get_access_level(variant_def_id);\n                     for field in variant.data.fields() {\n                         self.set_access_level(field.id, variant_level);\n                     }\n                 }\n             }\n \n             ast::ItemKind::Struct(ref def, _) | ast::ItemKind::Union(ref def, _) => {\n-                let inherited_level = self.r.access_levels.map.get(&def_id).copied();\n+                let inherited_level = self.r.access_levels.get_access_level(def_id);\n                 for field in def.fields() {\n                     if field.vis.kind.is_pub() {\n                         self.set_access_level(field.id, inherited_level);"}, {"sha": "562360130e92f3696b94c1e70732f758a2c65a79", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -1214,7 +1214,6 @@ symbols! {\n         rust_eh_unregister_frames,\n         rust_oom,\n         rustc,\n-        rustc_access_level,\n         rustc_allocator,\n         rustc_allocator_nounwind,\n         rustc_allocator_zeroed,\n@@ -1242,6 +1241,7 @@ symbols! {\n         rustc_dump_program_clauses,\n         rustc_dump_user_substs,\n         rustc_dump_vtable,\n+        rustc_effective_visibility,\n         rustc_error,\n         rustc_evaluate_where_clauses,\n         rustc_expected_cgu_reuse,"}, {"sha": "ffb18a5ba8b36ff4ad701253e2765eb71820ac75", "filename": "library/core/src/unicode/printable.rs", "status": "modified", "additions": 72, "deletions": 59, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/library%2Fcore%2Fsrc%2Funicode%2Fprintable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/library%2Fcore%2Fsrc%2Funicode%2Fprintable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Funicode%2Fprintable.rs?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -54,7 +54,7 @@ pub(crate) fn is_printable(x: char) -> bool {\n         if 0x2a6e0 <= x && x < 0x2a700 {\n             return false;\n         }\n-        if 0x2b739 <= x && x < 0x2b740 {\n+        if 0x2b73a <= x && x < 0x2b740 {\n             return false;\n         }\n         if 0x2b81e <= x && x < 0x2b820 {\n@@ -69,7 +69,10 @@ pub(crate) fn is_printable(x: char) -> bool {\n         if 0x2fa1e <= x && x < 0x30000 {\n             return false;\n         }\n-        if 0x3134b <= x && x < 0xe0100 {\n+        if 0x3134b <= x && x < 0x31350 {\n+            return false;\n+        }\n+        if 0x323b0 <= x && x < 0xe0100 {\n             return false;\n         }\n         if 0xe01f0 <= x && x < 0x110000 {\n@@ -92,7 +95,7 @@ const SINGLETONS0U: &[(u8, u8)] = &[\n     (0x0b, 25),\n     (0x0c, 26),\n     (0x0d, 16),\n-    (0x0e, 13),\n+    (0x0e, 12),\n     (0x0f, 4),\n     (0x10, 3),\n     (0x12, 18),\n@@ -142,24 +145,24 @@ const SINGLETONS0L: &[u8] = &[\n     0xe4, 0xe5, 0xf0, 0x0d, 0x11, 0x45, 0x49, 0x64,\n     0x65, 0x80, 0x84, 0xb2, 0xbc, 0xbe, 0xbf, 0xd5,\n     0xd7, 0xf0, 0xf1, 0x83, 0x85, 0x8b, 0xa4, 0xa6,\n-    0xbe, 0xbf, 0xc5, 0xc7, 0xce, 0xcf, 0xda, 0xdb,\n-    0x48, 0x98, 0xbd, 0xcd, 0xc6, 0xce, 0xcf, 0x49,\n-    0x4e, 0x4f, 0x57, 0x59, 0x5e, 0x5f, 0x89, 0x8e,\n-    0x8f, 0xb1, 0xb6, 0xb7, 0xbf, 0xc1, 0xc6, 0xc7,\n-    0xd7, 0x11, 0x16, 0x17, 0x5b, 0x5c, 0xf6, 0xf7,\n-    0xfe, 0xff, 0x80, 0x6d, 0x71, 0xde, 0xdf, 0x0e,\n-    0x1f, 0x6e, 0x6f, 0x1c, 0x1d, 0x5f, 0x7d, 0x7e,\n-    0xae, 0xaf, 0x7f, 0xbb, 0xbc, 0x16, 0x17, 0x1e,\n-    0x1f, 0x46, 0x47, 0x4e, 0x4f, 0x58, 0x5a, 0x5c,\n-    0x5e, 0x7e, 0x7f, 0xb5, 0xc5, 0xd4, 0xd5, 0xdc,\n-    0xf0, 0xf1, 0xf5, 0x72, 0x73, 0x8f, 0x74, 0x75,\n-    0x96, 0x26, 0x2e, 0x2f, 0xa7, 0xaf, 0xb7, 0xbf,\n-    0xc7, 0xcf, 0xd7, 0xdf, 0x9a, 0x40, 0x97, 0x98,\n-    0x30, 0x8f, 0x1f, 0xd2, 0xd4, 0xce, 0xff, 0x4e,\n-    0x4f, 0x5a, 0x5b, 0x07, 0x08, 0x0f, 0x10, 0x27,\n-    0x2f, 0xee, 0xef, 0x6e, 0x6f, 0x37, 0x3d, 0x3f,\n-    0x42, 0x45, 0x90, 0x91, 0x53, 0x67, 0x75, 0xc8,\n-    0xc9, 0xd0, 0xd1, 0xd8, 0xd9, 0xe7, 0xfe, 0xff,\n+    0xbe, 0xbf, 0xc5, 0xc7, 0xcf, 0xda, 0xdb, 0x48,\n+    0x98, 0xbd, 0xcd, 0xc6, 0xce, 0xcf, 0x49, 0x4e,\n+    0x4f, 0x57, 0x59, 0x5e, 0x5f, 0x89, 0x8e, 0x8f,\n+    0xb1, 0xb6, 0xb7, 0xbf, 0xc1, 0xc6, 0xc7, 0xd7,\n+    0x11, 0x16, 0x17, 0x5b, 0x5c, 0xf6, 0xf7, 0xfe,\n+    0xff, 0x80, 0x6d, 0x71, 0xde, 0xdf, 0x0e, 0x1f,\n+    0x6e, 0x6f, 0x1c, 0x1d, 0x5f, 0x7d, 0x7e, 0xae,\n+    0xaf, 0x7f, 0xbb, 0xbc, 0x16, 0x17, 0x1e, 0x1f,\n+    0x46, 0x47, 0x4e, 0x4f, 0x58, 0x5a, 0x5c, 0x5e,\n+    0x7e, 0x7f, 0xb5, 0xc5, 0xd4, 0xd5, 0xdc, 0xf0,\n+    0xf1, 0xf5, 0x72, 0x73, 0x8f, 0x74, 0x75, 0x96,\n+    0x26, 0x2e, 0x2f, 0xa7, 0xaf, 0xb7, 0xbf, 0xc7,\n+    0xcf, 0xd7, 0xdf, 0x9a, 0x40, 0x97, 0x98, 0x30,\n+    0x8f, 0x1f, 0xd2, 0xd4, 0xce, 0xff, 0x4e, 0x4f,\n+    0x5a, 0x5b, 0x07, 0x08, 0x0f, 0x10, 0x27, 0x2f,\n+    0xee, 0xef, 0x6e, 0x6f, 0x37, 0x3d, 0x3f, 0x42,\n+    0x45, 0x90, 0x91, 0x53, 0x67, 0x75, 0xc8, 0xc9,\n+    0xd0, 0xd1, 0xd8, 0xd9, 0xe7, 0xfe, 0xff,\n ];\n #[rustfmt::skip]\n const SINGLETONS1U: &[(u8, u8)] = &[\n@@ -184,10 +187,12 @@ const SINGLETONS1U: &[(u8, u8)] = &[\n     (0x19, 13),\n     (0x1c, 5),\n     (0x1d, 8),\n+    (0x1f, 1),\n     (0x24, 1),\n     (0x6a, 4),\n     (0x6b, 2),\n     (0xaf, 3),\n+    (0xb1, 2),\n     (0xbc, 2),\n     (0xcf, 2),\n     (0xd1, 2),\n@@ -203,7 +208,7 @@ const SINGLETONS1U: &[(u8, u8)] = &[\n     (0xee, 32),\n     (0xf0, 4),\n     (0xf8, 2),\n-    (0xfa, 2),\n+    (0xfa, 3),\n     (0xfb, 1),\n ];\n #[rustfmt::skip]\n@@ -220,18 +225,19 @@ const SINGLETONS1L: &[u8] = &[\n     0x0a, 0x0b, 0x14, 0x17, 0x36, 0x39, 0x3a, 0xa8,\n     0xa9, 0xd8, 0xd9, 0x09, 0x37, 0x90, 0x91, 0xa8,\n     0x07, 0x0a, 0x3b, 0x3e, 0x66, 0x69, 0x8f, 0x92,\n-    0x6f, 0x5f, 0xbf, 0xee, 0xef, 0x5a, 0x62, 0xf4,\n-    0xfc, 0xff, 0x9a, 0x9b, 0x2e, 0x2f, 0x27, 0x28,\n-    0x55, 0x9d, 0xa0, 0xa1, 0xa3, 0xa4, 0xa7, 0xa8,\n-    0xad, 0xba, 0xbc, 0xc4, 0x06, 0x0b, 0x0c, 0x15,\n-    0x1d, 0x3a, 0x3f, 0x45, 0x51, 0xa6, 0xa7, 0xcc,\n-    0xcd, 0xa0, 0x07, 0x19, 0x1a, 0x22, 0x25, 0x3e,\n-    0x3f, 0xe7, 0xec, 0xef, 0xff, 0xc5, 0xc6, 0x04,\n-    0x20, 0x23, 0x25, 0x26, 0x28, 0x33, 0x38, 0x3a,\n-    0x48, 0x4a, 0x4c, 0x50, 0x53, 0x55, 0x56, 0x58,\n-    0x5a, 0x5c, 0x5e, 0x60, 0x63, 0x65, 0x66, 0x6b,\n-    0x73, 0x78, 0x7d, 0x7f, 0x8a, 0xa4, 0xaa, 0xaf,\n-    0xb0, 0xc0, 0xd0, 0xae, 0xaf, 0x6e, 0x6f, 0x93,\n+    0x11, 0x6f, 0x5f, 0xbf, 0xee, 0xef, 0x5a, 0x62,\n+    0xf4, 0xfc, 0xff, 0x53, 0x54, 0x9a, 0x9b, 0x2e,\n+    0x2f, 0x27, 0x28, 0x55, 0x9d, 0xa0, 0xa1, 0xa3,\n+    0xa4, 0xa7, 0xa8, 0xad, 0xba, 0xbc, 0xc4, 0x06,\n+    0x0b, 0x0c, 0x15, 0x1d, 0x3a, 0x3f, 0x45, 0x51,\n+    0xa6, 0xa7, 0xcc, 0xcd, 0xa0, 0x07, 0x19, 0x1a,\n+    0x22, 0x25, 0x3e, 0x3f, 0xe7, 0xec, 0xef, 0xff,\n+    0xc5, 0xc6, 0x04, 0x20, 0x23, 0x25, 0x26, 0x28,\n+    0x33, 0x38, 0x3a, 0x48, 0x4a, 0x4c, 0x50, 0x53,\n+    0x55, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 0x60, 0x63,\n+    0x65, 0x66, 0x6b, 0x73, 0x78, 0x7d, 0x7f, 0x8a,\n+    0xa4, 0xaa, 0xaf, 0xb0, 0xc0, 0xd0, 0xae, 0xaf,\n+    0x6e, 0x6f, 0xbe, 0x93,\n ];\n #[rustfmt::skip]\n const NORMAL0: &[u8] = &[\n@@ -272,7 +278,7 @@ const NORMAL0: &[u8] = &[\n     0x1b, 0x07,\n     0x57, 0x07,\n     0x02, 0x06,\n-    0x16, 0x0d,\n+    0x17, 0x0c,\n     0x50, 0x04,\n     0x43, 0x03,\n     0x2d, 0x03,\n@@ -424,8 +430,8 @@ const NORMAL1: &[u8] = &[\n     0x33, 0x07,\n     0x2e, 0x08,\n     0x0a, 0x81, 0x26,\n-    0x52, 0x4e,\n-    0x28, 0x08,\n+    0x52, 0x4b,\n+    0x2b, 0x08,\n     0x2a, 0x16,\n     0x1a, 0x26,\n     0x1c, 0x14,\n@@ -438,7 +444,7 @@ const NORMAL1: &[u8] = &[\n     0x48, 0x08,\n     0x27, 0x09,\n     0x75, 0x0b,\n-    0x3f, 0x41,\n+    0x42, 0x3e,\n     0x2a, 0x06,\n     0x3b, 0x05,\n     0x0a, 0x06,\n@@ -464,7 +470,8 @@ const NORMAL1: &[u8] = &[\n     0x45, 0x1b,\n     0x48, 0x08,\n     0x53, 0x0d,\n-    0x49, 0x81, 0x07,\n+    0x49, 0x07,\n+    0x0a, 0x80, 0xf6,\n     0x46, 0x0a,\n     0x1d, 0x03,\n     0x47, 0x49,\n@@ -473,14 +480,17 @@ const NORMAL1: &[u8] = &[\n     0x0a, 0x06,\n     0x39, 0x07,\n     0x0a, 0x81, 0x36,\n-    0x19, 0x80, 0xb7,\n+    0x19, 0x07,\n+    0x3b, 0x03,\n+    0x1c, 0x56,\n     0x01, 0x0f,\n     0x32, 0x0d,\n     0x83, 0x9b, 0x66,\n     0x75, 0x0b,\n     0x80, 0xc4, 0x8a, 0x4c,\n     0x63, 0x0d,\n-    0x84, 0x2f, 0x8f, 0xd1,\n+    0x84, 0x30, 0x10,\n+    0x16, 0x8f, 0xaa,\n     0x82, 0x47, 0xa1, 0xb9,\n     0x82, 0x39, 0x07,\n     0x2a, 0x04,\n@@ -498,8 +508,9 @@ const NORMAL1: &[u8] = &[\n     0x97, 0xf8, 0x08,\n     0x84, 0xd6, 0x2a,\n     0x09, 0xa2, 0xe7,\n-    0x81, 0x33, 0x2d,\n-    0x03, 0x11,\n+    0x81, 0x33, 0x0f,\n+    0x01, 0x1d,\n+    0x06, 0x0e,\n     0x04, 0x08,\n     0x81, 0x8c, 0x89, 0x04,\n     0x6b, 0x05,\n@@ -511,21 +522,26 @@ const NORMAL1: &[u8] = &[\n     0x80, 0xf6, 0x0a,\n     0x73, 0x08,\n     0x70, 0x15,\n-    0x46, 0x80, 0x9a,\n+    0x46, 0x7a,\n+    0x14, 0x0c,\n     0x14, 0x0c,\n     0x57, 0x09,\n     0x19, 0x80, 0x87,\n     0x81, 0x47, 0x03,\n     0x85, 0x42, 0x0f,\n     0x15, 0x84, 0x50,\n-    0x1f, 0x80, 0xe1,\n-    0x2b, 0x80, 0xd5,\n+    0x1f, 0x06,\n+    0x06, 0x80, 0xd5,\n+    0x2b, 0x05,\n+    0x3e, 0x21,\n+    0x01, 0x70,\n     0x2d, 0x03,\n     0x1a, 0x04,\n     0x02, 0x81, 0x40,\n     0x1f, 0x11,\n     0x3a, 0x05,\n-    0x01, 0x84, 0xe0,\n+    0x01, 0x81, 0xd0,\n+    0x2a, 0x82, 0xe6,\n     0x80, 0xf7, 0x29,\n     0x4c, 0x04,\n     0x0a, 0x04,\n@@ -546,11 +562,11 @@ const NORMAL1: &[u8] = &[\n     0x09, 0x07,\n     0x02, 0x0e,\n     0x06, 0x80, 0x9a,\n-    0x83, 0xd8, 0x05,\n-    0x10, 0x03,\n+    0x83, 0xd8, 0x04,\n+    0x11, 0x03,\n     0x0d, 0x03,\n-    0x74, 0x0c,\n-    0x59, 0x07,\n+    0x77, 0x04,\n+    0x5f, 0x06,\n     0x0c, 0x04,\n     0x01, 0x0f,\n     0x0c, 0x04,\n@@ -559,15 +575,12 @@ const NORMAL1: &[u8] = &[\n     0x28, 0x08,\n     0x22, 0x4e,\n     0x81, 0x54, 0x0c,\n-    0x15, 0x03,\n-    0x05, 0x03,\n-    0x07, 0x09,\n     0x1d, 0x03,\n-    0x0b, 0x05,\n-    0x06, 0x0a,\n-    0x0a, 0x06,\n-    0x08, 0x08,\n-    0x07, 0x09,\n+    0x09, 0x07,\n+    0x36, 0x08,\n+    0x0e, 0x04,\n+    0x09, 0x07,\n+    0x09, 0x07,\n     0x80, 0xcb, 0x25,\n     0x0a, 0x84, 0x06,\n ];"}, {"sha": "bd69ca520c2e907293739efed112e708c77a6c3d", "filename": "library/core/src/unicode/unicode_data.rs", "status": "modified", "additions": 118, "deletions": 114, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -99,21 +99,21 @@ fn skip_search<const SOR: usize, const OFFSETS: usize>(\n     offset_idx % 2 == 1\n }\n \n-pub const UNICODE_VERSION: (u8, u8, u8) = (14, 0, 0);\n+pub const UNICODE_VERSION: (u8, u8, u8) = (15, 0, 0);\n \n #[rustfmt::skip]\n pub mod alphabetic {\n-    static SHORT_OFFSET_RUNS: [u32; 51] = [\n-        706, 33559113, 876615277, 956309270, 1166025910, 1314925568, 1319120901, 1398813696,\n-        1449151936, 1451271309, 1455465997, 1463867300, 1652619520, 1663105646, 1665203518,\n-        1711342208, 1797326647, 1891700352, 2044795904, 2397118176, 2485199770, 2495688592,\n-        2506175535, 2512471040, 2514568775, 2516674560, 2518772281, 2520870464, 2552334328,\n-        2583792854, 2587996144, 2594287907, 2608968444, 2621553664, 2623656960, 2644629158,\n-        2722225920, 2770461328, 2808211424, 2816601600, 2850156848, 2988572672, 3001198304,\n-        3003299641, 3007499938, 3015896033, 3020093440, 3022191134, 3024289792, 3026391883,\n-        3029603147,\n+    static SHORT_OFFSET_RUNS: [u32; 53] = [\n+        706, 33559113, 872420973, 952114966, 1161831606, 1310731264, 1314926597, 1394619392,\n+        1444957632, 1447077005, 1451271693, 1459672996, 1648425216, 1658911342, 1661009214,\n+        1707147904, 1793132343, 1887506048, 2040601600, 2392923872, 2481005466, 2504077200,\n+        2514564144, 2520859648, 2527151687, 2529257472, 2531355193, 2533453376, 2564917240,\n+        2596375766, 2600579056, 2606870819, 2621551356, 2642525184, 2644628480, 2665600678,\n+        2743197440, 2791432848, 2841765072, 2850154464, 2854350336, 2887905584, 3026321408,\n+        3038947040, 3041048378, 3045248674, 3053644769, 3057842176, 3059939870, 3062038528,\n+        3064140619, 3066241968, 3071550384,\n     ];\n-    static OFFSETS: [u8; 1445] = [\n+    static OFFSETS: [u8; 1465] = [\n         65, 26, 6, 26, 47, 1, 10, 1, 4, 1, 5, 23, 1, 31, 1, 0, 4, 12, 14, 5, 7, 1, 1, 1, 86, 1, 42,\n         5, 1, 2, 2, 4, 1, 1, 6, 1, 1, 3, 1, 1, 1, 20, 1, 83, 1, 139, 8, 166, 1, 38, 2, 1, 6, 41, 39,\n         14, 1, 1, 1, 2, 1, 2, 1, 1, 8, 27, 4, 4, 29, 11, 5, 56, 1, 7, 14, 102, 1, 8, 4, 8, 4, 3, 10,\n@@ -123,50 +123,51 @@ pub mod alphabetic {\n         2, 1, 2, 4, 5, 4, 2, 2, 2, 4, 1, 7, 4, 1, 1, 17, 6, 11, 3, 1, 9, 1, 3, 1, 22, 1, 7, 1, 2, 1,\n         5, 3, 9, 1, 3, 1, 2, 3, 1, 15, 4, 21, 4, 4, 3, 1, 8, 2, 2, 2, 22, 1, 7, 1, 2, 1, 5, 3, 8, 2,\n         2, 2, 2, 9, 2, 4, 2, 1, 5, 13, 1, 16, 2, 1, 6, 3, 3, 1, 4, 3, 2, 1, 1, 1, 2, 3, 2, 3, 3, 3,\n-        12, 4, 5, 3, 3, 1, 3, 3, 1, 6, 1, 40, 4, 1, 8, 1, 3, 1, 23, 1, 16, 3, 8, 1, 3, 1, 3, 8, 2,\n-        1, 3, 2, 1, 2, 4, 28, 4, 1, 8, 1, 3, 1, 23, 1, 10, 1, 5, 3, 8, 1, 3, 1, 3, 8, 2, 6, 2, 1, 4,\n-        13, 2, 13, 13, 1, 3, 1, 41, 2, 8, 1, 3, 1, 3, 1, 1, 5, 4, 7, 5, 22, 6, 1, 3, 1, 18, 3, 24,\n-        1, 9, 1, 1, 2, 7, 8, 6, 1, 1, 1, 8, 18, 2, 13, 58, 5, 7, 6, 1, 51, 2, 1, 1, 1, 5, 1, 24, 1,\n-        1, 1, 19, 1, 3, 2, 5, 1, 1, 6, 1, 14, 4, 32, 1, 63, 8, 1, 36, 4, 17, 6, 16, 1, 36, 67, 55,\n-        1, 1, 2, 5, 16, 64, 10, 4, 2, 38, 1, 1, 5, 1, 2, 43, 1, 0, 1, 4, 2, 7, 1, 1, 1, 4, 2, 41, 1,\n-        4, 2, 33, 1, 4, 2, 7, 1, 1, 1, 4, 2, 15, 1, 57, 1, 4, 2, 67, 37, 16, 16, 86, 2, 6, 3, 0, 2,\n-        17, 1, 26, 5, 75, 3, 11, 7, 20, 11, 21, 12, 20, 12, 13, 1, 3, 1, 2, 12, 52, 2, 19, 14, 1, 4,\n-        1, 67, 89, 7, 43, 5, 70, 10, 31, 1, 12, 4, 9, 23, 30, 2, 5, 11, 44, 4, 26, 54, 28, 4, 63, 2,\n-        20, 50, 1, 23, 2, 11, 3, 49, 52, 1, 15, 1, 8, 51, 42, 2, 4, 10, 44, 1, 11, 14, 55, 22, 3,\n-        10, 36, 2, 9, 7, 43, 2, 3, 41, 4, 1, 6, 1, 2, 3, 1, 5, 192, 39, 14, 11, 0, 2, 6, 2, 38, 2,\n-        6, 2, 8, 1, 1, 1, 1, 1, 1, 1, 31, 2, 53, 1, 7, 1, 1, 3, 3, 1, 7, 3, 4, 2, 6, 4, 13, 5, 3, 1,\n-        7, 116, 1, 13, 1, 16, 13, 101, 1, 4, 1, 2, 10, 1, 1, 3, 5, 6, 1, 1, 1, 1, 1, 1, 4, 1, 11, 2,\n-        4, 5, 5, 4, 1, 17, 41, 0, 52, 0, 229, 6, 4, 3, 2, 12, 38, 1, 1, 5, 1, 2, 56, 7, 1, 16, 23,\n-        9, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 32, 47, 1, 0, 3, 25, 9, 7, 5, 2, 5, 4,\n-        86, 6, 3, 1, 90, 1, 4, 5, 43, 1, 94, 17, 32, 48, 16, 0, 0, 64, 0, 67, 46, 2, 0, 3, 16, 10,\n-        2, 20, 47, 5, 8, 3, 113, 39, 9, 2, 103, 2, 64, 5, 2, 1, 1, 1, 5, 24, 20, 1, 33, 24, 52, 12,\n-        68, 1, 1, 44, 6, 3, 1, 1, 3, 10, 33, 5, 35, 13, 29, 3, 51, 1, 12, 15, 1, 16, 16, 10, 5, 1,\n-        55, 9, 14, 18, 23, 3, 69, 1, 1, 1, 1, 24, 3, 2, 16, 2, 4, 11, 6, 2, 6, 2, 6, 9, 7, 1, 7, 1,\n-        43, 1, 14, 6, 123, 21, 0, 12, 23, 4, 49, 0, 0, 2, 106, 38, 7, 12, 5, 5, 12, 1, 13, 1, 5, 1,\n-        1, 1, 2, 1, 2, 1, 108, 33, 0, 18, 64, 2, 54, 40, 12, 116, 5, 1, 135, 36, 26, 6, 26, 11, 89,\n-        3, 6, 2, 6, 2, 6, 2, 3, 35, 12, 1, 26, 1, 19, 1, 2, 1, 15, 2, 14, 34, 123, 69, 53, 0, 29, 3,\n+        12, 4, 5, 3, 3, 1, 3, 3, 1, 6, 1, 40, 13, 1, 3, 1, 23, 1, 16, 3, 8, 1, 3, 1, 3, 8, 2, 1, 3,\n+        2, 1, 2, 4, 28, 4, 1, 8, 1, 3, 1, 23, 1, 10, 1, 5, 3, 8, 1, 3, 1, 3, 8, 2, 6, 2, 1, 4, 13,\n+        3, 12, 13, 1, 3, 1, 41, 2, 8, 1, 3, 1, 3, 1, 1, 5, 4, 7, 5, 22, 6, 1, 3, 1, 18, 3, 24, 1, 9,\n+        1, 1, 2, 7, 8, 6, 1, 1, 1, 8, 18, 2, 13, 58, 5, 7, 6, 1, 51, 2, 1, 1, 1, 5, 1, 24, 1, 1, 1,\n+        19, 1, 3, 2, 5, 1, 1, 6, 1, 14, 4, 32, 1, 63, 8, 1, 36, 4, 19, 4, 16, 1, 36, 67, 55, 1, 1,\n+        2, 5, 16, 64, 10, 4, 2, 38, 1, 1, 5, 1, 2, 43, 1, 0, 1, 4, 2, 7, 1, 1, 1, 4, 2, 41, 1, 4, 2,\n+        33, 1, 4, 2, 7, 1, 1, 1, 4, 2, 15, 1, 57, 1, 4, 2, 67, 37, 16, 16, 86, 2, 6, 3, 0, 2, 17, 1,\n+        26, 5, 75, 3, 11, 7, 20, 11, 21, 12, 20, 12, 13, 1, 3, 1, 2, 12, 52, 2, 19, 14, 1, 4, 1, 67,\n+        89, 7, 43, 5, 70, 10, 31, 1, 12, 4, 9, 23, 30, 2, 5, 11, 44, 4, 26, 54, 28, 4, 63, 2, 20,\n+        50, 1, 23, 2, 11, 3, 49, 52, 1, 15, 1, 8, 51, 42, 2, 4, 10, 44, 1, 11, 14, 55, 22, 3, 10,\n+        36, 2, 9, 7, 43, 2, 3, 41, 4, 1, 6, 1, 2, 3, 1, 5, 192, 39, 14, 11, 0, 2, 6, 2, 38, 2, 6, 2,\n+        8, 1, 1, 1, 1, 1, 1, 1, 31, 2, 53, 1, 7, 1, 1, 3, 3, 1, 7, 3, 4, 2, 6, 4, 13, 5, 3, 1, 7,\n+        116, 1, 13, 1, 16, 13, 101, 1, 4, 1, 2, 10, 1, 1, 3, 5, 6, 1, 1, 1, 1, 1, 1, 4, 1, 11, 2, 4,\n+        5, 5, 4, 1, 17, 41, 0, 52, 0, 229, 6, 4, 3, 2, 12, 38, 1, 1, 5, 1, 2, 56, 7, 1, 16, 23, 9,\n+        7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 32, 47, 1, 0, 3, 25, 9, 7, 5, 2, 5, 4, 86,\n+        6, 3, 1, 90, 1, 4, 5, 43, 1, 94, 17, 32, 48, 16, 0, 0, 64, 0, 67, 46, 2, 0, 3, 16, 10, 2,\n+        20, 47, 5, 8, 3, 113, 39, 9, 2, 103, 2, 64, 5, 2, 1, 1, 1, 5, 24, 20, 1, 33, 24, 52, 12, 68,\n+        1, 1, 44, 6, 3, 1, 1, 3, 10, 33, 5, 35, 13, 29, 3, 51, 1, 12, 15, 1, 16, 16, 10, 5, 1, 55,\n+        9, 14, 18, 23, 3, 69, 1, 1, 1, 1, 24, 3, 2, 16, 2, 4, 11, 6, 2, 6, 2, 6, 9, 7, 1, 7, 1, 43,\n+        1, 14, 6, 123, 21, 0, 12, 23, 4, 49, 0, 0, 2, 106, 38, 7, 12, 5, 5, 12, 1, 13, 1, 5, 1, 1,\n+        1, 2, 1, 2, 1, 108, 33, 0, 18, 64, 2, 54, 40, 12, 116, 5, 1, 135, 36, 26, 6, 26, 11, 89, 3,\n+        6, 2, 6, 2, 6, 2, 3, 35, 12, 1, 26, 1, 19, 1, 2, 1, 15, 2, 14, 34, 123, 69, 53, 0, 29, 3,\n         49, 47, 32, 13, 30, 5, 43, 5, 30, 2, 36, 4, 8, 1, 5, 42, 158, 18, 36, 4, 36, 4, 40, 8, 52,\n         12, 11, 1, 15, 1, 7, 1, 2, 1, 11, 1, 15, 1, 7, 1, 2, 67, 0, 9, 22, 10, 8, 24, 6, 1, 42, 1,\n         9, 69, 6, 2, 1, 1, 44, 1, 2, 3, 1, 2, 23, 10, 23, 9, 31, 65, 19, 1, 2, 10, 22, 10, 26, 70,\n         56, 6, 2, 64, 4, 1, 2, 5, 8, 1, 3, 1, 29, 42, 29, 3, 29, 35, 8, 1, 28, 27, 54, 10, 22, 10,\n         19, 13, 18, 110, 73, 55, 51, 13, 51, 13, 40, 0, 42, 1, 2, 3, 2, 78, 29, 10, 1, 8, 22, 42,\n-        18, 46, 21, 27, 23, 9, 70, 43, 5, 12, 55, 9, 1, 13, 25, 23, 51, 17, 4, 8, 35, 3, 1, 9, 64,\n-        1, 4, 9, 2, 10, 1, 1, 1, 35, 18, 1, 34, 2, 1, 6, 1, 65, 7, 1, 1, 1, 4, 1, 15, 1, 10, 7, 57,\n+        18, 46, 21, 27, 23, 9, 70, 43, 5, 10, 57, 9, 1, 13, 25, 23, 51, 17, 4, 8, 35, 3, 1, 9, 64,\n+        1, 4, 9, 2, 10, 1, 1, 1, 35, 18, 1, 34, 2, 1, 6, 4, 62, 7, 1, 1, 1, 4, 1, 15, 1, 10, 7, 57,\n         23, 4, 1, 8, 2, 2, 2, 22, 1, 7, 1, 2, 1, 5, 3, 8, 2, 2, 2, 2, 3, 1, 6, 1, 5, 7, 156, 66, 1,\n         3, 1, 4, 20, 3, 30, 66, 2, 2, 1, 1, 184, 54, 2, 7, 25, 6, 34, 63, 1, 1, 3, 1, 59, 54, 2, 1,\n         71, 27, 2, 14, 21, 7, 185, 57, 103, 64, 31, 8, 2, 1, 2, 8, 1, 2, 1, 30, 1, 2, 2, 2, 2, 4,\n         93, 8, 2, 46, 2, 6, 1, 1, 1, 2, 27, 51, 2, 10, 17, 72, 5, 1, 18, 73, 0, 9, 1, 45, 1, 7, 1,\n         1, 49, 30, 2, 22, 1, 14, 73, 7, 1, 2, 1, 44, 3, 1, 1, 2, 1, 3, 1, 1, 2, 2, 24, 6, 1, 2, 1,\n-        37, 1, 2, 1, 4, 1, 1, 0, 23, 185, 1, 79, 0, 102, 111, 17, 196, 0, 97, 15, 0, 0, 0, 0, 0, 7,\n-        31, 17, 79, 17, 30, 18, 48, 16, 4, 31, 21, 5, 19, 0, 64, 128, 75, 4, 57, 7, 17, 64, 2, 1, 1,\n-        12, 2, 14, 0, 8, 0, 42, 9, 0, 4, 1, 7, 1, 2, 1, 0, 45, 3, 17, 4, 8, 0, 0, 107, 5, 13, 3, 9,\n-        7, 10, 4, 1, 0, 85, 1, 71, 1, 2, 2, 1, 2, 2, 2, 4, 1, 12, 1, 1, 1, 7, 1, 65, 1, 4, 2, 8, 1,\n-        7, 1, 28, 1, 4, 1, 5, 1, 1, 3, 7, 1, 0, 2, 25, 1, 25, 1, 31, 1, 25, 1, 31, 1, 25, 1, 31, 1,\n-        25, 1, 31, 1, 25, 1, 8, 0, 31, 225, 7, 1, 17, 2, 7, 1, 2, 1, 5, 213, 45, 10, 7, 16, 1, 0,\n-        30, 18, 44, 0, 7, 1, 4, 1, 2, 1, 15, 1, 197, 59, 68, 3, 1, 3, 1, 0, 4, 1, 27, 1, 2, 1, 1, 2,\n-        1, 1, 10, 1, 4, 1, 1, 1, 1, 6, 1, 4, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n-        1, 1, 1, 1, 2, 1, 1, 2, 4, 1, 7, 1, 4, 1, 4, 1, 1, 1, 10, 1, 17, 5, 3, 1, 5, 1, 17, 0, 26,\n-        6, 26, 6, 26, 0, 0, 32, 0, 7, 222, 2, 0, 14, 0, 0, 0, 0, 0, 0,\n+        37, 1, 2, 1, 4, 1, 1, 0, 23, 9, 17, 1, 41, 3, 3, 111, 1, 79, 0, 102, 111, 17, 196, 0, 97,\n+        15, 0, 17, 6, 0, 0, 0, 0, 7, 31, 17, 79, 17, 30, 18, 48, 16, 4, 31, 21, 5, 19, 0, 64, 128,\n+        75, 4, 57, 7, 17, 64, 2, 1, 1, 12, 2, 14, 0, 8, 0, 42, 9, 0, 4, 1, 7, 1, 2, 1, 0, 15, 1, 29,\n+        3, 2, 1, 14, 4, 8, 0, 0, 107, 5, 13, 3, 9, 7, 10, 4, 1, 0, 85, 1, 71, 1, 2, 2, 1, 2, 2, 2,\n+        4, 1, 12, 1, 1, 1, 7, 1, 65, 1, 4, 2, 8, 1, 7, 1, 28, 1, 4, 1, 5, 1, 1, 3, 7, 1, 0, 2, 25,\n+        1, 25, 1, 31, 1, 25, 1, 31, 1, 25, 1, 31, 1, 25, 1, 31, 1, 25, 1, 8, 0, 31, 6, 6, 213, 7, 1,\n+        17, 2, 7, 1, 2, 1, 5, 5, 62, 33, 1, 112, 45, 10, 7, 16, 1, 0, 30, 18, 44, 0, 28, 0, 7, 1, 4,\n+        1, 2, 1, 15, 1, 197, 59, 68, 3, 1, 3, 1, 0, 4, 1, 27, 1, 2, 1, 1, 2, 1, 1, 10, 1, 4, 1, 1,\n+        1, 1, 6, 1, 4, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2,\n+        4, 1, 7, 1, 4, 1, 4, 1, 1, 1, 10, 1, 17, 5, 3, 1, 5, 1, 17, 0, 26, 6, 26, 6, 26, 0, 0, 32,\n+        0, 6, 222, 2, 0, 14, 0, 0, 0, 0, 0, 5, 0, 0,\n     ];\n     pub fn lookup(c: char) -> bool {\n         super::skip_search(\n@@ -182,11 +183,11 @@ pub mod case_ignorable {\n     static SHORT_OFFSET_RUNS: [u32; 35] = [\n         688, 44045149, 572528402, 576724925, 807414908, 878718981, 903913493, 929080568, 933275148,\n         937491230, 1138818560, 1147208189, 1210124160, 1222707713, 1235291428, 1260457643,\n-        1264654383, 1491147067, 1499536432, 1558257395, 1621177392, 1625385712, 1629581135,\n-        1642180592, 1658961053, 1671548672, 1679937895, 1688328704, 1709301760, 1734467888,\n-        1755439790, 1759635664, 1768027131, 1777205249, 1782514160,\n+        1264654383, 1499535675, 1507925040, 1566646003, 1629566000, 1650551536, 1658941263,\n+        1671540720, 1688321181, 1700908800, 1709298023, 1717688832, 1738661888, 1763828398,\n+        1797383403, 1805773008, 1809970171, 1819148289, 1824457200,\n     ];\n-    static OFFSETS: [u8; 855] = [\n+    static OFFSETS: [u8; 875] = [\n         39, 1, 6, 1, 11, 1, 35, 1, 1, 1, 71, 1, 4, 1, 1, 1, 4, 1, 2, 2, 0, 192, 4, 2, 4, 1, 9, 2,\n         1, 1, 251, 7, 207, 1, 5, 1, 49, 45, 1, 1, 1, 2, 1, 2, 1, 1, 44, 1, 11, 6, 10, 11, 1, 1, 35,\n         1, 10, 21, 16, 1, 101, 8, 1, 10, 1, 4, 33, 1, 1, 1, 30, 27, 91, 11, 58, 11, 4, 1, 2, 1, 24,\n@@ -195,7 +196,7 @@ pub mod case_ignorable {\n         57, 1, 4, 5, 1, 2, 4, 1, 20, 2, 22, 6, 1, 1, 58, 1, 2, 1, 1, 4, 8, 1, 7, 2, 11, 2, 30, 1,\n         61, 1, 12, 1, 50, 1, 3, 1, 55, 1, 1, 3, 5, 3, 1, 4, 7, 2, 11, 2, 29, 1, 58, 1, 2, 1, 6, 1,\n         5, 2, 20, 2, 28, 2, 57, 2, 4, 4, 8, 1, 20, 2, 29, 1, 72, 1, 7, 3, 1, 1, 90, 1, 2, 7, 11, 9,\n-        98, 1, 2, 9, 9, 1, 1, 6, 74, 2, 27, 1, 1, 1, 1, 1, 55, 14, 1, 5, 1, 2, 5, 11, 1, 36, 9, 1,\n+        98, 1, 2, 9, 9, 1, 1, 7, 73, 2, 27, 1, 1, 1, 1, 1, 55, 14, 1, 5, 1, 2, 5, 11, 1, 36, 9, 1,\n         102, 4, 1, 6, 1, 2, 2, 2, 25, 2, 4, 3, 16, 4, 13, 1, 2, 2, 6, 1, 15, 1, 94, 1, 0, 3, 0, 3,\n         29, 2, 30, 2, 30, 2, 64, 2, 1, 7, 8, 1, 2, 11, 3, 1, 5, 1, 45, 5, 51, 1, 65, 2, 34, 1, 118,\n         3, 4, 2, 9, 1, 6, 3, 219, 2, 2, 1, 58, 1, 1, 7, 1, 1, 1, 1, 2, 8, 6, 10, 2, 1, 39, 1, 8, 31,\n@@ -209,15 +210,16 @@ pub mod case_ignorable {\n         1, 1, 27, 1, 14, 2, 5, 2, 1, 1, 100, 5, 9, 3, 121, 1, 2, 1, 4, 1, 0, 1, 147, 17, 0, 16, 3,\n         1, 12, 16, 34, 1, 2, 1, 169, 1, 7, 1, 6, 1, 11, 1, 35, 1, 1, 1, 47, 1, 45, 2, 67, 1, 21, 3,\n         0, 1, 226, 1, 149, 5, 0, 6, 1, 42, 1, 9, 0, 3, 1, 2, 5, 4, 40, 3, 4, 1, 165, 2, 0, 4, 0, 2,\n-        153, 11, 49, 4, 123, 1, 54, 15, 41, 1, 2, 2, 10, 3, 49, 4, 2, 2, 2, 1, 4, 1, 10, 1, 50, 3,\n-        36, 5, 1, 8, 62, 1, 12, 2, 52, 9, 10, 4, 2, 1, 95, 3, 2, 1, 1, 2, 6, 1, 160, 1, 3, 8, 21, 2,\n-        57, 2, 3, 1, 37, 7, 3, 5, 195, 8, 2, 3, 1, 1, 23, 1, 84, 6, 1, 1, 4, 2, 1, 2, 238, 4, 6, 2,\n-        1, 2, 27, 2, 85, 8, 2, 1, 1, 2, 106, 1, 1, 1, 2, 6, 1, 1, 101, 3, 2, 4, 1, 5, 0, 9, 1, 2, 0,\n-        2, 1, 1, 4, 1, 144, 4, 2, 2, 4, 1, 32, 10, 40, 6, 2, 4, 8, 1, 9, 6, 2, 3, 46, 13, 1, 2, 0,\n-        7, 1, 6, 1, 1, 82, 22, 2, 7, 1, 2, 1, 2, 122, 6, 3, 1, 1, 2, 1, 7, 1, 1, 72, 2, 3, 1, 1, 1,\n-        0, 2, 0, 9, 0, 5, 59, 7, 9, 4, 0, 1, 63, 17, 64, 2, 1, 2, 0, 4, 1, 7, 1, 2, 0, 2, 1, 4, 0,\n-        46, 2, 23, 0, 3, 9, 16, 2, 7, 30, 4, 148, 3, 0, 55, 4, 50, 8, 1, 14, 1, 22, 5, 1, 15, 0, 7,\n-        1, 17, 2, 7, 1, 2, 1, 5, 0, 14, 0, 1, 61, 4, 0, 7, 109, 8, 0, 5, 0, 1, 30, 96, 128, 240, 0,\n+        80, 3, 70, 11, 49, 4, 123, 1, 54, 15, 41, 1, 2, 2, 10, 3, 49, 4, 2, 2, 2, 1, 4, 1, 10, 1,\n+        50, 3, 36, 5, 1, 8, 62, 1, 12, 2, 52, 9, 10, 4, 2, 1, 95, 3, 2, 1, 1, 2, 6, 1, 2, 1, 157, 1,\n+        3, 8, 21, 2, 57, 2, 3, 1, 37, 7, 3, 5, 195, 8, 2, 3, 1, 1, 23, 1, 84, 6, 1, 1, 4, 2, 1, 2,\n+        238, 4, 6, 2, 1, 2, 27, 2, 85, 8, 2, 1, 1, 2, 106, 1, 1, 1, 2, 6, 1, 1, 101, 3, 2, 4, 1, 5,\n+        0, 9, 1, 2, 0, 2, 1, 1, 4, 1, 144, 4, 2, 2, 4, 1, 32, 10, 40, 6, 2, 4, 8, 1, 9, 6, 2, 3, 46,\n+        13, 1, 2, 0, 7, 1, 6, 1, 1, 82, 22, 2, 7, 1, 2, 1, 2, 122, 6, 3, 1, 1, 2, 1, 7, 1, 1, 72, 2,\n+        3, 1, 1, 1, 0, 2, 11, 2, 52, 5, 5, 1, 1, 1, 0, 17, 6, 15, 0, 5, 59, 7, 9, 4, 0, 1, 63, 17,\n+        64, 2, 1, 2, 0, 4, 1, 7, 1, 2, 0, 2, 1, 4, 0, 46, 2, 23, 0, 3, 9, 16, 2, 7, 30, 4, 148, 3,\n+        0, 55, 4, 50, 8, 1, 14, 1, 22, 5, 1, 15, 0, 7, 1, 17, 2, 7, 1, 2, 1, 5, 5, 62, 33, 1, 160,\n+        14, 0, 1, 61, 4, 0, 5, 0, 7, 109, 8, 0, 5, 0, 1, 30, 96, 128, 240, 0,\n     ];\n     pub fn lookup(c: char) -> bool {\n         super::skip_search(\n@@ -230,24 +232,24 @@ pub mod case_ignorable {\n \n #[rustfmt::skip]\n pub mod cased {\n-    static SHORT_OFFSET_RUNS: [u32; 21] = [\n+    static SHORT_OFFSET_RUNS: [u32; 22] = [\n         4256, 115348384, 136322176, 144711446, 163587254, 320875520, 325101120, 350268208,\n         392231680, 404815649, 413205504, 421595008, 467733632, 484513952, 492924480, 497144832,\n-        501339814, 578936576, 627173632, 635564336, 640872842,\n+        501339814, 578936576, 627171376, 639756544, 643952944, 649261450,\n     ];\n-    static OFFSETS: [u8; 311] = [\n+    static OFFSETS: [u8; 315] = [\n         65, 26, 6, 26, 47, 1, 10, 1, 4, 1, 5, 23, 1, 31, 1, 195, 1, 4, 4, 208, 1, 36, 7, 2, 30, 5,\n         96, 1, 42, 4, 2, 2, 2, 4, 1, 1, 6, 1, 1, 3, 1, 1, 1, 20, 1, 83, 1, 139, 8, 166, 1, 38, 9,\n-        41, 0, 38, 1, 1, 5, 1, 2, 43, 2, 3, 0, 86, 2, 6, 0, 9, 7, 43, 2, 3, 64, 192, 64, 0, 2, 6, 2,\n+        41, 0, 38, 1, 1, 5, 1, 2, 43, 1, 4, 0, 86, 2, 6, 0, 9, 7, 43, 2, 3, 64, 192, 64, 0, 2, 6, 2,\n         38, 2, 6, 2, 8, 1, 1, 1, 1, 1, 1, 1, 31, 2, 53, 1, 7, 1, 1, 3, 3, 1, 7, 3, 4, 2, 6, 4, 13,\n         5, 3, 1, 7, 116, 1, 13, 1, 16, 13, 101, 1, 4, 1, 2, 10, 1, 1, 3, 5, 6, 1, 1, 1, 1, 1, 1, 4,\n         1, 6, 4, 1, 2, 4, 5, 5, 4, 1, 17, 32, 3, 2, 0, 52, 0, 229, 6, 4, 3, 2, 12, 38, 1, 1, 5, 1,\n-        0, 46, 18, 30, 132, 102, 3, 4, 1, 59, 5, 2, 1, 1, 1, 5, 27, 2, 1, 3, 0, 43, 1, 13, 7, 80, 0,\n+        0, 46, 18, 30, 132, 102, 3, 4, 1, 59, 5, 2, 1, 1, 1, 5, 24, 5, 1, 3, 0, 43, 1, 14, 6, 80, 0,\n         7, 12, 5, 0, 26, 6, 26, 0, 80, 96, 36, 4, 36, 116, 11, 1, 15, 1, 7, 1, 2, 1, 11, 1, 15, 1,\n         7, 1, 2, 0, 1, 2, 3, 1, 42, 1, 9, 0, 51, 13, 51, 0, 64, 0, 64, 0, 85, 1, 71, 1, 2, 2, 1, 2,\n         2, 2, 4, 1, 12, 1, 1, 1, 7, 1, 65, 1, 4, 2, 8, 1, 7, 1, 28, 1, 4, 1, 5, 1, 1, 3, 7, 1, 0, 2,\n-        25, 1, 25, 1, 31, 1, 25, 1, 31, 1, 25, 1, 31, 1, 25, 1, 31, 1, 25, 1, 8, 0, 10, 1, 20, 0,\n-        68, 0, 26, 6, 26, 6, 26, 0,\n+        25, 1, 25, 1, 31, 1, 25, 1, 31, 1, 25, 1, 31, 1, 25, 1, 31, 1, 25, 1, 8, 0, 10, 1, 20, 6, 6,\n+        0, 62, 0, 68, 0, 26, 6, 26, 6, 26, 0,\n     ];\n     pub fn lookup(c: char) -> bool {\n         super::skip_search(\n@@ -277,22 +279,22 @@ pub mod cc {\n \n #[rustfmt::skip]\n pub mod grapheme_extend {\n-    static SHORT_OFFSET_RUNS: [u32; 32] = [\n+    static SHORT_OFFSET_RUNS: [u32; 33] = [\n         768, 2098307, 6292881, 10490717, 522196754, 526393356, 731917551, 740306986, 752920175,\n         761309186, 778107678, 908131840, 912326558, 920715773, 924912129, 937495844, 962662059,\n-        966858799, 1205935152, 1277239027, 1340173040, 1344368463, 1352776861, 1365364480,\n-        1369559397, 1377950208, 1407311872, 1432478000, 1453449902, 1457645776, 1466826784,\n-        1476329968,\n+        966858799, 1214323760, 1285627635, 1348547648, 1369533168, 1377922895, 1386331293,\n+        1398918912, 1403113829, 1411504640, 1440866304, 1466032814, 1495393516, 1503783120,\n+        1508769824, 1518273008,\n     ];\n-    static OFFSETS: [u8; 707] = [\n+    static OFFSETS: [u8; 727] = [\n         0, 112, 0, 7, 0, 45, 1, 1, 1, 2, 1, 2, 1, 1, 72, 11, 48, 21, 16, 1, 101, 7, 2, 6, 2, 2, 1,\n         4, 35, 1, 30, 27, 91, 11, 58, 9, 9, 1, 24, 4, 1, 9, 1, 3, 1, 5, 43, 3, 60, 8, 42, 24, 1, 32,\n         55, 1, 1, 1, 4, 8, 4, 1, 3, 7, 10, 2, 29, 1, 58, 1, 1, 1, 2, 4, 8, 1, 9, 1, 10, 2, 26, 1, 2,\n         2, 57, 1, 4, 2, 4, 2, 2, 3, 3, 1, 30, 2, 3, 1, 11, 2, 57, 1, 4, 5, 1, 2, 4, 1, 20, 2, 22, 6,\n         1, 1, 58, 1, 1, 2, 1, 4, 8, 1, 7, 3, 10, 2, 30, 1, 59, 1, 1, 1, 12, 1, 9, 1, 40, 1, 3, 1,\n         55, 1, 1, 3, 5, 3, 1, 4, 7, 2, 11, 2, 29, 1, 58, 1, 2, 1, 2, 1, 3, 1, 5, 2, 7, 2, 11, 2, 28,\n         2, 57, 2, 1, 1, 2, 4, 8, 1, 9, 1, 10, 2, 29, 1, 72, 1, 4, 1, 2, 3, 1, 1, 8, 1, 81, 1, 2, 7,\n-        12, 8, 98, 1, 2, 9, 11, 6, 74, 2, 27, 1, 1, 1, 1, 1, 55, 14, 1, 5, 1, 2, 5, 11, 1, 36, 9, 1,\n+        12, 8, 98, 1, 2, 9, 11, 7, 73, 2, 27, 1, 1, 1, 1, 1, 55, 14, 1, 5, 1, 2, 5, 11, 1, 36, 9, 1,\n         102, 4, 1, 6, 1, 2, 2, 2, 25, 2, 4, 3, 16, 4, 13, 1, 2, 2, 6, 1, 15, 1, 0, 3, 0, 3, 29, 2,\n         30, 2, 30, 2, 64, 2, 1, 7, 8, 1, 2, 11, 9, 1, 45, 3, 1, 1, 117, 2, 34, 1, 118, 3, 4, 2, 9,\n         1, 6, 3, 219, 2, 2, 1, 58, 1, 1, 7, 1, 1, 1, 1, 2, 8, 6, 10, 2, 1, 48, 31, 49, 4, 48, 7, 1,\n@@ -301,16 +303,17 @@ pub mod grapheme_extend {\n         4, 1, 10, 32, 2, 80, 2, 0, 1, 3, 1, 4, 1, 25, 2, 5, 1, 151, 2, 26, 18, 13, 1, 38, 8, 25, 11,\n         46, 3, 48, 1, 2, 4, 2, 2, 39, 1, 67, 6, 2, 2, 2, 2, 12, 1, 8, 1, 47, 1, 51, 1, 1, 3, 2, 2,\n         5, 2, 1, 1, 42, 2, 8, 1, 238, 1, 2, 1, 4, 1, 0, 1, 0, 16, 16, 16, 0, 2, 0, 1, 226, 1, 149,\n-        5, 0, 3, 1, 2, 5, 4, 40, 3, 4, 1, 165, 2, 0, 4, 0, 2, 153, 11, 49, 4, 123, 1, 54, 15, 41, 1,\n-        2, 2, 10, 3, 49, 4, 2, 2, 7, 1, 61, 3, 36, 5, 1, 8, 62, 1, 12, 2, 52, 9, 10, 4, 2, 1, 95, 3,\n-        2, 1, 1, 2, 6, 1, 160, 1, 3, 8, 21, 2, 57, 2, 1, 1, 1, 1, 22, 1, 14, 7, 3, 5, 195, 8, 2, 3,\n-        1, 1, 23, 1, 81, 1, 2, 6, 1, 1, 2, 1, 1, 2, 1, 2, 235, 1, 2, 4, 6, 2, 1, 2, 27, 2, 85, 8, 2,\n-        1, 1, 2, 106, 1, 1, 1, 2, 6, 1, 1, 101, 3, 2, 4, 1, 5, 0, 9, 1, 2, 245, 1, 10, 2, 1, 1, 4,\n-        1, 144, 4, 2, 2, 4, 1, 32, 10, 40, 6, 2, 4, 8, 1, 9, 6, 2, 3, 46, 13, 1, 2, 0, 7, 1, 6, 1,\n-        1, 82, 22, 2, 7, 1, 2, 1, 2, 122, 6, 3, 1, 1, 2, 1, 7, 1, 1, 72, 2, 3, 1, 1, 1, 0, 2, 0, 5,\n-        59, 7, 0, 1, 63, 4, 81, 1, 0, 2, 0, 46, 2, 23, 0, 1, 1, 3, 4, 5, 8, 8, 2, 7, 30, 4, 148, 3,\n-        0, 55, 4, 50, 8, 1, 14, 1, 22, 5, 1, 15, 0, 7, 1, 17, 2, 7, 1, 2, 1, 5, 0, 7, 0, 1, 61, 4,\n-        0, 7, 109, 7, 0, 96, 128, 240, 0,\n+        5, 0, 3, 1, 2, 5, 4, 40, 3, 4, 1, 165, 2, 0, 4, 0, 2, 80, 3, 70, 11, 49, 4, 123, 1, 54, 15,\n+        41, 1, 2, 2, 10, 3, 49, 4, 2, 2, 7, 1, 61, 3, 36, 5, 1, 8, 62, 1, 12, 2, 52, 9, 10, 4, 2, 1,\n+        95, 3, 2, 1, 1, 2, 6, 1, 2, 1, 157, 1, 3, 8, 21, 2, 57, 2, 1, 1, 1, 1, 22, 1, 14, 7, 3, 5,\n+        195, 8, 2, 3, 1, 1, 23, 1, 81, 1, 2, 6, 1, 1, 2, 1, 1, 2, 1, 2, 235, 1, 2, 4, 6, 2, 1, 2,\n+        27, 2, 85, 8, 2, 1, 1, 2, 106, 1, 1, 1, 2, 6, 1, 1, 101, 3, 2, 4, 1, 5, 0, 9, 1, 2, 245, 1,\n+        10, 2, 1, 1, 4, 1, 144, 4, 2, 2, 4, 1, 32, 10, 40, 6, 2, 4, 8, 1, 9, 6, 2, 3, 46, 13, 1, 2,\n+        0, 7, 1, 6, 1, 1, 82, 22, 2, 7, 1, 2, 1, 2, 122, 6, 3, 1, 1, 2, 1, 7, 1, 1, 72, 2, 3, 1, 1,\n+        1, 0, 2, 11, 2, 52, 5, 5, 1, 1, 1, 0, 1, 6, 15, 0, 5, 59, 7, 0, 1, 63, 4, 81, 1, 0, 2, 0,\n+        46, 2, 23, 0, 1, 1, 3, 4, 5, 8, 8, 2, 7, 30, 4, 148, 3, 0, 55, 4, 50, 8, 1, 14, 1, 22, 5, 1,\n+        15, 0, 7, 1, 17, 2, 7, 1, 2, 1, 5, 100, 1, 160, 7, 0, 1, 61, 4, 0, 4, 0, 7, 109, 7, 0, 96,\n+        128, 240, 0,\n     ];\n     pub fn lookup(c: char) -> bool {\n         super::skip_search(\n@@ -327,50 +330,52 @@ pub mod lowercase {\n         14, 17, 0, 0, 9, 0, 0, 12, 13, 10, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 4, 1, 0, 15, 0, 8, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-        0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0,\n-        3, 0, 0, 7,\n+        0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0,\n+        3, 18, 0, 7,\n     ];\n-    const BITSET_INDEX_CHUNKS: &'static [[u8; 16]; 19] = &[\n+    const BITSET_INDEX_CHUNKS: &'static [[u8; 16]; 20] = &[\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 14, 55, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 42, 0, 50, 46, 48, 32],\n+        [0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 43, 0, 51, 47, 49, 33],\n         [0, 0, 0, 0, 10, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26],\n+        [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27],\n         [0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 0, 57, 0, 55, 55, 55, 0, 21, 21, 67, 21, 35, 24, 23, 36],\n-        [0, 5, 74, 0, 28, 15, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [0, 64, 33, 17, 22, 51, 52, 47, 45, 8, 34, 40, 0, 27, 13, 30],\n-        [11, 58, 0, 4, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 31, 0],\n-        [16, 25, 21, 37, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [16, 49, 2, 20, 66, 9, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        [63, 39, 54, 12, 73, 61, 18, 1, 6, 62, 71, 19, 68, 69, 3, 44],\n+        [0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 0, 57, 0, 55, 55, 55, 0, 22, 22, 67, 22, 36, 25, 24, 37],\n+        [0, 5, 68, 0, 29, 15, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [0, 64, 34, 17, 23, 52, 53, 48, 46, 8, 35, 42, 0, 28, 13, 31],\n+        [11, 58, 0, 6, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 32, 0],\n+        [16, 26, 22, 38, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [16, 50, 2, 21, 66, 9, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [16, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        [63, 41, 54, 12, 75, 61, 18, 1, 7, 62, 74, 20, 71, 72, 4, 45],\n     ];\n     const BITSET_CANONICAL: &'static [u64; 55] = &[\n         0b0000000000000000000000000000000000000000000000000000000000000000,\n         0b1111111111111111110000000000000000000000000011111111111111111111,\n         0b1010101010101010101010101010101010101010101010101010100000000010,\n+        0b0000000000000111111111111111111111111111111111111111111111111111,\n         0b1111111111111111111111000000000000000000000000001111110111111111,\n-        0b0000111111111111111111111111111111111111000000000000000000000000,\n         0b1000000000000010000000000000000000000000000000000000000000000000,\n+        0b0000111111111111111111111111111111111111000000000000000000000000,\n         0b0000111111111111111111111111110000000000000000000000000011111111,\n-        0b0000000000000111111111111111111111111111111111111111111111111111,\n         0b1111111111111111111111111111111111111111111111111010101010000101,\n         0b1111111111111111111111111111111100000000000000000000000000000000,\n         0b1111111111111111111111111111110000000000000000000000000000000000,\n         0b1111111111111111111111110000000000000000000000000000000000000000,\n         0b1111111111111111111111000000000000000000000000001111111111101111,\n         0b1111111111111111111100000000000000000000000000010000000000000000,\n-        0b1111111111111111000000011111111111110111111111111111111111111111,\n+        0b1111111111111111000000111111111111110111111111111111111111111111,\n         0b1111111111111111000000000000000000000000000000000100001111000000,\n         0b1111111111111111000000000000000000000000000000000000000000000000,\n         0b1111111101111111111111111111111110000000000000000000000000000000,\n         0b1111110000000000000000000000000011111111111111111111111111000000,\n+        0b1111011111111111111111111111111111111111111111110000000000000000,\n         0b1111000000000000000000000000001111110111111111111111111111111100,\n         0b1010101010101010101010101010101010101010101010101101010101010100,\n         0b1010101010101010101010101010101010101010101010101010101010101010,\n@@ -384,16 +389,16 @@ pub mod lowercase {\n         0b0001101111111011111111111111101111111111100000000000000000000000,\n         0b0001100100101111101010101010101010101010111000110111111111111111,\n         0b0000011111111101111111111111111111111111111111111111111110111001,\n-        0b0000011101000000000000000000000000000010101010100000010100001010,\n+        0b0000011101011100000000000000000000000010101010100000010100001010,\n         0b0000010000100000000001000000000000000000000000000000000000000000,\n         0b0000000111111111111111111111111111111111111011111111111111111111,\n         0b0000000011111111000000001111111100000000001111110000000011111111,\n         0b0000000011011100000000001111111100000000110011110000000011011100,\n         0b0000000000001000010100000001101010101010101010101010101010101010,\n         0b0000000000000000001000001011111111111111111111111111111111111111,\n+        0b0000000000000000000001111110000001111111111111111111101111111111,\n         0b0000000000000000000000001111111111111111110111111100000000000000,\n         0b0000000000000000000000000001111100000000000000000000000000000011,\n-        0b0000000000000000000000000000000001111111111111111111101111111111,\n         0b0000000000000000000000000000000000111010101010101010101010101010,\n         0b0000000000000000000000000000000000000000111110000000000001111111,\n         0b0000000000000000000000000000000000000000000000000000101111110111,\n@@ -405,13 +410,12 @@ pub mod lowercase {\n         0b1010101010101011101010101010100000000000000000000000000000000000,\n         0b1101010010101010101010101010101010101010101010101010101101010101,\n         0b1110011001010001001011010010101001001110001001000011000100101001,\n-        0b1110011111111111111111111111111111111111111111110000000000000000,\n         0b1110101111000000000000000000000000001111111111111111111111111100,\n     ];\n-    const BITSET_MAPPING: &'static [(u8, u8); 20] = &[\n+    const BITSET_MAPPING: &'static [(u8, u8); 21] = &[\n         (0, 64), (1, 188), (1, 183), (1, 176), (1, 109), (1, 124), (1, 126), (1, 66), (1, 70),\n-        (1, 77), (2, 146), (2, 144), (2, 83), (3, 12), (3, 6), (4, 156), (4, 78), (5, 187),\n-        (6, 132), (7, 93),\n+        (1, 77), (2, 146), (2, 144), (2, 83), (3, 93), (3, 147), (3, 133), (4, 12), (4, 6),\n+        (5, 187), (6, 78), (7, 132),\n     ];\n \n     #[rustc_const_unstable(feature = \"const_unicode_case_lookup\", issue = \"101400\")]\n@@ -428,14 +432,14 @@ pub mod lowercase {\n \n #[rustfmt::skip]\n pub mod n {\n-    static SHORT_OFFSET_RUNS: [u32; 38] = [\n+    static SHORT_OFFSET_RUNS: [u32; 39] = [\n         1632, 18876774, 31461440, 102765417, 111154926, 115349830, 132128880, 165684320, 186656630,\n         195046653, 199241735, 203436434, 216049184, 241215536, 249605104, 274792208, 278987015,\n         283181793, 295766104, 320933114, 383848032, 392238160, 434181712, 442570976, 455154768,\n-        463544256, 476128256, 480340576, 484535936, 501338848, 505534414, 513925440, 518120176,\n-        522315975, 526511217, 534900992, 555875312, 561183738,\n+        463544144, 476128256, 484534880, 488730240, 505533120, 509728718, 522314048, 526508784,\n+        530703600, 534898887, 539094129, 547483904, 568458224, 573766650,\n     ];\n-    static OFFSETS: [u8; 269] = [\n+    static OFFSETS: [u8; 275] = [\n         48, 10, 120, 2, 5, 1, 2, 3, 0, 10, 134, 10, 198, 10, 0, 10, 118, 10, 4, 6, 108, 10, 118,\n         10, 118, 10, 2, 6, 110, 13, 115, 10, 8, 7, 103, 10, 104, 7, 7, 19, 109, 10, 96, 10, 118, 10,\n         70, 20, 0, 10, 70, 10, 0, 20, 0, 3, 239, 10, 6, 10, 22, 10, 0, 10, 128, 11, 165, 10, 6, 10,\n@@ -445,9 +449,9 @@ pub mod n {\n         29, 1, 8, 1, 134, 5, 202, 10, 0, 8, 25, 7, 39, 9, 75, 5, 22, 6, 160, 2, 2, 16, 2, 46, 64, 9,\n         52, 2, 30, 3, 75, 5, 104, 8, 24, 8, 41, 7, 0, 6, 48, 10, 0, 31, 158, 10, 42, 4, 112, 7, 134,\n         30, 128, 10, 60, 10, 144, 10, 7, 20, 251, 10, 0, 10, 118, 10, 0, 10, 102, 10, 102, 12, 0,\n-        19, 93, 10, 0, 29, 227, 10, 70, 10, 0, 21, 0, 111, 0, 10, 86, 10, 134, 10, 1, 7, 0, 23, 0,\n-        20, 108, 25, 0, 50, 0, 10, 0, 10, 0, 9, 128, 10, 0, 59, 1, 3, 1, 4, 76, 45, 1, 15, 0, 13, 0,\n-        10, 0,\n+        19, 93, 10, 0, 29, 227, 10, 70, 10, 0, 10, 102, 21, 0, 111, 0, 10, 86, 10, 134, 10, 1, 7, 0,\n+        23, 0, 20, 12, 20, 108, 25, 0, 50, 0, 10, 0, 10, 0, 10, 0, 9, 128, 10, 0, 59, 1, 3, 1, 4,\n+        76, 45, 1, 15, 0, 13, 0, 10, 0,\n     ];\n     pub fn lookup(c: char) -> bool {\n         super::skip_search("}, {"sha": "57128685d91104cf4b38052f8207fc88696c6c78", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -778,7 +778,8 @@ def build_bootstrap(self, color):\n         elif color == \"never\":\n             args.append(\"--color=never\")\n \n-        run(args, env=env, verbose=self.verbose)\n+        # Run this from the source directory so cargo finds .cargo/config\n+        run(args, env=env, verbose=self.verbose, cwd=self.rust_root)\n \n     def build_triple(self):\n         \"\"\"Build triple as in LLVM"}, {"sha": "36f990b72ff247251ac0ca4faaf47290077cf4e8", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -1325,6 +1325,9 @@ impl<'a> Builder<'a> {\n     ) -> Cargo {\n         let mut cargo = Command::new(&self.initial_cargo);\n         let out_dir = self.stage_out(compiler, mode);\n+        // Run cargo from the source root so it can find .cargo/config.\n+        // This matters when using vendoring and the working directory is outside the repository.\n+        cargo.current_dir(&self.src);\n \n         // Codegen backends are not yet tracked by -Zbinary-dep-depinfo,\n         // so we need to explicitly clear out if they've been updated."}, {"sha": "c13e83f6c86126c82563b80f224f6252bf6dfc2e", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -436,43 +436,6 @@ impl Step for StdLink {\n         let libdir = builder.sysroot_libdir(target_compiler, target);\n         let hostdir = builder.sysroot_libdir(target_compiler, compiler.host);\n         add_to_sysroot(builder, &libdir, &hostdir, &libstd_stamp(builder, compiler, target));\n-\n-        if compiler.stage == 0 {\n-            // special handling for stage0, to make `rustup toolchain link` and `x dist --stage 0`\n-            // work for stage0-sysroot\n-\n-            // copy bin files from stage0/bin to stage0-sysroot/bin\n-            let sysroot = builder.out.join(&compiler.host.triple).join(\"stage0-sysroot\");\n-\n-            let host = compiler.host.triple;\n-            let stage0_bin_dir = builder.out.join(&host).join(\"stage0/bin\");\n-            let sysroot_bin_dir = sysroot.join(\"bin\");\n-            t!(fs::create_dir_all(&sysroot_bin_dir));\n-            builder.cp_r(&stage0_bin_dir, &sysroot_bin_dir);\n-\n-            // copy all *.so files from stage0/lib to stage0-sysroot/lib\n-            let stage0_lib_dir = builder.out.join(&host).join(\"stage0/lib\");\n-            if let Ok(files) = fs::read_dir(&stage0_lib_dir) {\n-                for file in files {\n-                    let file = t!(file);\n-                    let path = file.path();\n-                    if path.is_file() && is_dylib(&file.file_name().into_string().unwrap()) {\n-                        builder.copy(&path, &sysroot.join(\"lib\").join(path.file_name().unwrap()));\n-                    }\n-                }\n-            }\n-\n-            // copy codegen-backends from stage0\n-            let sysroot_codegen_backends = builder.sysroot_codegen_backends(compiler);\n-            t!(fs::create_dir_all(&sysroot_codegen_backends));\n-            let stage0_codegen_backends = builder\n-                .out\n-                .join(&host)\n-                .join(\"stage0/lib/rustlib\")\n-                .join(&host)\n-                .join(\"codegen-backends\");\n-            builder.cp_r(&stage0_codegen_backends, &sysroot_codegen_backends);\n-        }\n     }\n }\n "}, {"sha": "76562d26a550226840eaf84aa3e7633dac248741", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -10,7 +10,6 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{HirId, Path, TraitCandidate};\n use rustc_interface::interface;\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_resolve as resolve;\n use rustc_session::config::{self, CrateType, ErrorOutputType};\n@@ -364,9 +363,7 @@ pub(crate) fn run_global_ctxt(\n         .copied()\n         .filter(|&trait_def_id| tcx.trait_is_auto(trait_def_id))\n         .collect();\n-    let access_levels = AccessLevels {\n-        map: tcx.privacy_access_levels(()).map.iter().map(|(k, v)| (k.to_def_id(), *v)).collect(),\n-    };\n+    let access_levels = tcx.privacy_access_levels(()).map_id(Into::into);\n \n     let mut ctxt = DocContext {\n         tcx,"}, {"sha": "1e2ff9a95dd9230e290f6d234111b0cd3bdca99d", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -1562,10 +1562,6 @@ ul.all-items > li {\n \tlist-style: none;\n }\n \n-.non-exhaustive {\n-\tmargin-bottom: 1em;\n-}\n-\n details.dir-entry {\n \tpadding-left: 4px;\n }"}, {"sha": "e6cef4a326ac0ac066723ed6f941224f56a7ba77", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -230,7 +230,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     } else {\n                         // All items need to be handled here in case someone wishes to link\n                         // to them with intra-doc links\n-                        self.cx.cache.access_levels.map.insert(did, AccessLevel::Public);\n+                        self.cx.cache.access_levels.set_access_level(did, AccessLevel::Public);\n                     }\n                 }\n             }"}, {"sha": "8221e0998d79ad2fca11db7582d00467ed6dac09", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -38,10 +38,10 @@ impl<'a, 'tcx> LibEmbargoVisitor<'a, 'tcx> {\n     fn update(&mut self, did: DefId, level: Option<AccessLevel>) -> Option<AccessLevel> {\n         let is_hidden = self.tcx.is_doc_hidden(did);\n \n-        let old_level = self.access_levels.map.get(&did).cloned();\n+        let old_level = self.access_levels.get_access_level(did);\n         // Accessibility levels can only grow\n         if level > old_level && !is_hidden {\n-            self.access_levels.map.insert(did, level.unwrap());\n+            self.access_levels.set_access_level(did, level.unwrap());\n             level\n         } else {\n             old_level"}, {"sha": "28b3280fed5f66917973bbdb939f42691a1786fc", "filename": "src/test/ui/async-await/async-fn-size-uninit-locals.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-uninit-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-uninit-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-uninit-locals.rs?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -67,9 +67,7 @@ async fn joined() {\n     let c = Big::new();\n \n     fut().await;\n-    noop();\n     joiner = Joiner { a: Some(a), b: Some(b), c: Some(c) };\n-    noop();\n }\n \n async fn joined_with_noop() {\n@@ -97,7 +95,7 @@ async fn join_retval() -> Joiner {\n fn main() {\n     assert_eq!(2, std::mem::size_of_val(&single()));\n     assert_eq!(3, std::mem::size_of_val(&single_with_noop()));\n-    assert_eq!(3078, std::mem::size_of_val(&joined()));\n+    assert_eq!(3074, std::mem::size_of_val(&joined()));\n     assert_eq!(3078, std::mem::size_of_val(&joined_with_noop()));\n     assert_eq!(3074, std::mem::size_of_val(&join_retval()));\n }"}, {"sha": "aa718ab9254dfb1be1e50599cbb175da4ea76ded", "filename": "src/test/ui/privacy/access_levels.rs", "status": "modified", "additions": 41, "deletions": 28, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -1,49 +1,62 @@\n #![feature(rustc_attrs)]\n \n-#[rustc_access_level] mod outer { //~ ERROR None\n-    #[rustc_access_level] pub mod inner { //~ ERROR Some(Exported)\n-        #[rustc_access_level]\n-        extern \"C\" { //~ ERROR Some(Exported)\n-            #[rustc_access_level] static a: u8; //~ ERROR None\n-            #[rustc_access_level] pub fn b(); //~ ERROR Some(Exported)\n-        }\n-        #[rustc_access_level]\n-        pub trait Trait { //~ ERROR Some(Exported)\n-            #[rustc_access_level] const A: i32; //~ ERROR Some(Exported)\n-            #[rustc_access_level] type B; //~ ERROR Some(Exported)\n+#[rustc_effective_visibility]\n+mod outer { //~ ERROR Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n+    #[rustc_effective_visibility]\n+    pub mod inner1 { //~ ERROR Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+\n+        #[rustc_effective_visibility]\n+        extern \"C\" {} //~ ERROR Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+\n+        #[rustc_effective_visibility]\n+        pub trait PubTrait { //~ ERROR Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+            #[rustc_effective_visibility]\n+            const A: i32; //~ ERROR Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+            #[rustc_effective_visibility]\n+            type B; //~ ERROR Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n         }\n \n-        #[rustc_access_level]\n-        pub struct Struct { //~ ERROR Some(Exported)\n-            #[rustc_access_level] a: u8, //~ ERROR None\n-            #[rustc_access_level] pub b: u8, //~ ERROR Some(Exported)\n-        }\n+        #[rustc_effective_visibility]\n+        struct PrivStruct; //~ ERROR Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n \n-        #[rustc_access_level]\n-        pub union Union { //~ ERROR Some(Exported)\n-            #[rustc_access_level] a: u8, //~ ERROR None\n-            #[rustc_access_level] pub b: u8, //~ ERROR Some(Exported)\n+        #[rustc_effective_visibility]\n+        pub union PubUnion { //~ ERROR Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+            #[rustc_effective_visibility]\n+            a: u8, //~ ERROR Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n+            #[rustc_effective_visibility]\n+            pub b: u8, //~ ERROR Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n         }\n \n-        #[rustc_access_level]\n-        pub enum Enum { //~ ERROR Some(Exported)\n-            #[rustc_access_level] A( //~ ERROR Some(Exported)\n-                #[rustc_access_level] Struct, //~ ERROR Some(Exported)\n-                #[rustc_access_level] Union,  //~ ERROR Some(Exported)\n+        #[rustc_effective_visibility]\n+        pub enum Enum { //~ ERROR Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+            #[rustc_effective_visibility]\n+            A( //~ ERROR Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+                #[rustc_effective_visibility]\n+                PubUnion,  //~ ERROR Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n             ),\n         }\n     }\n \n-    #[rustc_access_level] macro_rules! none_macro { //~ ERROR None\n+    #[rustc_effective_visibility]\n+    macro_rules! none_macro { //~ Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n         () => {};\n     }\n \n     #[macro_export]\n-    #[rustc_access_level] macro_rules! public_macro { //~ ERROR Some(Public)\n+    #[rustc_effective_visibility]\n+    macro_rules! public_macro { //~ Public: pub, Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n         () => {};\n     }\n+\n+    #[rustc_effective_visibility]\n+    pub struct ReachableStruct { //~ ERROR Public: pub(self), Exported: pub(self), Reachable: pub, ReachableFromImplTrait: pub\n+        #[rustc_effective_visibility]\n+        pub a: u8, //~ ERROR Public: pub(self), Exported: pub(self), Reachable: pub, ReachableFromImplTrait: pub\n+    }\n }\n \n-pub use outer::inner;\n+pub use outer::inner1;\n+\n+pub fn foo() -> outer::ReachableStruct { outer::ReachableStruct {a: 0} }\n \n fn main() {}"}, {"sha": "2ed6c330a2f97763470de828acecc10afa87cca8", "filename": "src/test/ui/privacy/access_levels.stderr", "status": "modified", "additions": 65, "deletions": 86, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/5253b0a0a1f366fad0ebed57597fcf2703b9e893/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5253b0a0a1f366fad0ebed57597fcf2703b9e893/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr?ref=5253b0a0a1f366fad0ebed57597fcf2703b9e893", "patch": "@@ -1,125 +1,104 @@\n-error: None\n-  --> $DIR/access_levels.rs:3:23\n+error: Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n+  --> $DIR/access_levels.rs:4:1\n    |\n-LL | #[rustc_access_level] mod outer {\n-   |                       ^^^^^^^^^\n+LL | mod outer {\n+   | ^^^^^^^^^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:4:27\n+error: Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:6:5\n    |\n-LL |     #[rustc_access_level] pub mod inner {\n-   |                           ^^^^^^^^^^^^^\n+LL |     pub mod inner1 {\n+   |     ^^^^^^^^^^^^^^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:6:9\n+error: Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:9:9\n    |\n-LL | /         extern \"C\" {\n-LL | |             #[rustc_access_level] static a: u8;\n-LL | |             #[rustc_access_level] pub fn b();\n-LL | |         }\n-   | |_________^\n+LL |         extern \"C\" {}\n+   |         ^^^^^^^^^^^^^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:11:9\n+error: Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:12:9\n    |\n-LL |         pub trait Trait {\n-   |         ^^^^^^^^^^^^^^^\n+LL |         pub trait PubTrait {\n+   |         ^^^^^^^^^^^^^^^^^^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:17:9\n+error: Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n+  --> $DIR/access_levels.rs:20:9\n    |\n-LL |         pub struct Struct {\n+LL |         struct PrivStruct;\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: None\n-  --> $DIR/access_levels.rs:18:35\n-   |\n-LL |             #[rustc_access_level] a: u8,\n-   |                                   ^^^^^\n-\n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:19:35\n-   |\n-LL |             #[rustc_access_level] pub b: u8,\n-   |                                   ^^^^^^^^^\n-\n-error: Some(Exported)\n+error: Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n   --> $DIR/access_levels.rs:23:9\n    |\n-LL |         pub union Union {\n-   |         ^^^^^^^^^^^^^^^\n+LL |         pub union PubUnion {\n+   |         ^^^^^^^^^^^^^^^^^^\n \n-error: None\n-  --> $DIR/access_levels.rs:24:35\n+error: Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n+  --> $DIR/access_levels.rs:25:13\n    |\n-LL |             #[rustc_access_level] a: u8,\n-   |                                   ^^^^^\n+LL |             a: u8,\n+   |             ^^^^^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:25:35\n+error: Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:27:13\n    |\n-LL |             #[rustc_access_level] pub b: u8,\n-   |                                   ^^^^^^^^^\n+LL |             pub b: u8,\n+   |             ^^^^^^^^^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:29:9\n+error: Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:31:9\n    |\n LL |         pub enum Enum {\n    |         ^^^^^^^^^^^^^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:30:35\n-   |\n-LL |             #[rustc_access_level] A(\n-   |                                   ^\n-\n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:31:39\n+error: Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:33:13\n    |\n-LL |                 #[rustc_access_level] Struct,\n-   |                                       ^^^^^^\n+LL |             A(\n+   |             ^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:32:39\n+error: Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:35:17\n    |\n-LL |                 #[rustc_access_level] Union,\n-   |                                       ^^^^^\n+LL |                 PubUnion,\n+   |                 ^^^^^^^^\n \n-error: None\n-  --> $DIR/access_levels.rs:37:27\n+error: Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n+  --> $DIR/access_levels.rs:41:5\n    |\n-LL |     #[rustc_access_level] macro_rules! none_macro {\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     macro_rules! none_macro {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Some(Public)\n-  --> $DIR/access_levels.rs:42:27\n+error: Public: pub, Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:47:5\n    |\n-LL |     #[rustc_access_level] macro_rules! public_macro {\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     macro_rules! public_macro {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:12:35\n+error: Public: pub(self), Exported: pub(self), Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:52:5\n    |\n-LL |             #[rustc_access_level] const A: i32;\n-   |                                   ^^^^^^^^^^^^\n+LL |     pub struct ReachableStruct {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:13:35\n+error: Public: pub(self), Exported: pub(self), Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:54:9\n    |\n-LL |             #[rustc_access_level] type B;\n-   |                                   ^^^^^^\n+LL |         pub a: u8,\n+   |         ^^^^^^^^^\n \n-error: None\n-  --> $DIR/access_levels.rs:7:35\n+error: Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:14:13\n    |\n-LL |             #[rustc_access_level] static a: u8;\n-   |                                   ^^^^^^^^^^^^\n+LL |             const A: i32;\n+   |             ^^^^^^^^^^^^\n \n-error: Some(Exported)\n-  --> $DIR/access_levels.rs:8:35\n+error: Public: pub(self), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:16:13\n    |\n-LL |             #[rustc_access_level] pub fn b();\n-   |                                   ^^^^^^^^^^\n+LL |             type B;\n+   |             ^^^^^^\n \n-error: aborting due to 20 previous errors\n+error: aborting due to 17 previous errors\n "}]}