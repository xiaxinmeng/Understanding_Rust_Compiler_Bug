{"sha": "549f861f7d53811521cf929cf58fb6828a2a88d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0OWY4NjFmN2Q1MzgxMTUyMWNmOTI5Y2Y1OGZiNjgyOGEyYTg4ZDk=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-09-27T20:36:48Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-09-27T20:51:08Z"}, "message": "Use correct article in help message for conversion or cast\n\nBefore it always used `an`; now it uses the correct article for the type.", "tree": {"sha": "03e347ac92fe5741439f8d322cfcc4a502713b99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03e347ac92fe5741439f8d322cfcc4a502713b99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/549f861f7d53811521cf929cf58fb6828a2a88d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/549f861f7d53811521cf929cf58fb6828a2a88d9", "html_url": "https://github.com/rust-lang/rust/commit/549f861f7d53811521cf929cf58fb6828a2a88d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/549f861f7d53811521cf929cf58fb6828a2a88d9/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d216fef3ea9446a020cf86ae438ae9a0d40563f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d216fef3ea9446a020cf86ae438ae9a0d40563f", "html_url": "https://github.com/rust-lang/rust/commit/1d216fef3ea9446a020cf86ae438ae9a0d40563f"}], "stats": {"total": 316, "additions": 169, "deletions": 147}, "files": [{"sha": "9e60253106b8d907a5300b0b36ba1f9874d9c84b", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/549f861f7d53811521cf929cf58fb6828a2a88d9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549f861f7d53811521cf929cf58fb6828a2a88d9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=549f861f7d53811521cf929cf58fb6828a2a88d9", "patch": "@@ -210,6 +210,18 @@ impl TyKind<'tcx> {\n             _ => false,\n         }\n     }\n+\n+    /// Get the article (\"a\" or \"an\") to use with this type.\n+    ///\n+    /// **Panics if `self` is [`TyKind::Error`].**\n+    pub fn article(&self) -> &'static str {\n+        match self {\n+            Int(_) | Float(_) | Array(_, _) => \"an\",\n+            Adt(def, _) if def.is_enum() => \"an\",\n+            Error(_) => panic!(),\n+            _ => \"a\",\n+        }\n+    }\n }\n \n // `TyKind` is used a lot. Make sure it doesn't unintentionally get bigger."}, {"sha": "cd7b692c58847154e41c031064e7dae133cfc0bb", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/549f861f7d53811521cf929cf58fb6828a2a88d9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549f861f7d53811521cf929cf58fb6828a2a88d9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=549f861f7d53811521cf929cf58fb6828a2a88d9", "patch": "@@ -752,8 +752,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        let msg = format!(\"you can convert an `{}` to `{}`\", checked_ty, expected_ty);\n-        let cast_msg = format!(\"you can cast an `{} to `{}`\", checked_ty, expected_ty);\n+        let msg = format!(\n+            \"you can convert {} `{}` to `{}`\",\n+            checked_ty.kind().article(),\n+            checked_ty,\n+            expected_ty\n+        );\n+        let cast_msg = format!(\n+            \"you can cast {} `{} to `{}`\",\n+            checked_ty.kind().article(),\n+            checked_ty,\n+            expected_ty\n+        );\n         let lit_msg = format!(\n             \"change the type of the numeric literal from `{}` to `{}`\",\n             checked_ty, expected_ty,"}, {"sha": "dfe7e4da22db89f59a1865e6968f71589fd8c7c0", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=549f861f7d53811521cf929cf58fb6828a2a88d9", "patch": "@@ -47,7 +47,7 @@ LL |     let _: i32 = f2(2i32);\n    |            |\n    |            expected due to this\n    |\n-help: you can convert an `u32` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     let _: i32 = f2(2i32).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f290c0e632d92b82e9b5f3c1aa1e7c75457bc458", "filename": "src/test/ui/indexing-requires-a-uint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr?ref=549f861f7d53811521cf929cf58fb6828a2a88d9", "patch": "@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n LL |     bar::<isize>(i);  // i should not be re-coerced back to an isize\n    |                  ^ expected `isize`, found `usize`\n    |\n-help: you can convert an `usize` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     bar::<isize>(i.try_into().unwrap());  // i should not be re-coerced back to an isize\n    |                  ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "8b541e6de065b9d5a379ae0128921cd7d903c90d", "filename": "src/test/ui/integer-literal-suffix-inference.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr?ref=549f861f7d53811521cf929cf58fb6828a2a88d9", "patch": "@@ -328,7 +328,7 @@ error[E0308]: mismatched types\n LL |     id_u8(b16);\n    |           ^^^ expected `u8`, found `u16`\n    |\n-help: you can convert an `u16` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     id_u8(b16.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -339,7 +339,7 @@ error[E0308]: mismatched types\n LL |     id_u8(b32);\n    |           ^^^ expected `u8`, found `u32`\n    |\n-help: you can convert an `u32` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     id_u8(b32.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -350,7 +350,7 @@ error[E0308]: mismatched types\n LL |     id_u8(b64);\n    |           ^^^ expected `u8`, found `u64`\n    |\n-help: you can convert an `u64` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     id_u8(b64.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -361,7 +361,7 @@ error[E0308]: mismatched types\n LL |     id_u8(bsize);\n    |           ^^^^^ expected `u8`, found `usize`\n    |\n-help: you can convert an `usize` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     id_u8(bsize.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -373,15 +373,15 @@ LL |     id_u16(b8);\n    |            ^^\n    |            |\n    |            expected `u16`, found `u8`\n-   |            help: you can convert an `u8` to `u16`: `b8.into()`\n+   |            help: you can convert a `u8` to `u16`: `b8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:169:12\n    |\n LL |     id_u16(b32);\n    |            ^^^ expected `u16`, found `u32`\n    |\n-help: you can convert an `u32` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     id_u16(b32.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -392,7 +392,7 @@ error[E0308]: mismatched types\n LL |     id_u16(b64);\n    |            ^^^ expected `u16`, found `u64`\n    |\n-help: you can convert an `u64` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     id_u16(b64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -403,7 +403,7 @@ error[E0308]: mismatched types\n LL |     id_u16(bsize);\n    |            ^^^^^ expected `u16`, found `usize`\n    |\n-help: you can convert an `usize` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     id_u16(bsize.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -415,7 +415,7 @@ LL |     id_u32(b8);\n    |            ^^\n    |            |\n    |            expected `u32`, found `u8`\n-   |            help: you can convert an `u8` to `u32`: `b8.into()`\n+   |            help: you can convert a `u8` to `u32`: `b8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:182:12\n@@ -424,15 +424,15 @@ LL |     id_u32(b16);\n    |            ^^^\n    |            |\n    |            expected `u32`, found `u16`\n-   |            help: you can convert an `u16` to `u32`: `b16.into()`\n+   |            help: you can convert a `u16` to `u32`: `b16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:186:12\n    |\n LL |     id_u32(b64);\n    |            ^^^ expected `u32`, found `u64`\n    |\n-help: you can convert an `u64` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     id_u32(b64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -443,7 +443,7 @@ error[E0308]: mismatched types\n LL |     id_u32(bsize);\n    |            ^^^^^ expected `u32`, found `usize`\n    |\n-help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     id_u32(bsize.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -455,7 +455,7 @@ LL |     id_u64(b8);\n    |            ^^\n    |            |\n    |            expected `u64`, found `u8`\n-   |            help: you can convert an `u8` to `u64`: `b8.into()`\n+   |            help: you can convert a `u8` to `u64`: `b8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:196:12\n@@ -464,7 +464,7 @@ LL |     id_u64(b16);\n    |            ^^^\n    |            |\n    |            expected `u64`, found `u16`\n-   |            help: you can convert an `u16` to `u64`: `b16.into()`\n+   |            help: you can convert a `u16` to `u64`: `b16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:199:12\n@@ -473,15 +473,15 @@ LL |     id_u64(b32);\n    |            ^^^\n    |            |\n    |            expected `u64`, found `u32`\n-   |            help: you can convert an `u32` to `u64`: `b32.into()`\n+   |            help: you can convert a `u32` to `u64`: `b32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:203:12\n    |\n LL |     id_u64(bsize);\n    |            ^^^^^ expected `u64`, found `usize`\n    |\n-help: you can convert an `usize` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |     id_u64(bsize.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -493,7 +493,7 @@ LL |     id_usize(b8);\n    |              ^^\n    |              |\n    |              expected `usize`, found `u8`\n-   |              help: you can convert an `u8` to `usize`: `b8.into()`\n+   |              help: you can convert a `u8` to `usize`: `b8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:210:14\n@@ -502,15 +502,15 @@ LL |     id_usize(b16);\n    |              ^^^\n    |              |\n    |              expected `usize`, found `u16`\n-   |              help: you can convert an `u16` to `usize`: `b16.into()`\n+   |              help: you can convert a `u16` to `usize`: `b16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:213:14\n    |\n LL |     id_usize(b32);\n    |              ^^^ expected `usize`, found `u32`\n    |\n-help: you can convert an `u32` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     id_usize(b32.try_into().unwrap());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -521,7 +521,7 @@ error[E0308]: mismatched types\n LL |     id_usize(b64);\n    |              ^^^ expected `usize`, found `u64`\n    |\n-help: you can convert an `u64` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     id_usize(b64.try_into().unwrap());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e99554ec684236df124382ea2c00a64baf7fbaee", "filename": "src/test/ui/issues/issue-13359.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr?ref=549f861f7d53811521cf929cf58fb6828a2a88d9", "patch": "@@ -15,7 +15,7 @@ error[E0308]: mismatched types\n LL |     bar(1*(1 as usize));\n    |         ^^^^^^^^^^^^^^ expected `u32`, found `usize`\n    |\n-help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     bar((1*(1 as usize)).try_into().unwrap());\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "35080716f28d50b3de103a0989a486e0e4a003aa", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=549f861f7d53811521cf929cf58fb6828a2a88d9", "patch": "@@ -8,7 +8,7 @@ LL |     write!(hello);\n    |     -------------- in this macro invocation\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: you can convert an `usize` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |                   ($arr.len() * size_of($arr[0])).try_into().unwrap());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c0469f74d457bd0514f69a6404f5cafc341b59d2", "filename": "src/test/ui/numeric/len.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr?ref=549f861f7d53811521cf929cf58fb6828a2a88d9", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     test(array.len());\n    |          ^^^^^^^^^^^ expected `u32`, found `usize`\n    |\n-help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     test(array.len().try_into().unwrap());\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "fc9124be2a76b3f4461cda84b287dc807080636c", "filename": "src/test/ui/numeric/numeric-cast-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr?ref=549f861f7d53811521cf929cf58fb6828a2a88d9", "patch": "@@ -18,7 +18,7 @@ LL |     let y: i64 = x + x;\n    |            ---   ^^^^^\n    |            |     |\n    |            |     expected `i64`, found `u16`\n-   |            |     help: you can convert an `u16` to `i64`: `(x + x).into()`\n+   |            |     help: you can convert a `u16` to `i64`: `(x + x).into()`\n    |            expected due to this\n \n error[E0308]: mismatched types\n@@ -28,7 +28,7 @@ LL |     let z: i32 = x + x;\n    |            ---   ^^^^^\n    |            |     |\n    |            |     expected `i32`, found `u16`\n-   |            |     help: you can convert an `u16` to `i32`: `(x + x).into()`\n+   |            |     help: you can convert a `u16` to `i32`: `(x + x).into()`\n    |            expected due to this\n \n error: aborting due to 3 previous errors"}, {"sha": "6523f31edbf74ebca32175c8860b339b2133e4c5", "filename": "src/test/ui/numeric/numeric-cast-binop.stderr", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-binop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-binop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-binop.stderr?ref=549f861f7d53811521cf929cf58fb6828a2a88d9", "patch": "@@ -60,7 +60,7 @@ LL |         x_u16 > x_u8;\n    |                 ^^^^\n    |                 |\n    |                 expected `u16`, found `u8`\n-   |                 help: you can convert an `u8` to `u16`: `x_u8.into()`\n+   |                 help: you can convert a `u8` to `u16`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:36:17\n@@ -113,7 +113,7 @@ LL |         x_u32 > x_u8;\n    |                 ^^^^\n    |                 |\n    |                 expected `u32`, found `u8`\n-   |                 help: you can convert an `u8` to `u32`: `x_u8.into()`\n+   |                 help: you can convert a `u8` to `u32`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:47:17\n@@ -122,7 +122,7 @@ LL |         x_u32 > x_u16;\n    |                 ^^^^^\n    |                 |\n    |                 expected `u32`, found `u16`\n-   |                 help: you can convert an `u16` to `u32`: `x_u16.into()`\n+   |                 help: you can convert a `u16` to `u32`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:49:17\n@@ -152,7 +152,7 @@ error[E0308]: mismatched types\n LL |         x_u32 > x_usize;\n    |                 ^^^^^^^ expected `u32`, found `usize`\n    |\n-help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |         x_u32 > x_usize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -164,7 +164,7 @@ LL |         x_u64 > x_u8;\n    |                 ^^^^\n    |                 |\n    |                 expected `u64`, found `u8`\n-   |                 help: you can convert an `u8` to `u64`: `x_u8.into()`\n+   |                 help: you can convert a `u8` to `u64`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:58:17\n@@ -173,7 +173,7 @@ LL |         x_u64 > x_u16;\n    |                 ^^^^^\n    |                 |\n    |                 expected `u64`, found `u16`\n-   |                 help: you can convert an `u16` to `u64`: `x_u16.into()`\n+   |                 help: you can convert a `u16` to `u64`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:60:17\n@@ -182,7 +182,7 @@ LL |         x_u64 > x_u32;\n    |                 ^^^^^\n    |                 |\n    |                 expected `u64`, found `u32`\n-   |                 help: you can convert an `u32` to `u64`: `x_u32.into()`\n+   |                 help: you can convert a `u32` to `u64`: `x_u32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:62:17\n@@ -201,7 +201,7 @@ error[E0308]: mismatched types\n LL |         x_u64 > x_usize;\n    |                 ^^^^^^^ expected `u64`, found `usize`\n    |\n-help: you can convert an `usize` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |         x_u64 > x_usize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -213,7 +213,7 @@ LL |         x_u128 > x_u8;\n    |                  ^^^^\n    |                  |\n    |                  expected `u128`, found `u8`\n-   |                  help: you can convert an `u8` to `u128`: `x_u8.into()`\n+   |                  help: you can convert a `u8` to `u128`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:69:18\n@@ -222,7 +222,7 @@ LL |         x_u128 > x_u16;\n    |                  ^^^^^\n    |                  |\n    |                  expected `u128`, found `u16`\n-   |                  help: you can convert an `u16` to `u128`: `x_u16.into()`\n+   |                  help: you can convert a `u16` to `u128`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:71:18\n@@ -231,7 +231,7 @@ LL |         x_u128 > x_u32;\n    |                  ^^^^^\n    |                  |\n    |                  expected `u128`, found `u32`\n-   |                  help: you can convert an `u32` to `u128`: `x_u32.into()`\n+   |                  help: you can convert a `u32` to `u128`: `x_u32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:73:18\n@@ -240,15 +240,15 @@ LL |         x_u128 > x_u64;\n    |                  ^^^^^\n    |                  |\n    |                  expected `u128`, found `u64`\n-   |                  help: you can convert an `u64` to `u128`: `x_u64.into()`\n+   |                  help: you can convert a `u64` to `u128`: `x_u64.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:75:18\n    |\n LL |         x_u128 > x_usize;\n    |                  ^^^^^^^ expected `u128`, found `usize`\n    |\n-help: you can convert an `usize` to `u128` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `u128` and panic if the converted value wouldn't fit\n    |\n LL |         x_u128 > x_usize.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -260,7 +260,7 @@ LL |         x_usize > x_u8;\n    |                   ^^^^\n    |                   |\n    |                   expected `usize`, found `u8`\n-   |                   help: you can convert an `u8` to `usize`: `x_u8.into()`\n+   |                   help: you can convert a `u8` to `usize`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:80:19\n@@ -269,15 +269,15 @@ LL |         x_usize > x_u16;\n    |                   ^^^^^\n    |                   |\n    |                   expected `usize`, found `u16`\n-   |                   help: you can convert an `u16` to `usize`: `x_u16.into()`\n+   |                   help: you can convert a `u16` to `usize`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:82:19\n    |\n LL |         x_usize > x_u32;\n    |                   ^^^^^ expected `usize`, found `u32`\n    |\n-help: you can convert an `u32` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |         x_usize > x_u32.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -288,7 +288,7 @@ error[E0308]: mismatched types\n LL |         x_usize > x_u64;\n    |                   ^^^^^ expected `usize`, found `u64`\n    |\n-help: you can convert an `u64` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |         x_usize > x_u64.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -299,7 +299,7 @@ error[E0308]: mismatched types\n LL |         x_usize > x_u128;\n    |                   ^^^^^^ expected `usize`, found `u128`\n    |\n-help: you can convert an `u128` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert a `u128` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |         x_usize > x_u128.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1012,7 +1012,7 @@ error[E0308]: mismatched types\n LL |         x_i8 > x_u8;\n    |                ^^^^ expected `i8`, found `u8`\n    |\n-help: you can convert an `u8` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u8` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |         x_i8 > x_u8.try_into().unwrap();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1023,7 +1023,7 @@ error[E0308]: mismatched types\n LL |         x_i8 > x_u16;\n    |                ^^^^^ expected `i8`, found `u16`\n    |\n-help: you can convert an `u16` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |         x_i8 > x_u16.try_into().unwrap();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1034,7 +1034,7 @@ error[E0308]: mismatched types\n LL |         x_i8 > x_u32;\n    |                ^^^^^ expected `i8`, found `u32`\n    |\n-help: you can convert an `u32` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |         x_i8 > x_u32.try_into().unwrap();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1045,7 +1045,7 @@ error[E0308]: mismatched types\n LL |         x_i8 > x_u64;\n    |                ^^^^^ expected `i8`, found `u64`\n    |\n-help: you can convert an `u64` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |         x_i8 > x_u64.try_into().unwrap();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1056,7 +1056,7 @@ error[E0308]: mismatched types\n LL |         x_i8 > x_u128;\n    |                ^^^^^^ expected `i8`, found `u128`\n    |\n-help: you can convert an `u128` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u128` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |         x_i8 > x_u128.try_into().unwrap();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1067,7 +1067,7 @@ error[E0308]: mismatched types\n LL |         x_i8 > x_usize;\n    |                ^^^^^^^ expected `i8`, found `usize`\n    |\n-help: you can convert an `usize` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |         x_i8 > x_usize.try_into().unwrap();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1079,15 +1079,15 @@ LL |         x_i16 > x_u8;\n    |                 ^^^^\n    |                 |\n    |                 expected `i16`, found `u8`\n-   |                 help: you can convert an `u8` to `i16`: `x_u8.into()`\n+   |                 help: you can convert a `u8` to `i16`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:257:17\n    |\n LL |         x_i16 > x_u16;\n    |                 ^^^^^ expected `i16`, found `u16`\n    |\n-help: you can convert an `u16` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |         x_i16 > x_u16.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1098,7 +1098,7 @@ error[E0308]: mismatched types\n LL |         x_i16 > x_u32;\n    |                 ^^^^^ expected `i16`, found `u32`\n    |\n-help: you can convert an `u32` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |         x_i16 > x_u32.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1109,7 +1109,7 @@ error[E0308]: mismatched types\n LL |         x_i16 > x_u64;\n    |                 ^^^^^ expected `i16`, found `u64`\n    |\n-help: you can convert an `u64` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |         x_i16 > x_u64.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1120,7 +1120,7 @@ error[E0308]: mismatched types\n LL |         x_i16 > x_u128;\n    |                 ^^^^^^ expected `i16`, found `u128`\n    |\n-help: you can convert an `u128` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `u128` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |         x_i16 > x_u128.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1131,7 +1131,7 @@ error[E0308]: mismatched types\n LL |         x_i16 > x_usize;\n    |                 ^^^^^^^ expected `i16`, found `usize`\n    |\n-help: you can convert an `usize` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |         x_i16 > x_usize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1143,7 +1143,7 @@ LL |         x_i32 > x_u8;\n    |                 ^^^^\n    |                 |\n    |                 expected `i32`, found `u8`\n-   |                 help: you can convert an `u8` to `i32`: `x_u8.into()`\n+   |                 help: you can convert a `u8` to `i32`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:270:17\n@@ -1152,15 +1152,15 @@ LL |         x_i32 > x_u16;\n    |                 ^^^^^\n    |                 |\n    |                 expected `i32`, found `u16`\n-   |                 help: you can convert an `u16` to `i32`: `x_u16.into()`\n+   |                 help: you can convert a `u16` to `i32`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:272:17\n    |\n LL |         x_i32 > x_u32;\n    |                 ^^^^^ expected `i32`, found `u32`\n    |\n-help: you can convert an `u32` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |         x_i32 > x_u32.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1171,7 +1171,7 @@ error[E0308]: mismatched types\n LL |         x_i32 > x_u64;\n    |                 ^^^^^ expected `i32`, found `u64`\n    |\n-help: you can convert an `u64` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |         x_i32 > x_u64.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1182,7 +1182,7 @@ error[E0308]: mismatched types\n LL |         x_i32 > x_u128;\n    |                 ^^^^^^ expected `i32`, found `u128`\n    |\n-help: you can convert an `u128` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `u128` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |         x_i32 > x_u128.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1193,7 +1193,7 @@ error[E0308]: mismatched types\n LL |         x_i32 > x_usize;\n    |                 ^^^^^^^ expected `i32`, found `usize`\n    |\n-help: you can convert an `usize` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |         x_i32 > x_usize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1205,7 +1205,7 @@ LL |         x_i64 > x_u8;\n    |                 ^^^^\n    |                 |\n    |                 expected `i64`, found `u8`\n-   |                 help: you can convert an `u8` to `i64`: `x_u8.into()`\n+   |                 help: you can convert a `u8` to `i64`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:283:17\n@@ -1214,7 +1214,7 @@ LL |         x_i64 > x_u16;\n    |                 ^^^^^\n    |                 |\n    |                 expected `i64`, found `u16`\n-   |                 help: you can convert an `u16` to `i64`: `x_u16.into()`\n+   |                 help: you can convert a `u16` to `i64`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:285:17\n@@ -1223,15 +1223,15 @@ LL |         x_i64 > x_u32;\n    |                 ^^^^^\n    |                 |\n    |                 expected `i64`, found `u32`\n-   |                 help: you can convert an `u32` to `i64`: `x_u32.into()`\n+   |                 help: you can convert a `u32` to `i64`: `x_u32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:287:17\n    |\n LL |         x_i64 > x_u64;\n    |                 ^^^^^ expected `i64`, found `u64`\n    |\n-help: you can convert an `u64` to `i64` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |         x_i64 > x_u64.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1242,7 +1242,7 @@ error[E0308]: mismatched types\n LL |         x_i64 > x_u128;\n    |                 ^^^^^^ expected `i64`, found `u128`\n    |\n-help: you can convert an `u128` to `i64` and panic if the converted value wouldn't fit\n+help: you can convert a `u128` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |         x_i64 > x_u128.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1253,7 +1253,7 @@ error[E0308]: mismatched types\n LL |         x_i64 > x_usize;\n    |                 ^^^^^^^ expected `i64`, found `usize`\n    |\n-help: you can convert an `usize` to `i64` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |         x_i64 > x_usize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1265,7 +1265,7 @@ LL |         x_i128 > x_u8;\n    |                  ^^^^\n    |                  |\n    |                  expected `i128`, found `u8`\n-   |                  help: you can convert an `u8` to `i128`: `x_u8.into()`\n+   |                  help: you can convert a `u8` to `i128`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:296:18\n@@ -1274,7 +1274,7 @@ LL |         x_i128 > x_u16;\n    |                  ^^^^^\n    |                  |\n    |                  expected `i128`, found `u16`\n-   |                  help: you can convert an `u16` to `i128`: `x_u16.into()`\n+   |                  help: you can convert a `u16` to `i128`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:298:18\n@@ -1283,7 +1283,7 @@ LL |         x_i128 > x_u32;\n    |                  ^^^^^\n    |                  |\n    |                  expected `i128`, found `u32`\n-   |                  help: you can convert an `u32` to `i128`: `x_u32.into()`\n+   |                  help: you can convert a `u32` to `i128`: `x_u32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:300:18\n@@ -1292,15 +1292,15 @@ LL |         x_i128 > x_u64;\n    |                  ^^^^^\n    |                  |\n    |                  expected `i128`, found `u64`\n-   |                  help: you can convert an `u64` to `i128`: `x_u64.into()`\n+   |                  help: you can convert a `u64` to `i128`: `x_u64.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:302:18\n    |\n LL |         x_i128 > x_u128;\n    |                  ^^^^^^ expected `i128`, found `u128`\n    |\n-help: you can convert an `u128` to `i128` and panic if the converted value wouldn't fit\n+help: you can convert a `u128` to `i128` and panic if the converted value wouldn't fit\n    |\n LL |         x_i128 > x_u128.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1311,7 +1311,7 @@ error[E0308]: mismatched types\n LL |         x_i128 > x_usize;\n    |                  ^^^^^^^ expected `i128`, found `usize`\n    |\n-help: you can convert an `usize` to `i128` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `i128` and panic if the converted value wouldn't fit\n    |\n LL |         x_i128 > x_usize.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1323,15 +1323,15 @@ LL |         x_isize > x_u8;\n    |                   ^^^^\n    |                   |\n    |                   expected `isize`, found `u8`\n-   |                   help: you can convert an `u8` to `isize`: `x_u8.into()`\n+   |                   help: you can convert a `u8` to `isize`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:309:19\n    |\n LL |         x_isize > x_u16;\n    |                   ^^^^^ expected `isize`, found `u16`\n    |\n-help: you can convert an `u16` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |         x_isize > x_u16.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1342,7 +1342,7 @@ error[E0308]: mismatched types\n LL |         x_isize > x_u32;\n    |                   ^^^^^ expected `isize`, found `u32`\n    |\n-help: you can convert an `u32` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |         x_isize > x_u32.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1353,7 +1353,7 @@ error[E0308]: mismatched types\n LL |         x_isize > x_u64;\n    |                   ^^^^^ expected `isize`, found `u64`\n    |\n-help: you can convert an `u64` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |         x_isize > x_u64.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1364,7 +1364,7 @@ error[E0308]: mismatched types\n LL |         x_isize > x_u128;\n    |                   ^^^^^^ expected `isize`, found `u128`\n    |\n-help: you can convert an `u128` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `u128` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |         x_isize > x_u128.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1375,7 +1375,7 @@ error[E0308]: mismatched types\n LL |         x_isize > x_usize;\n    |                   ^^^^^^^ expected `isize`, found `usize`\n    |\n-help: you can convert an `usize` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |         x_isize > x_usize.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "3c78ea9e08ab90fbe49ad949515c7612ec800ba8", "filename": "src/test/ui/numeric/numeric-cast.stderr", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr?ref=549f861f7d53811521cf929cf58fb6828a2a88d9", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     foo::<usize>(x_u64);\n    |                  ^^^^^ expected `usize`, found `u64`\n    |\n-help: you can convert an `u64` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_u64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -15,7 +15,7 @@ error[E0308]: mismatched types\n LL |     foo::<usize>(x_u32);\n    |                  ^^^^^ expected `usize`, found `u32`\n    |\n-help: you can convert an `u32` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_u32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -27,7 +27,7 @@ LL |     foo::<usize>(x_u16);\n    |                  ^^^^^\n    |                  |\n    |                  expected `usize`, found `u16`\n-   |                  help: you can convert an `u16` to `usize`: `x_u16.into()`\n+   |                  help: you can convert a `u16` to `usize`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:29:18\n@@ -36,7 +36,7 @@ LL |     foo::<usize>(x_u8);\n    |                  ^^^^\n    |                  |\n    |                  expected `usize`, found `u8`\n-   |                  help: you can convert an `u8` to `usize`: `x_u8.into()`\n+   |                  help: you can convert a `u8` to `usize`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:31:18\n@@ -99,7 +99,7 @@ error[E0308]: mismatched types\n LL |     foo::<isize>(x_usize);\n    |                  ^^^^^^^ expected `isize`, found `usize`\n    |\n-help: you can convert an `usize` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_usize.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -110,7 +110,7 @@ error[E0308]: mismatched types\n LL |     foo::<isize>(x_u64);\n    |                  ^^^^^ expected `isize`, found `u64`\n    |\n-help: you can convert an `u64` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_u64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -121,7 +121,7 @@ error[E0308]: mismatched types\n LL |     foo::<isize>(x_u32);\n    |                  ^^^^^ expected `isize`, found `u32`\n    |\n-help: you can convert an `u32` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_u32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -132,7 +132,7 @@ error[E0308]: mismatched types\n LL |     foo::<isize>(x_u16);\n    |                  ^^^^^ expected `isize`, found `u16`\n    |\n-help: you can convert an `u16` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_u16.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -144,7 +144,7 @@ LL |     foo::<isize>(x_u8);\n    |                  ^^^^\n    |                  |\n    |                  expected `isize`, found `u8`\n-   |                  help: you can convert an `u8` to `isize`: `x_u8.into()`\n+   |                  help: you can convert a `u8` to `isize`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:55:18\n@@ -192,7 +192,7 @@ error[E0308]: mismatched types\n LL |     foo::<u64>(x_usize);\n    |                ^^^^^^^ expected `u64`, found `usize`\n    |\n-help: you can convert an `usize` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -204,7 +204,7 @@ LL |     foo::<u64>(x_u32);\n    |                ^^^^^\n    |                |\n    |                expected `u64`, found `u32`\n-   |                help: you can convert an `u32` to `u64`: `x_u32.into()`\n+   |                help: you can convert a `u32` to `u64`: `x_u32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:71:16\n@@ -213,7 +213,7 @@ LL |     foo::<u64>(x_u16);\n    |                ^^^^^\n    |                |\n    |                expected `u64`, found `u16`\n-   |                help: you can convert an `u16` to `u64`: `x_u16.into()`\n+   |                help: you can convert a `u16` to `u64`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:73:16\n@@ -222,7 +222,7 @@ LL |     foo::<u64>(x_u8);\n    |                ^^^^\n    |                |\n    |                expected `u64`, found `u8`\n-   |                help: you can convert an `u8` to `u64`: `x_u8.into()`\n+   |                help: you can convert a `u8` to `u64`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:75:16\n@@ -285,7 +285,7 @@ error[E0308]: mismatched types\n LL |     foo::<i64>(x_usize);\n    |                ^^^^^^^ expected `i64`, found `usize`\n    |\n-help: you can convert an `usize` to `i64` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -296,7 +296,7 @@ error[E0308]: mismatched types\n LL |     foo::<i64>(x_u64);\n    |                ^^^^^ expected `i64`, found `u64`\n    |\n-help: you can convert an `u64` to `i64` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -308,7 +308,7 @@ LL |     foo::<i64>(x_u32);\n    |                ^^^^^\n    |                |\n    |                expected `i64`, found `u32`\n-   |                help: you can convert an `u32` to `i64`: `x_u32.into()`\n+   |                help: you can convert a `u32` to `i64`: `x_u32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:94:16\n@@ -317,7 +317,7 @@ LL |     foo::<i64>(x_u16);\n    |                ^^^^^\n    |                |\n    |                expected `i64`, found `u16`\n-   |                help: you can convert an `u16` to `i64`: `x_u16.into()`\n+   |                help: you can convert a `u16` to `i64`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:96:16\n@@ -326,7 +326,7 @@ LL |     foo::<i64>(x_u8);\n    |                ^^^^\n    |                |\n    |                expected `i64`, found `u8`\n-   |                help: you can convert an `u8` to `i64`: `x_u8.into()`\n+   |                help: you can convert a `u8` to `i64`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:98:16\n@@ -372,7 +372,7 @@ error[E0308]: mismatched types\n LL |     foo::<u32>(x_usize);\n    |                ^^^^^^^ expected `u32`, found `usize`\n    |\n-help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -383,7 +383,7 @@ error[E0308]: mismatched types\n LL |     foo::<u32>(x_u64);\n    |                ^^^^^ expected `u32`, found `u64`\n    |\n-help: you can convert an `u64` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -395,7 +395,7 @@ LL |     foo::<u32>(x_u16);\n    |                ^^^^^\n    |                |\n    |                expected `u32`, found `u16`\n-   |                help: you can convert an `u16` to `u32`: `x_u16.into()`\n+   |                help: you can convert a `u16` to `u32`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:117:16\n@@ -404,7 +404,7 @@ LL |     foo::<u32>(x_u8);\n    |                ^^^^\n    |                |\n    |                expected `u32`, found `u8`\n-   |                help: you can convert an `u8` to `u32`: `x_u8.into()`\n+   |                help: you can convert a `u8` to `u32`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:119:16\n@@ -467,7 +467,7 @@ error[E0308]: mismatched types\n LL |     foo::<i32>(x_usize);\n    |                ^^^^^^^ expected `i32`, found `usize`\n    |\n-help: you can convert an `usize` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -478,7 +478,7 @@ error[E0308]: mismatched types\n LL |     foo::<i32>(x_u64);\n    |                ^^^^^ expected `i32`, found `u64`\n    |\n-help: you can convert an `u64` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -489,7 +489,7 @@ error[E0308]: mismatched types\n LL |     foo::<i32>(x_u32);\n    |                ^^^^^ expected `i32`, found `u32`\n    |\n-help: you can convert an `u32` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_u32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -501,7 +501,7 @@ LL |     foo::<i32>(x_u16);\n    |                ^^^^^\n    |                |\n    |                expected `i32`, found `u16`\n-   |                help: you can convert an `u16` to `i32`: `x_u16.into()`\n+   |                help: you can convert a `u16` to `i32`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:140:16\n@@ -510,7 +510,7 @@ LL |     foo::<i32>(x_u8);\n    |                ^^^^\n    |                |\n    |                expected `i32`, found `u8`\n-   |                help: you can convert an `u8` to `i32`: `x_u8.into()`\n+   |                help: you can convert a `u8` to `i32`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:142:16\n@@ -558,7 +558,7 @@ error[E0308]: mismatched types\n LL |     foo::<u16>(x_usize);\n    |                ^^^^^^^ expected `u16`, found `usize`\n    |\n-help: you can convert an `usize` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -569,7 +569,7 @@ error[E0308]: mismatched types\n LL |     foo::<u16>(x_u64);\n    |                ^^^^^ expected `u16`, found `u64`\n    |\n-help: you can convert an `u64` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -580,7 +580,7 @@ error[E0308]: mismatched types\n LL |     foo::<u16>(x_u32);\n    |                ^^^^^ expected `u16`, found `u32`\n    |\n-help: you can convert an `u32` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_u32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -592,7 +592,7 @@ LL |     foo::<u16>(x_u8);\n    |                ^^^^\n    |                |\n    |                expected `u16`, found `u8`\n-   |                help: you can convert an `u8` to `u16`: `x_u8.into()`\n+   |                help: you can convert a `u8` to `u16`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:163:16\n@@ -655,7 +655,7 @@ error[E0308]: mismatched types\n LL |     foo::<i16>(x_usize);\n    |                ^^^^^^^ expected `i16`, found `usize`\n    |\n-help: you can convert an `usize` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -666,7 +666,7 @@ error[E0308]: mismatched types\n LL |     foo::<i16>(x_u64);\n    |                ^^^^^ expected `i16`, found `u64`\n    |\n-help: you can convert an `u64` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -677,7 +677,7 @@ error[E0308]: mismatched types\n LL |     foo::<i16>(x_u32);\n    |                ^^^^^ expected `i16`, found `u32`\n    |\n-help: you can convert an `u32` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_u32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -688,7 +688,7 @@ error[E0308]: mismatched types\n LL |     foo::<i16>(x_u16);\n    |                ^^^^^ expected `i16`, found `u16`\n    |\n-help: you can convert an `u16` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_u16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -700,7 +700,7 @@ LL |     foo::<i16>(x_u8);\n    |                ^^^^\n    |                |\n    |                expected `i16`, found `u8`\n-   |                help: you can convert an `u8` to `i16`: `x_u8.into()`\n+   |                help: you can convert a `u8` to `i16`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:186:16\n@@ -750,7 +750,7 @@ error[E0308]: mismatched types\n LL |     foo::<u8>(x_usize);\n    |               ^^^^^^^ expected `u8`, found `usize`\n    |\n-help: you can convert an `usize` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_usize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -761,7 +761,7 @@ error[E0308]: mismatched types\n LL |     foo::<u8>(x_u64);\n    |               ^^^^^ expected `u8`, found `u64`\n    |\n-help: you can convert an `u64` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_u64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -772,7 +772,7 @@ error[E0308]: mismatched types\n LL |     foo::<u8>(x_u32);\n    |               ^^^^^ expected `u8`, found `u32`\n    |\n-help: you can convert an `u32` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_u32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -783,7 +783,7 @@ error[E0308]: mismatched types\n LL |     foo::<u8>(x_u16);\n    |               ^^^^^ expected `u8`, found `u16`\n    |\n-help: you can convert an `u16` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_u16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -849,7 +849,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_usize);\n    |               ^^^^^^^ expected `i8`, found `usize`\n    |\n-help: you can convert an `usize` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_usize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -860,7 +860,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_u64);\n    |               ^^^^^ expected `i8`, found `u64`\n    |\n-help: you can convert an `u64` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_u64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -871,7 +871,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_u32);\n    |               ^^^^^ expected `i8`, found `u32`\n    |\n-help: you can convert an `u32` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_u32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -882,7 +882,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_u16);\n    |               ^^^^^ expected `i8`, found `u16`\n    |\n-help: you can convert an `u16` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_u16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -893,7 +893,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_u8);\n    |               ^^^^ expected `i8`, found `u8`\n    |\n-help: you can convert an `u8` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u8` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_u8.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -948,7 +948,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(x_usize);\n    |                ^^^^^^^ expected `f64`, found `usize`\n    |\n-help: you can cast an `usize to `f64`, producing the floating point representation of the integer,\n+help: you can cast a `usize to `f64`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n LL |     foo::<f64>(x_usize as f64);\n    |                ^^^^^^^^^^^^^^\n@@ -959,7 +959,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(x_u64);\n    |                ^^^^^ expected `f64`, found `u64`\n    |\n-help: you can cast an `u64 to `f64`, producing the floating point representation of the integer,\n+help: you can cast a `u64 to `f64`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n LL |     foo::<f64>(x_u64 as f64);\n    |                ^^^^^^^^^^^^\n@@ -970,7 +970,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(x_u32);\n    |                ^^^^^ expected `f64`, found `u32`\n    |\n-help: you can convert an `u32` to `f64`, producing the floating point representation of the integer\n+help: you can convert a `u32` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_u32.into());\n    |                ^^^^^^^^^^^^\n@@ -981,7 +981,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(x_u16);\n    |                ^^^^^ expected `f64`, found `u16`\n    |\n-help: you can convert an `u16` to `f64`, producing the floating point representation of the integer\n+help: you can convert a `u16` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_u16.into());\n    |                ^^^^^^^^^^^^\n@@ -992,7 +992,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(x_u8);\n    |                ^^^^ expected `f64`, found `u8`\n    |\n-help: you can convert an `u8` to `f64`, producing the floating point representation of the integer\n+help: you can convert a `u8` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_u8.into());\n    |                ^^^^^^^^^^^\n@@ -1067,7 +1067,7 @@ error[E0308]: mismatched types\n LL |     foo::<f32>(x_usize);\n    |                ^^^^^^^ expected `f32`, found `usize`\n    |\n-help: you can cast an `usize to `f32`, producing the floating point representation of the integer,\n+help: you can cast a `usize to `f32`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n LL |     foo::<f32>(x_usize as f32);\n    |                ^^^^^^^^^^^^^^\n@@ -1078,7 +1078,7 @@ error[E0308]: mismatched types\n LL |     foo::<f32>(x_u64);\n    |                ^^^^^ expected `f32`, found `u64`\n    |\n-help: you can cast an `u64 to `f32`, producing the floating point representation of the integer,\n+help: you can cast a `u64 to `f32`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n LL |     foo::<f32>(x_u64 as f32);\n    |                ^^^^^^^^^^^^\n@@ -1089,7 +1089,7 @@ error[E0308]: mismatched types\n LL |     foo::<f32>(x_u32);\n    |                ^^^^^ expected `f32`, found `u32`\n    |\n-help: you can cast an `u32 to `f32`, producing the floating point representation of the integer,\n+help: you can cast a `u32 to `f32`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n LL |     foo::<f32>(x_u32 as f32);\n    |                ^^^^^^^^^^^^\n@@ -1100,7 +1100,7 @@ error[E0308]: mismatched types\n LL |     foo::<f32>(x_u16);\n    |                ^^^^^ expected `f32`, found `u16`\n    |\n-help: you can convert an `u16` to `f32`, producing the floating point representation of the integer\n+help: you can convert a `u16` to `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_u16.into());\n    |                ^^^^^^^^^^^^\n@@ -1111,7 +1111,7 @@ error[E0308]: mismatched types\n LL |     foo::<f32>(x_u8);\n    |                ^^^^ expected `f32`, found `u8`\n    |\n-help: you can convert an `u8` to `f32`, producing the floating point representation of the integer\n+help: you can convert a `u8` to `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_u8.into());\n    |                ^^^^^^^^^^^\n@@ -1178,7 +1178,7 @@ LL |     foo::<u32>(x_u8 as u16);\n    |                ^^^^^^^^^^^\n    |                |\n    |                expected `u32`, found `u16`\n-   |                help: you can convert an `u16` to `u32`: `(x_u8 as u16).into()`\n+   |                help: you can convert a `u16` to `u32`: `(x_u8 as u16).into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:291:16"}, {"sha": "890686f7737b6a6c50b63d6d99145819c58fa59d", "filename": "src/test/ui/numeric/numeric-suffix.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.stderr?ref=549f861f7d53811521cf929cf58fb6828a2a88d9", "patch": "@@ -1236,7 +1236,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(42_u32);\n    |                ^^^^^^ expected `f64`, found `u32`\n    |\n-help: you can convert an `u32` to `f64`, producing the floating point representation of the integer\n+help: you can convert a `u32` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(42_u32.into());\n    |                ^^^^^^^^^^^^^\n@@ -1247,7 +1247,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(42_u16);\n    |                ^^^^^^ expected `f64`, found `u16`\n    |\n-help: you can convert an `u16` to `f64`, producing the floating point representation of the integer\n+help: you can convert a `u16` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(42_u16.into());\n    |                ^^^^^^^^^^^^^\n@@ -1258,7 +1258,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(42_u8);\n    |                ^^^^^ expected `f64`, found `u8`\n    |\n-help: you can convert an `u8` to `f64`, producing the floating point representation of the integer\n+help: you can convert a `u8` to `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(42_u8.into());\n    |                ^^^^^^^^^^^^\n@@ -1368,7 +1368,7 @@ error[E0308]: mismatched types\n LL |     foo::<f32>(42_u16);\n    |                ^^^^^^ expected `f32`, found `u16`\n    |\n-help: you can convert an `u16` to `f32`, producing the floating point representation of the integer\n+help: you can convert a `u16` to `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(42_u16.into());\n    |                ^^^^^^^^^^^^^\n@@ -1379,7 +1379,7 @@ error[E0308]: mismatched types\n LL |     foo::<f32>(42_u8);\n    |                ^^^^^ expected `f32`, found `u8`\n    |\n-help: you can convert an `u8` to `f32`, producing the floating point representation of the integer\n+help: you can convert a `u8` to `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(42_u8.into());\n    |                ^^^^^^^^^^^^\n@@ -1457,7 +1457,7 @@ LL |     foo::<u32>(42_u8 as u16);\n    |                ^^^^^^^^^^^^\n    |                |\n    |                expected `u32`, found `u16`\n-   |                help: you can convert an `u16` to `u32`: `(42_u8 as u16).into()`\n+   |                help: you can convert a `u16` to `u32`: `(42_u8 as u16).into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:296:16"}, {"sha": "4dc969e76ed4c20111399d35176a8107911b045c", "filename": "src/test/ui/tail-typeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Ftail-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Ftail-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftail-typeck.stderr?ref=549f861f7d53811521cf929cf58fb6828a2a88d9", "patch": "@@ -6,7 +6,7 @@ LL | fn f() -> isize { return g(); }\n    |           |\n    |           expected `isize` because of return type\n    |\n-help: you can convert an `usize` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to `isize` and panic if the converted value wouldn't fit\n    |\n LL | fn f() -> isize { return g().try_into().unwrap(); }\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "4f36357598d27503ff597ff9baf09d4d459196ee", "filename": "src/test/ui/tutorial-suffix-inference-test.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/549f861f7d53811521cf929cf58fb6828a2a88d9/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr?ref=549f861f7d53811521cf929cf58fb6828a2a88d9", "patch": "@@ -5,7 +5,7 @@ LL |     identity_u16(x);\n    |                  ^\n    |                  |\n    |                  expected `u16`, found `u8`\n-   |                  help: you can convert an `u8` to `u16`: `x.into()`\n+   |                  help: you can convert a `u8` to `u16`: `x.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/tutorial-suffix-inference-test.rs:12:18"}]}