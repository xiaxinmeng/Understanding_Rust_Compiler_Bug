{"sha": "c0369c4523caecda8af40f4eb84509b42b673d85", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMzY5YzQ1MjNjYWVjZGE4YWY0MGY0ZWI4NDUwOWI0MmI2NzNkODU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-27T00:23:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-27T00:23:51Z"}, "message": "Rollup merge of #70048 - TyPR124:mutable_osstr, r=dtolnay\n\nAllow obtaining &mut OsStr\n\n```rust\nimpl DerefMut for OsString {...}              // type Target = OsStr\nimpl IndexMut<RangeFull> for OsString {...}   // type Output = OsStr\n```\n\n---\n\nThis change is pulled out of #69937 per @dtolnay\n\nThis implements `DerefMut for OsString` to allow obtaining a `&mut OsStr`. This also implements `IndexMut for OsString`, which is used by `DerefMut`. This pattern is the same as is used by `Deref`.\n\nThis is necessary to for methods like `make_ascii_lowercase` which need to mutate the underlying value.", "tree": {"sha": "c2568402f662316d31a8d77fa2c651673190dc8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2568402f662316d31a8d77fa2c651673190dc8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0369c4523caecda8af40f4eb84509b42b673d85", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJefUeXCRBK7hj4Ov3rIwAAdHIIACCAhzfZjqZfdM783NzRidxQ\nW2Ym2t01RJmioEgHWgfBtRziuvRrz9jKVvBpF9gGDPZ+e3OPumJPJwtFb0RnYQ4D\n7UVvcrlxmiTNP44MCs1nvAYTBCAFgmzI8bhfdR7ncFZ/tuALmmTZc2eweuQ5HX14\nB3a0Ba2TAxudTlJYJZ0rBAAbrg5ssqaRt4ZtNntw0/PQxZuYZfbDbuQ8GvvK4g4o\ndN30tcx+Ph8021a57jtIrmsDmGbH52lHcvBHUPAa7wJ7WPs3jTStxEQA39QtxbCB\neWde++rNHJ2vxYZr0OEOQDsVKsIZHtymyRV+jX+2dnWytQ3Yhz5enrMubXqer7Q=\n=ZAZw\n-----END PGP SIGNATURE-----\n", "payload": "tree c2568402f662316d31a8d77fa2c651673190dc8f\nparent f635c3757b61d1d8aefa86e1d3acdd7d4dea90f8\nparent 45416cd91a6bdc493ea62fb3f412713a0fd8e52e\nauthor Dylan DPC <dylan.dpc@gmail.com> 1585268631 +0100\ncommitter GitHub <noreply@github.com> 1585268631 +0100\n\nRollup merge of #70048 - TyPR124:mutable_osstr, r=dtolnay\n\nAllow obtaining &mut OsStr\n\n```rust\nimpl DerefMut for OsString {...}              // type Target = OsStr\nimpl IndexMut<RangeFull> for OsString {...}   // type Output = OsStr\n```\n\n---\n\nThis change is pulled out of #69937 per @dtolnay\n\nThis implements `DerefMut for OsString` to allow obtaining a `&mut OsStr`. This also implements `IndexMut for OsString`, which is used by `DerefMut`. This pattern is the same as is used by `Deref`.\n\nThis is necessary to for methods like `make_ascii_lowercase` which need to mutate the underlying value.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0369c4523caecda8af40f4eb84509b42b673d85", "html_url": "https://github.com/rust-lang/rust/commit/c0369c4523caecda8af40f4eb84509b42b673d85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0369c4523caecda8af40f4eb84509b42b673d85/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f635c3757b61d1d8aefa86e1d3acdd7d4dea90f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f635c3757b61d1d8aefa86e1d3acdd7d4dea90f8", "html_url": "https://github.com/rust-lang/rust/commit/f635c3757b61d1d8aefa86e1d3acdd7d4dea90f8"}, {"sha": "45416cd91a6bdc493ea62fb3f412713a0fd8e52e", "url": "https://api.github.com/repos/rust-lang/rust/commits/45416cd91a6bdc493ea62fb3f412713a0fd8e52e", "html_url": "https://github.com/rust-lang/rust/commit/45416cd91a6bdc493ea62fb3f412713a0fd8e52e"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "0fbe8e5dd83e84d0ca4d1d7879a092d3cec8e7a2", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c0369c4523caecda8af40f4eb84509b42b673d85/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0369c4523caecda8af40f4eb84509b42b673d85/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=c0369c4523caecda8af40f4eb84509b42b673d85", "patch": "@@ -379,6 +379,14 @@ impl ops::Index<ops::RangeFull> for OsString {\n     }\n }\n \n+#[stable(feature = \"mut_osstr\", since = \"1.44.0\")]\n+impl ops::IndexMut<ops::RangeFull> for OsString {\n+    #[inline]\n+    fn index_mut(&mut self, _index: ops::RangeFull) -> &mut OsStr {\n+        OsStr::from_inner_mut(self.inner.as_mut_slice())\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ops::Deref for OsString {\n     type Target = OsStr;\n@@ -389,6 +397,14 @@ impl ops::Deref for OsString {\n     }\n }\n \n+#[stable(feature = \"mut_osstr\", since = \"1.44.0\")]\n+impl ops::DerefMut for OsString {\n+    #[inline]\n+    fn deref_mut(&mut self) -> &mut OsStr {\n+        &mut self[..]\n+    }\n+}\n+\n #[stable(feature = \"osstring_default\", since = \"1.9.0\")]\n impl Default for OsString {\n     /// Constructs an empty `OsString`.\n@@ -509,9 +525,20 @@ impl OsStr {\n \n     #[inline]\n     fn from_inner(inner: &Slice) -> &OsStr {\n+        // Safety: OsStr is just a wrapper of Slice,\n+        // therefore converting &Slice to &OsStr is safe.\n         unsafe { &*(inner as *const Slice as *const OsStr) }\n     }\n \n+    #[inline]\n+    fn from_inner_mut(inner: &mut Slice) -> &mut OsStr {\n+        // Safety: OsStr is just a wrapper of Slice,\n+        // therefore converting &mut Slice to &mut OsStr is safe.\n+        // Any method that mutates OsStr must be careful not to\n+        // break platform-specific encoding, in particular Wtf8 on Windows.\n+        unsafe { &mut *(inner as *mut Slice as *mut OsStr) }\n+    }\n+\n     /// Yields a [`&str`] slice if the `OsStr` is valid Unicode.\n     ///\n     /// This conversion may entail doing a check for UTF-8 validity."}, {"sha": "ff6885cb27477e7c9bd9efb4110b430c48ef2829", "filename": "src/libstd/sys/windows/os_str.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0369c4523caecda8af40f4eb84509b42b673d85/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0369c4523caecda8af40f4eb84509b42b673d85/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs?ref=c0369c4523caecda8af40f4eb84509b42b673d85", "patch": "@@ -77,9 +77,21 @@ impl Buf {\n     }\n \n     pub fn as_slice(&self) -> &Slice {\n+        // Safety: Slice is just a wrapper for Wtf8,\n+        // and self.inner.as_slice() returns &Wtf8.\n+        // Therefore, transmuting &Wtf8 to &Slice is safe.\n         unsafe { mem::transmute(self.inner.as_slice()) }\n     }\n \n+    pub fn as_mut_slice(&mut self) -> &mut Slice {\n+        // Safety: Slice is just a wrapper for Wtf8,\n+        // and self.inner.as_mut_slice() returns &mut Wtf8.\n+        // Therefore, transmuting &mut Wtf8 to &mut Slice is safe.\n+        // Additionally, care should be taken to ensure the slice\n+        // is always valid Wtf8.\n+        unsafe { mem::transmute(self.inner.as_mut_slice()) }\n+    }\n+\n     pub fn into_string(self) -> Result<String, Buf> {\n         self.inner.into_string().map_err(|buf| Buf { inner: buf })\n     }"}, {"sha": "c5d02fb17722f4401ddcb70a60b5a53fc32c6ecc", "filename": "src/libstd/sys_common/os_str_bytes.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0369c4523caecda8af40f4eb84509b42b673d85/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0369c4523caecda8af40f4eb84509b42b673d85/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs?ref=c0369c4523caecda8af40f4eb84509b42b673d85", "patch": "@@ -106,9 +106,20 @@ impl Buf {\n \n     #[inline]\n     pub fn as_slice(&self) -> &Slice {\n+        // Safety: Slice just wraps [u8],\n+        // and &*self.inner is &[u8], therefore\n+        // transmuting &[u8] to &Slice is safe.\n         unsafe { mem::transmute(&*self.inner) }\n     }\n \n+    #[inline]\n+    pub fn as_mut_slice(&mut self) -> &mut Slice {\n+        // Safety: Slice just wraps [u8],\n+        // and &mut *self.inner is &mut [u8], therefore\n+        // transmuting &mut [u8] to &mut Slice is safe.\n+        unsafe { mem::transmute(&mut *self.inner) }\n+    }\n+\n     pub fn into_string(self) -> Result<String, Buf> {\n         String::from_utf8(self.inner).map_err(|p| Buf { inner: p.into_bytes() })\n     }"}]}