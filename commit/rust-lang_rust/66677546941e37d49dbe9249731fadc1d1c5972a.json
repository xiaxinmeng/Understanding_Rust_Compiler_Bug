{"sha": "66677546941e37d49dbe9249731fadc1d1c5972a", "node_id": "C_kwDOAAsO6NoAKDY2Njc3NTQ2OTQxZTM3ZDQ5ZGJlOTI0OTczMWZhZGMxZDFjNTk3MmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-29T04:34:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-29T04:34:47Z"}, "message": "Rollup merge of #100959 - LuisCardosoOliveira:translation-rename-attr-warning, r=davidtwco\n\ntranslations: rename warn_ to warning\n\n## Description\n\nThis MR renames the the macro `warn_` to `warning`.\n\nTo give a little bit of context, as [explained](https://rust-lang.zulipchat.com/#narrow/stream/336883-i18n/topic/.23100717.20diag.20translation/near/295074146) by ```````@davidtwco``````` in the Zulip channel, `warn_`  was named like that because the keyword `warn` is a built-in attribute and at the time this macro was created the word `warning` was also\ntaken.\n\nHowever, it is no longer the case and we can rename `warn_` to `warning`.", "tree": {"sha": "d26fae37336951e349f45bf3eccd471a0a3cb402", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d26fae37336951e349f45bf3eccd471a0a3cb402"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66677546941e37d49dbe9249731fadc1d1c5972a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjDEHnCRBK7hj4Ov3rIwAAHL4IAE0rhLpDS/zzn77WFQwoBJTf\njECl+B4VMJj98zqMLW3ChZutjDPj1O6grVN9lIm8xzhxC4bFlePBbCVQjikHyyh6\nLLHRIRgPj3ZHm5gpJnPIMbfLkWWMR2/9ZtQxZODqDUC293v9MxmO5wpHQEGPzlHI\nOnCR3RmNFuF38WzggGCOtHG6hwYn0Xxv0t8mBacyTSFSJMhTk261KAnMBk+BnsJE\nzK0M9+Yn4jsSat5yMc4arE8JLyNDO2A5jh9x20Oqa+ZRX2LjNvnx/hIwGZXrgBiF\n6QD62hVfma9q0Kvma94bq4bC19tFGTX5TlEQOXbfUPu7YH9ccoIiaBt9Bf4LWhw=\n=nOjR\n-----END PGP SIGNATURE-----\n", "payload": "tree d26fae37336951e349f45bf3eccd471a0a3cb402\nparent d814fdd3f944069826f1294f2cc6bbf0fe4835fa\nparent b508b50617bd6a976f77d33962a6f0df52eee12d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661747687 +0200\ncommitter GitHub <noreply@github.com> 1661747687 +0200\n\nRollup merge of #100959 - LuisCardosoOliveira:translation-rename-attr-warning, r=davidtwco\n\ntranslations: rename warn_ to warning\n\n## Description\n\nThis MR renames the the macro `warn_` to `warning`.\n\nTo give a little bit of context, as [explained](https://rust-lang.zulipchat.com/#narrow/stream/336883-i18n/topic/.23100717.20diag.20translation/near/295074146) by ```````@davidtwco``````` in the Zulip channel, `warn_`  was named like that because the keyword `warn` is a built-in attribute and at the time this macro was created the word `warning` was also\ntaken.\n\nHowever, it is no longer the case and we can rename `warn_` to `warning`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66677546941e37d49dbe9249731fadc1d1c5972a", "html_url": "https://github.com/rust-lang/rust/commit/66677546941e37d49dbe9249731fadc1d1c5972a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66677546941e37d49dbe9249731fadc1d1c5972a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d814fdd3f944069826f1294f2cc6bbf0fe4835fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d814fdd3f944069826f1294f2cc6bbf0fe4835fa", "html_url": "https://github.com/rust-lang/rust/commit/d814fdd3f944069826f1294f2cc6bbf0fe4835fa"}, {"sha": "b508b50617bd6a976f77d33962a6f0df52eee12d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b508b50617bd6a976f77d33962a6f0df52eee12d", "html_url": "https://github.com/rust-lang/rust/commit/b508b50617bd6a976f77d33962a6f0df52eee12d"}], "stats": {"total": 102, "additions": 52, "deletions": 50}, "files": [{"sha": "a4ccfcace1923e6bc81cc18519649c75c407eb59", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/66677546941e37d49dbe9249731fadc1d1c5972a/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66677546941e37d49dbe9249731fadc1d1c5972a/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=66677546941e37d49dbe9249731fadc1d1c5972a", "patch": "@@ -148,9 +148,9 @@ impl DiagnosticDeriveBuilder {\n             // `#[help(..)]`/`#[note(..)]` when the user is specifying a alternative slug.\n             Meta::List(MetaList { ref nested, .. }) => nested,\n             // Subdiagnostics without spans can be applied to the type too, and these are just\n-            // paths: `#[help]`, `#[note]` and `#[warn_]`\n+            // paths: `#[help]`, `#[note]` and `#[warning]`\n             Meta::Path(_) if !is_diag => {\n-                let fn_name = if name == \"warn_\" {\n+                let fn_name = if name == \"warning\" {\n                     Ident::new(\"warn\", attr.span())\n                 } else {\n                     Ident::new(name, attr.span())\n@@ -163,12 +163,15 @@ impl DiagnosticDeriveBuilder {\n         // Check the kind before doing any further processing so that there aren't misleading\n         // \"no kind specified\" errors if there are failures later.\n         match name {\n-            \"error\" | \"warning\" | \"lint\" => throw_invalid_attr!(attr, &meta, |diag| {\n-                diag.help(\"`error`, `warning` and `lint` have been replaced by `diag`\")\n+            \"error\" | \"lint\" => throw_invalid_attr!(attr, &meta, |diag| {\n+                diag.help(\"`error` and `lint` have been replaced by `diag`\")\n             }),\n-            \"diag\" | \"help\" | \"note\" | \"warn_\" => (),\n+            \"warn_\" => throw_invalid_attr!(attr, &meta, |diag| {\n+                diag.help(\"`warn_` have been replaced by `warning`\")\n+            }),\n+            \"diag\" | \"help\" | \"note\" | \"warning\" => (),\n             _ => throw_invalid_attr!(attr, &meta, |diag| {\n-                diag.help(\"only `diag`, `help`, `note` and `warn_` are valid attributes\")\n+                diag.help(\"only `diag`, `help`, `note` and `warning` are valid attributes\")\n             }),\n         }\n \n@@ -180,7 +183,7 @@ impl DiagnosticDeriveBuilder {\n             if !is_diag && nested_iter.next().is_some() {\n                 throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n                     diag.help(\n-                        \"`help`, `note` and `warn_` struct attributes can only have one argument\",\n+                        \"`help`, `note` and `warning` struct attributes can only have one argument\",\n                     )\n                 });\n             }\n@@ -348,12 +351,12 @@ impl DiagnosticDeriveBuilder {\n                 report_error_if_not_applied_to_span(attr, &info)?;\n                 Ok(self.add_spanned_subdiagnostic(binding, ident, parse_quote! { _subdiag::label }))\n             }\n-            \"note\" | \"help\" | \"warn_\" => {\n+            \"note\" | \"help\" | \"warning\" => {\n                 let warn_ident = Ident::new(\"warn\", Span::call_site());\n                 let (ident, path) = match name {\n                     \"note\" => (ident, parse_quote! { _subdiag::note }),\n                     \"help\" => (ident, parse_quote! { _subdiag::help }),\n-                    \"warn_\" => (&warn_ident, parse_quote! { _subdiag::warn }),\n+                    \"warning\" => (&warn_ident, parse_quote! { _subdiag::warn }),\n                     _ => unreachable!(),\n                 };\n                 if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) {\n@@ -390,7 +393,7 @@ impl DiagnosticDeriveBuilder {\n             \"suggestion\" | \"suggestion_short\" | \"suggestion_hidden\" | \"suggestion_verbose\" => {\n                 return self.generate_inner_field_code_suggestion(attr, info);\n             }\n-            \"label\" | \"help\" | \"note\" | \"warn_\" => (),\n+            \"label\" | \"help\" | \"note\" | \"warning\" => (),\n             _ => throw_invalid_attr!(attr, &meta, |diag| {\n                 diag.help(\n                     \"only `label`, `help`, `note`, `warn` or `suggestion{,_short,_hidden,_verbose}` are \\\n@@ -422,14 +425,14 @@ impl DiagnosticDeriveBuilder {\n                 Ok(self.add_spanned_subdiagnostic(binding, ident, msg))\n             }\n             \"note\" | \"help\" if type_is_unit(&info.ty) => Ok(self.add_subdiagnostic(ident, msg)),\n-            // `warn_` must be special-cased because the attribute `warn` already has meaning and\n+            // `warning` must be special-cased because the attribute `warn` already has meaning and\n             // so isn't used, despite the diagnostic API being named `warn`.\n-            \"warn_\" if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) => Ok(self\n+            \"warning\" if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) => Ok(self\n                 .add_spanned_subdiagnostic(binding, &Ident::new(\"warn\", Span::call_site()), msg)),\n-            \"warn_\" if type_is_unit(&info.ty) => {\n+            \"warning\" if type_is_unit(&info.ty) => {\n                 Ok(self.add_subdiagnostic(&Ident::new(\"warn\", Span::call_site()), msg))\n             }\n-            \"note\" | \"help\" | \"warn_\" => report_type_error(attr, \"`Span` or `()`\")?,\n+            \"note\" | \"help\" | \"warning\" => report_type_error(attr, \"`Span` or `()`\")?,\n             _ => unreachable!(),\n         }\n     }"}, {"sha": "666dbc23c287cb3daef7efb7ed219f4e94a172da", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66677546941e37d49dbe9249731fadc1d1c5972a/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66677546941e37d49dbe9249731fadc1d1c5972a/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=66677546941e37d49dbe9249731fadc1d1c5972a", "patch": "@@ -37,7 +37,7 @@ enum SubdiagnosticKind {\n     Note,\n     /// `#[help(...)]`\n     Help,\n-    /// `#[warn_(...)]`\n+    /// `#[warning(...)]`\n     Warn,\n     /// `#[suggestion{,_short,_hidden,_verbose}]`\n     Suggestion(SubdiagnosticSuggestionKind),\n@@ -51,7 +51,7 @@ impl FromStr for SubdiagnosticKind {\n             \"label\" => Ok(SubdiagnosticKind::Label),\n             \"note\" => Ok(SubdiagnosticKind::Note),\n             \"help\" => Ok(SubdiagnosticKind::Help),\n-            \"warn_\" => Ok(SubdiagnosticKind::Warn),\n+            \"warning\" => Ok(SubdiagnosticKind::Warn),\n             \"suggestion\" => Ok(SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Normal)),\n             \"suggestion_short\" => {\n                 Ok(SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Short))"}, {"sha": "8faac8ef36a53a216a4787d7ecf58de0b252211f", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66677546941e37d49dbe9249731fadc1d1c5972a/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66677546941e37d49dbe9249731fadc1d1c5972a/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=66677546941e37d49dbe9249731fadc1d1c5972a", "patch": "@@ -132,7 +132,7 @@ decl_derive!(\n         diag,\n         help,\n         note,\n-        warn_,\n+        warning,\n         // field attributes\n         skip_arg,\n         primary_span,\n@@ -149,7 +149,7 @@ decl_derive!(\n         diag,\n         help,\n         note,\n-        warn_,\n+        warning,\n         // field attributes\n         skip_arg,\n         primary_span,\n@@ -166,7 +166,7 @@ decl_derive!(\n         label,\n         help,\n         note,\n-        warn_,\n+        warning,\n         suggestion,\n         suggestion_short,\n         suggestion_hidden,"}, {"sha": "901f56ad96d1792385a747fd930c36ccd5aba52e", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/66677546941e37d49dbe9249731fadc1d1c5972a/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66677546941e37d49dbe9249731fadc1d1c5972a/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=66677546941e37d49dbe9249731fadc1d1c5972a", "patch": "@@ -28,7 +28,7 @@ pub struct IgnoredInlineAttrFnProto;\n \n #[derive(LintDiagnostic)]\n #[diag(passes::inline_ignored_constants)]\n-#[warn_]\n+#[warning]\n #[note]\n pub struct IgnoredInlineAttrConstants;\n \n@@ -347,23 +347,23 @@ pub struct MustNotSuspend {\n \n #[derive(LintDiagnostic)]\n #[diag(passes::cold)]\n-#[warn_]\n+#[warning]\n pub struct Cold {\n     #[label]\n     pub span: Span,\n }\n \n #[derive(LintDiagnostic)]\n #[diag(passes::link)]\n-#[warn_]\n+#[warning]\n pub struct Link {\n     #[label]\n     pub span: Option<Span>,\n }\n \n #[derive(LintDiagnostic)]\n #[diag(passes::link_name)]\n-#[warn_]\n+#[warning]\n pub struct LinkName<'a> {\n     #[help]\n     pub attr_span: Option<Span>,\n@@ -449,15 +449,15 @@ pub struct RustcDirtyClean {\n \n #[derive(LintDiagnostic)]\n #[diag(passes::link_section)]\n-#[warn_]\n+#[warning]\n pub struct LinkSection {\n     #[label]\n     pub span: Span,\n }\n \n #[derive(LintDiagnostic)]\n #[diag(passes::no_mangle_foreign)]\n-#[warn_]\n+#[warning]\n #[note]\n pub struct NoMangleForeign {\n     #[label]\n@@ -469,7 +469,7 @@ pub struct NoMangleForeign {\n \n #[derive(LintDiagnostic)]\n #[diag(passes::no_mangle)]\n-#[warn_]\n+#[warning]\n pub struct NoMangle {\n     #[label]\n     pub span: Span,\n@@ -617,7 +617,7 @@ pub struct UnusedDuplicate {\n     pub this: Span,\n     #[note]\n     pub other: Span,\n-    #[warn_]\n+    #[warning]\n     pub warning: Option<()>,\n }\n "}, {"sha": "b1f557cb94de8538e58ef71051a7628f05fbf842", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/66677546941e37d49dbe9249731fadc1d1c5972a/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66677546941e37d49dbe9249731fadc1d1c5972a/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=66677546941e37d49dbe9249731fadc1d1c5972a", "patch": "@@ -549,7 +549,7 @@ struct ErrorWithMultiSpan {\n \n #[derive(SessionDiagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n-#[warn_]\n+#[warning]\n struct ErrorWithWarn {\n     val: String,\n }\n@@ -562,11 +562,11 @@ struct ErrorWithWarn {\n struct ErrorAttribute {}\n \n #[derive(SessionDiagnostic)]\n-#[warning(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n-//~^ ERROR `#[warning(...)]` is not a valid attribute\n+#[warn_(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+//~^ ERROR `#[warn_(...)]` is not a valid attribute\n //~| ERROR diagnostic slug not specified\n-//~| ERROR cannot find attribute `warning` in this scope\n-struct WarningAttribute {}\n+//~| ERROR cannot find attribute `warn_` in this scope\n+struct WarnAttribute {}\n \n #[derive(SessionDiagnostic)]\n #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]"}, {"sha": "621c59f448951ed0d972684a86272be7438063bf", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/66677546941e37d49dbe9249731fadc1d1c5972a/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66677546941e37d49dbe9249731fadc1d1c5972a/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=66677546941e37d49dbe9249731fadc1d1c5972a", "patch": "@@ -21,7 +21,7 @@ error: `#[nonsense(...)]` is not a valid attribute\n LL | #[nonsense(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: only `diag`, `help`, `note` and `warn_` are valid attributes\n+   = help: only `diag`, `help`, `note` and `warning` are valid attributes\n \n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:53:1\n@@ -329,7 +329,7 @@ error: `#[error(...)]` is not a valid attribute\n LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: `error`, `warning` and `lint` have been replaced by `diag`\n+   = help: `error` and `lint` have been replaced by `diag`\n \n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:558:1\n@@ -343,23 +343,23 @@ LL | | struct ErrorAttribute {}\n    |\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n-error: `#[warning(...)]` is not a valid attribute\n+error: `#[warn_(...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:565:1\n    |\n-LL | #[warning(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[warn_(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: `error`, `warning` and `lint` have been replaced by `diag`\n+   = help: `warn_` have been replaced by `warning`\n \n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:565:1\n    |\n-LL | / #[warning(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+LL | / #[warn_(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n LL | |\n LL | |\n LL | |\n-LL | | struct WarningAttribute {}\n-   | |__________________________^\n+LL | | struct WarnAttribute {}\n+   | |_______________________^\n    |\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n@@ -369,7 +369,7 @@ error: `#[lint(...)]` is not a valid attribute\n LL | #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: `error`, `warning` and `lint` have been replaced by `diag`\n+   = help: `error` and `lint` have been replaced by `diag`\n \n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:572:1\n@@ -389,7 +389,7 @@ error: `#[lint(...)]` is not a valid attribute\n LL | #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: `error`, `warning` and `lint` have been replaced by `diag`\n+   = help: `error` and `lint` have been replaced by `diag`\n \n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:579:1\n@@ -421,11 +421,11 @@ error: cannot find attribute `error` in this scope\n LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    |   ^^^^^\n \n-error: cannot find attribute `warning` in this scope\n+error: cannot find attribute `warn_` in this scope\n   --> $DIR/diagnostic-derive.rs:565:3\n    |\n-LL | #[warning(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n-   |   ^^^^^^^\n+LL | #[warn_(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+   |   ^^^^^ help: a built-in attribute with a similar name exists: `warn`\n \n error: cannot find attribute `lint` in this scope\n   --> $DIR/diagnostic-derive.rs:572:3"}, {"sha": "ddfc0d3365df0710e3457d5f233cb0c89736853c", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/66677546941e37d49dbe9249731fadc1d1c5972a/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66677546941e37d49dbe9249731fadc1d1c5972a/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=66677546941e37d49dbe9249731fadc1d1c5972a", "patch": "@@ -510,12 +510,11 @@ enum AX {\n }\n \n #[derive(SessionSubdiagnostic)]\n-#[warn_(parser::add_paren)]\n-struct AY {\n-}\n+#[warning(parser::add_paren)]\n+struct AY {}\n \n #[derive(SessionSubdiagnostic)]\n-#[warn_(parser::add_paren)]\n+#[warning(parser::add_paren)]\n struct AZ {\n     #[primary_span]\n     span: Span,"}]}