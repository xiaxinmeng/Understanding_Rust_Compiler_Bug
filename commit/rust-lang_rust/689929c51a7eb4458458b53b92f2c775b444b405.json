{"sha": "689929c51a7eb4458458b53b92f2c775b444b405", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OTkyOWM1MWE3ZWI0NDU4NDU4YjUzYjkyZjJjNzc1YjQ0NGI0MDU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-08-15T07:56:05Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-08-16T20:30:42Z"}, "message": "debuginfo: Added support for self parameter in methods.", "tree": {"sha": "5de8e7af8311b8696ee267b462bbdc29c5f01903", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5de8e7af8311b8696ee267b462bbdc29c5f01903"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/689929c51a7eb4458458b53b92f2c775b444b405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/689929c51a7eb4458458b53b92f2c775b444b405", "html_url": "https://github.com/rust-lang/rust/commit/689929c51a7eb4458458b53b92f2c775b444b405", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/689929c51a7eb4458458b53b92f2c775b444b405/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44557e7a3372556284ea8ee062a258b0d4377b86", "url": "https://api.github.com/repos/rust-lang/rust/commits/44557e7a3372556284ea8ee062a258b0d4377b86", "html_url": "https://github.com/rust-lang/rust/commit/44557e7a3372556284ea8ee062a258b0d4377b86"}], "stats": {"total": 82, "additions": 70, "deletions": 12}, "files": [{"sha": "9c49e9ee8d7f9bb6df3d92292aeb1e5f6791f3bc", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/689929c51a7eb4458458b53b92f2c775b444b405/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689929c51a7eb4458458b53b92f2c775b444b405/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=689929c51a7eb4458458b53b92f2c775b444b405", "patch": "@@ -133,7 +133,7 @@ pub fn push_ctxt(s: &'static str) -> _InsnCtxt {\n \n fn fcx_has_nonzero_span(fcx: &FunctionContext) -> bool {\n     match fcx.span {\n-        None => true,\n+        None => false,\n         Some(span) => *span.lo != 0 || *span.hi != 0\n     }\n }\n@@ -1739,6 +1739,10 @@ pub fn copy_args_to_allocas(fcx: @mut FunctionContext,\n \n             fcx.llself = Some(ValSelfData {v: self_val, ..slf});\n             add_clean(bcx, self_val, slf.t);\n+\n+            if fcx.ccx.sess.opts.extra_debuginfo && fcx_has_nonzero_span(fcx) {\n+                debuginfo::create_self_argument_metadata(bcx, slf.t, self_val);\n+            }\n         }\n         _ => {}\n     }"}, {"sha": "f81d6f8ad8a67dcad3d0bdac6ed18f6be375ca2c", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 65, "deletions": 11, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/689929c51a7eb4458458b53b92f2c775b444b405/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689929c51a7eb4458458b53b92f2c775b444b405/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=689929c51a7eb4458458b53b92f2c775b444b405", "patch": "@@ -70,6 +70,7 @@ use std::ptr;\n use std::vec;\n use syntax::codemap::span;\n use syntax::{ast, codemap, ast_util, ast_map};\n+use syntax::parse::token::keywords;\n \n static DW_LANG_RUST: int = 0x9000;\n \n@@ -140,15 +141,6 @@ pub struct FunctionDebugContext {\n     priv argument_counter: uint,\n }\n \n-impl FunctionDebugContext {\n-    fn new() -> FunctionDebugContext {\n-        return FunctionDebugContext {\n-            scope_map: HashMap::new(),\n-            argument_counter: 1,\n-        };\n-    }\n-}\n-\n /// Create any deferred debug metadata nodes\n pub fn finalize(cx: @mut CrateContext) {\n     debug!(\"finalize\");\n@@ -175,6 +167,9 @@ pub fn create_local_var_metadata(bcx: @mut Block, local: &ast::Local) {\n     }\n }\n \n+/// Creates debug information for a local variable introduced in the head of a match-statement arm.\n+///\n+/// Adds the created metadata nodes directly to the crate's IR.\n pub fn create_match_binding_metadata(bcx: @mut Block,\n                                      variable_ident: ast::ident,\n                                      node_id: ast::NodeId,\n@@ -183,11 +178,59 @@ pub fn create_match_binding_metadata(bcx: @mut Block,\n     declare_local(bcx, variable_ident, node_id, variable_type, span);\n }\n \n+/// Creates debug information for the self argument of a method.\n+///\n+/// Adds the created metadata nodes directly to the crate's IR.\n+pub fn create_self_argument_metadata(bcx: @mut Block,\n+                                     variable_type: ty::t,\n+                                     llptr: ValueRef) {\n+    assert_fcx_has_span(bcx.fcx);\n+    let span = bcx.fcx.span.unwrap();\n+\n+    let cx = bcx.ccx();\n+\n+    let filename = span_start(cx, span).file.name;\n+    let file_metadata = file_metadata(cx, filename);\n+\n+    let loc = span_start(cx, span);\n+    let type_metadata = type_metadata(cx, variable_type, span);\n+    let scope = create_function_metadata(bcx.fcx);\n+    let self_ident = keywords::Self.to_ident();\n+\n+    let var_metadata = do cx.sess.str_of(self_ident).to_c_str().with_ref |name| {\n+        unsafe {\n+            llvm::LLVMDIBuilderCreateLocalVariable(\n+                DIB(cx),\n+                DW_TAG_arg_variable,\n+                scope,\n+                name,\n+                file_metadata,\n+                loc.line as c_uint,\n+                type_metadata,\n+                false,\n+                0,\n+                1)\n+        }\n+    };\n+\n+    set_debug_location(cx, scope, loc.line, loc.col.to_uint());\n+    unsafe {\n+        let instr = llvm::LLVMDIBuilderInsertDeclareAtEnd(\n+            DIB(cx),\n+            llptr,\n+            var_metadata,\n+            bcx.llbb);\n+\n+        llvm::LLVMSetInstDebugLocation(trans::build::B(bcx).llbuilder, instr);\n+    }\n+}\n+\n /// Creates debug information for the given function argument.\n ///\n /// Adds the created metadata nodes directly to the crate's IR.\n pub fn create_argument_metadata(bcx: @mut Block,\n-                                arg: &ast::arg) {\n+                                arg: &ast::arg,\n+                                needs_deref: bool) {\n     let fcx = bcx.fcx;\n     let cx = fcx.ccx;\n \n@@ -393,7 +436,11 @@ pub fn create_function_metadata(fcx: &mut FunctionContext) -> DISubprogram {\n     {\n         assert!(fcx.debug_context.is_none());\n \n-        let mut fn_debug_context = ~FunctionDebugContext::new();\n+        let mut fn_debug_context = ~FunctionDebugContext {\n+            scope_map: HashMap::new(),\n+            argument_counter: if fcx.llself.is_some() { 2 } else { 1 }\n+        };\n+\n         let entry_block_id = fcx.entry_bcx.get_ref().node_info.get_ref().id;\n         let entry_block = cx.tcx.items.get(&entry_block_id);\n \n@@ -1408,6 +1455,13 @@ fn DIB(cx: &CrateContext) -> DIBuilderRef {\n     cx.dbg_cx.get_ref().builder\n }\n \n+fn assert_fcx_has_span(fcx: &FunctionContext) {\n+    if fcx.span.is_none() {\n+        fcx.ccx.sess.bug(fmt!(\"debuginfo: Encountered function %s with invalid source span. \\\n+            This function should have been ignored by debuginfo generation.\",\n+            ast_map::path_to_str(fcx.path, fcx.ccx.sess.intr())));\n+    }\n+}\n \n // This procedure builds the *scope map* for a given function, which maps any given ast::NodeId in\n // the function's AST to the correct DIScope metadata instance."}]}