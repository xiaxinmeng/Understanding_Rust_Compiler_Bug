{"sha": "2117817cfd40ad03deb5d5a5d53e43d76f79bebf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMTc4MTdjZmQ0MGFkMDNkZWI1ZDVhNWQ1M2U0M2Q3NmY3OWJlYmY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-30T18:15:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-30T18:15:56Z"}, "message": "Miri stacktrace: record span inside frame, not call-site span", "tree": {"sha": "457c4540aa5c45cb87e9c9caa9c763561059e745", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/457c4540aa5c45cb87e9c9caa9c763561059e745"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2117817cfd40ad03deb5d5a5d53e43d76f79bebf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2117817cfd40ad03deb5d5a5d53e43d76f79bebf", "html_url": "https://github.com/rust-lang/rust/commit/2117817cfd40ad03deb5d5a5d53e43d76f79bebf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2117817cfd40ad03deb5d5a5d53e43d76f79bebf/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8926bb497d9b127eb318aea5aed0e745d8381591", "url": "https://api.github.com/repos/rust-lang/rust/commits/8926bb497d9b127eb318aea5aed0e745d8381591", "html_url": "https://github.com/rust-lang/rust/commit/8926bb497d9b127eb318aea5aed0e745d8381591"}], "stats": {"total": 41, "additions": 12, "deletions": 29}, "files": [{"sha": "5a4588d746db6728ea6eb8a499256796fe88da00", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2117817cfd40ad03deb5d5a5d53e43d76f79bebf/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2117817cfd40ad03deb5d5a5d53e43d76f79bebf/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=2117817cfd40ad03deb5d5a5d53e43d76f79bebf", "patch": "@@ -53,9 +53,8 @@ pub struct ConstEvalErr<'tcx> {\n \n #[derive(Debug)]\n pub struct FrameInfo<'tcx> {\n-    /// This span is in the caller.\n-    pub call_site: Span,\n     pub instance: ty::Instance<'tcx>,\n+    pub span: Span,\n     pub lint_root: Option<hir::HirId>,\n }\n \n@@ -65,12 +64,12 @@ impl<'tcx> fmt::Display for FrameInfo<'tcx> {\n             if tcx.def_key(self.instance.def_id()).disambiguated_data.data\n                 == DefPathData::ClosureExpr\n             {\n-                write!(f, \"inside call to closure\")?;\n+                write!(f, \"inside closure\")?;\n             } else {\n-                write!(f, \"inside call to `{}`\", self.instance)?;\n+                write!(f, \"inside `{}`\", self.instance)?;\n             }\n-            if !self.call_site.is_dummy() {\n-                let lo = tcx.sess.source_map().lookup_char_pos(self.call_site.lo());\n+            if !self.span.is_dummy() {\n+                let lo = tcx.sess.source_map().lookup_char_pos(self.span.lo());\n                 write!(f, \" at {}:{}:{}\", lo.file.name, lo.line, lo.col.to_usize() + 1)?;\n             }\n             Ok(())\n@@ -169,13 +168,9 @@ impl<'tcx> ConstEvalErr<'tcx> {\n                 err.span_label(self.span, span_msg);\n             }\n             // Add spans for the stacktrace.\n-            // Skip the last, which is just the environment of the constant.  The stacktrace\n-            // is sometimes empty because we create \"fake\" eval contexts in CTFE to do work\n-            // on constant values.\n-            if !self.stacktrace.is_empty() {\n-                for frame_info in &self.stacktrace[..self.stacktrace.len() - 1] {\n-                    err.span_label(frame_info.call_site, frame_info.to_string());\n-                }\n+            // Skip the first, which is the place of the error.\n+            for frame_info in self.stacktrace.iter().skip(1) {\n+                err.span_label(frame_info.span, frame_info.to_string());\n             }\n             // Let the caller finish the job.\n             emit(err)"}, {"sha": "9680130bbde1dad6253e3e067a2fd2627ab7aea4", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2117817cfd40ad03deb5d5a5d53e43d76f79bebf/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2117817cfd40ad03deb5d5a5d53e43d76f79bebf/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=2117817cfd40ad03deb5d5a5d53e43d76f79bebf", "patch": "@@ -860,30 +860,18 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     }\n \n     pub fn generate_stacktrace(&self, explicit_span: Option<Span>) -> Vec<FrameInfo<'tcx>> {\n-        let mut last_span = None;\n         let mut frames = Vec::new();\n         for frame in self.stack().iter().rev() {\n-            // make sure we don't emit frames that are duplicates of the previous\n-            if explicit_span == Some(frame.span) {\n-                last_span = Some(frame.span);\n-                continue;\n-            }\n-            if let Some(last) = last_span {\n-                if last == frame.span {\n-                    continue;\n-                }\n-            } else {\n-                last_span = Some(frame.span);\n-            }\n-\n-            let lint_root = frame.current_source_info().and_then(|source_info| {\n+            let source_info = frame.current_source_info();\n+            let lint_root = source_info.and_then(|source_info| {\n                 match &frame.body.source_scopes[source_info.scope].local_data {\n                     mir::ClearCrossCrate::Set(data) => Some(data.lint_root),\n                     mir::ClearCrossCrate::Clear => None,\n                 }\n             });\n+            let span = source_info.map_or(DUMMY_SP, |source_info| source_info.span);\n \n-            frames.push(FrameInfo { call_site: frame.span, instance: frame.instance, lint_root });\n+            frames.push(FrameInfo { span, instance: frame.instance, lint_root });\n         }\n         trace!(\"generate stacktrace: {:#?}, {:?}\", frames, explicit_span);\n         frames"}]}