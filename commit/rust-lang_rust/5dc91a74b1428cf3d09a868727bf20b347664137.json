{"sha": "5dc91a74b1428cf3d09a868727bf20b347664137", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYzkxYTc0YjE0MjhjZjNkMDlhODY4NzI3YmYyMGIzNDc2NjQxMzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-27T18:41:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-27T18:41:53Z"}, "message": "Auto merge of #30064 - fhartwig:macro-suggestions, r=sanxiyn\n\nFixes #13677\nThis does the same sort of suggestion for misspelt macros that we already do for misspelt identifiers.\nExample. Compiling this program:\n\n```rust\nmacro_rules! foo {\n    ($e:expr) => ( $e )\n}\n\nfn main() {\n    fob!(\"hello!\");\n}\n```\n\ngives the following error message:\n\n```\n/Users/mcp/temp/test.rs:7:5: 7:8 error: macro undefined: 'fob!'\n/Users/mcp/temp/test.rs:7     fob!(\"hello!\");\n                              ^~~\n/Users/mcp/temp/test.rs:7:5: 7:8 help: did you mean `foo`?\n/Users/mcp/temp/test.rs:7     fob!(\"hello!\");\n```\n\nI had to move the levenshtein distance function into libsyntax for this. Maybe this should live somewhere else (some utility crate?), but I couldn't find a crate to put it in that is imported by libsyntax and the other rustc crates.", "tree": {"sha": "1c9f0209f7ec74bc6ecbdc83ded5fda46a29c397", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c9f0209f7ec74bc6ecbdc83ded5fda46a29c397"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dc91a74b1428cf3d09a868727bf20b347664137", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dc91a74b1428cf3d09a868727bf20b347664137", "html_url": "https://github.com/rust-lang/rust/commit/5dc91a74b1428cf3d09a868727bf20b347664137", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dc91a74b1428cf3d09a868727bf20b347664137/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca6365037f2af12d7692672c17788be7e0af98cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca6365037f2af12d7692672c17788be7e0af98cb", "html_url": "https://github.com/rust-lang/rust/commit/ca6365037f2af12d7692672c17788be7e0af98cb"}, {"sha": "4bb7cf11dcb7b4d106456b9c34c2e30638615f47", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb7cf11dcb7b4d106456b9c34c2e30638615f47", "html_url": "https://github.com/rust-lang/rust/commit/4bb7cf11dcb7b4d106456b9c34c2e30638615f47"}], "stats": {"total": 50, "additions": 42, "deletions": 8}, "files": [{"sha": "72319227ccb2ffec40f38bbc4d10172eb823b8cd", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5dc91a74b1428cf3d09a868727bf20b347664137/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc91a74b1428cf3d09a868727bf20b347664137/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=5dc91a74b1428cf3d09a868727bf20b347664137", "patch": "@@ -146,7 +146,6 @@ pub mod util {\n     pub mod common;\n     pub mod ppaux;\n     pub mod nodemap;\n-    pub mod lev_distance;\n     pub mod num;\n     pub mod fs;\n }"}, {"sha": "c2fb921c891db24f92958d66dd20c36866a9bfbf", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5dc91a74b1428cf3d09a868727bf20b347664137/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc91a74b1428cf3d09a868727bf20b347664137/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5dc91a74b1428cf3d09a868727bf20b347664137", "patch": "@@ -62,7 +62,6 @@ use rustc::middle::privacy::*;\n use rustc::middle::subst::{ParamSpace, FnSpace, TypeSpace};\n use rustc::middle::ty::{Freevar, FreevarMap, TraitMap, GlobMap};\n use rustc::util::nodemap::{NodeMap, DefIdSet, FnvHashMap};\n-use rustc::util::lev_distance::lev_distance;\n \n use syntax::ast;\n use syntax::ast::{CRATE_NODE_ID, Ident, Name, NodeId, CrateNum, TyIs, TyI8, TyI16, TyI32, TyI64};\n@@ -72,6 +71,7 @@ use syntax::ext::mtwt;\n use syntax::parse::token::{self, special_names, special_idents};\n use syntax::ptr::P;\n use syntax::codemap::{self, Span, Pos};\n+use syntax::util::lev_distance::{lev_distance, max_suggestion_distance};\n \n use rustc_front::intravisit::{self, FnKind, Visitor};\n use rustc_front::hir;\n@@ -3383,11 +3383,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n         }\n \n-        // As a loose rule to avoid obviously incorrect suggestions, clamp the\n-        // maximum edit distance we will accept for a suggestion to one third of\n-        // the typo'd name's length.\n-        let max_distance = std::cmp::max(name.len(), 3) / 3;\n-\n+        let max_distance = max_suggestion_distance(name);\n         if !values.is_empty() && values[smallest] <= max_distance && name != &maybes[smallest][..] {\n \n             SuggestionType::Function(maybes[smallest].to_string())"}, {"sha": "f81161addd91844783c5efd158f70e785f95a898", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dc91a74b1428cf3d09a868727bf20b347664137/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc91a74b1428cf3d09a868727bf20b347664137/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5dc91a74b1428cf3d09a868727bf20b347664137", "patch": "@@ -110,7 +110,6 @@ use TypeAndSubsts;\n use lint;\n use util::common::{block_query, ErrorReported, indenter, loop_query};\n use util::nodemap::{DefIdMap, FnvHashMap, NodeMap};\n-use util::lev_distance::lev_distance;\n \n use std::cell::{Cell, Ref, RefCell};\n use std::collections::{HashSet};\n@@ -123,6 +122,7 @@ use syntax::codemap::{self, Span, Spanned};\n use syntax::owned_slice::OwnedSlice;\n use syntax::parse::token::{self, InternedString};\n use syntax::ptr::P;\n+use syntax::util::lev_distance::lev_distance;\n \n use rustc_front::intravisit::{self, Visitor};\n use rustc_front::hir;"}, {"sha": "cf6881ab65051449ed8958aebf71879bb25ab710", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5dc91a74b1428cf3d09a868727bf20b347664137/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc91a74b1428cf3d09a868727bf20b347664137/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=5dc91a74b1428cf3d09a868727bf20b347664137", "patch": "@@ -24,6 +24,7 @@ use parse::token;\n use parse::token::{InternedString, intern, str_to_ident};\n use ptr::P;\n use util::small_vector::SmallVector;\n+use util::lev_distance::{lev_distance, max_suggestion_distance};\n use ext::mtwt;\n use fold::Folder;\n \n@@ -776,6 +777,20 @@ impl<'a> ExtCtxt<'a> {\n     pub fn name_of(&self, st: &str) -> ast::Name {\n         token::intern(st)\n     }\n+\n+    pub fn suggest_macro_name(&mut self, name: &str, span: Span) {\n+        let mut min: Option<(Name, usize)> = None;\n+        let max_dist = max_suggestion_distance(name);\n+        for macro_name in self.syntax_env.names.iter() {\n+            let dist = lev_distance(name, &macro_name.as_str());\n+            if dist <= max_dist && (min.is_none() || min.unwrap().1 > dist) {\n+                min = Some((*macro_name, dist));\n+            }\n+        }\n+        if let Some((suggestion, _)) = min {\n+            self.fileline_help(span, &format!(\"did you mean `{}!`?\", suggestion));\n+        }\n+    }\n }\n \n /// Extract a string literal from the macro expanded version of `expr`,"}, {"sha": "01e72cf2a8d849f7352235ca14f8ad4c153abe9e", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5dc91a74b1428cf3d09a868727bf20b347664137/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc91a74b1428cf3d09a868727bf20b347664137/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=5dc91a74b1428cf3d09a868727bf20b347664137", "patch": "@@ -191,6 +191,7 @@ fn expand_mac_invoc<T, F, G>(mac: ast::Mac,\n                 pth.span,\n                 &format!(\"macro undefined: '{}!'\",\n                         &extname));\n+            fld.cx.suggest_macro_name(&extname.as_str(), pth.span);\n \n             // let compilation continue\n             None"}, {"sha": "93daecce5dd086c29733b67bb70c0ff9fb0d74f9", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5dc91a74b1428cf3d09a868727bf20b347664137/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc91a74b1428cf3d09a868727bf20b347664137/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=5dc91a74b1428cf3d09a868727bf20b347664137", "patch": "@@ -65,6 +65,7 @@ macro_rules! panictry {\n \n pub mod util {\n     pub mod interner;\n+    pub mod lev_distance;\n     pub mod node_count;\n     pub mod parser;\n     #[cfg(test)]"}, {"sha": "9bf96311122e0e3c51a891ec349afedc2012cbfe", "filename": "src/libsyntax/util/lev_distance.rs", "status": "renamed", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5dc91a74b1428cf3d09a868727bf20b347664137/src%2Flibsyntax%2Futil%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc91a74b1428cf3d09a868727bf20b347664137/src%2Flibsyntax%2Futil%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Flev_distance.rs?ref=5dc91a74b1428cf3d09a868727bf20b347664137", "patch": "@@ -41,6 +41,14 @@ pub fn lev_distance(me: &str, t: &str) -> usize {\n     dcol[t_last + 1]\n }\n \n+pub fn max_suggestion_distance(name: &str) -> usize {\n+    use std::cmp::max;\n+    // As a loose rule to avoid obviously incorrect suggestions, clamp the\n+    // maximum edit distance we will accept for a suggestion to one third of\n+    // the typo'd name's length.\n+    max(name.len(), 3) / 3\n+}\n+\n #[test]\n fn test_lev_distance() {\n     use std::char::{ from_u32, MAX };", "previous_filename": "src/librustc/util/lev_distance.rs"}, {"sha": "e1f7d9b65d116a5f15fda2732196a40090f071de", "filename": "src/test/compile-fail/macro-name-typo.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5dc91a74b1428cf3d09a868727bf20b347664137/src%2Ftest%2Fcompile-fail%2Fmacro-name-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc91a74b1428cf3d09a868727bf20b347664137/src%2Ftest%2Fcompile-fail%2Fmacro-name-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-name-typo.rs?ref=5dc91a74b1428cf3d09a868727bf20b347664137", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    printlx!(\"oh noes!\"); //~ ERROR macro undefined\n+    //~^ HELP did you mean `println!`?\n+}"}]}