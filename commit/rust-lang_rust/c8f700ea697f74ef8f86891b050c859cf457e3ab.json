{"sha": "c8f700ea697f74ef8f86891b050c859cf457e3ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZjcwMGVhNjk3Zjc0ZWY4Zjg2ODkxYjA1MGM4NTljZjQ1N2UzYWI=", "commit": {"author": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-07-04T03:28:40Z"}, "committer": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-07-04T04:22:23Z"}, "message": "Fixed compile errors", "tree": {"sha": "49cbbe0c038ae067a7c256f94c876b4dc04985a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49cbbe0c038ae067a7c256f94c876b4dc04985a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8f700ea697f74ef8f86891b050c859cf457e3ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8f700ea697f74ef8f86891b050c859cf457e3ab", "html_url": "https://github.com/rust-lang/rust/commit/c8f700ea697f74ef8f86891b050c859cf457e3ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8f700ea697f74ef8f86891b050c859cf457e3ab/comments", "author": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c32263176d95ae47928d1955e44a4315ffcea2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c32263176d95ae47928d1955e44a4315ffcea2d", "html_url": "https://github.com/rust-lang/rust/commit/1c32263176d95ae47928d1955e44a4315ffcea2d"}], "stats": {"total": 34, "additions": 14, "deletions": 20}, "files": [{"sha": "d68d0d8ccf58dd45a4ef1299d852840560208a02", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8f700ea697f74ef8f86891b050c859cf457e3ab/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f700ea697f74ef8f86891b050c859cf457e3ab/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=c8f700ea697f74ef8f86891b050c859cf457e3ab", "patch": "@@ -480,7 +480,7 @@ fn is_relevant_trait(cx: &LateContext<'_>, item: &TraitItem<'_>) -> bool {\n     }\n }\n \n-fn is_relevant_block(cx: &LateContext<'_, '_>, tables: &ty::TypeckTables<'_>, block: &Block<'_>) -> bool {\n+fn is_relevant_block(cx: &LateContext<'_>, tables: &ty::TypeckTables<'_>, block: &Block<'_>) -> bool {\n     block.stmts.first().map_or(\n         block.expr.as_ref().map_or(false, |e| is_relevant_expr(cx, tables, e)),\n         |stmt| match &stmt.kind {"}, {"sha": "fbd2eeacc6ef553cf7146eade14619877280cab2", "filename": "clippy_lints/src/if_let_mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8f700ea697f74ef8f86891b050c859cf457e3ab/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f700ea697f74ef8f86891b050c859cf457e3ab/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_mutex.rs?ref=c8f700ea697f74ef8f86891b050c859cf457e3ab", "patch": "@@ -136,7 +136,7 @@ impl<'tcx> Visitor<'tcx> for ArmVisitor<'_, 'tcx> {\n }\n \n impl<'tcx, 'l> ArmVisitor<'tcx, 'l> {\n-    fn same_mutex(&self, cx: &LateContext<'_, '_>, op_mutex: &Expr<'_>) -> bool {\n+    fn same_mutex(&self, cx: &LateContext<'_>, op_mutex: &Expr<'_>) -> bool {\n         self.found_mutex\n             .map_or(false, |arm_mutex| SpanlessEq::new(cx).eq_expr(op_mutex, arm_mutex))\n     }"}, {"sha": "c8aa98d348927e3f870d7e666df7d653f45b5dff", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c8f700ea697f74ef8f86891b050c859cf457e3ab/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f700ea697f74ef8f86891b050c859cf457e3ab/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=c8f700ea697f74ef8f86891b050c859cf457e3ab", "patch": "@@ -86,18 +86,12 @@ fn fetch_const<'a>(cx: &LateContext<'_>, args: &'a [Expr<'a>], m: MinMax) -> Opt\n     if args.len() != 2 {\n         return None;\n     }\n-    constant_simple(cx, cx.tables, &args[0]).map_or_else(\n-        || {\n-            if let Some(c) = constant_simple(cx, cx.tables(), &args[1]) {\n-                Some((m, c, &args[0]))\n-            } else {\n-                None\n-            }\n-        },\n+    constant_simple(cx, cx.tables(), &args[0]).map_or_else(\n+        || constant_simple(cx, cx.tables(), &args[1]).map(|c| (m, c, &args[0])),\n         |c| {\n-            if constant_simple(cx, cx.tables, &args[1]).is_none() {\n+            if constant_simple(cx, cx.tables(), &args[1]).is_none() {\n                 // otherwise ignore\n-                Some((c, &args[1]))\n+                Some((m, c, &args[1]))\n             } else {\n                 None\n             }"}, {"sha": "8dbe58763bfb287648e369f0491dbe7cf206cd3f", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c8f700ea697f74ef8f86891b050c859cf457e3ab/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f700ea697f74ef8f86891b050c859cf457e3ab/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=c8f700ea697f74ef8f86891b050c859cf457e3ab", "patch": "@@ -70,9 +70,9 @@ declare_clippy_lint! {\n declare_lint_pass!(OptionIfLetElse => [OPTION_IF_LET_ELSE]);\n \n /// Returns true iff the given expression is the result of calling `Result::ok`\n-fn is_result_ok(cx: &LateContext<'_, '_>, expr: &'_ Expr<'_>) -> bool {\n+fn is_result_ok(cx: &LateContext<'_>, expr: &'_ Expr<'_>) -> bool {\n     if let ExprKind::MethodCall(ref path, _, &[ref receiver], _) = &expr.kind {\n-        path.ident.name.to_ident_string() == \"ok\" && match_type(cx, &cx.tables.expr_ty(&receiver), &paths::RESULT)\n+        path.ident.name.to_ident_string() == \"ok\" && match_type(cx, &cx.tables().expr_ty(&receiver), &paths::RESULT)\n     } else {\n         false\n     }\n@@ -157,7 +157,7 @@ fn extract_body_from_arm<'a>(arm: &'a Arm<'a>) -> Option<&'a Expr<'a>> {\n \n /// If this is the else body of an if/else expression, then we need to wrap\n /// it in curcly braces. Otherwise, we don't.\n-fn should_wrap_in_braces(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n+fn should_wrap_in_braces(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     utils::get_enclosing_block(cx, expr.hir_id).map_or(false, |parent| {\n         if let Some(Expr {\n             kind:\n@@ -181,7 +181,7 @@ fn should_wrap_in_braces(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n     })\n }\n \n-fn format_option_in_sugg(cx: &LateContext<'_, '_>, cond_expr: &Expr<'_>, as_ref: bool, as_mut: bool) -> String {\n+fn format_option_in_sugg(cx: &LateContext<'_>, cond_expr: &Expr<'_>, as_ref: bool, as_mut: bool) -> String {\n     format!(\n         \"{}{}\",\n         Sugg::hir(cx, cond_expr, \"..\").maybe_par(),\n@@ -198,7 +198,7 @@ fn format_option_in_sugg(cx: &LateContext<'_, '_>, cond_expr: &Expr<'_>, as_ref:\n /// If this expression is the option if let/else construct we're detecting, then\n /// this function returns an `OptionIfLetElseOccurence` struct with details if\n /// this construct is found, or None if this construct is not found.\n-fn detect_option_if_let_else<'a>(cx: &LateContext<'_, 'a>, expr: &'a Expr<'a>) -> Option<OptionIfLetElseOccurence> {\n+fn detect_option_if_let_else(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<OptionIfLetElseOccurence> {\n     if_chain! {\n         if !utils::in_macro(expr.span); // Don't lint macros, because it behaves weirdly\n         if let ExprKind::Match(cond_expr, arms, MatchSource::IfLetDesugar{contains_else_clause: true}) = &expr.kind;\n@@ -242,8 +242,8 @@ fn detect_option_if_let_else<'a>(cx: &LateContext<'_, 'a>, expr: &'a Expr<'a>) -\n     }\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OptionIfLetElse {\n-    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n+impl<'a> LateLintPass<'a> for OptionIfLetElse {\n+    fn check_expr(&mut self, cx: &LateContext<'a>, expr: &Expr<'_>) {\n         if let Some(detection) = detect_option_if_let_else(cx, expr) {\n             span_lint_and_sugg(\n                 cx,"}, {"sha": "4cdff63f1180a2e031c94c0eea9967d6aa833abf", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8f700ea697f74ef8f86891b050c859cf457e3ab/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f700ea697f74ef8f86891b050c859cf457e3ab/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=c8f700ea697f74ef8f86891b050c859cf457e3ab", "patch": "@@ -164,7 +164,7 @@ fn check_local<'tcx>(cx: &LateContext<'tcx>, local: &'tcx Local<'_>, bindings: &\n }\n \n fn is_binding(cx: &LateContext<'_>, pat_id: HirId) -> bool {\n-    let var_ty = cx.tables.node_type_opt(pat_id);\n+    let var_ty = cx.tables().node_type_opt(pat_id);\n     var_ty.map_or(false, |var_ty| match var_ty.kind {\n         ty::Adt(..) => false,\n         _ => true,"}]}