{"sha": "3e513008b1b1aeab915a8bb2d236d51f85469dbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNTEzMDA4YjFiMWFlYWI5MTVhOGJiMmQyMzZkNTFmODU0NjlkYmU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-09T07:31:26Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-09T07:31:26Z"}, "message": "More type-fold caches, shave another second off compile time.", "tree": {"sha": "85758d2e6a1edf8675a2fb2abccc234dd47680bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85758d2e6a1edf8675a2fb2abccc234dd47680bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e513008b1b1aeab915a8bb2d236d51f85469dbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e513008b1b1aeab915a8bb2d236d51f85469dbe", "html_url": "https://github.com/rust-lang/rust/commit/3e513008b1b1aeab915a8bb2d236d51f85469dbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e513008b1b1aeab915a8bb2d236d51f85469dbe/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f956067867f176992261f305befd9c718aa4a028", "url": "https://api.github.com/repos/rust-lang/rust/commits/f956067867f176992261f305befd9c718aa4a028", "html_url": "https://github.com/rust-lang/rust/commit/f956067867f176992261f305befd9c718aa4a028"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "1411831bb2e241feb41cccfe01a0c90d42a8856c", "filename": "src/boot/me/resolve.ml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e513008b1b1aeab915a8bb2d236d51f85469dbe/src%2Fboot%2Fme%2Fresolve.ml", "raw_url": "https://github.com/rust-lang/rust/raw/3e513008b1b1aeab915a8bb2d236d51f85469dbe/src%2Fboot%2Fme%2Fresolve.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fresolve.ml?ref=3e513008b1b1aeab915a8bb2d236d51f85469dbe", "patch": "@@ -872,6 +872,7 @@ let process_crate\n       end;\n     (* Post-resolve, we can establish a tag cache. *)\n     cx.ctxt_tag_cache <- Some (Hashtbl.create 0);\n+    cx.ctxt_rebuild_cache <- Some (Hashtbl.create 0);\n ;;\n \n (*"}, {"sha": "ee3b9aba76a16e8197f8a81cf1c071ff1c7016fc", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3e513008b1b1aeab915a8bb2d236d51f85469dbe/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/3e513008b1b1aeab915a8bb2d236d51f85469dbe/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=3e513008b1b1aeab915a8bb2d236d51f85469dbe", "patch": "@@ -194,9 +194,13 @@ type ctxt =\n       ctxt_type_is_structured_cache: (Ast.ty,bool) Hashtbl.t;\n       ctxt_type_contains_chan_cache: (Ast.ty,bool) Hashtbl.t;\n       ctxt_n_used_type_parameters_cache: (Ast.ty,int) Hashtbl.t;\n+      ctxt_type_str_cache: (Ast.ty,string) Hashtbl.t;\n       mutable ctxt_tag_cache:\n         ((Ast.ty_tag option * Ast.ty_tag * int,\n           Ast.ty_tup) Hashtbl.t) option;\n+      mutable ctxt_rebuild_cache:\n+        ((Ast.ty_tag option * Ast.ty * Ast.ty_param array\n+          * Ast.ty array * bool, Ast.ty) Hashtbl.t) option;\n     }\n ;;\n \n@@ -293,7 +297,9 @@ let new_ctxt sess abi crate =\n     ctxt_type_is_structured_cache = Hashtbl.create 0;\n     ctxt_type_contains_chan_cache = Hashtbl.create 0;\n     ctxt_n_used_type_parameters_cache = Hashtbl.create 0;\n+    ctxt_type_str_cache = Hashtbl.create 0;\n     ctxt_tag_cache = None;\n+    ctxt_rebuild_cache = None;\n   }\n ;;\n \n@@ -1037,7 +1043,12 @@ let rec rebuild_ty_under_params\n       in\n         fold_ty_full cx src_tag rebuilder fold t\n     in\n-      rebuild_ty ty\n+      match cx.ctxt_rebuild_cache with\n+          None -> rebuild_ty ty\n+        | Some cache ->\n+            htab_search_or_add cache\n+              (src_tag,ty,params,args,resolve_names)\n+              (fun _ -> rebuild_ty ty)\n ;;\n \n let fold_ty\n@@ -2596,7 +2607,8 @@ let ty_str (cx:ctxt) (ty:Ast.ty) : string =\n          (* FIXME (issue #78): encode constrs as well. *)\n          ty_fold_constrained = (fun (t,_)-> t) }\n   in\n-    fold_ty cx fold ty\n+    htab_search_or_add cx.ctxt_type_str_cache ty\n+      (fun _ -> fold_ty cx fold ty)\n ;;\n \n let glue_str (cx:ctxt) (g:glue) : string ="}, {"sha": "20bc1d7aa79fd85b3c93f0891191780dc043c101", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e513008b1b1aeab915a8bb2d236d51f85469dbe/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/3e513008b1b1aeab915a8bb2d236d51f85469dbe/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=3e513008b1b1aeab915a8bb2d236d51f85469dbe", "patch": "@@ -373,9 +373,7 @@ let trans_visitor\n   in\n \n   let get_element_ptr =\n-    Session.time_inner \"trans GEP\" cx.ctxt_sess\n-      (fun _ ->\n-         Il.get_element_ptr word_bits abi.Abi.abi_str_of_hardreg)\n+    Il.get_element_ptr word_bits abi.Abi.abi_str_of_hardreg\n   in\n \n   let get_variant_ptr (mem_cell:Il.cell) (i:int) : Il.cell ="}]}