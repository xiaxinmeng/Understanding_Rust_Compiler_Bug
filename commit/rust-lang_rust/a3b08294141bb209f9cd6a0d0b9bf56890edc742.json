{"sha": "a3b08294141bb209f9cd6a0d0b9bf56890edc742", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYjA4Mjk0MTQxYmIyMDlmOWNkNmEwZDBiOWJmNTY4OTBlZGM3NDI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-22T07:34:24Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-23T23:59:38Z"}, "message": "parse: move token hack into `parse_item_common`.", "tree": {"sha": "a0573eff0068abb0cd5fe9da34a426c346815480", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0573eff0068abb0cd5fe9da34a426c346815480"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3b08294141bb209f9cd6a0d0b9bf56890edc742", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b08294141bb209f9cd6a0d0b9bf56890edc742", "html_url": "https://github.com/rust-lang/rust/commit/a3b08294141bb209f9cd6a0d0b9bf56890edc742", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3b08294141bb209f9cd6a0d0b9bf56890edc742/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0", "html_url": "https://github.com/rust-lang/rust/commit/a05c83b2ebc4e85e32f723e708a40dbd3f165cd0"}], "stats": {"total": 86, "additions": 31, "deletions": 55}, "files": [{"sha": "4bb376799ec16000977050e1ff80171351610ca4", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 31, "deletions": 55, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/a3b08294141bb209f9cd6a0d0b9bf56890edc742/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b08294141bb209f9cd6a0d0b9bf56890edc742/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=a3b08294141bb209f9cd6a0d0b9bf56890edc742", "patch": "@@ -31,13 +31,33 @@ impl<'a> Parser<'a> {\n \n     pub(super) fn parse_item_(\n         &mut self,\n-        attrs: Vec<Attribute>,\n+        mut attrs: Vec<Attribute>,\n         macros_allowed: bool,\n         attributes_allowed: bool,\n     ) -> PResult<'a, Option<P<Item>>> {\n+        maybe_whole!(self, NtItem, |item| {\n+            let mut item = item;\n+            mem::swap(&mut item.attrs, &mut attrs);\n+            item.attrs.extend(attrs);\n+            Some(item)\n+        });\n+        let item = self.parse_item_common(attrs, macros_allowed, attributes_allowed, |_| true)?;\n+        if let Some(ref item) = item {\n+            self.error_on_illegal_default(item.defaultness);\n+        }\n+        Ok(item.map(P))\n+    }\n+\n+    fn parse_item_common(\n+        &mut self,\n+        attrs: Vec<Attribute>,\n+        mac_allowed: bool,\n+        attrs_allowed: bool,\n+        req_name: ReqName,\n+    ) -> PResult<'a, Option<Item>> {\n         let mut unclosed_delims = vec![];\n-        let (ret, tokens) = self.collect_tokens(|this| {\n-            let item = this.parse_item_implementation(attrs, macros_allowed, attributes_allowed);\n+        let (mut item, tokens) = self.collect_tokens(|this| {\n+            let item = this.parse_item_common_(attrs, mac_allowed, attrs_allowed, req_name);\n             unclosed_delims.append(&mut this.unclosed_delims);\n             item\n         })?;\n@@ -57,38 +77,15 @@ impl<'a> Parser<'a> {\n         // it (bad!). To work around this case for now we just avoid recording\n         // `tokens` if we detect any inner attributes. This should help keep\n         // expansion correct, but we should fix this bug one day!\n-        Ok(ret.map(|item| {\n-            item.map(|mut i| {\n-                if !i.attrs.iter().any(|attr| attr.style == AttrStyle::Inner) {\n-                    i.tokens = Some(tokens);\n-                }\n-                i\n-            })\n-        }))\n-    }\n-\n-    /// Parses one of the items allowed by the flags.\n-    fn parse_item_implementation(\n-        &mut self,\n-        mut attrs: Vec<Attribute>,\n-        macros_allowed: bool,\n-        attributes_allowed: bool,\n-    ) -> PResult<'a, Option<P<Item>>> {\n-        maybe_whole!(self, NtItem, |item| {\n-            let mut item = item;\n-            mem::swap(&mut item.attrs, &mut attrs);\n-            item.attrs.extend(attrs);\n-            Some(item)\n-        });\n-\n-        let item = self.parse_item_common(attrs, macros_allowed, attributes_allowed, |_| true)?;\n-        if let Some(ref item) = item {\n-            self.error_on_illegal_default(item.defaultness);\n+        if let Some(item) = &mut item {\n+            if !item.attrs.iter().any(|attr| attr.style == AttrStyle::Inner) {\n+                item.tokens = Some(tokens);\n+            }\n         }\n-        Ok(item.map(P))\n+        Ok(item)\n     }\n \n-    fn parse_item_common(\n+    fn parse_item_common_(\n         &mut self,\n         mut attrs: Vec<Attribute>,\n         mac_allowed: bool,\n@@ -652,27 +649,6 @@ impl<'a> Parser<'a> {\n     /// Parses associated items.\n     fn parse_assoc_item(&mut self, req_name: ReqName) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n         let attrs = self.parse_outer_attributes()?;\n-        let mut unclosed_delims = vec![];\n-        let (mut item, tokens) = self.collect_tokens(|this| {\n-            let item = this.parse_assoc_item_(attrs, req_name);\n-            unclosed_delims.append(&mut this.unclosed_delims);\n-            item\n-        })?;\n-        self.unclosed_delims.append(&mut unclosed_delims);\n-        // See `parse_item` for why this clause is here.\n-        if let Some(Some(item)) = &mut item {\n-            if !item.attrs.iter().any(|attr| attr.style == AttrStyle::Inner) {\n-                item.tokens = Some(tokens);\n-            }\n-        }\n-        Ok(item)\n-    }\n-\n-    fn parse_assoc_item_(\n-        &mut self,\n-        attrs: Vec<Attribute>,\n-        req_name: ReqName,\n-    ) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n         let it = self.parse_item_common(attrs, true, false, req_name)?;\n         Ok(it.map(|Item { attrs, id, span, vis, ident, defaultness, kind, tokens }| {\n             let kind = match kind {\n@@ -869,8 +845,8 @@ impl<'a> Parser<'a> {\n         maybe_whole!(self, NtForeignItem, |item| Some(Some(item)));\n \n         let attrs = self.parse_outer_attributes()?;\n-        let it = self.parse_item_common(attrs, true, false, |_| true)?;\n-        Ok(it.map(|Item { attrs, id, span, vis, ident, defaultness, kind, tokens }| {\n+        let item = self.parse_item_common(attrs, true, false, |_| true)?;\n+        Ok(item.map(|Item { attrs, id, span, vis, ident, defaultness, kind, tokens }| {\n             self.error_on_illegal_default(defaultness);\n             let kind = match kind {\n                 ItemKind::Mac(a) => ForeignItemKind::Macro(a),"}]}