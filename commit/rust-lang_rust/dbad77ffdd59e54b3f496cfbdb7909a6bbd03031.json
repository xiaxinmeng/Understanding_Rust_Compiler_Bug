{"sha": "dbad77ffdd59e54b3f496cfbdb7909a6bbd03031", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYWQ3N2ZmZGQ1OWU1NGIzZjQ5NmNmYmRiNzkwOWE2YmJkMDMwMzE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-10T22:07:07Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-11T14:36:46Z"}, "message": "Remove thread-local for playground config", "tree": {"sha": "4c3e555d63d45547abb221ceca33ba345586bbd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c3e555d63d45547abb221ceca33ba345586bbd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbad77ffdd59e54b3f496cfbdb7909a6bbd03031", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbad77ffdd59e54b3f496cfbdb7909a6bbd03031", "html_url": "https://github.com/rust-lang/rust/commit/dbad77ffdd59e54b3f496cfbdb7909a6bbd03031", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbad77ffdd59e54b3f496cfbdb7909a6bbd03031/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ade8b02828de9653e6aca122f1a0f6d8c48ad29b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ade8b02828de9653e6aca122f1a0f6d8c48ad29b", "html_url": "https://github.com/rust-lang/rust/commit/ade8b02828de9653e6aca122f1a0f6d8c48ad29b"}], "stats": {"total": 264, "additions": 147, "deletions": 117}, "files": [{"sha": "98ab957ecbb38078a3b5fea1af8d3e21c9d03235", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbad77ffdd59e54b3f496cfbdb7909a6bbd03031/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbad77ffdd59e54b3f496cfbdb7909a6bbd03031/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=dbad77ffdd59e54b3f496cfbdb7909a6bbd03031", "patch": "@@ -378,7 +378,7 @@ impl Options {\n                 &matches.opt_strs(\"html-after-content\"),\n                 &matches.opt_strs(\"markdown-before-content\"),\n                 &matches.opt_strs(\"markdown-after-content\"),\n-                &diag, &mut id_map, edition) {\n+                &diag, &mut id_map, edition, &None) {\n             Some(eh) => eh,\n             None => return Err(3),\n         };"}, {"sha": "d920b7c4c9169f8b2f99fda10ee5292ec90dca00", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbad77ffdd59e54b3f496cfbdb7909a6bbd03031/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbad77ffdd59e54b3f496cfbdb7909a6bbd03031/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=dbad77ffdd59e54b3f496cfbdb7909a6bbd03031", "patch": "@@ -4,7 +4,7 @@ use std::str;\n use errors;\n use crate::syntax::feature_gate::UnstableFeatures;\n use crate::syntax::edition::Edition;\n-use crate::html::markdown::{IdMap, ErrorCodes, Markdown};\n+use crate::html::markdown::{IdMap, ErrorCodes, Markdown, Playground};\n \n use std::cell::RefCell;\n \n@@ -24,7 +24,7 @@ pub struct ExternalHtml {\n impl ExternalHtml {\n     pub fn load(in_header: &[String], before_content: &[String], after_content: &[String],\n                 md_before_content: &[String], md_after_content: &[String], diag: &errors::Handler,\n-                id_map: &mut IdMap, edition: Edition)\n+                id_map: &mut IdMap, edition: Edition, playground: &Option<Playground>)\n             -> Option<ExternalHtml> {\n         let codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n         load_external_files(in_header, diag)\n@@ -36,7 +36,7 @@ impl ExternalHtml {\n                 load_external_files(md_before_content, diag)\n                     .map(|m_bc| (ih,\n                             format!(\"{}{}\", bc, Markdown(&m_bc, &[], RefCell::new(id_map),\n-                                    codes, edition))))\n+                                    codes, edition, playground))))\n             )\n             .and_then(|(ih, bc)|\n                 load_external_files(after_content, diag)\n@@ -46,7 +46,7 @@ impl ExternalHtml {\n                 load_external_files(md_after_content, diag)\n                     .map(|m_ac| (ih, bc,\n                             format!(\"{}{}\", ac, Markdown(&m_ac, &[], RefCell::new(id_map),\n-                                    codes, edition))))\n+                                    codes, edition, playground))))\n             )\n             .map(|(ih, bc, ac)|\n                 ExternalHtml {"}, {"sha": "73233a2289ccd53e5c0398c5ab43bfabde23f1c7", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 110, "deletions": 93, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/dbad77ffdd59e54b3f496cfbdb7909a6bbd03031/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbad77ffdd59e54b3f496cfbdb7909a6bbd03031/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=dbad77ffdd59e54b3f496cfbdb7909a6bbd03031", "patch": "@@ -17,7 +17,7 @@\n //! let s = \"My *markdown* _text_\";\n //! let mut id_map = IdMap::new();\n //! let html = format!(\"{}\", Markdown(s, &[], RefCell::new(&mut id_map),\n-//!                                   ErrorCodes::Yes, Edition::Edition2015));\n+//!                                   ErrorCodes::Yes, Edition::Edition2015, None));\n //! // ... something using html\n //! ```\n \n@@ -59,16 +59,24 @@ pub struct Markdown<'a>(\n     pub ErrorCodes,\n     /// Default edition to use when parsing doctests (to add a `fn main`).\n     pub Edition,\n+    pub &'a Option<Playground>,\n );\n /// A tuple struct like `Markdown` that renders the markdown with a table of contents.\n pub struct MarkdownWithToc<'a>(\n     pub &'a str,\n     pub RefCell<&'a mut IdMap>,\n     pub ErrorCodes,\n     pub Edition,\n+    pub &'a Option<Playground>,\n );\n /// A tuple struct like `Markdown` that renders the markdown escaping HTML tags.\n-pub struct MarkdownHtml<'a>(pub &'a str, pub RefCell<&'a mut IdMap>, pub ErrorCodes, pub Edition);\n+pub struct MarkdownHtml<'a>(\n+    pub &'a str,\n+    pub RefCell<&'a mut IdMap>,\n+    pub ErrorCodes,\n+    pub Edition,\n+    pub &'a Option<Playground>,\n+);\n /// A tuple struct like `Markdown` that renders only the first paragraph.\n pub struct MarkdownSummaryLine<'a>(pub &'a str, pub &'a [(String, String)]);\n \n@@ -155,30 +163,39 @@ fn slugify(c: char) -> Option<char> {\n     }\n }\n \n-// Information about the playground if a URL has been specified, containing an\n-// optional crate name and the URL.\n-thread_local!(pub static PLAYGROUND: RefCell<Option<(Option<String>, String)>> = {\n-    RefCell::new(None)\n-});\n+#[derive(Clone, Debug)]\n+pub struct Playground {\n+    pub crate_name: Option<String>,\n+    pub url: String,\n+}\n \n /// Adds syntax highlighting and playground Run buttons to Rust code blocks.\n-struct CodeBlocks<'a, I: Iterator<Item = Event<'a>>> {\n+struct CodeBlocks<'p, 'a, I: Iterator<Item = Event<'a>>> {\n     inner: I,\n     check_error_codes: ErrorCodes,\n     edition: Edition,\n+    // Information about the playground if a URL has been specified, containing an\n+    // optional crate name and the URL.\n+    playground: &'p Option<Playground>,\n }\n \n-impl<'a, I: Iterator<Item = Event<'a>>> CodeBlocks<'a, I> {\n-    fn new(iter: I, error_codes: ErrorCodes, edition: Edition) -> Self {\n+impl<'p, 'a, I: Iterator<Item = Event<'a>>> CodeBlocks<'p, 'a, I> {\n+    fn new(\n+        iter: I,\n+        error_codes: ErrorCodes,\n+        edition: Edition,\n+        playground: &'p Option<Playground>,\n+    ) -> Self {\n         CodeBlocks {\n             inner: iter,\n             check_error_codes: error_codes,\n             edition,\n+            playground,\n         }\n     }\n }\n \n-impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n+impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n     type Item = Event<'a>;\n \n     fn next(&mut self) -> Option<Self::Item> {\n@@ -213,86 +230,86 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n         }\n         let lines = origtext.lines().filter_map(|l| map_line(l).for_html());\n         let text = lines.collect::<Vec<Cow<'_, str>>>().join(\"\\n\");\n-        PLAYGROUND.with(|play| {\n-            // insert newline to clearly separate it from the\n-            // previous block so we can shorten the html output\n-            let mut s = String::from(\"\\n\");\n-            let playground_button = play.borrow().as_ref().and_then(|&(ref krate, ref url)| {\n-                if url.is_empty() {\n-                    return None;\n-                }\n-                let test = origtext.lines()\n-                    .map(|l| map_line(l).for_code())\n-                    .collect::<Vec<Cow<'_, str>>>().join(\"\\n\");\n-                let krate = krate.as_ref().map(|s| &**s);\n-                let (test, _) = test::make_test(&test, krate, false,\n-                                           &Default::default(), edition);\n-                let channel = if test.contains(\"#![feature(\") {\n-                    \"&amp;version=nightly\"\n-                } else {\n-                    \"\"\n-                };\n-\n-                let edition_string = format!(\"&amp;edition={}\", edition);\n-\n-                // These characters don't need to be escaped in a URI.\n-                // FIXME: use a library function for percent encoding.\n-                fn dont_escape(c: u8) -> bool {\n-                    (b'a' <= c && c <= b'z') ||\n-                    (b'A' <= c && c <= b'Z') ||\n-                    (b'0' <= c && c <= b'9') ||\n-                    c == b'-' || c == b'_' || c == b'.' ||\n-                    c == b'~' || c == b'!' || c == b'\\'' ||\n-                    c == b'(' || c == b')' || c == b'*'\n-                }\n-                let mut test_escaped = String::new();\n-                for b in test.bytes() {\n-                    if dont_escape(b) {\n-                        test_escaped.push(char::from(b));\n-                    } else {\n-                        write!(test_escaped, \"%{:02X}\", b).unwrap();\n-                    }\n-                }\n-                Some(format!(\n-                    r#\"<a class=\"test-arrow\" target=\"_blank\" href=\"{}?code={}{}{}\">Run</a>\"#,\n-                    url, test_escaped, channel, edition_string\n-                ))\n-            });\n-\n-            let tooltip = if ignore {\n-                Some((\"This example is not tested\".to_owned(), \"ignore\"))\n-            } else if compile_fail {\n-                Some((\"This example deliberately fails to compile\".to_owned(), \"compile_fail\"))\n-            } else if explicit_edition {\n-                Some((format!(\"This code runs with edition {}\", edition), \"edition\"))\n+        // insert newline to clearly separate it from the\n+        // previous block so we can shorten the html output\n+        let mut s = String::from(\"\\n\");\n+        let playground_button = self.playground.as_ref().and_then(|playground| {\n+            let krate = &playground.crate_name;\n+            let url = &playground.url;\n+            if url.is_empty() {\n+                return None;\n+            }\n+            let test = origtext.lines()\n+                .map(|l| map_line(l).for_code())\n+                .collect::<Vec<Cow<'_, str>>>().join(\"\\n\");\n+            let krate = krate.as_ref().map(|s| &**s);\n+            let (test, _) = test::make_test(&test, krate, false,\n+                                        &Default::default(), edition);\n+            let channel = if test.contains(\"#![feature(\") {\n+                \"&amp;version=nightly\"\n             } else {\n-                None\n+                \"\"\n             };\n \n-            if let Some((s1, s2)) = tooltip {\n-                s.push_str(&highlight::render_with_highlighting(\n-                    &text,\n-                    Some(&format!(\"rust-example-rendered{}\",\n-                                  if ignore { \" ignore\" }\n-                                  else if compile_fail { \" compile_fail\" }\n-                                  else if explicit_edition { \" edition \" }\n-                                  else { \"\" })),\n-                    playground_button.as_ref().map(String::as_str),\n-                    Some((s1.as_str(), s2))));\n-                Some(Event::Html(s.into()))\n-            } else {\n-                s.push_str(&highlight::render_with_highlighting(\n-                    &text,\n-                    Some(&format!(\"rust-example-rendered{}\",\n-                                  if ignore { \" ignore\" }\n-                                  else if compile_fail { \" compile_fail\" }\n-                                  else if explicit_edition { \" edition \" }\n-                                  else { \"\" })),\n-                    playground_button.as_ref().map(String::as_str),\n-                    None));\n-                Some(Event::Html(s.into()))\n+            let edition_string = format!(\"&amp;edition={}\", edition);\n+\n+            // These characters don't need to be escaped in a URI.\n+            // FIXME: use a library function for percent encoding.\n+            fn dont_escape(c: u8) -> bool {\n+                (b'a' <= c && c <= b'z') ||\n+                (b'A' <= c && c <= b'Z') ||\n+                (b'0' <= c && c <= b'9') ||\n+                c == b'-' || c == b'_' || c == b'.' ||\n+                c == b'~' || c == b'!' || c == b'\\'' ||\n+                c == b'(' || c == b')' || c == b'*'\n             }\n-        })\n+            let mut test_escaped = String::new();\n+            for b in test.bytes() {\n+                if dont_escape(b) {\n+                    test_escaped.push(char::from(b));\n+                } else {\n+                    write!(test_escaped, \"%{:02X}\", b).unwrap();\n+                }\n+            }\n+            Some(format!(\n+                r#\"<a class=\"test-arrow\" target=\"_blank\" href=\"{}?code={}{}{}\">Run</a>\"#,\n+                url, test_escaped, channel, edition_string\n+            ))\n+        });\n+\n+        let tooltip = if ignore {\n+            Some((\"This example is not tested\".to_owned(), \"ignore\"))\n+        } else if compile_fail {\n+            Some((\"This example deliberately fails to compile\".to_owned(), \"compile_fail\"))\n+        } else if explicit_edition {\n+            Some((format!(\"This code runs with edition {}\", edition), \"edition\"))\n+        } else {\n+            None\n+        };\n+\n+        if let Some((s1, s2)) = tooltip {\n+            s.push_str(&highlight::render_with_highlighting(\n+                &text,\n+                Some(&format!(\"rust-example-rendered{}\",\n+                                if ignore { \" ignore\" }\n+                                else if compile_fail { \" compile_fail\" }\n+                                else if explicit_edition { \" edition \" }\n+                                else { \"\" })),\n+                playground_button.as_ref().map(String::as_str),\n+                Some((s1.as_str(), s2))));\n+            Some(Event::Html(s.into()))\n+        } else {\n+            s.push_str(&highlight::render_with_highlighting(\n+                &text,\n+                Some(&format!(\"rust-example-rendered{}\",\n+                                if ignore { \" ignore\" }\n+                                else if compile_fail { \" compile_fail\" }\n+                                else if explicit_edition { \" edition \" }\n+                                else { \"\" })),\n+                playground_button.as_ref().map(String::as_str),\n+                None));\n+            Some(Event::Html(s.into()))\n+        }\n     }\n }\n \n@@ -676,7 +693,7 @@ impl LangString {\n \n impl<'a> fmt::Display for Markdown<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let Markdown(md, links, ref ids, codes, edition) = *self;\n+        let Markdown(md, links, ref ids, codes, edition, playground) = *self;\n         let mut ids = ids.borrow_mut();\n \n         // This is actually common enough to special-case\n@@ -695,7 +712,7 @@ impl<'a> fmt::Display for Markdown<'a> {\n \n         let p = HeadingLinks::new(p, None, &mut ids);\n         let p = LinkReplacer::new(p, links);\n-        let p = CodeBlocks::new(p, codes, edition);\n+        let p = CodeBlocks::new(p, codes, edition, playground);\n         let p = Footnotes::new(p);\n         html::push_html(&mut s, p);\n \n@@ -705,7 +722,7 @@ impl<'a> fmt::Display for Markdown<'a> {\n \n impl<'a> fmt::Display for MarkdownWithToc<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let MarkdownWithToc(md, ref ids, codes, edition) = *self;\n+        let MarkdownWithToc(md, ref ids, codes, edition, playground) = *self;\n         let mut ids = ids.borrow_mut();\n \n         let p = Parser::new_ext(md, opts());\n@@ -716,7 +733,7 @@ impl<'a> fmt::Display for MarkdownWithToc<'a> {\n \n         {\n             let p = HeadingLinks::new(p, Some(&mut toc), &mut ids);\n-            let p = CodeBlocks::new(p, codes, edition);\n+            let p = CodeBlocks::new(p, codes, edition, playground);\n             let p = Footnotes::new(p);\n             html::push_html(&mut s, p);\n         }\n@@ -729,7 +746,7 @@ impl<'a> fmt::Display for MarkdownWithToc<'a> {\n \n impl<'a> fmt::Display for MarkdownHtml<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let MarkdownHtml(md, ref ids, codes, edition) = *self;\n+        let MarkdownHtml(md, ref ids, codes, edition, playground) = *self;\n         let mut ids = ids.borrow_mut();\n \n         // This is actually common enough to special-case\n@@ -745,7 +762,7 @@ impl<'a> fmt::Display for MarkdownHtml<'a> {\n         let mut s = String::with_capacity(md.len() * 3 / 2);\n \n         let p = HeadingLinks::new(p, None, &mut ids);\n-        let p = CodeBlocks::new(p, codes, edition);\n+        let p = CodeBlocks::new(p, codes, edition, playground);\n         let p = Footnotes::new(p);\n         html::push_html(&mut s, p);\n "}, {"sha": "8a7dfebdbbc1a0cb3e27ac641de362e6e6608950", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dbad77ffdd59e54b3f496cfbdb7909a6bbd03031/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbad77ffdd59e54b3f496cfbdb7909a6bbd03031/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=dbad77ffdd59e54b3f496cfbdb7909a6bbd03031", "patch": "@@ -170,6 +170,7 @@ struct Context {\n     /// The map used to ensure all generated 'id=' attributes are unique.\n     id_map: Rc<RefCell<IdMap>>,\n     pub shared: Arc<SharedContext>,\n+    playground: Option<markdown::Playground>,\n }\n \n struct SharedContext {\n@@ -574,9 +575,11 @@ pub fn run(mut krate: clean::Crate,\n     };\n \n     // If user passed in `--playground-url` arg, we fill in crate name here\n+    let mut playground = None;\n     if let Some(url) = playground_url {\n-        markdown::PLAYGROUND.with(|slot| {\n-            *slot.borrow_mut() = Some((Some(krate.name.clone()), url));\n+        playground = Some(markdown::Playground {\n+            crate_name: Some(krate.name.clone()),\n+            url,\n         });\n     }\n \n@@ -592,9 +595,9 @@ pub fn run(mut krate: clean::Crate,\n                     scx.layout.logo = s.to_string();\n                 }\n                 (sym::html_playground_url, Some(s)) => {\n-                    markdown::PLAYGROUND.with(|slot| {\n-                        let name = krate.name.clone();\n-                        *slot.borrow_mut() = Some((Some(name), s.to_string()));\n+                    playground = Some(markdown::Playground {\n+                        crate_name: Some(krate.name.clone()),\n+                        url: s.to_string(),\n                     });\n                 }\n                 (sym::issue_tracker_base_url, Some(s)) => {\n@@ -618,6 +621,7 @@ pub fn run(mut krate: clean::Crate,\n         edition,\n         id_map: Rc::new(RefCell::new(id_map)),\n         shared: Arc::new(scx),\n+        playground,\n     };\n \n     // Crawl the crate to build various caches used for the output\n@@ -2592,7 +2596,7 @@ fn render_markdown(w: &mut fmt::Formatter<'_>,\n            if is_hidden { \" hidden\" } else { \"\" },\n            prefix,\n            Markdown(md_text, &links, RefCell::new(&mut ids),\n-           cx.codes, cx.edition))\n+           cx.codes, cx.edition, &cx.playground))\n }\n \n fn document_short(\n@@ -2957,7 +2961,8 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n \n         if let Some(note) = note {\n             let mut ids = cx.id_map.borrow_mut();\n-            let html = MarkdownHtml(&note, RefCell::new(&mut ids), error_codes, cx.edition);\n+            let html = MarkdownHtml(\n+                &note, RefCell::new(&mut ids), error_codes, cx.edition, &cx.playground);\n             message.push_str(&format!(\": {}\", html));\n         }\n         stability.push(format!(\"<div class='stab deprecated'>{}</div>\", message));\n@@ -3006,7 +3011,13 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n             message = format!(\n                 \"<details><summary>{}</summary>{}</details>\",\n                 message,\n-                MarkdownHtml(&unstable_reason, RefCell::new(&mut ids), error_codes, cx.edition)\n+                MarkdownHtml(\n+                    &unstable_reason,\n+                    RefCell::new(&mut ids),\n+                    error_codes,\n+                    cx.edition,\n+                    &cx.playground,\n+                )\n             );\n         }\n \n@@ -4237,7 +4248,7 @@ fn render_impl(w: &mut fmt::Formatter<'_>, cx: &Context, i: &Impl, link: AssocIt\n             let mut ids = cx.id_map.borrow_mut();\n             write!(w, \"<div class='docblock'>{}</div>\",\n                    Markdown(&*dox, &i.impl_item.links(), RefCell::new(&mut ids),\n-                            cx.codes, cx.edition))?;\n+                            cx.codes, cx.edition, &cx.playground))?;\n         }\n     }\n "}, {"sha": "b7dd6c30f09f9a67b2e05a8404402c3e74521f45", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dbad77ffdd59e54b3f496cfbdb7909a6bbd03031/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbad77ffdd59e54b3f496cfbdb7909a6bbd03031/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=dbad77ffdd59e54b3f496cfbdb7909a6bbd03031", "patch": "@@ -60,9 +60,10 @@ pub fn render(\n     };\n     let playground_url = options.markdown_playground_url\n                             .or(options.playground_url);\n-    if let Some(playground) = playground_url {\n-        markdown::PLAYGROUND.with(|s| { *s.borrow_mut() = Some((None, playground)); });\n-    }\n+    let playground = playground_url.map(|url| markdown::Playground {\n+        crate_name: None,\n+        url,\n+    });\n \n     let mut out = match File::create(&output) {\n         Err(e) => {\n@@ -82,9 +83,9 @@ pub fn render(\n     let mut ids = IdMap::new();\n     let error_codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n     let text = if !options.markdown_no_toc {\n-        MarkdownWithToc(text, RefCell::new(&mut ids), error_codes, edition).to_string()\n+        MarkdownWithToc(text, RefCell::new(&mut ids), error_codes, edition, &playground).to_string()\n     } else {\n-        Markdown(text, &[], RefCell::new(&mut ids), error_codes, edition).to_string()\n+        Markdown(text, &[], RefCell::new(&mut ids), error_codes, edition, &playground).to_string()\n     };\n \n     let err = write!("}, {"sha": "33987b0b54213d9d019b24a094b887ca313ba139", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dbad77ffdd59e54b3f496cfbdb7909a6bbd03031/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbad77ffdd59e54b3f496cfbdb7909a6bbd03031/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=dbad77ffdd59e54b3f496cfbdb7909a6bbd03031", "patch": "@@ -16,7 +16,7 @@ use std::cell::RefCell;\n use syntax::edition::DEFAULT_EDITION;\n use syntax::diagnostics::metadata::{get_metadata_dir, ErrorMetadataMap, ErrorMetadata};\n \n-use rustdoc::html::markdown::{Markdown, IdMap, ErrorCodes, PLAYGROUND};\n+use rustdoc::html::markdown::{Markdown, IdMap, ErrorCodes, Playground};\n use rustc_serialize::json;\n \n enum OutputFormat {\n@@ -95,9 +95,13 @@ impl Formatter for HTMLFormatter {\n         match info.description {\n             Some(ref desc) => {\n                 let mut id_map = self.0.borrow_mut();\n+                let playground = Playground {\n+                    crate_name: None,\n+                    url: String::from(\"https://play.rust-lang.org/\"),\n+                };\n                 write!(output, \"{}\",\n                     Markdown(desc, &[], RefCell::new(&mut id_map),\n-                             ErrorCodes::Yes, DEFAULT_EDITION))?\n+                             ErrorCodes::Yes, DEFAULT_EDITION, &Some(playground)))?\n             },\n             None => write!(output, \"<p>No description.</p>\\n\")?,\n         }\n@@ -260,9 +264,6 @@ fn parse_args() -> (OutputFormat, PathBuf) {\n \n fn main() {\n     env_logger::init();\n-    PLAYGROUND.with(|slot| {\n-        *slot.borrow_mut() = Some((None, String::from(\"https://play.rust-lang.org/\")));\n-    });\n     let (format, dst) = parse_args();\n     let result = syntax::with_default_globals(move || {\n         main_with_result(format, &dst)"}]}