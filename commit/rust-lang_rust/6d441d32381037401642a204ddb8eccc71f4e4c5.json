{"sha": "6d441d32381037401642a204ddb8eccc71f4e4c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNDQxZDMyMzgxMDM3NDAxNjQyYTIwNGRkYjhlY2NjNzFmNGU0YzU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-01T00:25:13Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-01T00:25:20Z"}, "message": "Preserve hard \\n\\n pairs from source when pretty-printing, as explicit formatting control from users.", "tree": {"sha": "97af3bc7e782220131610f40f9ee430b3e3467dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97af3bc7e782220131610f40f9ee430b3e3467dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d441d32381037401642a204ddb8eccc71f4e4c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d441d32381037401642a204ddb8eccc71f4e4c5", "html_url": "https://github.com/rust-lang/rust/commit/6d441d32381037401642a204ddb8eccc71f4e4c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d441d32381037401642a204ddb8eccc71f4e4c5/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc9f285b069d598f571d70e895726221140f32f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc9f285b069d598f571d70e895726221140f32f0", "html_url": "https://github.com/rust-lang/rust/commit/dc9f285b069d598f571d70e895726221140f32f0"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "d6bc3723bf3e20d91a48f03af1a3da135bff1b4d", "filename": "src/comp/front/lexer.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6d441d32381037401642a204ddb8eccc71f4e4c5/src%2Fcomp%2Ffront%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d441d32381037401642a204ddb8eccc71f4e4c5/src%2Fcomp%2Ffront%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Flexer.rs?ref=6d441d32381037401642a204ddb8eccc71f4e4c5", "patch": "@@ -536,6 +536,8 @@ tag cmnt_style {\n \n     mixed; // Code before /* foo */ and after the comment\n \n+    blank_line; // Just a manual blank linke \"\\n\\n\", for layout\n+\n }\n \n type cmnt = rec(cmnt_style style, vec[str] lines, uint pos);\n@@ -546,7 +548,6 @@ fn read_to_eol(&reader rdr) -> str {\n         str::push_char(val, rdr.curr());\n         rdr.bump();\n     }\n-    if (rdr.curr() == '\\n') { rdr.bump(); } else { assert (rdr.is_eof()); }\n     ret val;\n }\n \n@@ -566,6 +567,19 @@ fn consume_non_eol_whitespace(&reader rdr) {\n     }\n }\n \n+fn consume_whitespace_counting_blank_lines(&reader rdr,\n+                                           &mutable vec[cmnt] comments) {\n+    while (is_whitespace(rdr.curr()) && !rdr.is_eof()) {\n+        if (rdr.curr() == '\\n' && rdr.next() == '\\n') {\n+            log \">>> blank-line comment\";\n+            let vec[str] v = [];\n+            comments += [rec(style=blank_line, lines=v,\n+                             pos=rdr.get_chpos())];\n+        }\n+        rdr.bump();\n+    }\n+}\n+\n fn read_line_comments(&reader rdr, bool code_to_the_left) -> cmnt {\n     log \">>> line comments\";\n     auto p = rdr.get_chpos();\n@@ -694,19 +708,21 @@ fn gather_comments_and_literals(session sess, str path) ->\n             consume_non_eol_whitespace(rdr);\n             if (rdr.curr() == '\\n') {\n                 code_to_the_left = false;\n-                consume_whitespace(rdr);\n+                consume_whitespace_counting_blank_lines(rdr, comments);\n             }\n             while (peeking_at_comment(rdr)) {\n                 consume_comment(rdr, code_to_the_left, comments);\n-                consume_whitespace(rdr);\n+                consume_whitespace_counting_blank_lines(rdr, comments);\n             }\n             break;\n         }\n-        if (is_lit(next_token(rdr))) {\n+        auto tok = next_token(rdr);\n+        if (is_lit(tok)) {\n             vec::push[lit](literals,\n                            rec(lit=rdr.get_mark_str(),\n                                pos=rdr.get_mark_chpos()));\n         }\n+        log \"tok: \" + token::to_str(rdr, tok);\n         first_read = false;\n     }\n     ret rec(cmnts=comments, lits=literals);"}, {"sha": "05cd539e00c5d7dc40d497be5240daeda08c3aa3", "filename": "src/comp/pretty/ppaux.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d441d32381037401642a204ddb8eccc71f4e4c5/src%2Fcomp%2Fpretty%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d441d32381037401642a204ddb8eccc71f4e4c5/src%2Fcomp%2Fpretty%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fppaux.rs?ref=6d441d32381037401642a204ddb8eccc71f4e4c5", "patch": "@@ -279,6 +279,11 @@ fn print_comment(&ps s, lexer::cmnt cmnt) {\n                 end(s);\n             }\n         }\n+        case (lexer::blank_line) {\n+            // We need to do at least one, possibly two hardbreaks.\n+            pprust::hardbreak_if_not_bol(s);\n+            hardbreak(s.s);\n+        }\n     }\n }\n "}, {"sha": "ca5b283c38d2e47fcf18f268ce2152243b656869", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6d441d32381037401642a204ddb8eccc71f4e4c5/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d441d32381037401642a204ddb8eccc71f4e4c5/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=6d441d32381037401642a204ddb8eccc71f4e4c5", "patch": "@@ -191,9 +191,7 @@ fn print_mod(&ps s, ast::_mod _mod, &vec[ast::attribute] attrs) {\n         print_view_item(s, vitem);\n     }\n     for (@ast::item item in _mod.items) {\n-        // Mod-level item printing we're a little more space-y about.\n-        hardbreak(s.s);\n-        hardbreak(s.s);\n+        hardbreak_if_not_bol(s);\n         print_item(s, item);\n     }\n     print_remaining_comments(s);\n@@ -271,7 +269,7 @@ fn print_type(&ps s, &ast::ty ty) {\n             head(s, \"obj\");\n             bopen(s);\n             for (ast::ty_method m in methods) {\n-                hardbreak(s.s);\n+                hardbreak_if_not_bol(s);\n                 cbox(s, indent_unit);\n                 maybe_print_comment(s, m.span.lo);\n                 print_ty_fn(s, m.node.proto, some(m.node.ident),\n@@ -338,7 +336,7 @@ fn print_item(&ps s, &@ast::item item) {\n             word_nbsp(s, item.ident);\n             bopen(s);\n             for (@ast::native_item item in nmod.items) {\n-                hardbreak(s.s);\n+                hardbreak_if_not_bol(s);\n                 ibox(s, indent_unit);\n                 maybe_print_comment(s, item.span.lo);\n                 alt (item.node) {\n@@ -427,7 +425,7 @@ fn print_item(&ps s, &@ast::item item) {\n             bopen(s);\n             for (@ast::method meth in _obj.methods) {\n                 let vec[ast::ty_param] typarams = [];\n-                hardbreak(s.s);\n+                hardbreak_if_not_bol(s);\n                 maybe_print_comment(s, meth.span.lo);\n                 print_fn(s, meth.node.meth.decl, meth.node.meth.proto,\n                          meth.node.ident, typarams);\n@@ -475,7 +473,7 @@ fn print_outer_attributes(&ps s, vec[ast::attribute] attrs) {\n             case (_) {/* fallthrough */ }\n         }\n     }\n-    if (count > 0) { hardbreak(s.s); }\n+    if (count > 0) { hardbreak_if_not_bol(s); }\n }\n \n fn print_inner_attributes(&ps s, vec[ast::attribute] attrs) {\n@@ -490,11 +488,11 @@ fn print_inner_attributes(&ps s, vec[ast::attribute] attrs) {\n             case (_) { /* fallthrough */ }\n         }\n     }\n-    if (count > 0) { hardbreak(s.s); }\n+    if (count > 0) { hardbreak_if_not_bol(s); }\n }\n \n fn print_attribute(&ps s, &ast::attribute attr) {\n-    hardbreak(s.s);\n+    hardbreak_if_not_bol(s);\n     maybe_print_comment(s, attr.span.lo);\n     word(s.s, \"#[\");\n     print_meta_item(s, @attr.node.value);"}]}