{"sha": "988257649752a4b41a819ca415df363893f300be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ODI1NzY0OTc1MmE0YjQxYTgxOWNhNDE1ZGYzNjM4OTNmMzAwYmU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-21T20:42:29Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-22T17:21:30Z"}, "message": "Improve debug messages in generated clif files", "tree": {"sha": "036f0ebb2e1917cbeb1e3fdebae6c2e1674acaea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/036f0ebb2e1917cbeb1e3fdebae6c2e1674acaea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/988257649752a4b41a819ca415df363893f300be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/988257649752a4b41a819ca415df363893f300be", "html_url": "https://github.com/rust-lang/rust/commit/988257649752a4b41a819ca415df363893f300be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/988257649752a4b41a819ca415df363893f300be/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e5d9abe9cd0aba8e1c97528d4d91732f63dc58e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e5d9abe9cd0aba8e1c97528d4d91732f63dc58e", "html_url": "https://github.com/rust-lang/rust/commit/6e5d9abe9cd0aba8e1c97528d4d91732f63dc58e"}], "stats": {"total": 111, "additions": 77, "deletions": 34}, "files": [{"sha": "1c589e679f8402c472bbd6b6ec2ee22dce2d3c3b", "filename": "src/abi.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/988257649752a4b41a819ca415df363893f300be/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/988257649752a4b41a819ca415df363893f300be/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=988257649752a4b41a819ca415df363893f300be", "patch": "@@ -70,7 +70,7 @@ fn adjust_arg_for_abi<'a, 'tcx: 'a>(\n     }\n }\n \n-pub fn clif_sig_from_fn_ty<'a, 'tcx: 'a>(\n+fn clif_sig_from_fn_ty<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     fn_ty: Ty<'tcx>,\n ) -> Signature {\n@@ -129,7 +129,7 @@ pub fn clif_sig_from_fn_ty<'a, 'tcx: 'a>(\n     }\n }\n \n-fn ty_fn_sig<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> ty::FnSig<'tcx> {\n+pub fn ty_fn_sig<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> ty::FnSig<'tcx> {\n     let sig = match ty.sty {\n         ty::FnDef(..) |\n         // Shims currently have type TyFnPtr. Not sure this should remain.\n@@ -329,7 +329,6 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(\n \n     fx.bcx.switch_to_block(start_ebb);\n \n-    fx.top_nop = Some(fx.bcx.ins().nop());\n     fx.add_global_comment(format!(\"ssa {:?}\", ssa_analyzed));\n \n     for local in fx.mir.args_iter() {"}, {"sha": "46e47b99224d0edde70c0750f89a28736b99cae4", "filename": "src/base.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/988257649752a4b41a819ca415df363893f300be/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/988257649752a4b41a819ca415df363893f300be/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=988257649752a4b41a819ca415df363893f300be", "patch": "@@ -82,6 +82,8 @@ fn trans_fn<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n \n     // Step 5. Make FunctionCx\n     let pointer_type = cx.module.target_config().pointer_type();\n+    let clif_comments = crate::pretty_clif::CommentWriter::new(tcx, instance);\n+\n     let mut fx = FunctionCx {\n         tcx,\n         module: cx.module,\n@@ -94,11 +96,9 @@ fn trans_fn<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n         ebb_map,\n         local_map: HashMap::new(),\n \n-        comments: HashMap::new(),\n+        clif_comments,\n         constants: &mut cx.ccx,\n         caches: &mut cx.caches,\n-\n-        top_nop: None,\n     };\n \n     // Step 6. Codegen function\n@@ -108,25 +108,12 @@ fn trans_fn<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n     });\n \n     // Step 7. Write function to file for debugging\n-    let mut writer = crate::pretty_clif::CommentWriter(fx.comments);\n-\n-    let mut clif = String::new();\n     if cfg!(debug_assertions) {\n-        ::cranelift::codegen::write::decorate_function(&mut writer, &mut clif, &func, None)\n-            .unwrap();\n-        let clif_file_name = format!(\n-            \"{}/{}__{}.clif\",\n-            concat!(env!(\"CARGO_MANIFEST_DIR\"), \"/target/out/clif\"),\n-            tcx.crate_name(LOCAL_CRATE),\n-            tcx.symbol_name(instance).as_str(),\n-        );\n-        if let Err(e) = ::std::fs::write(clif_file_name, clif.as_bytes()) {\n-            tcx.sess.warn(&format!(\"err writing clif file: {:?}\", e));\n-        }\n+        fx.write_clif_file();\n     }\n \n     // Step 8. Verify function\n-    verify_func(tcx, writer, &func);\n+    verify_func(tcx, fx.clif_comments, &func);\n \n     // Step 9. Define function\n     cx.caches.context.func = func;\n@@ -145,7 +132,7 @@ fn verify_func(tcx: TyCtxt, writer: crate::pretty_clif::CommentWriter, func: &Fu\n             let pretty_error = ::cranelift::codegen::print_errors::pretty_verifier_error(\n                 &func,\n                 None,\n-                Some(Box::new(writer)),\n+                Some(Box::new(&writer)),\n                 err,\n             );\n             tcx.sess"}, {"sha": "62e4af90054ac8dee7e927be1373bb8f377b72da", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/988257649752a4b41a819ca415df363893f300be/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/988257649752a4b41a819ca415df363893f300be/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=988257649752a4b41a819ca415df363893f300be", "patch": "@@ -623,12 +623,9 @@ pub struct FunctionCx<'a, 'tcx: 'a, B: Backend> {\n     pub ebb_map: HashMap<BasicBlock, Ebb>,\n     pub local_map: HashMap<Local, CPlace<'tcx>>,\n \n-    pub comments: HashMap<Inst, String>,\n+    pub clif_comments: crate::pretty_clif::CommentWriter,\n     pub constants: &'a mut crate::constant::ConstantCx,\n     pub caches: &'a mut Caches<'tcx>,\n-\n-    /// add_global_comment inserts a comment here\n-    pub top_nop: Option<Inst>,\n }\n \n impl<'a, 'tcx: 'a, B: Backend + 'a> fmt::Debug for FunctionCx<'a, 'tcx, B> {\n@@ -637,9 +634,8 @@ impl<'a, 'tcx: 'a, B: Backend + 'a> fmt::Debug for FunctionCx<'a, 'tcx, B> {\n         writeln!(f, \"{:?}\", self.local_map)?;\n \n         let mut clif = String::new();\n-        let mut writer = crate::pretty_clif::CommentWriter(self.comments.clone());\n         ::cranelift::codegen::write::decorate_function(\n-            &mut writer,\n+            &mut &self.clif_comments,\n             &mut clif,\n             &self.bcx.func,\n             None,"}, {"sha": "0254090a2c67b8a83b67e581e2b90f5976348056", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 67, "deletions": 6, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/988257649752a4b41a819ca415df363893f300be/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/988257649752a4b41a819ca415df363893f300be/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=988257649752a4b41a819ca415df363893f300be", "patch": "@@ -7,15 +7,47 @@ use cranelift::codegen::write::{FuncWriter, PlainWriter};\n \n use crate::prelude::*;\n \n-pub struct CommentWriter(pub HashMap<Inst, String>);\n+#[derive(Debug)]\n+pub struct CommentWriter {\n+    global_comments: Vec<String>,\n+    inst_comments: HashMap<Inst, String>\n+}\n+\n+impl CommentWriter {\n+    pub fn new<'a, 'tcx: 'a>(\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        instance: Instance<'tcx>,\n+    ) -> Self {\n+        CommentWriter {\n+            global_comments: vec![\n+                format!(\"symbol {}\", tcx.symbol_name(instance).as_str()),\n+                format!(\"instance {:?}\", instance),\n+                format!(\"sig {:?}\", crate::abi::ty_fn_sig(tcx, instance.ty(tcx))),\n+                String::new(),\n+            ],\n+            inst_comments: HashMap::new(),\n+        }\n+    }\n+}\n \n-impl FuncWriter for CommentWriter {\n+impl<'a> FuncWriter for &'a CommentWriter {\n     fn write_preamble(\n         &mut self,\n         w: &mut dyn fmt::Write,\n         func: &Function,\n         reg_info: Option<&isa::RegInfo>,\n     ) -> Result<bool, fmt::Error> {\n+        for comment in &self.global_comments {\n+            if !comment.is_empty() {\n+                writeln!(w, \"; {}\", comment)?;\n+            } else {\n+                writeln!(w, \"\")?;\n+            }\n+        }\n+        if !self.global_comments.is_empty() {\n+            writeln!(w, \"\")?;\n+        }\n+\n         PlainWriter.write_preamble(w, func, reg_info)\n     }\n \n@@ -40,21 +72,21 @@ impl FuncWriter for CommentWriter {\n         indent: usize,\n     ) -> fmt::Result {\n         PlainWriter.write_instruction(w, func, aliases, isa, inst, indent)?;\n-        if let Some(comment) = self.0.get(&inst) {\n+        if let Some(comment) = self.inst_comments.get(&inst) {\n             writeln!(w, \"; {}\", comment.replace('\\n', \"\\n; \"))?;\n         }\n         Ok(())\n     }\n }\n \n impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n-    pub fn add_global_comment<'s, S: Into<Cow<'s, str>>>(&mut self, comment: S) {\n-        self.add_comment(self.top_nop.expect(\"fx.top_nop not yet set\"), comment)\n+    pub fn add_global_comment<S: Into<String>>(&mut self, comment: S) {\n+        self.clif_comments.global_comments.push(comment.into());\n     }\n \n     pub fn add_comment<'s, S: Into<Cow<'s, str>>>(&mut self, inst: Inst, comment: S) {\n         use std::collections::hash_map::Entry;\n-        match self.comments.entry(inst) {\n+        match self.clif_comments.inst_comments.entry(inst) {\n             Entry::Occupied(mut occ) => {\n                 occ.get_mut().push('\\n');\n                 occ.get_mut().push_str(comment.into().as_ref());\n@@ -64,4 +96,33 @@ impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n             }\n         }\n     }\n+\n+    pub fn write_clif_file(&mut self) {\n+        use std::io::Write;\n+\n+        let symbol_name = self.tcx.symbol_name(self.instance).as_str();\n+        let clif_file_name = format!(\n+            \"{}/{}__{}.clif\",\n+            concat!(env!(\"CARGO_MANIFEST_DIR\"), \"/target/out/clif\"),\n+            self.tcx.crate_name(LOCAL_CRATE),\n+            symbol_name,\n+        );\n+\n+        let mut clif = String::new();\n+        ::cranelift::codegen::write::decorate_function(&mut &self.clif_comments, &mut clif, &self.bcx.func, None)\n+            .unwrap();\n+\n+        match ::std::fs::File::create(clif_file_name) {\n+            Ok(mut file) => {\n+                let target_triple: ::target_lexicon::Triple = self.tcx.sess.target.target.llvm_target.parse().unwrap();\n+                writeln!(file, \"test compile\").unwrap();\n+                writeln!(file, \"target {}\", target_triple.architecture).unwrap();\n+                writeln!(file, \"\").unwrap();\n+                file.write(clif.as_bytes()).unwrap();\n+            }\n+            Err(e) => {\n+                self.tcx.sess.warn(&format!(\"err opening clif file: {:?}\", e));\n+            }\n+        }\n+    }\n }"}]}