{"sha": "e8d38beddfb4f0368b081bd215300d79e9a0b7b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZDM4YmVkZGZiNGYwMzY4YjA4MWJkMjE1MzAwZDc5ZTlhMGI3YjQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-11-20T14:00:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-20T14:00:04Z"}, "message": "Rollup merge of #37841 - michaelwoerister:ich-loop-tests, r=nikomatsakis\n\nICH: Add regression tests for various kinds of loops.\n\nr? @nikomatsakis", "tree": {"sha": "b3bc3881615475c97e67728167e3902cb923f377", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3bc3881615475c97e67728167e3902cb923f377"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8d38beddfb4f0368b081bd215300d79e9a0b7b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8d38beddfb4f0368b081bd215300d79e9a0b7b4", "html_url": "https://github.com/rust-lang/rust/commit/e8d38beddfb4f0368b081bd215300d79e9a0b7b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8d38beddfb4f0368b081bd215300d79e9a0b7b4/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd0c7a9997ac83e108f2b10cd5d6432615ffa386", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd0c7a9997ac83e108f2b10cd5d6432615ffa386", "html_url": "https://github.com/rust-lang/rust/commit/fd0c7a9997ac83e108f2b10cd5d6432615ffa386"}, {"sha": "83ee4e93e0b142ea199b8407c23015a6865f9a04", "url": "https://api.github.com/repos/rust-lang/rust/commits/83ee4e93e0b142ea199b8407c23015a6865f9a04", "html_url": "https://github.com/rust-lang/rust/commit/83ee4e93e0b142ea199b8407c23015a6865f9a04"}], "stats": {"total": 1049, "additions": 1049, "deletions": 0}, "files": [{"sha": "7a8502f7caab188498da846377ff91dc3f1e8909", "filename": "src/test/incremental/hashes/for_loops.rs", "status": "added", "additions": 306, "deletions": 0, "changes": 306, "blob_url": "https://github.com/rust-lang/rust/blob/e8d38beddfb4f0368b081bd215300d79e9a0b7b4/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d38beddfb4f0368b081bd215300d79e9a0b7b4/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs?ref=e8d38beddfb4f0368b081bd215300d79e9a0b7b4", "patch": "@@ -0,0 +1,306 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for `for` loops.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+\n+// Change loop body ------------------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_loop_body() {\n+    let mut _x = 0;\n+    for _ in 0..1 {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_loop_body() {\n+    let mut _x = 0;\n+    for _ in 0..1 {\n+        _x = 2;\n+        break;\n+    }\n+}\n+\n+\n+\n+// Change iteration variable name ----------------------------------------------\n+#[cfg(cfail1)]\n+fn change_iteration_variable_name() {\n+    let mut _x = 0;\n+    for _i in 0..1 {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_iteration_variable_name() {\n+    let mut _x = 0;\n+    for _a in 0..1 {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+\n+\n+// Change iteration variable pattern -------------------------------------------\n+#[cfg(cfail1)]\n+fn change_iteration_variable_pattern() {\n+    let mut _x = 0;\n+    for _i in &[0, 1, 2] {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_iteration_variable_pattern() {\n+    let mut _x = 0;\n+    for &_i in &[0, 1, 2] {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+\n+\n+// Change iterable -------------------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_iterable() {\n+    let mut _x = 0;\n+    for _ in &[0, 1, 2] {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_iterable() {\n+    let mut _x = 0;\n+    for _ in &[0, 1, 3] {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+\n+\n+// Add break -------------------------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_break() {\n+    let mut _x = 0;\n+    for _ in 0..1 {\n+        _x = 1;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_break() {\n+    let mut _x = 0;\n+    for _ in 0..1 {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+\n+\n+// Add loop label --------------------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_loop_label() {\n+    let mut _x = 0;\n+    for _ in 0..1 {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_loop_label() {\n+    let mut _x = 0;\n+    'label: for _ in 0..1 {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+\n+\n+// Add loop label to break -----------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_loop_label_to_break() {\n+    let mut _x = 0;\n+    'label: for _ in 0..1 {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_loop_label_to_break() {\n+    let mut _x = 0;\n+    'label: for _ in 0..1 {\n+        _x = 1;\n+        break 'label;\n+    }\n+}\n+\n+\n+\n+// Change break label ----------------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_break_label() {\n+    let mut _x = 0;\n+    'outer: for _ in 0..1 {\n+        'inner: for _ in 0..1 {\n+            _x = 1;\n+            break 'inner;\n+        }\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_break_label() {\n+    let mut _x = 0;\n+    'outer: for _ in 0..1 {\n+        'inner: for _ in 0..1 {\n+            _x = 1;\n+            break 'outer;\n+        }\n+    }\n+}\n+\n+\n+\n+// Add loop label to continue --------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_loop_label_to_continue() {\n+    let mut _x = 0;\n+    'label: for _ in 0..1 {\n+        _x = 1;\n+        continue;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_loop_label_to_continue() {\n+    let mut _x = 0;\n+    'label: for _ in 0..1 {\n+        _x = 1;\n+        continue 'label;\n+    }\n+}\n+\n+\n+\n+// Change continue label ----------------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_continue_label() {\n+    let mut _x = 0;\n+    'outer: for _ in 0..1 {\n+        'inner: for _ in 0..1 {\n+            _x = 1;\n+            continue 'inner;\n+        }\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_continue_label() {\n+    let mut _x = 0;\n+    'outer: for _ in 0..1 {\n+        'inner: for _ in 0..1 {\n+            _x = 1;\n+            continue 'outer;\n+        }\n+    }\n+}\n+\n+\n+\n+// Change continue to break ----------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_continue_to_break() {\n+    let mut _x = 0;\n+    for _ in 0..1 {\n+        _x = 1;\n+        continue;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_continue_to_break() {\n+    let mut _x = 0;\n+    for _ in 0..1 {\n+        _x = 1;\n+        break;\n+    }\n+}"}, {"sha": "eaa5f68b98c4bcc8fa256ee0a5e60b4e9b0e446c", "filename": "src/test/incremental/hashes/loop_expressions.rs", "status": "added", "additions": 231, "deletions": 0, "changes": 231, "blob_url": "https://github.com/rust-lang/rust/blob/e8d38beddfb4f0368b081bd215300d79e9a0b7b4/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d38beddfb4f0368b081bd215300d79e9a0b7b4/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs?ref=e8d38beddfb4f0368b081bd215300d79e9a0b7b4", "patch": "@@ -0,0 +1,231 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for `loop` loops.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+\n+// Change loop body ------------------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_loop_body() {\n+    let mut _x = 0;\n+    loop {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_loop_body() {\n+    let mut _x = 0;\n+    loop {\n+        _x = 2;\n+        break;\n+    }\n+}\n+\n+\n+\n+// Add break -------------------------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_break() {\n+    let mut _x = 0;\n+    loop {\n+        _x = 1;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_break() {\n+    let mut _x = 0;\n+    loop {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+\n+\n+// Add loop label --------------------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_loop_label() {\n+    let mut _x = 0;\n+    loop {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_loop_label() {\n+    let mut _x = 0;\n+    'label: loop {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+\n+\n+// Add loop label to break -----------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_loop_label_to_break() {\n+    let mut _x = 0;\n+    'label: loop {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_loop_label_to_break() {\n+    let mut _x = 0;\n+    'label: loop {\n+        _x = 1;\n+        break 'label;\n+    }\n+}\n+\n+\n+\n+// Change break label ----------------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_break_label() {\n+    let mut _x = 0;\n+    'outer: loop {\n+        'inner: loop {\n+            _x = 1;\n+            break 'inner;\n+        }\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_break_label() {\n+    let mut _x = 0;\n+    'outer: loop {\n+        'inner: loop {\n+            _x = 1;\n+            break 'outer;\n+        }\n+    }\n+}\n+\n+\n+\n+// Add loop label to continue --------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_loop_label_to_continue() {\n+    let mut _x = 0;\n+    'label: loop {\n+        _x = 1;\n+        continue;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_loop_label_to_continue() {\n+    let mut _x = 0;\n+    'label: loop {\n+        _x = 1;\n+        continue 'label;\n+    }\n+}\n+\n+\n+\n+// Change continue label ----------------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_continue_label() {\n+    let mut _x = 0;\n+    'outer: loop {\n+        'inner: loop {\n+            _x = 1;\n+            continue 'inner;\n+        }\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_continue_label() {\n+    let mut _x = 0;\n+    'outer: loop {\n+        'inner: loop {\n+            _x = 1;\n+            continue 'outer;\n+        }\n+    }\n+}\n+\n+\n+\n+// Change continue to break ----------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_continue_to_break() {\n+    let mut _x = 0;\n+    loop {\n+        _x = 1;\n+        continue;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_continue_to_break() {\n+    let mut _x = 0;\n+    loop {\n+        _x = 1;\n+        break;\n+    }\n+}"}, {"sha": "405645bd1b842311fe4c4c923710ef36d5490e9e", "filename": "src/test/incremental/hashes/while_let_loops.rs", "status": "added", "additions": 256, "deletions": 0, "changes": 256, "blob_url": "https://github.com/rust-lang/rust/blob/e8d38beddfb4f0368b081bd215300d79e9a0b7b4/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d38beddfb4f0368b081bd215300d79e9a0b7b4/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs?ref=e8d38beddfb4f0368b081bd215300d79e9a0b7b4", "patch": "@@ -0,0 +1,256 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for `while let` loops.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+\n+// Change loop body ------------------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_loop_body() {\n+    let mut _x = 0;\n+    while let Some(0u32) = None {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_loop_body() {\n+    let mut _x = 0;\n+    while let Some(0u32) = None {\n+        _x = 2;\n+        break;\n+    }\n+}\n+\n+\n+\n+// Change loop body ------------------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_loop_condition() {\n+    let mut _x = 0;\n+    while let Some(0u32) = None {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_loop_condition() {\n+    let mut _x = 0;\n+    while let Some(1u32) = None {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+\n+\n+// Add break -------------------------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_break() {\n+    let mut _x = 0;\n+    while let Some(0u32) = None {\n+        _x = 1;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_break() {\n+    let mut _x = 0;\n+    while let Some(0u32) = None {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+\n+\n+// Add loop label --------------------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_loop_label() {\n+    let mut _x = 0;\n+    while let Some(0u32) = None {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_loop_label() {\n+    let mut _x = 0;\n+    'label: while let Some(0u32) = None {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+\n+\n+// Add loop label to break -----------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_loop_label_to_break() {\n+    let mut _x = 0;\n+    'label: while let Some(0u32) = None {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_loop_label_to_break() {\n+    let mut _x = 0;\n+    'label: while let Some(0u32) = None {\n+        _x = 1;\n+        break 'label;\n+    }\n+}\n+\n+\n+\n+// Change break label ----------------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_break_label() {\n+    let mut _x = 0;\n+    'outer: while let Some(0u32) = None {\n+        'inner: while let Some(0u32) = None {\n+            _x = 1;\n+            break 'inner;\n+        }\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_break_label() {\n+    let mut _x = 0;\n+    'outer: while let Some(0u32) = None {\n+        'inner: while let Some(0u32) = None {\n+            _x = 1;\n+            break 'outer;\n+        }\n+    }\n+}\n+\n+\n+\n+// Add loop label to continue --------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_loop_label_to_continue() {\n+    let mut _x = 0;\n+    'label: while let Some(0u32) = None {\n+        _x = 1;\n+        continue;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_loop_label_to_continue() {\n+    let mut _x = 0;\n+    'label: while let Some(0u32) = None {\n+        _x = 1;\n+        continue 'label;\n+    }\n+}\n+\n+\n+\n+// Change continue label ----------------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_continue_label() {\n+    let mut _x = 0;\n+    'outer: while let Some(0u32) = None {\n+        'inner: while let Some(0u32) = None {\n+            _x = 1;\n+            continue 'inner;\n+        }\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_continue_label() {\n+    let mut _x = 0;\n+    'outer: while let Some(0u32) = None {\n+        'inner: while let Some(0u32) = None {\n+            _x = 1;\n+            continue 'outer;\n+        }\n+    }\n+}\n+\n+\n+\n+// Change continue to break ----------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_continue_to_break() {\n+    let mut _x = 0;\n+    while let Some(0u32) = None {\n+        _x = 1;\n+        continue;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_continue_to_break() {\n+    let mut _x = 0;\n+    while let Some(0u32) = None {\n+        _x = 1;\n+        break;\n+    }\n+}"}, {"sha": "f16611ee463e0f9d0c99d72bd65f315d9db4e99b", "filename": "src/test/incremental/hashes/while_loops.rs", "status": "added", "additions": 256, "deletions": 0, "changes": 256, "blob_url": "https://github.com/rust-lang/rust/blob/e8d38beddfb4f0368b081bd215300d79e9a0b7b4/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d38beddfb4f0368b081bd215300d79e9a0b7b4/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs?ref=e8d38beddfb4f0368b081bd215300d79e9a0b7b4", "patch": "@@ -0,0 +1,256 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for `while` loops.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+\n+// Change loop body ------------------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_loop_body() {\n+    let mut _x = 0;\n+    while true {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_loop_body() {\n+    let mut _x = 0;\n+    while true {\n+        _x = 2;\n+        break;\n+    }\n+}\n+\n+\n+\n+// Change loop body ------------------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_loop_condition() {\n+    let mut _x = 0;\n+    while true {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_loop_condition() {\n+    let mut _x = 0;\n+    while false {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+\n+\n+// Add break -------------------------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_break() {\n+    let mut _x = 0;\n+    while true {\n+        _x = 1;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_break() {\n+    let mut _x = 0;\n+    while true {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+\n+\n+// Add loop label --------------------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_loop_label() {\n+    let mut _x = 0;\n+    while true {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_loop_label() {\n+    let mut _x = 0;\n+    'label: while true {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+\n+\n+// Add loop label to break -----------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_loop_label_to_break() {\n+    let mut _x = 0;\n+    'label: while true {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_loop_label_to_break() {\n+    let mut _x = 0;\n+    'label: while true {\n+        _x = 1;\n+        break 'label;\n+    }\n+}\n+\n+\n+\n+// Change break label ----------------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_break_label() {\n+    let mut _x = 0;\n+    'outer: while true {\n+        'inner: while true {\n+            _x = 1;\n+            break 'inner;\n+        }\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_break_label() {\n+    let mut _x = 0;\n+    'outer: while true {\n+        'inner: while true {\n+            _x = 1;\n+            break 'outer;\n+        }\n+    }\n+}\n+\n+\n+\n+// Add loop label to continue --------------------------------------------------\n+#[cfg(cfail1)]\n+fn add_loop_label_to_continue() {\n+    let mut _x = 0;\n+    'label: while true {\n+        _x = 1;\n+        continue;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_loop_label_to_continue() {\n+    let mut _x = 0;\n+    'label: while true {\n+        _x = 1;\n+        continue 'label;\n+    }\n+}\n+\n+\n+\n+// Change continue label ----------------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_continue_label() {\n+    let mut _x = 0;\n+    'outer: while true {\n+        'inner: while true {\n+            _x = 1;\n+            continue 'inner;\n+        }\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_continue_label() {\n+    let mut _x = 0;\n+    'outer: while true {\n+        'inner: while true {\n+            _x = 1;\n+            continue 'outer;\n+        }\n+    }\n+}\n+\n+\n+\n+// Change continue to break ----------------------------------------------------\n+#[cfg(cfail1)]\n+fn change_continue_to_break() {\n+    let mut _x = 0;\n+    while true {\n+        _x = 1;\n+        continue;\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_continue_to_break() {\n+    let mut _x = 0;\n+    while true {\n+        _x = 1;\n+        break;\n+    }\n+}"}]}