{"sha": "b3930599a791682e5ae8268f0c779d74e1e3dfda", "node_id": "C_kwDOAAsO6NoAKGIzOTMwNTk5YTc5MTY4MmU1YWU4MjY4ZjBjNzc5ZDc0ZTFlM2RmZGE", "commit": {"author": {"name": "k-nasa", "email": "htilcs1115@gmail.com", "date": "2021-10-13T13:02:39Z"}, "committer": {"name": "k-nasa", "email": "htilcs1115@gmail.com", "date": "2021-10-13T13:02:39Z"}, "message": "calc depth", "tree": {"sha": "85d15bb8725b539eee778da7b198c9c0bd028adb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85d15bb8725b539eee778da7b198c9c0bd028adb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3930599a791682e5ae8268f0c779d74e1e3dfda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3930599a791682e5ae8268f0c779d74e1e3dfda", "html_url": "https://github.com/rust-lang/rust/commit/b3930599a791682e5ae8268f0c779d74e1e3dfda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3930599a791682e5ae8268f0c779d74e1e3dfda/comments", "author": {"login": "k-nasa", "id": 23740172, "node_id": "MDQ6VXNlcjIzNzQwMTcy", "avatar_url": "https://avatars.githubusercontent.com/u/23740172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-nasa", "html_url": "https://github.com/k-nasa", "followers_url": "https://api.github.com/users/k-nasa/followers", "following_url": "https://api.github.com/users/k-nasa/following{/other_user}", "gists_url": "https://api.github.com/users/k-nasa/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-nasa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-nasa/subscriptions", "organizations_url": "https://api.github.com/users/k-nasa/orgs", "repos_url": "https://api.github.com/users/k-nasa/repos", "events_url": "https://api.github.com/users/k-nasa/events{/privacy}", "received_events_url": "https://api.github.com/users/k-nasa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "k-nasa", "id": 23740172, "node_id": "MDQ6VXNlcjIzNzQwMTcy", "avatar_url": "https://avatars.githubusercontent.com/u/23740172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-nasa", "html_url": "https://github.com/k-nasa", "followers_url": "https://api.github.com/users/k-nasa/followers", "following_url": "https://api.github.com/users/k-nasa/following{/other_user}", "gists_url": "https://api.github.com/users/k-nasa/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-nasa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-nasa/subscriptions", "organizations_url": "https://api.github.com/users/k-nasa/orgs", "repos_url": "https://api.github.com/users/k-nasa/repos", "events_url": "https://api.github.com/users/k-nasa/events{/privacy}", "received_events_url": "https://api.github.com/users/k-nasa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef9c4b666f76cfaeea243760702d43719264f145", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef9c4b666f76cfaeea243760702d43719264f145", "html_url": "https://github.com/rust-lang/rust/commit/ef9c4b666f76cfaeea243760702d43719264f145"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "dcbc277b26aa79db2c83e8b900565f5eee0f2ed6", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b3930599a791682e5ae8268f0c779d74e1e3dfda/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3930599a791682e5ae8268f0c779d74e1e3dfda/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=b3930599a791682e5ae8268f0c779d74e1e3dfda", "patch": "@@ -12,7 +12,7 @@ use syntax::{\n };\n \n use crate::{\n-    utils::{does_pat_match_variant, unwrap_trivial_block},\n+    utils::{does_nested_pattern, does_pat_match_variant, unwrap_trivial_block},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n@@ -143,6 +143,8 @@ fn make_else_arm(\n             Some((it, pat)) => {\n                 if does_pat_match_variant(pat, &it.sad_pattern()) {\n                     it.happy_pattern_wildcard()\n+                } else if does_nested_pattern(pat) {\n+                    make::wildcard_pat().into()\n                 } else {\n                     it.sad_pattern()\n                 }\n@@ -596,6 +598,7 @@ fn foo(x: Result<i32, ()>) {\n         Ok(Some(_)) => (),\n         _ => (),\n     }\n+}\n \"#,\n         );\n     }"}, {"sha": "64adddb1de609f9a55067a91cffaa717550ad59e", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b3930599a791682e5ae8268f0c779d74e1e3dfda/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3930599a791682e5ae8268f0c779d74e1e3dfda/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=b3930599a791682e5ae8268f0c779d74e1e3dfda", "patch": "@@ -285,6 +285,43 @@ pub(crate) fn does_pat_match_variant(pat: &ast::Pat, var: &ast::Pat) -> bool {\n     pat_head == var_head\n }\n \n+pub(crate) fn does_nested_pattern(pat: &ast::Pat) -> bool {\n+    let depth = calc_depth(pat, 0);\n+\n+    if 1 < depth {\n+        return true;\n+    }\n+    false\n+}\n+\n+fn calc_depth(pat: &ast::Pat, mut depth: usize) -> usize {\n+    match pat {\n+        ast::Pat::IdentPat(_)\n+        | ast::Pat::BoxPat(_)\n+        | ast::Pat::RestPat(_)\n+        | ast::Pat::LiteralPat(_)\n+        | ast::Pat::MacroPat(_)\n+        | ast::Pat::OrPat(_)\n+        | ast::Pat::ParenPat(_)\n+        | ast::Pat::PathPat(_)\n+        | ast::Pat::WildcardPat(_)\n+        | ast::Pat::RangePat(_)\n+        | ast::Pat::RecordPat(_)\n+        | ast::Pat::RefPat(_)\n+        | ast::Pat::SlicePat(_)\n+        | ast::Pat::TuplePat(_)\n+        | ast::Pat::ConstBlockPat(_) => 1,\n+\n+        // TODO implement\n+        ast::Pat::TupleStructPat(pat) => {\n+            for p in pat.fields() {\n+                depth += calc_depth(&p, depth + 1);\n+            }\n+            depth\n+        }\n+    }\n+}\n+\n // Uses a syntax-driven approach to find any impl blocks for the struct that\n // exist within the module/file\n //"}]}