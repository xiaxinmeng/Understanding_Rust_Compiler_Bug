{"sha": "86d41350c790502d3a1227bab3433ac7472ccb4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZDQxMzUwYzc5MDUwMmQzYTEyMjdiYWIzNDMzYWM3NDcyY2NiNGM=", "commit": {"author": {"name": "Olivier Goffart", "email": "ogoffart@woboq.com", "date": "2018-11-20T11:14:53Z"}, "committer": {"name": "Olivier Goffart", "email": "ogoffart@woboq.com", "date": "2018-11-20T11:20:05Z"}, "message": "Fix invalid bitcast taking bool out of a union represented as a scalar\n\nAs reported in https://github.com/rust-lang/rust/pull/54668#issuecomment-440186476", "tree": {"sha": "fc9cdeb68f765fcf6ff051dcab7a925eddf17893", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc9cdeb68f765fcf6ff051dcab7a925eddf17893"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86d41350c790502d3a1227bab3433ac7472ccb4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86d41350c790502d3a1227bab3433ac7472ccb4c", "html_url": "https://github.com/rust-lang/rust/commit/86d41350c790502d3a1227bab3433ac7472ccb4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86d41350c790502d3a1227bab3433ac7472ccb4c/comments", "author": {"login": "ogoffart", "id": 959326, "node_id": "MDQ6VXNlcjk1OTMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/959326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogoffart", "html_url": "https://github.com/ogoffart", "followers_url": "https://api.github.com/users/ogoffart/followers", "following_url": "https://api.github.com/users/ogoffart/following{/other_user}", "gists_url": "https://api.github.com/users/ogoffart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogoffart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogoffart/subscriptions", "organizations_url": "https://api.github.com/users/ogoffart/orgs", "repos_url": "https://api.github.com/users/ogoffart/repos", "events_url": "https://api.github.com/users/ogoffart/events{/privacy}", "received_events_url": "https://api.github.com/users/ogoffart/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ogoffart", "id": 959326, "node_id": "MDQ6VXNlcjk1OTMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/959326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogoffart", "html_url": "https://github.com/ogoffart", "followers_url": "https://api.github.com/users/ogoffart/followers", "following_url": "https://api.github.com/users/ogoffart/following{/other_user}", "gists_url": "https://api.github.com/users/ogoffart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogoffart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogoffart/subscriptions", "organizations_url": "https://api.github.com/users/ogoffart/orgs", "repos_url": "https://api.github.com/users/ogoffart/repos", "events_url": "https://api.github.com/users/ogoffart/events{/privacy}", "received_events_url": "https://api.github.com/users/ogoffart/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "046e054a995c7b293e26968774ff88b38661cd3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/046e054a995c7b293e26968774ff88b38661cd3c", "html_url": "https://github.com/rust-lang/rust/commit/046e054a995c7b293e26968774ff88b38661cd3c"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "859047f54917db7041e267ccc05eed854c012aa8", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/86d41350c790502d3a1227bab3433ac7472ccb4c/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d41350c790502d3a1227bab3433ac7472ccb4c/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=86d41350c790502d3a1227bab3433ac7472ccb4c", "patch": "@@ -243,14 +243,22 @@ impl<'a, 'tcx: 'a, V: CodegenObject> OperandRef<'tcx, V> {\n             _ => bug!(\"OperandRef::extract_field({:?}): not applicable\", self)\n         };\n \n+        let bitcast = |bx: &mut Bx, val, ty| {\n+            if ty == bx.cx().type_i1() {\n+                bx.trunc(val, ty)\n+            } else {\n+                bx.bitcast(val, ty)\n+            }\n+        };\n+\n         // HACK(eddyb) have to bitcast pointers until LLVM removes pointee types.\n         match val {\n             OperandValue::Immediate(ref mut llval) => {\n-                *llval = bx.bitcast(*llval, bx.cx().immediate_backend_type(field));\n+                *llval = bitcast(bx, *llval, bx.cx().immediate_backend_type(field));\n             }\n             OperandValue::Pair(ref mut a, ref mut b) => {\n-                *a = bx.bitcast(*a, bx.cx().scalar_pair_element_backend_type(field, 0, true));\n-                *b = bx.bitcast(*b, bx.cx().scalar_pair_element_backend_type(field, 1, true));\n+                *a = bitcast(bx, *a, bx.cx().scalar_pair_element_backend_type(field, 0, true));\n+                *b = bitcast(bx, *b, bx.cx().scalar_pair_element_backend_type(field, 1, true));\n             }\n             OperandValue::Ref(..) => bug!()\n         }"}, {"sha": "5a6df52502eb5cc4423f8905b3b2153484d0d753", "filename": "src/test/codegen/union-abi.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86d41350c790502d3a1227bab3433ac7472ccb4c/src%2Ftest%2Fcodegen%2Funion-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d41350c790502d3a1227bab3433ac7472ccb4c/src%2Ftest%2Fcodegen%2Funion-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funion-abi.rs?ref=86d41350c790502d3a1227bab3433ac7472ccb4c", "patch": "@@ -78,3 +78,9 @@ pub union CUnionU128{a:u128}\n #[no_mangle]\n pub fn test_CUnionU128(_: CUnionU128) { loop {} }\n \n+pub union UnionBool { b:bool }\n+// CHECK: define zeroext i1 @test_UnionBool(i8 %b)\n+#[no_mangle]\n+pub fn test_UnionBool(b: UnionBool) -> bool { unsafe { b.b }  }\n+// CHECK: %0 = trunc i8 %b to i1\n+"}]}