{"sha": "bc687ee99293163ff856aea9efee9c9cb27cb6d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNjg3ZWU5OTI5MzE2M2ZmODU2YWVhOWVmZWU5YzljYjI3Y2I2ZDY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-13T13:38:06Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-13T14:24:14Z"}, "message": "Prepare for emitting separate object files for each codegen unit", "tree": {"sha": "d1b4791f147301bbbfbaddd22362574f42dbc5d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1b4791f147301bbbfbaddd22362574f42dbc5d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc687ee99293163ff856aea9efee9c9cb27cb6d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc687ee99293163ff856aea9efee9c9cb27cb6d6", "html_url": "https://github.com/rust-lang/rust/commit/bc687ee99293163ff856aea9efee9c9cb27cb6d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc687ee99293163ff856aea9efee9c9cb27cb6d6/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64f53971e6590c75a93bcaf7726ff1522f71aed7", "url": "https://api.github.com/repos/rust-lang/rust/commits/64f53971e6590c75a93bcaf7726ff1522f71aed7", "html_url": "https://github.com/rust-lang/rust/commit/64f53971e6590c75a93bcaf7726ff1522f71aed7"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "dfe830b83b59d6c2e81281ce53a1bb3725268714", "filename": "src/lib.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bc687ee99293163ff856aea9efee9c9cb27cb6d6/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc687ee99293163ff856aea9efee9c9cb27cb6d6/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=bc687ee99293163ff856aea9efee9c9cb27cb6d6", "patch": "@@ -24,6 +24,7 @@ use rustc::session::{\n     CompileIncomplete,\n };\n use rustc::ty::query::Providers;\n+use rustc::mir::mono::{Linkage as RLinkage, Visibility};\n use rustc_codegen_ssa::back::linker::LinkerInfo;\n use rustc_codegen_ssa::CrateInfo;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n@@ -200,7 +201,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                 .declare_function(\"main\", Linkage::Import, &sig)\n                 .unwrap();\n \n-            codegen_mono_items(tcx, &mut jit_module, &mut log);\n+            codegen_cgus(tcx, &mut jit_module, &mut log);\n             crate::allocator::codegen(tcx.sess, &mut jit_module);\n             jit_module.finalize_definitions();\n \n@@ -233,7 +234,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                 faerie_module.target_config().pointer_type()\n             );\n \n-            codegen_mono_items(tcx, &mut faerie_module, &mut log);\n+            codegen_cgus(tcx, &mut faerie_module, &mut log);\n             crate::allocator::codegen(tcx.sess, &mut faerie_module);\n             faerie_module.finalize_definitions();\n \n@@ -328,30 +329,40 @@ fn build_isa(sess: &Session) -> Box<isa::TargetIsa + 'static> {\n         .finish(flags)\n }\n \n-fn codegen_mono_items<'a, 'tcx: 'a>(\n+fn codegen_cgus<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     module: &mut Module<impl Backend + 'static>,\n     log: &mut Option<File>,\n ) {\n-    let mut caches = Caches::new();\n-    let mut ccx = ConstantCx::default();\n-\n     let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n     let mono_items = cgus\n         .iter()\n         .map(|cgu| cgu.items().iter())\n         .flatten()\n-        .collect::<FxHashSet<(_, _)>>();\n+        .map(|(&mono_item, &(linkage, vis))| (mono_item, (linkage, vis)))\n+        .collect::<FxHashMap<_, (_, _)>>();\n+\n+    codegen_mono_items(tcx, module, log, mono_items);\n \n+    crate::main_shim::maybe_create_entry_wrapper(tcx, module);\n+}\n+\n+fn codegen_mono_items<'a, 'tcx: 'a>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    module: &mut Module<impl Backend + 'static>,\n+    log: &mut Option<File>,\n+    mono_items: FxHashMap<MonoItem<'tcx>, (RLinkage, Visibility)>,\n+) {\n     time(\"codegen mono items\", move || {\n-        for (&mono_item, &(_linkage, _vis)) in mono_items {\n+        let mut caches = Caches::new();\n+        let mut ccx = ConstantCx::default();\n+\n+        for (mono_item, (_linkage, _vis)) in mono_items {\n             unimpl::try_unimpl(tcx, log, || {\n                 base::trans_mono_item(tcx, module, &mut caches, &mut ccx, mono_item);\n             });\n         }\n \n-        crate::main_shim::maybe_create_entry_wrapper(tcx, module);\n-\n         ccx.finalize(tcx, module);\n     });\n }"}]}