{"sha": "a1829bbed030db738ade4ca298d037fe06a4c8be", "node_id": "C_kwDOAAsO6NoAKGExODI5YmJlZDAzMGRiNzM4YWRlNGNhMjk4ZDAzN2ZlMDZhNGM4YmU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-09T05:05:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-09T05:05:55Z"}, "message": "Rollup merge of #100163 - TaKO8Ki:remove-unnecessary-string-search, r=wesleywiser\n\nRefactor: remove an unnecessary string search", "tree": {"sha": "8c6d26fae972e17ea9170c1c9b65bd817b3e42bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c6d26fae972e17ea9170c1c9b65bd817b3e42bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1829bbed030db738ade4ca298d037fe06a4c8be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi8eszCRBK7hj4Ov3rIwAAGBoIAKhxTTW5pyaVrDtUNNXXvfwp\nzwbKBRIVz67h3Mj8Cn13brrVl2WdMKvRNeQ9lfAGLEgfosOOLCymBxOdwrJM+ygc\nWHxpMWtn6dcS4MBaHQwOTwViLLs62Iz+UI3FratUDzE4+EB/AxJQ/usTLcM1f02G\n8MoyJcMQpQXPlXO/MLfzOh1BI+OIUlaaOSI/nypZpobkzvKW+wIW3KNKtGkhxHGT\nfVu0rVi6MptQfTyRldiPbGkKCy00TlSdbUfjYoUuw2NhEfmEnBNbzgPxEBQNbQXy\nomB+UghOcq4+NC8UCH7oaJE2wBd85LNxY99voCu0qLBm1j6IFUyV67erdyVG/1U=\n=J1r+\n-----END PGP SIGNATURE-----\n", "payload": "tree 8c6d26fae972e17ea9170c1c9b65bd817b3e42bf\nparent f03ce30962cf1b2a5158667eabae8bf6e8d1cb03\nparent f6d42aa336d3c399a4f8d7443d25332d1754b5f9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660021555 +0200\ncommitter GitHub <noreply@github.com> 1660021555 +0200\n\nRollup merge of #100163 - TaKO8Ki:remove-unnecessary-string-search, r=wesleywiser\n\nRefactor: remove an unnecessary string search\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1829bbed030db738ade4ca298d037fe06a4c8be", "html_url": "https://github.com/rust-lang/rust/commit/a1829bbed030db738ade4ca298d037fe06a4c8be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1829bbed030db738ade4ca298d037fe06a4c8be/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f03ce30962cf1b2a5158667eabae8bf6e8d1cb03", "url": "https://api.github.com/repos/rust-lang/rust/commits/f03ce30962cf1b2a5158667eabae8bf6e8d1cb03", "html_url": "https://github.com/rust-lang/rust/commit/f03ce30962cf1b2a5158667eabae8bf6e8d1cb03"}, {"sha": "f6d42aa336d3c399a4f8d7443d25332d1754b5f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d42aa336d3c399a4f8d7443d25332d1754b5f9", "html_url": "https://github.com/rust-lang/rust/commit/f6d42aa336d3c399a4f8d7443d25332d1754b5f9"}], "stats": {"total": 62, "additions": 28, "deletions": 34}, "files": [{"sha": "fb78632069e44a584446bc023a2e5d33c841c914", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 22, "deletions": 31, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a1829bbed030db738ade4ca298d037fe06a4c8be/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1829bbed030db738ade4ca298d037fe06a4c8be/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=a1829bbed030db738ade4ca298d037fe06a4c8be", "patch": "@@ -50,7 +50,6 @@ use rustc_span::hygiene::DesugaringKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{BytePos, Pos};\n use rustc_target::spec::abi::Abi::RustIntrinsic;\n use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::{self, ObligationCauseCode};\n@@ -2398,37 +2397,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 expr,\n                 Some(span),\n             );\n+        } else if let ty::RawPtr(ty_and_mut) = expr_t.kind()\n+            && let ty::Adt(adt_def, _) = ty_and_mut.ty.kind()\n+            && let ExprKind::Field(base_expr, _) = expr.kind\n+            && adt_def.variants().len() == 1\n+            && adt_def\n+                .variants()\n+                .iter()\n+                .next()\n+                .unwrap()\n+                .fields\n+                .iter()\n+                .any(|f| f.ident(self.tcx) == field)\n+        {\n+            err.multipart_suggestion(\n+                \"to access the field, dereference first\",\n+                vec![\n+                    (base_expr.span.shrink_to_lo(), \"(*\".to_string()),\n+                    (base_expr.span.shrink_to_hi(), \")\".to_string()),\n+                ],\n+                Applicability::MaybeIncorrect,\n+            );\n         } else {\n-            let mut found = false;\n-\n-            if let ty::RawPtr(ty_and_mut) = expr_t.kind()\n-                && let ty::Adt(adt_def, _) = ty_and_mut.ty.kind()\n-            {\n-                if adt_def.variants().len() == 1\n-                    && adt_def\n-                        .variants()\n-                        .iter()\n-                        .next()\n-                        .unwrap()\n-                        .fields\n-                        .iter()\n-                        .any(|f| f.ident(self.tcx) == field)\n-                {\n-                    if let Some(dot_loc) = expr_snippet.rfind('.') {\n-                        found = true;\n-                        err.span_suggestion(\n-                            expr.span.with_hi(expr.span.lo() + BytePos::from_usize(dot_loc)),\n-                            \"to access the field, dereference first\",\n-                            format!(\"(*{})\", &expr_snippet[0..dot_loc]),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n-                }\n-            }\n-\n-            if !found {\n-                err.help(\"methods are immutable and cannot be assigned to\");\n-            }\n+            err.help(\"methods are immutable and cannot be assigned to\");\n         }\n \n         err.emit();"}, {"sha": "7a0cfb2cf51a727bb39f0df6a92a3cf93e5842ed", "filename": "src/test/ui/typeck/issue-91210-ptr-method.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a1829bbed030db738ade4ca298d037fe06a4c8be/src%2Ftest%2Fui%2Ftypeck%2Fissue-91210-ptr-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1829bbed030db738ade4ca298d037fe06a4c8be/src%2Ftest%2Fui%2Ftypeck%2Fissue-91210-ptr-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91210-ptr-method.stderr?ref=a1829bbed030db738ade4ca298d037fe06a4c8be", "patch": "@@ -2,9 +2,12 @@ error[E0615]: attempted to take value of method `read` on type `*mut Foo`\n   --> $DIR/issue-91210-ptr-method.rs:10:7\n    |\n LL |     x.read = 4;\n-   |     - ^^^^ method, not a field\n-   |     |\n-   |     help: to access the field, dereference first: `(*x)`\n+   |       ^^^^ method, not a field\n+   |\n+help: to access the field, dereference first\n+   |\n+LL |     (*x).read = 4;\n+   |     ++ +\n \n error: aborting due to previous error\n "}]}