{"sha": "b6277f8140a496bed371e97ea1e260858e77fb41", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2Mjc3ZjgxNDBhNDk2YmVkMzcxZTk3ZWExZTI2MDg1OGU3N2ZiNDE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-04-22T23:22:36Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-04-29T21:30:53Z"}, "message": "librustc: Implement `reinterpret_cast` in terms of `transmute`.", "tree": {"sha": "c85ae630368d3b5a1d0fb2b55ed585115b735c5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c85ae630368d3b5a1d0fb2b55ed585115b735c5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6277f8140a496bed371e97ea1e260858e77fb41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6277f8140a496bed371e97ea1e260858e77fb41", "html_url": "https://github.com/rust-lang/rust/commit/b6277f8140a496bed371e97ea1e260858e77fb41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6277f8140a496bed371e97ea1e260858e77fb41/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0522a497ccfcc7b124d77121d8f076af7f09b71", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0522a497ccfcc7b124d77121d8f076af7f09b71", "html_url": "https://github.com/rust-lang/rust/commit/b0522a497ccfcc7b124d77121d8f076af7f09b71"}], "stats": {"total": 85, "additions": 84, "deletions": 1}, "files": [{"sha": "620f716a63d3d186e3ba6f01997a9ef7ebc42b3c", "filename": "src/libcore/cast.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b6277f8140a496bed371e97ea1e260858e77fb41/src%2Flibcore%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6277f8140a496bed371e97ea1e260858e77fb41/src%2Flibcore%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcast.rs?ref=b6277f8140a496bed371e97ea1e260858e77fb41", "patch": "@@ -10,21 +10,48 @@\n \n //! Unsafe casting functions\n \n+use sys;\n+use unstable;\n+\n pub mod rusti {\n     #[abi = \"rust-intrinsic\"]\n     #[link_name = \"rusti\"]\n     pub extern \"rust-intrinsic\" {\n         fn forget<T>(+x: T);\n+\n+        #[cfg(stage0)]\n         fn reinterpret_cast<T, U>(&&e: T) -> U;\n+\n+        #[cfg(stage1)]\n+        #[cfg(stage2)]\n+        #[cfg(stage3)]\n+        fn transmute<T,U>(e: T) -> U;\n     }\n }\n \n /// Casts the value at `src` to U. The two types must have the same length.\n #[inline(always)]\n+#[cfg(stage0)]\n pub unsafe fn reinterpret_cast<T, U>(src: &T) -> U {\n     rusti::reinterpret_cast(*src)\n }\n \n+#[inline(always)]\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+#[cfg(stage3)]\n+pub unsafe fn reinterpret_cast<T, U>(src: &T) -> U {\n+    let mut dest: U = unstable::intrinsics::init();\n+    {\n+        let dest_ptr: *mut u8 = rusti::transmute(&mut dest);\n+        let src_ptr: *u8 = rusti::transmute(src);\n+        unstable::intrinsics::memmove64(dest_ptr,\n+                                        src_ptr,\n+                                        sys::size_of::<U>() as u64);\n+    }\n+    dest\n+}\n+\n /**\n  * Move a thing into the void\n  *\n@@ -53,12 +80,21 @@ pub unsafe fn bump_box_refcount<T>(t: @T) { forget(t); }\n  *     assert!(transmute(\"L\") == ~[76u8, 0u8]);\n  */\n #[inline(always)]\n+#[cfg(stage0)]\n pub unsafe fn transmute<L, G>(thing: L) -> G {\n     let newthing: G = reinterpret_cast(&thing);\n     forget(thing);\n     newthing\n }\n \n+#[inline(always)]\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+#[cfg(stage3)]\n+pub unsafe fn transmute<L, G>(thing: L) -> G {\n+    rusti::transmute(thing)\n+}\n+\n /// Coerce an immutable reference to be mutable.\n #[inline(always)]\n pub unsafe fn transmute_mut<'a,T>(ptr: &'a T) -> &'a mut T { transmute(ptr) }"}, {"sha": "64a157987bf2d632e33e8fe8e8f1763fb87c9ab3", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b6277f8140a496bed371e97ea1e260858e77fb41/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6277f8140a496bed371e97ea1e260858e77fb41/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=b6277f8140a496bed371e97ea1e260858e77fb41", "patch": "@@ -745,6 +745,52 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n               call_memcpy(bcx, llretptr, llcast, llsize_of(ccx, lltp_ty));\n           }\n         }\n+        ~\"transmute\" => {\n+            let (in_type, out_type) = (substs.tys[0], substs.tys[1]);\n+            let llintype = type_of::type_of(ccx, in_type);\n+            let llouttype = type_of::type_of(ccx, out_type);\n+\n+            let in_type_size = machine::llbitsize_of_real(ccx, llintype);\n+            let out_type_size = machine::llbitsize_of_real(ccx, llouttype);\n+            if in_type_size != out_type_size {\n+                let sp = match *ccx.tcx.items.get(&ref_id.get()) {\n+                    ast_map::node_expr(e) => e.span,\n+                    _ => fail!(~\"transmute has non-expr arg\"),\n+                };\n+                let pluralize = |n| if 1u == n { \"\" } else { \"s\" };\n+                ccx.sess.span_err(sp,\n+                                  fmt!(\"transmute called on types with \\\n+                                        different sizes: %s (%u bit%s) to \\\n+                                        %s (%u bit%s)\",\n+                                       ty_to_str(ccx.tcx, in_type),\n+                                       in_type_size,\n+                                       pluralize(in_type_size),\n+                                       ty_to_str(ccx.tcx, out_type),\n+                                       out_type_size,\n+                                       pluralize(out_type_size)));\n+            }\n+\n+            if !ty::type_is_nil(out_type) {\n+                // NB: Do not use a Load and Store here. This causes massive\n+                // code bloat when `transmute` is used on large structural\n+                // types.\n+                let lldestptr = fcx.llretptr.get();\n+                let lldestptr = PointerCast(bcx, lldestptr, T_ptr(T_i8()));\n+\n+                let llsrcval = get_param(decl, first_real_arg);\n+                let llsrcptr = if ty::type_is_immediate(in_type) {\n+                    let llsrcptr = alloca(bcx, llintype);\n+                    Store(bcx, llsrcval, llsrcptr);\n+                    llsrcptr\n+                } else {\n+                    llsrcval\n+                };\n+                let llsrcptr = PointerCast(bcx, llsrcptr, T_ptr(T_i8()));\n+\n+                let llsize = llsize_of(ccx, llintype);\n+                call_memcpy(bcx, lldestptr, llsrcptr, llsize);\n+            }\n+        }\n         ~\"needs_drop\" => {\n             let tp_ty = substs.tys[0];\n             Store(bcx,"}, {"sha": "36e399cea8069ef1856851590c85ba9d2792e05e", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6277f8140a496bed371e97ea1e260858e77fb41/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6277f8140a496bed371e97ea1e260858e77fb41/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=b6277f8140a496bed371e97ea1e260858e77fb41", "patch": "@@ -123,7 +123,7 @@ pub fn type_uses_for(ccx: @CrateContext, fn_id: def_id, n_tps: uint)\n         if abi.is_intrinsic() {\n             let flags = match *cx.ccx.sess.str_of(i.ident) {\n                 ~\"size_of\"  | ~\"pref_align_of\"    | ~\"min_align_of\" |\n-                ~\"init\"     | ~\"reinterpret_cast\" |\n+                ~\"init\"     | ~\"reinterpret_cast\" | ~\"transmute\"    |\n                 ~\"move_val\" | ~\"move_val_init\" => use_repr,\n \n                 ~\"get_tydesc\" | ~\"needs_drop\" => use_tydesc,"}, {"sha": "9b67f0b3e3f5297e6335e32abb82057de6cc3267", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6277f8140a496bed371e97ea1e260858e77fb41/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6277f8140a496bed371e97ea1e260858e77fb41/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=b6277f8140a496bed371e97ea1e260858e77fb41", "patch": "@@ -3441,6 +3441,7 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n                     ty::mk_nil()),\n       ~\"reinterpret_cast\" => (2u, ~[arg(ast::by_ref, param(ccx, 0u))],\n                               param(ccx, 1u)),\n+      ~\"transmute\" => (2, ~[arg(ast::by_copy, param(ccx, 0))], param(ccx, 1)),\n       ~\"move_val\" | ~\"move_val_init\" => {\n           (1u, ~[arg(ast::by_copy,\n                      ty::mk_mut_rptr(tcx, ty::re_bound(ty::br_anon(0)),"}]}