{"sha": "698e870f75710152309158342fd18461531cc0fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OGU4NzBmNzU3MTAxNTIzMDkxNTgzNDJmZDE4NDYxNTMxY2MwZmI=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-07-08T16:17:02Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-07-09T01:49:52Z"}, "message": "Stop adding unreachable basic blocks to dataflow work queue\n\nAlso adds some debug assertions to prevent API consumers from visiting\nthose basic blocks by accident.", "tree": {"sha": "1f748dbb5792c33c08cae5ca5abaa973216deb39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f748dbb5792c33c08cae5ca5abaa973216deb39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/698e870f75710152309158342fd18461531cc0fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/698e870f75710152309158342fd18461531cc0fb", "html_url": "https://github.com/rust-lang/rust/commit/698e870f75710152309158342fd18461531cc0fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/698e870f75710152309158342fd18461531cc0fb/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efe634f14c20661216c57322b319c1cac1f9704f", "url": "https://api.github.com/repos/rust-lang/rust/commits/efe634f14c20661216c57322b319c1cac1f9704f", "html_url": "https://github.com/rust-lang/rust/commit/efe634f14c20661216c57322b319c1cac1f9704f"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "4f5930dc3f5a209c9e3d6baccef11bdad4fcfcab", "filename": "src/librustc_mir/dataflow/framework/cursor.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/698e870f75710152309158342fd18461531cc0fb/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698e870f75710152309158342fd18461531cc0fb/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fcursor.rs?ref=698e870f75710152309158342fd18461531cc0fb", "patch": "@@ -34,6 +34,9 @@ where\n     ///\n     /// When this flag is set, we need to reset to an entry set before doing a seek.\n     state_needs_reset: bool,\n+\n+    #[cfg(debug_assertions)]\n+    reachable_blocks: BitSet<BasicBlock>,\n }\n \n impl<'mir, 'tcx, A, R> ResultsCursor<'mir, 'tcx, A, R>\n@@ -55,6 +58,9 @@ where\n             state_needs_reset: true,\n             state: BitSet::new_empty(bits_per_block),\n             pos: CursorPosition::block_entry(mir::START_BLOCK),\n+\n+            #[cfg(debug_assertions)]\n+            reachable_blocks: mir::traversal::reachable_as_bitset(body),\n         }\n     }\n \n@@ -85,6 +91,9 @@ where\n     ///\n     /// For backward dataflow analyses, this is the dataflow state after the terminator.\n     pub(super) fn seek_to_block_entry(&mut self, block: BasicBlock) {\n+        #[cfg(debug_assertions)]\n+        assert!(self.reachable_blocks.contains(block));\n+\n         self.state.overwrite(&self.results.borrow().entry_set_for_block(block));\n         self.pos = CursorPosition::block_entry(block);\n         self.state_needs_reset = false;"}, {"sha": "003c40f290b8d02db5cf163d5dd4b1ce7322906c", "filename": "src/librustc_mir/dataflow/framework/engine.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/698e870f75710152309158342fd18461531cc0fb/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698e870f75710152309158342fd18461531cc0fb/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fengine.rs?ref=698e870f75710152309158342fd18461531cc0fb", "patch": "@@ -213,15 +213,6 @@ where\n             }\n         }\n \n-        // Add blocks that are not reachable from START_BLOCK to the work queue. These blocks will\n-        // be processed after the ones added above.\n-        //\n-        // FIXME(ecstaticmorse): Is this actually necessary? In principle, we shouldn't need to\n-        // know the dataflow state in unreachable basic blocks.\n-        for bb in body.basic_blocks().indices() {\n-            dirty_queue.insert(bb);\n-        }\n-\n         let mut state = BitSet::new_empty(bits_per_block);\n         while let Some(bb) = dirty_queue.pop() {\n             let bb_data = &body[bb];"}, {"sha": "257f3cb9a6dd0ddd1026b1041fbe6babc3e13238", "filename": "src/librustc_mir/dataflow/framework/visitor.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/698e870f75710152309158342fd18461531cc0fb/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698e870f75710152309158342fd18461531cc0fb/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fvisitor.rs?ref=698e870f75710152309158342fd18461531cc0fb", "patch": "@@ -16,7 +16,13 @@ pub fn visit_results<F, V>(\n {\n     let mut state = results.new_flow_state(body);\n \n+    #[cfg(debug_assertions)]\n+    let reachable_blocks = mir::traversal::reachable_as_bitset(body);\n+\n     for block in blocks {\n+        #[cfg(debug_assertions)]\n+        assert!(reachable_blocks.contains(block));\n+\n         let block_data = &body[block];\n         V::Direction::visit_results_in_block(&mut state, block, block_data, results, vis);\n     }"}]}