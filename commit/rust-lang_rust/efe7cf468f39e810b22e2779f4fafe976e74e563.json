{"sha": "efe7cf468f39e810b22e2779f4fafe976e74e563", "node_id": "C_kwDOAAsO6NoAKGVmZTdjZjQ2OGYzOWU4MTBiMjJlMjc3OWY0ZmFmZTk3NmU3NGU1NjM", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-02-10T02:04:48Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-04-16T03:50:58Z"}, "message": "Remove WorkerLocal from AttrIdGenerator", "tree": {"sha": "76b5fb1342fd3949c568e1a23965f9ad0b761cbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76b5fb1342fd3949c568e1a23965f9ad0b761cbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efe7cf468f39e810b22e2779f4fafe976e74e563", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efe7cf468f39e810b22e2779f4fafe976e74e563", "html_url": "https://github.com/rust-lang/rust/commit/efe7cf468f39e810b22e2779f4fafe976e74e563", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efe7cf468f39e810b22e2779f4fafe976e74e563/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64474a40b0273557dbea58ca29af9245cbb4ad87", "url": "https://api.github.com/repos/rust-lang/rust/commits/64474a40b0273557dbea58ca29af9245cbb4ad87", "html_url": "https://github.com/rust-lang/rust/commit/64474a40b0273557dbea58ca29af9245cbb4ad87"}], "stats": {"total": 55, "additions": 4, "deletions": 51}, "files": [{"sha": "e6c4db9e2ae5c1bb0623d0bc4a57e0c0eaeae9f9", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 4, "deletions": 32, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/efe7cf468f39e810b22e2779f4fafe976e74e563/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efe7cf468f39e810b22e2779f4fafe976e74e563/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=efe7cf468f39e810b22e2779f4fafe976e74e563", "patch": "@@ -10,15 +10,10 @@ use crate::tokenstream::{DelimSpan, Spacing, TokenTree};\n use crate::tokenstream::{LazyAttrTokenStream, TokenStream};\n use crate::util::comments;\n use crate::util::literal::escape_string_symbol;\n-use rustc_data_structures::sync::WorkerLocal;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::Span;\n-use std::cell::Cell;\n use std::iter;\n-#[cfg(debug_assertions)]\n-use std::ops::BitXor;\n-#[cfg(debug_assertions)]\n use std::sync::atomic::{AtomicU32, Ordering};\n use thin_vec::{thin_vec, ThinVec};\n \n@@ -40,39 +35,16 @@ impl MarkedAttrs {\n     }\n }\n \n-pub struct AttrIdGenerator(WorkerLocal<Cell<u32>>);\n-\n-#[cfg(debug_assertions)]\n-static MAX_ATTR_ID: AtomicU32 = AtomicU32::new(u32::MAX);\n+pub struct AttrIdGenerator(AtomicU32);\n \n impl AttrIdGenerator {\n     pub fn new() -> Self {\n-        // We use `(index as u32).reverse_bits()` to initialize the\n-        // starting value of AttrId in each worker thread.\n-        // The `index` is the index of the worker thread.\n-        // This ensures that the AttrId generated in each thread is unique.\n-        AttrIdGenerator(WorkerLocal::new(|index| {\n-            let index: u32 = index.try_into().unwrap();\n-\n-            #[cfg(debug_assertions)]\n-            {\n-                let max_id = ((index + 1).next_power_of_two() - 1).bitxor(u32::MAX).reverse_bits();\n-                MAX_ATTR_ID.fetch_min(max_id, Ordering::Release);\n-            }\n-\n-            Cell::new(index.reverse_bits())\n-        }))\n+        AttrIdGenerator(AtomicU32::new(0))\n     }\n \n     pub fn mk_attr_id(&self) -> AttrId {\n-        let id = self.0.get();\n-\n-        // Ensure the assigned attr_id does not overlap the bits\n-        // representing the number of threads.\n-        #[cfg(debug_assertions)]\n-        assert!(id <= MAX_ATTR_ID.load(Ordering::Acquire));\n-\n-        self.0.set(id + 1);\n+        let id = self.0.fetch_add(1, Ordering::Relaxed);\n+        assert!(id != u32::MAX);\n         AttrId::from_u32(id)\n     }\n }"}, {"sha": "be7fa9378ca66262fb20559c24836813b7b0e6f2", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/efe7cf468f39e810b22e2779f4fafe976e74e563/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efe7cf468f39e810b22e2779f4fafe976e74e563/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=efe7cf468f39e810b22e2779f4fafe976e74e563", "patch": "@@ -19,7 +19,6 @@ use rustc_session::Session;\n use rustc_session::{early_error, CompilerIO};\n use rustc_span::source_map::{FileLoader, FileName};\n use rustc_span::symbol::sym;\n-use std::cell::OnceCell;\n use std::path::PathBuf;\n use std::result;\n \n@@ -59,25 +58,9 @@ impl Compiler {\n     }\n }\n \n-fn registry_setup() {\n-    thread_local! {\n-        static ONCE: OnceCell<()> = OnceCell::new();\n-    }\n-\n-    // Create a dummy registry to allow `WorkerLocal` construction.\n-    // We use `OnceCell` so we only register one dummy registry per thread.\n-    ONCE.with(|once| {\n-        once.get_or_init(|| {\n-            rustc_data_structures::sync::Registry::new(1).register();\n-        });\n-    });\n-}\n-\n /// Converts strings provided as `--cfg [cfgspec]` into a `crate_cfg`.\n pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String>)> {\n     rustc_span::create_default_session_if_not_set_then(move |_| {\n-        registry_setup();\n-\n         let cfg = cfgspecs\n             .into_iter()\n             .map(|s| {\n@@ -137,8 +120,6 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String\n /// Converts strings provided as `--check-cfg [specs]` into a `CheckCfg`.\n pub fn parse_check_cfg(specs: Vec<String>) -> CheckCfg {\n     rustc_span::create_default_session_if_not_set_then(move |_| {\n-        registry_setup();\n-\n         let mut cfg = CheckCfg::default();\n \n         'specs: for s in specs {"}]}