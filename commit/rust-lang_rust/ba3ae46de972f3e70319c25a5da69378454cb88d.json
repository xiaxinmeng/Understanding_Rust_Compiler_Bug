{"sha": "ba3ae46de972f3e70319c25a5da69378454cb88d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhM2FlNDZkZTk3MmYzZTcwMzE5YzI1YTVkYTY5Mzc4NDU0Y2I4OGQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-07T12:52:55Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-10T07:35:23Z"}, "message": "trait-object-lifetime-parens: improve recovery.", "tree": {"sha": "195a543e6710fab1c2e3c5e2e8f9a72323b8a82a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/195a543e6710fab1c2e3c5e2e8f9a72323b8a82a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba3ae46de972f3e70319c25a5da69378454cb88d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3ae46de972f3e70319c25a5da69378454cb88d", "html_url": "https://github.com/rust-lang/rust/commit/ba3ae46de972f3e70319c25a5da69378454cb88d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba3ae46de972f3e70319c25a5da69378454cb88d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1822b3dcf9b02904506dd00bc783adbdb92fc72", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1822b3dcf9b02904506dd00bc783adbdb92fc72", "html_url": "https://github.com/rust-lang/rust/commit/d1822b3dcf9b02904506dd00bc783adbdb92fc72"}], "stats": {"total": 73, "additions": 40, "deletions": 33}, "files": [{"sha": "3dd415bf37289bd2683845e7f47dc4d3eee46ad4", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ba3ae46de972f3e70319c25a5da69378454cb88d/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3ae46de972f3e70319c25a5da69378454cb88d/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=ba3ae46de972f3e70319c25a5da69378454cb88d", "patch": "@@ -148,18 +148,14 @@ impl<'a> Parser<'a> {\n             self.parse_impl_ty(&mut impl_dyn_multi)?\n         } else if self.is_explicit_dyn_type() {\n             self.parse_dyn_ty(&mut impl_dyn_multi)?\n-        } else if self.check(&token::Question)\n-            || self.check_lifetime() && self.look_ahead(1, |t| t.is_like_plus())\n-        {\n-            // Bound list (trait object type)\n-            let bounds = self.parse_generic_bounds_common(allow_plus, None)?;\n-            TyKind::TraitObject(bounds, TraitObjectSyntax::None)\n         } else if self.eat_lt() {\n             // Qualified path\n             let (qself, path) = self.parse_qpath(PathStyle::Type)?;\n             TyKind::Path(Some(qself), path)\n         } else if self.check_path() {\n             self.parse_path_start_ty(lo, allow_plus)?\n+        } else if self.can_begin_bound() {\n+            self.parse_bare_trait_object(lo, allow_plus)?\n         } else if self.eat(&token::DotDotDot) {\n             if allow_c_variadic == AllowCVariadic::Yes {\n                 TyKind::CVarArgs\n@@ -218,6 +214,15 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    fn parse_bare_trait_object(&mut self, lo: Span, allow_plus: AllowPlus) -> PResult<'a, TyKind> {\n+        let lt_no_plus = self.check_lifetime() && !self.look_ahead(1, |t| t.is_like_plus());\n+        let bounds = self.parse_generic_bounds_common(allow_plus, None)?;\n+        if lt_no_plus {\n+            self.struct_span_err(lo, \"lifetime in trait object type must be followed by `+`\").emit()\n+        }\n+        Ok(TyKind::TraitObject(bounds, TraitObjectSyntax::None))\n+    }\n+\n     fn parse_remaining_bounds_path(\n         &mut self,\n         generic_params: Vec<GenericParam>,"}, {"sha": "170ac22780b6319d4a1bb9876231af29e8b5ee36", "filename": "src/test/ui/parser/macro/trait-object-macro-matcher.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba3ae46de972f3e70319c25a5da69378454cb88d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3ae46de972f3e70319c25a5da69378454cb88d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs?ref=ba3ae46de972f3e70319c25a5da69378454cb88d", "patch": "@@ -2,9 +2,14 @@\n // `ty` matcher in particular doesn't accept a single lifetime\n \n macro_rules! m {\n-    ($t: ty) => ( let _: $t; )\n+    ($t: ty) => {\n+        let _: $t;\n+    };\n }\n \n fn main() {\n-    m!('static); //~ ERROR expected type, found `'static`\n+    m!('static);\n+    //~^ ERROR lifetime in trait object type must be followed by `+`\n+    //~| ERROR at least one trait is required for an object type\n+    //~| WARN trait objects without an explicit `dyn` are deprecated\n }"}, {"sha": "230733371ddd8a362efd512eb042126d82568a96", "filename": "src/test/ui/parser/macro/trait-object-macro-matcher.stderr", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ba3ae46de972f3e70319c25a5da69378454cb88d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba3ae46de972f3e70319c25a5da69378454cb88d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr?ref=ba3ae46de972f3e70319c25a5da69378454cb88d", "patch": "@@ -1,8 +1,22 @@\n-error: expected type, found `'static`\n-  --> $DIR/trait-object-macro-matcher.rs:9:8\n+error: lifetime in trait object type must be followed by `+`\n+  --> $DIR/trait-object-macro-matcher.rs:11:8\n    |\n LL |     m!('static);\n-   |        ^^^^^^^ expected type\n+   |        ^^^^^^^\n \n-error: aborting due to previous error\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/trait-object-macro-matcher.rs:11:8\n+   |\n+LL |     m!('static);\n+   |        ^^^^^^^ help: use `dyn`: `dyn 'static`\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+\n+error[E0224]: at least one trait is required for an object type\n+  --> $DIR/trait-object-macro-matcher.rs:11:8\n+   |\n+LL |     m!('static);\n+   |        ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "5a5c19f32e8060553581805d79d4e819e94d51d4", "filename": "src/test/ui/parser/trait-object-lifetime-parens.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba3ae46de972f3e70319c25a5da69378454cb88d/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3ae46de972f3e70319c25a5da69378454cb88d/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs?ref=ba3ae46de972f3e70319c25a5da69378454cb88d", "patch": "@@ -6,10 +6,7 @@ fn f<'a, T: Trait + ('a)>() {} //~ ERROR parenthesized lifetime bounds are not s\n \n fn check<'a>() {\n     let _: Box<Trait + ('a)>; //~ ERROR parenthesized lifetime bounds are not supported\n-    let _: Box<('a) + Trait>;\n-    //~^ ERROR expected type, found `'a`\n-    //~| ERROR expected `while`, `for`, `loop` or `{` after a label\n-    //~| ERROR expected expression, found `)`\n+    let _: Box<('a) + Trait>; //~ ERROR lifetime in trait object type must be followed by `+`\n }\n \n fn main() {}"}, {"sha": "1289c248275dc8b39b6b16ea8bee252fc17727eb", "filename": "src/test/ui/parser/trait-object-lifetime-parens.stderr", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ba3ae46de972f3e70319c25a5da69378454cb88d/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba3ae46de972f3e70319c25a5da69378454cb88d/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr?ref=ba3ae46de972f3e70319c25a5da69378454cb88d", "patch": "@@ -10,25 +10,11 @@ error: parenthesized lifetime bounds are not supported\n LL |     let _: Box<Trait + ('a)>;\n    |                        ^^^^ help: remove the parentheses\n \n-error: expected `while`, `for`, `loop` or `{` after a label\n-  --> $DIR/trait-object-lifetime-parens.rs:9:19\n-   |\n-LL |     let _: Box<('a) + Trait>;\n-   |                   ^ expected `while`, `for`, `loop` or `{` after a label\n-\n-error: expected expression, found `)`\n-  --> $DIR/trait-object-lifetime-parens.rs:9:19\n-   |\n-LL |     let _: Box<('a) + Trait>;\n-   |                   ^ expected expression\n-\n-error: expected type, found `'a`\n+error: lifetime in trait object type must be followed by `+`\n   --> $DIR/trait-object-lifetime-parens.rs:9:17\n    |\n LL |     let _: Box<('a) + Trait>;\n-   |         -       ^^ expected type\n-   |         |\n-   |         while parsing the type for `_`\n+   |                 ^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n "}]}