{"sha": "3637760102cbbd7a9c99bde37b64e13b661a06ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2Mzc3NjAxMDJjYmJkN2E5Yzk5YmRlMzdiNjRlMTNiNjYxYTA2ZmY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-09-18T04:28:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-18T04:28:14Z"}, "message": "Merge pull request #1969 from topecongiro/deprecate-binary-search\n\nRemove rewrite_call_with_binary_search()", "tree": {"sha": "be4c673b7d7b955f090e256b3d501ec97d711227", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be4c673b7d7b955f090e256b3d501ec97d711227"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3637760102cbbd7a9c99bde37b64e13b661a06ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3637760102cbbd7a9c99bde37b64e13b661a06ff", "html_url": "https://github.com/rust-lang/rust/commit/3637760102cbbd7a9c99bde37b64e13b661a06ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3637760102cbbd7a9c99bde37b64e13b661a06ff/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d906ea23c7b6c114537794894f6efc5704951337", "url": "https://api.github.com/repos/rust-lang/rust/commits/d906ea23c7b6c114537794894f6efc5704951337", "html_url": "https://github.com/rust-lang/rust/commit/d906ea23c7b6c114537794894f6efc5704951337"}, {"sha": "b02e813db70b180bb26f5c333ae9bb3e0ff233c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b02e813db70b180bb26f5c333ae9bb3e0ff233c5", "html_url": "https://github.com/rust-lang/rust/commit/b02e813db70b180bb26f5c333ae9bb3e0ff233c5"}], "stats": {"total": 99, "additions": 5, "deletions": 94}, "files": [{"sha": "590360f0dbe807493c3662361561b41fd908489e", "filename": "src/expr.rs", "status": "modified", "additions": 5, "deletions": 50, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3637760102cbbd7a9c99bde37b64e13b661a06ff/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3637760102cbbd7a9c99bde37b64e13b661a06ff/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=3637760102cbbd7a9c99bde37b64e13b661a06ff", "patch": "@@ -32,9 +32,9 @@ use patterns::{can_be_overflowed_pat, TuplePatField};\n use rewrite::{Rewrite, RewriteContext};\n use string::{rewrite_string, StringFormat};\n use types::{can_be_overflowed_type, rewrite_path, PathContext};\n-use utils::{binary_search, colon_spaces, contains_skip, extra_offset, first_line_width,\n-            inner_attributes, last_line_extendable, last_line_width, left_most_sub_expr, mk_sp,\n-            outer_attributes, paren_overhead, ptr_vec_to_ref_vec, semicolon_for_stmt, stmt_expr,\n+use utils::{colon_spaces, contains_skip, extra_offset, first_line_width, inner_attributes,\n+            last_line_extendable, last_line_width, left_most_sub_expr, mk_sp, outer_attributes,\n+            paren_overhead, ptr_vec_to_ref_vec, semicolon_for_stmt, stmt_expr,\n             trimmed_last_line_width, wrap_str};\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n@@ -83,13 +83,8 @@ pub fn format_expr(\n         },\n         ast::ExprKind::Call(ref callee, ref args) => {\n             let inner_span = mk_sp(callee.span.hi(), expr.span.hi());\n-            rewrite_call_with_binary_search(\n-                context,\n-                &**callee,\n-                &ptr_vec_to_ref_vec(&args),\n-                inner_span,\n-                shape,\n-            )\n+            let callee_str = try_opt!(callee.rewrite(context, shape));\n+            rewrite_call(context, &callee_str, &args, inner_span, shape)\n         }\n         ast::ExprKind::Paren(ref subexpr) => rewrite_paren(context, subexpr, shape),\n         ast::ExprKind::Binary(ref op, ref lhs, ref rhs) => {\n@@ -2036,46 +2031,6 @@ fn string_requires_rewrite(\n     false\n }\n \n-pub fn rewrite_call_with_binary_search<R>(\n-    context: &RewriteContext,\n-    callee: &R,\n-    args: &[&ast::Expr],\n-    span: Span,\n-    shape: Shape,\n-) -> Option<String>\n-where\n-    R: Rewrite,\n-{\n-    let force_trailing_comma = if context.inside_macro {\n-        span_ends_with_comma(context, span)\n-    } else {\n-        false\n-    };\n-    let closure = |callee_max_width| {\n-        // FIXME using byte lens instead of char lens (and probably all over the\n-        // place too)\n-        let callee_shape = Shape {\n-            width: callee_max_width,\n-            ..shape\n-        };\n-        let callee_str = callee\n-            .rewrite(context, callee_shape)\n-            .ok_or(Ordering::Greater)?;\n-\n-        rewrite_call_inner(\n-            context,\n-            &callee_str,\n-            args,\n-            span,\n-            shape,\n-            context.config.fn_call_width(),\n-            force_trailing_comma,\n-        )\n-    };\n-\n-    binary_search(1, shape.width, closure)\n-}\n-\n pub fn rewrite_call(\n     context: &RewriteContext,\n     callee: &str,"}, {"sha": "3a53d6c48fce72e0d2ec891d763470de33c60f6c", "filename": "src/utils.rs", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3637760102cbbd7a9c99bde37b64e13b661a06ff/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3637760102cbbd7a9c99bde37b64e13b661a06ff/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=3637760102cbbd7a9c99bde37b64e13b661a06ff", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::borrow::Cow;\n-use std::cmp::Ordering;\n \n use syntax::{abi, ptr};\n use syntax::ast::{self, Attribute, MetaItem, MetaItemKind, NestedMetaItem, NestedMetaItemKind,\n@@ -439,33 +438,6 @@ impl Rewrite for String {\n     }\n }\n \n-// Binary search in integer range. Returns the first Ok value returned by the\n-// callback.\n-// The callback takes an integer and returns either an Ok, or an Err indicating\n-// whether the `guess' was too high (Ordering::Less), or too low.\n-// This function is guaranteed to try to the hi value first.\n-pub fn binary_search<C, T>(mut lo: usize, mut hi: usize, callback: C) -> Option<T>\n-where\n-    C: Fn(usize) -> Result<T, Ordering>,\n-{\n-    let mut middle = hi;\n-\n-    while lo <= hi {\n-        match callback(middle) {\n-            Ok(val) => return Some(val),\n-            Err(Ordering::Less) => {\n-                hi = middle - 1;\n-            }\n-            Err(..) => {\n-                lo = middle + 1;\n-            }\n-        }\n-        middle = (hi + lo) / 2;\n-    }\n-\n-    None\n-}\n-\n #[inline]\n pub fn colon_spaces(before: bool, after: bool) -> &'static str {\n     match (before, after) {\n@@ -485,22 +457,6 @@ pub fn paren_overhead(context: &RewriteContext) -> usize {\n     }\n }\n \n-#[test]\n-fn bin_search_test() {\n-    let closure = |i| match i {\n-        4 => Ok(()),\n-        j if j > 4 => Err(Ordering::Less),\n-        j if j < 4 => Err(Ordering::Greater),\n-        _ => unreachable!(),\n-    };\n-\n-    assert_eq!(Some(()), binary_search(1, 10, &closure));\n-    assert_eq!(None, binary_search(1, 3, &closure));\n-    assert_eq!(Some(()), binary_search(0, 44, &closure));\n-    assert_eq!(Some(()), binary_search(4, 125, &closure));\n-    assert_eq!(None, binary_search(6, 100, &closure));\n-}\n-\n pub fn left_most_sub_expr(e: &ast::Expr) -> &ast::Expr {\n     match e.node {\n         ast::ExprKind::InPlace(ref e, _) |"}]}