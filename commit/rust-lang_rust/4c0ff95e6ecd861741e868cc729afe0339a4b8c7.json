{"sha": "4c0ff95e6ecd861741e868cc729afe0339a4b8c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMGZmOTVlNmVjZDg2MTc0MWU4NjhjYzcyOWFmZTAzMzlhNGI4Yzc=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2017-12-21T09:40:54Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-01-27T17:42:54Z"}, "message": "Be more explicit about how and why we need fallback in targets of casts", "tree": {"sha": "e275efc15f8d537bbf20f90a914f39804d07b9ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e275efc15f8d537bbf20f90a914f39804d07b9ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c0ff95e6ecd861741e868cc729afe0339a4b8c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0ff95e6ecd861741e868cc729afe0339a4b8c7", "html_url": "https://github.com/rust-lang/rust/commit/4c0ff95e6ecd861741e868cc729afe0339a4b8c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c0ff95e6ecd861741e868cc729afe0339a4b8c7/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02084f3304acfa68e79d213a5ebd1c3478680741", "url": "https://api.github.com/repos/rust-lang/rust/commits/02084f3304acfa68e79d213a5ebd1c3478680741", "html_url": "https://github.com/rust-lang/rust/commit/02084f3304acfa68e79d213a5ebd1c3478680741"}], "stats": {"total": 55, "additions": 34, "deletions": 21}, "files": [{"sha": "8dde3d7ab98ac49dad1572ca90f49ad52570bc8d", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4c0ff95e6ecd861741e868cc729afe0339a4b8c7/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0ff95e6ecd861741e868cc729afe0339a4b8c7/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=4c0ff95e6ecd861741e868cc729afe0339a4b8c7", "patch": "@@ -38,7 +38,7 @@\n //! expression, `e as U2` is not necessarily so (in fact it will only be valid if\n //! `U1` coerces to `U2`).\n \n-use super::{Diverges, FnCtxt};\n+use super::{Diverges, Fallback, FnCtxt};\n \n use errors::DiagnosticBuilder;\n use hir::def_id::DefId;\n@@ -392,7 +392,13 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n     }\n \n     pub fn check(mut self, fcx: &FnCtxt<'a, 'gcx, 'tcx>) {\n-        self.expr_ty = fcx.resolved_type(self.span, self.expr_ty);\n+        self.expr_ty = fcx.structurally_resolved_type(self.span, self.expr_ty);\n+        // For backwards compatibility we apply numeric fallback here. This means that in:\n+        // `let x = 100; x as u8;`, we infer `x` to `i32` rather than `u8`.\n+        if self.expr_ty.is_ty_infer() {\n+            fcx.apply_fallback_if_possible(self.expr_ty, Fallback::Numeric);\n+            self.expr_ty = fcx.structurally_resolved_type(self.span, self.expr_ty);\n+        }\n         self.cast_ty = fcx.structurally_resolved_type(self.span, self.cast_ty);\n \n         debug!(\"check_cast({}, {:?} as {:?})\","}, {"sha": "e97de581173d5a354849d218416b50b2830ef9f9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4c0ff95e6ecd861741e868cc729afe0339a4b8c7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0ff95e6ecd861741e868cc729afe0339a4b8c7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4c0ff95e6ecd861741e868cc729afe0339a4b8c7", "patch": "@@ -1724,6 +1724,12 @@ enum TupleArgumentsFlag {\n     TupleArguments,\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub enum Fallback {\n+    Full,\n+    Numeric\n+}\n+\n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn new(inh: &'a Inherited<'a, 'gcx, 'tcx>,\n                param_env: ty::ParamEnv<'tcx>,\n@@ -2133,7 +2139,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     // unconstrained floats with f64.\n     // Defaulting inference variables becomes very dubious if we have\n     // encountered type-checking errors. In that case, fallback to TyError.\n-    fn apply_fallback_if_possible(&self, ty: Ty<'tcx>) {\n+    fn apply_fallback_if_possible(&self, ty: Ty<'tcx>, fallback: Fallback) {\n         use rustc::ty::error::UnconstrainedNumeric::Neither;\n         use rustc::ty::error::UnconstrainedNumeric::{UnconstrainedInt, UnconstrainedFloat};\n \n@@ -2142,7 +2148,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             _ if self.is_tainted_by_errors() => self.tcx().types.err,\n             UnconstrainedInt => self.tcx.types.i32,\n             UnconstrainedFloat => self.tcx.types.f64,\n-            Neither if self.type_var_diverges(ty) => self.tcx.mk_diverging_default(),\n+            Neither if self.type_var_diverges(ty) && fallback == Fallback::Full\n+                            => self.tcx.mk_diverging_default(),\n             Neither => return\n         };\n         debug!(\"default_type_parameters: defaulting `{:?}` to `{:?}`\", ty, fallback);\n@@ -2159,7 +2166,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         self.select_obligations_where_possible();\n \n         for ty in &self.unsolved_variables() {\n-            self.apply_fallback_if_possible(ty);\n+            self.apply_fallback_if_possible(ty, Fallback::Full);\n         }\n \n         let mut fulfillment_cx = self.fulfillment_cx.borrow_mut();\n@@ -4937,22 +4944,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    // Same as `structurally_resolved_type` but also resolves numeric vars, with fallback.\n-    pub fn resolved_type(&self, sp: Span, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        let mut ty = self.resolve_type_vars_with_obligations(ty);\n-        if !ty.is_ty_infer() {\n-            return ty;\n-        } else {\n-            self.apply_fallback_if_possible(ty);\n-            ty = self.resolve_type_vars_with_obligations(ty);\n-            if !ty.is_ty_infer() {\n-                ty\n-            } else { // Fallback failed, error.\n-                self.must_be_known_in_context(sp, ty)\n-            }\n-        }\n-    }\n-\n     fn must_be_known_in_context(&self, sp: Span, ty: Ty<'tcx>) -> Ty<'tcx> {\n         if !self.is_tainted_by_errors() {\n             type_error_struct!(self.tcx.sess, sp, ty, E0619,"}, {"sha": "86d6e387b25528bfd18fc275c84326e6bd7549d1", "filename": "src/test/run-pass/cast-does-fallback.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4c0ff95e6ecd861741e868cc729afe0339a4b8c7/src%2Ftest%2Frun-pass%2Fcast-does-fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0ff95e6ecd861741e868cc729afe0339a4b8c7/src%2Ftest%2Frun-pass%2Fcast-does-fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-does-fallback.rs?ref=4c0ff95e6ecd861741e868cc729afe0339a4b8c7", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main() {\n+    let cap = 512 * 512;\n+    cap as u8;\n+    // Assert `cap` did not get inferred to `u8` and overflowed.\n+    assert_ne!(cap, 0);\n+}"}]}