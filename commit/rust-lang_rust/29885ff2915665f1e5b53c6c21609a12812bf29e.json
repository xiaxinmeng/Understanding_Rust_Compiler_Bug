{"sha": "29885ff2915665f1e5b53c6c21609a12812bf29e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ODg1ZmYyOTE1NjY1ZjFlNWI1M2M2YzIxNjA5YTEyODEyYmYyOWU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-03-29T22:57:03Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-03-30T10:24:41Z"}, "message": "Fix infinite recursion", "tree": {"sha": "088820bcdebe393ac1e0f36051abae87dc3c0305", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/088820bcdebe393ac1e0f36051abae87dc3c0305"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29885ff2915665f1e5b53c6c21609a12812bf29e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29885ff2915665f1e5b53c6c21609a12812bf29e", "html_url": "https://github.com/rust-lang/rust/commit/29885ff2915665f1e5b53c6c21609a12812bf29e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29885ff2915665f1e5b53c6c21609a12812bf29e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2002b4b39a16760f37107cf02d7a91ff316d3073", "url": "https://api.github.com/repos/rust-lang/rust/commits/2002b4b39a16760f37107cf02d7a91ff316d3073", "html_url": "https://github.com/rust-lang/rust/commit/2002b4b39a16760f37107cf02d7a91ff316d3073"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "7a2b5ceb7b4e86543dd23a6c1d51b155c92fbfa4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/29885ff2915665f1e5b53c6c21609a12812bf29e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29885ff2915665f1e5b53c6c21609a12812bf29e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=29885ff2915665f1e5b53c6c21609a12812bf29e", "patch": "@@ -1766,9 +1766,13 @@ fn get_real_types(\n     generics: &Generics,\n     arg: &Type,\n     cx: &DocContext<'_>,\n+    recurse: i32,\n ) -> FxHashSet<Type> {\n     let arg_s = arg.to_string();\n     let mut res = FxHashSet::default();\n+    if recurse >= 10 { // FIXME: remove this whole recurse thing when the recursion bug is fixed\n+        return res;\n+    }\n     if arg.is_full_generic() {\n         if let Some(where_pred) = generics.where_predicates.iter().find(|g| {\n             match g {\n@@ -1785,7 +1789,7 @@ fn get_real_types(\n                                 continue\n                             }\n                             if let Some(ty) = x.get_type(cx) {\n-                                let adds = get_real_types(generics, &ty, cx);\n+                                let adds = get_real_types(generics, &ty, cx, recurse + 1);\n                                 if !adds.is_empty() {\n                                     res.extend(adds);\n                                 } else if !ty.is_full_generic() {\n@@ -1803,7 +1807,7 @@ fn get_real_types(\n         }) {\n             for bound in bound.get_bounds().unwrap_or_else(|| &[]) {\n                 if let Some(ty) = bound.get_trait_type() {\n-                    let adds = get_real_types(generics, &ty, cx);\n+                    let adds = get_real_types(generics, &ty, cx, recurse + 1);\n                     if !adds.is_empty() {\n                         res.extend(adds);\n                     } else if !ty.is_full_generic() {\n@@ -1817,7 +1821,7 @@ fn get_real_types(\n         if let Some(gens) = arg.generics() {\n             for gen in gens.iter() {\n                 if gen.is_full_generic() {\n-                    let adds = get_real_types(generics, gen, cx);\n+                    let adds = get_real_types(generics, gen, cx, recurse + 1);\n                     if !adds.is_empty() {\n                         res.extend(adds);\n                     }\n@@ -1844,7 +1848,7 @@ pub fn get_all_types(\n         if arg.type_.is_self_type() {\n             continue;\n         }\n-        let args = get_real_types(generics, &arg.type_, cx);\n+        let args = get_real_types(generics, &arg.type_, cx, 0);\n         if !args.is_empty() {\n             all_types.extend(args);\n         } else {\n@@ -1854,7 +1858,7 @@ pub fn get_all_types(\n \n     let ret_types = match decl.output {\n         FunctionRetTy::Return(ref return_type) => {\n-            let mut ret = get_real_types(generics, &return_type, cx);\n+            let mut ret = get_real_types(generics, &return_type, cx, 0);\n             if ret.is_empty() {\n                 ret.insert(return_type.clone());\n             }"}]}