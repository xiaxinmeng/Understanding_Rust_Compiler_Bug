{"sha": "a5cd4b56076b32646b5aad123c0bfa1e9480ea42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1Y2Q0YjU2MDc2YjMyNjQ2YjVhYWQxMjNjMGJmYTFlOTQ4MGVhNDI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-07T08:55:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-07T08:55:44Z"}, "message": "Rollup merge of #53107 - RalfJung:static-mutex, r=alexcrichton\n\nRemove references to `StaticMutex` which got removed a while ago\n\n`StaticMutex` got removed two years ago with https://github.com/rust-lang/rust/pull/34705, but still got referenced in some comments and even an error explanation.", "tree": {"sha": "a3eb2b7e543435f02fd1facfa7a5f52f66bfb388", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3eb2b7e543435f02fd1facfa7a5f52f66bfb388"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5cd4b56076b32646b5aad123c0bfa1e9480ea42", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbaV6QCRBK7hj4Ov3rIwAAdHIIAJHeJWhitieR4SdUSaSLXLEd\n/hq2ODg+iPKOBicO4PlEzvGFglW0O1b7/pjfh9B4T/h6/R/YeywrRPjAi4b4HCDn\n76l8eP9ze8eTa73v0clcLhjCNdIi9zhFsEd5Qg/cXNjVwPwka/YBSRs/O1V1FPnm\nSsgzx4AIT3xU/CF5bcURzgUk22rWy16t/Wwos0BPChRVJd3gPzMbl0RWf5+JjmJC\ngLZmGexzucOUzTy8Bqj2KqRsMfQxic0maT0ZTPSGRYLEZlToXIFKvkuPVr8ndl+i\n6EO7OQp8ndLcPPOd+pxd1PrbPCoEpJh0MEY969P1RckP94luxicF+zaA5mJd8Yo=\n=M8vj\n-----END PGP SIGNATURE-----\n", "payload": "tree a3eb2b7e543435f02fd1facfa7a5f52f66bfb388\nparent c1220610efc3e8663b16709a89cfd75a05510a20\nparent a92b5cc916a42c6f3425347281bb656d071c26d5\nauthor kennytm <kennytm@gmail.com> 1533632144 +0800\ncommitter GitHub <noreply@github.com> 1533632144 +0800\n\nRollup merge of #53107 - RalfJung:static-mutex, r=alexcrichton\n\nRemove references to `StaticMutex` which got removed a while ago\n\n`StaticMutex` got removed two years ago with https://github.com/rust-lang/rust/pull/34705, but still got referenced in some comments and even an error explanation.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5cd4b56076b32646b5aad123c0bfa1e9480ea42", "html_url": "https://github.com/rust-lang/rust/commit/a5cd4b56076b32646b5aad123c0bfa1e9480ea42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5cd4b56076b32646b5aad123c0bfa1e9480ea42/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1220610efc3e8663b16709a89cfd75a05510a20", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1220610efc3e8663b16709a89cfd75a05510a20", "html_url": "https://github.com/rust-lang/rust/commit/c1220610efc3e8663b16709a89cfd75a05510a20"}, {"sha": "a92b5cc916a42c6f3425347281bb656d071c26d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a92b5cc916a42c6f3425347281bb656d071c26d5", "html_url": "https://github.com/rust-lang/rust/commit/a92b5cc916a42c6f3425347281bb656d071c26d5"}], "stats": {"total": 17, "additions": 5, "deletions": 12}, "files": [{"sha": "714218a04178ed26059396cc5b6fc0908ba48c3f", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd4b56076b32646b5aad123c0bfa1e9480ea42/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd4b56076b32646b5aad123c0bfa1e9480ea42/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=a5cd4b56076b32646b5aad123c0bfa1e9480ea42", "patch": "@@ -1281,9 +1281,7 @@ const F: &'static C = &D; // error\n ```\n \n This is because cell types do operations that are not thread-safe. Due to this,\n-they don't implement Sync and thus can't be placed in statics. In this\n-case, `StaticMutex` would work just fine, but it isn't stable yet:\n-https://doc.rust-lang.org/nightly/std/sync/struct.StaticMutex.html\n+they don't implement Sync and thus can't be placed in statics.\n \n However, if you still wish to use these types, you can achieve this by an unsafe\n wrapper:"}, {"sha": "f6cb8beae84158e6fe6715676c16d60d420b2794", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd4b56076b32646b5aad123c0bfa1e9480ea42/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd4b56076b32646b5aad123c0bfa1e9480ea42/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=a5cd4b56076b32646b5aad123c0bfa1e9480ea42", "patch": "@@ -31,12 +31,10 @@\n // initialization closure panics, the Once enters a \"poisoned\" state which means\n // that all future calls will immediately panic as well.\n //\n-// So to implement this, one might first reach for a `StaticMutex`, but those\n-// unfortunately need to be deallocated (e.g. call `destroy()`) to free memory\n-// on all OSes (some of the BSDs allocate memory for mutexes). It also gets a\n-// lot harder with poisoning to figure out when the mutex needs to be\n-// deallocated because it's not after the closure finishes, but after the first\n-// successful closure finishes.\n+// So to implement this, one might first reach for a `Mutex`, but those cannot\n+// be put into a `static`. It also gets a lot harder with poisoning to figure\n+// out when the mutex needs to be deallocated because it's not after the closure\n+// finishes, but after the first successful closure finishes.\n //\n // All in all, this is instead implemented with atomics and lock-free\n // operations! Whee! Each `Once` has one word of atomic state, and this state is"}, {"sha": "60b03cdbeb0e9923b8c6b640b386090d126f2dcf", "filename": "src/libstd/sys/unix/mutex.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5cd4b56076b32646b5aad123c0bfa1e9480ea42/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cd4b56076b32646b5aad123c0bfa1e9480ea42/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs?ref=a5cd4b56076b32646b5aad123c0bfa1e9480ea42", "patch": "@@ -49,9 +49,6 @@ impl Mutex {\n         // references, we instead create the mutex with type\n         // PTHREAD_MUTEX_NORMAL which is guaranteed to deadlock if we try to\n         // re-lock it from the same thread, thus avoiding undefined behavior.\n-        //\n-        // We can't do anything for StaticMutex, but that type is deprecated\n-        // anyways.\n         let mut attr: libc::pthread_mutexattr_t = mem::uninitialized();\n         let r = libc::pthread_mutexattr_init(&mut attr);\n         debug_assert_eq!(r, 0);"}]}