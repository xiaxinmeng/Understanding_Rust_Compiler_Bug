{"sha": "27b1b04065edbb2c33f3790defc9f93fb4cefd02", "node_id": "C_kwDOAAsO6NoAKDI3YjFiMDQwNjVlZGJiMmMzM2YzNzkwZGVmYzlmOTNmYjRjZWZkMDI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-19T15:55:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-19T15:55:18Z"}, "message": "Rollup merge of #101389 - lukaslueg:rcgetmutdocs, r=m-ou-se\n\nTone down explanation on RefCell::get_mut\n\nThe language around `RefCell::get_mut` is remarkably sketchy and especially to the novice seems to quite strongly discourage using the method (\"be cautious\", \"Also, please be aware\", \"special circumstances\", \"usually not what you want\"). It was added six years ago in #40634 due to confusion about when to use `get_mut` and `borrow_mut`.\n\nWhile its signature limits the use-cases for `get_mut`, there is no chance for a safety footgun, and readers can be made aware of `borrow_mut` more softly. I've also just sent a [PR](https://github.com/rust-lang/rust-clippy/issues/9044) to lint situations where `get_mut` could be used to improve ergonomics and performance.\n\nSo this PR tones down the language around `get_mut` and also brings it more in line with [`std::sync::Mutex::get_mut()`](https://doc.rust-lang.org/stable/std/sync/struct.Mutex.html#method.get_mut).", "tree": {"sha": "0d1612b0cc8154509b10cedd55ca44c36670201b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d1612b0cc8154509b10cedd55ca44c36670201b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27b1b04065edbb2c33f3790defc9f93fb4cefd02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjKJDmCRBK7hj4Ov3rIwAA1aUIAAAsk5enDBjC0sVfaBaECOpU\nkTATTI/u9ExHOAQLN88uzRHVtd7OC3X3RX7sITPIloLBPNBJ0nSPFRUIY+2uEp8r\n/dRbW1n2eQsi5n8ZZCV5Kb3f8MrM/ApWd4NIK/T70BcNjFYCr5uOl/ZktGpxQX5B\n1GMoqm7uTp5WhUnbIquoQPfzfwPC2qfE8rXkUwLdrs3jkGefoyKN36lXJtbA3CdK\nF7oqXn3brezwwY1pJOtxk6CILiA2FLoNgtrw7evKxkMhfur2sxR3cJnTs2ZJZcX6\nvzLjAQlqjaFajha3lkAIWCsCA6zy+gTwFB2mys2UNQdFuF506oMWAuaTX4doj2g=\n=Lo5I\n-----END PGP SIGNATURE-----\n", "payload": "tree 0d1612b0cc8154509b10cedd55ca44c36670201b\nparent 11bb80a92b4f46fa7dfa9148d0bdfc185a7621bd\nparent 2c664bcbfbd31882a4b2a32f8058cc25e378186c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1663602918 +0200\ncommitter GitHub <noreply@github.com> 1663602918 +0200\n\nRollup merge of #101389 - lukaslueg:rcgetmutdocs, r=m-ou-se\n\nTone down explanation on RefCell::get_mut\n\nThe language around `RefCell::get_mut` is remarkably sketchy and especially to the novice seems to quite strongly discourage using the method (\"be cautious\", \"Also, please be aware\", \"special circumstances\", \"usually not what you want\"). It was added six years ago in #40634 due to confusion about when to use `get_mut` and `borrow_mut`.\n\nWhile its signature limits the use-cases for `get_mut`, there is no chance for a safety footgun, and readers can be made aware of `borrow_mut` more softly. I've also just sent a [PR](https://github.com/rust-lang/rust-clippy/issues/9044) to lint situations where `get_mut` could be used to improve ergonomics and performance.\n\nSo this PR tones down the language around `get_mut` and also brings it more in line with [`std::sync::Mutex::get_mut()`](https://doc.rust-lang.org/stable/std/sync/struct.Mutex.html#method.get_mut).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27b1b04065edbb2c33f3790defc9f93fb4cefd02", "html_url": "https://github.com/rust-lang/rust/commit/27b1b04065edbb2c33f3790defc9f93fb4cefd02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27b1b04065edbb2c33f3790defc9f93fb4cefd02/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11bb80a92b4f46fa7dfa9148d0bdfc185a7621bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/11bb80a92b4f46fa7dfa9148d0bdfc185a7621bd", "html_url": "https://github.com/rust-lang/rust/commit/11bb80a92b4f46fa7dfa9148d0bdfc185a7621bd"}, {"sha": "2c664bcbfbd31882a4b2a32f8058cc25e378186c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c664bcbfbd31882a4b2a32f8058cc25e378186c", "html_url": "https://github.com/rust-lang/rust/commit/2c664bcbfbd31882a4b2a32f8058cc25e378186c"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "1abbb39497a0f6522544855eef73de4122c37cb0", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/27b1b04065edbb2c33f3790defc9f93fb4cefd02/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27b1b04065edbb2c33f3790defc9f93fb4cefd02/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=27b1b04065edbb2c33f3790defc9f93fb4cefd02", "patch": "@@ -1021,15 +1021,18 @@ impl<T: ?Sized> RefCell<T> {\n \n     /// Returns a mutable reference to the underlying data.\n     ///\n-    /// This call borrows `RefCell` mutably (at compile-time) so there is no\n-    /// need for dynamic checks.\n-    ///\n-    /// However be cautious: this method expects `self` to be mutable, which is\n-    /// generally not the case when using a `RefCell`. Take a look at the\n-    /// [`borrow_mut`] method instead if `self` isn't mutable.\n-    ///\n-    /// Also, please be aware that this method is only for special circumstances and is usually\n-    /// not what you want. In case of doubt, use [`borrow_mut`] instead.\n+    /// Since this method borrows `RefCell` mutably, it is statically guaranteed\n+    /// that no borrows to the underlying data exist. The dynamic checks inherent\n+    /// in [`borrow_mut`] and most other methods of `RefCell` are therefor\n+    /// unnecessary.\n+    ///\n+    /// This method can only be called if `RefCell` can be mutably borrowed,\n+    /// which in general is only the case directly after the `RefCell` has\n+    /// been created. In these situations, skipping the aforementioned dynamic\n+    /// borrowing checks may yield better ergonomics and runtime-performance.\n+    ///\n+    /// In most situations where `RefCell` is used, it can't be borrowed mutably.\n+    /// Use [`borrow_mut`] to get mutable access to the underlying data then.\n     ///\n     /// [`borrow_mut`]: RefCell::borrow_mut()\n     ///"}]}