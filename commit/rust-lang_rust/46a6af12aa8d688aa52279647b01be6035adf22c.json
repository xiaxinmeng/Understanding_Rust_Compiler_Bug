{"sha": "46a6af12aa8d688aa52279647b01be6035adf22c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YTZhZjEyYWE4ZDY4OGFhNTIyNzk2NDdiMDFiZTYwMzVhZGYyMmM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-06-12T17:22:08Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-06-12T17:22:08Z"}, "message": "Change `<` interpreted as generic arg start warning\n\n```\nwarning: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n  --> $DIR/issue-22644.rs:16:33\n   |\n16 |     println!(\"{}\", a as usize < b);\n   |                               - ^ interpreted as generic argument\n   |                               |\n   |                               not interpreted as comparison\n   |\nhelp: if you want to compare the casted value then write:\n   |     println!(\"{}\", (a as usize) < b);\n```", "tree": {"sha": "a716568cce8852be2cef736ba860bfb2b2836cc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a716568cce8852be2cef736ba860bfb2b2836cc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46a6af12aa8d688aa52279647b01be6035adf22c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46a6af12aa8d688aa52279647b01be6035adf22c", "html_url": "https://github.com/rust-lang/rust/commit/46a6af12aa8d688aa52279647b01be6035adf22c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46a6af12aa8d688aa52279647b01be6035adf22c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fcfa08e9899044e5cad2ac238206d83568a863f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fcfa08e9899044e5cad2ac238206d83568a863f", "html_url": "https://github.com/rust-lang/rust/commit/5fcfa08e9899044e5cad2ac238206d83568a863f"}], "stats": {"total": 66, "additions": 39, "deletions": 27}, "files": [{"sha": "b3623fbe3ac1a5a67ae1d0f7704aa6c3289c04b2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/46a6af12aa8d688aa52279647b01be6035adf22c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a6af12aa8d688aa52279647b01be6035adf22c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=46a6af12aa8d688aa52279647b01be6035adf22c", "patch": "@@ -42,7 +42,7 @@ use ast::RangeEnd;\n use {ast, attr};\n use codemap::{self, CodeMap, Spanned, respan};\n use syntax_pos::{self, Span, BytePos};\n-use errors::{self, DiagnosticBuilder, Level};\n+use errors::{self, DiagnosticBuilder};\n use parse::{self, classify, token};\n use parse::common::SeqSep;\n use parse::lexer::TokenAndSpan;\n@@ -441,7 +441,14 @@ fn dummy_arg(span: Span) -> Arg {\n     Arg { ty: P(ty), pat: pat, id: ast::DUMMY_NODE_ID }\n }\n \n-type RewindPoint = (token::Token, Span, Option<Span>, Span, TokenCursor, Vec<TokenType>);\n+struct RewindPoint {\n+    token: token::Token,\n+    span: Span,\n+    meta_var_span: Option<Span>,\n+    prev_span: Span,\n+    token_cursor: TokenCursor,\n+    expected_tokens: Vec<TokenType>,\n+}\n \n impl<'a> Parser<'a> {\n     pub fn new(sess: &'a ParseSess,\n@@ -2835,11 +2842,13 @@ impl<'a> Parser<'a> {\n                         // Rewind to before attempting to parse the type with generics, to get\n                         // arround #22644.\n                         let rp_err = self.get_rewind_point();\n+                        let sp = rp_err.span.clone();\n                         self.rewind(rp);\n                         let lo = self.span;\n                         let path = match self.parse_path_without_generics(PathStyle::Type) {\n                             Ok(path) => {\n                                 // Successfully parsed the type leaving a `<` yet to parse\n+                                err.cancel();\n                                 let codemap = self.sess.codemap();\n                                 let suggestion_span = lhs_span.to(self.prev_span);\n                                 let suggestion = match codemap.span_to_snippet(suggestion_span) {\n@@ -2850,15 +2859,17 @@ impl<'a> Parser<'a> {\n                                     Ok(lstring) => format!(\"`{}`\", lstring),\n                                     _ => \"a type\".to_string(),\n                                 };\n-                                err.span_suggestion(suggestion_span,\n+                                let msg = format!(\"`<` is interpreted as a start of generic \\\n+                                                   arguments for {}, not a comparison\",\n+                                                  warn_message);\n+                                let mut warn = self.sess.span_diagnostic.struct_span_warn(sp, &msg);\n+                                warn.span_label(sp, \"interpreted as generic argument\");\n+                                warn.span_label(self.span, \"not interpreted as comparison\");\n+                                warn.span_suggestion(suggestion_span,\n                                                     \"if you want to compare the casted value \\\n                                                      then write:\",\n                                                     suggestion);\n-                                err.level = Level::Warning;\n-                                err.set_message(&format!(\"`<` is interpreted as a start of generic \\\n-                                                          arguments for {}, not a comparison\",\n-                                                          warn_message));\n-                                err.emit();\n+                                warn.emit();\n                                 path\n                             }\n                             Err(mut path_err) => {\n@@ -6255,23 +6266,22 @@ impl<'a> Parser<'a> {\n     }\n \n     fn get_rewind_point(&mut self) -> RewindPoint {\n-        (\n-            self.token.clone(),\n-            self.span,\n-            self.meta_var_span,\n-            self.prev_span,\n-            self.token_cursor.clone(),\n-            self.expected_tokens.clone(),\n-        )\n+        RewindPoint {\n+            token: self.token.clone(),\n+            span: self.span,\n+            meta_var_span: self.meta_var_span,\n+            prev_span: self.prev_span,\n+            token_cursor: self.token_cursor.clone(),\n+            expected_tokens: self.expected_tokens.clone(),\n+        }\n     }\n \n     fn rewind(&mut self, rp: RewindPoint) {\n-        let (token, span, meta_var_span, prev_span, token_cursor, expected_tokens,) = rp;\n-        self.token = token;\n-        self.span = span;\n-        self.meta_var_span = meta_var_span;\n-        self.prev_span = prev_span;\n-        self.token_cursor = token_cursor;\n-        self.expected_tokens = expected_tokens;\n+        self.token = rp.token;\n+        self.span = rp.span;\n+        self.meta_var_span = rp.meta_var_span;\n+        self.prev_span = rp.prev_span;\n+        self.token_cursor = rp.token_cursor;\n+        self.expected_tokens = rp.expected_tokens;\n     }\n }"}, {"sha": "1e7861755877e868e3d6c2fe247b4a081922a362", "filename": "src/test/ui/issue-22644.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46a6af12aa8d688aa52279647b01be6035adf22c/src%2Ftest%2Fui%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46a6af12aa8d688aa52279647b01be6035adf22c/src%2Ftest%2Fui%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22644.stderr?ref=46a6af12aa8d688aa52279647b01be6035adf22c", "patch": "@@ -2,7 +2,9 @@ warning: `<` is interpreted as a start of generic arguments for `usize`, not a c\n   --> $DIR/issue-22644.rs:16:33\n    |\n 16 |     println!(\"{}\", a as usize < b);\n-   |                                 ^ expected one of `!`, `(`, `+`, `,`, `::`, or `>` here\n+   |                               - ^ interpreted as generic argument\n+   |                               |\n+   |                               not interpreted as comparison\n    |\n help: if you want to compare the casted value then write:\n    |     println!(\"{}\", (a as usize) < b);\n@@ -11,9 +13,9 @@ warning: `<` is interpreted as a start of generic arguments for `usize`, not a c\n   --> $DIR/issue-22644.rs:17:33\n    |\n 17 |     println!(\"{}\", a as usize < 4);\n-   |                                -^ unexpected token\n-   |                                |\n-   |                                expected one of `>`, identifier, lifetime, or type here\n+   |                               - ^ interpreted as generic argument\n+   |                               |\n+   |                               not interpreted as comparison\n    |\n help: if you want to compare the casted value then write:\n    |     println!(\"{}\", (a as usize) < 4);"}]}