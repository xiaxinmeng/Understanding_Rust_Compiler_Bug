{"sha": "5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMjI0YTQ4NGRjNmJhMmE3MGM5Y2QwZDczYTA0ODQ5ZjZkN2FhNjg=", "commit": {"author": {"name": "Valerii Lashmanov", "email": "vflashm@gmail.com", "date": "2020-09-24T04:32:11Z"}, "committer": {"name": "Valerii Lashmanov", "email": "vflashm@gmail.com", "date": "2020-09-26T19:30:05Z"}, "message": "MiniSet/MiniMap moved and renamed into SsoHashSet/SsoHashMap\n\nIt is a more descriptive name and with upcoming changes\nthere will be nothing \"mini\" about them.", "tree": {"sha": "16919ad7dbdbb6ba195ac59da944d37d93bb6c18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16919ad7dbdbb6ba195ac59da944d37d93bb6c18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68", "html_url": "https://github.com/rust-lang/rust/commit/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68/comments", "author": {"login": "VFLashM", "id": 3723853, "node_id": "MDQ6VXNlcjM3MjM4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3723853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VFLashM", "html_url": "https://github.com/VFLashM", "followers_url": "https://api.github.com/users/VFLashM/followers", "following_url": "https://api.github.com/users/VFLashM/following{/other_user}", "gists_url": "https://api.github.com/users/VFLashM/gists{/gist_id}", "starred_url": "https://api.github.com/users/VFLashM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VFLashM/subscriptions", "organizations_url": "https://api.github.com/users/VFLashM/orgs", "repos_url": "https://api.github.com/users/VFLashM/repos", "events_url": "https://api.github.com/users/VFLashM/events{/privacy}", "received_events_url": "https://api.github.com/users/VFLashM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "VFLashM", "id": 3723853, "node_id": "MDQ6VXNlcjM3MjM4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3723853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VFLashM", "html_url": "https://github.com/VFLashM", "followers_url": "https://api.github.com/users/VFLashM/followers", "following_url": "https://api.github.com/users/VFLashM/following{/other_user}", "gists_url": "https://api.github.com/users/VFLashM/gists{/gist_id}", "starred_url": "https://api.github.com/users/VFLashM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VFLashM/subscriptions", "organizations_url": "https://api.github.com/users/VFLashM/orgs", "repos_url": "https://api.github.com/users/VFLashM/repos", "events_url": "https://api.github.com/users/VFLashM/events{/privacy}", "received_events_url": "https://api.github.com/users/VFLashM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f9a8a7f9b9732c55511d2a2a3914e8feafc7c52", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f9a8a7f9b9732c55511d2a2a3914e8feafc7c52", "html_url": "https://github.com/rust-lang/rust/commit/6f9a8a7f9b9732c55511d2a2a3914e8feafc7c52"}], "stats": {"total": 86, "additions": 45, "deletions": 41}, "files": [{"sha": "d0f2a4148d307dbfe3e18f8d4693e594202ea9ae", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68", "patch": "@@ -101,8 +101,7 @@ pub mod vec_linked_list;\n pub mod work_queue;\n pub use atomic_ref::AtomicRef;\n pub mod frozen;\n-pub mod mini_map;\n-pub mod mini_set;\n+pub mod sso;\n pub mod tagged_ptr;\n pub mod temp_dir;\n pub mod unhash;"}, {"sha": "c253e9d66161edd21208094654246fe20df1eff8", "filename": "compiler/rustc_data_structures/src/sso/map.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs?ref=5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68", "patch": "@@ -8,21 +8,21 @@ use std::hash::Hash;\n ///\n /// Stores elements in a small array up to a certain length\n /// and switches to `HashMap` when that length is exceeded.\n-pub enum MiniMap<K, V> {\n+pub enum SsoHashMap<K, V> {\n     Array(ArrayVec<[(K, V); 8]>),\n     Map(FxHashMap<K, V>),\n }\n \n-impl<K: Eq + Hash, V> MiniMap<K, V> {\n-    /// Creates an empty `MiniMap`.\n+impl<K: Eq + Hash, V> SsoHashMap<K, V> {\n+    /// Creates an empty `SsoHashMap`.\n     pub fn new() -> Self {\n-        MiniMap::Array(ArrayVec::new())\n+        SsoHashMap::Array(ArrayVec::new())\n     }\n \n     /// Inserts or updates value in the map.\n     pub fn insert(&mut self, key: K, value: V) {\n         match self {\n-            MiniMap::Array(array) => {\n+            SsoHashMap::Array(array) => {\n                 for pair in array.iter_mut() {\n                     if pair.0 == key {\n                         pair.1 = value;\n@@ -33,10 +33,10 @@ impl<K: Eq + Hash, V> MiniMap<K, V> {\n                     let mut map: FxHashMap<K, V> = array.drain(..).collect();\n                     let (key, value) = error.element();\n                     map.insert(key, value);\n-                    *self = MiniMap::Map(map);\n+                    *self = SsoHashMap::Map(map);\n                 }\n             }\n-            MiniMap::Map(map) => {\n+            SsoHashMap::Map(map) => {\n                 map.insert(key, value);\n             }\n         }\n@@ -45,15 +45,15 @@ impl<K: Eq + Hash, V> MiniMap<K, V> {\n     /// Return value by key if any.\n     pub fn get(&self, key: &K) -> Option<&V> {\n         match self {\n-            MiniMap::Array(array) => {\n+            SsoHashMap::Array(array) => {\n                 for pair in array {\n                     if pair.0 == *key {\n                         return Some(&pair.1);\n                     }\n                 }\n                 return None;\n             }\n-            MiniMap::Map(map) => {\n+            SsoHashMap::Map(map) => {\n                 return map.get(key);\n             }\n         }", "previous_filename": "compiler/rustc_data_structures/src/mini_map.rs"}, {"sha": "ef634b9adcec3fa25150eea8a8a844a6d243ec07", "filename": "compiler/rustc_data_structures/src/sso/mod.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmod.rs?ref=5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68", "patch": "@@ -0,0 +1,5 @@\n+mod map;\n+mod set;\n+\n+pub use map::SsoHashMap;\n+pub use set::SsoHashSet;"}, {"sha": "b403c9dcc332ecd58193b148d14a4511f36a87d8", "filename": "compiler/rustc_data_structures/src/sso/set.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs?ref=5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68", "patch": "@@ -5,15 +5,15 @@ use std::hash::Hash;\n ///\n /// Stores elements in a small array up to a certain length\n /// and switches to `HashSet` when that length is exceeded.\n-pub enum MiniSet<T> {\n+pub enum SsoHashSet<T> {\n     Array(ArrayVec<[T; 8]>),\n     Set(FxHashSet<T>),\n }\n \n-impl<T: Eq + Hash> MiniSet<T> {\n-    /// Creates an empty `MiniSet`.\n+impl<T: Eq + Hash> SsoHashSet<T> {\n+    /// Creates an empty `SsoHashSet`.\n     pub fn new() -> Self {\n-        MiniSet::Array(ArrayVec::new())\n+        SsoHashSet::Array(ArrayVec::new())\n     }\n \n     /// Adds a value to the set.\n@@ -23,19 +23,19 @@ impl<T: Eq + Hash> MiniSet<T> {\n     /// If the set did have this value present, false is returned.\n     pub fn insert(&mut self, elem: T) -> bool {\n         match self {\n-            MiniSet::Array(array) => {\n+            SsoHashSet::Array(array) => {\n                 if array.iter().any(|e| *e == elem) {\n                     false\n                 } else {\n                     if let Err(error) = array.try_push(elem) {\n                         let mut set: FxHashSet<T> = array.drain(..).collect();\n                         set.insert(error.element());\n-                        *self = MiniSet::Set(set);\n+                        *self = SsoHashSet::Set(set);\n                     }\n                     true\n                 }\n             }\n-            MiniSet::Set(set) => set.insert(elem),\n+            SsoHashSet::Set(set) => set.insert(elem),\n         }\n     }\n }", "previous_filename": "compiler/rustc_data_structures/src/mini_set.rs"}, {"sha": "6a1715ef8189992e1b6742cda5c1bd72b34fbee4", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68", "patch": "@@ -35,7 +35,7 @@ use super::{InferCtxt, MiscVariable, TypeTrace};\n use crate::traits::{Obligation, PredicateObligations};\n \n use rustc_ast as ast;\n-use rustc_data_structures::mini_map::MiniMap;\n+use rustc_data_structures::sso::SsoHashMap;\n use rustc_hir::def_id::DefId;\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::TypeError;\n@@ -429,7 +429,7 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n             needs_wf: false,\n             root_ty: ty,\n             param_env: self.param_env,\n-            cache: MiniMap::new(),\n+            cache: SsoHashMap::new(),\n         };\n \n         let ty = match generalize.relate(ty, ty) {\n@@ -490,7 +490,7 @@ struct Generalizer<'cx, 'tcx> {\n \n     param_env: ty::ParamEnv<'tcx>,\n \n-    cache: MiniMap<Ty<'tcx>, RelateResult<'tcx, Ty<'tcx>>>,\n+    cache: SsoHashMap<Ty<'tcx>, RelateResult<'tcx, Ty<'tcx>>>,\n }\n \n /// Result from a generalization operation. This includes"}, {"sha": "07924298c241bc67adcbfcf64836c917df347a4f", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68", "patch": "@@ -1,7 +1,7 @@\n use crate::infer::outlives::env::RegionBoundPairs;\n use crate::infer::{GenericKind, VerifyBound};\n use rustc_data_structures::captures::Captures;\n-use rustc_data_structures::mini_set::MiniSet;\n+use rustc_data_structures::sso::SsoHashSet;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -32,7 +32,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n     /// Returns a \"verify bound\" that encodes what we know about\n     /// `generic` and the regions it outlives.\n     pub fn generic_bound(&self, generic: GenericKind<'tcx>) -> VerifyBound<'tcx> {\n-        let mut visited = MiniSet::new();\n+        let mut visited = SsoHashSet::new();\n         match generic {\n             GenericKind::Param(param_ty) => self.param_bound(param_ty),\n             GenericKind::Projection(projection_ty) => {\n@@ -44,7 +44,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n     fn type_bound(\n         &self,\n         ty: Ty<'tcx>,\n-        visited: &mut MiniSet<GenericArg<'tcx>>,\n+        visited: &mut SsoHashSet<GenericArg<'tcx>>,\n     ) -> VerifyBound<'tcx> {\n         match *ty.kind() {\n             ty::Param(p) => self.param_bound(p),\n@@ -148,7 +148,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n     pub fn projection_bound(\n         &self,\n         projection_ty: ty::ProjectionTy<'tcx>,\n-        visited: &mut MiniSet<GenericArg<'tcx>>,\n+        visited: &mut SsoHashSet<GenericArg<'tcx>>,\n     ) -> VerifyBound<'tcx> {\n         debug!(\"projection_bound(projection_ty={:?})\", projection_ty);\n \n@@ -186,7 +186,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n     fn recursive_bound(\n         &self,\n         parent: GenericArg<'tcx>,\n-        visited: &mut MiniSet<GenericArg<'tcx>>,\n+        visited: &mut SsoHashSet<GenericArg<'tcx>>,\n     ) -> VerifyBound<'tcx> {\n         let mut bounds = parent\n             .walk_shallow(visited)"}, {"sha": "4c20141bbe691f4a4267516e6e69fa0bf853bc09", "filename": "compiler/rustc_middle/src/ty/outlives.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68/compiler%2Frustc_middle%2Fsrc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68/compiler%2Frustc_middle%2Fsrc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Foutlives.rs?ref=5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68", "patch": "@@ -4,7 +4,7 @@\n \n use crate::ty::subst::{GenericArg, GenericArgKind};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n-use rustc_data_structures::mini_set::MiniSet;\n+use rustc_data_structures::sso::SsoHashSet;\n use smallvec::SmallVec;\n \n #[derive(Debug)]\n@@ -51,7 +51,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Push onto `out` all the things that must outlive `'a` for the condition\n     /// `ty0: 'a` to hold. Note that `ty0` must be a **fully resolved type**.\n     pub fn push_outlives_components(self, ty0: Ty<'tcx>, out: &mut SmallVec<[Component<'tcx>; 4]>) {\n-        let mut visited = MiniSet::new();\n+        let mut visited = SsoHashSet::new();\n         compute_components(self, ty0, out, &mut visited);\n         debug!(\"components({:?}) = {:?}\", ty0, out);\n     }\n@@ -61,7 +61,7 @@ fn compute_components(\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n     out: &mut SmallVec<[Component<'tcx>; 4]>,\n-    visited: &mut MiniSet<GenericArg<'tcx>>,\n+    visited: &mut SsoHashSet<GenericArg<'tcx>>,\n ) {\n     // Descend through the types, looking for the various \"base\"\n     // components and collecting them into `out`. This is not written\n@@ -142,7 +142,7 @@ fn compute_components(\n                     // OutlivesProjectionComponents.  Continue walking\n                     // through and constrain Pi.\n                     let mut subcomponents = smallvec![];\n-                    let mut subvisited = MiniSet::new();\n+                    let mut subvisited = SsoHashSet::new();\n                     compute_components_recursive(tcx, ty.into(), &mut subcomponents, &mut subvisited);\n                     out.push(Component::EscapingProjection(subcomponents.into_iter().collect()));\n                 }\n@@ -194,7 +194,7 @@ fn compute_components_recursive(\n     tcx: TyCtxt<'tcx>,\n     parent: GenericArg<'tcx>,\n     out: &mut SmallVec<[Component<'tcx>; 4]>,\n-    visited: &mut MiniSet<GenericArg<'tcx>>,\n+    visited: &mut SsoHashSet<GenericArg<'tcx>>,\n ) {\n     for child in parent.walk_shallow(visited) {\n         match child.unpack() {"}, {"sha": "2e00be2395b8caea43f507b10f11a89dd04163e6", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68", "patch": "@@ -2,7 +2,7 @@ use crate::ty::subst::{GenericArg, Subst};\n use crate::ty::{self, DefIdTree, Ty, TyCtxt};\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::mini_set::MiniSet;\n+use rustc_data_structures::sso::SsoHashSet;\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n \n@@ -269,7 +269,7 @@ pub trait Printer<'tcx>: Sized {\n /// deeply nested tuples that have no DefId.\n fn characteristic_def_id_of_type_cached<'a>(\n     ty: Ty<'a>,\n-    visited: &mut MiniSet<Ty<'a>>,\n+    visited: &mut SsoHashSet<Ty<'a>>,\n ) -> Option<DefId> {\n     match *ty.kind() {\n         ty::Adt(adt_def, _) => Some(adt_def.did),\n@@ -316,7 +316,7 @@ fn characteristic_def_id_of_type_cached<'a>(\n     }\n }\n pub fn characteristic_def_id_of_type(ty: Ty<'_>) -> Option<DefId> {\n-    characteristic_def_id_of_type_cached(ty, &mut MiniSet::new())\n+    characteristic_def_id_of_type_cached(ty, &mut SsoHashSet::new())\n }\n \n impl<'tcx, P: Printer<'tcx>> Print<'tcx, P> for ty::RegionKind {"}, {"sha": "357a0dd65c414fda4bf7f000c1daf9236392495c", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68", "patch": "@@ -3,7 +3,7 @@\n \n use crate::ty;\n use crate::ty::subst::{GenericArg, GenericArgKind};\n-use rustc_data_structures::mini_set::MiniSet;\n+use rustc_data_structures::sso::SsoHashSet;\n use smallvec::{self, SmallVec};\n \n // The TypeWalker's stack is hot enough that it's worth going to some effort to\n@@ -13,7 +13,7 @@ type TypeWalkerStack<'tcx> = SmallVec<[GenericArg<'tcx>; 8]>;\n pub struct TypeWalker<'tcx> {\n     stack: TypeWalkerStack<'tcx>,\n     last_subtree: usize,\n-    visited: MiniSet<GenericArg<'tcx>>,\n+    visited: SsoHashSet<GenericArg<'tcx>>,\n }\n \n /// An iterator for walking the type tree.\n@@ -26,7 +26,7 @@ pub struct TypeWalker<'tcx> {\n /// skips any types that are already there.\n impl<'tcx> TypeWalker<'tcx> {\n     pub fn new(root: GenericArg<'tcx>) -> Self {\n-        Self { stack: smallvec![root], last_subtree: 1, visited: MiniSet::new() }\n+        Self { stack: smallvec![root], last_subtree: 1, visited: SsoHashSet::new() }\n     }\n \n     /// Skips the subtree corresponding to the last type\n@@ -87,7 +87,7 @@ impl GenericArg<'tcx> {\n     /// and skips any types that are already there.\n     pub fn walk_shallow(\n         self,\n-        visited: &mut MiniSet<GenericArg<'tcx>>,\n+        visited: &mut SsoHashSet<GenericArg<'tcx>>,\n     ) -> impl Iterator<Item = GenericArg<'tcx>> {\n         let mut stack = SmallVec::new();\n         push_inner(&mut stack, self);"}, {"sha": "bdbf45f78a23b206ec05104c5972d79550143348", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=5c224a484dc6ba2a70c9cd0d73a04849f6d7aa68", "patch": "@@ -7,7 +7,7 @@ use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::{InferCtxt, InferOk};\n use crate::traits::error_reporting::InferCtxtExt;\n use crate::traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n-use rustc_data_structures::mini_map::MiniMap;\n+use rustc_data_structures::sso::SsoHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_infer::traits::Normalized;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n@@ -58,7 +58,7 @@ impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n             param_env: self.param_env,\n             obligations: vec![],\n             error: false,\n-            cache: MiniMap::new(),\n+            cache: SsoHashMap::new(),\n             anon_depth: 0,\n         };\n \n@@ -87,7 +87,7 @@ struct QueryNormalizer<'cx, 'tcx> {\n     cause: &'cx ObligationCause<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     obligations: Vec<PredicateObligation<'tcx>>,\n-    cache: MiniMap<Ty<'tcx>, Ty<'tcx>>,\n+    cache: SsoHashMap<Ty<'tcx>, Ty<'tcx>>,\n     error: bool,\n     anon_depth: usize,\n }"}]}