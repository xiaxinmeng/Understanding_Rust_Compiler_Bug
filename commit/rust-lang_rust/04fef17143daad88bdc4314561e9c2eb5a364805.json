{"sha": "04fef17143daad88bdc4314561e9c2eb5a364805", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZmVmMTcxNDNkYWFkODhiZGM0MzE0NTYxZTljMmViNWEzNjQ4MDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-07T09:30:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-07T09:30:10Z"}, "message": "Auto merge of #49753 - kennytm:rollup, r=kennytm\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #49510 (Fix anchor position on fields)\n - #49652 (Fix anchors issue when everything is collapsed)\n - #49702 (std: Inline some Termination-related methods)\n - #49728 (add emit_debug_gdb_scripts target option and ..)\n - #49731 (add THUMB targets to rustup manifest)\n - #49742 (Using X headings instead of 0.X #49739)\n - #49748 (proc_macro: Improve Debug representations)\n - #49750 (bootstrap: Remove the fast path)\n - #49503 (Inject the `compiler_builtins` crate whenever the `core` crate is injected)\n\nFailed merges:", "tree": {"sha": "b0bb324507ef843489202811b72d01947bd68c78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0bb324507ef843489202811b72d01947bd68c78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04fef17143daad88bdc4314561e9c2eb5a364805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04fef17143daad88bdc4314561e9c2eb5a364805", "html_url": "https://github.com/rust-lang/rust/commit/04fef17143daad88bdc4314561e9c2eb5a364805", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04fef17143daad88bdc4314561e9c2eb5a364805/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0a9bd0f3cfd20694ff62ac8b74747adcdbbfa99", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0a9bd0f3cfd20694ff62ac8b74747adcdbbfa99", "html_url": "https://github.com/rust-lang/rust/commit/e0a9bd0f3cfd20694ff62ac8b74747adcdbbfa99"}, {"sha": "24b3a979860efad7a69a432c0f1bcbf35b8bbab7", "url": "https://api.github.com/repos/rust-lang/rust/commits/24b3a979860efad7a69a432c0f1bcbf35b8bbab7", "html_url": "https://github.com/rust-lang/rust/commit/24b3a979860efad7a69a432c0f1bcbf35b8bbab7"}], "stats": {"total": 268, "additions": 188, "deletions": 80}, "files": [{"sha": "004d1c0ffc933aa56b69d79a12958630ef09784e", "filename": "src/Cargo.lock", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -10,6 +10,7 @@ dependencies = [\n name = \"alloc\"\n version = \"0.0.0\"\n dependencies = [\n+ \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n  \"rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"std_unicode 0.0.0\",\n@@ -23,6 +24,7 @@ dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cc 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n  \"libc 0.0.0\",\n ]\n@@ -32,6 +34,7 @@ name = \"alloc_system\"\n version = \"0.0.0\"\n dependencies = [\n  \"alloc 0.0.0\",\n+ \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n  \"dlmalloc 0.0.0\",\n  \"libc 0.0.0\",\n@@ -541,6 +544,7 @@ name = \"dlmalloc\"\n version = \"0.0.0\"\n dependencies = [\n  \"alloc 0.0.0\",\n+ \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n ]\n \n@@ -976,6 +980,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"libc\"\n version = \"0.0.0\"\n dependencies = [\n+ \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n ]\n \n@@ -1254,6 +1259,7 @@ dependencies = [\n name = \"panic_abort\"\n version = \"0.0.0\"\n dependencies = [\n+ \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n  \"libc 0.0.0\",\n ]\n@@ -1263,6 +1269,7 @@ name = \"panic_unwind\"\n version = \"0.0.0\"\n dependencies = [\n  \"alloc 0.0.0\",\n+ \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n  \"libc 0.0.0\",\n  \"unwind 0.0.0\",\n@@ -1401,6 +1408,7 @@ name = \"profiler_builtins\"\n version = \"0.0.0\"\n dependencies = [\n  \"cc 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n ]\n \n@@ -1797,6 +1805,7 @@ dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n ]\n \n@@ -1942,6 +1951,7 @@ dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n ]\n \n@@ -1991,6 +2001,7 @@ dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n ]\n \n@@ -2130,6 +2141,7 @@ dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n ]\n \n@@ -2343,6 +2355,7 @@ dependencies = [\n name = \"std_unicode\"\n version = \"0.0.0\"\n dependencies = [\n+ \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n ]\n \n@@ -2725,6 +2738,7 @@ dependencies = [\n name = \"unwind\"\n version = \"0.0.0\"\n dependencies = [\n+ \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n  \"libc 0.0.0\",\n ]"}, {"sha": "487440becf630de7471c0228bab09c014e33d2ac", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -770,10 +770,7 @@ def bootstrap(help_triggered):\n     if 'dev' in data:\n         build.set_dev_environment()\n \n-    # No help text depends on submodules. This check saves ~1 minute of git commands, even if\n-    # all the submodules are present and downloaded!\n-    if not help_triggered:\n-        build.update_submodules()\n+    build.update_submodules()\n \n     # Fetch/build the bootstrap\n     build.build = args.build or build.build_triple()"}, {"sha": "2ea889da1fde201aa89bff93f0dd5c9032548759", "filename": "src/doc/index.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -13,65 +13,65 @@ unofficial documentation resources as well!\n Many of these resources take the form of \"books\"; we collectively call these\n \"The Rust Bookshelf.\" Some are large, some are small.\n \n-## Learn Rust\n+# Learn Rust\n \n If you'd like to learn Rust, this is the spot for you! All of these resources\n assume that you have programmed before, but not in any specific language:\n \n-### The Rust Programming Language\n+## The Rust Programming Language\n \n Affectionately nicknamed \"the book,\" [The Rust Programming\n Language](book/index.html) will give you an overview of the language from\n first principles. You'll build a few projects along the way, and by the end,\n you'll have a solid grasp of the language.\n \n-### Rust By Example\n+## Rust By Example\n \n If reading multiple hundreds of pages about a language isn't your style, then\n [Rust By Example](rust-by-example/index.html) has you covered. While the book talks about code with\n a lot of words, RBE shows off a bunch of code, and keeps the talking to a\n minimum. It also includes exercises!\n \n-## Use Rust\n+# Use Rust\n \n Once you've gotten familliar with the language, these resources can help you\n when you're actually using it day-to-day.\n \n-### The Standard Library\n+## The Standard Library\n \n Rust's standard library has [extensive API documentation](std/index.html),\n with explanations of how to use various things, as well as example code for\n accomplishing various tasks.\n \n-### The Cargo Book\n+## The Cargo Book\n \n [The Cargo Book](cargo/index.html) is a guide to Cargo, Rust's build tool and dependency manager.\n \n-### The Rustdoc Book\n+## The Rustdoc Book\n \n [The Rustdoc Book](rustdoc/index.html) describes our documentation tool, `rustdoc`.\n \n-### Extended Error Listing\n+## Extended Error Listing\n \n Many of Rust's errors come with error codes, and you can request extended\n diagnostics from the compiler on those errors. You can also [read them\n here](error-index.html), if you prefer to read them that way.\n \n-## Master Rust\n+# Master Rust\n \n Once you're quite familiar with the language, you may find these advanced\n resources useful.\n \n-### The Reference\n+## The Reference\n \n [The Reference](reference/index.html) is not a formal spec, but is more detailed and\n comprehensive than the book.\n \n-### The Rustonomicon\n+## The Rustonomicon\n \n [The Rustonomicon](nomicon/index.html) is your guidebook to the dark arts of unsafe\n Rust. It's also sometimes called \"the 'nomicon.\"\n \n-### The Unstable Book\n+## The Unstable Book\n \n [The Unstable Book](unstable-book/index.html) has documentation for unstable features."}, {"sha": "2eb8ea1260446a44cfd8fad1f09c91fdfe5ffcec", "filename": "src/liballoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Fliballoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Fliballoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2FCargo.toml?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -10,6 +10,7 @@ path = \"lib.rs\"\n [dependencies]\n core = { path = \"../libcore\" }\n std_unicode = { path = \"../libstd_unicode\" }\n+compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }\n \n [dev-dependencies]\n rand = \"0.4\""}, {"sha": "fd4a45530463df9854455a883061962ba470e8b8", "filename": "src/liballoc_jemalloc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Fliballoc_jemalloc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Fliballoc_jemalloc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2FCargo.toml?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -16,6 +16,7 @@ alloc = { path = \"../liballoc\" }\n alloc_system = { path = \"../liballoc_system\" }\n core = { path = \"../libcore\" }\n libc = { path = \"../rustc/libc_shim\" }\n+compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }\n \n [build-dependencies]\n build_helper = { path = \"../build_helper\" }"}, {"sha": "936e20a32e10e9d064f55f22094052eaafc41455", "filename": "src/liballoc_system/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Fliballoc_system%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Fliballoc_system%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2FCargo.toml?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -13,6 +13,7 @@ doc = false\n alloc = { path = \"../liballoc\" }\n core = { path = \"../libcore\" }\n libc = { path = \"../rustc/libc_shim\" }\n+compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }\n \n # See comments in the source for what this dependency is\n [target.'cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))'.dependencies]"}, {"sha": "633d273b3b93cd49834bd972a5dce5ab106a7ae1", "filename": "src/libpanic_abort/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibpanic_abort%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibpanic_abort%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2FCargo.toml?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -12,3 +12,4 @@ doc = false\n [dependencies]\n core = { path = \"../libcore\" }\n libc = { path = \"../rustc/libc_shim\" }\n+compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }"}, {"sha": "74aaa4d5ae3db6bf606fbcad57a1866324826fba", "filename": "src/libpanic_unwind/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibpanic_unwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibpanic_unwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2FCargo.toml?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -14,3 +14,4 @@ alloc = { path = \"../liballoc\" }\n core = { path = \"../libcore\" }\n libc = { path = \"../rustc/libc_shim\" }\n unwind = { path = \"../libunwind\" }\n+compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }"}, {"sha": "449b8fcfb2d40e02990276fe37d543cd8dfd6f83", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 57, "deletions": 26, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -127,7 +127,8 @@ impl fmt::Display for TokenStream {\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n impl fmt::Debug for TokenStream {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.0.fmt(f)\n+        f.write_str(\"TokenStream \")?;\n+        f.debug_list().entries(self.clone()).finish()\n     }\n }\n \n@@ -222,7 +223,7 @@ pub fn quote_span(span: Span) -> TokenStream {\n \n /// A region of source code, along with macro expansion information.\n #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone)]\n pub struct Span(syntax_pos::Span);\n \n macro_rules! diagnostic_method {\n@@ -334,6 +335,16 @@ impl Span {\n     diagnostic_method!(help, Level::Help);\n }\n \n+#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+impl fmt::Debug for Span {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{:?} bytes({}..{})\",\n+               self.0.ctxt(),\n+               self.0.lo().0,\n+               self.0.hi().0)\n+    }\n+}\n+\n /// A line-column pair representing the start or end of a `Span`.\n #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n@@ -422,7 +433,7 @@ impl PartialEq<FileName> for SourceFile {\n \n /// A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).\n #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n-#[derive(Clone, Debug)]\n+#[derive(Clone)]\n pub enum TokenTree {\n     /// A delimited tokenstream\n     Group(Group),\n@@ -463,6 +474,20 @@ impl TokenTree {\n     }\n }\n \n+#[unstable(feature = \"proc_macro\", issue = \"38356\")]\n+impl fmt::Debug for TokenTree {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        // Each of these has the name in the struct type in the derived debug,\n+        // so don't bother with an extra layer of indirection\n+        match *self {\n+            TokenTree::Group(ref tt) => tt.fmt(f),\n+            TokenTree::Term(ref tt) => tt.fmt(f),\n+            TokenTree::Op(ref tt) => tt.fmt(f),\n+            TokenTree::Literal(ref tt) => tt.fmt(f),\n+        }\n+    }\n+}\n+\n #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n impl From<Group> for TokenTree {\n     fn from(g: Group) -> TokenTree {\n@@ -717,7 +742,8 @@ impl fmt::Display for Term {\n #[derive(Clone, Debug)]\n #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n pub struct Literal {\n-    token: token::Token,\n+    lit: token::Lit,\n+    suffix: Option<ast::Name>,\n     span: Span,\n }\n \n@@ -734,10 +760,9 @@ macro_rules! suffixed_int_literals {\n         /// below.\n         #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n         pub fn $name(n: $kind) -> Literal {\n-            let lit = token::Lit::Integer(Symbol::intern(&n.to_string()));\n-            let ty = Some(Symbol::intern(stringify!($kind)));\n             Literal {\n-                token: token::Literal(lit, ty),\n+                lit: token::Lit::Integer(Symbol::intern(&n.to_string())),\n+                suffix: Some(Symbol::intern(stringify!($kind))),\n                 span: Span::call_site(),\n             }\n         }\n@@ -759,9 +784,9 @@ macro_rules! unsuffixed_int_literals {\n         /// below.\n         #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n         pub fn $name(n: $kind) -> Literal {\n-            let lit = token::Lit::Integer(Symbol::intern(&n.to_string()));\n             Literal {\n-                token: token::Literal(lit, None),\n+                lit: token::Lit::Integer(Symbol::intern(&n.to_string())),\n+                suffix: None,\n                 span: Span::call_site(),\n             }\n         }\n@@ -814,9 +839,9 @@ impl Literal {\n         if !n.is_finite() {\n             panic!(\"Invalid float literal {}\", n);\n         }\n-        let lit = token::Lit::Float(Symbol::intern(&n.to_string()));\n         Literal {\n-            token: token::Literal(lit, None),\n+            lit: token::Lit::Float(Symbol::intern(&n.to_string())),\n+            suffix: None,\n             span: Span::call_site(),\n         }\n     }\n@@ -837,9 +862,9 @@ impl Literal {\n         if !n.is_finite() {\n             panic!(\"Invalid float literal {}\", n);\n         }\n-        let lit = token::Lit::Float(Symbol::intern(&n.to_string()));\n         Literal {\n-            token: token::Literal(lit, Some(Symbol::intern(\"f32\"))),\n+            lit: token::Lit::Float(Symbol::intern(&n.to_string())),\n+            suffix: Some(Symbol::intern(\"f32\")),\n             span: Span::call_site(),\n         }\n     }\n@@ -859,9 +884,9 @@ impl Literal {\n         if !n.is_finite() {\n             panic!(\"Invalid float literal {}\", n);\n         }\n-        let lit = token::Lit::Float(Symbol::intern(&n.to_string()));\n         Literal {\n-            token: token::Literal(lit, None),\n+            lit: token::Lit::Float(Symbol::intern(&n.to_string())),\n+            suffix: None,\n             span: Span::call_site(),\n         }\n     }\n@@ -882,9 +907,9 @@ impl Literal {\n         if !n.is_finite() {\n             panic!(\"Invalid float literal {}\", n);\n         }\n-        let lit = token::Lit::Float(Symbol::intern(&n.to_string()));\n         Literal {\n-            token: token::Literal(lit, Some(Symbol::intern(\"f64\"))),\n+            lit: token::Lit::Float(Symbol::intern(&n.to_string())),\n+            suffix: Some(Symbol::intern(\"f64\")),\n             span: Span::call_site(),\n         }\n     }\n@@ -897,7 +922,8 @@ impl Literal {\n             escaped.extend(ch.escape_debug());\n         }\n         Literal {\n-            token: token::Literal(token::Lit::Str_(Symbol::intern(&escaped)), None),\n+            lit: token::Lit::Str_(Symbol::intern(&escaped)),\n+            suffix: None,\n             span: Span::call_site(),\n         }\n     }\n@@ -908,7 +934,8 @@ impl Literal {\n         let mut escaped = String::new();\n         escaped.extend(ch.escape_unicode());\n         Literal {\n-            token: token::Literal(token::Lit::Char(Symbol::intern(&escaped)), None),\n+            lit: token::Lit::Char(Symbol::intern(&escaped)),\n+            suffix: None,\n             span: Span::call_site(),\n         }\n     }\n@@ -919,7 +946,8 @@ impl Literal {\n         let string = bytes.iter().cloned().flat_map(ascii::escape_default)\n             .map(Into::<char>::into).collect::<String>();\n         Literal {\n-            token: token::Literal(token::Lit::ByteStr(Symbol::intern(&string)), None),\n+            lit: token::Lit::ByteStr(Symbol::intern(&string)),\n+            suffix: None,\n             span: Span::call_site(),\n         }\n     }\n@@ -1055,7 +1083,7 @@ impl TokenTree {\n             Ident(ident, true) => {\n                 tt!(Term::new(&format!(\"r#{}\", ident), Span(span)))\n             }\n-            Literal(..) => tt!(self::Literal { token, span: Span(span) }),\n+            Literal(lit, suffix) => tt!(self::Literal { lit, suffix, span: Span(span) }),\n             DocComment(c) => {\n                 let style = comments::doc_comment_style(&c.as_str());\n                 let stripped = comments::strip_doc_comment_decoration(&c.as_str());\n@@ -1111,33 +1139,36 @@ impl TokenTree {\n                 return TokenTree::Token(tt.span.0, token).into();\n             }\n             self::TokenTree::Literal(self::Literal {\n-                token: Literal(Lit::Integer(ref a), b),\n+                lit: Lit::Integer(ref a),\n+                suffix,\n                 span,\n             })\n                 if a.as_str().starts_with(\"-\") =>\n             {\n                 let minus = BinOp(BinOpToken::Minus);\n                 let integer = Symbol::intern(&a.as_str()[1..]);\n-                let integer = Literal(Lit::Integer(integer), b);\n+                let integer = Literal(Lit::Integer(integer), suffix);\n                 let a = TokenTree::Token(span.0, minus);\n                 let b = TokenTree::Token(span.0, integer);\n                 return vec![a, b].into_iter().collect()\n             }\n             self::TokenTree::Literal(self::Literal {\n-                token: Literal(Lit::Float(ref a), b),\n+                lit: Lit::Float(ref a),\n+                suffix,\n                 span,\n             })\n                 if a.as_str().starts_with(\"-\") =>\n             {\n                 let minus = BinOp(BinOpToken::Minus);\n                 let float = Symbol::intern(&a.as_str()[1..]);\n-                let float = Literal(Lit::Float(float), b);\n+                let float = Literal(Lit::Float(float), suffix);\n                 let a = TokenTree::Token(span.0, minus);\n                 let b = TokenTree::Token(span.0, float);\n                 return vec![a, b].into_iter().collect()\n             }\n             self::TokenTree::Literal(tt) => {\n-                return TokenTree::Token(tt.span.0, tt.token).into()\n+                let token = Literal(tt.lit, tt.suffix);\n+                return TokenTree::Token(tt.span.0, token).into()\n             }\n         };\n "}, {"sha": "a0ec692809499f47152482115a5ea40ccd791fc9", "filename": "src/libproc_macro/quote.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibproc_macro%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibproc_macro%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fquote.rs?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -208,13 +208,15 @@ macro_rules! literals {\n                 match self {\n                     $(LiteralKind::$i => {\n                         Literal {\n-                            token: token::Literal(token::Lit::$i(sym), suffix),\n+                            lit: token::Lit::$i(sym),\n+                            suffix,\n                             span: contents.span,\n                         }\n                     })*\n                     $(LiteralKind::$raw(n) => {\n                         Literal {\n-                            token: token::Literal(token::Lit::$raw(sym, n), suffix),\n+                            lit: token::Lit::$raw(sym, n),\n+                            suffix,\n                             span: contents.span,\n                         }\n                     })*\n@@ -224,16 +226,11 @@ macro_rules! literals {\n \n         impl Literal {\n             fn kind_contents_and_suffix(self) -> (LiteralKind, Term, Option<Term>) {\n-                let (lit, suffix) = match self.token {\n-                    token::Literal(lit, suffix) => (lit, suffix),\n-                    _ => panic!(\"unsupported literal {:?}\", self.token),\n-                };\n-\n-                let (kind, contents) = match lit {\n+                let (kind, contents) = match self.lit {\n                     $(token::Lit::$i(contents) => (LiteralKind::$i, contents),)*\n                     $(token::Lit::$raw(contents, n) => (LiteralKind::$raw(n), contents),)*\n                 };\n-                let suffix = suffix.map(|sym| Term::new(&sym.as_str(), self.span()));\n+                let suffix = self.suffix.map(|sym| Term::new(&sym.as_str(), self.span()));\n                 (kind, Term::new(&contents.as_str(), self.span()), suffix)\n             }\n         }"}, {"sha": "79192fbb6819c4ba09f6822c6bf3515261e31fc3", "filename": "src/libprofiler_builtins/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibprofiler_builtins%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibprofiler_builtins%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2FCargo.toml?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -13,6 +13,7 @@ doc = false\n \n [dependencies]\n core = { path = \"../libcore\" }\n+compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }\n \n [build-dependencies]\n cc = \"1.0.1\""}, {"sha": "34d8b75a5bfb3476a1f587d33ad663f2d8498f37", "filename": "src/librustc_asan/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_asan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_asan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2FCargo.toml?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -17,3 +17,4 @@ cmake = \"0.1.18\"\n alloc = { path = \"../liballoc\" }\n alloc_system = { path = \"../liballoc_system\" }\n core = { path = \"../libcore\" }\n+compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }"}, {"sha": "480de9ff486e5d1e1af6864c3f0a2c0f8d0499bd", "filename": "src/librustc_back/target/apple_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_back%2Ftarget%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_back%2Ftarget%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fapple_base.rs?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -47,6 +47,7 @@ pub fn opts() -> TargetOptions {\n         exe_allocation_crate: super::maybe_jemalloc(),\n         has_elf_tls: version >= (10, 7),\n         abi_return_struct_as_int: true,\n+        emit_debug_gdb_scripts: false,\n         .. Default::default()\n     }\n }"}, {"sha": "592b27ac641b5204d2af6ec4a16cce4d625e938c", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -478,6 +478,9 @@ pub struct TargetOptions {\n \n     /// Whether or not bitcode is embedded in object files\n     pub embed_bitcode: bool,\n+\n+    /// Whether a .debug_gdb_scripts section will be added to the output object file\n+    pub emit_debug_gdb_scripts: bool,\n }\n \n impl Default for TargetOptions {\n@@ -550,6 +553,7 @@ impl Default for TargetOptions {\n             codegen_backend: \"llvm\".to_string(),\n             default_hidden_visibility: false,\n             embed_bitcode: false,\n+            emit_debug_gdb_scripts: true,\n         }\n     }\n }\n@@ -799,6 +803,7 @@ impl Target {\n         key!(codegen_backend);\n         key!(default_hidden_visibility, bool);\n         key!(embed_bitcode, bool);\n+        key!(emit_debug_gdb_scripts, bool);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -1002,6 +1007,7 @@ impl ToJson for Target {\n         target_option_val!(codegen_backend);\n         target_option_val!(default_hidden_visibility);\n         target_option_val!(embed_bitcode);\n+        target_option_val!(emit_debug_gdb_scripts);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}, {"sha": "31df9be0bc3f81e7b92f677a5bffa0e6d53f4538", "filename": "src/librustc_back/target/msp430_none_elf.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_back%2Ftarget%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_back%2Ftarget%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmsp430_none_elf.rs?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -59,6 +59,9 @@ pub fn target() -> TargetResult {\n             // too much overhead for such small target.\n             trap_unreachable: false,\n \n+            // See the thumb_base.rs file for an explanation of this value\n+            emit_debug_gdb_scripts: false,\n+\n             .. Default::default( )\n         }\n     })"}, {"sha": "bb1fbfad2618f17291ce9fe694b86d7faa3b9699", "filename": "src/librustc_back/target/thumb_base.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_back%2Ftarget%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_back%2Ftarget%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumb_base.rs?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -53,6 +53,13 @@ pub fn opts() -> TargetOptions {\n         // costs it involves.\n         relocation_model: \"static\".to_string(),\n         abi_blacklist: super::arm_base::abi_blacklist(),\n+        // When this section is added a volatile load to its start address is also generated. This\n+        // volatile load is a footgun as it can end up loading an invalid memory address, depending\n+        // on how the user set up their linker scripts. This section adds pretty printer for stuff\n+        // like std::Vec, which is not that used in no-std context, so it's best to left it out\n+        // until we figure a way to add the pretty printers without requiring a volatile load cf.\n+        // rust-lang/rust#44993.\n+        emit_debug_gdb_scripts: false,\n         .. Default::default()\n     }\n }"}, {"sha": "971b21e062f69415d858743eff0d3187cb86f993", "filename": "src/librustc_back/target/windows_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -102,6 +102,7 @@ pub fn opts() -> TargetOptions {\n         ],\n         custom_unwind_resume: true,\n         abi_return_struct_as_int: true,\n+        emit_debug_gdb_scripts: false,\n \n         .. Default::default()\n     }"}, {"sha": "06e879bec3492310184cce57472dfef0e0b2e535", "filename": "src/librustc_back/target/windows_msvc_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -34,6 +34,7 @@ pub fn opts() -> TargetOptions {\n         crt_static_allows_dylibs: true,\n         crt_static_respected: true,\n         abi_return_struct_as_int: true,\n+        emit_debug_gdb_scripts: false,\n \n         .. Default::default()\n     }"}, {"sha": "9c19b53742654e4c760056a09d1233d25fad7851", "filename": "src/librustc_lsan/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_lsan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_lsan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2FCargo.toml?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -17,3 +17,4 @@ cmake = \"0.1.18\"\n alloc = { path = \"../liballoc\" }\n alloc_system = { path = \"../liballoc_system\" }\n core = { path = \"../libcore\" }\n+compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }"}, {"sha": "17ec2b96438ad02b97746e66de4a6d5a9c7021ad", "filename": "src/librustc_msan/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_msan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_msan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2FCargo.toml?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -17,3 +17,4 @@ cmake = \"0.1.18\"\n alloc = { path = \"../liballoc\" }\n alloc_system = { path = \"../liballoc_system\" }\n core = { path = \"../libcore\" }\n+compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }"}, {"sha": "0b4858c7ab051085350c48fa95fa01d0e05fd5c3", "filename": "src/librustc_trans/debuginfo/gdb.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_trans%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_trans%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fgdb.rs?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -83,7 +83,6 @@ pub fn needs_gdb_debug_scripts_section(cx: &CodegenCx) -> bool {\n                             \"omit_gdb_pretty_printer_section\");\n \n     !omit_gdb_pretty_printer_section &&\n-    !cx.sess().target.target.options.is_like_osx &&\n-    !cx.sess().target.target.options.is_like_windows &&\n-    cx.sess().opts.debuginfo != NoDebugInfo\n+    cx.sess().opts.debuginfo != NoDebugInfo &&\n+    cx.sess().target.target.options.emit_debug_gdb_scripts\n }"}, {"sha": "8bb67c0bbac5f4e601154bf939c328550d71cba0", "filename": "src/librustc_tsan/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_tsan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustc_tsan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2FCargo.toml?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -17,3 +17,4 @@ cmake = \"0.1.18\"\n alloc = { path = \"../liballoc\" }\n alloc_system = { path = \"../liballoc_system\" }\n core = { path = \"../libcore\" }\n+compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }"}, {"sha": "3a3fa833c238ba569da70ade3fa9444ee0dd9ec0", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -56,6 +56,14 @@\n         };\n     }\n \n+    function getPageId() {\n+        var id = document.location.href.split('#')[1];\n+        if (id) {\n+            return id.split('?')[0].split('&')[0];\n+        }\n+        return null;\n+    }\n+\n     function hasClass(elem, className) {\n         if (elem && className && elem.className) {\n             var elemClass = elem.className;\n@@ -1643,7 +1651,7 @@\n         }\n     }\n \n-    function toggleAllDocs() {\n+    function toggleAllDocs(pageId) {\n         var toggle = document.getElementById(\"toggle-all-docs\");\n         if (hasClass(toggle, \"will-expand\")) {\n             updateLocalStorage(\"rustdoc-collapse\", \"false\");\n@@ -1664,12 +1672,12 @@\n             toggle.title = \"expand all docs\";\n \n             onEach(document.getElementsByClassName(\"collapse-toggle\"), function(e) {\n-                collapseDocs(e, \"hide\");\n+                collapseDocs(e, \"hide\", pageId);\n             });\n         }\n     }\n \n-    function collapseDocs(toggle, mode) {\n+    function collapseDocs(toggle, mode, pageId) {\n         if (!toggle || !toggle.parentNode) {\n             return;\n         }\n@@ -1745,14 +1753,18 @@\n                 }\n             }\n \n-            var relatedDoc = toggle.parentNode;\n+            var parentElem = toggle.parentNode;\n+            var relatedDoc = parentElem;\n             var docblock = relatedDoc.nextElementSibling;\n \n             while (!hasClass(relatedDoc, \"impl-items\")) {\n                 relatedDoc = relatedDoc.nextElementSibling;\n             }\n \n-            if (!relatedDoc && !hasClass(docblock, \"docblock\")) {\n+            if ((!relatedDoc && !hasClass(docblock, \"docblock\")) ||\n+                (pageId && onEach(relatedDoc.childNodes, function(e) {\n+                    return e.id === pageId;\n+                }) === true)) {\n                 return;\n             }\n \n@@ -1782,15 +1794,15 @@\n         }\n     }\n \n-    function autoCollapseAllImpls() {\n+    function autoCollapseAllImpls(pageId) {\n         // Automatically minimize all non-inherent impls\n         onEach(document.getElementsByClassName('impl'), function(n) {\n             // inherent impl ids are like 'impl' or impl-<number>'\n             var inherent = (n.id.match(/^impl(?:-\\d+)?$/) !== null);\n             if (!inherent) {\n                 onEach(n.childNodes, function(m) {\n                     if (hasClass(m, \"collapse-toggle\")) {\n-                        collapseDocs(m, \"hide\");\n+                        collapseDocs(m, \"hide\", pageId);\n                     }\n                 });\n             }\n@@ -1900,7 +1912,7 @@\n         }\n     })\n \n-    autoCollapseAllImpls();\n+    autoCollapseAllImpls(getPageId());\n \n     function createToggleWrapper() {\n         var span = document.createElement('span');\n@@ -2030,7 +2042,7 @@\n     };\n \n     if (getCurrentValue(\"rustdoc-collapse\") === \"true\") {\n-        toggleAllDocs();\n+        toggleAllDocs(getPageId());\n     }\n }());\n "}, {"sha": "f4918033c8e882d8838367d2ce247fe77e6166ed", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -533,6 +533,9 @@ a {\n \tleft: -5px;\n }\n .small-section-header > .anchor {\n+\tleft: -20px;\n+}\n+.small-section-header > .anchor:not(.field) {\n \tleft: -28px;\n }\n .anchor:before {"}, {"sha": "4ef8349fa9ce911a8df2858a74f5446c0fa248ad", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -19,10 +19,11 @@ function onEach(arr, func) {\n     if (arr && arr.length > 0 && func) {\n         for (var i = 0; i < arr.length; i++) {\n             if (func(arr[i]) === true) {\n-                break;\n+                return true;\n             }\n         }\n     }\n+    return false;\n }\n \n function updateLocalStorage(name, value) {"}, {"sha": "f9041ac8546b9db6820d19c5aee5a385e0e03a35", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -373,6 +373,7 @@ extern crate unwind;\n \n // compiler-rt intrinsics\n #[doc(masked)]\n+#[cfg(stage0)]\n extern crate compiler_builtins;\n \n // During testing, this crate is not actually the \"real\" std library, but rather"}, {"sha": "92f0406c09bb5c752170212e06fe94effebd306a", "filename": "src/libstd/process.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -1452,6 +1452,7 @@ pub trait Termination {\n \n #[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n impl Termination for () {\n+    #[inline]\n     fn report(self) -> i32 { ExitCode::SUCCESS.report() }\n }\n \n@@ -1481,6 +1482,7 @@ impl<E: fmt::Debug> Termination for Result<!, E> {\n \n #[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n impl Termination for ExitCode {\n+    #[inline]\n     fn report(self) -> i32 {\n         self.0.as_i32()\n     }"}, {"sha": "6396bb3a49e2844c93865187354a0d2338c3b780", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -404,6 +404,7 @@ impl ExitCode {\n     pub const SUCCESS: ExitCode = ExitCode(EXIT_SUCCESS as _);\n     pub const FAILURE: ExitCode = ExitCode(EXIT_FAILURE as _);\n \n+    #[inline]\n     pub fn as_i32(&self) -> i32 {\n         self.0 as i32\n     }"}, {"sha": "bd5507e8f896731aaa68ccad0eb818807f309e0b", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -414,6 +414,7 @@ impl ExitCode {\n     pub const SUCCESS: ExitCode = ExitCode(EXIT_SUCCESS as _);\n     pub const FAILURE: ExitCode = ExitCode(EXIT_FAILURE as _);\n \n+    #[inline]\n     pub fn as_i32(&self) -> i32 {\n         self.0 as i32\n     }"}, {"sha": "283070a0e2cf7f42d9a54bd2a8a6a16a46cab8e2", "filename": "src/libstd_unicode/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibstd_unicode%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibstd_unicode%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2FCargo.toml?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -15,3 +15,4 @@ path = \"tests/lib.rs\"\n \n [dependencies]\n core = { path = \"../libcore\" }\n+compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }"}, {"sha": "8168db19058764f0585f148769062c1ffd917510", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -94,7 +94,7 @@ pub fn print_crate<'a>(cm: &'a CodeMap,\n                        is_expanded: bool) -> io::Result<()> {\n     let mut s = State::new_from_input(cm, sess, filename, input, out, ann, is_expanded);\n \n-    if is_expanded && !std_inject::injected_crate_name().is_none() {\n+    if is_expanded && std_inject::injected_crate_name().is_some() {\n         // We need to print `#![no_std]` (and its feature gate) so that\n         // compiling pretty-printed source won't inject libstd again.\n         // However we don't want these attributes in the AST because"}, {"sha": "bba7a2d73773646d5db9df809836d6645e811177", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -44,27 +44,38 @@ thread_local! {\n }\n \n pub fn maybe_inject_crates_ref(mut krate: ast::Crate, alt_std_name: Option<&str>) -> ast::Crate {\n-    let name = if attr::contains_name(&krate.attrs, \"no_core\") {\n+    // the first name in this list is the crate name of the crate with the prelude\n+    let names: &[&str] = if attr::contains_name(&krate.attrs, \"no_core\") {\n         return krate;\n     } else if attr::contains_name(&krate.attrs, \"no_std\") {\n-        \"core\"\n+        if attr::contains_name(&krate.attrs, \"compiler_builtins\") {\n+            &[\"core\"]\n+        } else {\n+            &[\"core\", \"compiler_builtins\"]\n+        }\n     } else {\n-        \"std\"\n+        &[\"std\"]\n     };\n \n-    INJECTED_CRATE_NAME.with(|opt_name| opt_name.set(Some(name)));\n+    for name in names {\n+        krate.module.items.insert(0, P(ast::Item {\n+            attrs: vec![attr::mk_attr_outer(DUMMY_SP,\n+                                            attr::mk_attr_id(),\n+                                            attr::mk_word_item(ast::Ident::from_str(\"macro_use\")))],\n+            vis: dummy_spanned(ast::VisibilityKind::Inherited),\n+            node: ast::ItemKind::ExternCrate(alt_std_name.map(Symbol::intern)),\n+            ident: ast::Ident::from_str(name),\n+            id: ast::DUMMY_NODE_ID,\n+            span: DUMMY_SP,\n+            tokens: None,\n+        }));\n+    }\n \n-    krate.module.items.insert(0, P(ast::Item {\n-        attrs: vec![attr::mk_attr_outer(DUMMY_SP,\n-                                        attr::mk_attr_id(),\n-                                        attr::mk_word_item(ast::Ident::from_str(\"macro_use\")))],\n-        vis: dummy_spanned(ast::VisibilityKind::Inherited),\n-        node: ast::ItemKind::ExternCrate(alt_std_name.map(Symbol::intern)),\n-        ident: ast::Ident::from_str(name),\n-        id: ast::DUMMY_NODE_ID,\n-        span: DUMMY_SP,\n-        tokens: None,\n-    }));\n+    // the crates have been injected, the assumption is that the first one is the one with\n+    // the prelude.\n+    let name = names[0];\n+\n+    INJECTED_CRATE_NAME.with(|opt_name| opt_name.set(Some(name)));\n \n     let span = ignored_span(DUMMY_SP);\n     krate.module.items.insert(0, P(ast::Item {"}, {"sha": "4760461df64e3895e73561fccd66785dedc6ff92", "filename": "src/libunwind/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibunwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Flibunwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2FCargo.toml?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -14,3 +14,4 @@ doc = false\n [dependencies]\n core = { path = \"../libcore\" }\n libc = { path = \"../rustc/libc_shim\" }\n+compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }"}, {"sha": "d2fe159d80673d54dbdb48a6fd0affacfc3665d4", "filename": "src/rustc/dlmalloc_shim/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Frustc%2Fdlmalloc_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Frustc%2Fdlmalloc_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdlmalloc_shim%2FCargo.toml?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -11,4 +11,5 @@ doc = false\n \n [dependencies]\n core = { path = \"../../libcore\" }\n+compiler_builtins = { path = \"../../rustc/compiler_builtins_shim\" }\n alloc = { path = \"../../liballoc\" }"}, {"sha": "e77897d6433136603451492472ebd6834a1fd561", "filename": "src/rustc/libc_shim/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Frustc%2Flibc_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Frustc%2Flibc_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flibc_shim%2FCargo.toml?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -29,6 +29,8 @@ doc = false\n #\n # See https://github.com/rust-lang/rfcs/pull/1133.\n core = { path = \"../../libcore\" }\n+compiler_builtins = { path = \"../compiler_builtins_shim\" }\n+\n \n [features]\n # Certain parts of libc are conditionally compiled differently than when used"}, {"sha": "9f2389292158b8070fe6eb8da4d942ebe9b3e349", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fef17143daad88bdc4314561e9c2eb5a364805/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=04fef17143daad88bdc4314561e9c2eb5a364805", "patch": "@@ -90,6 +90,10 @@ static TARGETS: &'static [&'static str] = &[\n     \"sparc-unknown-linux-gnu\",\n     \"sparc64-unknown-linux-gnu\",\n     \"sparcv9-sun-solaris\",\n+    \"thumbv6m-none-eabi\",\n+    \"thumbv7em-none-eabi\",\n+    \"thumbv7em-none-eabihf\",\n+    \"thumbv7m-none-eabi\",\n     \"wasm32-unknown-emscripten\",\n     \"wasm32-unknown-unknown\",\n     \"x86_64-apple-darwin\","}]}