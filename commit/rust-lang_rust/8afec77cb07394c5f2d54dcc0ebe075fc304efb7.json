{"sha": "8afec77cb07394c5f2d54dcc0ebe075fc304efb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZmVjNzdjYjA3Mzk0YzVmMmQ1NGRjYzBlYmUwNzVmYzMwNGVmYjc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-06T05:35:23Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-07T00:53:13Z"}, "message": "std::rt: Configure test threads with RUST_TEST_THREADS. Default is ncores x2", "tree": {"sha": "f45fe95500d4a0cec52b03325bfb01f6320eb626", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f45fe95500d4a0cec52b03325bfb01f6320eb626"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8afec77cb07394c5f2d54dcc0ebe075fc304efb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8afec77cb07394c5f2d54dcc0ebe075fc304efb7", "html_url": "https://github.com/rust-lang/rust/commit/8afec77cb07394c5f2d54dcc0ebe075fc304efb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8afec77cb07394c5f2d54dcc0ebe075fc304efb7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9a5005f52d528797d6b98a3bee73ab2d71b9aa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9a5005f52d528797d6b98a3bee73ab2d71b9aa3", "html_url": "https://github.com/rust-lang/rust/commit/f9a5005f52d528797d6b98a3bee73ab2d71b9aa3"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "c8df3a61203385eda72b2462c4e372e90fdc31de", "filename": "src/libstd/rt/test.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8afec77cb07394c5f2d54dcc0ebe075fc304efb7/src%2Flibstd%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afec77cb07394c5f2d54dcc0ebe075fc304efb7/src%2Flibstd%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftest.rs?ref=8afec77cb07394c5f2d54dcc0ebe075fc304efb7", "patch": "@@ -59,21 +59,32 @@ pub fn run_in_newsched_task(f: ~fn()) {\n /// in one of the schedulers. The schedulers will stay alive\n /// until the function `f` returns.\n pub fn run_in_mt_newsched_task(f: ~fn()) {\n+    use libc;\n+    use os;\n+    use from_str::FromStr;\n     use rt::uv::uvio::UvEventLoop;\n     use rt::sched::Shutdown;\n \n     let f_cell = Cell(f);\n \n     do run_in_bare_thread {\n-        static N: uint = 4;\n+        let nthreads = match os::getenv(\"RUST_TEST_THREADS\") {\n+            Some(nstr) => FromStr::from_str(nstr).get(),\n+            None => unsafe {\n+                // Using more threads than cores in test code\n+                // to force the OS to preempt them frequently.\n+                // Assuming that this help stress test concurrent types.\n+                rust_get_num_cpus() * 2\n+            }\n+        };\n \n         let sleepers = SleeperList::new();\n         let work_queue = WorkQueue::new();\n \n         let mut handles = ~[];\n         let mut scheds = ~[];\n \n-        for uint::range(0, N) |_| {\n+        for uint::range(0, nthreads) |_| {\n             let loop_ = ~UvEventLoop::new();\n             let mut sched = ~Scheduler::new(loop_, work_queue.clone(), sleepers.clone());\n             let handle = sched.make_handle();\n@@ -111,6 +122,10 @@ pub fn run_in_mt_newsched_task(f: ~fn()) {\n         // Wait for schedulers\n         let _threads = threads;\n     }\n+\n+    extern {\n+        fn rust_get_num_cpus() -> libc::uintptr_t;\n+    }\n }\n \n /// Test tasks will abort on failure instead of unwinding"}]}