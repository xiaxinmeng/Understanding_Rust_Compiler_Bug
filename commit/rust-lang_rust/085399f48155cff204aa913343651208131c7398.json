{"sha": "085399f48155cff204aa913343651208131c7398", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NTM5OWY0ODE1NWNmZjIwNGFhOTEzMzQzNjUxMjA4MTMxYzczOTg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-16T00:10:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-16T00:10:13Z"}, "message": "Rollup merge of #77646 - fusion-engineering-forks:use-static-mutex, r=dtolnay\n\nFor backtrace, use StaticMutex instead of a raw sys Mutex.\n\nThe code used the very unsafe `sys::mutex::Mutex` directly, and built its own unlock-on-drop wrapper around it. The StaticMutex wrapper already provides that and is easier to use safely.\n\n@rustbot modify labels: +T-libs +C-cleanup", "tree": {"sha": "c6781f63cf8b0bce034dd1a5d6248e4c798e4e3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6781f63cf8b0bce034dd1a5d6248e4c798e4e3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/085399f48155cff204aa913343651208131c7398", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfiOTmCRBK7hj4Ov3rIwAAdHIIACgBjo2bWRmzLEzAxUMMfEcP\nf5Thw4324NEJltL5pH8kqUxuOVpqQi3fTAYx2YqH1QY3i0MRHv4nviLRIsnkkRtK\nw09gfzDjPROFAAsbeXBSbl/k5UFwTvLd7DLh6GhqtTjOlAOL0AA04ZK/qzzh7Qiy\nmwZ68vTUrGu3YcHdFYYeWeief/4oLm0hEx16I+LnR0U6y/hD4a1UmQCbp1wkeUWA\nNZHq/L3PRhNRApFn2HMGzcYIEX4amPcVg0MOgWxSQsd7HMhCxGhON7KcnlfECRXz\nzqrsJq9tRNW8HOwakfIqjNsrKOJ3KmkLUngqTrO3AvcZ8ZR4BY140DJ8NcRAEnw=\n=C8Is\n-----END PGP SIGNATURE-----\n", "payload": "tree c6781f63cf8b0bce034dd1a5d6248e4c798e4e3d\nparent dcf972a2be2e122ee3e7cc86bbf4ff6751055337\nparent 54a71e89546886951e32035960aa82a15a343668\nauthor Dylan DPC <dylan.dpc@gmail.com> 1602807013 +0200\ncommitter GitHub <noreply@github.com> 1602807013 +0200\n\nRollup merge of #77646 - fusion-engineering-forks:use-static-mutex, r=dtolnay\n\nFor backtrace, use StaticMutex instead of a raw sys Mutex.\n\nThe code used the very unsafe `sys::mutex::Mutex` directly, and built its own unlock-on-drop wrapper around it. The StaticMutex wrapper already provides that and is easier to use safely.\n\n@rustbot modify labels: +T-libs +C-cleanup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/085399f48155cff204aa913343651208131c7398", "html_url": "https://github.com/rust-lang/rust/commit/085399f48155cff204aa913343651208131c7398", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/085399f48155cff204aa913343651208131c7398/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcf972a2be2e122ee3e7cc86bbf4ff6751055337", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcf972a2be2e122ee3e7cc86bbf4ff6751055337", "html_url": "https://github.com/rust-lang/rust/commit/dcf972a2be2e122ee3e7cc86bbf4ff6751055337"}, {"sha": "54a71e89546886951e32035960aa82a15a343668", "url": "https://api.github.com/repos/rust-lang/rust/commits/54a71e89546886951e32035960aa82a15a343668", "html_url": "https://github.com/rust-lang/rust/commit/54a71e89546886951e32035960aa82a15a343668"}], "stats": {"total": 28, "additions": 9, "deletions": 19}, "files": [{"sha": "a9d8a4e2a81c1e03173b671bb99857f5a3e7da89", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/085399f48155cff204aa913343651208131c7398/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085399f48155cff204aa913343651208131c7398/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=085399f48155cff204aa913343651208131c7398", "patch": "@@ -303,7 +303,8 @@ impl Backtrace {\n     // Capture a backtrace which start just before the function addressed by\n     // `ip`\n     fn create(ip: usize) -> Backtrace {\n-        let _lock = lock();\n+        // SAFETY: We don't attempt to lock this reentrantly.\n+        let _lock = unsafe { lock() };\n         let mut frames = Vec::new();\n         let mut actual_start = None;\n         unsafe {\n@@ -408,7 +409,8 @@ impl Capture {\n         // Use the global backtrace lock to synchronize this as it's a\n         // requirement of the `backtrace` crate, and then actually resolve\n         // everything.\n-        let _lock = lock();\n+        // SAFETY: We don't attempt to lock this reentrantly.\n+        let _lock = unsafe { lock() };\n         for frame in self.frames.iter_mut() {\n             let symbols = &mut frame.symbols;\n             let frame = match &frame.frame {"}, {"sha": "a549770d8b37823dd30112db435af4e2985a504d", "filename": "library/std/src/sys_common/backtrace.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/085399f48155cff204aa913343651208131c7398/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085399f48155cff204aa913343651208131c7398/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs?ref=085399f48155cff204aa913343651208131c7398", "patch": "@@ -8,27 +8,15 @@ use crate::io;\n use crate::io::prelude::*;\n use crate::path::{self, Path, PathBuf};\n use crate::sync::atomic::{self, Ordering};\n-use crate::sys::mutex::Mutex;\n+use crate::sys_common::mutex::StaticMutex;\n \n /// Max number of frames to print.\n const MAX_NB_FRAMES: usize = 100;\n \n-pub fn lock() -> impl Drop {\n-    struct Guard;\n-    static LOCK: Mutex = Mutex::new();\n-\n-    impl Drop for Guard {\n-        fn drop(&mut self) {\n-            unsafe {\n-                LOCK.unlock();\n-            }\n-        }\n-    }\n-\n-    unsafe {\n-        LOCK.lock();\n-        Guard\n-    }\n+// SAFETY: Don't attempt to lock this reentrantly.\n+pub unsafe fn lock() -> impl Drop {\n+    static LOCK: StaticMutex = StaticMutex::new();\n+    LOCK.lock()\n }\n \n /// Prints the current backtrace."}]}