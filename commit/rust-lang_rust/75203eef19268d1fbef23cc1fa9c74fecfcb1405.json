{"sha": "75203eef19268d1fbef23cc1fa9c74fecfcb1405", "node_id": "C_kwDOAAsO6NoAKDc1MjAzZWVmMTkyNjhkMWZiZWYyM2NjMWZhOWM3NGZlY2ZjYjE0MDU", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2022-06-21T11:15:05Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2022-06-21T16:39:44Z"}, "message": "Remove unecessary references to TypeFolder::Error", "tree": {"sha": "ceac7f71146924ec1a879e559b8d89f20548d425", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ceac7f71146924ec1a879e559b8d89f20548d425"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75203eef19268d1fbef23cc1fa9c74fecfcb1405", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEm/Nz5g9hEBdpmKVOB8rDzKfgZD8FAmKx9FAACgkQB8rDzKfg\nZD9zAw/8DXr231cBYcOEXBUalrMnJPre9QCsyqNgCctIdfNRGlGk+nx9fNwpnpSO\nC+PnzN9GUJAS6keLAku/oz4Y1hNYwBKIDoAfqmPxqYb3isuZvWUVMc+s8Ek6tSdl\nVwT/FRQRT0nmgzTI7hVISvXSuU6aohUn/VkJ4z67ho0E91VXY8qrW6SLgwR7YqlT\nA3ylz06DtdoSbU3sUeEyEkfBKSmta3rdlrRF4VTiG6+gDEwErCWK52Laif2/7oh1\nHkmRFSIKWOaTdpSmFzj69LSNU+xNHrfvpeNJvmehzT7zfqXue8NANkepxygE7ueP\nFtSIzcFZmulADOVAUFqCsV8CBo7K6u9Brrjw6FFbLFL1TUWqj/koOhFbms16QHB4\nwcDbcGVs8Rzg27sMnFW/XbKWH5VCEMzkTtSu1P+tV6vW8FVoQdoouzujKqi36V0t\nnBGirIPn2XrIU6E7prPA3T4e0GpzBWQU0yYbh5EdOwk0X+t7tssNSLvzS7OPB4Ca\nxdfng81mR3G6eo43m+k0WbYGhWgnKDPHMC/mZsKvphnNbrwkwxTTmKHmcrntGlx5\nKRHZZzemK9xCsAf+bAbFHcpj+QrOvrhpQ/CEpTBoSoOcttr6LOpMJ7RblC/qOUv5\nXjdV54fmmAcfs4tgUCFf+cQrxldxNquNHoRANRxWTa9/AhLGG70=\n=Tso0\n-----END PGP SIGNATURE-----", "payload": "tree ceac7f71146924ec1a879e559b8d89f20548d425\nparent 6ac6866bec092e0c2a3e0fc4aaf14b015b859a57\nauthor Alan Egerton <eggyal@gmail.com> 1655810105 +0100\ncommitter Alan Egerton <eggyal@gmail.com> 1655829584 +0100\n\nRemove unecessary references to TypeFolder::Error\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75203eef19268d1fbef23cc1fa9c74fecfcb1405", "html_url": "https://github.com/rust-lang/rust/commit/75203eef19268d1fbef23cc1fa9c74fecfcb1405", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75203eef19268d1fbef23cc1fa9c74fecfcb1405/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ac6866bec092e0c2a3e0fc4aaf14b015b859a57", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ac6866bec092e0c2a3e0fc4aaf14b015b859a57", "html_url": "https://github.com/rust-lang/rust/commit/6ac6866bec092e0c2a3e0fc4aaf14b015b859a57"}], "stats": {"total": 36, "additions": 15, "deletions": 21}, "files": [{"sha": "b1b8bc13e2f1320a1578e4a8e3001f9232efe309", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/75203eef19268d1fbef23cc1fa9c74fecfcb1405/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75203eef19268d1fbef23cc1fa9c74fecfcb1405/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=75203eef19268d1fbef23cc1fa9c74fecfcb1405", "patch": "@@ -86,7 +86,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     /// A convenient alternative to `try_fold_with` for use with infallible\n     /// folders. Do not override this method, to ensure coherence with\n     /// `try_fold_with`.\n-    fn fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {\n+    fn fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n         self.try_fold_with(folder).into_ok()\n     }\n \n@@ -216,7 +216,7 @@ pub trait TypeSuperFoldable<'tcx>: TypeFoldable<'tcx> {\n     /// A convenient alternative to `try_super_fold_with` for use with\n     /// infallible folders. Do not override this method, to ensure coherence\n     /// with `try_super_fold_with`.\n-    fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n         self.try_super_fold_with(folder).into_ok()\n     }\n \n@@ -229,16 +229,13 @@ pub trait TypeSuperFoldable<'tcx>: TypeFoldable<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n }\n \n-/// This trait is implemented for every folding traversal. There is a fold\n-/// method defined for every type of interest. Each such method has a default\n-/// that does an \"identity\" fold. Implementations of these methods often fall\n-/// back to a `super_fold_with` method if the primary argument doesn't\n-/// satisfy a particular condition.\n+/// This trait is implemented for every infallible folding traversal. There is\n+/// a fold method defined for every type of interest. Each such method has a\n+/// default that does an \"identity\" fold. Implementations of these methods\n+/// often fall back to a `super_fold_with` method if the primary argument\n+/// doesn't satisfy a particular condition.\n ///\n-/// If this folder is fallible (and therefore its [`Error`][`TypeFolder::Error`]\n-/// associated type is something other than the default `!`) then\n-/// [`FallibleTypeFolder`] should be implemented manually. Otherwise,\n-/// a blanket implementation of [`FallibleTypeFolder`] will defer to\n+/// A blanket implementation of [`FallibleTypeFolder`] will defer to\n /// the infallible methods of this trait to ensure that the two APIs\n /// are coherent.\n pub trait TypeFolder<'tcx>: FallibleTypeFolder<'tcx, Error = !> {\n@@ -341,43 +338,40 @@ where\n         TypeFolder::tcx(self)\n     }\n \n-    fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>\n+    fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, !>\n     where\n         T: TypeFoldable<'tcx>,\n     {\n         Ok(self.fold_binder(t))\n     }\n \n-    fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {\n+    fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, !> {\n         Ok(self.fold_ty(t))\n     }\n \n-    fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {\n+    fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, !> {\n         Ok(self.fold_region(r))\n     }\n \n-    fn try_fold_const(&mut self, c: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, Self::Error> {\n+    fn try_fold_const(&mut self, c: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, !> {\n         Ok(self.fold_const(c))\n     }\n \n     fn try_fold_unevaluated(\n         &mut self,\n         c: ty::Unevaluated<'tcx>,\n-    ) -> Result<ty::Unevaluated<'tcx>, Self::Error> {\n+    ) -> Result<ty::Unevaluated<'tcx>, !> {\n         Ok(self.fold_unevaluated(c))\n     }\n \n-    fn try_fold_predicate(\n-        &mut self,\n-        p: ty::Predicate<'tcx>,\n-    ) -> Result<ty::Predicate<'tcx>, Self::Error> {\n+    fn try_fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> Result<ty::Predicate<'tcx>, !> {\n         Ok(self.fold_predicate(p))\n     }\n \n     fn try_fold_mir_const(\n         &mut self,\n         c: mir::ConstantKind<'tcx>,\n-    ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {\n+    ) -> Result<mir::ConstantKind<'tcx>, !> {\n         Ok(self.fold_mir_const(c))\n     }\n }"}]}