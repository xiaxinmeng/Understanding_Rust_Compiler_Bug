{"sha": "e2ec3b1dd72357f7d91f04c14e040e6e698630fa", "node_id": "C_kwDOAAsO6NoAKGUyZWMzYjFkZDcyMzU3ZjdkOTFmMDRjMTRlMDQwZTZlNjk4NjMwZmE", "commit": {"author": {"name": "Urgau", "email": "lolo.branstett@numericable.fr", "date": "2021-11-20T22:05:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-20T22:05:30Z"}, "message": "Apply documentation suggestions from @est31\n\nCo-authored-by: est31 <est31@users.noreply.github.com>", "tree": {"sha": "7f5d9a6ccf907e93cd46bb315e6767f4cba9bd40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f5d9a6ccf907e93cd46bb315e6767f4cba9bd40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2ec3b1dd72357f7d91f04c14e040e6e698630fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhmXEqCRBK7hj4Ov3rIwAAiPsIAINfY3sRgyzAcrAEuvb1qKw6\naDEK1oQ+RElivP6kK6pzHKOQopqeMngj+S5hHll7SPJMP2glGPLqo8sN04MVYXr7\n0FGHyxfi2AxtX/8nUH/P6Y5XNrL4OYfpLctt8SSpZwcdWu7jjxUitOumq4kA0jpk\nMxP68EyZpk+kUluWpAH6XFWcVeTigHfgomGkNbfDTUm4ek0WzoNaMmB+a6GQilGR\n8W0wMQw0t5lxgjtWMKCfQz7Wqj7VeP14VcHadZm1tx4zEz6gBSEzwGgD6s0N4YmJ\nuLz6Bwfm+UT6TSSFaeJ5WTLPwjvBW3nlzmwn25cdMmop4nCfR8C3XdoYrxlQXDo=\n=Y7Cu\n-----END PGP SIGNATURE-----\n", "payload": "tree 7f5d9a6ccf907e93cd46bb315e6767f4cba9bd40\nparent 2bad89390052399e4c850a2793691f3371122880\nauthor Urgau <lolo.branstett@numericable.fr> 1637445930 +0100\ncommitter GitHub <noreply@github.com> 1637445930 +0100\n\nApply documentation suggestions from @est31\n\nCo-authored-by: est31 <est31@users.noreply.github.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ec3b1dd72357f7d91f04c14e040e6e698630fa", "html_url": "https://github.com/rust-lang/rust/commit/e2ec3b1dd72357f7d91f04c14e040e6e698630fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2ec3b1dd72357f7d91f04c14e040e6e698630fa/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bad89390052399e4c850a2793691f3371122880", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bad89390052399e4c850a2793691f3371122880", "html_url": "https://github.com/rust-lang/rust/commit/2bad89390052399e4c850a2793691f3371122880"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "c4a232ef36c615c5010557afefa93358552a8adf", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2ec3b1dd72357f7d91f04c14e040e6e698630fa/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ec3b1dd72357f7d91f04c14e040e6e698630fa/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=e2ec3b1dd72357f7d91f04c14e040e6e698630fa", "patch": "@@ -674,7 +674,7 @@ impl f32 {\n     /// Returns the maximum of the two numbers.\n     ///\n     /// Follows the IEEE-754 2008 semantics for maxNum, except for handling of signaling NaNs.\n-    /// This match\u2019s the behavior of libm\u2019s fmin.\n+    /// This matches the behavior of libm\u2019s fmin.\n     ///\n     /// ```\n     /// let x = 1.0f32;\n@@ -693,7 +693,7 @@ impl f32 {\n     /// Returns the minimum of the two numbers.\n     ///\n     /// Follows the IEEE-754 2008 semantics for minNum, except for handling of signaling NaNs.\n-    /// This match\u2019s the behavior of libm\u2019s fmin.\n+    /// This matches the behavior of libm\u2019s fmin.\n     ///\n     /// ```\n     /// let x = 1.0f32;\n@@ -725,7 +725,7 @@ impl f32 {\n     ///\n     /// If one of the arguments is NaN, then NaN is returned. Otherwise this returns the greater\n     /// of the two numbers. For this operation, -0.0 is considered to be less than +0.0.\n-    /// Note that this follow the semantics specified in IEEE 754-2019.\n+    /// Note that this follows the semantics specified in IEEE 754-2019.\n     #[unstable(feature = \"float_minimum_maximum\", issue = \"91079\")]\n     #[inline]\n     pub fn maximum(self, other: f32) -> f32 {\n@@ -756,7 +756,7 @@ impl f32 {\n     ///\n     /// If one of the arguments is NaN, then NaN is returned. Otherwise this returns the lesser\n     /// of the two numbers. For this operation, -0.0 is considered to be less than +0.0.\n-    /// Note that this follow the semantics specified in IEEE 754-2019.\n+    /// Note that this follows the semantics specified in IEEE 754-2019.\n     #[unstable(feature = \"float_minimum_maximum\", issue = \"91079\")]\n     #[inline]\n     pub fn minimum(self, other: f32) -> f32 {"}, {"sha": "85ee6aa2cb8c3399f6bd2787ad9696d72fbe5b82", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2ec3b1dd72357f7d91f04c14e040e6e698630fa/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ec3b1dd72357f7d91f04c14e040e6e698630fa/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=e2ec3b1dd72357f7d91f04c14e040e6e698630fa", "patch": "@@ -690,7 +690,7 @@ impl f64 {\n     /// Returns the maximum of the two numbers.\n     ///\n     /// Follows the IEEE-754 2008 semantics for maxNum, except for handling of signaling NaNs.\n-    /// This match\u2019s the behavior of libm\u2019s fmin.\n+    /// This matches the behavior of libm\u2019s fmin.\n     ///\n     /// ```\n     /// let x = 1.0_f64;\n@@ -709,7 +709,7 @@ impl f64 {\n     /// Returns the minimum of the two numbers.\n     ///\n     /// Follows the IEEE-754 2008 semantics for minNum, except for handling of signaling NaNs.\n-    /// This match\u2019s the behavior of libm\u2019s fmin.\n+    /// This matches the behavior of libm\u2019s fmin.\n     ///\n     /// ```\n     /// let x = 1.0_f64;\n@@ -741,7 +741,7 @@ impl f64 {\n     ///\n     /// If one of the arguments is NaN, then NaN is returned. Otherwise this returns the greater\n     /// of the two numbers. For this operation, -0.0 is considered to be less than +0.0.\n-    /// Note that this follow the semantics specified in IEEE 754-2019.\n+    /// Note that this follows the semantics specified in IEEE 754-2019.\n     #[unstable(feature = \"float_minimum_maximum\", issue = \"91079\")]\n     #[inline]\n     pub fn maximum(self, other: f64) -> f64 {\n@@ -772,7 +772,7 @@ impl f64 {\n     ///\n     /// If one of the arguments is NaN, then NaN is returned. Otherwise this returns the lesser\n     /// of the two numbers. For this operation, -0.0 is considered to be less than +0.0.\n-    /// Note that this follow the semantics specified in IEEE 754-2019.\n+    /// Note that this follows the semantics specified in IEEE 754-2019.\n     #[unstable(feature = \"float_minimum_maximum\", issue = \"91079\")]\n     #[inline]\n     pub fn minimum(self, other: f64) -> f64 {"}]}