{"sha": "85123d2504885e4670d80dab96f4f9629f2be98b", "node_id": "C_kwDOAAsO6NoAKDg1MTIzZDI1MDQ4ODVlNDY3MGQ4MGRhYjk2ZjRmOTYyOWYyYmU5OGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-18T03:16:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-18T03:16:32Z"}, "message": "Auto merge of #109284 - matthiaskrgr:rollup-aaublsx, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #109102 (Erase escaping late-bound regions when probing for ambiguous associated types)\n - #109200 (Fix index out of bounds in `suggest_trait_fn_ty_for_impl_fn_infer`)\n - #109211 (E0206 - update description )\n - #109222 (Do not ICE for unexpected lifetime with ConstGeneric rib)\n - #109235 (fallback to lstat when stat fails on Windows)\n - #109248 (Pass the right HIR back from `get_fn_decl`)\n - #109251 (Suggest surrounding the macro with `{}` to interpret as a statement)\n - #109256 (Check for llvm-tools before install)\n - #109257 (resolve: Improve debug impls for `NameBinding`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a9d24c41d4d1b359464cd84a26a1a0271fdc754f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9d24c41d4d1b359464cd84a26a1a0271fdc754f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85123d2504885e4670d80dab96f4f9629f2be98b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85123d2504885e4670d80dab96f4f9629f2be98b", "html_url": "https://github.com/rust-lang/rust/commit/85123d2504885e4670d80dab96f4f9629f2be98b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85123d2504885e4670d80dab96f4f9629f2be98b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13afbdaa0655dda23d7129e59ac48f1ec88b2084", "url": "https://api.github.com/repos/rust-lang/rust/commits/13afbdaa0655dda23d7129e59ac48f1ec88b2084", "html_url": "https://github.com/rust-lang/rust/commit/13afbdaa0655dda23d7129e59ac48f1ec88b2084"}, {"sha": "0d4a56cc2141c9924023b7904449428cf5423e3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d4a56cc2141c9924023b7904449428cf5423e3f", "html_url": "https://github.com/rust-lang/rust/commit/0d4a56cc2141c9924023b7904449428cf5423e3f"}], "stats": {"total": 317, "additions": 252, "deletions": 65}, "files": [{"sha": "9e85234bdbb3ab7532c32d99cd2d92c52e9400a1", "filename": "compiler/rustc_error_codes/src/error_codes/E0206.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0206.md", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0206.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0206.md?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -1,5 +1,5 @@\n-The `Copy` trait was implemented on a type which is neither a struct nor an\n-enum.\n+The `Copy` trait was implemented on a type which is neither a struct, an\n+enum, nor a union.\n \n Erroneous code example:\n \n@@ -10,6 +10,6 @@ struct Bar;\n impl Copy for &'static mut Bar { } // error!\n ```\n \n-You can only implement `Copy` for a struct or an enum.\n+You can only implement `Copy` for a struct, an enum, or a union.\n The previous example will fail because `&'static mut Bar`\n-is not a struct or enum.\n+is not a struct, an enum, or a union."}, {"sha": "6bc393c6534f3597e2dd12deb9d3a0d05e4affbd", "filename": "compiler/rustc_expand/src/mbe/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -245,12 +245,24 @@ pub(super) fn emit_frag_parse_err(\n                 e.note(\n                     \"the macro call doesn't expand to an expression, but it can expand to a statement\",\n                 );\n-                e.span_suggestion_verbose(\n-                    site_span.shrink_to_hi(),\n-                    \"add `;` to interpret the expansion as a statement\",\n-                    \";\",\n-                    Applicability::MaybeIncorrect,\n-                );\n+\n+                if parser.token == token::Semi {\n+                    if let Ok(snippet) = parser.sess.source_map().span_to_snippet(site_span) {\n+                        e.span_suggestion_verbose(\n+                            site_span,\n+                            \"surround the macro invocation with `{}` to interpret the expansion as a statement\",\n+                            format!(\"{{ {}; }}\", snippet),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                } else {\n+                    e.span_suggestion_verbose(\n+                        site_span.shrink_to_hi(),\n+                        \"add `;` to interpret the expansion as a statement\",\n+                        \";\",\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n             }\n         },\n         _ => annotate_err_with_kind(&mut e, kind, site_span),"}, {"sha": "2e788de9faba51e670afa1bb1f97a23ccf766491", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -2396,13 +2396,24 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                     tcx,\n                                     infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id),\n                                 );\n+                                // I guess we don't need to make a universe unless we need it,\n+                                // but also we're on the error path, so it doesn't matter here.\n+                                let universe = infcx.create_next_universe();\n                                 infcx\n                                     .can_eq(\n                                         ty::ParamEnv::empty(),\n                                         impl_.self_ty(),\n-                                        // Must fold past escaping bound vars too,\n-                                        // since we have those at this point in astconv.\n-                                        tcx.fold_regions(qself_ty, |_, _| tcx.lifetimes.re_erased),\n+                                        tcx.replace_escaping_bound_vars_uncached(qself_ty, ty::fold::FnMutDelegate {\n+                                            regions: &mut |_| tcx.lifetimes.re_erased,\n+                                            types: &mut |bv| tcx.mk_placeholder(ty::PlaceholderType {\n+                                                universe,\n+                                                name: bv.kind,\n+                                            }),\n+                                            consts: &mut |bv, ty| tcx.mk_const(ty::PlaceholderConst {\n+                                                universe,\n+                                                name: bv\n+                                            }, ty),\n+                                        })\n                                     )\n                             })\n                             && tcx.impl_polarity(impl_def_id) != ty::ImplPolarity::Negative\n@@ -3317,10 +3328,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             tcx,\n             trait_ref.substs.extend_to(tcx, assoc.def_id, |param, _| tcx.mk_param_from_def(param)),\n         );\n+        let fn_sig = tcx.liberate_late_bound_regions(fn_hir_id.expect_owner().to_def_id(), fn_sig);\n \n-        let ty = if let Some(arg_idx) = arg_idx { fn_sig.input(arg_idx) } else { fn_sig.output() };\n-\n-        Some(tcx.liberate_late_bound_regions(fn_hir_id.expect_owner().to_def_id(), ty))\n+        Some(if let Some(arg_idx) = arg_idx {\n+            *fn_sig.inputs().get(arg_idx)?\n+        } else {\n+            fn_sig.output()\n+        })\n     }\n \n     #[instrument(level = \"trace\", skip(self, generate_err))]"}, {"sha": "035ccf30b2462acf81ee418989b1c638c9cfa3aa", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -299,7 +299,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             {\n                 // check that the `if` expr without `else` is the fn body's expr\n                 if expr.span == sp {\n-                    return self.get_fn_decl(hir_id).and_then(|(fn_decl, _)| {\n+                    return self.get_fn_decl(hir_id).and_then(|(_, fn_decl, _)| {\n                         let span = fn_decl.output.span();\n                         let snippet = self.tcx.sess.source_map().span_to_snippet(span).ok()?;\n                         Some((span, format!(\"expected `{snippet}` because of this return type\")))"}, {"sha": "a27905ea46c9453880193876b3c3aab59acf3dfb", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -1722,20 +1722,21 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     fcx.suggest_semicolon_at_end(cond_expr.span, &mut err);\n                 }\n             }\n-            fcx.get_node_fn_decl(parent).map(|(fn_decl, _, is_main)| (fn_decl, is_main))\n+            fcx.get_node_fn_decl(parent)\n+                .map(|(fn_id, fn_decl, _, is_main)| (fn_id, fn_decl, is_main))\n         } else {\n             fcx.get_fn_decl(parent_id)\n         };\n \n-        if let Some((fn_decl, can_suggest)) = fn_decl {\n+        if let Some((fn_id, fn_decl, can_suggest)) = fn_decl {\n             if blk_id.is_none() {\n                 pointing_at_return_type |= fcx.suggest_missing_return_type(\n                     &mut err,\n                     &fn_decl,\n                     expected,\n                     found,\n                     can_suggest,\n-                    fcx.tcx.hir().get_parent_item(id).into(),\n+                    fn_id,\n                 );\n             }\n             if !pointing_at_return_type {\n@@ -1746,17 +1747,11 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         let parent_id = fcx.tcx.hir().get_parent_item(id);\n         let parent_item = fcx.tcx.hir().get_by_def_id(parent_id.def_id);\n \n-        if let (Some(expr), Some(_), Some((fn_decl, _, _))) =\n+        if let (Some(expr), Some(_), Some((fn_id, fn_decl, _, _))) =\n             (expression, blk_id, fcx.get_node_fn_decl(parent_item))\n         {\n             fcx.suggest_missing_break_or_return_expr(\n-                &mut err,\n-                expr,\n-                fn_decl,\n-                expected,\n-                found,\n-                id,\n-                parent_id.into(),\n+                &mut err, expr, fn_decl, expected, found, id, fn_id,\n             );\n         }\n \n@@ -1882,7 +1877,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n     }\n \n     fn is_return_ty_unsized<'a>(&self, fcx: &FnCtxt<'a, 'tcx>, blk_id: hir::HirId) -> bool {\n-        if let Some((fn_decl, _)) = fcx.get_fn_decl(blk_id)\n+        if let Some((_, fn_decl, _)) = fcx.get_fn_decl(blk_id)\n             && let hir::FnRetTy::Return(ty) = fn_decl.output\n             && let ty = fcx.astconv().ast_ty_to_ty( ty)\n             && let ty::Dynamic(..) = ty.kind()"}, {"sha": "29db16849dd5b48251ad460d0e568d285069a100", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -788,7 +788,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.ret_coercion_span.set(Some(expr.span));\n             }\n             let cause = self.cause(expr.span, ObligationCauseCode::ReturnNoExpression);\n-            if let Some((fn_decl, _)) = self.get_fn_decl(expr.hir_id) {\n+            if let Some((_, fn_decl, _)) = self.get_fn_decl(expr.hir_id) {\n                 coercion.coerce_forced_unit(\n                     self,\n                     &cause,"}, {"sha": "8455076de56348bb28d958e1d69c6a394ab548dd", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 42, "deletions": 19, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -898,51 +898,74 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         )\n     }\n \n-    /// Given a function `Node`, return its `FnDecl` if it exists, or `None` otherwise.\n+    /// Given a function `Node`, return its  `HirId` and `FnDecl` if it exists. Given a closure\n+    /// that is the child of a function, return that function's `HirId` and `FnDecl` instead.\n+    /// This may seem confusing at first, but this is used in diagnostics for `async fn`,\n+    /// for example, where most of the type checking actually happens within a nested closure,\n+    /// but we often want access to the parent function's signature.\n+    ///\n+    /// Otherwise, return false.\n     pub(in super::super) fn get_node_fn_decl(\n         &self,\n         node: Node<'tcx>,\n-    ) -> Option<(&'tcx hir::FnDecl<'tcx>, Ident, bool)> {\n+    ) -> Option<(hir::HirId, &'tcx hir::FnDecl<'tcx>, Ident, bool)> {\n         match node {\n-            Node::Item(&hir::Item { ident, kind: hir::ItemKind::Fn(ref sig, ..), .. }) => {\n+            Node::Item(&hir::Item {\n+                ident,\n+                kind: hir::ItemKind::Fn(ref sig, ..),\n+                owner_id,\n+                ..\n+            }) => {\n                 // This is less than ideal, it will not suggest a return type span on any\n                 // method called `main`, regardless of whether it is actually the entry point,\n                 // but it will still present it as the reason for the expected type.\n-                Some((&sig.decl, ident, ident.name != sym::main))\n+                Some((\n+                    hir::HirId::make_owner(owner_id.def_id),\n+                    &sig.decl,\n+                    ident,\n+                    ident.name != sym::main,\n+                ))\n             }\n             Node::TraitItem(&hir::TraitItem {\n                 ident,\n                 kind: hir::TraitItemKind::Fn(ref sig, ..),\n+                owner_id,\n                 ..\n-            }) => Some((&sig.decl, ident, true)),\n+            }) => Some((hir::HirId::make_owner(owner_id.def_id), &sig.decl, ident, true)),\n             Node::ImplItem(&hir::ImplItem {\n                 ident,\n                 kind: hir::ImplItemKind::Fn(ref sig, ..),\n+                owner_id,\n                 ..\n-            }) => Some((&sig.decl, ident, false)),\n-            Node::Expr(&hir::Expr {\n-                hir_id,\n-                kind: hir::ExprKind::Closure(..),\n-                ..\n-            }) if let Some(Node::Item(&hir::Item {\n+            }) => Some((hir::HirId::make_owner(owner_id.def_id), &sig.decl, ident, false)),\n+            Node::Expr(&hir::Expr { hir_id, kind: hir::ExprKind::Closure(..), .. })\n+                if let Some(Node::Item(&hir::Item {\n+                    ident,\n+                    kind: hir::ItemKind::Fn(ref sig, ..),\n+                    owner_id,\n+                    ..\n+                })) = self.tcx.hir().find_parent(hir_id) => Some((\n+                hir::HirId::make_owner(owner_id.def_id),\n+                &sig.decl,\n                 ident,\n-                kind: hir::ItemKind::Fn(ref sig, ..),\n-                ..\n-            })) = self.tcx.hir().find_parent(hir_id) => {\n-                Some((&sig.decl, ident, ident.name != sym::main))\n-            },\n+                ident.name != sym::main,\n+            )),\n             _ => None,\n         }\n     }\n \n-    /// Given a `HirId`, return the `FnDecl` of the method it is enclosed by and whether a\n+    /// Given a `HirId`, return the `HirId` of the enclosing function, its `FnDecl`, and whether a\n     /// suggestion can be made, `None` otherwise.\n-    pub fn get_fn_decl(&self, blk_id: hir::HirId) -> Option<(&'tcx hir::FnDecl<'tcx>, bool)> {\n+    pub fn get_fn_decl(\n+        &self,\n+        blk_id: hir::HirId,\n+    ) -> Option<(hir::HirId, &'tcx hir::FnDecl<'tcx>, bool)> {\n         // Get enclosing Fn, if it is a function or a trait method, unless there's a `loop` or\n         // `while` before reaching it, as block tail returns are not available in them.\n         self.tcx.hir().get_return_block(blk_id).and_then(|blk_id| {\n             let parent = self.tcx.hir().get(blk_id);\n-            self.get_node_fn_decl(parent).map(|(fn_decl, _, is_main)| (fn_decl, is_main))\n+            self.get_node_fn_decl(parent)\n+                .map(|(fn_id, fn_decl, _, is_main)| (fn_id, fn_decl, is_main))\n         })\n     }\n "}, {"sha": "61338ac613aea50cc8d2e9175c6184d8f215e741", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -1669,7 +1669,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Given a function block's `HirId`, returns its `FnDecl` if it exists, or `None` otherwise.\n     fn get_parent_fn_decl(&self, blk_id: hir::HirId) -> Option<(&'tcx hir::FnDecl<'tcx>, Ident)> {\n         let parent = self.tcx.hir().get_by_def_id(self.tcx.hir().get_parent_item(blk_id).def_id);\n-        self.get_node_fn_decl(parent).map(|(fn_decl, ident, _)| (fn_decl, ident))\n+        self.get_node_fn_decl(parent).map(|(_, fn_decl, ident, _)| (fn_decl, ident))\n     }\n \n     /// If `expr` is a `match` expression that has only one non-`!` arm, use that arm's tail"}, {"sha": "7a09ea40d7974b3b3af8b45e0039e79ff3728fb4", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -64,8 +64,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let expr = expr.peel_drop_temps();\n         self.suggest_missing_semicolon(err, expr, expected, false);\n         let mut pointing_at_return_type = false;\n-        if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n-            let fn_id = self.tcx.hir().get_return_block(blk_id).unwrap();\n+        if let Some((fn_id, fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n             pointing_at_return_type = self.suggest_missing_return_type(\n                 err,\n                 &fn_decl,"}, {"sha": "6e27bcc5bf3d157f2ce429259bb5cf7b4cd08091", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -85,20 +85,28 @@ impl<'a> std::fmt::Debug for ImportKind<'a> {\n             Single {\n                 ref source,\n                 ref target,\n+                ref source_bindings,\n+                ref target_bindings,\n                 ref type_ns_only,\n                 ref nested,\n                 ref id,\n-                // Ignore the following to avoid an infinite loop while printing.\n-                source_bindings: _,\n-                target_bindings: _,\n             } => f\n                 .debug_struct(\"Single\")\n                 .field(\"source\", source)\n                 .field(\"target\", target)\n+                // Ignore the nested bindings to avoid an infinite loop while printing.\n+                .field(\n+                    \"source_bindings\",\n+                    &source_bindings.clone().map(|b| b.into_inner().map(|_| format_args!(\"..\"))),\n+                )\n+                .field(\n+                    \"target_bindings\",\n+                    &target_bindings.clone().map(|b| b.into_inner().map(|_| format_args!(\"..\"))),\n+                )\n                 .field(\"type_ns_only\", type_ns_only)\n                 .field(\"nested\", nested)\n                 .field(\"id\", id)\n-                .finish_non_exhaustive(),\n+                .finish(),\n             Glob { ref is_prelude, ref max_vis, ref id } => f\n                 .debug_struct(\"Glob\")\n                 .field(\"is_prelude\", is_prelude)"}, {"sha": "1afd8851ce067b468e0d840955820853545947fe", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -1478,8 +1478,9 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                                     } else {\n                                         LifetimeUseSet::Many\n                                     }),\n-                                    LifetimeRibKind::Generics { .. } => None,\n-                                    LifetimeRibKind::ConstGeneric | LifetimeRibKind::AnonConst => {\n+                                    LifetimeRibKind::Generics { .. }\n+                                    | LifetimeRibKind::ConstGeneric => None,\n+                                    LifetimeRibKind::AnonConst => {\n                                         span_bug!(ident.span, \"unexpected rib kind: {:?}\", rib.kind)\n                                     }\n                                 })"}, {"sha": "373157bd9e836534bf06f1d49c08701bb33b9b31", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -1236,7 +1236,17 @@ pub fn link(_original: &Path, _link: &Path) -> io::Result<()> {\n }\n \n pub fn stat(path: &Path) -> io::Result<FileAttr> {\n-    metadata(path, ReparsePoint::Follow)\n+    match metadata(path, ReparsePoint::Follow) {\n+        Err(err) if err.raw_os_error() == Some(c::ERROR_CANT_ACCESS_FILE as i32) => {\n+            if let Ok(attrs) = lstat(path) {\n+                if !attrs.file_type().is_symlink() {\n+                    return Ok(attrs);\n+                }\n+            }\n+            Err(err)\n+        }\n+        result => result,\n+    }\n }\n \n pub fn lstat(path: &Path) -> io::Result<FileAttr> {"}, {"sha": "42d895a3413fbdc11acc6cd0f0442a6fc1b5bec3", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -210,10 +210,13 @@ install!((self, builder, _config),\n         }\n     };\n     LlvmTools, alias = \"llvm-tools\", Self::should_build(_config), only_hosts: true, {\n-        let tarball = builder\n-            .ensure(dist::LlvmTools { target: self.target })\n-            .expect(\"missing llvm-tools\");\n-        install_sh(builder, \"llvm-tools\", self.compiler.stage, Some(self.target), &tarball);\n+        if let Some(tarball) = builder.ensure(dist::LlvmTools { target: self.target }) {\n+            install_sh(builder, \"llvm-tools\", self.compiler.stage, Some(self.target), &tarball);\n+        } else {\n+            builder.info(\n+                &format!(\"skipping llvm-tools stage{} ({}): external LLVM\", self.compiler.stage, self.target),\n+            );\n+        }\n     };\n     Rustfmt, alias = \"rustfmt\", Self::should_build(_config), only_hosts: true, {\n         if let Some(tarball) = builder.ensure(dist::Rustfmt {"}, {"sha": "0ae68ad04f755af80b936d5a29639fda9102983a", "filename": "tests/ui/lifetimes/unusual-rib-combinations.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.rs?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -25,4 +25,9 @@ fn d<const C: S>() {}\n //~^ ERROR missing lifetime specifier\n //~| ERROR `S<'_>` is forbidden as the type of a const generic parameter\n \n+trait Foo<'a> {}\n+struct Bar<const N: &'a (dyn for<'a> Foo<'a>)>;\n+//~^ ERROR use of non-static lifetime `'a` in const generic\n+//~| ERROR `&dyn for<'a> Foo<'a>` is forbidden as the type of a const generic parameter\n+\n fn main() {}"}, {"sha": "20163d289b1381155df60d430954ca143291ae90", "filename": "tests/ui/lifetimes/unusual-rib-combinations.stderr", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.stderr?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -9,6 +9,14 @@ help: consider introducing a named lifetime parameter\n LL | fn d<'a, const C: S<'a>>() {}\n    |      +++           ++++\n \n+error[E0771]: use of non-static lifetime `'a` in const generic\n+  --> $DIR/unusual-rib-combinations.rs:29:22\n+   |\n+LL | struct Bar<const N: &'a (dyn for<'a> Foo<'a>)>;\n+   |                      ^^\n+   |\n+   = note: for more information, see issue #74052 <https://github.com/rust-lang/rust/issues/74052>\n+\n error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/unusual-rib-combinations.rs:7:16\n    |\n@@ -55,7 +63,16 @@ LL | fn d<const C: S>() {}\n    = note: the only supported types are integers, `bool` and `char`\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n-error: aborting due to 7 previous errors\n+error: `&dyn for<'a> Foo<'a>` is forbidden as the type of a const generic parameter\n+  --> $DIR/unusual-rib-combinations.rs:29:21\n+   |\n+LL | struct Bar<const N: &'a (dyn for<'a> Foo<'a>)>;\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n+\n+error: aborting due to 9 previous errors\n \n-Some errors have detailed explanations: E0106, E0214, E0308.\n+Some errors have detailed explanations: E0106, E0214, E0308, E0771.\n For more information about an error, try `rustc --explain E0106`."}, {"sha": "86a193c9e44acf54874186c917f37917b5d64474", "filename": "tests/ui/macros/issue-109237.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/tests%2Fui%2Fmacros%2Fissue-109237.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/tests%2Fui%2Fmacros%2Fissue-109237.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fissue-109237.rs?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -0,0 +1,7 @@\n+macro_rules! statement {\n+    () => {;}; //~ ERROR expected expression\n+}\n+\n+fn main() {\n+    let _ = statement!();\n+}"}, {"sha": "d125cff63eab217daff20e5e017549efca2933d0", "filename": "tests/ui/macros/issue-109237.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/tests%2Fui%2Fmacros%2Fissue-109237.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/tests%2Fui%2Fmacros%2Fissue-109237.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fissue-109237.stderr?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -0,0 +1,18 @@\n+error: expected expression, found `;`\n+  --> $DIR/issue-109237.rs:2:12\n+   |\n+LL |     () => {;};\n+   |            ^ expected expression\n+...\n+LL |     let _ = statement!();\n+   |             ------------ in this macro invocation\n+   |\n+   = note: the macro call doesn't expand to an expression, but it can expand to a statement\n+   = note: this error originates in the macro `statement` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: surround the macro invocation with `{}` to interpret the expansion as a statement\n+   |\n+LL |     let _ = { statement!(); };\n+   |             ~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+"}, {"sha": "87db2636fb24df67d437a3259e9f28776b08b9e0", "filename": "tests/ui/suggestions/bad-infer-in-trait-impl.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/tests%2Fui%2Fsuggestions%2Fbad-infer-in-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/tests%2Fui%2Fsuggestions%2Fbad-infer-in-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fbad-infer-in-trait-impl.rs?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -0,0 +1,10 @@\n+trait Foo {\n+    fn bar();\n+}\n+\n+impl Foo for () {\n+    fn bar(s: _) {}\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n+}\n+\n+fn main() {}"}, {"sha": "418690ff85fa21223c84ed37c3d88a1a94a38ed5", "filename": "tests/ui/suggestions/bad-infer-in-trait-impl.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/tests%2Fui%2Fsuggestions%2Fbad-infer-in-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/tests%2Fui%2Fsuggestions%2Fbad-infer-in-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fbad-infer-in-trait-impl.stderr?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -0,0 +1,14 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/bad-infer-in-trait-impl.rs:6:15\n+   |\n+LL |     fn bar(s: _) {}\n+   |               ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn bar<T>(s: T) {}\n+   |           +++    ~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "459b94f943b502a22cddea3c6c265acce8de5370", "filename": "tests/ui/suggestions/suggest-ret-on-async-w-late.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/tests%2Fui%2Fsuggestions%2Fsuggest-ret-on-async-w-late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/tests%2Fui%2Fsuggestions%2Fsuggest-ret-on-async-w-late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-ret-on-async-w-late.rs?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -0,0 +1,11 @@\n+// edition: 2021\n+\n+// Make sure we don't ICE when suggesting a return type\n+// for an async fn that has late-bound vars...\n+\n+async fn ice(_: &i32) {\n+    true\n+    //~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "bff864b222bff9394fae69ed5bf277cc8ab890b9", "filename": "tests/ui/suggestions/suggest-ret-on-async-w-late.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/tests%2Fui%2Fsuggestions%2Fsuggest-ret-on-async-w-late.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/tests%2Fui%2Fsuggestions%2Fsuggest-ret-on-async-w-late.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-ret-on-async-w-late.stderr?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-ret-on-async-w-late.rs:7:5\n+   |\n+LL | async fn ice(_: &i32) {\n+   |                       - help: try adding a return type: `-> bool`\n+LL |     true\n+   |     ^^^^ expected `()`, found `bool`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "50f0152e904f4706c1874bd043d834b46a9c1549", "filename": "tests/ui/traits/non_lifetime_binders/missing-assoc-item.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmissing-assoc-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmissing-assoc-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmissing-assoc-item.rs?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -0,0 +1,11 @@\n+#![feature(non_lifetime_binders)]\n+//~^ WARN the feature `non_lifetime_binders` is incomplete\n+\n+fn f()\n+where\n+    for<B> B::Item: Send,\n+    //~^ ERROR ambiguous associated type\n+{\n+}\n+\n+fn main() {}"}, {"sha": "be6955c111e834ff04fde224e7bbe3f90979e624", "filename": "tests/ui/traits/non_lifetime_binders/missing-assoc-item.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/85123d2504885e4670d80dab96f4f9629f2be98b/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmissing-assoc-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85123d2504885e4670d80dab96f4f9629f2be98b/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmissing-assoc-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmissing-assoc-item.stderr?ref=85123d2504885e4670d80dab96f4f9629f2be98b", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/missing-assoc-item.rs:1:12\n+   |\n+LL | #![feature(non_lifetime_binders)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/missing-assoc-item.rs:6:12\n+   |\n+LL |     for<B> B::Item: Send,\n+   |            ^^^^^^^ help: use the fully-qualified path: `<B as IntoIterator>::Item`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0223`."}]}