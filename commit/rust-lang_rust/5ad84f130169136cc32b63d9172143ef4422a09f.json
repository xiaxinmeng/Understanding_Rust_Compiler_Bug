{"sha": "5ad84f130169136cc32b63d9172143ef4422a09f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZDg0ZjEzMDE2OTEzNmNjMzJiNjNkOTE3MjE0M2VmNDQyMmEwOWY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-17T22:45:05Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-18T00:02:50Z"}, "message": "Replace the field `imports` in Module with `unresolved_imports` and refactor away `resolved_import_count`", "tree": {"sha": "0899fc0f2c82e07b7aa41337248b22c824f035c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0899fc0f2c82e07b7aa41337248b22c824f035c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ad84f130169136cc32b63d9172143ef4422a09f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ad84f130169136cc32b63d9172143ef4422a09f", "html_url": "https://github.com/rust-lang/rust/commit/5ad84f130169136cc32b63d9172143ef4422a09f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ad84f130169136cc32b63d9172143ef4422a09f/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "845ad1b4ed9e1ca67abaa20414698c1fa0959489", "url": "https://api.github.com/repos/rust-lang/rust/commits/845ad1b4ed9e1ca67abaa20414698c1fa0959489", "html_url": "https://github.com/rust-lang/rust/commit/845ad1b4ed9e1ca67abaa20414698c1fa0959489"}], "stats": {"total": 72, "additions": 16, "deletions": 56}, "files": [{"sha": "a25968174fd4eeda26be50ce06dbb20caf5f3ee6", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ad84f130169136cc32b63d9172143ef4422a09f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad84f130169136cc32b63d9172143ef4422a09f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=5ad84f130169136cc32b63d9172143ef4422a09f", "patch": "@@ -19,7 +19,7 @@ use resolve_imports::ImportDirectiveSubclass::{self, SingleImport, GlobImport};\n use Module;\n use Namespace::{self, TypeNS, ValueNS};\n use {NameBinding, NameBindingKind};\n-use {names_to_string, module_to_string};\n+use module_to_string;\n use ParentLink::{ModuleParentLink, BlockParentLink};\n use Resolver;\n use resolve_imports::Shadowable;\n@@ -682,7 +682,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                               id: NodeId,\n                               is_public: bool,\n                               shadowable: Shadowable) {\n-        module_.imports\n+        module_.unresolved_imports\n                .borrow_mut()\n                .push(ImportDirective::new(module_path, subclass, span, id, is_public, shadowable));\n         self.unresolved_imports += 1;\n@@ -696,9 +696,6 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n         match subclass {\n             SingleImport(target, _) => {\n-                debug!(\"(building import directive) building import directive: {}::{}\",\n-                       names_to_string(&module_.imports.borrow().last().unwrap().module_path),\n-                       target);\n                 module_.increment_outstanding_references_for(target, ValueNS);\n                 module_.increment_outstanding_references_for(target, TypeNS);\n             }"}, {"sha": "6d04e69138b1f1a88e73cb0b4338a0bb0410cf1a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5ad84f130169136cc32b63d9172143ef4422a09f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad84f130169136cc32b63d9172143ef4422a09f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5ad84f130169136cc32b63d9172143ef4422a09f", "patch": "@@ -18,7 +18,6 @@\n #![cfg_attr(not(stage0), deny(warnings))]\n \n #![feature(associated_consts)]\n-#![feature(borrow_state)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n@@ -799,7 +798,7 @@ pub struct ModuleS<'a> {\n     is_extern_crate: bool,\n \n     resolutions: RefCell<HashMap<(Name, Namespace), NameResolution<'a>>>,\n-    imports: RefCell<Vec<ImportDirective>>,\n+    unresolved_imports: RefCell<Vec<ImportDirective>>,\n \n     // The module children of this node, including normal modules and anonymous modules.\n     // Anonymous children are pseudo-modules that are implicitly created around items\n@@ -828,9 +827,6 @@ pub struct ModuleS<'a> {\n     // The number of unresolved pub glob imports in this module\n     pub_glob_count: Cell<usize>,\n \n-    // The index of the import we're resolving.\n-    resolved_import_count: Cell<usize>,\n-\n     // Whether this module is populated. If not populated, any attempt to\n     // access the children must be preceded with a\n     // `populate_module_if_necessary` call.\n@@ -847,13 +843,12 @@ impl<'a> ModuleS<'a> {\n             is_public: is_public,\n             is_extern_crate: false,\n             resolutions: RefCell::new(HashMap::new()),\n-            imports: RefCell::new(Vec::new()),\n+            unresolved_imports: RefCell::new(Vec::new()),\n             module_children: RefCell::new(NodeMap()),\n             shadowed_traits: RefCell::new(Vec::new()),\n             glob_count: Cell::new(0),\n             pub_count: Cell::new(0),\n             pub_glob_count: Cell::new(0),\n-            resolved_import_count: Cell::new(0),\n             populated: Cell::new(!external),\n         }\n     }\n@@ -924,15 +919,6 @@ impl<'a> ModuleS<'a> {\n         }\n     }\n \n-    fn all_imports_resolved(&self) -> bool {\n-        if self.imports.borrow_state() == ::std::cell::BorrowState::Writing {\n-            // it is currently being resolved ! so nope\n-            false\n-        } else {\n-            self.imports.borrow().len() == self.resolved_import_count.get()\n-        }\n-    }\n-\n     pub fn inc_glob_count(&self) {\n         self.glob_count.set(self.glob_count.get() + 1);\n     }\n@@ -1622,13 +1608,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     }\n \n     fn report_unresolved_imports(&mut self, module_: Module<'a>) {\n-        let index = module_.resolved_import_count.get();\n-        let imports = module_.imports.borrow();\n-        let import_count = imports.len();\n-        if index != import_count {\n-            resolve_error(self,\n-                          (*imports)[index].span,\n-                          ResolutionError::UnresolvedImport(None));\n+        for import in module_.unresolved_imports.borrow().iter() {\n+            resolve_error(self, import.span, ResolutionError::UnresolvedImport(None));\n+            break;\n         }\n \n         // Descend into children and anonymous children."}, {"sha": "a0396754282158fe6549bbfcee0c4a16f9a0b451", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 9, "deletions": 28, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5ad84f130169136cc32b63d9172143ef4422a09f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad84f130169136cc32b63d9172143ef4422a09f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=5ad84f130169136cc32b63d9172143ef4422a09f", "patch": "@@ -252,47 +252,28 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n     fn resolve_imports_for_module(&mut self,\n                                   module: Module<'b>,\n                                   errors: &mut Vec<ImportResolvingError<'b>>) {\n-        if module.all_imports_resolved() {\n-            debug!(\"(resolving imports for module) all imports resolved for {}\",\n-                   module_to_string(&module));\n-            return;\n-        }\n+        let mut imports = Vec::new();\n+        let mut unresolved_imports = module.unresolved_imports.borrow_mut();\n+        ::std::mem::swap(&mut imports, &mut unresolved_imports);\n \n-        let mut imports = module.imports.borrow_mut();\n-        let import_count = imports.len();\n-        let mut indeterminate_imports = Vec::new();\n-        while module.resolved_import_count.get() + indeterminate_imports.len() < import_count {\n-            let import_index = module.resolved_import_count.get();\n-            match self.resolve_import_for_module(module, &imports[import_index]) {\n-                ResolveResult::Failed(err) => {\n-                    let import_directive = &imports[import_index];\n+        for import_directive in imports {\n+            match self.resolve_import_for_module(module, &import_directive) {\n+                Failed(err) => {\n                     let (span, help) = match err {\n                         Some((span, msg)) => (span, format!(\". {}\", msg)),\n                         None => (import_directive.span, String::new()),\n                     };\n                     errors.push(ImportResolvingError {\n                         source_module: module,\n-                        import_directive: import_directive.clone(),\n+                        import_directive: import_directive,\n                         span: span,\n                         help: help,\n                     });\n-                    module.resolved_import_count.set(module.resolved_import_count.get() + 1);\n-                    continue;\n-                }\n-                ResolveResult::Indeterminate => {}\n-                ResolveResult::Success(()) => {\n-                    // count success\n-                    module.resolved_import_count\n-                          .set(module.resolved_import_count.get() + 1);\n-                    continue;\n                 }\n+                Indeterminate => unresolved_imports.push(import_directive),\n+                Success(()) => {}\n             }\n-            // This resolution was not successful, keep it for later\n-            indeterminate_imports.push(imports.swap_remove(import_index));\n-\n         }\n-\n-        imports.extend(indeterminate_imports);\n     }\n \n     /// Attempts to resolve the given import. The return value indicates"}]}