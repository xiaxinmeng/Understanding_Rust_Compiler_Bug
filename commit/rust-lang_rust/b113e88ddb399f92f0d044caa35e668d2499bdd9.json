{"sha": "b113e88ddb399f92f0d044caa35e668d2499bdd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMTNlODhkZGIzOTlmOTJmMGQwNDRjYWEzNWU2NjhkMjQ5OWJkZDk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-24T12:41:19Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-24T12:41:19Z"}, "message": "Fix warnings", "tree": {"sha": "51c9ebf65a5cccee9520bbeccdf3712099cd1a8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51c9ebf65a5cccee9520bbeccdf3712099cd1a8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b113e88ddb399f92f0d044caa35e668d2499bdd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b113e88ddb399f92f0d044caa35e668d2499bdd9", "html_url": "https://github.com/rust-lang/rust/commit/b113e88ddb399f92f0d044caa35e668d2499bdd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b113e88ddb399f92f0d044caa35e668d2499bdd9/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc76cd0551d140f1455cb0969de070cc2cd3fdcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc76cd0551d140f1455cb0969de070cc2cd3fdcc", "html_url": "https://github.com/rust-lang/rust/commit/dc76cd0551d140f1455cb0969de070cc2cd3fdcc"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "dc6908fc72dcff4625a7ac3421d7f34c7d75d21e", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b113e88ddb399f92f0d044caa35e668d2499bdd9/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b113e88ddb399f92f0d044caa35e668d2499bdd9/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=b113e88ddb399f92f0d044caa35e668d2499bdd9", "patch": "@@ -130,7 +130,9 @@ pub(super) fn adjust_arg_for_abi<'tcx>(\n pub(super) fn cvalue_for_param<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     start_block: Block,\n+    #[cfg_attr(not(debug_assertions), allow(unused_variables))]\n     local: Option<mir::Local>,\n+    #[cfg_attr(not(debug_assertions), allow(unused_variables))]\n     local_field: Option<usize>,\n     arg_ty: Ty<'tcx>,\n ) -> Option<CValue<'tcx>> {"}, {"sha": "0262728bb67c3db9827212b28ff3a2ab087f8698", "filename": "src/abi/returning.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b113e88ddb399f92f0d044caa35e668d2499bdd9/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b113e88ddb399f92f0d044caa35e668d2499bdd9/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=b113e88ddb399f92f0d044caa35e668d2499bdd9", "patch": "@@ -43,6 +43,9 @@ pub(super) fn codegen_return_param(\n         PassMode::ByRef { sized: false } => todo!(),\n     };\n \n+    #[cfg(not(debug_assertions))]\n+    let _ = ret_param;\n+\n     #[cfg(debug_assertions)]\n     crate::abi::comments::add_arg_comment(\n         fx,"}, {"sha": "29ad5321d5772e75f13bea062a0010735fa66a21", "filename": "src/optimize/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b113e88ddb399f92f0d044caa35e668d2499bdd9/src%2Foptimize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b113e88ddb399f92f0d044caa35e668d2499bdd9/src%2Foptimize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fmod.rs?ref=b113e88ddb399f92f0d044caa35e668d2499bdd9", "patch": "@@ -5,6 +5,7 @@ mod stack2reg;\n \n pub fn optimize_function<'tcx>(\n     tcx: TyCtxt<'tcx>,\n+    #[cfg_attr(not(debug_assertions), allow(unused_variables))]\n     instance: Instance<'tcx>,\n     ctx: &mut Context,\n     cold_blocks: &EntitySet<Block>,"}, {"sha": "b21f838111c263bcc973cc6a7d90e0767f6b8373", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b113e88ddb399f92f0d044caa35e668d2499bdd9/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b113e88ddb399f92f0d044caa35e668d2499bdd9/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=b113e88ddb399f92f0d044caa35e668d2499bdd9", "patch": "@@ -162,6 +162,7 @@ impl<'a> OptimizeContext<'a> {\n \n pub(super) fn optimize_function(\n     ctx: &mut Context,\n+    #[cfg_attr(not(debug_assertions), allow(unused_variables))]\n     clif_comments: &mut crate::pretty_clif::CommentWriter,\n ) {\n     combine_stack_addr_with_load_store(&mut ctx.func);"}, {"sha": "b9183aeedc9e27a4d3989c1a4854bb1553f2164f", "filename": "src/pointer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b113e88ddb399f92f0d044caa35e668d2499bdd9/src%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b113e88ddb399f92f0d044caa35e668d2499bdd9/src%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpointer.rs?ref=b113e88ddb399f92f0d044caa35e668d2499bdd9", "patch": "@@ -37,6 +37,7 @@ impl Pointer {\n         }\n     }\n \n+    #[cfg(debug_assertions)]\n     pub fn base_and_offset(self) -> (PointerBase, Offset32) {\n         (self.base, self.offset)\n     }"}, {"sha": "725df448161ad21401f0ceb46444e81cdc2658d8", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b113e88ddb399f92f0d044caa35e668d2499bdd9/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b113e88ddb399f92f0d044caa35e668d2499bdd9/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=b113e88ddb399f92f0d044caa35e668d2499bdd9", "patch": "@@ -1,12 +1,10 @@\n-use std::borrow::Cow;\n use std::collections::HashMap;\n use std::fmt;\n \n use cranelift_codegen::{\n     entity::SecondaryMap,\n-    ir::{self, entities::AnyEntity, function::DisplayFunctionAnnotations},\n+    ir::{entities::AnyEntity, function::DisplayFunctionAnnotations},\n     write::{FuncWriter, PlainWriter},\n-    ValueLabelsRanges,\n };\n \n use crate::prelude::*;\n@@ -103,7 +101,7 @@ impl CommentWriter {\n         self.global_comments.push(comment.into());\n     }\n \n-    pub fn add_comment<'s, S: Into<Cow<'s, str>>, E: Into<AnyEntity>>(\n+    pub fn add_comment<S: Into<String> + AsRef<str>, E: Into<AnyEntity>>(\n         &mut self,\n         entity: E,\n         comment: S,\n@@ -112,10 +110,10 @@ impl CommentWriter {\n         match self.entity_comments.entry(entity.into()) {\n             Entry::Occupied(mut occ) => {\n                 occ.get_mut().push('\\n');\n-                occ.get_mut().push_str(comment.into().as_ref());\n+                occ.get_mut().push_str(comment.as_ref());\n             }\n             Entry::Vacant(vac) => {\n-                vac.insert(comment.into().into_owned());\n+                vac.insert(comment.into());\n             }\n         }\n     }\n@@ -192,7 +190,7 @@ impl<'a, 'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n         self.clif_comments.add_global_comment(comment);\n     }\n \n-    pub fn add_comment<'s, S: Into<Cow<'s, str>>, E: Into<AnyEntity>>(\n+    pub fn add_comment<S: Into<String> + AsRef<str>, E: Into<AnyEntity>>(\n         &mut self,\n         entity: E,\n         comment: S,\n@@ -206,9 +204,9 @@ pub fn write_clif_file<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     postfix: &str,\n     instance: Instance<'tcx>,\n-    func: &ir::Function,\n+    func: &cranelift_codegen::ir::Function,\n     mut clif_comments: &CommentWriter,\n-    value_ranges: Option<&ValueLabelsRanges>,\n+    value_ranges: Option<&cranelift_codegen::ValueLabelsRanges>,\n ) {\n     use std::io::Write;\n "}]}