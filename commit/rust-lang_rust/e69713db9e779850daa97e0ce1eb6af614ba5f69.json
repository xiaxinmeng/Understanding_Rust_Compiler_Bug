{"sha": "e69713db9e779850daa97e0ce1eb6af614ba5f69", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2OTcxM2RiOWU3Nzk4NTBkYWE5N2UwY2UxZWI2YWY2MTRiYTVmNjk=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-12-19T03:52:55Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-12-28T23:17:53Z"}, "message": "Add comments and simplify MIR graphviz code.", "tree": {"sha": "863fb39811b98e21ca04fa43192318045bdc440f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/863fb39811b98e21ca04fa43192318045bdc440f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e69713db9e779850daa97e0ce1eb6af614ba5f69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e69713db9e779850daa97e0ce1eb6af614ba5f69", "html_url": "https://github.com/rust-lang/rust/commit/e69713db9e779850daa97e0ce1eb6af614ba5f69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e69713db9e779850daa97e0ce1eb6af614ba5f69/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9000ecf7611d732cf0a239e7c224edd6fa6d886d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9000ecf7611d732cf0a239e7c224edd6fa6d886d", "html_url": "https://github.com/rust-lang/rust/commit/9000ecf7611d732cf0a239e7c224edd6fa6d886d"}], "stats": {"total": 78, "additions": 47, "deletions": 31}, "files": [{"sha": "87c3982a36c4e40f1fb2f0c6a9b024ce78bc12b2", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e69713db9e779850daa97e0ce1eb6af614ba5f69/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69713db9e779850daa97e0ce1eb6af614ba5f69/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=e69713db9e779850daa97e0ce1eb6af614ba5f69", "patch": "@@ -344,6 +344,9 @@ impl<'tcx> Debug for Terminator<'tcx> {\n }\n \n impl<'tcx> Terminator<'tcx> {\n+    /// Write the \"head\" part of the terminator; that is, its name and the data it uses to pick the\n+    /// successor basic block, if any. The only information not inlcuded is the list of possible\n+    /// successors, which may be rendered differently between the text and the graphviz format.\n     pub fn fmt_head<W: Write>(&self, fmt: &mut W) -> Result<(), Error> {\n         use self::Terminator::*;\n         match *self {\n@@ -367,6 +370,7 @@ impl<'tcx> Terminator<'tcx> {\n         }\n     }\n \n+    /// Return the list of labels for the edges to the successor basic blocks.\n     pub fn fmt_successor_labels(&self) -> Vec<Cow<'static, str>> {\n         use self::Terminator::*;\n         match *self {\n@@ -783,6 +787,7 @@ impl<'tcx> Debug for Literal<'tcx> {\n     }\n }\n \n+/// Write a `ConstVal` in a way closer to the original source code than the `Debug` output.\n pub fn fmt_const_val<W: Write>(fmt: &mut W, const_val: &ConstVal) -> Result<(), Error> {\n     use middle::const_eval::ConstVal::*;\n     match *const_val {"}, {"sha": "43001aeef660babddf961a8ebf972f067f2d1a0e", "filename": "src/librustc_mir/graphviz.rs", "status": "modified", "additions": 42, "deletions": 31, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/e69713db9e779850daa97e0ce1eb6af614ba5f69/src%2Flibrustc_mir%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69713db9e779850daa97e0ce1eb6af614ba5f69/src%2Flibrustc_mir%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fgraphviz.rs?ref=e69713db9e779850daa97e0ce1eb6af614ba5f69", "patch": "@@ -11,15 +11,17 @@\n use dot;\n use rustc::mir::repr::*;\n use rustc::middle::ty;\n+use std::fmt::Debug;\n use std::io::{self, Write};\n \n+/// Write a graphviz DOT graph for the given MIR.\n pub fn write_mir_graphviz<W: Write>(mir: &Mir, w: &mut W) -> io::Result<()> {\n     try!(writeln!(w, \"digraph Mir {{\"));\n \n     // Global graph properties\n-    try!(writeln!(w, r#\"graph [fontname=\"monospace\"];\"#));\n-    try!(writeln!(w, r#\"node [fontname=\"monospace\"];\"#));\n-    try!(writeln!(w, r#\"edge [fontname=\"monospace\"];\"#));\n+    try!(writeln!(w, r#\"    graph [fontname=\"monospace\"];\"#));\n+    try!(writeln!(w, r#\"    node [fontname=\"monospace\"];\"#));\n+    try!(writeln!(w, r#\"    edge [fontname=\"monospace\"];\"#));\n \n     // Graph label\n     try!(write_graph_label(mir, w));\n@@ -37,84 +39,93 @@ pub fn write_mir_graphviz<W: Write>(mir: &Mir, w: &mut W) -> io::Result<()> {\n     writeln!(w, \"}}\")\n }\n \n+/// Write a graphviz DOT node for the given basic block.\n fn write_node<W: Write>(block: BasicBlock, mir: &Mir, w: &mut W) -> io::Result<()> {\n     let data = mir.basic_block_data(block);\n \n-    try!(write!(w, r#\"bb{} [shape=\"none\", label=<\"#, block.index()));\n+    // Start a new node with the label to follow, in one of DOT's pseudo-HTML tables.\n+    try!(write!(w, r#\"    {} [shape=\"none\", label=<\"#, node(block)));\n     try!(write!(w, r#\"<table border=\"0\" cellborder=\"1\" cellspacing=\"0\">\"#));\n \n-    try!(write!(w, r#\"<tr><td bgcolor=\"gray\" align=\"center\">\"#));\n-    try!(write!(w, \"{}\", block.index()));\n-    try!(write!(w, \"</td></tr>\"));\n+    // Basic block number at the top.\n+    try!(write!(w, r#\"<tr><td bgcolor=\"gray\" align=\"center\">{}</td></tr>\"#, block.index()));\n \n+    // List of statements in the middle.\n     if !data.statements.is_empty() {\n         try!(write!(w, r#\"<tr><td align=\"left\" balign=\"left\">\"#));\n         for statement in &data.statements {\n-            try!(write!(w, \"{}\", dot::escape_html(&format!(\"{:?}\", statement))));\n-            try!(write!(w, \"<br/>\"));\n+            try!(write!(w, \"{}<br/>\", escape(statement)));\n         }\n         try!(write!(w, \"</td></tr>\"));\n     }\n \n-    try!(write!(w, r#\"<tr><td align=\"left\">\"#));\n-\n+    // Terminator head at the bottom, not including the list of successor blocks. Those will be\n+    // displayed as labels on the edges between blocks.\n     let mut terminator_head = String::new();\n     data.terminator.fmt_head(&mut terminator_head).unwrap();\n-    try!(write!(w, \"{}\", dot::escape_html(&terminator_head)));\n-    try!(write!(w, \"</td></tr>\"));\n+    try!(write!(w, r#\"<tr><td align=\"left\">{}</td></tr>\"#, dot::escape_html(&terminator_head)));\n \n-    try!(write!(w, \"</table>\"));\n-    writeln!(w, \">];\")\n+    // Close the table, node label, and the node itself.\n+    writeln!(w, \"</table>>];\")\n }\n \n+/// Write graphviz DOT edges with labels between the given basic block and all of its successors.\n fn write_edges<W: Write>(source: BasicBlock, mir: &Mir, w: &mut W) -> io::Result<()> {\n     let terminator = &mir.basic_block_data(source).terminator;\n     let labels = terminator.fmt_successor_labels();\n \n-    for (i, target) in terminator.successors().into_iter().enumerate() {\n-        try!(write!(w, \"bb{} -> bb{}\", source.index(), target.index()));\n-        try!(writeln!(w, r#\" [label=\"{}\"];\"#, labels[i]));\n+    for (&target, label) in terminator.successors().iter().zip(labels) {\n+        try!(writeln!(w, r#\"    {} -> {} [label=\"{}\"];\"#, node(source), node(target), label));\n     }\n \n     Ok(())\n }\n \n+/// Write the graphviz DOT label for the overall graph. This is essentially a block of text that\n+/// will appear below the graph, showing the type of the `fn` this MIR represents and the types of\n+/// all the variables and temporaries.\n fn write_graph_label<W: Write>(mir: &Mir, w: &mut W) -> io::Result<()> {\n-    try!(write!(w, \"label=<\"));\n-    try!(write!(w, \"fn(\"));\n+    try!(write!(w, \"    label=<fn(\"));\n \n+    // fn argument types.\n     for (i, arg) in mir.arg_decls.iter().enumerate() {\n         if i > 0 {\n             try!(write!(w, \", \"));\n         }\n-        try!(write!(w, \"{}\", dot::escape_html(&format!(\"a{}: {:?}\", i, arg.ty))));\n+        try!(write!(w, \"a{}: {}\", i, escape(&arg.ty)));\n     }\n \n-    try!(write!(w, \"{}\", dot::escape_html(\") -> \")));\n+    try!(write!(w, \") -&gt; \"));\n \n+    // fn return type.\n     match mir.return_ty {\n-        ty::FnOutput::FnConverging(ty) =>\n-            try!(write!(w, \"{}\", dot::escape_html(&format!(\"{:?}\", ty)))),\n-        ty::FnOutput::FnDiverging =>\n-            try!(write!(w, \"{}\", dot::escape_html(\"!\"))),\n+        ty::FnOutput::FnConverging(ty) => try!(write!(w, \"{}\", escape(ty))),\n+        ty::FnOutput::FnDiverging => try!(write!(w, \"!\")),\n     }\n \n     try!(write!(w, r#\"<br align=\"left\"/>\"#));\n \n+    // User variable types (including the user's name in a comment).\n     for (i, var) in mir.var_decls.iter().enumerate() {\n         try!(write!(w, \"let \"));\n         if var.mutability == Mutability::Mut {\n             try!(write!(w, \"mut \"));\n         }\n-        let text = format!(\"v{}: {:?}; // {}\", i, var.ty, var.name);\n-        try!(write!(w, \"{}\", dot::escape_html(&text)));\n-        try!(write!(w, r#\"<br align=\"left\"/>\"#));\n+        try!(write!(w, r#\"v{}: {}; // {}<br align=\"left\"/>\"#, i, escape(&var.ty), var.name));\n     }\n \n+    // Compiler-introduced temporary types.\n     for (i, temp) in mir.temp_decls.iter().enumerate() {\n-        try!(write!(w, \"{}\", dot::escape_html(&format!(\"let t{}: {:?};\", i, temp.ty))));\n-        try!(write!(w, r#\"<br align=\"left\"/>\"#));\n+        try!(write!(w, r#\"let t{}: {};<br align=\"left\"/>\"#, i, escape(&temp.ty)));\n     }\n \n     writeln!(w, \">;\")\n }\n+\n+fn node(block: BasicBlock) -> String {\n+    format!(\"bb{}\", block.index())\n+}\n+\n+fn escape<T: Debug>(t: &T) -> String {\n+    dot::escape_html(&format!(\"{:?}\", t))\n+}"}]}