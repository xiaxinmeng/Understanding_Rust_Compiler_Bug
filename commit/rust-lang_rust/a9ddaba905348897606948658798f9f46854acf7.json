{"sha": "a9ddaba905348897606948658798f9f46854acf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZGRhYmE5MDUzNDg4OTc2MDY5NDg2NTg3OThmOWY0Njg1NGFjZjc=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-03-16T16:21:32Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-03-16T16:21:32Z"}, "message": "Refactor FnSig a bit", "tree": {"sha": "f907c61b8a13f33c2c9f315651d938b9dca0579d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f907c61b8a13f33c2c9f315651d938b9dca0579d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9ddaba905348897606948658798f9f46854acf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ddaba905348897606948658798f9f46854acf7", "html_url": "https://github.com/rust-lang/rust/commit/a9ddaba905348897606948658798f9f46854acf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9ddaba905348897606948658798f9f46854acf7/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "628b530e92c1579f3924c37290ad59ac0512d2a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/628b530e92c1579f3924c37290ad59ac0512d2a0", "html_url": "https://github.com/rust-lang/rust/commit/628b530e92c1579f3924c37290ad59ac0512d2a0"}], "stats": {"total": 174, "additions": 104, "deletions": 70}, "files": [{"sha": "31f726f3584a8b10f1dedbcf0d654b959b706fc2", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 47, "deletions": 34, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/a9ddaba905348897606948658798f9f46854acf7/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ddaba905348897606948658798f9f46854acf7/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=a9ddaba905348897606948658798f9f46854acf7", "patch": "@@ -78,7 +78,7 @@ pub enum Ty {\n         /// The definition of the function / constructor.\n         def: CallableDef,\n         /// Parameters and return type\n-        sig: Arc<FnSig>,\n+        sig: FnSig,\n         /// Substitutions for the generic parameters of the type\n         substs: Substs,\n     },\n@@ -91,7 +91,7 @@ pub enum Ty {\n     /// fn foo() -> i32 { 1 }\n     /// let bar: fn() -> i32 = foo;\n     /// ```\n-    FnPtr(Arc<FnSig>),\n+    FnPtr(FnSig),\n \n     /// The never type `!`.\n     Never,\n@@ -128,13 +128,44 @@ impl Substs {\n     pub fn empty() -> Substs {\n         Substs(Arc::new([]))\n     }\n+\n+    pub fn walk_mut(&mut self, f: &mut impl FnMut(&mut Ty)) {\n+        // Without an Arc::make_mut_slice, we can't avoid the clone here:\n+        let mut v: Vec<_> = self.0.iter().cloned().collect();\n+        for t in &mut v {\n+            t.walk_mut(f);\n+        }\n+        self.0 = v.into();\n+    }\n }\n \n /// A function signature.\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct FnSig {\n-    input: Vec<Ty>,\n-    output: Ty,\n+    params_and_return: Arc<[Ty]>,\n+}\n+\n+impl FnSig {\n+    pub fn from_params_and_return(mut params: Vec<Ty>, ret: Ty) -> FnSig {\n+        params.push(ret);\n+        FnSig { params_and_return: params.into() }\n+    }\n+    pub fn params(&self) -> &[Ty] {\n+        &self.params_and_return[0..self.params_and_return.len() - 1]\n+    }\n+\n+    pub fn ret(&self) -> &Ty {\n+        &self.params_and_return[self.params_and_return.len() - 1]\n+    }\n+\n+    pub fn walk_mut(&mut self, f: &mut impl FnMut(&mut Ty)) {\n+        // Without an Arc::make_mut_slice, we can't avoid the clone here:\n+        let mut v: Vec<_> = self.params_and_return.iter().cloned().collect();\n+        for t in &mut v {\n+            t.walk_mut(f);\n+        }\n+        self.params_and_return = v.into();\n+    }\n }\n \n impl Ty {\n@@ -153,16 +184,16 @@ impl Ty {\n                 }\n             }\n             Ty::FnPtr(sig) => {\n-                for input in &sig.input {\n+                for input in sig.params() {\n                     input.walk(f);\n                 }\n-                sig.output.walk(f);\n+                sig.ret().walk(f);\n             }\n             Ty::FnDef { substs, sig, .. } => {\n-                for input in &sig.input {\n+                for input in sig.params() {\n                     input.walk(f);\n                 }\n-                sig.output.walk(f);\n+                sig.ret().walk(f);\n                 for t in substs.0.iter() {\n                     t.walk(f);\n                 }\n@@ -199,32 +230,14 @@ impl Ty {\n                 *ts = v.into();\n             }\n             Ty::FnPtr(sig) => {\n-                let sig_mut = Arc::make_mut(sig);\n-                for input in &mut sig_mut.input {\n-                    input.walk_mut(f);\n-                }\n-                sig_mut.output.walk_mut(f);\n+                sig.walk_mut(f);\n             }\n             Ty::FnDef { substs, sig, .. } => {\n-                let sig_mut = Arc::make_mut(sig);\n-                for input in &mut sig_mut.input {\n-                    input.walk_mut(f);\n-                }\n-                sig_mut.output.walk_mut(f);\n-                // Without an Arc::make_mut_slice, we can't avoid the clone here:\n-                let mut v: Vec<_> = substs.0.iter().cloned().collect();\n-                for t in &mut v {\n-                    t.walk_mut(f);\n-                }\n-                substs.0 = v.into();\n+                sig.walk_mut(f);\n+                substs.walk_mut(f);\n             }\n             Ty::Adt { substs, .. } => {\n-                // Without an Arc::make_mut_slice, we can't avoid the clone here:\n-                let mut v: Vec<_> = substs.0.iter().cloned().collect();\n-                for t in &mut v {\n-                    t.walk_mut(f);\n-                }\n-                substs.0 = v.into();\n+                substs.walk_mut(f);\n             }\n             Ty::Bool\n             | Ty::Char\n@@ -328,8 +341,8 @@ impl HirDisplay for Ty {\n             }\n             Ty::FnPtr(sig) => {\n                 write!(f, \"fn(\")?;\n-                f.write_joined(&sig.input, \", \")?;\n-                write!(f, \") -> {}\", sig.output.display(f.db))?;\n+                f.write_joined(sig.params(), \", \")?;\n+                write!(f, \") -> {}\", sig.ret().display(f.db))?;\n             }\n             Ty::FnDef { def, substs, sig, .. } => {\n                 let name = match def {\n@@ -347,8 +360,8 @@ impl HirDisplay for Ty {\n                     write!(f, \">\")?;\n                 }\n                 write!(f, \"(\")?;\n-                f.write_joined(&sig.input, \", \")?;\n-                write!(f, \") -> {}\", sig.output.display(f.db))?;\n+                f.write_joined(sig.params(), \", \")?;\n+                write!(f, \") -> {}\", sig.ret().display(f.db))?;\n             }\n             Ty::Adt { def_id, substs, .. } => {\n                 let name = match def_id {"}, {"sha": "2eb73726e777a12fbf44b3edf49d3d1d7f9dcd73", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a9ddaba905348897606948658798f9f46854acf7/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ddaba905348897606948658798f9f46854acf7/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=a9ddaba905348897606948658798f9f46854acf7", "patch": "@@ -724,11 +724,11 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             Expr::Call { callee, args } => {\n                 let callee_ty = self.infer_expr(*callee, &Expectation::none());\n                 let (param_tys, ret_ty) = match &callee_ty {\n-                    Ty::FnPtr(sig) => (sig.input.clone(), sig.output.clone()),\n+                    Ty::FnPtr(sig) => (sig.params().to_vec(), sig.ret().clone()),\n                     Ty::FnDef { substs, sig, .. } => {\n-                        let ret_ty = sig.output.clone().subst(&substs);\n+                        let ret_ty = sig.ret().clone().subst(&substs);\n                         let param_tys =\n-                            sig.input.iter().map(|ty| ty.clone().subst(&substs)).collect();\n+                            sig.params().iter().map(|ty| ty.clone().subst(&substs)).collect();\n                         (param_tys, ret_ty)\n                     }\n                     _ => {\n@@ -762,19 +762,20 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let method_ty = self.insert_type_vars(method_ty);\n                 let (expected_receiver_ty, param_tys, ret_ty) = match &method_ty {\n                     Ty::FnPtr(sig) => {\n-                        if !sig.input.is_empty() {\n-                            (sig.input[0].clone(), sig.input[1..].to_vec(), sig.output.clone())\n+                        if !sig.params().is_empty() {\n+                            (sig.params()[0].clone(), sig.params()[1..].to_vec(), sig.ret().clone())\n                         } else {\n-                            (Ty::Unknown, Vec::new(), sig.output.clone())\n+                            (Ty::Unknown, Vec::new(), sig.ret().clone())\n                         }\n                     }\n                     Ty::FnDef { substs, sig, .. } => {\n-                        let ret_ty = sig.output.clone().subst(&substs);\n+                        let ret_ty = sig.ret().clone().subst(&substs);\n \n-                        if !sig.input.is_empty() {\n-                            let mut arg_iter = sig.input.iter().map(|ty| ty.clone().subst(&substs));\n-                            let receiver_ty = arg_iter.next().unwrap();\n-                            (receiver_ty, arg_iter.collect(), ret_ty)\n+                        if !sig.params().is_empty() {\n+                            let mut params_iter =\n+                                sig.params().iter().map(|ty| ty.clone().subst(&substs));\n+                            let receiver_ty = params_iter.next().unwrap();\n+                            (receiver_ty, params_iter.collect(), ret_ty)\n                         } else {\n                             (Ty::Unknown, Vec::new(), ret_ty)\n                         }"}, {"sha": "7d065203afdfa4da9a1c11377b92dcfafbda5a97", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 45, "deletions": 25, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a9ddaba905348897606948658798f9f46854acf7/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ddaba905348897606948658798f9f46854acf7/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=a9ddaba905348897606948658798f9f46854acf7", "patch": "@@ -51,12 +51,10 @@ impl Ty {\n             }\n             TypeRef::Placeholder => Ty::Unknown,\n             TypeRef::Fn(params) => {\n-                let mut inner_tys =\n+                let inner_tys =\n                     params.iter().map(|tr| Ty::from_hir(db, resolver, tr)).collect::<Vec<_>>();\n-                let return_ty =\n-                    inner_tys.pop().expect(\"TypeRef::Fn should always have at least return type\");\n-                let sig = FnSig { input: inner_tys, output: return_ty };\n-                Ty::FnPtr(Arc::new(sig))\n+                let sig = FnSig { params_and_return: inner_tys.into() };\n+                Ty::FnPtr(sig)\n             }\n             TypeRef::Error => Ty::Unknown,\n         }\n@@ -226,16 +224,20 @@ pub(crate) fn type_for_field(db: &impl HirDatabase, field: StructField) -> Ty {\n     Ty::from_hir(db, &resolver, type_ref)\n }\n \n+fn fn_sig_for_fn(db: &impl HirDatabase, def: Function) -> FnSig {\n+    let signature = def.signature(db);\n+    let resolver = def.resolver(db);\n+    let params =\n+        signature.params().iter().map(|tr| Ty::from_hir(db, &resolver, tr)).collect::<Vec<_>>();\n+    let ret = Ty::from_hir(db, &resolver, signature.ret_type());\n+    FnSig::from_params_and_return(params, ret)\n+}\n+\n /// Build the declared type of a function. This should not need to look at the\n /// function body.\n fn type_for_fn(db: &impl HirDatabase, def: Function) -> Ty {\n-    let signature = def.signature(db);\n-    let resolver = def.resolver(db);\n+    let sig = fn_sig_for_fn(db, def);\n     let generics = def.generic_params(db);\n-    let input =\n-        signature.params().iter().map(|tr| Ty::from_hir(db, &resolver, tr)).collect::<Vec<_>>();\n-    let output = Ty::from_hir(db, &resolver, signature.ret_type());\n-    let sig = Arc::new(FnSig { input, output });\n     let substs = make_substs(&generics);\n     Ty::FnDef { def: def.into(), sig, substs }\n }\n@@ -256,41 +258,59 @@ fn type_for_static(db: &impl HirDatabase, def: Static) -> Ty {\n     Ty::from_hir(db, &resolver, signature.type_ref())\n }\n \n-/// Build the type of a tuple struct constructor.\n-fn type_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> Ty {\n+fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> FnSig {\n     let var_data = def.variant_data(db);\n     let fields = match var_data.fields() {\n         Some(fields) => fields,\n-        None => return type_for_struct(db, def), // Unit struct\n+        None => panic!(\"fn_sig_for_struct_constructor called on unit struct\"),\n     };\n     let resolver = def.resolver(db);\n-    let generics = def.generic_params(db);\n-    let input = fields\n+    let params = fields\n         .iter()\n         .map(|(_, field)| Ty::from_hir(db, &resolver, &field.type_ref))\n         .collect::<Vec<_>>();\n-    let output = type_for_struct(db, def);\n-    let sig = Arc::new(FnSig { input, output });\n+    let ret = type_for_struct(db, def);\n+    FnSig::from_params_and_return(params, ret)\n+}\n+\n+/// Build the type of a tuple struct constructor.\n+fn type_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> Ty {\n+    let var_data = def.variant_data(db);\n+    if var_data.fields().is_none() {\n+        return type_for_struct(db, def); // Unit struct\n+    }\n+    let sig = fn_sig_for_struct_constructor(db, def);\n+    let generics = def.generic_params(db);\n     let substs = make_substs(&generics);\n     Ty::FnDef { def: def.into(), sig, substs }\n }\n \n-/// Build the type of a tuple enum variant constructor.\n-fn type_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariant) -> Ty {\n+fn fn_sig_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariant) -> FnSig {\n     let var_data = def.variant_data(db);\n     let fields = match var_data.fields() {\n         Some(fields) => fields,\n-        None => return type_for_enum(db, def.parent_enum(db)), // Unit variant\n+        None => panic!(\"fn_sig_for_enum_variant_constructor called for unit variant\"),\n     };\n     let resolver = def.parent_enum(db).resolver(db);\n-    let generics = def.parent_enum(db).generic_params(db);\n-    let input = fields\n+    let params = fields\n         .iter()\n         .map(|(_, field)| Ty::from_hir(db, &resolver, &field.type_ref))\n         .collect::<Vec<_>>();\n+    let generics = def.parent_enum(db).generic_params(db);\n+    let substs = make_substs(&generics);\n+    let ret = type_for_enum(db, def.parent_enum(db)).subst(&substs);\n+    FnSig::from_params_and_return(params, ret)\n+}\n+\n+/// Build the type of a tuple enum variant constructor.\n+fn type_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariant) -> Ty {\n+    let var_data = def.variant_data(db);\n+    if var_data.fields().is_none() {\n+        return type_for_enum(db, def.parent_enum(db)); // Unit variant\n+    }\n+    let sig = fn_sig_for_enum_variant_constructor(db, def);\n+    let generics = def.parent_enum(db).generic_params(db);\n     let substs = make_substs(&generics);\n-    let output = type_for_enum(db, def.parent_enum(db)).subst(&substs);\n-    let sig = Arc::new(FnSig { input, output });\n     Ty::FnDef { def: def.into(), sig, substs }\n }\n "}]}