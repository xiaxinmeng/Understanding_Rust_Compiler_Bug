{"sha": "3a336c48c3e115ea13c53fc117b95bd9f66f1658", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMzM2YzQ4YzNlMTE1ZWExM2M1M2ZjMTE3Yjk1YmQ5ZjY2ZjE2NTg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T11:17:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-20T11:17:27Z"}, "message": "Rollup merge of #67442 - reitermarkus:dummy-variable, r=kennytm\n\nRemove `SOCK_CLOEXEC` dummy variable on platforms that don't use it.", "tree": {"sha": "fed1db0704735b342d9dec0223eddda023ee514c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fed1db0704735b342d9dec0223eddda023ee514c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a336c48c3e115ea13c53fc117b95bd9f66f1658", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/K3HCRBK7hj4Ov3rIwAAdHIIAGPD8+XORBSbz6TGo2/qZs1y\n3lQbNOgp/miSAL28lWLhqBVBQh1wgPqN0MmF94akIcdv2BmHsftq7F5zcuSQv0e/\nfk+OEW48DGvC1F+ttz1XqccoPwUH/QE4HsENTsqBMfusMRbc5EtNxuGn7hoTapnn\noto9FM+TTpTRlBg3sOuTxab5Oo1nR13GYfG+MidiRNISzNTJ8AFNXQzRn60MFxlV\nQIScYezliDjHJQBeyloAus+jsiNp+5RLWui1dWZKgtviBrIPn2ZlsjIKP36QmSnu\niyBS80R0yfkirEZZzjCYxjWjRq93piueYSK8UjEkiDBf2hIlIp+7xAh6UAn+LXw=\n=xVDU\n-----END PGP SIGNATURE-----\n", "payload": "tree fed1db0704735b342d9dec0223eddda023ee514c\nparent 9f39cb1d8e741c5dfa6ec28494cd166395e26b63\nparent b82671112c6bc389399d148ffd5c9579658b7a4b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576840647 +0100\ncommitter GitHub <noreply@github.com> 1576840647 +0100\n\nRollup merge of #67442 - reitermarkus:dummy-variable, r=kennytm\n\nRemove `SOCK_CLOEXEC` dummy variable on platforms that don't use it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a336c48c3e115ea13c53fc117b95bd9f66f1658", "html_url": "https://github.com/rust-lang/rust/commit/3a336c48c3e115ea13c53fc117b95bd9f66f1658", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a336c48c3e115ea13c53fc117b95bd9f66f1658/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f39cb1d8e741c5dfa6ec28494cd166395e26b63", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f39cb1d8e741c5dfa6ec28494cd166395e26b63", "html_url": "https://github.com/rust-lang/rust/commit/9f39cb1d8e741c5dfa6ec28494cd166395e26b63"}, {"sha": "b82671112c6bc389399d148ffd5c9579658b7a4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b82671112c6bc389399d148ffd5c9579658b7a4b", "html_url": "https://github.com/rust-lang/rust/commit/b82671112c6bc389399d148ffd5c9579658b7a4b"}], "stats": {"total": 27, "additions": 9, "deletions": 18}, "files": [{"sha": "4c23aabf49741493e8b6676f83485c2103ea96da", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3a336c48c3e115ea13c53fc117b95bd9f66f1658/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a336c48c3e115ea13c53fc117b95bd9f66f1658/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=3a336c48c3e115ea13c53fc117b95bd9f66f1658", "patch": "@@ -18,16 +18,6 @@ pub extern crate libc as netc;\n \n pub type wrlen_t = size_t;\n \n-// See below for the usage of SOCK_CLOEXEC, but this constant is only defined on\n-// Linux currently (e.g., support doesn't exist on other platforms). In order to\n-// get name resolution to work and things to compile we just define a dummy\n-// SOCK_CLOEXEC here for other platforms. Note that the dummy constant isn't\n-// actually ever used (the blocks below are wrapped in `if cfg!` as well.\n-#[cfg(target_os = \"linux\")]\n-use libc::SOCK_CLOEXEC;\n-#[cfg(not(target_os = \"linux\"))]\n-const SOCK_CLOEXEC: c_int = 0;\n-\n pub struct Socket(FileDesc);\n \n pub fn init() {}\n@@ -69,8 +59,9 @@ impl Socket {\n             // this option, however, was added in 2.6.27, and we still support\n             // 2.6.18 as a kernel, so if the returned error is EINVAL we\n             // fallthrough to the fallback.\n-            if cfg!(target_os = \"linux\") {\n-                match cvt(libc::socket(fam, ty | SOCK_CLOEXEC, 0)) {\n+            #[cfg(target_os = \"linux\")]\n+            {\n+                match cvt(libc::socket(fam, ty | libc::SOCK_CLOEXEC, 0)) {\n                     Ok(fd) => return Ok(Socket(FileDesc::new(fd))),\n                     Err(ref e) if e.raw_os_error() == Some(libc::EINVAL) => {}\n                     Err(e) => return Err(e),\n@@ -96,8 +87,9 @@ impl Socket {\n             let mut fds = [0, 0];\n \n             // Like above, see if we can set cloexec atomically\n-            if cfg!(target_os = \"linux\") {\n-                match cvt(libc::socketpair(fam, ty | SOCK_CLOEXEC, 0, fds.as_mut_ptr())) {\n+            #[cfg(target_os = \"linux\")]\n+            {\n+                match cvt(libc::socketpair(fam, ty | libc::SOCK_CLOEXEC, 0, fds.as_mut_ptr())) {\n                     Ok(_) => {\n                         return Ok((Socket(FileDesc::new(fds[0])), Socket(FileDesc::new(fds[1]))));\n                     }\n@@ -187,7 +179,8 @@ impl Socket {\n         // atomically set the CLOEXEC flag is to use the `accept4` syscall on\n         // Linux. This was added in 2.6.28, however, and because we support\n         // 2.6.18 we must detect this support dynamically.\n-        if cfg!(target_os = \"linux\") {\n+        #[cfg(target_os = \"linux\")]\n+        {\n             syscall! {\n                 fn accept4(\n                     fd: c_int,\n@@ -196,7 +189,7 @@ impl Socket {\n                     flags: c_int\n                 ) -> c_int\n             }\n-            let res = cvt_r(|| unsafe { accept4(self.0.raw(), storage, len, SOCK_CLOEXEC) });\n+            let res = cvt_r(|| unsafe { accept4(self.0.raw(), storage, len, libc::SOCK_CLOEXEC) });\n             match res {\n                 Ok(fd) => return Ok(Socket(FileDesc::new(fd))),\n                 Err(ref e) if e.raw_os_error() == Some(libc::ENOSYS) => {}"}, {"sha": "74cbd246fe8198b8266719cc70de0ac4a705dbea", "filename": "src/libstd/sys/vxworks/net.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a336c48c3e115ea13c53fc117b95bd9f66f1658/src%2Flibstd%2Fsys%2Fvxworks%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a336c48c3e115ea13c53fc117b95bd9f66f1658/src%2Flibstd%2Fsys%2Fvxworks%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fnet.rs?ref=3a336c48c3e115ea13c53fc117b95bd9f66f1658", "patch": "@@ -18,8 +18,6 @@ pub extern crate libc as netc;\n \n pub type wrlen_t = size_t;\n \n-const SOCK_CLOEXEC: c_int = 0;\n-\n pub struct Socket(FileDesc);\n \n pub fn init() {}"}]}