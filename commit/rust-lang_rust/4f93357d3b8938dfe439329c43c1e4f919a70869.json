{"sha": "4f93357d3b8938dfe439329c43c1e4f919a70869", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmOTMzNTdkM2I4OTM4ZGZlNDM5MzI5YzQzYzFlNGY5MTlhNzA4Njk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-07T02:20:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-07T02:20:23Z"}, "message": "Auto merge of #47607 - davidtwco:issue-45697, r=nikomatsakis\n\nMIR-borrowck: augmented assignment causes duplicate errors\n\nFixes #45697. This PR resolves the error duplication. I attempted to replace the existing sets since there were quite a few but only managed to replace two of them.\n\nr? @nikomatsakis", "tree": {"sha": "9a0831b830ad43c5cc2ae0caab441a27cec7620e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a0831b830ad43c5cc2ae0caab441a27cec7620e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f93357d3b8938dfe439329c43c1e4f919a70869", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f93357d3b8938dfe439329c43c1e4f919a70869", "html_url": "https://github.com/rust-lang/rust/commit/4f93357d3b8938dfe439329c43c1e4f919a70869", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f93357d3b8938dfe439329c43c1e4f919a70869/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd98fe0c05601d8a318a709adc4263f3348ea8d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd98fe0c05601d8a318a709adc4263f3348ea8d4", "html_url": "https://github.com/rust-lang/rust/commit/bd98fe0c05601d8a318a709adc4263f3348ea8d4"}, {"sha": "bb6e54d4bc7d4ce4c2372fecb84222867374b135", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6e54d4bc7d4ce4c2372fecb84222867374b135", "html_url": "https://github.com/rust-lang/rust/commit/bb6e54d4bc7d4ce4c2372fecb84222867374b135"}], "stats": {"total": 198, "additions": 150, "deletions": 48}, "files": [{"sha": "1ea897bf27ca544732ed7aa15c1941f70106eff5", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4f93357d3b8938dfe439329c43c1e4f919a70869/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f93357d3b8938dfe439329c43c1e4f919a70869/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=4f93357d3b8938dfe439329c43c1e4f919a70869", "patch": "@@ -362,33 +362,20 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         let scope_tree = borrows.0.scope_tree();\n         let root_place = self.prefixes(&borrow.borrowed_place, PrefixSet::All).last().unwrap();\n \n-        match root_place {\n-            &Place::Local(local) => {\n-                if let Some(_) = self.storage_dead_or_drop_error_reported_l.replace(local) {\n-                    debug!(\"report_does_not_live_long_enough({:?}): <suppressed>\",\n-                           (borrow, drop_span));\n-                    return\n-                }\n-            }\n-            &Place::Static(ref statik) => {\n-                if let Some(_) = self.storage_dead_or_drop_error_reported_s\n-                    .replace(statik.def_id)\n-                {\n-                    debug!(\"report_does_not_live_long_enough({:?}): <suppressed>\",\n-                           (borrow, drop_span));\n-                    return\n-                }\n-            },\n-            &Place::Projection(_) =>\n-                unreachable!(\"root_place is an unreachable???\")\n-        };\n-\n         let borrow_span = self.mir.source_info(borrow.location).span;\n         let proper_span = match *root_place {\n             Place::Local(local) => self.mir.local_decls[local].source_info.span,\n             _ => drop_span,\n         };\n \n+        if self.access_place_error_reported.contains(&(root_place.clone(), borrow_span)) {\n+            debug!(\"suppressing access_place error when borrow doesn't live long enough for {:?}\",\n+                   borrow_span);\n+            return;\n+        }\n+\n+        self.access_place_error_reported.insert((root_place.clone(), borrow_span));\n+\n         match (borrow.region, &self.describe_place(&borrow.borrowed_place)) {\n             (RegionKind::ReScope(_), Some(name)) => {\n                 self.report_scoped_local_value_does_not_live_long_enough("}, {"sha": "d90209993aa48f0bc6476ee574b03cdfb9389a3e", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 35, "deletions": 25, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4f93357d3b8938dfe439329c43c1e4f919a70869/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f93357d3b8938dfe439329c43c1e4f919a70869/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=4f93357d3b8938dfe439329c43c1e4f919a70869", "patch": "@@ -17,7 +17,7 @@ use rustc::hir::map::definitions::DefPathData;\n use rustc::infer::InferCtxt;\n use rustc::ty::{self, ParamEnv, TyCtxt};\n use rustc::ty::maps::Providers;\n-use rustc::mir::{AssertMessage, BasicBlock, BorrowKind, Local, Location, Place};\n+use rustc::mir::{AssertMessage, BasicBlock, BorrowKind, Location, Place};\n use rustc::mir::{Mir, Mutability, Operand, Projection, ProjectionElem, Rvalue};\n use rustc::mir::{Field, Statement, StatementKind, Terminator, TerminatorKind};\n use rustc::mir::ClosureRegionRequirements;\n@@ -228,8 +228,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n             hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => false,\n             hir::BodyOwnerKind::Fn => true,\n         },\n-        storage_dead_or_drop_error_reported_l: FxHashSet(),\n-        storage_dead_or_drop_error_reported_s: FxHashSet(),\n+        access_place_error_reported: FxHashSet(),\n         reservation_error_reported: FxHashSet(),\n         nonlexical_regioncx: opt_regioncx.clone(),\n     };\n@@ -294,12 +293,12 @@ pub struct MirBorrowckCtxt<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     /// I'm not sure this is the right approach - @eddyb could you try and\n     /// figure this out?\n     locals_are_invalidated_at_exit: bool,\n-    /// This field keeps track of when storage dead or drop errors are reported\n-    /// in order to stop duplicate error reporting and identify the conditions required\n-    /// for a \"temporary value dropped here while still borrowed\" error. See #45360.\n-    storage_dead_or_drop_error_reported_l: FxHashSet<Local>,\n-    /// Same as the above, but for statics (thread-locals)\n-    storage_dead_or_drop_error_reported_s: FxHashSet<DefId>,\n+    /// This field keeps track of when borrow errors are reported in the access_place function\n+    /// so that there is no duplicate reporting. This field cannot also be used for the conflicting\n+    /// borrow errors that is handled by the `reservation_error_reported` field as the inclusion\n+    /// of the `Span` type (while required to mute some errors) stops the muting of the reservation\n+    /// errors.\n+    access_place_error_reported: FxHashSet<(Place<'tcx>, Span)>,\n     /// This field keeps track of when borrow conflict errors are reported\n     /// for reservations, so that we don't report seemingly duplicate\n     /// errors for corresponding activations\n@@ -348,20 +347,20 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n \n         match stmt.kind {\n             StatementKind::Assign(ref lhs, ref rhs) => {\n+                self.consume_rvalue(\n+                    ContextKind::AssignRhs.new(location),\n+                    (rhs, span),\n+                    location,\n+                    flow_state,\n+                );\n+\n                 self.mutate_place(\n                     ContextKind::AssignLhs.new(location),\n                     (lhs, span),\n                     Shallow(None),\n                     JustWrite,\n                     flow_state,\n                 );\n-\n-                self.consume_rvalue(\n-                    ContextKind::AssignRhs.new(location),\n-                    (rhs, span),\n-                    location,\n-                    flow_state,\n-                );\n             }\n             StatementKind::SetDiscriminant {\n                 ref place,\n@@ -726,24 +725,35 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         if let Activation(_, borrow_index) = rw {\n             if self.reservation_error_reported.contains(&place_span.0) {\n-                debug!(\n-                    \"skipping access_place for activation of invalid reservation \\\n-                     place: {:?} borrow_index: {:?}\",\n-                    place_span.0,\n-                    borrow_index\n-                );\n+                debug!(\"skipping access_place for activation of invalid reservation \\\n+                     place: {:?} borrow_index: {:?}\", place_span.0, borrow_index);\n                 return AccessErrorsReported {\n                     mutability_error: false,\n                     conflict_error: true,\n                 };\n             }\n         }\n \n+        if self.access_place_error_reported.contains(&(place_span.0.clone(), place_span.1)) {\n+            debug!(\"access_place: suppressing error place_span=`{:?}` kind=`{:?}`\",\n+                   place_span, kind);\n+            return AccessErrorsReported {\n+                mutability_error: false,\n+                conflict_error: true,\n+            };\n+        }\n+\n         let mutability_error =\n             self.check_access_permissions(place_span, rw, is_local_mutation_allowed);\n         let conflict_error =\n             self.check_access_for_conflict(context, place_span, sd, rw, flow_state);\n \n+        if conflict_error || mutability_error {\n+            debug!(\"access_place: logging error place_span=`{:?}` kind=`{:?}`\",\n+                   place_span, kind);\n+            self.access_place_error_reported.insert((place_span.0.clone(), place_span.1));\n+        }\n+\n         AccessErrorsReported {\n             mutability_error,\n             conflict_error,\n@@ -829,15 +839,15 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                                 place_span.0\n                             );\n                             this.reservation_error_reported.insert(place_span.0.clone());\n-                        }\n+                        },\n                         Activation(_, activating) => {\n                             debug!(\n                                 \"observing check_place for activation of \\\n                                  borrow_index: {:?}\",\n                                 activating\n                             );\n-                        }\n-                        Read(..) | Write(..) => {}\n+                        },\n+                        Read(..) | Write(..) => {},\n                     }\n \n                     match kind {"}, {"sha": "efa6cc273b6f4a66e32623fbcef67d1f92b73f5c", "filename": "src/test/compile-fail/nll/reference-carried-through-struct-field.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f93357d3b8938dfe439329c43c1e4f919a70869/src%2Ftest%2Fcompile-fail%2Fnll%2Freference-carried-through-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f93357d3b8938dfe439329c43c1e4f919a70869/src%2Ftest%2Fcompile-fail%2Fnll%2Freference-carried-through-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Freference-carried-through-struct-field.rs?ref=4f93357d3b8938dfe439329c43c1e4f919a70869", "patch": "@@ -19,8 +19,7 @@ fn foo() {\n     let mut x = 22;\n     let wrapper = Wrap { w: &mut x };\n     x += 1; //[ast]~ ERROR cannot assign to `x` because it is borrowed [E0506]\n-    //[mir]~^ ERROR cannot assign to `x` because it is borrowed [E0506]\n-    //[mir]~^^ ERROR cannot use `x` because it was mutably borrowed [E0503]\n+    //[mir]~^ ERROR cannot use `x` because it was mutably borrowed [E0503]\n     *wrapper.w += 1;\n }\n "}, {"sha": "7734b14b2ab7b008f3a10d5469f5538dae8389c7", "filename": "src/test/ui/issue-45697-1.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4f93357d3b8938dfe439329c43c1e4f919a70869/src%2Ftest%2Fui%2Fissue-45697-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f93357d3b8938dfe439329c43c1e4f919a70869/src%2Ftest%2Fui%2Fissue-45697-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45697-1.rs?ref=4f93357d3b8938dfe439329c43c1e4f919a70869", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that assignments to an `&mut` pointer which is found in a\n+// borrowed (but otherwise non-aliasable) location is illegal.\n+\n+// compile-flags: -Z emit-end-regions -Z borrowck=compare -C overflow-checks=on\n+\n+struct S<'a> {\n+    pointer: &'a mut isize\n+}\n+\n+fn copy_borrowed_ptr<'a>(p: &'a mut S<'a>) -> S<'a> {\n+    S { pointer: &mut *p.pointer }\n+}\n+\n+fn main() {\n+    let mut x = 1;\n+\n+    {\n+        let mut y = S { pointer: &mut x };\n+        let z = copy_borrowed_ptr(&mut y);\n+        *y.pointer += 1;\n+        //~^ ERROR cannot assign to `*y.pointer` because it is borrowed (Ast) [E0506]\n+        //~| ERROR cannot use `*y.pointer` because it was mutably borrowed (Mir) [E0503]\n+        *z.pointer += 1;\n+    }\n+}"}, {"sha": "09f32b93acc1c9c60419f6ac836ca63d8d618991", "filename": "src/test/ui/issue-45697-1.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4f93357d3b8938dfe439329c43c1e4f919a70869/src%2Ftest%2Fui%2Fissue-45697-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f93357d3b8938dfe439329c43c1e4f919a70869/src%2Ftest%2Fui%2Fissue-45697-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45697-1.stderr?ref=4f93357d3b8938dfe439329c43c1e4f919a70869", "patch": "@@ -0,0 +1,18 @@\n+error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Ast)\n+  --> $DIR/issue-45697-1.rs:30:9\n+   |\n+29 |         let z = copy_borrowed_ptr(&mut y);\n+   |                                        - borrow of `*y.pointer` occurs here\n+30 |         *y.pointer += 1;\n+   |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n+\n+error[E0503]: cannot use `*y.pointer` because it was mutably borrowed (Mir)\n+  --> $DIR/issue-45697-1.rs:30:9\n+   |\n+29 |         let z = copy_borrowed_ptr(&mut y);\n+   |                                   ------ borrow of `y` occurs here\n+30 |         *y.pointer += 1;\n+   |         ^^^^^^^^^^^^^^^ use of borrowed `y`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "4e93eccd6f6496ee1f4fde63302ed376073117cc", "filename": "src/test/ui/issue-45697.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4f93357d3b8938dfe439329c43c1e4f919a70869/src%2Ftest%2Fui%2Fissue-45697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f93357d3b8938dfe439329c43c1e4f919a70869/src%2Ftest%2Fui%2Fissue-45697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45697.rs?ref=4f93357d3b8938dfe439329c43c1e4f919a70869", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that assignments to an `&mut` pointer which is found in a\n+// borrowed (but otherwise non-aliasable) location is illegal.\n+\n+// compile-flags: -Z emit-end-regions -Z borrowck=compare -C overflow-checks=off\n+\n+struct S<'a> {\n+    pointer: &'a mut isize\n+}\n+\n+fn copy_borrowed_ptr<'a>(p: &'a mut S<'a>) -> S<'a> {\n+    S { pointer: &mut *p.pointer }\n+}\n+\n+fn main() {\n+    let mut x = 1;\n+\n+    {\n+        let mut y = S { pointer: &mut x };\n+        let z = copy_borrowed_ptr(&mut y);\n+        *y.pointer += 1;\n+        //~^ ERROR cannot assign to `*y.pointer` because it is borrowed (Ast) [E0506]\n+        //~| ERROR cannot use `*y.pointer` because it was mutably borrowed (Mir) [E0503]\n+        *z.pointer += 1;\n+    }\n+}"}, {"sha": "e9b723d57b5073fa98f3209a028905c8837057d3", "filename": "src/test/ui/issue-45697.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4f93357d3b8938dfe439329c43c1e4f919a70869/src%2Ftest%2Fui%2Fissue-45697.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f93357d3b8938dfe439329c43c1e4f919a70869/src%2Ftest%2Fui%2Fissue-45697.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45697.stderr?ref=4f93357d3b8938dfe439329c43c1e4f919a70869", "patch": "@@ -0,0 +1,18 @@\n+error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Ast)\n+  --> $DIR/issue-45697.rs:30:9\n+   |\n+29 |         let z = copy_borrowed_ptr(&mut y);\n+   |                                        - borrow of `*y.pointer` occurs here\n+30 |         *y.pointer += 1;\n+   |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n+\n+error[E0503]: cannot use `*y.pointer` because it was mutably borrowed (Mir)\n+  --> $DIR/issue-45697.rs:30:9\n+   |\n+29 |         let z = copy_borrowed_ptr(&mut y);\n+   |                                   ------ borrow of `y` occurs here\n+30 |         *y.pointer += 1;\n+   |         ^^^^^^^^^^^^^^^ use of borrowed `y`\n+\n+error: aborting due to 2 previous errors\n+"}]}