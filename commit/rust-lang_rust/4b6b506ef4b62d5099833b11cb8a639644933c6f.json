{"sha": "4b6b506ef4b62d5099833b11cb8a639644933c6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNmI1MDZlZjRiNjJkNTA5OTgzM2IxMWNiOGE2Mzk2NDQ5MzNjNmY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-13T06:00:54Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-26T18:23:54Z"}, "message": "Improve the error message for paths with too many initial `super`s", "tree": {"sha": "fcc14526b1721879e05f6b881de6cc033e166c7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcc14526b1721879e05f6b881de6cc033e166c7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b6b506ef4b62d5099833b11cb8a639644933c6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b6b506ef4b62d5099833b11cb8a639644933c6f", "html_url": "https://github.com/rust-lang/rust/commit/4b6b506ef4b62d5099833b11cb8a639644933c6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b6b506ef4b62d5099833b11cb8a639644933c6f/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8988c4538e30bce6985cc0b8458521d9a4a87277", "url": "https://api.github.com/repos/rust-lang/rust/commits/8988c4538e30bce6985cc0b8458521d9a4a87277", "html_url": "https://github.com/rust-lang/rust/commit/8988c4538e30bce6985cc0b8458521d9a4a87277"}], "stats": {"total": 28, "additions": 7, "deletions": 21}, "files": [{"sha": "fba9bdc2cf05765cdd534fd630fbddd011b84137", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4b6b506ef4b62d5099833b11cb8a639644933c6f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6b506ef4b62d5099833b11cb8a639644933c6f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4b6b506ef4b62d5099833b11cb8a639644933c6f", "patch": "@@ -1382,28 +1382,11 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                module_to_string(self.current_module));\n \n         // Resolve the module prefix, if any.\n-        let module_prefix_result = self.resolve_module_prefix(module_path);\n+        let module_prefix_result = self.resolve_module_prefix(module_path, span);\n \n         let search_module;\n         let start_index;\n         match module_prefix_result {\n-            Failed(None) => {\n-                let mpath = names_to_string(module_path);\n-                let mpath = &mpath[..];\n-                match mpath.rfind(':') {\n-                    Some(idx) => {\n-                        let msg = format!(\"Could not find `{}` in `{}`\",\n-                                          // idx +- 1 to account for the\n-                                          // colons on either side\n-                                          &mpath[idx + 1..],\n-                                          &mpath[..idx - 1]);\n-                        return Failed(Some((span, msg)));\n-                    }\n-                    None => {\n-                        return Failed(None);\n-                    }\n-                }\n-            }\n             Failed(err) => return Failed(err),\n             Indeterminate => {\n                 debug!(\"(resolving module path for import) indeterminate; bailing\");\n@@ -1531,7 +1514,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     /// Resolves a \"module prefix\". A module prefix is one or both of (a) `self::`;\n     /// (b) some chain of `super::`.\n     /// grammar: (SELF MOD_SEP ) ? (SUPER MOD_SEP) *\n-    fn resolve_module_prefix(&mut self, module_path: &[Name])\n+    fn resolve_module_prefix(&mut self, module_path: &[Name], span: Span)\n                              -> ResolveResult<ModulePrefixResult<'a>> {\n         // Start at the current module if we see `self` or `super`, or at the\n         // top of the crate otherwise.\n@@ -1548,7 +1531,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             debug!(\"(resolving module prefix) resolving `super` at {}\",\n                    module_to_string(&containing_module));\n             match self.get_nearest_normal_module_parent(containing_module) {\n-                None => return Failed(None),\n+                None => {\n+                    let msg = \"There are too many initial `super`s.\".into();\n+                    return Failed(Some((span, msg)));\n+                }\n                 Some(new_module) => {\n                     containing_module = new_module;\n                     i += 1;"}, {"sha": "f59caef4631361f546e077efd37784b1362605d9", "filename": "src/test/compile-fail/super-at-top-level.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b6b506ef4b62d5099833b11cb8a639644933c6f/src%2Ftest%2Fcompile-fail%2Fsuper-at-top-level.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6b506ef4b62d5099833b11cb8a639644933c6f/src%2Ftest%2Fcompile-fail%2Fsuper-at-top-level.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsuper-at-top-level.rs?ref=4b6b506ef4b62d5099833b11cb8a639644933c6f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::f; //~ ERROR unresolved import `super::f`\n+use super::f; //~ ERROR unresolved import `super::f`. There are too many initial `super`s.\n \n fn main() {\n }"}]}