{"sha": "4a1b69d53aeb59a83de192ea67dbe4707b9a7b73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMWI2OWQ1M2FlYjU5YTgzZGUxOTJlYTY3ZGJlNDcwN2I5YTdiNzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-06T02:22:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-06T02:22:49Z"}, "message": "Auto merge of #69586 - petrochenkov:unmerge, r=Centril\n\nast: Unmerge structures for associated items and foreign items\n\nFollow-up to https://github.com/rust-lang/rust/pull/69194.\nr? @Centril", "tree": {"sha": "4ec527416c6f80cff60d0198ffe63c662a816f53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ec527416c6f80cff60d0198ffe63c662a816f53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73", "html_url": "https://github.com/rust-lang/rust/commit/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b818ccc74c993d41286731f67ce1e2bc2a3f1918", "url": "https://api.github.com/repos/rust-lang/rust/commits/b818ccc74c993d41286731f67ce1e2bc2a3f1918", "html_url": "https://github.com/rust-lang/rust/commit/b818ccc74c993d41286731f67ce1e2bc2a3f1918"}, {"sha": "9c885d40fb2b216dee5ebd42c35929ad8b54bf4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c885d40fb2b216dee5ebd42c35929ad8b54bf4a", "html_url": "https://github.com/rust-lang/rust/commit/9c885d40fb2b216dee5ebd42c35929ad8b54bf4a"}], "stats": {"total": 316, "additions": 183, "deletions": 133}, "files": [{"sha": "7cc045ef34461339eab34277405906961f8a3781", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 66, "deletions": 23, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=4a1b69d53aeb59a83de192ea67dbe4707b9a7b73", "patch": "@@ -38,6 +38,7 @@ use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n+use std::convert::TryFrom;\n use std::fmt;\n use std::iter;\n \n@@ -2443,10 +2444,10 @@ impl Item {\n     }\n }\n \n-impl<K: IntoItemKind> Item<K> {\n+impl<K: Into<ItemKind>> Item<K> {\n     pub fn into_item(self) -> Item {\n         let Item { attrs, id, span, vis, ident, kind, tokens } = self;\n-        Item { attrs, id, span, vis, ident, kind: kind.into_item_kind(), tokens }\n+        Item { attrs, id, span, vis, ident, kind: kind.into(), tokens }\n     }\n }\n \n@@ -2626,20 +2627,11 @@ impl ItemKind {\n     }\n }\n \n-pub trait IntoItemKind {\n-    fn into_item_kind(self) -> ItemKind;\n-}\n-\n-// FIXME(Centril): These definitions should be unmerged;\n-// see https://github.com/rust-lang/rust/pull/69194#discussion_r379899975\n-pub type ForeignItem = Item<AssocItemKind>;\n-pub type ForeignItemKind = AssocItemKind;\n-\n /// Represents associated items.\n /// These include items in `impl` and `trait` definitions.\n pub type AssocItem = Item<AssocItemKind>;\n \n-/// Represents non-free item kinds.\n+/// Represents associated item kinds.\n ///\n /// The term \"provided\" in the variants below refers to the item having a default\n /// definition / body. Meanwhile, a \"required\" item lacks a definition / body.\n@@ -2648,36 +2640,87 @@ pub type AssocItem = Item<AssocItemKind>;\n /// means \"provided\" and conversely `None` means \"required\".\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum AssocItemKind {\n-    /// A constant, `const $ident: $ty $def?;` where `def ::= \"=\" $expr? ;`.\n+    /// An associated constant, `const $ident: $ty $def?;` where `def ::= \"=\" $expr? ;`.\n     /// If `def` is parsed, then the constant is provided, and otherwise required.\n     Const(Defaultness, P<Ty>, Option<P<Expr>>),\n-    /// A static item (`static FOO: u8`).\n-    Static(P<Ty>, Mutability, Option<P<Expr>>),\n-    /// A function.\n+    /// An associated function.\n     Fn(Defaultness, FnSig, Generics, Option<P<Block>>),\n-    /// A type.\n+    /// An associated type.\n     TyAlias(Defaultness, Generics, GenericBounds, Option<P<Ty>>),\n-    /// A macro expanding to items.\n+    /// A macro expanding to associated items.\n     Macro(Mac),\n }\n \n impl AssocItemKind {\n     pub fn defaultness(&self) -> Defaultness {\n         match *self {\n             Self::Const(def, ..) | Self::Fn(def, ..) | Self::TyAlias(def, ..) => def,\n-            Self::Macro(..) | Self::Static(..) => Defaultness::Final,\n+            Self::Macro(..) => Defaultness::Final,\n         }\n     }\n }\n \n-impl IntoItemKind for AssocItemKind {\n-    fn into_item_kind(self) -> ItemKind {\n-        match self {\n+impl From<AssocItemKind> for ItemKind {\n+    fn from(assoc_item_kind: AssocItemKind) -> ItemKind {\n+        match assoc_item_kind {\n             AssocItemKind::Const(a, b, c) => ItemKind::Const(a, b, c),\n-            AssocItemKind::Static(a, b, c) => ItemKind::Static(a, b, c),\n             AssocItemKind::Fn(a, b, c, d) => ItemKind::Fn(a, b, c, d),\n             AssocItemKind::TyAlias(a, b, c, d) => ItemKind::TyAlias(a, b, c, d),\n             AssocItemKind::Macro(a) => ItemKind::Mac(a),\n         }\n     }\n }\n+\n+impl TryFrom<ItemKind> for AssocItemKind {\n+    type Error = ItemKind;\n+\n+    fn try_from(item_kind: ItemKind) -> Result<AssocItemKind, ItemKind> {\n+        Ok(match item_kind {\n+            ItemKind::Const(a, b, c) => AssocItemKind::Const(a, b, c),\n+            ItemKind::Fn(a, b, c, d) => AssocItemKind::Fn(a, b, c, d),\n+            ItemKind::TyAlias(a, b, c, d) => AssocItemKind::TyAlias(a, b, c, d),\n+            ItemKind::Mac(a) => AssocItemKind::Macro(a),\n+            _ => return Err(item_kind),\n+        })\n+    }\n+}\n+\n+/// An item in `extern` block.\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub enum ForeignItemKind {\n+    /// A foreign static item (`static FOO: u8`).\n+    Static(P<Ty>, Mutability, Option<P<Expr>>),\n+    /// A foreign function.\n+    Fn(Defaultness, FnSig, Generics, Option<P<Block>>),\n+    /// A foreign type.\n+    TyAlias(Defaultness, Generics, GenericBounds, Option<P<Ty>>),\n+    /// A macro expanding to foreign items.\n+    Macro(Mac),\n+}\n+\n+impl From<ForeignItemKind> for ItemKind {\n+    fn from(foreign_item_kind: ForeignItemKind) -> ItemKind {\n+        match foreign_item_kind {\n+            ForeignItemKind::Static(a, b, c) => ItemKind::Static(a, b, c),\n+            ForeignItemKind::Fn(a, b, c, d) => ItemKind::Fn(a, b, c, d),\n+            ForeignItemKind::TyAlias(a, b, c, d) => ItemKind::TyAlias(a, b, c, d),\n+            ForeignItemKind::Macro(a) => ItemKind::Mac(a),\n+        }\n+    }\n+}\n+\n+impl TryFrom<ItemKind> for ForeignItemKind {\n+    type Error = ItemKind;\n+\n+    fn try_from(item_kind: ItemKind) -> Result<ForeignItemKind, ItemKind> {\n+        Ok(match item_kind {\n+            ItemKind::Static(a, b, c) => ForeignItemKind::Static(a, b, c),\n+            ItemKind::Fn(a, b, c, d) => ForeignItemKind::Fn(a, b, c, d),\n+            ItemKind::TyAlias(a, b, c, d) => ForeignItemKind::TyAlias(a, b, c, d),\n+            ItemKind::Mac(a) => ForeignItemKind::Macro(a),\n+            _ => return Err(item_kind),\n+        })\n+    }\n+}\n+\n+pub type ForeignItem = Item<ForeignItemKind>;"}, {"sha": "0638e8e667617caed26d78a09c981c2f59eb2503", "filename": "src/librustc_ast/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fattr%2Fmod.rs?ref=4a1b69d53aeb59a83de192ea67dbe4707b9a7b73", "patch": "@@ -721,6 +721,6 @@ macro_rules! derive_has_attrs {\n }\n \n derive_has_attrs! {\n-    Item, Expr, Local, ast::ForeignItem, ast::StructField, ast::Arm,\n+    Item, Expr, Local, ast::AssocItem, ast::ForeignItem, ast::StructField, ast::Arm,\n     ast::Field, ast::FieldPat, ast::Variant, ast::Param, GenericParam\n }"}, {"sha": "dedc74eea927939c5a98af37865b9e18eee387fb", "filename": "src/librustc_ast/mut_visit.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_ast%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_ast%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fmut_visit.rs?ref=4a1b69d53aeb59a83de192ea67dbe4707b9a7b73", "patch": "@@ -936,25 +936,12 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n     visitor: &mut T,\n ) -> SmallVec<[P<AssocItem>; 1]> {\n     let Item { id, ident, vis, attrs, kind, span, tokens: _ } = item.deref_mut();\n-    walk_nested_item(visitor, id, span, ident, vis, attrs, kind);\n-    smallvec![item]\n-}\n-\n-pub fn walk_nested_item(\n-    visitor: &mut impl MutVisitor,\n-    id: &mut NodeId,\n-    span: &mut Span,\n-    ident: &mut Ident,\n-    vis: &mut Visibility,\n-    attrs: &mut Vec<Attribute>,\n-    kind: &mut AssocItemKind,\n-) {\n     visitor.visit_id(id);\n     visitor.visit_ident(ident);\n     visitor.visit_vis(vis);\n     visit_attrs(attrs, visitor);\n     match kind {\n-        AssocItemKind::Const(_, ty, expr) | AssocItemKind::Static(ty, _, expr) => {\n+        AssocItemKind::Const(_, ty, expr) => {\n             visitor.visit_ty(ty);\n             visit_opt(expr, |expr| visitor.visit_expr(expr));\n         }\n@@ -971,6 +958,7 @@ pub fn walk_nested_item(\n         AssocItemKind::Macro(mac) => visitor.visit_mac(mac),\n     }\n     visitor.visit_span(span);\n+    smallvec![item]\n }\n \n pub fn noop_visit_fn_header<T: MutVisitor>(header: &mut FnHeader, vis: &mut T) {\n@@ -1036,7 +1024,28 @@ pub fn noop_flat_map_foreign_item<T: MutVisitor>(\n     visitor: &mut T,\n ) -> SmallVec<[P<ForeignItem>; 1]> {\n     let Item { ident, attrs, id, kind, vis, span, tokens: _ } = item.deref_mut();\n-    walk_nested_item(visitor, id, span, ident, vis, attrs, kind);\n+    visitor.visit_id(id);\n+    visitor.visit_ident(ident);\n+    visitor.visit_vis(vis);\n+    visit_attrs(attrs, visitor);\n+    match kind {\n+        ForeignItemKind::Static(ty, _, expr) => {\n+            visitor.visit_ty(ty);\n+            visit_opt(expr, |expr| visitor.visit_expr(expr));\n+        }\n+        ForeignItemKind::Fn(_, sig, generics, body) => {\n+            visitor.visit_generics(generics);\n+            visit_fn_sig(sig, visitor);\n+            visit_opt(body, |body| visitor.visit_block(body));\n+        }\n+        ForeignItemKind::TyAlias(_, generics, bounds, ty) => {\n+            visitor.visit_generics(generics);\n+            visit_bounds(bounds, visitor);\n+            visit_opt(ty, |ty| visitor.visit_ty(ty));\n+        }\n+        ForeignItemKind::Macro(mac) => visitor.visit_mac(mac),\n+    }\n+    visitor.visit_span(span);\n     smallvec![item]\n }\n "}, {"sha": "1436c84b9c1f305fdd2c69aff8185d39a76899d2", "filename": "src/librustc_ast/visit.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_ast%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_ast%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fvisit.rs?ref=4a1b69d53aeb59a83de192ea67dbe4707b9a7b73", "patch": "@@ -526,8 +526,29 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n }\n \n pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignItem) {\n-    let Item { id, span, ident, vis, attrs, kind, tokens: _ } = item;\n-    walk_nested_item(visitor, *id, *span, *ident, vis, attrs, kind, FnCtxt::Foreign);\n+    let Item { id, span, ident, ref vis, ref attrs, ref kind, tokens: _ } = *item;\n+    visitor.visit_vis(vis);\n+    visitor.visit_ident(ident);\n+    walk_list!(visitor, visit_attribute, attrs);\n+    match kind {\n+        ForeignItemKind::Static(ty, _, expr) => {\n+            visitor.visit_ty(ty);\n+            walk_list!(visitor, visit_expr, expr);\n+        }\n+        ForeignItemKind::Fn(_, sig, generics, body) => {\n+            visitor.visit_generics(generics);\n+            let kind = FnKind::Fn(FnCtxt::Foreign, ident, sig, vis, body.as_deref());\n+            visitor.visit_fn(kind, span, id);\n+        }\n+        ForeignItemKind::TyAlias(_, generics, bounds, ty) => {\n+            visitor.visit_generics(generics);\n+            walk_list!(visitor, visit_param_bound, bounds);\n+            walk_list!(visitor, visit_ty, ty);\n+        }\n+        ForeignItemKind::Macro(mac) => {\n+            visitor.visit_mac(mac);\n+        }\n+    }\n }\n \n pub fn walk_global_asm<'a, V: Visitor<'a>>(_: &mut V, _: &'a GlobalAsm) {\n@@ -610,31 +631,18 @@ pub fn walk_fn<'a, V: Visitor<'a>>(visitor: &mut V, kind: FnKind<'a>, _span: Spa\n }\n \n pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem, ctxt: AssocCtxt) {\n-    let Item { id, span, ident, vis, attrs, kind, tokens: _ } = item;\n-    walk_nested_item(visitor, *id, *span, *ident, vis, attrs, kind, FnCtxt::Assoc(ctxt));\n-}\n-\n-fn walk_nested_item<'a, V: Visitor<'a>>(\n-    visitor: &mut V,\n-    id: NodeId,\n-    span: Span,\n-    ident: Ident,\n-    vis: &'a Visibility,\n-    attrs: &'a [Attribute],\n-    kind: &'a AssocItemKind,\n-    ctxt: FnCtxt,\n-) {\n+    let Item { id, span, ident, ref vis, ref attrs, ref kind, tokens: _ } = *item;\n     visitor.visit_vis(vis);\n     visitor.visit_ident(ident);\n     walk_list!(visitor, visit_attribute, attrs);\n     match kind {\n-        AssocItemKind::Const(_, ty, expr) | AssocItemKind::Static(ty, _, expr) => {\n+        AssocItemKind::Const(_, ty, expr) => {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);\n         }\n         AssocItemKind::Fn(_, sig, generics, body) => {\n             visitor.visit_generics(generics);\n-            let kind = FnKind::Fn(ctxt, ident, sig, vis, body.as_deref());\n+            let kind = FnKind::Fn(FnCtxt::Assoc(ctxt), ident, sig, vis, body.as_deref());\n             visitor.visit_fn(kind, span, id);\n         }\n         AssocItemKind::TyAlias(_, generics, bounds, ty) => {"}, {"sha": "46aad99f13130ab72685db6a41e3594ecc089c96", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=4a1b69d53aeb59a83de192ea67dbe4707b9a7b73", "patch": "@@ -675,11 +675,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let ty = self.lower_ty(t, ImplTraitContext::disallowed());\n                     hir::ForeignItemKind::Static(ty, m)\n                 }\n-                ForeignItemKind::Const(_, ref t, _) => {\n-                    // For recovery purposes.\n-                    let ty = self.lower_ty(t, ImplTraitContext::disallowed());\n-                    hir::ForeignItemKind::Static(ty, Mutability::Not)\n-                }\n                 ForeignItemKind::TyAlias(..) => hir::ForeignItemKind::Type,\n                 ForeignItemKind::Macro(_) => panic!(\"macro shouldn't exist here\"),\n             },\n@@ -757,8 +752,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let trait_item_def_id = self.resolver.definitions().local_def_id(i.id);\n \n         let (generics, kind) = match i.kind {\n-            AssocItemKind::Static(ref ty, _, ref default) // Let's pretend this is a `const`.\n-            | AssocItemKind::Const(_, ref ty, ref default) => {\n+            AssocItemKind::Const(_, ref ty, ref default) => {\n                 let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n                 let body = default.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n                 (hir::Generics::empty(), hir::TraitItemKind::Const(ty, body))\n@@ -800,11 +794,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     fn lower_trait_item_ref(&mut self, i: &AssocItem) -> hir::TraitItemRef {\n         let (kind, has_default) = match &i.kind {\n-            AssocItemKind::Static(_, _, default) // Let's pretend this is a `const` for recovery.\n-            | AssocItemKind::Const(_, _, default) => {\n-                (hir::AssocItemKind::Const, default.is_some())\n+            AssocItemKind::Const(_, _, default) => (hir::AssocItemKind::Const, default.is_some()),\n+            AssocItemKind::TyAlias(_, _, _, default) => {\n+                (hir::AssocItemKind::Type, default.is_some())\n             }\n-            AssocItemKind::TyAlias(_, _, _, default) => (hir::AssocItemKind::Type, default.is_some()),\n             AssocItemKind::Fn(_, sig, _, default) => {\n                 (hir::AssocItemKind::Method { has_self: sig.decl.has_self() }, default.is_some())\n             }\n@@ -824,7 +817,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let impl_item_def_id = self.resolver.definitions().local_def_id(i.id);\n \n         let (generics, kind) = match &i.kind {\n-            AssocItemKind::Static(ty, _, expr) | AssocItemKind::Const(_, ty, expr) => {\n+            AssocItemKind::Const(_, ty, expr) => {\n                 let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n                 (\n                     hir::Generics::empty(),\n@@ -892,8 +885,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             vis: self.lower_visibility(&i.vis, Some(i.id)),\n             defaultness: self.lower_defaultness(i.kind.defaultness(), true /* [1] */),\n             kind: match &i.kind {\n-                AssocItemKind::Static(..) // Let's pretend this is a `const` for recovery.\n-                | AssocItemKind::Const(..) => hir::AssocItemKind::Const,\n+                AssocItemKind::Const(..) => hir::AssocItemKind::Const,\n                 AssocItemKind::TyAlias(.., ty) => {\n                     match ty.as_deref().and_then(|ty| ty.kind.opaque_top_hack()) {\n                         None => hir::AssocItemKind::Type,"}, {"sha": "69d5610e0160185a3224cdaf38b3832c25ca79c7", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=4a1b69d53aeb59a83de192ea67dbe4707b9a7b73", "patch": "@@ -976,7 +976,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             ForeignItemKind::Static(_, _, body) => {\n                 self.check_foreign_kind_bodyless(fi.ident, \"static\", body.as_ref().map(|b| b.span));\n             }\n-            ForeignItemKind::Const(..) | ForeignItemKind::Macro(..) => {}\n+            ForeignItemKind::Macro(..) => {}\n         }\n \n         visit::walk_foreign_item(self, fi)"}, {"sha": "97c88d4f1d9669f1d0d08a0d92e175a58c5164a5", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=4a1b69d53aeb59a83de192ea67dbe4707b9a7b73", "patch": "@@ -400,7 +400,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ForeignItemKind::TyAlias(..) => {\n                 gate_feature_post!(&self, extern_types, i.span, \"extern types are experimental\");\n             }\n-            ast::ForeignItemKind::Macro(..) | ast::ForeignItemKind::Const(..) => {}\n+            ast::ForeignItemKind::Macro(..) => {}\n         }\n \n         visit::walk_foreign_item(self, i)"}, {"sha": "b11dda8af731e7702f7b3a907d3fe4332f298a2c", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=4a1b69d53aeb59a83de192ea67dbe4707b9a7b73", "patch": "@@ -971,19 +971,7 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_foreign_item(&mut self, item: &ast::ForeignItem) {\n-        let ast::Item { id, span, ident, attrs, kind, vis, tokens: _ } = item;\n-        self.print_nested_item_kind(*id, *span, *ident, attrs, kind, vis);\n-    }\n-\n-    fn print_nested_item_kind(\n-        &mut self,\n-        id: ast::NodeId,\n-        span: Span,\n-        ident: ast::Ident,\n-        attrs: &[Attribute],\n-        kind: &ast::AssocItemKind,\n-        vis: &ast::Visibility,\n-    ) {\n+        let ast::Item { id, span, ident, ref attrs, ref kind, ref vis, tokens: _ } = *item;\n         self.ann.pre(self, AnnNode::SubItem(id));\n         self.hardbreak_if_not_bol();\n         self.maybe_print_comment(span.lo());\n@@ -992,9 +980,6 @@ impl<'a> State<'a> {\n             ast::ForeignItemKind::Fn(def, sig, gen, body) => {\n                 self.print_fn_full(sig, ident, gen, vis, *def, body.as_deref(), attrs);\n             }\n-            ast::ForeignItemKind::Const(def, ty, body) => {\n-                self.print_item_const(ident, None, ty, body.as_deref(), vis, *def);\n-            }\n             ast::ForeignItemKind::Static(ty, mutbl, body) => {\n                 let def = ast::Defaultness::Final;\n                 self.print_item_const(ident, Some(*mutbl), ty, body.as_deref(), vis, def);\n@@ -1413,8 +1398,29 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_assoc_item(&mut self, item: &ast::AssocItem) {\n-        let ast::Item { id, span, ident, attrs, kind, vis, tokens: _ } = item;\n-        self.print_nested_item_kind(*id, *span, *ident, attrs, kind, vis);\n+        let ast::Item { id, span, ident, ref attrs, ref kind, ref vis, tokens: _ } = *item;\n+        self.ann.pre(self, AnnNode::SubItem(id));\n+        self.hardbreak_if_not_bol();\n+        self.maybe_print_comment(span.lo());\n+        self.print_outer_attributes(attrs);\n+        match kind {\n+            ast::AssocItemKind::Fn(def, sig, gen, body) => {\n+                self.print_fn_full(sig, ident, gen, vis, *def, body.as_deref(), attrs);\n+            }\n+            ast::AssocItemKind::Const(def, ty, body) => {\n+                self.print_item_const(ident, None, ty, body.as_deref(), vis, *def);\n+            }\n+            ast::AssocItemKind::TyAlias(def, generics, bounds, ty) => {\n+                self.print_associated_type(ident, generics, bounds, ty.as_deref(), vis, *def);\n+            }\n+            ast::AssocItemKind::Macro(m) => {\n+                self.print_mac(m);\n+                if m.args.need_semicolon() {\n+                    self.s.word(\";\");\n+                }\n+            }\n+        }\n+        self.ann.post(self, AnnNode::SubItem(id))\n     }\n \n     crate fn print_stmt(&mut self, st: &ast::Stmt) {"}, {"sha": "b16659725db734a44fb1c97cedf6da6d0a7d8ed6", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=4a1b69d53aeb59a83de192ea67dbe4707b9a7b73", "patch": "@@ -674,11 +674,12 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     let item_tok = TokenTree::token(\n                         token::Interpolated(Lrc::new(match item {\n                             Annotatable::Item(item) => token::NtItem(item),\n-                            Annotatable::TraitItem(item)\n-                            | Annotatable::ImplItem(item)\n-                            | Annotatable::ForeignItem(item) => {\n+                            Annotatable::TraitItem(item) | Annotatable::ImplItem(item) => {\n                                 token::NtItem(P(item.and_then(ast::AssocItem::into_item)))\n                             }\n+                            Annotatable::ForeignItem(item) => {\n+                                token::NtItem(P(item.and_then(ast::ForeignItem::into_item)))\n+                            }\n                             Annotatable::Stmt(stmt) => token::NtStmt(stmt.into_inner()),\n                             Annotatable::Expr(expr) => token::NtExpr(expr),\n                             Annotatable::Arm(..)"}, {"sha": "01dd2f885ff5e074ed1a8b8b04283a76476c6318", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=4a1b69d53aeb59a83de192ea67dbe4707b9a7b73", "patch": "@@ -24,6 +24,7 @@ use rustc_span::source_map::{self, Span};\n use rustc_span::symbol::{kw, sym, Symbol};\n \n use log::debug;\n+use std::convert::TryFrom;\n use std::mem;\n \n pub(super) type ItemInfo = (Ident, ItemKind);\n@@ -650,16 +651,16 @@ impl<'a> Parser<'a> {\n     /// Parses associated items.\n     fn parse_assoc_item(&mut self, req_name: ReqName) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n         Ok(self.parse_item_(req_name)?.map(|Item { attrs, id, span, vis, ident, kind, tokens }| {\n-            let kind = match kind {\n-                ItemKind::Mac(a) => AssocItemKind::Macro(a),\n-                ItemKind::Fn(a, b, c, d) => AssocItemKind::Fn(a, b, c, d),\n-                ItemKind::TyAlias(a, b, c, d) => AssocItemKind::TyAlias(a, b, c, d),\n-                ItemKind::Const(a, b, c) => AssocItemKind::Const(a, b, c),\n-                ItemKind::Static(a, _, b) => {\n-                    self.struct_span_err(span, \"associated `static` items are not allowed\").emit();\n-                    AssocItemKind::Const(Defaultness::Final, a, b)\n-                }\n-                _ => return self.error_bad_item_kind(span, &kind, \"`trait`s or `impl`s\"),\n+            let kind = match AssocItemKind::try_from(kind) {\n+                Ok(kind) => kind,\n+                Err(kind) => match kind {\n+                    ItemKind::Static(a, _, b) => {\n+                        self.struct_span_err(span, \"associated `static` items are not allowed\")\n+                            .emit();\n+                        AssocItemKind::Const(Defaultness::Final, a, b)\n+                    }\n+                    _ => return self.error_bad_item_kind(span, &kind, \"`trait`s or `impl`s\"),\n+                },\n             };\n             Some(P(Item { attrs, id, span, vis, ident, kind, tokens }))\n         }))\n@@ -836,16 +837,15 @@ impl<'a> Parser<'a> {\n     /// Parses a foreign item (one in an `extern { ... }` block).\n     pub fn parse_foreign_item(&mut self) -> PResult<'a, Option<Option<P<ForeignItem>>>> {\n         Ok(self.parse_item_(|_| true)?.map(|Item { attrs, id, span, vis, ident, kind, tokens }| {\n-            let kind = match kind {\n-                ItemKind::Mac(a) => ForeignItemKind::Macro(a),\n-                ItemKind::Fn(a, b, c, d) => ForeignItemKind::Fn(a, b, c, d),\n-                ItemKind::TyAlias(a, b, c, d) => ForeignItemKind::TyAlias(a, b, c, d),\n-                ItemKind::Static(a, b, c) => ForeignItemKind::Static(a, b, c),\n-                ItemKind::Const(_, a, b) => {\n-                    self.error_on_foreign_const(span, ident);\n-                    ForeignItemKind::Static(a, Mutability::Not, b)\n-                }\n-                _ => return self.error_bad_item_kind(span, &kind, \"`extern` blocks\"),\n+            let kind = match ForeignItemKind::try_from(kind) {\n+                Ok(kind) => kind,\n+                Err(kind) => match kind {\n+                    ItemKind::Const(_, a, b) => {\n+                        self.error_on_foreign_const(span, ident);\n+                        ForeignItemKind::Static(a, Mutability::Not, b)\n+                    }\n+                    _ => return self.error_bad_item_kind(span, &kind, \"`extern` blocks\"),\n+                },\n             };\n             Some(P(Item { attrs, id, span, vis, ident, kind, tokens }))\n         }))"}, {"sha": "43cfe05ac230e59a365e3b31e07292ad40eda1c8", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=4a1b69d53aeb59a83de192ea67dbe4707b9a7b73", "patch": "@@ -826,7 +826,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             ForeignItemKind::Fn(..) => {\n                 (Res::Def(DefKind::Fn, self.r.definitions.local_def_id(item.id)), ValueNS)\n             }\n-            ForeignItemKind::Static(..) | ForeignItemKind::Const(..) => {\n+            ForeignItemKind::Static(..) => {\n                 (Res::Def(DefKind::Static, self.r.definitions.local_def_id(item.id)), ValueNS)\n             }\n             ForeignItemKind::TyAlias(..) => {\n@@ -1251,8 +1251,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         // Add the item to the trait info.\n         let item_def_id = self.r.definitions.local_def_id(item.id);\n         let (res, ns) = match item.kind {\n-            AssocItemKind::Static(..) // Let's pretend it's a `const` for recovery.\n-            | AssocItemKind::Const(..) => (Res::Def(DefKind::AssocConst, item_def_id), ValueNS),\n+            AssocItemKind::Const(..) => (Res::Def(DefKind::AssocConst, item_def_id), ValueNS),\n             AssocItemKind::Fn(_, ref sig, _, _) => {\n                 if sig.decl.has_self() {\n                     self.r.has_self.insert(item_def_id);"}, {"sha": "0d276e68614522b2dfda5775932f8fdd3e06d355", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=4a1b69d53aeb59a83de192ea67dbe4707b9a7b73", "patch": "@@ -228,9 +228,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                     body.as_deref(),\n                 );\n             }\n-            AssocItemKind::Fn(..) | AssocItemKind::Const(..) | AssocItemKind::Static(..) => {\n-                DefPathData::ValueNs(i.ident.name)\n-            }\n+            AssocItemKind::Fn(..) | AssocItemKind::Const(..) => DefPathData::ValueNs(i.ident.name),\n             AssocItemKind::TyAlias(..) => DefPathData::TypeNs(i.ident.name),\n             AssocItemKind::Macro(..) => return self.visit_macro_invoc(i.id),\n         };"}, {"sha": "a3554ea2ee0a3598c8ffd59e574c8c169c2d5acc", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=4a1b69d53aeb59a83de192ea67dbe4707b9a7b73", "patch": "@@ -444,7 +444,7 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                     visit::walk_foreign_item(this, foreign_item);\n                 });\n             }\n-            ForeignItemKind::Const(..) | ForeignItemKind::Static(..) => {\n+            ForeignItemKind::Static(..) => {\n                 self.with_item_rib(HasGenericParams::No, |this| {\n                     visit::walk_foreign_item(this, foreign_item);\n                 });\n@@ -838,8 +838,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         for item in trait_items {\n                             this.with_trait_items(trait_items, |this| {\n                                 match &item.kind {\n-                                    AssocItemKind::Static(ty, _, default)\n-                                    | AssocItemKind::Const(_, ty, default) => {\n+                                    AssocItemKind::Const(_, ty, default) => {\n                                         this.visit_ty(ty);\n                                         // Only impose the restrictions of `ConstRibKind` for an\n                                         // actual constant expression in a provided default.\n@@ -1114,7 +1113,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                 for item in impl_items {\n                                     use crate::ResolutionError::*;\n                                     match &item.kind {\n-                                        AssocItemKind::Static(..) | AssocItemKind::Const(..) => {\n+                                        AssocItemKind::Const(..) => {\n                                             debug!(\"resolve_implementation AssocItemKind::Const\",);\n                                             // If this is a trait impl, ensure the const\n                                             // exists in trait"}, {"sha": "72c962749c8be194fdc3b5f1c8c2e81a72dc8286", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=4a1b69d53aeb59a83de192ea67dbe4707b9a7b73", "patch": "@@ -1004,8 +1004,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         self.process_macro_use(trait_item.span);\n         let vis_span = trait_item.span.shrink_to_lo();\n         match trait_item.kind {\n-            ast::AssocItemKind::Static(ref ty, _, ref expr)\n-            | ast::AssocItemKind::Const(_, ref ty, ref expr) => {\n+            ast::AssocItemKind::Const(_, ref ty, ref expr) => {\n                 self.process_assoc_const(\n                     trait_item.id,\n                     trait_item.ident,\n@@ -1075,8 +1074,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n     fn process_impl_item(&mut self, impl_item: &'l ast::AssocItem, impl_id: DefId) {\n         self.process_macro_use(impl_item.span);\n         match impl_item.kind {\n-            ast::AssocItemKind::Static(ref ty, _, ref expr)\n-            | ast::AssocItemKind::Const(_, ref ty, ref expr) => {\n+            ast::AssocItemKind::Const(_, ref ty, ref expr) => {\n                 self.process_assoc_const(\n                     impl_item.id,\n                     impl_item.ident,\n@@ -1537,8 +1535,7 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                     self.visit_ty(&ret_ty);\n                 }\n             }\n-            ast::ForeignItemKind::Const(_, ref ty, _)\n-            | ast::ForeignItemKind::Static(ref ty, _, _) => {\n+            ast::ForeignItemKind::Static(ref ty, _, _) => {\n                 if let Some(var_data) = self.save_ctxt.get_extern_item_data(item) {\n                     down_cast_data!(var_data, DefData, item.span);\n                     self.dumper.dump_def(&access, var_data);"}, {"sha": "9da8ee548fdddea784a1e74938da21ed6a1d5023", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=4a1b69d53aeb59a83de192ea67dbe4707b9a7b73", "patch": "@@ -151,8 +151,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n             }\n-            ast::ForeignItemKind::Const(_, ref ty, _)\n-            | ast::ForeignItemKind::Static(ref ty, _, _) => {\n+            ast::ForeignItemKind::Static(ref ty, _, _) => {\n                 filter!(self.span_utils, item.ident.span);\n \n                 let id = id_from_node_id(item.id, self);"}, {"sha": "a295e1637aa4c563514f744791dc530433a6a73a", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1b69d53aeb59a83de192ea67dbe4707b9a7b73/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=4a1b69d53aeb59a83de192ea67dbe4707b9a7b73", "patch": "@@ -795,7 +795,6 @@ impl Sig for ast::ForeignItem {\n \n                 Ok(Signature { text: text, defs: defs, refs: vec![] })\n             }\n-            ast::ForeignItemKind::Const(..) => Err(\"foreign const\"),\n             ast::ForeignItemKind::Macro(..) => Err(\"macro\"),\n         }\n     }"}]}