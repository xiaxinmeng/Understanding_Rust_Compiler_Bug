{"sha": "f253bac206f5da70b22201268ee5405003487c2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNTNiYWMyMDZmNWRhNzBiMjIyMDEyNjhlZTU0MDUwMDM0ODdjMmE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-11-13T21:01:58Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-11-13T21:01:58Z"}, "message": "Merge pull request #593 from JanLikar/Fix580\n\nEnable rustfmt to format a list of files", "tree": {"sha": "8a061ba699e6b32818f0b5e0fa48ea24cf1b8639", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a061ba699e6b32818f0b5e0fa48ea24cf1b8639"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f253bac206f5da70b22201268ee5405003487c2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f253bac206f5da70b22201268ee5405003487c2a", "html_url": "https://github.com/rust-lang/rust/commit/f253bac206f5da70b22201268ee5405003487c2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f253bac206f5da70b22201268ee5405003487c2a/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "686ec52b504c7c7a991a98053d6518cd005ede80", "url": "https://api.github.com/repos/rust-lang/rust/commits/686ec52b504c7c7a991a98053d6518cd005ede80", "html_url": "https://github.com/rust-lang/rust/commit/686ec52b504c7c7a991a98053d6518cd005ede80"}, {"sha": "4443c4b7ccc0f53b94bf2d47c1907047ba42d0bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4443c4b7ccc0f53b94bf2d47c1907047ba42d0bf", "html_url": "https://github.com/rust-lang/rust/commit/4443c4b7ccc0f53b94bf2d47c1907047ba42d0bf"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "b90cdb3d3cacff84e2579bbff22627eece12530a", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f253bac206f5da70b22201268ee5405003487c2a/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f253bac206f5da70b22201268ee5405003487c2a/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=f253bac206f5da70b22201268ee5405003487c2a", "patch": "@@ -29,8 +29,8 @@ use getopts::Options;\n \n /// Rustfmt operations.\n enum Operation {\n-    /// Format a file and its child modules.\n-    Format(PathBuf, WriteMode),\n+    /// Format files and their child modules.\n+    Format(Vec<PathBuf>, WriteMode),\n     /// Print the help message.\n     Help,\n     /// Print detailed configuration help.\n@@ -114,16 +114,20 @@ fn execute() -> i32 {\n             run_from_stdin(input, write_mode, &config);\n             0\n         }\n-        Operation::Format(file, write_mode) => {\n-            let config = match lookup_and_read_project_file(&file) {\n-                Ok((path, toml)) => {\n-                    println!(\"Using rustfmt config file: {}\", path.display());\n-                    Config::from_toml(&toml)\n-                }\n-                Err(_) => Default::default(),\n-            };\n-\n-            run(&file, write_mode, &config);\n+        Operation::Format(files, write_mode) => {\n+            for file in files {\n+                let config = match lookup_and_read_project_file(&file) {\n+                    Ok((path, toml)) => {\n+                        println!(\"Using rustfmt config file {} for {}\",\n+                                 path.display(),\n+                                 file.display());\n+                        Config::from_toml(&toml)\n+                    }\n+                    Err(_) => Default::default(),\n+                };\n+\n+                run(&file, write_mode, &config);\n+            }\n             0\n         }\n     }\n@@ -144,7 +148,7 @@ fn main() {\n }\n \n fn print_usage(opts: &Options, reason: &str) {\n-    let reason = format!(\"{}\\nusage: {} [options] <file>\",\n+    let reason = format!(\"{}\\nusage: {} [options] <file>...\",\n                          reason,\n                          env::current_exe().unwrap().display());\n     println!(\"{}\", opts.usage(&reason));\n@@ -189,5 +193,7 @@ fn determine_operation<I>(opts: &Options, args: I) -> Operation\n         None => WriteMode::Replace,\n     };\n \n-    Operation::Format(PathBuf::from(&matches.free[0]), write_mode)\n+    let files: Vec<_> = matches.free.iter().map(|a| PathBuf::from(a)).collect();\n+\n+    Operation::Format(files, write_mode)\n }"}]}