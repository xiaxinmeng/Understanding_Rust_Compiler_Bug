{"sha": "c20b4f558440c24e8ef84782a71163fe236d72de", "node_id": "C_kwDOAAsO6NoAKGMyMGI0ZjU1ODQ0MGMyNGU4ZWY4NDc4MmE3MTE2M2ZlMjM2ZDcyZGU", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2021-10-19T22:45:48Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-03-05T18:13:45Z"}, "message": "Change syntax for TyAlias where clauses", "tree": {"sha": "6e09aa43d0f3eb54043950a2d89e237f23dde41e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e09aa43d0f3eb54043950a2d89e237f23dde41e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c20b4f558440c24e8ef84782a71163fe236d72de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c20b4f558440c24e8ef84782a71163fe236d72de", "html_url": "https://github.com/rust-lang/rust/commit/c20b4f558440c24e8ef84782a71163fe236d72de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c20b4f558440c24e8ef84782a71163fe236d72de/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "379e94f5a4aebe7dc2d8742653ca244d92b06f3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/379e94f5a4aebe7dc2d8742653ca244d92b06f3d", "html_url": "https://github.com/rust-lang/rust/commit/379e94f5a4aebe7dc2d8742653ca244d92b06f3d"}], "stats": {"total": 645, "additions": 392, "deletions": 253}, "files": [{"sha": "2fbafca1681c7e739421e3a70ff9414c087c72bd", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -2662,10 +2662,23 @@ pub struct Trait {\n     pub items: Vec<P<AssocItem>>,\n }\n \n+/// The location of a where clause on a `TyAlias` (`Span`) and whether there was\n+/// a `where` keyword (`bool`). This is split out from `WhereClause`, since there\n+/// are two locations for where clause on type aliases, but their predicates\n+/// are concatenated together.\n+#[derive(Copy, Clone, Encodable, Decodable, Debug, Default)]\n+pub struct TyAliasWhereClause(pub bool, pub Span);\n+\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct TyAlias {\n     pub defaultness: Defaultness,\n     pub generics: Generics,\n+    /// The span information for the two where clauses (before equals, after equals)\n+    pub where_clauses: (TyAliasWhereClause, TyAliasWhereClause),\n+    /// The index in `generics.where_clause.predicates` that would split into\n+    /// predicates from the where clause before the equals and the predicates\n+    /// from the where clause after the equals\n+    pub where_predicates_split: usize,\n     pub bounds: GenericBounds,\n     pub ty: Option<P<Ty>>,\n }"}, {"sha": "c60c77e6987a6991b116e245d2dcbd8c9f635b7b", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -1018,9 +1018,13 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n         }\n         ItemKind::ForeignMod(nm) => vis.visit_foreign_mod(nm),\n         ItemKind::GlobalAsm(asm) => noop_visit_inline_asm(asm, vis),\n-        ItemKind::TyAlias(box TyAlias { defaultness, generics, bounds, ty }) => {\n+        ItemKind::TyAlias(box TyAlias {\n+            defaultness, generics, where_clauses, bounds, ty, ..\n+        }) => {\n             visit_defaultness(defaultness, vis);\n             vis.visit_generics(generics);\n+            vis.visit_span(&mut where_clauses.0.1);\n+            vis.visit_span(&mut where_clauses.1.1);\n             visit_bounds(bounds, vis);\n             visit_opt(ty, |ty| vis.visit_ty(ty));\n         }\n@@ -1087,9 +1091,18 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n             visit_fn_sig(sig, visitor);\n             visit_opt(body, |body| visitor.visit_block(body));\n         }\n-        AssocItemKind::TyAlias(box TyAlias { defaultness, generics, bounds, ty }) => {\n+        AssocItemKind::TyAlias(box TyAlias {\n+            defaultness,\n+            generics,\n+            where_clauses,\n+            bounds,\n+            ty,\n+            ..\n+        }) => {\n             visit_defaultness(defaultness, visitor);\n             visitor.visit_generics(generics);\n+            visitor.visit_span(&mut where_clauses.0.1);\n+            visitor.visit_span(&mut where_clauses.1.1);\n             visit_bounds(bounds, visitor);\n             visit_opt(ty, |ty| visitor.visit_ty(ty));\n         }\n@@ -1152,9 +1165,18 @@ pub fn noop_flat_map_foreign_item<T: MutVisitor>(\n             visit_fn_sig(sig, visitor);\n             visit_opt(body, |body| visitor.visit_block(body));\n         }\n-        ForeignItemKind::TyAlias(box TyAlias { defaultness, generics, bounds, ty }) => {\n+        ForeignItemKind::TyAlias(box TyAlias {\n+            defaultness,\n+            generics,\n+            where_clauses,\n+            bounds,\n+            ty,\n+            ..\n+        }) => {\n             visit_defaultness(defaultness, visitor);\n             visitor.visit_generics(generics);\n+            visitor.visit_span(&mut where_clauses.0.1);\n+            visitor.visit_span(&mut where_clauses.1.1);\n             visit_bounds(bounds, visitor);\n             visit_opt(ty, |ty| visitor.visit_ty(ty));\n         }"}, {"sha": "ed16c25d921e4872b7f02f528847e07d72f9b604", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -303,7 +303,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             walk_list!(visitor, visit_foreign_item, &foreign_module.items);\n         }\n         ItemKind::GlobalAsm(ref asm) => walk_inline_asm(visitor, asm),\n-        ItemKind::TyAlias(box TyAlias { defaultness: _, ref generics, ref bounds, ref ty }) => {\n+        ItemKind::TyAlias(box TyAlias { ref generics, ref bounds, ref ty, .. }) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, ty);\n@@ -559,7 +559,7 @@ pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignI\n             let kind = FnKind::Fn(FnCtxt::Foreign, ident, sig, vis, body.as_deref());\n             visitor.visit_fn(kind, span, id);\n         }\n-        ForeignItemKind::TyAlias(box TyAlias { defaultness: _, generics, bounds, ty }) => {\n+        ForeignItemKind::TyAlias(box TyAlias { generics, bounds, ty, .. }) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, ty);\n@@ -665,7 +665,7 @@ pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem,\n             let kind = FnKind::Fn(FnCtxt::Assoc(ctxt), ident, sig, vis, body.as_deref());\n             visitor.visit_fn(kind, span, id);\n         }\n-        AssocItemKind::TyAlias(box TyAlias { defaultness: _, generics, bounds, ty }) => {\n+        AssocItemKind::TyAlias(box TyAlias { generics, bounds, ty, .. }) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, ty);"}, {"sha": "77c5797442a5577e5c48f08c99c5f37252a21daf", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -277,7 +277,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             ItemKind::GlobalAsm(ref asm) => {\n                 hir::ItemKind::GlobalAsm(self.lower_inline_asm(span, asm))\n             }\n-            ItemKind::TyAlias(box TyAlias { ref generics, ty: Some(ref ty), .. }) => {\n+            ItemKind::TyAlias(box TyAlias {\n+                ref generics,\n+                where_clauses,\n+                ty: Some(ref ty),\n+                ..\n+            }) => {\n                 // We lower\n                 //\n                 // type Foo = impl Trait\n@@ -292,16 +297,24 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         capturable_lifetimes: &mut FxHashSet::default(),\n                     },\n                 );\n+                let mut generics = generics.clone();\n+                generics.where_clause.has_where_token = where_clauses.0.0;\n+                generics.where_clause.span = where_clauses.0.1;\n                 let generics = self.lower_generics(\n-                    generics,\n+                    &generics,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                 );\n                 hir::ItemKind::TyAlias(ty, generics)\n             }\n-            ItemKind::TyAlias(box TyAlias { ref generics, ty: None, .. }) => {\n+            ItemKind::TyAlias(box TyAlias {\n+                ref generics, ref where_clauses, ty: None, ..\n+            }) => {\n                 let ty = self.arena.alloc(self.ty(span, hir::TyKind::Err));\n+                let mut generics = generics.clone();\n+                generics.where_clause.has_where_token = where_clauses.0.0;\n+                generics.where_clause.span = where_clauses.0.1;\n                 let generics = self.lower_generics(\n-                    generics,\n+                    &generics,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                 );\n                 hir::ItemKind::TyAlias(ty, generics)\n@@ -832,18 +845,27 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 );\n                 (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Provided(body_id)))\n             }\n-            AssocItemKind::TyAlias(box TyAlias { ref generics, ref bounds, ref ty, .. }) => {\n+            AssocItemKind::TyAlias(box TyAlias {\n+                ref generics,\n+                where_clauses,\n+                ref bounds,\n+                ref ty,\n+                ..\n+            }) => {\n                 let ty = ty.as_ref().map(|x| {\n                     self.lower_ty(x, ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n                 });\n+                let mut generics = generics.clone();\n+                generics.where_clause.has_where_token = where_clauses.1.0;\n+                generics.where_clause.span = where_clauses.1.1;\n                 let generics = self.lower_generics(\n-                    generics,\n+                    &generics,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                 );\n                 let kind = hir::TraitItemKind::Type(\n                     self.lower_param_bounds(\n                         bounds,\n-                        ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     ),\n                     ty,\n                 );\n@@ -917,9 +939,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                 (generics, hir::ImplItemKind::Fn(sig, body_id))\n             }\n-            AssocItemKind::TyAlias(box TyAlias { generics, ty, .. }) => {\n+            AssocItemKind::TyAlias(box TyAlias { generics, where_clauses, ty, .. }) => {\n+                let mut generics = generics.clone();\n+                generics.where_clause.has_where_token = where_clauses.1.0;\n+                generics.where_clause.span = where_clauses.1.1;\n                 let generics = self.lower_generics(\n-                    generics,\n+                    &generics,\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                 );\n                 let kind = match ty {"}, {"sha": "0b97a1b1814502471816c1176269a63140e7c104", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 73, "deletions": 7, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -11,7 +11,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::walk_list;\n use rustc_ast::*;\n-use rustc_ast_pretty::pprust;\n+use rustc_ast_pretty::pprust::{self, State};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{error_code, pluralize, struct_span_err, Applicability};\n use rustc_parse::validate_attr;\n@@ -122,6 +122,40 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n+    fn check_gat_where(\n+        &self,\n+        before_predicates: &[WherePredicate],\n+        where_clauses: (ast::TyAliasWhereClause, ast::TyAliasWhereClause),\n+    ) {\n+        let sess = &self.session;\n+        if !before_predicates.is_empty() {\n+            let mut state = State::new();\n+            if !where_clauses.1.0 {\n+                state.space();\n+                state.word_space(\"where\");\n+            } else {\n+                state.word_space(\",\");\n+            }\n+            let mut first = true;\n+            for p in before_predicates.iter() {\n+                if !first {\n+                    state.word_space(\",\");\n+                }\n+                first = false;\n+                state.print_where_predicate(p);\n+            }\n+            let suggestion = state.s.eof();\n+            sess.struct_span_err(where_clauses.0.1, \"where clause not allowed here\")\n+                .span_suggestion(\n+                    where_clauses.1.1.shrink_to_hi(),\n+                    \"move it here\",\n+                    suggestion,\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n+        }\n+    }\n+\n     fn with_banned_assoc_ty_bound(&mut self, f: impl FnOnce(&mut Self)) {\n         let old = mem::replace(&mut self.is_assoc_ty_bound_banned, true);\n         f(self);\n@@ -454,7 +488,7 @@ impl<'a> AstValidator<'a> {\n             .emit();\n     }\n \n-    fn check_foreign_ty_genericless(&self, generics: &Generics) {\n+    fn check_foreign_ty_genericless(&self, generics: &Generics, where_span: Span) {\n         let cannot_have = |span, descr, remove_descr| {\n             self.err_handler()\n                 .struct_span_err(\n@@ -477,7 +511,7 @@ impl<'a> AstValidator<'a> {\n         }\n \n         if !generics.where_clause.predicates.is_empty() {\n-            cannot_have(generics.where_clause.span, \"`where` clauses\", \"`where` clause\");\n+            cannot_have(where_span, \"`where` clauses\", \"`where` clause\");\n         }\n     }\n \n@@ -1223,13 +1257,25 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 let msg = \"free static item without body\";\n                 self.error_item_without_body(item.span, \"static\", msg, \" = <expr>;\");\n             }\n-            ItemKind::TyAlias(box TyAlias { defaultness, ref bounds, ref ty, .. }) => {\n+            ItemKind::TyAlias(box TyAlias {\n+                defaultness,\n+                where_clauses,\n+                ref bounds,\n+                ref ty,\n+                ..\n+            }) => {\n                 self.check_defaultness(item.span, defaultness);\n                 if ty.is_none() {\n                     let msg = \"free type alias without body\";\n                     self.error_item_without_body(item.span, \"type\", msg, \" = <type>;\");\n                 }\n                 self.check_type_no_bounds(bounds, \"this context\");\n+                if where_clauses.1.0 {\n+                    self.err_handler().span_err(\n+                        where_clauses.1.1,\n+                        \"where clauses are not allowed after the type for type aliases\",\n+                    )\n+                }\n             }\n             _ => {}\n         }\n@@ -1245,11 +1291,18 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 self.check_foreign_fn_headerless(fi.ident, fi.span, sig.header);\n                 self.check_foreign_item_ascii_only(fi.ident);\n             }\n-            ForeignItemKind::TyAlias(box TyAlias { defaultness, generics, bounds, ty, .. }) => {\n+            ForeignItemKind::TyAlias(box TyAlias {\n+                defaultness,\n+                generics,\n+                where_clauses,\n+                bounds,\n+                ty,\n+                ..\n+            }) => {\n                 self.check_defaultness(fi.span, *defaultness);\n                 self.check_foreign_kind_bodyless(fi.ident, \"type\", ty.as_ref().map(|b| b.span));\n                 self.check_type_no_bounds(bounds, \"`extern` blocks\");\n-                self.check_foreign_ty_genericless(generics);\n+                self.check_foreign_ty_genericless(generics, where_clauses.0.1);\n                 self.check_foreign_item_ascii_only(fi.ident);\n             }\n             ForeignItemKind::Static(_, _, body) => {\n@@ -1503,9 +1556,22 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 AssocItemKind::Fn(box Fn { body, .. }) => {\n                     self.check_impl_item_provided(item.span, body, \"function\", \" { <body> }\");\n                 }\n-                AssocItemKind::TyAlias(box TyAlias { bounds, ty, .. }) => {\n+                AssocItemKind::TyAlias(box TyAlias {\n+                    generics,\n+                    where_clauses,\n+                    where_predicates_split,\n+                    bounds,\n+                    ty,\n+                    ..\n+                }) => {\n                     self.check_impl_item_provided(item.span, ty, \"type\", \" = <type>;\");\n                     self.check_type_no_bounds(bounds, \"`impl`s\");\n+                    if ty.is_some() {\n+                        self.check_gat_where(\n+                            generics.where_clause.predicates.split_at(*where_predicates_split).0,\n+                            *where_clauses,\n+                        );\n+                    }\n                 }\n                 _ => {}\n             }"}, {"sha": "2a35dd1006e7e659ac6d86131c47482f298b10c9", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -36,12 +36,16 @@ impl<'a> State<'a> {\n             ast::ForeignItemKind::TyAlias(box ast::TyAlias {\n                 defaultness,\n                 generics,\n+                where_clauses,\n+                where_predicates_split,\n                 bounds,\n                 ty,\n             }) => {\n                 self.print_associated_type(\n                     ident,\n                     generics,\n+                    *where_clauses,\n+                    *where_predicates_split,\n                     bounds,\n                     ty.as_deref(),\n                     vis,\n@@ -95,24 +99,29 @@ impl<'a> State<'a> {\n         &mut self,\n         ident: Ident,\n         generics: &ast::Generics,\n+        where_clauses: (ast::TyAliasWhereClause, ast::TyAliasWhereClause),\n+        where_predicates_split: usize,\n         bounds: &ast::GenericBounds,\n         ty: Option<&ast::Ty>,\n         vis: &ast::Visibility,\n         defaultness: ast::Defaultness,\n     ) {\n+        let (before_predicates, after_predicates) =\n+            generics.where_clause.predicates.split_at(where_predicates_split);\n         self.head(\"\");\n         self.print_visibility(vis);\n         self.print_defaultness(defaultness);\n         self.word_space(\"type\");\n         self.print_ident(ident);\n         self.print_generic_params(&generics.params);\n         self.print_type_bounds(\":\", bounds);\n-        self.print_where_clause(&generics.where_clause);\n+        self.print_where_clause_parts(where_clauses.0.0, before_predicates);\n         if let Some(ty) = ty {\n             self.space();\n             self.word_space(\"=\");\n             self.print_type(ty);\n         }\n+        self.print_where_clause_parts(where_clauses.1.0, after_predicates);\n         self.word(\";\");\n         self.end(); // end inner head-block\n         self.end(); // end outer head-block\n@@ -211,13 +220,17 @@ impl<'a> State<'a> {\n             ast::ItemKind::TyAlias(box ast::TyAlias {\n                 defaultness,\n                 ref generics,\n+                where_clauses,\n+                where_predicates_split,\n                 ref bounds,\n                 ref ty,\n             }) => {\n                 let ty = ty.as_deref();\n                 self.print_associated_type(\n                     item.ident,\n                     generics,\n+                    where_clauses,\n+                    where_predicates_split,\n                     bounds,\n                     ty,\n                     &item.vis,\n@@ -496,10 +509,19 @@ impl<'a> State<'a> {\n             ast::AssocItemKind::Const(def, ty, body) => {\n                 self.print_item_const(ident, None, ty, body.as_deref(), vis, *def);\n             }\n-            ast::AssocItemKind::TyAlias(box ast::TyAlias { defaultness, generics, bounds, ty }) => {\n+            ast::AssocItemKind::TyAlias(box ast::TyAlias {\n+                defaultness,\n+                generics,\n+                where_clauses,\n+                where_predicates_split,\n+                bounds,\n+                ty,\n+            }) => {\n                 self.print_associated_type(\n                     ident,\n                     generics,\n+                    *where_clauses,\n+                    *where_predicates_split,\n                     bounds,\n                     ty.as_deref(),\n                     vis,\n@@ -566,14 +588,22 @@ impl<'a> State<'a> {\n     }\n \n     fn print_where_clause(&mut self, where_clause: &ast::WhereClause) {\n-        if where_clause.predicates.is_empty() && !where_clause.has_where_token {\n+        self.print_where_clause_parts(where_clause.has_where_token, &where_clause.predicates);\n+    }\n+\n+    crate fn print_where_clause_parts(\n+        &mut self,\n+        has_where_token: bool,\n+        predicates: &[ast::WherePredicate],\n+    ) {\n+        if predicates.is_empty() && !has_where_token {\n             return;\n         }\n \n         self.space();\n         self.word_space(\"where\");\n \n-        for (i, predicate) in where_clause.predicates.iter().enumerate() {\n+        for (i, predicate) in predicates.iter().enumerate() {\n             if i != 0 {\n                 self.word_space(\",\");\n             }"}, {"sha": "f87f4726d1c6967a05a047067ad3f450eb1f6c12", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -560,6 +560,11 @@ impl<'a> TraitDef<'a> {\n                 kind: ast::AssocItemKind::TyAlias(Box::new(ast::TyAlias {\n                     defaultness: ast::Defaultness::Final,\n                     generics: Generics::default(),\n+                    where_clauses: (\n+                        ast::TyAliasWhereClause::default(),\n+                        ast::TyAliasWhereClause::default(),\n+                    ),\n+                    where_predicates_split: 0,\n                     bounds: Vec::new(),\n                     ty: Some(type_def.to_ty(cx, self.span, type_ident, generics)),\n                 })),"}, {"sha": "3a4fa98fad153537af2f182bad6d97b28ac3abef", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 29, "deletions": 53, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -13,11 +13,12 @@ use rustc_ast::{EnumDef, FieldDef, Generics, TraitRef, Ty, TyKind, Variant, Vari\n use rustc_ast::{FnHeader, ForeignItem, Path, PathSegment, Visibility, VisibilityKind};\n use rustc_ast::{MacArgs, MacCall, MacDelimiter};\n use rustc_ast_pretty::pprust;\n-use rustc_errors::{struct_span_err, Applicability, ErrorGuaranteed, PResult, StashKey};\n+use rustc_errors::{struct_span_err, Applicability, PResult, StashKey};\n use rustc_span::edition::{Edition, LATEST_STABLE_EDITION};\n use rustc_span::lev_distance::lev_distance;\n use rustc_span::source_map::{self, Span};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n+use rustc_span::DUMMY_SP;\n \n use std::convert::TryFrom;\n use std::mem;\n@@ -791,44 +792,6 @@ impl<'a> Parser<'a> {\n         ))\n     }\n \n-    /// Emits an error that the where clause at the end of a type alias is not\n-    /// allowed and suggests moving it.\n-    fn error_ty_alias_where(\n-        &self,\n-        before_where_clause_present: bool,\n-        before_where_clause_span: Span,\n-        after_predicates: &[WherePredicate],\n-        after_where_clause_span: Span,\n-    ) -> ErrorGuaranteed {\n-        let mut err =\n-            self.struct_span_err(after_where_clause_span, \"where clause not allowed here\");\n-        if !after_predicates.is_empty() {\n-            let mut state = crate::pprust::State::new();\n-            if !before_where_clause_present {\n-                state.space();\n-                state.word_space(\"where\");\n-            } else {\n-                state.word_space(\",\");\n-            }\n-            let mut first = true;\n-            for p in after_predicates.iter() {\n-                if !first {\n-                    state.word_space(\",\");\n-                }\n-                first = false;\n-                state.print_where_predicate(p);\n-            }\n-            let suggestion = state.s.eof();\n-            err.span_suggestion(\n-                before_where_clause_span.shrink_to_hi(),\n-                \"move it here\",\n-                suggestion,\n-                Applicability::MachineApplicable,\n-            );\n-        }\n-        err.emit()\n-    }\n-\n     /// Parses a `type` alias with the following grammar:\n     /// ```\n     /// TypeAlias = \"type\" Ident Generics {\":\" GenericBounds}? {\"=\" Ty}? \";\" ;\n@@ -841,27 +804,40 @@ impl<'a> Parser<'a> {\n         // Parse optional colon and param bounds.\n         let bounds =\n             if self.eat(&token::Colon) { self.parse_generic_bounds(None)? } else { Vec::new() };\n-\n-        generics.where_clause = self.parse_where_clause()?;\n+        let before_where_clause = self.parse_where_clause()?;\n \n         let ty = if self.eat(&token::Eq) { Some(self.parse_ty()?) } else { None };\n \n-        if self.token.is_keyword(kw::Where) {\n-            let after_where_clause = self.parse_where_clause()?;\n-\n-            self.error_ty_alias_where(\n-                generics.where_clause.has_where_token,\n-                generics.where_clause.span,\n-                &after_where_clause.predicates,\n-                after_where_clause.span,\n-            );\n+        let after_where_clause = self.parse_where_clause()?;\n \n-            generics.where_clause.predicates.extend(after_where_clause.predicates.into_iter());\n-        }\n+        let where_clauses = (\n+            TyAliasWhereClause(before_where_clause.has_where_token, before_where_clause.span),\n+            TyAliasWhereClause(after_where_clause.has_where_token, after_where_clause.span),\n+        );\n+        let where_predicates_split = before_where_clause.predicates.len();\n+        let mut predicates = before_where_clause.predicates;\n+        predicates.extend(after_where_clause.predicates.into_iter());\n+        let where_clause = WhereClause {\n+            has_where_token: before_where_clause.has_where_token\n+                || after_where_clause.has_where_token,\n+            predicates,\n+            span: DUMMY_SP,\n+        };\n+        generics.where_clause = where_clause;\n \n         self.expect_semi()?;\n \n-        Ok((ident, ItemKind::TyAlias(Box::new(TyAlias { defaultness, generics, bounds, ty }))))\n+        Ok((\n+            ident,\n+            ItemKind::TyAlias(Box::new(TyAlias {\n+                defaultness,\n+                generics,\n+                where_clauses,\n+                where_predicates_split,\n+                bounds,\n+                ty,\n+            })),\n+        ))\n     }\n \n     /// Parses a `UseTree`."}, {"sha": "c5c13451488915c496e44b210e5a5ab7388a4a01", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -24,7 +24,7 @@ trait Bar {\n }\n \n impl Bar for Foo {\n-    type Assoc where Self: Sized = Foo;\n+    type Assoc = Foo where Self: Sized;\n     //~^ ERROR where clauses on associated types are unstable\n }\n "}, {"sha": "12a40ff0a12f5b9db1800ac6ddbaf343a09c355f", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -55,7 +55,7 @@ LL |     type Assoc where Self: Sized;\n error[E0658]: where clauses on associated types are unstable\n   --> $DIR/feature-gate-generic_associated_types.rs:27:5\n    |\n-LL |     type Assoc where Self: Sized = Foo;\n+LL |     type Assoc = Foo where Self: Sized;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information"}, {"sha": "a64e52124c8bf20eefd5a26cadac7cb595e2c04d", "filename": "src/test/ui/generic-associated-types/bugs/issue-87735.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.stderr?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -1,9 +1,21 @@\n+error: where clause not allowed here\n+  --> $DIR/issue-87735.rs:15:19\n+   |\n+LL |   type Output<'a> where Self: 'a = &'a [T];\n+   |                   ^^^^^^^^^^^^^^          - help: move it here: `where Self: 'a`\n+\n+error: where clause not allowed here\n+  --> $DIR/issue-87735.rs:36:19\n+   |\n+LL |   type Output<'a> where Self: 'a = FooRef<'a, U>;\n+   |                   ^^^^^^^^^^^^^^                - help: move it here: `where Self: 'a`\n+\n error[E0207]: the type parameter `U` is not constrained by the impl trait, self type, or predicates\n   --> $DIR/issue-87735.rs:27:13\n    |\n LL | impl<'b, T, U> AsRef2 for Foo<T>\n    |             ^ unconstrained type parameter\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0207`."}, {"sha": "f92930fc94845811f50f9442846d15cfa924ce28", "filename": "src/test/ui/generic-associated-types/bugs/issue-87748.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -1,3 +1,9 @@\n+error: where clause not allowed here\n+  --> $DIR/issue-87748.rs:16:24\n+   |\n+LL |     type Assoc<'a, 'b> where 'b: 'a = u32;\n+   |                        ^^^^^^^^^^^^      - help: move it here: `where 'b: 'a`\n+\n error[E0478]: lifetime bound not satisfied\n   --> $DIR/issue-87748.rs:18:5\n    |\n@@ -15,6 +21,6 @@ note: but lifetime parameter must outlive the anonymous lifetime #1 defined here\n LL |     fn do_sth(_: u32) {}\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0478`."}, {"sha": "157e1b1d295734cba370716498807d36ddf2463d", "filename": "src/test/ui/generic-associated-types/collections-project-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -32,7 +32,7 @@ impl CollectionFamily for VecFamily {\n }\n \n impl<T> Collection<T> for Vec<T> {\n-    type Iter<'iter> where T: 'iter = std::slice::Iter<'iter, T>;\n+    type Iter<'iter> = std::slice::Iter<'iter, T> where T: 'iter;\n     type Family = VecFamily;\n \n     fn empty() -> Self {"}, {"sha": "1c00aa73feb9fa24c39cd8236f74e27ab3693a6b", "filename": "src/test/ui/generic-associated-types/collections.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -32,7 +32,7 @@ impl CollectionFamily for VecFamily {\n }\n \n impl<T> Collection<T> for Vec<T> {\n-    type Iter<'iter> where T: 'iter = std::slice::Iter<'iter, T>;\n+    type Iter<'iter> = std::slice::Iter<'iter, T> where T: 'iter;\n     type Family = VecFamily;\n \n     fn empty() -> Self {"}, {"sha": "060804269aa70a6a18d07010a10d19f743c8b7a2", "filename": "src/test/ui/generic-associated-types/construct_with_other_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -16,9 +16,9 @@ trait Baz {\n }\n \n impl<T> Baz for T where T: Foo {\n-    type Quux<'a> where T: 'a = T;\n+    type Quux<'a> = T where T: 'a;\n \n-    type Baa<'a> where T: 'a = &'a <T as Foo>::Bar<'a, 'static>;\n+    type Baa<'a> = &'a <T as Foo>::Bar<'a, 'static> where T: 'a;\n }\n \n fn main() {}"}, {"sha": "7bbcf950ae183c20f7b6c6adda8296ebdf18a955", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -15,7 +15,7 @@ impl Foo for Fooy {\n struct Fooer<T>(T);\n \n impl<T> Foo for Fooer<T> {\n-    type A<'x> where T: 'x = &'x ();\n+    type A<'x> = &'x () where T: 'x;\n }\n \n fn f(_arg : Box<dyn for<'a> Foo<A<'a> = &'a ()>>) {}"}, {"sha": "2ecbc8c5912590097d4647be547a6cb143144ded", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -19,7 +19,7 @@ impl Foo for Bar {\n     type Assoc = usize;\n     type Assoc2<T> = Vec<T>;\n     //~^ ERROR `T` doesn't implement `std::fmt::Display`\n-    type Assoc3<T> where T: Iterator = Vec<T>;\n+    type Assoc3<T> = Vec<T> where T: Iterator;\n     //~^ ERROR impl has stricter requirements than trait\n     type WithDefault<'a, T: Debug + 'a> = &'a dyn Iterator<Item=T>;\n     type NoGenerics = ::std::cell::Cell<i32>;"}, {"sha": "68594bba48632bac76e779867e79291c93785b90", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -16,7 +16,7 @@ error[E0276]: impl has stricter requirements than trait\n LL |     type Assoc3<T>;\n    |     --------------- definition of `Assoc3` from trait\n ...\n-LL |     type Assoc3<T> where T: Iterator = Vec<T>;\n+LL |     type Assoc3<T> = Vec<T> where T: Iterator;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Iterator`\n \n error: aborting due to 2 previous errors"}, {"sha": "bb5992c88f08f0973abf045c3e663610fedbbf5f", "filename": "src/test/ui/generic-associated-types/impl_bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -12,12 +12,12 @@ trait Foo {\n struct Fooy<T>(T);\n \n impl<T> Foo for Fooy<T> {\n-    type A<'a> where Self: 'static = (&'a ());\n+    type A<'a> = (&'a ()) where Self: 'static;\n     //~^ ERROR `impl` associated type\n-    type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n+    type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n     //~^ ERROR `impl` associated type\n     //~| ERROR lifetime bound not satisfied\n-    type C where Self: Copy = String;\n+    type C = String where Self: Copy;\n     //~^ ERROR the trait bound `T: Copy` is not satisfied\n     fn d() where Self: Copy {}\n     //~^ ERROR the trait bound `T: Copy` is not satisfied"}, {"sha": "3d90471e398e613f78684270075664dbb1942b50", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -4,7 +4,7 @@ error: `impl` associated type signature for `A` doesn't match `trait` associated\n LL |     type A<'a> where Self: 'a;\n    |     -------------------------- expected\n ...\n-LL |     type A<'a> where Self: 'static = (&'a ());\n+LL |     type A<'a> = (&'a ()) where Self: 'static;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found\n \n error: `impl` associated type signature for `B` doesn't match `trait` associated type signature\n@@ -13,35 +13,33 @@ error: `impl` associated type signature for `B` doesn't match `trait` associated\n LL |     type B<'a, 'b> where 'a: 'b;\n    |     ---------------------------- expected\n ...\n-LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n+LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/impl_bounds.rs:17:35\n+  --> $DIR/impl_bounds.rs:17:22\n    |\n LL |     type B<'a, 'b> where 'a: 'b;\n    |     ---------------------------- definition of `B` from trait\n ...\n-LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n-   |                                -  ^^^^^^^^^^^^^^^\n-   |                                |\n-   |                                help: try copying this clause from the trait: `, 'a: 'b`\n+LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n+   |                      ^^^^^^^^^^^^^^^             - help: try copying this clause from the trait: `, 'a: 'b`\n    |\n note: lifetime parameter instantiated with the lifetime `'a` as defined here\n   --> $DIR/impl_bounds.rs:17:12\n    |\n-LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n+LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n    |            ^^\n note: but lifetime parameter must outlive the lifetime `'b` as defined here\n   --> $DIR/impl_bounds.rs:17:16\n    |\n-LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n+LL |     type B<'a, 'b> = (&'a(), &'b ()) where 'b: 'a;\n    |                ^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/impl_bounds.rs:20:5\n    |\n-LL |     type C where Self: Copy = String;\n+LL |     type C = String where Self: Copy;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n note: required because of the requirements on the impl of `Copy` for `Fooy<T>`"}, {"sha": "4df8235d95f34b878158503c2b4d10ad6511a64d", "filename": "src/test/ui/generic-associated-types/impl_bounds_ok.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds_ok.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -22,9 +22,9 @@ impl Foo for Fooy {\n struct Fooer<T>(T);\n \n impl<T> Foo for Fooer<T> {\n-    type A<'x> where T: 'x = (&'x ());\n-    type B<'u, 'v> where 'u: 'v = (&'v &'u ());\n-    type C where Self: Clone + ToOwned = String;\n+    type A<'x> = (&'x ()) where T: 'x;\n+    type B<'u, 'v> = (&'v &'u ()) where 'u: 'v;\n+    type C = String where Self: Clone + ToOwned;\n }\n \n fn main() {}"}, {"sha": "d352c1948f234f417c404f24c806a399d243cdb6", "filename": "src/test/ui/generic-associated-types/issue-47206-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -9,7 +9,7 @@ trait Foo {\n struct Bar;\n \n impl Foo for Bar {\n-    type Assoc3<T> where T: Iterator = Vec<T>;\n+    type Assoc3<T> = Vec<T> where T: Iterator;\n     //~^ ERROR impl has stricter requirements than trait\n }\n "}, {"sha": "39beac38c0b6151951ff84594ff6a07f95b7b0d2", "filename": "src/test/ui/generic-associated-types/issue-47206-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -4,7 +4,7 @@ error[E0276]: impl has stricter requirements than trait\n LL |     type Assoc3<T>;\n    |     --------------- definition of `Assoc3` from trait\n ...\n-LL |     type Assoc3<T> where T: Iterator = Vec<T>;\n+LL |     type Assoc3<T> = Vec<T> where T: Iterator;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Iterator`\n \n error: aborting due to previous error"}, {"sha": "28eb3b0e750e2dbc866db4f866864fdf12fb860b", "filename": "src/test/ui/generic-associated-types/issue-76826.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76826.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76826.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76826.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -29,7 +29,7 @@ impl<T> Windows<T> {\n }\n \n impl<T> Iter for Windows<T> {\n-    type Item<'a> where T: 'a = &'a mut [T];\n+    type Item<'a> = &'a mut [T] where T: 'a;\n \n     fn next<'a>(&'a mut self) -> Option<Self::Item<'a>> {\n         let slice = self.items.get_mut(self.start..self.start + self.len)?;"}, {"sha": "b9a3c583f7c89991f59db5571622016ad08f01bc", "filename": "src/test/ui/generic-associated-types/issue-79422.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -22,7 +22,7 @@ trait MapLike<K, V> {\n }\n \n impl<K: Ord, V: 'static> MapLike<K, V> for std::collections::BTreeMap<K, V> {\n-    type VRefCont<'a> where Self: 'a = &'a V;\n+    type VRefCont<'a> = &'a V where Self: 'a;\n     fn get<'a>(&'a self, key: &K) -> Option<&'a V> {\n         std::collections::BTreeMap::get(self, key)\n     }"}, {"sha": "11c3dffde4b38f2e4400396d0fdef337af6ea69d", "filename": "src/test/ui/generic-associated-types/issue-84931.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-84931.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-84931.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-84931.stderr?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -2,9 +2,9 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/issue-84931.rs:15:21\n    |\n LL |     type Item<'a> = &'a mut T;\n-   |                  -  ^^^^^^^^^ ...so that the reference type `&'a mut T` does not outlive the data it points at\n-   |                  |\n-   |                  help: consider adding a where clause: `where T: 'a`\n+   |                     ^^^^^^^^^- help: consider adding a where clause: `where T: 'a`\n+   |                     |\n+   |                     ...so that the reference type `&'a mut T` does not outlive the data it points at\n \n error: aborting due to previous error\n "}, {"sha": "0f8096c8a7c1bf37c374c7448ccf072dd044763a", "filename": "src/test/ui/generic-associated-types/issue-86787.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -21,13 +21,10 @@ where\n     Right: HasChildrenOf,\n {\n     type T = Either<Left::T, Right::T>;\n-    // We used to error below because the where clause doesn't match the trait.\n-    // Now, we error early on the trait itself.\n-    type TRef<'a>\n+    type TRef<'a> = Either<&'a Left::T, &'a Right::T>\n     where\n-    <Left as HasChildrenOf>::T: 'a,\n-    <Right as HasChildrenOf>::T: 'a\n-    = Either<&'a Left::T, &'a Right::T>;\n+        <Left as HasChildrenOf>::T: 'a,\n+        <Right as HasChildrenOf>::T: 'a;\n \n     fn ref_children<'a>(&'a self) -> Vec<Self::TRef<'a>> {\n         todo!()"}, {"sha": "6b10edf073ff6ca01a141599597eb2dfa997c350", "filename": "src/test/ui/generic-associated-types/issue-88287.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -27,11 +27,10 @@ impl<T, Criteria> SearchableResourceExt<Criteria> for T\n where\n     T: SearchableResource<Criteria>,\n {\n-    type Future<'f, A, B: 'f>\n+    type Future<'f, A, B: 'f> = SearchFutureTy<'f, A, B>\n     where\n         A: SearchableResource<B> + ?Sized + 'f,\n-        Self: 'f,\n-    = SearchFutureTy<'f, A, B>;\n+        Self: 'f;\n \n     fn search<'c>(&'c self, _client: &'c ()) -> Self::Future<'c, Self, Criteria> {\n         async move { todo!() }"}, {"sha": "51fe3360c7eb256195dc61d53dbc08a083a8e844", "filename": "src/test/ui/generic-associated-types/issue-90014.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -5,9 +5,7 @@ LL |     type Fut<'a> where Self: 'a;\n    |     ---------------------------- definition of `Fut` from trait\n ...\n LL |     type Fut<'a> = impl Future<Output = ()>;\n-   |                 -  ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                 |\n-   |                 help: try copying this clause from the trait: `where Self: 'a`\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^- help: try copying this clause from the trait: `where Self: 'a`\n    |\n note: type must outlive the lifetime `'a` as defined here\n   --> $DIR/issue-90014.rs:14:14"}, {"sha": "5c4a7cf6ffc6074977e1ff2ff6df4a1ea43ab438", "filename": "src/test/ui/generic-associated-types/issue-91139.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -9,10 +9,9 @@ trait Foo<T> {\n }\n \n impl<T> Foo<T> for () {\n-    type Type<'a>\n+    type Type<'a> = ()\n     where\n-        T: 'a,\n-    = ();\n+        T: 'a;\n }\n \n fn foo<T>() {"}, {"sha": "5b90199b8091f6cf94d7837dab99df1fcd910277", "filename": "src/test/ui/generic-associated-types/issue-92033.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.stderr?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -7,9 +7,7 @@ LL | |         Self: 'a;\n    | |_________________- definition of `TextureIter` from trait\n ...\n LL |       type TextureIter<'a> = std::option::IntoIter<&'a Texture>;\n-   |                           -  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                           |\n-   |                           help: try copying this clause from the trait: `where Self: 'a`\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try copying this clause from the trait: `where Self: 'a`\n    |\n note: type must outlive the lifetime `'a` as defined here\n   --> $DIR/issue-92033.rs:22:22"}, {"sha": "81d000f1076ca3194b2af91a7d110f68556ad007", "filename": "src/test/ui/generic-associated-types/issue-92280.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92280.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92280.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92280.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -17,10 +17,9 @@ struct KeySegment_Broken<T> {\n     key: T,\n }\n impl<S: HasAssoc> Iterate<S> for KeySegment_Broken<S::Assoc> {\n-    type Iter<'a>\n+    type Iter<'a> = ()\n     where\n-        Self: 'a,\n-    = ();\n+        Self: 'a;\n }\n \n fn main() {}"}, {"sha": "af0049891b69685f96852a88172858c118384cb6", "filename": "src/test/ui/generic-associated-types/iterable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -11,8 +11,8 @@ trait Iterable {\n \n // Impl for struct type\n impl<T> Iterable for Vec<T> {\n-    type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n-    type Iter<'a> where T: 'a = std::slice::Iter<'a, T>;\n+    type Item<'a> = <std::slice::Iter<'a, T> as Iterator>::Item where T: 'a;\n+    type Iter<'a> = std::slice::Iter<'a, T> where T: 'a;\n \n     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n         self[..].iter()\n@@ -21,8 +21,8 @@ impl<T> Iterable for Vec<T> {\n \n // Impl for a primitive type\n impl<T> Iterable for [T] {\n-    type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n-    type Iter<'a> where T: 'a = std::slice::Iter<'a, T>;\n+    type Item<'a> = <std::slice::Iter<'a, T> as Iterator>::Item where T: 'a;\n+    type Iter<'a> = std::slice::Iter<'a, T> where T: 'a;\n \n     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n         self.iter()"}, {"sha": "5fb8f7a4773d68a583015ffe71284b14a15ed32c", "filename": "src/test/ui/generic-associated-types/missing-where-clause-on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -6,7 +6,7 @@ trait Foo {\n     type Assoc<'a, 'b>;\n }\n impl Foo for () {\n-    type Assoc<'a, 'b> where 'a: 'b = ();\n+    type Assoc<'a, 'b> = () where 'a: 'b;\n     //~^ `impl` associated type\n }\n "}, {"sha": "9e0896127a8a3e11aeb4ccc8007581c432cbf9f3", "filename": "src/test/ui/generic-associated-types/missing-where-clause-on-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-where-clause-on-trait.stderr?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -4,7 +4,7 @@ error: `impl` associated type signature for `Assoc` doesn't match `trait` associ\n LL |     type Assoc<'a, 'b>;\n    |     ------------------- expected\n ...\n-LL |     type Assoc<'a, 'b> where 'a: 'b = ();\n+LL |     type Assoc<'a, 'b> = () where 'a: 'b;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found\n \n error: aborting due to previous error"}, {"sha": "794d677c8b657679f35f842fd1a38c5928e0128a", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -22,7 +22,7 @@ impl<T> Foo for Number<T> {\n     // }\n     // ```\n     // which it is :)\n-    type Item where [T]: Sized = [T];\n+    type Item = [T] where [T]: Sized;\n }\n \n struct OnlySized<T> where T: Sized { f: T }"}, {"sha": "6564a3608ec0eb03a7aca3c73b5cbe41a6f6da39", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -24,7 +24,7 @@ impl Foo for Number {\n     // }\n     // ```\n     // which it is :)\n-    type Item where str: Sized = str;\n+    type Item = str where str: Sized;\n }\n \n struct OnlySized<T> where T: Sized { f: T }"}, {"sha": "e71b6805ad412ca377f897143162a163337eea27", "filename": "src/test/ui/generic-associated-types/streaming_iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fstreaming_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fstreaming_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fstreaming_iterator.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -30,7 +30,7 @@ struct StreamEnumerate<I> {\n }\n \n impl<I: StreamingIterator> StreamingIterator for StreamEnumerate<I> {\n-    type Item<'a> where Self: 'a = (usize, I::Item<'a>);\n+    type Item<'a> = (usize, I::Item<'a>) where Self: 'a;\n     fn next<'a>(&'a mut self) -> Option<Self::Item<'a>> {\n         match self.iter.next() {\n             None => None,\n@@ -44,7 +44,7 @@ impl<I: StreamingIterator> StreamingIterator for StreamEnumerate<I> {\n }\n \n impl<I: Iterator> StreamingIterator for I {\n-    type Item<'a> where Self: 'a = <I as Iterator>::Item;\n+    type Item<'a> = <I as Iterator>::Item where Self: 'a;\n     fn next(&mut self) -> Option<<I as StreamingIterator>::Item<'_>> {\n         Iterator::next(self)\n     }"}, {"sha": "7ff75233d3a8e019c3afcb3e3bffac7c0250fbe9", "filename": "src/test/ui/parser/bounds-lifetime-where.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime-where.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -5,6 +5,6 @@ type A where 'a:, = u8; // OK\n type A where 'a: 'b + 'c = u8; // OK\n type A where = u8; // OK\n type A where 'a: 'b + = u8; // OK\n-type A where , = u8; //~ ERROR expected one of `;`, `=`, lifetime, or type, found `,`\n+type A where , = u8; //~ ERROR expected one of `;`, `=`, `where`, lifetime, or type, found `,`\n \n fn main() {}"}, {"sha": "785a1fb679324fbbcac0cc5e4451b774f98c2db1", "filename": "src/test/ui/parser/bounds-lifetime-where.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbounds-lifetime-where.stderr?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `;`, `=`, lifetime, or type, found `,`\n+error: expected one of `;`, `=`, `where`, lifetime, or type, found `,`\n   --> $DIR/bounds-lifetime-where.rs:8:14\n    |\n LL | type A where , = u8;\n-   |              ^ expected one of `;`, `=`, lifetime, or type\n+   |              ^ expected one of `;`, `=`, `where`, lifetime, or type\n \n error: aborting due to previous error\n "}, {"sha": "cc69af44a13ca2d0393954df1de758c148a000e8", "filename": "src/test/ui/parser/removed-syntax-ptr-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-ptr-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-ptr-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-ptr-lifetime.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -1 +1 @@\n-type bptr = &lifetime/isize; //~ ERROR expected one of `!`, `(`, `::`, `;`, or `<`, found `/`\n+type bptr = &lifetime/isize; //~ ERROR expected one of `!`, `(`, `::`, `;`, `<`, or `where`, found `/`"}, {"sha": "914de43e62d66fa904ce4e67cd734247be1b5eeb", "filename": "src/test/ui/parser/removed-syntax-ptr-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-ptr-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-ptr-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-ptr-lifetime.stderr?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `!`, `(`, `::`, `;`, or `<`, found `/`\n+error: expected one of `!`, `(`, `::`, `;`, `<`, or `where`, found `/`\n   --> $DIR/removed-syntax-ptr-lifetime.rs:1:22\n    |\n LL | type bptr = &lifetime/isize;\n-   |                      ^ expected one of `!`, `(`, `::`, `;`, or `<`\n+   |                      ^ expected one of `!`, `(`, `::`, `;`, `<`, or `where`\n \n error: aborting due to previous error\n "}, {"sha": "99ab8a7c48ccf44c7d2bd40c0c876e950229aa96", "filename": "src/test/ui/parser/type-alias-where.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -6,9 +6,9 @@\n type Foo where u32: Copy = ();\n // Not fine.\n type Bar = () where u32: Copy;\n-//~^ ERROR where clause not allowed here\n+//~^ ERROR where clauses are not allowed\n type Baz = () where;\n-//~^ ERROR where clause not allowed here\n+//~^ ERROR where clauses are not allowed\n \n trait Trait {\n     // Fine.\n@@ -18,19 +18,19 @@ trait Trait {\n }\n \n impl Trait for u32 {\n-    // Fine.\n+    // Not fine, suggests moving.\n     type Assoc where u32: Copy = ();\n-    // Not fine, suggests moving `i32: Copy`\n+    //~^ ERROR where clause not allowed here\n+    // Not fine, suggests moving `u32: Copy`\n     type Assoc2 where u32: Copy = () where i32: Copy;\n     //~^ ERROR where clause not allowed here\n }\n \n impl Trait for i32 {\n-    // Not fine, suggests moving `u32: Copy`\n+    // Fine.\n     type Assoc = () where u32: Copy;\n-    //~^ ERROR where clause not allowed here\n     // Not fine, suggests moving both.\n-    type Assoc2 = () where u32: Copy, i32: Copy;\n+    type Assoc2 where u32: Copy, i32: Copy = ();\n     //~^ ERROR where clause not allowed here\n }\n "}, {"sha": "4cc8b703cede96bfbe7d158c7d95cdbb36211d87", "filename": "src/test/ui/parser/type-alias-where.stderr", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where.stderr?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -1,40 +1,32 @@\n-error: where clause not allowed here\n+error: where clauses are not allowed after the type for type aliases\n   --> $DIR/type-alias-where.rs:8:15\n    |\n LL | type Bar = () where u32: Copy;\n-   |         -     ^^^^^^^^^^^^^^^\n-   |         |\n-   |         help: move it here: `where u32: Copy`\n+   |               ^^^^^^^^^^^^^^^\n \n-error: where clause not allowed here\n+error: where clauses are not allowed after the type for type aliases\n   --> $DIR/type-alias-where.rs:10:15\n    |\n LL | type Baz = () where;\n    |               ^^^^^\n \n error: where clause not allowed here\n-  --> $DIR/type-alias-where.rs:24:38\n+  --> $DIR/type-alias-where.rs:22:16\n    |\n-LL |     type Assoc2 where u32: Copy = () where i32: Copy;\n-   |                                -     ^^^^^^^^^^^^^^^\n-   |                                |\n-   |                                help: move it here: `, i32: Copy`\n+LL |     type Assoc where u32: Copy = ();\n+   |                ^^^^^^^^^^^^^^^     - help: move it here: `where u32: Copy`\n \n error: where clause not allowed here\n-  --> $DIR/type-alias-where.rs:30:21\n+  --> $DIR/type-alias-where.rs:25:17\n    |\n-LL |     type Assoc = () where u32: Copy;\n-   |               -     ^^^^^^^^^^^^^^^\n-   |               |\n-   |               help: move it here: `where u32: Copy`\n+LL |     type Assoc2 where u32: Copy = () where i32: Copy;\n+   |                 ^^^^^^^^^^^^^^^                     - help: move it here: `, u32: Copy`\n \n error: where clause not allowed here\n-  --> $DIR/type-alias-where.rs:33:22\n+  --> $DIR/type-alias-where.rs:33:17\n    |\n-LL |     type Assoc2 = () where u32: Copy, i32: Copy;\n-   |                -     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                |\n-   |                help: move it here: `where u32: Copy, i32: Copy`\n+LL |     type Assoc2 where u32: Copy, i32: Copy = ();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^     - help: move it here: `where u32: Copy, i32: Copy`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "3a47845ec82cef0deae5785d5de9c0764526b2d6", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 6, "deletions": 42, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -279,20 +279,8 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n         (ForeignMod(l), ForeignMod(r)) => {\n             both(&l.abi, &r.abi, eq_str_lit) && over(&l.items, &r.items, |l, r| eq_item(l, r, eq_foreign_item_kind))\n         },\n-        (\n-            TyAlias(box ast::TyAlias {\n-                defaultness: ld,\n-                generics: lg,\n-                bounds: lb,\n-                ty: lt,\n-            }),\n-            TyAlias(box ast::TyAlias {\n-                defaultness: rd,\n-                generics: rg,\n-                bounds: rb,\n-                ty: rt,\n-            }),\n-        ) => {\n+        (TyAlias(box ast::TyAlias { defaultness: ld, generics: lg, bounds: lb, ty: lt, .. }),\n+         TyAlias(box ast::TyAlias { defaultness: rd, generics: rg, bounds: rb, ty: rt, .. })) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n                 && over(lb, rb, eq_generic_bound)\n@@ -382,20 +370,8 @@ pub fn eq_foreign_item_kind(l: &ForeignItemKind, r: &ForeignItemKind) -> bool {\n         ) => {\n             eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n         },\n-        (\n-            TyAlias(box ast::TyAlias {\n-                defaultness: ld,\n-                generics: lg,\n-                bounds: lb,\n-                ty: lt,\n-            }),\n-            TyAlias(box ast::TyAlias {\n-                defaultness: rd,\n-                generics: rg,\n-                bounds: rb,\n-                ty: rt,\n-            }),\n-        ) => {\n+        (TyAlias(box ast::TyAlias { defaultness: ld, generics: lg, bounds: lb, ty: lt, .. }),\n+         TyAlias(box ast::TyAlias { defaultness: rd, generics: rg, bounds: rb, ty: rt, .. })) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n                 && over(lb, rb, eq_generic_bound)\n@@ -426,20 +402,8 @@ pub fn eq_assoc_item_kind(l: &AssocItemKind, r: &AssocItemKind) -> bool {\n         ) => {\n             eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n         },\n-        (\n-            TyAlias(box ast::TyAlias {\n-                defaultness: ld,\n-                generics: lg,\n-                bounds: lb,\n-                ty: lt,\n-            }),\n-            TyAlias(box ast::TyAlias {\n-                defaultness: rd,\n-                generics: rg,\n-                bounds: rb,\n-                ty: rt,\n-            }),\n-        ) => {\n+        (TyAlias(box ast::TyAlias { defaultness: ld, generics: lg, bounds: lb, ty: lt, .. }),\n+         TyAlias(box ast::TyAlias { defaultness: rd, generics: rg, bounds: rb, ty: rt, .. })) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n                 && over(lb, rb, eq_generic_bound)"}, {"sha": "8498cb6addaa17375217846b654e2c842db16cd6", "filename": "src/tools/rustfmt/src/items.rs", "status": "modified", "additions": 74, "deletions": 34, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c20b4f558440c24e8ef84782a71163fe236d72de/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs?ref=c20b4f558440c24e8ef84782a71163fe236d72de", "patch": "@@ -694,7 +694,8 @@ pub(crate) fn format_impl(\n     let where_span_end = context.snippet_provider.opt_span_before(missing_span, \"{\");\n     let where_clause_str = rewrite_where_clause(\n         context,\n-        &generics.where_clause,\n+        &generics.where_clause.predicates,\n+        generics.where_clause.span,\n         context.config.brace_style(),\n         Shape::legacy(where_budget, offset.block_only()),\n         false,\n@@ -1059,7 +1060,8 @@ pub(crate) fn format_trait(\n             let option = WhereClauseOption::snuggled(&generics_str);\n             let where_clause_str = rewrite_where_clause(\n                 context,\n-                &generics.where_clause,\n+                &generics.where_clause.predicates,\n+                generics.where_clause.span,\n                 context.config.brace_style(),\n                 Shape::legacy(where_budget, offset.block_only()),\n                 where_on_new_line,\n@@ -1178,7 +1180,8 @@ impl<'a> Rewrite for TraitAliasBounds<'a> {\n \n         let where_str = rewrite_where_clause(\n             context,\n-            &self.generics.where_clause,\n+            &self.generics.where_clause.predicates,\n+            self.generics.where_clause.span,\n             context.config.brace_style(),\n             shape,\n             false,\n@@ -1437,7 +1440,8 @@ fn format_tuple_struct(\n             let option = WhereClauseOption::new(true, WhereClauseSpace::Newline);\n             rewrite_where_clause(\n                 context,\n-                &generics.where_clause,\n+                &generics.where_clause.predicates,\n+                generics.where_clause.span,\n                 context.config.brace_style(),\n                 Shape::legacy(where_budget, offset.block_only()),\n                 false,\n@@ -1503,6 +1507,8 @@ struct TyAliasRewriteInfo<'c, 'g>(\n     &'c RewriteContext<'c>,\n     Indent,\n     &'g ast::Generics,\n+    (ast::TyAliasWhereClause, ast::TyAliasWhereClause),\n+    usize,\n     symbol::Ident,\n     Span,\n );\n@@ -1521,14 +1527,24 @@ pub(crate) fn rewrite_type_alias<'a, 'b>(\n         ref generics,\n         ref bounds,\n         ref ty,\n+        where_clauses,\n+        where_predicates_split,\n     } = *ty_alias_kind;\n     let ty_opt = ty.as_ref();\n     let (ident, vis) = match visitor_kind {\n         Item(i) => (i.ident, &i.vis),\n         AssocTraitItem(i) | AssocImplItem(i) => (i.ident, &i.vis),\n         ForeignItem(i) => (i.ident, &i.vis),\n     };\n-    let rw_info = &TyAliasRewriteInfo(context, indent, generics, ident, span);\n+    let rw_info = &TyAliasRewriteInfo(\n+        context,\n+        indent,\n+        generics,\n+        where_clauses,\n+        where_predicates_split,\n+        ident,\n+        span,\n+    );\n     let op_ty = opaque_ty(ty);\n     // Type Aliases are formatted slightly differently depending on the context\n     // in which they appear, whether they are opaque, and whether they are associated.\n@@ -1564,7 +1580,22 @@ fn rewrite_ty<R: Rewrite>(\n     vis: &ast::Visibility,\n ) -> Option<String> {\n     let mut result = String::with_capacity(128);\n-    let TyAliasRewriteInfo(context, indent, generics, ident, span) = *rw_info;\n+    let TyAliasRewriteInfo(\n+        context,\n+        indent,\n+        generics,\n+        where_clauses,\n+        where_predicates_split,\n+        ident,\n+        span,\n+    ) = *rw_info;\n+    let (before_where_predicates, after_where_predicates) = generics\n+        .where_clause\n+        .predicates\n+        .split_at(where_predicates_split);\n+    if !after_where_predicates.is_empty() {\n+        return None;\n+    }\n     result.push_str(&format!(\"{}type \", format_visibility(context, vis)));\n     let ident_str = rewrite_ident(context, ident);\n \n@@ -1595,7 +1626,8 @@ fn rewrite_ty<R: Rewrite>(\n     }\n     let where_clause_str = rewrite_where_clause(\n         context,\n-        &generics.where_clause,\n+        before_where_predicates,\n+        where_clauses.0.1,\n         context.config.brace_style(),\n         Shape::legacy(where_budget, indent),\n         false,\n@@ -1609,7 +1641,7 @@ fn rewrite_ty<R: Rewrite>(\n     if let Some(ty) = rhs {\n         // If there's a where clause, add a newline before the assignment. Otherwise just add a\n         // space.\n-        let has_where = !generics.where_clause.predicates.is_empty();\n+        let has_where = !before_where_predicates.is_empty();\n         if has_where {\n             result.push_str(&indent.to_string_with_newline(context.config));\n         } else {\n@@ -1619,7 +1651,7 @@ fn rewrite_ty<R: Rewrite>(\n         let comment_span = context\n             .snippet_provider\n             .opt_span_before(span, \"=\")\n-            .map(|op_lo| mk_sp(generics.where_clause.span.hi(), op_lo));\n+            .map(|op_lo| mk_sp(where_clauses.0.1.hi(), op_lo));\n \n         let lhs = match comment_span {\n             Some(comment_span)\n@@ -2176,7 +2208,7 @@ fn rewrite_fn_base(\n     let generics_str = rewrite_generics(\n         context,\n         rewrite_ident(context, ident),\n-        fn_sig.generics,\n+        &fn_sig.generics,\n         shape,\n     )?;\n     result.push_str(&generics_str);\n@@ -2416,7 +2448,8 @@ fn rewrite_fn_base(\n     }\n     let where_clause_str = rewrite_where_clause(\n         context,\n-        where_clause,\n+        &where_clause.predicates,\n+        where_clause.span,\n         context.config.brace_style(),\n         Shape::indented(indent, context.config),\n         true,\n@@ -2692,7 +2725,8 @@ fn generics_shape_from_config(config: &Config, shape: Shape, offset: usize) -> O\n \n fn rewrite_where_clause_rfc_style(\n     context: &RewriteContext<'_>,\n-    where_clause: &ast::WhereClause,\n+    predicates: &[ast::WherePredicate],\n+    where_span: Span,\n     shape: Shape,\n     terminator: &str,\n     span_end: Option<BytePos>,\n@@ -2701,7 +2735,8 @@ fn rewrite_where_clause_rfc_style(\n ) -> Option<String> {\n     let (where_keyword, allow_single_line) = rewrite_where_keyword(\n         context,\n-        where_clause,\n+        predicates,\n+        where_span,\n         shape,\n         span_end_before_where,\n         where_clause_option,\n@@ -2714,12 +2749,12 @@ fn rewrite_where_clause_rfc_style(\n         .block_left(context.config.tab_spaces())?\n         .sub_width(1)?;\n     let force_single_line = context.config.where_single_line()\n-        && where_clause.predicates.len() == 1\n+        && predicates.len() == 1\n         && !where_clause_option.veto_single_line;\n \n     let preds_str = rewrite_bounds_on_where_clause(\n         context,\n-        where_clause,\n+        predicates,\n         clause_shape,\n         terminator,\n         span_end,\n@@ -2743,7 +2778,8 @@ fn rewrite_where_clause_rfc_style(\n /// Rewrite `where` and comment around it.\n fn rewrite_where_keyword(\n     context: &RewriteContext<'_>,\n-    where_clause: &ast::WhereClause,\n+    predicates: &[ast::WherePredicate],\n+    where_span: Span,\n     shape: Shape,\n     span_end_before_where: BytePos,\n     where_clause_option: WhereClauseOption,\n@@ -2763,7 +2799,7 @@ fn rewrite_where_keyword(\n     };\n \n     let (span_before, span_after) =\n-        missing_span_before_after_where(span_end_before_where, where_clause);\n+        missing_span_before_after_where(span_end_before_where, predicates, where_span);\n     let (comment_before, comment_after) =\n         rewrite_comments_before_after_where(context, span_before, span_after, shape)?;\n \n@@ -2789,22 +2825,22 @@ fn rewrite_where_keyword(\n /// Rewrite bounds on a where clause.\n fn rewrite_bounds_on_where_clause(\n     context: &RewriteContext<'_>,\n-    where_clause: &ast::WhereClause,\n+    predicates: &[ast::WherePredicate],\n     shape: Shape,\n     terminator: &str,\n     span_end: Option<BytePos>,\n     where_clause_option: WhereClauseOption,\n     force_single_line: bool,\n ) -> Option<String> {\n-    let span_start = where_clause.predicates[0].span().lo();\n+    let span_start = predicates[0].span().lo();\n     // If we don't have the start of the next span, then use the end of the\n     // predicates, but that means we miss comments.\n-    let len = where_clause.predicates.len();\n-    let end_of_preds = where_clause.predicates[len - 1].span().hi();\n+    let len = predicates.len();\n+    let end_of_preds = predicates[len - 1].span().hi();\n     let span_end = span_end.unwrap_or(end_of_preds);\n     let items = itemize_list(\n         context.snippet_provider,\n-        where_clause.predicates.iter(),\n+        predicates.iter(),\n         terminator,\n         \",\",\n         |pred| pred.span().lo(),\n@@ -2837,7 +2873,8 @@ fn rewrite_bounds_on_where_clause(\n \n fn rewrite_where_clause(\n     context: &RewriteContext<'_>,\n-    where_clause: &ast::WhereClause,\n+    predicates: &[ast::WherePredicate],\n+    where_span: Span,\n     brace_style: BraceStyle,\n     shape: Shape,\n     on_new_line: bool,\n@@ -2846,14 +2883,15 @@ fn rewrite_where_clause(\n     span_end_before_where: BytePos,\n     where_clause_option: WhereClauseOption,\n ) -> Option<String> {\n-    if where_clause.predicates.is_empty() {\n+    if predicates.is_empty() {\n         return Some(String::new());\n     }\n \n     if context.config.indent_style() == IndentStyle::Block {\n         return rewrite_where_clause_rfc_style(\n             context,\n-            where_clause,\n+            predicates,\n+            where_span,\n             shape,\n             terminator,\n             span_end,\n@@ -2873,15 +2911,15 @@ fn rewrite_where_clause(\n     // be out by a char or two.\n \n     let budget = context.config.max_width() - offset.width();\n-    let span_start = where_clause.predicates[0].span().lo();\n+    let span_start = predicates[0].span().lo();\n     // If we don't have the start of the next span, then use the end of the\n     // predicates, but that means we miss comments.\n-    let len = where_clause.predicates.len();\n-    let end_of_preds = where_clause.predicates[len - 1].span().hi();\n+    let len = predicates.len();\n+    let end_of_preds = predicates[len - 1].span().hi();\n     let span_end = span_end.unwrap_or(end_of_preds);\n     let items = itemize_list(\n         context.snippet_provider,\n-        where_clause.predicates.iter(),\n+        predicates.iter(),\n         terminator,\n         \",\",\n         |pred| pred.span().lo(),\n@@ -2936,12 +2974,13 @@ fn rewrite_where_clause(\n \n fn missing_span_before_after_where(\n     before_item_span_end: BytePos,\n-    where_clause: &ast::WhereClause,\n+    predicates: &[ast::WherePredicate],\n+    where_span: Span,\n ) -> (Span, Span) {\n-    let missing_span_before = mk_sp(before_item_span_end, where_clause.span.lo());\n+    let missing_span_before = mk_sp(before_item_span_end, where_span.lo());\n     // 5 = `where`\n-    let pos_after_where = where_clause.span.lo() + BytePos(5);\n-    let missing_span_after = mk_sp(pos_after_where, where_clause.predicates[0].span().lo());\n+    let pos_after_where = where_span.lo() + BytePos(5);\n+    let missing_span_after = mk_sp(pos_after_where, predicates[0].span().lo());\n     (missing_span_before, missing_span_after)\n }\n \n@@ -3030,7 +3069,8 @@ fn format_generics(\n         }\n         let where_clause_str = rewrite_where_clause(\n             context,\n-            &generics.where_clause,\n+            &generics.where_clause.predicates,\n+            generics.where_clause.span,\n             brace_style,\n             Shape::legacy(budget, offset.block_only()),\n             true,"}]}