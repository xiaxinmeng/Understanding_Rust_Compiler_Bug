{"sha": "8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNmU4NDZkOGEyNmU1YTlkM2FhZmQwYmRjYzE4ZWQzZGRmMGNiY2E=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-21T06:04:16Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-31T02:02:11Z"}, "message": "rustc: Implement -l and include! tweaks\n\nThis is an implementation of the rustc bits of [RFC 403][rfc]. This adds a new\nflag to the compiler, `-l`, as well as tweaking the `include!` macro (and\nrelated source-centric macros).\n\nThe compiler's new `-l` flag is used to link libraries in from the command line.\nThis flag stacks with `#[link]` directives already found in the program. The\npurpose of this flag, also stated in the RFC, is to ease linking against native\nlibraries which have wildly different requirements across platforms and even\nwithin distributions of one platform. This flag accepts a string of the form\n`NAME[:KIND]` where `KIND` is optional or one of dylib, static, or framework.\nThis is roughly equivalent to if the equivalent `#[link]` directive were just\nwritten in the program.\n\nThe `include!` macro has been modified to recursively expand macros to allow\nusage of `concat!` as an argument, for example. The use case spelled out in RFC\n403 was for `env!` to be used as well to include compile-time generated files.\nThe macro also received a bit of tweaking to allow it to expand to either an\nexpression or a series of items, depending on what context it's used in.\n\n[rfc]: https://github.com/rust-lang/rfcs/pull/403", "tree": {"sha": "ff3fe4dcde12737779340473a75f5e121d28b485", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff3fe4dcde12737779340473a75f5e121d28b485"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca", "comment_count": 12, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca", "html_url": "https://github.com/rust-lang/rust/commit/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd53657484d78d0b7c00ce3264d99c051cf07d26", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd53657484d78d0b7c00ce3264d99c051cf07d26", "html_url": "https://github.com/rust-lang/rust/commit/fd53657484d78d0b7c00ce3264d99c051cf07d26"}], "stats": {"total": 274, "additions": 234, "deletions": 40}, "files": [{"sha": "b07b58e56b5d5ceae66b35b3a4474eb5d8fb5fd7", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca", "patch": "@@ -20,6 +20,7 @@ use back::write;\n use back::target_strs;\n use back::{arm, x86, x86_64, mips, mipsel};\n use lint;\n+use metadata::cstore;\n \n use syntax::abi;\n use syntax::ast;\n@@ -78,6 +79,7 @@ pub struct Options {\n     // parsed code. It remains mutable in case its replacements wants to use\n     // this.\n     pub addl_lib_search_paths: RefCell<Vec<Path>>,\n+    pub libs: Vec<(String, cstore::NativeLibaryKind)>,\n     pub maybe_sysroot: Option<Path>,\n     pub target_triple: String,\n     // User-specified cfg meta items. The compiler itself will add additional\n@@ -130,6 +132,7 @@ pub fn basic_options() -> Options {\n         externs: HashMap::new(),\n         crate_name: None,\n         alt_std_name: None,\n+        libs: Vec::new(),\n     }\n }\n \n@@ -575,6 +578,10 @@ pub fn optgroups() -> Vec<getopts::OptGroup> {\n         optflag(\"h\", \"help\", \"Display this message\"),\n         optmulti(\"\", \"cfg\", \"Configure the compilation environment\", \"SPEC\"),\n         optmulti(\"L\", \"\",   \"Add a directory to the library search path\", \"PATH\"),\n+        optmulti(\"l\", \"\",   \"Link the generated crate(s) to the specified native\n+                             library NAME. The optional KIND can be one of,\n+                             static, dylib, or framework. If omitted, dylib is\n+                             assumed.\", \"NAME[:KIND]\"),\n         optmulti(\"\", \"crate-type\", \"Comma separated list of types of crates\n                                     for the compiler to emit\",\n                  \"[bin|lib|rlib|dylib|staticlib]\"),\n@@ -767,6 +774,23 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         Path::new(s.as_slice())\n     }).collect();\n \n+    let libs = matches.opt_strs(\"l\").into_iter().map(|s| {\n+        let mut parts = s.as_slice().rsplitn(1, ':');\n+        let kind = parts.next().unwrap();\n+        let (name, kind) = match (parts.next(), kind) {\n+            (None, name) |\n+            (Some(name), \"dylib\") => (name, cstore::NativeUnknown),\n+            (Some(name), \"framework\") => (name, cstore::NativeFramework),\n+            (Some(name), \"static\") => (name, cstore::NativeStatic),\n+            (_, s) => {\n+                early_error(format!(\"unknown library kind `{}`, expected \\\n+                                     one of dylib, framework, or static\",\n+                                    s).as_slice());\n+            }\n+        };\n+        (name.to_string(), kind)\n+    }).collect();\n+\n     let cfg = parse_cfgspecs(matches.opt_strs(\"cfg\"));\n     let test = matches.opt_present(\"test\");\n     let write_dependency_info = (matches.opt_present(\"dep-info\"),\n@@ -843,7 +867,8 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         color: color,\n         externs: externs,\n         crate_name: crate_name,\n-        alt_std_name: None\n+        alt_std_name: None,\n+        libs: libs,\n     }\n }\n "}, {"sha": "100ccf78f3e8172f45d74fe53582989bb5e8a558", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca", "patch": "@@ -52,7 +52,11 @@ pub fn read_crates(sess: &Session,\n     visit_crate(&e, krate);\n     visit::walk_crate(&mut e, krate);\n     dump_crates(&sess.cstore);\n-    warn_if_multiple_versions(sess.diagnostic(), &sess.cstore)\n+    warn_if_multiple_versions(sess.diagnostic(), &sess.cstore);\n+\n+    for &(ref name, kind) in sess.opts.libs.iter() {\n+        register_native_lib(sess, None, name.clone(), kind);\n+    }\n }\n \n impl<'a, 'v> visit::Visitor<'v> for Env<'a> {\n@@ -233,14 +237,7 @@ fn visit_item(e: &Env, i: &ast::Item) {\n                             Some(k) => {\n                                 if k.equiv(&(\"static\")) {\n                                     cstore::NativeStatic\n-                                } else if (e.sess.targ_cfg.os == abi::OsMacos ||\n-                                           e.sess.targ_cfg.os == abi::OsiOS) &&\n-                                          k.equiv(&(\"framework\")) {\n-                                    cstore::NativeFramework\n                                 } else if k.equiv(&(\"framework\")) {\n-                                    e.sess.span_err(m.span,\n-                                        \"native frameworks are only available \\\n-                                         on OSX targets\");\n                                     cstore::NativeUnknown\n                                 } else {\n                                     e.sess.span_err(m.span,\n@@ -263,15 +260,8 @@ fn visit_item(e: &Env, i: &ast::Item) {\n                                 InternedString::new(\"foo\")\n                             }\n                         };\n-                        if n.get().is_empty() {\n-                            e.sess.span_err(m.span,\n-                                            \"#[link(name = \\\"\\\")] given with \\\n-                                             empty name\");\n-                        } else {\n-                            e.sess\n-                             .cstore\n-                             .add_used_library(n.get().to_string(), kind);\n-                        }\n+                        register_native_lib(e.sess, Some(m.span),\n+                                            n.get().to_string(), kind);\n                     }\n                     None => {}\n                 }\n@@ -281,6 +271,32 @@ fn visit_item(e: &Env, i: &ast::Item) {\n     }\n }\n \n+fn register_native_lib(sess: &Session, span: Option<Span>, name: String,\n+                       kind: cstore::NativeLibaryKind) {\n+    if name.as_slice().is_empty() {\n+        match span {\n+            Some(span) => {\n+                sess.span_err(span, \"#[link(name = \\\"\\\")] given with \\\n+                                     empty name\");\n+            }\n+            None => {\n+                sess.err(\"empty library name given via `-l`\");\n+            }\n+        }\n+        return\n+    }\n+    let is_osx = sess.targ_cfg.os == abi::OsMacos ||\n+                 sess.targ_cfg.os == abi::OsiOS;\n+    if kind == cstore::NativeFramework && !is_osx {\n+        let msg = \"native frameworks are only available on OSX targets\";\n+        match span {\n+            Some(span) => sess.span_err(span, msg),\n+            None => sess.err(msg),\n+        }\n+    }\n+    sess.cstore.add_used_library(name, kind);\n+}\n+\n fn existing_match(e: &Env, name: &str,\n                   hash: Option<&Svh>) -> Option<ast::CrateNum> {\n     let mut ret = None;"}, {"sha": "e8c5f6f4910e063c5e8f2ce45ec19f2ff23d4214", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca", "patch": "@@ -50,7 +50,7 @@ pub enum LinkagePreference {\n     RequireStatic,\n }\n \n-#[deriving(PartialEq, FromPrimitive)]\n+#[deriving(PartialEq, FromPrimitive, Clone)]\n pub enum NativeLibaryKind {\n     NativeStatic,    // native static library (.a archive)\n     NativeFramework, // OSX-specific"}, {"sha": "d474cc8cf0a3e38e32e716b4777390235d7af0db", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca", "patch": "@@ -675,26 +675,19 @@ pub fn check_zero_tts(cx: &ExtCtxt,\n \n /// Extract the string literal from the first token of `tts`. If this\n /// is not a string literal, emit an error and return None.\n-pub fn get_single_str_from_tts(cx: &ExtCtxt,\n+pub fn get_single_str_from_tts(cx: &mut ExtCtxt,\n                                sp: Span,\n                                tts: &[ast::TokenTree],\n                                name: &str)\n                                -> Option<String> {\n-    if tts.len() != 1 {\n-        cx.span_err(sp, format!(\"{} takes 1 argument.\", name).as_slice());\n-    } else {\n-        match tts[0] {\n-            ast::TtToken(_, token::LitStr(ident)) => return Some(parse::str_lit(ident.as_str())),\n-            ast::TtToken(_, token::LitStrRaw(ident, _)) => {\n-                return Some(parse::raw_str_lit(ident.as_str()))\n-            }\n-            _ => {\n-                cx.span_err(sp,\n-                            format!(\"{} requires a string.\", name).as_slice())\n-            }\n-        }\n+    let mut p = cx.new_parser_from_tts(tts);\n+    let ret = cx.expander().fold_expr(p.parse_expr());\n+    if p.token != token::Eof {\n+        cx.span_err(sp, format!(\"{} takes 1 argument\", name).as_slice());\n     }\n-    None\n+    expr_to_string(cx, ret, \"argument must be a string literal\").map(|(s, _)| {\n+        s.get().to_string()\n+    })\n }\n \n /// Extract comma-separated expressions from `tts`. If there is a"}, {"sha": "f19230844099856fba89ce5454d953cf59185331", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca", "patch": "@@ -9,14 +9,16 @@\n // except according to those terms.\n \n use ast;\n-use codemap;\n use codemap::{Pos, Span};\n+use codemap;\n use ext::base::*;\n use ext::base;\n use ext::build::AstBuilder;\n-use parse;\n use parse::token;\n+use parse;\n use print::pprust;\n+use ptr::P;\n+use util::small_vector::SmallVector;\n \n use std::io::File;\n use std::rc::Rc;\n@@ -82,14 +84,14 @@ pub fn expand_mod(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n /// include! : parse the given file as an expr\n /// This is generally a bad idea because it's going to behave\n /// unhygienically.\n-pub fn expand_include(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n-                      -> Box<base::MacResult+'static> {\n+pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n+                           -> Box<base::MacResult+'cx> {\n     let file = match get_single_str_from_tts(cx, sp, tts, \"include!\") {\n         Some(f) => f,\n         None => return DummyResult::expr(sp),\n     };\n     // The file will be added to the code map by the parser\n-    let mut p =\n+    let p =\n         parse::new_sub_parser_from_file(cx.parse_sess(),\n                                         cx.cfg(),\n                                         &res_rel_file(cx,\n@@ -98,7 +100,28 @@ pub fn expand_include(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                                         true,\n                                         None,\n                                         sp);\n-    base::MacExpr::new(p.parse_expr())\n+\n+    struct ExpandResult<'a> {\n+        p: parse::parser::Parser<'a>,\n+    }\n+    impl<'a> base::MacResult for ExpandResult<'a> {\n+        fn make_expr(mut self: Box<ExpandResult<'a>>) -> Option<P<ast::Expr>> {\n+            Some(self.p.parse_expr())\n+        }\n+        fn make_items(mut self: Box<ExpandResult<'a>>)\n+                      -> Option<SmallVector<P<ast::Item>>> {\n+            let mut ret = SmallVector::zero();\n+            loop {\n+                match self.p.parse_item_with_outer_attributes() {\n+                    Some(item) => ret.push(item),\n+                    None => break\n+                }\n+            }\n+            Some(ret)\n+        }\n+    }\n+\n+    box ExpandResult { p: p }\n }\n \n // include_str! : read the given file, insert it as a literal string expr"}, {"sha": "aea3c749930b6e5ce2da338042a3f6e9a3907fcd", "filename": "src/test/auxiliary/macro-include-items-expr.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Fauxiliary%2Fmacro-include-items-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Fauxiliary%2Fmacro-include-items-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro-include-items-expr.rs?ref=8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-test: this is not a test\n+\n+1"}, {"sha": "da72aaef80591c494533ea2107acbbcd6a99ba4a", "filename": "src/test/auxiliary/macro-include-items-item.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Fauxiliary%2Fmacro-include-items-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Fauxiliary%2Fmacro-include-items-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro-include-items-item.rs?ref=8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-test: this is not a test\n+\n+fn foo() { bar() }"}, {"sha": "bd2a3eba0b5b8ff6ef0e50c65723db80ea7db0cf", "filename": "src/test/compile-fail/manual-link-bad-form.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Fcompile-fail%2Fmanual-link-bad-form.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Fcompile-fail%2Fmanual-link-bad-form.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmanual-link-bad-form.rs?ref=8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-l :static\n+// error-pattern: empty library name given via `-l`\n+\n+fn main() {\n+}\n+\n+"}, {"sha": "4614440ddafd58f15673a190e599e32a045e182a", "filename": "src/test/compile-fail/manual-link-bad-kind.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Fcompile-fail%2Fmanual-link-bad-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Fcompile-fail%2Fmanual-link-bad-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmanual-link-bad-kind.rs?ref=8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-l foo:bar\n+// error-pattern: unknown library kind `bar`, expected one of dylib, framework, or static\n+\n+fn main() {\n+}\n+"}, {"sha": "96cc35049ee40e309fb4ea4e7a083b0dc1680142", "filename": "src/test/compile-fail/manual-link-framework.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Fcompile-fail%2Fmanual-link-framework.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Fcompile-fail%2Fmanual-link-framework.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmanual-link-framework.rs?ref=8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-macos\n+// ignore-ios\n+// compile-flags:-l foo:framework\n+// error-pattern: native frameworks are only available on OSX targets\n+\n+fn main() {\n+}"}, {"sha": "d2a02adc9d4a458bfc6d5327203342248c8e0331", "filename": "src/test/run-make/manual-link/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Frun-make%2Fmanual-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Frun-make%2Fmanual-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmanual-link%2FMakefile?ref=8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca", "patch": "@@ -0,0 +1,7 @@\n+-include ../tools.mk\n+\n+all: $(TMPDIR)/libbar.a\n+\t$(RUSTC) foo.rs -lbar:static\n+\t$(RUSTC) main.rs\n+\t$(call RUN,main)\n+"}, {"sha": "e42599986781fe984a2c1427a3373cf439a34f60", "filename": "src/test/run-make/manual-link/bar.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Frun-make%2Fmanual-link%2Fbar.c", "raw_url": "https://github.com/rust-lang/rust/raw/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Frun-make%2Fmanual-link%2Fbar.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmanual-link%2Fbar.c?ref=8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca", "patch": "@@ -0,0 +1 @@\n+void bar() {}"}, {"sha": "e42599986781fe984a2c1427a3373cf439a34f60", "filename": "src/test/run-make/manual-link/foo.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Frun-make%2Fmanual-link%2Ffoo.c", "raw_url": "https://github.com/rust-lang/rust/raw/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Frun-make%2Fmanual-link%2Ffoo.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmanual-link%2Ffoo.c?ref=8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca", "patch": "@@ -0,0 +1 @@\n+void bar() {}"}, {"sha": "d67a4057afbfca793a8d9602690225cc364774e5", "filename": "src/test/run-make/manual-link/foo.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Frun-make%2Fmanual-link%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Frun-make%2Fmanual-link%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmanual-link%2Ffoo.rs?ref=8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+\n+extern {\n+    fn bar();\n+}\n+\n+pub fn foo() {\n+    unsafe { bar(); }\n+}"}, {"sha": "756a47f386ae3a0fa133feaa50e7ec2340e5a6e0", "filename": "src/test/run-make/manual-link/main.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Frun-make%2Fmanual-link%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Frun-make%2Fmanual-link%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmanual-link%2Fmain.rs?ref=8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate foo;\n+\n+fn main() {\n+    foo::foo();\n+}"}, {"sha": "03eec668edde8c27e20d9a6d23e3a50ecbd484db", "filename": "src/test/run-pass/macro-include-items.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Frun-pass%2Fmacro-include-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca/src%2Ftest%2Frun-pass%2Fmacro-include-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-include-items.rs?ref=8e6e846d8a26e5a9d3aafd0bdcc18ed3ddf0cbca", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn bar() {}\n+\n+include!(concat!(\"\", \"\", \"../auxiliary/\", \"macro-include-items-item.rs\"))\n+\n+fn main() {\n+    foo();\n+    assert_eq!(include!(concat!(\"\", \"../auxiliary/\", \"macro-include-items-expr.rs\")), 1u);\n+}"}]}