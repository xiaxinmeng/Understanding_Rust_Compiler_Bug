{"sha": "2151e958ceba1fcbe906eebf0b42855a0a20178f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNTFlOTU4Y2ViYTFmY2JlOTA2ZWViZjBiNDI4NTVhMGEyMDE3OGY=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2019-12-26T17:12:19Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2019-12-26T17:12:27Z"}, "message": "minor fixes and updated docs", "tree": {"sha": "0073354a6aecd32a9626a6541348a56f6053fe04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0073354a6aecd32a9626a6541348a56f6053fe04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2151e958ceba1fcbe906eebf0b42855a0a20178f", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niI4EABYIADYWIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXgTqARgcZ2l0QGNocmlz\ndGlhbnBvdmVkYS54eXoACgkQJ1Je9edCClBq0wEAsyYDwqwoBI3P2BrXkP735HcK\nTyrgrxQ1GKyIGRt4il4BAMoXVD3bsbtTvheOVF3H2KvnjJgRX0/wSTW37EFzWDoH\n=Sj+h\n-----END PGP SIGNATURE-----", "payload": "tree 0073354a6aecd32a9626a6541348a56f6053fe04\nparent bbbb50a09aadfc53df8ed4810d9ff67b194b2492\nauthor Christian Poveda <git@christianpoveda.xyz> 1577380339 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1577380347 -0500\n\nminor fixes and updated docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2151e958ceba1fcbe906eebf0b42855a0a20178f", "html_url": "https://github.com/rust-lang/rust/commit/2151e958ceba1fcbe906eebf0b42855a0a20178f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2151e958ceba1fcbe906eebf0b42855a0a20178f/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbbb50a09aadfc53df8ed4810d9ff67b194b2492", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbbb50a09aadfc53df8ed4810d9ff67b194b2492", "html_url": "https://github.com/rust-lang/rust/commit/bbbb50a09aadfc53df8ed4810d9ff67b194b2492"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "f4a792a0410c6c9e89793debc7d887afd4dcf12f", "filename": "src/shims/fs.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2151e958ceba1fcbe906eebf0b42855a0a20178f/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2151e958ceba1fcbe906eebf0b42855a0a20178f/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=2151e958ceba1fcbe906eebf0b42855a0a20178f", "patch": "@@ -411,9 +411,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // If the `AT_SYMLINK_NOFOLLOW` flag is set, we query the file's metadata without following\n         // symbolic links.\n-        let is_symlink = flags & this.eval_libc(\"AT_SYMLINK_NOFOLLOW\")?.to_i32()? != 0;\n+        let follow_symlink = flags & this.eval_libc(\"AT_SYMLINK_NOFOLLOW\")?.to_i32()? == 0;\n \n-        let status = match FileStatus::new(this, path, is_symlink)? {\n+        let status = match FileStatus::new(this, path, follow_symlink)? {\n             Some(status) => status,\n             None => return Ok(-1),\n         };\n@@ -428,6 +428,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             .try_into()\n             .unwrap_or_else(|_| bug!(\"libc contains bad value for constant\"));\n \n+        // We need to set the corresponding bits of `mask` if the access, creation and modification\n+        // times were available. Otherwise we let them be zero.\n         let (access_sec, access_nsec) = status.accessed.map(|tup| {\n             mask |= this.eval_libc(\"STATX_ATIME\")?.to_u32()?;\n             InterpResult::Ok(tup)\n@@ -497,9 +499,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n }\n \n-// Extracts the number of seconds and nanoseconds elapsed between `time` and the unix epoch when\n-// `time` is Ok. If `time` is an error, it returns `None`.\n-fn extract_sec_and_nsec<'tcx>(time: std::io::Result<SystemTime>) -> InterpResult<'tcx, Option<(u64, u32)>> {\n+/// Extracts the number of seconds and nanoseconds elapsed between `time` and the unix epoch when\n+/// `time` is Ok. Returns `None` if `time` is an error. Fails if `time` happens before the unix\n+/// epoch.\n+fn extract_sec_and_nsec<'tcx>(\n+    time: std::io::Result<SystemTime>\n+) -> InterpResult<'tcx, Option<(u64, u32)>> {\n     time.ok().map(|time| {\n         let duration = system_time_to_duration(&time)?;\n         Ok((duration.as_secs(), duration.subsec_nanos()))\n@@ -518,9 +523,9 @@ impl FileStatus {\n     fn new<'tcx, 'mir>(\n         ecx: &mut MiriEvalContext<'mir, 'tcx>,\n         path: PathBuf,\n-        is_symlink: bool\n+        follow_symlink: bool\n     ) -> InterpResult<'tcx, Option<FileStatus>> {\n-        let metadata = if is_symlink {\n+        let metadata = if follow_symlink {\n             // FIXME: metadata for symlinks need testing.\n             std::fs::symlink_metadata(path)\n         } else {"}]}