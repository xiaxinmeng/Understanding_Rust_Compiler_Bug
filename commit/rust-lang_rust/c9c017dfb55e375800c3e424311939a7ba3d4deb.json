{"sha": "c9c017dfb55e375800c3e424311939a7ba3d4deb", "node_id": "C_kwDOAAsO6NoAKGM5YzAxN2RmYjU1ZTM3NTgwMGMzZTQyNDMxMTkzOWE3YmEzZDRkZWI", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-11-18T12:59:21Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-11-19T15:58:02Z"}, "message": "update provenance test\n\n* fix allocation alignment for 16bit platforms\n* add edge case where `stride % align != 0` on pointers with provenance", "tree": {"sha": "df712e2ed394fa65c1de4fe8be4f26947db56ebf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df712e2ed394fa65c1de4fe8be4f26947db56ebf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9c017dfb55e375800c3e424311939a7ba3d4deb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9c017dfb55e375800c3e424311939a7ba3d4deb", "html_url": "https://github.com/rust-lang/rust/commit/c9c017dfb55e375800c3e424311939a7ba3d4deb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9c017dfb55e375800c3e424311939a7ba3d4deb/comments", "author": null, "committer": null, "parents": [{"sha": "53c2ee8e9b815b687a8f203bc5fb99d535a10a0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/53c2ee8e9b815b687a8f203bc5fb99d535a10a0d", "html_url": "https://github.com/rust-lang/rust/commit/53c2ee8e9b815b687a8f203bc5fb99d535a10a0d"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "390148550a4b398d891d2db7110a6dc19b24e9b4", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c9c017dfb55e375800c3e424311939a7ba3d4deb/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c017dfb55e375800c3e424311939a7ba3d4deb/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=c9c017dfb55e375800c3e424311939a7ba3d4deb", "patch": "@@ -564,9 +564,15 @@ fn align_offset_various_strides_const() {\n #[cfg(not(bootstrap))]\n fn align_offset_with_provenance_const() {\n     const {\n-        let data = 42;\n+        // On some platforms (e.g. msp430-none-elf), the alignment of `i32` is less than 4.\n+        #[repr(align(4))]\n+        struct AlignedI32(i32);\n \n-        let ptr: *const i32 = &data;\n+        let data = AlignedI32(42);\n+\n+        // `stride % align == 0` (usual case)\n+\n+        let ptr: *const i32 = &data.0;\n         assert!(ptr.align_offset(1) == 0);\n         assert!(ptr.align_offset(2) == 0);\n         assert!(ptr.align_offset(4) == 0);\n@@ -621,6 +627,44 @@ fn align_offset_with_provenance_const() {\n         assert!(ptr3.align_offset(8) == usize::MAX);\n         assert!(ptr3.wrapping_byte_add(1).align_offset(1) == 0);\n         assert!(ptr3.wrapping_byte_add(1).align_offset(2) == usize::MAX);\n+\n+        // `stride % align != 0` (edge case)\n+\n+        let ptr4: *const [u8; 3] = ptr.cast();\n+        assert!(ptr4.align_offset(1) == 0);\n+        assert!(ptr4.align_offset(2) == 0);\n+        assert!(ptr4.align_offset(4) == 0);\n+        assert!(ptr4.align_offset(8) == usize::MAX);\n+        assert!(ptr4.wrapping_byte_add(1).align_offset(1) == 0);\n+        assert!(ptr4.wrapping_byte_add(1).align_offset(2) == 1);\n+        assert!(ptr4.wrapping_byte_add(1).align_offset(4) == 1);\n+        assert!(ptr4.wrapping_byte_add(1).align_offset(8) == usize::MAX);\n+        assert!(ptr4.wrapping_byte_add(2).align_offset(1) == 0);\n+        assert!(ptr4.wrapping_byte_add(2).align_offset(2) == 0);\n+        assert!(ptr4.wrapping_byte_add(2).align_offset(4) == 2);\n+        assert!(ptr4.wrapping_byte_add(2).align_offset(8) == usize::MAX);\n+        assert!(ptr4.wrapping_byte_add(3).align_offset(1) == 0);\n+        assert!(ptr4.wrapping_byte_add(3).align_offset(2) == 1);\n+        assert!(ptr4.wrapping_byte_add(3).align_offset(4) == 3);\n+        assert!(ptr4.wrapping_byte_add(3).align_offset(8) == usize::MAX);\n+\n+        let ptr5: *const [u8; 5] = ptr.cast();\n+        assert!(ptr5.align_offset(1) == 0);\n+        assert!(ptr5.align_offset(2) == 0);\n+        assert!(ptr5.align_offset(4) == 0);\n+        assert!(ptr5.align_offset(8) == usize::MAX);\n+        assert!(ptr5.wrapping_byte_add(1).align_offset(1) == 0);\n+        assert!(ptr5.wrapping_byte_add(1).align_offset(2) == 1);\n+        assert!(ptr5.wrapping_byte_add(1).align_offset(4) == 3);\n+        assert!(ptr5.wrapping_byte_add(1).align_offset(8) == usize::MAX);\n+        assert!(ptr5.wrapping_byte_add(2).align_offset(1) == 0);\n+        assert!(ptr5.wrapping_byte_add(2).align_offset(2) == 0);\n+        assert!(ptr5.wrapping_byte_add(2).align_offset(4) == 2);\n+        assert!(ptr5.wrapping_byte_add(2).align_offset(8) == usize::MAX);\n+        assert!(ptr5.wrapping_byte_add(3).align_offset(1) == 0);\n+        assert!(ptr5.wrapping_byte_add(3).align_offset(2) == 1);\n+        assert!(ptr5.wrapping_byte_add(3).align_offset(4) == 1);\n+        assert!(ptr5.wrapping_byte_add(3).align_offset(8) == usize::MAX);\n     }\n }\n "}]}