{"sha": "6974b4f1b52556e191ade6653e9a9440d1d19610", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NzRiNGYxYjUyNTU2ZTE5MWFkZTY2NTNlOWE5NDQwZDFkMTk2MTA=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2014-07-30T13:56:42Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2014-08-27T13:19:14Z"}, "message": "debuginfo: Add GDB pretty printers for structs and enums.", "tree": {"sha": "e10371b3df1661061c9abfadf5dccb123255a64f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e10371b3df1661061c9abfadf5dccb123255a64f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6974b4f1b52556e191ade6653e9a9440d1d19610", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6974b4f1b52556e191ade6653e9a9440d1d19610", "html_url": "https://github.com/rust-lang/rust/commit/6974b4f1b52556e191ade6653e9a9440d1d19610", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6974b4f1b52556e191ade6653e9a9440d1d19610/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee25b6bdebf3bd079d4129470c31b803c21bdedc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee25b6bdebf3bd079d4129470c31b803c21bdedc", "html_url": "https://github.com/rust-lang/rust/commit/ee25b6bdebf3bd079d4129470c31b803c21bdedc"}], "stats": {"total": 425, "additions": 422, "deletions": 3}, "files": [{"sha": "27f6fbcf9f63ab9fab29e8f679cdee0062fead13", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6974b4f1b52556e191ade6653e9a9440d1d19610/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6974b4f1b52556e191ade6653e9a9440d1d19610/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=6974b4f1b52556e191ade6653e9a9440d1d19610", "patch": "@@ -458,7 +458,8 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n         }\n \n         _=> {\n-            let rust_src_root = find_rust_src_root(config).expect(\"Could not find Rust source root\");\n+            let rust_src_root = find_rust_src_root(config)\n+                .expect(\"Could not find Rust source root\");\n             let rust_pp_module_rel_path = Path::new(\"./src/etc\");\n             let rust_pp_module_abs_path = rust_src_root.join(rust_pp_module_rel_path)\n                                                        .as_str()"}, {"sha": "c84dde92f8fe40549dc9cac51d097bbc8882c64d", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/6974b4f1b52556e191ade6653e9a9440d1d19610/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/6974b4f1b52556e191ade6653e9a9440d1d19610/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=6974b4f1b52556e191ade6653e9a9440d1d19610", "patch": "@@ -0,0 +1,225 @@\n+# Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+import gdb\n+\n+#===============================================================================\n+# GDB Pretty Printing Module for Rust\n+#===============================================================================\n+\n+def register_printers(objfile):\n+  \"Registers Rust pretty printers for the given objfile\"\n+  objfile.pretty_printers.append(rust_pretty_printer_lookup_function)\n+\n+def rust_pretty_printer_lookup_function(val):\n+  \"Returns the correct Rust pretty printer for the given value if there is one\"\n+  type_code = val.type.code\n+\n+  if type_code == gdb.TYPE_CODE_STRUCT:\n+    struct_kind = classify_struct(val.type)\n+\n+    if struct_kind == STRUCT_KIND_STR_SLICE:\n+      return RustStringSlicePrinter(val)\n+\n+    if struct_kind == STRUCT_KIND_TUPLE:\n+      return RustTuplePrinter(val)\n+\n+    if struct_kind == STRUCT_KIND_TUPLE_STRUCT:\n+      return RustTupleStructPrinter(val, False)\n+\n+    if struct_kind == STRUCT_KIND_CSTYLE_VARIANT:\n+      return RustCStyleEnumPrinter(val[get_field_at_index(val, 0)])\n+\n+    if struct_kind == STRUCT_KIND_TUPLE_VARIANT:\n+      return RustTupleStructPrinter(val, True)\n+\n+    if struct_kind == STRUCT_KIND_STRUCT_VARIANT:\n+      return RustStructPrinter(val, True)\n+\n+    return RustStructPrinter(val, False)\n+\n+  # Enum handling\n+  if type_code == gdb.TYPE_CODE_UNION:\n+    enum_members = list(val.type.fields())\n+    enum_member_count = len(enum_members)\n+\n+    if enum_member_count == 0:\n+      return RustStructPrinter(val, false)\n+\n+    if enum_member_count == 1:\n+      if enum_members[0].name == None:\n+        # This is a singleton enum\n+        return rust_pretty_printer_lookup_function(val[enum_members[0]])\n+      else:\n+        assert enum_members[0].name.startswith(\"RUST$ENCODED$ENUM$\")\n+        # This is a space-optimized enum\n+        last_separator_index = enum_members[0].name.rfind(\"$\")\n+        second_last_separator_index = first_variant_name.rfind(\"$\", 0, last_separator_index)\n+        disr_field_index = first_variant_name[second_last_separator_index + 1 :\n+                                              last_separator_index]\n+        disr_field_index = int(disr_field_index)\n+\n+        sole_variant_val = val[enum_members[0]]\n+        disr_field = get_field_at_index(sole_variant_val, disr_field_index)\n+        discriminant = int(sole_variant_val[disr_field])\n+\n+        if discriminant == 0:\n+          null_variant_name = first_variant_name[last_separator_index + 1:]\n+          return IdentityPrinter(null_variant_name)\n+\n+        return rust_pretty_printer_lookup_function(sole_variant_val)\n+\n+    # This is a regular enum, extract the discriminant\n+    discriminant_name, discriminant_val = extract_discriminant_value(val)\n+    return rust_pretty_printer_lookup_function(val[enum_members[discriminant_val]])\n+\n+\n+\n+  return None\n+\n+#=------------------------------------------------------------------------------\n+# Pretty Printer Classes\n+#=------------------------------------------------------------------------------\n+\n+class RustStructPrinter:\n+  def __init__(self, val, hide_first_field):\n+    self.val = val\n+    self.hide_first_field = hide_first_field\n+\n+  def to_string(self):\n+    return self.val.type.tag\n+\n+  def children(self):\n+    cs = []\n+    for field in self.val.type.fields():\n+      field_name = field.name;\n+      if field_name == None:\n+        field_name = \"\"\n+      name_value_tuple = ( field_name, self.val[field] )\n+      cs.append( name_value_tuple )\n+\n+    if self.hide_first_field:\n+      cs = cs[1:]\n+\n+    return cs\n+\n+class RustTuplePrinter:\n+  def __init__(self, val):\n+    self.val = val\n+\n+  def to_string(self):\n+    return None\n+\n+  def children(self):\n+    cs = []\n+    for field in self.val.type.fields():\n+      cs.append( (\"\", self.val[field]) )\n+\n+    return cs\n+\n+  def display_hint(self):\n+    return \"array\"\n+\n+class RustTupleStructPrinter:\n+  def __init__(self, val, hide_first_field):\n+    self.val = val\n+    self.hide_first_field = hide_first_field\n+\n+  def to_string(self):\n+    return self.val.type.tag\n+\n+  def children(self):\n+    cs = []\n+    for field in self.val.type.fields():\n+      cs.append( (\"\", self.val[field]) )\n+\n+    if self.hide_first_field:\n+      cs = cs[1:]\n+\n+    return cs\n+\n+  def display_hint(self):\n+    return \"array\"\n+\n+class RustStringSlicePrinter:\n+  def __init__(self, val):\n+    self.val = val\n+\n+  def to_string(self):\n+    slice_byte_len = self.val[\"length\"]\n+    return '\"%s\"' % self.val[\"data_ptr\"].string(encoding = \"utf-8\",\n+                                                length = slice_byte_len)\n+\n+class RustCStyleEnumPrinter:\n+  def __init__(self, val):\n+    assert val.type.code == gdb.TYPE_CODE_ENUM\n+    self.val = val\n+\n+  def to_string(self):\n+    return str(self.val)\n+\n+class IdentityPrinter:\n+  def __init__(self, string):\n+    self.string\n+\n+  def to_string(self):\n+    return self.string\n+\n+STRUCT_KIND_REGULAR_STRUCT  = 0\n+STRUCT_KIND_TUPLE_STRUCT    = 1\n+STRUCT_KIND_TUPLE           = 2\n+STRUCT_KIND_TUPLE_VARIANT   = 3\n+STRUCT_KIND_STRUCT_VARIANT  = 4\n+STRUCT_KIND_CSTYLE_VARIANT  = 5\n+STRUCT_KIND_STR_SLICE       = 6\n+\n+def classify_struct(type):\n+  if type.tag == \"&str\":\n+    return STRUCT_KIND_STR_SLICE\n+\n+  fields = list(type.fields())\n+  field_count = len(fields)\n+\n+  if field_count == 0:\n+    return STRUCT_KIND_REGULAR_STRUCT\n+\n+  if fields[0].artificial:\n+    if field_count == 1:\n+      return STRUCT_KIND_CSTYLE_VARIANT\n+    elif fields[1].name == None:\n+      return STRUCT_KIND_TUPLE_VARIANT\n+    else:\n+      return STRUCT_KIND_STRUCT_VARIANT\n+\n+  if fields[0].name == None:\n+    if type.tag.startswith(\"(\"):\n+      return STRUCT_KIND_TUPLE\n+    else:\n+      return STRUCT_KIND_TUPLE_STRUCT\n+\n+  return STRUCT_KIND_REGULAR_STRUCT\n+\n+def extract_discriminant_value(enum_val):\n+  assert enum_val.type.code == gdb.TYPE_CODE_UNION\n+  for variant_descriptor in enum_val.type.fields():\n+    variant_val = enum_val[variant_descriptor]\n+    for field in variant_val.type.fields():\n+      return (field.name, int(variant_val[field]))\n+\n+def first_field(val):\n+  for field in val.type.fields():\n+    return field\n+\n+def get_field_at_index(val, index):\n+  i = 0\n+  for field in val.type.fields():\n+    if i == index:\n+      return field\n+  return None\n\\ No newline at end of file"}, {"sha": "fbe96c9f58678e0efac988d27423d56244a85884", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6974b4f1b52556e191ade6653e9a9440d1d19610/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6974b4f1b52556e191ade6653e9a9440d1d19610/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=6974b4f1b52556e191ade6653e9a9440d1d19610", "patch": "@@ -235,6 +235,9 @@ static UNKNOWN_COLUMN_NUMBER: c_uint = 0;\n static UNKNOWN_FILE_METADATA: DIFile = (0 as DIFile);\n static UNKNOWN_SCOPE_METADATA: DIScope = (0 as DIScope);\n \n+static FLAGS_NONE: c_uint = 0;\n+static FLAGS_ARTIFICAL: c_uint = llvm::debuginfo::FlagArtificial as c_uint;\n+\n //=-----------------------------------------------------------------------------\n //  Public Interface of debuginfo module\n //=-----------------------------------------------------------------------------\n@@ -1733,6 +1736,7 @@ struct MemberDescription {\n     llvm_type: Type,\n     type_metadata: DIType,\n     offset: MemberOffset,\n+    flags: c_uint\n }\n \n // A factory for MemberDescriptions. It produces a list of member descriptions\n@@ -1891,6 +1895,7 @@ impl StructMemberDescriptionFactory {\n                 llvm_type: type_of::type_of(cx, field.mt.ty),\n                 type_metadata: type_metadata(cx, field.mt.ty, self.span),\n                 offset: offset,\n+                flags: FLAGS_NONE,\n             }\n         }).collect()\n     }\n@@ -1951,6 +1956,7 @@ impl TupleMemberDescriptionFactory {\n                 llvm_type: type_of::type_of(cx, component_type),\n                 type_metadata: type_metadata(cx, component_type, self.span),\n                 offset: ComputedMemberOffset,\n+                flags: FLAGS_NONE,\n             }\n         }).collect()\n     }\n@@ -2036,6 +2042,7 @@ impl EnumMemberDescriptionFactory {\n                             llvm_type: variant_llvm_type,\n                             type_metadata: variant_type_metadata,\n                             offset: FixedMemberOffset { bytes: 0 },\n+                            flags: FLAGS_NONE\n                         }\n                     }).collect()\n             },\n@@ -2069,6 +2076,7 @@ impl EnumMemberDescriptionFactory {\n                             llvm_type: variant_llvm_type,\n                             type_metadata: variant_type_metadata,\n                             offset: FixedMemberOffset { bytes: 0 },\n+                            flags: FLAGS_NONE\n                         }\n                     ]\n                 }\n@@ -2102,6 +2110,7 @@ impl EnumMemberDescriptionFactory {\n                     llvm_type: non_null_llvm_type,\n                     type_metadata: non_null_type_metadata,\n                     offset: FixedMemberOffset { bytes: 0 },\n+                    flags: FLAGS_NONE\n                 };\n \n                 let unique_type_id = debug_context(cx).type_map\n@@ -2139,6 +2148,7 @@ impl EnumMemberDescriptionFactory {\n                         llvm_type: artificial_struct_llvm_type,\n                         type_metadata: artificial_struct_metadata,\n                         offset: FixedMemberOffset { bytes: 0 },\n+                        flags: FLAGS_NONE\n                     }\n                 ]\n             },\n@@ -2183,6 +2193,7 @@ impl EnumMemberDescriptionFactory {\n                         llvm_type: variant_llvm_type,\n                         type_metadata: variant_type_metadata,\n                         offset: FixedMemberOffset { bytes: 0 },\n+                        flags: FLAGS_NONE\n                     }\n                 ]\n             },\n@@ -2209,6 +2220,11 @@ impl VariantMemberDescriptionFactory {\n                     _ => type_metadata(cx, ty, self.span)\n                 },\n                 offset: ComputedMemberOffset,\n+                flags: if self.discriminant_type_metadata.is_some() &&  i == 0 {\n+                    FLAGS_ARTIFICAL\n+                } else {\n+                    FLAGS_NONE\n+                }\n             }\n         }).collect()\n     }\n@@ -2524,7 +2540,7 @@ fn set_members_of_composite_type(cx: &CrateContext,\n                         bytes_to_bits(member_size),\n                         bytes_to_bits(member_align),\n                         bytes_to_bits(member_offset),\n-                        0,\n+                        member_description.flags,\n                         member_description.type_metadata)\n                 }\n             })\n@@ -2611,30 +2627,35 @@ fn at_box_metadata(cx: &CrateContext,\n             llvm_type: *member_llvm_types.get(0),\n             type_metadata: type_metadata(cx, int_type, codemap::DUMMY_SP),\n             offset: ComputedMemberOffset,\n+            flags: FLAGS_ARTIFICAL,\n         },\n         MemberDescription {\n             name: \"drop_glue\".to_string(),\n             llvm_type: *member_llvm_types.get(1),\n             type_metadata: nil_pointer_type_metadata,\n             offset: ComputedMemberOffset,\n+            flags: FLAGS_ARTIFICAL,\n         },\n         MemberDescription {\n             name: \"prev\".to_string(),\n             llvm_type: *member_llvm_types.get(2),\n             type_metadata: nil_pointer_type_metadata,\n             offset: ComputedMemberOffset,\n+            flags: FLAGS_ARTIFICAL,\n         },\n         MemberDescription {\n             name: \"next\".to_string(),\n             llvm_type: *member_llvm_types.get(3),\n             type_metadata: nil_pointer_type_metadata,\n             offset: ComputedMemberOffset,\n+            flags: FLAGS_ARTIFICAL,\n         },\n         MemberDescription {\n             name: \"val\".to_string(),\n             llvm_type: *member_llvm_types.get(4),\n             type_metadata: content_type_metadata,\n             offset: ComputedMemberOffset,\n+            flags: FLAGS_ARTIFICAL,\n         }\n     ];\n \n@@ -2735,12 +2756,14 @@ fn vec_slice_metadata(cx: &CrateContext,\n             llvm_type: *member_llvm_types.get(0),\n             type_metadata: element_type_metadata,\n             offset: ComputedMemberOffset,\n+            flags: FLAGS_ARTIFICAL\n         },\n         MemberDescription {\n             name: \"length\".to_string(),\n             llvm_type: *member_llvm_types.get(1),\n             type_metadata: type_metadata(cx, ty::mk_uint(), span),\n             offset: ComputedMemberOffset,\n+            flags: FLAGS_ARTIFICAL\n         },\n     ];\n "}, {"sha": "897477485a2ccb3a6e1c0f7d43227fc9c2461bfd", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6974b4f1b52556e191ade6653e9a9440d1d19610/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6974b4f1b52556e191ade6653e9a9440d1d19610/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=6974b4f1b52556e191ade6653e9a9440d1d19610", "patch": "@@ -428,7 +428,10 @@ pub mod debuginfo {\n       FlagObjcClassComplete  = 1 << 9,\n       FlagObjectPointer      = 1 << 10,\n       FlagVector             = 1 << 11,\n-      FlagStaticMember       = 1 << 12\n+      FlagStaticMember       = 1 << 12,\n+      FlagIndirectVariable   = 1 << 13,\n+      FlagLValueReference    = 1 << 14,\n+      FlagRValueReference    = 1 << 15\n     }\n }\n "}, {"sha": "51dad709b6f532ed7bb1ba24a981abeec71d2267", "filename": "src/test/debuginfo/gdb-pretty-struct-and-enums.rs", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/6974b4f1b52556e191ade6653e9a9440d1d19610/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6974b4f1b52556e191ade6653e9a9440d1d19610/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs?ref=6974b4f1b52556e191ade6653e9a9440d1d19610", "patch": "@@ -0,0 +1,167 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+// ignore-lldb\n+// ignore-android: FIXME(#10381)\n+// compile-flags:-g\n+// gdb-use-pretty-printer\n+\n+// The following line actually doesn't have to do anything with pretty printing,\n+// it just tells GDB to print values on one line:\n+// gdb-command: set print pretty off\n+\n+// gdb-command: rbreak zzz\n+// gdb-command: run\n+// gdb-command: finish\n+\n+// gdb-command: print regular_struct\n+// gdb-check:$1 = RegularStruct = {the_first_field = 101, the_second_field = 102.5, the_third_field = false, the_fourth_field = \"I'm so pretty, oh so pretty...\"}\n+\n+// gdb-command: print tuple\n+// gdb-check:$2 = {true, 103, \"blub\"}\n+\n+// gdb-command: print tuple_struct\n+// gdb-check:$3 = TupleStruct = {-104.5, 105}\n+\n+// gdb-command: print empty_struct\n+// gdb-check:$4 = EmptyStruct\n+\n+// gdb-command: print c_style_enum1\n+// gdb-check:$5 = CStyleEnumVar1\n+\n+// gdb-command: print c_style_enum2\n+// gdb-check:$6 = CStyleEnumVar2\n+\n+// gdb-command: print c_style_enum3\n+// gdb-check:$7 = CStyleEnumVar3\n+\n+// gdb-command: print mixed_enum_c_style_var\n+// gdb-check:$8 = MixedEnumCStyleVar\n+\n+// gdb-command: print mixed_enum_tuple_var\n+// gdb-check:$9 = MixedEnumTupleVar = {106, 107, false}\n+\n+// gdb-command: print mixed_enum_struct_var\n+// gdb-check:$10 = MixedEnumStructVar = {field1 = 108.5, field2 = 109}\n+\n+// gdb-command: print some\n+// gdb-check:$11 = Some = {110}\n+\n+// gdb-command: print none\n+// gdb-check:$12 = None\n+\n+// gdb-command: print nested_variant1\n+// gdb-check:$13 = NestedVariant1 = {NestedStruct = {regular_struct = RegularStruct = {the_first_field = 111, the_second_field = 112.5, the_third_field = true, the_fourth_field = \"NestedStructString1\"}, tuple_struct = TupleStruct = {113.5, 114}, empty_struct = EmptyStruct, c_style_enum = CStyleEnumVar2, mixed_enum = MixedEnumTupleVar = {115, 116, false}}}\n+\n+// gdb-command: print nested_variant2\n+// gdb-check:$14 = NestedVariant2 = {abc = NestedStruct = {regular_struct = RegularStruct = {the_first_field = 117, the_second_field = 118.5, the_third_field = false, the_fourth_field = \"NestedStructString10\"}, tuple_struct = TupleStruct = {119.5, 120}, empty_struct = EmptyStruct, c_style_enum = CStyleEnumVar3, mixed_enum = MixedEnumStructVar = {field1 = 121.5, field2 = -122}}}\n+\n+#![feature(struct_variant)]\n+\n+struct RegularStruct {\n+    the_first_field: int,\n+    the_second_field: f64,\n+    the_third_field: bool,\n+    the_fourth_field: &'static str,\n+}\n+\n+struct TupleStruct(f64, i16);\n+\n+struct EmptyStruct;\n+\n+enum CStyleEnum {\n+    CStyleEnumVar1,\n+    CStyleEnumVar2,\n+    CStyleEnumVar3,\n+}\n+\n+enum MixedEnum {\n+    MixedEnumCStyleVar,\n+    MixedEnumTupleVar(u32, u16, bool),\n+    MixedEnumStructVar { field1: f64, field2: i32 }\n+}\n+\n+struct NestedStruct {\n+    regular_struct: RegularStruct,\n+    tuple_struct: TupleStruct,\n+    empty_struct: EmptyStruct,\n+    c_style_enum: CStyleEnum,\n+    mixed_enum: MixedEnum,\n+}\n+\n+enum NestedEnum {\n+    NestedVariant1(NestedStruct),\n+    NestedVariant2 { abc: NestedStruct }\n+}\n+\n+fn main() {\n+\n+    let regular_struct = RegularStruct {\n+        the_first_field: 101,\n+        the_second_field: 102.5,\n+        the_third_field: false,\n+        the_fourth_field: \"I'm so pretty, oh so pretty...\"\n+    };\n+\n+    let tuple = ( true, 103u32, \"blub\" );\n+\n+    let tuple_struct = TupleStruct(-104.5, 105);\n+\n+    let empty_struct = EmptyStruct;\n+\n+    let c_style_enum1 = CStyleEnumVar1;\n+    let c_style_enum2 = CStyleEnumVar2;\n+    let c_style_enum3 = CStyleEnumVar3;\n+\n+    let mixed_enum_c_style_var = MixedEnumCStyleVar;\n+    let mixed_enum_tuple_var = MixedEnumTupleVar(106, 107, false);\n+    let mixed_enum_struct_var = MixedEnumStructVar { field1: 108.5, field2: 109 };\n+\n+    let some = Some(110u);\n+    let none: Option<int> = None;\n+\n+    let nested_variant1 = NestedVariant1(\n+        NestedStruct {\n+            regular_struct: RegularStruct {\n+                the_first_field: 111,\n+                the_second_field: 112.5,\n+                the_third_field: true,\n+                the_fourth_field: \"NestedStructString1\",\n+            },\n+            tuple_struct: TupleStruct(113.5, 114),\n+            empty_struct: EmptyStruct,\n+            c_style_enum: CStyleEnumVar2,\n+            mixed_enum: MixedEnumTupleVar(115, 116, false)\n+        }\n+    );\n+\n+    let nested_variant2 = NestedVariant2 {\n+        abc: NestedStruct {\n+            regular_struct: RegularStruct {\n+                the_first_field: 117,\n+                the_second_field: 118.5,\n+                the_third_field: false,\n+                the_fourth_field: \"NestedStructString10\",\n+            },\n+            tuple_struct: TupleStruct(119.5, 120),\n+            empty_struct: EmptyStruct,\n+            c_style_enum: CStyleEnumVar3,\n+            mixed_enum: MixedEnumStructVar {\n+                field1: 121.5,\n+                field2: -122\n+            }\n+        }\n+    };\n+\n+    zzz();\n+}\n+\n+fn zzz() { () }\n\\ No newline at end of file"}]}