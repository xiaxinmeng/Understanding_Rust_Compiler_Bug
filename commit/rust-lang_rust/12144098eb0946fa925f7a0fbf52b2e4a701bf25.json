{"sha": "12144098eb0946fa925f7a0fbf52b2e4a701bf25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMTQ0MDk4ZWIwOTQ2ZmE5MjVmN2EwZmJmNTJiMmU0YTcwMWJmMjU=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-16T09:20:28Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-16T09:20:28Z"}, "message": "rollup merge of #18948: barosl/doc-encodable-fix", "tree": {"sha": "63a4e1cbfa86f1d8faec884a4fdac7a6a830b24e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63a4e1cbfa86f1d8faec884a4fdac7a6a830b24e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12144098eb0946fa925f7a0fbf52b2e4a701bf25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12144098eb0946fa925f7a0fbf52b2e4a701bf25", "html_url": "https://github.com/rust-lang/rust/commit/12144098eb0946fa925f7a0fbf52b2e4a701bf25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12144098eb0946fa925f7a0fbf52b2e4a701bf25/comments", "author": null, "committer": null, "parents": [{"sha": "b45dbfbd2b6835dffe07e87846f8349ff55927ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/b45dbfbd2b6835dffe07e87846f8349ff55927ce", "html_url": "https://github.com/rust-lang/rust/commit/b45dbfbd2b6835dffe07e87846f8349ff55927ce"}, {"sha": "94169353eca74c3683b06cea2609a4350ed36c45", "url": "https://api.github.com/repos/rust-lang/rust/commits/94169353eca74c3683b06cea2609a4350ed36c45", "html_url": "https://github.com/rust-lang/rust/commit/94169353eca74c3683b06cea2609a4350ed36c45"}], "stats": {"total": 71, "additions": 40, "deletions": 31}, "files": [{"sha": "69eb260b8c4cc0626ca8518d1180cb9e0e7ddc81", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 40, "deletions": 31, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/12144098eb0946fa925f7a0fbf52b2e4a701bf25/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12144098eb0946fa925f7a0fbf52b2e4a701bf25/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=12144098eb0946fa925f7a0fbf52b2e4a701bf25", "patch": "@@ -22,19 +22,23 @@\n //! would generate two implementations like:\n //!\n //! ```ignore\n-//! impl<S:serialize::Encoder> Encodable<S> for Node {\n-//!     fn encode(&self, s: &S) {\n-//!         s.emit_struct(\"Node\", 1, || {\n-//!             s.emit_field(\"id\", 0, || s.emit_uint(self.id))\n+//! impl<S: Encoder<E>, E> Encodable<S, E> for Node {\n+//!     fn encode(&self, s: &mut S) -> Result<(), E> {\n+//!         s.emit_struct(\"Node\", 1, |this| {\n+//!             this.emit_struct_field(\"id\", 0, |this| {\n+//!                 Encodable::encode(&self.id, this)\n+//!                 /* this.emit_uint(self.id) can also be used */\n+//!             })\n //!         })\n //!     }\n //! }\n //!\n-//! impl<D:Decoder> Decodable for node_id {\n-//!     fn decode(d: &D) -> Node {\n-//!         d.read_struct(\"Node\", 1, || {\n-//!             Node {\n-//!                 id: d.read_field(\"x\".to_string(), 0, || decode(d))\n+//! impl<D: Decoder<E>, E> Decodable<D, E> for Node {\n+//!     fn decode(d: &mut D) -> Result<Node, E> {\n+//!         d.read_struct(\"Node\", 1, |this| {\n+//!             match this.read_struct_field(\"id\", 0, |this| Decodable::decode(this)) {\n+//!                 Ok(id) => Ok(Node { id: id }),\n+//!                 Err(e) => Err(e),\n //!             }\n //!         })\n //!     }\n@@ -46,37 +50,42 @@\n //!\n //! ```ignore\n //! #[deriving(Encodable, Decodable)]\n-//! struct spanned<T> { node: T, span: Span }\n+//! struct Spanned<T> { node: T, span: Span }\n //! ```\n //!\n //! would yield functions like:\n //!\n //! ```ignore\n-//!     impl<\n-//!         S: Encoder,\n-//!         T: Encodable<S>\n-//!     > spanned<T>: Encodable<S> {\n-//!         fn encode<S:Encoder>(s: &S) {\n-//!             s.emit_rec(|| {\n-//!                 s.emit_field(\"node\", 0, || self.node.encode(s));\n-//!                 s.emit_field(\"span\", 1, || self.span.encode(s));\n-//!             })\n-//!         }\n+//! impl<\n+//!     S: Encoder<E>,\n+//!     E,\n+//!     T: Encodable<S, E>\n+//! > Encodable<S, E> for Spanned<T> {\n+//!     fn encode(&self, s: &mut S) -> Result<(), E> {\n+//!         s.emit_struct(\"Spanned\", 2, |this| {\n+//!             this.emit_struct_field(\"node\", 0, |this| self.node.encode(this))\n+//!                 .ok().unwrap();\n+//!             this.emit_struct_field(\"span\", 1, |this| self.span.encode(this))\n+//!         })\n //!     }\n+//! }\n //!\n-//!     impl<\n-//!         D: Decoder,\n-//!         T: Decodable<D>\n-//!     > spanned<T>: Decodable<D> {\n-//!         fn decode(d: &D) -> spanned<T> {\n-//!             d.read_rec(|| {\n-//!                 {\n-//!                     node: d.read_field(\"node\".to_string(), 0, || decode(d)),\n-//!                     span: d.read_field(\"span\".to_string(), 1, || decode(d)),\n-//!                 }\n+//! impl<\n+//!     D: Decoder<E>,\n+//!     E,\n+//!     T: Decodable<D, E>\n+//! > Decodable<D, E> for Spanned<T> {\n+//!     fn decode(d: &mut D) -> Result<Spanned<T>, E> {\n+//!         d.read_struct(\"Spanned\", 2, |this| {\n+//!             Ok(Spanned {\n+//!                 node: this.read_struct_field(\"node\", 0, |this| Decodable::decode(this))\n+//!                     .ok().unwrap(),\n+//!                 span: this.read_struct_field(\"span\", 1, |this| Decodable::decode(this))\n+//!                     .ok().unwrap(),\n //!             })\n-//!         }\n+//!         })\n //!     }\n+//! }\n //! ```\n \n use ast::{MetaItem, Item, Expr, ExprRet, MutMutable, LitNil};"}]}