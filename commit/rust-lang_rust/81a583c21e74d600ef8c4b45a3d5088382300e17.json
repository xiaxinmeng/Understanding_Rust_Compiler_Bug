{"sha": "81a583c21e74d600ef8c4b45a3d5088382300e17", "node_id": "C_kwDOAAsO6NoAKDgxYTU4M2MyMWU3NGQ2MDBlZjhjNGI0NWEzZDUwODgzODIzMDBlMTc", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-08-03T20:24:47Z"}, "committer": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-08-29T14:27:52Z"}, "message": "Try normalizing types without RevealAll in ParamEnv in mir validation\n\nBefore, the MIR validator used RevealAll in its ParamEnv for type\nchecking. This could cause false negatives in some cases due to\nRevealAll ParamEnvs not always use all predicates as expected here.\n\nSince some MIR passes like inlining use RevealAll as well, keep using\nit in the MIR validator too, but when it fails usign RevealAll, also\ntry the check without it, to stop false negatives.", "tree": {"sha": "9b6b9133952a871a87f220b34cf2201740c2d6e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b6b9133952a871a87f220b34cf2201740c2d6e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81a583c21e74d600ef8c4b45a3d5088382300e17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81a583c21e74d600ef8c4b45a3d5088382300e17", "html_url": "https://github.com/rust-lang/rust/commit/81a583c21e74d600ef8c4b45a3d5088382300e17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81a583c21e74d600ef8c4b45a3d5088382300e17/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b96fa1a25ced4cfa72923e6d45f47f36c2c00ce0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b96fa1a25ced4cfa72923e6d45f47f36c2c00ce0", "html_url": "https://github.com/rust-lang/rust/commit/b96fa1a25ced4cfa72923e6d45f47f36c2c00ce0"}], "stats": {"total": 53, "additions": 45, "deletions": 8}, "files": [{"sha": "ddde9ff4c0281b7d2bd64a2364a5f83ec9e21bad", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/81a583c21e74d600ef8c4b45a3d5088382300e17/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81a583c21e74d600ef8c4b45a3d5088382300e17/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=81a583c21e74d600ef8c4b45a3d5088382300e17", "patch": "@@ -181,16 +181,28 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         if (src, dest).has_opaque_types() {\n             return true;\n         }\n+\n+        let try_equal_with_param_env = |param_env| {\n+            let src = self.tcx.normalize_erasing_regions(param_env, src);\n+            let dest = self.tcx.normalize_erasing_regions(param_env, dest);\n+            // Type-changing assignments can happen when subtyping is used. While\n+            // all normal lifetimes are erased, higher-ranked types with their\n+            // late-bound lifetimes are still around and can lead to type\n+            // differences. So we compare ignoring lifetimes.\n+            equal_up_to_regions(self.tcx, param_env, src, dest)\n+        };\n+\n         // Normalize projections and things like that.\n+        // First, try with reveal_all. This might not work in some cases, as the predicates\n+        // can be cleared in reveal_all mode. We try the reveal first anyways as it is used\n+        // by some other passes like inlining as well.\n         let param_env = self.param_env.with_reveal_all_normalized(self.tcx);\n-        let src = self.tcx.normalize_erasing_regions(param_env, src);\n-        let dest = self.tcx.normalize_erasing_regions(param_env, dest);\n-\n-        // Type-changing assignments can happen when subtyping is used. While\n-        // all normal lifetimes are erased, higher-ranked types with their\n-        // late-bound lifetimes are still around and can lead to type\n-        // differences. So we compare ignoring lifetimes.\n-        equal_up_to_regions(self.tcx, param_env, src, dest)\n+        if try_equal_with_param_env(param_env) {\n+            true\n+        } else {\n+            // If this fails, we can try it without the reveal.\n+            try_equal_with_param_env(self.param_env)\n+        }\n     }\n }\n "}, {"sha": "d39ae6ebf1da2c01191cb995083f5f2e7599543d", "filename": "src/test/ui/mir/issue-99866.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/81a583c21e74d600ef8c4b45a3d5088382300e17/src%2Ftest%2Fui%2Fmir%2Fissue-99866.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81a583c21e74d600ef8c4b45a3d5088382300e17/src%2Ftest%2Fui%2Fmir%2Fissue-99866.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-99866.rs?ref=81a583c21e74d600ef8c4b45a3d5088382300e17", "patch": "@@ -0,0 +1,25 @@\n+// check-pass\n+pub trait Backend {\n+    type DescriptorSetLayout;\n+}\n+\n+pub struct Back;\n+\n+impl Backend for Back {\n+    type DescriptorSetLayout = u32;\n+}\n+\n+pub struct HalSetLayouts {\n+    vertex_layout: <Back as Backend>::DescriptorSetLayout,\n+}\n+\n+impl HalSetLayouts {\n+    pub fn iter<DSL>(self) -> DSL\n+    where\n+        Back: Backend<DescriptorSetLayout = DSL>,\n+    {\n+        self.vertex_layout\n+    }\n+}\n+\n+fn main() {}"}]}