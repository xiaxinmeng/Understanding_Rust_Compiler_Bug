{"sha": "e843d867e62a06330e63b419ccd50c178dae40aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NDNkODY3ZTYyYTA2MzMwZTYzYjQxOWNjZDUwYzE3OGRhZTQwYWE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-13T20:47:26Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-14T15:05:45Z"}, "message": "rustc_metadata: Crate loader is immutable", "tree": {"sha": "3a33e569988474a2518d88f2e762dd8d0bc36c33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a33e569988474a2518d88f2e762dd8d0bc36c33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e843d867e62a06330e63b419ccd50c178dae40aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e843d867e62a06330e63b419ccd50c178dae40aa", "html_url": "https://github.com/rust-lang/rust/commit/e843d867e62a06330e63b419ccd50c178dae40aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e843d867e62a06330e63b419ccd50c178dae40aa/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2805553dd8dcb2bd7388cf8a53bed82e876ab5d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2805553dd8dcb2bd7388cf8a53bed82e876ab5d1", "html_url": "https://github.com/rust-lang/rust/commit/2805553dd8dcb2bd7388cf8a53bed82e876ab5d1"}], "stats": {"total": 54, "additions": 22, "deletions": 32}, "files": [{"sha": "5f046847fd1e7cd658adc58136451d5b0fea2571", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e843d867e62a06330e63b419ccd50c178dae40aa/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e843d867e62a06330e63b419ccd50c178dae40aa/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=e843d867e62a06330e63b419ccd50c178dae40aa", "patch": "@@ -130,15 +130,15 @@ pub fn configure_and_expand(\n     let crate_name = crate_name.to_string();\n     let (result, resolver) = BoxedResolver::new(static move || {\n         let sess = &*sess;\n-        let mut crate_loader = CrateLoader::new(sess, &*cstore, &crate_name);\n+        let crate_loader = CrateLoader::new(sess, &*cstore, &crate_name);\n         let resolver_arenas = Resolver::arenas();\n         let res = configure_and_expand_inner(\n             sess,\n             &*cstore,\n             krate,\n             &crate_name,\n             &resolver_arenas,\n-            &mut crate_loader,\n+            &crate_loader,\n             plugin_info,\n         );\n         let mut resolver = match res {\n@@ -319,7 +319,7 @@ fn configure_and_expand_inner<'a>(\n     mut krate: ast::Crate,\n     crate_name: &str,\n     resolver_arenas: &'a ResolverArenas<'a>,\n-    crate_loader: &'a mut CrateLoader<'a>,\n+    crate_loader: &'a CrateLoader<'a>,\n     plugin_info: PluginInfo,\n ) -> Result<(ast::Crate, Resolver<'a>)> {\n     time(sess, \"pre-AST-expansion lint checks\", || {"}, {"sha": "aabcc9f1502eddee35e139dcf721d163b6330ee9", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 17, "deletions": 27, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e843d867e62a06330e63b419ccd50c178dae40aa/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e843d867e62a06330e63b419ccd50c178dae40aa/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=e843d867e62a06330e63b419ccd50c178dae40aa", "patch": "@@ -187,7 +187,7 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     fn register_crate(\n-        &mut self,\n+        &self,\n         host_lib: Option<Library>,\n         root: Option<&CratePaths>,\n         span: Span,\n@@ -272,7 +272,7 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     fn load_proc_macro<'b>(\n-        &mut self,\n+        &self,\n         locate_ctxt: &mut locator::Context<'b>,\n         path_kind: PathKind,\n     ) -> Option<(LoadResult, Option<Library>)>\n@@ -327,7 +327,7 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     fn resolve_crate<'b>(\n-        &'b mut self,\n+        &'b self,\n         name: Symbol,\n         span: Span,\n         dep_kind: DepKind,\n@@ -337,7 +337,7 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     fn maybe_resolve_crate<'b>(\n-        &'b mut self,\n+        &'b self,\n         name: Symbol,\n         span: Span,\n         mut dep_kind: DepKind,\n@@ -397,7 +397,7 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    fn load(&mut self, locate_ctxt: &mut locator::Context<'_>) -> Option<LoadResult> {\n+    fn load(&self, locate_ctxt: &mut locator::Context<'_>) -> Option<LoadResult> {\n         let library = locate_ctxt.maybe_load_library_crate()?;\n \n         // In the case that we're loading a crate, but not matching\n@@ -424,7 +424,7 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    fn update_extern_crate(&mut self,\n+    fn update_extern_crate(&self,\n                            cnum: CrateNum,\n                            mut extern_crate: ExternCrate,\n                            visited: &mut FxHashSet<(CrateNum, bool)>)\n@@ -466,7 +466,7 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     // Go through the crate metadata and load any crates that it references\n-    fn resolve_crate_deps(&mut self,\n+    fn resolve_crate_deps(&self,\n                           root: &CratePaths,\n                           crate_root: &CrateRoot<'_>,\n                           metadata: &MetadataBlob,\n@@ -496,7 +496,7 @@ impl<'a> CrateLoader<'a> {\n         })).collect()\n     }\n \n-    fn read_extension_crate(&mut self, name: Symbol, span: Span) -> ExtensionCrate {\n+    fn read_extension_crate(&self, name: Symbol, span: Span) -> ExtensionCrate {\n         info!(\"read extension crate `{}`\", name);\n         let target_triple = self.sess.opts.target_triple.clone();\n         let host_triple = TargetTriple::from_triple(config::host_triple());\n@@ -592,7 +592,7 @@ impl<'a> CrateLoader<'a> {\n \n     /// Look for a plugin registrar. Returns library path, crate\n     /// SVH and DefIndex of the registrar function.\n-    pub fn find_plugin_registrar(&mut self,\n+    pub fn find_plugin_registrar(&self,\n                                  span: Span,\n                                  name: Symbol)\n                                  -> Option<(PathBuf, CrateDisambiguator)> {\n@@ -625,7 +625,7 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    fn inject_panic_runtime(&mut self, krate: &ast::Crate) {\n+    fn inject_panic_runtime(&self, krate: &ast::Crate) {\n         // If we're only compiling an rlib, then there's no need to select a\n         // panic runtime, so we just skip this section entirely.\n         let any_non_rlib = self.sess.crate_types.borrow().iter().any(|ct| {\n@@ -706,7 +706,7 @@ impl<'a> CrateLoader<'a> {\n                                   &|data| data.root.needs_panic_runtime);\n     }\n \n-    fn inject_sanitizer_runtime(&mut self) {\n+    fn inject_sanitizer_runtime(&self) {\n         if let Some(ref sanitizer) = self.sess.opts.debugging_opts.sanitizer {\n             // Sanitizers can only be used on some tested platforms with\n             // executables linked to `std`\n@@ -804,7 +804,7 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    fn inject_profiler_runtime(&mut self) {\n+    fn inject_profiler_runtime(&self) {\n         if self.sess.opts.debugging_opts.profile ||\n            self.sess.opts.cg.profile_generate.enabled()\n         {\n@@ -821,7 +821,7 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    fn inject_allocator_crate(&mut self, krate: &ast::Crate) {\n+    fn inject_allocator_crate(&self, krate: &ast::Crate) {\n         let has_global_allocator = match &*global_allocator_spans(krate) {\n             [span1, span2, ..] => {\n                 self.sess.struct_span_err(*span2, \"cannot define multiple global allocators\")\n@@ -960,7 +960,7 @@ impl<'a> CrateLoader<'a> {\n }\n \n impl<'a> CrateLoader<'a> {\n-    pub fn postprocess(&mut self, krate: &ast::Crate) {\n+    pub fn postprocess(&self, krate: &ast::Crate) {\n         self.inject_sanitizer_runtime();\n         self.inject_profiler_runtime();\n         self.inject_allocator_crate(krate);\n@@ -971,9 +971,7 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    pub fn process_extern_crate(\n-        &mut self, item: &ast::Item, definitions: &Definitions,\n-    ) -> CrateNum {\n+    pub fn process_extern_crate(&self, item: &ast::Item, definitions: &Definitions) -> CrateNum {\n         match item.kind {\n             ast::ItemKind::ExternCrate(orig_name) => {\n                 debug!(\"resolving extern crate stmt. ident: {} orig_name: {:?}\",\n@@ -1013,11 +1011,7 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    pub fn process_path_extern(\n-        &mut self,\n-        name: Symbol,\n-        span: Span,\n-    ) -> CrateNum {\n+    pub fn process_path_extern(&self, name: Symbol, span: Span) -> CrateNum {\n         let cnum = self.resolve_crate(name, span, DepKind::Explicit, None).0;\n \n         self.update_extern_crate(\n@@ -1035,11 +1029,7 @@ impl<'a> CrateLoader<'a> {\n         cnum\n     }\n \n-    pub fn maybe_process_path_extern(\n-        &mut self,\n-        name: Symbol,\n-        span: Span,\n-    ) -> Option<CrateNum> {\n+    pub fn maybe_process_path_extern(&self, name: Symbol, span: Span) -> Option<CrateNum> {\n         let cnum = self.maybe_resolve_crate(name, span, DepKind::Explicit, None).ok()?.0;\n \n         self.update_extern_crate("}, {"sha": "e716a22e226cf17eb619e82d5e692f40c45ef701", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e843d867e62a06330e63b419ccd50c178dae40aa/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e843d867e62a06330e63b419ccd50c178dae40aa/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e843d867e62a06330e63b419ccd50c178dae40aa", "patch": "@@ -900,7 +900,7 @@ pub struct Resolver<'a> {\n     arenas: &'a ResolverArenas<'a>,\n     dummy_binding: &'a NameBinding<'a>,\n \n-    crate_loader: &'a mut CrateLoader<'a>,\n+    crate_loader: &'a CrateLoader<'a>,\n     macro_names: FxHashSet<Ident>,\n     builtin_macros: FxHashMap<Name, SyntaxExtension>,\n     macro_use_prelude: FxHashMap<Name, &'a NameBinding<'a>>,\n@@ -1070,7 +1070,7 @@ impl<'a> Resolver<'a> {\n                cstore: &'a CStore,\n                krate: &Crate,\n                crate_name: &str,\n-               crate_loader: &'a mut CrateLoader<'a>,\n+               crate_loader: &'a CrateLoader<'a>,\n                arenas: &'a ResolverArenas<'a>)\n                -> Resolver<'a> {\n         let root_def_id = DefId::local(CRATE_DEF_INDEX);"}]}