{"sha": "1795cda1b7f87d1217dd04d580289cd46fb43310", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3OTVjZGExYjdmODdkMTIxN2RkMDRkNTgwMjg5Y2Q0NmZiNDMzMTA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-14T19:11:15Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-14T19:15:00Z"}, "message": "De-mode more pieces of core.", "tree": {"sha": "aedfb72094e41db5d85674165946da81f3a7a761", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aedfb72094e41db5d85674165946da81f3a7a761"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1795cda1b7f87d1217dd04d580289cd46fb43310", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1795cda1b7f87d1217dd04d580289cd46fb43310", "html_url": "https://github.com/rust-lang/rust/commit/1795cda1b7f87d1217dd04d580289cd46fb43310", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1795cda1b7f87d1217dd04d580289cd46fb43310/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d3b5478fad0ce427c0973175c68a4eb52b340d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d3b5478fad0ce427c0973175c68a4eb52b340d7", "html_url": "https://github.com/rust-lang/rust/commit/1d3b5478fad0ce427c0973175c68a4eb52b340d7"}], "stats": {"total": 94, "additions": 61, "deletions": 33}, "files": [{"sha": "f653ce1fb8e184ce47434d59061fbd9c1c36ff3b", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1795cda1b7f87d1217dd04d580289cd46fb43310/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1795cda1b7f87d1217dd04d580289cd46fb43310/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=1795cda1b7f87d1217dd04d580289cd46fb43310", "patch": "@@ -1,3 +1,7 @@\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n /*!\n  * Implementation of SipHash 2-4\n  *\n@@ -362,9 +366,9 @@ fn test_siphash() {\n     let stream_inc = &State(k0,k1);\n     let stream_full = &State(k0,k1);\n \n-    fn to_hex_str(r:[u8]/8) -> ~str {\n+    fn to_hex_str(r:  &[u8]/8) -> ~str {\n         let mut s = ~\"\";\n-        for vec::each(r) |b| { s += uint::to_str(b as uint, 16u); }\n+        for vec::each(*r) |b| { s += uint::to_str(b as uint, 16u); }\n         return s;\n     }\n \n@@ -379,7 +383,7 @@ fn test_siphash() {\n         stream_full.input(buf);\n         let f = stream_full.result_str();\n         let i = stream_inc.result_str();\n-        let v = to_hex_str(vecs[t]);\n+        let v = to_hex_str(&vecs[t]);\n         debug!{\"%d: (%s) => inc=%s full=%s\", t, v, i, f};\n \n         assert f == i && f == v;"}, {"sha": "02c7fe6da27a0db9a5cb8362e025a85f06de3eeb", "filename": "src/libcore/run.rs", "status": "modified", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1795cda1b7f87d1217dd04d580289cd46fb43310/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1795cda1b7f87d1217dd04d580289cd46fb43310/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=1795cda1b7f87d1217dd04d580289cd46fb43310", "patch": "@@ -1,3 +1,7 @@\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n //! Process spawning\n import option::{some, none};\n import libc::{pid_t, c_void, c_int};\n@@ -62,9 +66,9 @@ trait program {\n  *\n  * The process id of the spawned process\n  */\n-fn spawn_process(prog: ~str, args: ~[~str],\n-                 env: option<~[(~str,~str)]>,\n-                 dir: option<~str>,\n+fn spawn_process(prog: &str, args: &[~str],\n+                 env: &option<~[(~str,~str)]>,\n+                 dir: &option<~str>,\n                  in_fd: c_int, out_fd: c_int, err_fd: c_int)\n    -> pid_t {\n     do with_argv(prog, args) |argv| {\n@@ -77,7 +81,7 @@ fn spawn_process(prog: ~str, args: ~[~str],\n     }\n }\n \n-fn with_argv<T>(prog: ~str, args: ~[~str],\n+fn with_argv<T>(prog: &str, args: &[~str],\n                 cb: fn(**libc::c_char) -> T) -> T {\n     let mut argptrs = str::as_c_str(prog, |b| ~[b]);\n     let mut tmps = ~[];\n@@ -91,11 +95,11 @@ fn with_argv<T>(prog: ~str, args: ~[~str],\n }\n \n #[cfg(unix)]\n-fn with_envp<T>(env: option<~[(~str,~str)]>,\n+fn with_envp<T>(env: &option<~[(~str,~str)]>,\n                 cb: fn(*c_void) -> T) -> T {\n     // On posixy systems we can pass a char** for envp, which is\n     // a null-terminated array of \"k=v\\n\" strings.\n-    match env {\n+    match *env {\n       some(es) if !vec::is_empty(es) => {\n         let mut tmps = ~[];\n         let mut ptrs = ~[];\n@@ -140,9 +144,9 @@ fn with_envp<T>(env: option<~[(~str,~str)]>,\n     }\n }\n \n-fn with_dirp<T>(d: option<~str>,\n+fn with_dirp<T>(d: &option<~str>,\n                 cb: fn(*libc::c_char) -> T) -> T {\n-    match d {\n+    match *d {\n       some(dir) => str::as_c_str(dir, cb),\n       none => cb(ptr::null())\n     }\n@@ -160,8 +164,8 @@ fn with_dirp<T>(d: option<~str>,\n  *\n  * The process id\n  */\n-fn run_program(prog: ~str, args: ~[~str]) -> int {\n-    let pid = spawn_process(prog, args, none, none,\n+fn run_program(prog: &str, args: &[~str]) -> int {\n+    let pid = spawn_process(prog, args, &none, &none,\n                             0i32, 0i32, 0i32);\n     if pid == -1 as pid_t { fail; }\n     return waitpid(pid);\n@@ -183,12 +187,12 @@ fn run_program(prog: ~str, args: ~[~str]) -> int {\n  *\n  * A class with a <program> field\n  */\n-fn start_program(prog: ~str, args: ~[~str]) -> program {\n+fn start_program(prog: &str, args: &[~str]) -> program {\n     let pipe_input = os::pipe();\n     let pipe_output = os::pipe();\n     let pipe_err = os::pipe();\n     let pid =\n-        spawn_process(prog, args, none, none,\n+        spawn_process(prog, args, &none, &none,\n                       pipe_input.in, pipe_output.out,\n                       pipe_err.out);\n \n@@ -203,45 +207,45 @@ fn start_program(prog: ~str, args: ~[~str]) -> program {\n                       err_file: *libc::FILE,\n                       mut finished: bool};\n \n-    fn close_repr_input(r: prog_repr) {\n+    fn close_repr_input(r: &prog_repr) {\n         let invalid_fd = -1i32;\n         if r.in_fd != invalid_fd {\n             libc::close(r.in_fd);\n             r.in_fd = invalid_fd;\n         }\n     }\n-    fn finish_repr(r: prog_repr) -> int {\n+    fn finish_repr(r: &prog_repr) -> int {\n         if r.finished { return 0; }\n         r.finished = true;\n         close_repr_input(r);\n         return waitpid(r.pid);\n     }\n-    fn destroy_repr(r: prog_repr) {\n+    fn destroy_repr(r: &prog_repr) {\n         finish_repr(r);\n        libc::fclose(r.out_file);\n        libc::fclose(r.err_file);\n     }\n     class prog_res {\n         let r: prog_repr;\n-        new(-r: prog_repr) { self.r = r; }\n-        drop { destroy_repr(self.r); }\n+        new(+r: prog_repr) { self.r = r; }\n+        drop { destroy_repr(&self.r); }\n     }\n \n     impl prog_res: program {\n         fn get_id() -> pid_t { return self.r.pid; }\n         fn input() -> io::writer { io::fd_writer(self.r.in_fd, false) }\n         fn output() -> io::reader { io::FILE_reader(self.r.out_file, false) }\n         fn err() -> io::reader { io::FILE_reader(self.r.err_file, false) }\n-        fn close_input() { close_repr_input(self.r); }\n-        fn finish() -> int { finish_repr(self.r) }\n-        fn destroy() { destroy_repr(self.r); }\n+        fn close_input() { close_repr_input(&self.r); }\n+        fn finish() -> int { finish_repr(&self.r) }\n+        fn destroy() { destroy_repr(&self.r); }\n     }\n     let repr = {pid: pid,\n                 mut in_fd: pipe_input.out,\n                 out_file: os::fdopen(pipe_output.in),\n                 err_file: os::fdopen(pipe_err.in),\n                 mut finished: false};\n-    return prog_res(repr) as program;\n+    return prog_res(move repr) as program;\n }\n \n fn read_all(rd: io::reader) -> ~str {\n@@ -267,13 +271,13 @@ fn read_all(rd: io::reader) -> ~str {\n  * A record, {status: int, out: str, err: str} containing the exit code,\n  * the contents of stdout and the contents of stderr.\n  */\n-fn program_output(prog: ~str, args: ~[~str]) ->\n+fn program_output(prog: &str, args: &[~str]) ->\n    {status: int, out: ~str, err: ~str} {\n \n     let pipe_in = os::pipe();\n     let pipe_out = os::pipe();\n     let pipe_err = os::pipe();\n-    let pid = spawn_process(prog, args, none, none,\n+    let pid = spawn_process(prog, args, &none, &none,\n                             pipe_in.in, pipe_out.out, pipe_err.out);\n \n     os::close(pipe_in.in);\n@@ -321,7 +325,7 @@ fn program_output(prog: ~str, args: ~[~str]) ->\n     return {status: status, out: outs, err: errs};\n }\n \n-fn writeclose(fd: c_int, s: ~str) {\n+fn writeclose(fd: c_int, s: &str) {\n     import io::writer_util;\n \n     error!{\"writeclose %d, %s\", fd as int, s};\n@@ -393,9 +397,9 @@ mod tests {\n     // Regression test for memory leaks\n     #[ignore(cfg(windows))] // FIXME (#2626)\n     fn test_leaks() {\n-        run::run_program(~\"echo\", ~[]);\n-        run::start_program(~\"echo\", ~[]);\n-        run::program_output(~\"echo\", ~[]);\n+        run::run_program(\"echo\", []);\n+        run::start_program(\"echo\", []);\n+        run::program_output(\"echo\", []);\n     }\n \n     #[test]\n@@ -406,7 +410,7 @@ mod tests {\n \n         let pid =\n             run::spawn_process(\n-                ~\"cat\", ~[], none, none,\n+                \"cat\", [], &none, &none,\n                 pipe_in.in, pipe_out.out, pipe_err.out);\n         os::close(pipe_in.in);\n         os::close(pipe_out.out);\n@@ -426,8 +430,8 @@ mod tests {\n \n     #[test]\n     fn waitpid() {\n-        let pid = run::spawn_process(~\"false\", ~[],\n-                                     none, none,\n+        let pid = run::spawn_process(\"false\", [],\n+                                     &none, &none,\n                                      0i32, 0i32, 0i32);\n         let status = run::waitpid(pid);\n         assert status == 1;"}, {"sha": "11097b36d4de94fffdd52b8fa25b8ae1605b2cf7", "filename": "src/libcore/to_bytes.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1795cda1b7f87d1217dd04d580289cd46fb43310/src%2Flibcore%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1795cda1b7f87d1217dd04d580289cd46fb43310/src%2Flibcore%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_bytes.rs?ref=1795cda1b7f87d1217dd04d580289cd46fb43310", "patch": "@@ -1,3 +1,7 @@\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n trait ToBytes {\n     fn to_bytes() -> ~[u8];\n }"}, {"sha": "78ea4a5263d7216e59b3463e6efca1527a5bedea", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1795cda1b7f87d1217dd04d580289cd46fb43310/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1795cda1b7f87d1217dd04d580289cd46fb43310/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=1795cda1b7f87d1217dd04d580289cd46fb43310", "patch": "@@ -1,3 +1,7 @@\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n trait ToStr { fn to_str() -> ~str; }\n \n impl int: ToStr {"}, {"sha": "5b5bb6660c3f3e23ce0d30b836b49a461971ab22", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1795cda1b7f87d1217dd04d580289cd46fb43310/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1795cda1b7f87d1217dd04d580289cd46fb43310/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=1795cda1b7f87d1217dd04d580289cd46fb43310", "patch": "@@ -1,3 +1,7 @@\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n //! Operations on tuples\n \n trait TupleOps<T,U> {"}, {"sha": "6f3419aadd416a97b44e56aede93824e0fc231e3", "filename": "src/libcore/unicode.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1795cda1b7f87d1217dd04d580289cd46fb43310/src%2Flibcore%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1795cda1b7f87d1217dd04d580289cd46fb43310/src%2Flibcore%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode.rs?ref=1795cda1b7f87d1217dd04d580289cd46fb43310", "patch": "@@ -1,3 +1,7 @@\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n mod general_category {\n     pure fn Cc(c: char) -> bool {\n         return match c {"}, {"sha": "3eb9474598cb9db96224ce293b5c91378394acbe", "filename": "src/libcore/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1795cda1b7f87d1217dd04d580289cd46fb43310/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1795cda1b7f87d1217dd04d580289cd46fb43310/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=1795cda1b7f87d1217dd04d580289cd46fb43310", "patch": "@@ -1,3 +1,7 @@\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n /**\n  * Miscellaneous helpers for common patterns.\n  */"}]}