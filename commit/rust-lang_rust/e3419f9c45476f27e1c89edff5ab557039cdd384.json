{"sha": "e3419f9c45476f27e1c89edff5ab557039cdd384", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNDE5ZjljNDU0NzZmMjdlMWM4OWVkZmY1YWI1NTcwMzljZGQzODQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-23T05:42:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-24T01:38:59Z"}, "message": "rt: Memory regions are never synchronized now", "tree": {"sha": "333b29e09d5b7384616541066bd907d56a858c7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/333b29e09d5b7384616541066bd907d56a858c7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3419f9c45476f27e1c89edff5ab557039cdd384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3419f9c45476f27e1c89edff5ab557039cdd384", "html_url": "https://github.com/rust-lang/rust/commit/e3419f9c45476f27e1c89edff5ab557039cdd384", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3419f9c45476f27e1c89edff5ab557039cdd384/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a1baef4f57b4ac8558a65b7bd8dc787ebf54840", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a1baef4f57b4ac8558a65b7bd8dc787ebf54840", "html_url": "https://github.com/rust-lang/rust/commit/0a1baef4f57b4ac8558a65b7bd8dc787ebf54840"}], "stats": {"total": 41, "additions": 10, "deletions": 31}, "files": [{"sha": "aa8c5dd46743e25ed9e85a8d13d760c4a27366b7", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e3419f9c45476f27e1c89edff5ab557039cdd384/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3419f9c45476f27e1c89edff5ab557039cdd384/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=e3419f9c45476f27e1c89edff5ab557039cdd384", "patch": "@@ -40,12 +40,10 @@ impl LocalHeap {\n     #[fixed_stack_segment] #[inline(never)]\n     pub fn new() -> LocalHeap {\n         unsafe {\n-            // Don't need synchronization for the single-threaded local heap\n-            let synchronized = false as uintptr_t;\n             // XXX: These usually come from the environment\n             let detailed_leaks = false as uintptr_t;\n             let poison_on_free = false as uintptr_t;\n-            let region = rust_new_memory_region(synchronized, detailed_leaks, poison_on_free);\n+            let region = rust_new_memory_region(detailed_leaks, poison_on_free);\n             assert!(region.is_not_null());\n             let boxed = rust_new_boxed_region(region, poison_on_free);\n             assert!(boxed.is_not_null());\n@@ -109,8 +107,7 @@ pub fn live_allocs() -> *raw::Box<()> {\n \n extern {\n     #[fast_ffi]\n-    fn rust_new_memory_region(synchronized: uintptr_t,\n-                               detailed_leaks: uintptr_t,\n+    fn rust_new_memory_region(detailed_leaks: uintptr_t,\n                                poison_on_free: uintptr_t) -> *MemoryRegion;\n     #[fast_ffi]\n     fn rust_delete_memory_region(region: *MemoryRegion);"}, {"sha": "e75df3db074e3df2e2f969f7101b3cee664ff0ac", "filename": "src/rt/memory_region.cpp", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e3419f9c45476f27e1c89edff5ab557039cdd384/src%2Frt%2Fmemory_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e3419f9c45476f27e1c89edff5ab557039cdd384/src%2Frt%2Fmemory_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.cpp?ref=e3419f9c45476f27e1c89edff5ab557039cdd384", "patch": "@@ -42,30 +42,25 @@ inline void memory_region::maybe_print_backtrace(const alloc_header *header) con\n #   endif\n }\n \n-memory_region::memory_region(bool synchronized,\n-                             bool detailed_leaks,\n+memory_region::memory_region(bool detailed_leaks,\n                              bool poison_on_free) :\n     _parent(NULL), _live_allocations(0),\n     _detailed_leaks(detailed_leaks),\n-    _poison_on_free(poison_on_free),\n-    _synchronized(synchronized) {\n+    _poison_on_free(poison_on_free) {\n }\n \n memory_region::memory_region(memory_region *parent) :\n     _parent(parent), _live_allocations(0),\n     _detailed_leaks(parent->_detailed_leaks),\n-    _poison_on_free(parent->_poison_on_free),\n-    _synchronized(parent->_synchronized) {\n+    _poison_on_free(parent->_poison_on_free) {\n }\n \n void memory_region::add_alloc() {\n-    //_live_allocations++;\n-    sync::increment(_live_allocations);\n+    _live_allocations++;\n }\n \n void memory_region::dec_alloc() {\n-    //_live_allocations--;\n-    sync::decrement(_live_allocations);\n+    _live_allocations--;\n }\n \n void memory_region::free(void *mem) {\n@@ -112,7 +107,6 @@ memory_region::realloc(void *mem, size_t orig_size) {\n #   endif\n \n #   if RUSTRT_TRACK_ALLOCATIONS >= 2\n-    if (_synchronized) { _lock.lock(); }\n     if (_allocation_list[newMem->index] != alloc) {\n         printf(\"at index %d, found %p, expected %p\\n\",\n                alloc->index, _allocation_list[alloc->index], alloc);\n@@ -125,7 +119,6 @@ memory_region::realloc(void *mem, size_t orig_size) {\n         // printf(\"realloc: stored %p at index %d, replacing %p\\n\",\n         //        newMem, index, mem);\n     }\n-    if (_synchronized) { _lock.unlock(); }\n #   endif\n \n     return get_data(newMem);\n@@ -160,9 +153,7 @@ memory_region::malloc(size_t size, const char *tag) {\n }\n \n memory_region::~memory_region() {\n-    if (_synchronized) { _lock.lock(); }\n     if (_live_allocations == 0 && !_detailed_leaks) {\n-        if (_synchronized) { _lock.unlock(); }\n         return;\n     }\n     char msg[128];\n@@ -193,7 +184,6 @@ memory_region::~memory_region() {\n         fprintf(stderr, \"%s\\n\", msg);\n         assert(false);\n     }\n-    if (_synchronized) { _lock.unlock(); }\n }\n \n void\n@@ -204,7 +194,6 @@ memory_region::release_alloc(void *mem) {\n #   endif\n \n #   if RUSTRT_TRACK_ALLOCATIONS >= 2\n-    if (_synchronized) { _lock.lock(); }\n     if (((size_t) alloc->index) >= _allocation_list.size()) {\n         printf(\"free: ptr 0x%\" PRIxPTR \" (%s) index %d is beyond allocation_list of size %zu\\n\",\n                (uintptr_t) get_data(alloc), alloc->tag, alloc->index, _allocation_list.size());\n@@ -222,7 +211,6 @@ memory_region::release_alloc(void *mem) {\n         _allocation_list[alloc->index] = NULL;\n         alloc->index = -1;\n     }\n-    if (_synchronized) { _lock.unlock(); }\n #   endif\n \n     dec_alloc();\n@@ -236,9 +224,7 @@ memory_region::claim_alloc(void *mem) {\n #   endif\n \n #   if RUSTRT_TRACK_ALLOCATIONS >= 2\n-    if (_synchronized) { _lock.lock(); }\n     alloc->index = _allocation_list.append(alloc);\n-    if (_synchronized) { _lock.unlock(); }\n #   endif\n \n #   if RUSTRT_TRACK_ALLOCATIONS >= 3"}, {"sha": "ace463ede2187eb4c5527bd049c14f9b5fc37e00", "filename": "src/rt/memory_region.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3419f9c45476f27e1c89edff5ab557039cdd384/src%2Frt%2Fmemory_region.h", "raw_url": "https://github.com/rust-lang/rust/raw/e3419f9c45476f27e1c89edff5ab557039cdd384/src%2Frt%2Fmemory_region.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.h?ref=e3419f9c45476f27e1c89edff5ab557039cdd384", "patch": "@@ -59,7 +59,6 @@ class memory_region {\n     array_list<alloc_header *> _allocation_list;\n     const bool _detailed_leaks;\n     const bool _poison_on_free;\n-    const bool _synchronized;\n     lock_and_signal _lock;\n \n     void add_alloc();\n@@ -77,8 +76,7 @@ class memory_region {\n     memory_region& operator=(const memory_region& rhs);\n \n public:\n-    memory_region(bool synchronized,\n-                  bool detailed_leaks, bool poison_on_free);\n+    memory_region(bool detailed_leaks, bool poison_on_free);\n     memory_region(memory_region *parent);\n     void *malloc(size_t size, const char *tag);\n     void *realloc(void *mem, size_t size);"}, {"sha": "784693755c540a6226776e26ca2eb9d58cb681f9", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3419f9c45476f27e1c89edff5ab557039cdd384/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e3419f9c45476f27e1c89edff5ab557039cdd384/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=e3419f9c45476f27e1c89edff5ab557039cdd384", "patch": "@@ -528,11 +528,9 @@ rust_initialize_rt_tls_key() {\n }\n \n extern \"C\" CDECL memory_region*\n-rust_new_memory_region(uintptr_t synchronized,\n-                       uintptr_t detailed_leaks,\n+rust_new_memory_region(uintptr_t detailed_leaks,\n                        uintptr_t poison_on_free) {\n-    return new memory_region((bool)synchronized,\n-                             (bool)detailed_leaks,\n+    return new memory_region((bool)detailed_leaks,\n                              (bool)poison_on_free);\n }\n "}]}