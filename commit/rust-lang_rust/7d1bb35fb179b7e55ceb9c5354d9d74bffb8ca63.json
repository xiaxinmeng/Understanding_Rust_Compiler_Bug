{"sha": "7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMWJiMzVmYjE3OWI3ZTU1Y2ViOWM1MzU0ZDlkNzRiZmZiOGNhNjM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-03T15:03:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-03T15:03:29Z"}, "message": "Merge #1950\n\n1950: Fix parsing of block expressions in \"forbid_structs\" contexts. r=kjeremy a=goffrie\n\nForbidding block expressions entirely is too strict; instead, we should only\r\nforbid them in contexts where we are parsing an optional RHS (i.e. the RHS of a\r\nrange expression).\r\n\r\nFixes #1773.\n\nCo-authored-by: Geoffry Song <goffrie@gmail.com>", "tree": {"sha": "9a6b2a477a371499f7a9012b26bf639acd801cb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a6b2a477a371499f7a9012b26bf639acd801cb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdlg3BCRBK7hj4Ov3rIwAAdHIIAFYBve6x0xifJZn+nT1BXegF\nHs329bpvCiPF5hptIg+IWfoQ2Pmd+Mc9Kxpa2lGgNcZARm3JohSHZyMI2vCgvObd\n/WdLOYBB8tv7H1lWLPXpzR7wUhquPjPHECAOVinc+d7dBE5k0CPISXkW/hXUcM9n\nRDDc2nxB2K9tluHY9eDQFn0kYiEIdU21xnyLIEUqKNnH1GQqNT2a1vhoaauz3jPo\nQzKQRSTmlhH4ZYXFmg7EfU8hKo1ynpgXLkuYdvy+ZtSBQavgbonrJAVoXhvstUCK\nbL48I7B4jYRqcuCXxehP/fqp/e+CdO6nOdncYn4M2QuCh0OWci3ebpxeLyi/3mQ=\n=A1h6\n-----END PGP SIGNATURE-----\n", "payload": "tree 9a6b2a477a371499f7a9012b26bf639acd801cb6\nparent e1c367595139f109fb6f53811bed7d67a384793e\nparent 9638adaa40d22adcf9b4002d95a13977c0f1436f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1570115009 +0000\ncommitter GitHub <noreply@github.com> 1570115009 +0000\n\nMerge #1950\n\n1950: Fix parsing of block expressions in \"forbid_structs\" contexts. r=kjeremy a=goffrie\n\nForbidding block expressions entirely is too strict; instead, we should only\r\nforbid them in contexts where we are parsing an optional RHS (i.e. the RHS of a\r\nrange expression).\r\n\r\nFixes #1773.\n\nCo-authored-by: Geoffry Song <goffrie@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63", "html_url": "https://github.com/rust-lang/rust/commit/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1c367595139f109fb6f53811bed7d67a384793e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c367595139f109fb6f53811bed7d67a384793e", "html_url": "https://github.com/rust-lang/rust/commit/e1c367595139f109fb6f53811bed7d67a384793e"}, {"sha": "9638adaa40d22adcf9b4002d95a13977c0f1436f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9638adaa40d22adcf9b4002d95a13977c0f1436f", "html_url": "https://github.com/rust-lang/rust/commit/9638adaa40d22adcf9b4002d95a13977c0f1436f"}], "stats": {"total": 296, "additions": 242, "deletions": 54}, "files": [{"sha": "74b23e2f7ccf41164f4f3560ff779f501563a729", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63", "patch": "@@ -335,7 +335,13 @@ fn lhs(p: &mut Parser, r: Restrictions) -> Option<(CompletedMarker, BlockLike)>\n             // }\n             //\n             let (lhs, blocklike) = atom::atom_expr(p, r)?;\n-            return Some(postfix_expr(p, lhs, blocklike, !(r.prefer_stmt && blocklike.is_block())));\n+            return Some(postfix_expr(\n+                p,\n+                lhs,\n+                blocklike,\n+                !(r.prefer_stmt && blocklike.is_block()),\n+                r.forbid_structs,\n+            ));\n         }\n     };\n     expr_bp(p, r, 255);\n@@ -350,6 +356,7 @@ fn postfix_expr(\n     // `while true {break}; ();`\n     mut block_like: BlockLike,\n     mut allow_calls: bool,\n+    forbid_structs: bool,\n ) -> (CompletedMarker, BlockLike) {\n     loop {\n         lhs = match p.current() {\n@@ -363,7 +370,7 @@ fn postfix_expr(\n             // }\n             T!['('] if allow_calls => call_expr(p, lhs),\n             T!['['] if allow_calls => index_expr(p, lhs),\n-            T![.] => match postfix_dot_expr(p, lhs) {\n+            T![.] => match postfix_dot_expr(p, lhs, forbid_structs) {\n                 Ok(it) => it,\n                 Err(it) => {\n                     lhs = it;\n@@ -382,6 +389,7 @@ fn postfix_expr(\n     fn postfix_dot_expr(\n         p: &mut Parser,\n         lhs: CompletedMarker,\n+        forbid_structs: bool,\n     ) -> Result<CompletedMarker, CompletedMarker> {\n         assert!(p.at(T![.]));\n         if p.nth(1) == IDENT && (p.nth(2) == T!['('] || p.nth_at(2, T![::])) {\n@@ -402,10 +410,17 @@ fn postfix_expr(\n         }\n \n         // test postfix_range\n-        // fn foo() { let x = 1..; }\n-        for &(op, la) in [(T![..=], 3), (T![..], 2)].iter() {\n+        // fn foo() {\n+        //     let x = 1..;\n+        //     match 1.. { _ => () };\n+        //     match a.b()..S { _ => () };\n+        // }\n+        for &(op, la) in &[(T![..=], 3), (T![..], 2)] {\n             if p.at(op) {\n-                return if EXPR_FIRST.contains(p.nth(la)) {\n+                let next_token = p.nth(la);\n+                let has_trailing_expression =\n+                    !(forbid_structs && next_token == T!['{']) && EXPR_FIRST.contains(next_token);\n+                return if has_trailing_expression {\n                     Err(lhs)\n                 } else {\n                     let m = lhs.precede(p);"}, {"sha": "7454005c4e264d7bdd529691639a8fe30163a1e5", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63", "patch": "@@ -121,11 +121,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n             //        break;\n             //    }\n             // }\n-            if r.forbid_structs {\n-                return None;\n-            } else {\n-                block_expr(p, None)\n-            }\n+            block_expr(p, None)\n         }\n         T![return] => return_expr(p),\n         T![continue] => continue_expr(p),\n@@ -261,6 +257,7 @@ fn lambda_expr(p: &mut Parser) -> CompletedMarker {\n //     if true {} else {};\n //     if true {} else if false {} else {};\n //     if S {};\n+//     if { true } { } else { };\n // }\n fn if_expr(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(T![if]));\n@@ -309,6 +306,7 @@ fn loop_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n // fn foo() {\n //     while true {};\n //     while let Some(x) = it.next() {};\n+//     while { true } {};\n // }\n fn while_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n     assert!(p.at(T![while]));\n@@ -356,6 +354,8 @@ fn cond(p: &mut Parser) {\n // fn foo() {\n //     match () { };\n //     match S {};\n+//     match { } { _ => () };\n+//     match { S {} } {};\n // }\n fn match_expr(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(T![match]));"}, {"sha": "17477a696dbe622218fa1ee0f766e7d16f0d84b2", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63", "patch": "@@ -1,5 +1,5 @@\n // Stores definitions which must be used in multiple places\n-// See `cargo gen-syntax` (defined in crates/tools/src/main.rs)\n+// See `cargo gen-syntax` (defined in crates/ra_tools/src/main.rs)\n Grammar(\n     punct: [\n         (\";\", \"SEMI\"),"}, {"sha": "2f818816025ece367ae642057ddc9840053a055c", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0031_while_expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0031_while_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0031_while_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0031_while_expr.rs?ref=7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63", "patch": "@@ -1,4 +1,5 @@\n fn foo() {\n     while true {};\n     while let Some(x) = it.next() {};\n+    while { true } {};\n }"}, {"sha": "a6e14a1141a0e1919522cec7b685b61b087fa9d0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0031_while_expr.txt", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0031_while_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0031_while_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0031_while_expr.txt?ref=7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63", "patch": "@@ -1,5 +1,5 @@\n-SOURCE_FILE@[0; 70)\n-  FN_DEF@[0; 69)\n+SOURCE_FILE@[0; 93)\n+  FN_DEF@[0; 92)\n     FN_KW@[0; 2) \"fn\"\n     WHITESPACE@[2; 3) \" \"\n     NAME@[3; 6)\n@@ -8,8 +8,8 @@ SOURCE_FILE@[0; 70)\n       L_PAREN@[6; 7) \"(\"\n       R_PAREN@[7; 8) \")\"\n     WHITESPACE@[8; 9) \" \"\n-    BLOCK_EXPR@[9; 69)\n-      BLOCK@[9; 69)\n+    BLOCK_EXPR@[9; 92)\n+      BLOCK@[9; 92)\n         L_CURLY@[9; 10) \"{\"\n         WHITESPACE@[10; 15) \"\\n    \"\n         EXPR_STMT@[15; 29)\n@@ -64,6 +64,26 @@ SOURCE_FILE@[0; 70)\n                 L_CURLY@[64; 65) \"{\"\n                 R_CURLY@[65; 66) \"}\"\n           SEMI@[66; 67) \";\"\n-        WHITESPACE@[67; 68) \"\\n\"\n-        R_CURLY@[68; 69) \"}\"\n-  WHITESPACE@[69; 70) \"\\n\"\n+        WHITESPACE@[67; 72) \"\\n    \"\n+        EXPR_STMT@[72; 90)\n+          WHILE_EXPR@[72; 89)\n+            WHILE_KW@[72; 77) \"while\"\n+            WHITESPACE@[77; 78) \" \"\n+            CONDITION@[78; 86)\n+              BLOCK_EXPR@[78; 86)\n+                BLOCK@[78; 86)\n+                  L_CURLY@[78; 79) \"{\"\n+                  WHITESPACE@[79; 80) \" \"\n+                  LITERAL@[80; 84)\n+                    TRUE_KW@[80; 84) \"true\"\n+                  WHITESPACE@[84; 85) \" \"\n+                  R_CURLY@[85; 86) \"}\"\n+            WHITESPACE@[86; 87) \" \"\n+            BLOCK_EXPR@[87; 89)\n+              BLOCK@[87; 89)\n+                L_CURLY@[87; 88) \"{\"\n+                R_CURLY@[88; 89) \"}\"\n+          SEMI@[89; 90) \";\"\n+        WHITESPACE@[90; 91) \"\\n\"\n+        R_CURLY@[91; 92) \"}\"\n+  WHITESPACE@[92; 93) \"\\n\""}, {"sha": "40f227ba3a46a486c6a4945563797539efcd8af8", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0064_if_expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0064_if_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0064_if_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0064_if_expr.rs?ref=7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63", "patch": "@@ -3,4 +3,5 @@ fn foo() {\n     if true {} else {};\n     if true {} else if false {} else {};\n     if S {};\n+    if { true } { } else { };\n }"}, {"sha": "2ace3c8ee30ff248fbb7989d40beed88e8a05de9", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0064_if_expr.txt", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0064_if_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0064_if_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0064_if_expr.txt?ref=7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63", "patch": "@@ -1,5 +1,5 @@\n-SOURCE_FILE@[0; 107)\n-  FN_DEF@[0; 106)\n+SOURCE_FILE@[0; 137)\n+  FN_DEF@[0; 136)\n     FN_KW@[0; 2) \"fn\"\n     WHITESPACE@[2; 3) \" \"\n     NAME@[3; 6)\n@@ -8,8 +8,8 @@ SOURCE_FILE@[0; 107)\n       L_PAREN@[6; 7) \"(\"\n       R_PAREN@[7; 8) \")\"\n     WHITESPACE@[8; 9) \" \"\n-    BLOCK_EXPR@[9; 106)\n-      BLOCK@[9; 106)\n+    BLOCK_EXPR@[9; 136)\n+      BLOCK@[9; 136)\n         L_CURLY@[9; 10) \"{\"\n         WHITESPACE@[10; 15) \"\\n    \"\n         EXPR_STMT@[15; 26)\n@@ -98,6 +98,35 @@ SOURCE_FILE@[0; 107)\n                 L_CURLY@[101; 102) \"{\"\n                 R_CURLY@[102; 103) \"}\"\n           SEMI@[103; 104) \";\"\n-        WHITESPACE@[104; 105) \"\\n\"\n-        R_CURLY@[105; 106) \"}\"\n-  WHITESPACE@[106; 107) \"\\n\"\n+        WHITESPACE@[104; 109) \"\\n    \"\n+        EXPR_STMT@[109; 134)\n+          IF_EXPR@[109; 133)\n+            IF_KW@[109; 111) \"if\"\n+            WHITESPACE@[111; 112) \" \"\n+            CONDITION@[112; 120)\n+              BLOCK_EXPR@[112; 120)\n+                BLOCK@[112; 120)\n+                  L_CURLY@[112; 113) \"{\"\n+                  WHITESPACE@[113; 114) \" \"\n+                  LITERAL@[114; 118)\n+                    TRUE_KW@[114; 118) \"true\"\n+                  WHITESPACE@[118; 119) \" \"\n+                  R_CURLY@[119; 120) \"}\"\n+            WHITESPACE@[120; 121) \" \"\n+            BLOCK_EXPR@[121; 124)\n+              BLOCK@[121; 124)\n+                L_CURLY@[121; 122) \"{\"\n+                WHITESPACE@[122; 123) \" \"\n+                R_CURLY@[123; 124) \"}\"\n+            WHITESPACE@[124; 125) \" \"\n+            ELSE_KW@[125; 129) \"else\"\n+            WHITESPACE@[129; 130) \" \"\n+            BLOCK_EXPR@[130; 133)\n+              BLOCK@[130; 133)\n+                L_CURLY@[130; 131) \"{\"\n+                WHITESPACE@[131; 132) \" \"\n+                R_CURLY@[132; 133) \"}\"\n+          SEMI@[133; 134) \";\"\n+        WHITESPACE@[134; 135) \"\\n\"\n+        R_CURLY@[135; 136) \"}\"\n+  WHITESPACE@[136; 137) \"\\n\""}, {"sha": "c4021dc104878e00a6164b326ef1c3673e6e9948", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0071_match_expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0071_match_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0071_match_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0071_match_expr.rs?ref=7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63", "patch": "@@ -1,4 +1,6 @@\n fn foo() {\n     match () { };\n     match S {};\n+    match { } { _ => () };\n+    match { S {} } {};\n }"}, {"sha": "0af668056a98a3227daa9e08dfe704fd4f772d2b", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0071_match_expr.txt", "status": "modified", "additions": 58, "deletions": 7, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0071_match_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0071_match_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0071_match_expr.txt?ref=7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63", "patch": "@@ -1,5 +1,5 @@\n-SOURCE_FILE@[0; 47)\n-  FN_DEF@[0; 46)\n+SOURCE_FILE@[0; 97)\n+  FN_DEF@[0; 96)\n     FN_KW@[0; 2) \"fn\"\n     WHITESPACE@[2; 3) \" \"\n     NAME@[3; 6)\n@@ -8,8 +8,8 @@ SOURCE_FILE@[0; 47)\n       L_PAREN@[6; 7) \"(\"\n       R_PAREN@[7; 8) \")\"\n     WHITESPACE@[8; 9) \" \"\n-    BLOCK_EXPR@[9; 46)\n-      BLOCK@[9; 46)\n+    BLOCK_EXPR@[9; 96)\n+      BLOCK@[9; 96)\n         L_CURLY@[9; 10) \"{\"\n         WHITESPACE@[10; 15) \"\\n    \"\n         EXPR_STMT@[15; 28)\n@@ -40,6 +40,57 @@ SOURCE_FILE@[0; 47)\n               L_CURLY@[41; 42) \"{\"\n               R_CURLY@[42; 43) \"}\"\n           SEMI@[43; 44) \";\"\n-        WHITESPACE@[44; 45) \"\\n\"\n-        R_CURLY@[45; 46) \"}\"\n-  WHITESPACE@[46; 47) \"\\n\"\n+        WHITESPACE@[44; 49) \"\\n    \"\n+        EXPR_STMT@[49; 71)\n+          MATCH_EXPR@[49; 70)\n+            MATCH_KW@[49; 54) \"match\"\n+            WHITESPACE@[54; 55) \" \"\n+            BLOCK_EXPR@[55; 58)\n+              BLOCK@[55; 58)\n+                L_CURLY@[55; 56) \"{\"\n+                WHITESPACE@[56; 57) \" \"\n+                R_CURLY@[57; 58) \"}\"\n+            WHITESPACE@[58; 59) \" \"\n+            MATCH_ARM_LIST@[59; 70)\n+              L_CURLY@[59; 60) \"{\"\n+              WHITESPACE@[60; 61) \" \"\n+              MATCH_ARM@[61; 68)\n+                PLACEHOLDER_PAT@[61; 62)\n+                  UNDERSCORE@[61; 62) \"_\"\n+                WHITESPACE@[62; 63) \" \"\n+                FAT_ARROW@[63; 65) \"=>\"\n+                WHITESPACE@[65; 66) \" \"\n+                TUPLE_EXPR@[66; 68)\n+                  L_PAREN@[66; 67) \"(\"\n+                  R_PAREN@[67; 68) \")\"\n+              WHITESPACE@[68; 69) \" \"\n+              R_CURLY@[69; 70) \"}\"\n+          SEMI@[70; 71) \";\"\n+        WHITESPACE@[71; 76) \"\\n    \"\n+        EXPR_STMT@[76; 94)\n+          MATCH_EXPR@[76; 93)\n+            MATCH_KW@[76; 81) \"match\"\n+            WHITESPACE@[81; 82) \" \"\n+            BLOCK_EXPR@[82; 90)\n+              BLOCK@[82; 90)\n+                L_CURLY@[82; 83) \"{\"\n+                WHITESPACE@[83; 84) \" \"\n+                RECORD_LIT@[84; 88)\n+                  PATH@[84; 85)\n+                    PATH_SEGMENT@[84; 85)\n+                      NAME_REF@[84; 85)\n+                        IDENT@[84; 85) \"S\"\n+                  WHITESPACE@[85; 86) \" \"\n+                  RECORD_FIELD_LIST@[86; 88)\n+                    L_CURLY@[86; 87) \"{\"\n+                    R_CURLY@[87; 88) \"}\"\n+                WHITESPACE@[88; 89) \" \"\n+                R_CURLY@[89; 90) \"}\"\n+            WHITESPACE@[90; 91) \" \"\n+            MATCH_ARM_LIST@[91; 93)\n+              L_CURLY@[91; 92) \"{\"\n+              R_CURLY@[92; 93) \"}\"\n+          SEMI@[93; 94) \";\"\n+        WHITESPACE@[94; 95) \"\\n\"\n+        R_CURLY@[95; 96) \"}\"\n+  WHITESPACE@[96; 97) \"\\n\""}, {"sha": "e7b7cfc6b1af90c8f04e0c2cf04af472d2b243fb", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0080_postfix_range.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0080_postfix_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0080_postfix_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0080_postfix_range.rs?ref=7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63", "patch": "@@ -1 +1,5 @@\n-fn foo() { let x = 1..; }\n+fn foo() {\n+    let x = 1..;\n+    match 1.. { _ => () };\n+    match a.b()..S { _ => () };\n+}"}, {"sha": "9f8a6b0f6e962827ad7004699009c34394676510", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0080_postfix_range.txt", "status": "modified", "additions": 86, "deletions": 21, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0080_postfix_range.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0080_postfix_range.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0080_postfix_range.txt?ref=7d1bb35fb179b7e55ceb9c5354d9d74bffb8ca63", "patch": "@@ -1,5 +1,5 @@\n-SOURCE_FILE@[0; 26)\n-  FN_DEF@[0; 25)\n+SOURCE_FILE@[0; 89)\n+  FN_DEF@[0; 88)\n     FN_KW@[0; 2) \"fn\"\n     WHITESPACE@[2; 3) \" \"\n     NAME@[3; 6)\n@@ -8,24 +8,89 @@ SOURCE_FILE@[0; 26)\n       L_PAREN@[6; 7) \"(\"\n       R_PAREN@[7; 8) \")\"\n     WHITESPACE@[8; 9) \" \"\n-    BLOCK_EXPR@[9; 25)\n-      BLOCK@[9; 25)\n+    BLOCK_EXPR@[9; 88)\n+      BLOCK@[9; 88)\n         L_CURLY@[9; 10) \"{\"\n-        WHITESPACE@[10; 11) \" \"\n-        LET_STMT@[11; 23)\n-          LET_KW@[11; 14) \"let\"\n-          WHITESPACE@[14; 15) \" \"\n-          BIND_PAT@[15; 16)\n-            NAME@[15; 16)\n-              IDENT@[15; 16) \"x\"\n-          WHITESPACE@[16; 17) \" \"\n-          EQ@[17; 18) \"=\"\n+        WHITESPACE@[10; 15) \"\\n    \"\n+        LET_STMT@[15; 27)\n+          LET_KW@[15; 18) \"let\"\n           WHITESPACE@[18; 19) \" \"\n-          RANGE_EXPR@[19; 22)\n-            LITERAL@[19; 20)\n-              INT_NUMBER@[19; 20) \"1\"\n-            DOTDOT@[20; 22) \"..\"\n-          SEMI@[22; 23) \";\"\n-        WHITESPACE@[23; 24) \" \"\n-        R_CURLY@[24; 25) \"}\"\n-  WHITESPACE@[25; 26) \"\\n\"\n+          BIND_PAT@[19; 20)\n+            NAME@[19; 20)\n+              IDENT@[19; 20) \"x\"\n+          WHITESPACE@[20; 21) \" \"\n+          EQ@[21; 22) \"=\"\n+          WHITESPACE@[22; 23) \" \"\n+          RANGE_EXPR@[23; 26)\n+            LITERAL@[23; 24)\n+              INT_NUMBER@[23; 24) \"1\"\n+            DOTDOT@[24; 26) \"..\"\n+          SEMI@[26; 27) \";\"\n+        WHITESPACE@[27; 32) \"\\n    \"\n+        EXPR_STMT@[32; 54)\n+          MATCH_EXPR@[32; 53)\n+            MATCH_KW@[32; 37) \"match\"\n+            WHITESPACE@[37; 38) \" \"\n+            RANGE_EXPR@[38; 41)\n+              LITERAL@[38; 39)\n+                INT_NUMBER@[38; 39) \"1\"\n+              DOTDOT@[39; 41) \"..\"\n+            WHITESPACE@[41; 42) \" \"\n+            MATCH_ARM_LIST@[42; 53)\n+              L_CURLY@[42; 43) \"{\"\n+              WHITESPACE@[43; 44) \" \"\n+              MATCH_ARM@[44; 51)\n+                PLACEHOLDER_PAT@[44; 45)\n+                  UNDERSCORE@[44; 45) \"_\"\n+                WHITESPACE@[45; 46) \" \"\n+                FAT_ARROW@[46; 48) \"=>\"\n+                WHITESPACE@[48; 49) \" \"\n+                TUPLE_EXPR@[49; 51)\n+                  L_PAREN@[49; 50) \"(\"\n+                  R_PAREN@[50; 51) \")\"\n+              WHITESPACE@[51; 52) \" \"\n+              R_CURLY@[52; 53) \"}\"\n+          SEMI@[53; 54) \";\"\n+        WHITESPACE@[54; 59) \"\\n    \"\n+        EXPR_STMT@[59; 86)\n+          MATCH_EXPR@[59; 85)\n+            MATCH_KW@[59; 64) \"match\"\n+            WHITESPACE@[64; 65) \" \"\n+            RANGE_EXPR@[65; 73)\n+              METHOD_CALL_EXPR@[65; 70)\n+                PATH_EXPR@[65; 66)\n+                  PATH@[65; 66)\n+                    PATH_SEGMENT@[65; 66)\n+                      NAME_REF@[65; 66)\n+                        IDENT@[65; 66) \"a\"\n+                DOT@[66; 67) \".\"\n+                NAME_REF@[67; 68)\n+                  IDENT@[67; 68) \"b\"\n+                ARG_LIST@[68; 70)\n+                  L_PAREN@[68; 69) \"(\"\n+                  R_PAREN@[69; 70) \")\"\n+              DOTDOT@[70; 72) \"..\"\n+              PATH_EXPR@[72; 73)\n+                PATH@[72; 73)\n+                  PATH_SEGMENT@[72; 73)\n+                    NAME_REF@[72; 73)\n+                      IDENT@[72; 73) \"S\"\n+            WHITESPACE@[73; 74) \" \"\n+            MATCH_ARM_LIST@[74; 85)\n+              L_CURLY@[74; 75) \"{\"\n+              WHITESPACE@[75; 76) \" \"\n+              MATCH_ARM@[76; 83)\n+                PLACEHOLDER_PAT@[76; 77)\n+                  UNDERSCORE@[76; 77) \"_\"\n+                WHITESPACE@[77; 78) \" \"\n+                FAT_ARROW@[78; 80) \"=>\"\n+                WHITESPACE@[80; 81) \" \"\n+                TUPLE_EXPR@[81; 83)\n+                  L_PAREN@[81; 82) \"(\"\n+                  R_PAREN@[82; 83) \")\"\n+              WHITESPACE@[83; 84) \" \"\n+              R_CURLY@[84; 85) \"}\"\n+          SEMI@[85; 86) \";\"\n+        WHITESPACE@[86; 87) \"\\n\"\n+        R_CURLY@[87; 88) \"}\"\n+  WHITESPACE@[88; 89) \"\\n\""}]}