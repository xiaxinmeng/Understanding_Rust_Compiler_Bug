{"sha": "96c9d225a9667bc5ffcbc1594d44c29b201e999c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YzlkMjI1YTk2NjdiYzVmZmNiYzE1OTRkNDRjMjliMjAxZTk5OWM=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-04T16:50:25Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-12T20:53:14Z"}, "message": "Remove `impl Alloc for &'a System`\n\nThis was relevant to `#[global_allocator]`,\nwhich is now based on `GlobalAlloc` trait instead.", "tree": {"sha": "a0a8573818ac274bd77c70aa937326e436ae9501", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0a8573818ac274bd77c70aa937326e436ae9501"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96c9d225a9667bc5ffcbc1594d44c29b201e999c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96c9d225a9667bc5ffcbc1594d44c29b201e999c", "html_url": "https://github.com/rust-lang/rust/commit/96c9d225a9667bc5ffcbc1594d44c29b201e999c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96c9d225a9667bc5ffcbc1594d44c29b201e999c/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c033f1ff5f29ecac41dee668e373c9fc870f2d43", "url": "https://api.github.com/repos/rust-lang/rust/commits/c033f1ff5f29ecac41dee668e373c9fc870f2d43", "html_url": "https://github.com/rust-lang/rust/commit/c033f1ff5f29ecac41dee668e373c9fc870f2d43"}], "stats": {"total": 141, "additions": 28, "deletions": 113}, "files": [{"sha": "4516664e97c55cad7782b3ea7f03429578bb46d5", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 28, "deletions": 113, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/96c9d225a9667bc5ffcbc1594d44c29b201e999c/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c9d225a9667bc5ffcbc1594d44c29b201e999c/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=96c9d225a9667bc5ffcbc1594d44c29b201e999c", "patch": "@@ -41,7 +41,7 @@ const MIN_ALIGN: usize = 8;\n #[allow(dead_code)]\n const MIN_ALIGN: usize = 16;\n \n-use core::alloc::{Alloc, AllocErr, Layout, Excess, CannotReallocInPlace};\n+use core::alloc::{Alloc, GlobalAlloc, AllocErr, Layout, Void};\n \n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n pub struct System;\n@@ -50,65 +50,62 @@ pub struct System;\n unsafe impl Alloc for System {\n     #[inline]\n     unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n-        Alloc::alloc(&mut &*self, layout)\n+        GlobalAlloc::alloc(self, layout).into()\n     }\n \n     #[inline]\n-    unsafe fn alloc_zeroed(&mut self, layout: Layout)\n-        -> Result<*mut u8, AllocErr>\n-    {\n-        Alloc::alloc_zeroed(&mut &*self, layout)\n+    unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n+        GlobalAlloc::alloc_zeroed(self, layout).into()\n     }\n \n     #[inline]\n     unsafe fn dealloc(&mut self, ptr: *mut u8, layout: Layout) {\n-        Alloc::dealloc(&mut &*self, ptr, layout)\n+        GlobalAlloc::dealloc(self, ptr as *mut Void, layout)\n     }\n \n     #[inline]\n     unsafe fn realloc(&mut self,\n                       ptr: *mut u8,\n                       old_layout: Layout,\n                       new_size: usize) -> Result<*mut u8, AllocErr> {\n-        Alloc::realloc(&mut &*self, ptr, old_layout, new_size)\n+        GlobalAlloc::realloc(self, ptr as *mut Void, old_layout, new_size).into()\n     }\n \n+    #[inline]\n     fn oom(&mut self) -> ! {\n-        Alloc::oom(&mut &*self)\n+        ::oom()\n     }\n+}\n \n+#[cfg(stage0)]\n+#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+unsafe impl<'a> Alloc for &'a System {\n     #[inline]\n-    fn usable_size(&self, layout: &Layout) -> (usize, usize) {\n-        Alloc::usable_size(&mut &*self, layout)\n+    unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n+        GlobalAlloc::alloc(*self, layout).into()\n     }\n \n     #[inline]\n-    unsafe fn alloc_excess(&mut self, layout: Layout) -> Result<Excess, AllocErr> {\n-        Alloc::alloc_excess(&mut &*self, layout)\n+    unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n+        GlobalAlloc::alloc_zeroed(*self, layout).into()\n     }\n \n     #[inline]\n-    unsafe fn realloc_excess(&mut self,\n-                             ptr: *mut u8,\n-                             layout: Layout,\n-                             new_size: usize) -> Result<Excess, AllocErr> {\n-        Alloc::realloc_excess(&mut &*self, ptr, layout, new_size)\n+    unsafe fn dealloc(&mut self, ptr: *mut u8, layout: Layout) {\n+        GlobalAlloc::dealloc(*self, ptr as *mut Void, layout)\n     }\n \n     #[inline]\n-    unsafe fn grow_in_place(&mut self,\n-                            ptr: *mut u8,\n-                            layout: Layout,\n-                            new_size: usize) -> Result<(), CannotReallocInPlace> {\n-        Alloc::grow_in_place(&mut &*self, ptr, layout, new_size)\n+    unsafe fn realloc(&mut self,\n+                      ptr: *mut u8,\n+                      old_layout: Layout,\n+                      new_size: usize) -> Result<*mut u8, AllocErr> {\n+        GlobalAlloc::realloc(*self, ptr as *mut Void, old_layout, new_size).into()\n     }\n \n     #[inline]\n-    unsafe fn shrink_in_place(&mut self,\n-                              ptr: *mut u8,\n-                              layout: Layout,\n-                              new_size: usize) -> Result<(), CannotReallocInPlace> {\n-        Alloc::shrink_in_place(&mut &*self, ptr, layout, new_size)\n+    fn oom(&mut self) -> ! {\n+        ::oom()\n     }\n }\n \n@@ -135,33 +132,6 @@ mod realloc_fallback {\n     }\n }\n \n-macro_rules! alloc_methods_based_on_global_alloc {\n-    () => {\n-        #[inline]\n-        unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n-            GlobalAlloc::alloc(*self, layout).into()\n-        }\n-\n-        #[inline]\n-        unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n-            GlobalAlloc::alloc_zeroed(*self, layout).into()\n-        }\n-\n-        #[inline]\n-        unsafe fn dealloc(&mut self, ptr: *mut u8, layout: Layout) {\n-            GlobalAlloc::dealloc(*self, ptr as *mut Void, layout)\n-        }\n-\n-        #[inline]\n-        unsafe fn realloc(&mut self,\n-                          ptr: *mut u8,\n-                          old_layout: Layout,\n-                          new_size: usize) -> Result<*mut u8, AllocErr> {\n-            GlobalAlloc::realloc(*self, ptr as *mut Void, old_layout, new_size).into()\n-        }\n-    }\n-}\n-\n #[cfg(any(unix, target_os = \"cloudabi\", target_os = \"redox\"))]\n mod platform {\n     extern crate libc;\n@@ -170,7 +140,7 @@ mod platform {\n \n     use MIN_ALIGN;\n     use System;\n-    use core::alloc::{GlobalAlloc, Alloc, AllocErr, Layout, Void};\n+    use core::alloc::{GlobalAlloc, Layout, Void};\n \n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     unsafe impl GlobalAlloc for System {\n@@ -219,15 +189,6 @@ mod platform {\n         }\n     }\n \n-    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-    unsafe impl<'a> Alloc for &'a System {\n-        alloc_methods_based_on_global_alloc!();\n-\n-        fn oom(&mut self) -> ! {\n-            ::oom()\n-        }\n-    }\n-\n     #[cfg(any(target_os = \"android\", target_os = \"redox\", target_os = \"solaris\"))]\n     #[inline]\n     unsafe fn aligned_malloc(layout: &Layout) -> *mut Void {\n@@ -270,7 +231,7 @@ mod platform {\n mod platform {\n     use MIN_ALIGN;\n     use System;\n-    use core::alloc::{GlobalAlloc, Alloc, Void, AllocErr, Layout, CannotReallocInPlace};\n+    use core::alloc::{GlobalAlloc, Void, Layout};\n \n     type LPVOID = *mut u8;\n     type HANDLE = LPVOID;\n@@ -353,47 +314,6 @@ mod platform {\n             }\n         }\n     }\n-\n-    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-    unsafe impl<'a> Alloc for &'a System {\n-        alloc_methods_based_on_global_alloc!();\n-\n-        #[inline]\n-        unsafe fn grow_in_place(&mut self,\n-                                ptr: *mut u8,\n-                                layout: Layout,\n-                                new_size: usize) -> Result<(), CannotReallocInPlace> {\n-            self.shrink_in_place(ptr, layout, new_size)\n-        }\n-\n-        #[inline]\n-        unsafe fn shrink_in_place(&mut self,\n-                                  ptr: *mut u8,\n-                                  layout: Layout,\n-                                  new_size: usize) -> Result<(), CannotReallocInPlace> {\n-            let new = if layout.align() <= MIN_ALIGN {\n-                HeapReAlloc(GetProcessHeap(),\n-                            HEAP_REALLOC_IN_PLACE_ONLY,\n-                            ptr as LPVOID,\n-                            new_size)\n-            } else {\n-                let header = get_header(ptr);\n-                HeapReAlloc(GetProcessHeap(),\n-                            HEAP_REALLOC_IN_PLACE_ONLY,\n-                            header.0 as LPVOID,\n-                            new_size + layout.align())\n-            };\n-            if new.is_null() {\n-                Err(CannotReallocInPlace)\n-            } else {\n-                Ok(())\n-            }\n-        }\n-\n-        fn oom(&mut self) -> ! {\n-            ::oom()\n-        }\n-    }\n }\n \n // This is an implementation of a global allocator on the wasm32 platform when\n@@ -417,7 +337,7 @@ mod platform {\n mod platform {\n     extern crate dlmalloc;\n \n-    use core::alloc::{GlobalAlloc, Alloc, AllocErr, Layout, Void};\n+    use core::alloc::{GlobalAlloc, Layout, Void};\n     use System;\n \n     // No need for synchronization here as wasm is currently single-threaded\n@@ -445,11 +365,6 @@ mod platform {\n             DLMALLOC.realloc(ptr as *mut u8, layout.size(), layout.align(), new_size) as *mut Void\n         }\n     }\n-\n-    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-    unsafe impl<'a> Alloc for &'a System {\n-        alloc_methods_based_on_global_alloc!();\n-    }\n }\n \n fn oom() -> ! {"}]}