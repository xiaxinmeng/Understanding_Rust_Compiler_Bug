{"sha": "07a72859650254d8ba326e2c9683ae52164cb3b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YTcyODU5NjUwMjU0ZDhiYTMyNmUyYzk2ODNhZTUyMTY0Y2IzYjU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-25T12:31:30Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-25T14:16:42Z"}, "message": "Collect field data for structs/enum variants", "tree": {"sha": "bc652bf0deb9f0d12380081b04585a2beaa97fce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc652bf0deb9f0d12380081b04585a2beaa97fce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07a72859650254d8ba326e2c9683ae52164cb3b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07a72859650254d8ba326e2c9683ae52164cb3b5", "html_url": "https://github.com/rust-lang/rust/commit/07a72859650254d8ba326e2c9683ae52164cb3b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07a72859650254d8ba326e2c9683ae52164cb3b5/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cb7b0f2af9787abe1c73fc3922e9b426a96e0ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb7b0f2af9787abe1c73fc3922e9b426a96e0ef", "html_url": "https://github.com/rust-lang/rust/commit/4cb7b0f2af9787abe1c73fc3922e9b426a96e0ef"}], "stats": {"total": 99, "additions": 87, "deletions": 12}, "files": [{"sha": "b44f59f0b899b21c7f9ff6021b01f8ab90091f7d", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 62, "deletions": 7, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/07a72859650254d8ba326e2c9683ae52164cb3b5/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a72859650254d8ba326e2c9683ae52164cb3b5/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=07a72859650254d8ba326e2c9683ae52164cb3b5", "patch": "@@ -1,10 +1,11 @@\n use std::sync::Arc;\n \n-use ra_syntax::{SmolStr, ast::{self, NameOwner}};\n+use ra_syntax::{SmolStr, ast::{self, NameOwner, StructFlavor}};\n \n use crate::{\n     DefId, Cancelable,\n     db::{HirDatabase},\n+    module::Module,\n     ty::{Ty},\n };\n \n@@ -37,14 +38,18 @@ pub struct StructData {\n }\n \n impl StructData {\n-    pub(crate) fn new(struct_def: ast::StructDef) -> StructData {\n+    pub(crate) fn new(\n+        db: &impl HirDatabase,\n+        module: &Module,\n+        struct_def: ast::StructDef,\n+    ) -> Cancelable<StructData> {\n         let name = struct_def\n             .name()\n             .map(|n| n.text())\n             .unwrap_or(SmolStr::new(\"[error]\"));\n-        let variant_data = VariantData::Unit; // TODO implement this\n+        let variant_data = VariantData::new(db, module, struct_def.flavor())?;\n         let variant_data = Arc::new(variant_data);\n-        StructData { name, variant_data }\n+        Ok(StructData { name, variant_data })\n     }\n \n     pub fn name(&self) -> &SmolStr {\n@@ -81,13 +86,30 @@ pub struct EnumData {\n }\n \n impl EnumData {\n-    pub(crate) fn new(enum_def: ast::EnumDef) -> Self {\n+    pub(crate) fn new(\n+        db: &impl HirDatabase,\n+        module: &Module,\n+        enum_def: ast::EnumDef,\n+    ) -> Cancelable<Self> {\n         let name = enum_def\n             .name()\n             .map(|n| n.text())\n             .unwrap_or(SmolStr::new(\"[error]\"));\n-        let variants = Vec::new(); // TODO implement this\n-        EnumData { name, variants }\n+        let variants = if let Some(evl) = enum_def.variant_list() {\n+            evl.variants()\n+                .map(|v| {\n+                    Ok((\n+                        v.name()\n+                            .map(|n| n.text())\n+                            .unwrap_or_else(|| SmolStr::new(\"[error]\")),\n+                        Arc::new(VariantData::new(db, module, v.flavor())?),\n+                    ))\n+                })\n+                .collect::<Cancelable<_>>()?\n+        } else {\n+            Vec::new()\n+        };\n+        Ok(EnumData { name, variants })\n     }\n }\n \n@@ -107,6 +129,39 @@ pub enum VariantData {\n }\n \n impl VariantData {\n+    pub fn new(db: &impl HirDatabase, module: &Module, flavor: StructFlavor) -> Cancelable<Self> {\n+        Ok(match flavor {\n+            StructFlavor::Tuple(fl) => {\n+                let fields = fl\n+                    .fields()\n+                    .enumerate()\n+                    .map(|(i, fd)| {\n+                        Ok(StructField {\n+                            name: SmolStr::new(i.to_string()),\n+                            ty: Ty::new_opt(db, &module, fd.type_ref())?,\n+                        })\n+                    })\n+                    .collect::<Cancelable<_>>()?;\n+                VariantData::Tuple(fields)\n+            }\n+            StructFlavor::Named(fl) => {\n+                let fields = fl\n+                    .fields()\n+                    .map(|fd| {\n+                        Ok(StructField {\n+                            name: fd\n+                                .name()\n+                                .map(|n| n.text())\n+                                .unwrap_or_else(|| SmolStr::new(\"[error]\")),\n+                            ty: Ty::new_opt(db, &module, fd.type_ref())?,\n+                        })\n+                    })\n+                    .collect::<Cancelable<_>>()?;\n+                VariantData::Struct(fields)\n+            }\n+            StructFlavor::Unit => VariantData::Unit,\n+        })\n+    }\n     pub fn fields(&self) -> &[StructField] {\n         match *self {\n             VariantData::Struct(ref fields) | VariantData::Tuple(ref fields) => fields,"}, {"sha": "01f0f3a662545a36346fae98b9b295b5030665ed", "filename": "crates/ra_hir/src/function.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07a72859650254d8ba326e2c9683ae52164cb3b5/crates%2Fra_hir%2Fsrc%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a72859650254d8ba326e2c9683ae52164cb3b5/crates%2Fra_hir%2Fsrc%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffunction.rs?ref=07a72859650254d8ba326e2c9683ae52164cb3b5", "patch": "@@ -46,8 +46,7 @@ impl Function {\n     }\n \n     pub fn module(&self, db: &impl HirDatabase) -> Cancelable<Module> {\n-        let loc = self.fn_id.0.loc(db);\n-        Module::new(db, loc.source_root_id, loc.module_id)\n+        self.fn_id.0.module(db)\n     }\n }\n "}, {"sha": "796970d8a2de608194c257dcac6028955c453249", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07a72859650254d8ba326e2c9683ae52164cb3b5/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a72859650254d8ba326e2c9683ae52164cb3b5/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=07a72859650254d8ba326e2c9683ae52164cb3b5", "patch": "@@ -135,6 +135,12 @@ impl DefId {\n         };\n         Ok(res)\n     }\n+\n+    /// For a module, returns that module; for any other def, returns the containing module.\n+    pub fn module(self, db: &impl HirDatabase) -> Cancelable<Module> {\n+        let loc = self.loc(db);\n+        Module::new(db, loc.source_root_id, loc.module_id)\n+    }\n }\n \n /// Identifier of item within a specific file. This is stable over reparses, so"}, {"sha": "405e359f1ce0be41f13a64bf3679c13ee302e9b3", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07a72859650254d8ba326e2c9683ae52164cb3b5/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a72859650254d8ba326e2c9683ae52164cb3b5/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=07a72859650254d8ba326e2c9683ae52164cb3b5", "patch": "@@ -52,7 +52,12 @@ pub(super) fn struct_data(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Ar\n     let syntax = db.file_item(def_loc.source_item_id);\n     let struct_def =\n         ast::StructDef::cast(syntax.borrowed()).expect(\"struct def should point to StructDef node\");\n-    Ok(Arc::new(StructData::new(struct_def.borrowed())))\n+    let module = def_id.module(db)?;\n+    Ok(Arc::new(StructData::new(\n+        db,\n+        &module,\n+        struct_def.borrowed(),\n+    )?))\n }\n \n pub(super) fn enum_data(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Arc<EnumData>> {\n@@ -61,7 +66,8 @@ pub(super) fn enum_data(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Arc<\n     let syntax = db.file_item(def_loc.source_item_id);\n     let enum_def =\n         ast::EnumDef::cast(syntax.borrowed()).expect(\"enum def should point to EnumDef node\");\n-    Ok(Arc::new(EnumData::new(enum_def.borrowed())))\n+    let module = def_id.module(db)?;\n+    Ok(Arc::new(EnumData::new(db, &module, enum_def.borrowed())?))\n }\n \n pub(super) fn file_items(db: &impl HirDatabase, file_id: FileId) -> Arc<SourceFileItems> {"}, {"sha": "e2428a37f63ee76bebc1cc5dd0db3d3cd1672a98", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/07a72859650254d8ba326e2c9683ae52164cb3b5/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a72859650254d8ba326e2c9683ae52164cb3b5/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=07a72859650254d8ba326e2c9683ae52164cb3b5", "patch": "@@ -156,6 +156,15 @@ impl Ty {\n         Ok(ty)\n     }\n \n+    pub(crate) fn new_opt(\n+        db: &impl HirDatabase,\n+        module: &Module,\n+        node: Option<ast::TypeRef>,\n+    ) -> Cancelable<Self> {\n+        node.map(|n| Ty::new(db, module, n))\n+            .unwrap_or(Ok(Ty::Unknown))\n+    }\n+\n     pub(crate) fn new(\n         db: &impl HirDatabase,\n         module: &Module,\n@@ -534,7 +543,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 Ty::Unknown\n             }\n             ast::Expr::StructLit(e) => {\n-                let (ty, variant_data) = self.resolve_variant(e.path())?;\n+                let (ty, _variant_data) = self.resolve_variant(e.path())?;\n                 if let Some(nfl) = e.named_field_list() {\n                     for field in nfl.fields() {\n                         if let Some(e) = field.expr() {"}]}