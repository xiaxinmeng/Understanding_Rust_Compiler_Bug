{"sha": "c3b3a861244f5e61d5912ba507e229d978ec1c1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYjNhODYxMjQ0ZjVlNjFkNTkxMmJhNTA3ZTIyOWQ5NzhlYzFjMWM=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-19T23:29:11Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-21T02:48:20Z"}, "message": "Remove unnecessary `Hash` bounds from various types.", "tree": {"sha": "ea0a0c4b5d33868b757c152c51b48116a91d5291", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea0a0c4b5d33868b757c152c51b48116a91d5291"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3b3a861244f5e61d5912ba507e229d978ec1c1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3b3a861244f5e61d5912ba507e229d978ec1c1c", "html_url": "https://github.com/rust-lang/rust/commit/c3b3a861244f5e61d5912ba507e229d978ec1c1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3b3a861244f5e61d5912ba507e229d978ec1c1c/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77c50dc508b8a0ea4277db6860c8d86288fd8538", "url": "https://api.github.com/repos/rust-lang/rust/commits/77c50dc508b8a0ea4277db6860c8d86288fd8538", "html_url": "https://github.com/rust-lang/rust/commit/77c50dc508b8a0ea4277db6860c8d86288fd8538"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "4310f2c6fa1405902c8ee04fdf068be18dda8226", "filename": "src/bootstrap/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b3a861244f5e61d5912ba507e229d978ec1c1c/src%2Fbootstrap%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b3a861244f5e61d5912ba507e229d978ec1c1c/src%2Fbootstrap%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcache.rs?ref=c3b3a861244f5e61d5912ba507e229d978ec1c1c", "patch": "@@ -161,7 +161,7 @@ impl Ord for Interned<String> {\n     }\n }\n \n-struct TyIntern<T: Hash + Clone + Eq> {\n+struct TyIntern<T: Clone + Eq> {\n     items: Vec<T>,\n     set: HashMap<T, Interned<T>>,\n }"}, {"sha": "27a09b394b8fa32b8923140e5ff6f2219fad90fc", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3b3a861244f5e61d5912ba507e229d978ec1c1c/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b3a861244f5e61d5912ba507e229d978ec1c1c/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=c3b3a861244f5e61d5912ba507e229d978ec1c1c", "patch": "@@ -19,7 +19,7 @@ pub type SimplifiedType = SimplifiedTypeGen<DefId>;\n /// the non-stable but fast to construct DefId-version is the better choice.\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, RustcEncodable, RustcDecodable)]\n pub enum SimplifiedTypeGen<D>\n-    where D: Copy + Debug + Ord + Eq + Hash\n+    where D: Copy + Debug + Ord + Eq\n {\n     BoolSimplifiedType,\n     CharSimplifiedType,\n@@ -123,10 +123,10 @@ pub fn simplify_type(\n     }\n }\n \n-impl<D: Copy + Debug + Ord + Eq + Hash> SimplifiedTypeGen<D> {\n+impl<D: Copy + Debug + Ord + Eq> SimplifiedTypeGen<D> {\n     pub fn map_def<U, F>(self, map: F) -> SimplifiedTypeGen<U>\n         where F: Fn(D) -> U,\n-              U: Copy + Debug + Ord + Eq + Hash,\n+              U: Copy + Debug + Ord + Eq,\n     {\n         match self {\n             BoolSimplifiedType => BoolSimplifiedType,\n@@ -155,7 +155,7 @@ impl<D: Copy + Debug + Ord + Eq + Hash> SimplifiedTypeGen<D> {\n \n impl<'a, D> HashStable<StableHashingContext<'a>> for SimplifiedTypeGen<D>\n where\n-    D: Copy + Debug + Ord + Eq + Hash + HashStable<StableHashingContext<'a>>,\n+    D: Copy + Debug + Ord + Eq + HashStable<StableHashingContext<'a>>,\n {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         mem::discriminant(self).hash_stable(hcx, hasher);"}, {"sha": "2f972eeccdcbd2494477483ea16c3ba14abf4b8d", "filename": "src/librustc_data_structures/sharded.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b3a861244f5e61d5912ba507e229d978ec1c1c/src%2Flibrustc_data_structures%2Fsharded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b3a861244f5e61d5912ba507e229d978ec1c1c/src%2Flibrustc_data_structures%2Fsharded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsharded.rs?ref=c3b3a861244f5e61d5912ba507e229d978ec1c1c", "patch": "@@ -90,7 +90,7 @@ impl<T> Sharded<T> {\n \n pub type ShardedHashMap<K, V> = Sharded<FxHashMap<K, V>>;\n \n-impl<K: Eq + Hash, V> ShardedHashMap<K, V> {\n+impl<K: Eq, V> ShardedHashMap<K, V> {\n     pub fn len(&self) -> usize {\n         self.lock_shards().iter().map(|shard| shard.len()).sum()\n     }"}, {"sha": "bdd3dc9665629a5af94a362ce3b08b53c24f110e", "filename": "src/librustc_data_structures/snapshot_map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b3a861244f5e61d5912ba507e229d978ec1c1c/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b3a861244f5e61d5912ba507e229d978ec1c1c/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs?ref=c3b3a861244f5e61d5912ba507e229d978ec1c1c", "patch": "@@ -7,7 +7,7 @@ use std::mem;\n mod tests;\n \n pub struct SnapshotMap<K, V>\n-    where K: Hash + Clone + Eq\n+    where K: Clone + Eq\n {\n     map: FxHashMap<K, V>,\n     undo_log: Vec<UndoLog<K, V>>,"}, {"sha": "78494401c0bafc55f2c2a9891d3cd7c8969859d5", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b3a861244f5e61d5912ba507e229d978ec1c1c/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b3a861244f5e61d5912ba507e229d978ec1c1c/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=c3b3a861244f5e61d5912ba507e229d978ec1c1c", "patch": "@@ -460,7 +460,7 @@ impl_stable_hash_via_hash!(::std::path::Path);\n impl_stable_hash_via_hash!(::std::path::PathBuf);\n \n impl<K, V, R, HCX> HashStable<HCX> for ::std::collections::HashMap<K, V, R>\n-    where K: ToStableHashKey<HCX> + Eq + Hash,\n+    where K: ToStableHashKey<HCX> + Eq,\n           V: HashStable<HCX>,\n           R: BuildHasher,\n {\n@@ -471,7 +471,7 @@ impl<K, V, R, HCX> HashStable<HCX> for ::std::collections::HashMap<K, V, R>\n }\n \n impl<K, R, HCX> HashStable<HCX> for ::std::collections::HashSet<K, R>\n-    where K: ToStableHashKey<HCX> + Eq + Hash,\n+    where K: ToStableHashKey<HCX> + Eq,\n           R: BuildHasher,\n {\n     fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n@@ -513,7 +513,7 @@ pub fn hash_stable_hashmap<HCX, K, V, R, SK, F>(\n     hasher: &mut StableHasher,\n     map: &::std::collections::HashMap<K, V, R>,\n     to_stable_hash_key: F)\n-    where K: Eq + Hash,\n+    where K: Eq,\n           V: HashStable<HCX>,\n           R: BuildHasher,\n           SK: HashStable<HCX> + Ord + Clone,"}, {"sha": "75213d30982f9a833e936d28cec1537e32a1d611", "filename": "src/librustc_mir/borrow_check/nll/member_constraints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3b3a861244f5e61d5912ba507e229d978ec1c1c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b3a861244f5e61d5912ba507e229d978ec1c1c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmember_constraints.rs?ref=c3b3a861244f5e61d5912ba507e229d978ec1c1c", "patch": "@@ -11,7 +11,7 @@ use syntax_pos::Span;\n /// indexed by the region `R0`.\n crate struct MemberConstraintSet<'tcx, R>\n where\n-    R: Copy + Hash + Eq,\n+    R: Copy + Eq,\n {\n     /// Stores the first \"member\" constraint for a given `R0`. This is an\n     /// index into the `constraints` vector below.\n@@ -191,7 +191,7 @@ where\n \n impl<'tcx, R> Index<NllMemberConstraintIndex> for MemberConstraintSet<'tcx, R>\n where\n-    R: Copy + Hash + Eq,\n+    R: Copy + Eq,\n {\n     type Output = NllMemberConstraint<'tcx>;\n "}, {"sha": "f2e9be14c8d12ed4198240ab7a7d8898fef0f527", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3b3a861244f5e61d5912ba507e229d978ec1c1c/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b3a861244f5e61d5912ba507e229d978ec1c1c/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=c3b3a861244f5e61d5912ba507e229d978ec1c1c", "patch": "@@ -143,7 +143,7 @@ impl<T> Decodable for BTreeSet<T>\n }\n \n impl<K, V, S> Encodable for HashMap<K, V, S>\n-    where K: Encodable + Hash + Eq,\n+    where K: Encodable + Eq,\n           V: Encodable,\n           S: BuildHasher,\n {\n@@ -180,7 +180,7 @@ impl<K, V, S> Decodable for HashMap<K, V, S>\n }\n \n impl<T, S> Encodable for HashSet<T, S>\n-    where T: Encodable + Hash + Eq,\n+    where T: Encodable + Eq,\n           S: BuildHasher,\n {\n     fn encode<E: Encoder>(&self, s: &mut E) -> Result<(), E::Error> {"}]}