{"sha": "4e4942dfa66667c0addfff8e0882a59b035d45ca", "node_id": "C_kwDOAAsO6NoAKDRlNDk0MmRmYTY2NjY3YzBhZGRmZmY4ZTA4ODJhNTliMDM1ZDQ1Y2E", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-01T06:19:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-01T06:19:52Z"}, "message": "Auto merge of #89395 - In-line:remove_visible_path_from_allowed_deprecated_lint, r=jyn514\n\nRemove visible path calculation from allowed deprecation lint", "tree": {"sha": "2a9a16d37e122d9ec50b5888e80092786623b806", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a9a16d37e122d9ec50b5888e80092786623b806"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e4942dfa66667c0addfff8e0882a59b035d45ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e4942dfa66667c0addfff8e0882a59b035d45ca", "html_url": "https://github.com/rust-lang/rust/commit/4e4942dfa66667c0addfff8e0882a59b035d45ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e4942dfa66667c0addfff8e0882a59b035d45ca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/598d89bf142823b5d84e2eb0f0f9e418ee966a4b", "html_url": "https://github.com/rust-lang/rust/commit/598d89bf142823b5d84e2eb0f0f9e418ee966a4b"}, {"sha": "d98ac573a4d6d81a47d708daf85930462cecfbc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d98ac573a4d6d81a47d708daf85930462cecfbc2", "html_url": "https://github.com/rust-lang/rust/commit/d98ac573a4d6d81a47d708daf85930462cecfbc2"}], "stats": {"total": 125, "additions": 78, "deletions": 47}, "files": [{"sha": "597622b2ebf907dd000a1412c1a5ed4103a9721d", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 74, "deletions": 40, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/4e4942dfa66667c0addfff8e0882a59b035d45ca/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4942dfa66667c0addfff8e0882a59b035d45ca/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=4e4942dfa66667c0addfff8e0882a59b035d45ca", "patch": "@@ -15,12 +15,11 @@ use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::{self, HirId};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_session::lint::builtin::{DEPRECATED, DEPRECATED_IN_FUTURE, SOFT_UNSTABLE};\n-use rustc_session::lint::{BuiltinLintDiagnostics, Lint, LintBuffer};\n+use rustc_session::lint::{BuiltinLintDiagnostics, Level, Lint, LintBuffer};\n use rustc_session::parse::feature_err_issue;\n use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{MultiSpan, Span};\n-\n use std::num::NonZeroU32;\n \n #[derive(PartialEq, Clone, Copy, Debug)]\n@@ -125,7 +124,11 @@ pub fn report_unstable(\n \n /// Checks whether an item marked with `deprecated(since=\"X\")` is currently\n /// deprecated (i.e., whether X is not greater than the current rustc version).\n-pub fn deprecation_in_effect(is_since_rustc_version: bool, since: Option<&str>) -> bool {\n+pub fn deprecation_in_effect(depr: &Deprecation) -> bool {\n+    let is_since_rustc_version = depr.is_since_rustc_version;\n+    let since = depr.since.map(Symbol::as_str);\n+    let since = since.as_deref();\n+\n     fn parse_version(ver: &str) -> Vec<u32> {\n         // We ignore non-integer components of the version (e.g., \"nightly\").\n         ver.split(|c| c == '.' || c == '-').flat_map(|s| s.parse()).collect()\n@@ -175,33 +178,50 @@ pub fn deprecation_suggestion(\n     }\n }\n \n-pub fn deprecation_message(depr: &Deprecation, kind: &str, path: &str) -> (String, &'static Lint) {\n-    let since = depr.since.map(Symbol::as_str);\n-    let (message, lint) = if deprecation_in_effect(depr.is_since_rustc_version, since.as_deref()) {\n-        (format!(\"use of deprecated {} `{}`\", kind, path), DEPRECATED)\n+fn deprecation_lint(is_in_effect: bool) -> &'static Lint {\n+    if is_in_effect { DEPRECATED } else { DEPRECATED_IN_FUTURE }\n+}\n+\n+fn deprecation_message(\n+    is_in_effect: bool,\n+    since: Option<Symbol>,\n+    note: Option<Symbol>,\n+    kind: &str,\n+    path: &str,\n+) -> String {\n+    let message = if is_in_effect {\n+        format!(\"use of deprecated {} `{}`\", kind, path)\n     } else {\n-        (\n-            if since.as_deref() == Some(\"TBD\") {\n-                format!(\n-                    \"use of {} `{}` that will be deprecated in a future Rust version\",\n-                    kind, path\n-                )\n-            } else {\n-                format!(\n-                    \"use of {} `{}` that will be deprecated in future version {}\",\n-                    kind,\n-                    path,\n-                    since.unwrap()\n-                )\n-            },\n-            DEPRECATED_IN_FUTURE,\n-        )\n+        let since = since.map(Symbol::as_str);\n+\n+        if since.as_deref() == Some(\"TBD\") {\n+            format!(\"use of {} `{}` that will be deprecated in a future Rust version\", kind, path)\n+        } else {\n+            format!(\n+                \"use of {} `{}` that will be deprecated in future version {}\",\n+                kind,\n+                path,\n+                since.unwrap()\n+            )\n+        }\n     };\n-    let message = match depr.note {\n+\n+    match note {\n         Some(reason) => format!(\"{}: {}\", message, reason),\n         None => message,\n-    };\n-    (message, lint)\n+    }\n+}\n+\n+pub fn deprecation_message_and_lint(\n+    depr: &Deprecation,\n+    kind: &str,\n+    path: &str,\n+) -> (String, &'static Lint) {\n+    let is_in_effect = deprecation_in_effect(depr);\n+    (\n+        deprecation_message(is_in_effect, depr.since, depr.note, kind, path),\n+        deprecation_lint(is_in_effect),\n+    )\n }\n \n pub fn early_report_deprecation(\n@@ -303,20 +323,34 @@ impl<'tcx> TyCtxt<'tcx> {\n                 //\n                 // #[rustc_deprecated] however wants to emit down the whole\n                 // hierarchy.\n-                if !skip || depr_entry.attr.is_since_rustc_version {\n-                    let path = &with_no_trimmed_paths(|| self.def_path_str(def_id));\n-                    let kind = self.def_kind(def_id).descr(def_id);\n-                    let (message, lint) = deprecation_message(&depr_entry.attr, kind, path);\n-                    late_report_deprecation(\n-                        self,\n-                        &message,\n-                        depr_entry.attr.suggestion,\n-                        lint,\n-                        span,\n-                        method_span,\n-                        id,\n-                        def_id,\n-                    );\n+                let depr_attr = &depr_entry.attr;\n+                if !skip || depr_attr.is_since_rustc_version {\n+                    // Calculating message for lint involves calling `self.def_path_str`.\n+                    // Which by default to calculate visible path will invoke expensive `visible_parent_map` query.\n+                    // So we skip message calculation altogether, if lint is allowed.\n+                    let is_in_effect = deprecation_in_effect(depr_attr);\n+                    let lint = deprecation_lint(is_in_effect);\n+                    if self.lint_level_at_node(lint, id).0 != Level::Allow {\n+                        let def_path = &with_no_trimmed_paths(|| self.def_path_str(def_id));\n+                        let def_kind = self.def_kind(def_id).descr(def_id);\n+\n+                        late_report_deprecation(\n+                            self,\n+                            &deprecation_message(\n+                                is_in_effect,\n+                                depr_attr.since,\n+                                depr_attr.note,\n+                                def_kind,\n+                                def_path,\n+                            ),\n+                            depr_attr.suggestion,\n+                            lint,\n+                            span,\n+                            method_span,\n+                            id,\n+                            def_id,\n+                        );\n+                    }\n                 }\n             };\n         }"}, {"sha": "4f6e23d8f84f0e3fe40573d54c119e9f57ffa98e", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e4942dfa66667c0addfff8e0882a59b035d45ca/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4942dfa66667c0addfff8e0882a59b035d45ca/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=4e4942dfa66667c0addfff8e0882a59b035d45ca", "patch": "@@ -1137,7 +1137,7 @@ impl<'a> Resolver<'a> {\n         }\n         if let Some(depr) = &ext.deprecation {\n             let path = pprust::path_to_string(&path);\n-            let (message, lint) = stability::deprecation_message(depr, \"macro\", &path);\n+            let (message, lint) = stability::deprecation_message_and_lint(depr, \"macro\", &path);\n             stability::early_report_deprecation(\n                 &mut self.lint_buffer,\n                 &message,"}, {"sha": "5045a99800ab1b783ce4c501d3c41834fc4fafbe", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e4942dfa66667c0addfff8e0882a59b035d45ca/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4942dfa66667c0addfff8e0882a59b035d45ca/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=4e4942dfa66667c0addfff8e0882a59b035d45ca", "patch": "@@ -599,14 +599,14 @@ fn short_item_info(\n     let mut extra_info = vec![];\n     let error_codes = cx.shared.codes;\n \n-    if let Some(Deprecation { note, since, is_since_rustc_version, suggestion: _ }) =\n+    if let Some(depr @ Deprecation { note, since, is_since_rustc_version: _, suggestion: _ }) =\n         item.deprecation(cx.tcx())\n     {\n         // We display deprecation messages for #[deprecated] and #[rustc_deprecated]\n         // but only display the future-deprecation messages for #[rustc_deprecated].\n         let mut message = if let Some(since) = since {\n             let since = &since.as_str();\n-            if !stability::deprecation_in_effect(is_since_rustc_version, Some(since)) {\n+            if !stability::deprecation_in_effect(&depr) {\n                 if *since == \"TBD\" {\n                     String::from(\"Deprecating in a future Rust version\")\n                 } else {"}, {"sha": "fa0d211efe6308bbaf1614ed93d6d161868ba901", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e4942dfa66667c0addfff8e0882a59b035d45ca/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4942dfa66667c0addfff8e0882a59b035d45ca/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=4e4942dfa66667c0addfff8e0882a59b035d45ca", "patch": "@@ -418,10 +418,7 @@ fn extra_info_tags(item: &clean::Item, parent: &clean::Item, tcx: TyCtxt<'_>) ->\n     // The trailing space after each tag is to space it properly against the rest of the docs.\n     if let Some(depr) = &item.deprecation(tcx) {\n         let mut message = \"Deprecated\";\n-        if !stability::deprecation_in_effect(\n-            depr.is_since_rustc_version,\n-            depr.since.map(|s| s.as_str()).as_deref(),\n-        ) {\n+        if !stability::deprecation_in_effect(depr) {\n             message = \"Deprecation planned\";\n         }\n         tags += &tag_html(\"deprecated\", \"\", message);"}]}