{"sha": "e1a9ecca2642a21eb56739d0360066bf27c86342", "node_id": "C_kwDOAAsO6NoAKGUxYTllY2NhMjY0MmEyMWViNTY3MzlkMDM2MDA2NmJmMjdjODYzNDI", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-09-28T21:15:28Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-09-29T17:31:03Z"}, "message": "Cleanup lower_generics_mut and make span be the bound itself, not the type", "tree": {"sha": "9c297af1ff2b2d7cbe5044fbb7cb72aa6aab4960", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c297af1ff2b2d7cbe5044fbb7cb72aa6aab4960"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1a9ecca2642a21eb56739d0360066bf27c86342", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a9ecca2642a21eb56739d0360066bf27c86342", "html_url": "https://github.com/rust-lang/rust/commit/e1a9ecca2642a21eb56739d0360066bf27c86342", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1a9ecca2642a21eb56739d0360066bf27c86342/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c7bc5e33c25e29058cbafefe680da8d5e9220e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c7bc5e33c25e29058cbafefe680da8d5e9220e9", "html_url": "https://github.com/rust-lang/rust/commit/2c7bc5e33c25e29058cbafefe680da8d5e9220e9"}], "stats": {"total": 87, "additions": 50, "deletions": 37}, "files": [{"sha": "9fd7ca7c09e7fc6322ae8e048431a7e0f579b9f9", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 38, "deletions": 25, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e1a9ecca2642a21eb56739d0360066bf27c86342/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a9ecca2642a21eb56739d0360066bf27c86342/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=e1a9ecca2642a21eb56739d0360066bf27c86342", "patch": "@@ -1356,32 +1356,45 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // keep track of the Span info. Now, `add_implicitly_sized` in `AstConv` checks both param bounds and\n         // where clauses for `?Sized`.\n         for pred in &generics.where_clause.predicates {\n-            if let WherePredicate::BoundPredicate(ref bound_pred) = *pred {\n-                'next_bound: for bound in &bound_pred.bounds {\n-                    if let GenericBound::Trait(_, TraitBoundModifier::Maybe) = *bound {\n-                        // Check if the where clause type is a plain type parameter.\n-                        match self\n-                            .resolver\n-                            .get_partial_res(bound_pred.bounded_ty.id)\n-                            .map(|d| (d.base_res(), d.unresolved_segments()))\n-                        {\n-                            Some((Res::Def(DefKind::TyParam, def_id), 0))\n-                                if bound_pred.bound_generic_params.is_empty() =>\n-                            {\n-                                for param in &generics.params {\n-                                    if def_id == self.resolver.local_def_id(param.id).to_def_id() {\n-                                        continue 'next_bound;\n-                                    }\n-                                }\n-                            }\n-                            _ => {}\n-                        }\n-                        self.diagnostic().span_err(\n-                            bound_pred.bounded_ty.span,\n-                            \"`?Trait` bounds are only permitted at the \\\n-                                 point where a type parameter is declared\",\n-                        );\n+            let bound_pred = match *pred {\n+                WherePredicate::BoundPredicate(ref bound_pred) => bound_pred,\n+                _ => continue,\n+            };\n+            let compute_is_param = || {\n+                // Check if the where clause type is a plain type parameter.\n+                match self\n+                    .resolver\n+                    .get_partial_res(bound_pred.bounded_ty.id)\n+                    .map(|d| (d.base_res(), d.unresolved_segments()))\n+                {\n+                    Some((Res::Def(DefKind::TyParam, def_id), 0))\n+                        if bound_pred.bound_generic_params.is_empty() =>\n+                    {\n+                        generics\n+                            .params\n+                            .iter()\n+                            .find(|p| def_id == self.resolver.local_def_id(p.id).to_def_id())\n+                            .is_some()\n                     }\n+                    // Either the `bounded_ty` is not a plain type parameter, or\n+                    // it's not found in the generic type parameters list.\n+                    _ => false,\n+                }\n+            };\n+            // We only need to compute this once per `WherePredicate`, but don't\n+            // need to compute this at all unless there is a Maybe bound.\n+            let mut is_param: Option<bool> = None;\n+            for bound in &bound_pred.bounds {\n+                if !matches!(*bound, GenericBound::Trait(_, TraitBoundModifier::Maybe)) {\n+                    continue;\n+                }\n+                let is_param = *is_param.get_or_insert_with(compute_is_param);\n+                if !is_param {\n+                    self.diagnostic().span_err(\n+                        bound.span(),\n+                        \"`?Trait` bounds are only permitted at the \\\n+                        point where a type parameter is declared\",\n+                    );\n                 }\n             }\n         }"}, {"sha": "b81dff9958ec7ec71064beb3a5586cfaef2e8726", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1a9ecca2642a21eb56739d0360066bf27c86342/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a9ecca2642a21eb56739d0360066bf27c86342/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=e1a9ecca2642a21eb56739d0360066bf27c86342", "patch": "@@ -172,7 +172,7 @@ pub trait ResolverAstLowering {\n     fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>>;\n \n     /// Obtains resolution for a `NodeId` with a single resolution.\n-    fn get_partial_res(&mut self, id: NodeId) -> Option<PartialRes>;\n+    fn get_partial_res(&self, id: NodeId) -> Option<PartialRes>;\n \n     /// Obtains per-namespace resolutions for `use` statement with the given `NodeId`.\n     fn get_import_res(&mut self, id: NodeId) -> PerNS<Option<Res<NodeId>>>;"}, {"sha": "65650780cc322fc9621ec1cea47493a4d3da8111", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1a9ecca2642a21eb56739d0360066bf27c86342/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a9ecca2642a21eb56739d0360066bf27c86342/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=e1a9ecca2642a21eb56739d0360066bf27c86342", "patch": "@@ -1132,7 +1132,7 @@ impl ResolverAstLowering for Resolver<'_> {\n         self.legacy_const_generic_args(expr)\n     }\n \n-    fn get_partial_res(&mut self, id: NodeId) -> Option<PartialRes> {\n+    fn get_partial_res(&self, id: NodeId) -> Option<PartialRes> {\n         self.partial_res_map.get(&id).cloned()\n     }\n "}, {"sha": "39bc1b88e56d7f11f18015b4c5ca28e47a5aa6f0", "filename": "src/test/ui/maybe-bounds-where.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e1a9ecca2642a21eb56739d0360066bf27c86342/src%2Ftest%2Fui%2Fmaybe-bounds-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1a9ecca2642a21eb56739d0360066bf27c86342/src%2Ftest%2Fui%2Fmaybe-bounds-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmaybe-bounds-where.stderr?ref=e1a9ecca2642a21eb56739d0360066bf27c86342", "patch": "@@ -1,32 +1,32 @@\n error: `?Trait` bounds are only permitted at the point where a type parameter is declared\n-  --> $DIR/maybe-bounds-where.rs:1:23\n+  --> $DIR/maybe-bounds-where.rs:1:28\n    |\n LL | struct S1<T>(T) where (T): ?Sized;\n-   |                       ^^^\n+   |                            ^^^^^^\n \n error: `?Trait` bounds are only permitted at the point where a type parameter is declared\n-  --> $DIR/maybe-bounds-where.rs:4:23\n+  --> $DIR/maybe-bounds-where.rs:4:27\n    |\n LL | struct S2<T>(T) where u8: ?Sized;\n-   |                       ^^\n+   |                           ^^^^^^\n \n error: `?Trait` bounds are only permitted at the point where a type parameter is declared\n-  --> $DIR/maybe-bounds-where.rs:7:23\n+  --> $DIR/maybe-bounds-where.rs:7:35\n    |\n LL | struct S3<T>(T) where &'static T: ?Sized;\n-   |                       ^^^^^^^^^^\n+   |                                   ^^^^^^\n \n error: `?Trait` bounds are only permitted at the point where a type parameter is declared\n-  --> $DIR/maybe-bounds-where.rs:12:31\n+  --> $DIR/maybe-bounds-where.rs:12:34\n    |\n LL | struct S4<T>(T) where for<'a> T: ?Trait<'a>;\n-   |                               ^\n+   |                                  ^^^^^^^^^^\n \n error: `?Trait` bounds are only permitted at the point where a type parameter is declared\n-  --> $DIR/maybe-bounds-where.rs:21:18\n+  --> $DIR/maybe-bounds-where.rs:21:21\n    |\n LL |     fn f() where T: ?Sized {}\n-   |                  ^\n+   |                     ^^^^^^\n \n warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default; only `?Sized` is supported\n   --> $DIR/maybe-bounds-where.rs:12:11"}]}