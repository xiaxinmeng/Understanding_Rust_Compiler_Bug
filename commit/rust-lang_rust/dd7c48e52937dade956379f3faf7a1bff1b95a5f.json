{"sha": "dd7c48e52937dade956379f3faf7a1bff1b95a5f", "node_id": "C_kwDOAAsO6NoAKGRkN2M0OGU1MjkzN2RhZGU5NTYzNzlmM2ZhZjdhMWJmZjFiOTVhNWY", "commit": {"author": {"name": "Matthew Kelly", "email": "matthew.kelly2@gmail.com", "date": "2022-08-25T00:44:09Z"}, "committer": {"name": "Matthew Kelly", "email": "matthew.kelly2@gmail.com", "date": "2022-08-25T00:44:09Z"}, "message": "Improve description again\n\n-- update summary based on review\n-- rewrite explanation to be more clear and correct", "tree": {"sha": "696f74372b4d034b27b0f9c6997681cbeaca8c18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/696f74372b4d034b27b0f9c6997681cbeaca8c18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd7c48e52937dade956379f3faf7a1bff1b95a5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd7c48e52937dade956379f3faf7a1bff1b95a5f", "html_url": "https://github.com/rust-lang/rust/commit/dd7c48e52937dade956379f3faf7a1bff1b95a5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd7c48e52937dade956379f3faf7a1bff1b95a5f/comments", "author": {"login": "MatthewPeterKelly", "id": 8137529, "node_id": "MDQ6VXNlcjgxMzc1Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/8137529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MatthewPeterKelly", "html_url": "https://github.com/MatthewPeterKelly", "followers_url": "https://api.github.com/users/MatthewPeterKelly/followers", "following_url": "https://api.github.com/users/MatthewPeterKelly/following{/other_user}", "gists_url": "https://api.github.com/users/MatthewPeterKelly/gists{/gist_id}", "starred_url": "https://api.github.com/users/MatthewPeterKelly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MatthewPeterKelly/subscriptions", "organizations_url": "https://api.github.com/users/MatthewPeterKelly/orgs", "repos_url": "https://api.github.com/users/MatthewPeterKelly/repos", "events_url": "https://api.github.com/users/MatthewPeterKelly/events{/privacy}", "received_events_url": "https://api.github.com/users/MatthewPeterKelly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MatthewPeterKelly", "id": 8137529, "node_id": "MDQ6VXNlcjgxMzc1Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/8137529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MatthewPeterKelly", "html_url": "https://github.com/MatthewPeterKelly", "followers_url": "https://api.github.com/users/MatthewPeterKelly/followers", "following_url": "https://api.github.com/users/MatthewPeterKelly/following{/other_user}", "gists_url": "https://api.github.com/users/MatthewPeterKelly/gists{/gist_id}", "starred_url": "https://api.github.com/users/MatthewPeterKelly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MatthewPeterKelly/subscriptions", "organizations_url": "https://api.github.com/users/MatthewPeterKelly/orgs", "repos_url": "https://api.github.com/users/MatthewPeterKelly/repos", "events_url": "https://api.github.com/users/MatthewPeterKelly/events{/privacy}", "received_events_url": "https://api.github.com/users/MatthewPeterKelly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "231e3a041512027b13c87b07fe2a22c89b290adb", "url": "https://api.github.com/repos/rust-lang/rust/commits/231e3a041512027b13c87b07fe2a22c89b290adb", "html_url": "https://github.com/rust-lang/rust/commit/231e3a041512027b13c87b07fe2a22c89b290adb"}], "stats": {"total": 88, "additions": 47, "deletions": 41}, "files": [{"sha": "a9d44dcdcee82b03436579742fd9be231af1e009", "filename": "compiler/rustc_error_codes/src/error_codes/E0311.md", "status": "modified", "additions": 39, "deletions": 34, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/dd7c48e52937dade956379f3faf7a1bff1b95a5f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0311.md", "raw_url": "https://github.com/rust-lang/rust/raw/dd7c48e52937dade956379f3faf7a1bff1b95a5f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0311.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0311.md?ref=dd7c48e52937dade956379f3faf7a1bff1b95a5f", "patch": "@@ -1,5 +1,5 @@\n-This error occurs when there is insufficient information for the rust compiler\n-to prove that a type has a long enough lifetime.\n+This error occurs when there is an unsatisfied outlives bound on a generic\n+type parameter or associated type.\n \n Erroneous code example:\n \n@@ -13,58 +13,63 @@ trait NestedBorrowMut<U, V> {\n impl<T, U, V> NestedBorrowMut<U, V> for T\n where\n     T: BorrowMut<U>,\n-    U: BorrowMut<V>, // error: missing lifetime specifier\n+    U: BorrowMut<V>,\n {\n     fn nested_borrow_mut(&mut self) -> &mut V {\n-        self.borrow_mut().borrow_mut()\n+        let u_ref = self.borrow_mut();\n+        let v_ref = u_ref.borrow_mut();\n+        v_ref\n     }\n }\n ```\n \n-Why doesn't this code compile? The problem has to do with Rust's rules for\n-lifetime elision in functions (Chapter 10.3 in the Rust book). One of the\n-inputs is a reference to `self`, so the compiler attempts to assign the\n-the same lifetime to the `&mut self` input and `&mut V` output to the\n-`nested_borrow_mut()` function. The problem is that there is no way for the\n-compiler to directly figure out how these two lifetimes are related in the\n-implementation of the function. We're implementing the `NextedBorrowMut`\n-trait for a type `T`, so the `&mut self` reference has the lifetime of `T`.\n-We know that `T` implements the `BorrowMut` trait returning a reference to `U`,\n-and that `U` implements the `BorrowMut` trait returning a reference to `V`.\n-The key is that we have not told the compiler that those two `U` lifetimes\n-are the same: for all it knows, we could be that the first `BorrowMut` trait\n-on `T` works with a lifetime `'a` and the second `BorrowMut` trait on `U`\n-works on a lifetime `'b`.\n+Why doesn't this code compile? It helps to look at the lifetime bounds that\n+the compiler is automatically adding (\"Lifetime Ellision\", Chapter 10.3 in the\n+Rust book) to the `nested_borrow_mut` and `borrow_mut` functions. In both cases\n+the input is a reference to `self`, so the compiler attempts to assign the\n+the same lifetime to the input and output.\n \n-The fix here is to add explicit lifetime annotations that tell the compiler\n-that the lifetime of the output is in fact the same as the lifetime of the\n-input (`self`). There are three references involved, to objects of type `T`\n-(`self`), `U` (the intermediate type), and `V` (the return type). In the\n-working code below, we see that all have been given the same lifetime `'a`:\n-- `&'a mut self` in the function argument list for `T`\n-- `U: BorrowMut<V> + 'a` in the trait bounds for `U`\n-- `&'a mut V` in the function return for `V`.\n+Looking specifically at `nested_borrow_mut`,\n+we see that there are three object references to keep track of,\n+along with their associated lifetimes:\n+- `self` (which is a `&mut T`)\n+- `u_ref` (which is a `&mut U`)\n+- `v_ref` (which is a `&mut V`)\n \n-The compiler can the check that the implementation of the\n-`nested_borrow_mut()` function satisfies these lifetimes. There are two\n-functions being called inside of `nested_borrow_mut()`, both of which are\n-the `borrow_mut()` function, which promises that the output lifetime is\n-the same as the input lifetime (see lifetime elision rules), which checks out.\n+The `borrow_mut()` method implicitly requires that that the input and output\n+have the same lifetime bounds. Thus:\n \n+```rust\n+        let u_ref = self.borrow_mut();\n+        let v_ref = u_ref.borrow_mut();\n ```\n+\n+Imply that `u_ref` and `self` must share a lifetime bound, and also that\n+`v_ref` and `u_ref` share a lifetime bound. The problem is that the function\n+signature for `nested_borrow_mut` only gives the compiler information about the\n+lifetimes of `self` and `v_ref` -- nothing about `u_ref`.\n+\n+The way to fix this error is then to explicitly tell the compiler that the\n+lifetime of `u_ref` is the same as `self` and `v_ref`, which then allows it\n+to satisfy the two lifetime bound requirements described above.\n+\n+Here is the working version of the code:\n+```rust\n use std::borrow::BorrowMut;\n \n trait NestedBorrowMut<'a, U, V> {\n-    fn nested_borrow_mut(& 'a mut self) -> &'a mut V;\n+    fn nested_borrow_mut(&'a mut self) -> &'a mut V;\n }\n \n impl<'a, T, U, V> NestedBorrowMut<'a, U, V> for T\n where\n     T: BorrowMut<U>,\n-    U: BorrowMut<V> + 'a, // Adding lifetime specifier\n+    U: BorrowMut<V> + 'a,\n {\n     fn nested_borrow_mut(&'a mut self) -> &'a mut V {\n-        self.borrow_mut().borrow_mut()\n+        let u_ref = self.borrow_mut();\n+        let v_ref = u_ref.borrow_mut();\n+        v_ref\n     }\n }\n ```"}, {"sha": "95f8602306cdec69705b427540660f33ac444e1b", "filename": "src/test/ui/error-codes/E0311.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd7c48e52937dade956379f3faf7a1bff1b95a5f/src%2Ftest%2Fui%2Ferror-codes%2FE0311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd7c48e52937dade956379f3faf7a1bff1b95a5f/src%2Ftest%2Fui%2Ferror-codes%2FE0311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0311.rs?ref=dd7c48e52937dade956379f3faf7a1bff1b95a5f", "patch": "@@ -11,7 +11,8 @@ where\n {\n     fn nested_borrow_mut(&mut self) -> &mut V {\n         let u_ref = self.borrow_mut(); //~ ERROR E0311\n-        u_ref.borrow_mut() //~ ERROR E0311\n+        let v_ref = u_ref.borrow_mut(); //~ ERROR E0311\n+        v_ref\n     }\n }\n "}, {"sha": "2cf6404f2f1c0265eb3dec8d20240884d417c219", "filename": "src/test/ui/error-codes/E0311.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd7c48e52937dade956379f3faf7a1bff1b95a5f/src%2Ftest%2Fui%2Ferror-codes%2FE0311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd7c48e52937dade956379f3faf7a1bff1b95a5f/src%2Ftest%2Fui%2Ferror-codes%2FE0311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0311.stderr?ref=dd7c48e52937dade956379f3faf7a1bff1b95a5f", "patch": "@@ -20,21 +20,21 @@ LL |     U: BorrowMut<V> + 'a, // Error is caused by missing lifetime here\n    |                     ++++\n \n error[E0311]: the parameter type `U` may not live long enough\n-  --> $DIR/E0311.rs:14:9\n+  --> $DIR/E0311.rs:14:21\n    |\n-LL |         u_ref.borrow_mut()\n-   |         ^^^^^^^^^^^^^^^^^^\n+LL |         let v_ref = u_ref.borrow_mut();\n+   |                     ^^^^^^^^^^^^^^^^^^\n    |\n note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n   --> $DIR/E0311.rs:12:26\n    |\n LL |     fn nested_borrow_mut(&mut self) -> &mut V {\n    |                          ^^^^^^^^^\n note: ...so that the type `U` will meet its required lifetime bounds\n-  --> $DIR/E0311.rs:14:9\n+  --> $DIR/E0311.rs:14:21\n    |\n-LL |         u_ref.borrow_mut()\n-   |         ^^^^^^^^^^^^^^^^^^\n+LL |         let v_ref = u_ref.borrow_mut();\n+   |                     ^^^^^^^^^^^^^^^^^^\n help: consider adding an explicit lifetime bound...\n    |\n LL |     U: BorrowMut<V> + 'a, // Error is caused by missing lifetime here"}]}