{"sha": "9ddae155322de3ed2f348629925a18538e96020c", "node_id": "C_kwDOAAsO6NoAKDlkZGFlMTU1MzIyZGUzZWQyZjM0ODYyOTkyNWExODUzOGU5NjAyMGM", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-01T14:36:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-01T14:36:45Z"}, "message": "Rollup merge of #94647 - Urgau:hash-map-many-mut, r=Amanieu\n\nExpose `get_many_mut` and `get_many_unchecked_mut` to HashMap\n\nThis pull-request expose the function [`get_many_mut`](https://docs.rs/hashbrown/0.12.0/hashbrown/struct.HashMap.html#method.get_many_mut) and [`get_many_unchecked_mut`](https://docs.rs/hashbrown/0.12.0/hashbrown/struct.HashMap.html#method.get_many_unchecked_mut) from `hashbrown` to the standard library `HashMap` type. They obviously keep the same API and are added under the (new) `map_many_mut` feature.\n\n- `get_many_mut`: Attempts to get mutable references to `N` values in the map at once.\n- `get_many_unchecked_mut`: Attempts to get mutable references to `N` values in the map at once, without validating that the values are unique.", "tree": {"sha": "e3f833ca53a924756d15b0202132965ff8721c90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3f833ca53a924756d15b0202132965ff8721c90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ddae155322de3ed2f348629925a18538e96020c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJil3l+CRBK7hj4Ov3rIwAAmckIAFS2ObulzsuO+7uvA+7+qRmI\nVcFFzDkVGC8kcfcaDmpP2h1t/QcNGSO2840yJZV4o6QyQKlTvhO0YsTwvw5XFO0x\nAAlFhL2VFkSEIxBK9JV5QBWuh3dKGhOsVI2FjluYP1EfNkg4yusSger9tyjlVgRb\nEPbH0n11OSvzi49+tz/LM26c6NIBjD4y+6eKxl0H9qMdy6u1x9EaK18fFz1ow9FP\njqB9lFOjvZTJJgz3vsXJkCilK2h12qKcCW+Z6UfqQDDLwC7o2YC0kLJE2anl+/Ae\nfTosqY9ppHpMGI5hILsibcarUvR/2fku0GOUAHjdSzJoNlSs285ka9ZrSYr5EPY=\n=IQ0I\n-----END PGP SIGNATURE-----\n", "payload": "tree e3f833ca53a924756d15b0202132965ff8721c90\nparent 395a09c3dafe0c7838c9ca41d2b47bb5e79a5b6d\nparent 0a6001b5a03481a323048ef387e31033080ee18f\nauthor Yuki Okushi <jtitor@2k36.org> 1654094205 +0900\ncommitter GitHub <noreply@github.com> 1654094205 +0900\n\nRollup merge of #94647 - Urgau:hash-map-many-mut, r=Amanieu\n\nExpose `get_many_mut` and `get_many_unchecked_mut` to HashMap\n\nThis pull-request expose the function [`get_many_mut`](https://docs.rs/hashbrown/0.12.0/hashbrown/struct.HashMap.html#method.get_many_mut) and [`get_many_unchecked_mut`](https://docs.rs/hashbrown/0.12.0/hashbrown/struct.HashMap.html#method.get_many_unchecked_mut) from `hashbrown` to the standard library `HashMap` type. They obviously keep the same API and are added under the (new) `map_many_mut` feature.\n\n- `get_many_mut`: Attempts to get mutable references to `N` values in the map at once.\n- `get_many_unchecked_mut`: Attempts to get mutable references to `N` values in the map at once, without validating that the values are unique.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ddae155322de3ed2f348629925a18538e96020c", "html_url": "https://github.com/rust-lang/rust/commit/9ddae155322de3ed2f348629925a18538e96020c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ddae155322de3ed2f348629925a18538e96020c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "395a09c3dafe0c7838c9ca41d2b47bb5e79a5b6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/395a09c3dafe0c7838c9ca41d2b47bb5e79a5b6d", "html_url": "https://github.com/rust-lang/rust/commit/395a09c3dafe0c7838c9ca41d2b47bb5e79a5b6d"}, {"sha": "0a6001b5a03481a323048ef387e31033080ee18f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a6001b5a03481a323048ef387e31033080ee18f", "html_url": "https://github.com/rust-lang/rust/commit/0a6001b5a03481a323048ef387e31033080ee18f"}], "stats": {"total": 113, "additions": 113, "deletions": 0}, "files": [{"sha": "11ccdd9ea1cc5e90ca76964e0322e9a965cc4c6a", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/9ddae155322de3ed2f348629925a18538e96020c/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ddae155322de3ed2f348629925a18538e96020c/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=9ddae155322de3ed2f348629925a18538e96020c", "patch": "@@ -896,6 +896,119 @@ where\n         self.base.get_key_value(k)\n     }\n \n+    /// Attempts to get mutable references to `N` values in the map at once.\n+    ///\n+    /// Returns an array of length `N` with the results of each query. For soundness, at most one\n+    /// mutable reference will be returned to any value. `None` will be returned if any of the\n+    /// keys are duplicates or missing.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(map_many_mut)]\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut libraries = HashMap::new();\n+    /// libraries.insert(\"Bodleian Library\".to_string(), 1602);\n+    /// libraries.insert(\"Athen\u00e6um\".to_string(), 1807);\n+    /// libraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);\n+    /// libraries.insert(\"Library of Congress\".to_string(), 1800);\n+    ///\n+    /// let got = libraries.get_many_mut([\n+    ///     \"Athen\u00e6um\",\n+    ///     \"Library of Congress\",\n+    /// ]);\n+    /// assert_eq!(\n+    ///     got,\n+    ///     Some([\n+    ///         &mut 1807,\n+    ///         &mut 1800,\n+    ///     ]),\n+    /// );\n+    ///\n+    /// // Missing keys result in None\n+    /// let got = libraries.get_many_mut([\n+    ///     \"Athen\u00e6um\",\n+    ///     \"New York Public Library\",\n+    /// ]);\n+    /// assert_eq!(got, None);\n+    ///\n+    /// // Duplicate keys result in None\n+    /// let got = libraries.get_many_mut([\n+    ///     \"Athen\u00e6um\",\n+    ///     \"Athen\u00e6um\",\n+    /// ]);\n+    /// assert_eq!(got, None);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"map_many_mut\", issue = \"97601\")]\n+    pub fn get_many_mut<Q: ?Sized, const N: usize>(&mut self, ks: [&Q; N]) -> Option<[&'_ mut V; N]>\n+    where\n+        K: Borrow<Q>,\n+        Q: Hash + Eq,\n+    {\n+        self.base.get_many_mut(ks)\n+    }\n+\n+    /// Attempts to get mutable references to `N` values in the map at once, without validating that\n+    /// the values are unique.\n+    ///\n+    /// Returns an array of length `N` with the results of each query. `None` will be returned if\n+    /// any of the keys are missing.\n+    ///\n+    /// For a safe alternative see [`get_many_mut`](Self::get_many_mut).\n+    ///\n+    /// # Safety\n+    ///\n+    /// Calling this method with overlapping keys is *[undefined behavior]* even if the resulting\n+    /// references are not used.\n+    ///\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(map_many_mut)]\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut libraries = HashMap::new();\n+    /// libraries.insert(\"Bodleian Library\".to_string(), 1602);\n+    /// libraries.insert(\"Athen\u00e6um\".to_string(), 1807);\n+    /// libraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);\n+    /// libraries.insert(\"Library of Congress\".to_string(), 1800);\n+    ///\n+    /// let got = libraries.get_many_mut([\n+    ///     \"Athen\u00e6um\",\n+    ///     \"Library of Congress\",\n+    /// ]);\n+    /// assert_eq!(\n+    ///     got,\n+    ///     Some([\n+    ///         &mut 1807,\n+    ///         &mut 1800,\n+    ///     ]),\n+    /// );\n+    ///\n+    /// // Missing keys result in None\n+    /// let got = libraries.get_many_mut([\n+    ///     \"Athen\u00e6um\",\n+    ///     \"New York Public Library\",\n+    /// ]);\n+    /// assert_eq!(got, None);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"map_many_mut\", issue = \"97601\")]\n+    pub unsafe fn get_many_unchecked_mut<Q: ?Sized, const N: usize>(\n+        &mut self,\n+        ks: [&Q; N],\n+    ) -> Option<[&'_ mut V; N]>\n+    where\n+        K: Borrow<Q>,\n+        Q: Hash + Eq,\n+    {\n+        self.base.get_many_unchecked_mut(ks)\n+    }\n+\n     /// Returns `true` if the map contains a value for the specified key.\n     ///\n     /// The key may be any borrowed form of the map's key type, but"}]}