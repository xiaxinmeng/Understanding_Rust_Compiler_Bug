{"sha": "db1cadd4447f7c580c5436a4368a4de3c67fa37a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMWNhZGQ0NDQ3ZjdjNTgwYzU0MzZhNDM2OGE0ZGUzYzY3ZmEzN2E=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-10T10:34:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-10T10:34:23Z"}, "message": "In field patterns, don't highlight local binding as a field", "tree": {"sha": "afa0afa35ca069de038d6aa01772097a6873804f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afa0afa35ca069de038d6aa01772097a6873804f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db1cadd4447f7c580c5436a4368a4de3c67fa37a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db1cadd4447f7c580c5436a4368a4de3c67fa37a", "html_url": "https://github.com/rust-lang/rust/commit/db1cadd4447f7c580c5436a4368a4de3c67fa37a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db1cadd4447f7c580c5436a4368a4de3c67fa37a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "560b98bc505be6ff70876df661e4055e1b38a78c", "url": "https://api.github.com/repos/rust-lang/rust/commits/560b98bc505be6ff70876df661e4055e1b38a78c", "html_url": "https://github.com/rust-lang/rust/commit/560b98bc505be6ff70876df661e4055e1b38a78c"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "33548d43ccd581921f4ebb8deb04d44751f35eba", "filename": "crates/ra_ide/src/snapshots/highlighting.html", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db1cadd4447f7c580c5436a4368a4de3c67fa37a/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/db1cadd4447f7c580c5436a4368a4de3c67fa37a/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=db1cadd4447f7c580c5436a4368a4de3c67fa37a", "patch": "@@ -84,7 +84,9 @@\n     <span class=\"keyword\">let</span> <span class=\"variable declaration mutable\">y</span> = &<span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span>;\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> = &<span class=\"variable mutable\">y</span>;\n \n-    <span class=\"variable mutable\">y</span>;\n+    <span class=\"keyword\">let</span> <span class=\"struct\">Foo</span> { <span class=\"field\">x</span>: <span class=\"variable declaration\">z</span>, <span class=\"field\">y</span> } = <span class=\"struct\">Foo</span> { <span class=\"field\">x</span>: <span class=\"variable\">z</span>, <span class=\"field\">y</span> };\n+\n+    <span class=\"variable\">y</span>;\n }\n \n <span class=\"keyword\">enum</span> <span class=\"enum declaration\">Option</span>&lt;<span class=\"type_param declaration\">T</span>&gt; {"}, {"sha": "949bf59a0d24a8437cf63c0bd99a24ddb94a903e", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/db1cadd4447f7c580c5436a4368a4de3c67fa37a/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1cadd4447f7c580c5436a4368a4de3c67fa37a/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=db1cadd4447f7c580c5436a4368a4de3c67fa37a", "patch": "@@ -7,18 +7,6 @@ use crate::{\n     FileRange, TextRange,\n };\n \n-/// Highlights the code given by the `ra_fixture` argument, renders the\n-/// result as HTML, and compares it with the HTML file given as `snapshot`.\n-/// Note that the `snapshot` file is overwritten by the rendered HTML.\n-fn check_highlighting(ra_fixture: &str, snapshot: &str, rainbow: bool) {\n-    let (analysis, file_id) = single_file(ra_fixture);\n-    let dst_file = project_dir().join(snapshot);\n-    let actual_html = &analysis.highlight_as_html(file_id, rainbow).unwrap();\n-    let expected_html = &read_text(&dst_file);\n-    fs::write(dst_file, &actual_html).unwrap();\n-    assert_eq_text!(expected_html, actual_html);\n-}\n-\n #[test]\n fn test_highlighting() {\n     check_highlighting(\n@@ -77,6 +65,8 @@ fn main() {\n     let y = &mut x;\n     let z = &y;\n \n+    let Foo { x: z, y } = Foo { x: z, y };\n+\n     y;\n }\n \n@@ -334,3 +324,15 @@ impl Foo {\n         false,\n     )\n }\n+\n+/// Highlights the code given by the `ra_fixture` argument, renders the\n+/// result as HTML, and compares it with the HTML file given as `snapshot`.\n+/// Note that the `snapshot` file is overwritten by the rendered HTML.\n+fn check_highlighting(ra_fixture: &str, snapshot: &str, rainbow: bool) {\n+    let (analysis, file_id) = single_file(ra_fixture);\n+    let dst_file = project_dir().join(snapshot);\n+    let actual_html = &analysis.highlight_as_html(file_id, rainbow).unwrap();\n+    let expected_html = &read_text(&dst_file);\n+    fs::write(dst_file, &actual_html).unwrap();\n+    assert_eq_text!(expected_html, actual_html);\n+}"}, {"sha": "3ef5e74b6997c07d9cad2606ba7486a69ca476ab", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/db1cadd4447f7c580c5436a4368a4de3c67fa37a/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1cadd4447f7c580c5436a4368a4de3c67fa37a/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=db1cadd4447f7c580c5436a4368a4de3c67fa37a", "patch": "@@ -78,6 +78,7 @@ impl Definition {\n     }\n }\n \n+#[derive(Debug)]\n pub enum NameClass {\n     Definition(Definition),\n     /// `None` in `if let None = Some(82) {}`\n@@ -131,9 +132,11 @@ pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option\n                 let local = sema.to_def(&it)?;\n \n                 if let Some(record_field_pat) = it.syntax().parent().and_then(ast::RecordFieldPat::cast) {\n-                    if let Some(field) = sema.resolve_record_field_pat(&record_field_pat) {\n-                        let field = Definition::Field(field);\n-                        return Some(NameClass::FieldShorthand { local, field });\n+                    if record_field_pat.name_ref().is_none() {\n+                        if let Some(field) = sema.resolve_record_field_pat(&record_field_pat) {\n+                            let field = Definition::Field(field);\n+                            return Some(NameClass::FieldShorthand { local, field });\n+                        }\n                     }\n                 }\n "}]}