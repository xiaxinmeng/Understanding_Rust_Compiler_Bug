{"sha": "82d8dd2f4bdcd61b08c6952e4e6ebdf4db70b299", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZDhkZDJmNGJkY2Q2MWIwOGM2OTUyZTRlNmViZGY0ZGI3MGIyOTk=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-04-28T04:59:03Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-04-28T04:59:03Z"}, "message": "Factor out a formatting routine for empty struct and tuple", "tree": {"sha": "fb56c706c13c369fbf447977802ffef15207caec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb56c706c13c369fbf447977802ffef15207caec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82d8dd2f4bdcd61b08c6952e4e6ebdf4db70b299", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82d8dd2f4bdcd61b08c6952e4e6ebdf4db70b299", "html_url": "https://github.com/rust-lang/rust/commit/82d8dd2f4bdcd61b08c6952e4e6ebdf4db70b299", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82d8dd2f4bdcd61b08c6952e4e6ebdf4db70b299/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9553654592fa9508c4a42b9c47a04fc3b4357d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9553654592fa9508c4a42b9c47a04fc3b4357d8", "html_url": "https://github.com/rust-lang/rust/commit/a9553654592fa9508c4a42b9c47a04fc3b4357d8"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "e6351a3aa154c5b7a99f356c9129402c2a1a23cb", "filename": "src/items.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/82d8dd2f4bdcd61b08c6952e4e6ebdf4db70b299/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82d8dd2f4bdcd61b08c6952e4e6ebdf4db70b299/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=82d8dd2f4bdcd61b08c6952e4e6ebdf4db70b299", "patch": "@@ -1242,6 +1242,41 @@ fn get_bytepos_after_visibility(vis: &ast::Visibility, default_span: Span) -> By\n     }\n }\n \n+// Format tuple or struct without any fields. We need to make sure that the comments\n+// inside the delimiters are preserved.\n+fn format_empty_struct_or_tuple(\n+    context: &RewriteContext,\n+    span: Span,\n+    offset: Indent,\n+    result: &mut String,\n+    opener: &str,\n+    closer: &str,\n+) {\n+    // 3 = \" {}\" or \"();\"\n+    let used_width = last_line_used_width(&result, offset.width()) + 3;\n+    if used_width > context.config.max_width() {\n+        result.push_str(&offset.to_string_with_newline(context.config))\n+    }\n+    result.push_str(opener);\n+    match rewrite_missing_comment(span, Shape::indented(offset, context.config), context) {\n+        Some(ref s) if s.is_empty() => (),\n+        Some(ref s) => {\n+            if !is_single_line(s) || first_line_contains_single_line_comment(s) {\n+                let nested_indent_str = offset\n+                    .block_indent(context.config)\n+                    .to_string_with_newline(context.config);\n+                result.push_str(&nested_indent_str);\n+            }\n+            result.push_str(s);\n+            if last_line_contains_single_line_comment(s) {\n+                result.push_str(&offset.to_string_with_newline(context.config));\n+            }\n+        }\n+        None => result.push_str(context.snippet(span)),\n+    }\n+    result.push_str(closer);\n+}\n+\n fn format_tuple_struct(\n     context: &RewriteContext,\n     struct_parts: &StructParts,"}, {"sha": "9ed1df35a42987fd111f3fbc5c5c0b547bb637ca", "filename": "src/utils.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82d8dd2f4bdcd61b08c6952e4e6ebdf4db70b299/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82d8dd2f4bdcd61b08c6952e4e6ebdf4db70b299/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=82d8dd2f4bdcd61b08c6952e4e6ebdf4db70b299", "patch": "@@ -133,6 +133,16 @@ pub fn outer_attributes(attrs: &[ast::Attribute]) -> Vec<ast::Attribute> {\n     filter_attributes(attrs, ast::AttrStyle::Outer)\n }\n \n+#[inline]\n+pub fn is_single_line(s: &str) -> bool {\n+    s.chars().find(|&c| c == '\\n').is_none()\n+}\n+\n+#[inline]\n+pub fn first_line_contains_single_line_comment(s: &str) -> bool {\n+    s.lines().next().map_or(false, |l| l.contains(\"//\"))\n+}\n+\n #[inline]\n pub fn last_line_contains_single_line_comment(s: &str) -> bool {\n     s.lines().last().map_or(false, |l| l.contains(\"//\"))"}]}