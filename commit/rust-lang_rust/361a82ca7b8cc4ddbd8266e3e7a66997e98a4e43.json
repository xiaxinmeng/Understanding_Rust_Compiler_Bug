{"sha": "361a82ca7b8cc4ddbd8266e3e7a66997e98a4e43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MWE4MmNhN2I4Y2M0ZGRiZDgyNjZlM2U3YTY2OTk3ZTk4YTRlNDM=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-06-01T23:25:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-01T23:25:13Z"}, "message": "Rollup merge of #51135 - estebank:sugg-7575, r=oli-obk\n\nTweak output on E0599 for assoc fn used as method\n\n - Use suggestion instead of `help` when possible\n - Add primary span label\n - Remove incorrect `help` suggestion using incorrect syntax\n - Do not refer to only one possible candidate as `candidate #1`, refer to it as `the candidate`", "tree": {"sha": "c5a2440ce5b99164afc5133cc4bf19d33cd357e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5a2440ce5b99164afc5133cc4bf19d33cd357e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/361a82ca7b8cc4ddbd8266e3e7a66997e98a4e43", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbEdXZCRBK7hj4Ov3rIwAAdHIIABLlaCen/Q+KlL8stGn66ZY5\n/gUzynwmAfwpLj/sLFo2MGqfRbiMN5w9MOfyQE7t6u+VAvHZicBWw+RRoyxPkQe/\nCy0ca73S2i+dGXtcGo736tbKGPn6HKv6hUGh0E0+ZqATx3K4VKx0heVbAIrKWpYO\noPPyGEuXJ9RH5UpTYdABz3u9C1fsv4OAZLg73/kIrdtHV3+tnxHIDmOBEGlm4Dzl\n4nEeL5e7oumrDutKbVWhTJ6zhzJWJb+AlcEoyyVrdbFJljVOWd7J5F92ScN2ooL0\n2VflA1Z6yF7OZBhk+iRgY85bzcqNvhX3OJ0syzADfFmkNOmdeZMMaHYRLaCINA8=\n=5ems\n-----END PGP SIGNATURE-----\n", "payload": "tree c5a2440ce5b99164afc5133cc4bf19d33cd357e9\nparent aa094a43cc041c8483b7c80fb0ec4be233dd01b7\nparent 59b03b16b991c6920ccb0f79acc1e5d04ccc2abd\nauthor Mark Simulacrum <mark.simulacrum@gmail.com> 1527895513 -0600\ncommitter GitHub <noreply@github.com> 1527895513 -0600\n\nRollup merge of #51135 - estebank:sugg-7575, r=oli-obk\n\nTweak output on E0599 for assoc fn used as method\n\n - Use suggestion instead of `help` when possible\n - Add primary span label\n - Remove incorrect `help` suggestion using incorrect syntax\n - Do not refer to only one possible candidate as `candidate #1`, refer to it as `the candidate`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/361a82ca7b8cc4ddbd8266e3e7a66997e98a4e43", "html_url": "https://github.com/rust-lang/rust/commit/361a82ca7b8cc4ddbd8266e3e7a66997e98a4e43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/361a82ca7b8cc4ddbd8266e3e7a66997e98a4e43/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa094a43cc041c8483b7c80fb0ec4be233dd01b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa094a43cc041c8483b7c80fb0ec4be233dd01b7", "html_url": "https://github.com/rust-lang/rust/commit/aa094a43cc041c8483b7c80fb0ec4be233dd01b7"}, {"sha": "59b03b16b991c6920ccb0f79acc1e5d04ccc2abd", "url": "https://api.github.com/repos/rust-lang/rust/commits/59b03b16b991c6920ccb0f79acc1e5d04ccc2abd", "html_url": "https://github.com/rust-lang/rust/commit/59b03b16b991c6920ccb0f79acc1e5d04ccc2abd"}], "stats": {"total": 82, "additions": 57, "deletions": 25}, "files": [{"sha": "6031984350b958b6f5045ee67d93f54df45666cc", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 47, "deletions": 15, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/361a82ca7b8cc4ddbd8266e3e7a66997e98a4e43/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361a82ca7b8cc4ddbd8266e3e7a66997e98a4e43/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=361a82ca7b8cc4ddbd8266e3e7a66997e98a4e43", "patch": "@@ -119,11 +119,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             }\n                         };\n \n-                        let note_str = format!(\"candidate #{} is defined in an impl{} \\\n-                                                for the type `{}`\",\n-                                               idx + 1,\n-                                               insertion,\n-                                               impl_ty);\n+                        let note_str = if sources.len() > 1 {\n+                            format!(\"candidate #{} is defined in an impl{} for the type `{}`\",\n+                                    idx + 1,\n+                                    insertion,\n+                                    impl_ty)\n+                        } else {\n+                            format!(\"the candidate is defined in an impl{} for the type `{}`\",\n+                                    insertion,\n+                                    impl_ty)\n+                        };\n                         if let Some(note_span) = note_span {\n                             // We have a span pointing to the method. Show note with snippet.\n                             err.span_note(self.tcx.sess.codemap().def_span(note_span), &note_str);\n@@ -137,11 +142,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             .unwrap();\n                         let item_span = self.tcx.sess.codemap()\n                             .def_span(self.tcx.def_span(item.def_id));\n-                        span_note!(err,\n-                                   item_span,\n-                                   \"candidate #{} is defined in the trait `{}`\",\n-                                   idx + 1,\n-                                   self.tcx.item_path_str(trait_did));\n+                        if sources.len() > 1 {\n+                            span_note!(err,\n+                                       item_span,\n+                                       \"candidate #{} is defined in the trait `{}`\",\n+                                       idx + 1,\n+                                       self.tcx.item_path_str(trait_did));\n+                        } else {\n+                            span_note!(err,\n+                                       item_span,\n+                                       \"the candidate is defined in the trait `{}`\",\n+                                       self.tcx.item_path_str(trait_did));\n+                        }\n                         err.help(&format!(\"to disambiguate the method call, write `{}::{}({}{})` \\\n                                           instead\",\n                                           self.tcx.item_path_str(trait_did),\n@@ -285,7 +297,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     tcx.sess.diagnostic().struct_dummy()\n                 };\n \n-                if let Some(def) =  actual.ty_adt_def() {\n+                if let Some(def) = actual.ty_adt_def() {\n                     if let Some(full_sp) = tcx.hir.span_if_local(def.did) {\n                         let def_sp = tcx.sess.codemap().def_span(full_sp);\n                         err.span_label(def_sp, format!(\"{} `{}` not found {}\",\n@@ -368,7 +380,22 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if !static_sources.is_empty() {\n                     err.note(\"found the following associated functions; to be used as methods, \\\n                               functions must have a `self` parameter\");\n-                    err.help(&format!(\"try with `{}::{}`\", self.ty_to_string(actual), item_name));\n+                    err.span_label(span, \"this is an associated function, not a method\");\n+                }\n+                if static_sources.len() == 1 {\n+                    if let Some(expr) = rcvr_expr {\n+                        err.span_suggestion(expr.span.to(span),\n+                                            \"use associated function syntax instead\",\n+                                            format!(\"{}::{}\",\n+                                                    self.ty_to_string(actual),\n+                                                    item_name));\n+                    } else {\n+                        err.help(&format!(\"try with `{}::{}`\",\n+                                          self.ty_to_string(actual), item_name));\n+                    }\n+\n+                    report_candidates(&mut err, static_sources);\n+                } else if static_sources.len() > 1 {\n \n                     report_candidates(&mut err, static_sources);\n                 }\n@@ -468,9 +495,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         } else {\n             let limit = if candidates.len() == 5 { 5 } else { 4 };\n             for (i, trait_did) in candidates.iter().take(limit).enumerate() {\n-                msg.push_str(&format!(\"\\ncandidate #{}: `use {};`\",\n-                                        i + 1,\n-                                        self.tcx.item_path_str(*trait_did)));\n+                if candidates.len() > 1 {\n+                    msg.push_str(&format!(\"\\ncandidate #{}: `use {};`\",\n+                                            i + 1,\n+                                            self.tcx.item_path_str(*trait_did)));\n+                } else {\n+                    msg.push_str(&format!(\"\\n`use {};`\",\n+                                            self.tcx.item_path_str(*trait_did)));\n+                }\n             }\n             if candidates.len() > limit {\n                 msg.push_str(&format!(\"\\nand {} others\", candidates.len() - limit));"}, {"sha": "b3d82e9094ba732ebc6001ee6a355914943984bf", "filename": "src/test/ui/hygiene/no_implicit_prelude.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/361a82ca7b8cc4ddbd8266e3e7a66997e98a4e43/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/361a82ca7b8cc4ddbd8266e3e7a66997e98a4e43/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr?ref=361a82ca7b8cc4ddbd8266e3e7a66997e98a4e43", "patch": "@@ -22,7 +22,7 @@ LL |         ().clone() //~ ERROR no method named `clone` found\n    |\n    = help: items from traits can only be used if the trait is in scope\n    = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n-           candidate #1: `use std::clone::Clone;`\n+           `use std::clone::Clone;`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1b2975bcf1c284f3488462cc0099a79cdb1913d4", "filename": "src/test/ui/hygiene/trait_items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/361a82ca7b8cc4ddbd8266e3e7a66997e98a4e43/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/361a82ca7b8cc4ddbd8266e3e7a66997e98a4e43/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr?ref=361a82ca7b8cc4ddbd8266e3e7a66997e98a4e43", "patch": "@@ -9,7 +9,7 @@ LL |     pub macro m() { ().f() } //~ ERROR no method named `f` found for type `\n    |\n    = help: items from traits can only be used if the trait is in scope\n    = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n-           candidate #1: `use foo::T;`\n+           `use foo::T;`\n \n error: aborting due to previous error\n "}, {"sha": "e31134f843b72e7913434879f2589394309cc8b8", "filename": "src/test/ui/span/issue-7575.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/361a82ca7b8cc4ddbd8266e3e7a66997e98a4e43/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/361a82ca7b8cc4ddbd8266e3e7a66997e98a4e43/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr?ref=361a82ca7b8cc4ddbd8266e3e7a66997e98a4e43", "patch": "@@ -2,10 +2,9 @@ error[E0599]: no method named `f9` found for type `usize` in the current scope\n   --> $DIR/issue-7575.rs:74:18\n    |\n LL |     u.f8(42) + u.f9(342) + m.fff(42)\n-   |                  ^^\n+   |                  ^^ this is an associated function, not a method\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n-   = help: try with `usize::f9`\n note: candidate #1 is defined in the trait `CtxtFn`\n   --> $DIR/issue-7575.rs:16:5\n    |\n@@ -37,11 +36,13 @@ LL | struct Myisize(isize);\n    | ---------------------- method `fff` not found for this\n ...\n LL |     u.f8(42) + u.f9(342) + m.fff(42)\n-   |                              ^^^\n+   |                            --^^^\n+   |                            | |\n+   |                            | this is an associated function, not a method\n+   |                            help: use associated function syntax instead: `Myisize::fff`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n-   = help: try with `Myisize::fff`\n-note: candidate #1 is defined in an impl for the type `Myisize`\n+note: the candidate is defined in an impl for the type `Myisize`\n   --> $DIR/issue-7575.rs:51:5\n    |\n LL |     fn fff(i: isize) -> isize {\n@@ -51,11 +52,10 @@ error[E0599]: no method named `is_str` found for type `T` in the current scope\n   --> $DIR/issue-7575.rs:82:7\n    |\n LL |     t.is_str()\n-   |       ^^^^^^\n+   |       ^^^^^^ this is an associated function, not a method\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n-   = help: try with `T::is_str`\n-note: candidate #1 is defined in the trait `ManyImplTrait`\n+note: the candidate is defined in the trait `ManyImplTrait`\n   --> $DIR/issue-7575.rs:57:5\n    |\n LL |     fn is_str() -> bool {"}]}