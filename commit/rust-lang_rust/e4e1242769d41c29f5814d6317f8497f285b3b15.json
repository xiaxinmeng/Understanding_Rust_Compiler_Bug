{"sha": "e4e1242769d41c29f5814d6317f8497f285b3b15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZTEyNDI3NjlkNDFjMjlmNTgxNGQ2MzE3Zjg0OTdmMjg1YjNiMTU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-02-16T16:37:32Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-09T14:45:28Z"}, "message": "Print fn type parameters for TyFnDef.", "tree": {"sha": "4e369fa7ce1d594abcee3a8f49248b490d4e729e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e369fa7ce1d594abcee3a8f49248b490d4e729e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4e1242769d41c29f5814d6317f8497f285b3b15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4e1242769d41c29f5814d6317f8497f285b3b15", "html_url": "https://github.com/rust-lang/rust/commit/e4e1242769d41c29f5814d6317f8497f285b3b15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4e1242769d41c29f5814d6317f8497f285b3b15/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e", "html_url": "https://github.com/rust-lang/rust/commit/ffa0860467aff2c1e5e2f6594cd7cf554da26c5e"}], "stats": {"total": 60, "additions": 46, "deletions": 14}, "files": [{"sha": "8fd784cbde7a7e0cc8f05fe46c435e4d3fae93e1", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e4e1242769d41c29f5814d6317f8497f285b3b15/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e1242769d41c29f5814d6317f8497f285b3b15/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=e4e1242769d41c29f5814d6317f8497f285b3b15", "patch": "@@ -822,10 +822,19 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                 }\n \n                 try!(write!(f, \"{}\", bare_fn.sig.0));\n-\n-                write!(f, \" {{{}}}\", ty::tls::with(|tcx| {\n-                    tcx.item_path_str(def_id)\n-                }))\n+                try!(ty::tls::with(|tcx| {\n+                    write!(f, \" {{{}\", tcx.item_path_str(def_id))\n+                }));\n+\n+                let tps = substs.types.get_slice(subst::FnSpace);\n+                if tps.len() >= 1 {\n+                    try!(write!(f, \"::<{}\", tps[0]));\n+                    for &ty in &tps[1..] {\n+                        try!(write!(f, \", {}\", ty));\n+                    }\n+                    try!(write!(f, \">\"));\n+                }\n+                write!(f, \"}}\")\n             }\n             TyFnPtr(ref bare_fn) => {\n                 if bare_fn.unsafety == hir::Unsafety::Unsafe {"}, {"sha": "775e22f0428b91b78e96a6de535b3667994545b2", "filename": "src/test/compile-fail/fn-item-type.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e4e1242769d41c29f5814d6317f8497f285b3b15/src%2Ftest%2Fcompile-fail%2Ffn-item-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e1242769d41c29f5814d6317f8497f285b3b15/src%2Ftest%2Fcompile-fail%2Ffn-item-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-item-type.rs?ref=e4e1242769d41c29f5814d6317f8497f285b3b15", "patch": "@@ -11,23 +11,44 @@\n // Test that the types of distinct fn items are not compatible by\n // default. See also `run-pass/fn-item-type-*.rs`.\n \n-fn foo(x: isize) -> isize { x * 2 }\n-fn bar(x: isize) -> isize { x * 4 }\n+fn foo<T>(x: isize) -> isize { x * 2 }\n+fn bar<T>(x: isize) -> isize { x * 4 }\n \n fn eq<T>(x: T, y: T) { }\n \n+trait Foo { fn foo() { /* this is a default fn */ } }\n+impl<T> Foo for T { /* `foo` is still default here */ }\n+\n fn main() {\n-    let f = if true { foo } else { bar };\n+    let f = if true { foo::<u8> } else { bar::<u8> };\n     //~^ ERROR if and else have incompatible types\n-    //~| expected `fn(isize) -> isize {foo}`\n-    //~| found `fn(isize) -> isize {bar}`\n+    //~| expected `fn(isize) -> isize {foo::<u8>}`\n+    //~| found `fn(isize) -> isize {bar::<u8>}`\n     //~| expected fn item,\n     //~| found a different fn item\n \n-    eq(foo, bar);\n+    eq(foo::<u8>, bar::<u8>);\n     //~^ ERROR mismatched types\n-    //~|  expected `fn(isize) -> isize {foo}`\n-    //~|  found `fn(isize) -> isize {bar}`\n+    //~|  expected `fn(isize) -> isize {foo::<u8>}`\n+    //~|  found `fn(isize) -> isize {bar::<u8>}`\n     //~|  expected fn item\n     //~|  found a different fn item\n+\n+    eq(foo::<u8>, foo::<i8>);\n+    //~^ ERROR mismatched types\n+    //~|  expected `fn(isize) -> isize {foo::<u8>}`\n+    //~|  found `fn(isize) -> isize {foo::<i8>}`\n+\n+    eq(bar::<String>, bar::<Vec<u8>>);\n+    //~^ ERROR mismatched types\n+    //~|  expected `fn(isize) -> isize {bar::<collections::string::String>}`\n+    //~|  found `fn(isize) -> isize {bar::<collections::vec::Vec<u8>>}`\n+    //~|  expected struct `collections::string::String`\n+    //~|  found struct `collections::vec::Vec`\n+\n+    // Make sure we distinguish between trait methods correctly.\n+    eq(<u8 as Foo>::foo, <u16 as Foo>::foo);\n+    //~^ ERROR mismatched types\n+    //~|  expected `fn() {Foo::foo}`\n+    //~|  found `fn() {Foo::foo}`\n }"}, {"sha": "0347631aeb336c99a765b3faea25fbf33c965799", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4e1242769d41c29f5814d6317f8497f285b3b15/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/e4e1242769d41c29f5814d6317f8497f285b3b15/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=e4e1242769d41c29f5814d6317f8497f285b3b15", "patch": "@@ -86,8 +86,10 @@\n pub fn use_id() {\n     let _ =\n         ((id::<[i32; (3 as usize)]> as\n-             fn([i32; 3]) -> [i32; 3] {id})(([(1 as i32), (2 as i32),\n-                                              (3 as i32)] as [i32; 3])) as\n+             fn([i32; 3]) -> [i32; 3] {id::<[i32; 3]>})(([(1 as i32),\n+                                                          (2 as i32),\n+                                                          (3 as i32)] as\n+                                                            [i32; 3])) as\n             [i32; 3]);\n }\n fn main() { }"}]}