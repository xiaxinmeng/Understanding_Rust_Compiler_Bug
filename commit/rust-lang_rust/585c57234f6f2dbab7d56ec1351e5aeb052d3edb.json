{"sha": "585c57234f6f2dbab7d56ec1351e5aeb052d3edb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NWM1NzIzNGY2ZjJkYmFiN2Q1NmVjMTM1MWU1YWViMDUyZDNlZGI=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-03-25T06:02:42Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-03-25T06:02:42Z"}, "message": "rustdoc: Show purity", "tree": {"sha": "462b98708402137fc2139c132e1206505f9084a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/462b98708402137fc2139c132e1206505f9084a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/585c57234f6f2dbab7d56ec1351e5aeb052d3edb", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/585c57234f6f2dbab7d56ec1351e5aeb052d3edb", "html_url": "https://github.com/rust-lang/rust/commit/585c57234f6f2dbab7d56ec1351e5aeb052d3edb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/585c57234f6f2dbab7d56ec1351e5aeb052d3edb/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a56ec8c1342453a88be79e192a11501844375d40", "url": "https://api.github.com/repos/rust-lang/rust/commits/a56ec8c1342453a88be79e192a11501844375d40", "html_url": "https://github.com/rust-lang/rust/commit/a56ec8c1342453a88be79e192a11501844375d40"}], "stats": {"total": 40, "additions": 17, "deletions": 23}, "files": [{"sha": "8289de4e4e712877a2aaa90e76ef092b53e0c161", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/585c57234f6f2dbab7d56ec1351e5aeb052d3edb/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585c57234f6f2dbab7d56ec1351e5aeb052d3edb/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=585c57234f6f2dbab7d56ec1351e5aeb052d3edb", "patch": "@@ -69,13 +69,13 @@ fn get_fn_sig(srv: astsrv::Srv, fn_id: doc::AstId) -> Option<~str> {\n         match ctxt.ast_map.get(&fn_id) {\n           ast_map::node_item(@ast::item {\n             ident: ident,\n-            node: ast::item_fn(ref decl, _, ref tys, _), _\n+            node: ast::item_fn(ref decl, purity, ref tys, _), _\n           }, _) |\n           ast_map::node_foreign_item(@ast::foreign_item {\n             ident: ident,\n-            node: ast::foreign_item_fn(ref decl, _, ref tys), _\n+            node: ast::foreign_item_fn(ref decl, purity, ref tys), _\n           }, _, _, _) => {\n-            Some(pprust::fun_to_str(decl, ident, None, tys,\n+            Some(pprust::fun_to_str(decl, purity, ident, None, tys,\n                                     extract::interner()))\n           }\n           _ => fail!(~\"get_fn_sig: fn_id not bound to a fn item\")\n@@ -214,6 +214,7 @@ fn get_method_sig(\n                     ast::required(ty_m) => {\n                       Some(pprust::fun_to_str(\n                           &ty_m.decl,\n+                          ty_m.purity,\n                           ty_m.ident,\n                           Some(ty_m.self_ty.node),\n                           &ty_m.generics,\n@@ -223,6 +224,7 @@ fn get_method_sig(\n                     ast::provided(m) => {\n                       Some(pprust::fun_to_str(\n                           &m.decl,\n+                          m.purity,\n                           m.ident,\n                           Some(m.self_ty.node),\n                           &m.generics,\n@@ -243,6 +245,7 @@ fn get_method_sig(\n                 Some(method) => {\n                     Some(pprust::fun_to_str(\n                         &method.decl,\n+                        method.purity,\n                         method.ident,\n                         Some(method.self_ty.node),\n                         &method.generics,"}, {"sha": "9a9834c488b19dd70fa99e2158f83b6ca21a070e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/585c57234f6f2dbab7d56ec1351e5aeb052d3edb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585c57234f6f2dbab7d56ec1351e5aeb052d3edb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=585c57234f6f2dbab7d56ec1351e5aeb052d3edb", "patch": "@@ -180,12 +180,12 @@ pub fn path_to_str(&&p: @ast::path, intr: @ident_interner) -> ~str {\n     to_str(p, |a,b| print_path(a, b, false), intr)\n }\n \n-pub fn fun_to_str(decl: &ast::fn_decl, name: ast::ident,\n+pub fn fun_to_str(decl: &ast::fn_decl, purity: ast::purity, name: ast::ident,\n                   opt_self_ty: Option<ast::self_ty_>,\n                   generics: &ast::Generics, intr: @ident_interner) -> ~str {\n     do io::with_str_writer |wr| {\n         let s = rust_printer(wr, intr);\n-        print_fn(s, decl, None, name, generics, opt_self_ty, ast::inherited);\n+        print_fn(s, decl, purity, name, generics, opt_self_ty, ast::inherited);\n         end(s); // Close the head box\n         end(s); // Close the outer box\n         eof(s.s);\n@@ -441,7 +441,7 @@ pub fn print_foreign_item(s: @ps, item: @ast::foreign_item) {\n     print_outer_attributes(s, item.attrs);\n     match item.node {\n       ast::foreign_item_fn(ref decl, purity, ref generics) => {\n-        print_fn(s, decl, Some(purity), item.ident, generics, None,\n+        print_fn(s, decl, purity, item.ident, generics, None,\n                  ast::inherited);\n         end(s); // end head-ibox\n         word(s.s, ~\";\");\n@@ -484,7 +484,7 @@ pub fn print_item(s: @ps, &&item: @ast::item) {\n         print_fn(\n             s,\n             decl,\n-            Some(purity),\n+            purity,\n             item.ident,\n             typarams,\n             None,\n@@ -815,7 +815,7 @@ pub fn print_method(s: @ps, meth: @ast::method) {\n     hardbreak_if_not_bol(s);\n     maybe_print_comment(s, meth.span.lo);\n     print_outer_attributes(s, meth.attrs);\n-    print_fn(s, &meth.decl, Some(meth.purity),\n+    print_fn(s, &meth.decl, meth.purity,\n              meth.ident, &meth.generics, Some(meth.self_ty.node),\n              meth.vis);\n     word(s.s, ~\" \");\n@@ -1663,7 +1663,7 @@ pub fn print_self_ty(s: @ps, self_ty: ast::self_ty_) -> bool {\n \n pub fn print_fn(s: @ps,\n                 decl: &ast::fn_decl,\n-                purity: Option<ast::purity>,\n+                purity: ast::purity,\n                 name: ast::ident,\n                 generics: &ast::Generics,\n                 opt_self_ty: Option<ast::self_ty_>,\n@@ -2158,16 +2158,6 @@ pub fn next_comment(s: @ps) -> Option<comments::cmnt> {\n     }\n }\n \n-pub fn print_opt_purity(s: @ps, opt_purity: Option<ast::purity>) {\n-    match opt_purity {\n-        Some(ast::impure_fn) => { }\n-        Some(purity) => {\n-            word_nbsp(s, purity_to_str(purity));\n-        }\n-        None => {}\n-    }\n-}\n-\n pub fn print_opt_abi(s: @ps, opt_abi: Option<ast::Abi>) {\n     match opt_abi {\n         Some(ast::RustAbi) => { word_nbsp(s, ~\"extern\"); }\n@@ -2186,12 +2176,12 @@ pub fn print_opt_sigil(s: @ps, opt_sigil: Option<ast::Sigil>) {\n \n pub fn print_fn_header_info(s: @ps,\n                             opt_sty: Option<ast::self_ty_>,\n-                            opt_purity: Option<ast::purity>,\n+                            purity: ast::purity,\n                             onceness: ast::Onceness,\n                             opt_sigil: Option<ast::Sigil>,\n                             vis: ast::visibility) {\n     word(s.s, visibility_qualified(vis, ~\"\"));\n-    print_opt_purity(s, opt_purity);\n+    print_purity(s, purity);\n     print_onceness(s, onceness);\n     word(s.s, ~\"fn\");\n     print_opt_sigil(s, opt_sigil);\n@@ -2264,8 +2254,9 @@ pub mod test {\n             cf: ast::return_val\n         };\n         let generics = ast_util::empty_generics();\n-        assert_eq!(&fun_to_str(&decl, abba_ident, None, &generics, mock_interner),\n-                     &~\"fn abba()\");\n+        assert_eq!(&fun_to_str(&decl, ast::impure_fn, abba_ident,\n+                               None, &generics, mock_interner),\n+                   &~\"fn abba()\");\n     }\n \n     #[test]"}]}