{"sha": "5e27ee76b652dc7fbe5da1d213580c9ada0d65e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMjdlZTc2YjY1MmRjN2ZiZTVkYTFkMjEzNTgwYzlhZGEwZDY1ZTE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-10T10:04:07Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-23T21:50:20Z"}, "message": "use MaybeUninit in core::ptr::swap_nonoverlapping_bytes\n\nCode by @japaric, I just split it into individual commits", "tree": {"sha": "e1c812348f80a9492a0c5cc1b98fadb784f9a60c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1c812348f80a9492a0c5cc1b98fadb784f9a60c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e27ee76b652dc7fbe5da1d213580c9ada0d65e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e27ee76b652dc7fbe5da1d213580c9ada0d65e1", "html_url": "https://github.com/rust-lang/rust/commit/5e27ee76b652dc7fbe5da1d213580c9ada0d65e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e27ee76b652dc7fbe5da1d213580c9ada0d65e1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fb03d0650825ba254f67fdd5ac94e83e2622415", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fb03d0650825ba254f67fdd5ac94e83e2622415", "html_url": "https://github.com/rust-lang/rust/commit/3fb03d0650825ba254f67fdd5ac94e83e2622415"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "947b67e4e9af318eec28d439c05a9a87d871e795", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e27ee76b652dc7fbe5da1d213580c9ada0d65e1/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e27ee76b652dc7fbe5da1d213580c9ada0d65e1/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=5e27ee76b652dc7fbe5da1d213580c9ada0d65e1", "patch": "@@ -389,8 +389,8 @@ unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n     while i + block_size <= len {\n         // Create some uninitialized memory as scratch space\n         // Declaring `t` here avoids aligning the stack when this loop is unused\n-        let mut t: Block = mem::uninitialized();\n-        let t = &mut t as *mut _ as *mut u8;\n+        let mut t = mem::MaybeUninit::<Block>::uninitialized();\n+        let t = t.as_mut_ptr() as *mut u8;\n         let x = x.add(i);\n         let y = y.add(i);\n \n@@ -404,10 +404,10 @@ unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n \n     if i < len {\n         // Swap any remaining bytes\n-        let mut t: UnalignedBlock = mem::uninitialized();\n+        let mut t = mem::MaybeUninit::<UnalignedBlock>::uninitialized();\n         let rem = len - i;\n \n-        let t = &mut t as *mut _ as *mut u8;\n+        let t = t.as_mut_ptr() as *mut u8;\n         let x = x.add(i);\n         let y = y.add(i);\n "}]}