{"sha": "a219ad64a6ee025b9a5c83de390280f818cd81c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMTlhZDY0YTZlZTAyNWI5YTVjODNkZTM5MDI4MGY4MThjZDgxYzY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-19T10:34:31Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-19T10:41:12Z"}, "message": "extend `is_ty_or_ty_ctxt` to self types", "tree": {"sha": "895a5265dc6809ccd958c88f47fa5210aaa752fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/895a5265dc6809ccd958c88f47fa5210aaa752fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a219ad64a6ee025b9a5c83de390280f818cd81c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a219ad64a6ee025b9a5c83de390280f818cd81c6", "html_url": "https://github.com/rust-lang/rust/commit/a219ad64a6ee025b9a5c83de390280f818cd81c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a219ad64a6ee025b9a5c83de390280f818cd81c6/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7d5080ec3c21c5418649a1c5b3f830ff37734f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7d5080ec3c21c5418649a1c5b3f830ff37734f1", "html_url": "https://github.com/rust-lang/rust/commit/f7d5080ec3c21c5418649a1c5b3f830ff37734f1"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "2bac4517409b42e4e2fc5c4fcd6eca9cc6129596", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a219ad64a6ee025b9a5c83de390280f818cd81c6/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a219ad64a6ee025b9a5c83de390280f818cd81c6/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=a219ad64a6ee025b9a5c83de390280f818cd81c6", "patch": "@@ -5,7 +5,9 @@ use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext}\n use rustc_ast::{Item, ItemKind};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n+use rustc_hir::def::Res;\n use rustc_hir::{GenericArg, HirId, MutTy, Mutability, Path, PathSegment, QPath, Ty, TyKind};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::symbol::{sym, Ident, Symbol};\n@@ -177,11 +179,25 @@ fn lint_ty_kind_usage(cx: &LateContext<'_>, segment: &PathSegment<'_>) -> bool {\n fn is_ty_or_ty_ctxt(cx: &LateContext<'_>, ty: &Ty<'_>) -> Option<String> {\n     if let TyKind::Path(qpath) = &ty.kind {\n         if let QPath::Resolved(_, path) = qpath {\n-            let did = path.res.opt_def_id()?;\n-            if cx.tcx.is_diagnostic_item(sym::Ty, did) {\n-                return Some(format!(\"Ty{}\", gen_args(path.segments.last().unwrap())));\n-            } else if cx.tcx.is_diagnostic_item(sym::TyCtxt, did) {\n-                return Some(format!(\"TyCtxt{}\", gen_args(path.segments.last().unwrap())));\n+            match path.res {\n+                Res::Def(_, did) => {\n+                    if cx.tcx.is_diagnostic_item(sym::Ty, did) {\n+                        return Some(format!(\"Ty{}\", gen_args(path.segments.last().unwrap())));\n+                    } else if cx.tcx.is_diagnostic_item(sym::TyCtxt, did) {\n+                        return Some(format!(\"TyCtxt{}\", gen_args(path.segments.last().unwrap())));\n+                    }\n+                }\n+                // Only lint on `&Ty` and `&TyCtxt` if it is used outside of a trait.\n+                Res::SelfTy(None, Some((did, _))) => {\n+                    if let ty::Adt(adt, substs) = cx.tcx.type_of(did).kind() {\n+                        if cx.tcx.is_diagnostic_item(sym::Ty, adt.did) {\n+                            return Some(format!(\"Ty<{}>\", substs[0]));\n+                        } else if cx.tcx.is_diagnostic_item(sym::TyCtxt, adt.did) {\n+                            return Some(format!(\"TyCtxt<{}>\", substs[0]));\n+                        }\n+                    }\n+                }\n+                _ => (),\n             }\n         }\n     }"}]}