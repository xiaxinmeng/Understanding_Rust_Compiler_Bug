{"sha": "4529979330038c6accce45533f34aae681a6017c", "node_id": "C_kwDOAAsO6NoAKDQ1Mjk5NzkzMzAwMzhjNmFjY2NlNDU1MzNmMzRhYWU2ODFhNjAxN2M", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-01T13:30:03Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-01T19:00:32Z"}, "message": "Introduce RelPath", "tree": {"sha": "11b9f9cd9d87d285b4fab0665664e41b489be246", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11b9f9cd9d87d285b4fab0665664e41b489be246"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4529979330038c6accce45533f34aae681a6017c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4529979330038c6accce45533f34aae681a6017c", "html_url": "https://github.com/rust-lang/rust/commit/4529979330038c6accce45533f34aae681a6017c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4529979330038c6accce45533f34aae681a6017c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e75dfef4d4002dcb8e2daaf99b9d0ce922053f73", "url": "https://api.github.com/repos/rust-lang/rust/commits/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73", "html_url": "https://github.com/rust-lang/rust/commit/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73"}], "stats": {"total": 329, "additions": 165, "deletions": 164}, "files": [{"sha": "acb2bd5aeae7ba31b8da5e477849c5161bae3750", "filename": "build_system/abi_cafe.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4529979330038c6accce45533f34aae681a6017c/build_system%2Fabi_cafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529979330038c6accce45533f34aae681a6017c/build_system%2Fabi_cafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fabi_cafe.rs?ref=4529979330038c6accce45533f34aae681a6017c", "patch": "@@ -9,12 +9,11 @@ use super::SysrootKind;\n pub(crate) static ABI_CAFE_REPO: GitRepo =\n     GitRepo::github(\"Gankra\", \"abi-cafe\", \"4c6dc8c9c687e2b3a760ff2176ce236872b37212\", \"abi-cafe\");\n \n-static ABI_CAFE: CargoProject = CargoProject::git(&ABI_CAFE_REPO, \".\", \"abi_cafe\");\n+static ABI_CAFE: CargoProject = CargoProject::new(&ABI_CAFE_REPO.source_dir(), \"abi_cafe\");\n \n pub(crate) fn run(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n-    dist_dir: &Path,\n     cg_clif_dylib: &Path,\n     host_triple: &str,\n     target_triple: &str,\n@@ -30,14 +29,7 @@ pub(crate) fn run(\n     }\n \n     eprintln!(\"Building sysroot for abi-cafe\");\n-    build_sysroot::build_sysroot(\n-        channel,\n-        sysroot_kind,\n-        dist_dir,\n-        cg_clif_dylib,\n-        host_triple,\n-        target_triple,\n-    );\n+    build_sysroot::build_sysroot(channel, sysroot_kind, cg_clif_dylib, host_triple, target_triple);\n \n     eprintln!(\"Running abi-cafe\");\n "}, {"sha": "5cbeb7d0f9f68e77ffb23981f3a954f47e501534", "filename": "build_system/build_backend.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4529979330038c6accce45533f34aae681a6017c/build_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529979330038c6accce45533f34aae681a6017c/build_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_backend.rs?ref=4529979330038c6accce45533f34aae681a6017c", "patch": "@@ -1,10 +1,11 @@\n use std::env;\n use std::path::PathBuf;\n \n+use super::path::RelPath;\n use super::rustc_info::get_file_name;\n use super::utils::{is_ci, CargoProject, Compiler};\n \n-static CG_CLIF: CargoProject = CargoProject::local(\".\", \"cg_clif\");\n+static CG_CLIF: CargoProject = CargoProject::new(&RelPath::SOURCE, \"cg_clif\");\n \n pub(crate) fn build_backend(\n     channel: &str,"}, {"sha": "fcd668b8aa58c0813c7f4c842943c7919ddbd864", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 32, "deletions": 40, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/4529979330038c6accce45533f34aae681a6017c/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529979330038c6accce45533f34aae681a6017c/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=4529979330038c6accce45533f34aae681a6017c", "patch": "@@ -2,36 +2,39 @@ use std::fs;\n use std::path::Path;\n use std::process::{self, Command};\n \n+use super::path::RelPath;\n use super::rustc_info::{get_file_name, get_rustc_version, get_wrapper_file_name};\n use super::utils::{spawn_and_wait, try_hard_link, CargoProject, Compiler};\n use super::SysrootKind;\n \n+static DIST_DIR: RelPath = RelPath::DIST;\n+static BIN_DIR: RelPath = RelPath::DIST.join(\"bin\");\n+static LIB_DIR: RelPath = RelPath::DIST.join(\"lib\");\n+static RUSTLIB_DIR: RelPath = LIB_DIR.join(\"rustlib\");\n+\n pub(crate) fn build_sysroot(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n-    dist_dir: &Path,\n     cg_clif_dylib_src: &Path,\n     host_triple: &str,\n     target_triple: &str,\n ) {\n     eprintln!(\"[BUILD] sysroot {:?}\", sysroot_kind);\n \n-    if dist_dir.exists() {\n-        fs::remove_dir_all(dist_dir).unwrap();\n-    }\n-    fs::create_dir_all(dist_dir.join(\"bin\")).unwrap();\n-    fs::create_dir_all(dist_dir.join(\"lib\")).unwrap();\n+    DIST_DIR.ensure_fresh();\n+    BIN_DIR.ensure_exists();\n+    LIB_DIR.ensure_exists();\n \n     // Copy the backend\n-    let cg_clif_dylib_path = dist_dir\n-        .join(if cfg!(windows) {\n-            // Windows doesn't have rpath support, so the cg_clif dylib needs to be next to the\n-            // binaries.\n-            \"bin\"\n-        } else {\n-            \"lib\"\n-        })\n-        .join(get_file_name(\"rustc_codegen_cranelift\", \"dylib\"));\n+    let cg_clif_dylib_path = if cfg!(windows) {\n+        // Windows doesn't have rpath support, so the cg_clif dylib needs to be next to the\n+        // binaries.\n+        BIN_DIR\n+    } else {\n+        LIB_DIR\n+    }\n+    .to_path()\n+    .join(get_file_name(\"rustc_codegen_cranelift\", \"dylib\"));\n     try_hard_link(cg_clif_dylib_src, &cg_clif_dylib_path);\n \n     // Build and copy rustc and cargo wrappers\n@@ -40,18 +43,17 @@ pub(crate) fn build_sysroot(\n \n         let mut build_cargo_wrapper_cmd = Command::new(\"rustc\");\n         build_cargo_wrapper_cmd\n-            .arg(Path::new(\"scripts\").join(format!(\"{wrapper}.rs\")))\n+            .arg(RelPath::SCRIPTS.to_path().join(&format!(\"{wrapper}.rs\")))\n             .arg(\"-o\")\n-            .arg(dist_dir.join(wrapper_name))\n+            .arg(DIST_DIR.to_path().join(wrapper_name))\n             .arg(\"-g\");\n         spawn_and_wait(build_cargo_wrapper_cmd);\n     }\n \n     let default_sysroot = super::rustc_info::get_default_sysroot();\n \n-    let rustlib = dist_dir.join(\"lib\").join(\"rustlib\");\n-    let host_rustlib_lib = rustlib.join(host_triple).join(\"lib\");\n-    let target_rustlib_lib = rustlib.join(target_triple).join(\"lib\");\n+    let host_rustlib_lib = RUSTLIB_DIR.to_path().join(host_triple).join(\"lib\");\n+    let target_rustlib_lib = RUSTLIB_DIR.to_path().join(target_triple).join(\"lib\");\n     fs::create_dir_all(&host_rustlib_lib).unwrap();\n     fs::create_dir_all(&target_rustlib_lib).unwrap();\n \n@@ -112,13 +114,7 @@ pub(crate) fn build_sysroot(\n             }\n         }\n         SysrootKind::Clif => {\n-            build_clif_sysroot_for_triple(\n-                channel,\n-                dist_dir,\n-                host_triple,\n-                &cg_clif_dylib_path,\n-                None,\n-            );\n+            build_clif_sysroot_for_triple(channel, host_triple, &cg_clif_dylib_path, None);\n \n             if host_triple != target_triple {\n                 // When cross-compiling it is often necessary to manually pick the right linker\n@@ -127,13 +123,7 @@ pub(crate) fn build_sysroot(\n                 } else {\n                     None\n                 };\n-                build_clif_sysroot_for_triple(\n-                    channel,\n-                    dist_dir,\n-                    target_triple,\n-                    &cg_clif_dylib_path,\n-                    linker,\n-                );\n+                build_clif_sysroot_for_triple(channel, target_triple, &cg_clif_dylib_path, linker);\n             }\n \n             // Copy std for the host to the lib dir. This is necessary for the jit mode to find\n@@ -142,23 +132,25 @@ pub(crate) fn build_sysroot(\n                 let file = file.unwrap().path();\n                 let filename = file.file_name().unwrap().to_str().unwrap();\n                 if filename.contains(\"std-\") && !filename.contains(\".rlib\") {\n-                    try_hard_link(&file, dist_dir.join(\"lib\").join(file.file_name().unwrap()));\n+                    try_hard_link(&file, LIB_DIR.to_path().join(file.file_name().unwrap()));\n                 }\n             }\n         }\n     }\n }\n \n-static STANDARD_LIBRARY: CargoProject = CargoProject::local(\"build_sysroot\", \"build_sysroot\");\n+// FIXME move to download/ or dist/\n+pub(crate) static SYSROOT_RUSTC_VERSION: RelPath = RelPath::BUILD_SYSROOT.join(\"rustc_version\");\n+pub(crate) static SYSROOT_SRC: RelPath = RelPath::BUILD_SYSROOT.join(\"sysroot_src\");\n+static STANDARD_LIBRARY: CargoProject = CargoProject::new(&RelPath::BUILD_SYSROOT, \"build_sysroot\");\n \n fn build_clif_sysroot_for_triple(\n     channel: &str,\n-    dist_dir: &Path,\n     triple: &str,\n     cg_clif_dylib_path: &Path,\n     linker: Option<&str>,\n ) {\n-    match fs::read_to_string(Path::new(\"build_sysroot\").join(\"rustc_version\")) {\n+    match fs::read_to_string(SYSROOT_RUSTC_VERSION.to_path()) {\n         Err(e) => {\n             eprintln!(\"Failed to get rustc version for patched sysroot source: {}\", e);\n             eprintln!(\"Hint: Try `./y.rs prepare` to patch the sysroot source\");\n@@ -189,7 +181,7 @@ fn build_clif_sysroot_for_triple(\n     // Build sysroot\n     let mut rustflags = \"-Zforce-unstable-if-unmarked -Cpanic=abort\".to_string();\n     rustflags.push_str(&format!(\" -Zcodegen-backend={}\", cg_clif_dylib_path.to_str().unwrap()));\n-    rustflags.push_str(&format!(\" --sysroot={}\", dist_dir.to_str().unwrap()));\n+    rustflags.push_str(&format!(\" --sysroot={}\", DIST_DIR.to_path().to_str().unwrap()));\n     if channel == \"release\" {\n         rustflags.push_str(\" -Zmir-opt-level=3\");\n     }\n@@ -218,7 +210,7 @@ fn build_clif_sysroot_for_triple(\n         };\n         try_hard_link(\n             entry.path(),\n-            dist_dir.join(\"lib\").join(\"rustlib\").join(triple).join(\"lib\").join(entry.file_name()),\n+            RUSTLIB_DIR.to_path().join(triple).join(\"lib\").join(entry.file_name()),\n         );\n     }\n }"}, {"sha": "cc789c8f10b65b9686f898f66211e67df50e8762", "filename": "build_system/mod.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4529979330038c6accce45533f34aae681a6017c/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529979330038c6accce45533f34aae681a6017c/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=4529979330038c6accce45533f34aae681a6017c", "patch": "@@ -8,6 +8,7 @@ mod abi_cafe;\n mod build_backend;\n mod build_sysroot;\n mod config;\n+mod path;\n mod prepare;\n mod rustc_info;\n mod tests;\n@@ -133,29 +134,14 @@ pub fn main() {\n     let cg_clif_dylib = build_backend::build_backend(channel, &host_triple, use_unstable_features);\n     match command {\n         Command::Test => {\n-            tests::run_tests(\n-                channel,\n-                sysroot_kind,\n-                &dist_dir,\n-                &cg_clif_dylib,\n-                &host_triple,\n-                &target_triple,\n-            );\n+            tests::run_tests(channel, sysroot_kind, &cg_clif_dylib, &host_triple, &target_triple);\n \n-            abi_cafe::run(\n-                channel,\n-                sysroot_kind,\n-                &dist_dir,\n-                &cg_clif_dylib,\n-                &host_triple,\n-                &target_triple,\n-            );\n+            abi_cafe::run(channel, sysroot_kind, &cg_clif_dylib, &host_triple, &target_triple);\n         }\n         Command::Build => {\n             build_sysroot::build_sysroot(\n                 channel,\n                 sysroot_kind,\n-                &dist_dir,\n                 &cg_clif_dylib,\n                 &host_triple,\n                 &target_triple,"}, {"sha": "73a17a3980fb9d60c33167f73196325652d3cc65", "filename": "build_system/path.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/4529979330038c6accce45533f34aae681a6017c/build_system%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529979330038c6accce45533f34aae681a6017c/build_system%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fpath.rs?ref=4529979330038c6accce45533f34aae681a6017c", "patch": "@@ -0,0 +1,71 @@\n+use std::fs;\n+use std::path::PathBuf;\n+\n+/*pub(crate) struct Paths {\n+    source_dir: PathBuf,\n+    download_dir: PathBuf,\n+    build_dir: PathBuf,\n+    dist_dir: PathBuf,\n+}*/\n+\n+#[doc(hidden)]\n+#[derive(Debug, Copy, Clone)]\n+pub(crate) enum PathBase {\n+    Source,\n+    Download,\n+    Build,\n+    Dist,\n+}\n+\n+impl PathBase {\n+    fn to_path(self) -> PathBuf {\n+        // FIXME pass in all paths instead\n+        let current_dir = std::env::current_dir().unwrap();\n+        match self {\n+            PathBase::Source => current_dir,\n+            PathBase::Download => current_dir.join(\"download\"),\n+            PathBase::Build => current_dir.join(\"build\"),\n+            PathBase::Dist => current_dir.join(\"dist\"),\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Copy, Clone)]\n+pub(crate) enum RelPath {\n+    Base(PathBase),\n+    Join(&'static RelPath, &'static str),\n+}\n+\n+impl RelPath {\n+    pub(crate) const SOURCE: RelPath = RelPath::Base(PathBase::Source);\n+    pub(crate) const DOWNLOAD: RelPath = RelPath::Base(PathBase::Download);\n+    pub(crate) const BUILD: RelPath = RelPath::Base(PathBase::Build);\n+    pub(crate) const DIST: RelPath = RelPath::Base(PathBase::Dist);\n+\n+    pub(crate) const SCRIPTS: RelPath = RelPath::SOURCE.join(\"scripts\");\n+    pub(crate) const BUILD_SYSROOT: RelPath = RelPath::SOURCE.join(\"build_sysroot\");\n+    pub(crate) const PATCHES: RelPath = RelPath::SOURCE.join(\"patches\");\n+\n+    pub(crate) const fn join(&'static self, suffix: &'static str) -> RelPath {\n+        RelPath::Join(self, suffix)\n+    }\n+\n+    pub(crate) fn to_path(&self) -> PathBuf {\n+        match self {\n+            RelPath::Base(base) => base.to_path(),\n+            RelPath::Join(base, suffix) => base.to_path().join(suffix),\n+        }\n+    }\n+\n+    pub(crate) fn ensure_exists(&self) {\n+        fs::create_dir_all(self.to_path()).unwrap();\n+    }\n+\n+    pub(crate) fn ensure_fresh(&self) {\n+        let path = self.to_path();\n+        if path.exists() {\n+            fs::remove_dir_all(&path).unwrap();\n+        }\n+        fs::create_dir_all(path).unwrap();\n+    }\n+}"}, {"sha": "09568aae9f3825c79bfef1b466fe07ef06974945", "filename": "build_system/prepare.rs", "status": "modified", "additions": 24, "deletions": 29, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4529979330038c6accce45533f34aae681a6017c/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529979330038c6accce45533f34aae681a6017c/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=4529979330038c6accce45533f34aae681a6017c", "patch": "@@ -1,17 +1,18 @@\n-use std::env;\n use std::ffi::OsStr;\n use std::fs;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n+use super::build_sysroot::{SYSROOT_RUSTC_VERSION, SYSROOT_SRC};\n+use super::path::RelPath;\n use super::rustc_info::{get_file_name, get_rustc_path, get_rustc_version};\n use super::utils::{copy_dir_recursively, spawn_and_wait, Compiler};\n \n pub(crate) fn prepare() {\n-    if Path::new(\"download\").exists() {\n-        std::fs::remove_dir_all(Path::new(\"download\")).unwrap();\n+    if RelPath::DOWNLOAD.to_path().exists() {\n+        std::fs::remove_dir_all(RelPath::DOWNLOAD.to_path()).unwrap();\n     }\n-    std::fs::create_dir_all(Path::new(\"download\")).unwrap();\n+    std::fs::create_dir_all(RelPath::DOWNLOAD.to_path()).unwrap();\n \n     prepare_sysroot();\n \n@@ -35,36 +36,34 @@ pub(crate) fn prepare() {\n             .join(&host_compiler.triple)\n             .join(\"debug\")\n             .join(get_file_name(\"main\", \"bin\")),\n-        Path::new(\"build\").join(get_file_name(\"raytracer_cg_llvm\", \"bin\")),\n+        RelPath::BUILD.to_path().join(get_file_name(\"raytracer_cg_llvm\", \"bin\")),\n     )\n     .unwrap();\n }\n \n fn prepare_sysroot() {\n     let rustc_path = get_rustc_path();\n     let sysroot_src_orig = rustc_path.parent().unwrap().join(\"../lib/rustlib/src/rust\");\n-    let sysroot_src = env::current_dir().unwrap().join(\"build_sysroot\").join(\"sysroot_src\");\n+    let sysroot_src = SYSROOT_SRC;\n \n     assert!(sysroot_src_orig.exists());\n \n-    if sysroot_src.exists() {\n-        fs::remove_dir_all(&sysroot_src).unwrap();\n-    }\n-    fs::create_dir_all(sysroot_src.join(\"library\")).unwrap();\n+    sysroot_src.ensure_fresh();\n+    fs::create_dir_all(sysroot_src.to_path().join(\"library\")).unwrap();\n     eprintln!(\"[COPY] sysroot src\");\n-    copy_dir_recursively(&sysroot_src_orig.join(\"library\"), &sysroot_src.join(\"library\"));\n+    copy_dir_recursively(&sysroot_src_orig.join(\"library\"), &sysroot_src.to_path().join(\"library\"));\n \n     let rustc_version = get_rustc_version();\n-    fs::write(Path::new(\"build_sysroot\").join(\"rustc_version\"), &rustc_version).unwrap();\n+    fs::write(SYSROOT_RUSTC_VERSION.to_path(), &rustc_version).unwrap();\n \n     eprintln!(\"[GIT] init\");\n     let mut git_init_cmd = Command::new(\"git\");\n-    git_init_cmd.arg(\"init\").arg(\"-q\").current_dir(&sysroot_src);\n+    git_init_cmd.arg(\"init\").arg(\"-q\").current_dir(sysroot_src.to_path());\n     spawn_and_wait(git_init_cmd);\n \n-    init_git_repo(&sysroot_src);\n+    init_git_repo(&sysroot_src.to_path());\n \n-    apply_patches(\"sysroot\", &sysroot_src);\n+    apply_patches(\"sysroot\", &sysroot_src.to_path());\n }\n \n pub(crate) struct GitRepo {\n@@ -87,21 +86,19 @@ impl GitRepo {\n         GitRepo { url: GitRepoUrl::Github { user, repo }, rev, patch_name }\n     }\n \n-    pub(crate) fn source_dir(&self) -> PathBuf {\n+    pub(crate) const fn source_dir(&self) -> RelPath {\n         match self.url {\n-            GitRepoUrl::Github { user: _, repo } => {\n-                std::env::current_dir().unwrap().join(\"download\").join(repo)\n-            }\n+            GitRepoUrl::Github { user: _, repo } => RelPath::DOWNLOAD.join(repo),\n         }\n     }\n \n     fn fetch(&self) {\n         match self.url {\n             GitRepoUrl::Github { user, repo } => {\n-                clone_repo_shallow_github(&self.source_dir(), user, repo, self.rev);\n+                clone_repo_shallow_github(&self.source_dir().to_path(), user, repo, self.rev);\n             }\n         }\n-        apply_patches(self.patch_name, &self.source_dir());\n+        apply_patches(self.patch_name, &self.source_dir().to_path());\n     }\n }\n \n@@ -127,11 +124,9 @@ fn clone_repo_shallow_github(download_dir: &Path, user: &str, repo: &str, rev: &\n         return;\n     }\n \n-    let downloads_dir = std::env::current_dir().unwrap().join(\"download\");\n-\n     let archive_url = format!(\"https://github.com/{}/{}/archive/{}.tar.gz\", user, repo, rev);\n-    let archive_file = downloads_dir.join(format!(\"{}.tar.gz\", rev));\n-    let archive_dir = downloads_dir.join(format!(\"{}-{}\", repo, rev));\n+    let archive_file = RelPath::DOWNLOAD.to_path().join(format!(\"{}.tar.gz\", rev));\n+    let archive_dir = RelPath::DOWNLOAD.to_path().join(format!(\"{}-{}\", repo, rev));\n \n     eprintln!(\"[DOWNLOAD] {}/{} from {}\", user, repo, archive_url);\n \n@@ -147,7 +142,7 @@ fn clone_repo_shallow_github(download_dir: &Path, user: &str, repo: &str, rev: &\n \n     // Unpack tar archive\n     let mut unpack_cmd = Command::new(\"tar\");\n-    unpack_cmd.arg(\"xf\").arg(&archive_file).current_dir(downloads_dir);\n+    unpack_cmd.arg(\"xf\").arg(&archive_file).current_dir(RelPath::DOWNLOAD.to_path());\n     spawn_and_wait(unpack_cmd);\n \n     // Rename unpacked dir to the expected name\n@@ -173,8 +168,8 @@ fn init_git_repo(repo_dir: &Path) {\n     spawn_and_wait(git_commit_cmd);\n }\n \n-fn get_patches(source_dir: &Path, crate_name: &str) -> Vec<PathBuf> {\n-    let mut patches: Vec<_> = fs::read_dir(source_dir.join(\"patches\"))\n+fn get_patches(crate_name: &str) -> Vec<PathBuf> {\n+    let mut patches: Vec<_> = fs::read_dir(RelPath::PATCHES.to_path())\n         .unwrap()\n         .map(|entry| entry.unwrap().path())\n         .filter(|path| path.extension() == Some(OsStr::new(\"patch\")))\n@@ -198,7 +193,7 @@ fn apply_patches(crate_name: &str, target_dir: &Path) {\n         return;\n     }\n \n-    for patch in get_patches(&std::env::current_dir().unwrap(), crate_name) {\n+    for patch in get_patches(crate_name) {\n         eprintln!(\n             \"[PATCH] {:?} <- {:?}\",\n             target_dir.file_name().unwrap(),"}, {"sha": "3e495617fb27d4709bd31399e9f891c77eeebadd", "filename": "build_system/tests.rs", "status": "modified", "additions": 25, "deletions": 43, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4529979330038c6accce45533f34aae681a6017c/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529979330038c6accce45533f34aae681a6017c/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=4529979330038c6accce45533f34aae681a6017c", "patch": "@@ -1,19 +1,20 @@\n-use crate::build_system::rustc_info::get_cargo_path;\n-\n use super::build_sysroot;\n use super::config;\n+use super::path::RelPath;\n use super::prepare::GitRepo;\n-use super::rustc_info::get_wrapper_file_name;\n+use super::rustc_info::{get_cargo_path, get_wrapper_file_name};\n use super::utils::{\n     hyperfine_command, spawn_and_wait, spawn_and_wait_with_input, CargoProject, Compiler,\n };\n use super::SysrootKind;\n use std::env;\n use std::ffi::OsStr;\n use std::fs;\n-use std::path::{Path, PathBuf};\n+use std::path::Path;\n use std::process::Command;\n \n+static BUILD_EXAMPLE_OUT_DIR: RelPath = RelPath::BUILD.join(\"example\");\n+\n struct TestCase {\n     config: &'static str,\n     func: &'static dyn Fn(&TestRunner),\n@@ -223,12 +224,12 @@ const BASE_SYSROOT_SUITE: &[TestCase] = &[\n pub(crate) static RAND_REPO: GitRepo =\n     GitRepo::github(\"rust-random\", \"rand\", \"0f933f9c7176e53b2a3c7952ded484e1783f0bf1\", \"rand\");\n \n-static RAND: CargoProject = CargoProject::git(&RAND_REPO, \".\", \"rand\");\n+static RAND: CargoProject = CargoProject::new(&RAND_REPO.source_dir(), \"rand\");\n \n pub(crate) static REGEX_REPO: GitRepo =\n     GitRepo::github(\"rust-lang\", \"regex\", \"341f207c1071f7290e3f228c710817c280c8dca1\", \"regex\");\n \n-static REGEX: CargoProject = CargoProject::git(&REGEX_REPO, \".\", \"regex\");\n+static REGEX: CargoProject = CargoProject::new(&REGEX_REPO.source_dir(), \"regex\");\n \n pub(crate) static PORTABLE_SIMD_REPO: GitRepo = GitRepo::github(\n     \"rust-lang\",\n@@ -237,7 +238,8 @@ pub(crate) static PORTABLE_SIMD_REPO: GitRepo = GitRepo::github(\n     \"portable-simd\",\n );\n \n-static PORTABLE_SIMD: CargoProject = CargoProject::git(&PORTABLE_SIMD_REPO, \".\", \"portable_simd\");\n+static PORTABLE_SIMD: CargoProject =\n+    CargoProject::new(&PORTABLE_SIMD_REPO.source_dir(), \"portable_simd\");\n \n pub(crate) static SIMPLE_RAYTRACER_REPO: GitRepo = GitRepo::github(\n     \"ebobby\",\n@@ -247,10 +249,10 @@ pub(crate) static SIMPLE_RAYTRACER_REPO: GitRepo = GitRepo::github(\n );\n \n pub(crate) static SIMPLE_RAYTRACER: CargoProject =\n-    CargoProject::git(&SIMPLE_RAYTRACER_REPO, \".\", \"simple_raytracer\");\n+    CargoProject::new(&SIMPLE_RAYTRACER_REPO.source_dir(), \"simple_raytracer\");\n \n static LIBCORE_TESTS: CargoProject =\n-    CargoProject::local(\"build_sysroot/sysroot_src/library/core/tests\", \"core_tests\");\n+    CargoProject::new(&RelPath::BUILD_SYSROOT.join(\"sysroot_src/library/core/tests\"), \"core_tests\");\n \n const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n     TestCase::new(\"test.rust-random/rand\", &|runner| {\n@@ -273,10 +275,8 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n \n         if runner.is_native {\n             eprintln!(\"[BENCH COMPILE] ebobby/simple-raytracer\");\n-            let cargo_clif = env::current_dir()\n-                .unwrap()\n-                .join(\"dist\")\n-                .join(get_wrapper_file_name(\"cargo-clif\", \"bin\"));\n+            let cargo_clif =\n+                RelPath::DIST.to_path().join(get_wrapper_file_name(\"cargo-clif\", \"bin\"));\n             let manifest_path = SIMPLE_RAYTRACER.manifest_path();\n             let target_dir = SIMPLE_RAYTRACER.target_dir();\n \n@@ -305,13 +305,13 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n             eprintln!(\"[BENCH RUN] ebobby/simple-raytracer\");\n             fs::copy(\n                 target_dir.join(\"debug\").join(\"main\"),\n-                Path::new(\"build\").join(\"raytracer_cg_clif\"),\n+                RelPath::BUILD.to_path().join(\"raytracer_cg_clif\"),\n             )\n             .unwrap();\n \n             let mut bench_run =\n                 hyperfine_command(0, run_runs, None, \"./raytracer_cg_llvm\", \"./raytracer_cg_clif\");\n-            bench_run.current_dir(Path::new(\"build\"));\n+            bench_run.current_dir(RelPath::BUILD.to_path());\n             spawn_and_wait(bench_run);\n         } else {\n             spawn_and_wait(SIMPLE_RAYTRACER.clean(&runner.target_compiler.cargo));\n@@ -430,7 +430,6 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n pub(crate) fn run_tests(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n-    dist_dir: &Path,\n     cg_clif_dylib: &Path,\n     host_triple: &str,\n     target_triple: &str,\n@@ -441,13 +440,12 @@ pub(crate) fn run_tests(\n         build_sysroot::build_sysroot(\n             channel,\n             SysrootKind::None,\n-            &dist_dir,\n             cg_clif_dylib,\n             &host_triple,\n             &target_triple,\n         );\n \n-        let _ = fs::remove_dir_all(Path::new(\"build\").join(\"example\"));\n+        BUILD_EXAMPLE_OUT_DIR.ensure_fresh();\n         runner.run_testsuite(NO_SYSROOT_SUITE);\n     } else {\n         eprintln!(\"[SKIP] no_sysroot tests\");\n@@ -460,7 +458,6 @@ pub(crate) fn run_tests(\n         build_sysroot::build_sysroot(\n             channel,\n             sysroot_kind,\n-            &dist_dir,\n             cg_clif_dylib,\n             &host_triple,\n             &target_triple,\n@@ -481,7 +478,6 @@ pub(crate) fn run_tests(\n }\n \n struct TestRunner {\n-    out_dir: PathBuf,\n     is_native: bool,\n     jit_supported: bool,\n     host_compiler: Compiler,\n@@ -490,23 +486,13 @@ struct TestRunner {\n \n impl TestRunner {\n     pub fn new(host_triple: String, target_triple: String) -> Self {\n-        let root_dir = env::current_dir().unwrap();\n-\n-        let mut out_dir = root_dir.clone();\n-        out_dir.push(\"build\");\n-        out_dir.push(\"example\");\n-\n         let is_native = host_triple == target_triple;\n         let jit_supported =\n             target_triple.contains(\"x86_64\") && is_native && !host_triple.contains(\"windows\");\n \n-        let mut rustc_clif = root_dir.clone();\n-        rustc_clif.push(\"dist\");\n-        rustc_clif.push(get_wrapper_file_name(\"rustc-clif\", \"bin\"));\n-\n-        let mut rustdoc_clif = root_dir.clone();\n-        rustdoc_clif.push(\"dist\");\n-        rustdoc_clif.push(get_wrapper_file_name(\"rustdoc-clif\", \"bin\"));\n+        let rustc_clif = RelPath::DIST.to_path().join(get_wrapper_file_name(\"rustc-clif\", \"bin\"));\n+        let rustdoc_clif =\n+            RelPath::DIST.to_path().join(get_wrapper_file_name(\"rustdoc-clif\", \"bin\"));\n \n         let mut rustflags = env::var(\"RUSTFLAGS\").ok().unwrap_or(\"\".to_string());\n         let mut runner = vec![];\n@@ -549,15 +535,15 @@ impl TestRunner {\n \n         let target_compiler = Compiler {\n             cargo: get_cargo_path(),\n-            rustc: rustc_clif.clone(),\n-            rustdoc: rustdoc_clif.clone(),\n+            rustc: rustc_clif,\n+            rustdoc: rustdoc_clif,\n             rustflags: rustflags.clone(),\n             rustdocflags: rustflags,\n             triple: target_triple,\n             runner,\n         };\n \n-        Self { out_dir, is_native, jit_supported, host_compiler, target_compiler }\n+        Self { is_native, jit_supported, host_compiler, target_compiler }\n     }\n \n     pub fn run_testsuite(&self, tests: &[TestCase]) {\n@@ -586,9 +572,9 @@ impl TestRunner {\n         let mut cmd = Command::new(&self.target_compiler.rustc);\n         cmd.args(self.target_compiler.rustflags.split_whitespace());\n         cmd.arg(\"-L\");\n-        cmd.arg(format!(\"crate={}\", self.out_dir.display()));\n+        cmd.arg(format!(\"crate={}\", BUILD_EXAMPLE_OUT_DIR.to_path().display()));\n         cmd.arg(\"--out-dir\");\n-        cmd.arg(format!(\"{}\", self.out_dir.display()));\n+        cmd.arg(format!(\"{}\", BUILD_EXAMPLE_OUT_DIR.to_path().display()));\n         cmd.arg(\"-Cdebuginfo=2\");\n         cmd.args(args);\n         cmd\n@@ -613,11 +599,7 @@ impl TestRunner {\n             full_cmd.extend(self.target_compiler.runner.iter().cloned());\n         }\n \n-        full_cmd.push({\n-            let mut out_path = self.out_dir.clone();\n-            out_path.push(name);\n-            out_path.to_str().unwrap().to_string()\n-        });\n+        full_cmd.push(BUILD_EXAMPLE_OUT_DIR.to_path().join(name).to_str().unwrap().to_string());\n \n         for arg in args.into_iter() {\n             full_cmd.push(arg.to_string());"}, {"sha": "422492df0071f6bb5f15095776382cfa1c9f518b", "filename": "build_system/utils.rs", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4529979330038c6accce45533f34aae681a6017c/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529979330038c6accce45533f34aae681a6017c/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=4529979330038c6accce45533f34aae681a6017c", "patch": "@@ -4,7 +4,7 @@ use std::io::Write;\n use std::path::{Path, PathBuf};\n use std::process::{self, Command, Stdio};\n \n-use super::prepare::GitRepo;\n+use super::path::RelPath;\n use super::rustc_info::{get_cargo_path, get_host_triple, get_rustc_path, get_rustdoc_path};\n \n pub(crate) struct Compiler {\n@@ -43,44 +43,26 @@ impl Compiler {\n     }\n }\n \n-enum CargoProjectSource {\n-    Local,\n-    GitRepo(&'static GitRepo),\n-}\n-\n pub(crate) struct CargoProject {\n-    source: CargoProjectSource,\n-    path: &'static str,\n+    source: &'static RelPath,\n     target: &'static str,\n }\n \n impl CargoProject {\n-    pub(crate) const fn local(path: &'static str, target: &'static str) -> CargoProject {\n-        CargoProject { source: CargoProjectSource::Local, path, target }\n-    }\n-\n-    pub(crate) const fn git(\n-        git_repo: &'static GitRepo,\n-        path: &'static str,\n-        target: &'static str,\n-    ) -> CargoProject {\n-        CargoProject { source: CargoProjectSource::GitRepo(git_repo), path, target }\n+    pub(crate) const fn new(path: &'static RelPath, target: &'static str) -> CargoProject {\n+        CargoProject { source: path, target }\n     }\n \n     pub(crate) fn source_dir(&self) -> PathBuf {\n-        match self.source {\n-            CargoProjectSource::Local => std::env::current_dir().unwrap(),\n-            CargoProjectSource::GitRepo(git_repo) => git_repo.source_dir(),\n-        }\n-        .join(self.path)\n+        self.source.to_path()\n     }\n \n     pub(crate) fn manifest_path(&self) -> PathBuf {\n         self.source_dir().join(\"Cargo.toml\")\n     }\n \n     pub(crate) fn target_dir(&self) -> PathBuf {\n-        std::env::current_dir().unwrap().join(\"build\").join(self.target)\n+        RelPath::BUILD.join(self.target).to_path()\n     }\n \n     fn base_cmd(&self, command: &str, cargo: &Path) -> Command {"}]}