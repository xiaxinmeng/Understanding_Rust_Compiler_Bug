{"sha": "863e96d62654e8919dfab9890f74ca67e8ab682e", "node_id": "C_kwDOAAsO6NoAKDg2M2U5NmQ2MjY1NGU4OTE5ZGZhYjk4OTBmNzRjYTY3ZThhYjY4MmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-11T05:46:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-11T05:46:24Z"}, "message": "Auto merge of #107507 - BoxyUwU:deferred_projection_equality, r=lcnr\n\nImplement `deferred_projection_equality` for erica solver\n\nSomewhat of a revival of #96912. When relating projections now emit an `AliasEq` obligation instead of attempting to determine equality of projections that may not be as normalized as possible (i.e. because of lazy norm, or just containing inference variables that prevent us from resolving an impl). Only do this when the new solver is enabled", "tree": {"sha": "c2ee24ae5a604c6eb8610259f3215c65b1f0e180", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2ee24ae5a604c6eb8610259f3215c65b1f0e180"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/863e96d62654e8919dfab9890f74ca67e8ab682e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/863e96d62654e8919dfab9890f74ca67e8ab682e", "html_url": "https://github.com/rust-lang/rust/commit/863e96d62654e8919dfab9890f74ca67e8ab682e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/863e96d62654e8919dfab9890f74ca67e8ab682e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7fe1f9c1446344c9b542f666ac58b116eb58bd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7fe1f9c1446344c9b542f666ac58b116eb58bd6", "html_url": "https://github.com/rust-lang/rust/commit/e7fe1f9c1446344c9b542f666ac58b116eb58bd6"}, {"sha": "cd3bcbb8e5fb97a83caab7556175a7d6b3d0632b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd3bcbb8e5fb97a83caab7556175a7d6b3d0632b", "html_url": "https://github.com/rust-lang/rust/commit/cd3bcbb8e5fb97a83caab7556175a7d6b3d0632b"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "26b1d01974990449c3a5f22ba782e2e9066a7863", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/863e96d62654e8919dfab9890f74ca67e8ab682e/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/863e96d62654e8919dfab9890f74ca67e8ab682e/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=863e96d62654e8919dfab9890f74ca67e8ab682e", "patch": "@@ -36,6 +36,7 @@ pub fn is_min_const_fn<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, msrv: &Msrv)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n+                ty::PredicateKind::AliasEq(..) => panic!(\"alias eq predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::Subtype(_) => panic!(\"subtype predicate on function: {predicate:#?}\"),"}]}