{"sha": "2eb476293651d31d8e0c7907487760da6d2ce506", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYjQ3NjI5MzY1MWQzMWQ4ZTBjNzkwNzQ4Nzc2MGRhNmQyY2U1MDY=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-07-20T02:39:07Z"}, "committer": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-07-20T02:52:21Z"}, "message": "Typechecking self-calls in anon objs.  Closes #540.", "tree": {"sha": "f9c0f34bd68aaeb30d4a02fb3d3a602fcbaa9745", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9c0f34bd68aaeb30d4a02fb3d3a602fcbaa9745"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2eb476293651d31d8e0c7907487760da6d2ce506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2eb476293651d31d8e0c7907487760da6d2ce506", "html_url": "https://github.com/rust-lang/rust/commit/2eb476293651d31d8e0c7907487760da6d2ce506", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2eb476293651d31d8e0c7907487760da6d2ce506/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64fb39cdd3fb1f3bf1ea484112b96983e4ba5c2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/64fb39cdd3fb1f3bf1ea484112b96983e4ba5c2c", "html_url": "https://github.com/rust-lang/rust/commit/64fb39cdd3fb1f3bf1ea484112b96983e4ba5c2c"}], "stats": {"total": 85, "additions": 51, "deletions": 34}, "files": [{"sha": "3a8cfa624e660c431612717315609d2311723991", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 50, "deletions": 30, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/2eb476293651d31d8e0c7907487760da6d2ce506/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb476293651d31d8e0c7907487760da6d2ce506/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=2eb476293651d31d8e0c7907487760da6d2ce506", "patch": "@@ -55,8 +55,9 @@ type ty_table = hashmap[ast::def_id, ty::t];\n tag obj_info {\n     // Regular objects have a node_id at compile time.\n     regular_obj(ast::obj_field[], ast::node_id);\n-    // Anonymous objects only have a type at compile time.\n-    anon_obj(ast::obj_field[], ty::t);\n+    // Anonymous objects only have a type at compile time.  It's optional\n+    // because not all anonymous objects have a with_obj to attach to.\n+    anon_obj(ast::obj_field[], option::t[ty::sty]);\n }\n \n type crate_ctxt = rec(mutable obj_info[] obj_infos, ty::ctxt tcx);\n@@ -2114,7 +2115,8 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n         }\n         case (ast::expr_self_method(?ident)) {\n             auto t = ty::mk_nil(fcx.ccx.tcx);\n-            let ty::t this_obj_ty = ty::mk_nil(fcx.ccx.tcx);\n+            let option::t[ty::sty] this_obj_sty =\n+                some(structure_of(fcx, expr.span, ty::mk_nil(fcx.ccx.tcx)));\n             let option::t[obj_info] this_obj_info = get_obj_info(fcx.ccx);\n             alt (this_obj_info) {\n                 case (some(?oinfo)) {\n@@ -2128,7 +2130,10 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n                                     // If we're typechecking a self-method on\n                                     // a regular object, this lookup should\n                                     // succeed.\n-                                    this_obj_ty = tpt._1;\n+                                    this_obj_sty =\n+                                        some(structure_of(fcx,\n+                                                          expr.span,\n+                                                          tpt._1));\n                                 }\n                                 case (none) {\n                                     fcx.ccx.tcx.sess.bug(\n@@ -2137,8 +2142,8 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n                                 }\n                             }\n                         }\n-                        case (anon_obj(_, ?obj_ty)) {\n-                            this_obj_ty = obj_ty;\n+                        case (anon_obj(_, ?obj_sty)) {\n+                            this_obj_sty = obj_sty;\n                         }\n                     }\n                 }\n@@ -2151,15 +2156,21 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n             }\n \n             // Grab this method's type out of the current object type.\n-            alt (structure_of(fcx, expr.span, this_obj_ty)) {\n-                case (ty::ty_obj(?methods)) {\n-                    for (ty::method method in methods) {\n-                        if (method.ident == ident) {\n-                            t = ty::method_ty_to_fn_ty(fcx.ccx.tcx, method);\n+            alt (this_obj_sty) {\n+                case (some(?sty)) {\n+                    alt (sty) {\n+                        case (ty::ty_obj(?methods)) {\n+                            for (ty::method method in methods) {\n+                                if (method.ident == ident) {\n+                                    t = ty::method_ty_to_fn_ty(fcx.ccx.tcx,\n+                                                               method);\n+                                }\n+                            }\n                         }\n+                        case (_) { fail; }\n                     }\n                 }\n-                case (_) { fail; }\n+                case (none) { }\n             }\n             write::ty_only_fixup(fcx, id, t);\n             require_impure(fcx.ccx.tcx.sess, fcx.purity, expr.span);\n@@ -2442,40 +2453,49 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n                 // Typecheck 'with_obj'.  If it exists, it had better have\n                 // object type.\n                 let ty::method[] with_obj_methods = ~[];\n-                auto with_obj_ty = ty::mk_nil(fcx.ccx.tcx);\n+                let ty::t with_obj_ty = ty::mk_nil(fcx.ccx.tcx);\n+                let option::t[ty::sty] with_obj_sty = none;\n                 alt (ao.with_obj) {\n                     case (none) { }\n                     case (some(?e)) {\n+                        // If there's a with_obj, we push it onto the\n+                        // obj_infos stack so that self-calls can be checked\n+                        // within its context later.\n                         check_expr(fcx, e);\n                         with_obj_ty = expr_ty(fcx.ccx.tcx, e);\n-\n-                        alt (structure_of(fcx, e.span, with_obj_ty)) {\n-                            case (ty::ty_obj(?ms)) {\n-                                with_obj_methods = ms;\n-                            }\n-                            case (_) {\n-                                // The user is trying to extend a non-object.\n-                                fcx.ccx.tcx.sess.span_fatal(\n-                                    e.span,\n-                                    syntax::print::pprust::expr_to_str(e) +\n-                                    \" does not have object type\");\n+                        with_obj_sty = some(structure_of(fcx, e.span,\n+                                                         with_obj_ty));\n+\n+                        alt (with_obj_sty) {\n+                            case (none) { }\n+                            case (some(?sty)) {\n+                                alt (sty) {\n+                                    case (ty::ty_obj(?ms)) {\n+                                        with_obj_methods = ms;\n+                                    }\n+                                    case (_) {\n+                                        // The user is trying to extend a\n+                                        // non-object.\n+                                        fcx.ccx.tcx.sess.span_fatal(\n+                                            e.span,\n+                                      syntax::print::pprust::expr_to_str(e) +\n+                                            \" does not have object type\");\n+                                    }\n+                                }\n                             }\n                         }\n                     }\n                 }\n \n-                log_err \"Pushing an anon obj onto the obj_infos stack...\";\n-                fn anon_obj_field_to_obj_field(&ast::anon_obj_field f)\n+                fn ao_field_to_o_field(&ast::anon_obj_field f)\n                     -> ast::obj_field {\n                     ret rec(mut=f.mut, ty=f.ty, ident=f.ident, id=f.id);\n                 }\n                 fcx.ccx.obj_infos +=\n-                    ~[anon_obj(ivec::map(anon_obj_field_to_obj_field,\n-                                         fields),\n-                               with_obj_ty)];\n+                    ~[anon_obj(ivec::map(ao_field_to_o_field, fields),\n+                               with_obj_sty)];\n \n                 methods += with_obj_methods;\n-\n                 ret methods;\n             }\n "}, {"sha": "e95bc266ff8bb32165e6a61b3919278dffc13498", "filename": "src/test/run-pass/anon-obj-with-self-call-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eb476293651d31d8e0c7907487760da6d2ce506/src%2Ftest%2Frun-pass%2Fanon-obj-with-self-call-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb476293651d31d8e0c7907487760da6d2ce506/src%2Ftest%2Frun-pass%2Fanon-obj-with-self-call-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-with-self-call-2.rs?ref=2eb476293651d31d8e0c7907487760da6d2ce506", "patch": "@@ -1,6 +1,4 @@\n //xfail-stage0\n-//xfail-stage1\n-//xfail-stage2\n \n // Reduced test case for issue #540.\n fn main() {"}, {"sha": "4522bef26e9b0299901ceeba1e0a1cf9fe22b9aa", "filename": "src/test/run-pass/anon-obj-with-self-call.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2eb476293651d31d8e0c7907487760da6d2ce506/src%2Ftest%2Frun-pass%2Fanon-obj-with-self-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb476293651d31d8e0c7907487760da6d2ce506/src%2Ftest%2Frun-pass%2Fanon-obj-with-self-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-with-self-call.rs?ref=2eb476293651d31d8e0c7907487760da6d2ce506", "patch": "@@ -1,6 +1,5 @@\n //xfail-stage0\n-//xfail-stage1\n-//xfail-stage2\n+\n use std;\n \n fn main() {"}]}