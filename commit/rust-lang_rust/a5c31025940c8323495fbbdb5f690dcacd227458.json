{"sha": "a5c31025940c8323495fbbdb5f690dcacd227458", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YzMxMDI1OTQwYzgzMjM0OTVmYmJkYjVmNjkwZGNhY2QyMjc0NTg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-13T17:58:18Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-13T18:50:44Z"}, "message": "Use compiletest", "tree": {"sha": "96d37887aaafeff1673e60703c49cb0eabc61bec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96d37887aaafeff1673e60703c49cb0eabc61bec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5c31025940c8323495fbbdb5f690dcacd227458", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c31025940c8323495fbbdb5f690dcacd227458", "html_url": "https://github.com/rust-lang/rust/commit/a5c31025940c8323495fbbdb5f690dcacd227458", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5c31025940c8323495fbbdb5f690dcacd227458/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2756ebe056e03aa38ef6048d800d035d13e61c5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2756ebe056e03aa38ef6048d800d035d13e61c5c", "html_url": "https://github.com/rust-lang/rust/commit/2756ebe056e03aa38ef6048d800d035d13e61c5c"}], "stats": {"total": 84, "additions": 59, "deletions": 25}, "files": [{"sha": "6a599adcc469750f7a38e899c86c8d65323efeac", "filename": "Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5c31025940c8323495fbbdb5f690dcacd227458/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a5c31025940c8323495fbbdb5f690dcacd227458/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=a5c31025940c8323495fbbdb5f690dcacd227458", "patch": "@@ -8,3 +8,7 @@ authors = [\"Manish Goregaokar <manishsmail@gmail.com>\"]\n name = \"clippy\"\n crate_type = [\"dylib\"]\n \n+\n+\n+[dev-dependencies.compiletest]\n+git = \"https://github.com/laumann/compiletest-rs.git\""}, {"sha": "255bea7d73f21596dd5aa1f118932e13e27041df", "filename": "examples/match_if_let.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2756ebe056e03aa38ef6048d800d035d13e61c5c/examples%2Fmatch_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2756ebe056e03aa38ef6048d800d035d13e61c5c/examples%2Fmatch_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmatch_if_let.rs?ref=2756ebe056e03aa38ef6048d800d035d13e61c5c", "patch": "@@ -1,21 +0,0 @@\n-#![feature(plugin)]\n-\n-#![plugin(clippy)]\n-\n-fn main(){\n-    let x = Some(1u);\n-    match x {\n-        Some(y) => println!(\"{:?}\", y),\n-        _ => ()\n-    }\n-    // Not linted\n-    match x {\n-        Some(y) => println!(\"{:?}\", y),\n-        None => ()\n-    }\n-    let z = (1u,1u);\n-    match z {\n-        (2...3, 7...9) => println!(\"{:?}\", z),\n-        _ => {}\n-    }\n-}"}, {"sha": "cd1270b2373bd005b0b768aac5c5905e5bb304bb", "filename": "tests/compile-fail/box_vec.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5c31025940c8323495fbbdb5f690dcacd227458/tests%2Fcompile-fail%2Fbox_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c31025940c8323495fbbdb5f690dcacd227458/tests%2Fcompile-fail%2Fbox_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbox_vec.rs?ref=a5c31025940c8323495fbbdb5f690dcacd227458", "patch": "@@ -1,8 +1,9 @@\n #![feature(plugin)]\n \n #![plugin(clippy)]\n+#![deny(clippy)]\n \n-pub fn test(foo: Box<Vec<bool>>) {\n+pub fn test(foo: Box<Vec<bool>>) { //~ ERROR You seem to be trying to use Box<Vec<T>>\n     println!(\"{:?}\", foo.get(0))\n }\n ", "previous_filename": "examples/box_vec.rs"}, {"sha": "a2343c339ad2e739b9c4ab250f05214528846243", "filename": "tests/compile-fail/dlist.rs", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a5c31025940c8323495fbbdb5f690dcacd227458/tests%2Fcompile-fail%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c31025940c8323495fbbdb5f690dcacd227458/tests%2Fcompile-fail%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdlist.rs?ref=a5c31025940c8323495fbbdb5f690dcacd227458", "patch": "@@ -1,11 +1,12 @@\n-#![feature(plugin)]\n+#![feature(plugin, collections)]\n \n #![plugin(clippy)]\n+#![deny(clippy)]\n \n extern crate collections;\n use collections::linked_list::LinkedList;\n \n-pub fn test(foo: LinkedList<uint>) {\n+pub fn test(foo: LinkedList<u8>) {  //~ ERROR I see you're using a LinkedList!\n     println!(\"{:?}\", foo)\n }\n ", "previous_filename": "examples/dlist.rs"}, {"sha": "b03c6e1140af5edb0e3afe97c6e92134d72a65ad", "filename": "tests/compile-fail/match_if_let.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a5c31025940c8323495fbbdb5f690dcacd227458/tests%2Fcompile-fail%2Fmatch_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c31025940c8323495fbbdb5f690dcacd227458/tests%2Fcompile-fail%2Fmatch_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatch_if_let.rs?ref=a5c31025940c8323495fbbdb5f690dcacd227458", "patch": "@@ -0,0 +1,24 @@\n+#![feature(plugin)]\n+\n+#![plugin(clippy)]\n+#![deny(clippy)]\n+\n+fn main(){\n+    let x = Some(1u8);\n+    match x {  //~ ERROR You seem to be trying to use match\n+               //~^ NOTE Try if let Some(y) = x { ... }\n+        Some(y) => println!(\"{:?}\", y),\n+        _ => ()\n+    }\n+    // Not linted\n+    match x {\n+        Some(y) => println!(\"{:?}\", y),\n+        None => ()\n+    }\n+    let z = (1u8,1u8);\n+    match z { //~ ERROR You seem to be trying to use match\n+              //~^ NOTE Try if let (2...3, 7...9) = z { ... }\n+        (2...3, 7...9) => println!(\"{:?}\", z),\n+        _ => {}\n+    }\n+}"}, {"sha": "cd4d46ee3276e3244838cf79d1b3229be69a55b9", "filename": "tests/compile-fail/toplevel_ref_arg.rs", "status": "renamed", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5c31025940c8323495fbbdb5f690dcacd227458/tests%2Fcompile-fail%2Ftoplevel_ref_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c31025940c8323495fbbdb5f690dcacd227458/tests%2Fcompile-fail%2Ftoplevel_ref_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftoplevel_ref_arg.rs?ref=a5c31025940c8323495fbbdb5f690dcacd227458", "patch": "@@ -1,8 +1,10 @@\n #![feature(plugin)]\n \n #![plugin(clippy)]\n+#![deny(clippy)]\n+#![allow(unused)]\n \n-fn the_answer(ref mut x: u8) {\n+fn the_answer(ref mut x: u8) {  //~ ERROR `ref` directly on a function argument is ignored\n   *x = 42;\n }\n ", "previous_filename": "examples/toplevel_ref_arg.rs"}, {"sha": "3fd219dfb44e1703cf8812af9932afa5bb9d49e5", "filename": "tests/compile-test.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a5c31025940c8323495fbbdb5f690dcacd227458/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c31025940c8323495fbbdb5f690dcacd227458/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=a5c31025940c8323495fbbdb5f690dcacd227458", "patch": "@@ -0,0 +1,23 @@\n+extern crate compiletest;\n+\n+use std::env;\n+use std::process::Command;\n+use std::path::PathBuf;\n+\n+fn run_mode(mode: &'static str) {\n+\n+    let mut config = compiletest::default_config();\n+    let cfg_mode = mode.parse().ok().expect(\"Invalid mode\");\n+    config.target_rustcflags = Some(\"-L target/debug/\".to_string());\n+\n+    config.mode = cfg_mode;\n+    config.src_base = PathBuf::from(format!(\"tests/{}\", mode));\n+\n+    compiletest::run_tests(&config);\n+}\n+\n+#[test]\n+fn compile_test() {\n+    run_mode(\"compile-fail\");\n+    // run_mode(\"run-pass\");\n+}"}]}