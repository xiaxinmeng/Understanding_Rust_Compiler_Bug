{"sha": "99ed68a109c9f7e0dc6a82ccb5bf854d60943957", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZWQ2OGExMDljOWY3ZTBkYzZhODJjY2I1YmY4NTRkNjA5NDM5NTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-09T10:45:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-09T10:45:34Z"}, "message": "Merge #8406\n\n8406: Improve indexing of impls r=flodiebold a=flodiebold\n\nStore impls for e.g. &Foo with the ones for Foo instead of the big \"other\" bucket. This can improve performance and simplifies the HIR impl search a bit.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "cb2e06b85f842fdc88ec367638b38736e247d200", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb2e06b85f842fdc88ec367638b38736e247d200"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99ed68a109c9f7e0dc6a82ccb5bf854d60943957", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgcDBOCRBK7hj4Ov3rIwAAdHIIAGGMKiygD0+d0FtZEixpQc1b\nqZwgsbA1MOPqXiVerwZW4hElN2x5IceQ+1p24lCKyOqY1WPP9iFkj3xHYQe74MxS\nBqiT5lu895pUmGVn4h/Bl4Y5LF1fqzPK7ippsNUcCInmyC6S3cAC9k1hY6aQHvoL\nLbiLlHzfRwZTKezYmia2fW473bftzvvdpw+kD9/p8ZE3FcMgMSJkHXACrlIpNxO7\nhtUOFE9mALTesiYYxatUGcRjvUjEg0Lv2LGQtS1jvnUWhdEQZOtcJlxrGoCEALmj\nkwuRRUtRvjCwa8FwnNhwveFReRLlaeVnW4pSG1CCwD9uTsMhGRhJsZt3kzM7LVI=\n=Wpch\n-----END PGP SIGNATURE-----\n", "payload": "tree cb2e06b85f842fdc88ec367638b38736e247d200\nparent b058cb3f6504b773b08db2b35749355065be2fa6\nparent fdd721e9ef4d330351769a7498d459a198bf0a0b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617965134 +0000\ncommitter GitHub <noreply@github.com> 1617965134 +0000\n\nMerge #8406\n\n8406: Improve indexing of impls r=flodiebold a=flodiebold\n\nStore impls for e.g. &Foo with the ones for Foo instead of the big \"other\" bucket. This can improve performance and simplifies the HIR impl search a bit.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99ed68a109c9f7e0dc6a82ccb5bf854d60943957", "html_url": "https://github.com/rust-lang/rust/commit/99ed68a109c9f7e0dc6a82ccb5bf854d60943957", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99ed68a109c9f7e0dc6a82ccb5bf854d60943957/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b058cb3f6504b773b08db2b35749355065be2fa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b058cb3f6504b773b08db2b35749355065be2fa6", "html_url": "https://github.com/rust-lang/rust/commit/b058cb3f6504b773b08db2b35749355065be2fa6"}, {"sha": "fdd721e9ef4d330351769a7498d459a198bf0a0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd721e9ef4d330351769a7498d459a198bf0a0b", "html_url": "https://github.com/rust-lang/rust/commit/fdd721e9ef4d330351769a7498d459a198bf0a0b"}], "stats": {"total": 113, "additions": 85, "deletions": 28}, "files": [{"sha": "eba46a056960eed00fe58dae1130c8edcdb3c655", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/99ed68a109c9f7e0dc6a82ccb5bf854d60943957/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99ed68a109c9f7e0dc6a82ccb5bf854d60943957/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=99ed68a109c9f7e0dc6a82ccb5bf854d60943957", "patch": "@@ -1580,25 +1580,37 @@ impl Impl {\n             ty.equals_ctor(rref.as_ref().map_or(&self_ty.ty, |it| &it.ty))\n         };\n \n+        let fp = TyFingerprint::for_inherent_impl(&ty);\n+        let fp = if let Some(fp) = fp {\n+            fp\n+        } else {\n+            return Vec::new();\n+        };\n+\n         let mut all = Vec::new();\n         def_crates.iter().for_each(|&id| {\n-            all.extend(db.inherent_impls_in_crate(id).all_impls().map(Self::from).filter(filter))\n+            all.extend(\n+                db.inherent_impls_in_crate(id)\n+                    .for_self_ty(&ty)\n+                    .into_iter()\n+                    .cloned()\n+                    .map(Self::from)\n+                    .filter(filter),\n+            )\n         });\n-        let fp = TyFingerprint::for_impl(&ty);\n         for id in def_crates\n             .iter()\n             .flat_map(|&id| Crate { id }.transitive_reverse_dependencies(db))\n             .map(|Crate { id }| id)\n             .chain(def_crates.iter().copied())\n             .unique()\n         {\n-            match fp {\n-                Some(fp) => all.extend(\n-                    db.trait_impls_in_crate(id).for_self_ty(fp).map(Self::from).filter(filter),\n-                ),\n-                None => all\n-                    .extend(db.trait_impls_in_crate(id).all_impls().map(Self::from).filter(filter)),\n-            }\n+            all.extend(\n+                db.trait_impls_in_crate(id)\n+                    .for_self_ty_without_blanket_impls(fp)\n+                    .map(Self::from)\n+                    .filter(filter),\n+            );\n         }\n         all\n     }"}, {"sha": "ece884241d5f3841accd402d42f16e5b88012fe0", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 63, "deletions": 18, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/99ed68a109c9f7e0dc6a82ccb5bf854d60943957/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99ed68a109c9f7e0dc6a82ccb5bf854d60943957/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=99ed68a109c9f7e0dc6a82ccb5bf854d60943957", "patch": "@@ -13,6 +13,7 @@ use hir_def::{\n };\n use hir_expand::name::Name;\n use rustc_hash::{FxHashMap, FxHashSet};\n+use stdx::always;\n \n use crate::{\n     autoderef,\n@@ -21,50 +22,89 @@ use crate::{\n     primitive::{self, FloatTy, IntTy, UintTy},\n     static_lifetime,\n     utils::all_super_traits,\n-    AdtId, Canonical, CanonicalVarKinds, DebruijnIndex, FnPointer, FnSig, ForeignDefId,\n-    InEnvironment, Interner, Scalar, Substitution, TraitEnvironment, TraitRefExt, Ty, TyBuilder,\n-    TyExt, TyKind,\n+    AdtId, Canonical, CanonicalVarKinds, DebruijnIndex, ForeignDefId, InEnvironment, Interner,\n+    Scalar, Substitution, TraitEnvironment, TraitRefExt, Ty, TyBuilder, TyExt, TyKind,\n };\n \n /// This is used as a key for indexing impls.\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub enum TyFingerprint {\n+    // These are lang item impls:\n     Str,\n     Slice,\n     Array,\n     Never,\n     RawPtr(Mutability),\n     Scalar(Scalar),\n+    // These can have user-defined impls:\n     Adt(hir_def::AdtId),\n     Dyn(TraitId),\n-    Tuple(usize),\n     ForeignType(ForeignDefId),\n-    FnPtr(usize, FnSig),\n+    // These only exist for trait impls\n+    Unit,\n+    Unnameable,\n+    Function(u32),\n }\n \n impl TyFingerprint {\n-    /// Creates a TyFingerprint for looking up an impl. Only certain types can\n-    /// have impls: if we have some `struct S`, we can have an `impl S`, but not\n-    /// `impl &S`. Hence, this will return `None` for reference types and such.\n-    pub fn for_impl(ty: &Ty) -> Option<TyFingerprint> {\n+    /// Creates a TyFingerprint for looking up an inherent impl. Only certain\n+    /// types can have inherent impls: if we have some `struct S`, we can have\n+    /// an `impl S`, but not `impl &S`. Hence, this will return `None` for\n+    /// reference types and such.\n+    pub fn for_inherent_impl(ty: &Ty) -> Option<TyFingerprint> {\n         let fp = match ty.kind(&Interner) {\n             TyKind::Str => TyFingerprint::Str,\n             TyKind::Never => TyFingerprint::Never,\n             TyKind::Slice(..) => TyFingerprint::Slice,\n             TyKind::Array(..) => TyFingerprint::Array,\n             TyKind::Scalar(scalar) => TyFingerprint::Scalar(*scalar),\n             TyKind::Adt(AdtId(adt), _) => TyFingerprint::Adt(*adt),\n-            TyKind::Tuple(cardinality, _) => TyFingerprint::Tuple(*cardinality),\n             TyKind::Raw(mutability, ..) => TyFingerprint::RawPtr(*mutability),\n             TyKind::Foreign(alias_id, ..) => TyFingerprint::ForeignType(*alias_id),\n-            TyKind::Function(FnPointer { sig, substitution: substs, .. }) => {\n-                TyFingerprint::FnPtr(substs.0.len(&Interner) - 1, *sig)\n-            }\n             TyKind::Dyn(_) => ty.dyn_trait().map(|trait_| TyFingerprint::Dyn(trait_))?,\n             _ => return None,\n         };\n         Some(fp)\n     }\n+\n+    /// Creates a TyFingerprint for looking up a trait impl.\n+    pub fn for_trait_impl(ty: &Ty) -> Option<TyFingerprint> {\n+        let fp = match ty.kind(&Interner) {\n+            TyKind::Str => TyFingerprint::Str,\n+            TyKind::Never => TyFingerprint::Never,\n+            TyKind::Slice(..) => TyFingerprint::Slice,\n+            TyKind::Array(..) => TyFingerprint::Array,\n+            TyKind::Scalar(scalar) => TyFingerprint::Scalar(*scalar),\n+            TyKind::Adt(AdtId(adt), _) => TyFingerprint::Adt(*adt),\n+            TyKind::Raw(mutability, ..) => TyFingerprint::RawPtr(*mutability),\n+            TyKind::Foreign(alias_id, ..) => TyFingerprint::ForeignType(*alias_id),\n+            TyKind::Dyn(_) => ty.dyn_trait().map(|trait_| TyFingerprint::Dyn(trait_))?,\n+            TyKind::Ref(_, _, ty) => return TyFingerprint::for_trait_impl(ty),\n+            TyKind::Tuple(_, subst) => {\n+                let first_ty = subst.interned().get(0).map(|arg| arg.assert_ty_ref(&Interner));\n+                if let Some(ty) = first_ty {\n+                    return TyFingerprint::for_trait_impl(ty);\n+                } else {\n+                    TyFingerprint::Unit\n+                }\n+            }\n+            TyKind::AssociatedType(_, _)\n+            | TyKind::OpaqueType(_, _)\n+            | TyKind::FnDef(_, _)\n+            | TyKind::Closure(_, _)\n+            | TyKind::Generator(..)\n+            | TyKind::GeneratorWitness(..) => TyFingerprint::Unnameable,\n+            TyKind::Function(fn_ptr) => {\n+                TyFingerprint::Function(fn_ptr.substitution.0.len(&Interner) as u32)\n+            }\n+            TyKind::Alias(_)\n+            | TyKind::Placeholder(_)\n+            | TyKind::BoundVar(_)\n+            | TyKind::InferenceVar(_, _)\n+            | TyKind::Error => return None,\n+        };\n+        Some(fp)\n+    }\n }\n \n pub(crate) const ALL_INT_FPS: [TyFingerprint; 12] = [\n@@ -112,7 +152,7 @@ impl TraitImpls {\n                         None => continue,\n                     };\n                     let self_ty = db.impl_self_ty(impl_id);\n-                    let self_ty_fp = TyFingerprint::for_impl(self_ty.skip_binders());\n+                    let self_ty_fp = TyFingerprint::for_trait_impl(self_ty.skip_binders());\n                     impls\n                         .map\n                         .entry(target_trait)\n@@ -157,10 +197,13 @@ impl TraitImpls {\n     }\n \n     /// Queries all trait impls for the given type.\n-    pub fn for_self_ty(&self, fp: TyFingerprint) -> impl Iterator<Item = ImplId> + '_ {\n+    pub fn for_self_ty_without_blanket_impls(\n+        &self,\n+        fp: TyFingerprint,\n+    ) -> impl Iterator<Item = ImplId> + '_ {\n         self.map\n             .values()\n-            .flat_map(move |impls| impls.get(&None).into_iter().chain(impls.get(&Some(fp))))\n+            .flat_map(move |impls| impls.get(&Some(fp)).into_iter())\n             .flat_map(|it| it.iter().copied())\n     }\n \n@@ -215,7 +258,9 @@ impl InherentImpls {\n                 }\n \n                 let self_ty = db.impl_self_ty(impl_id);\n-                if let Some(fp) = TyFingerprint::for_impl(self_ty.skip_binders()) {\n+                let fp = TyFingerprint::for_inherent_impl(self_ty.skip_binders());\n+                always!(fp.is_some());\n+                if let Some(fp) = fp {\n                     map.entry(fp).or_default().push(impl_id);\n                 }\n             }\n@@ -228,7 +273,7 @@ impl InherentImpls {\n     }\n \n     pub fn for_self_ty(&self, self_ty: &Ty) -> &[ImplId] {\n-        match TyFingerprint::for_impl(self_ty) {\n+        match TyFingerprint::for_inherent_impl(self_ty) {\n             Some(fp) => self.map.get(&fp).map(|vec| vec.as_ref()).unwrap_or(&[]),\n             None => &[],\n         }"}, {"sha": "cd511477b9122f956083537b7b26f44ac02e4500", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99ed68a109c9f7e0dc6a82ccb5bf854d60943957/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99ed68a109c9f7e0dc6a82ccb5bf854d60943957/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=99ed68a109c9f7e0dc6a82ccb5bf854d60943957", "patch": "@@ -101,7 +101,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n             None\n         }\n \n-        let self_ty_fp = TyFingerprint::for_impl(&ty);\n+        let self_ty_fp = TyFingerprint::for_trait_impl(&ty);\n         let fps: &[TyFingerprint] = match binder_kind(&ty, binders) {\n             Some(chalk_ir::TyVariableKind::Integer) => &ALL_INT_FPS,\n             Some(chalk_ir::TyVariableKind::Float) => &ALL_FLOAT_FPS,"}]}