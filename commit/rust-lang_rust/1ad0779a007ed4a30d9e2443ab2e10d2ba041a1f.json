{"sha": "1ad0779a007ed4a30d9e2443ab2e10d2ba041a1f", "node_id": "C_kwDOAAsO6NoAKDFhZDA3NzlhMDA3ZWQ0YTMwZDllMjQ0M2FiMmUxMGQyYmEwNDFhMWY", "commit": {"author": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T00:35:20Z"}, "committer": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T07:49:23Z"}, "message": "Make WideEncoding non-exhaustive", "tree": {"sha": "496427cfddc72ae3b4fce5afc9db67b68d5d66c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/496427cfddc72ae3b4fce5afc9db67b68d5d66c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ad0779a007ed4a30d9e2443ab2e10d2ba041a1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad0779a007ed4a30d9e2443ab2e10d2ba041a1f", "html_url": "https://github.com/rust-lang/rust/commit/1ad0779a007ed4a30d9e2443ab2e10d2ba041a1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ad0779a007ed4a30d9e2443ab2e10d2ba041a1f/comments", "author": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59b4916294d30af0c16a4737ff8d1e2077b589b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/59b4916294d30af0c16a4737ff8d1e2077b589b5", "html_url": "https://github.com/rust-lang/rust/commit/59b4916294d30af0c16a4737ff8d1e2077b589b5"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "c41b0de56332a8251effc7a91707196b8dc8b033", "filename": "crates/ide-db/src/tests/line_index.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ad0779a007ed4a30d9e2443ab2e10d2ba041a1f/crates%2Fide-db%2Fsrc%2Ftests%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad0779a007ed4a30d9e2443ab2e10d2ba041a1f/crates%2Fide-db%2Fsrc%2Ftests%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Ftests%2Fline_index.rs?ref=1ad0779a007ed4a30d9e2443ab2e10d2ba041a1f", "patch": "@@ -28,16 +28,11 @@ fn test_every_chars() {\n         let got_lin_col = line_index.line_col(got_offset);\n         assert_eq!(got_lin_col, lin_col);\n \n-        for enc in [WideEncoding::Utf16, WideEncoding::Utf32] {\n+        for (enc, col) in [(WideEncoding::Utf16, col_utf16), (WideEncoding::Utf32, col_utf32)] {\n             let wide_lin_col = line_index.to_wide(enc, lin_col);\n             let got_lin_col = line_index.to_utf8(enc, wide_lin_col);\n             assert_eq!(got_lin_col, lin_col);\n-\n-            let want_col = match enc {\n-                WideEncoding::Utf16 => col_utf16,\n-                WideEncoding::Utf32 => col_utf32,\n-            };\n-            assert_eq!(wide_lin_col.col, want_col)\n+            assert_eq!(wide_lin_col.col, col)\n         }\n \n         if c == '\\n' {"}, {"sha": "ab06b96814a2918f8898fcc8879718e9db1f552f", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1ad0779a007ed4a30d9e2443ab2e10d2ba041a1f/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad0779a007ed4a30d9e2443ab2e10d2ba041a1f/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=1ad0779a007ed4a30d9e2443ab2e10d2ba041a1f", "patch": "@@ -23,13 +23,14 @@ use crate::semantic_tokens;\n \n pub fn server_capabilities(config: &Config) -> ServerCapabilities {\n     ServerCapabilities {\n-        position_encoding: Some(match negotiated_encoding(config.caps()) {\n-            PositionEncoding::Utf8 => PositionEncodingKind::UTF8,\n+        position_encoding: match negotiated_encoding(config.caps()) {\n+            PositionEncoding::Utf8 => Some(PositionEncodingKind::UTF8),\n             PositionEncoding::Wide(wide) => match wide {\n-                WideEncoding::Utf16 => PositionEncodingKind::UTF16,\n-                WideEncoding::Utf32 => PositionEncodingKind::UTF32,\n+                WideEncoding::Utf16 => Some(PositionEncodingKind::UTF16),\n+                WideEncoding::Utf32 => Some(PositionEncodingKind::UTF32),\n+                _ => None,\n             },\n-        }),\n+        },\n         text_document_sync: Some(TextDocumentSyncCapability::Options(TextDocumentSyncOptions {\n             open_close: Some(true),\n             change: Some(TextDocumentSyncKind::INCREMENTAL),"}, {"sha": "c8b2c4edb83d66f834c2a950a21dcdd79e38694c", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ad0779a007ed4a30d9e2443ab2e10d2ba041a1f/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad0779a007ed4a30d9e2443ab2e10d2ba041a1f/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=1ad0779a007ed4a30d9e2443ab2e10d2ba041a1f", "patch": "@@ -3,7 +3,6 @@\n use std::collections::HashMap;\n \n use flycheck::{Applicability, DiagnosticLevel, DiagnosticSpan};\n-use ide_db::line_index::WideEncoding;\n use itertools::Itertools;\n use stdx::format_to;\n use vfs::{AbsPath, AbsPathBuf};\n@@ -94,17 +93,16 @@ fn position(\n             };\n         }\n         let mut char_offset = 0;\n-        let len_func = match position_encoding {\n-            PositionEncoding::Utf8 => char::len_utf8,\n-            PositionEncoding::Wide(WideEncoding::Utf16) => char::len_utf16,\n-            PositionEncoding::Wide(WideEncoding::Utf32) => |_| 1,\n-        };\n         for c in line.text.chars() {\n             char_offset += 1;\n             if char_offset > column_offset {\n                 break;\n             }\n-            true_column_offset += len_func(c) - 1;\n+            let len = match position_encoding {\n+                PositionEncoding::Utf8 => c.len_utf8(),\n+                PositionEncoding::Wide(w) => w.measure(&c.to_string()),\n+            };\n+            true_column_offset += len - 1;\n         }\n     }\n "}, {"sha": "40815bdcf1985c71c37189adc255dad25427d80a", "filename": "lib/line-index/src/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1ad0779a007ed4a30d9e2443ab2e10d2ba041a1f/lib%2Fline-index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad0779a007ed4a30d9e2443ab2e10d2ba041a1f/lib%2Fline-index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fline-index%2Fsrc%2Flib.rs?ref=1ad0779a007ed4a30d9e2443ab2e10d2ba041a1f", "patch": "@@ -20,13 +20,24 @@ pub struct LineCol {\n \n /// A kind of wide character encoding.\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+#[non_exhaustive]\n pub enum WideEncoding {\n     /// UTF-16.\n     Utf16,\n     /// UTF-32.\n     Utf32,\n }\n \n+impl WideEncoding {\n+    /// Returns the number of units it takes to encode `text` in this encoding.\n+    pub fn measure(&self, text: &str) -> usize {\n+        match self {\n+            WideEncoding::Utf16 => text.encode_utf16().count(),\n+            WideEncoding::Utf32 => text.chars().count(),\n+        }\n+    }\n+}\n+\n /// Line/Column information in legacy encodings.\n //\n // Deliberately not a generic type and different from `LineCol`."}]}