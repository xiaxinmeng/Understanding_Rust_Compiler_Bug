{"sha": "b643782a10288a86a500168d754026bd0fce2ab5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NDM3ODJhMTAyODhhODZhNTAwMTY4ZDc1NDAyNmJkMGZjZTJhYjU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-25T23:52:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-29T17:05:33Z"}, "message": "std: Stabilize APIs for the 1.8 release\n\nThis commit is the result of the FCPs ending for the 1.8 release cycle for both\nthe libs and the lang suteams. The full list of changes are:\n\nStabilized\n\n* `braced_empty_structs`\n* `augmented_assignments`\n* `str::encode_utf16` - renamed from `utf16_units`\n* `str::EncodeUtf16` - renamed from `Utf16Units`\n* `Ref::map`\n* `RefMut::map`\n* `ptr::drop_in_place`\n* `time::Instant`\n* `time::SystemTime`\n* `{Instant,SystemTime}::now`\n* `{Instant,SystemTime}::duration_since` - renamed from `duration_from_earlier`\n* `{Instant,SystemTime}::elapsed`\n* Various `Add`/`Sub` impls for `Time` and `SystemTime`\n* `SystemTimeError`\n* `SystemTimeError::duration`\n* Various impls for `SystemTimeError`\n* `UNIX_EPOCH`\n* `ops::{Add,Sub,Mul,Div,Rem,BitAnd,BitOr,BitXor,Shl,Shr}Assign`\n\nDeprecated\n\n* Scoped TLS (the `scoped_thread_local!` macro)\n* `Ref::filter_map`\n* `RefMut::filter_map`\n* `RwLockReadGuard::map`\n* `RwLockWriteGuard::map`\n* `Condvar::wait_timeout_with`\n\nCloses #27714\nCloses #27715\nCloses #27746\nCloses #27748\nCloses #27908\nCloses #29866", "tree": {"sha": "3cdcf9693f45703b64f4d0d86c5fbbbef0c439c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cdcf9693f45703b64f4d0d86c5fbbbef0c439c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b643782a10288a86a500168d754026bd0fce2ab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b643782a10288a86a500168d754026bd0fce2ab5", "html_url": "https://github.com/rust-lang/rust/commit/b643782a10288a86a500168d754026bd0fce2ab5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b643782a10288a86a500168d754026bd0fce2ab5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "504ca6f4221b5745c5d72902c1c30415845afa26", "url": "https://api.github.com/repos/rust-lang/rust/commits/504ca6f4221b5745c5d72902c1c30415845afa26", "html_url": "https://github.com/rust-lang/rust/commit/504ca6f4221b5745c5d72902c1c30415845afa26"}], "stats": {"total": 430, "additions": 203, "deletions": 227}, "files": [{"sha": "6fb8de780942c3aeff85fcdffb4d2b674c173183", "filename": "src/doc/reference.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -1141,15 +1141,13 @@ the list of fields entirely. Such a struct implicitly defines a constant of\n its type with the same name. For example:\n \n ```\n-# #![feature(braced_empty_structs)]\n struct Cookie;\n let c = [Cookie, Cookie {}, Cookie, Cookie {}];\n ```\n \n is equivalent to\n \n ```\n-# #![feature(braced_empty_structs)]\n struct Cookie {}\n const Cookie: Cookie = Cookie {};\n let c = [Cookie, Cookie {}, Cookie, Cookie {}];\n@@ -2385,7 +2383,6 @@ The currently implemented features of the reference compiler are:\n                               terms of encapsulation).\n * - `default_type_parameter_fallback` - Allows type parameter defaults to\n                                         influence type inference.\n-* - `braced_empty_structs` - Allows use of empty structs and enum variants with braces.\n \n * - `stmt_expr_attributes` - Allows attributes on expressions and\n                              non-item statements."}, {"sha": "300142d5ec18e79ef8d2ef909b47fa8ff9f3de07", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -78,7 +78,6 @@\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n #![feature(custom_attribute)]\n-#![feature(drop_in_place)]\n #![feature(dropck_parametricity)]\n #![feature(fundamental)]\n #![feature(lang_items)]"}, {"sha": "cb1107fb650e17f27d75fd15c166d2410b35bc7d", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -31,7 +31,6 @@\n \n #![feature(alloc)]\n #![feature(core_intrinsics)]\n-#![feature(drop_in_place)]\n #![feature(heap_api)]\n #![feature(raw)]\n #![feature(heap_api)]"}, {"sha": "373fe7dc4c139be9baa143d6b7fd57054955f931", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -35,7 +35,6 @@\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n #![feature(decode_utf16)]\n-#![feature(drop_in_place)]\n #![feature(dropck_parametricity)]\n #![feature(fmt_internals)]\n #![feature(fmt_radix)]"}, {"sha": "a30ec452e3c15e3c7dfbfcca8c7c1c6e527d8e0f", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -112,17 +112,22 @@ impl<S: Borrow<str>> SliceConcatExt<str> for [S] {\n     }\n }\n \n+/// Deprecated, renamed to EncodeUtf16\n+#[unstable(feature = \"str_utf16\", issue = \"27714\")]\n+#[rustc_deprecated(since = \"1.8.0\", reason = \"renamed to EncodeUtf16\")]\n+pub type Utf16Units<'a> = EncodeUtf16<'a>;\n+\n /// External iterator for a string's UTF-16 code units.\n ///\n /// For use with the `std::iter` module.\n #[derive(Clone)]\n-#[unstable(feature = \"str_utf16\", issue = \"27714\")]\n-pub struct Utf16Units<'a> {\n+#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]\n+pub struct EncodeUtf16<'a> {\n     encoder: Utf16Encoder<Chars<'a>>,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Iterator for Utf16Units<'a> {\n+impl<'a> Iterator for EncodeUtf16<'a> {\n     type Item = u16;\n \n     #[inline]\n@@ -853,10 +858,18 @@ impl str {\n     #[unstable(feature = \"str_utf16\",\n                reason = \"this functionality may only be provided by libunicode\",\n                issue = \"27714\")]\n+    #[rustc_deprecated(since = \"1.8.0\", reason = \"renamed to encode_utf16\")]\n+    #[allow(deprecated)]\n     pub fn utf16_units(&self) -> Utf16Units {\n         Utf16Units { encoder: Utf16Encoder::new(self[..].chars()) }\n     }\n \n+    /// Returns an iterator of `u16` over the string encoded as UTF-16.\n+    #[stable(feature = \"encode_utf16\", since = \"1.8.0\")]\n+    pub fn encode_utf16(&self) -> EncodeUtf16 {\n+        EncodeUtf16 { encoder: Utf16Encoder::new(self[..].chars()) }\n+    }\n+\n     /// Returns `true` if the given pattern matches a sub-slice of\n     /// this string slice.\n     ///"}, {"sha": "eed530d8b61cd607d3a5745f843a6c49b40ff43c", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -29,7 +29,6 @@\n #![feature(step_by)]\n #![feature(str_char)]\n #![feature(str_escape)]\n-#![feature(str_utf16)]\n #![feature(test)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]"}, {"sha": "d8e01f3800caf6bebacc148266547cfbca138ca7", "filename": "src/libcollectionstest/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibcollectionstest%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibcollectionstest%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstring.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -140,7 +140,7 @@ fn test_from_utf16() {\n \n     for p in &pairs {\n         let (s, u) = (*p).clone();\n-        let s_as_utf16 = s.utf16_units().collect::<Vec<u16>>();\n+        let s_as_utf16 = s.encode_utf16().collect::<Vec<u16>>();\n         let u_as_string = String::from_utf16(&u).unwrap();\n \n         assert!(::rustc_unicode::str::is_utf16(&u));\n@@ -150,7 +150,7 @@ fn test_from_utf16() {\n         assert_eq!(String::from_utf16_lossy(&u), s);\n \n         assert_eq!(String::from_utf16(&s_as_utf16).unwrap(), s);\n-        assert_eq!(u_as_string.utf16_units().collect::<Vec<u16>>(), u);\n+        assert_eq!(u_as_string.encode_utf16().collect::<Vec<u16>>(), u);\n     }\n }\n "}, {"sha": "255c846244bdcfa1391524d58dfa0a7cc9ec1778", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -579,17 +579,14 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     /// # Example\n     ///\n     /// ```\n-    /// #![feature(cell_extras)]\n-    ///\n     /// use std::cell::{RefCell, Ref};\n     ///\n     /// let c = RefCell::new((5, 'b'));\n     /// let b1: Ref<(u32, char)> = c.borrow();\n     /// let b2: Ref<u32> = Ref::map(b1, |t| &t.0);\n     /// assert_eq!(*b2, 5)\n     /// ```\n-    #[unstable(feature = \"cell_extras\", reason = \"recently added\",\n-               issue = \"27746\")]\n+    #[stable(feature = \"cell_map\", since = \"1.8.0\")]\n     #[inline]\n     pub fn map<U: ?Sized, F>(orig: Ref<'b, T>, f: F) -> Ref<'b, U>\n         where F: FnOnce(&T) -> &U\n@@ -622,6 +619,7 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     /// ```\n     #[unstable(feature = \"cell_extras\", reason = \"recently added\",\n                issue = \"27746\")]\n+    #[rustc_deprecated(since = \"1.8.0\", reason = \"can be built on Ref::map\")]\n     #[inline]\n     pub fn filter_map<U: ?Sized, F>(orig: Ref<'b, T>, f: F) -> Option<Ref<'b, U>>\n         where F: FnOnce(&T) -> Option<&U>\n@@ -646,7 +644,6 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n     /// # Example\n     ///\n     /// ```\n-    /// # #![feature(cell_extras)]\n     /// use std::cell::{RefCell, RefMut};\n     ///\n     /// let c = RefCell::new((5, 'b'));\n@@ -658,8 +655,7 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n     /// }\n     /// assert_eq!(*c.borrow(), (42, 'b'));\n     /// ```\n-    #[unstable(feature = \"cell_extras\", reason = \"recently added\",\n-               issue = \"27746\")]\n+    #[stable(feature = \"cell_map\", since = \"1.8.0\")]\n     #[inline]\n     pub fn map<U: ?Sized, F>(orig: RefMut<'b, T>, f: F) -> RefMut<'b, U>\n         where F: FnOnce(&mut T) -> &mut U\n@@ -698,6 +694,7 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n     /// ```\n     #[unstable(feature = \"cell_extras\", reason = \"recently added\",\n                issue = \"27746\")]\n+    #[rustc_deprecated(since = \"1.8.0\", reason = \"can be built on RefMut::map\")]\n     #[inline]\n     pub fn filter_map<U: ?Sized, F>(orig: RefMut<'b, T>, f: F) -> Option<RefMut<'b, U>>\n         where F: FnOnce(&mut T) -> Option<&mut U>"}, {"sha": "0417ef84163ab30bccc64d6857b3f55de5af4dcf", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -240,7 +240,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// This has all the same safety problems as `ptr::read` with respect to\n     /// invalid pointers, types, and double drops.\n-    #[unstable(feature = \"drop_in_place\", reason = \"just exposed, needs FCP\", issue = \"27908\")]\n+    #[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n     pub fn drop_in_place<T: ?Sized>(to_drop: *mut T);\n \n     /// Gets a static string slice containing the name of a type."}, {"sha": "7ccc15c21121b35194ec664050e78124f9f5e720", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -156,7 +156,7 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl AddAssign for Wrapping<$t> {\n             #[inline(always)]\n             fn add_assign(&mut self, other: Wrapping<$t>) {\n@@ -174,7 +174,7 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl SubAssign for Wrapping<$t> {\n             #[inline(always)]\n             fn sub_assign(&mut self, other: Wrapping<$t>) {\n@@ -192,7 +192,7 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl MulAssign for Wrapping<$t> {\n             #[inline(always)]\n             fn mul_assign(&mut self, other: Wrapping<$t>) {\n@@ -210,7 +210,7 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl DivAssign for Wrapping<$t> {\n             #[inline(always)]\n             fn div_assign(&mut self, other: Wrapping<$t>) {\n@@ -228,7 +228,7 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl RemAssign for Wrapping<$t> {\n             #[inline(always)]\n             fn rem_assign(&mut self, other: Wrapping<$t>) {\n@@ -256,7 +256,7 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl BitXorAssign for Wrapping<$t> {\n             #[inline(always)]\n             fn bitxor_assign(&mut self, other: Wrapping<$t>) {\n@@ -274,7 +274,7 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl BitOrAssign for Wrapping<$t> {\n             #[inline(always)]\n             fn bitor_assign(&mut self, other: Wrapping<$t>) {\n@@ -292,7 +292,7 @@ macro_rules! wrapping_impl {\n             }\n         }\n \n-        #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl BitAndAssign for Wrapping<$t> {\n             #[inline(always)]\n             fn bitand_assign(&mut self, other: Wrapping<$t>) {"}, {"sha": "0f5584a952f547f76627d3bf64506e2c5ff5a3d5", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 30, "deletions": 50, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -891,9 +891,6 @@ shr_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n /// calling `add_assign`, and therefore, `main` prints `Adding!`.\n ///\n /// ```\n-/// #![feature(augmented_assignments)]\n-/// #![feature(op_assign_traits)]\n-///\n /// use std::ops::AddAssign;\n ///\n /// struct Foo;\n@@ -911,15 +908,16 @@ shr_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n /// }\n /// ```\n #[lang = \"add_assign\"]\n-#[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n pub trait AddAssign<Rhs=Self> {\n     /// The method for the `+=` operator\n+    #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn add_assign(&mut self, Rhs);\n }\n \n macro_rules! add_assign_impl {\n     ($($t:ty)+) => ($(\n-        #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl AddAssign for $t {\n             #[inline]\n             fn add_assign(&mut self, other: $t) { *self += other }\n@@ -937,9 +935,6 @@ add_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// calling `sub_assign`, and therefore, `main` prints `Subtracting!`.\n ///\n /// ```\n-/// #![feature(augmented_assignments)]\n-/// #![feature(op_assign_traits)]\n-///\n /// use std::ops::SubAssign;\n ///\n /// struct Foo;\n@@ -957,15 +952,16 @@ add_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// }\n /// ```\n #[lang = \"sub_assign\"]\n-#[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n pub trait SubAssign<Rhs=Self> {\n     /// The method for the `-=` operator\n+    #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn sub_assign(&mut self, Rhs);\n }\n \n macro_rules! sub_assign_impl {\n     ($($t:ty)+) => ($(\n-        #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl SubAssign for $t {\n             #[inline]\n             fn sub_assign(&mut self, other: $t) { *self -= other }\n@@ -983,9 +979,6 @@ sub_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// calling `mul_assign`, and therefore, `main` prints `Multiplying!`.\n ///\n /// ```\n-/// #![feature(augmented_assignments)]\n-/// #![feature(op_assign_traits)]\n-///\n /// use std::ops::MulAssign;\n ///\n /// struct Foo;\n@@ -1003,15 +996,16 @@ sub_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// }\n /// ```\n #[lang = \"mul_assign\"]\n-#[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n pub trait MulAssign<Rhs=Self> {\n     /// The method for the `*=` operator\n+    #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn mul_assign(&mut self, Rhs);\n }\n \n macro_rules! mul_assign_impl {\n     ($($t:ty)+) => ($(\n-        #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl MulAssign for $t {\n             #[inline]\n             fn mul_assign(&mut self, other: $t) { *self *= other }\n@@ -1029,9 +1023,6 @@ mul_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// calling `div_assign`, and therefore, `main` prints `Dividing!`.\n ///\n /// ```\n-/// #![feature(augmented_assignments)]\n-/// #![feature(op_assign_traits)]\n-///\n /// use std::ops::DivAssign;\n ///\n /// struct Foo;\n@@ -1049,15 +1040,16 @@ mul_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// }\n /// ```\n #[lang = \"div_assign\"]\n-#[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n pub trait DivAssign<Rhs=Self> {\n     /// The method for the `/=` operator\n+    #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn div_assign(&mut self, Rhs);\n }\n \n macro_rules! div_assign_impl {\n     ($($t:ty)+) => ($(\n-        #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl DivAssign for $t {\n             #[inline]\n             fn div_assign(&mut self, other: $t) { *self /= other }\n@@ -1075,9 +1067,6 @@ div_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// calling `rem_assign`, and therefore, `main` prints `Remainder-ing!`.\n ///\n /// ```\n-/// #![feature(augmented_assignments)]\n-/// #![feature(op_assign_traits)]\n-///\n /// use std::ops::RemAssign;\n ///\n /// struct Foo;\n@@ -1095,15 +1084,16 @@ div_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// }\n /// ```\n #[lang = \"rem_assign\"]\n-#[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n pub trait RemAssign<Rhs=Self> {\n     /// The method for the `%=` operator\n+    #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn rem_assign(&mut self, Rhs);\n }\n \n macro_rules! rem_assign_impl {\n     ($($t:ty)+) => ($(\n-        #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl RemAssign for $t {\n             #[inline]\n             fn rem_assign(&mut self, other: $t) { *self %= other }\n@@ -1121,9 +1111,6 @@ rem_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// calling `bitand_assign`, and therefore, `main` prints `Bitwise And-ing!`.\n ///\n /// ```\n-/// #![feature(augmented_assignments)]\n-/// #![feature(op_assign_traits)]\n-///\n /// use std::ops::BitAndAssign;\n ///\n /// struct Foo;\n@@ -1141,15 +1128,16 @@ rem_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// }\n /// ```\n #[lang = \"bitand_assign\"]\n-#[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n pub trait BitAndAssign<Rhs=Self> {\n     /// The method for the `&` operator\n+    #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn bitand_assign(&mut self, Rhs);\n }\n \n macro_rules! bitand_assign_impl {\n     ($($t:ty)+) => ($(\n-        #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl BitAndAssign for $t {\n             #[inline]\n             fn bitand_assign(&mut self, other: $t) { *self &= other }\n@@ -1167,9 +1155,6 @@ bitand_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n /// calling `bitor_assign`, and therefore, `main` prints `Bitwise Or-ing!`.\n ///\n /// ```\n-/// #![feature(augmented_assignments)]\n-/// #![feature(op_assign_traits)]\n-///\n /// use std::ops::BitOrAssign;\n ///\n /// struct Foo;\n@@ -1187,15 +1172,16 @@ bitand_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n /// }\n /// ```\n #[lang = \"bitor_assign\"]\n-#[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n pub trait BitOrAssign<Rhs=Self> {\n     /// The method for the `|=` operator\n+    #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn bitor_assign(&mut self, Rhs);\n }\n \n macro_rules! bitor_assign_impl {\n     ($($t:ty)+) => ($(\n-        #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl BitOrAssign for $t {\n             #[inline]\n             fn bitor_assign(&mut self, other: $t) { *self |= other }\n@@ -1213,9 +1199,6 @@ bitor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n /// calling `bitxor_assign`, and therefore, `main` prints `Bitwise Xor-ing!`.\n ///\n /// ```\n-/// #![feature(augmented_assignments)]\n-/// #![feature(op_assign_traits)]\n-///\n /// use std::ops::BitXorAssign;\n ///\n /// struct Foo;\n@@ -1233,15 +1216,16 @@ bitor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n /// }\n /// ```\n #[lang = \"bitxor_assign\"]\n-#[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n pub trait BitXorAssign<Rhs=Self> {\n     /// The method for the `^=` operator\n+    #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn bitxor_assign(&mut self, Rhs);\n }\n \n macro_rules! bitxor_assign_impl {\n     ($($t:ty)+) => ($(\n-        #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl BitXorAssign for $t {\n             #[inline]\n             fn bitxor_assign(&mut self, other: $t) { *self ^= other }\n@@ -1259,9 +1243,6 @@ bitxor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n /// calling `shl_assign`, and therefore, `main` prints `Shifting left!`.\n ///\n /// ```\n-/// #![feature(augmented_assignments)]\n-/// #![feature(op_assign_traits)]\n-///\n /// use std::ops::ShlAssign;\n ///\n /// struct Foo;\n@@ -1279,15 +1260,16 @@ bitxor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n /// }\n /// ```\n #[lang = \"shl_assign\"]\n-#[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n pub trait ShlAssign<Rhs> {\n     /// The method for the `<<=` operator\n+    #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn shl_assign(&mut self, Rhs);\n }\n \n macro_rules! shl_assign_impl {\n     ($t:ty, $f:ty) => (\n-        #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl ShlAssign<$f> for $t {\n             #[inline]\n             fn shl_assign(&mut self, other: $f) {\n@@ -1323,9 +1305,6 @@ shl_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n /// calling `shr_assign`, and therefore, `main` prints `Shifting right!`.\n ///\n /// ```\n-/// #![feature(augmented_assignments)]\n-/// #![feature(op_assign_traits)]\n-///\n /// use std::ops::ShrAssign;\n ///\n /// struct Foo;\n@@ -1343,15 +1322,16 @@ shl_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n /// }\n /// ```\n #[lang = \"shr_assign\"]\n-#[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+#[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n pub trait ShrAssign<Rhs=Self> {\n     /// The method for the `>>=` operator\n+    #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn shr_assign(&mut self, Rhs);\n }\n \n macro_rules! shr_assign_impl {\n     ($t:ty, $f:ty) => (\n-        #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n+        #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n         impl ShrAssign<$f> for $t {\n             #[inline]\n             fn shr_assign(&mut self, other: $f) {"}, {"sha": "cb109c010c7694ebdbaeb375f65ae98480171cfa", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -40,7 +40,7 @@ pub use intrinsics::copy;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use intrinsics::write_bytes;\n \n-#[unstable(feature = \"drop_in_place\", reason = \"just exposed, needs FCP\", issue = \"27908\")]\n+#[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n pub use intrinsics::drop_in_place;\n \n /// Creates a null raw pointer."}, {"sha": "cafffb5266f911f8e6a210b7d2221376b2bbf8f2", "filename": "src/libcoretest/cell.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibcoretest%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibcoretest%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcell.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -159,6 +159,7 @@ fn ref_map_accessor() {\n }\n \n #[test]\n+#[allow(deprecated)]\n fn ref_filter_map_accessor() {\n     struct X(RefCell<Result<u32, ()>>);\n     impl X {\n@@ -189,6 +190,7 @@ fn ref_mut_map_accessor() {\n }\n \n #[test]\n+#[allow(deprecated)]\n fn ref_mut_filter_map_accessor() {\n     struct X(RefCell<Result<u32, ()>>);\n     impl X {"}, {"sha": "4ff3b21dc83f4901bacaabf9f6c15767a719ae0f", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -26,7 +26,6 @@\n #![feature(associated_consts)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(cell_extras)]\n #![feature(collections)]\n #![feature(const_fn)]\n #![feature(copy_from_slice)]\n@@ -37,11 +36,9 @@\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n-#![feature(scoped_tls)]\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n #![feature(str_char)]\n-#![feature(time2)]\n #![cfg_attr(test, feature(test))]\n \n extern crate arena;"}, {"sha": "3b72685eca310fd66749ec61d3793527792ef85b", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -448,6 +448,7 @@ pub mod tls {\n     use rbml::opaque::Encoder as OpaqueEncoder;\n     use rbml::opaque::Decoder as OpaqueDecoder;\n     use serialize;\n+    use std::cell::Cell;\n     use std::mem;\n     use middle::ty::{self, Ty};\n     use middle::subst::Substs;\n@@ -459,12 +460,14 @@ pub mod tls {\n         fn encode_substs(&self, encoder: &mut OpaqueEncoder, substs: &Substs<'tcx>);\n     }\n \n-    /// Marker type used for the scoped TLS slot.\n-    /// The type context cannot be used directly because the scoped TLS\n+    /// Marker type used for the TLS slot.\n+    /// The type context cannot be used directly because the TLS\n     /// in libstd doesn't allow types generic over lifetimes.\n     struct TlsPayload;\n \n-    scoped_thread_local!(static TLS_ENCODING: TlsPayload);\n+    thread_local! {\n+        static TLS_ENCODING: Cell<Option<*const TlsPayload>> = Cell::new(None)\n+    }\n \n     /// Execute f after pushing the given EncodingContext onto the TLS stack.\n     pub fn enter_encoding_context<'tcx, F, R>(ecx: &EncodingContext<'tcx>,\n@@ -474,7 +477,13 @@ pub mod tls {\n     {\n         let tls_payload = (ecx as *const _, encoder as *mut _);\n         let tls_ptr = &tls_payload as *const _ as *const TlsPayload;\n-        TLS_ENCODING.set(unsafe { &*tls_ptr }, || f(ecx, encoder))\n+        TLS_ENCODING.with(|tls| {\n+            let prev = tls.get();\n+            tls.set(Some(tls_ptr));\n+            let ret = f(ecx, encoder);\n+            tls.set(prev);\n+            return ret\n+        })\n     }\n \n     /// Execute f with access to the thread-local encoding context and\n@@ -506,8 +515,8 @@ pub mod tls {\n         where F: FnOnce(&EncodingContext, &mut OpaqueEncoder) -> R\n     {\n         TLS_ENCODING.with(|tls| {\n-            let tls_payload = (tls as *const TlsPayload)\n-                                   as *mut (&EncodingContext, &mut OpaqueEncoder);\n+            let tls = tls.get().unwrap();\n+            let tls_payload = tls as *mut (&EncodingContext, &mut OpaqueEncoder);\n             f((*tls_payload).0, (*tls_payload).1)\n         })\n     }\n@@ -519,7 +528,9 @@ pub mod tls {\n         fn translate_def_id(&self, def_id: DefId) -> DefId;\n     }\n \n-    scoped_thread_local!(static TLS_DECODING: TlsPayload);\n+    thread_local! {\n+        static TLS_DECODING: Cell<Option<*const TlsPayload>> = Cell::new(None)\n+    }\n \n     /// Execute f after pushing the given DecodingContext onto the TLS stack.\n     pub fn enter_decoding_context<'tcx, F, R>(dcx: &DecodingContext<'tcx>,\n@@ -529,7 +540,13 @@ pub mod tls {\n     {\n         let tls_payload = (dcx as *const _, decoder as *mut _);\n         let tls_ptr = &tls_payload as *const _ as *const TlsPayload;\n-        TLS_DECODING.set(unsafe { &*tls_ptr }, || f(dcx, decoder))\n+        TLS_DECODING.with(|tls| {\n+            let prev = tls.get();\n+            tls.set(Some(tls_ptr));\n+            let ret = f(dcx, decoder);\n+            tls.set(prev);\n+            return ret\n+        })\n     }\n \n     /// Execute f with access to the thread-local decoding context and\n@@ -563,8 +580,8 @@ pub mod tls {\n         where F: FnOnce(&DecodingContext, &mut OpaqueDecoder) -> R\n     {\n         TLS_DECODING.with(|tls| {\n-            let tls_payload = (tls as *const TlsPayload)\n-                                   as *mut (&DecodingContext, &mut OpaqueDecoder);\n+            let tls = tls.get().unwrap();\n+            let tls_payload = tls as *mut (&DecodingContext, &mut OpaqueDecoder);\n             f((*tls_payload).0, (*tls_payload).1)\n         })\n     }"}, {"sha": "a014c63f0a2a900a33ee56859b42457230b779cb", "filename": "src/librustc/middle/ty/context.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -619,6 +619,7 @@ impl<'a, 'tcx> Lift<'tcx> for &'a Substs<'a> {\n pub mod tls {\n     use middle::ty;\n \n+    use std::cell::Cell;\n     use std::fmt;\n     use syntax::codemap;\n \n@@ -627,7 +628,9 @@ pub mod tls {\n     /// in libstd doesn't allow types generic over lifetimes.\n     struct ThreadLocalTyCx;\n \n-    scoped_thread_local!(static TLS_TCX: ThreadLocalTyCx);\n+    thread_local! {\n+        static TLS_TCX: Cell<Option<*const ThreadLocalTyCx>> = Cell::new(None)\n+    }\n \n     fn span_debug(span: codemap::Span, f: &mut fmt::Formatter) -> fmt::Result {\n         with(|tcx| {\n@@ -640,18 +643,27 @@ pub mod tls {\n             let original_span_debug = span_dbg.get();\n             span_dbg.set(span_debug);\n             let tls_ptr = &tcx as *const _ as *const ThreadLocalTyCx;\n-            let result = TLS_TCX.set(unsafe { &*tls_ptr }, || f(&tcx));\n+            let result = TLS_TCX.with(|tls| {\n+                let prev = tls.get();\n+                tls.set(Some(tls_ptr));\n+                let ret = f(&tcx);\n+                tls.set(prev);\n+                ret\n+            });\n             span_dbg.set(original_span_debug);\n             result\n         })\n     }\n \n     pub fn with<F: FnOnce(&ty::ctxt) -> R, R>(f: F) -> R {\n-        TLS_TCX.with(|tcx| f(unsafe { &*(tcx as *const _ as *const ty::ctxt) }))\n+        TLS_TCX.with(|tcx| {\n+            let tcx = tcx.get().unwrap();\n+            f(unsafe { &*(tcx as *const ty::ctxt) })\n+        })\n     }\n \n     pub fn with_opt<F: FnOnce(Option<&ty::ctxt>) -> R, R>(f: F) -> R {\n-        if TLS_TCX.is_set() {\n+        if TLS_TCX.with(|tcx| tcx.get().is_some()) {\n             with(|v| f(Some(v)))\n         } else {\n             f(None)"}, {"sha": "5386c5b77c2121255ef4f7f0fe1a5b3d4fdfb479", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -23,7 +23,6 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n-#![feature(time2)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "7b2e678499bb88547aa26c97c5720fdb57faf0bd", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -1418,7 +1418,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Return the dict-like variant corresponding to a given `Def`.\n     pub fn def_struct_variant(&self,\n                               def: Def,\n-                              span: Span)\n+                              _span: Span)\n                               -> Option<(ty::AdtDef<'tcx>, ty::VariantDef<'tcx>)>\n     {\n         let (adt, variant) = match def {\n@@ -1441,15 +1441,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if var_kind == ty::VariantKind::Struct {\n             Some((adt, variant))\n         } else if var_kind == ty::VariantKind::Unit {\n-            if !self.tcx().sess.features.borrow().braced_empty_structs {\n-                let mut err = self.tcx().sess.struct_span_err(span,\n-                                                              \"empty structs and enum variants \\\n-                                                               with braces are unstable\");\n-                fileline_help!(&mut err, span, \"add #![feature(braced_empty_structs)] to \\\n-                                                the crate features to enable\");\n-                err.emit();\n-            }\n-\n              Some((adt, variant))\n          } else {\n              None"}, {"sha": "a28944995c48cd2e344b28fa3fc0c258fb272725", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -121,25 +121,6 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                         },\n                         _ => {},\n                     }\n-                } else {\n-                    let tcx = self.tcx();\n-\n-                    if let hir::ExprAssignOp(_, ref lhs, ref rhs) = e.node {\n-                        if\n-                            !tcx.sess.features.borrow().augmented_assignments &&\n-                            !self.fcx.expr_ty(e).references_error() &&\n-                            !self.fcx.expr_ty(lhs).references_error() &&\n-                            !self.fcx.expr_ty(rhs).references_error()\n-                        {\n-                            tcx.sess.struct_span_err(e.span,\n-                                                     \"overloaded augmented assignments \\\n-                                                      are not stable\")\n-                                .fileline_help(e.span,\n-                                               \"add #![feature(augmented_assignments)] to the \\\n-                                                crate root to enable\")\n-                                .emit()\n-                        }\n-                    }\n                 }\n             }\n             _ => {},"}, {"sha": "0835762c4e5c579d4f90f20c06acd23ac4d5b8c6", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -81,7 +81,6 @@ This API is completely unstable and subject to change.\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n-#![feature(cell_extras)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "e062f9040afc440b3ff4871e1364e5d19af39f71", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -226,7 +226,6 @@\n #![feature(core_float)]\n #![feature(core_intrinsics)]\n #![feature(decode_utf16)]\n-#![feature(drop_in_place)]\n #![feature(dropck_parametricity)]\n #![feature(float_extras)]\n #![feature(float_from_str_radix)]"}, {"sha": "0ff3a6907026ed34cb5a699dbc986ccc46187f9f", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -209,6 +209,9 @@ impl Condvar {\n     #[unstable(feature = \"wait_timeout_with\",\n                reason = \"unsure if this API is broadly needed or what form it should take\",\n                issue = \"27748\")]\n+    #[rustc_deprecated(since = \"1.8.0\",\n+                       reason = \"wonky signature and questionable \\\n+                                 implementation didn't justify existence\")]\n     pub fn wait_timeout_with<'a, T, F>(&self,\n                                        guard: MutexGuard<'a, T>,\n                                        dur: Duration,"}, {"sha": "0603dad4528048d8bf3864046fc14f57d2266184", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -457,6 +457,10 @@ impl<'rwlock, T: ?Sized> RwLockReadGuard<'rwlock, T> {\n                reason = \"recently added, needs RFC for stabilization,\n                          questionable interaction with Condvar\",\n                issue = \"27746\")]\n+    #[rustc_deprecated(since = \"1.8.0\",\n+                       reason = \"unsound on Mutex because of Condvar and \\\n+                                 RwLock may also with to be used with Condvar \\\n+                                 one day\")]\n     pub fn map<U: ?Sized, F>(this: Self, cb: F) -> RwLockReadGuard<'rwlock, U>\n         where F: FnOnce(&T) -> &U\n     {\n@@ -508,6 +512,10 @@ impl<'rwlock, T: ?Sized> RwLockWriteGuard<'rwlock, T> {\n                reason = \"recently added, needs RFC for stabilization,\n                          questionable interaction with Condvar\",\n                issue = \"27746\")]\n+    #[rustc_deprecated(since = \"1.8.0\",\n+                       reason = \"unsound on Mutex because of Condvar and \\\n+                                 RwLock may also with to be used with Condvar \\\n+                                 one day\")]\n     pub fn map<U: ?Sized, F>(this: Self, cb: F) -> RwLockWriteGuard<'rwlock, U>\n         where F: FnOnce(&mut T) -> &mut U\n     {"}, {"sha": "acbfacce8bd7f073e165ded5210a39e94f016825", "filename": "src/libstd/sys/windows/compat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibstd%2Fsys%2Fwindows%2Fcompat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibstd%2Fsys%2Fwindows%2Fcompat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fcompat.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -28,7 +28,7 @@ use sync::atomic::{AtomicUsize, Ordering};\n use sys::c;\n \n pub fn lookup(module: &str, symbol: &str) -> Option<usize> {\n-    let mut module: Vec<u16> = module.utf16_units().collect();\n+    let mut module: Vec<u16> = module.encode_utf16().collect();\n     module.push(0);\n     let symbol = CString::new(symbol).unwrap();\n     unsafe {"}, {"sha": "1cd05b61d25b0f3b49d16fe65679a05b2ea069c4", "filename": "src/libstd/sys/windows/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -56,7 +56,7 @@ fn write(out: &Output, data: &[u8]) -> io::Result<usize> {\n         Output::Pipe(ref p) => return p.get().write(data),\n     };\n     let utf16 = match str::from_utf8(data).ok() {\n-        Some(utf8) => utf8.utf16_units().collect::<Vec<u16>>(),\n+        Some(utf8) => utf8.encode_utf16().collect::<Vec<u16>>(),\n         None => return Err(invalid_encoding()),\n     };\n     let mut written = 0;"}, {"sha": "981ba1e36e9d5c531b7811365b6039443b0fb921", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -188,6 +188,7 @@ pub use self::local::{LocalKey, LocalKeyState};\n            reason = \"scoped TLS has yet to have wide enough use to fully \\\n                      consider stabilizing its interface\",\n            issue = \"27715\")]\n+#[allow(deprecated)]\n pub use self::scoped_tls::ScopedKey;\n \n #[unstable(feature = \"libstd_thread_internals\", issue = \"0\")]"}, {"sha": "dea58d016e4ca5568f8533a02abed51d3f1e2b77", "filename": "src/libstd/thread/scoped_tls.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fscoped_tls.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -41,6 +41,7 @@\n //! ```\n \n #![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n+#![allow(deprecated)]\n \n #[doc(hidden)]\n pub use self::imp::KeyInner as __KeyInner;\n@@ -56,6 +57,8 @@ pub use self::imp::KeyInner as __KeyInner;\n            reason = \"scoped TLS has yet to have wide enough use to fully consider \\\n                      stabilizing its interface\",\n            issue = \"27715\")]\n+#[rustc_deprecated(since = \"1.8.0\",\n+                   reason = \"hasn't proven itself over LocalKey\")]\n pub struct ScopedKey<T:'static> { inner: fn() -> &'static imp::KeyInner<T> }\n \n /// Declare a new scoped thread local storage key.\n@@ -68,6 +71,8 @@ pub struct ScopedKey<T:'static> { inner: fn() -> &'static imp::KeyInner<T> }\n #[unstable(feature = \"thread_local_internals\",\n            reason = \"should not be necessary\",\n            issue = \"0\")]\n+#[rustc_deprecated(since = \"1.8.0\",\n+                   reason = \"hasn't proven itself over LocalKey\")]\n #[macro_export]\n #[allow_internal_unstable]\n macro_rules! scoped_thread_local {\n@@ -85,6 +90,8 @@ macro_rules! scoped_thread_local {\n #[unstable(feature = \"thread_local_internals\",\n            reason = \"should not be necessary\",\n            issue = \"0\")]\n+#[rustc_deprecated(since = \"1.8.0\",\n+                   reason = \"hasn't proven itself over LocalKey\")]\n #[macro_export]\n #[allow_internal_unstable]\n macro_rules! __scoped_thread_local_inner {\n@@ -101,6 +108,8 @@ macro_rules! __scoped_thread_local_inner {\n            reason = \"scoped TLS has yet to have wide enough use to fully consider \\\n                      stabilizing its interface\",\n            issue = \"27715\")]\n+#[rustc_deprecated(since = \"1.8.0\",\n+                   reason = \"hasn't proven itself over LocalKey\")]\n impl<T> ScopedKey<T> {\n     #[doc(hidden)]\n     pub const fn new(inner: fn() -> &'static imp::KeyInner<T>) -> ScopedKey<T> {"}, {"sha": "aa0a843dc9a548763d6a713538e39fbe7659f9d3", "filename": "src/libstd/time/mod.rs", "status": "modified", "additions": 55, "deletions": 27, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibstd%2Ftime%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibstd%2Ftime%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fmod.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -41,7 +41,7 @@ mod duration;\n /// allows measuring the duration between two instants (or comparing two\n /// instants).\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n-#[unstable(feature = \"time2\", reason = \"recently added\", issue = \"29866\")]\n+#[stable(feature = \"time2\", since = \"1.8.0\")]\n pub struct Instant(time::Instant);\n \n /// A measurement of the system clock, useful for talking to\n@@ -64,18 +64,18 @@ pub struct Instant(time::Instant);\n /// fixed point in time, a `SystemTime` can be converted to a human-readable time,\n /// or perhaps some other string representation.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n-#[unstable(feature = \"time2\", reason = \"recently added\", issue = \"29866\")]\n+#[stable(feature = \"time2\", since = \"1.8.0\")]\n pub struct SystemTime(time::SystemTime);\n \n-/// An error returned from the `duration_from_earlier` method on `SystemTime`,\n+/// An error returned from the `duration_since` method on `SystemTime`,\n /// used to learn about why how far in the opposite direction a timestamp lies.\n #[derive(Clone, Debug)]\n-#[unstable(feature = \"time2\", reason = \"recently added\", issue = \"29866\")]\n+#[stable(feature = \"time2\", since = \"1.8.0\")]\n pub struct SystemTimeError(Duration);\n \n-#[unstable(feature = \"time2\", reason = \"recently added\", issue = \"29866\")]\n impl Instant {\n     /// Returns an instant corresponding to \"now\".\n+    #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn now() -> Instant {\n         Instant(time::Instant::now())\n     }\n@@ -88,6 +88,14 @@ impl Instant {\n     /// only be possible if `earlier` was created after `self`. Because\n     /// `Instant` is monotonic, the only time that this should happen should be\n     /// a bug.\n+    #[stable(feature = \"time2\", since = \"1.8.0\")]\n+    pub fn duration_since(&self, earlier: Instant) -> Duration {\n+        self.0.sub_instant(&earlier.0)\n+    }\n+\n+    /// Deprecated, renamed to `duration_since`\n+    #[unstable(feature = \"time2_old\", issue = \"29866\")]\n+    #[rustc_deprecated(since = \"1.8.0\", reason = \"renamed to duration_since\")]\n     pub fn duration_from_earlier(&self, earlier: Instant) -> Duration {\n         self.0.sub_instant(&earlier.0)\n     }\n@@ -99,12 +107,13 @@ impl Instant {\n     /// This function may panic if the current time is earlier than this\n     /// instant, which is something that can happen if an `Instant` is\n     /// produced synthetically.\n+    #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn elapsed(&self) -> Duration {\n-        Instant::now().duration_from_earlier(*self)\n+        Instant::now() - *self\n     }\n }\n \n-#[unstable(feature = \"time2\", reason = \"recently added\", issue = \"29866\")]\n+#[stable(feature = \"time2\", since = \"1.8.0\")]\n impl Add<Duration> for Instant {\n     type Output = Instant;\n \n@@ -113,7 +122,7 @@ impl Add<Duration> for Instant {\n     }\n }\n \n-#[unstable(feature = \"time2\", reason = \"recently added\", issue = \"29866\")]\n+#[stable(feature = \"time2\", since = \"1.8.0\")]\n impl Sub<Duration> for Instant {\n     type Output = Instant;\n \n@@ -122,16 +131,25 @@ impl Sub<Duration> for Instant {\n     }\n }\n \n-#[unstable(feature = \"time2\", reason = \"recently added\", issue = \"29866\")]\n+#[stable(feature = \"time2\", since = \"1.8.0\")]\n+impl Sub<Instant> for Instant {\n+    type Output = Duration;\n+\n+    fn sub(self, other: Instant) -> Duration {\n+        self.duration_since(other)\n+    }\n+}\n+\n+#[stable(feature = \"time2\", since = \"1.8.0\")]\n impl fmt::Debug for Instant {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }\n \n-#[unstable(feature = \"time2\", reason = \"recently added\", issue = \"29866\")]\n impl SystemTime {\n     /// Returns the system time corresponding to \"now\".\n+    #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn now() -> SystemTime {\n         SystemTime(time::SystemTime::now())\n     }\n@@ -147,6 +165,15 @@ impl SystemTime {\n     ///\n     /// Returns an `Err` if `earlier` is later than `self`, and the error\n     /// contains how far from `self` the time is.\n+    #[stable(feature = \"time2\", since = \"1.8.0\")]\n+    pub fn duration_since(&self, earlier: SystemTime)\n+                          -> Result<Duration, SystemTimeError> {\n+        self.0.sub_time(&earlier.0).map_err(SystemTimeError)\n+    }\n+\n+    /// Deprecated, renamed to `duration_since`\n+    #[unstable(feature = \"time2_old\", issue = \"29866\")]\n+    #[rustc_deprecated(since = \"1.8.0\", reason = \"renamed to duration_since\")]\n     pub fn duration_from_earlier(&self, earlier: SystemTime)\n                                  -> Result<Duration, SystemTimeError> {\n         self.0.sub_time(&earlier.0).map_err(SystemTimeError)\n@@ -162,12 +189,13 @@ impl SystemTime {\n     ///\n     /// Returns an `Err` if `self` is later than the current system time, and\n     /// the error contains how far from the current system time `self` is.\n+    #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn elapsed(&self) -> Result<Duration, SystemTimeError> {\n-        SystemTime::now().duration_from_earlier(*self)\n+        SystemTime::now().duration_since(*self)\n     }\n }\n \n-#[unstable(feature = \"time2\", reason = \"recently added\", issue = \"29866\")]\n+#[stable(feature = \"time2\", since = \"1.8.0\")]\n impl Add<Duration> for SystemTime {\n     type Output = SystemTime;\n \n@@ -176,7 +204,7 @@ impl Add<Duration> for SystemTime {\n     }\n }\n \n-#[unstable(feature = \"time2\", reason = \"recently added\", issue = \"29866\")]\n+#[stable(feature = \"time2\", since = \"1.8.0\")]\n impl Sub<Duration> for SystemTime {\n     type Output = SystemTime;\n \n@@ -185,7 +213,7 @@ impl Sub<Duration> for SystemTime {\n     }\n }\n \n-#[unstable(feature = \"time2\", reason = \"recently added\", issue = \"29866\")]\n+#[stable(feature = \"time2\", since = \"1.8.0\")]\n impl fmt::Debug for SystemTime {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.0.fmt(f)\n@@ -196,32 +224,32 @@ impl fmt::Debug for SystemTime {\n /// learn about where in time a `SystemTime` lies.\n ///\n /// This constant is defined to be \"1970-01-01 00:00:00 UTC\" on all systems with\n-/// respect to the system clock. Using `duration_from_earlier` on an existing\n+/// respect to the system clock. Using `duration_since` on an existing\n /// `SystemTime` instance can tell how far away from this point in time a\n /// measurement lies, and using `UNIX_EPOCH + duration` can be used to create a\n /// `SystemTime` instance to represent another fixed point in time.\n-#[unstable(feature = \"time2\", reason = \"recently added\", issue = \"29866\")]\n+#[stable(feature = \"time2\", since = \"1.8.0\")]\n pub const UNIX_EPOCH: SystemTime = SystemTime(time::UNIX_EPOCH);\n \n-#[unstable(feature = \"time2\", reason = \"recently added\", issue = \"29866\")]\n impl SystemTimeError {\n     /// Returns the positive duration which represents how far forward the\n     /// second system time was from the first.\n     ///\n-    /// A `SystemTimeError` is returned from the `duration_from_earlier`\n+    /// A `SystemTimeError` is returned from the `duration_since`\n     /// operation whenever the second system time represents a point later\n     /// in time than the `self` of the method call.\n+    #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn duration(&self) -> Duration {\n         self.0\n     }\n }\n \n-#[unstable(feature = \"time2\", reason = \"recently added\", issue = \"29866\")]\n+#[stable(feature = \"time2\", since = \"1.8.0\")]\n impl Error for SystemTimeError {\n     fn description(&self) -> &str { \"other time was not earlier than self\" }\n }\n \n-#[unstable(feature = \"time2\", reason = \"recently added\", issue = \"29866\")]\n+#[stable(feature = \"time2\", since = \"1.8.0\")]\n impl fmt::Display for SystemTimeError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"second time provided was later than self\")\n@@ -265,7 +293,7 @@ mod tests {\n     fn instant_math() {\n         let a = Instant::now();\n         let b = Instant::now();\n-        let dur = b.duration_from_earlier(a);\n+        let dur = b.duration_since(a);\n         assert_almost_eq!(b - dur, a);\n         assert_almost_eq!(a + dur, b);\n \n@@ -277,14 +305,14 @@ mod tests {\n     #[should_panic]\n     fn instant_duration_panic() {\n         let a = Instant::now();\n-        (a - Duration::new(1, 0)).duration_from_earlier(a);\n+        (a - Duration::new(1, 0)).duration_since(a);\n     }\n \n     #[test]\n     fn system_time_math() {\n         let a = SystemTime::now();\n         let b = SystemTime::now();\n-        match b.duration_from_earlier(a) {\n+        match b.duration_since(a) {\n             Ok(dur) if dur == Duration::new(0, 0) => {\n                 assert_almost_eq!(a, b);\n             }\n@@ -302,8 +330,8 @@ mod tests {\n         }\n \n         let second = Duration::new(1, 0);\n-        assert_almost_eq!(a.duration_from_earlier(a - second).unwrap(), second);\n-        assert_almost_eq!(a.duration_from_earlier(a + second).unwrap_err()\n+        assert_almost_eq!(a.duration_since(a - second).unwrap(), second);\n+        assert_almost_eq!(a.duration_since(a + second).unwrap_err()\n                            .duration(), second);\n \n         assert_almost_eq!(a - second + second, a);\n@@ -327,8 +355,8 @@ mod tests {\n     #[test]\n     fn since_epoch() {\n         let ts = SystemTime::now();\n-        let a = ts.duration_from_earlier(UNIX_EPOCH).unwrap();\n-        let b = ts.duration_from_earlier(UNIX_EPOCH - Duration::new(1, 0)).unwrap();\n+        let a = ts.duration_since(UNIX_EPOCH).unwrap();\n+        let b = ts.duration_since(UNIX_EPOCH - Duration::new(1, 0)).unwrap();\n         assert!(b > a);\n         assert_eq!(b - a, Duration::new(1, 0));\n "}, {"sha": "3f2fb2d3d1704296911adb7fc4928c0c3b5cc75f", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -213,10 +213,10 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status\n     (\"unwind_attributes\", \"1.4.0\", None, Active),\n \n     // allow empty structs and enum variants with braces\n-    (\"braced_empty_structs\", \"1.5.0\", Some(29720), Active),\n+    (\"braced_empty_structs\", \"1.5.0\", Some(29720), Accepted),\n \n     // allow overloading augmented assignment operations like `a += b`\n-    (\"augmented_assignments\", \"1.5.0\", Some(28235), Active),\n+    (\"augmented_assignments\", \"1.5.0\", Some(28235), Accepted),\n \n     // allow `#[no_debug]`\n     (\"no_debug\", \"1.5.0\", Some(29721), Active),\n@@ -563,8 +563,6 @@ pub struct Features {\n     pub cfg_target_feature: bool,\n     pub cfg_target_vendor: bool,\n     pub cfg_target_thread_local: bool,\n-    pub augmented_assignments: bool,\n-    pub braced_empty_structs: bool,\n     pub staged_api: bool,\n     pub stmt_expr_attributes: bool,\n     pub deprecated: bool,\n@@ -597,8 +595,6 @@ impl Features {\n             cfg_target_feature: false,\n             cfg_target_vendor: false,\n             cfg_target_thread_local: false,\n-            augmented_assignments: false,\n-            braced_empty_structs: false,\n             staged_api: false,\n             stmt_expr_attributes: false,\n             deprecated: false,\n@@ -956,10 +952,7 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n     fn visit_variant_data(&mut self, s: &'v ast::VariantData, _: ast::Ident,\n                         _: &'v ast::Generics, _: ast::NodeId, span: Span) {\n         if s.fields().is_empty() {\n-            if s.is_struct() {\n-                self.gate_feature(\"braced_empty_structs\", span,\n-                                  \"empty structs and enum variants with braces are unstable\");\n-            } else if s.is_tuple() {\n+            if s.is_tuple() {\n                 self.context.span_handler.struct_span_err(span, \"empty tuple structs and enum \\\n                                                                  variants are not allowed, use \\\n                                                                  unit structs and enum variants \\\n@@ -1196,8 +1189,6 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &Handler,\n         cfg_target_feature: cx.has_feature(\"cfg_target_feature\"),\n         cfg_target_vendor: cx.has_feature(\"cfg_target_vendor\"),\n         cfg_target_thread_local: cx.has_feature(\"cfg_target_thread_local\"),\n-        augmented_assignments: cx.has_feature(\"augmented_assignments\"),\n-        braced_empty_structs: cx.has_feature(\"braced_empty_structs\"),\n         staged_api: cx.has_feature(\"staged_api\"),\n         stmt_expr_attributes: cx.has_feature(\"stmt_expr_attributes\"),\n         deprecated: cx.has_feature(\"deprecated\"),"}, {"sha": "7536ab9c5afc677e05fda8e83587241f889a6215", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -40,7 +40,6 @@\n #![feature(rustc_private)]\n #![feature(set_stdio)]\n #![feature(staged_api)]\n-#![feature(time2)]\n \n extern crate getopts;\n extern crate serialize;"}, {"sha": "6601e7240a780df3321e032d4a55d34ef6c4f04b", "filename": "src/test/auxiliary/augmented_assignments.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Fauxiliary%2Faugmented_assignments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Fauxiliary%2Faugmented_assignments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Faugmented_assignments.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -8,15 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(augmented_assignments)]\n-#![feature(op_assign_traits)]\n-\n use std::ops::AddAssign;\n \n-pub struct Int(i32);\n+pub struct Int(pub i32);\n \n impl AddAssign<i32> for Int {\n     fn add_assign(&mut self, _: i32) {\n-        unimplemented!();\n     }\n }"}, {"sha": "22f65c2b0d8f86470130de485c70d5f33d514e99", "filename": "src/test/auxiliary/empty-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Fauxiliary%2Fempty-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Fauxiliary%2Fempty-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fempty-struct.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(braced_empty_structs)]\n-\n pub struct XEmpty1 {}\n pub struct XEmpty2;\n "}, {"sha": "221015d5120622bf964cf8a4fe953ee1391c9fa2", "filename": "src/test/compile-fail/augmented-assignments.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Fcompile-fail%2Faugmented-assignments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Fcompile-fail%2Faugmented-assignments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Faugmented-assignments.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(augmented_assignments)]\n-\n use std::ops::AddAssign;\n \n struct Int(i32);"}, {"sha": "1c86af30c79fd1b66757ac4d78878c9b5dff5cd9", "filename": "src/test/compile-fail/empty-struct-braces-expr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-expr.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -12,8 +12,6 @@\n \n // aux-build:empty-struct.rs\n \n-#![feature(braced_empty_structs)]\n-\n extern crate empty_struct;\n use empty_struct::*;\n "}, {"sha": "a5c740d9f638a65a94b8fbf9833102f8264bf472", "filename": "src/test/compile-fail/empty-struct-braces-pat-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-1.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -12,8 +12,6 @@\n \n // aux-build:empty-struct.rs\n \n-#![feature(braced_empty_structs)]\n-\n extern crate empty_struct;\n use empty_struct::*;\n "}, {"sha": "0bd96d82095968d9e7394a0148218d8b304a85ae", "filename": "src/test/compile-fail/empty-struct-braces-pat-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -12,8 +12,6 @@\n \n // aux-build:empty-struct.rs\n \n-#![feature(braced_empty_structs)]\n-\n extern crate empty_struct;\n use empty_struct::*;\n "}, {"sha": "88249fc422f2cb8c37e0a22e4bb2ad5eb89a9ac8", "filename": "src/test/compile-fail/empty-struct-braces-pat-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -12,8 +12,6 @@\n \n // aux-build:empty-struct.rs\n \n-#![feature(braced_empty_structs)]\n-\n extern crate empty_struct;\n use empty_struct::*;\n "}, {"sha": "350b96c764ca69734082e1dcf37934ccd47f1405", "filename": "src/test/compile-fail/empty-struct-unit-expr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-expr.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -12,8 +12,6 @@\n \n // aux-build:empty-struct.rs\n \n-#![feature(braced_empty_structs)]\n-\n extern crate empty_struct;\n use empty_struct::*;\n "}, {"sha": "a75290c94053d8df912a6a642c8b91de32f47109", "filename": "src/test/compile-fail/empty-struct-unit-pat.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -12,9 +12,6 @@\n \n // aux-build:empty-struct.rs\n \n-// remove prior feature after warning cycle and promoting warnings to errors\n-#![feature(braced_empty_structs)]\n-\n extern crate empty_struct;\n use empty_struct::*;\n "}, {"sha": "d014c45ad2d1764e6e23c16e476a37909dff4ea9", "filename": "src/test/compile-fail/issue-27831.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Fcompile-fail%2Fissue-27831.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Fcompile-fail%2Fissue-27831.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27831.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -22,11 +22,11 @@ fn main() {\n     let Foo { .. } = x; //~ ERROR `Foo` does not name a struct\n \n     let x = Bar;\n-    Bar { ..x }; //~ ERROR empty structs and enum variants with braces are unstable\n-    let Bar { .. } = x; //~ ERROR empty structs and enum variants with braces are unstable\n+    Bar { ..x };\n+    let Bar { .. } = x;\n \n     match Enum::Bar {\n-        Enum::Bar { .. } //~ ERROR empty structs and enum variants with braces are unstable\n+        Enum::Bar { .. }\n            => {}\n         Enum::Foo { .. } //~ ERROR `Enum::Foo` does not name a struct\n            => {}"}, {"sha": "b68e011af15f232f009e70d324e35d2b471cf5c9", "filename": "src/test/run-pass/augmented-assignments-feature-gate-cross.rs", "status": "renamed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Faugmented-assignments-feature-gate-cross.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Faugmented-assignments-feature-gate-cross.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Faugmented-assignments-feature-gate-cross.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -10,16 +10,11 @@\n \n // aux-build:augmented_assignments.rs\n \n-// Test that the feature gate is needed when using augmented assignments that were overloaded in\n-// another crate\n-\n extern crate augmented_assignments;\n \n use augmented_assignments::Int;\n \n fn main() {\n     let mut x = Int(0);\n     x += 1;\n-    //~^ error: overloaded augmented assignments are not stable\n-    //~| help: add #![feature(augmented_assignments)] to the crate root to enable\n }", "previous_filename": "src/test/compile-fail/augmented-assignments-feature-gate-cross.rs"}, {"sha": "f7e20ee94458fcf02f59abfbc85b16d5006404c9", "filename": "src/test/run-pass/augmented-assignments-feature-gate.rs", "status": "renamed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Faugmented-assignments-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Faugmented-assignments-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Faugmented-assignments-feature-gate.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -14,13 +14,10 @@ struct Int(i32);\n \n impl AddAssign<i32> for Int {\n     fn add_assign(&mut self, _: i32) {\n-        unimplemented!()\n     }\n }\n \n fn main() {\n     let mut x = Int(0);\n     x += 1;\n-    //~^ error: overloaded augmented assignments are not stable\n-    //~| help: add #![feature(augmented_assignments)] to the crate root to enable\n }", "previous_filename": "src/test/compile-fail/augmented-assignments-feature-gate.rs"}, {"sha": "f1cb2c56dbcf0c493aa484c6d0c0bd166c0c6713", "filename": "src/test/run-pass/augmented-assignments-trait.rs", "status": "renamed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Faugmented-assignments-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Faugmented-assignments-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Faugmented-assignments-trait.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -9,14 +9,11 @@\n // except according to those terms.\n \n use std::ops::AddAssign;\n-//~^ error: use of unstable library feature 'op_assign_traits'\n \n struct Int(i32);\n \n impl AddAssign for Int {\n-    //~^ error: use of unstable library feature 'op_assign_traits'\n     fn add_assign(&mut self, _: Int) {\n-        //~^ error: use of unstable library feature 'op_assign_traits'\n         unimplemented!()\n     }\n }", "previous_filename": "src/test/compile-fail/augmented-assignments-trait.rs"}, {"sha": "8c9ebcd274a4bf1c4fd8c39e164e2e9c60d58b4c", "filename": "src/test/run-pass/augmented-assignments.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Faugmented-assignments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Faugmented-assignments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Faugmented-assignments.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(augmented_assignments)]\n-#![feature(op_assign_traits)]\n-\n use std::mem;\n use std::ops::{\n     AddAssign, BitAndAssign, BitOrAssign, BitXorAssign, DivAssign, Index, MulAssign, RemAssign,"}, {"sha": "8d19209208dc45f08fe2bfe76fd694416a4aa88c", "filename": "src/test/run-pass/empty-struct-braces-derive.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Fempty-struct-braces-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Fempty-struct-braces-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-struct-braces-derive.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -10,7 +10,6 @@\n \n // `#[derive(Trait)]` works for empty structs/variants with braces\n \n-#![feature(braced_empty_structs)]\n #![feature(rustc_private)]\n \n extern crate serialize as rustc_serialize;"}, {"sha": "8287e151326d85ddd21b539ef36f424f3ad52b15", "filename": "src/test/run-pass/empty-struct-braces-gate-1.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Fempty-struct-braces-gate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Fempty-struct-braces-gate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-struct-braces-gate-1.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -11,11 +11,11 @@\n // Feature gate test for empty struct with braces\n // Can't define an empty braced struct\n \n-struct Empty1 {} //~ ERROR empty structs and enum variants with braces are unstable\n+struct Empty1 {}\n struct Empty2;\n \n enum E {\n-    Empty4 {}, //~ ERROR empty structs and enum variants with braces are unstable\n+    Empty4 {},\n     Empty5,\n }\n ", "previous_filename": "src/test/compile-fail/empty-struct-braces-gate-1.rs"}, {"sha": "0ec3c89859e62a1afa41b9f6b54e957443bfb90b", "filename": "src/test/run-pass/empty-struct-braces-gate-2.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Fempty-struct-braces-gate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Fempty-struct-braces-gate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-struct-braces-gate-2.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -18,29 +18,29 @@ enum E {\n }\n \n fn main() {\n-    let e2: Empty2 = Empty2 {}; //~ ERROR empty structs and enum variants with braces are unstable\n+    let e2: Empty2 = Empty2 {};\n     let e2: Empty2 = Empty2;\n-    let e5: E = E::Empty5 {}; //~ ERROR empty structs and enum variants with braces are unstable\n+    let e5: E = E::Empty5 {};\n     let e5: E = E::Empty5;\n \n     match e2 {\n-        Empty2 {} => {} //~ ERROR empty structs and enum variants with braces are unstable\n+        Empty2 {} => {}\n     }\n     match e2 {\n         Empty2 => {}\n     }\n     match e2 {\n-        Empty2 { .. } => {} //~ ERROR empty structs and enum variants with braces are unstable\n+        Empty2 { .. } => {}\n     }\n     match e5 {\n-        E::Empty5 {} => {} //~ ERROR empty structs and enum variants with braces are unstable\n+        E::Empty5 {} => {}\n     }\n     match e5 {\n         E::Empty5 => {}\n     }\n     match e5 {\n-        E::Empty5 { .. } => {} //~ ERROR empty structs and enum variants with braces are unstable\n+        E::Empty5 { .. } => {}\n     }\n \n-    let e22 = Empty2 { ..e2 }; //~ ERROR empty structs and enum variants with braces are unstable\n+    let e22 = Empty2 { ..e2 };\n }", "previous_filename": "src/test/compile-fail/empty-struct-braces-gate-2.rs"}, {"sha": "85ae77f20f155e3648bf90d80e539a25d78ee15d", "filename": "src/test/run-pass/empty-struct-braces.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -13,8 +13,6 @@\n \n // aux-build:empty-struct.rs\n \n-#![feature(braced_empty_structs)]\n-\n extern crate empty_struct;\n use empty_struct::*;\n "}, {"sha": "fb35ce33157d6ffcbbca6016373c1d839be0434f", "filename": "src/test/run-pass/issue-16819.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Fissue-16819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Fissue-16819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16819.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -10,8 +10,6 @@\n \n //`#[cfg]` on struct field permits empty unusable struct\n \n-#![feature(braced_empty_structs)]\n-\n struct S {\n     #[cfg(untrue)]\n     a: int,"}, {"sha": "dcfa569a933e8835075b4a9f024ff64ce5756e09", "filename": "src/test/run-pass/mir_augmented_assignments.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Fmir_augmented_assignments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Fmir_augmented_assignments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_augmented_assignments.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(augmented_assignments)]\n-#![feature(op_assign_traits)]\n #![feature(rustc_attrs)]\n \n use std::mem;"}, {"sha": "faa02c6698edd535025b9020111730e18f03a852", "filename": "src/test/run-pass/num-wrapping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Fnum-wrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Fnum-wrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnum-wrapping.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -12,7 +12,7 @@\n //\n // Test std::num::Wrapping<T> for {uN, iN, usize, isize}\n \n-#![feature(op_assign_traits, num_bits_bytes, test)]\n+#![feature(num_bits_bytes, test)]\n \n extern crate test;\n "}, {"sha": "8a23403359f9a148f16ecafd46a0ad802b7e099b", "filename": "src/test/run-pass/reachable-unnameable-items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Freachable-unnameable-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b643782a10288a86a500168d754026bd0fce2ab5/src%2Ftest%2Frun-pass%2Freachable-unnameable-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freachable-unnameable-items.rs?ref=b643782a10288a86a500168d754026bd0fce2ab5", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:reachable-unnameable-items.rs\n \n-#![feature(braced_empty_structs)]\n #![feature(recover)]\n \n extern crate reachable_unnameable_items;"}]}