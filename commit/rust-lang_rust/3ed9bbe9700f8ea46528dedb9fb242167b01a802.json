{"sha": "3ed9bbe9700f8ea46528dedb9fb242167b01a802", "node_id": "C_kwDOAAsO6NoAKDNlZDliYmU5NzAwZjhlYTQ2NTI4ZGVkYjlmYjI0MjE2N2IwMWE4MDI", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-01T21:44:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-01T21:44:25Z"}, "message": "Rollup merge of #95594 - the8472:raw_slice_methods, r=yaahc\n\nAdditional `*mut [T]` methods\n\nSplit out from #94247\n\nThis adds the following methods to raw slices that already exist on regular slices\n\n* `*mut [T]::is_empty`\n* `*mut [T]::split_at_mut`\n* `*mut [T]::split_at_mut_unchecked`\n\nThese methods reduce the amount of unsafe code needed to migrate `ChunksMut` and related iterators\nto raw slices (#94247)\n\nr? `@m-ou-se`", "tree": {"sha": "e8951fc6544c5f49599533eea00aeadd4cfb919d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8951fc6544c5f49599533eea00aeadd4cfb919d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ed9bbe9700f8ea46528dedb9fb242167b01a802", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJil925CRBK7hj4Ov3rIwAA/tAIALJeiwA2+mWGL0zG5AshzIY0\n6PYuP22Nru1fcIX5gnRBr4CJsG3pDON8neK8ckwR7CIVUeE1g1aSPXB0FQWQs4A2\nvEjJUjmwRpgylNLn4gUht+boE25ja2eRxURXtI5eRRnOdex/rSiOmlmt/tPRCXG9\n7zsWI+nxtlYZzTljdD2zrPairWA8MsN0HISE/k3/XP0G9Gsbpk6FKShkAjWRxxm/\neT0Hy/ko8t3kiCZrfyQRzVCZQlyq3CJEQeT+Ix99aFrY+5EGgra7R+xntBl+lEwy\nKre6WqcdtboJqHugYBCUSSx03HnS3o5xif4uZ8JeZB33O1gwWR2pAS4CGg+i4mo=\n=1SJ1\n-----END PGP SIGNATURE-----\n", "payload": "tree e8951fc6544c5f49599533eea00aeadd4cfb919d\nparent b5a2d27f8f59df6f2162e61461b41d6116d4815e\nparent b0ca46e90d1304512decc1f9c3d50422e109080c\nauthor Yuki Okushi <jtitor@2k36.org> 1654119865 +0900\ncommitter GitHub <noreply@github.com> 1654119865 +0900\n\nRollup merge of #95594 - the8472:raw_slice_methods, r=yaahc\n\nAdditional `*mut [T]` methods\n\nSplit out from #94247\n\nThis adds the following methods to raw slices that already exist on regular slices\n\n* `*mut [T]::is_empty`\n* `*mut [T]::split_at_mut`\n* `*mut [T]::split_at_mut_unchecked`\n\nThese methods reduce the amount of unsafe code needed to migrate `ChunksMut` and related iterators\nto raw slices (#94247)\n\nr? `@m-ou-se`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed9bbe9700f8ea46528dedb9fb242167b01a802", "html_url": "https://github.com/rust-lang/rust/commit/3ed9bbe9700f8ea46528dedb9fb242167b01a802", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ed9bbe9700f8ea46528dedb9fb242167b01a802/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5a2d27f8f59df6f2162e61461b41d6116d4815e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5a2d27f8f59df6f2162e61461b41d6116d4815e", "html_url": "https://github.com/rust-lang/rust/commit/b5a2d27f8f59df6f2162e61461b41d6116d4815e"}, {"sha": "b0ca46e90d1304512decc1f9c3d50422e109080c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0ca46e90d1304512decc1f9c3d50422e109080c", "html_url": "https://github.com/rust-lang/rust/commit/b0ca46e90d1304512decc1f9c3d50422e109080c"}], "stats": {"total": 119, "additions": 118, "deletions": 1}, "files": [{"sha": "1fbf592c2325b4285e6daa9baab07b584dfd019c", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 118, "deletions": 1, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/3ed9bbe9700f8ea46528dedb9fb242167b01a802/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed9bbe9700f8ea46528dedb9fb242167b01a802/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=3ed9bbe9700f8ea46528dedb9fb242167b01a802", "patch": "@@ -1622,6 +1622,122 @@ impl<T> *mut [T] {\n         metadata(self)\n     }\n \n+    /// Returns `true` if the raw slice has a length of 0.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_ptr_len)]\n+    ///\n+    /// let mut a = [1, 2, 3];\n+    /// let ptr = &mut a as *mut [_];\n+    /// assert!(!ptr.is_empty());\n+    /// ```\n+    #[inline(always)]\n+    #[unstable(feature = \"slice_ptr_len\", issue = \"71146\")]\n+    #[rustc_const_unstable(feature = \"const_slice_ptr_len\", issue = \"71146\")]\n+    pub const fn is_empty(self) -> bool {\n+        self.len() == 0\n+    }\n+\n+    /// Divides one mutable raw slice into two at an index.\n+    ///\n+    /// The first will contain all indices from `[0, mid)` (excluding\n+    /// the index `mid` itself) and the second will contain all\n+    /// indices from `[mid, len)` (excluding the index `len` itself).\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `mid > len`.\n+    ///\n+    /// # Safety\n+    ///\n+    /// `mid` must be [in-bounds] of the underlying [allocated object].\n+    /// Which means `self` must be dereferenceable and span a single allocation\n+    /// that is at least `mid * size_of::<T>()` bytes long. Not upholding these\n+    /// requirements is *[undefined behavior]* even if the resulting pointers are not used.\n+    ///\n+    /// Since `len` being in-bounds it is not a safety invariant of `*mut [T]` the\n+    /// safety requirements of this method are the same as for [`split_at_mut_unchecked`].\n+    /// The explicit bounds check is only as useful as `len` is correct.\n+    ///\n+    /// [`split_at_mut_unchecked`]: #method.split_at_mut_unchecked\n+    /// [in-bounds]: #method.add\n+    /// [allocated object]: crate::ptr#allocated-object\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(raw_slice_split)]\n+    /// #![feature(slice_ptr_get)]\n+    ///\n+    /// let mut v = [1, 0, 3, 0, 5, 6];\n+    /// let ptr = &mut v as *mut [_];\n+    /// unsafe {\n+    ///     let (left, right) = ptr.split_at_mut(2);\n+    ///     assert_eq!(&*left, [1, 0]);\n+    ///     assert_eq!(&*right, [3, 0, 5, 6]);\n+    /// }\n+    /// ```\n+    #[inline(always)]\n+    #[track_caller]\n+    #[unstable(feature = \"raw_slice_split\", issue = \"95595\")]\n+    pub unsafe fn split_at_mut(self, mid: usize) -> (*mut [T], *mut [T]) {\n+        assert!(mid <= self.len());\n+        // SAFETY: The assert above is only a safety-net as long as `self.len()` is correct\n+        // The actual safety requirements of this function are the same as for `split_at_mut_unchecked`\n+        unsafe { self.split_at_mut_unchecked(mid) }\n+    }\n+\n+    /// Divides one mutable raw slice into two at an index, without doing bounds checking.\n+    ///\n+    /// The first will contain all indices from `[0, mid)` (excluding\n+    /// the index `mid` itself) and the second will contain all\n+    /// indices from `[mid, len)` (excluding the index `len` itself).\n+    ///\n+    /// # Safety\n+    ///\n+    /// `mid` must be [in-bounds] of the underlying [allocated object].\n+    /// Which means `self` must be dereferenceable and span a single allocation\n+    /// that is at least `mid * size_of::<T>()` bytes long. Not upholding these\n+    /// requirements is *[undefined behavior]* even if the resulting pointers are not used.\n+    ///\n+    /// [in-bounds]: #method.add\n+    /// [out-of-bounds index]: #method.add\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(raw_slice_split)]\n+    ///\n+    /// let mut v = [1, 0, 3, 0, 5, 6];\n+    /// // scoped to restrict the lifetime of the borrows\n+    /// unsafe {\n+    ///     let ptr = &mut v as *mut [_];\n+    ///     let (left, right) = ptr.split_at_mut_unchecked(2);\n+    ///     assert_eq!(&*left, [1, 0]);\n+    ///     assert_eq!(&*right, [3, 0, 5, 6]);\n+    ///     (&mut *left)[1] = 2;\n+    ///     (&mut *right)[1] = 4;\n+    /// }\n+    /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);\n+    /// ```\n+    #[inline(always)]\n+    #[unstable(feature = \"raw_slice_split\", issue = \"95595\")]\n+    pub unsafe fn split_at_mut_unchecked(self, mid: usize) -> (*mut [T], *mut [T]) {\n+        let len = self.len();\n+        let ptr = self.as_mut_ptr();\n+\n+        // SAFETY: Caller must pass a valid pointer and an index that is in-bounds.\n+        let tail = unsafe { ptr.add(mid) };\n+        (\n+            crate::ptr::slice_from_raw_parts_mut(ptr, mid),\n+            crate::ptr::slice_from_raw_parts_mut(tail, len - mid),\n+        )\n+    }\n+\n     /// Returns a raw pointer to the slice's buffer.\n     ///\n     /// This is equivalent to casting `self` to `*mut T`, but more type-safe.\n@@ -1645,9 +1761,10 @@ impl<T> *mut [T] {\n     /// Returns a raw pointer to an element or subslice, without doing bounds\n     /// checking.\n     ///\n-    /// Calling this method with an out-of-bounds index or when `self` is not dereferenceable\n+    /// Calling this method with an [out-of-bounds index] or when `self` is not dereferenceable\n     /// is *[undefined behavior]* even if the resulting pointer is not used.\n     ///\n+    /// [out-of-bounds index]: #method.add\n     /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n     ///\n     /// # Examples"}]}