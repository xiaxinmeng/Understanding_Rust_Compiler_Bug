{"sha": "fa7a87be638e4bcf0403f56413e6dbf9892e5582", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhN2E4N2JlNjM4ZTRiY2YwNDAzZjU2NDEzZTZkYmY5ODkyZTU1ODI=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-10-03T13:21:28Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-10-04T12:47:43Z"}, "message": "generate GeneratorSubsts from SubstsRef", "tree": {"sha": "b2529979c6cd3dbb961c1431ce0e26c2024cfb50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2529979c6cd3dbb961c1431ce0e26c2024cfb50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa7a87be638e4bcf0403f56413e6dbf9892e5582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa7a87be638e4bcf0403f56413e6dbf9892e5582", "html_url": "https://github.com/rust-lang/rust/commit/fa7a87be638e4bcf0403f56413e6dbf9892e5582", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa7a87be638e4bcf0403f56413e6dbf9892e5582/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d87bace9687957f37e641ced1613c8b7cca3579", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d87bace9687957f37e641ced1613c8b7cca3579", "html_url": "https://github.com/rust-lang/rust/commit/2d87bace9687957f37e641ced1613c8b7cca3579"}], "stats": {"total": 63, "additions": 31, "deletions": 32}, "files": [{"sha": "d45869ed160c20e7d0ecc1ae9c515cab956643d0", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=fa7a87be638e4bcf0403f56413e6dbf9892e5582", "patch": "@@ -733,12 +733,12 @@ where\n                 // Skip lifetime parameters of the enclosing item(s)\n                 // Also skip the witness type, because that has no free regions.\n \n-                for upvar_ty in substs.upvar_tys(def_id, self.tcx) {\n+                for upvar_ty in substs.as_generator().upvar_tys(def_id, self.tcx) {\n                     upvar_ty.visit_with(self);\n                 }\n \n-                substs.return_ty(def_id, self.tcx).visit_with(self);\n-                substs.yield_ty(def_id, self.tcx).visit_with(self);\n+                substs.as_generator().return_ty(def_id, self.tcx).visit_with(self);\n+                substs.as_generator().yield_ty(def_id, self.tcx).visit_with(self);\n             }\n             _ => {\n                 ty.super_visit_with(self);\n@@ -902,7 +902,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n             ty::Generator(def_id, substs, movability) => {\n                 let generics = self.tcx.generics_of(def_id);\n                 let substs =\n-                    self.tcx.mk_substs(substs.substs.iter().enumerate().map(|(index, &kind)| {\n+                    self.tcx.mk_substs(substs.iter().enumerate().map(|(index, &kind)| {\n                         if index < generics.parent_count {\n                             // Accommodate missing regions in the parent kinds...\n                             self.fold_kind_mapping_missing_regions_to_empty(kind)"}, {"sha": "e87aabf9a0566498cbe1cd615819a20a58c1a2b6", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=fa7a87be638e4bcf0403f56413e6dbf9892e5582", "patch": "@@ -197,7 +197,7 @@ impl<'tcx> Rvalue<'tcx> {\n                 let ty = place.ty(local_decls, tcx).ty;\n                 match ty.kind {\n                     ty::Adt(adt_def, _) => adt_def.repr.discr_type().to_ty(tcx),\n-                    ty::Generator(_, substs, _) => substs.discr_ty(tcx),\n+                    ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),\n                     _ => {\n                         // This can only be `0`, for now, so `u8` will suffice.\n                         tcx.types.u8"}, {"sha": "4ee5700f43fe12cbf35fa36a0e51df0d689dabb4", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=fa7a87be638e4bcf0403f56413e6dbf9892e5582", "patch": "@@ -2761,8 +2761,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 .collect(),\n \n             ty::Generator(def_id, ref substs, _) => {\n-                let witness = substs.witness(def_id, self.tcx());\n+                let witness = substs.as_generator().witness(def_id, self.tcx());\n                 substs\n+                    .as_generator()\n                     .upvar_tys(def_id, self.tcx())\n                     .chain(iter::once(witness))\n                     .collect()\n@@ -3324,8 +3325,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         )?);\n \n         Ok(VtableGeneratorData {\n-            generator_def_id: generator_def_id,\n-            substs: substs.clone(),\n+            generator_def_id,\n+            substs,\n             nested: obligations,\n         })\n     }\n@@ -3911,9 +3912,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         closure_def_id: DefId,\n-        substs: ty::GeneratorSubsts<'tcx>,\n+        substs: SubstsRef<'tcx>,\n     ) -> ty::PolyTraitRef<'tcx> {\n-        let gen_sig = substs.poly_sig(closure_def_id, self.tcx());\n+        let gen_sig = substs.as_generator().poly_sig(closure_def_id, self.tcx());\n \n         // (1) Feels icky to skip the binder here, but OTOH we know\n         // that the self-type is an generator type and hence is"}, {"sha": "48820540ebebdad9251b01fae685722faca1fa83", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=fa7a87be638e4bcf0403f56413e6dbf9892e5582", "patch": "@@ -2510,7 +2510,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[inline]\n     pub fn mk_generator(self,\n                         id: DefId,\n-                        generator_substs: GeneratorSubsts<'tcx>,\n+                        generator_substs: SubstsRef<'tcx>,\n                         movability: hir::GeneratorMovability)\n                         -> Ty<'tcx> {\n         self.mk_ty(Generator(id, generator_substs, movability))"}, {"sha": "4ff5e1a7b8de2615ada83db44d27b8b56e218704", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=fa7a87be638e4bcf0403f56413e6dbf9892e5582", "patch": "@@ -94,7 +94,7 @@ impl FlagComputation {\n             &ty::Generator(_, ref substs, _) => {\n                 self.add_flags(TypeFlags::HAS_TY_CLOSURE);\n                 self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n-                self.add_substs(&substs.substs);\n+                self.add_substs(substs);\n             }\n \n             &ty::GeneratorWitness(ref ts) => {"}, {"sha": "241b00a2dc4023e8ef3fa2d1a121741d76093b99", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=fa7a87be638e4bcf0403f56413e6dbf9892e5582", "patch": "@@ -71,7 +71,7 @@ impl<'tcx> Instance<'tcx> {\n                 ))\n             }\n             ty::Generator(def_id, substs, _) => {\n-                let sig = substs.poly_sig(def_id, tcx);\n+                let sig = substs.as_generator().poly_sig(def_id, tcx);\n \n                 let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n                 let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);"}, {"sha": "2e6e2f012de96090a3064828cfa55cf218b38ba3", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=fa7a87be638e4bcf0403f56413e6dbf9892e5582", "patch": "@@ -1,5 +1,5 @@\n use crate::session::{self, DataTypeKind};\n-use crate::ty::{self, Ty, TyCtxt, TypeFoldable, ReprOptions};\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable, ReprOptions, subst::SubstsRef};\n \n use syntax::ast::{self, Ident, IntTy, UintTy};\n use syntax::attr;\n@@ -15,7 +15,6 @@ use std::ops::Bound;\n use crate::hir;\n use crate::ich::StableHashingContext;\n use crate::mir::{GeneratorLayout, GeneratorSavedLocal};\n-use crate::ty::GeneratorSubsts;\n use crate::ty::subst::Subst;\n use rustc_index::bit_set::BitSet;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -671,7 +670,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 tcx.intern_layout(unit)\n             }\n \n-            ty::Generator(def_id, substs, _) => self.generator_layout(ty, def_id, &substs)?,\n+            ty::Generator(def_id, substs, _) => self.generator_layout(ty, def_id, substs)?,\n \n             ty::Closure(def_id, ref substs) => {\n                 let tys = substs.as_closure().upvar_tys(def_id, tcx);\n@@ -1406,7 +1405,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         &self,\n         ty: Ty<'tcx>,\n         def_id: hir::def_id::DefId,\n-        substs: &GeneratorSubsts<'tcx>,\n+        substs: SubstsRef<'tcx>,\n     ) -> Result<&'tcx LayoutDetails, LayoutError<'tcx>> {\n         use SavedLocalEligibility::*;\n         let tcx = self.tcx;\n@@ -1419,9 +1418,9 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         // Build a prefix layout, including \"promoting\" all ineligible\n         // locals as part of the prefix. We compute the layout of all of\n         // these fields at once to get optimal packing.\n-        let discr_index = substs.prefix_tys(def_id, tcx).count();\n+        let discr_index = substs.as_generator().prefix_tys(def_id, tcx).count();\n         // FIXME(eddyb) set the correct vaidity range for the discriminant.\n-        let discr_layout = self.layout_of(substs.discr_ty(tcx))?;\n+        let discr_layout = self.layout_of(substs.as_generator().discr_ty(tcx))?;\n         let discr = match &discr_layout.abi {\n             Abi::Scalar(s) => s.clone(),\n             _ => bug!(),\n@@ -2153,15 +2152,15 @@ where\n             ty::Generator(def_id, ref substs, _) => {\n                 match this.variants {\n                     Variants::Single { index } => {\n-                        substs.state_tys(def_id, tcx)\n+                        substs.as_generator().state_tys(def_id, tcx)\n                             .nth(index.as_usize()).unwrap()\n                             .nth(i).unwrap()\n                     }\n                     Variants::Multiple { ref discr, discr_index, .. } => {\n                         if i == discr_index {\n                             return discr_layout(discr);\n                         }\n-                        substs.prefix_tys(def_id, tcx).nth(i).unwrap()\n+                        substs.as_generator().prefix_tys(def_id, tcx).nth(i).unwrap()\n                     }\n                 }\n             }"}, {"sha": "80e77cdfad0b6ec97f5eaa990f2e3e88bb97eaf1", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=fa7a87be638e4bcf0403f56413e6dbf9892e5582", "patch": "@@ -69,7 +69,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n             ty::Generator(def_id, ref substs, _) => {\n                 // Same as the closure case\n-                for upvar_ty in substs.upvar_tys(def_id, *self) {\n+                for upvar_ty in substs.as_generator().upvar_tys(def_id, *self) {\n                     self.compute_components(upvar_ty, out);\n                 }\n "}, {"sha": "3855e9e9b8a5aa445db760c447c3d3f49b946db5", "filename": "src/librustc/ty/print/obsolete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs?ref=fa7a87be638e4bcf0403f56413e6dbf9892e5582", "patch": "@@ -154,7 +154,7 @@ impl DefPathBasedNames<'tcx> {\n                     self.push_type_name(sig.output(), output, debug);\n                 }\n             }\n-            ty::Generator(def_id, GeneratorSubsts { substs }, _)\n+            ty::Generator(def_id,  substs, _)\n             | ty::Closure(def_id, substs) => {\n                 self.push_def_path(def_id, output);\n                 let generics = self.tcx.generics_of(self.tcx.closure_base_def_id(def_id));"}, {"sha": "732638929963d83fb4dc8bdb09c2c525852ee4b7", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=fa7a87be638e4bcf0403f56413e6dbf9892e5582", "patch": "@@ -605,8 +605,8 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Str => p!(write(\"str\")),\n             ty::Generator(did, substs, movability) => {\n-                let upvar_tys = substs.upvar_tys(did, self.tcx());\n-                let witness = substs.witness(did, self.tcx());\n+                let upvar_tys = substs.as_generator().upvar_tys(did, self.tcx());\n+                let witness = substs.as_generator().witness(did, self.tcx());\n                 if movability == hir::GeneratorMovability::Movable {\n                     p!(write(\"[generator\"));\n                 } else {"}, {"sha": "ff20996df56ff52e59b597275d1053f9082125d1", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=fa7a87be638e4bcf0403f56413e6dbf9892e5582", "patch": "@@ -2109,7 +2109,8 @@ impl<'tcx> TyS<'tcx> {\n     pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {\n         match self.kind {\n             TyKind::Adt(adt, _) => Some(adt.variant_range()),\n-            TyKind::Generator(def_id, substs, _) => Some(substs.variant_range(def_id, tcx)),\n+            TyKind::Generator(def_id, substs, _) =>\n+                Some(substs.assert_generator().variant_range(def_id, tcx)),\n             _ => None,\n         }\n     }\n@@ -2126,7 +2127,7 @@ impl<'tcx> TyS<'tcx> {\n         match self.kind {\n             TyKind::Adt(adt, _) => Some(adt.discriminant_for_variant(tcx, variant_index)),\n             TyKind::Generator(def_id, substs, _) =>\n-                Some(substs.discriminant_for_variant(def_id, tcx, variant_index)),\n+                Some(substs.as_generator().discriminant_for_variant(def_id, tcx, variant_index)),\n             _ => None,\n         }\n     }\n@@ -2149,7 +2150,7 @@ impl<'tcx> TyS<'tcx> {\n                 out.extend(substs.regions())\n             }\n             Closure(_, ref substs ) |\n-            Generator(_, GeneratorSubsts { ref substs }, _) => {\n+            Generator(_, ref substs, _) => {\n                 out.extend(substs.regions())\n             }\n             Projection(ref data) | UnnormalizedProjection(ref data) => {"}, {"sha": "f5b1902e3cc8c5ab0085125d7c51f4c61351db96", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa7a87be638e4bcf0403f56413e6dbf9892e5582/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=fa7a87be638e4bcf0403f56413e6dbf9892e5582", "patch": "@@ -110,12 +110,10 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n         ty::Adt(_, substs) | ty::Opaque(_, substs) => {\n             stack.extend(substs.types().rev());\n         }\n-        ty::Closure(_, ref substs) => {\n+        ty::Closure(_, ref substs)\n+        | ty::Generator(_, ref substs, _) => {\n             stack.extend(substs.types().rev());\n         }\n-        ty::Generator(_, ref substs, _) => {\n-            stack.extend(substs.substs.types().rev());\n-        }\n         ty::GeneratorWitness(ts) => {\n             stack.extend(ts.skip_binder().iter().cloned().rev());\n         }"}]}