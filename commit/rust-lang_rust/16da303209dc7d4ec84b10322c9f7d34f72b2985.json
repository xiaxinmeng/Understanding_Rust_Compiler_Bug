{"sha": "16da303209dc7d4ec84b10322c9f7d34f72b2985", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZGEzMDMyMDlkYzdkNGVjODRiMTAzMjJjOWY3ZDM0ZjcyYjI5ODU=", "commit": {"author": {"name": "Thomas Lively", "email": "tlively@google.com", "date": "2017-06-22T22:16:54Z"}, "committer": {"name": "Thomas Lively", "email": "tlively@google.com", "date": "2017-06-23T01:34:56Z"}, "message": "Add target option for linker environment variables\n\nThis is used in wasm32-experimental-emscripten to ensure that emscripten\nlinks against the libc bitcode files produced by the wasm LLVM backend,\ninstead of using fastcomp.", "tree": {"sha": "a45018f716ec0a3448e0e3cd1f58b32c1bf4c1ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a45018f716ec0a3448e0e3cd1f58b32c1bf4c1ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16da303209dc7d4ec84b10322c9f7d34f72b2985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16da303209dc7d4ec84b10322c9f7d34f72b2985", "html_url": "https://github.com/rust-lang/rust/commit/16da303209dc7d4ec84b10322c9f7d34f72b2985", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16da303209dc7d4ec84b10322c9f7d34f72b2985/comments", "author": {"login": "tlively", "id": 7121787, "node_id": "MDQ6VXNlcjcxMjE3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/7121787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlively", "html_url": "https://github.com/tlively", "followers_url": "https://api.github.com/users/tlively/followers", "following_url": "https://api.github.com/users/tlively/following{/other_user}", "gists_url": "https://api.github.com/users/tlively/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlively/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlively/subscriptions", "organizations_url": "https://api.github.com/users/tlively/orgs", "repos_url": "https://api.github.com/users/tlively/repos", "events_url": "https://api.github.com/users/tlively/events{/privacy}", "received_events_url": "https://api.github.com/users/tlively/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tlively", "id": 7121787, "node_id": "MDQ6VXNlcjcxMjE3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/7121787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlively", "html_url": "https://github.com/tlively", "followers_url": "https://api.github.com/users/tlively/followers", "following_url": "https://api.github.com/users/tlively/following{/other_user}", "gists_url": "https://api.github.com/users/tlively/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlively/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlively/subscriptions", "organizations_url": "https://api.github.com/users/tlively/orgs", "repos_url": "https://api.github.com/users/tlively/repos", "events_url": "https://api.github.com/users/tlively/events{/privacy}", "received_events_url": "https://api.github.com/users/tlively/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "447297ce597d2762db40afaa2349fc927c90f897", "url": "https://api.github.com/repos/rust-lang/rust/commits/447297ce597d2762db40afaa2349fc927c90f897", "html_url": "https://github.com/rust-lang/rust/commit/447297ce597d2762db40afaa2349fc927c90f897"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "5c95868471e43b5aabec6ac35588e8abc104e422", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16da303209dc7d4ec84b10322c9f7d34f72b2985/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16da303209dc7d4ec84b10322c9f7d34f72b2985/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=16da303209dc7d4ec84b10322c9f7d34f72b2985", "patch": "@@ -282,6 +282,9 @@ pub struct TargetOptions {\n     /// user-defined libraries.\n     pub post_link_args: LinkArgs,\n \n+    /// Environment variables to be set before invoking the linker.\n+    pub link_env: Vec<(String, String)>,\n+\n     /// Extra arguments to pass to the external assembler (when used)\n     pub asm_args: Vec<String>,\n \n@@ -451,6 +454,7 @@ impl Default for TargetOptions {\n             pre_link_objects_dll: Vec::new(),\n             post_link_objects: Vec::new(),\n             late_link_args: LinkArgs::new(),\n+            link_env: Vec::new(),\n             archive_format: \"gnu\".to_string(),\n             custom_unwind_resume: false,\n             lib_allocation_crate: \"alloc_system\".to_string(),"}, {"sha": "053fab54250194a9186a79ee3983cbb1238dd261", "filename": "src/librustc_back/target/wasm32_experimental_emscripten.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16da303209dc7d4ec84b10322c9f7d34f72b2985/src%2Flibrustc_back%2Ftarget%2Fwasm32_experimental_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16da303209dc7d4ec84b10322c9f7d34f72b2985/src%2Flibrustc_back%2Ftarget%2Fwasm32_experimental_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_experimental_emscripten.rs?ref=16da303209dc7d4ec84b10322c9f7d34f72b2985", "patch": "@@ -30,6 +30,7 @@ pub fn target() -> Result<Target, String> {\n         // possibly interpret the wasm, and a .wasm file\n         exe_suffix: \".js\".to_string(),\n         linker_is_gnu: true,\n+        link_env: vec![(\"EMCC_WASM_BACKEND\".to_string(), \"1\".to_string())],\n         allow_asm: false,\n         obj_is_bitcode: true,\n         is_like_emscripten: true,"}, {"sha": "a9af8b11f93ad69ca85f699806a80f5de9a6df26", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16da303209dc7d4ec84b10322c9f7d34f72b2985/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16da303209dc7d4ec84b10322c9f7d34f72b2985/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=16da303209dc7d4ec84b10322c9f7d34f72b2985", "patch": "@@ -785,6 +785,9 @@ fn link_natively(sess: &Session,\n     if let Some(args) = sess.target.target.options.post_link_args.get(&flavor) {\n         cmd.args(args);\n     }\n+    for &(ref k, ref v) in &sess.target.target.options.link_env {\n+        cmd.env(k, v);\n+    }\n \n     if sess.opts.debugging_opts.print_link_args {\n         println!(\"{:?}\", &cmd);"}, {"sha": "0692e07253fbeefc6bde8c4196f92b7083b89f43", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16da303209dc7d4ec84b10322c9f7d34f72b2985/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16da303209dc7d4ec84b10322c9f7d34f72b2985/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=16da303209dc7d4ec84b10322c9f7d34f72b2985", "patch": "@@ -1280,12 +1280,6 @@ actual:\\n\\\n         let extra_link_args = vec![\"-L\".to_owned(),\n                                    aux_dir.to_str().unwrap().to_owned()];\n \n-        let mut env = self.props.rustc_env.clone();\n-        // Tell emscripten to link using libc produced with LLVM backend\n-        if self.config.target.contains(\"wasm32\") && self.config.target.contains(\"experimental\") {\n-            env.push((\"EMCC_WASM_BACKEND\".to_string(), \"1\".to_string()));\n-        }\n-\n         for rel_ab in &self.props.aux_builds {\n             let aux_testpaths = self.compute_aux_test_paths(rel_ab);\n             let aux_props = self.props.from_aux_file(&aux_testpaths.file,\n@@ -1325,7 +1319,7 @@ actual:\\n\\\n             };\n             let aux_args = aux_cx.make_compile_args(crate_type, &aux_testpaths.file, aux_output);\n             let auxres = aux_cx.compose_and_run(aux_args,\n-                                                env.clone(),\n+                                                Vec::new(),\n                                                 aux_cx.config.compile_lib_path.to_str().unwrap(),\n                                                 Some(aux_dir.to_str().unwrap()),\n                                                 None);\n@@ -1338,7 +1332,7 @@ actual:\\n\\\n         }\n \n         self.compose_and_run(args,\n-                             env,\n+                             self.props.rustc_env.clone(),\n                              self.config.compile_lib_path.to_str().unwrap(),\n                              Some(aux_dir.to_str().unwrap()),\n                              input)"}]}