{"sha": "5375575717bf4a5e848402a936aaf5cc37fe9dbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNzU1NzU3MTdiZjRhNWU4NDg0MDJhOTM2YWFmNWNjMzdmZTlkYmY=", "commit": {"author": {"name": "Nicholas-Baron", "email": "nicholas.baron.ten@gmail.com", "date": "2021-03-10T04:47:03Z"}, "committer": {"name": "Nicholas-Baron", "email": "nicholas.baron.ten@gmail.com", "date": "2021-03-10T22:32:13Z"}, "message": "Moved UpVar* types to a separate file.", "tree": {"sha": "f09df88ed031403aa0f323a519eb0834ec4f3611", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f09df88ed031403aa0f323a519eb0834ec4f3611"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5375575717bf4a5e848402a936aaf5cc37fe9dbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5375575717bf4a5e848402a936aaf5cc37fe9dbf", "html_url": "https://github.com/rust-lang/rust/commit/5375575717bf4a5e848402a936aaf5cc37fe9dbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5375575717bf4a5e848402a936aaf5cc37fe9dbf/comments", "author": {"login": "Nicholas-Baron", "id": 35079404, "node_id": "MDQ6VXNlcjM1MDc5NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/35079404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nicholas-Baron", "html_url": "https://github.com/Nicholas-Baron", "followers_url": "https://api.github.com/users/Nicholas-Baron/followers", "following_url": "https://api.github.com/users/Nicholas-Baron/following{/other_user}", "gists_url": "https://api.github.com/users/Nicholas-Baron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nicholas-Baron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nicholas-Baron/subscriptions", "organizations_url": "https://api.github.com/users/Nicholas-Baron/orgs", "repos_url": "https://api.github.com/users/Nicholas-Baron/repos", "events_url": "https://api.github.com/users/Nicholas-Baron/events{/privacy}", "received_events_url": "https://api.github.com/users/Nicholas-Baron/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nicholas-Baron", "id": 35079404, "node_id": "MDQ6VXNlcjM1MDc5NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/35079404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nicholas-Baron", "html_url": "https://github.com/Nicholas-Baron", "followers_url": "https://api.github.com/users/Nicholas-Baron/followers", "following_url": "https://api.github.com/users/Nicholas-Baron/following{/other_user}", "gists_url": "https://api.github.com/users/Nicholas-Baron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nicholas-Baron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nicholas-Baron/subscriptions", "organizations_url": "https://api.github.com/users/Nicholas-Baron/orgs", "repos_url": "https://api.github.com/users/Nicholas-Baron/repos", "events_url": "https://api.github.com/users/Nicholas-Baron/events{/privacy}", "received_events_url": "https://api.github.com/users/Nicholas-Baron/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4884c1d504df6e3540eda104bc21b36bcede83e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4884c1d504df6e3540eda104bc21b36bcede83e", "html_url": "https://github.com/rust-lang/rust/commit/e4884c1d504df6e3540eda104bc21b36bcede83e"}], "stats": {"total": 138, "additions": 74, "deletions": 64}, "files": [{"sha": "1a8f726d894cd43082da952d6abf2dc257529217", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 64, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/5375575717bf4a5e848402a936aaf5cc37fe9dbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5375575717bf4a5e848402a936aaf5cc37fe9dbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=5375575717bf4a5e848402a936aaf5cc37fe9dbf", "patch": "@@ -15,6 +15,7 @@ pub use self::AssocItemContainer::*;\n pub use self::BorrowKind::*;\n pub use self::IntVarValue::*;\n pub use self::Variance::*;\n+pub use upvar::*;\n \n use crate::hir::exports::ExportMap;\n use crate::hir::place::{\n@@ -115,6 +116,7 @@ mod instance;\n mod list;\n mod structural_impls;\n mod sty;\n+mod upvar;\n \n // Data types\n \n@@ -515,37 +517,6 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TyS<'tcx> {\n #[rustc_diagnostic_item = \"Ty\"]\n pub type Ty<'tcx> = &'tcx TyS<'tcx>;\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    Hash,\n-    TyEncodable,\n-    TyDecodable,\n-    TypeFoldable,\n-    HashStable\n-)]\n-pub struct UpvarPath {\n-    pub hir_id: hir::HirId,\n-}\n-\n-/// Upvars do not get their own `NodeId`. Instead, we use the pair of\n-/// the original var ID (that is, the root variable that is referenced\n-/// by the upvar) and the ID of the closure expression.\n-#[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable, TypeFoldable, HashStable)]\n-pub struct UpvarId {\n-    pub var_path: UpvarPath,\n-    pub closure_expr_id: LocalDefId,\n-}\n-\n-impl UpvarId {\n-    pub fn new(var_hir_id: hir::HirId, closure_def_id: LocalDefId) -> UpvarId {\n-        UpvarId { var_path: UpvarPath { hir_id: var_hir_id }, closure_expr_id: closure_def_id }\n-    }\n-}\n-\n #[derive(Clone, PartialEq, Debug, TyEncodable, TyDecodable, TypeFoldable, Copy, HashStable)]\n pub enum BorrowKind {\n     /// Data must be immutable and is aliasable.\n@@ -598,36 +569,6 @@ pub enum BorrowKind {\n     MutBorrow,\n }\n \n-/// Information describing the capture of an upvar. This is computed\n-/// during `typeck`, specifically by `regionck`.\n-#[derive(PartialEq, Clone, Debug, Copy, TyEncodable, TyDecodable, TypeFoldable, HashStable)]\n-pub enum UpvarCapture<'tcx> {\n-    /// Upvar is captured by value. This is always true when the\n-    /// closure is labeled `move`, but can also be true in other cases\n-    /// depending on inference.\n-    ///\n-    /// If the upvar was inferred to be captured by value (e.g. `move`\n-    /// was not used), then the `Span` points to a usage that\n-    /// required it. There may be more than one such usage\n-    /// (e.g. `|| { a; a; }`), in which case we pick an\n-    /// arbitrary one.\n-    ByValue(Option<Span>),\n-\n-    /// Upvar is captured by reference.\n-    ByRef(UpvarBorrow<'tcx>),\n-}\n-\n-#[derive(PartialEq, Clone, Copy, TyEncodable, TyDecodable, TypeFoldable, HashStable)]\n-pub struct UpvarBorrow<'tcx> {\n-    /// The kind of borrow: by-ref upvars have access to shared\n-    /// immutable borrows, which are not part of the normal language\n-    /// syntax.\n-    pub kind: BorrowKind,\n-\n-    /// Region of the resulting reference.\n-    pub region: ty::Region<'tcx>,\n-}\n-\n /// Given the closure DefId this map provides a map of root variables to minimum\n /// set of `CapturedPlace`s that need to be tracked to support all captures of that closure.\n pub type MinCaptureInformationMap<'tcx> = FxHashMap<DefId, RootVariableMinCaptureList<'tcx>>;\n@@ -749,9 +690,6 @@ pub struct CaptureInfo<'tcx> {\n     pub capture_kind: UpvarCapture<'tcx>,\n }\n \n-pub type UpvarListMap = FxHashMap<DefId, FxIndexMap<hir::HirId, UpvarId>>;\n-pub type UpvarCaptureMap<'tcx> = FxHashMap<UpvarId, UpvarCapture<'tcx>>;\n-\n impl ty::EarlyBoundRegion {\n     /// Does this early bound region have a name? Early bound regions normally\n     /// always have names except when using anonymous lifetimes (`'_`)."}, {"sha": "fe8ea6d51c4e0641a29e4d2c3eaaa5a183858d6f", "filename": "compiler/rustc_middle/src/ty/upvar.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/5375575717bf4a5e848402a936aaf5cc37fe9dbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5375575717bf4a5e848402a936aaf5cc37fe9dbf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fupvar.rs?ref=5375575717bf4a5e848402a936aaf5cc37fe9dbf", "patch": "@@ -0,0 +1,72 @@\n+use crate::ty;\n+\n+use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n+use rustc_hir as hir;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_span::Span;\n+\n+use super::BorrowKind;\n+\n+#[derive(\n+    Clone,\n+    Copy,\n+    Debug,\n+    PartialEq,\n+    Eq,\n+    Hash,\n+    TyEncodable,\n+    TyDecodable,\n+    TypeFoldable,\n+    HashStable\n+)]\n+pub struct UpvarPath {\n+    pub hir_id: hir::HirId,\n+}\n+\n+/// Upvars do not get their own `NodeId`. Instead, we use the pair of\n+/// the original var ID (that is, the root variable that is referenced\n+/// by the upvar) and the ID of the closure expression.\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable, TypeFoldable, HashStable)]\n+pub struct UpvarId {\n+    pub var_path: UpvarPath,\n+    pub closure_expr_id: LocalDefId,\n+}\n+\n+impl UpvarId {\n+    pub fn new(var_hir_id: hir::HirId, closure_def_id: LocalDefId) -> UpvarId {\n+        UpvarId { var_path: UpvarPath { hir_id: var_hir_id }, closure_expr_id: closure_def_id }\n+    }\n+}\n+\n+/// Information describing the capture of an upvar. This is computed\n+/// during `typeck`, specifically by `regionck`.\n+#[derive(PartialEq, Clone, Debug, Copy, TyEncodable, TyDecodable, TypeFoldable, HashStable)]\n+pub enum UpvarCapture<'tcx> {\n+    /// Upvar is captured by value. This is always true when the\n+    /// closure is labeled `move`, but can also be true in other cases\n+    /// depending on inference.\n+    ///\n+    /// If the upvar was inferred to be captured by value (e.g. `move`\n+    /// was not used), then the `Span` points to a usage that\n+    /// required it. There may be more than one such usage\n+    /// (e.g. `|| { a; a; }`), in which case we pick an\n+    /// arbitrary one.\n+    ByValue(Option<Span>),\n+\n+    /// Upvar is captured by reference.\n+    ByRef(UpvarBorrow<'tcx>),\n+}\n+\n+#[derive(PartialEq, Clone, Copy, TyEncodable, TyDecodable, TypeFoldable, HashStable)]\n+pub struct UpvarBorrow<'tcx> {\n+    /// The kind of borrow: by-ref upvars have access to shared\n+    /// immutable borrows, which are not part of the normal language\n+    /// syntax.\n+    pub kind: BorrowKind,\n+\n+    /// Region of the resulting reference.\n+    pub region: ty::Region<'tcx>,\n+}\n+\n+pub type UpvarListMap = FxHashMap<DefId, FxIndexMap<hir::HirId, UpvarId>>;\n+pub type UpvarCaptureMap<'tcx> = FxHashMap<UpvarId, UpvarCapture<'tcx>>;"}]}