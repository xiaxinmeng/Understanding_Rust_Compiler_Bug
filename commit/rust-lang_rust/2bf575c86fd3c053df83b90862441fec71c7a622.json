{"sha": "2bf575c86fd3c053df83b90862441fec71c7a622", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZjU3NWM4NmZkM2MwNTNkZjgzYjkwODYyNDQxZmVjNzFjN2E2MjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-05T17:21:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-05T17:21:34Z"}, "message": "auto merge of #11939 : JeremyLetang/rust/move-libsync, r=alexcrichton\n\nThis time everything should be okay, No break due to a failed merge or rebase...\r\n\r\nSorry for the abuse of pull request.\r\n\r\nSo this move extra::sync, extra::arc, extra::future, extra::comm and extra::task_pool to libsync.", "tree": {"sha": "cee447b4cdbc168a7f940150772aa5bb690079b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cee447b4cdbc168a7f940150772aa5bb690079b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bf575c86fd3c053df83b90862441fec71c7a622", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bf575c86fd3c053df83b90862441fec71c7a622", "html_url": "https://github.com/rust-lang/rust/commit/2bf575c86fd3c053df83b90862441fec71c7a622", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bf575c86fd3c053df83b90862441fec71c7a622/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faf60551ec7ab0a8d2d44cc97a1ebf1d2bd01b1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/faf60551ec7ab0a8d2d44cc97a1ebf1d2bd01b1e", "html_url": "https://github.com/rust-lang/rust/commit/faf60551ec7ab0a8d2d44cc97a1ebf1d2bd01b1e"}, {"sha": "dd21a51d294ad9843d61b7f2016957a279b0d64f", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd21a51d294ad9843d61b7f2016957a279b0d64f", "html_url": "https://github.com/rust-lang/rust/commit/dd21a51d294ad9843d61b7f2016957a279b0d64f"}], "stats": {"total": 369, "additions": 224, "deletions": 145}, "files": [{"sha": "dd94d268becb5604c531887a7d2f98a221881ed2", "filename": "mk/crates.mk", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -49,25 +49,26 @@\n # automatically generated for all stage/host/target combinations.\n ################################################################################\n \n-TARGET_CRATES := std extra green rustuv native flate arena glob term semver uuid\n+TARGET_CRATES := std extra green rustuv native flate arena glob term semver uuid sync\n HOST_CRATES := syntax rustc rustdoc\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n \n DEPS_std := native:rustrt\n-DEPS_extra := std term\n+DEPS_extra := std term sync\n DEPS_green := std\n DEPS_rustuv := std native:uv native:uv_support\n DEPS_native := std\n DEPS_syntax := std extra term\n-DEPS_rustc := syntax native:rustllvm flate arena\n-DEPS_rustdoc := rustc native:sundown\n+DEPS_rustc := syntax native:rustllvm flate arena sync\n+DEPS_rustdoc := rustc native:sundown sync\n DEPS_flate := std native:miniz\n DEPS_arena := std extra\n DEPS_glob := std\n DEPS_term := std\n DEPS_semver := std\n DEPS_uuid := std extra\n+DEPS_sync := std\n \n TOOL_DEPS_compiletest := extra green rustuv\n TOOL_DEPS_rustdoc := rustdoc green rustuv"}, {"sha": "387f481025df71e76f6ae490e3aed9ca6ed9b10a", "filename": "src/doc/guide-tasks.md", "status": "modified", "additions": 75, "deletions": 33, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Fdoc%2Fguide-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Fdoc%2Fguide-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-tasks.md?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -39,26 +39,51 @@ data through the global _exchange heap_.\n \n While Rust's type system provides the building blocks needed for safe\n and efficient tasks, all of the task functionality itself is implemented\n-in the standard and extra libraries, which are still under development\n+in the standard and sync libraries, which are still under development\n and do not always present a consistent or complete interface.\n \n For your reference, these are the standard modules involved in Rust\n concurrency at this writing:\n \n * [`std::task`] - All code relating to tasks and task scheduling,\n * [`std::comm`] - The message passing interface,\n-* [`extra::comm`] - Additional messaging types based on `std::comm`,\n-* [`extra::sync`] - More exotic synchronization tools, including locks,\n-* [`extra::arc`] - The Arc (atomically reference counted) type,\n-  for safely sharing immutable data,\n-* [`extra::future`] - A type representing values that may be computed concurrently and retrieved at a later time.\n+* [`sync::DuplexStream`] - An extension of `pipes::stream` that allows both sending and receiving,\n+* [`sync::SyncChan`] - An extension of `pipes::stream` that provides synchronous message sending,\n+* [`sync::SyncPort`] - An extension of `pipes::stream` that acknowledges each message received,\n+* [`sync::rendezvous`] - Creates a stream whose channel, upon sending a message, blocks until the \n+    message is received.\n+* [`sync::Arc`] - The Arc (atomically reference counted) type, for safely sharing immutable data,\n+* [`sync::RWArc`] - A dual-mode Arc protected by a reader-writer lock,\n+* [`sync::MutexArc`] - An Arc with mutable data protected by a blocking mutex,\n+* [`sync::Semaphore`] - A counting, blocking, bounded-waiting semaphore,\n+* [`sync::Mutex`] - A blocking, bounded-waiting, mutual exclusion lock with an associated \n+    FIFO condition variable,\n+* [`sync::RWLock`] - A blocking, no-starvation, reader-writer lock with an associated condvar,\n+* [`sync::Barrier`] - A barrier enables multiple tasks to synchronize the beginning\n+    of some computation,\n+* [`sync::TaskPool`] - A task pool abstraction,\n+* [`sync::Future`] - A type encapsulating the result of a computation which may not be complete,\n+* [`sync::one`] - A \"once initialization\" primitive\n+* [`sync::mutex`] - A proper mutex implementation regardless of the \"flavor of task\" which is\n+    acquiring the lock.\n \n [`std::task`]: std/task/index.html\n [`std::comm`]: std/comm/index.html\n-[`extra::comm`]: extra/comm/index.html\n-[`extra::sync`]: extra/sync/index.html\n-[`extra::arc`]: extra/arc/index.html\n-[`extra::future`]: extra/future/index.html\n+[`sync::DuplexStream`]: sync/struct.DuplexStream.html\n+[`sync::SyncChan`]: sync/struct.SyncChan.html\n+[`sync::SyncPort`]: sync/struct.SyncPort.html\n+[`sync::rendezvous`]: sync/fn.rendezvous.html\n+[`sync::Arc`]: sync/struct.Arc.html\n+[`sync::RWArc`]: sync/struct.RWArc.html\n+[`sync::MutexArc`]: sync/struct.MutexArc.html\n+[`sync::Semaphore`]: sync/struct.Semaphore.html\n+[`sync::Mutex`]: sync/struct.Mutex.html\n+[`sync::RWLock`]: sync/struct.RWLock.html\n+[`sync::Barrier`]: sync/struct.Barrier.html\n+[`sync::TaskPool`]: sync/struct.TaskPool.html\n+[`sync::Future`]: sync/struct.Future.html\n+[`sync::one`]: sync/one/index.html\n+[`sync::mutex`]: sync/mutex/index.html\n \n # Basics\n \n@@ -254,21 +279,25 @@ let result = ports.iter().fold(0, |accum, port| accum + port.recv() );\n ~~~\n \n ## Backgrounding computations: Futures\n-With `extra::future`, rust has a mechanism for requesting a computation and getting the result\n+With `sync::Future`, rust has a mechanism for requesting a computation and getting the result\n later.\n \n The basic example below illustrates this.\n \n ~~~\n+# extern mod sync;\n+\n+# fn main() {\n # fn make_a_sandwich() {};\n fn fib(n: u64) -> u64 {\n     // lengthy computation returning an uint\n     12586269025\n }\n \n-let mut delayed_fib = extra::future::Future::spawn(proc() fib(50));\n+let mut delayed_fib = sync::Future::spawn(proc() fib(50));\n make_a_sandwich();\n println!(\"fib(50) = {:?}\", delayed_fib.get())\n+# }\n ~~~\n \n The call to `future::spawn` returns immediately a `future` object regardless of how long it\n@@ -281,6 +310,7 @@ Here is another example showing how futures allow you to background computations\n be distributed on the available cores.\n \n ~~~\n+# extern mod sync;\n # use std::vec;\n fn partial_sum(start: uint) -> f64 {\n     let mut local_sum = 0f64;\n@@ -291,7 +321,7 @@ fn partial_sum(start: uint) -> f64 {\n }\n \n fn main() {\n-    let mut futures = vec::from_fn(1000, |ind| extra::future::Future::spawn( proc() { partial_sum(ind) }));\n+    let mut futures = vec::from_fn(1000, |ind| sync::Future::spawn( proc() { partial_sum(ind) }));\n \n     let mut final_res = 0f64;\n     for ft in futures.mut_iter()  {\n@@ -309,16 +339,17 @@ add up to a significant amount of wasted memory and would require copying the sa\n necessary.\n \n To tackle this issue, one can use an Atomically Reference Counted wrapper (`Arc`) as implemented in\n-the `extra` library of Rust. With an Arc, the data will no longer be copied for each task. The Arc\n+the `sync` library of Rust. With an Arc, the data will no longer be copied for each task. The Arc\n acts as a reference to the shared data and only this reference is shared and cloned.\n \n Here is a small example showing how to use Arcs. We wish to run concurrently several computations on\n a single large vector of floats. Each task needs the full vector to perform its duty.\n \n ~~~\n+# extern mod sync;\n # use std::vec;\n # use std::rand;\n-use extra::arc::Arc;\n+use sync::Arc;\n \n fn pnorm(nums: &~[f64], p: uint) -> f64 {\n     nums.iter().fold(0.0, |a,b| a+(*b).powf(&(p as f64)) ).powf(&(1.0 / (p as f64)))\n@@ -348,39 +379,48 @@ at the power given as argument and takes the inverse power of this value). The A\n created by the line\n \n ~~~\n-# use extra::arc::Arc;\n+# extern mod sync;\n+# use sync::Arc;\n # use std::vec;\n # use std::rand;\n+# fn main() {\n # let numbers = vec::from_fn(1000000, |_| rand::random::<f64>());\n let numbers_arc=Arc::new(numbers);\n+# }\n ~~~\n \n and a clone of it is sent to each task\n \n ~~~\n-# use extra::arc::Arc;\n+# extern mod sync;\n+# use sync::Arc;\n # use std::vec;\n # use std::rand;\n+# fn main() {\n # let numbers=vec::from_fn(1000000, |_| rand::random::<f64>());\n # let numbers_arc = Arc::new(numbers);\n # let (port, chan)  = Chan::new();\n chan.send(numbers_arc.clone());\n+# }\n ~~~\n \n copying only the wrapper and not its contents.\n \n Each task recovers the underlying data by\n \n ~~~\n-# use extra::arc::Arc;\n+# extern mod sync;\n+# use sync::Arc;\n # use std::vec;\n # use std::rand;\n+# fn main() {\n # let numbers=vec::from_fn(1000000, |_| rand::random::<f64>());\n # let numbers_arc=Arc::new(numbers);\n # let (port, chan)  = Chan::new();\n # chan.send(numbers_arc.clone());\n # let local_arc : Arc<~[f64]> = port.recv();\n let task_numbers = local_arc.get();\n+# }\n ~~~\n \n and can use it as if it were local.\n@@ -450,25 +490,27 @@ proceed).\n \n A very common thing to do is to spawn a child task where the parent\n and child both need to exchange messages with each other. The\n-function `extra::comm::DuplexStream()` supports this pattern.  We'll\n+function `sync::comm::DuplexStream()` supports this pattern.  We'll\n look briefly at how to use it.\n \n To see how `DuplexStream()` works, we will create a child task\n that repeatedly receives a `uint` message, converts it to a string, and sends\n the string in response.  The child terminates when it receives `0`.\n Here is the function that implements the child task:\n \n-~~~{.ignore .linked-failure}\n-# use extra::comm::DuplexStream;\n-# use std::uint;\n-fn stringifier(channel: &DuplexStream<~str, uint>) {\n-    let mut value: uint;\n-    loop {\n-        value = channel.recv();\n-        channel.send(uint::to_str(value));\n-        if value == 0 { break; }\n+~~~\n+# extern mod sync;\n+# fn main() {\n+# use sync::DuplexStream;\n+    fn stringifier(channel: &DuplexStream<~str, uint>) {\n+        let mut value: uint;\n+        loop {\n+            value = channel.recv();\n+            channel.send(value.to_str());\n+            if value == 0 { break; }\n+        }\n     }\n-}\n+# }\n ~~~~\n \n The implementation of `DuplexStream` supports both sending and\n@@ -481,15 +523,15 @@ response itself is simply the stringified version of the received value,\n \n Here is the code for the parent task:\n \n-~~~{.ignore .linked-failure}\n+~~~\n+# extern mod sync;\n # use std::task::spawn;\n-# use std::uint;\n-# use extra::comm::DuplexStream;\n+# use sync::DuplexStream;\n # fn stringifier(channel: &DuplexStream<~str, uint>) {\n #     let mut value: uint;\n #     loop {\n #         value = channel.recv();\n-#         channel.send(uint::to_str(value));\n+#         channel.send(value.to_str());\n #         if value == 0u { break; }\n #     }\n # }"}, {"sha": "5aa92c9fec4dbb5a4671cf09a1abddac5cd7abf4", "filename": "src/doc/index.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -43,6 +43,7 @@ li {list-style-type: none; }\n * [The `semver` version collation library](semver/index.html)\n * [The `term` terminal-handling library](term/index.html)\n * [The UUID library](uuid/index.html)\n+* [The `sync` library for concurrency-enabled mechanisms and primitives](sync/index.html)\n \n # Tooling\n "}, {"sha": "e214a40e3d134640fc0b4255b6dd4bfd47d64d41", "filename": "src/etc/licenseck.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Fetc%2Flicenseck.py", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Fetc%2Flicenseck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flicenseck.py?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -41,7 +41,7 @@\n     \"libstd/sync/mpsc_queue.rs\", # BSD\n     \"libstd/sync/spsc_queue.rs\", # BSD\n     \"libstd/sync/mpmc_bounded_queue.rs\", # BSD\n-    \"libextra/sync/mpsc_intrusive.rs\", # BSD\n+    \"libsync/sync/mpsc_intrusive.rs\", # BSD\n ]\n \n def check_license(name, contents):"}, {"sha": "401ece64a5dc24178837c2141caead7981cb6ded", "filename": "src/libextra/lib.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibextra%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibextra%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flib.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -34,17 +34,16 @@ Rust extras are part of the standard Rust distribution.\n #[deny(non_camel_case_types)];\n #[deny(missing_doc)];\n \n-// Utility modules\n+extern mod sync;\n \n-pub mod c_vec;\n+#[cfg(stage0)]\n+macro_rules! if_ok (\n+    ($e:expr) => (match $e { Ok(e) => e, Err(e) => return Err(e) })\n+)\n \n-// Concurrency\n+// Utility modules\n \n-pub mod sync;\n-pub mod arc;\n-pub mod comm;\n-pub mod future;\n-pub mod task_pool;\n+pub mod c_vec;\n \n // Collections\n "}, {"sha": "d16edb7aa1e79074be636bac59ce23007e531aad", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -13,7 +13,7 @@\n use json;\n use json::ToJson;\n use serialize::{Encoder, Encodable, Decoder, Decodable};\n-use arc::{Arc,RWArc};\n+use sync::{Arc,RWArc};\n use treemap::TreeMap;\n use std::str;\n use std::io;"}, {"sha": "aea9b65087dc68b4a0cc76fb3260cee5a2602f10", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -331,7 +331,7 @@ pub mod write {\n     }\n \n     unsafe fn configure_llvm(sess: Session) {\n-        use extra::sync::one::{Once, ONCE_INIT};\n+        use sync::one::{Once, ONCE_INIT};\n         static mut INIT: Once = ONCE_INIT;\n \n         // Copy what clang does by turning on loop vectorization at O2 and"}, {"sha": "d4a6c29752d16dc63fabe52c19f52f8a98ef3484", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -35,6 +35,7 @@ extern mod extra;\n extern mod flate;\n extern mod arena;\n extern mod syntax;\n+extern mod sync;\n \n use back::link;\n use driver::session;"}, {"sha": "5b4a961761277273ecb7a055e97acf11bd1b63da", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -2660,7 +2660,7 @@ pub fn trans_crate(sess: session::Session,\n                    output: &Path) -> CrateTranslation {\n     // Before we touch LLVM, make sure that multithreading is enabled.\n     unsafe {\n-        use extra::sync::one::{Once, ONCE_INIT};\n+        use sync::one::{Once, ONCE_INIT};\n         static mut INIT: Once = ONCE_INIT;\n         static mut POISONED: bool = false;\n         INIT.doit(|| {"}, {"sha": "f01e420030f6d9f9f7ae4f226458f906492f1dc3", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -41,7 +41,7 @@ use std::io::{fs, File, BufferedWriter};\n use std::str;\n use std::vec;\n \n-use extra::arc::Arc;\n+use sync::Arc;\n use extra::json::ToJson;\n use syntax::ast;\n use syntax::attr;"}, {"sha": "bf096a7e49b461eba6fa9f31d50ffd5183b28630", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -18,6 +18,7 @@\n extern mod syntax;\n extern mod rustc;\n extern mod extra;\n+extern mod sync;\n \n use std::local_data;\n use std::io;"}, {"sha": "0e53ecd416a7ab4beab4e4e0b98452b6263b7f65", "filename": "src/libsync/arc.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibsync%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibsync%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Farc.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -18,7 +18,7 @@\n  * With simple pipes, without Arc, a copy would have to be made for each task.\n  *\n  * ```rust\n- * use extra::arc::Arc;\n+ * use sync::Arc;\n  * use std::{rand, vec};\n  *\n  * let numbers = vec::from_fn(100, |i| (i as f32) * rand::random());\n@@ -38,7 +38,7 @@\n  * ```\n  */\n \n-#[allow(missing_doc)];\n+#[allow(missing_doc, dead_code)];\n \n \n use sync;\n@@ -424,7 +424,7 @@ impl<T:Freeze + Send> RWArc<T> {\n      * # Example\n      *\n      * ```rust\n-     * use extra::arc::RWArc;\n+     * use sync::RWArc;\n      *\n      * let arc = RWArc::new(1);\n      * arc.write_downgrade(|mut write_token| {\n@@ -605,7 +605,7 @@ impl<T:Clone+Send+Freeze> Clone for CowArc<T> {\n #[cfg(test)]\n mod tests {\n \n-    use arc::*;\n+    use super::{Arc, RWArc, MutexArc, CowArc};\n \n     use std::task;\n ", "previous_filename": "src/libextra/arc.rs"}, {"sha": "c7d550762540a6ca9128bdf74d37df2da56c248f", "filename": "src/libsync/comm.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibsync%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibsync%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "previous_filename": "src/libextra/comm.rs"}, {"sha": "479174d17afb0348343df83c6dbc86fb7dcd9b92", "filename": "src/libsync/future.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Ffuture.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -15,7 +15,7 @@\n  * # Example\n  *\n  * ```rust\n- * use extra::future::Future;\n+ * use sync::Future;\n  * # fn fib(n: uint) -> uint {42};\n  * # fn make_a_sandwich() {};\n  * let mut delayed_fib = Future::spawn(proc() { fib(5000) });", "previous_filename": "src/libextra/future.rs"}, {"sha": "de1b0f91d6dc5e98a60e1db1ea131eefa3a08a30", "filename": "src/libsync/lib.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibsync%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibsync%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flib.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*!\n+ * Concurrency-enabled mechanisms and primitives.\n+ */\n+\n+#[crate_id = \"sync#0.10-pre\"];\n+#[crate_type = \"rlib\"];\n+#[crate_type = \"dylib\"];\n+#[license = \"MIT/ASL2\"];\n+\n+pub use arc::{Arc, MutexArc, RWArc, RWWriteMode, RWReadMode, Condvar};\n+pub use sync::{Mutex, RWLock, Condvar, Semaphore, RWLockWriteMode,\n+    RWLockReadMode, Barrier, one, mutex};\n+pub use comm::{DuplexStream, SyncChan, SyncPort, rendezvous};\n+pub use task_pool::TaskPool;\n+pub use future::Future;\n+\n+mod arc;\n+mod sync;\n+mod comm;\n+mod task_pool;\n+mod future;"}, {"sha": "cfff31e08d4b3acea75a2fa2e1df64ce64f4d0ee", "filename": "src/libsync/sync/mod.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibsync%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibsync%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fsync%2Fmod.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -588,7 +588,7 @@ impl RWLock {\n      * # Example\n      *\n      * ```rust\n-     * use extra::sync::RWLock;\n+     * use sync::RWLock;\n      *\n      * let lock = RWLock::new();\n      * lock.write_downgrade(|mut write_token| {\n@@ -695,7 +695,7 @@ impl<'a> RWLockReadMode<'a> {\n /// of some computation.\n ///\n /// ```rust\n-/// use extra::sync::Barrier;\n+/// use sync::Barrier;\n ///\n /// let barrier = Barrier::new(10);\n /// for _ in range(0, 10) {\n@@ -759,7 +759,7 @@ impl Barrier {\n \n #[cfg(test)]\n mod tests {\n-    use sync::*;\n+    use sync::{Semaphore, Mutex, RWLock, Barrier, Condvar};\n \n     use std::cast;\n     use std::result;", "previous_filename": "src/libextra/sync/mod.rs"}, {"sha": "0f13a4980d9191c58029d4144549279828dd4232", "filename": "src/libsync/sync/mpsc_intrusive.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibsync%2Fsync%2Fmpsc_intrusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibsync%2Fsync%2Fmpsc_intrusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fsync%2Fmpsc_intrusive.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "previous_filename": "src/libextra/sync/mpsc_intrusive.rs"}, {"sha": "f1a81d65c1da5c4856d32ac582fadd800af476f6", "filename": "src/libsync/sync/mutex.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibsync%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibsync%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fsync%2Fmutex.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -83,7 +83,7 @@ pub static NATIVE_BLOCKED: uint = 1 << 2;\n /// # Example\n ///\n /// ```rust\n-/// use extra::sync::mutex::Mutex;\n+/// use sync::mutex::Mutex;\n ///\n /// let mut m = Mutex::new();\n /// let guard = m.lock();\n@@ -113,7 +113,7 @@ enum Flavor {\n /// # Example\n ///\n /// ```rust\n-/// use extra::sync::mutex::{StaticMutex, MUTEX_INIT};\n+/// use sync::mutex::{StaticMutex, MUTEX_INIT};\n ///\n /// static mut LOCK: StaticMutex = MUTEX_INIT;\n ///", "previous_filename": "src/libextra/sync/mutex.rs"}, {"sha": "93d818b704dc9c974daec74d601bc5fea52754db", "filename": "src/libsync/sync/one.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibsync%2Fsync%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibsync%2Fsync%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fsync%2Fone.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -30,7 +30,7 @@ use sync::mutex::{StaticMutex, MUTEX_INIT};\n /// # Example\n ///\n /// ```rust\n-/// use extra::sync::one::{Once, ONCE_INIT};\n+/// use sync::one::{Once, ONCE_INIT};\n ///\n /// static mut START: Once = ONCE_INIT;\n /// unsafe {", "previous_filename": "src/libextra/sync/one.rs"}, {"sha": "0d8cccfe2b9aec25595a2f40bb891c6337e477da", "filename": "src/libsync/task_pool.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibsync%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Flibsync%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Ftask_pool.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "previous_filename": "src/libextra/task_pool.rs"}, {"sha": "4b505ec8117622b81d4cd3cc939d40e078fd2dd4", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -16,15 +16,17 @@\n // This also serves as a pipes test, because Arcs are implemented with pipes.\n \n extern mod extra;\n+extern mod sync;\n \n-use extra::arc;\n-use extra::future::Future;\n+use sync::Arc;\n+use sync::MutexArc;\n+use sync::Future;\n use extra::time;\n use std::os;\n use std::uint;\n \n // A poor man's pipe.\n-type pipe = arc::MutexArc<~[uint]>;\n+type pipe = MutexArc<~[uint]>;\n \n fn send(p: &pipe, msg: uint) {\n     unsafe {\n@@ -46,7 +48,7 @@ fn recv(p: &pipe) -> uint {\n }\n \n fn init() -> (pipe,pipe) {\n-    let m = arc::MutexArc::new(~[]);\n+    let m = MutexArc::new(~[]);\n     ((&m).clone(), m)\n }\n "}, {"sha": "23b4f00b280da976a2d7b90fb8562ef36b7b95d9", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -16,15 +16,16 @@\n // This also serves as a pipes test, because Arcs are implemented with pipes.\n \n extern mod extra;\n+extern mod sync;\n \n-use extra::arc;\n-use extra::future::Future;\n+use sync::RWArc;\n+use sync::Future;\n use extra::time;\n use std::os;\n use std::uint;\n \n // A poor man's pipe.\n-type pipe = arc::RWArc<~[uint]>;\n+type pipe = RWArc<~[uint]>;\n \n fn send(p: &pipe, msg: uint) {\n     p.write_cond(|state, cond| {\n@@ -42,7 +43,7 @@ fn recv(p: &pipe) -> uint {\n }\n \n fn init() -> (pipe,pipe) {\n-    let x = arc::RWArc::new(~[]);\n+    let x = RWArc::new(~[]);\n     ((&x).clone(), x)\n }\n "}, {"sha": "c0e22f207b8f9c0a8e4b9065a2cd0be86e6b1736", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern mod sync;\n extern mod arena;\n \n use std::iter::range_step;\n-use extra::future::Future;\n+use sync::Future;\n use arena::TypedArena;\n \n enum Tree<'a> {"}, {"sha": "9de62aaf960e8ba07bd5b21fd92cfca28b4aa948", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -10,15 +10,15 @@\n \n // xfail-test arcs no longer unwrap\n \n-extern mod extra;\n+extern mod sync;\n \n use std::from_str::FromStr;\n use std::iter::count;\n use std::num::min;\n use std::os;\n use std::vec::from_elem;\n-use extra::arc::Arc;\n-use extra::arc::RWArc;\n+use sync::Arc;\n+use sync::RWArc;\n \n fn A(i: uint, j: uint) -> f64 {\n     ((i + j) * (i + j + 1) / 2 + i + 1) as f64"}, {"sha": "5c55f10ab4f2a8c7ed8bf46e659e05f19556cc20", "filename": "src/test/compile-fail/arc-cant-nest-rw-arc-3177.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Farc-cant-nest-rw-arc-3177.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Farc-cant-nest-rw-arc-3177.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-cant-nest-rw-arc-3177.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n-use extra::arc::RWArc;\n+extern mod sync;\n+use sync::RWArc;\n \n fn main() {\n     let arc1  = RWArc::new(true);"}, {"sha": "c9cd13278822567145669ac7f9fb0f8715f5fa1e", "filename": "src/test/compile-fail/arc-rw-cond-shouldnt-escape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Farc-rw-cond-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Farc-rw-cond-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-cond-shouldnt-escape.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n // error-pattern: lifetime of return value does not outlive the function call\n-extern mod extra;\n-use extra::arc;\n+extern mod sync;\n+use sync::RWArc;\n fn main() {\n-    let x = ~arc::RWArc::new(1);\n+    let x = ~RWArc::new(1);\n     let mut y = None;\n     x.write_cond(|_one, cond| y = Some(cond));\n     y.unwrap().wait();"}, {"sha": "dfdbd882acff6ed23749f209168734c5911e6ed7", "filename": "src/test/compile-fail/arc-rw-read-mode-shouldnt-escape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Farc-rw-read-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Farc-rw-read-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-read-mode-shouldnt-escape.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n-use extra::arc;\n+extern mod sync;\n+use sync::RWArc;\n fn main() {\n-    let x = ~arc::RWArc::new(1);\n+    let x = ~RWArc::new(1);\n     let mut y = None;\n     x.write_downgrade(|write_mode| {\n         y = Some(x.downgrade(write_mode));"}, {"sha": "4bb7653d23e5c44d8d5c61dff4fe018b61fa3d5c", "filename": "src/test/compile-fail/arc-rw-state-shouldnt-escape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Farc-rw-state-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Farc-rw-state-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-state-shouldnt-escape.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n-use extra::arc;\n+extern mod sync;\n+use sync::RWArc;\n fn main() {\n-    let x = ~arc::RWArc::new(1);\n+    let x = ~RWArc::new(1);\n     let mut y = None; //~ ERROR lifetime of variable does not enclose its declaration\n     x.write(|one| y = Some(one));\n     *y.unwrap() = 2;"}, {"sha": "1410308107e948ac31473b689fe38933e28003a7", "filename": "src/test/compile-fail/arc-rw-write-mode-cond-shouldnt-escape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-cond-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-cond-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-cond-shouldnt-escape.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n // error-pattern: lifetime of variable does not enclose its declaration\n-extern mod extra;\n-use extra::arc;\n+extern mod sync;\n+use sync::RWArc;\n fn main() {\n-    let x = ~arc::RWArc::new(1);\n+    let x = ~RWArc::new(1);\n     let mut y = None;\n     x.write_downgrade(|write_mode| {\n         (&write_mode).write_cond(|_one, cond| {"}, {"sha": "68226d96a18ef89af256de47ac1cb6d5d91e84cf", "filename": "src/test/compile-fail/arc-rw-write-mode-shouldnt-escape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-shouldnt-escape.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n // error-pattern: lifetime of variable does not enclose its declaration\n-extern mod extra;\n-use extra::arc;\n+extern mod sync;\n+use sync::RWArc;\n fn main() {\n-    let x = ~arc::RWArc::new(1);\n+    let x = ~RWArc::new(1);\n     let mut y = None;\n     x.write_downgrade(|write_mode| y = Some(write_mode));\n     y.unwrap();"}, {"sha": "f2c9ba58228938fdf4f15954ead38b13f67b1e76", "filename": "src/test/compile-fail/functional-struct-update-noncopyable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -11,8 +11,8 @@\n // issue 7327\n \n // xfail-fast #7103\n-extern mod extra;\n-use extra::arc::Arc;\n+extern mod sync;\n+use sync::Arc;\n \n struct A { y: Arc<int>, x: Arc<int> }\n "}, {"sha": "69a90275ec78baf49e6200babd9ea3fadc3f1149", "filename": "src/test/compile-fail/future_not_copyable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Ffuture_not_copyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Ffuture_not_copyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffuture_not_copyable.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern mod sync;\n \n-use extra::future::Future;\n+use sync::Future;\n \n fn main() {\n     let f = Future::from_value(());"}, {"sha": "cdfdd29410e76a1d719ed54d796520621adc0ffa", "filename": "src/test/compile-fail/mutex-arc-nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern mod sync;\n \n use std::task;\n-use extra::arc::{MutexArc};\n+use sync::MutexArc;\n \n fn test_mutex_arc_nested() {\n     let arc = ~MutexArc::new(1);"}, {"sha": "cc529abd6f94f2d0c8dfb4892177596b2588f9b9", "filename": "src/test/compile-fail/no-capture-arc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -10,14 +10,14 @@\n \n // error-pattern: use of moved value\n \n-extern mod extra;\n-use extra::arc;\n+extern mod sync;\n+use sync::Arc;\n \n use std::task;\n \n fn main() {\n     let v = ~[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n-    let arc_v = arc::Arc::new(v);\n+    let arc_v = Arc::new(v);\n \n     task::spawn(proc() {\n         let v = arc_v.get();"}, {"sha": "204a0e1cdd4a077bb15a3528fe901a319bc1c950", "filename": "src/test/compile-fail/no-reuse-move-arc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n-use extra::arc;\n+extern mod sync;\n+use sync::Arc;\n \n use std::task;\n \n fn main() {\n     let v = ~[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n-    let arc_v = arc::Arc::new(v);\n+    let arc_v = Arc::new(v);\n \n     task::spawn(proc() {\n         let v = arc_v.get();"}, {"sha": "a7e4f8de43704500553ddd13d6c96de68d97337a", "filename": "src/test/compile-fail/once-cant-call-twice-on-heap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-heap.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -12,16 +12,16 @@\n // This program would segfault if it were legal.\n \n #[feature(once_fns)];\n-extern mod extra;\n-use extra::arc;\n+extern mod sync;\n+use sync::Arc;\n \n fn foo(blk: proc()) {\n     blk();\n     blk(); //~ ERROR use of moved value\n }\n \n fn main() {\n-    let x = arc::Arc::new(true);\n+    let x = Arc::new(true);\n     foo(proc() {\n         assert!(*x.get());\n         drop(x);"}, {"sha": "8b168dd67870ecfc5507348c5fced6999ee866e9", "filename": "src/test/compile-fail/once-cant-call-twice-on-stack.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -12,16 +12,16 @@\n // This program would segfault if it were legal.\n \n #[feature(once_fns)];\n-extern mod extra;\n-use extra::arc;\n+extern mod sync;\n+use sync::Arc;\n \n fn foo(blk: once ||) {\n     blk();\n     blk(); //~ ERROR use of moved value\n }\n \n fn main() {\n-    let x = arc::Arc::new(true);\n+    let x = Arc::new(true);\n     foo(|| {\n         assert!(*x.get());\n         drop(x);"}, {"sha": "4fa6b6af7949e4545e4737aa7282e53dbef175dc", "filename": "src/test/compile-fail/once-cant-move-out-of-non-once-on-stack.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fonce-cant-move-out-of-non-once-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fonce-cant-move-out-of-non-once-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-move-out-of-non-once-on-stack.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -11,16 +11,16 @@\n // Testing guarantees provided by once functions.\n // This program would segfault if it were legal.\n \n-extern mod extra;\n-use extra::arc;\n+extern mod sync;\n+use sync::Arc;\n \n fn foo(blk: ||) {\n     blk();\n     blk();\n }\n \n fn main() {\n-    let x = arc::Arc::new(true);\n+    let x = Arc::new(true);\n     foo(|| {\n         assert!(*x.get());\n         drop(x); //~ ERROR cannot move out of captured outer variable"}, {"sha": "06b8ad6259b6ba4a728d154fb86b36cc299652d0", "filename": "src/test/compile-fail/sync-cond-shouldnt-escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fsync-cond-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fsync-cond-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-cond-shouldnt-escape.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // error-pattern: lifetime of variable does not enclose its declaration\n-extern mod extra;\n-use extra::sync;\n+extern mod sync;\n+use sync::Mutex;\n \n fn main() {\n     let m = ~sync::Mutex::new();"}, {"sha": "52466c122dd7f76a1d19e9230e50e1655d430ec1", "filename": "src/test/compile-fail/sync-rwlock-cond-shouldnt-escape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-cond-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-cond-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-cond-shouldnt-escape.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n // error-pattern: lifetime of method receiver does not outlive the method call\n-extern mod extra;\n-use extra::sync;\n+extern mod sync;\n+use sync::RWLock;\n fn main() {\n-    let x = ~sync::RWLock::new();\n+    let x = ~RWLock::new();\n     let mut y = None;\n     x.write_cond(|cond| {\n         y = Some(cond);"}, {"sha": "0201f9dd51cbfeb76f57659f1b3054645867d267", "filename": "src/test/compile-fail/sync-rwlock-read-mode-shouldnt-escape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-read-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-read-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-read-mode-shouldnt-escape.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n // error-pattern: cannot infer an appropriate lifetime\n-extern mod extra;\n-use extra::sync;\n+extern mod sync;\n+use sync::RWLock;\n fn main() {\n-    let x = ~sync::RWLock::new();\n+    let x = ~RWLock::new();\n     let mut y = None;\n     x.write_downgrade(|write_mode| {\n         y = Some(x.downgrade(write_mode));"}, {"sha": "71a9dd100c395b129da55e0126defd1e17fd6002", "filename": "src/test/compile-fail/sync-rwlock-write-mode-cond-shouldnt-escape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-cond-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-cond-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-cond-shouldnt-escape.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n // error-pattern: lifetime of variable does not enclose its declaration\n-extern mod extra;\n-use extra::sync;\n+extern mod sync;\n+use sync::RWLock;\n fn main() {\n-    let x = ~sync::RWLock::new();\n+    let x = ~RWLock::new();\n     let mut y = None;\n     x.write_downgrade(|write_mode| {\n         (&write_mode).write_cond(|cond| {"}, {"sha": "53966bf48a4939f2388e0331220819ec36797ec3", "filename": "src/test/compile-fail/sync-rwlock-write-mode-shouldnt-escape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-shouldnt-escape.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n // error-pattern: lifetime of variable does not enclose its declaration\n-extern mod extra;\n-use extra::sync;\n+extern mod sync;\n+use sync::RWLock;\n fn main() {\n-    let x = ~sync::RWLock::new();\n+    let x = ~RWLock::new();\n     let mut y = None;\n     x.write_downgrade(|write_mode| {\n         y = Some(write_mode);"}, {"sha": "16f54e929236a16c978f35b9ddd673c89c6fa7a8", "filename": "src/test/run-fail/issue-2444.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Frun-fail%2Fissue-2444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Frun-fail%2Fissue-2444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2444.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -10,10 +10,10 @@\n \n // error-pattern:explicit failure\n \n-extern mod extra;\n-use extra::arc;\n+extern mod sync;\n+use sync::Arc;\n \n-enum e<T> { e(arc::Arc<T>) }\n+enum e<T> { e(Arc<T>) }\n \n fn foo() -> e<int> {fail!();}\n "}, {"sha": "3a86357bdaad16c25f476a56e1a19fb9171cf50e", "filename": "src/test/run-pass/bind-by-move.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-by-move.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n // xfail-fast\n-extern mod extra;\n-use extra::arc;\n-fn dispose(_x: arc::Arc<bool>) { }\n+extern mod sync;\n+use sync::Arc;\n+fn dispose(_x: Arc<bool>) { }\n \n pub fn main() {\n-    let p = arc::Arc::new(true);\n+    let p = Arc::new(true);\n     let x = Some(p);\n     match x {\n         Some(z) => { dispose(z); },"}, {"sha": "0ccf7b8f8a3e1276dd2a8a2cd724fa8cb45f891e", "filename": "src/test/run-pass/once-move-out-on-heap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Frun-pass%2Fonce-move-out-on-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Frun-pass%2Fonce-move-out-on-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fonce-move-out-on-heap.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -13,15 +13,15 @@\n // xfail-fast\n \n #[feature(once_fns)];\n-extern mod extra;\n-use extra::arc;\n+extern mod sync;\n+use sync::Arc;\n \n fn foo(blk: proc()) {\n     blk();\n }\n \n pub fn main() {\n-    let x = arc::Arc::new(true);\n+    let x = Arc::new(true);\n     foo(proc() {\n         assert!(*x.get());\n         drop(x);"}, {"sha": "e732d0c76a66354ef10d1bf95aedbdc2d04ed7a5", "filename": "src/test/run-pass/once-move-out-on-stack.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Frun-pass%2Fonce-move-out-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Frun-pass%2Fonce-move-out-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fonce-move-out-on-stack.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -13,15 +13,15 @@\n // xfail-fast\n \n #[feature(once_fns)];\n-extern mod extra;\n-use extra::arc;\n+extern mod sync;\n+use sync::Arc;\n \n fn foo(blk: once ||) {\n     blk();\n }\n \n pub fn main() {\n-    let x = arc::Arc::new(true);\n+    let x = Arc::new(true);\n     foo(|| {\n         assert!(*x.get());\n         drop(x);"}, {"sha": "454da6d2aaa072bae441c371f32d02fb512e316d", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf575c86fd3c053df83b90862441fec71c7a622/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=2bf575c86fd3c053df83b90862441fec71c7a622", "patch": "@@ -15,9 +15,9 @@\n \n // xfail-fast\n \n-extern mod extra;\n+extern mod sync;\n \n-use extra::arc;\n+use sync::Arc;\n use std::task;\n \n trait Pet {\n@@ -65,7 +65,7 @@ pub fn main() {\n     let dogge1 = Dogge { bark_decibels: 100, tricks_known: 42, name: ~\"alan_turing\" };\n     let dogge2 = Dogge { bark_decibels: 55,  tricks_known: 11, name: ~\"albert_einstein\" };\n     let fishe = Goldfyshe { swim_speed: 998, name: ~\"alec_guinness\" };\n-    let arc = arc::Arc::new(~[~catte  as ~Pet:Freeze+Send,\n+    let arc = Arc::new(~[~catte  as ~Pet:Freeze+Send,\n                          ~dogge1 as ~Pet:Freeze+Send,\n                          ~fishe  as ~Pet:Freeze+Send,\n                          ~dogge2 as ~Pet:Freeze+Send]);\n@@ -83,21 +83,21 @@ pub fn main() {\n     p3.recv();\n }\n \n-fn check_legs(arc: arc::Arc<~[~Pet:Freeze+Send]>) {\n+fn check_legs(arc: Arc<~[~Pet:Freeze+Send]>) {\n     let mut legs = 0;\n     for pet in arc.get().iter() {\n         legs += pet.num_legs();\n     }\n     assert!(legs == 12);\n }\n-fn check_names(arc: arc::Arc<~[~Pet:Freeze+Send]>) {\n+fn check_names(arc: Arc<~[~Pet:Freeze+Send]>) {\n     for pet in arc.get().iter() {\n         pet.name(|name| {\n             assert!(name[0] == 'a' as u8 && name[1] == 'l' as u8);\n         })\n     }\n }\n-fn check_pedigree(arc: arc::Arc<~[~Pet:Freeze+Send]>) {\n+fn check_pedigree(arc: Arc<~[~Pet:Freeze+Send]>) {\n     for pet in arc.get().iter() {\n         assert!(pet.of_good_pedigree());\n     }"}]}