{"sha": "0a8db690a4cffc687bddcaabc762e3e8746adec6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhOGRiNjkwYTRjZmZjNjg3YmRkY2FhYmM3NjJlM2U4NzQ2YWRlYzY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-17T07:55:28Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-24T05:28:10Z"}, "message": "nix panictry! in ParserAnyMacro::make", "tree": {"sha": "e8b1363e160934b6356bf3822d63ba48cf7025bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8b1363e160934b6356bf3822d63ba48cf7025bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a8db690a4cffc687bddcaabc762e3e8746adec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a8db690a4cffc687bddcaabc762e3e8746adec6", "html_url": "https://github.com/rust-lang/rust/commit/0a8db690a4cffc687bddcaabc762e3e8746adec6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a8db690a4cffc687bddcaabc762e3e8746adec6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f2d9686ccbb67ce23e6acf587c5d1395288dc00", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f2d9686ccbb67ce23e6acf587c5d1395288dc00", "html_url": "https://github.com/rust-lang/rust/commit/0f2d9686ccbb67ce23e6acf587c5d1395288dc00"}], "stats": {"total": 201, "additions": 153, "deletions": 48}, "files": [{"sha": "58217d98986bf2341cad3ce165925e47f7be5a82", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8db690a4cffc687bddcaabc762e3e8746adec6/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8db690a4cffc687bddcaabc762e3e8746adec6/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=0a8db690a4cffc687bddcaabc762e3e8746adec6", "patch": "@@ -204,7 +204,7 @@ ast_fragments! {\n }\n \n impl AstFragmentKind {\n-    fn dummy(self, span: Span) -> AstFragment {\n+    crate fn dummy(self, span: Span) -> AstFragment {\n         self.make_from(DummyResult::any(span)).expect(\"couldn't create a dummy AST fragment\")\n     }\n "}, {"sha": "3c619c62c2bf20e9ddc56eac03fbc2159d77bbb4", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 46, "deletions": 31, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/0a8db690a4cffc687bddcaabc762e3e8746adec6/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8db690a4cffc687bddcaabc762e3e8746adec6/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=0a8db690a4cffc687bddcaabc762e3e8746adec6", "patch": "@@ -83,41 +83,56 @@ fn suggest_slice_pat(e: &mut DiagnosticBuilder<'_>, site_span: Span, parser: &Pa\n     );\n }\n \n+fn emit_frag_parse_err(\n+    mut e: DiagnosticBuilder<'_>,\n+    parser: &Parser<'_>,\n+    site_span: Span,\n+    macro_ident: ast::Ident,\n+    arm_span: Span,\n+    kind: AstFragmentKind,\n+) {\n+    if parser.token == token::Eof && e.message().ends_with(\", found `<eof>`\") {\n+        if !e.span.is_dummy() {\n+            // early end of macro arm (#52866)\n+            e.replace_span_with(parser.sess.source_map().next_point(parser.token.span));\n+        }\n+        let msg = &e.message[0];\n+        e.message[0] = (\n+            format!(\n+                \"macro expansion ends with an incomplete expression: {}\",\n+                msg.0.replace(\", found `<eof>`\", \"\"),\n+            ),\n+            msg.1,\n+        );\n+    }\n+    if e.span.is_dummy() {\n+        // Get around lack of span in error (#30128)\n+        e.replace_span_with(site_span);\n+        if !parser.sess.source_map().is_imported(arm_span) {\n+            e.span_label(arm_span, \"in this macro arm\");\n+        }\n+    } else if parser.sess.source_map().is_imported(parser.token.span) {\n+        e.span_label(site_span, \"in this macro invocation\");\n+    }\n+    match kind {\n+        AstFragmentKind::Pat if macro_ident.name == sym::vec => {\n+            suggest_slice_pat(&mut e, site_span, parser);\n+        }\n+        _ => annotate_err_with_kind(&mut e, kind, site_span),\n+    };\n+    e.emit();\n+}\n+\n impl<'a> ParserAnyMacro<'a> {\n     crate fn make(mut self: Box<ParserAnyMacro<'a>>, kind: AstFragmentKind) -> AstFragment {\n         let ParserAnyMacro { site_span, macro_ident, ref mut parser, arm_span } = *self;\n-        let fragment = panictry!(parse_ast_fragment(parser, kind).map_err(|mut e| {\n-            if parser.token == token::Eof && e.message().ends_with(\", found `<eof>`\") {\n-                if !e.span.is_dummy() {\n-                    // early end of macro arm (#52866)\n-                    e.replace_span_with(parser.sess.source_map().next_point(parser.token.span));\n-                }\n-                let msg = &e.message[0];\n-                e.message[0] = (\n-                    format!(\n-                        \"macro expansion ends with an incomplete expression: {}\",\n-                        msg.0.replace(\", found `<eof>`\", \"\"),\n-                    ),\n-                    msg.1,\n-                );\n+        let fragment = match parse_ast_fragment(parser, kind) {\n+            Ok(f) => f,\n+            Err(err) => {\n+                emit_frag_parse_err(err, parser, site_span, macro_ident, arm_span, kind);\n+                return kind.dummy(site_span);\n             }\n-            if e.span.is_dummy() {\n-                // Get around lack of span in error (#30128)\n-                e.replace_span_with(site_span);\n-                if !parser.sess.source_map().is_imported(arm_span) {\n-                    e.span_label(arm_span, \"in this macro arm\");\n-                }\n-            } else if parser.sess.source_map().is_imported(parser.token.span) {\n-                e.span_label(site_span, \"in this macro invocation\");\n-            }\n-            match kind {\n-                AstFragmentKind::Pat if macro_ident.name == sym::vec => {\n-                    suggest_slice_pat(&mut e, site_span, parser);\n-                }\n-                _ => annotate_err_with_kind(&mut e, kind, site_span),\n-            };\n-            e\n-        }));\n+        };\n \n         // We allow semicolons at the end of expressions -- e.g., the semicolon in\n         // `macro_rules! m { () => { panic!(); } }` isn't parsed by `.parse_expr()`,"}, {"sha": "a7a10d0f677afc24aaa571b11913a664f5e1f35a", "filename": "src/test/ui/editions/edition-keywords-2018-2015-parsing.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a8db690a4cffc687bddcaabc762e3e8746adec6/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8db690a4cffc687bddcaabc762e3e8746adec6/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.rs?ref=0a8db690a4cffc687bddcaabc762e3e8746adec6", "patch": "@@ -1,9 +1,15 @@\n // edition:2018\n // aux-build:edition-kw-macro-2015.rs\n \n+fn main() {}\n+\n #[macro_use]\n extern crate edition_kw_macro_2015;\n \n+mod module {\n+    pub fn r#async() {}\n+}\n+\n pub fn check_async() {\n     let mut async = 1; //~ ERROR expected identifier, found keyword `async`\n     let mut r#async = 1; // OK\n@@ -13,7 +19,7 @@ pub fn check_async() {\n     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n     r#async = consumes_async_raw!(r#async); // OK\n \n-    if passes_ident!(async) == 1 {}\n+    if passes_ident!(async) == 1 {} //~ ERROR async closures are unstable\n     if passes_ident!(r#async) == 1 {} // OK\n     module::async(); //~ ERROR expected identifier, found keyword `async`\n     module::r#async(); // OK"}, {"sha": "3c3b934b531c81ed83f65f819760bdd2fbf3617f", "filename": "src/test/ui/editions/edition-keywords-2018-2015-parsing.stderr", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0a8db690a4cffc687bddcaabc762e3e8746adec6/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a8db690a4cffc687bddcaabc762e3e8746adec6/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr?ref=0a8db690a4cffc687bddcaabc762e3e8746adec6", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found keyword `async`\n-  --> $DIR/edition-keywords-2018-2015-parsing.rs:8:13\n+  --> $DIR/edition-keywords-2018-2015-parsing.rs:14:13\n    |\n LL |     let mut async = 1;\n    |             ^^^^^ expected identifier, found keyword\n@@ -10,7 +10,7 @@ LL |     let mut r#async = 1;\n    |             ^^^^^^^\n \n error: expected identifier, found keyword `async`\n-  --> $DIR/edition-keywords-2018-2015-parsing.rs:18:13\n+  --> $DIR/edition-keywords-2018-2015-parsing.rs:24:13\n    |\n LL |     module::async();\n    |             ^^^^^ expected identifier, found keyword\n@@ -21,13 +21,13 @@ LL |     module::r#async();\n    |             ^^^^^^^\n \n error: no rules expected the token `r#async`\n-  --> $DIR/edition-keywords-2018-2015-parsing.rs:12:31\n+  --> $DIR/edition-keywords-2018-2015-parsing.rs:18:31\n    |\n LL |     r#async = consumes_async!(r#async);\n    |                               ^^^^^^^ no rules expected this token in macro call\n \n error: no rules expected the token `async`\n-  --> $DIR/edition-keywords-2018-2015-parsing.rs:13:35\n+  --> $DIR/edition-keywords-2018-2015-parsing.rs:19:35\n    |\n LL |     r#async = consumes_async_raw!(async);\n    |                                   ^^^^^ no rules expected this token in macro call\n@@ -38,10 +38,20 @@ error: macro expansion ends with an incomplete expression: expected one of `move\n LL |     ($i: ident) => ($i)\n    |                       ^ expected one of `move`, `|`, or `||`\n    | \n-  ::: $DIR/edition-keywords-2018-2015-parsing.rs:16:8\n+  ::: $DIR/edition-keywords-2018-2015-parsing.rs:22:8\n    |\n LL |     if passes_ident!(async) == 1 {}\n    |        -------------------- in this macro invocation\n \n-error: aborting due to 5 previous errors\n+error[E0658]: async closures are unstable\n+  --> $DIR/edition-keywords-2018-2015-parsing.rs:22:22\n+   |\n+LL |     if passes_ident!(async) == 1 {}\n+   |                      ^^^^^\n+   |\n+   = note: see issue #62290 <https://github.com/rust-lang/rust/issues/62290> for more information\n+   = help: add `#![feature(async_closure)]` to the crate attributes to enable\n+\n+error: aborting due to 6 previous errors\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "b12ad76a74798f49dec992c2630d663c8728214a", "filename": "src/test/ui/editions/edition-keywords-2018-2018-parsing.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a8db690a4cffc687bddcaabc762e3e8746adec6/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8db690a4cffc687bddcaabc762e3e8746adec6/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.rs?ref=0a8db690a4cffc687bddcaabc762e3e8746adec6", "patch": "@@ -1,9 +1,15 @@\n // edition:2018\n // aux-build:edition-kw-macro-2018.rs\n \n+fn main() {}\n+\n #[macro_use]\n extern crate edition_kw_macro_2018;\n \n+mod module {\n+    pub fn r#async() {}\n+}\n+\n pub fn check_async() {\n     let mut async = 1; //~ ERROR expected identifier, found keyword `async`\n     let mut r#async = 1; // OK\n@@ -13,7 +19,7 @@ pub fn check_async() {\n     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n     r#async = consumes_async_raw!(r#async); // OK\n \n-    if passes_ident!(async) == 1 {}\n+    if passes_ident!(async) == 1 {} //~ ERROR async closures are unstable\n     if passes_ident!(r#async) == 1 {} // OK\n     module::async(); //~ ERROR expected identifier, found keyword `async`\n     module::r#async(); // OK"}, {"sha": "a2b129d17e0be14f9b17a9b7828fce3ffed65677", "filename": "src/test/ui/editions/edition-keywords-2018-2018-parsing.stderr", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0a8db690a4cffc687bddcaabc762e3e8746adec6/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a8db690a4cffc687bddcaabc762e3e8746adec6/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr?ref=0a8db690a4cffc687bddcaabc762e3e8746adec6", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found keyword `async`\n-  --> $DIR/edition-keywords-2018-2018-parsing.rs:8:13\n+  --> $DIR/edition-keywords-2018-2018-parsing.rs:14:13\n    |\n LL |     let mut async = 1;\n    |             ^^^^^ expected identifier, found keyword\n@@ -10,7 +10,7 @@ LL |     let mut r#async = 1;\n    |             ^^^^^^^\n \n error: expected identifier, found keyword `async`\n-  --> $DIR/edition-keywords-2018-2018-parsing.rs:18:13\n+  --> $DIR/edition-keywords-2018-2018-parsing.rs:24:13\n    |\n LL |     module::async();\n    |             ^^^^^ expected identifier, found keyword\n@@ -21,13 +21,13 @@ LL |     module::r#async();\n    |             ^^^^^^^\n \n error: no rules expected the token `r#async`\n-  --> $DIR/edition-keywords-2018-2018-parsing.rs:12:31\n+  --> $DIR/edition-keywords-2018-2018-parsing.rs:18:31\n    |\n LL |     r#async = consumes_async!(r#async);\n    |                               ^^^^^^^ no rules expected this token in macro call\n \n error: no rules expected the token `async`\n-  --> $DIR/edition-keywords-2018-2018-parsing.rs:13:35\n+  --> $DIR/edition-keywords-2018-2018-parsing.rs:19:35\n    |\n LL |     r#async = consumes_async_raw!(async);\n    |                                   ^^^^^ no rules expected this token in macro call\n@@ -38,10 +38,20 @@ error: macro expansion ends with an incomplete expression: expected one of `move\n LL |     ($i: ident) => ($i)\n    |                       ^ expected one of `move`, `|`, or `||`\n    | \n-  ::: $DIR/edition-keywords-2018-2018-parsing.rs:16:8\n+  ::: $DIR/edition-keywords-2018-2018-parsing.rs:22:8\n    |\n LL |     if passes_ident!(async) == 1 {}\n    |        -------------------- in this macro invocation\n \n-error: aborting due to 5 previous errors\n+error[E0658]: async closures are unstable\n+  --> $DIR/edition-keywords-2018-2018-parsing.rs:22:22\n+   |\n+LL |     if passes_ident!(async) == 1 {}\n+   |                      ^^^^^\n+   |\n+   = note: see issue #62290 <https://github.com/rust-lang/rust/issues/62290> for more information\n+   = help: add `#![feature(async_closure)]` to the crate attributes to enable\n+\n+error: aborting due to 6 previous errors\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "13e179578ad012d22f73348cc7d7b65692d960ab", "filename": "src/test/ui/macros/macro-context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8db690a4cffc687bddcaabc762e3e8746adec6/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8db690a4cffc687bddcaabc762e3e8746adec6/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.rs?ref=0a8db690a4cffc687bddcaabc762e3e8746adec6", "patch": "@@ -4,6 +4,8 @@ macro_rules! m {\n                             //~| ERROR macro expansion ignores token `typeof`\n                             //~| ERROR macro expansion ignores token `;`\n                             //~| ERROR macro expansion ignores token `;`\n+                            //~| ERROR cannot find type `i` in this scope\n+                            //~| ERROR cannot find value `i` in this scope\n }\n \n fn main() {"}, {"sha": "17c7389812475ac0a8eb48aff453d1adc6246cbd", "filename": "src/test/ui/macros/macro-context.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0a8db690a4cffc687bddcaabc762e3e8746adec6/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a8db690a4cffc687bddcaabc762e3e8746adec6/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr?ref=0a8db690a4cffc687bddcaabc762e3e8746adec6", "patch": "@@ -42,5 +42,29 @@ LL |     m!();\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 4 previous errors\n+error[E0412]: cannot find type `i` in this scope\n+  --> $DIR/macro-context.rs:3:13\n+   |\n+LL |     () => ( i ; typeof );\n+   |             ^ help: a builtin type with a similar name exists: `i8`\n+...\n+LL |     let a: m!();\n+   |            ---- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0425]: cannot find value `i` in this scope\n+  --> $DIR/macro-context.rs:3:13\n+   |\n+LL |     () => ( i ; typeof );\n+   |             ^ help: a local variable with a similar name exists: `a`\n+...\n+LL |     let i = m!();\n+   |             ---- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n \n+Some errors have detailed explanations: E0412, E0425.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "8035de4a48a92ceb16c26e4a4e742243b27b47ad", "filename": "src/test/ui/type/ascription/issue-47666.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8db690a4cffc687bddcaabc762e3e8746adec6/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8db690a4cffc687bddcaabc762e3e8746adec6/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.rs?ref=0a8db690a4cffc687bddcaabc762e3e8746adec6", "patch": "@@ -1,5 +1,7 @@\n fn main() {\n     let _ = Option:Some(vec![0, 1]); //~ ERROR expected type, found\n+    //~^ ERROR expected value, found enum `Option`\n+    //~| ERROR expected type, found variant `Some`\n }\n \n // This case isn't currently being handled gracefully due to the macro invocation."}, {"sha": "3cd3be70aa75b4163ac0ad6cf7599bf912ccd038", "filename": "src/test/ui/type/ascription/issue-47666.stderr", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0a8db690a4cffc687bddcaabc762e3e8746adec6/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a8db690a4cffc687bddcaabc762e3e8746adec6/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr?ref=0a8db690a4cffc687bddcaabc762e3e8746adec6", "patch": "@@ -13,5 +13,35 @@ LL |     let _ = Option:Some(vec![0, 1]);\n    = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to previous error\n+error[E0423]: expected value, found enum `Option`\n+  --> $DIR/issue-47666.rs:2:13\n+   |\n+LL |     let _ = Option:Some(vec![0, 1]);\n+   |             ^^^^^^\n+   |\n+help: try using one of the enum's variants\n+   |\n+LL |     let _ = std::option::Option::None:Some(vec![0, 1]);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _ = std::option::Option::Some:Some(vec![0, 1]);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0573]: expected type, found variant `Some`\n+  --> $DIR/issue-47666.rs:2:20\n+   |\n+LL |     let _ = Option:Some(vec![0, 1]);\n+   |                    ^^^^^^^^^^^^^^^^ not a type\n+   |\n+help: try using the variant's enum\n+   |\n+LL |     let _ = Option:std::option::Option;\n+   |                    ^^^^^^^^^^^^^^^^^^^\n+help: maybe you meant to write a path separator here\n+   |\n+LL |     let _ = Option::Some(vec![0, 1]);\n+   |                   ^^\n+\n+error: aborting due to 3 previous errors\n \n+Some errors have detailed explanations: E0423, E0573.\n+For more information about an error, try `rustc --explain E0423`."}]}