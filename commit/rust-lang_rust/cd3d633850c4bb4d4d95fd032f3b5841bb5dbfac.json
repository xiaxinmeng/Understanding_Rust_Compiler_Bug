{"sha": "cd3d633850c4bb4d4d95fd032f3b5841bb5dbfac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkM2Q2MzM4NTBjNGJiNGQ0ZDk1ZmQwMzJmM2I1ODQxYmI1ZGJmYWM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-01T23:00:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-01T23:00:50Z"}, "message": "Merge #9455\n\n9455: feat: Handle not let if expressions in replace_if_let_with_match r=Veykril a=Veykril\n\nTransforms bare `if cond {}` into `_ if cond` guard patterns in the match as long as at least one `if let` is in the if chain, otherwise the assist wont be applicable.\r\n\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "f113753eee5854a551efce20ccf7db89909ae756", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f113753eee5854a551efce20ccf7db89909ae756"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd3d633850c4bb4d4d95fd032f3b5841bb5dbfac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg3kkiCRBK7hj4Ov3rIwAA1GsIAKcVxJKNH0nsU3f6AFV8cl6q\nx+dlmpHMvuuTaovRqOQg+d/nVogz0ZtvthCq7o6tGF4x5pVoyWSEdelpcFpAJmS4\nzrazk0QyHpjWVkXakGxYEAN4RRCDHwAhZjblR6TdHZOtDRZoPR6AGHWi7ruELFS7\nWn86j/3AorqMNVmTIbtVNGIOixAurAoMVdQ90s6mIydKx2YFRxICk0xHgnLby6ab\nSrBq11EEOpaZBSE1DP854ZwHSR6RRu5NX5xja5VzdoYhbu01W24/wYbsjTHrFXLE\n3UR+EpRA5wZ6H8vSZVMGUcJnFQ02xHShPzP+zmQcYtccRtCwspzv5tHjHa2L1Vg=\n=OORh\n-----END PGP SIGNATURE-----\n", "payload": "tree f113753eee5854a551efce20ccf7db89909ae756\nparent 51d85e10601e07ff0997ca3a199149f728ba0665\nparent 8967856d7894aebbed0f17f41a00a0faf0e02a2d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1625180450 +0000\ncommitter GitHub <noreply@github.com> 1625180450 +0000\n\nMerge #9455\n\n9455: feat: Handle not let if expressions in replace_if_let_with_match r=Veykril a=Veykril\n\nTransforms bare `if cond {}` into `_ if cond` guard patterns in the match as long as at least one `if let` is in the if chain, otherwise the assist wont be applicable.\r\n\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd3d633850c4bb4d4d95fd032f3b5841bb5dbfac", "html_url": "https://github.com/rust-lang/rust/commit/cd3d633850c4bb4d4d95fd032f3b5841bb5dbfac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd3d633850c4bb4d4d95fd032f3b5841bb5dbfac/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51d85e10601e07ff0997ca3a199149f728ba0665", "url": "https://api.github.com/repos/rust-lang/rust/commits/51d85e10601e07ff0997ca3a199149f728ba0665", "html_url": "https://github.com/rust-lang/rust/commit/51d85e10601e07ff0997ca3a199149f728ba0665"}, {"sha": "8967856d7894aebbed0f17f41a00a0faf0e02a2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8967856d7894aebbed0f17f41a00a0faf0e02a2d", "html_url": "https://github.com/rust-lang/rust/commit/8967856d7894aebbed0f17f41a00a0faf0e02a2d"}], "stats": {"total": 107, "additions": 83, "deletions": 24}, "files": [{"sha": "6851cf83817ff96eba51b886762419b7f1cf1642", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 70, "deletions": 24, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/cd3d633850c4bb4d4d95fd032f3b5841bb5dbfac/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3d633850c4bb4d4d95fd032f3b5841bb5dbfac/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=cd3d633850c4bb4d4d95fd032f3b5841bb5dbfac", "patch": "@@ -1,5 +1,6 @@\n use std::iter::{self, successors};\n \n+use either::Either;\n use ide_db::{ty_filter::TryEnum, RootDatabase};\n use syntax::{\n     ast::{\n@@ -53,17 +54,30 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n     });\n     let scrutinee_to_be_expr = if_expr.condition()?.expr()?;\n \n-    let mut pat_bodies = Vec::new();\n+    let mut pat_seen = false;\n+    let mut cond_bodies = Vec::new();\n     for if_expr in if_exprs {\n         let cond = if_expr.condition()?;\n         let expr = cond.expr()?;\n-        if scrutinee_to_be_expr.syntax().text() != expr.syntax().text() {\n-            // Only if all condition expressions are equal we can merge them into a match\n-            return None;\n-        }\n-        let pat = cond.pat()?;\n+        let cond = match cond.pat() {\n+            Some(pat) => {\n+                if scrutinee_to_be_expr.syntax().text() != expr.syntax().text() {\n+                    // Only if all condition expressions are equal we can merge them into a match\n+                    return None;\n+                } else {\n+                    pat_seen = true;\n+                    Either::Left(pat)\n+                }\n+            }\n+            None => Either::Right(expr),\n+        };\n         let body = if_expr.then_branch()?;\n-        pat_bodies.push((pat, body));\n+        cond_bodies.push((cond, body));\n+    }\n+\n+    if !pat_seen {\n+        // Don't offer turning an if (chain) without patterns into a match\n+        return None;\n     }\n \n     let target = if_expr.syntax().text_range();\n@@ -76,8 +90,8 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n                 let else_arm = {\n                     match else_block {\n                         Some(else_block) => {\n-                            let pattern = match &*pat_bodies {\n-                                [(pat, _)] => ctx\n+                            let pattern = match &*cond_bodies {\n+                                [(Either::Left(pat), _)] => ctx\n                                     .sema\n                                     .type_of_pat(&pat)\n                                     .and_then(|ty| TryEnum::from_ty(&ctx.sema, &ty))\n@@ -99,23 +113,34 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n                         ),\n                     }\n                 };\n-                let arms = pat_bodies\n+                let arms = cond_bodies\n                     .into_iter()\n                     .map(|(pat, body)| {\n                         let body = body.reset_indent().indent(IndentLevel(1));\n-                        make::match_arm(vec![pat], unwrap_trivial_block(body))\n+                        match pat {\n+                            Either::Left(pat) => {\n+                                make::match_arm(iter::once(pat), unwrap_trivial_block(body))\n+                            }\n+                            Either::Right(expr) => make::match_arm_with_guard(\n+                                iter::once(make::wildcard_pat().into()),\n+                                expr,\n+                                unwrap_trivial_block(body),\n+                            ),\n+                        }\n                     })\n                     .chain(iter::once(else_arm));\n                 let match_expr = make::expr_match(scrutinee_to_be_expr, make::match_arm_list(arms));\n                 match_expr.indent(IndentLevel::from_node(if_expr.syntax()))\n             };\n \n-            let expr =\n-                if if_expr.syntax().parent().map_or(false, |it| ast::IfExpr::can_cast(it.kind())) {\n-                    make::block_expr(None, Some(match_expr)).into()\n-                } else {\n-                    match_expr\n-                };\n+            let has_preceding_if_expr =\n+                if_expr.syntax().parent().map_or(false, |it| ast::IfExpr::can_cast(it.kind()));\n+            let expr = if has_preceding_if_expr {\n+                // make sure we replace the `else if let ...` with a block so we don't end up with `else expr`\n+                make::block_expr(None, Some(match_expr)).into()\n+            } else {\n+                match_expr\n+            };\n             edit.replace_ast::<ast::Expr>(if_expr.into(), expr);\n         },\n     )\n@@ -210,7 +235,19 @@ fn is_pat_wildcard_or_sad(sema: &hir::Semantics<RootDatabase>, pat: &ast::Pat) -\n mod tests {\n     use super::*;\n \n-    use crate::tests::{check_assist, check_assist_target};\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n+\n+    #[test]\n+    fn test_if_let_with_match_unapplicable_for_simple_ifs() {\n+        check_assist_not_applicable(\n+            replace_if_let_with_match,\n+            r#\"\n+fn main() {\n+    if $0true {} else if false {} else {}\n+}\n+\"#,\n+        )\n+    }\n \n     #[test]\n     fn test_if_let_with_match_no_else() {\n@@ -223,7 +260,8 @@ impl VariantData {\n             self.foo();\n         }\n     }\n-}           \"#,\n+}\n+\"#,\n             r#\"\n impl VariantData {\n     pub fn foo(&self) {\n@@ -234,7 +272,8 @@ impl VariantData {\n             _ => (),\n         }\n     }\n-}           \"#,\n+}\n+\"#,\n         )\n     }\n \n@@ -249,27 +288,32 @@ impl VariantData {\n             true\n         } else if let VariantData::Tuple(..) = *self {\n             false\n+        } else if cond() {\n+            true\n         } else {\n             bar(\n                 123\n             )\n         }\n     }\n-}           \"#,\n+}\n+\"#,\n             r#\"\n impl VariantData {\n     pub fn is_struct(&self) -> bool {\n         match *self {\n             VariantData::Struct(..) => true,\n             VariantData::Tuple(..) => false,\n+            _ if cond() => true,\n             _ => {\n                     bar(\n                         123\n                     )\n                 }\n         }\n     }\n-}           \"#,\n+}\n+\"#,\n         )\n     }\n \n@@ -288,7 +332,8 @@ impl VariantData {\n             false\n         }\n     }\n-}           \"#,\n+}\n+\"#,\n             r#\"\n impl VariantData {\n     pub fn is_struct(&self) -> bool {\n@@ -301,7 +346,8 @@ impl VariantData {\n         }\n }\n     }\n-}           \"#,\n+}\n+\"#,\n         )\n     }\n "}, {"sha": "cd800ac6ea70a57f4b982bfaf6c18819707dfa95", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cd3d633850c4bb4d4d95fd032f3b5841bb5dbfac/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3d633850c4bb4d4d95fd032f3b5841bb5dbfac/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=cd3d633850c4bb4d4d95fd032f3b5841bb5dbfac", "patch": "@@ -430,6 +430,19 @@ pub fn match_arm(pats: impl IntoIterator<Item = ast::Pat>, expr: ast::Expr) -> a\n     }\n }\n \n+pub fn match_arm_with_guard(\n+    pats: impl IntoIterator<Item = ast::Pat>,\n+    guard: ast::Expr,\n+    expr: ast::Expr,\n+) -> ast::MatchArm {\n+    let pats_str = pats.into_iter().join(\" | \");\n+    return from_text(&format!(\"{} if {} => {}\", pats_str, guard, expr));\n+\n+    fn from_text(text: &str) -> ast::MatchArm {\n+        ast_from_text(&format!(\"fn f() {{ match () {{{}}} }}\", text))\n+    }\n+}\n+\n pub fn match_arm_list(arms: impl IntoIterator<Item = ast::MatchArm>) -> ast::MatchArmList {\n     let arms_str = arms\n         .into_iter()"}]}