{"sha": "f2871a9ce552cd21b1c7b8df69eefe06af6d59da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyODcxYTljZTU1MmNkMjFiMWM3YjhkZjY5ZWVmZTA2YWY2ZDU5ZGE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-02-06T00:57:11Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-02-06T01:50:28Z"}, "message": "Make `intern_lazy_const` actually intern its argument.\n\nCurrently it just unconditionally allocates it in the arena.\n\nFor a \"Clean Check\" build of the the `packed-simd` benchmark, this\nchange reduces both the `max-rss` and `faults` counts by 59%; it\nslightly (~3%) increases the instruction counts but the `wall-time` is\nunchanged.\n\nFor the same builds of a few other benchmarks, `max-rss` and `faults`\ndrop by 1--5%, but instruction counts and `wall-time` changes are in the\nnoise.\n\nFixes #57432, fixes #57829.", "tree": {"sha": "5e7afb1fbe7aca6c987680ad01b6012ba10b6276", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e7afb1fbe7aca6c987680ad01b6012ba10b6276"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2871a9ce552cd21b1c7b8df69eefe06af6d59da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2871a9ce552cd21b1c7b8df69eefe06af6d59da", "html_url": "https://github.com/rust-lang/rust/commit/f2871a9ce552cd21b1c7b8df69eefe06af6d59da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ae730a442cc8af6a487a137ae9ba78f89edbba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae730a442cc8af6a487a137ae9ba78f89edbba6", "html_url": "https://github.com/rust-lang/rust/commit/8ae730a442cc8af6a487a137ae9ba78f89edbba6"}], "stats": {"total": 78, "additions": 40, "deletions": 38}, "files": [{"sha": "eca01d78c2a4df437f8e04b3dcadeb6befd60390", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=f2871a9ce552cd21b1c7b8df69eefe06af6d59da", "patch": "@@ -2154,7 +2154,7 @@ impl<'tcx> Operand<'tcx> {\n             span,\n             ty,\n             user_ty: None,\n-            literal: tcx.intern_lazy_const(\n+            literal: tcx.mk_lazy_const(\n                 ty::LazyConst::Evaluated(ty::Const::zero_sized(ty)),\n             ),\n         })"}, {"sha": "21151276e729902712fe927599c5af8ecf552c3e", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=f2871a9ce552cd21b1c7b8df69eefe06af6d59da", "patch": "@@ -408,7 +408,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a,\n                         if let Ok(evaluated) = tcx.const_eval(param_env.and(cid)) {\n                             let substs = tcx.lift_to_global(&substs).unwrap();\n                             let evaluated = evaluated.subst(tcx, substs);\n-                            return tcx.intern_lazy_const(ty::LazyConst::Evaluated(evaluated));\n+                            return tcx.mk_lazy_const(ty::LazyConst::Evaluated(evaluated));\n                         }\n                     }\n                 } else {\n@@ -420,7 +420,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a,\n                                 promoted: None\n                             };\n                             if let Ok(evaluated) = tcx.const_eval(param_env.and(cid)) {\n-                                return tcx.intern_lazy_const(ty::LazyConst::Evaluated(evaluated));\n+                                return tcx.mk_lazy_const(ty::LazyConst::Evaluated(evaluated));\n                             }\n                         }\n                     }"}, {"sha": "9f55bb95d259b632fe9ef1f133b6ab0233bcfade", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=f2871a9ce552cd21b1c7b8df69eefe06af6d59da", "patch": "@@ -203,7 +203,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n                         if let Ok(evaluated) = tcx.const_eval(param_env.and(cid)) {\n                             let substs = tcx.lift_to_global(&substs).unwrap();\n                             let evaluated = evaluated.subst(tcx, substs);\n-                            return tcx.intern_lazy_const(ty::LazyConst::Evaluated(evaluated));\n+                            return tcx.mk_lazy_const(ty::LazyConst::Evaluated(evaluated));\n                         }\n                     }\n                 } else {\n@@ -215,7 +215,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n                                 promoted: None,\n                             };\n                             if let Ok(evaluated) = tcx.const_eval(param_env.and(cid)) {\n-                                return tcx.intern_lazy_const(ty::LazyConst::Evaluated(evaluated));\n+                                return tcx.mk_lazy_const(ty::LazyConst::Evaluated(evaluated));\n                             }\n                         }\n                     }"}, {"sha": "a4a2471852739b47623df02ee5756986a0f776b6", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=f2871a9ce552cd21b1c7b8df69eefe06af6d59da", "patch": "@@ -252,7 +252,7 @@ pub fn decode_lazy_const<'a, 'tcx, D>(decoder: &mut D)\n     where D: TyDecoder<'a, 'tcx>,\n           'tcx: 'a,\n {\n-    Ok(decoder.tcx().intern_lazy_const(Decodable::decode(decoder)?))\n+    Ok(decoder.tcx().mk_lazy_const(Decodable::decode(decoder)?))\n }\n \n #[inline]"}, {"sha": "87cf52af1d182a0c7f3d08a468d0bee74cb2b5a5", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=f2871a9ce552cd21b1c7b8df69eefe06af6d59da", "patch": "@@ -127,6 +127,7 @@ pub struct CtxtInterners<'tcx> {\n     goal: InternedSet<'tcx, GoalKind<'tcx>>,\n     goal_list: InternedSet<'tcx, List<Goal<'tcx>>>,\n     projs: InternedSet<'tcx, List<ProjectionKind<'tcx>>>,\n+    lazy_const: InternedSet<'tcx, LazyConst<'tcx>>,\n }\n \n impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n@@ -144,6 +145,7 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n             goal: Default::default(),\n             goal_list: Default::default(),\n             projs: Default::default(),\n+            lazy_const: Default::default(),\n         }\n     }\n \n@@ -1096,10 +1098,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.global_arenas.adt_def.alloc(def)\n     }\n \n-    pub fn intern_const_alloc(\n-        self,\n-        alloc: Allocation,\n-    ) -> &'gcx Allocation {\n+    pub fn intern_const_alloc(self, alloc: Allocation) -> &'gcx Allocation {\n         self.allocation_interner.borrow_mut().intern(alloc, |alloc| {\n             self.global_arenas.const_allocs.alloc(alloc)\n         })\n@@ -1119,10 +1118,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         })\n     }\n \n-    pub fn intern_lazy_const(self, c: ty::LazyConst<'tcx>) -> &'tcx ty::LazyConst<'tcx> {\n-        self.global_interners.arena.alloc(c)\n-    }\n-\n     pub fn intern_layout(self, layout: LayoutDetails) -> &'gcx LayoutDetails {\n         self.layout_interner.borrow_mut().intern(layout, |layout| {\n             self.global_arenas.layout.alloc(layout)\n@@ -2271,6 +2266,12 @@ impl<'tcx: 'lcx, 'lcx> Borrow<GoalKind<'lcx>> for Interned<'tcx, GoalKind<'tcx>>\n     }\n }\n \n+impl<'tcx: 'lcx, 'lcx> Borrow<LazyConst<'lcx>> for Interned<'tcx, LazyConst<'tcx>> {\n+    fn borrow<'a>(&'a self) -> &'a LazyConst<'lcx> {\n+        &self.0\n+    }\n+}\n+\n impl<'tcx: 'lcx, 'lcx> Borrow<[ExistentialPredicate<'lcx>]>\n     for Interned<'tcx, List<ExistentialPredicate<'tcx>>> {\n     fn borrow<'a>(&'a self) -> &'a [ExistentialPredicate<'lcx>] {\n@@ -2377,7 +2378,8 @@ pub fn keep_local<'tcx, T: ty::TypeFoldable<'tcx>>(x: &T) -> bool {\n \n direct_interners!('tcx,\n     region: mk_region(|r: &RegionKind| r.keep_in_local_tcx()) -> RegionKind,\n-    goal: mk_goal(|c: &GoalKind<'_>| keep_local(c)) -> GoalKind<'tcx>\n+    goal: mk_goal(|c: &GoalKind<'_>| keep_local(c)) -> GoalKind<'tcx>,\n+    lazy_const: mk_lazy_const(|c: &LazyConst<'_>| keep_local(&c)) -> LazyConst<'tcx>\n );\n \n macro_rules! slice_interners {\n@@ -2562,7 +2564,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     #[inline]\n     pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {\n-        self.mk_ty(Array(ty, self.intern_lazy_const(\n+        self.mk_ty(Array(ty, self.mk_lazy_const(\n             ty::LazyConst::Evaluated(ty::Const::from_usize(self.global_tcx(), n))\n         )))\n     }"}, {"sha": "f89a6ed2e768e8b06be2a603f3ed8886a2a551d2", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=f2871a9ce552cd21b1c7b8df69eefe06af6d59da", "patch": "@@ -1042,7 +1042,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::LazyConst<'tcx> {\n                 ty::LazyConst::Unevaluated(*def_id, substs.fold_with(folder))\n             }\n         };\n-        folder.tcx().intern_lazy_const(new)\n+        folder.tcx().mk_lazy_const(new)\n     }\n \n     fn fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {"}, {"sha": "508f6555f4afc1a6db4d68930fd23763bb6e6bbb", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=f2871a9ce552cd21b1c7b8df69eefe06af6d59da", "patch": "@@ -268,7 +268,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             span: expr_span,\n                             ty: this.hir.tcx().types.u32,\n                             user_ty: None,\n-                            literal: this.hir.tcx().intern_lazy_const(ty::LazyConst::Evaluated(\n+                            literal: this.hir.tcx().mk_lazy_const(ty::LazyConst::Evaluated(\n                                 ty::Const::from_bits(\n                                     this.hir.tcx(),\n                                     0,"}, {"sha": "6e836f7059b83ce2fdaf1f03798da7f1fd14c509", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=f2871a9ce552cd21b1c7b8df69eefe06af6d59da", "patch": "@@ -302,7 +302,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     }\n                     let eq_def_id = self.hir.tcx().lang_items().eq_trait().unwrap();\n                     let (mty, method) = self.hir.trait_method(eq_def_id, \"eq\", ty, &[ty.into()]);\n-                    let method = self.hir.tcx().intern_lazy_const(ty::LazyConst::Evaluated(method));\n+                    let method = self.hir.tcx().mk_lazy_const(ty::LazyConst::Evaluated(method));\n \n                     let re_erased = self.hir.tcx().types.re_erased;\n                     // take the argument by reference"}, {"sha": "a7b201fc0dbc6e1e5cc279b9b6d3613b3653d8d7", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=f2871a9ce552cd21b1c7b8df69eefe06af6d59da", "patch": "@@ -33,7 +33,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             span,\n             ty,\n             user_ty: None,\n-            literal: self.hir.tcx().intern_lazy_const(ty::LazyConst::Evaluated(literal)),\n+            literal: self.hir.tcx().mk_lazy_const(ty::LazyConst::Evaluated(literal)),\n         };\n         Operand::Constant(constant)\n     }"}, {"sha": "88512fede333c9ba6f75852f8264bcbfcb79ddf3", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=f2871a9ce552cd21b1c7b8df69eefe06af6d59da", "patch": "@@ -342,7 +342,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         }\n \n         hir::ExprKind::Lit(ref lit) => ExprKind::Literal {\n-            literal: cx.tcx.intern_lazy_const(ty::LazyConst::Evaluated(\n+            literal: cx.tcx.mk_lazy_const(ty::LazyConst::Evaluated(\n                 cx.const_eval_literal(&lit.node, expr_ty, lit.span, false)\n             )),\n             user_ty: None,\n@@ -442,7 +442,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             } else {\n                 if let hir::ExprKind::Lit(ref lit) = arg.node {\n                     ExprKind::Literal {\n-                        literal: cx.tcx.intern_lazy_const(ty::LazyConst::Evaluated(\n+                        literal: cx.tcx.mk_lazy_const(ty::LazyConst::Evaluated(\n                             cx.const_eval_literal(&lit.node, expr_ty, lit.span, true)\n                         )),\n                         user_ty: None,\n@@ -702,7 +702,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         ty: var_ty,\n                         span: expr.span,\n                         kind: ExprKind::Literal {\n-                            literal: cx.tcx.intern_lazy_const(literal),\n+                            literal: cx.tcx.mk_lazy_const(literal),\n                             user_ty: None\n                         },\n                     }.to_ref();\n@@ -856,7 +856,7 @@ fn method_callee<'a, 'gcx, 'tcx>(\n         ty,\n         span,\n         kind: ExprKind::Literal {\n-            literal: cx.tcx().intern_lazy_const(ty::LazyConst::Evaluated(\n+            literal: cx.tcx().mk_lazy_const(ty::LazyConst::Evaluated(\n                 ty::Const::zero_sized(ty)\n             )),\n             user_ty,\n@@ -918,7 +918,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             let user_ty = user_substs_applied_to_def(cx, expr.hir_id, &def);\n             debug!(\"convert_path_expr: user_ty={:?}\", user_ty);\n             ExprKind::Literal {\n-                literal: cx.tcx.intern_lazy_const(ty::LazyConst::Evaluated(ty::Const::zero_sized(\n+                literal: cx.tcx.mk_lazy_const(ty::LazyConst::Evaluated(ty::Const::zero_sized(\n                     cx.tables().node_id_to_type(expr.hir_id),\n                 ))),\n                 user_ty,\n@@ -930,7 +930,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             let user_ty = user_substs_applied_to_def(cx, expr.hir_id, &def);\n             debug!(\"convert_path_expr: (const) user_ty={:?}\", user_ty);\n             ExprKind::Literal {\n-                literal: cx.tcx.intern_lazy_const(ty::LazyConst::Unevaluated(def_id, substs)),\n+                literal: cx.tcx.mk_lazy_const(ty::LazyConst::Unevaluated(def_id, substs)),\n                 user_ty,\n             }\n         },"}, {"sha": "a726b87afa87b3eee6e570c7fd15054f75903e6a", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=f2871a9ce552cd21b1c7b8df69eefe06af6d59da", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn usize_literal(&mut self, value: u64) -> &'tcx ty::LazyConst<'tcx> {\n-        self.tcx.intern_lazy_const(ty::LazyConst::Evaluated(ty::Const::from_usize(self.tcx, value)))\n+        self.tcx.mk_lazy_const(ty::LazyConst::Evaluated(ty::Const::from_usize(self.tcx, value)))\n     }\n \n     pub fn bool_ty(&mut self) -> Ty<'tcx> {\n@@ -122,11 +122,11 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn true_literal(&mut self) -> &'tcx ty::LazyConst<'tcx> {\n-        self.tcx.intern_lazy_const(ty::LazyConst::Evaluated(ty::Const::from_bool(self.tcx, true)))\n+        self.tcx.mk_lazy_const(ty::LazyConst::Evaluated(ty::Const::from_bool(self.tcx, true)))\n     }\n \n     pub fn false_literal(&mut self) -> &'tcx ty::LazyConst<'tcx> {\n-        self.tcx.intern_lazy_const(ty::LazyConst::Evaluated(ty::Const::from_bool(self.tcx, false)))\n+        self.tcx.mk_lazy_const(ty::LazyConst::Evaluated(ty::Const::from_bool(self.tcx, false)))\n     }\n \n     pub fn const_eval_literal("}, {"sha": "15796186063de2ca5cf2d9927e441cb6a9f08bb7", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=f2871a9ce552cd21b1c7b8df69eefe06af6d59da", "patch": "@@ -459,7 +459,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n             span: self.span,\n             ty: func_ty,\n             user_ty: None,\n-            literal: tcx.intern_lazy_const(ty::LazyConst::Evaluated(\n+            literal: tcx.mk_lazy_const(ty::LazyConst::Evaluated(\n                 ty::Const::zero_sized(func_ty),\n             )),\n         });\n@@ -521,7 +521,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n             span: self.span,\n             ty: self.tcx.types.usize,\n             user_ty: None,\n-            literal: self.tcx.intern_lazy_const(ty::LazyConst::Evaluated(\n+            literal: self.tcx.mk_lazy_const(ty::LazyConst::Evaluated(\n                 ty::Const::from_usize(self.tcx, value),\n             )),\n         }\n@@ -759,7 +759,7 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 span,\n                 ty,\n                 user_ty: None,\n-                literal: tcx.intern_lazy_const(ty::LazyConst::Evaluated(\n+                literal: tcx.mk_lazy_const(ty::LazyConst::Evaluated(\n                     ty::Const::zero_sized(ty)\n                 )),\n              }),"}, {"sha": "9b75a70ff41d221d5083c2710d9404b1d3b4b2eb", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=f2871a9ce552cd21b1c7b8df69eefe06af6d59da", "patch": "@@ -533,7 +533,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             span,\n             ty: self.tcx.types.bool,\n             user_ty: None,\n-            literal: self.tcx.intern_lazy_const(ty::LazyConst::Evaluated(\n+            literal: self.tcx.mk_lazy_const(ty::LazyConst::Evaluated(\n                 ty::Const::from_bool(self.tcx, val),\n             )),\n         })))"}, {"sha": "2a1188ed870ba4f5315e3f284da176402e8925af", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=f2871a9ce552cd21b1c7b8df69eefe06af6d59da", "patch": "@@ -198,7 +198,7 @@ impl<'a, 'tcx> TransformVisitor<'a, 'tcx> {\n             span: source_info.span,\n             ty: self.tcx.types.u32,\n             user_ty: None,\n-            literal: self.tcx.intern_lazy_const(ty::LazyConst::Evaluated(ty::Const::from_bits(\n+            literal: self.tcx.mk_lazy_const(ty::LazyConst::Evaluated(ty::Const::from_bits(\n                 self.tcx,\n                 state_disc.into(),\n                 ty::ParamEnv::empty().and(self.tcx.types.u32)\n@@ -731,7 +731,7 @@ fn insert_panic_block<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             span: mir.span,\n             ty: tcx.types.bool,\n             user_ty: None,\n-            literal: tcx.intern_lazy_const(ty::LazyConst::Evaluated(\n+            literal: tcx.mk_lazy_const(ty::LazyConst::Evaluated(\n                 ty::Const::from_bool(tcx, false),\n             )),\n         }),"}, {"sha": "eedc42927c12687568e2e77cd8656bd70b584d85", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=f2871a9ce552cd21b1c7b8df69eefe06af6d59da", "patch": "@@ -963,7 +963,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n             span: self.source_info.span,\n             ty: self.tcx().types.usize,\n             user_ty: None,\n-            literal: self.tcx().intern_lazy_const(ty::LazyConst::Evaluated(\n+            literal: self.tcx().mk_lazy_const(ty::LazyConst::Evaluated(\n                 ty::Const::from_usize(self.tcx(), val.into())\n             )),\n         })"}, {"sha": "757385aeb3edc8f0934e4fde066764c6ea539f66", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=f2871a9ce552cd21b1c7b8df69eefe06af6d59da", "patch": "@@ -1793,7 +1793,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 let length_def_id = tcx.hir().local_def_id(length.id);\n                 let substs = Substs::identity_for_item(tcx, length_def_id);\n                 let length = ty::LazyConst::Unevaluated(length_def_id, substs);\n-                let length = tcx.intern_lazy_const(length);\n+                let length = tcx.mk_lazy_const(length);\n                 let array_ty = tcx.mk_ty(ty::Array(self.ast_ty_to_ty(&ty), length));\n                 self.normalize_ty(ast_ty.span, array_ty)\n             }"}, {"sha": "fb8f608812197b15b01af61a6b40ea6d508e9599", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2871a9ce552cd21b1c7b8df69eefe06af6d59da/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f2871a9ce552cd21b1c7b8df69eefe06af6d59da", "patch": "@@ -4597,7 +4597,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if element_ty.references_error() {\n                     tcx.types.err\n                 } else if let Ok(count) = count {\n-                    tcx.mk_ty(ty::Array(t, tcx.intern_lazy_const(ty::LazyConst::Evaluated(count))))\n+                    tcx.mk_ty(ty::Array(t, tcx.mk_lazy_const(ty::LazyConst::Evaluated(count))))\n                 } else {\n                     tcx.types.err\n                 }"}]}