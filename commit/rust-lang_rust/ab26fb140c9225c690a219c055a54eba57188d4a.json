{"sha": "ab26fb140c9225c690a219c055a54eba57188d4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMjZmYjE0MGM5MjI1YzY5MGEyMTljMDU1YTU0ZWJhNTcxODhkNGE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-05-26T20:21:10Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-09-18T19:23:01Z"}, "message": "perf: only calculate conflicts for candidates", "tree": {"sha": "672e51f04d694933f59feb2d7c7c2b67189a6dc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/672e51f04d694933f59feb2d7c7c2b67189a6dc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab26fb140c9225c690a219c055a54eba57188d4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab26fb140c9225c690a219c055a54eba57188d4a", "html_url": "https://github.com/rust-lang/rust/commit/ab26fb140c9225c690a219c055a54eba57188d4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab26fb140c9225c690a219c055a54eba57188d4a/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "665a98d21f926fbd8a89fe2af7c448ff34deadc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/665a98d21f926fbd8a89fe2af7c448ff34deadc3", "html_url": "https://github.com/rust-lang/rust/commit/665a98d21f926fbd8a89fe2af7c448ff34deadc3"}], "stats": {"total": 51, "additions": 39, "deletions": 12}, "files": [{"sha": "d22c11f491b402054aac6125a80b81ae7a4c0e4d", "filename": "compiler/rustc_mir/src/transform/dest_prop.rs", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ab26fb140c9225c690a219c055a54eba57188d4a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab26fb140c9225c690a219c055a54eba57188d4a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs?ref=ab26fb140c9225c690a219c055a54eba57188d4a", "patch": "@@ -124,9 +124,22 @@ impl<'tcx> MirPass<'tcx> for DestinationPropagation {\n             return;\n         }\n \n-        let mut conflicts = Conflicts::build(tcx, body, source);\n+        let candidates = find_candidates(tcx, body);\n+        if candidates.is_empty() {\n+            debug!(\"{:?}: no dest prop candidates, done\", source.def_id());\n+            return;\n+        }\n+\n+        // Collect all locals we care about. We only compute conflicts for these to save time.\n+        let mut relevant_locals = BitSet::new_empty(body.local_decls.len());\n+        for CandidateAssignment { dest, src, loc: _ } in &candidates {\n+            relevant_locals.insert(dest.local);\n+            relevant_locals.insert(*src);\n+        }\n+\n+        let mut conflicts = Conflicts::build(tcx, body, source, &relevant_locals);\n         let mut replacements = Replacements::new(body.local_decls.len());\n-        for candidate @ CandidateAssignment { dest, src, loc } in find_candidates(tcx, body) {\n+        for candidate @ CandidateAssignment { dest, src, loc } in candidates {\n             // Merge locals that don't conflict.\n             if conflicts.contains(dest.local, src) {\n                 debug!(\"at assignment {:?}, conflict {:?} vs. {:?}\", loc, dest.local, src);\n@@ -370,16 +383,30 @@ struct Conflicts {\n }\n \n impl Conflicts {\n-    fn build<'tcx>(tcx: TyCtxt<'tcx>, body: &'_ Body<'tcx>, source: MirSource<'tcx>) -> Self {\n-        // We don't have to look out for locals that have their address taken, since `find_candidates`\n-        // already takes care of that.\n+    fn build<'tcx>(\n+        tcx: TyCtxt<'tcx>,\n+        body: &'_ Body<'tcx>,\n+        source: MirSource<'tcx>,\n+        relevant_locals: &BitSet<Local>,\n+    ) -> Self {\n+        // We don't have to look out for locals that have their address taken, since\n+        // `find_candidates` already takes care of that.\n+\n+        debug!(\n+            \"Conflicts::build: {}/{} locals relevant\",\n+            relevant_locals.count(),\n+            body.local_decls.len()\n+        );\n \n         let mut conflicts = BitMatrix::from_row_n(\n             &BitSet::new_empty(body.local_decls.len()),\n             body.local_decls.len(),\n         );\n \n-        let mut record_conflicts = |new_conflicts: &BitSet<_>| {\n+        let mut record_conflicts = |new_conflicts: &mut BitSet<_>| {\n+            // Remove all locals that are not candidates.\n+            new_conflicts.intersect(relevant_locals);\n+\n             for local in new_conflicts.iter() {\n                 conflicts.union_row_with(&new_conflicts, local);\n             }\n@@ -449,7 +476,7 @@ impl Conflicts {\n             },\n         );\n \n-        let mut relevant_locals = Vec::new();\n+        let mut live_and_init_locals = Vec::new();\n \n         // Visit only reachable basic blocks. The exact order is not important.\n         for (block, data) in traversal::preorder(body) {\n@@ -462,7 +489,7 @@ impl Conflicts {\n             // that, we first collect in the `MaybeInitializedLocals` results in a forwards\n             // traversal.\n \n-            relevant_locals.resize_with(data.statements.len() + 1, || {\n+            live_and_init_locals.resize_with(data.statements.len() + 1, || {\n                 BitSet::new_empty(body.local_decls.len())\n             });\n \n@@ -471,19 +498,19 @@ impl Conflicts {\n                 let loc = Location { block, statement_index };\n                 init.seek_before_primary_effect(loc);\n \n-                relevant_locals[statement_index].clone_from(init.get());\n+                live_and_init_locals[statement_index].clone_from(init.get());\n             }\n \n             // Now, go backwards and union with the liveness results.\n             for statement_index in (0..=data.statements.len()).rev() {\n                 let loc = Location { block, statement_index };\n                 live.seek_after_primary_effect(loc);\n \n-                relevant_locals[statement_index].intersect(live.get());\n+                live_and_init_locals[statement_index].intersect(live.get());\n \n                 trace!(\"record conflicts at {:?}\", loc);\n \n-                record_conflicts(&relevant_locals[statement_index]);\n+                record_conflicts(&mut live_and_init_locals[statement_index]);\n             }\n \n             init.seek_to_block_end(block);\n@@ -492,7 +519,7 @@ impl Conflicts {\n             conflicts.intersect(live.get());\n             trace!(\"record conflicts at end of {:?}\", block);\n \n-            record_conflicts(&conflicts);\n+            record_conflicts(&mut conflicts);\n         }\n \n         Self { matrix: conflicts, unify_cache: BitSet::new_empty(body.local_decls.len()) }"}]}