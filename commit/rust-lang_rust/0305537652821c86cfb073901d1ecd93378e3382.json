{"sha": "0305537652821c86cfb073901d1ecd93378e3382", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMDU1Mzc2NTI4MjFjODZjZmIwNzM5MDFkMWVjZDkzMzc4ZTMzODI=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-28T21:00:01Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-31T20:04:23Z"}, "message": "librustc_metadata: use bug!(), span_bug!()", "tree": {"sha": "aeb0cd8ba052df53a48957eb19afd670bd817fa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeb0cd8ba052df53a48957eb19afd670bd817fa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0305537652821c86cfb073901d1ecd93378e3382", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0305537652821c86cfb073901d1ecd93378e3382", "html_url": "https://github.com/rust-lang/rust/commit/0305537652821c86cfb073901d1ecd93378e3382", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0305537652821c86cfb073901d1ecd93378e3382/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad", "html_url": "https://github.com/rust-lang/rust/commit/8aaf6eee2fee2ffd6d8eeba1542916fcbd7c6dad"}], "stats": {"total": 136, "additions": 62, "deletions": 74}, "files": [{"sha": "505619d31d735700c355bdc6a4df8818b72ded10", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0305537652821c86cfb073901d1ecd93378e3382/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0305537652821c86cfb073901d1ecd93378e3382/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=0305537652821c86cfb073901d1ecd93378e3382", "patch": "@@ -991,7 +991,7 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                         region: this.read_enum_variant_arg(1,\n                                     |this| Ok(this.read_region(dcx))).unwrap()\n                     }),\n-                    _ => panic!(\"bad enum variant for ty::UpvarCapture\")\n+                    _ => bug!(\"bad enum variant for ty::UpvarCapture\")\n                 })\n             })\n         }).unwrap()\n@@ -1013,7 +1013,7 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n \n                         adjustment::AdjustDerefRef(auto_deref_ref)\n                     }\n-                    _ => panic!(\"bad enum variant for adjustment::AutoAdjustment\")\n+                    _ => bug!(\"bad enum variant for adjustment::AutoAdjustment\")\n                 })\n             })\n         }).unwrap()\n@@ -1072,7 +1072,7 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n \n                         adjustment::AutoUnsafe(m)\n                     }\n-                    _ => panic!(\"bad enum variant for adjustment::AutoRef\")\n+                    _ => bug!(\"bad enum variant for adjustment::AutoRef\")\n                 })\n             })\n         }).unwrap()\n@@ -1140,9 +1140,7 @@ fn decode_side_tables(dcx: &DecodeContext,\n         let decoded_tag: Option<c::astencode_tag> = c::astencode_tag::from_u32(tag);\n         match decoded_tag {\n             None => {\n-                dcx.tcx.sess.bug(\n-                    &format!(\"unknown tag found in side tables: {:x}\",\n-                            tag));\n+                bug!(\"unknown tag found in side tables: {:x}\", tag);\n             }\n             Some(value) => {\n                 let val_dsr = &mut entry_dsr;\n@@ -1206,9 +1204,7 @@ fn decode_side_tables(dcx: &DecodeContext,\n                         dcx.tcx.const_qualif_map.borrow_mut().insert(id, qualif);\n                     }\n                     _ => {\n-                        dcx.tcx.sess.bug(\n-                            &format!(\"unknown tag found in side tables: {:x}\",\n-                                    tag));\n+                        bug!(\"unknown tag found in side tables: {:x}\", tag);\n                     }\n                 }\n             }\n@@ -1404,6 +1400,6 @@ fn test_simplification() {\n         assert!(pprust::item_to_string(&item_out) ==\n                 pprust::item_to_string(&item_exp));\n       }\n-      _ => panic!()\n+      _ => bug!()\n     }\n }"}, {"sha": "edabf43a15074f14ceb3a9f69a367c1fe9131221", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0305537652821c86cfb073901d1ecd93378e3382/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0305537652821c86cfb073901d1ecd93378e3382/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=0305537652821c86cfb073901d1ecd93378e3382", "patch": "@@ -36,7 +36,6 @@ use syntax::codemap::{self, Span, mk_sp, Pos};\n use syntax::parse;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n-use syntax::errors::FatalError;\n use syntax::parse::token::InternedString;\n use rustc_front::intravisit::Visitor;\n use rustc_front::hir;\n@@ -527,7 +526,7 @@ impl<'a> CrateReader<'a> {\n                 load_ctxt.filesearch = self.sess.target_filesearch(PathKind::Crate);\n                 load_ctxt.load_library_crate()\n             }\n-            None => { load_ctxt.report_load_errs(); unreachable!() },\n+            None => { load_ctxt.report_load_errs(); },\n         };\n \n         let dylib = library.dylib.clone();\n@@ -573,7 +572,8 @@ impl<'a> CrateReader<'a> {\n                     Ok(body) => body,\n                     Err(mut err) => {\n                         err.emit();\n-                        panic!(FatalError);\n+                        self.sess.abort_if_errors();\n+                        unreachable!();\n                     }\n                 };\n                 let local_span = mk_sp(lo, p.last_span.hi);"}, {"sha": "e85fdb05ca890409579853109d99001bd3d5f65b", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 30, "deletions": 34, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/0305537652821c86cfb073901d1ecd93378e3382/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0305537652821c86cfb073901d1ecd93378e3382/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=0305537652821c86cfb073901d1ecd93378e3382", "patch": "@@ -70,7 +70,7 @@ impl crate_metadata {\n \n     fn lookup_item(&self, item_id: DefIndex) -> rbml::Doc {\n         match self.get_item(item_id) {\n-            None => panic!(\"lookup_item: id not found: {:?}\", item_id),\n+            None => bug!(\"lookup_item: id not found: {:?}\", item_id),\n             Some(d) => d\n         }\n     }\n@@ -136,7 +136,7 @@ fn item_family(item: rbml::Doc) -> Family {\n       'u' => Struct(VariantKind::Unit),\n       'g' => PublicField,\n       'N' => InheritedField,\n-       c => panic!(\"unexpected family char: {}\", c)\n+       c => bug!(\"unexpected family char: {}\", c)\n     }\n }\n \n@@ -147,7 +147,7 @@ fn item_visibility(item: rbml::Doc) -> hir::Visibility {\n             match reader::doc_as_u8(visibility_doc) as char {\n                 'y' => hir::Public,\n                 'i' => hir::Inherited,\n-                _ => panic!(\"unknown visibility character\")\n+                _ => bug!(\"unknown visibility character\")\n             }\n         }\n     }\n@@ -160,7 +160,7 @@ fn fn_constness(item: rbml::Doc) -> hir::Constness {\n             match reader::doc_as_u8(constness_doc) as char {\n                 'c' => hir::Constness::Const,\n                 'n' => hir::Constness::NotConst,\n-                _ => panic!(\"unknown constness character\")\n+                _ => bug!(\"unknown constness character\")\n             }\n         }\n     }\n@@ -173,7 +173,7 @@ fn item_defaultness(item: rbml::Doc) -> hir::Defaultness {\n             match reader::doc_as_u8(defaultness_doc) as char {\n                 'd' => hir::Defaultness::Default,\n                 'f' => hir::Defaultness::Final,\n-                _ => panic!(\"unknown defaultness character\")\n+                _ => bug!(\"unknown defaultness character\")\n             }\n         }\n     }\n@@ -387,16 +387,15 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n                          item_id: DefIndex,\n                          tcx: &TyCtxt<'tcx>) -> ty::AdtDefMaster<'tcx>\n {\n-    fn expect_variant_kind<'tcx>(family: Family, tcx: &TyCtxt<'tcx>) -> ty::VariantKind {\n+    fn expect_variant_kind(family: Family) -> ty::VariantKind {\n         match family_to_variant_kind(family) {\n             Some(kind) => kind,\n-            _ => tcx.sess.bug(&format!(\"unexpected family: {:?}\", family)),\n+            _ => bug!(\"unexpected family: {:?}\", family),\n         }\n     }\n     fn get_enum_variants<'tcx>(intr: &IdentInterner,\n                                cdata: Cmd,\n-                               doc: rbml::Doc,\n-                               tcx: &TyCtxt<'tcx>) -> Vec<ty::VariantDefData<'tcx, 'tcx>> {\n+                               doc: rbml::Doc) -> Vec<ty::VariantDefData<'tcx, 'tcx>> {\n         let mut disr_val = 0;\n         reader::tagged_docs(doc, tag_items_data_item_variant).map(|p| {\n             let did = translated_def_id(cdata, p);\n@@ -411,22 +410,21 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n             ty::VariantDefData {\n                 did: did,\n                 name: item_name(intr, item),\n-                fields: get_variant_fields(intr, cdata, item, tcx),\n+                fields: get_variant_fields(intr, cdata, item),\n                 disr_val: ConstInt::Infer(disr),\n-                kind: expect_variant_kind(item_family(item), tcx),\n+                kind: expect_variant_kind(item_family(item)),\n             }\n         }).collect()\n     }\n     fn get_variant_fields<'tcx>(intr: &IdentInterner,\n                                 cdata: Cmd,\n-                                doc: rbml::Doc,\n-                                tcx: &TyCtxt<'tcx>) -> Vec<ty::FieldDefData<'tcx, 'tcx>> {\n+                                doc: rbml::Doc) -> Vec<ty::FieldDefData<'tcx, 'tcx>> {\n         let mut index = 0;\n         reader::tagged_docs(doc, tag_item_field).map(|f| {\n             let ff = item_family(f);\n             match ff {\n                 PublicField | InheritedField => {},\n-                _ => tcx.sess.bug(&format!(\"expected field, found {:?}\", ff))\n+                _ => bug!(\"expected field, found {:?}\", ff)\n             };\n             ty::FieldDefData::new(item_def_id(f, cdata),\n                                   item_name(intr, f),\n@@ -442,14 +440,13 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n     fn get_struct_variant<'tcx>(intr: &IdentInterner,\n                                 cdata: Cmd,\n                                 doc: rbml::Doc,\n-                                did: DefId,\n-                                tcx: &TyCtxt<'tcx>) -> ty::VariantDefData<'tcx, 'tcx> {\n+                                did: DefId) -> ty::VariantDefData<'tcx, 'tcx> {\n         ty::VariantDefData {\n             did: did,\n             name: item_name(intr, doc),\n-            fields: get_variant_fields(intr, cdata, doc, tcx),\n+            fields: get_variant_fields(intr, cdata, doc),\n             disr_val: ConstInt::Infer(0),\n-            kind: expect_variant_kind(item_family(doc), tcx),\n+            kind: expect_variant_kind(item_family(doc)),\n         }\n     }\n \n@@ -458,18 +455,17 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n     let (kind, variants) = match item_family(doc) {\n         Enum => {\n             (ty::AdtKind::Enum,\n-             get_enum_variants(intr, cdata, doc, tcx))\n+             get_enum_variants(intr, cdata, doc))\n         }\n         Struct(..) => {\n             let ctor_did =\n                 reader::maybe_get_doc(doc, tag_items_data_item_struct_ctor).\n                 map_or(did, |ctor_doc| translated_def_id(cdata, ctor_doc));\n             (ty::AdtKind::Struct,\n-             vec![get_struct_variant(intr, cdata, doc, ctor_did, tcx)])\n+             vec![get_struct_variant(intr, cdata, doc, ctor_did)])\n         }\n-        _ => tcx.sess.bug(\n-            &format!(\"get_adt_def called on a non-ADT {:?} - {:?}\",\n-                     item_family(doc), did))\n+        _ => bug!(\"get_adt_def called on a non-ADT {:?} - {:?}\",\n+                  item_family(doc), did)\n     };\n \n     let adt = tcx.intern_adt_def(did, kind, variants);\n@@ -495,7 +491,7 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n                     assert!(!inputs.has_escaping_regions());\n                     inputs\n                 },\n-                _ => tcx.sess.bug(\"tuple-variant ctor is not an ADT\")\n+                _ => bug!(\"tuple-variant ctor is not an ADT\")\n             };\n             for (field, &ty) in variant.fields.iter().zip(field_tys.iter()) {\n                 field.fulfill_ty(ty);\n@@ -915,7 +911,7 @@ fn get_explicit_self(item: rbml::Doc) -> ty::ExplicitSelfCategory {\n         match ch as char {\n             'i' => hir::MutImmutable,\n             'm' => hir::MutMutable,\n-            _ => panic!(\"unknown mutability character: `{}`\", ch as char),\n+            _ => bug!(\"unknown mutability character: `{}`\", ch as char),\n         }\n     }\n \n@@ -933,7 +929,7 @@ fn get_explicit_self(item: rbml::Doc) -> ty::ExplicitSelfCategory {\n                 ty::ReEmpty,\n                 get_mutability(string.as_bytes()[1]))\n         }\n-        _ => panic!(\"unknown self type code: `{}`\", explicit_self_kind as char)\n+        _ => bug!(\"unknown self type code: `{}`\", explicit_self_kind as char)\n     }\n }\n \n@@ -946,7 +942,7 @@ pub fn get_impl_items(cdata: Cmd, impl_id: DefIndex)\n             Some('C') | Some('c') => ty::ConstTraitItemId(def_id),\n             Some('r') | Some('p') => ty::MethodTraitItemId(def_id),\n             Some('t') => ty::TypeTraitItemId(def_id),\n-            _ => panic!(\"unknown impl item sort\"),\n+            _ => bug!(\"unknown impl item sort\"),\n         }\n     }).collect()\n }\n@@ -1012,9 +1008,9 @@ pub fn get_impl_or_trait_item<'tcx>(intr: Rc<IdentInterner>,\n             let ity = tcx.lookup_item_type(def_id).ty;\n             let fty = match ity.sty {\n                 ty::TyFnDef(_, _, fty) => fty.clone(),\n-                _ => tcx.sess.bug(&format!(\n+                _ => bug!(\n                     \"the type {:?} of the method {:?} is not a function?\",\n-                    ity, name))\n+                    ity, name)\n             };\n             let explicit_self = get_explicit_self(item_doc);\n \n@@ -1052,7 +1048,7 @@ pub fn get_trait_item_def_ids(cdata: Cmd, id: DefIndex)\n             Some('C') | Some('c') => ty::ConstTraitItemId(def_id),\n             Some('r') | Some('p') => ty::MethodTraitItemId(def_id),\n             Some('t') => ty::TypeTraitItemId(def_id),\n-            _ => panic!(\"unknown trait item sort\"),\n+            _ => bug!(\"unknown trait item sort\"),\n         }\n     }).collect()\n }\n@@ -1172,7 +1168,7 @@ fn struct_field_family_to_visibility(family: Family) -> hir::Visibility {\n     match family {\n       PublicField => hir::Public,\n       InheritedField => hir::Inherited,\n-      _ => panic!()\n+      _ => bug!()\n     }\n }\n \n@@ -1354,7 +1350,7 @@ pub fn translate_def_id(cdata: Cmd, did: DefId) -> DefId {\n                 index: did.index,\n             }\n         }\n-        None => panic!(\"didn't find a crate in the cnum_map\")\n+        None => bug!(\"didn't find a crate in the cnum_map\")\n     }\n }\n \n@@ -1544,7 +1540,7 @@ pub fn get_dylib_dependency_formats(cdata: Cmd)\n         let cnum: ast::CrateNum = cnum.parse().unwrap();\n         let cnum = match cdata.cnum_map.borrow().get(&cnum) {\n             Some(&n) => n,\n-            None => panic!(\"didn't find a crate in the cnum_map\")\n+            None => bug!(\"didn't find a crate in the cnum_map\")\n         };\n         result.push((cnum, if link == \"d\" {\n             LinkagePreference::RequireDynamic\n@@ -1772,7 +1768,7 @@ pub fn def_key(cdata: Cmd, id: DefIndex) -> hir_map::DefKey {\n             hir_map::DefKey::decode(&mut decoder).unwrap()\n         }\n         None => {\n-            panic!(\"failed to find block with tag {:?} for item with family {:?}\",\n+            bug!(\"failed to find block with tag {:?} for item with family {:?}\",\n                    tag_def_key,\n                    item_family(item_doc))\n         }"}, {"sha": "30eabb7e8f396fc0c4b5479b2cd9525a9edcdbf2", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0305537652821c86cfb073901d1ecd93378e3382/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0305537652821c86cfb073901d1ecd93378e3382/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=0305537652821c86cfb073901d1ecd93378e3382", "patch": "@@ -217,7 +217,7 @@ fn encode_symbol(ecx: &EncodeContext,\n             rbml_w.wr_tagged_str(tag_items_data_item_symbol, x);\n         }\n         None => {\n-            ecx.diag.bug(&format!(\"encode_symbol: id not found {}\", id));\n+            bug!(\"encode_symbol: id not found {}\", id);\n         }\n     }\n }"}, {"sha": "c927f53eccd6f45863c210f1a594bca53a53d460", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0305537652821c86cfb073901d1ecd93378e3382/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0305537652821c86cfb073901d1ecd93378e3382/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=0305537652821c86cfb073901d1ecd93378e3382", "patch": "@@ -33,6 +33,7 @@ extern crate flate;\n extern crate rbml;\n extern crate serialize;\n \n+#[macro_use]\n extern crate rustc;\n extern crate rustc_back;\n extern crate rustc_front;"}, {"sha": "87e86e221f18e0f213e8f2aeb46265195e3a761a", "filename": "src/librustc_metadata/loader.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0305537652821c86cfb073901d1ecd93378e3382/src%2Flibrustc_metadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0305537652821c86cfb073901d1ecd93378e3382/src%2Flibrustc_metadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Floader.rs?ref=0305537652821c86cfb073901d1ecd93378e3382", "patch": "@@ -300,16 +300,10 @@ impl<'a> Context<'a> {\n     }\n \n     pub fn load_library_crate(&mut self) -> Library {\n-        match self.find_library_crate() {\n-            Some(t) => t,\n-            None => {\n-                self.report_load_errs();\n-                unreachable!()\n-            }\n-        }\n+        self.find_library_crate().unwrap_or_else(|| self.report_load_errs())\n     }\n \n-    pub fn report_load_errs(&mut self) {\n+    pub fn report_load_errs(&mut self) -> ! {\n         let add = match self.root {\n             &None => String::new(),\n             &Some(ref r) => format!(\" which `{}` depends on\",\n@@ -374,6 +368,7 @@ impl<'a> Context<'a> {\n \n         err.emit();\n         self.sess.abort_if_errors();\n+        unreachable!();\n     }\n \n     fn find_library_crate(&mut self) -> Option<Library> {"}, {"sha": "28985c75a912d60aa0a3ae5869367b2a5a50f97d", "filename": "src/librustc_metadata/tydecode.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0305537652821c86cfb073901d1ecd93378e3382/src%2Flibrustc_metadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0305537652821c86cfb073901d1ecd93378e3382/src%2Flibrustc_metadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftydecode.rs?ref=0305537652821c86cfb073901d1ecd93378e3382", "patch": "@@ -167,7 +167,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n                 ty::BrFresh(id)\n             }\n             'e' => ty::BrEnv,\n-            _ => panic!(\"parse_bound_region: bad input\")\n+            _ => bug!(\"parse_bound_region: bad input\")\n         }\n     }\n \n@@ -214,7 +214,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n             'e' => {\n                 ty::ReStatic\n             }\n-            _ => panic!(\"parse_region: bad input\")\n+            _ => bug!(\"parse_region: bad input\")\n         }\n     }\n \n@@ -266,7 +266,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n                 };\n                 region::CodeExtentData::Remainder(block_remainder)\n             }\n-            _ => panic!(\"parse_scope: bad input\")\n+            _ => bug!(\"parse_scope: bad input\")\n         })\n     }\n \n@@ -276,7 +276,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n         match self.next() {\n             'n' => None,\n             's' => Some(f(self)),\n-            _ => panic!(\"parse_opt: bad input\")\n+            _ => bug!(\"parse_opt: bad input\")\n         }\n     }\n \n@@ -315,7 +315,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n                     'D' => return tcx.types.i64,\n                     'f' => return tcx.types.f32,\n                     'F' => return tcx.types.f64,\n-                    _ => panic!(\"parse_ty: bad numeric type\")\n+                    _ => bug!(\"parse_ty: bad numeric type\")\n                 }\n             }\n             'c' => return tcx.types.char,\n@@ -441,7 +441,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n             'e' => {\n                 return tcx.types.err;\n             }\n-            c => { panic!(\"unexpected char in type string: {}\", c);}\n+            c => { bug!(\"unexpected char in type string: {}\", c);}\n         }\n     }\n \n@@ -523,7 +523,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n         let variadic = match self.next() {\n             'V' => true,\n             'N' => false,\n-            r => panic!(format!(\"bad variadic: {}\", r)),\n+            r => bug!(\"bad variadic: {}\", r),\n         };\n         let output = match self.peek() {\n             'z' => {\n@@ -553,7 +553,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n                 assert_eq!(self.next(), '|');\n                 ty::Predicate::ObjectSafe(def_id)\n             }\n-            c => panic!(\"Encountered invalid character in metadata: {}\", c)\n+            c => bug!(\"Encountered invalid character in metadata: {}\", c)\n         }\n     }\n \n@@ -602,7 +602,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n                 'R' => bounds.push(self.parse_region()),\n                 '.' => { break; }\n                 c => {\n-                    panic!(\"parse_region_param_def: bad bounds ('{}')\", c)\n+                    bug!(\"parse_region_param_def: bad bounds ('{}')\", c)\n                 }\n             }\n         }\n@@ -624,7 +624,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n                 let region = self.parse_region();\n                 ty::ObjectLifetimeDefault::Specific(region)\n             }\n-            _ => panic!(\"parse_object_lifetime_default: bad input\")\n+            _ => bug!(\"parse_object_lifetime_default: bad input\")\n         }\n     }\n \n@@ -640,7 +640,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n                 }\n                 '.' => { break; }\n                 c => {\n-                    panic!(\"parse_bounds: bad bounds ('{}')\", c)\n+                    bug!(\"parse_bounds: bad bounds ('{}')\", c)\n                 }\n             }\n         }\n@@ -669,7 +669,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n                     return builtin_bounds;\n                 }\n                 c => {\n-                    panic!(\"parse_bounds: bad builtin bounds ('{}')\", c)\n+                    bug!(\"parse_bounds: bad builtin bounds ('{}')\", c)\n                 }\n             }\n         }\n@@ -683,7 +683,7 @@ fn parse_defid(buf: &[u8]) -> DefId {\n     while colon_idx < len && buf[colon_idx] != ':' as u8 { colon_idx += 1; }\n     if colon_idx == len {\n         error!(\"didn't find ':' when parsing def id\");\n-        panic!();\n+        bug!();\n     }\n \n     let crate_part = &buf[0..colon_idx];\n@@ -693,14 +693,14 @@ fn parse_defid(buf: &[u8]) -> DefId {\n         s.parse::<usize>().ok()\n     }) {\n         Some(cn) => cn as ast::CrateNum,\n-        None => panic!(\"internal error: parse_defid: crate number expected, found {:?}\",\n+        None => bug!(\"internal error: parse_defid: crate number expected, found {:?}\",\n                        crate_part)\n     };\n     let def_num = match str::from_utf8(def_part).ok().and_then(|s| {\n         s.parse::<usize>().ok()\n     }) {\n         Some(dn) => dn,\n-        None => panic!(\"internal error: parse_defid: id expected, found {:?}\",\n+        None => bug!(\"internal error: parse_defid: id expected, found {:?}\",\n                        def_part)\n     };\n     let index = DefIndex::new(def_num);\n@@ -711,6 +711,6 @@ fn parse_unsafety(c: char) -> hir::Unsafety {\n     match c {\n         'u' => hir::Unsafety::Unsafe,\n         'n' => hir::Unsafety::Normal,\n-        _ => panic!(\"parse_unsafety: bad unsafety {}\", c)\n+        _ => bug!(\"parse_unsafety: bad unsafety {}\", c)\n     }\n }"}, {"sha": "ffaf7e2d465dba5ea73acab31336c0bc284d288c", "filename": "src/librustc_metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0305537652821c86cfb073901d1ecd93378e3382/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0305537652821c86cfb073901d1ecd93378e3382/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=0305537652821c86cfb073901d1ecd93378e3382", "patch": "@@ -146,7 +146,7 @@ pub fn enc_ty<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx\n             enc_bare_fn_ty(w, cx, f);\n         }\n         ty::TyInfer(_) => {\n-            cx.diag.bug(\"cannot encode inference variable types\");\n+            bug!(\"cannot encode inference variable types\");\n         }\n         ty::TyParam(ParamTy {space, idx, name}) => {\n             write!(w, \"p[{}|{}|{}]\", idx, space.to_uint(), name);\n@@ -285,7 +285,7 @@ pub fn enc_region(w: &mut Cursor<Vec<u8>>, cx: &ctxt, r: ty::Region) {\n         }\n         ty::ReVar(_) | ty::ReSkolemized(..) => {\n             // these should not crop up after typeck\n-            cx.diag.bug(\"cannot encode region variables\");\n+            bug!(\"cannot encode region variables\");\n         }\n     }\n }"}]}