{"sha": "6d42db2e51e223c9be7b6ea234521ca6f93ee95a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNDJkYjJlNTFlMjIzYzliZTdiNmVhMjM0NTIxY2E2ZjkzZWU5NWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-22T15:52:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-22T15:52:25Z"}, "message": "Merge #2358\n\n2358: Hide data from public API r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "895e5bb04a4a632b4069bf66f8c7770cfa80a90d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/895e5bb04a4a632b4069bf66f8c7770cfa80a90d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d42db2e51e223c9be7b6ea234521ca6f93ee95a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2AQ5CRBK7hj4Ov3rIwAAdHIIAHwAl9gyYhwcS+zByuVJ2Oyo\naYiPwQtZrOMo10f98RyOrtlfGOLIQCpGVV2AL1nKw3mcOgficXAzYOHKjfMXcTst\ni1TCM4oBDjlJKCenET0VBUG3TjiTgPKB2/qU8NtauCs3Fhsp0mdHQTjC4sr1XPSo\nzDqQnBND40EmShYh6OCRdgV240Bz6mmVSwU6vRQF6PIfDxbXS8ZZFIeohPlPBolR\nx0NhxLL47Q1DBDrXPqK8px6HeSUMkDQyXntMuMiigcdpkzs3hn3kfVb3KEp0sBTd\nndDU6uilDkKvejdXRgIPy9MCEy+CVIBFklLoLxC8OAgrb7HVHDtIL13YBGbm0PQ=\n=mR5p\n-----END PGP SIGNATURE-----\n", "payload": "tree 895e5bb04a4a632b4069bf66f8c7770cfa80a90d\nparent b841c53a0c93cdca3f08b1c917c9fa8a63d31604\nparent fe119fef2746bade402fb73dcba8cde49779654d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574437945 +0000\ncommitter GitHub <noreply@github.com> 1574437945 +0000\n\nMerge #2358\n\n2358: Hide data from public API r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d42db2e51e223c9be7b6ea234521ca6f93ee95a", "html_url": "https://github.com/rust-lang/rust/commit/6d42db2e51e223c9be7b6ea234521ca6f93ee95a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d42db2e51e223c9be7b6ea234521ca6f93ee95a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b841c53a0c93cdca3f08b1c917c9fa8a63d31604", "url": "https://api.github.com/repos/rust-lang/rust/commits/b841c53a0c93cdca3f08b1c917c9fa8a63d31604", "html_url": "https://github.com/rust-lang/rust/commit/b841c53a0c93cdca3f08b1c917c9fa8a63d31604"}, {"sha": "fe119fef2746bade402fb73dcba8cde49779654d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe119fef2746bade402fb73dcba8cde49779654d", "html_url": "https://github.com/rust-lang/rust/commit/fe119fef2746bade402fb73dcba8cde49779654d"}], "stats": {"total": 144, "additions": 61, "deletions": 83}, "files": [{"sha": "af07b2c4ddc4e1658f0873da5e0c48767d478ae8", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 3, "deletions": 50, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/6d42db2e51e223c9be7b6ea234521ca6f93ee95a/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d42db2e51e223c9be7b6ea234521ca6f93ee95a/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=6d42db2e51e223c9be7b6ea234521ca6f93ee95a", "patch": "@@ -22,10 +22,10 @@ use hir_expand::{\n     name::{self, AsName},\n };\n use ra_db::{CrateId, Edition};\n-use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n+use ra_syntax::ast;\n \n use crate::{\n-    db::{AstDatabase, DefDatabase, HirDatabase},\n+    db::{DefDatabase, HirDatabase},\n     expr::{BindingAnnotation, Body, BodySourceMap, ExprValidator, Pat, PatId},\n     ids::{\n         AstItemDef, ConstId, EnumId, FunctionId, MacroDefId, StaticId, StructId, TraitId,\n@@ -644,12 +644,8 @@ impl Const {\n         Some(self.module(db).krate())\n     }\n \n-    pub fn data(self, db: &impl HirDatabase) -> Arc<ConstData> {\n-        db.const_data(self)\n-    }\n-\n     pub fn name(self, db: &impl HirDatabase) -> Option<Name> {\n-        self.data(db).name().cloned()\n+        db.const_data(self.id).name.clone()\n     }\n \n     pub fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n@@ -681,45 +677,6 @@ impl Const {\n     }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct ConstData {\n-    pub(crate) name: Option<Name>,\n-    pub(crate) type_ref: TypeRef,\n-}\n-\n-impl ConstData {\n-    pub fn name(&self) -> Option<&Name> {\n-        self.name.as_ref()\n-    }\n-\n-    pub fn type_ref(&self) -> &TypeRef {\n-        &self.type_ref\n-    }\n-\n-    pub(crate) fn const_data_query(\n-        db: &(impl DefDatabase + AstDatabase),\n-        konst: Const,\n-    ) -> Arc<ConstData> {\n-        let node = konst.source(db).value;\n-        const_data_for(&node)\n-    }\n-\n-    pub(crate) fn static_data_query(\n-        db: &(impl DefDatabase + AstDatabase),\n-        konst: Static,\n-    ) -> Arc<ConstData> {\n-        let node = konst.source(db).value;\n-        const_data_for(&node)\n-    }\n-}\n-\n-fn const_data_for<N: NameOwner + TypeAscriptionOwner>(node: &N) -> Arc<ConstData> {\n-    let name = node.name().map(|n| n.as_name());\n-    let type_ref = TypeRef::from_ast_opt(node.ascribed_type());\n-    let sig = ConstData { name, type_ref };\n-    Arc::new(sig)\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Static {\n     pub(crate) id: StaticId,\n@@ -734,10 +691,6 @@ impl Static {\n         Some(self.module(db).krate())\n     }\n \n-    pub fn data(self, db: &impl HirDatabase) -> Arc<ConstData> {\n-        db.static_data(self)\n-    }\n-\n     pub fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n         db.infer(self.into())\n     }"}, {"sha": "85d46b485f47e246456fe163faf6aaa1557b4007", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6d42db2e51e223c9be7b6ea234521ca6f93ee95a/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d42db2e51e223c9be7b6ea234521ca6f93ee95a/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=6d42db2e51e223c9be7b6ea234521ca6f93ee95a", "patch": "@@ -16,15 +16,15 @@ use crate::{\n         CallableDef, FnSig, GenericPredicate, InferenceResult, Namespace, Substs, Ty, TypableDef,\n         TypeCtor,\n     },\n-    Const, ConstData, Crate, DefWithBody, GenericDef, ImplBlock, Module, Static, StructField,\n-    Trait,\n+    Crate, DefWithBody, GenericDef, ImplBlock, Module, StructField, Trait,\n };\n \n pub use hir_def::db::{\n-    BodyQuery, BodyWithSourceMapQuery, CrateDefMapQuery, DefDatabase2, DefDatabase2Storage,\n-    EnumDataQuery, ExprScopesQuery, FunctionDataQuery, GenericParamsQuery, ImplDataQuery,\n-    InternDatabase, InternDatabaseStorage, RawItemsQuery, RawItemsWithSourceMapQuery,\n-    StructDataQuery, TraitDataQuery, TypeAliasDataQuery,\n+    BodyQuery, BodyWithSourceMapQuery, ConstDataQuery, CrateDefMapQuery, DefDatabase2,\n+    DefDatabase2Storage, EnumDataQuery, ExprScopesQuery, FunctionDataQuery, GenericParamsQuery,\n+    ImplDataQuery, InternDatabase, InternDatabaseStorage, RawItemsQuery,\n+    RawItemsWithSourceMapQuery, StaticDataQuery, StructDataQuery, TraitDataQuery,\n+    TypeAliasDataQuery,\n };\n pub use hir_expand::db::{\n     AstDatabase, AstDatabaseStorage, AstIdMapQuery, MacroArgQuery, MacroDefQuery, MacroExpandQuery,\n@@ -35,12 +35,6 @@ pub use hir_expand::db::{\n #[salsa::query_group(DefDatabaseStorage)]\n #[salsa::requires(AstDatabase)]\n pub trait DefDatabase: HirDebugDatabase + DefDatabase2 {\n-    #[salsa::invoke(ConstData::const_data_query)]\n-    fn const_data(&self, konst: Const) -> Arc<ConstData>;\n-\n-    #[salsa::invoke(ConstData::static_data_query)]\n-    fn static_data(&self, konst: Static) -> Arc<ConstData>;\n-\n     #[salsa::invoke(LangItems::module_lang_items_query)]\n     fn module_lang_items(&self, module: Module) -> Option<Arc<LangItems>>;\n "}, {"sha": "e164c9b3275fc17a1f889954db25335d528bf319", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d42db2e51e223c9be7b6ea234521ca6f93ee95a/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d42db2e51e223c9be7b6ea234521ca6f93ee95a/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=6d42db2e51e223c9be7b6ea234521ca6f93ee95a", "patch": "@@ -54,10 +54,10 @@ pub use crate::{\n         attrs::{AttrDef, HasAttrs},\n         docs::{DocDef, Docs, Documentation},\n         src::{HasBodySource, HasSource},\n-        Adt, AssocItem, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,\n-        EnumVariant, FieldSource, Function, GenericDef, GenericParam, HasBody, ImplBlock, Local,\n-        MacroDef, Module, ModuleDef, ModuleSource, ScopeDef, Static, Struct, StructField, Trait,\n-        TypeAlias, Union, VariantDef,\n+        Adt, AssocItem, Const, Container, Crate, CrateDependency, DefWithBody, Enum, EnumVariant,\n+        FieldSource, Function, GenericDef, GenericParam, HasBody, ImplBlock, Local, MacroDef,\n+        Module, ModuleDef, ModuleSource, ScopeDef, Static, Struct, StructField, Trait, TypeAlias,\n+        Union, VariantDef,\n     },\n     expr::ExprScopes,\n     from_source::FromSource,"}, {"sha": "471bdc3878c4360f7fba2b7b99abf0df4ebbbe7f", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6d42db2e51e223c9be7b6ea234521ca6f93ee95a/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d42db2e51e223c9be7b6ea234521ca6f93ee95a/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=6d42db2e51e223c9be7b6ea234521ca6f93ee95a", "patch": "@@ -22,7 +22,7 @@ use ena::unify::{InPlaceUnificationTable, NoError, UnifyKey, UnifyValue};\n use rustc_hash::FxHashMap;\n \n use hir_def::{\n-    data::FunctionData,\n+    data::{ConstData, FunctionData},\n     path::known,\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{Mutability, TypeRef},\n@@ -44,8 +44,8 @@ use crate::{\n     db::HirDatabase,\n     expr::{BindingAnnotation, Body, ExprId, PatId},\n     ty::infer::diagnostics::InferenceDiagnostic,\n-    Adt, AssocItem, ConstData, DefWithBody, FloatTy, Function, HasBody, IntTy, Path, StructField,\n-    Trait, VariantDef,\n+    Adt, AssocItem, DefWithBody, FloatTy, Function, HasBody, IntTy, Path, StructField, Trait,\n+    VariantDef,\n };\n \n macro_rules! ty_app {\n@@ -69,10 +69,10 @@ pub fn infer_query(db: &impl HirDatabase, def: DefWithBody) -> Arc<InferenceResu\n     let resolver = DefWithBodyId::from(def).resolver(db);\n     let mut ctx = InferenceContext::new(db, def, resolver);\n \n-    match def {\n-        DefWithBody::Const(ref c) => ctx.collect_const(&c.data(db)),\n-        DefWithBody::Function(ref f) => ctx.collect_fn(&db.function_data(f.id)),\n-        DefWithBody::Static(ref s) => ctx.collect_const(&s.data(db)),\n+    match &def {\n+        DefWithBody::Const(c) => ctx.collect_const(&db.const_data(c.id)),\n+        DefWithBody::Function(f) => ctx.collect_fn(&db.function_data(f.id)),\n+        DefWithBody::Static(s) => ctx.collect_const(&db.static_data(s.id)),\n     }\n \n     ctx.infer_body();\n@@ -560,7 +560,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     }\n \n     fn collect_const(&mut self, data: &ConstData) {\n-        self.return_ty = self.make_ty(data.type_ref());\n+        self.return_ty = self.make_ty(&data.type_ref);\n     }\n \n     fn collect_fn(&mut self, data: &FunctionData) {"}, {"sha": "2272510e8d391048b88fa603147ae9e8fd8b4009", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d42db2e51e223c9be7b6ea234521ca6f93ee95a/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d42db2e51e223c9be7b6ea234521ca6f93ee95a/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=6d42db2e51e223c9be7b6ea234521ca6f93ee95a", "patch": "@@ -639,18 +639,18 @@ fn type_for_fn(db: &impl HirDatabase, def: Function) -> Ty {\n \n /// Build the declared type of a const.\n fn type_for_const(db: &impl HirDatabase, def: Const) -> Ty {\n-    let data = def.data(db);\n+    let data = db.const_data(def.id);\n     let resolver = def.id.resolver(db);\n \n-    Ty::from_hir(db, &resolver, data.type_ref())\n+    Ty::from_hir(db, &resolver, &data.type_ref)\n }\n \n /// Build the declared type of a static.\n fn type_for_static(db: &impl HirDatabase, def: Static) -> Ty {\n-    let data = def.data(db);\n+    let data = db.static_data(def.id);\n     let resolver = def.id.resolver(db);\n \n-    Ty::from_hir(db, &resolver, data.type_ref())\n+    Ty::from_hir(db, &resolver, &data.type_ref)\n }\n \n /// Build the declared type of a static."}, {"sha": "91bac7415a647d981e9e263901aca8a86005ac2a", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6d42db2e51e223c9be7b6ea234521ca6f93ee95a/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d42db2e51e223c9be7b6ea234521ca6f93ee95a/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=6d42db2e51e223c9be7b6ea234521ca6f93ee95a", "patch": "@@ -11,8 +11,8 @@ use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n use crate::{\n     db::DefDatabase2,\n     type_ref::{Mutability, TypeRef},\n-    AssocItemId, AstItemDef, ConstLoc, ContainerId, FunctionId, FunctionLoc, HasSource, ImplId,\n-    Intern, Lookup, TraitId, TypeAliasId, TypeAliasLoc,\n+    AssocItemId, AstItemDef, ConstId, ConstLoc, ContainerId, FunctionId, FunctionLoc, HasSource,\n+    ImplId, Intern, Lookup, StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -190,3 +190,28 @@ impl ImplData {\n         Arc::new(res)\n     }\n }\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct ConstData {\n+    pub name: Option<Name>,\n+    pub type_ref: TypeRef,\n+}\n+\n+impl ConstData {\n+    pub(crate) fn const_data_query(db: &impl DefDatabase2, konst: ConstId) -> Arc<ConstData> {\n+        let node = konst.lookup(db).source(db).value;\n+        const_data_for(&node)\n+    }\n+\n+    pub(crate) fn static_data_query(db: &impl DefDatabase2, konst: StaticId) -> Arc<ConstData> {\n+        let node = konst.source(db).value;\n+        const_data_for(&node)\n+    }\n+}\n+\n+fn const_data_for<N: NameOwner + TypeAscriptionOwner>(node: &N) -> Arc<ConstData> {\n+    let name = node.name().map(|n| n.as_name());\n+    let type_ref = TypeRef::from_ast_opt(node.ascribed_type());\n+    let sig = ConstData { name, type_ref };\n+    Arc::new(sig)\n+}"}, {"sha": "2c660ab88bd73207d26e29dba6f968de86186a58", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d42db2e51e223c9be7b6ea234521ca6f93ee95a/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d42db2e51e223c9be7b6ea234521ca6f93ee95a/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=6d42db2e51e223c9be7b6ea234521ca6f93ee95a", "patch": "@@ -8,14 +8,14 @@ use ra_syntax::ast;\n use crate::{\n     adt::{EnumData, StructData},\n     body::{scope::ExprScopes, Body, BodySourceMap},\n-    data::{FunctionData, ImplData, TraitData, TypeAliasData},\n+    data::{ConstData, FunctionData, ImplData, TraitData, TypeAliasData},\n     generics::GenericParams,\n     nameres::{\n         raw::{ImportSourceMap, RawItems},\n         CrateDefMap,\n     },\n-    DefWithBodyId, EnumId, FunctionId, GenericDefId, ImplId, ItemLoc, StructOrUnionId, TraitId,\n-    TypeAliasId,\n+    ConstId, DefWithBodyId, EnumId, FunctionId, GenericDefId, ImplId, ItemLoc, StaticId,\n+    StructOrUnionId, TraitId, TypeAliasId,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n@@ -70,6 +70,12 @@ pub trait DefDatabase2: InternDatabase + AstDatabase {\n     #[salsa::invoke(FunctionData::fn_data_query)]\n     fn function_data(&self, func: FunctionId) -> Arc<FunctionData>;\n \n+    #[salsa::invoke(ConstData::const_data_query)]\n+    fn const_data(&self, konst: ConstId) -> Arc<ConstData>;\n+\n+    #[salsa::invoke(ConstData::static_data_query)]\n+    fn static_data(&self, konst: StaticId) -> Arc<ConstData>;\n+\n     #[salsa::invoke(Body::body_with_source_map_query)]\n     fn body_with_source_map(&self, def: DefWithBodyId) -> (Arc<Body>, Arc<BodySourceMap>);\n "}]}