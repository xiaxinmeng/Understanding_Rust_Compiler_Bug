{"sha": "787c458eeb20e447989124e2900e02e8e03b1c51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4N2M0NThlZWIyMGU0NDc5ODkxMjRlMjkwMGUwMmU4ZTAzYjFjNTE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-01-20T20:22:36Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-01-26T15:18:54Z"}, "message": "Don't use ExpnKind::descr to get the name of a bang macro.", "tree": {"sha": "f1da3ae15f2fcdd0ed5052c1ff66989e01c87997", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1da3ae15f2fcdd0ed5052c1ff66989e01c87997"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/787c458eeb20e447989124e2900e02e8e03b1c51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/787c458eeb20e447989124e2900e02e8e03b1c51", "html_url": "https://github.com/rust-lang/rust/commit/787c458eeb20e447989124e2900e02e8e03b1c51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/787c458eeb20e447989124e2900e02e8e03b1c51/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "698fcd38fa9548e64a2092ff48c9d15ceb57d40c", "url": "https://api.github.com/repos/rust-lang/rust/commits/698fcd38fa9548e64a2092ff48c9d15ceb57d40c", "html_url": "https://github.com/rust-lang/rust/commit/698fcd38fa9548e64a2092ff48c9d15ceb57d40c"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "8480c85075dd4dd968564b8b44948bafadd9c8e0", "filename": "src/librustc_lint/internal.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/787c458eeb20e447989124e2900e02e8e03b1c51/src%2Flibrustc_lint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/787c458eeb20e447989124e2900e02e8e03b1c51/src%2Flibrustc_lint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Finternal.rs?ref=787c458eeb20e447989124e2900e02e8e03b1c51", "patch": "@@ -6,6 +6,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir::{GenericArg, HirId, MutTy, Mutability, Path, PathSegment, QPath, Ty, TyKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n+use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::symbol::{sym, Symbol};\n use syntax::ast::{Ident, Item, ItemKind};\n \n@@ -226,8 +227,9 @@ impl EarlyLintPass for LintPassImpl {\n                 if last.ident.name == sym::LintPass {\n                     let expn_data = lint_pass.path.span.ctxt().outer_expn_data();\n                     let call_site = expn_data.call_site;\n-                    if expn_data.kind.descr() != sym::impl_lint_pass\n-                        && call_site.ctxt().outer_expn_data().kind.descr() != sym::declare_lint_pass\n+                    if expn_data.kind != ExpnKind::Macro(MacroKind::Bang, sym::impl_lint_pass)\n+                        && call_site.ctxt().outer_expn_data().kind\n+                            != ExpnKind::Macro(MacroKind::Bang, sym::declare_lint_pass)\n                     {\n                         cx.struct_span_lint(\n                             LINT_PASS_IMPL_WITHOUT_MACRO,"}, {"sha": "f44ce6f4eac2744d590f10736e5c8b997df6fb06", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/787c458eeb20e447989124e2900e02e8e03b1c51/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/787c458eeb20e447989124e2900e02e8e03b1c51/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=787c458eeb20e447989124e2900e02e8e03b1c51", "patch": "@@ -776,12 +776,19 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         let callsite_span = self.span_from_span(callsite);\n         let callee = span.source_callee()?;\n \n-        // Ignore attribute macros, their spans are usually mangled\n-        if let ExpnKind::Macro(MacroKind::Attr, _) | ExpnKind::Macro(MacroKind::Derive, _) =\n-            callee.kind\n-        {\n-            return None;\n-        }\n+        let mac_name = match callee.kind {\n+            ExpnKind::Macro(mac_kind, name) => match mac_kind {\n+                MacroKind::Bang => name,\n+\n+                // Ignore attribute macros, their spans are usually mangled\n+                // FIXME(eddyb) is this really the case anymore?\n+                MacroKind::Attr | MacroKind::Derive => return None,\n+            },\n+\n+            // These are not macros.\n+            // FIXME(eddyb) maybe there is a way to handle them usefully?\n+            ExpnKind::Root | ExpnKind::AstPass(_) | ExpnKind::Desugaring(_) => return None,\n+        };\n \n         // If the callee is an imported macro from an external crate, need to get\n         // the source span and name from the session, as their spans are localized\n@@ -799,7 +806,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         let callee_span = self.span_from_span(callee.def_site);\n         Some(MacroRef {\n             span: callsite_span,\n-            qualname: callee.kind.descr().to_string(), // FIXME: generate the real qualname\n+            qualname: mac_name.to_string(), // FIXME: generate the real qualname\n             callee_span,\n         })\n     }"}, {"sha": "366201d66c4c12d9a8b98b1f5f7e43de0a6a0908", "filename": "src/librustc_span/hygiene.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/787c458eeb20e447989124e2900e02e8e03b1c51/src%2Flibrustc_span%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/787c458eeb20e447989124e2900e02e8e03b1c51/src%2Flibrustc_span%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fhygiene.rs?ref=787c458eeb20e447989124e2900e02e8e03b1c51", "patch": "@@ -140,7 +140,9 @@ impl ExpnId {\n         loop {\n             let expn_data = self.expn_data();\n             // Stop going up the backtrace once include! is encountered\n-            if expn_data.is_root() || expn_data.kind.descr() == sym::include {\n+            if expn_data.is_root()\n+                || expn_data.kind == ExpnKind::Macro(MacroKind::Bang, sym::include)\n+            {\n                 break;\n             }\n             self = expn_data.call_site.ctxt().outer_expn();\n@@ -717,7 +719,7 @@ impl ExpnData {\n }\n \n /// Expansion kind.\n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable_Generic)]\n+#[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub enum ExpnKind {\n     /// No expansion, aka root expansion. Only `ExpnId::root()` has this kind.\n     Root,"}, {"sha": "fa046d2e7f14cda09d14230cc8c772e1565e0757", "filename": "src/tools/clippy", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy?ref=787c458eeb20e447989124e2900e02e8e03b1c51", "patch": "@@ -1 +1 @@\n-Subproject commit 3e74853d1f9893cf2a47f28b658711d8f9f97b6b\n+Subproject commit fa046d2e7f14cda09d14230cc8c772e1565e0757"}]}