{"sha": "0111fb00dac90d67f8d770ca2a25923cfd24e25d", "node_id": "C_kwDOAAsO6NoAKDAxMTFmYjAwZGFjOTBkNjdmOGQ3NzBjYTJhMjU5MjNjZmQyNGUyNWQ", "commit": {"author": {"name": "Bryanskiy", "email": "ivakin.kir@gmail.com", "date": "2022-08-14T14:05:17Z"}, "committer": {"name": "Bryanskiy", "email": "ivakin.kir@gmail.com", "date": "2022-08-31T11:23:07Z"}, "message": "add TestReachabilityVisitor", "tree": {"sha": "1b3435bb88e8a50236e49ddfa1a349eaf8604494", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b3435bb88e8a50236e49ddfa1a349eaf8604494"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0111fb00dac90d67f8d770ca2a25923cfd24e25d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0111fb00dac90d67f8d770ca2a25923cfd24e25d", "html_url": "https://github.com/rust-lang/rust/commit/0111fb00dac90d67f8d770ca2a25923cfd24e25d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0111fb00dac90d67f8d770ca2a25923cfd24e25d/comments", "author": {"login": "Bryanskiy", "id": 65131002, "node_id": "MDQ6VXNlcjY1MTMxMDAy", "avatar_url": "https://avatars.githubusercontent.com/u/65131002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bryanskiy", "html_url": "https://github.com/Bryanskiy", "followers_url": "https://api.github.com/users/Bryanskiy/followers", "following_url": "https://api.github.com/users/Bryanskiy/following{/other_user}", "gists_url": "https://api.github.com/users/Bryanskiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bryanskiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bryanskiy/subscriptions", "organizations_url": "https://api.github.com/users/Bryanskiy/orgs", "repos_url": "https://api.github.com/users/Bryanskiy/repos", "events_url": "https://api.github.com/users/Bryanskiy/events{/privacy}", "received_events_url": "https://api.github.com/users/Bryanskiy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Bryanskiy", "id": 65131002, "node_id": "MDQ6VXNlcjY1MTMxMDAy", "avatar_url": "https://avatars.githubusercontent.com/u/65131002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bryanskiy", "html_url": "https://github.com/Bryanskiy", "followers_url": "https://api.github.com/users/Bryanskiy/followers", "following_url": "https://api.github.com/users/Bryanskiy/following{/other_user}", "gists_url": "https://api.github.com/users/Bryanskiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bryanskiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bryanskiy/subscriptions", "organizations_url": "https://api.github.com/users/Bryanskiy/orgs", "repos_url": "https://api.github.com/users/Bryanskiy/repos", "events_url": "https://api.github.com/users/Bryanskiy/events{/privacy}", "received_events_url": "https://api.github.com/users/Bryanskiy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10804672c221882cfd1c94809ad09846a35fe49d", "url": "https://api.github.com/repos/rust-lang/rust/commits/10804672c221882cfd1c94809ad09846a35fe49d", "html_url": "https://github.com/rust-lang/rust/commit/10804672c221882cfd1c94809ad09846a35fe49d"}], "stats": {"total": 248, "additions": 246, "deletions": 2}, "files": [{"sha": "da987152ff66030dcdbba447d15dce67950c45b9", "filename": "compiler/rustc_error_messages/locales/en-US/privacy.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0111fb00dac90d67f8d770ca2a25923cfd24e25d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/0111fb00dac90d67f8d770ca2a25923cfd24e25d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl?ref=0111fb00dac90d67f8d770ca2a25923cfd24e25d", "patch": "@@ -11,6 +11,8 @@ privacy_in_public_interface = {$vis_descr} {$kind} `{$descr}` in public interfac\n     .label = can't leak {$vis_descr} {$kind}\n     .visibility_label = `{$descr}` declared as {$vis_descr}\n \n+privacy_report_access_level = {$descr}\n+\n privacy_from_private_dep_in_public_interface =\n     {$kind} `{$descr}` from private dependency '{$krate}' in public interface\n "}, {"sha": "0c88379d498994845bee2bc7e019617e471a096b", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0111fb00dac90d67f8d770ca2a25923cfd24e25d/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0111fb00dac90d67f8d770ca2a25923cfd24e25d/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=0111fb00dac90d67f8d770ca2a25923cfd24e25d", "patch": "@@ -758,6 +758,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Internal attributes, Testing:\n     // ==========================================================================\n \n+    rustc_attr!(TEST, rustc_access_level, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_outlives, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_capture_analysis, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_insignificant_dtor, Normal, template!(Word), WarnFollowing),"}, {"sha": "63f83f8965ec52c8a56e15123549eea3369dfef0", "filename": "compiler/rustc_privacy/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0111fb00dac90d67f8d770ca2a25923cfd24e25d/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0111fb00dac90d67f8d770ca2a25923cfd24e25d/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs?ref=0111fb00dac90d67f8d770ca2a25923cfd24e25d", "patch": "@@ -75,6 +75,14 @@ pub struct InPublicInterface<'a> {\n     pub vis_span: Span,\n }\n \n+#[derive(SessionDiagnostic)]\n+#[diag(privacy::report_access_level)]\n+pub struct ReportAccessLevel {\n+    #[primary_span]\n+    pub span: Span,\n+    pub descr: String,\n+}\n+\n #[derive(LintDiagnostic)]\n #[diag(privacy::from_private_dep_in_public_interface)]\n pub struct FromPrivateDependencyInPublicInterface<'a> {"}, {"sha": "075a1411f02b43e14e166fa31428cb50e8204a59", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 60, "deletions": 2, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0111fb00dac90d67f8d770ca2a25923cfd24e25d/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0111fb00dac90d67f8d770ca2a25923cfd24e25d/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=0111fb00dac90d67f8d770ca2a25923cfd24e25d", "patch": "@@ -30,7 +30,7 @@ use rustc_middle::ty::{self, Const, DefIdTree, GenericParamDefKind};\n use rustc_middle::ty::{TraitRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n use rustc_session::lint;\n use rustc_span::hygiene::Transparency;\n-use rustc_span::symbol::{kw, Ident};\n+use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n \n use std::marker::PhantomData;\n@@ -39,7 +39,8 @@ use std::{cmp, fmt, mem};\n \n use errors::{\n     FieldIsPrivate, FieldIsPrivateLabel, FromPrivateDependencyInPublicInterface, InPublicInterface,\n-    InPublicInterfaceTraits, ItemIsPrivate, PrivateInPublicLint, UnnamedItemIsPrivate,\n+    InPublicInterfaceTraits, ItemIsPrivate, PrivateInPublicLint, ReportAccessLevel,\n+    UnnamedItemIsPrivate,\n };\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -904,6 +905,60 @@ impl<'tcx> DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx>\n     }\n }\n \n+////////////////////////////////////////////////////////////////////////////////\n+/// Visitor, used for AccessLevels table checking\n+////////////////////////////////////////////////////////////////////////////////\n+pub struct TestReachabilityVisitor<'tcx, 'a> {\n+    tcx: TyCtxt<'tcx>,\n+    access_levels: &'a AccessLevels,\n+}\n+\n+impl<'tcx, 'a> TestReachabilityVisitor<'tcx, 'a> {\n+    fn access_level_diagnostic(&mut self, def_id: LocalDefId) {\n+        if self.tcx.has_attr(def_id.to_def_id(), sym::rustc_access_level) {\n+            let access_level = format!(\"{:?}\", self.access_levels.map.get(&def_id));\n+            let span = self.tcx.def_span(def_id.to_def_id());\n+            self.tcx.sess.emit_err(ReportAccessLevel { span, descr: access_level });\n+        }\n+    }\n+}\n+\n+impl<'tcx, 'a> Visitor<'tcx> for TestReachabilityVisitor<'tcx, 'a> {\n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n+        self.access_level_diagnostic(item.def_id);\n+\n+        match item.kind {\n+            hir::ItemKind::Enum(ref def, _) => {\n+                for variant in def.variants.iter() {\n+                    let variant_id = self.tcx.hir().local_def_id(variant.id);\n+                    self.access_level_diagnostic(variant_id);\n+                    for field in variant.data.fields() {\n+                        let def_id = self.tcx.hir().local_def_id(field.hir_id);\n+                        self.access_level_diagnostic(def_id);\n+                    }\n+                }\n+            }\n+            hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {\n+                for field in def.fields() {\n+                    let def_id = self.tcx.hir().local_def_id(field.hir_id);\n+                    self.access_level_diagnostic(def_id);\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    fn visit_trait_item(&mut self, item: &'tcx hir::TraitItem<'tcx>) {\n+        self.access_level_diagnostic(item.def_id);\n+    }\n+    fn visit_impl_item(&mut self, item: &'tcx hir::ImplItem<'tcx>) {\n+        self.access_level_diagnostic(item.def_id);\n+    }\n+    fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {\n+        self.access_level_diagnostic(item.def_id);\n+    }\n+}\n+\n //////////////////////////////////////////////////////////////////////////////////////\n /// Name privacy visitor, checks privacy and reports violations.\n /// Most of name privacy checks are performed during the main resolution phase,\n@@ -2042,6 +2097,9 @@ fn privacy_access_levels(tcx: TyCtxt<'_>, (): ()) -> &AccessLevels {\n         }\n     }\n \n+    let mut check_visitor = TestReachabilityVisitor { tcx, access_levels: &visitor.access_levels };\n+    tcx.hir().visit_all_item_likes_in_crate(&mut check_visitor);\n+\n     tcx.arena.alloc(visitor.access_levels)\n }\n "}, {"sha": "f854395ff814941b6114d2779804c9ff1937a386", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0111fb00dac90d67f8d770ca2a25923cfd24e25d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0111fb00dac90d67f8d770ca2a25923cfd24e25d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=0111fb00dac90d67f8d770ca2a25923cfd24e25d", "patch": "@@ -1206,6 +1206,7 @@ symbols! {\n         rust_eh_unregister_frames,\n         rust_oom,\n         rustc,\n+        rustc_access_level,\n         rustc_allocator,\n         rustc_allocator_nounwind,\n         rustc_allocator_zeroed,"}, {"sha": "d51d2b57267b6f6686692e252dffac0801642f18", "filename": "src/test/ui/privacy/access_levels.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0111fb00dac90d67f8d770ca2a25923cfd24e25d/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0111fb00dac90d67f8d770ca2a25923cfd24e25d/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs?ref=0111fb00dac90d67f8d770ca2a25923cfd24e25d", "patch": "@@ -0,0 +1,49 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_access_level] mod outer { //~ ERROR None\n+    #[rustc_access_level] pub mod inner { //~ ERROR Some(Exported)\n+        #[rustc_access_level]\n+        extern \"C\" { //~ ERROR Some(Exported)\n+            #[rustc_access_level] static a: u8; //~ ERROR None\n+            #[rustc_access_level] pub fn b(); //~ ERROR Some(Exported)\n+        }\n+        #[rustc_access_level]\n+        pub trait Trait { //~ ERROR Some(Exported)\n+            #[rustc_access_level] const A: i32; //~ ERROR Some(Exported)\n+            #[rustc_access_level] type B; //~ ERROR Some(Exported)\n+        }\n+\n+        #[rustc_access_level]\n+        pub struct Struct { //~ ERROR Some(Exported)\n+            #[rustc_access_level] a: u8, //~ ERROR None\n+            #[rustc_access_level] pub b: u8, //~ ERROR Some(Exported)\n+        }\n+\n+        #[rustc_access_level]\n+        pub union Union { //~ ERROR Some(Exported)\n+            #[rustc_access_level] a: u8, //~ ERROR None\n+            #[rustc_access_level] pub b: u8, //~ ERROR Some(Exported)\n+        }\n+\n+        #[rustc_access_level]\n+        pub enum Enum { //~ ERROR Some(Exported)\n+            #[rustc_access_level] A( //~ ERROR Some(Exported)\n+                #[rustc_access_level] Struct, //~ ERROR Some(Exported)\n+                #[rustc_access_level] Union,  //~ ERROR Some(Exported)\n+            ),\n+        }\n+    }\n+\n+    #[rustc_access_level] macro_rules! none_macro { //~ ERROR None\n+        () => {};\n+    }\n+\n+    #[macro_export]\n+    #[rustc_access_level] macro_rules! public_macro { //~ ERROR Some(Public)\n+        () => {};\n+    }\n+}\n+\n+pub use outer::inner;\n+\n+fn main() {}"}, {"sha": "f326293c384a5ae824c03a00cfc400a0c6cd2b0e", "filename": "src/test/ui/privacy/access_levels.stderr", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/0111fb00dac90d67f8d770ca2a25923cfd24e25d/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0111fb00dac90d67f8d770ca2a25923cfd24e25d/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr?ref=0111fb00dac90d67f8d770ca2a25923cfd24e25d", "patch": "@@ -0,0 +1,125 @@\n+error: None\n+  --> $DIR/access_levels.rs:3:23\n+   |\n+LL | #[rustc_access_level] mod outer {\n+   |                       ^^^^^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:4:27\n+   |\n+LL |     #[rustc_access_level] pub mod inner {\n+   |                           ^^^^^^^^^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:6:9\n+   |\n+LL | /         extern \"C\" {\n+LL | |             #[rustc_access_level] static a: u8;\n+LL | |             #[rustc_access_level] pub fn b();\n+LL | |         }\n+   | |_________^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:11:9\n+   |\n+LL |         pub trait Trait {\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:17:9\n+   |\n+LL |         pub struct Struct {\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: None\n+  --> $DIR/access_levels.rs:18:35\n+   |\n+LL |             #[rustc_access_level] a: u8,\n+   |                                   ^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:19:35\n+   |\n+LL |             #[rustc_access_level] pub b: u8,\n+   |                                   ^^^^^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:23:9\n+   |\n+LL |         pub union Union {\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: None\n+  --> $DIR/access_levels.rs:24:35\n+   |\n+LL |             #[rustc_access_level] a: u8,\n+   |                                   ^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:25:35\n+   |\n+LL |             #[rustc_access_level] pub b: u8,\n+   |                                   ^^^^^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:29:9\n+   |\n+LL |         pub enum Enum {\n+   |         ^^^^^^^^^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:30:35\n+   |\n+LL |             #[rustc_access_level] A(\n+   |                                   ^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:31:39\n+   |\n+LL |                 #[rustc_access_level] Struct,\n+   |                                       ^^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:32:39\n+   |\n+LL |                 #[rustc_access_level] Union,\n+   |                                       ^^^^^\n+\n+error: None\n+  --> $DIR/access_levels.rs:37:27\n+   |\n+LL |     #[rustc_access_level] macro_rules! none_macro {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Some(Public)\n+  --> $DIR/access_levels.rs:42:27\n+   |\n+LL |     #[rustc_access_level] macro_rules! public_macro {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:12:35\n+   |\n+LL |             #[rustc_access_level] const A: i32;\n+   |                                   ^^^^^^^^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:13:35\n+   |\n+LL |             #[rustc_access_level] type B;\n+   |                                   ^^^^^^\n+\n+error: None\n+  --> $DIR/access_levels.rs:7:35\n+   |\n+LL |             #[rustc_access_level] static a: u8;\n+   |                                   ^^^^^^^^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:8:35\n+   |\n+LL |             #[rustc_access_level] pub fn b();\n+   |                                   ^^^^^^^^^^\n+\n+error: aborting due to 20 previous errors\n+"}]}