{"sha": "68fec4b3fe3a86a01e39d31d05a8438c07845aba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZmVjNGIzZmUzYTg2YTAxZTM5ZDMxZDA1YTg0MzhjMDc4NDVhYmE=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-18T02:20:05Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-18T14:49:56Z"}, "message": "Use conditional compilation properly and work with `OsStr`s instead", "tree": {"sha": "05121679fdde9a2e027d29004bbf6f2c4e55a0ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05121679fdde9a2e027d29004bbf6f2c4e55a0ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68fec4b3fe3a86a01e39d31d05a8438c07845aba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68fec4b3fe3a86a01e39d31d05a8438c07845aba", "html_url": "https://github.com/rust-lang/rust/commit/68fec4b3fe3a86a01e39d31d05a8438c07845aba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68fec4b3fe3a86a01e39d31d05a8438c07845aba/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1241abbec473827acf8dbbfff8f79fe08117b967", "url": "https://api.github.com/repos/rust-lang/rust/commits/1241abbec473827acf8dbbfff8f79fe08117b967", "html_url": "https://github.com/rust-lang/rust/commit/1241abbec473827acf8dbbfff8f79fe08117b967"}], "stats": {"total": 63, "additions": 41, "deletions": 22}, "files": [{"sha": "32edb107f36e14207bcf8614146943ef54c5693d", "filename": "src/helpers.rs", "status": "modified", "additions": 39, "deletions": 21, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/68fec4b3fe3a86a01e39d31d05a8438c07845aba/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fec4b3fe3a86a01e39d31d05a8438c07845aba/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=68fec4b3fe3a86a01e39d31d05a8438c07845aba", "patch": "@@ -1,5 +1,5 @@\n use std::mem;\n-use std::ffi::OsString;\n+use std::ffi::{OsStr, OsString};\n \n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc::mir;\n@@ -347,40 +347,58 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n \n     fn read_os_string(&mut self, scalar: Scalar<Tag>) -> InterpResult<'tcx, OsString> {\n-        let bytes = self.eval_context_mut().memory.read_c_str(scalar)?.to_vec();\n-        if cfg!(unix) {\n-            Ok(std::os::unix::ffi::OsStringExt::from_vec(bytes))\n-        } else {\n-            std::str::from_utf8(&bytes)\n-                .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", bytes).into())\n-                .map(OsString::from)\n-        }\n+        let bytes = self.eval_context_mut().memory.read_c_str(scalar)?;\n+        Ok(bytes_to_os_str(bytes)?.into())\n     }\n \n-    fn write_os_string(&mut self, os_string: OsString, ptr: Pointer<Tag>, size: u64) -> InterpResult<'tcx> {\n-        let mut bytes = if cfg!(unix) {\n-            std::os::unix::ffi::OsStringExt::into_vec(os_string)\n-        } else {\n-            os_string\n-                .into_string()\n-                .map_err(|os_string| err_unsup_format!(\"{:?} is not a valid utf-8 string\", os_string))?\n-                .into_bytes()\n-        };\n+    fn write_os_str(&mut self, os_str: &OsStr, ptr: Pointer<Tag>, size: u64) -> InterpResult<'tcx> {\n+        let bytes = os_str_to_bytes(os_str)?;\n         // If `size` is smaller or equal than `bytes.len()`, writing `bytes` plus the required null\n         // terminator to memory using the `ptr` pointer would cause an overflow.\n         if (bytes.len() as u64) < size {\n-            // We add a `/0` terminator\n-            bytes.push(0);\n             let this = self.eval_context_mut();\n             let tcx = &{ this.tcx.tcx };\n             // This is ok because the buffer was strictly larger than `bytes`, so after adding the\n             // null terminator, the buffer size is larger or equal to `bytes.len()`, meaning that\n             // `bytes` actually fit inside tbe buffer.\n             this.memory\n                 .get_mut(ptr.alloc_id)?\n-                .write_bytes(tcx, ptr, &bytes)\n+                .write_bytes(tcx, ptr, &bytes)?;\n+            // We write the `/0` terminator\n+            let tail_ptr = ptr.offset(Size::from_bytes(bytes.len() as u64 + 1), this)?;\n+            this.memory\n+                .get_mut(ptr.alloc_id)?\n+                .write_bytes(tcx, tail_ptr, b\"0\")\n         } else {\n             throw_unsup_format!(\"OsString is larger than destination\")\n         }\n     }\n }\n+\n+#[cfg(target_os = \"unix\")]\n+fn bytes_to_os_str<'tcx, 'a>(bytes: &'a[u8]) -> InterpResult<'tcx, &'a OsStr> {\n+    Ok(std::os::unix::ffi::OsStringExt::from_bytes(bytes))\n+}\n+\n+#[cfg(target_os = \"unix\")]\n+fn os_str_to_bytes<'tcx, 'a>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n+    std::os::unix::ffi::OsStringExt::into_bytes(os_str)\n+}\n+\n+// On non-unix platforms the best we can do to transform bytes from/to OS strings is to do the\n+// intermediate transformation into strings. Which invalidates non-utf8 paths that are actually\n+// valid.\n+#[cfg(not(target_os = \"unix\"))]\n+fn os_str_to_bytes<'tcx, 'a>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n+    os_str\n+        .to_str()\n+        .map(|s| s.as_bytes())\n+        .ok_or_else(|| err_unsup_format!(\"{:?} is not a valid utf-8 string\", os_str).into())\n+}\n+\n+#[cfg(not(target_os = \"unix\"))]\n+fn bytes_to_os_str<'tcx, 'a>(bytes: &'a[u8]) -> InterpResult<'tcx, &'a OsStr> {\n+    let s = std::str::from_utf8(bytes)\n+        .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", bytes))?;\n+    Ok(&OsStr::new(s))\n+}"}, {"sha": "b2e0709557d548e823b0354768d501d1dd4f83b9", "filename": "src/shims/env.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68fec4b3fe3a86a01e39d31d05a8438c07845aba/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68fec4b3fe3a86a01e39d31d05a8438c07845aba/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=68fec4b3fe3a86a01e39d31d05a8438c07845aba", "patch": "@@ -1,4 +1,5 @@\n use std::collections::HashMap;\n+use std::ffi::OsString;\n use std::env;\n \n use crate::stacked_borrows::Tag;\n@@ -127,7 +128,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // If we cannot get the current directory, we return null\n         match env::current_dir() {\n             Ok(cwd) => {\n-                if this.write_os_string(cwd.into(), buf, size).is_ok() {\n+                if this.write_os_str(&OsString::from(cwd), buf, size).is_ok() {\n                     return Ok(Scalar::Ptr(buf));\n                 }\n                 let erange = this.eval_libc(\"ERANGE\")?;"}]}