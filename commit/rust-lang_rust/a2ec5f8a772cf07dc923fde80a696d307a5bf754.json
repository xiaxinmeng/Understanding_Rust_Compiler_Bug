{"sha": "a2ec5f8a772cf07dc923fde80a696d307a5bf754", "node_id": "C_kwDOAAsO6NoAKGEyZWM1ZjhhNzcyY2YwN2RjOTIzZmRlODBhNjk2ZDMwN2E1YmY3NTQ", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-06-05T08:48:34Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-06-05T08:48:34Z"}, "message": "Add rustdoc test to ensure that #109449 is working as expected", "tree": {"sha": "093ee07b3e41a476f9d0937d9ad40e9635cd15e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/093ee07b3e41a476f9d0937d9ad40e9635cd15e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2ec5f8a772cf07dc923fde80a696d307a5bf754", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2ec5f8a772cf07dc923fde80a696d307a5bf754", "html_url": "https://github.com/rust-lang/rust/commit/a2ec5f8a772cf07dc923fde80a696d307a5bf754", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2ec5f8a772cf07dc923fde80a696d307a5bf754/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51f714c8c5021fe25442e46798b1cbef2f2249ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/51f714c8c5021fe25442e46798b1cbef2f2249ed", "html_url": "https://github.com/rust-lang/rust/commit/51f714c8c5021fe25442e46798b1cbef2f2249ed"}], "stats": {"total": 143, "additions": 143, "deletions": 0}, "files": [{"sha": "b0c22540180487a644bb4168db6640f8b432efbd", "filename": "tests/rustdoc/issue-109449-doc-hidden-reexports.rs", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/a2ec5f8a772cf07dc923fde80a696d307a5bf754/tests%2Frustdoc%2Fissue-109449-doc-hidden-reexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ec5f8a772cf07dc923fde80a696d307a5bf754/tests%2Frustdoc%2Fissue-109449-doc-hidden-reexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-109449-doc-hidden-reexports.rs?ref=a2ec5f8a772cf07dc923fde80a696d307a5bf754", "patch": "@@ -0,0 +1,143 @@\n+// Test to enforce rules over re-exports inlining from\n+// <https://github.com/rust-lang/rust/issues/109449>.\n+\n+#![crate_name = \"foo\"]\n+\n+mod private_module {\n+    #[doc(hidden)]\n+    pub struct Public;\n+    #[doc(hidden)]\n+    pub type Bar = ();\n+}\n+\n+#[doc(hidden)]\n+mod module {\n+    pub struct Public2;\n+    pub type Bar2 = ();\n+}\n+\n+#[doc(hidden)]\n+pub type Bar3 = ();\n+#[doc(hidden)]\n+pub struct FooFoo;\n+\n+// Checking that re-exporting a `#[doc(hidden)]` item will NOT inline it.\n+pub mod single_reexport {\n+    // @has 'foo/single_reexport/index.html'\n+\n+    // First we check that we have 4 type aliases.\n+    // @count - '//*[@id=\"main-content\"]/*[@class=\"item-table\"]//code' 4\n+\n+    // Then we check that we have the correct link for each re-export.\n+\n+    // @!has - '//*[@href=\"struct.Foo.html\"]' 'Foo'\n+    // @has - '//*[@id=\"reexport.Foo\"]/code' 'pub use crate::private_module::Public as Foo;'\n+    pub use crate::private_module::Public as Foo;\n+    // @!has - '//*[@href=\"type.Foo2.html\"]' 'Foo2'\n+    // @has - '//*[@id=\"reexport.Foo2\"]/code' 'pub use crate::private_module::Bar as Foo2;'\n+    pub use crate::private_module::Bar as Foo2;\n+    // @!has - '//*[@href=\"type.Yo.html\"]' 'Yo'\n+    // @has - '//*[@id=\"reexport.Yo\"]/code' 'pub use crate::Bar3 as Yo;'\n+    pub use crate::Bar3 as Yo;\n+    // @!has - '//*[@href=\"struct.Yo2.html\"]' 'Yo2'\n+    // @has - '//*[@id=\"reexport.Yo2\"]/code' 'pub use crate::FooFoo as Yo2;'\n+    pub use crate::FooFoo as Yo2;\n+\n+    // Checking that each file is also created as expected.\n+    // @!has 'foo/single_reexport/struct.Foo.html'\n+    // @!has 'foo/single_reexport/type.Foo2.html'\n+    // @!has 'foo/single_reexport/type.Yo.html'\n+    // @!has 'foo/single_reexport/struct.Yo2.html'\n+}\n+\n+// However, re-exporting an item inheriting `#[doc(hidden)]` will inline it.\n+pub mod single_reexport_inherit_hidden {\n+    // @has 'foo/single_reexport_inherit_hidden/index.html'\n+\n+    // @has - '//*[@href=\"struct.Foo3.html\"]' 'Foo3'\n+    pub use crate::module::Public2 as Foo3;\n+    // @has - '//*[@href=\"type.Foo4.html\"]' 'Foo4'\n+    pub use crate::module::Bar2 as Foo4;\n+\n+    // @has 'foo/single_reexport_inherit_hidden/struct.Foo3.html'\n+    // @has 'foo/single_reexport_inherit_hidden/type.Foo4.html'\n+}\n+\n+pub mod single_reexport_no_inline {\n+    // First we ensure that we only have re-exports and no inlined items.\n+    // @has 'foo/single_reexport_no_inline/index.html'\n+    // @count - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 1\n+    // @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Re-exports'\n+\n+    // Now we check that we don't have links to the items, just `pub use`.\n+    // @has - '//*[@id=\"main-content\"]//*' 'pub use crate::private_module::Public as XFoo;'\n+    // @!has - '//*[@id=\"main-content\"]//a' 'XFoo'\n+    #[doc(no_inline)]\n+    pub use crate::private_module::Public as XFoo;\n+    // @has - '//*[@id=\"main-content\"]//*' 'pub use crate::private_module::Bar as Foo2;'\n+    // @!has - '//*[@id=\"main-content\"]//a' 'Foo2'\n+    #[doc(no_inline)]\n+    pub use crate::private_module::Bar as Foo2;\n+    // @has - '//*[@id=\"main-content\"]//*' 'pub use crate::Bar3 as Yo;'\n+    // @!has - '//*[@id=\"main-content\"]//a' 'Yo'\n+    #[doc(no_inline)]\n+    pub use crate::Bar3 as Yo;\n+    // @has - '//*[@id=\"main-content\"]//*' 'pub use crate::FooFoo as Yo2;'\n+    // @!has - '//*[@id=\"main-content\"]//a' 'Yo2'\n+    #[doc(no_inline)]\n+    pub use crate::FooFoo as Yo2;\n+    // @has - '//*[@id=\"main-content\"]//*' 'pub use crate::module::Public2 as Foo3;'\n+    // @!has - '//*[@id=\"main-content\"]//a' 'Foo3'\n+    #[doc(no_inline)]\n+    pub use crate::module::Public2 as Foo3;\n+    // @has - '//*[@id=\"main-content\"]//*' 'pub use crate::module::Bar2 as Foo4;'\n+    // @!has - '//*[@id=\"main-content\"]//a' 'Foo4'\n+    #[doc(no_inline)]\n+    pub use crate::module::Bar2 as Foo4;\n+}\n+\n+// Checking that glob re-exports don't inline `#[doc(hidden)]` items.\n+pub mod glob_reexport {\n+    // With glob re-exports, we don't inline `#[doc(hidden)]` items so only `module` items\n+    // should be inlined.\n+    // @has 'foo/glob_reexport/index.html'\n+    // @count - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 3\n+    // @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Re-exports'\n+    // @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Structs'\n+    // @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Type Definitions'\n+\n+    // Now we check we have 1 re-export and 2 inlined items.\n+    // If not item from a glob re-export is visible, we don't show the re-export.\n+    // @!has - '//*[@id=\"main-content\"]//*' 'pub use crate::private_module::*;'\n+    pub use crate::private_module::*;\n+    // @has - '//*[@id=\"main-content\"]//*' 'pub use crate::*;'\n+    pub use crate::*;\n+    // This one should be inlined.\n+    // @!has - '//*[@id=\"main-content\"]//*' 'pub use crate::module::*;'\n+    // @has - '//*[@id=\"main-content\"]//a[@href=\"struct.Public2.html\"]' 'Public2'\n+    // @has - '//*[@id=\"main-content\"]//a[@href=\"type.Bar2.html\"]' 'Bar2'\n+    // And we check that the two files were created too.\n+    // @has 'foo/glob_reexport/struct.Public2.html'\n+    // @has 'foo/glob_reexport/type.Bar2.html'\n+    pub use crate::module::*;\n+}\n+\n+mod private {\n+    /// Original.\n+    pub struct Bar3;\n+}\n+\n+// Checking that `#[doc(hidden)]` re-exports documentation isn't generated.\n+pub mod doc_hidden_reexport {\n+    // @has 'foo/doc_hidden_reexport/index.html'\n+    // Ensure there is only one item in this page and that it's a struct.\n+    // @count - '//*[@class=\"item-name\"]' 1\n+    // @has - '//a[@class=\"struct\"]' 'Reexport'\n+    // Check that the `#[doc(hidden)]` re-export's attributes are not taken into account.\n+    // @has - '//*[@class=\"desc docblock-short\"]' 'Visible. Original.'\n+    /// Hidden.\n+    #[doc(hidden)]\n+    pub use crate::private::Bar3;\n+    /// Visible.\n+    pub use self::Bar3 as Reexport;\n+}"}]}