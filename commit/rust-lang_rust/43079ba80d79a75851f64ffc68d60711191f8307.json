{"sha": "43079ba80d79a75851f64ffc68d60711191f8307", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMDc5YmE4MGQ3OWE3NTg1MWY2NGZmYzY4ZDYwNzExMTkxZjgzMDc=", "commit": {"author": {"name": "Timo Freiberg", "email": "timo.freiberg@gmail.com", "date": "2020-06-22T19:29:11Z"}, "committer": {"name": "Timo Freiberg", "email": "timo.freiberg@gmail.com", "date": "2020-07-10T17:16:41Z"}, "message": "Correctly generate new struct field in file containing struct def", "tree": {"sha": "109569233febbaae97bd8a738c902c95b1241c9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/109569233febbaae97bd8a738c902c95b1241c9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43079ba80d79a75851f64ffc68d60711191f8307", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43079ba80d79a75851f64ffc68d60711191f8307", "html_url": "https://github.com/rust-lang/rust/commit/43079ba80d79a75851f64ffc68d60711191f8307", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43079ba80d79a75851f64ffc68d60711191f8307/comments", "author": {"login": "TimoFreiberg", "id": 5281645, "node_id": "MDQ6VXNlcjUyODE2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5281645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimoFreiberg", "html_url": "https://github.com/TimoFreiberg", "followers_url": "https://api.github.com/users/TimoFreiberg/followers", "following_url": "https://api.github.com/users/TimoFreiberg/following{/other_user}", "gists_url": "https://api.github.com/users/TimoFreiberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimoFreiberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimoFreiberg/subscriptions", "organizations_url": "https://api.github.com/users/TimoFreiberg/orgs", "repos_url": "https://api.github.com/users/TimoFreiberg/repos", "events_url": "https://api.github.com/users/TimoFreiberg/events{/privacy}", "received_events_url": "https://api.github.com/users/TimoFreiberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimoFreiberg", "id": 5281645, "node_id": "MDQ6VXNlcjUyODE2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5281645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimoFreiberg", "html_url": "https://github.com/TimoFreiberg", "followers_url": "https://api.github.com/users/TimoFreiberg/followers", "following_url": "https://api.github.com/users/TimoFreiberg/following{/other_user}", "gists_url": "https://api.github.com/users/TimoFreiberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimoFreiberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimoFreiberg/subscriptions", "organizations_url": "https://api.github.com/users/TimoFreiberg/orgs", "repos_url": "https://api.github.com/users/TimoFreiberg/repos", "events_url": "https://api.github.com/users/TimoFreiberg/events{/privacy}", "received_events_url": "https://api.github.com/users/TimoFreiberg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1eed627d909e897309b3d50654a592505654147", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1eed627d909e897309b3d50654a592505654147", "html_url": "https://github.com/rust-lang/rust/commit/c1eed627d909e897309b3d50654a592505654147"}], "stats": {"total": 58, "additions": 55, "deletions": 3}, "files": [{"sha": "3afe5381a08851d3380eec52387815f346db580f", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 55, "deletions": 3, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/43079ba80d79a75851f64ffc68d60711191f8307/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43079ba80d79a75851f64ffc68d60711191f8307/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=43079ba80d79a75851f64ffc68d60711191f8307", "patch": "@@ -131,33 +131,38 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n \n fn missing_struct_field_fix(\n     sema: &Semantics<RootDatabase>,\n-    file_id: FileId,\n+    usage_file_id: FileId,\n     d: &hir::diagnostics::NoSuchField,\n ) -> Option<Fix> {\n     let record_expr = sema.ast(d);\n \n     let record_lit = ast::RecordLit::cast(record_expr.syntax().parent()?.parent()?)?;\n     let def_id = sema.resolve_variant(record_lit)?;\n     let module;\n+    let def_file_id;\n     let record_fields = match VariantDef::from(def_id) {\n         VariantDef::Struct(s) => {\n             module = s.module(sema.db);\n             let source = s.source(sema.db);\n+            def_file_id = source.file_id;\n             let fields = source.value.field_def_list()?;\n             record_field_def_list(fields)?\n         }\n         VariantDef::Union(u) => {\n             module = u.module(sema.db);\n             let source = u.source(sema.db);\n+            def_file_id = source.file_id;\n             source.value.record_field_def_list()?\n         }\n         VariantDef::EnumVariant(e) => {\n             module = e.module(sema.db);\n             let source = e.source(sema.db);\n+            def_file_id = source.file_id;\n             let fields = source.value.field_def_list()?;\n             record_field_def_list(fields)?\n         }\n     };\n+    let def_file_id = def_file_id.original_file(sema.db);\n \n     let new_field_type = sema.type_of_expr(&record_expr.expr()?)?;\n     if new_field_type.is_unknown() {\n@@ -172,15 +177,19 @@ fn missing_struct_field_fix(\n     let last_field_syntax = last_field.syntax();\n     let indent = IndentLevel::from_node(last_field_syntax);\n \n-    let mut new_field = format!(\"\\n{}{}\", indent, new_field);\n+    let mut new_field = new_field.to_string();\n+    if usage_file_id != def_file_id {\n+        new_field = format!(\"pub(crate) {}\", new_field);\n+    }\n+    new_field = format!(\"\\n{}{}\", indent, new_field);\n \n     let needs_comma = !last_field_syntax.to_string().ends_with(\",\");\n     if needs_comma {\n         new_field = format!(\",{}\", new_field);\n     }\n \n     let source_change = SourceFileEdit {\n-        file_id,\n+        file_id: def_file_id,\n         edit: TextEdit::insert(last_field_syntax.text_range().end(), new_field),\n     };\n     let fix = Fix::new(\"Create field\", source_change.into());\n@@ -309,6 +318,25 @@ mod tests {\n         );\n     }\n \n+    /// Checks that a diagnostic applies to the file containing the `<|>` cursor marker\n+    /// which has a fix that can apply to other files.\n+    fn check_apply_diagnostic_fix_in_other_file(ra_fixture_before: &str, ra_fixture_after: &str) {\n+        let ra_fixture_after = &trim_indent(ra_fixture_after);\n+        let (analysis, file_pos) = analysis_and_position(ra_fixture_before);\n+        let current_file_id = file_pos.file_id;\n+        let diagnostic = analysis.diagnostics(current_file_id).unwrap().pop().unwrap();\n+        let mut fix = diagnostic.fix.unwrap();\n+        let edit = fix.source_change.source_file_edits.pop().unwrap();\n+        let changed_file_id = edit.file_id;\n+        let before = analysis.file_text(changed_file_id).unwrap();\n+        let actual = {\n+            let mut actual = before.to_string();\n+            edit.edit.apply(&mut actual);\n+            actual\n+        };\n+        assert_eq_text!(ra_fixture_after, &actual);\n+    }\n+\n     /// Takes a multi-file input fixture with annotated cursor position and checks that no diagnostics\n     /// apply to the file containing the cursor.\n     fn check_no_diagnostics(ra_fixture: &str) {\n@@ -732,4 +760,28 @@ struct Foo {\n \",\n         )\n     }\n+\n+    #[test]\n+    fn test_add_field_in_other_file_from_usage() {\n+        check_apply_diagnostic_fix_in_other_file(\n+            r\"\n+            //- /main.rs\n+            mod foo;\n+\n+            fn main() {\n+                <|>foo::Foo { bar: 3, baz: false};\n+            }\n+            //- /foo.rs\n+            struct Foo {\n+                bar: i32\n+            }\n+            \",\n+            r\"\n+            struct Foo {\n+                bar: i32,\n+                pub(crate) baz: bool\n+            }\n+            \",\n+        )\n+    }\n }"}]}