{"sha": "c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxOTE2YWRjN2UxNmJkN2VjZDNjYThkYmJlOTg1ZWM3NWQwYzgyNWE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-11-25T00:52:49Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-11-25T00:52:49Z"}, "message": "rustc: Parse type-parametric functions", "tree": {"sha": "d69d2e25a0a016c8c798d9a416b628d9f907a2d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d69d2e25a0a016c8c798d9a416b628d9f907a2d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a", "html_url": "https://github.com/rust-lang/rust/commit/c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80d099c59ab1a9ce4ef24087c2c17c42b686e66c", "url": "https://api.github.com/repos/rust-lang/rust/commits/80d099c59ab1a9ce4ef24087c2c17c42b686e66c", "html_url": "https://github.com/rust-lang/rust/commit/80d099c59ab1a9ce4ef24087c2c17c42b686e66c"}], "stats": {"total": 56, "additions": 38, "deletions": 18}, "files": [{"sha": "3bc2fe167ecef5f1a1dead1fb2177040a4674ef9", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a", "patch": "@@ -7,6 +7,7 @@ import util.common.spanned;\n import util.common.ty_mach;\n \n type ident = str;\n+type ty_param = ident;\n \n type name_ = rec(ident ident, vec[@ty] types);\n type name = spanned[name_];\n@@ -167,7 +168,7 @@ type variant = rec(str name, vec[@ty] args);\n \n type item = spanned[item_];\n tag item_ {\n-    item_fn(ident, _fn, def_id, ann);\n+    item_fn(ident, _fn, vec[ty_param], def_id, ann);\n     item_mod(ident, _mod, def_id);\n     item_ty(ident, @ty, def_id, ann);\n     item_tag(ident, vec[variant], def_id);"}, {"sha": "66529c69c15848b881b86be58bd15e666283c1a5", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a", "patch": "@@ -1020,7 +1020,7 @@ impure fn parse_block(parser p) -> ast.block {\n                     }\n                     case (ast.decl_item(?it)) {\n                         alt (it.node) {\n-                            case (ast.item_fn(?i, _, _, _)) {\n+                            case (ast.item_fn(?i, _, _, _, _)) {\n                                 index.insert(i, u-1u);\n                             }\n                             case (ast.item_mod(?i, _, _)) {\n@@ -1043,6 +1043,14 @@ impure fn parse_item_fn(parser p) -> tup(ast.ident, @ast.item) {\n     auto lo = p.get_span();\n     expect(p, token.FN);\n     auto id = parse_ident(p);\n+\n+    let vec[ast.ty_param] ty_params = vec();\n+    if (p.peek() == token.LBRACKET) {\n+        auto pg = parse_ident;  // FIXME: pass as lval directly\n+        ty_params = parse_seq[ast.ty_param](token.LBRACKET, token.RBRACKET,\n+                                            some(token.COMMA), pg, p).node;\n+    }\n+\n     auto pf = parse_arg;\n     let util.common.spanned[vec[ast.arg]] inputs =\n         // FIXME: passing parse_arg as an lval doesn't work at the\n@@ -1067,7 +1075,7 @@ impure fn parse_item_fn(parser p) -> tup(ast.ident, @ast.item) {\n                         output = output,\n                         body = body);\n \n-    auto item = ast.item_fn(id, f, p.next_def_id(), ast.ann_none);\n+    auto item = ast.item_fn(id, f, ty_params, p.next_def_id(), ast.ann_none);\n     ret tup(id, @spanned(lo, body.span, item));\n }\n "}, {"sha": "2afbc8b9a93d70066c418d38c9bf3bda0f768141", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a", "patch": "@@ -158,7 +158,9 @@ type ast_fold[ENV] =\n \n      // Item folds.\n      (fn(&ENV e, &span sp, ident ident,\n-         &ast._fn f, def_id id, ann a) -> @item)  fold_item_fn,\n+         &ast._fn f,\n+         vec[ast.ty_param] ty_params,\n+         def_id id, ann a) -> @item)              fold_item_fn,\n \n      (fn(&ENV e, &span sp, ident ident,\n          &ast._mod m, def_id id) -> @item)        fold_item_mod,\n@@ -537,9 +539,9 @@ fn fold_item[ENV](&ENV env, ast_fold[ENV] fld, @item i) -> @item {\n \n     alt (i.node) {\n \n-        case (ast.item_fn(?ident, ?ff, ?id, ?ann)) {\n+        case (ast.item_fn(?ident, ?ff, ?tps, ?id, ?ann)) {\n             let ast._fn ff_ = fold_fn[ENV](env_, fld, ff);\n-            ret fld.fold_item_fn(env_, i.span, ident, ff_, id, ann);\n+            ret fld.fold_item_fn(env_, i.span, ident, ff_, tps, id, ann);\n         }\n \n         case (ast.item_mod(?ident, ?mm, ?id)) {\n@@ -798,8 +800,9 @@ fn identity_fold_stmt_expr[ENV](&ENV e, &span sp, @expr x) -> @stmt {\n // Item identities.\n \n fn identity_fold_item_fn[ENV](&ENV e, &span sp, ident i,\n-                              &ast._fn f, def_id id, ann a) -> @item {\n-    ret @respan(sp, ast.item_fn(i, f, id, a));\n+                              &ast._fn f, vec[ast.ty_param] ty_params,\n+                              def_id id, ann a) -> @item {\n+    ret @respan(sp, ast.item_fn(i, f, ty_params, id, a));\n }\n \n fn identity_fold_item_mod[ENV](&ENV e, &span sp, ident i,\n@@ -933,7 +936,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n                           = bind identity_fold_stmt_check_expr[ENV](_,_,_),\n          fold_stmt_expr   = bind identity_fold_stmt_expr[ENV](_,_,_),\n \n-         fold_item_fn   = bind identity_fold_item_fn[ENV](_,_,_,_,_,_),\n+         fold_item_fn   = bind identity_fold_item_fn[ENV](_,_,_,_,_,_,_),\n          fold_item_mod  = bind identity_fold_item_mod[ENV](_,_,_,_,_),\n          fold_item_ty   = bind identity_fold_item_ty[ENV](_,_,_,_,_,_),\n          fold_item_tag  = bind identity_fold_item_tag[ENV](_,_,_,_,_),"}, {"sha": "f3957b3b4c4082db8dd6c6b5ff8d0ba6085cfd1b", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a", "patch": "@@ -29,7 +29,7 @@ fn lookup_name(&env e, ast.ident i) -> option.t[def] {\n \n     fn found_def_item(@ast.item i) -> option.t[def] {\n         alt (i.node) {\n-            case (ast.item_fn(_, _, ?id, _)) {\n+            case (ast.item_fn(_, _, _, ?id, _)) {\n                 ret some[def](ast.def_fn(id));\n             }\n             case (ast.item_mod(_, _, ?id)) {\n@@ -76,7 +76,7 @@ fn lookup_name(&env e, ast.ident i) -> option.t[def] {\n \n             case (scope_item(?it)) {\n                 alt (it.node) {\n-                    case (ast.item_fn(_, ?f, _, _)) {\n+                    case (ast.item_fn(_, ?f, _, _, _)) {\n                         for (ast.arg a in f.inputs) {\n                             if (_str.eq(a.ident, i)) {\n                                 ret some[def](ast.def_arg(a.id));"}, {"sha": "1972a434fa1c9fe4292c16c4dfb5336f23deea29", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a", "patch": "@@ -1295,7 +1295,7 @@ impure fn trans_fn(@crate_ctxt cx, &ast._fn f, ast.def_id fid) {\n \n impure fn trans_item(@crate_ctxt cx, &ast.item item) {\n     alt (item.node) {\n-        case (ast.item_fn(?name, ?f, ?fid, _)) {\n+        case (ast.item_fn(?name, ?f, _, ?fid, _)) {\n             auto sub_cx = @rec(path=cx.path + \".\" + name with *cx);\n             trans_fn(sub_cx, f, fid);\n         }\n@@ -1315,7 +1315,8 @@ impure fn trans_mod(@crate_ctxt cx, &ast._mod m) {\n \n fn collect_item(&@crate_ctxt cx, @ast.item i) -> @crate_ctxt {\n     alt (i.node) {\n-        case (ast.item_fn(?name, ?f, ?fid, ?ann)) {\n+        case (ast.item_fn(?name, ?f, _, ?fid, ?ann)) {\n+            // TODO: type-params\n             cx.items.insert(fid, i);\n             auto llty = node_type(cx, ann);\n             let str s = cx.names.next(\"_rust_fn\") + \".\" + name;"}, {"sha": "c7bd36b797d2ff27f3929353b4ed22c9901ab6ae", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=c1916adc7e16bd7ecd3ca8dbbe985ec75d0c825a", "patch": "@@ -310,7 +310,9 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n                            @ty_table item_to_ty,\n                            @ast.item it) -> @ty {\n         alt (it.node) {\n-            case (ast.item_fn(?ident, ?fn_info, ?def_id, _)) {\n+            case (ast.item_fn(?ident, ?fn_info, _, ?def_id, _)) {\n+                // TODO: handle ty-params\n+\n                 auto f = bind trans_fn_arg_to_ty(id_to_ty_item, item_to_ty,\n                                                  _);\n                 auto input_tys = _vec.map[ast.arg,arg](f, fn_info.inputs);\n@@ -362,9 +364,12 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n     for (@ast.item it in module.items) {\n         let ast.item_ result;\n         alt (it.node) {\n-            case (ast.item_fn(?ident, ?fn_info, ?def_id, _)) {\n+            case (ast.item_fn(?ident, ?fn_info, ?tps, ?def_id, _)) {\n+                // TODO: type-params\n+\n                 auto t = trans_ty_item_to_ty(id_to_ty_item, item_to_ty, it);\n-                result = ast.item_fn(ident, fn_info, def_id, ast.ann_type(t));\n+                result = ast.item_fn(ident, fn_info, tps, def_id,\n+                                     ast.ann_type(t));\n             }\n             case (ast.item_ty(?ident, ?referent_ty, ?def_id, _)) {\n                 auto t = trans_ty_item_to_ty(id_to_ty_item, item_to_ty, it);\n@@ -1274,7 +1279,8 @@ fn check_block(&fn_ctxt fcx, &ast.block block) -> ast.block {\n }\n \n fn check_fn(&@crate_ctxt ccx, &span sp, ast.ident ident, &ast._fn f,\n-            ast.def_id id, ast.ann ann) -> @ast.item {\n+            vec[ast.ty_param] ty_params, ast.def_id id,\n+            ast.ann ann) -> @ast.item {\n     auto local_ty_table = @common.new_def_hash[@ty]();\n \n     // Store the type of each argument in the table.\n@@ -1296,7 +1302,8 @@ fn check_fn(&@crate_ctxt ccx, &span sp, ast.ident ident, &ast._fn f,\n     auto block_t = check_block(fcx, f.body);\n     auto block_wb = writeback(fcx, block_t);\n     auto fn_t = rec(inputs=f.inputs, output=f.output, body=block_wb);\n-    ret @fold.respan[ast.item_](sp, ast.item_fn(ident, fn_t, id, fn_ann));\n+    auto item = ast.item_fn(ident, fn_t, ty_params, id, fn_ann);\n+    ret @fold.respan[ast.item_](sp, item);\n }\n \n fn check_crate(session.session sess, @ast.crate crate) -> @ast.crate {"}]}